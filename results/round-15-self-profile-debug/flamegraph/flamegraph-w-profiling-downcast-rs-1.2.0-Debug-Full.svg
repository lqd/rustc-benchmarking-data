<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,257,712 samples, 6.18%)</title><rect x="1.6085%" y="245" width="6.1837%" height="15" fill="rgb(227,0,7)"/><text x="1.8585%" y="255.50">LLVM_pas..</text></g><g><title>implied_outlives_bounds (84,102 samples, 0.23%)</title><rect x="9.8198%" y="197" width="0.2303%" height="15" fill="rgb(217,0,24)"/><text x="10.0698%" y="207.50"></text></g><g><title>needs_drop_raw (160,382 samples, 0.44%)</title><rect x="10.8580%" y="133" width="0.4393%" height="15" fill="rgb(221,193,54)"/><text x="11.1080%" y="143.50"></text></g><g><title>is_copy_raw (152,072 samples, 0.42%)</title><rect x="10.8808%" y="117" width="0.4165%" height="15" fill="rgb(248,212,6)"/><text x="11.1308%" y="127.50"></text></g><g><title>evaluate_obligation (133,502 samples, 0.37%)</title><rect x="10.9316%" y="101" width="0.3657%" height="15" fill="rgb(208,68,35)"/><text x="11.1816%" y="111.50"></text></g><g><title>trait_impls_of (102,272 samples, 0.28%)</title><rect x="11.0172%" y="85" width="0.2801%" height="15" fill="rgb(232,128,0)"/><text x="11.2672%" y="95.50"></text></g><g><title>mir_const (391,583 samples, 1.07%)</title><rect x="10.2812%" y="181" width="1.0725%" height="15" fill="rgb(207,160,47)"/><text x="10.5312%" y="191.50"></text></g><g><title>unsafety_check_result (327,003 samples, 0.90%)</title><rect x="10.4580%" y="165" width="0.8956%" height="15" fill="rgb(228,23,34)"/><text x="10.7080%" y="175.50"></text></g><g><title>mir_built (290,883 samples, 0.80%)</title><rect x="10.5570%" y="149" width="0.7967%" height="15" fill="rgb(218,30,26)"/><text x="10.8070%" y="159.50"></text></g><g><title>mir_promoted (476,534 samples, 1.31%)</title><rect x="10.0644%" y="197" width="1.3052%" height="15" fill="rgb(220,122,19)"/><text x="10.3144%" y="207.50"></text></g><g><title>MIR_borrow_checking (1,474,735 samples, 4.04%)</title><rect x="7.9725%" y="229" width="4.0392%" height="15" fill="rgb(250,228,42)"/><text x="8.2225%" y="239.50">MIR_..</text></g><g><title>mir_borrowck (1,466,235 samples, 4.02%)</title><rect x="7.9958%" y="213" width="4.0159%" height="15" fill="rgb(240,193,28)"/><text x="8.2458%" y="223.50">mir_..</text></g><g><title>type_op_prove_predicate (234,431 samples, 0.64%)</title><rect x="11.3696%" y="197" width="0.6421%" height="15" fill="rgb(216,20,37)"/><text x="11.6196%" y="207.50"></text></g><g><title>hir_module_items (60,410 samples, 0.17%)</title><rect x="12.0196%" y="229" width="0.1655%" height="15" fill="rgb(206,188,39)"/><text x="12.2696%" y="239.50"></text></g><g><title>get_lang_items (37,770 samples, 0.10%)</title><rect x="12.4167%" y="181" width="0.1034%" height="15" fill="rgb(217,207,13)"/><text x="12.6667%" y="191.50"></text></g><g><title>should_inherit_track_caller (45,542 samples, 0.12%)</title><rect x="12.5202%" y="181" width="0.1247%" height="15" fill="rgb(231,73,38)"/><text x="12.7702%" y="191.50"></text></g><g><title>codegen_fn_attrs (123,862 samples, 0.34%)</title><rect x="12.3388%" y="197" width="0.3392%" height="15" fill="rgb(225,20,46)"/><text x="12.5888%" y="207.50"></text></g><g><title>check_mod_attrs (168,192 samples, 0.46%)</title><rect x="12.2179%" y="213" width="0.4607%" height="15" fill="rgb(210,31,41)"/><text x="12.4679%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (77,770 samples, 0.21%)</title><rect x="12.7462%" y="213" width="0.2130%" height="15" fill="rgb(221,200,47)"/><text x="12.9962%" y="223.50"></text></g><g><title>misc_checking_1 (301,483 samples, 0.83%)</title><rect x="12.1857%" y="229" width="0.8257%" height="15" fill="rgb(226,26,5)"/><text x="12.4357%" y="239.50"></text></g><g><title>misc_checking_2 (79,151 samples, 0.22%)</title><rect x="13.0114%" y="229" width="0.2168%" height="15" fill="rgb(249,33,26)"/><text x="13.2614%" y="239.50"></text></g><g><title>match_checking (54,861 samples, 0.15%)</title><rect x="13.0780%" y="213" width="0.1503%" height="15" fill="rgb(235,183,28)"/><text x="13.3280%" y="223.50"></text></g><g><title>check_match (51,481 samples, 0.14%)</title><rect x="13.0872%" y="197" width="0.1410%" height="15" fill="rgb(221,5,38)"/><text x="13.3372%" y="207.50"></text></g><g><title>death_checking (77,370 samples, 0.21%)</title><rect x="13.3281%" y="213" width="0.2119%" height="15" fill="rgb(247,18,42)"/><text x="13.5781%" y="223.50"></text></g><g><title>crate_lints (106,521 samples, 0.29%)</title><rect x="13.5432%" y="197" width="0.2918%" height="15" fill="rgb(241,131,45)"/><text x="13.7932%" y="207.50"></text></g><g><title>param_env (55,760 samples, 0.15%)</title><rect x="13.6823%" y="181" width="0.1527%" height="15" fill="rgb(249,31,29)"/><text x="13.9323%" y="191.50"></text></g><g><title>lint_checking (132,032 samples, 0.36%)</title><rect x="13.5401%" y="213" width="0.3616%" height="15" fill="rgb(225,111,53)"/><text x="13.7901%" y="223.50"></text></g><g><title>privacy_checking_modules (132,961 samples, 0.36%)</title><rect x="14.0012%" y="213" width="0.3642%" height="15" fill="rgb(238,160,17)"/><text x="14.2512%" y="223.50"></text></g><g><title>check_mod_privacy (131,951 samples, 0.36%)</title><rect x="14.0039%" y="197" width="0.3614%" height="15" fill="rgb(214,148,48)"/><text x="14.2539%" y="207.50"></text></g><g><title>misc_checking_3 (424,474 samples, 1.16%)</title><rect x="13.2282%" y="229" width="1.1626%" height="15" fill="rgb(232,36,49)"/><text x="13.4782%" y="239.50"></text></g><g><title>coherence_checking (48,071 samples, 0.13%)</title><rect x="14.4392%" y="213" width="0.1317%" height="15" fill="rgb(209,103,24)"/><text x="14.6892%" y="223.50"></text></g><g><title>adt_def (73,031 samples, 0.20%)</title><rect x="16.4201%" y="149" width="0.2000%" height="15" fill="rgb(229,88,8)"/><text x="16.6701%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (71,841 samples, 0.20%)</title><rect x="16.4234%" y="133" width="0.1968%" height="15" fill="rgb(213,181,19)"/><text x="16.6734%" y="143.50"></text></g><g><title>item_attrs (61,501 samples, 0.17%)</title><rect x="16.4517%" y="117" width="0.1684%" height="15" fill="rgb(254,191,54)"/><text x="16.7017%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,161 samples, 0.16%)</title><rect x="16.4554%" y="101" width="0.1648%" height="15" fill="rgb(241,83,37)"/><text x="16.7054%" y="111.50"></text></g><g><title>adt_sized_constraint (86,761 samples, 0.24%)</title><rect x="16.3998%" y="165" width="0.2376%" height="15" fill="rgb(233,36,39)"/><text x="16.6498%" y="175.50"></text></g><g><title>adt_def (161,921 samples, 0.44%)</title><rect x="16.9519%" y="117" width="0.4435%" height="15" fill="rgb(226,3,54)"/><text x="17.2019%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (160,951 samples, 0.44%)</title><rect x="16.9546%" y="101" width="0.4408%" height="15" fill="rgb(245,192,40)"/><text x="17.2046%" y="111.50"></text></g><g><title>item_attrs (39,180 samples, 0.11%)</title><rect x="17.2881%" y="85" width="0.1073%" height="15" fill="rgb(238,167,29)"/><text x="17.5381%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (38,010 samples, 0.10%)</title><rect x="17.2913%" y="69" width="0.1041%" height="15" fill="rgb(232,182,51)"/><text x="17.5413%" y="79.50"></text></g><g><title>impl_parent (104,021 samples, 0.28%)</title><rect x="17.6377%" y="53" width="0.2849%" height="15" fill="rgb(231,60,39)"/><text x="17.8877%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (83,341 samples, 0.23%)</title><rect x="17.6943%" y="37" width="0.2283%" height="15" fill="rgb(208,69,12)"/><text x="17.9443%" y="47.50"></text></g><g><title>impl_trait_ref (299,512 samples, 0.82%)</title><rect x="17.9226%" y="53" width="0.8203%" height="15" fill="rgb(235,93,37)"/><text x="18.1726%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (279,162 samples, 0.76%)</title><rect x="17.9783%" y="37" width="0.7646%" height="15" fill="rgb(213,116,39)"/><text x="18.2283%" y="47.50"></text></g><g><title>coherent_trait (509,715 samples, 1.40%)</title><rect x="17.4134%" y="85" width="1.3961%" height="15" fill="rgb(222,207,29)"/><text x="17.6634%" y="95.50"></text></g><g><title>specialization_graph_of (508,205 samples, 1.39%)</title><rect x="17.4175%" y="69" width="1.3919%" height="15" fill="rgb(206,96,30)"/><text x="17.6675%" y="79.50"></text></g><g><title>adt_destructor (520,745 samples, 1.43%)</title><rect x="17.3954%" y="117" width="1.4263%" height="15" fill="rgb(218,138,4)"/><text x="17.6454%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (519,425 samples, 1.42%)</title><rect x="17.3991%" y="101" width="1.4227%" height="15" fill="rgb(250,191,14)"/><text x="17.6491%" y="111.50"></text></g><g><title>adt_def (61,051 samples, 0.17%)</title><rect x="18.8314%" y="101" width="0.1672%" height="15" fill="rgb(239,60,40)"/><text x="19.0814%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (60,571 samples, 0.17%)</title><rect x="18.8327%" y="85" width="0.1659%" height="15" fill="rgb(206,27,48)"/><text x="19.0827%" y="95.50"></text></g><g><title>item_attrs (56,251 samples, 0.15%)</title><rect x="18.8446%" y="69" width="0.1541%" height="15" fill="rgb(225,35,8)"/><text x="19.0946%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (55,751 samples, 0.15%)</title><rect x="18.8460%" y="53" width="0.1527%" height="15" fill="rgb(250,213,24)"/><text x="19.0960%" y="63.50"></text></g><g><title>adt_dtorck_constraint (68,351 samples, 0.19%)</title><rect x="18.8217%" y="117" width="0.1872%" height="15" fill="rgb(247,123,22)"/><text x="19.0717%" y="127.50"></text></g><g><title>adt_dtorck_constraint (789,938 samples, 2.16%)</title><rect x="16.9162%" y="133" width="2.1636%" height="15" fill="rgb(231,138,38)"/><text x="17.1662%" y="143.50">a..</text></g><g><title>dropck_outlives (917,149 samples, 2.51%)</title><rect x="16.6374%" y="165" width="2.5120%" height="15" fill="rgb(231,145,46)"/><text x="16.8874%" y="175.50">dr..</text></g><g><title>adt_dtorck_constraint (860,499 samples, 2.36%)</title><rect x="16.7926%" y="149" width="2.3568%" height="15" fill="rgb(251,118,11)"/><text x="17.0426%" y="159.50">a..</text></g><g><title>item_bodies_checking (1,768,788 samples, 4.84%)</title><rect x="14.5988%" y="213" width="4.8446%" height="15" fill="rgb(217,147,25)"/><text x="14.8488%" y="223.50">item_b..</text></g><g><title>typeck_item_bodies (1,767,318 samples, 4.84%)</title><rect x="14.6028%" y="197" width="4.8405%" height="15" fill="rgb(247,81,37)"/><text x="14.8528%" y="207.50">typeck..</text></g><g><title>typeck (1,760,338 samples, 4.82%)</title><rect x="14.6219%" y="181" width="4.8214%" height="15" fill="rgb(209,12,38)"/><text x="14.8719%" y="191.50">typeck</text></g><g><title>item_types_checking (106,741 samples, 0.29%)</title><rect x="19.4433%" y="213" width="0.2924%" height="15" fill="rgb(227,1,9)"/><text x="19.6933%" y="223.50"></text></g><g><title>check_mod_item_types (105,351 samples, 0.29%)</title><rect x="19.4472%" y="197" width="0.2885%" height="15" fill="rgb(248,47,43)"/><text x="19.6972%" y="207.50"></text></g><g><title>fn_sig (225,993 samples, 0.62%)</title><rect x="19.8838%" y="181" width="0.6190%" height="15" fill="rgb(221,10,30)"/><text x="20.1338%" y="191.50"></text></g><g><title>generics_of (68,810 samples, 0.19%)</title><rect x="20.5027%" y="181" width="0.1885%" height="15" fill="rgb(210,229,1)"/><text x="20.7527%" y="191.50"></text></g><g><title>late_bound_vars_map (40,120 samples, 0.11%)</title><rect x="20.8402%" y="133" width="0.1099%" height="15" fill="rgb(222,148,37)"/><text x="21.0902%" y="143.50"></text></g><g><title>resolve_lifetimes (38,190 samples, 0.10%)</title><rect x="20.8455%" y="117" width="0.1046%" height="15" fill="rgb(234,67,33)"/><text x="21.0955%" y="127.50"></text></g><g><title>explicit_predicates_of (81,791 samples, 0.22%)</title><rect x="20.7503%" y="149" width="0.2240%" height="15" fill="rgb(247,98,35)"/><text x="21.0003%" y="159.50"></text></g><g><title>predicates_of (106,271 samples, 0.29%)</title><rect x="20.6971%" y="181" width="0.2911%" height="15" fill="rgb(247,138,52)"/><text x="20.9471%" y="191.50"></text></g><g><title>predicates_defined_on (98,551 samples, 0.27%)</title><rect x="20.7183%" y="165" width="0.2699%" height="15" fill="rgb(213,79,30)"/><text x="20.9683%" y="175.50"></text></g><g><title>super_predicates_of (93,591 samples, 0.26%)</title><rect x="20.9882%" y="181" width="0.2563%" height="15" fill="rgb(246,177,23)"/><text x="21.2382%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (86,741 samples, 0.24%)</title><rect x="21.0070%" y="165" width="0.2376%" height="15" fill="rgb(230,62,27)"/><text x="21.2570%" y="175.50"></text></g><g><title>type_collecting (564,975 samples, 1.55%)</title><rect x="19.7386%" y="213" width="1.5474%" height="15" fill="rgb(216,154,8)"/><text x="19.9886%" y="223.50"></text></g><g><title>collect_mod_item_types (559,555 samples, 1.53%)</title><rect x="19.7535%" y="197" width="1.5326%" height="15" fill="rgb(244,35,45)"/><text x="20.0035%" y="207.50"></text></g><g><title>evaluate_obligation (95,392 samples, 0.26%)</title><rect x="22.0365%" y="181" width="0.2613%" height="15" fill="rgb(251,115,12)"/><text x="22.2865%" y="191.50"></text></g><g><title>implied_outlives_bounds (61,021 samples, 0.17%)</title><rect x="22.2978%" y="181" width="0.1671%" height="15" fill="rgb(240,54,50)"/><text x="22.5478%" y="191.50"></text></g><g><title>param_env (39,410 samples, 0.11%)</title><rect x="22.4649%" y="181" width="0.1079%" height="15" fill="rgb(233,84,52)"/><text x="22.7149%" y="191.50"></text></g><g><title>check_impl_item_well_formed (457,905 samples, 1.25%)</title><rect x="21.3676%" y="197" width="1.2542%" height="15" fill="rgb(207,117,47)"/><text x="21.6176%" y="207.50"></text></g><g><title>param_env (72,690 samples, 0.20%)</title><rect x="23.4968%" y="181" width="0.1991%" height="15" fill="rgb(249,43,39)"/><text x="23.7468%" y="191.50"></text></g><g><title>predicates_of (37,090 samples, 0.10%)</title><rect x="23.6959%" y="181" width="0.1016%" height="15" fill="rgb(209,38,44)"/><text x="23.9459%" y="191.50"></text></g><g><title>check_item_well_formed (494,304 samples, 1.35%)</title><rect x="22.6217%" y="197" width="1.3539%" height="15" fill="rgb(236,212,23)"/><text x="22.8717%" y="207.50"></text></g><g><title>trait_impls_of (61,560 samples, 0.17%)</title><rect x="23.8070%" y="181" width="0.1686%" height="15" fill="rgb(242,79,21)"/><text x="24.0570%" y="191.50"></text></g><g><title>evaluate_obligation (281,501 samples, 0.77%)</title><rect x="24.8690%" y="181" width="0.7710%" height="15" fill="rgb(211,96,35)"/><text x="25.1190%" y="191.50"></text></g><g><title>trait_impls_of (47,691 samples, 0.13%)</title><rect x="25.5094%" y="165" width="0.1306%" height="15" fill="rgb(253,215,40)"/><text x="25.7594%" y="175.50"></text></g><g><title>implied_outlives_bounds (89,140 samples, 0.24%)</title><rect x="25.6792%" y="181" width="0.2441%" height="15" fill="rgb(211,81,21)"/><text x="25.9292%" y="191.50"></text></g><g><title>evaluate_obligation (74,310 samples, 0.20%)</title><rect x="26.0333%" y="165" width="0.2035%" height="15" fill="rgb(208,190,38)"/><text x="26.2833%" y="175.50"></text></g><g><title>layout_of (39,871 samples, 0.11%)</title><rect x="26.2694%" y="165" width="0.1092%" height="15" fill="rgb(235,213,38)"/><text x="26.5194%" y="175.50"></text></g><g><title>object_safety_violations (178,613 samples, 0.49%)</title><rect x="25.9233%" y="181" width="0.4892%" height="15" fill="rgb(237,122,38)"/><text x="26.1733%" y="191.50"></text></g><g><title>param_env (55,612 samples, 0.15%)</title><rect x="26.4125%" y="181" width="0.1523%" height="15" fill="rgb(244,218,35)"/><text x="26.6625%" y="191.50"></text></g><g><title>analysis (6,875,060 samples, 18.83%)</title><rect x="7.7921%" y="245" width="18.8302%" height="15" fill="rgb(240,68,47)"/><text x="8.0421%" y="255.50">analysis</text></g><g><title>type_check_crate (4,465,825 samples, 12.23%)</title><rect x="14.3908%" y="229" width="12.2315%" height="15" fill="rgb(210,16,53)"/><text x="14.6408%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,947,660 samples, 5.33%)</title><rect x="21.2879%" y="213" width="5.3345%" height="15" fill="rgb(235,124,12)"/><text x="21.5379%" y="223.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (966,341 samples, 2.65%)</title><rect x="23.9756%" y="197" width="2.6467%" height="15" fill="rgb(224,169,11)"/><text x="24.2256%" y="207.50">ch..</text></g><g><title>codegen_module (231,482 samples, 0.63%)</title><rect x="27.8436%" y="229" width="0.6340%" height="15" fill="rgb(250,166,2)"/><text x="28.0936%" y="239.50"></text></g><g><title>codegen_crate (730,037 samples, 2.00%)</title><rect x="26.6498%" y="245" width="1.9995%" height="15" fill="rgb(242,216,29)"/><text x="26.8998%" y="255.50">c..</text></g><g><title>LLVM_module_codegen (1,998,070 samples, 5.47%)</title><rect x="28.6763%" y="229" width="5.4725%" height="15" fill="rgb(230,116,27)"/><text x="28.9263%" y="239.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (1,966,480 samples, 5.39%)</title><rect x="28.7628%" y="213" width="5.3860%" height="15" fill="rgb(228,99,48)"/><text x="29.0128%" y="223.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (2,141,311 samples, 5.86%)</title><rect x="28.6493%" y="245" width="5.8649%" height="15" fill="rgb(253,11,6)"/><text x="28.8993%" y="255.50">codegen..</text></g><g><title>LLVM_module_optimize (133,391 samples, 0.37%)</title><rect x="34.1488%" y="229" width="0.3653%" height="15" fill="rgb(247,143,39)"/><text x="34.3988%" y="239.50"></text></g><g><title>AST_validation (81,401 samples, 0.22%)</title><rect x="35.0117%" y="229" width="0.2230%" height="15" fill="rgb(236,97,10)"/><text x="35.2617%" y="239.50"></text></g><g><title>crate_injection (77,631 samples, 0.21%)</title><rect x="35.2835%" y="229" width="0.2126%" height="15" fill="rgb(233,208,19)"/><text x="35.5335%" y="239.50"></text></g><g><title>metadata_load_macro (40,210 samples, 0.11%)</title><rect x="62.9197%" y="197" width="0.1101%" height="15" fill="rgb(216,164,2)"/><text x="63.1697%" y="207.50"></text></g><g><title>macro_expand_crate (12,765,239 samples, 34.96%)</title><rect x="35.4961%" y="229" width="34.9629%" height="15" fill="rgb(220,129,5)"/><text x="35.7461%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,752,149 samples, 34.93%)</title><rect x="35.5319%" y="213" width="34.9270%" height="15" fill="rgb(242,17,10)"/><text x="35.7819%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,712,447 samples, 7.43%)</title><rect x="63.0298%" y="197" width="7.4292%" height="15" fill="rgb(242,107,0)"/><text x="63.2798%" y="207.50">metadata_r..</text></g><g><title>metadata_register_crate (1,003,000 samples, 2.75%)</title><rect x="67.7118%" y="181" width="2.7471%" height="15" fill="rgb(251,28,31)"/><text x="67.9618%" y="191.50">me..</text></g><g><title>metadata_register_crate (74,840 samples, 0.20%)</title><rect x="70.2540%" y="165" width="0.2050%" height="15" fill="rgb(233,223,10)"/><text x="70.5040%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (327,283 samples, 0.90%)</title><rect x="70.4687%" y="229" width="0.8964%" height="15" fill="rgb(215,21,27)"/><text x="70.7187%" y="239.50"></text></g><g><title>finalize_macro_resolutions (157,602 samples, 0.43%)</title><rect x="71.4483%" y="213" width="0.4317%" height="15" fill="rgb(232,23,21)"/><text x="71.6983%" y="223.50"></text></g><g><title>late_resolve_crate (129,341 samples, 0.35%)</title><rect x="71.8800%" y="213" width="0.3543%" height="15" fill="rgb(244,5,23)"/><text x="72.1300%" y="223.50"></text></g><g><title>configure_and_expand (13,809,870 samples, 37.82%)</title><rect x="34.5142%" y="245" width="37.8240%" height="15" fill="rgb(226,81,46)"/><text x="34.7642%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (355,303 samples, 0.97%)</title><rect x="71.3651%" y="229" width="0.9731%" height="15" fill="rgb(247,70,30)"/><text x="71.6151%" y="239.50"></text></g><g><title>drop_ast (38,290 samples, 0.10%)</title><rect x="72.3382%" y="245" width="0.1049%" height="15" fill="rgb(212,68,19)"/><text x="72.5882%" y="255.50"></text></g><g><title>early_lint_checks (72,601 samples, 0.20%)</title><rect x="72.4784%" y="245" width="0.1988%" height="15" fill="rgb(240,187,13)"/><text x="72.7284%" y="255.50"></text></g><g><title>free_global_ctxt (1,772,548 samples, 4.85%)</title><rect x="72.6773%" y="245" width="4.8549%" height="15" fill="rgb(223,113,26)"/><text x="72.9273%" y="255.50">free_g..</text></g><g><title>crate_hash (60,650 samples, 0.17%)</title><rect x="78.6647%" y="229" width="0.1661%" height="15" fill="rgb(206,192,2)"/><text x="78.9147%" y="239.50"></text></g><g><title>exported_symbols (60,200 samples, 0.16%)</title><rect x="78.9016%" y="229" width="0.1649%" height="15" fill="rgb(241,108,4)"/><text x="79.1516%" y="239.50"></text></g><g><title>layout_of (75,530 samples, 0.21%)</title><rect x="79.9807%" y="181" width="0.2069%" height="15" fill="rgb(247,173,49)"/><text x="80.2307%" y="191.50"></text></g><g><title>is_sized_raw (42,550 samples, 0.12%)</title><rect x="80.0710%" y="165" width="0.1165%" height="15" fill="rgb(224,114,35)"/><text x="80.3210%" y="175.50"></text></g><g><title>layout_of (145,151 samples, 0.40%)</title><rect x="79.8451%" y="197" width="0.3976%" height="15" fill="rgb(245,159,27)"/><text x="80.0951%" y="207.50"></text></g><g><title>layout_of (216,794 samples, 0.59%)</title><rect x="79.6999%" y="213" width="0.5938%" height="15" fill="rgb(245,172,44)"/><text x="79.9499%" y="223.50"></text></g><g><title>needs_drop_raw (43,981 samples, 0.12%)</title><rect x="80.8742%" y="197" width="0.1205%" height="15" fill="rgb(236,23,11)"/><text x="81.1242%" y="207.50"></text></g><g><title>is_copy_raw (37,310 samples, 0.10%)</title><rect x="80.8925%" y="181" width="0.1022%" height="15" fill="rgb(205,117,38)"/><text x="81.1425%" y="191.50"></text></g><g><title>optimized_mir (674,978 samples, 1.85%)</title><rect x="79.1608%" y="229" width="1.8487%" height="15" fill="rgb(237,72,25)"/><text x="79.4108%" y="239.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (261,354 samples, 0.72%)</title><rect x="80.2936%" y="213" width="0.7158%" height="15" fill="rgb(244,70,9)"/><text x="80.5436%" y="223.50"></text></g><g><title>generate_crate_metadata (1,298,403 samples, 3.56%)</title><rect x="77.5321%" y="245" width="3.5562%" height="15" fill="rgb(217,125,39)"/><text x="77.7821%" y="255.50">gene..</text></g><g><title>hir_lowering (1,249,822 samples, 3.42%)</title><rect x="81.0883%" y="245" width="3.4232%" height="15" fill="rgb(235,36,10)"/><text x="81.3383%" y="255.50">hir..</text></g><g><title>finish_ongoing_codegen (348,114 samples, 0.95%)</title><rect x="84.5370%" y="229" width="0.9535%" height="15" fill="rgb(251,123,47)"/><text x="84.7870%" y="239.50"></text></g><g><title>link_crate (618,496 samples, 1.69%)</title><rect x="85.4904%" y="229" width="1.6940%" height="15" fill="rgb(221,13,13)"/><text x="85.7404%" y="239.50"></text></g><g><title>link_binary (606,796 samples, 1.66%)</title><rect x="85.5225%" y="213" width="1.6620%" height="15" fill="rgb(238,131,9)"/><text x="85.7725%" y="223.50"></text></g><g><title>link_rlib (374,094 samples, 1.02%)</title><rect x="86.1598%" y="197" width="1.0246%" height="15" fill="rgb(211,50,8)"/><text x="86.4098%" y="207.50"></text></g><g><title>link (981,850 samples, 2.69%)</title><rect x="84.5115%" y="245" width="2.6892%" height="15" fill="rgb(245,182,24)"/><text x="84.7615%" y="255.50">li..</text></g><g><title>parse_crate (3,668,266 samples, 10.05%)</title><rect x="87.2007%" y="245" width="10.0471%" height="15" fill="rgb(242,14,37)"/><text x="87.4507%" y="255.50">parse_crate</text></g><g><title>prepare_outputs (279,522 samples, 0.77%)</title><rect x="97.2738%" y="245" width="0.7656%" height="15" fill="rgb(246,228,12)"/><text x="97.5238%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (327,623 samples, 0.90%)</title><rect x="98.0394%" y="245" width="0.8973%" height="15" fill="rgb(213,55,15)"/><text x="98.2894%" y="255.50"></text></g><g><title>setup_global_ctxt (56,130 samples, 0.15%)</title><rect x="98.9384%" y="245" width="0.1537%" height="15" fill="rgb(209,9,3)"/><text x="99.1884%" y="255.50"></text></g><g><title>all (36,510,856 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (36,510,856 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (331,484 samples, 0.91%)</title><rect x="99.0921%" y="245" width="0.9079%" height="15" fill="rgb(220,109,13)"/><text x="99.3421%" y="255.50"></text></g></svg></svg>