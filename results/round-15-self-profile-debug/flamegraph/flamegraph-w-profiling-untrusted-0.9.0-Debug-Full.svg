<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,555,400 samples, 6.27%)</title><rect x="0.5514%" y="197" width="6.2684%" height="15" fill="rgb(227,0,7)"/><text x="0.8014%" y="207.50">LLVM_pas..</text></g><g><title>implied_outlives_bounds (122,172 samples, 0.12%)</title><rect x="15.0836%" y="149" width="0.1168%" height="15" fill="rgb(217,0,24)"/><text x="15.3336%" y="159.50"></text></g><g><title>is_sized_raw (120,732 samples, 0.12%)</title><rect x="15.2489%" y="149" width="0.1154%" height="15" fill="rgb(221,193,54)"/><text x="15.4989%" y="159.50"></text></g><g><title>param_env (243,422 samples, 0.23%)</title><rect x="16.6232%" y="117" width="0.2328%" height="15" fill="rgb(248,212,6)"/><text x="16.8732%" y="127.50"></text></g><g><title>item_attrs (273,955 samples, 0.26%)</title><rect x="17.2589%" y="85" width="0.2620%" height="15" fill="rgb(208,68,35)"/><text x="17.5089%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (265,455 samples, 0.25%)</title><rect x="17.2670%" y="69" width="0.2538%" height="15" fill="rgb(232,128,0)"/><text x="17.5170%" y="79.50"></text></g><g><title>codegen_fn_attrs (363,096 samples, 0.35%)</title><rect x="17.1882%" y="101" width="0.3472%" height="15" fill="rgb(207,160,47)"/><text x="17.4382%" y="111.50"></text></g><g><title>is_copy_raw (128,691 samples, 0.12%)</title><rect x="19.3564%" y="85" width="0.1231%" height="15" fill="rgb(228,23,34)"/><text x="19.6064%" y="95.50"></text></g><g><title>evaluate_obligation (109,170 samples, 0.10%)</title><rect x="19.3751%" y="69" width="0.1044%" height="15" fill="rgb(218,30,26)"/><text x="19.6251%" y="79.50"></text></g><g><title>is_copy_raw (162,052 samples, 0.15%)</title><rect x="19.6013%" y="53" width="0.1550%" height="15" fill="rgb(220,122,19)"/><text x="19.8513%" y="63.50"></text></g><g><title>evaluate_obligation (150,072 samples, 0.14%)</title><rect x="19.6128%" y="37" width="0.1435%" height="15" fill="rgb(250,228,42)"/><text x="19.8628%" y="47.50"></text></g><g><title>adt_drop_tys (206,622 samples, 0.20%)</title><rect x="19.5870%" y="69" width="0.1976%" height="15" fill="rgb(240,193,28)"/><text x="19.8370%" y="79.50"></text></g><g><title>needs_drop_raw (1,438,036 samples, 1.38%)</title><rect x="19.4795%" y="85" width="1.3751%" height="15" fill="rgb(216,20,37)"/><text x="19.7295%" y="95.50"></text></g><g><title>is_copy_raw (1,118,982 samples, 1.07%)</title><rect x="19.7846%" y="69" width="1.0700%" height="15" fill="rgb(206,188,39)"/><text x="20.0346%" y="79.50"></text></g><g><title>evaluate_obligation (888,479 samples, 0.85%)</title><rect x="20.0050%" y="53" width="0.8496%" height="15" fill="rgb(217,207,13)"/><text x="20.2550%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (169,340 samples, 0.16%)</title><rect x="21.0202%" y="69" width="0.1619%" height="15" fill="rgb(231,73,38)"/><text x="21.2702%" y="79.50"></text></g><g><title>resolve_instance (485,982 samples, 0.46%)</title><rect x="20.8545%" y="85" width="0.4647%" height="15" fill="rgb(225,20,46)"/><text x="21.1045%" y="95.50"></text></g><g><title>thir_body (621,709 samples, 0.59%)</title><rect x="21.3428%" y="85" width="0.5945%" height="15" fill="rgb(210,31,41)"/><text x="21.5928%" y="95.50"></text></g><g><title>mir_const (6,242,489 samples, 5.97%)</title><rect x="15.9834%" y="133" width="5.9691%" height="15" fill="rgb(221,200,47)"/><text x="16.2334%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (5,329,970 samples, 5.10%)</title><rect x="16.8559%" y="117" width="5.0966%" height="15" fill="rgb(226,26,5)"/><text x="17.1059%" y="127.50">unsafe..</text></g><g><title>mir_built (4,619,380 samples, 4.42%)</title><rect x="17.5354%" y="101" width="4.4171%" height="15" fill="rgb(249,33,26)"/><text x="17.7854%" y="111.50">mir_b..</text></g><g><title>impl_trait_ref (143,162 samples, 0.14%)</title><rect x="22.1366%" y="85" width="0.1369%" height="15" fill="rgb(235,183,28)"/><text x="22.3866%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (142,472 samples, 0.14%)</title><rect x="22.1372%" y="69" width="0.1362%" height="15" fill="rgb(221,5,38)"/><text x="22.3872%" y="79.50"></text></g><g><title>is_freeze_raw (238,292 samples, 0.23%)</title><rect x="22.0764%" y="117" width="0.2279%" height="15" fill="rgb(247,18,42)"/><text x="22.3264%" y="127.50"></text></g><g><title>evaluate_obligation (233,032 samples, 0.22%)</title><rect x="22.0814%" y="101" width="0.2228%" height="15" fill="rgb(241,131,45)"/><text x="22.3314%" y="111.50"></text></g><g><title>mir_const (168,342 samples, 0.16%)</title><rect x="22.3057%" y="117" width="0.1610%" height="15" fill="rgb(249,31,29)"/><text x="22.5557%" y="127.50"></text></g><g><title>unsafety_check_result (129,091 samples, 0.12%)</title><rect x="22.3432%" y="101" width="0.1234%" height="15" fill="rgb(225,111,53)"/><text x="22.5932%" y="111.50"></text></g><g><title>mir_built (116,671 samples, 0.11%)</title><rect x="22.3551%" y="85" width="0.1116%" height="15" fill="rgb(238,160,17)"/><text x="22.6051%" y="95.50"></text></g><g><title>mir_promoted (7,453,390 samples, 7.13%)</title><rect x="15.3644%" y="149" width="7.1270%" height="15" fill="rgb(214,148,48)"/><text x="15.6144%" y="159.50">mir_promot..</text></g><g><title>mir_const_qualif (563,565 samples, 0.54%)</title><rect x="21.9525%" y="133" width="0.5389%" height="15" fill="rgb(232,36,49)"/><text x="22.2025%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (189,292 samples, 0.18%)</title><rect x="22.4914%" y="149" width="0.1810%" height="15" fill="rgb(209,103,24)"/><text x="22.7414%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (481,154 samples, 0.46%)</title><rect x="22.6724%" y="149" width="0.4601%" height="15" fill="rgb(229,88,8)"/><text x="22.9224%" y="159.50"></text></g><g><title>normalize_projection_ty (298,823 samples, 0.29%)</title><rect x="22.8467%" y="133" width="0.2857%" height="15" fill="rgb(213,181,19)"/><text x="23.0967%" y="143.50"></text></g><g><title>type_op_normalize_predicate (277,153 samples, 0.27%)</title><rect x="23.1325%" y="149" width="0.2650%" height="15" fill="rgb(254,191,54)"/><text x="23.3825%" y="159.50"></text></g><g><title>normalize_projection_ty (203,053 samples, 0.19%)</title><rect x="23.2033%" y="133" width="0.1942%" height="15" fill="rgb(241,83,37)"/><text x="23.4533%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,933,012 samples, 1.85%)</title><rect x="23.3975%" y="149" width="1.8484%" height="15" fill="rgb(233,36,39)"/><text x="23.6475%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (19,041,533 samples, 18.21%)</title><rect x="7.0463%" y="181" width="18.2077%" height="15" fill="rgb(226,3,54)"/><text x="7.2963%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,933,942 samples, 18.10%)</title><rect x="7.1492%" y="165" width="18.1049%" height="15" fill="rgb(245,192,40)"/><text x="7.3992%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (133,842 samples, 0.13%)</title><rect x="25.2541%" y="181" width="0.1280%" height="15" fill="rgb(238,167,29)"/><text x="25.5041%" y="191.50"></text></g><g><title>hir_module_items (177,792 samples, 0.17%)</title><rect x="25.3821%" y="181" width="0.1700%" height="15" fill="rgb(232,182,51)"/><text x="25.6321%" y="191.50"></text></g><g><title>should_inherit_track_caller (192,172 samples, 0.18%)</title><rect x="25.9687%" y="133" width="0.1838%" height="15" fill="rgb(231,60,39)"/><text x="26.2187%" y="143.50"></text></g><g><title>codegen_fn_attrs (402,744 samples, 0.39%)</title><rect x="25.7942%" y="149" width="0.3851%" height="15" fill="rgb(208,69,12)"/><text x="26.0442%" y="159.50"></text></g><g><title>check_mod_attrs (615,745 samples, 0.59%)</title><rect x="25.5907%" y="165" width="0.5888%" height="15" fill="rgb(235,93,37)"/><text x="25.8407%" y="175.50"></text></g><g><title>check_mod_const_bodies (106,440 samples, 0.10%)</title><rect x="26.1795%" y="165" width="0.1018%" height="15" fill="rgb(213,116,39)"/><text x="26.4295%" y="175.50"></text></g><g><title>lookup_deprecation_entry (114,241 samples, 0.11%)</title><rect x="26.4573%" y="149" width="0.1092%" height="15" fill="rgb(222,207,29)"/><text x="26.7073%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (307,464 samples, 0.29%)</title><rect x="26.3391%" y="165" width="0.2940%" height="15" fill="rgb(206,96,30)"/><text x="26.5891%" y="175.50"></text></g><g><title>misc_checking_1 (1,181,432 samples, 1.13%)</title><rect x="25.5524%" y="181" width="1.1297%" height="15" fill="rgb(218,138,4)"/><text x="25.8024%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (358,314 samples, 0.34%)</title><rect x="26.6843%" y="165" width="0.3426%" height="15" fill="rgb(250,191,14)"/><text x="26.9343%" y="175.50"></text></g><g><title>check_mod_liveness (288,674 samples, 0.28%)</title><rect x="26.7509%" y="149" width="0.2760%" height="15" fill="rgb(239,60,40)"/><text x="27.0009%" y="159.50"></text></g><g><title>misc_checking_2 (773,708 samples, 0.74%)</title><rect x="26.6821%" y="181" width="0.7398%" height="15" fill="rgb(206,27,48)"/><text x="26.9321%" y="191.50"></text></g><g><title>match_checking (413,124 samples, 0.40%)</title><rect x="27.0269%" y="165" width="0.3950%" height="15" fill="rgb(225,35,8)"/><text x="27.2769%" y="175.50"></text></g><g><title>check_match (385,354 samples, 0.37%)</title><rect x="27.0535%" y="149" width="0.3685%" height="15" fill="rgb(250,213,24)"/><text x="27.3035%" y="159.50"></text></g><g><title>death_checking (260,373 samples, 0.25%)</title><rect x="27.5265%" y="165" width="0.2490%" height="15" fill="rgb(247,123,22)"/><text x="27.7765%" y="175.50"></text></g><g><title>crate_lints (729,918 samples, 0.70%)</title><rect x="27.7768%" y="149" width="0.6980%" height="15" fill="rgb(231,138,38)"/><text x="28.0268%" y="159.50"></text></g><g><title>type_of (319,103 samples, 0.31%)</title><rect x="28.1697%" y="133" width="0.3051%" height="15" fill="rgb(231,145,46)"/><text x="28.4197%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (242,402 samples, 0.23%)</title><rect x="28.2430%" y="117" width="0.2318%" height="15" fill="rgb(251,118,11)"/><text x="28.4930%" y="127.50"></text></g><g><title>lint_checking (867,320 samples, 0.83%)</title><rect x="27.7754%" y="165" width="0.8293%" height="15" fill="rgb(217,147,25)"/><text x="28.0254%" y="175.50"></text></g><g><title>module_lints (135,922 samples, 0.13%)</title><rect x="28.4748%" y="149" width="0.1300%" height="15" fill="rgb(247,81,37)"/><text x="28.7248%" y="159.50"></text></g><g><title>lint_mod (132,632 samples, 0.13%)</title><rect x="28.4780%" y="133" width="0.1268%" height="15" fill="rgb(209,12,38)"/><text x="28.7280%" y="143.50"></text></g><g><title>privacy_access_levels (122,851 samples, 0.12%)</title><rect x="28.6048%" y="165" width="0.1175%" height="15" fill="rgb(227,1,9)"/><text x="28.8548%" y="175.50"></text></g><g><title>privacy_checking_modules (311,173 samples, 0.30%)</title><rect x="28.7222%" y="165" width="0.2975%" height="15" fill="rgb(248,47,43)"/><text x="28.9722%" y="175.50"></text></g><g><title>check_mod_privacy (308,283 samples, 0.29%)</title><rect x="28.7250%" y="149" width="0.2948%" height="15" fill="rgb(221,10,30)"/><text x="28.9750%" y="159.50"></text></g><g><title>misc_checking_3 (1,681,988 samples, 1.61%)</title><rect x="27.4219%" y="181" width="1.6083%" height="15" fill="rgb(210,229,1)"/><text x="27.6719%" y="191.50"></text></g><g><title>is_copy_raw (239,772 samples, 0.23%)</title><rect x="29.2287%" y="133" width="0.2293%" height="15" fill="rgb(222,148,37)"/><text x="29.4787%" y="143.50"></text></g><g><title>evaluate_obligation (198,342 samples, 0.19%)</title><rect x="29.2683%" y="117" width="0.1897%" height="15" fill="rgb(234,67,33)"/><text x="29.5183%" y="127.50"></text></g><g><title>impl_parent (1,319,959 samples, 1.26%)</title><rect x="31.9740%" y="117" width="1.2622%" height="15" fill="rgb(247,98,35)"/><text x="32.2240%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (703,325 samples, 0.67%)</title><rect x="32.5637%" y="101" width="0.6725%" height="15" fill="rgb(247,138,52)"/><text x="32.8137%" y="111.50"></text></g><g><title>impl_trait_ref (2,664,469 samples, 2.55%)</title><rect x="33.2362%" y="117" width="2.5478%" height="15" fill="rgb(213,79,30)"/><text x="33.4862%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,034,678 samples, 1.95%)</title><rect x="33.8384%" y="101" width="1.9456%" height="15" fill="rgb(246,177,23)"/><text x="34.0884%" y="111.50">m..</text></g><g><title>trait_impls_of (514,054 samples, 0.49%)</title><rect x="35.8187%" y="117" width="0.4915%" height="15" fill="rgb(230,62,27)"/><text x="36.0687%" y="127.50"></text></g><g><title>implementations_of_trait (119,542 samples, 0.11%)</title><rect x="36.1959%" y="101" width="0.1143%" height="15" fill="rgb(216,154,8)"/><text x="36.4459%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (108,032 samples, 0.10%)</title><rect x="36.2069%" y="85" width="0.1033%" height="15" fill="rgb(244,35,45)"/><text x="36.4569%" y="95.50"></text></g><g><title>coherent_trait (7,534,810 samples, 7.20%)</title><rect x="29.1065%" y="149" width="7.2049%" height="15" fill="rgb(251,115,12)"/><text x="29.3565%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (7,085,415 samples, 6.78%)</title><rect x="29.5362%" y="133" width="6.7752%" height="15" fill="rgb(240,54,50)"/><text x="29.7862%" y="143.50">specializ..</text></g><g><title>coherence_checking (7,617,331 samples, 7.28%)</title><rect x="29.0834%" y="165" width="7.2838%" height="15" fill="rgb(233,84,52)"/><text x="29.3334%" y="175.50">coherence_..</text></g><g><title>associated_item (480,534 samples, 0.46%)</title><rect x="48.6804%" y="101" width="0.4595%" height="15" fill="rgb(207,117,47)"/><text x="48.9304%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (378,934 samples, 0.36%)</title><rect x="48.7776%" y="85" width="0.3623%" height="15" fill="rgb(249,43,39)"/><text x="49.0276%" y="95.50"></text></g><g><title>associated_items (694,876 samples, 0.66%)</title><rect x="48.4945%" y="117" width="0.6644%" height="15" fill="rgb(209,38,44)"/><text x="48.7445%" y="127.50"></text></g><g><title>dropck_outlives (421,376 samples, 0.40%)</title><rect x="49.2071%" y="117" width="0.4029%" height="15" fill="rgb(236,212,23)"/><text x="49.4571%" y="127.50"></text></g><g><title>adt_dtorck_constraint (158,841 samples, 0.15%)</title><rect x="49.4581%" y="101" width="0.1519%" height="15" fill="rgb(242,79,21)"/><text x="49.7081%" y="111.50"></text></g><g><title>specializes (189,653 samples, 0.18%)</title><rect x="50.8962%" y="101" width="0.1813%" height="15" fill="rgb(211,96,35)"/><text x="51.1462%" y="111.50"></text></g><g><title>param_env (161,363 samples, 0.15%)</title><rect x="50.9232%" y="85" width="0.1543%" height="15" fill="rgb(253,215,40)"/><text x="51.1732%" y="95.50"></text></g><g><title>def_span (126,522 samples, 0.12%)</title><rect x="50.9565%" y="69" width="0.1210%" height="15" fill="rgb(211,81,21)"/><text x="51.2065%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (124,162 samples, 0.12%)</title><rect x="50.9588%" y="53" width="0.1187%" height="15" fill="rgb(208,190,38)"/><text x="51.2088%" y="63.50"></text></g><g><title>trait_impls_of (133,382 samples, 0.13%)</title><rect x="51.0919%" y="101" width="0.1275%" height="15" fill="rgb(235,213,38)"/><text x="51.3419%" y="111.50"></text></g><g><title>evaluate_obligation (1,684,808 samples, 1.61%)</title><rect x="49.6100%" y="117" width="1.6110%" height="15" fill="rgb(237,122,38)"/><text x="49.8600%" y="127.50"></text></g><g><title>method_autoderef_steps (421,596 samples, 0.40%)</title><rect x="51.6521%" y="117" width="0.4031%" height="15" fill="rgb(244,218,35)"/><text x="51.9021%" y="127.50"></text></g><g><title>evaluate_obligation (210,934 samples, 0.20%)</title><rect x="51.8535%" y="101" width="0.2017%" height="15" fill="rgb(240,68,47)"/><text x="52.1035%" y="111.50"></text></g><g><title>explicit_predicates_of (139,252 samples, 0.13%)</title><rect x="52.2869%" y="85" width="0.1332%" height="15" fill="rgb(210,16,53)"/><text x="52.5369%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (116,790 samples, 0.11%)</title><rect x="52.3083%" y="69" width="0.1117%" height="15" fill="rgb(235,124,12)"/><text x="52.5583%" y="79.50"></text></g><g><title>predicates_of (378,286 samples, 0.36%)</title><rect x="52.1042%" y="117" width="0.3617%" height="15" fill="rgb(224,169,11)"/><text x="52.3542%" y="127.50"></text></g><g><title>predicates_defined_on (270,654 samples, 0.26%)</title><rect x="52.2071%" y="101" width="0.2588%" height="15" fill="rgb(250,166,2)"/><text x="52.4571%" y="111.50"></text></g><g><title>associated_item (123,932 samples, 0.12%)</title><rect x="53.9331%" y="85" width="0.1185%" height="15" fill="rgb(242,216,29)"/><text x="54.1831%" y="95.50"></text></g><g><title>associated_items (202,523 samples, 0.19%)</title><rect x="53.8638%" y="101" width="0.1937%" height="15" fill="rgb(230,116,27)"/><text x="54.1138%" y="111.50"></text></g><g><title>evaluate_obligation (113,371 samples, 0.11%)</title><rect x="54.0867%" y="101" width="0.1084%" height="15" fill="rgb(228,99,48)"/><text x="54.3367%" y="111.50"></text></g><g><title>typeck (1,901,730 samples, 1.82%)</title><rect x="52.5467%" y="117" width="1.8185%" height="15" fill="rgb(253,11,6)"/><text x="52.7967%" y="127.50">t..</text></g><g><title>item_bodies_checking (18,835,621 samples, 18.01%)</title><rect x="36.4060%" y="165" width="18.0109%" height="15" fill="rgb(247,143,39)"/><text x="36.6560%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,832,271 samples, 18.01%)</title><rect x="36.4092%" y="149" width="18.0076%" height="15" fill="rgb(236,97,10)"/><text x="36.6592%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (18,759,130 samples, 17.94%)</title><rect x="36.4792%" y="133" width="17.9377%" height="15" fill="rgb(233,208,19)"/><text x="36.7292%" y="143.50">typeck</text></g><g><title>item_types_checking (543,356 samples, 0.52%)</title><rect x="54.4169%" y="165" width="0.5196%" height="15" fill="rgb(216,164,2)"/><text x="54.6669%" y="175.50"></text></g><g><title>check_mod_item_types (537,196 samples, 0.51%)</title><rect x="54.4228%" y="149" width="0.5137%" height="15" fill="rgb(220,129,5)"/><text x="54.6728%" y="159.50"></text></g><g><title>fn_sig (250,932 samples, 0.24%)</title><rect x="55.1795%" y="133" width="0.2399%" height="15" fill="rgb(242,17,10)"/><text x="55.4295%" y="143.50"></text></g><g><title>is_late_bound_map (414,875 samples, 0.40%)</title><rect x="55.5653%" y="117" width="0.3967%" height="15" fill="rgb(242,107,0)"/><text x="55.8153%" y="127.50"></text></g><g><title>resolve_lifetimes (373,605 samples, 0.36%)</title><rect x="55.6047%" y="101" width="0.3572%" height="15" fill="rgb(251,28,31)"/><text x="55.8547%" y="111.50"></text></g><g><title>named_region_map (209,492 samples, 0.20%)</title><rect x="55.9620%" y="117" width="0.2003%" height="15" fill="rgb(233,223,10)"/><text x="56.2120%" y="127.50"></text></g><g><title>resolve_lifetimes (191,402 samples, 0.18%)</title><rect x="55.9793%" y="101" width="0.1830%" height="15" fill="rgb(215,21,27)"/><text x="56.2293%" y="111.50"></text></g><g><title>lint_levels (139,981 samples, 0.13%)</title><rect x="56.0284%" y="85" width="0.1339%" height="15" fill="rgb(232,23,21)"/><text x="56.2784%" y="95.50"></text></g><g><title>generics_of (785,839 samples, 0.75%)</title><rect x="55.4194%" y="133" width="0.7514%" height="15" fill="rgb(244,5,23)"/><text x="55.6694%" y="143.50"></text></g><g><title>explicit_predicates_of (398,073 samples, 0.38%)</title><rect x="56.3472%" y="101" width="0.3806%" height="15" fill="rgb(226,81,46)"/><text x="56.5972%" y="111.50"></text></g><g><title>predicates_of (608,876 samples, 0.58%)</title><rect x="56.2336%" y="133" width="0.5822%" height="15" fill="rgb(247,70,30)"/><text x="56.4836%" y="143.50"></text></g><g><title>predicates_defined_on (565,736 samples, 0.54%)</title><rect x="56.2748%" y="117" width="0.5410%" height="15" fill="rgb(212,68,19)"/><text x="56.5248%" y="127.50"></text></g><g><title>type_collecting (2,060,872 samples, 1.97%)</title><rect x="54.9383%" y="165" width="1.9706%" height="15" fill="rgb(240,187,13)"/><text x="55.1883%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,045,132 samples, 1.96%)</title><rect x="54.9533%" y="149" width="1.9556%" height="15" fill="rgb(223,113,26)"/><text x="55.2033%" y="159.50">c..</text></g><g><title>evaluate_obligation (421,214 samples, 0.40%)</title><rect x="58.8273%" y="133" width="0.4028%" height="15" fill="rgb(206,192,2)"/><text x="59.0773%" y="143.50"></text></g><g><title>implied_outlives_bounds (236,593 samples, 0.23%)</title><rect x="59.2301%" y="133" width="0.2262%" height="15" fill="rgb(241,108,4)"/><text x="59.4801%" y="143.50"></text></g><g><title>param_env (259,351 samples, 0.25%)</title><rect x="59.4563%" y="133" width="0.2480%" height="15" fill="rgb(247,173,49)"/><text x="59.7063%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,066,504 samples, 2.93%)</title><rect x="57.0708%" y="149" width="2.9322%" height="15" fill="rgb(224,114,35)"/><text x="57.3208%" y="159.50">ch..</text></g><g><title>region_scope_tree (235,273 samples, 0.22%)</title><rect x="59.7781%" y="133" width="0.2250%" height="15" fill="rgb(245,159,27)"/><text x="60.0281%" y="143.50"></text></g><g><title>param_env (166,022 samples, 0.16%)</title><rect x="61.2120%" y="133" width="0.1588%" height="15" fill="rgb(245,172,44)"/><text x="61.4620%" y="143.50"></text></g><g><title>analysis (57,281,662 samples, 54.77%)</title><rect x="6.8198%" y="197" width="54.7734%" height="15" fill="rgb(236,23,11)"/><text x="7.0698%" y="207.50">analysis</text></g><g><title>type_check_crate (34,054,054 samples, 32.56%)</title><rect x="29.0303%" y="181" width="32.5629%" height="15" fill="rgb(205,117,38)"/><text x="29.2803%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,894,112 samples, 4.68%)</title><rect x="56.9134%" y="165" width="4.6798%" height="15" fill="rgb(237,72,25)"/><text x="57.1634%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (1,662,925 samples, 1.59%)</title><rect x="60.0031%" y="149" width="1.5901%" height="15" fill="rgb(244,70,9)"/><text x="60.2531%" y="159.50"></text></g><g><title>fn_abi_of_instance (191,541 samples, 0.18%)</title><rect x="64.8803%" y="165" width="0.1832%" height="15" fill="rgb(217,125,39)"/><text x="65.1303%" y="175.50"></text></g><g><title>codegen_module (2,772,119 samples, 2.65%)</title><rect x="62.4745%" y="181" width="2.6507%" height="15" fill="rgb(235,36,10)"/><text x="62.7245%" y="191.50">co..</text></g><g><title>codegen_crate (3,709,690 samples, 3.55%)</title><rect x="61.6013%" y="197" width="3.5473%" height="15" fill="rgb(251,123,47)"/><text x="61.8513%" y="207.50">code..</text></g><g><title>LLVM_module_codegen (11,551,703 samples, 11.05%)</title><rect x="65.1843%" y="181" width="11.0459%" height="15" fill="rgb(221,13,13)"/><text x="65.4343%" y="191.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (11,072,468 samples, 10.59%)</title><rect x="65.6426%" y="165" width="10.5876%" height="15" fill="rgb(238,131,9)"/><text x="65.8926%" y="175.50">LLVM_module_cod..</text></g><g><title>codegen_module_optimize (12,176,070 samples, 11.64%)</title><rect x="65.1485%" y="197" width="11.6429%" height="15" fill="rgb(211,50,8)"/><text x="65.3985%" y="207.50">codegen_module_op..</text></g><g><title>LLVM_module_optimize (586,957 samples, 0.56%)</title><rect x="76.2302%" y="181" width="0.5613%" height="15" fill="rgb(245,182,24)"/><text x="76.4802%" y="191.50"></text></g><g><title>AST_validation (111,802 samples, 0.11%)</title><rect x="76.9634%" y="181" width="0.1069%" height="15" fill="rgb(242,14,37)"/><text x="77.2134%" y="191.50"></text></g><g><title>metadata_register_crate (164,022 samples, 0.16%)</title><rect x="84.8850%" y="149" width="0.1568%" height="15" fill="rgb(246,228,12)"/><text x="85.1350%" y="159.50"></text></g><g><title>macro_expand_crate (8,314,689 samples, 7.95%)</title><rect x="77.1868%" y="181" width="7.9506%" height="15" fill="rgb(213,55,15)"/><text x="77.4368%" y="191.50">macro_expan..</text></g><g><title>expand_crate (8,294,969 samples, 7.93%)</title><rect x="77.2057%" y="165" width="7.9318%" height="15" fill="rgb(209,9,3)"/><text x="77.4557%" y="175.50">expand_crate</text></g><g><title>finalize_macro_resolutions (272,053 samples, 0.26%)</title><rect x="85.2448%" y="165" width="0.2601%" height="15" fill="rgb(230,59,30)"/><text x="85.4948%" y="175.50"></text></g><g><title>late_resolve_crate (1,347,755 samples, 1.29%)</title><rect x="85.5050%" y="165" width="1.2887%" height="15" fill="rgb(209,121,21)"/><text x="85.7550%" y="175.50"></text></g><g><title>configure_and_expand (10,551,373 samples, 10.09%)</title><rect x="76.7914%" y="197" width="10.0894%" height="15" fill="rgb(220,109,13)"/><text x="77.0414%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (1,750,788 samples, 1.67%)</title><rect x="85.2067%" y="181" width="1.6741%" height="15" fill="rgb(232,18,1)"/><text x="85.4567%" y="191.50"></text></g><g><title>drop_ast (123,101 samples, 0.12%)</title><rect x="86.8808%" y="197" width="0.1177%" height="15" fill="rgb(215,41,42)"/><text x="87.1308%" y="207.50"></text></g><g><title>early_lint_checks (244,003 samples, 0.23%)</title><rect x="87.0113%" y="197" width="0.2333%" height="15" fill="rgb(224,123,36)"/><text x="87.2613%" y="207.50"></text></g><g><title>free_global_ctxt (1,764,499 samples, 1.69%)</title><rect x="87.2446%" y="197" width="1.6872%" height="15" fill="rgb(240,125,3)"/><text x="87.4946%" y="207.50"></text></g><g><title>optimized_mir (332,314 samples, 0.32%)</title><rect x="89.8309%" y="117" width="0.3178%" height="15" fill="rgb(205,98,50)"/><text x="90.0809%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (446,735 samples, 0.43%)</title><rect x="89.7278%" y="133" width="0.4272%" height="15" fill="rgb(205,185,37)"/><text x="89.9778%" y="143.50"></text></g><g><title>monomorphization_collector (479,135 samples, 0.46%)</title><rect x="89.7255%" y="149" width="0.4582%" height="15" fill="rgb(238,207,15)"/><text x="89.9755%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (631,617 samples, 0.60%)</title><rect x="89.6997%" y="165" width="0.6040%" height="15" fill="rgb(213,199,42)"/><text x="89.9497%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (125,471 samples, 0.12%)</title><rect x="90.1837%" y="149" width="0.1200%" height="15" fill="rgb(235,201,11)"/><text x="90.4337%" y="159.50"></text></g><g><title>exported_symbols (706,388 samples, 0.68%)</title><rect x="89.6822%" y="181" width="0.6755%" height="15" fill="rgb(207,46,11)"/><text x="89.9322%" y="191.50"></text></g><g><title>layout_of (266,972 samples, 0.26%)</title><rect x="91.5636%" y="165" width="0.2553%" height="15" fill="rgb(241,35,35)"/><text x="91.8136%" y="175.50"></text></g><g><title>needs_drop_raw (303,532 samples, 0.29%)</title><rect x="93.0247%" y="149" width="0.2902%" height="15" fill="rgb(243,32,47)"/><text x="93.2747%" y="159.50"></text></g><g><title>is_copy_raw (278,102 samples, 0.27%)</title><rect x="93.0490%" y="133" width="0.2659%" height="15" fill="rgb(247,202,23)"/><text x="93.2990%" y="143.50"></text></g><g><title>evaluate_obligation (215,522 samples, 0.21%)</title><rect x="93.1088%" y="117" width="0.2061%" height="15" fill="rgb(219,102,11)"/><text x="93.3588%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,578,147 samples, 1.51%)</title><rect x="91.8189%" y="165" width="1.5090%" height="15" fill="rgb(243,110,44)"/><text x="92.0689%" y="175.50"></text></g><g><title>optimized_mir (3,056,974 samples, 2.92%)</title><rect x="90.4061%" y="181" width="2.9231%" height="15" fill="rgb(222,74,54)"/><text x="90.6561%" y="191.50">op..</text></g><g><title>generate_crate_metadata (4,631,270 samples, 4.43%)</title><rect x="88.9318%" y="197" width="4.4285%" height="15" fill="rgb(216,99,12)"/><text x="89.1818%" y="207.50">gener..</text></g><g><title>hir_lowering (1,982,261 samples, 1.90%)</title><rect x="93.3603%" y="197" width="1.8955%" height="15" fill="rgb(226,22,26)"/><text x="93.6103%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (2,376,225 samples, 2.27%)</title><rect x="95.2683%" y="181" width="2.2722%" height="15" fill="rgb(217,163,10)"/><text x="95.5183%" y="191.50">f..</text></g><g><title>link_crate (725,508 samples, 0.69%)</title><rect x="97.5405%" y="181" width="0.6937%" height="15" fill="rgb(213,25,53)"/><text x="97.7905%" y="191.50"></text></g><g><title>link_binary (719,588 samples, 0.69%)</title><rect x="97.5462%" y="165" width="0.6881%" height="15" fill="rgb(252,105,26)"/><text x="97.7962%" y="175.50"></text></g><g><title>link_rlib (460,545 samples, 0.44%)</title><rect x="97.7939%" y="149" width="0.4404%" height="15" fill="rgb(220,39,43)"/><text x="98.0439%" y="159.50"></text></g><g><title>link (3,122,363 samples, 2.99%)</title><rect x="95.2558%" y="197" width="2.9856%" height="15" fill="rgb(229,68,48)"/><text x="95.5058%" y="207.50">link</text></g><g><title>parse_crate (653,687 samples, 0.63%)</title><rect x="98.2414%" y="197" width="0.6251%" height="15" fill="rgb(252,8,32)"/><text x="98.4914%" y="207.50"></text></g><g><title>prepare_outputs (250,673 samples, 0.24%)</title><rect x="98.8742%" y="197" width="0.2397%" height="15" fill="rgb(223,20,43)"/><text x="99.1242%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (531,036 samples, 0.51%)</title><rect x="99.1139%" y="197" width="0.5078%" height="15" fill="rgb(229,81,49)"/><text x="99.3639%" y="207.50"></text></g><g><title>setup_global_ctxt (110,941 samples, 0.11%)</title><rect x="99.6225%" y="197" width="0.1061%" height="15" fill="rgb(236,28,36)"/><text x="99.8725%" y="207.50"></text></g><g><title>all (104,579,288 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (104,579,288 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (283,873 samples, 0.27%)</title><rect x="99.7286%" y="197" width="0.2714%" height="15" fill="rgb(233,201,37)"/><text x="99.9786%" y="207.50"></text></g></svg></svg>