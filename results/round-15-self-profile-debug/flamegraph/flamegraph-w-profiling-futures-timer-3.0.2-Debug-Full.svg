<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (163,866,234 samples, 14.19%)</title><rect x="0.0401%" y="165" width="14.1856%" height="15" fill="rgb(227,0,7)"/><text x="0.2901%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,801,668 samples, 0.16%)</title><rect x="16.3575%" y="53" width="0.1560%" height="15" fill="rgb(217,0,24)"/><text x="16.6075%" y="63.50"></text></g><g><title>is_copy_raw (1,182,831 samples, 0.10%)</title><rect x="16.4110%" y="37" width="0.1024%" height="15" fill="rgb(221,193,54)"/><text x="16.6610%" y="47.50"></text></g><g><title>resolve_instance (1,529,383 samples, 0.13%)</title><rect x="16.5134%" y="53" width="0.1324%" height="15" fill="rgb(248,212,6)"/><text x="16.7634%" y="63.50"></text></g><g><title>thir_body (1,587,526 samples, 0.14%)</title><rect x="16.6482%" y="53" width="0.1374%" height="15" fill="rgb(208,68,35)"/><text x="16.8982%" y="63.50"></text></g><g><title>mir_const (12,045,500 samples, 1.04%)</title><rect x="15.7445%" y="101" width="1.0428%" height="15" fill="rgb(232,128,0)"/><text x="15.9945%" y="111.50"></text></g><g><title>unsafety_check_result (10,378,900 samples, 0.90%)</title><rect x="15.8887%" y="85" width="0.8985%" height="15" fill="rgb(207,160,47)"/><text x="16.1387%" y="95.50"></text></g><g><title>mir_built (8,967,787 samples, 0.78%)</title><rect x="16.0109%" y="69" width="0.7763%" height="15" fill="rgb(228,23,34)"/><text x="16.2609%" y="79.50"></text></g><g><title>mir_promoted (13,622,819 samples, 1.18%)</title><rect x="15.6491%" y="117" width="1.1793%" height="15" fill="rgb(218,30,26)"/><text x="15.8991%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,438,144 samples, 0.21%)</title><rect x="16.9493%" y="117" width="0.2111%" height="15" fill="rgb(220,122,19)"/><text x="17.1993%" y="127.50"></text></g><g><title>MIR_borrow_checking (33,593,880 samples, 2.91%)</title><rect x="14.2529%" y="149" width="2.9082%" height="15" fill="rgb(250,228,42)"/><text x="14.5029%" y="159.50">MI..</text></g><g><title>mir_borrowck (33,455,876 samples, 2.90%)</title><rect x="14.2648%" y="133" width="2.8962%" height="15" fill="rgb(240,193,28)"/><text x="14.5148%" y="143.50">mi..</text></g><g><title>misc_checking_1 (1,451,014 samples, 0.13%)</title><rect x="17.1906%" y="149" width="0.1256%" height="15" fill="rgb(216,20,37)"/><text x="17.4406%" y="159.50"></text></g><g><title>misc_checking_2 (2,106,881 samples, 0.18%)</title><rect x="17.3162%" y="149" width="0.1824%" height="15" fill="rgb(206,188,39)"/><text x="17.5662%" y="159.50"></text></g><g><title>match_checking (1,353,004 samples, 0.12%)</title><rect x="17.3815%" y="133" width="0.1171%" height="15" fill="rgb(217,207,13)"/><text x="17.6315%" y="143.50"></text></g><g><title>check_match (1,319,314 samples, 0.11%)</title><rect x="17.3844%" y="117" width="0.1142%" height="15" fill="rgb(231,73,38)"/><text x="17.6344%" y="127.50"></text></g><g><title>crate_lints (3,142,871 samples, 0.27%)</title><rect x="17.5721%" y="117" width="0.2721%" height="15" fill="rgb(225,20,46)"/><text x="17.8221%" y="127.50"></text></g><g><title>type_of (1,348,754 samples, 0.12%)</title><rect x="17.7274%" y="101" width="0.1168%" height="15" fill="rgb(210,31,41)"/><text x="17.9774%" y="111.50"></text></g><g><title>lint_checking (3,710,547 samples, 0.32%)</title><rect x="17.5719%" y="133" width="0.3212%" height="15" fill="rgb(221,200,47)"/><text x="17.8219%" y="143.50"></text></g><g><title>misc_checking_3 (5,785,628 samples, 0.50%)</title><rect x="17.4986%" y="149" width="0.5009%" height="15" fill="rgb(226,26,5)"/><text x="17.7486%" y="159.50"></text></g><g><title>impl_parent (2,115,149 samples, 0.18%)</title><rect x="18.3247%" y="85" width="0.1831%" height="15" fill="rgb(249,33,26)"/><text x="18.5747%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,284,382 samples, 0.11%)</title><rect x="18.3967%" y="69" width="0.1112%" height="15" fill="rgb(235,183,28)"/><text x="18.6467%" y="79.50"></text></g><g><title>impl_trait_ref (4,843,485 samples, 0.42%)</title><rect x="18.5078%" y="85" width="0.4193%" height="15" fill="rgb(221,5,38)"/><text x="18.7578%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,001,160 samples, 0.35%)</title><rect x="18.5808%" y="69" width="0.3464%" height="15" fill="rgb(247,18,42)"/><text x="18.8308%" y="79.50"></text></g><g><title>coherent_trait (11,369,525 samples, 0.98%)</title><rect x="18.0088%" y="117" width="0.9842%" height="15" fill="rgb(241,131,45)"/><text x="18.2588%" y="127.50"></text></g><g><title>specialization_graph_of (11,347,535 samples, 0.98%)</title><rect x="18.0108%" y="101" width="0.9823%" height="15" fill="rgb(249,31,29)"/><text x="18.2608%" y="111.50"></text></g><g><title>coherence_checking (11,442,625 samples, 0.99%)</title><rect x="18.0073%" y="133" width="0.9906%" height="15" fill="rgb(225,111,53)"/><text x="18.2573%" y="143.50"></text></g><g><title>evaluate_obligation (5,684,718 samples, 0.49%)</title><rect x="21.3112%" y="85" width="0.4921%" height="15" fill="rgb(238,160,17)"/><text x="21.5612%" y="95.50"></text></g><g><title>typeck (8,230,694 samples, 0.71%)</title><rect x="22.0378%" y="85" width="0.7125%" height="15" fill="rgb(214,148,48)"/><text x="22.2878%" y="95.50"></text></g><g><title>item_bodies_checking (43,400,018 samples, 3.76%)</title><rect x="19.0009%" y="133" width="3.7571%" height="15" fill="rgb(232,36,49)"/><text x="19.2509%" y="143.50">item..</text></g><g><title>typeck_item_bodies (43,397,508 samples, 3.76%)</title><rect x="19.0011%" y="117" width="3.7568%" height="15" fill="rgb(209,103,24)"/><text x="19.2511%" y="127.50">type..</text></g><g><title>typeck (43,308,638 samples, 3.75%)</title><rect x="19.0088%" y="101" width="3.7492%" height="15" fill="rgb(229,88,8)"/><text x="19.2588%" y="111.50">type..</text></g><g><title>item_types_checking (1,853,959 samples, 0.16%)</title><rect x="22.7580%" y="133" width="0.1605%" height="15" fill="rgb(213,181,19)"/><text x="23.0080%" y="143.50"></text></g><g><title>check_mod_item_types (1,846,379 samples, 0.16%)</title><rect x="22.7586%" y="117" width="0.1598%" height="15" fill="rgb(254,191,54)"/><text x="23.0086%" y="127.50"></text></g><g><title>type_collecting (1,974,331 samples, 0.17%)</title><rect x="22.9190%" y="133" width="0.1709%" height="15" fill="rgb(241,83,37)"/><text x="23.1690%" y="143.50"></text></g><g><title>collect_mod_item_types (1,958,470 samples, 0.17%)</title><rect x="22.9204%" y="117" width="0.1695%" height="15" fill="rgb(233,36,39)"/><text x="23.1704%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,271,200 samples, 0.28%)</title><rect x="23.1094%" y="117" width="0.2832%" height="15" fill="rgb(226,3,54)"/><text x="23.3594%" y="127.50"></text></g><g><title>analysis (108,320,143 samples, 9.38%)</title><rect x="14.2257%" y="165" width="9.3771%" height="15" fill="rgb(245,192,40)"/><text x="14.4757%" y="175.50">analysis</text></g><g><title>type_check_crate (64,727,764 samples, 5.60%)</title><rect x="17.9995%" y="149" width="5.6034%" height="15" fill="rgb(238,167,29)"/><text x="18.2495%" y="159.50">type_ch..</text></g><g><title>wf_checking (5,918,320 samples, 0.51%)</title><rect x="23.0905%" y="133" width="0.5123%" height="15" fill="rgb(232,182,51)"/><text x="23.3405%" y="143.50"></text></g><g><title>check_item_well_formed (2,428,288 samples, 0.21%)</title><rect x="23.3926%" y="117" width="0.2102%" height="15" fill="rgb(231,60,39)"/><text x="23.6426%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (3,594,395 samples, 0.31%)</title><rect x="34.2037%" y="133" width="0.3112%" height="15" fill="rgb(208,69,12)"/><text x="34.4537%" y="143.50"></text></g><g><title>const_caller_location (1,508,815 samples, 0.13%)</title><rect x="34.5149%" y="133" width="0.1306%" height="15" fill="rgb(235,93,37)"/><text x="34.7649%" y="143.50"></text></g><g><title>layout_of (2,337,493 samples, 0.20%)</title><rect x="35.3141%" y="117" width="0.2024%" height="15" fill="rgb(213,116,39)"/><text x="35.5641%" y="127.50"></text></g><g><title>predicates_of (2,104,014 samples, 0.18%)</title><rect x="35.8533%" y="101" width="0.1821%" height="15" fill="rgb(222,207,29)"/><text x="36.1033%" y="111.50"></text></g><g><title>predicates_defined_on (1,520,400 samples, 0.13%)</title><rect x="35.9038%" y="85" width="0.1316%" height="15" fill="rgb(206,96,30)"/><text x="36.1538%" y="95.50"></text></g><g><title>param_env (6,002,526 samples, 0.52%)</title><rect x="35.5164%" y="117" width="0.5196%" height="15" fill="rgb(218,138,4)"/><text x="35.7664%" y="127.50"></text></g><g><title>fn_abi_of_instance (16,809,904 samples, 1.46%)</title><rect x="34.6482%" y="133" width="1.4552%" height="15" fill="rgb(250,191,14)"/><text x="34.8982%" y="143.50"></text></g><g><title>layout_of (3,242,699 samples, 0.28%)</title><rect x="36.1895%" y="133" width="0.2807%" height="15" fill="rgb(239,60,40)"/><text x="36.4395%" y="143.50"></text></g><g><title>codegen_module (147,249,968 samples, 12.75%)</title><rect x="23.8029%" y="149" width="12.7472%" height="15" fill="rgb(206,27,48)"/><text x="24.0529%" y="159.50">codegen_module</text></g><g><title>codegen_crate (149,628,260 samples, 12.95%)</title><rect x="23.6032%" y="165" width="12.9531%" height="15" fill="rgb(225,35,8)"/><text x="23.8532%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (600,480,339 samples, 51.98%)</title><rect x="36.5741%" y="149" width="51.9825%" height="15" fill="rgb(250,213,24)"/><text x="36.8241%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (571,528,324 samples, 49.48%)</title><rect x="39.0804%" y="133" width="49.4762%" height="15" fill="rgb(247,123,22)"/><text x="39.3304%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (634,775,525 samples, 54.95%)</title><rect x="36.5563%" y="165" width="54.9514%" height="15" fill="rgb(231,138,38)"/><text x="36.8063%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (34,089,765 samples, 2.95%)</title><rect x="88.5566%" y="149" width="2.9511%" height="15" fill="rgb(231,145,46)"/><text x="88.8066%" y="159.50">LLV..</text></g><g><title>metadata_register_crate (1,297,583 samples, 0.11%)</title><rect x="92.6168%" y="117" width="0.1123%" height="15" fill="rgb(251,118,11)"/><text x="92.8668%" y="127.50"></text></g><g><title>macro_expand_crate (14,014,862 samples, 1.21%)</title><rect x="91.5384%" y="149" width="1.2132%" height="15" fill="rgb(217,147,25)"/><text x="91.7884%" y="159.50"></text></g><g><title>expand_crate (14,003,042 samples, 1.21%)</title><rect x="91.5394%" y="133" width="1.2122%" height="15" fill="rgb(247,81,37)"/><text x="91.7894%" y="143.50"></text></g><g><title>late_resolve_crate (1,951,590 samples, 0.17%)</title><rect x="92.7714%" y="133" width="0.1689%" height="15" fill="rgb(209,12,38)"/><text x="93.0214%" y="143.50"></text></g><g><title>configure_and_expand (16,672,989 samples, 1.44%)</title><rect x="91.5077%" y="165" width="1.4434%" height="15" fill="rgb(227,1,9)"/><text x="91.7577%" y="175.50"></text></g><g><title>resolve_crate (2,260,723 samples, 0.20%)</title><rect x="92.7553%" y="149" width="0.1957%" height="15" fill="rgb(248,47,43)"/><text x="93.0053%" y="159.50"></text></g><g><title>free_global_ctxt (7,170,793 samples, 0.62%)</title><rect x="93.0015%" y="165" width="0.6208%" height="15" fill="rgb(221,10,30)"/><text x="93.2515%" y="175.50"></text></g><g><title>item_attrs (1,485,165 samples, 0.13%)</title><rect x="94.2329%" y="69" width="0.1286%" height="15" fill="rgb(210,229,1)"/><text x="94.4829%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,420,594 samples, 0.12%)</title><rect x="94.2385%" y="53" width="0.1230%" height="15" fill="rgb(222,148,37)"/><text x="94.4885%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,549,903 samples, 0.22%)</title><rect x="94.1964%" y="85" width="0.2207%" height="15" fill="rgb(234,67,33)"/><text x="94.4464%" y="95.50"></text></g><g><title>mir_shims (1,968,950 samples, 0.17%)</title><rect x="94.4647%" y="85" width="0.1704%" height="15" fill="rgb(247,98,35)"/><text x="94.7147%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,289,744 samples, 0.28%)</title><rect x="94.9905%" y="69" width="0.2848%" height="15" fill="rgb(247,138,52)"/><text x="95.2405%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,327,713 samples, 0.37%)</title><rect x="95.2753%" y="69" width="0.3746%" height="15" fill="rgb(213,79,30)"/><text x="95.5253%" y="79.50"></text></g><g><title>optimized_mir (12,026,149 samples, 1.04%)</title><rect x="94.6352%" y="85" width="1.0411%" height="15" fill="rgb(246,177,23)"/><text x="94.8852%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,300,313 samples, 0.29%)</title><rect x="95.8286%" y="69" width="0.2857%" height="15" fill="rgb(230,62,27)"/><text x="96.0786%" y="79.50"></text></g><g><title>specialization_graph_of (1,476,683 samples, 0.13%)</title><rect x="96.2152%" y="69" width="0.1278%" height="15" fill="rgb(216,154,8)"/><text x="96.4652%" y="79.50"></text></g><g><title>resolve_instance (8,297,339 samples, 0.72%)</title><rect x="95.6763%" y="85" width="0.7183%" height="15" fill="rgb(244,35,45)"/><text x="95.9263%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,330,018 samples, 0.12%)</title><rect x="96.4023%" y="85" width="0.1151%" height="15" fill="rgb(251,115,12)"/><text x="96.6523%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (32,524,828 samples, 2.82%)</title><rect x="93.7757%" y="101" width="2.8156%" height="15" fill="rgb(240,54,50)"/><text x="94.0257%" y="111.50">mo..</text></g><g><title>monomorphization_collector (32,581,049 samples, 2.82%)</title><rect x="93.7755%" y="117" width="2.8205%" height="15" fill="rgb(233,84,52)"/><text x="94.0255%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (3,682,877 samples, 0.32%)</title><rect x="96.5970%" y="101" width="0.3188%" height="15" fill="rgb(207,117,47)"/><text x="96.8470%" y="111.50"></text></g><g><title>symbol_name (3,261,404 samples, 0.28%)</title><rect x="96.6335%" y="85" width="0.2823%" height="15" fill="rgb(249,43,39)"/><text x="96.8835%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (38,144,596 samples, 3.30%)</title><rect x="93.7709%" y="133" width="3.3021%" height="15" fill="rgb(209,38,44)"/><text x="94.0209%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (5,510,386 samples, 0.48%)</title><rect x="96.5960%" y="117" width="0.4770%" height="15" fill="rgb(236,212,23)"/><text x="96.8460%" y="127.50"></text></g><g><title>cgu_partitioning (1,816,389 samples, 0.16%)</title><rect x="96.9158%" y="101" width="0.1572%" height="15" fill="rgb(242,79,21)"/><text x="97.1658%" y="111.50"></text></g><g><title>exported_symbols (38,409,708 samples, 3.33%)</title><rect x="93.7545%" y="149" width="3.3251%" height="15" fill="rgb(211,96,35)"/><text x="94.0045%" y="159.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,275,635 samples, 0.20%)</title><rect x="97.3015%" y="133" width="0.1970%" height="15" fill="rgb(253,215,40)"/><text x="97.5515%" y="143.50"></text></g><g><title>optimized_mir (5,173,742 samples, 0.45%)</title><rect x="97.0869%" y="149" width="0.4479%" height="15" fill="rgb(211,81,21)"/><text x="97.3369%" y="159.50"></text></g><g><title>generate_crate_metadata (45,279,037 samples, 3.92%)</title><rect x="93.6223%" y="165" width="3.9197%" height="15" fill="rgb(208,190,38)"/><text x="93.8723%" y="175.50">gene..</text></g><g><title>hir_lowering (3,280,533 samples, 0.28%)</title><rect x="97.5420%" y="165" width="0.2840%" height="15" fill="rgb(235,213,38)"/><text x="97.7920%" y="175.50"></text></g><g><title>finish_ongoing_codegen (18,292,815 samples, 1.58%)</title><rect x="97.8273%" y="149" width="1.5836%" height="15" fill="rgb(237,122,38)"/><text x="98.0773%" y="159.50"></text></g><g><title>link_crate (3,366,234 samples, 0.29%)</title><rect x="99.4108%" y="149" width="0.2914%" height="15" fill="rgb(244,218,35)"/><text x="99.6608%" y="159.50"></text></g><g><title>link_binary (3,298,833 samples, 0.29%)</title><rect x="99.4167%" y="133" width="0.2856%" height="15" fill="rgb(240,68,47)"/><text x="99.6667%" y="143.50"></text></g><g><title>link_rlib (2,453,464 samples, 0.21%)</title><rect x="99.4899%" y="117" width="0.2124%" height="15" fill="rgb(210,16,53)"/><text x="99.7399%" y="127.50"></text></g><g><title>link (21,682,459 samples, 1.88%)</title><rect x="97.8260%" y="165" width="1.8770%" height="15" fill="rgb(235,124,12)"/><text x="98.0760%" y="175.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,564,676 samples, 0.22%)</title><rect x="99.7385%" y="165" width="0.2220%" height="15" fill="rgb(224,169,11)"/><text x="99.9885%" y="175.50"></text></g><g><title>all (1,155,157,817 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,155,157,817 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>