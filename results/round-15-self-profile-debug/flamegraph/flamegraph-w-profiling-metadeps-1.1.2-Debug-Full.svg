<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (91,681,470 samples, 16.10%)</title><rect x="0.1009%" y="165" width="16.0991%" height="15" fill="rgb(227,0,7)"/><text x="0.3509%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,117,042 samples, 0.20%)</title><rect x="18.5943%" y="53" width="0.1962%" height="15" fill="rgb(217,0,24)"/><text x="18.8443%" y="63.50"></text></g><g><title>resolve_instance (826,086 samples, 0.15%)</title><rect x="18.7905%" y="53" width="0.1451%" height="15" fill="rgb(221,193,54)"/><text x="19.0405%" y="63.50"></text></g><g><title>thir_body (618,328 samples, 0.11%)</title><rect x="18.9399%" y="53" width="0.1086%" height="15" fill="rgb(248,212,6)"/><text x="19.1899%" y="63.50"></text></g><g><title>mir_const (6,012,731 samples, 1.06%)</title><rect x="17.9955%" y="101" width="1.0558%" height="15" fill="rgb(208,68,35)"/><text x="18.2455%" y="111.50"></text></g><g><title>unsafety_check_result (5,365,444 samples, 0.94%)</title><rect x="18.1091%" y="85" width="0.9422%" height="15" fill="rgb(232,128,0)"/><text x="18.3591%" y="95.50"></text></g><g><title>mir_built (4,785,320 samples, 0.84%)</title><rect x="18.2110%" y="69" width="0.8403%" height="15" fill="rgb(207,160,47)"/><text x="18.4610%" y="79.50"></text></g><g><title>mir_promoted (6,615,788 samples, 1.16%)</title><rect x="17.8937%" y="117" width="1.1617%" height="15" fill="rgb(228,23,34)"/><text x="18.1437%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,855,132 samples, 0.33%)</title><rect x="19.1804%" y="117" width="0.3258%" height="15" fill="rgb(218,30,26)"/><text x="19.4304%" y="127.50"></text></g><g><title>MIR_borrow_checking (18,618,719 samples, 3.27%)</title><rect x="16.2377%" y="149" width="3.2694%" height="15" fill="rgb(220,122,19)"/><text x="16.4877%" y="159.50">MIR..</text></g><g><title>mir_borrowck (18,552,129 samples, 3.26%)</title><rect x="16.2494%" y="133" width="3.2577%" height="15" fill="rgb(250,228,42)"/><text x="16.4994%" y="143.50">mir..</text></g><g><title>misc_checking_1 (980,570 samples, 0.17%)</title><rect x="19.5317%" y="149" width="0.1722%" height="15" fill="rgb(240,193,28)"/><text x="19.7817%" y="159.50"></text></g><g><title>misc_checking_2 (765,768 samples, 0.13%)</title><rect x="19.7039%" y="149" width="0.1345%" height="15" fill="rgb(216,20,37)"/><text x="19.9539%" y="159.50"></text></g><g><title>specialization_graph_of (2,614,106 samples, 0.46%)</title><rect x="20.0598%" y="85" width="0.4590%" height="15" fill="rgb(206,188,39)"/><text x="20.3098%" y="95.50"></text></g><g><title>impl_trait_ref (1,284,993 samples, 0.23%)</title><rect x="20.2932%" y="69" width="0.2256%" height="15" fill="rgb(217,207,13)"/><text x="20.5432%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,080,179 samples, 0.19%)</title><rect x="20.3291%" y="53" width="0.1897%" height="15" fill="rgb(231,73,38)"/><text x="20.5791%" y="63.50"></text></g><g><title>resolve_instance (2,673,418 samples, 0.47%)</title><rect x="20.0499%" y="101" width="0.4694%" height="15" fill="rgb(225,20,46)"/><text x="20.2999%" y="111.50"></text></g><g><title>crate_lints (4,631,487 samples, 0.81%)</title><rect x="19.8964%" y="117" width="0.8133%" height="15" fill="rgb(210,31,41)"/><text x="20.1464%" y="127.50"></text></g><g><title>type_of (1,071,722 samples, 0.19%)</title><rect x="20.5215%" y="101" width="0.1882%" height="15" fill="rgb(221,200,47)"/><text x="20.7715%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (825,150 samples, 0.14%)</title><rect x="20.5648%" y="85" width="0.1449%" height="15" fill="rgb(226,26,5)"/><text x="20.8148%" y="95.50"></text></g><g><title>lint_checking (5,103,372 samples, 0.90%)</title><rect x="19.8961%" y="133" width="0.8961%" height="15" fill="rgb(249,33,26)"/><text x="20.1461%" y="143.50"></text></g><g><title>privacy_checking_modules (593,666 samples, 0.10%)</title><rect x="20.8197%" y="133" width="0.1042%" height="15" fill="rgb(235,183,28)"/><text x="21.0697%" y="143.50"></text></g><g><title>check_mod_privacy (591,716 samples, 0.10%)</title><rect x="20.8201%" y="117" width="0.1039%" height="15" fill="rgb(221,5,38)"/><text x="21.0701%" y="127.50"></text></g><g><title>misc_checking_3 (6,194,333 samples, 1.09%)</title><rect x="19.8383%" y="149" width="1.0877%" height="15" fill="rgb(247,18,42)"/><text x="20.0883%" y="159.50"></text></g><g><title>impl_parent (1,104,268 samples, 0.19%)</title><rect x="21.2159%" y="85" width="0.1939%" height="15" fill="rgb(241,131,45)"/><text x="21.4659%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (708,886 samples, 0.12%)</title><rect x="21.2854%" y="69" width="0.1245%" height="15" fill="rgb(249,31,29)"/><text x="21.5354%" y="79.50"></text></g><g><title>impl_trait_ref (3,345,448 samples, 0.59%)</title><rect x="21.4098%" y="85" width="0.5875%" height="15" fill="rgb(225,111,53)"/><text x="21.6598%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,930,953 samples, 0.51%)</title><rect x="21.4826%" y="69" width="0.5147%" height="15" fill="rgb(238,160,17)"/><text x="21.7326%" y="79.50"></text></g><g><title>coherent_trait (6,420,305 samples, 1.13%)</title><rect x="20.9350%" y="117" width="1.1274%" height="15" fill="rgb(214,148,48)"/><text x="21.1850%" y="127.50"></text></g><g><title>specialization_graph_of (6,408,495 samples, 1.13%)</title><rect x="20.9371%" y="101" width="1.1253%" height="15" fill="rgb(232,36,49)"/><text x="21.1871%" y="111.50"></text></g><g><title>coherence_checking (6,534,476 samples, 1.15%)</title><rect x="20.9324%" y="133" width="1.1474%" height="15" fill="rgb(209,103,24)"/><text x="21.1824%" y="143.50"></text></g><g><title>dropck_outlives (609,406 samples, 0.11%)</title><rect x="25.2023%" y="69" width="0.1070%" height="15" fill="rgb(229,88,8)"/><text x="25.4523%" y="79.50"></text></g><g><title>evaluate_obligation (2,099,320 samples, 0.37%)</title><rect x="25.3093%" y="69" width="0.3686%" height="15" fill="rgb(213,181,19)"/><text x="25.5593%" y="79.50"></text></g><g><title>typeck (16,743,370 samples, 2.94%)</title><rect x="23.0236%" y="85" width="2.9401%" height="15" fill="rgb(254,191,54)"/><text x="23.2736%" y="95.50">ty..</text></g><g><title>item_bodies_checking (22,116,895 samples, 3.88%)</title><rect x="22.0835%" y="133" width="3.8837%" height="15" fill="rgb(241,83,37)"/><text x="22.3335%" y="143.50">item..</text></g><g><title>typeck_item_bodies (22,113,885 samples, 3.88%)</title><rect x="22.0840%" y="117" width="3.8832%" height="15" fill="rgb(233,36,39)"/><text x="22.3340%" y="127.50">type..</text></g><g><title>typeck (22,075,285 samples, 3.88%)</title><rect x="22.0908%" y="101" width="3.8764%" height="15" fill="rgb(226,3,54)"/><text x="22.3408%" y="111.50">type..</text></g><g><title>item_types_checking (999,940 samples, 0.18%)</title><rect x="25.9672%" y="133" width="0.1756%" height="15" fill="rgb(245,192,40)"/><text x="26.2172%" y="143.50"></text></g><g><title>check_mod_item_types (997,450 samples, 0.18%)</title><rect x="25.9676%" y="117" width="0.1752%" height="15" fill="rgb(238,167,29)"/><text x="26.2176%" y="127.50"></text></g><g><title>type_collecting (1,362,684 samples, 0.24%)</title><rect x="26.1430%" y="133" width="0.2393%" height="15" fill="rgb(232,182,51)"/><text x="26.3930%" y="143.50"></text></g><g><title>collect_mod_item_types (1,355,624 samples, 0.24%)</title><rect x="26.1442%" y="117" width="0.2380%" height="15" fill="rgb(231,60,39)"/><text x="26.3942%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,243,991 samples, 0.39%)</title><rect x="26.3990%" y="117" width="0.3940%" height="15" fill="rgb(208,69,12)"/><text x="26.6490%" y="127.50"></text></g><g><title>evaluate_obligation (801,378 samples, 0.14%)</title><rect x="26.8984%" y="101" width="0.1407%" height="15" fill="rgb(235,93,37)"/><text x="27.1484%" y="111.50"></text></g><g><title>check_item_well_formed (1,749,239 samples, 0.31%)</title><rect x="26.7930%" y="117" width="0.3072%" height="15" fill="rgb(213,116,39)"/><text x="27.0430%" y="127.50"></text></g><g><title>analysis (62,218,601 samples, 10.93%)</title><rect x="16.2000%" y="165" width="10.9255%" height="15" fill="rgb(222,207,29)"/><text x="16.4500%" y="175.50">analysis</text></g><g><title>type_check_crate (35,304,438 samples, 6.20%)</title><rect x="20.9261%" y="149" width="6.1994%" height="15" fill="rgb(206,96,30)"/><text x="21.1761%" y="159.50">type_che..</text></g><g><title>wf_checking (4,229,763 samples, 0.74%)</title><rect x="26.3827%" y="133" width="0.7427%" height="15" fill="rgb(218,138,4)"/><text x="26.6327%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,197,412 samples, 0.21%)</title><rect x="36.0693%" y="133" width="0.2103%" height="15" fill="rgb(250,191,14)"/><text x="36.3193%" y="143.50"></text></g><g><title>const_caller_location (621,486 samples, 0.11%)</title><rect x="36.2795%" y="133" width="0.1091%" height="15" fill="rgb(239,60,40)"/><text x="36.5295%" y="143.50"></text></g><g><title>item_attrs (697,246 samples, 0.12%)</title><rect x="36.9619%" y="101" width="0.1224%" height="15" fill="rgb(206,27,48)"/><text x="37.2119%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (659,226 samples, 0.12%)</title><rect x="36.9686%" y="85" width="0.1158%" height="15" fill="rgb(225,35,8)"/><text x="37.2186%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,313,461 samples, 0.23%)</title><rect x="36.9092%" y="117" width="0.2306%" height="15" fill="rgb(250,213,24)"/><text x="37.1592%" y="127.50"></text></g><g><title>layout_of (631,194 samples, 0.11%)</title><rect x="37.3578%" y="101" width="0.1108%" height="15" fill="rgb(247,123,22)"/><text x="37.6078%" y="111.50"></text></g><g><title>layout_of (1,923,083 samples, 0.34%)</title><rect x="37.1765%" y="117" width="0.3377%" height="15" fill="rgb(231,138,38)"/><text x="37.4265%" y="127.50"></text></g><g><title>predicates_of (1,381,421 samples, 0.24%)</title><rect x="37.9959%" y="101" width="0.2426%" height="15" fill="rgb(231,145,46)"/><text x="38.2459%" y="111.50"></text></g><g><title>predicates_defined_on (981,838 samples, 0.17%)</title><rect x="38.0661%" y="85" width="0.1724%" height="15" fill="rgb(251,118,11)"/><text x="38.3161%" y="95.50"></text></g><g><title>param_env (4,145,381 samples, 0.73%)</title><rect x="37.5142%" y="117" width="0.7279%" height="15" fill="rgb(217,147,25)"/><text x="37.7642%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,094,133 samples, 0.19%)</title><rect x="38.2422%" y="117" width="0.1921%" height="15" fill="rgb(247,81,37)"/><text x="38.4922%" y="127.50"></text></g><g><title>normalize_projection_ty (855,501 samples, 0.15%)</title><rect x="38.2841%" y="101" width="0.1502%" height="15" fill="rgb(209,12,38)"/><text x="38.5341%" y="111.50"></text></g><g><title>fn_abi_of_instance (11,647,126 samples, 2.05%)</title><rect x="36.4009%" y="133" width="2.0452%" height="15" fill="rgb(227,1,9)"/><text x="36.6509%" y="143.50">f..</text></g><g><title>layout_of (626,594 samples, 0.11%)</title><rect x="38.8996%" y="85" width="0.1100%" height="15" fill="rgb(248,47,43)"/><text x="39.1496%" y="95.50"></text></g><g><title>layout_of (919,776 samples, 0.16%)</title><rect x="38.8621%" y="101" width="0.1615%" height="15" fill="rgb(221,10,30)"/><text x="39.1121%" y="111.50"></text></g><g><title>layout_of (1,768,105 samples, 0.31%)</title><rect x="38.7808%" y="117" width="0.3105%" height="15" fill="rgb(210,229,1)"/><text x="39.0308%" y="127.50"></text></g><g><title>layout_of (3,357,979 samples, 0.59%)</title><rect x="38.5461%" y="133" width="0.5897%" height="15" fill="rgb(222,148,37)"/><text x="38.7961%" y="143.50"></text></g><g><title>symbol_name (1,663,292 samples, 0.29%)</title><rect x="39.1433%" y="133" width="0.2921%" height="15" fill="rgb(234,67,33)"/><text x="39.3933%" y="143.50"></text></g><g><title>codegen_module (66,985,421 samples, 11.76%)</title><rect x="27.7025%" y="149" width="11.7625%" height="15" fill="rgb(247,98,35)"/><text x="27.9525%" y="159.50">codegen_module</text></g><g><title>codegen_crate (70,543,365 samples, 12.39%)</title><rect x="27.1266%" y="165" width="12.3873%" height="15" fill="rgb(247,138,52)"/><text x="27.3766%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (249,716,253 samples, 43.85%)</title><rect x="39.5512%" y="149" width="43.8498%" height="15" fill="rgb(213,79,30)"/><text x="39.8012%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (240,206,718 samples, 42.18%)</title><rect x="41.2211%" y="133" width="42.1799%" height="15" fill="rgb(246,177,23)"/><text x="41.4711%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (261,023,845 samples, 45.84%)</title><rect x="39.5139%" y="165" width="45.8354%" height="15" fill="rgb(230,62,27)"/><text x="39.7639%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,095,152 samples, 1.95%)</title><rect x="83.4010%" y="149" width="1.9483%" height="15" fill="rgb(216,154,8)"/><text x="83.6510%" y="159.50">L..</text></g><g><title>metadata_load_macro (775,047 samples, 0.14%)</title><rect x="87.5399%" y="117" width="0.1361%" height="15" fill="rgb(244,35,45)"/><text x="87.7899%" y="127.50"></text></g><g><title>macro_expand_crate (14,214,244 samples, 2.50%)</title><rect x="85.4053%" y="149" width="2.4960%" height="15" fill="rgb(251,115,12)"/><text x="85.6553%" y="159.50">ma..</text></g><g><title>expand_crate (14,198,464 samples, 2.49%)</title><rect x="85.4081%" y="133" width="2.4932%" height="15" fill="rgb(240,54,50)"/><text x="85.6581%" y="143.50">ex..</text></g><g><title>metadata_register_crate (1,283,132 samples, 0.23%)</title><rect x="87.6760%" y="117" width="0.2253%" height="15" fill="rgb(233,84,52)"/><text x="87.9260%" y="127.50"></text></g><g><title>late_resolve_crate (1,456,385 samples, 0.26%)</title><rect x="87.9319%" y="133" width="0.2557%" height="15" fill="rgb(207,117,47)"/><text x="88.1819%" y="143.50"></text></g><g><title>configure_and_expand (16,228,194 samples, 2.85%)</title><rect x="85.3492%" y="165" width="2.8496%" height="15" fill="rgb(249,43,39)"/><text x="85.5992%" y="175.50">co..</text></g><g><title>resolve_crate (1,609,567 samples, 0.28%)</title><rect x="87.9162%" y="149" width="0.2826%" height="15" fill="rgb(209,38,44)"/><text x="88.1662%" y="159.50"></text></g><g><title>free_global_ctxt (5,194,162 samples, 0.91%)</title><rect x="88.2641%" y="165" width="0.9121%" height="15" fill="rgb(236,212,23)"/><text x="88.5141%" y="175.50"></text></g><g><title>item_attrs (908,742 samples, 0.16%)</title><rect x="89.7340%" y="69" width="0.1596%" height="15" fill="rgb(242,79,21)"/><text x="89.9840%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (870,521 samples, 0.15%)</title><rect x="89.7407%" y="53" width="0.1529%" height="15" fill="rgb(211,96,35)"/><text x="89.9907%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,445,670 samples, 0.25%)</title><rect x="89.6897%" y="85" width="0.2539%" height="15" fill="rgb(253,215,40)"/><text x="89.9397%" y="95.50"></text></g><g><title>layout_of (569,705 samples, 0.10%)</title><rect x="90.3748%" y="69" width="0.1000%" height="15" fill="rgb(211,81,21)"/><text x="90.6248%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,877,340 samples, 0.33%)</title><rect x="90.4748%" y="69" width="0.3297%" height="15" fill="rgb(208,190,38)"/><text x="90.7248%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,497,792 samples, 0.44%)</title><rect x="90.8045%" y="69" width="0.4386%" height="15" fill="rgb(235,213,38)"/><text x="91.0545%" y="79.50"></text></g><g><title>optimized_mir (6,914,102 samples, 1.21%)</title><rect x="90.0869%" y="85" width="1.2141%" height="15" fill="rgb(237,122,38)"/><text x="90.3369%" y="95.50"></text></g><g><title>evaluate_obligation (946,016 samples, 0.17%)</title><rect x="91.7560%" y="53" width="0.1661%" height="15" fill="rgb(244,218,35)"/><text x="92.0060%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (3,063,180 samples, 0.54%)</title><rect x="91.4715%" y="69" width="0.5379%" height="15" fill="rgb(240,68,47)"/><text x="91.7215%" y="79.50"></text></g><g><title>impl_parent (694,143 samples, 0.12%)</title><rect x="92.4464%" y="53" width="0.1219%" height="15" fill="rgb(210,16,53)"/><text x="92.6964%" y="63.50"></text></g><g><title>specialization_graph_of (3,169,371 samples, 0.56%)</title><rect x="92.1995%" y="69" width="0.5565%" height="15" fill="rgb(235,124,12)"/><text x="92.4495%" y="79.50"></text></g><g><title>impl_trait_ref (1,069,623 samples, 0.19%)</title><rect x="92.5682%" y="53" width="0.1878%" height="15" fill="rgb(224,169,11)"/><text x="92.8182%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (821,181 samples, 0.14%)</title><rect x="92.6119%" y="37" width="0.1442%" height="15" fill="rgb(250,166,2)"/><text x="92.8619%" y="47.50"></text></g><g><title>resolve_instance (8,746,060 samples, 1.54%)</title><rect x="91.3010%" y="85" width="1.5358%" height="15" fill="rgb(242,216,29)"/><text x="91.5510%" y="95.50"></text></g><g><title>eval_to_const_value_raw (823,290 samples, 0.14%)</title><rect x="92.8774%" y="69" width="0.1446%" height="15" fill="rgb(230,116,27)"/><text x="93.1274%" y="79.50"></text></g><g><title>eval_to_const_value_raw (800,550 samples, 0.14%)</title><rect x="92.8814%" y="53" width="0.1406%" height="15" fill="rgb(228,99,48)"/><text x="93.1314%" y="63.50"></text></g><g><title>eval_to_allocation_raw (764,230 samples, 0.13%)</title><rect x="92.8878%" y="37" width="0.1342%" height="15" fill="rgb(253,11,6)"/><text x="93.1378%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (958,960 samples, 0.17%)</title><rect x="92.8585%" y="85" width="0.1684%" height="15" fill="rgb(247,143,39)"/><text x="93.1085%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (1,511,625 samples, 0.27%)</title><rect x="93.0277%" y="85" width="0.2654%" height="15" fill="rgb(236,97,10)"/><text x="93.2777%" y="95.50"></text></g><g><title>upstream_monomorphizations (1,481,205 samples, 0.26%)</title><rect x="93.0331%" y="69" width="0.2601%" height="15" fill="rgb(233,208,19)"/><text x="93.2831%" y="79.50"></text></g><g><title>exported_symbols (1,276,852 samples, 0.22%)</title><rect x="93.0689%" y="53" width="0.2242%" height="15" fill="rgb(216,164,2)"/><text x="93.3189%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,272,032 samples, 0.22%)</title><rect x="93.0698%" y="37" width="0.2234%" height="15" fill="rgb(220,129,5)"/><text x="93.3198%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (23,326,137 samples, 4.10%)</title><rect x="89.3410%" y="101" width="4.0960%" height="15" fill="rgb(242,17,10)"/><text x="89.5910%" y="111.50">mono..</text></g><g><title>vtable_entries (819,327 samples, 0.14%)</title><rect x="93.2932%" y="85" width="0.1439%" height="15" fill="rgb(242,107,0)"/><text x="93.5432%" y="95.50"></text></g><g><title>monomorphization_collector (23,375,198 samples, 4.10%)</title><rect x="89.3405%" y="117" width="4.1046%" height="15" fill="rgb(251,28,31)"/><text x="89.5905%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,507,495 samples, 0.26%)</title><rect x="93.4459%" y="101" width="0.2647%" height="15" fill="rgb(233,223,10)"/><text x="93.6959%" y="111.50"></text></g><g><title>symbol_name (1,373,884 samples, 0.24%)</title><rect x="93.4694%" y="85" width="0.2413%" height="15" fill="rgb(215,21,27)"/><text x="93.7194%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (25,707,881 samples, 4.51%)</title><rect x="89.3324%" y="133" width="4.5143%" height="15" fill="rgb(232,23,21)"/><text x="89.5824%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (2,286,413 samples, 0.40%)</title><rect x="93.4451%" y="117" width="0.4015%" height="15" fill="rgb(244,5,23)"/><text x="93.6951%" y="127.50"></text></g><g><title>cgu_partitioning (774,348 samples, 0.14%)</title><rect x="93.7106%" y="101" width="0.1360%" height="15" fill="rgb(226,81,46)"/><text x="93.9606%" y="111.50"></text></g><g><title>exported_symbols (25,829,262 samples, 4.54%)</title><rect x="89.3211%" y="149" width="4.5356%" height="15" fill="rgb(247,70,30)"/><text x="89.5711%" y="159.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (794,538 samples, 0.14%)</title><rect x="94.0452%" y="133" width="0.1395%" height="15" fill="rgb(212,68,19)"/><text x="94.2952%" y="143.50"></text></g><g><title>optimized_mir (2,004,080 samples, 0.35%)</title><rect x="93.8684%" y="149" width="0.3519%" height="15" fill="rgb(240,187,13)"/><text x="94.1184%" y="159.50"></text></g><g><title>generate_crate_metadata (28,836,363 samples, 5.06%)</title><rect x="89.1761%" y="165" width="5.0636%" height="15" fill="rgb(223,113,26)"/><text x="89.4261%" y="175.50">genera..</text></g><g><title>hir_lowering (1,663,457 samples, 0.29%)</title><rect x="94.2398%" y="165" width="0.2921%" height="15" fill="rgb(206,192,2)"/><text x="94.4898%" y="175.50"></text></g><g><title>finish_ongoing_codegen (26,381,487 samples, 4.63%)</title><rect x="94.5362%" y="149" width="4.6325%" height="15" fill="rgb(241,108,4)"/><text x="94.7862%" y="159.50">finis..</text></g><g><title>link_crate (1,985,800 samples, 0.35%)</title><rect x="99.1687%" y="149" width="0.3487%" height="15" fill="rgb(247,173,49)"/><text x="99.4187%" y="159.50"></text></g><g><title>link_binary (1,961,450 samples, 0.34%)</title><rect x="99.1730%" y="133" width="0.3444%" height="15" fill="rgb(224,114,35)"/><text x="99.4230%" y="143.50"></text></g><g><title>link_rlib (1,423,915 samples, 0.25%)</title><rect x="99.2674%" y="117" width="0.2500%" height="15" fill="rgb(245,159,27)"/><text x="99.5174%" y="127.50"></text></g><g><title>link (28,403,927 samples, 4.99%)</title><rect x="94.5319%" y="165" width="4.9877%" height="15" fill="rgb(245,172,44)"/><text x="94.7819%" y="175.50">link</text></g><g><title>parse_crate (602,326 samples, 0.11%)</title><rect x="99.5195%" y="165" width="0.1058%" height="15" fill="rgb(236,23,11)"/><text x="99.7695%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,534,475 samples, 0.27%)</title><rect x="99.6593%" y="165" width="0.2695%" height="15" fill="rgb(205,117,38)"/><text x="99.9093%" y="175.50"></text></g><g><title>all (569,481,453 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (569,481,453 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>