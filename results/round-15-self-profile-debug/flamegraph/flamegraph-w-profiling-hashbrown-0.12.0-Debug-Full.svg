<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,925,750 samples, 1.27%)</title><rect x="0.0999%" y="197" width="1.2729%" height="15" fill="rgb(227,0,7)"/><text x="0.3499%" y="207.50"></text></g><g><title>implied_outlives_bounds (801,458 samples, 0.11%)</title><rect x="13.7182%" y="149" width="0.1143%" height="15" fill="rgb(217,0,24)"/><text x="13.9682%" y="159.50"></text></g><g><title>param_env (1,088,449 samples, 0.16%)</title><rect x="15.4948%" y="117" width="0.1552%" height="15" fill="rgb(221,193,54)"/><text x="15.7448%" y="127.50"></text></g><g><title>item_attrs (824,931 samples, 0.12%)</title><rect x="16.2364%" y="85" width="0.1176%" height="15" fill="rgb(248,212,6)"/><text x="16.4864%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (796,359 samples, 0.11%)</title><rect x="16.2405%" y="69" width="0.1136%" height="15" fill="rgb(208,68,35)"/><text x="16.4905%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,205,543 samples, 0.17%)</title><rect x="16.1889%" y="101" width="0.1719%" height="15" fill="rgb(232,128,0)"/><text x="16.4389%" y="111.50"></text></g><g><title>is_copy_raw (908,711 samples, 0.13%)</title><rect x="18.9071%" y="85" width="0.1296%" height="15" fill="rgb(207,160,47)"/><text x="19.1571%" y="95.50"></text></g><g><title>evaluate_obligation (712,426 samples, 0.10%)</title><rect x="18.9351%" y="69" width="0.1016%" height="15" fill="rgb(228,23,34)"/><text x="19.1851%" y="79.50"></text></g><g><title>needs_drop_raw (6,800,810 samples, 0.97%)</title><rect x="19.0367%" y="85" width="0.9698%" height="15" fill="rgb(218,30,26)"/><text x="19.2867%" y="95.50"></text></g><g><title>is_copy_raw (5,250,248 samples, 0.75%)</title><rect x="19.2578%" y="69" width="0.7487%" height="15" fill="rgb(220,122,19)"/><text x="19.5078%" y="79.50"></text></g><g><title>evaluate_obligation (4,056,296 samples, 0.58%)</title><rect x="19.4280%" y="53" width="0.5784%" height="15" fill="rgb(250,228,42)"/><text x="19.6780%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (2,697,764 samples, 0.38%)</title><rect x="20.2413%" y="69" width="0.3847%" height="15" fill="rgb(240,193,28)"/><text x="20.4913%" y="79.50"></text></g><g><title>resolve_instance (5,158,780 samples, 0.74%)</title><rect x="20.0065%" y="85" width="0.7357%" height="15" fill="rgb(216,20,37)"/><text x="20.2565%" y="95.50"></text></g><g><title>thir_body (6,308,337 samples, 0.90%)</title><rect x="20.7787%" y="85" width="0.8996%" height="15" fill="rgb(206,188,39)"/><text x="21.0287%" y="95.50"></text></g><g><title>mir_const (48,891,404 samples, 6.97%)</title><rect x="14.7360%" y="133" width="6.9722%" height="15" fill="rgb(217,207,13)"/><text x="14.9860%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (42,481,386 samples, 6.06%)</title><rect x="15.6501%" y="117" width="6.0581%" height="15" fill="rgb(231,73,38)"/><text x="15.9001%" y="127.50">unsafety..</text></g><g><title>mir_built (37,497,386 samples, 5.35%)</title><rect x="16.3608%" y="101" width="5.3473%" height="15" fill="rgb(225,20,46)"/><text x="16.6108%" y="111.50">mir_bui..</text></g><g><title>mir_const (950,608 samples, 0.14%)</title><rect x="21.8566%" y="117" width="0.1356%" height="15" fill="rgb(210,31,41)"/><text x="22.1066%" y="127.50"></text></g><g><title>unsafety_check_result (746,366 samples, 0.11%)</title><rect x="21.8857%" y="101" width="0.1064%" height="15" fill="rgb(221,200,47)"/><text x="22.1357%" y="111.50"></text></g><g><title>mir_const_qualif (2,018,352 samples, 0.29%)</title><rect x="21.7081%" y="133" width="0.2878%" height="15" fill="rgb(226,26,5)"/><text x="21.9581%" y="143.50"></text></g><g><title>mir_promoted (56,179,702 samples, 8.01%)</title><rect x="13.9845%" y="149" width="8.0115%" height="15" fill="rgb(249,33,26)"/><text x="14.2345%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,688,623 samples, 0.24%)</title><rect x="21.9968%" y="149" width="0.2408%" height="15" fill="rgb(235,183,28)"/><text x="22.2468%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,423,138 samples, 0.49%)</title><rect x="22.2376%" y="149" width="0.4882%" height="15" fill="rgb(221,5,38)"/><text x="22.4876%" y="159.50"></text></g><g><title>normalize_projection_ty (1,972,592 samples, 0.28%)</title><rect x="22.4445%" y="133" width="0.2813%" height="15" fill="rgb(247,18,42)"/><text x="22.6945%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,460,740 samples, 0.21%)</title><rect x="22.7258%" y="149" width="0.2083%" height="15" fill="rgb(241,131,45)"/><text x="22.9758%" y="159.50"></text></g><g><title>type_op_prove_predicate (24,349,262 samples, 3.47%)</title><rect x="22.9626%" y="149" width="3.4723%" height="15" fill="rgb(249,31,29)"/><text x="23.2126%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (174,314,521 samples, 24.86%)</title><rect x="1.5789%" y="181" width="24.8582%" height="15" fill="rgb(225,111,53)"/><text x="1.8289%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (173,269,443 samples, 24.71%)</title><rect x="1.7280%" y="165" width="24.7091%" height="15" fill="rgb(238,160,17)"/><text x="1.9780%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,097,111 samples, 0.16%)</title><rect x="26.4371%" y="181" width="0.1565%" height="15" fill="rgb(214,148,48)"/><text x="26.6871%" y="191.50"></text></g><g><title>hir_module_items (1,214,872 samples, 0.17%)</title><rect x="26.5935%" y="181" width="0.1732%" height="15" fill="rgb(232,36,49)"/><text x="26.8435%" y="191.50"></text></g><g><title>codegen_fn_attrs (862,477 samples, 0.12%)</title><rect x="27.0848%" y="117" width="0.1230%" height="15" fill="rgb(209,103,24)"/><text x="27.3348%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,757,439 samples, 0.25%)</title><rect x="26.9649%" y="149" width="0.2506%" height="15" fill="rgb(229,88,8)"/><text x="27.2149%" y="159.50"></text></g><g><title>should_inherit_track_caller (1,449,135 samples, 0.21%)</title><rect x="27.0089%" y="133" width="0.2067%" height="15" fill="rgb(213,181,19)"/><text x="27.2589%" y="143.50"></text></g><g><title>check_mod_attrs (3,097,892 samples, 0.44%)</title><rect x="26.7738%" y="165" width="0.4418%" height="15" fill="rgb(254,191,54)"/><text x="27.0238%" y="175.50"></text></g><g><title>check_mod_const_bodies (773,699 samples, 0.11%)</title><rect x="27.2155%" y="165" width="0.1103%" height="15" fill="rgb(241,83,37)"/><text x="27.4655%" y="175.50"></text></g><g><title>lookup_deprecation_entry (951,219 samples, 0.14%)</title><rect x="27.5299%" y="149" width="0.1356%" height="15" fill="rgb(233,36,39)"/><text x="27.7799%" y="159.50"></text></g><g><title>stability_index (822,958 samples, 0.12%)</title><rect x="27.5482%" y="133" width="0.1174%" height="15" fill="rgb(226,3,54)"/><text x="27.7982%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,069,350 samples, 0.30%)</title><rect x="27.3991%" y="165" width="0.2951%" height="15" fill="rgb(245,192,40)"/><text x="27.6491%" y="175.50"></text></g><g><title>misc_checking_1 (6,681,247 samples, 0.95%)</title><rect x="26.7668%" y="181" width="0.9528%" height="15" fill="rgb(238,167,29)"/><text x="27.0168%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (3,440,215 samples, 0.49%)</title><rect x="27.7199%" y="165" width="0.4906%" height="15" fill="rgb(232,182,51)"/><text x="27.9699%" y="175.50"></text></g><g><title>check_mod_liveness (2,908,740 samples, 0.41%)</title><rect x="27.7957%" y="149" width="0.4148%" height="15" fill="rgb(231,60,39)"/><text x="28.0457%" y="159.50"></text></g><g><title>misc_checking_2 (6,777,759 samples, 0.97%)</title><rect x="27.7196%" y="181" width="0.9665%" height="15" fill="rgb(208,69,12)"/><text x="27.9696%" y="191.50"></text></g><g><title>match_checking (3,335,574 samples, 0.48%)</title><rect x="28.2105%" y="165" width="0.4757%" height="15" fill="rgb(235,93,37)"/><text x="28.4605%" y="175.50"></text></g><g><title>check_match (3,064,912 samples, 0.44%)</title><rect x="28.2491%" y="149" width="0.4371%" height="15" fill="rgb(213,116,39)"/><text x="28.4991%" y="159.50"></text></g><g><title>check_private_in_public (1,417,944 samples, 0.20%)</title><rect x="28.6879%" y="165" width="0.2022%" height="15" fill="rgb(222,207,29)"/><text x="28.9379%" y="175.50"></text></g><g><title>death_checking (2,361,204 samples, 0.34%)</title><rect x="28.8901%" y="165" width="0.3367%" height="15" fill="rgb(206,96,30)"/><text x="29.1401%" y="175.50"></text></g><g><title>param_env (935,469 samples, 0.13%)</title><rect x="29.6048%" y="133" width="0.1334%" height="15" fill="rgb(218,138,4)"/><text x="29.8548%" y="143.50"></text></g><g><title>crate_lints (4,094,391 samples, 0.58%)</title><rect x="29.2274%" y="149" width="0.5839%" height="15" fill="rgb(250,191,14)"/><text x="29.4774%" y="159.50"></text></g><g><title>lint_checking (6,934,720 samples, 0.99%)</title><rect x="29.2269%" y="165" width="0.9889%" height="15" fill="rgb(239,60,40)"/><text x="29.4769%" y="175.50"></text></g><g><title>module_lints (2,836,789 samples, 0.40%)</title><rect x="29.8113%" y="149" width="0.4045%" height="15" fill="rgb(206,27,48)"/><text x="30.0613%" y="159.50"></text></g><g><title>lint_mod (2,822,889 samples, 0.40%)</title><rect x="29.8132%" y="133" width="0.4026%" height="15" fill="rgb(225,35,8)"/><text x="30.0632%" y="143.50"></text></g><g><title>privacy_access_levels (2,445,495 samples, 0.35%)</title><rect x="30.2158%" y="165" width="0.3487%" height="15" fill="rgb(250,213,24)"/><text x="30.4658%" y="175.50"></text></g><g><title>privacy_checking_modules (6,354,054 samples, 0.91%)</title><rect x="30.5645%" y="165" width="0.9061%" height="15" fill="rgb(247,123,22)"/><text x="30.8145%" y="175.50"></text></g><g><title>check_mod_privacy (6,344,004 samples, 0.90%)</title><rect x="30.5660%" y="149" width="0.9047%" height="15" fill="rgb(231,138,38)"/><text x="30.8160%" y="159.50"></text></g><g><title>misc_checking_3 (19,593,848 samples, 2.79%)</title><rect x="28.6862%" y="181" width="2.7942%" height="15" fill="rgb(231,145,46)"/><text x="28.9362%" y="191.50">mi..</text></g><g><title>impl_parent (1,784,742 samples, 0.25%)</title><rect x="32.3781%" y="117" width="0.2545%" height="15" fill="rgb(251,118,11)"/><text x="32.6281%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,030,426 samples, 0.15%)</title><rect x="32.4857%" y="101" width="0.1469%" height="15" fill="rgb(217,147,25)"/><text x="32.7357%" y="111.50"></text></g><g><title>impl_trait_ref (4,106,383 samples, 0.59%)</title><rect x="32.6327%" y="117" width="0.5856%" height="15" fill="rgb(247,81,37)"/><text x="32.8827%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,129,784 samples, 0.45%)</title><rect x="32.7720%" y="101" width="0.4463%" height="15" fill="rgb(209,12,38)"/><text x="33.0220%" y="111.50"></text></g><g><title>item_attrs (962,102 samples, 0.14%)</title><rect x="33.2183%" y="117" width="0.1372%" height="15" fill="rgb(227,1,9)"/><text x="33.4683%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (899,741 samples, 0.13%)</title><rect x="33.2272%" y="101" width="0.1283%" height="15" fill="rgb(248,47,43)"/><text x="33.4772%" y="111.50"></text></g><g><title>coherent_trait (14,099,833 samples, 2.01%)</title><rect x="31.5463%" y="149" width="2.0107%" height="15" fill="rgb(221,10,30)"/><text x="31.7963%" y="159.50">c..</text></g><g><title>specialization_graph_of (13,682,579 samples, 1.95%)</title><rect x="31.6058%" y="133" width="1.9512%" height="15" fill="rgb(210,229,1)"/><text x="31.8558%" y="143.50">s..</text></g><g><title>coherence_checking (14,428,646 samples, 2.06%)</title><rect x="31.5412%" y="165" width="2.0576%" height="15" fill="rgb(222,148,37)"/><text x="31.7912%" y="175.50">c..</text></g><g><title>associated_item (719,819 samples, 0.10%)</title><rect x="49.9874%" y="101" width="0.1026%" height="15" fill="rgb(234,67,33)"/><text x="50.2374%" y="111.50"></text></g><g><title>associated_items (1,060,790 samples, 0.15%)</title><rect x="49.9477%" y="117" width="0.1513%" height="15" fill="rgb(247,98,35)"/><text x="50.1977%" y="127.50"></text></g><g><title>dropck_outlives (2,201,809 samples, 0.31%)</title><rect x="50.1265%" y="117" width="0.3140%" height="15" fill="rgb(247,138,52)"/><text x="50.3765%" y="127.50"></text></g><g><title>evaluate_obligation (8,436,168 samples, 1.20%)</title><rect x="50.4409%" y="117" width="1.2030%" height="15" fill="rgb(213,79,30)"/><text x="50.6909%" y="127.50"></text></g><g><title>method_autoderef_steps (3,287,312 samples, 0.47%)</title><rect x="51.8538%" y="117" width="0.4688%" height="15" fill="rgb(246,177,23)"/><text x="52.1038%" y="127.50"></text></g><g><title>evaluate_obligation (1,530,796 samples, 0.22%)</title><rect x="52.1042%" y="101" width="0.2183%" height="15" fill="rgb(230,62,27)"/><text x="52.3542%" y="111.50"></text></g><g><title>evaluate_obligation (3,240,283 samples, 0.46%)</title><rect x="57.6629%" y="101" width="0.4621%" height="15" fill="rgb(216,154,8)"/><text x="57.9129%" y="111.50"></text></g><g><title>is_copy_raw (996,127 samples, 0.14%)</title><rect x="58.2090%" y="101" width="0.1421%" height="15" fill="rgb(244,35,45)"/><text x="58.4590%" y="111.50"></text></g><g><title>evaluate_obligation (793,527 samples, 0.11%)</title><rect x="58.2379%" y="85" width="0.1132%" height="15" fill="rgb(251,115,12)"/><text x="58.4879%" y="95.50"></text></g><g><title>method_autoderef_steps (1,170,139 samples, 0.17%)</title><rect x="58.3751%" y="101" width="0.1669%" height="15" fill="rgb(240,54,50)"/><text x="58.6251%" y="111.50"></text></g><g><title>typeck (42,507,966 samples, 6.06%)</title><rect x="52.5572%" y="117" width="6.0619%" height="15" fill="rgb(233,84,52)"/><text x="52.8072%" y="127.50">typeck</text></g><g><title>item_bodies_checking (175,404,863 samples, 25.01%)</title><rect x="33.6355%" y="165" width="25.0136%" height="15" fill="rgb(207,117,47)"/><text x="33.8855%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (175,400,643 samples, 25.01%)</title><rect x="33.6361%" y="149" width="25.0130%" height="15" fill="rgb(249,43,39)"/><text x="33.8861%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (174,688,949 samples, 24.91%)</title><rect x="33.7376%" y="133" width="24.9116%" height="15" fill="rgb(209,38,44)"/><text x="33.9876%" y="143.50">typeck</text></g><g><title>mir_borrowck (767,399 samples, 0.11%)</title><rect x="60.1490%" y="101" width="0.1094%" height="15" fill="rgb(236,212,23)"/><text x="60.3990%" y="111.50"></text></g><g><title>mir_built (4,325,012 samples, 0.62%)</title><rect x="60.3121%" y="53" width="0.6168%" height="15" fill="rgb(242,79,21)"/><text x="60.5621%" y="63.50"></text></g><g><title>typeck (3,765,747 samples, 0.54%)</title><rect x="60.3918%" y="37" width="0.5370%" height="15" fill="rgb(211,96,35)"/><text x="60.6418%" y="47.50"></text></g><g><title>mir_const (4,908,438 samples, 0.70%)</title><rect x="60.2651%" y="85" width="0.7000%" height="15" fill="rgb(253,215,40)"/><text x="60.5151%" y="95.50"></text></g><g><title>unsafety_check_result (4,627,985 samples, 0.66%)</title><rect x="60.3051%" y="69" width="0.6600%" height="15" fill="rgb(211,81,21)"/><text x="60.5551%" y="79.50"></text></g><g><title>mir_promoted (4,959,909 samples, 0.71%)</title><rect x="60.2584%" y="101" width="0.7073%" height="15" fill="rgb(208,190,38)"/><text x="60.5084%" y="111.50"></text></g><g><title>type_of (7,084,260 samples, 1.01%)</title><rect x="60.0092%" y="133" width="1.0103%" height="15" fill="rgb(235,213,38)"/><text x="60.2592%" y="143.50"></text></g><g><title>mir_borrowck (7,071,080 samples, 1.01%)</title><rect x="60.0110%" y="117" width="1.0084%" height="15" fill="rgb(237,122,38)"/><text x="60.2610%" y="127.50"></text></g><g><title>item_types_checking (17,157,483 samples, 2.45%)</title><rect x="58.6491%" y="165" width="2.4467%" height="15" fill="rgb(244,218,35)"/><text x="58.8991%" y="175.50">it..</text></g><g><title>check_mod_item_types (17,142,283 samples, 2.44%)</title><rect x="58.6513%" y="149" width="2.4446%" height="15" fill="rgb(240,68,47)"/><text x="58.9013%" y="159.50">ch..</text></g><g><title>fn_sig (1,607,195 samples, 0.23%)</title><rect x="61.3403%" y="133" width="0.2292%" height="15" fill="rgb(210,16,53)"/><text x="61.5903%" y="143.50"></text></g><g><title>is_late_bound_map (1,717,866 samples, 0.24%)</title><rect x="61.6900%" y="117" width="0.2450%" height="15" fill="rgb(235,124,12)"/><text x="61.9400%" y="127.50"></text></g><g><title>resolve_lifetimes (1,589,176 samples, 0.23%)</title><rect x="61.7083%" y="101" width="0.2266%" height="15" fill="rgb(224,169,11)"/><text x="61.9583%" y="111.50"></text></g><g><title>named_region_map (1,266,322 samples, 0.18%)</title><rect x="61.9349%" y="117" width="0.1806%" height="15" fill="rgb(250,166,2)"/><text x="62.1849%" y="127.50"></text></g><g><title>resolve_lifetimes (1,175,432 samples, 0.17%)</title><rect x="61.9479%" y="101" width="0.1676%" height="15" fill="rgb(242,216,29)"/><text x="62.1979%" y="111.50"></text></g><g><title>lint_levels (918,219 samples, 0.13%)</title><rect x="61.9846%" y="85" width="0.1309%" height="15" fill="rgb(230,116,27)"/><text x="62.2346%" y="95.50"></text></g><g><title>generics_of (3,899,468 samples, 0.56%)</title><rect x="61.5695%" y="133" width="0.5561%" height="15" fill="rgb(228,99,48)"/><text x="61.8195%" y="143.50"></text></g><g><title>late_bound_vars_map (1,250,183 samples, 0.18%)</title><rect x="62.6289%" y="85" width="0.1783%" height="15" fill="rgb(253,11,6)"/><text x="62.8789%" y="95.50"></text></g><g><title>resolve_lifetimes (1,159,102 samples, 0.17%)</title><rect x="62.6419%" y="69" width="0.1653%" height="15" fill="rgb(247,143,39)"/><text x="62.8919%" y="79.50"></text></g><g><title>explicit_predicates_of (3,466,185 samples, 0.49%)</title><rect x="62.3239%" y="101" width="0.4943%" height="15" fill="rgb(236,97,10)"/><text x="62.5739%" y="111.50"></text></g><g><title>predicates_of (6,138,154 samples, 0.88%)</title><rect x="62.1578%" y="133" width="0.8753%" height="15" fill="rgb(233,208,19)"/><text x="62.4078%" y="143.50"></text></g><g><title>predicates_defined_on (5,770,941 samples, 0.82%)</title><rect x="62.2102%" y="117" width="0.8230%" height="15" fill="rgb(216,164,2)"/><text x="62.4602%" y="127.50"></text></g><g><title>inferred_outlives_of (1,507,275 samples, 0.21%)</title><rect x="62.8182%" y="101" width="0.2149%" height="15" fill="rgb(220,129,5)"/><text x="63.0682%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,385,544 samples, 0.20%)</title><rect x="62.8355%" y="85" width="0.1976%" height="15" fill="rgb(242,17,10)"/><text x="63.0855%" y="95.50"></text></g><g><title>type_of (705,309 samples, 0.10%)</title><rect x="62.9325%" y="69" width="0.1006%" height="15" fill="rgb(242,107,0)"/><text x="63.1825%" y="79.50"></text></g><g><title>type_collecting (14,518,576 samples, 2.07%)</title><rect x="61.0969%" y="165" width="2.0704%" height="15" fill="rgb(251,28,31)"/><text x="61.3469%" y="175.50">t..</text></g><g><title>collect_mod_item_types (14,501,596 samples, 2.07%)</title><rect x="61.0993%" y="149" width="2.0680%" height="15" fill="rgb(233,223,10)"/><text x="61.3493%" y="159.50">c..</text></g><g><title>type_of (919,747 samples, 0.13%)</title><rect x="63.0362%" y="133" width="0.1312%" height="15" fill="rgb(215,21,27)"/><text x="63.2862%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,847,819 samples, 0.26%)</title><rect x="66.6204%" y="133" width="0.2635%" height="15" fill="rgb(232,23,21)"/><text x="66.8704%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,826,329 samples, 0.26%)</title><rect x="66.6235%" y="117" width="0.2604%" height="15" fill="rgb(244,5,23)"/><text x="66.8735%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,823,889 samples, 0.26%)</title><rect x="66.6238%" y="101" width="0.2601%" height="15" fill="rgb(226,81,46)"/><text x="66.8738%" y="111.50"></text></g><g><title>evaluate_obligation (3,074,927 samples, 0.44%)</title><rect x="66.8839%" y="133" width="0.4385%" height="15" fill="rgb(247,70,30)"/><text x="67.1339%" y="143.50"></text></g><g><title>implied_outlives_bounds (3,071,806 samples, 0.44%)</title><rect x="67.3256%" y="133" width="0.4381%" height="15" fill="rgb(212,68,19)"/><text x="67.5756%" y="143.50"></text></g><g><title>param_env (3,605,749 samples, 0.51%)</title><rect x="67.8237%" y="133" width="0.5142%" height="15" fill="rgb(240,187,13)"/><text x="68.0737%" y="143.50"></text></g><g><title>region_scope_tree (2,347,336 samples, 0.33%)</title><rect x="68.3443%" y="133" width="0.3347%" height="15" fill="rgb(223,113,26)"/><text x="68.5943%" y="143.50"></text></g><g><title>check_impl_item_well_formed (37,064,773 samples, 5.29%)</title><rect x="63.3996%" y="149" width="5.2856%" height="15" fill="rgb(206,192,2)"/><text x="63.6496%" y="159.50">check_..</text></g><g><title>evaluate_obligation (737,556 samples, 0.11%)</title><rect x="70.9648%" y="133" width="0.1052%" height="15" fill="rgb(241,108,4)"/><text x="71.2148%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,150,814 samples, 0.16%)</title><rect x="71.0856%" y="133" width="0.1641%" height="15" fill="rgb(247,173,49)"/><text x="71.3356%" y="143.50"></text></g><g><title>param_env (2,292,621 samples, 0.33%)</title><rect x="71.2497%" y="133" width="0.3269%" height="15" fill="rgb(224,114,35)"/><text x="71.4997%" y="143.50"></text></g><g><title>check_item_well_formed (21,462,547 samples, 3.06%)</title><rect x="68.6852%" y="149" width="3.0607%" height="15" fill="rgb(245,159,27)"/><text x="68.9352%" y="159.50">che..</text></g><g><title>analysis (493,854,830 samples, 70.43%)</title><rect x="1.3728%" y="197" width="70.4263%" height="15" fill="rgb(245,172,44)"/><text x="1.6228%" y="207.50">analysis</text></g><g><title>type_check_crate (282,729,606 samples, 40.32%)</title><rect x="31.4804%" y="181" width="40.3187%" height="15" fill="rgb(236,23,11)"/><text x="31.7304%" y="191.50">type_check_crate</text></g><g><title>wf_checking (60,481,131 samples, 8.62%)</title><rect x="63.1741%" y="165" width="8.6249%" height="15" fill="rgb(205,117,38)"/><text x="63.4241%" y="175.50">wf_checking</text></g><g><title>codegen_module (2,019,380 samples, 0.29%)</title><rect x="71.8912%" y="181" width="0.2880%" height="15" fill="rgb(237,72,25)"/><text x="72.1412%" y="191.50"></text></g><g><title>codegen_crate (2,693,957 samples, 0.38%)</title><rect x="71.7999%" y="197" width="0.3842%" height="15" fill="rgb(244,70,9)"/><text x="72.0499%" y="207.50"></text></g><g><title>LLVM_module_codegen (19,152,675 samples, 2.73%)</title><rect x="72.1916%" y="181" width="2.7313%" height="15" fill="rgb(217,125,39)"/><text x="72.4416%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (18,063,703 samples, 2.58%)</title><rect x="72.3469%" y="165" width="2.5760%" height="15" fill="rgb(235,36,10)"/><text x="72.5969%" y="175.50">LL..</text></g><g><title>codegen_module_optimize (20,070,354 samples, 2.86%)</title><rect x="72.1841%" y="197" width="2.8621%" height="15" fill="rgb(251,123,47)"/><text x="72.4341%" y="207.50">co..</text></g><g><title>LLVM_module_optimize (864,619 samples, 0.12%)</title><rect x="74.9229%" y="181" width="0.1233%" height="15" fill="rgb(221,13,13)"/><text x="75.1729%" y="191.50"></text></g><g><title>AST_validation (942,540 samples, 0.13%)</title><rect x="75.0647%" y="181" width="0.1344%" height="15" fill="rgb(238,131,9)"/><text x="75.3147%" y="191.50"></text></g><g><title>macro_expand_crate (49,269,387 samples, 7.03%)</title><rect x="75.2571%" y="181" width="7.0261%" height="15" fill="rgb(211,50,8)"/><text x="75.5071%" y="191.50">macro_exp..</text></g><g><title>expand_crate (49,258,477 samples, 7.02%)</title><rect x="75.2586%" y="165" width="7.0245%" height="15" fill="rgb(245,182,24)"/><text x="75.5086%" y="175.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (1,798,041 samples, 0.26%)</title><rect x="82.0267%" y="149" width="0.2564%" height="15" fill="rgb(242,14,37)"/><text x="82.2767%" y="159.50"></text></g><g><title>late_resolve_crate (11,609,968 samples, 1.66%)</title><rect x="82.3616%" y="165" width="1.6556%" height="15" fill="rgb(246,228,12)"/><text x="82.6116%" y="175.50"></text></g><g><title>configure_and_expand (63,904,816 samples, 9.11%)</title><rect x="75.0462%" y="197" width="9.1132%" height="15" fill="rgb(213,55,15)"/><text x="75.2962%" y="207.50">configure_and..</text></g><g><title>resolve_crate (13,062,103 samples, 1.86%)</title><rect x="82.2966%" y="181" width="1.8627%" height="15" fill="rgb(209,9,3)"/><text x="82.5466%" y="191.50">r..</text></g><g><title>drop_ast (2,204,852 samples, 0.31%)</title><rect x="84.1594%" y="197" width="0.3144%" height="15" fill="rgb(230,59,30)"/><text x="84.4094%" y="207.50"></text></g><g><title>early_lint_checks (2,677,718 samples, 0.38%)</title><rect x="84.4771%" y="197" width="0.3819%" height="15" fill="rgb(209,121,21)"/><text x="84.7271%" y="207.50"></text></g><g><title>free_global_ctxt (7,066,052 samples, 1.01%)</title><rect x="84.8590%" y="197" width="1.0077%" height="15" fill="rgb(220,109,13)"/><text x="85.1090%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (890,419 samples, 0.13%)</title><rect x="87.7012%" y="133" width="0.1270%" height="15" fill="rgb(232,18,1)"/><text x="87.9512%" y="143.50"></text></g><g><title>monomorphization_collector (997,700 samples, 0.14%)</title><rect x="87.7005%" y="149" width="0.1423%" height="15" fill="rgb(215,41,42)"/><text x="87.9505%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,175,042 samples, 0.17%)</title><rect x="87.6969%" y="165" width="0.1676%" height="15" fill="rgb(224,123,36)"/><text x="87.9469%" y="175.50"></text></g><g><title>exported_symbols (2,138,321 samples, 0.30%)</title><rect x="87.6937%" y="181" width="0.3049%" height="15" fill="rgb(240,125,3)"/><text x="87.9437%" y="191.50"></text></g><g><title>reachable_non_generics (940,369 samples, 0.13%)</title><rect x="87.8645%" y="165" width="0.1341%" height="15" fill="rgb(205,98,50)"/><text x="88.1145%" y="175.50"></text></g><g><title>reachable_set (863,389 samples, 0.12%)</title><rect x="87.8755%" y="149" width="0.1231%" height="15" fill="rgb(205,185,37)"/><text x="88.1255%" y="159.50"></text></g><g><title>is_sized_raw (943,837 samples, 0.13%)</title><rect x="91.6889%" y="149" width="0.1346%" height="15" fill="rgb(238,207,15)"/><text x="91.9389%" y="159.50"></text></g><g><title>evaluate_obligation (713,364 samples, 0.10%)</title><rect x="91.7218%" y="133" width="0.1017%" height="15" fill="rgb(213,199,42)"/><text x="91.9718%" y="143.50"></text></g><g><title>layout_of (1,534,259 samples, 0.22%)</title><rect x="91.9448%" y="133" width="0.2188%" height="15" fill="rgb(235,201,11)"/><text x="92.1948%" y="143.50"></text></g><g><title>layout_of (1,068,545 samples, 0.15%)</title><rect x="92.0113%" y="117" width="0.1524%" height="15" fill="rgb(207,46,11)"/><text x="92.2613%" y="127.50"></text></g><g><title>layout_of (823,210 samples, 0.12%)</title><rect x="92.0462%" y="101" width="0.1174%" height="15" fill="rgb(241,35,35)"/><text x="92.2962%" y="111.50"></text></g><g><title>layout_of (2,388,410 samples, 0.34%)</title><rect x="91.8235%" y="149" width="0.3406%" height="15" fill="rgb(243,32,47)"/><text x="92.0735%" y="159.50"></text></g><g><title>layout_of (6,587,822 samples, 0.94%)</title><rect x="91.2472%" y="165" width="0.9395%" height="15" fill="rgb(247,202,23)"/><text x="91.4972%" y="175.50"></text></g><g><title>is_copy_raw (2,434,485 samples, 0.35%)</title><rect x="95.6468%" y="133" width="0.3472%" height="15" fill="rgb(219,102,11)"/><text x="95.8968%" y="143.50"></text></g><g><title>evaluate_obligation (1,821,777 samples, 0.26%)</title><rect x="95.7342%" y="117" width="0.2598%" height="15" fill="rgb(243,110,44)"/><text x="95.9842%" y="127.50"></text></g><g><title>needs_drop_raw (2,898,209 samples, 0.41%)</title><rect x="95.5815%" y="149" width="0.4133%" height="15" fill="rgb(222,74,54)"/><text x="95.8315%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (27,191,116 samples, 3.88%)</title><rect x="92.1867%" y="165" width="3.8776%" height="15" fill="rgb(216,99,12)"/><text x="92.4367%" y="175.50">mir_..</text></g><g><title>optimized_mir (56,475,423 samples, 8.05%)</title><rect x="88.1023%" y="181" width="8.0537%" height="15" fill="rgb(226,22,26)"/><text x="88.3523%" y="191.50">optimized_m..</text></g><g><title>generate_crate_metadata (72,786,456 samples, 10.38%)</title><rect x="85.8666%" y="197" width="10.3797%" height="15" fill="rgb(217,163,10)"/><text x="86.1166%" y="207.50">generate_crate_..</text></g><g><title>hir_lowering (19,584,017 samples, 2.79%)</title><rect x="96.2464%" y="197" width="2.7928%" height="15" fill="rgb(213,25,53)"/><text x="96.4964%" y="207.50">hi..</text></g><g><title>link_crate (2,628,087 samples, 0.37%)</title><rect x="99.0428%" y="181" width="0.3748%" height="15" fill="rgb(252,105,26)"/><text x="99.2928%" y="191.50"></text></g><g><title>link_binary (2,549,306 samples, 0.36%)</title><rect x="99.0540%" y="165" width="0.3635%" height="15" fill="rgb(220,39,43)"/><text x="99.3040%" y="175.50"></text></g><g><title>link_rlib (2,097,461 samples, 0.30%)</title><rect x="99.1184%" y="149" width="0.2991%" height="15" fill="rgb(229,68,48)"/><text x="99.3684%" y="159.50"></text></g><g><title>link (2,664,667 samples, 0.38%)</title><rect x="99.0391%" y="197" width="0.3800%" height="15" fill="rgb(252,8,32)"/><text x="99.2891%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,397,204 samples, 0.34%)</title><rect x="99.5148%" y="197" width="0.3419%" height="15" fill="rgb(223,20,43)"/><text x="99.7648%" y="207.50"></text></g><g><title>all (701,236,756 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (701,236,756 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (913,169 samples, 0.13%)</title><rect x="99.8698%" y="197" width="0.1302%" height="15" fill="rgb(249,185,26)"/><text x="100.1198%" y="207.50"></text></g></svg></svg>