<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,994,280 samples, 1.83%)</title><rect x="0.2958%" y="341" width="1.8327%" height="15" fill="rgb(227,0,7)"/><text x="0.5458%" y="351.50">L..</text></g><g><title>implied_outlives_bounds (632,426 samples, 0.39%)</title><rect x="11.1784%" y="293" width="0.3871%" height="15" fill="rgb(217,0,24)"/><text x="11.4284%" y="303.50"></text></g><g><title>is_sized_raw (258,132 samples, 0.16%)</title><rect x="11.6137%" y="293" width="0.1580%" height="15" fill="rgb(221,193,54)"/><text x="11.8637%" y="303.50"></text></g><g><title>evaluate_obligation (198,622 samples, 0.12%)</title><rect x="11.6502%" y="277" width="0.1216%" height="15" fill="rgb(248,212,6)"/><text x="11.9002%" y="287.50"></text></g><g><title>param_env (618,596 samples, 0.38%)</title><rect x="12.8495%" y="261" width="0.3786%" height="15" fill="rgb(208,68,35)"/><text x="13.0995%" y="271.50"></text></g><g><title>item_attrs (734,763 samples, 0.45%)</title><rect x="13.6401%" y="229" width="0.4497%" height="15" fill="rgb(232,128,0)"/><text x="13.8901%" y="239.50"></text></g><g><title>metadata_decode_entry_item_attrs (720,762 samples, 0.44%)</title><rect x="13.6487%" y="213" width="0.4411%" height="15" fill="rgb(207,160,47)"/><text x="13.8987%" y="223.50"></text></g><g><title>codegen_fn_attrs (887,104 samples, 0.54%)</title><rect x="13.5628%" y="245" width="0.5430%" height="15" fill="rgb(228,23,34)"/><text x="13.8128%" y="255.50"></text></g><g><title>adt_drop_tys (164,221 samples, 0.10%)</title><rect x="16.3546%" y="213" width="0.1005%" height="15" fill="rgb(218,30,26)"/><text x="16.6046%" y="223.50"></text></g><g><title>is_copy_raw (2,141,689 samples, 1.31%)</title><rect x="16.4551%" y="213" width="1.3108%" height="15" fill="rgb(220,122,19)"/><text x="16.7051%" y="223.50"></text></g><g><title>evaluate_obligation (1,858,367 samples, 1.14%)</title><rect x="16.6285%" y="197" width="1.1374%" height="15" fill="rgb(250,228,42)"/><text x="16.8785%" y="207.50"></text></g><g><title>needs_drop_raw (2,592,941 samples, 1.59%)</title><rect x="16.2485%" y="229" width="1.5870%" height="15" fill="rgb(240,193,28)"/><text x="16.4985%" y="239.50"></text></g><g><title>codegen_fulfill_obligation (1,332,301 samples, 0.82%)</title><rect x="18.0122%" y="213" width="0.8154%" height="15" fill="rgb(216,20,37)"/><text x="18.2622%" y="223.50"></text></g><g><title>evaluate_obligation (384,813 samples, 0.24%)</title><rect x="18.5921%" y="197" width="0.2355%" height="15" fill="rgb(206,188,39)"/><text x="18.8421%" y="207.50"></text></g><g><title>specialization_graph_of (508,114 samples, 0.31%)</title><rect x="18.8813%" y="213" width="0.3110%" height="15" fill="rgb(217,207,13)"/><text x="19.1313%" y="223.50"></text></g><g><title>impl_trait_ref (231,282 samples, 0.14%)</title><rect x="19.0507%" y="197" width="0.1416%" height="15" fill="rgb(231,73,38)"/><text x="19.3007%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (195,572 samples, 0.12%)</title><rect x="19.0726%" y="181" width="0.1197%" height="15" fill="rgb(225,20,46)"/><text x="19.3226%" y="191.50"></text></g><g><title>resolve_instance (2,294,969 samples, 1.40%)</title><rect x="17.8355%" y="229" width="1.4046%" height="15" fill="rgb(210,31,41)"/><text x="18.0855%" y="239.50"></text></g><g><title>thir_body (1,213,438 samples, 0.74%)</title><rect x="19.2625%" y="229" width="0.7427%" height="15" fill="rgb(221,200,47)"/><text x="19.5125%" y="239.50"></text></g><g><title>mir_const (12,702,426 samples, 7.77%)</title><rect x="12.2904%" y="277" width="7.7746%" height="15" fill="rgb(226,26,5)"/><text x="12.5404%" y="287.50">mir_const</text></g><g><title>unsafety_check_result (11,170,392 samples, 6.84%)</title><rect x="13.2281%" y="261" width="6.8369%" height="15" fill="rgb(249,33,26)"/><text x="13.4781%" y="271.50">unsafety_..</text></g><g><title>mir_built (9,736,425 samples, 5.96%)</title><rect x="14.1058%" y="245" width="5.9592%" height="15" fill="rgb(235,183,28)"/><text x="14.3558%" y="255.50">mir_built</text></g><g><title>mir_promoted (13,731,236 samples, 8.40%)</title><rect x="11.7717%" y="293" width="8.4043%" height="15" fill="rgb(221,5,38)"/><text x="12.0217%" y="303.50">mir_promoted</text></g><g><title>mir_const_qualif (181,362 samples, 0.11%)</title><rect x="20.0650%" y="277" width="0.1110%" height="15" fill="rgb(247,18,42)"/><text x="20.3150%" y="287.50"></text></g><g><title>type_op_ascribe_user_type (1,030,407 samples, 0.63%)</title><rect x="20.1760%" y="293" width="0.6307%" height="15" fill="rgb(241,131,45)"/><text x="20.4260%" y="303.50"></text></g><g><title>type_op_normalize_fn_sig (2,541,142 samples, 1.56%)</title><rect x="20.8067%" y="293" width="1.5553%" height="15" fill="rgb(249,31,29)"/><text x="21.0567%" y="303.50"></text></g><g><title>normalize_projection_ty (1,526,659 samples, 0.93%)</title><rect x="21.4276%" y="277" width="0.9344%" height="15" fill="rgb(225,111,53)"/><text x="21.6776%" y="287.50"></text></g><g><title>type_op_normalize_predicate (232,911 samples, 0.14%)</title><rect x="22.3620%" y="293" width="0.1426%" height="15" fill="rgb(238,160,17)"/><text x="22.6120%" y="303.50"></text></g><g><title>type_op_normalize_ty (729,840 samples, 0.45%)</title><rect x="22.5045%" y="293" width="0.4467%" height="15" fill="rgb(214,148,48)"/><text x="22.7545%" y="303.50"></text></g><g><title>normalize_projection_ty (368,485 samples, 0.23%)</title><rect x="22.7257%" y="277" width="0.2255%" height="15" fill="rgb(232,36,49)"/><text x="22.9757%" y="287.50"></text></g><g><title>type_op_prove_predicate (5,254,140 samples, 3.22%)</title><rect x="22.9513%" y="293" width="3.2158%" height="15" fill="rgb(209,103,24)"/><text x="23.2013%" y="303.50">typ..</text></g><g><title>evaluate_obligation (203,384 samples, 0.12%)</title><rect x="26.0426%" y="277" width="0.1245%" height="15" fill="rgb(229,88,8)"/><text x="26.2926%" y="287.50"></text></g><g><title>MIR_borrow_checking (38,991,143 samples, 23.86%)</title><rect x="2.3037%" y="325" width="23.8648%" height="15" fill="rgb(213,181,19)"/><text x="2.5537%" y="335.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (38,861,932 samples, 23.79%)</title><rect x="2.3828%" y="309" width="23.7857%" height="15" fill="rgb(254,191,54)"/><text x="2.6328%" y="319.50">mir_borrowck</text></g><g><title>hir_module_items (173,261 samples, 0.11%)</title><rect x="26.2488%" y="325" width="0.1060%" height="15" fill="rgb(241,83,37)"/><text x="26.4988%" y="335.50"></text></g><g><title>should_inherit_track_caller (175,471 samples, 0.11%)</title><rect x="26.5986%" y="277" width="0.1074%" height="15" fill="rgb(233,36,39)"/><text x="26.8486%" y="287.50"></text></g><g><title>codegen_fn_attrs (341,163 samples, 0.21%)</title><rect x="26.5069%" y="293" width="0.2088%" height="15" fill="rgb(226,3,54)"/><text x="26.7569%" y="303.50"></text></g><g><title>check_mod_attrs (567,225 samples, 0.35%)</title><rect x="26.3686%" y="309" width="0.3472%" height="15" fill="rgb(245,192,40)"/><text x="26.6186%" y="319.50"></text></g><g><title>check_mod_unstable_api_usage (287,363 samples, 0.18%)</title><rect x="26.8350%" y="309" width="0.1759%" height="15" fill="rgb(238,167,29)"/><text x="27.0850%" y="319.50"></text></g><g><title>misc_checking_1 (1,119,591 samples, 0.69%)</title><rect x="26.3552%" y="325" width="0.6853%" height="15" fill="rgb(232,182,51)"/><text x="26.6052%" y="335.50"></text></g><g><title>liveness_and_intrinsic_checking (513,665 samples, 0.31%)</title><rect x="27.0413%" y="309" width="0.3144%" height="15" fill="rgb(231,60,39)"/><text x="27.2913%" y="319.50"></text></g><g><title>check_mod_liveness (418,845 samples, 0.26%)</title><rect x="27.0993%" y="293" width="0.2564%" height="15" fill="rgb(208,69,12)"/><text x="27.3493%" y="303.50"></text></g><g><title>misc_checking_2 (1,132,561 samples, 0.69%)</title><rect x="27.0404%" y="325" width="0.6932%" height="15" fill="rgb(235,93,37)"/><text x="27.2904%" y="335.50"></text></g><g><title>match_checking (617,556 samples, 0.38%)</title><rect x="27.3557%" y="309" width="0.3780%" height="15" fill="rgb(213,116,39)"/><text x="27.6057%" y="319.50"></text></g><g><title>check_match (584,995 samples, 0.36%)</title><rect x="27.3756%" y="293" width="0.3580%" height="15" fill="rgb(222,207,29)"/><text x="27.6256%" y="303.50"></text></g><g><title>check_private_in_public (241,043 samples, 0.15%)</title><rect x="27.7385%" y="309" width="0.1475%" height="15" fill="rgb(206,96,30)"/><text x="27.9885%" y="319.50"></text></g><g><title>death_checking (424,154 samples, 0.26%)</title><rect x="27.8860%" y="309" width="0.2596%" height="15" fill="rgb(218,138,4)"/><text x="28.1360%" y="319.50"></text></g><g><title>eval_to_const_value_raw (172,982 samples, 0.11%)</title><rect x="28.6107%" y="85" width="0.1059%" height="15" fill="rgb(250,191,14)"/><text x="28.8607%" y="95.50"></text></g><g><title>eval_to_const_value_raw (171,902 samples, 0.11%)</title><rect x="28.6113%" y="69" width="0.1052%" height="15" fill="rgb(239,60,40)"/><text x="28.8613%" y="79.50"></text></g><g><title>eval_to_allocation_raw (170,982 samples, 0.10%)</title><rect x="28.6119%" y="53" width="0.1047%" height="15" fill="rgb(206,27,48)"/><text x="28.8619%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (163,562 samples, 0.10%)</title><rect x="28.6164%" y="37" width="0.1001%" height="15" fill="rgb(225,35,8)"/><text x="28.8664%" y="47.50"></text></g><g><title>eval_to_const_value_raw (243,363 samples, 0.15%)</title><rect x="28.5772%" y="149" width="0.1490%" height="15" fill="rgb(250,213,24)"/><text x="28.8272%" y="159.50"></text></g><g><title>eval_to_const_value_raw (242,093 samples, 0.15%)</title><rect x="28.5780%" y="133" width="0.1482%" height="15" fill="rgb(247,123,22)"/><text x="28.8280%" y="143.50"></text></g><g><title>eval_to_allocation_raw (238,533 samples, 0.15%)</title><rect x="28.5802%" y="117" width="0.1460%" height="15" fill="rgb(231,138,38)"/><text x="28.8302%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (206,233 samples, 0.13%)</title><rect x="28.6000%" y="101" width="0.1262%" height="15" fill="rgb(231,145,46)"/><text x="28.8500%" y="111.50"></text></g><g><title>eval_to_const_value_raw (329,254 samples, 0.20%)</title><rect x="28.5548%" y="213" width="0.2015%" height="15" fill="rgb(251,118,11)"/><text x="28.8048%" y="223.50"></text></g><g><title>eval_to_const_value_raw (328,194 samples, 0.20%)</title><rect x="28.5554%" y="197" width="0.2009%" height="15" fill="rgb(217,147,25)"/><text x="28.8054%" y="207.50"></text></g><g><title>eval_to_allocation_raw (327,364 samples, 0.20%)</title><rect x="28.5560%" y="181" width="0.2004%" height="15" fill="rgb(247,81,37)"/><text x="28.8060%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (299,053 samples, 0.18%)</title><rect x="28.5733%" y="165" width="0.1830%" height="15" fill="rgb(209,12,38)"/><text x="28.8233%" y="175.50"></text></g><g><title>eval_to_const_value_raw (592,686 samples, 0.36%)</title><rect x="28.4766%" y="277" width="0.3628%" height="15" fill="rgb(227,1,9)"/><text x="28.7266%" y="287.50"></text></g><g><title>eval_to_const_value_raw (588,256 samples, 0.36%)</title><rect x="28.4793%" y="261" width="0.3600%" height="15" fill="rgb(248,47,43)"/><text x="28.7293%" y="271.50"></text></g><g><title>eval_to_allocation_raw (583,276 samples, 0.36%)</title><rect x="28.4824%" y="245" width="0.3570%" height="15" fill="rgb(221,10,30)"/><text x="28.7324%" y="255.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (469,295 samples, 0.29%)</title><rect x="28.5521%" y="229" width="0.2872%" height="15" fill="rgb(210,229,1)"/><text x="28.8021%" y="239.50"></text></g><g><title>param_env (337,384 samples, 0.21%)</title><rect x="28.8394%" y="277" width="0.2065%" height="15" fill="rgb(222,148,37)"/><text x="29.0894%" y="287.50"></text></g><g><title>crate_lints (1,879,389 samples, 1.15%)</title><rect x="28.1464%" y="293" width="1.1503%" height="15" fill="rgb(234,67,33)"/><text x="28.3964%" y="303.50"></text></g><g><title>type_of (395,465 samples, 0.24%)</title><rect x="29.0546%" y="277" width="0.2420%" height="15" fill="rgb(247,98,35)"/><text x="29.3046%" y="287.50"></text></g><g><title>metadata_decode_entry_type_of (303,265 samples, 0.19%)</title><rect x="29.1110%" y="261" width="0.1856%" height="15" fill="rgb(247,138,52)"/><text x="29.3610%" y="271.50"></text></g><g><title>lint_checking (2,352,254 samples, 1.44%)</title><rect x="28.1456%" y="309" width="1.4397%" height="15" fill="rgb(213,79,30)"/><text x="28.3956%" y="319.50"></text></g><g><title>module_lints (471,625 samples, 0.29%)</title><rect x="29.2967%" y="293" width="0.2887%" height="15" fill="rgb(246,177,23)"/><text x="29.5467%" y="303.50"></text></g><g><title>lint_mod (466,305 samples, 0.29%)</title><rect x="29.2999%" y="277" width="0.2854%" height="15" fill="rgb(230,62,27)"/><text x="29.5499%" y="287.50"></text></g><g><title>privacy_access_levels (307,953 samples, 0.19%)</title><rect x="29.5853%" y="309" width="0.1885%" height="15" fill="rgb(216,154,8)"/><text x="29.8353%" y="319.50"></text></g><g><title>privacy_checking_modules (1,093,911 samples, 0.67%)</title><rect x="29.7738%" y="309" width="0.6695%" height="15" fill="rgb(244,35,45)"/><text x="30.0238%" y="319.50"></text></g><g><title>check_mod_privacy (1,089,871 samples, 0.67%)</title><rect x="29.7763%" y="293" width="0.6671%" height="15" fill="rgb(251,115,12)"/><text x="30.0263%" y="303.50"></text></g><g><title>misc_checking_3 (4,442,925 samples, 2.72%)</title><rect x="27.7336%" y="325" width="2.7193%" height="15" fill="rgb(240,54,50)"/><text x="27.9836%" y="335.50">mi..</text></g><g><title>adt_destructor (175,772 samples, 0.11%)</title><rect x="30.5214%" y="277" width="0.1076%" height="15" fill="rgb(233,84,52)"/><text x="30.7714%" y="287.50"></text></g><g><title>coherent_trait (173,462 samples, 0.11%)</title><rect x="30.5228%" y="261" width="0.1062%" height="15" fill="rgb(207,117,47)"/><text x="30.7728%" y="271.50"></text></g><g><title>specialization_graph_of (172,062 samples, 0.11%)</title><rect x="30.5237%" y="245" width="0.1053%" height="15" fill="rgb(249,43,39)"/><text x="30.7737%" y="255.50"></text></g><g><title>impl_parent (551,868 samples, 0.34%)</title><rect x="31.2575%" y="261" width="0.3378%" height="15" fill="rgb(209,38,44)"/><text x="31.5075%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_parent (317,794 samples, 0.19%)</title><rect x="31.4007%" y="245" width="0.1945%" height="15" fill="rgb(236,212,23)"/><text x="31.6507%" y="255.50"></text></g><g><title>impl_trait_ref (1,413,831 samples, 0.87%)</title><rect x="31.5952%" y="261" width="0.8653%" height="15" fill="rgb(242,79,21)"/><text x="31.8452%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,181,878 samples, 0.72%)</title><rect x="31.7372%" y="245" width="0.7234%" height="15" fill="rgb(211,96,35)"/><text x="31.9872%" y="255.50"></text></g><g><title>coherent_trait (3,393,345 samples, 2.08%)</title><rect x="30.5052%" y="293" width="2.0769%" height="15" fill="rgb(253,215,40)"/><text x="30.7552%" y="303.50">c..</text></g><g><title>specialization_graph_of (3,040,852 samples, 1.86%)</title><rect x="30.7210%" y="277" width="1.8612%" height="15" fill="rgb(211,81,21)"/><text x="30.9710%" y="287.50">s..</text></g><g><title>trait_impls_of (197,453 samples, 0.12%)</title><rect x="32.4613%" y="261" width="0.1209%" height="15" fill="rgb(208,190,38)"/><text x="32.7113%" y="271.50"></text></g><g><title>coherence_checking (3,447,905 samples, 2.11%)</title><rect x="30.4981%" y="309" width="2.1103%" height="15" fill="rgb(235,213,38)"/><text x="30.7481%" y="319.50">c..</text></g><g><title>associated_item (696,956 samples, 0.43%)</title><rect x="50.4489%" y="245" width="0.4266%" height="15" fill="rgb(237,122,38)"/><text x="50.6989%" y="255.50"></text></g><g><title>metadata_decode_entry_associated_item (599,334 samples, 0.37%)</title><rect x="50.5087%" y="229" width="0.3668%" height="15" fill="rgb(244,218,35)"/><text x="50.7587%" y="239.50"></text></g><g><title>associated_items (881,539 samples, 0.54%)</title><rect x="50.3571%" y="261" width="0.5396%" height="15" fill="rgb(240,68,47)"/><text x="50.6071%" y="271.50"></text></g><g><title>adt_dtorck_constraint (186,782 samples, 0.11%)</title><rect x="51.2493%" y="245" width="0.1143%" height="15" fill="rgb(210,16,53)"/><text x="51.4993%" y="255.50"></text></g><g><title>dropck_outlives (1,078,033 samples, 0.66%)</title><rect x="50.9521%" y="261" width="0.6598%" height="15" fill="rgb(235,124,12)"/><text x="51.2021%" y="271.50"></text></g><g><title>normalize_projection_ty (405,685 samples, 0.25%)</title><rect x="51.3636%" y="245" width="0.2483%" height="15" fill="rgb(224,169,11)"/><text x="51.6136%" y="255.50"></text></g><g><title>eval_to_const_value_raw (658,533 samples, 0.40%)</title><rect x="51.6155%" y="261" width="0.4031%" height="15" fill="rgb(250,166,2)"/><text x="51.8655%" y="271.50"></text></g><g><title>eval_to_const_value_raw (628,943 samples, 0.38%)</title><rect x="51.6336%" y="245" width="0.3849%" height="15" fill="rgb(242,216,29)"/><text x="51.8836%" y="255.50"></text></g><g><title>eval_to_allocation_raw (594,983 samples, 0.36%)</title><rect x="51.6544%" y="229" width="0.3642%" height="15" fill="rgb(230,116,27)"/><text x="51.9044%" y="239.50"></text></g><g><title>trait_impls_of (256,672 samples, 0.16%)</title><rect x="54.8703%" y="245" width="0.1571%" height="15" fill="rgb(228,99,48)"/><text x="55.1203%" y="255.50"></text></g><g><title>evaluate_obligation (4,916,647 samples, 3.01%)</title><rect x="52.0186%" y="261" width="3.0093%" height="15" fill="rgb(253,11,6)"/><text x="52.2686%" y="271.50">eva..</text></g><g><title>fn_sig (275,623 samples, 0.17%)</title><rect x="55.0474%" y="261" width="0.1687%" height="15" fill="rgb(247,143,39)"/><text x="55.2974%" y="271.50"></text></g><g><title>metadata_decode_entry_fn_sig (255,853 samples, 0.16%)</title><rect x="55.0595%" y="245" width="0.1566%" height="15" fill="rgb(236,97,10)"/><text x="55.3095%" y="255.50"></text></g><g><title>generics_of (177,581 samples, 0.11%)</title><rect x="55.2161%" y="261" width="0.1087%" height="15" fill="rgb(233,208,19)"/><text x="55.4661%" y="271.50"></text></g><g><title>impl_item_implementor_ids (222,732 samples, 0.14%)</title><rect x="55.3248%" y="261" width="0.1363%" height="15" fill="rgb(216,164,2)"/><text x="55.5748%" y="271.50"></text></g><g><title>associated_items (199,562 samples, 0.12%)</title><rect x="55.3390%" y="245" width="0.1221%" height="15" fill="rgb(220,129,5)"/><text x="55.5890%" y="255.50"></text></g><g><title>impl_trait_ref (194,593 samples, 0.12%)</title><rect x="55.4665%" y="261" width="0.1191%" height="15" fill="rgb(242,17,10)"/><text x="55.7165%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (174,152 samples, 0.11%)</title><rect x="55.4790%" y="245" width="0.1066%" height="15" fill="rgb(242,107,0)"/><text x="55.7290%" y="255.50"></text></g><g><title>item_attrs (307,653 samples, 0.19%)</title><rect x="55.6001%" y="261" width="0.1883%" height="15" fill="rgb(251,28,31)"/><text x="55.8501%" y="271.50"></text></g><g><title>metadata_decode_entry_item_attrs (300,353 samples, 0.18%)</title><rect x="55.6045%" y="245" width="0.1838%" height="15" fill="rgb(233,223,10)"/><text x="55.8545%" y="255.50"></text></g><g><title>method_autoderef_steps (573,575 samples, 0.35%)</title><rect x="55.8395%" y="261" width="0.3511%" height="15" fill="rgb(215,21,27)"/><text x="56.0895%" y="271.50"></text></g><g><title>evaluate_obligation (281,871 samples, 0.17%)</title><rect x="56.0180%" y="245" width="0.1725%" height="15" fill="rgb(232,23,21)"/><text x="56.2680%" y="255.50"></text></g><g><title>predicates_of (469,378 samples, 0.29%)</title><rect x="56.2211%" y="261" width="0.2873%" height="15" fill="rgb(244,5,23)"/><text x="56.4711%" y="271.50"></text></g><g><title>predicates_defined_on (326,354 samples, 0.20%)</title><rect x="56.3086%" y="245" width="0.1997%" height="15" fill="rgb(226,81,46)"/><text x="56.5586%" y="255.50"></text></g><g><title>associated_items (218,693 samples, 0.13%)</title><rect x="59.3917%" y="245" width="0.1339%" height="15" fill="rgb(247,70,30)"/><text x="59.6417%" y="255.50"></text></g><g><title>generics_of (221,901 samples, 0.14%)</title><rect x="60.3077%" y="229" width="0.1358%" height="15" fill="rgb(212,68,19)"/><text x="60.5577%" y="239.50"></text></g><g><title>metadata_decode_entry_generics_of (171,701 samples, 0.11%)</title><rect x="60.3384%" y="213" width="0.1051%" height="15" fill="rgb(240,187,13)"/><text x="60.5884%" y="223.50"></text></g><g><title>impl_trait_ref (299,816 samples, 0.18%)</title><rect x="60.4568%" y="229" width="0.1835%" height="15" fill="rgb(223,113,26)"/><text x="60.7068%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (251,206 samples, 0.15%)</title><rect x="60.4865%" y="213" width="0.1538%" height="15" fill="rgb(206,192,2)"/><text x="60.7365%" y="223.50"></text></g><g><title>specializes (195,382 samples, 0.12%)</title><rect x="60.6956%" y="229" width="0.1196%" height="15" fill="rgb(241,108,4)"/><text x="60.9456%" y="239.50"></text></g><g><title>evaluate_obligation (2,098,298 samples, 1.28%)</title><rect x="59.6084%" y="245" width="1.2843%" height="15" fill="rgb(247,173,49)"/><text x="59.8584%" y="255.50"></text></g><g><title>is_copy_raw (210,872 samples, 0.13%)</title><rect x="60.9907%" y="245" width="0.1291%" height="15" fill="rgb(224,114,35)"/><text x="61.2407%" y="255.50"></text></g><g><title>lint_levels (220,082 samples, 0.13%)</title><rect x="61.1227%" y="245" width="0.1347%" height="15" fill="rgb(245,159,27)"/><text x="61.3727%" y="255.50"></text></g><g><title>method_autoderef_steps (335,136 samples, 0.21%)</title><rect x="61.2665%" y="245" width="0.2051%" height="15" fill="rgb(245,172,44)"/><text x="61.5165%" y="255.50"></text></g><g><title>typeck (8,075,081 samples, 4.94%)</title><rect x="56.6040%" y="261" width="4.9424%" height="15" fill="rgb(236,23,11)"/><text x="56.8540%" y="271.50">typeck</text></g><g><title>item_bodies_checking (47,296,515 samples, 28.95%)</title><rect x="32.6303%" y="309" width="28.9481%" height="15" fill="rgb(205,117,38)"/><text x="32.8803%" y="319.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,293,715 samples, 28.95%)</title><rect x="32.6321%" y="293" width="28.9464%" height="15" fill="rgb(237,72,25)"/><text x="32.8821%" y="303.50">typeck_item_bodies</text></g><g><title>typeck (47,213,193 samples, 28.90%)</title><rect x="32.6813%" y="277" width="28.8971%" height="15" fill="rgb(244,70,9)"/><text x="32.9313%" y="287.50">typeck</text></g><g><title>evaluate_obligation (4,198,209 samples, 2.57%)</title><rect x="63.9368%" y="277" width="2.5695%" height="15" fill="rgb(217,125,39)"/><text x="64.1868%" y="287.50">ev..</text></g><g><title>predicates_of (421,894 samples, 0.26%)</title><rect x="66.2481%" y="261" width="0.2582%" height="15" fill="rgb(235,36,10)"/><text x="66.4981%" y="271.50"></text></g><g><title>evaluate_obligation (329,953 samples, 0.20%)</title><rect x="66.7665%" y="261" width="0.2019%" height="15" fill="rgb(251,123,47)"/><text x="67.0165%" y="271.50"></text></g><g><title>item_types_checking (8,839,280 samples, 5.41%)</title><rect x="61.5785%" y="309" width="5.4101%" height="15" fill="rgb(221,13,13)"/><text x="61.8285%" y="319.50">item_ty..</text></g><g><title>check_mod_item_types (8,833,330 samples, 5.41%)</title><rect x="61.5821%" y="293" width="5.4065%" height="15" fill="rgb(238,131,9)"/><text x="61.8321%" y="303.50">check_m..</text></g><g><title>typeck (611,356 samples, 0.37%)</title><rect x="66.6144%" y="277" width="0.3742%" height="15" fill="rgb(211,50,8)"/><text x="66.8644%" y="287.50"></text></g><g><title>fn_sig (423,373 samples, 0.26%)</title><rect x="67.1684%" y="277" width="0.2591%" height="15" fill="rgb(245,182,24)"/><text x="67.4184%" y="287.50"></text></g><g><title>generics_of (198,994 samples, 0.12%)</title><rect x="67.4275%" y="277" width="0.1218%" height="15" fill="rgb(242,14,37)"/><text x="67.6775%" y="287.50"></text></g><g><title>late_bound_vars_map (325,633 samples, 0.20%)</title><rect x="67.8816%" y="229" width="0.1993%" height="15" fill="rgb(246,228,12)"/><text x="68.1316%" y="239.50"></text></g><g><title>resolve_lifetimes (312,562 samples, 0.19%)</title><rect x="67.8896%" y="213" width="0.1913%" height="15" fill="rgb(213,55,15)"/><text x="68.1396%" y="223.50"></text></g><g><title>explicit_predicates_of (735,646 samples, 0.45%)</title><rect x="67.7200%" y="245" width="0.4503%" height="15" fill="rgb(209,9,3)"/><text x="67.9700%" y="255.50"></text></g><g><title>predicates_of (969,077 samples, 0.59%)</title><rect x="67.6330%" y="277" width="0.5931%" height="15" fill="rgb(230,59,30)"/><text x="67.8830%" y="287.50"></text></g><g><title>predicates_defined_on (914,507 samples, 0.56%)</title><rect x="67.6664%" y="261" width="0.5597%" height="15" fill="rgb(209,121,21)"/><text x="67.9164%" y="271.50"></text></g><g><title>type_collecting (2,213,173 samples, 1.35%)</title><rect x="66.9909%" y="309" width="1.3546%" height="15" fill="rgb(220,109,13)"/><text x="67.2409%" y="319.50"></text></g><g><title>collect_mod_item_types (2,204,083 samples, 1.35%)</title><rect x="66.9964%" y="293" width="1.3490%" height="15" fill="rgb(232,18,1)"/><text x="67.2464%" y="303.50"></text></g><g><title>type_of (194,904 samples, 0.12%)</title><rect x="68.2262%" y="277" width="0.1193%" height="15" fill="rgb(215,41,42)"/><text x="68.4762%" y="287.50"></text></g><g><title>evaluate_obligation (529,579 samples, 0.32%)</title><rect x="72.0518%" y="277" width="0.3241%" height="15" fill="rgb(224,123,36)"/><text x="72.3018%" y="287.50"></text></g><g><title>implied_outlives_bounds (944,134 samples, 0.58%)</title><rect x="72.3889%" y="277" width="0.5779%" height="15" fill="rgb(240,125,3)"/><text x="72.6389%" y="287.50"></text></g><g><title>param_env (1,257,858 samples, 0.77%)</title><rect x="72.9668%" y="277" width="0.7699%" height="15" fill="rgb(205,98,50)"/><text x="73.2168%" y="287.50"></text></g><g><title>check_impl_item_well_formed (8,976,769 samples, 5.49%)</title><rect x="68.4925%" y="293" width="5.4943%" height="15" fill="rgb(205,185,37)"/><text x="68.7425%" y="303.50">check_i..</text></g><g><title>region_scope_tree (373,803 samples, 0.23%)</title><rect x="73.7580%" y="277" width="0.2288%" height="15" fill="rgb(238,207,15)"/><text x="74.0080%" y="287.50"></text></g><g><title>evaluate_obligation (417,393 samples, 0.26%)</title><rect x="75.1000%" y="277" width="0.2555%" height="15" fill="rgb(213,199,42)"/><text x="75.3500%" y="287.50"></text></g><g><title>param_env (694,117 samples, 0.42%)</title><rect x="75.4736%" y="277" width="0.4248%" height="15" fill="rgb(235,201,11)"/><text x="75.7236%" y="287.50"></text></g><g><title>check_item_well_formed (3,336,604 samples, 2.04%)</title><rect x="73.9868%" y="293" width="2.0422%" height="15" fill="rgb(207,46,11)"/><text x="74.2368%" y="303.50">c..</text></g><g><title>analysis (122,476,943 samples, 74.96%)</title><rect x="2.1285%" y="341" width="74.9627%" height="15" fill="rgb(241,35,35)"/><text x="2.3785%" y="351.50">analysis</text></g><g><title>type_check_crate (76,199,357 samples, 46.64%)</title><rect x="30.4530%" y="325" width="46.6383%" height="15" fill="rgb(243,32,47)"/><text x="30.7030%" y="335.50">type_check_crate</text></g><g><title>wf_checking (14,283,073 samples, 8.74%)</title><rect x="68.3492%" y="309" width="8.7420%" height="15" fill="rgb(247,202,23)"/><text x="68.5992%" y="319.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,735,468 samples, 1.06%)</title><rect x="76.0290%" y="293" width="1.0622%" height="15" fill="rgb(219,102,11)"/><text x="76.2790%" y="303.50"></text></g><g><title>codegen_module (237,452 samples, 0.15%)</title><rect x="77.2958%" y="325" width="0.1453%" height="15" fill="rgb(243,110,44)"/><text x="77.5458%" y="335.50"></text></g><g><title>codegen_crate (608,876 samples, 0.37%)</title><rect x="77.0946%" y="341" width="0.3727%" height="15" fill="rgb(222,74,54)"/><text x="77.3446%" y="351.50"></text></g><g><title>LLVM_module_codegen (2,569,386 samples, 1.57%)</title><rect x="77.4791%" y="325" width="1.5726%" height="15" fill="rgb(216,99,12)"/><text x="77.7291%" y="335.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,409,544 samples, 1.47%)</title><rect x="77.5770%" y="309" width="1.4748%" height="15" fill="rgb(226,22,26)"/><text x="77.8270%" y="319.50"></text></g><g><title>codegen_module_optimize (2,849,299 samples, 1.74%)</title><rect x="77.4672%" y="341" width="1.7439%" height="15" fill="rgb(217,163,10)"/><text x="77.7172%" y="351.50"></text></g><g><title>LLVM_module_optimize (260,503 samples, 0.16%)</title><rect x="79.0517%" y="325" width="0.1594%" height="15" fill="rgb(213,25,53)"/><text x="79.3017%" y="335.50"></text></g><g><title>metadata_register_crate (455,045 samples, 0.28%)</title><rect x="84.7476%" y="293" width="0.2785%" height="15" fill="rgb(252,105,26)"/><text x="84.9976%" y="303.50"></text></g><g><title>metadata_register_crate (177,352 samples, 0.11%)</title><rect x="84.9176%" y="277" width="0.1085%" height="15" fill="rgb(220,39,43)"/><text x="85.1676%" y="287.50"></text></g><g><title>macro_expand_crate (9,291,213 samples, 5.69%)</title><rect x="79.4032%" y="325" width="5.6867%" height="15" fill="rgb(229,68,48)"/><text x="79.6532%" y="335.50">macro_e..</text></g><g><title>expand_crate (9,279,283 samples, 5.68%)</title><rect x="79.4105%" y="309" width="5.6794%" height="15" fill="rgb(252,8,32)"/><text x="79.6605%" y="319.50">expand_..</text></g><g><title>late_resolve_crate (1,554,635 samples, 0.95%)</title><rect x="85.2631%" y="309" width="0.9515%" height="15" fill="rgb(223,20,43)"/><text x="85.5131%" y="319.50"></text></g><g><title>configure_and_expand (11,544,866 samples, 7.07%)</title><rect x="79.2112%" y="341" width="7.0661%" height="15" fill="rgb(229,81,49)"/><text x="79.4612%" y="351.50">configure..</text></g><g><title>resolve_crate (1,849,938 samples, 1.13%)</title><rect x="85.1450%" y="325" width="1.1323%" height="15" fill="rgb(236,28,36)"/><text x="85.3950%" y="335.50"></text></g><g><title>drop_ast (170,562 samples, 0.10%)</title><rect x="86.2773%" y="341" width="0.1044%" height="15" fill="rgb(249,185,26)"/><text x="86.5273%" y="351.50"></text></g><g><title>early_lint_checks (310,713 samples, 0.19%)</title><rect x="86.3903%" y="341" width="0.1902%" height="15" fill="rgb(249,174,33)"/><text x="86.6403%" y="351.50"></text></g><g><title>free_global_ctxt (2,572,846 samples, 1.57%)</title><rect x="86.5804%" y="341" width="1.5747%" height="15" fill="rgb(233,201,37)"/><text x="86.8304%" y="351.50"></text></g><g><title>exported_symbols (196,332 samples, 0.12%)</title><rect x="89.2478%" y="325" width="0.1202%" height="15" fill="rgb(221,78,26)"/><text x="89.4978%" y="335.50"></text></g><g><title>is_sized_raw (501,342 samples, 0.31%)</title><rect x="92.0656%" y="293" width="0.3068%" height="15" fill="rgb(250,127,30)"/><text x="92.3156%" y="303.50"></text></g><g><title>evaluate_obligation (426,501 samples, 0.26%)</title><rect x="92.1114%" y="277" width="0.2610%" height="15" fill="rgb(230,49,44)"/><text x="92.3614%" y="287.50"></text></g><g><title>layout_of (1,636,986 samples, 1.00%)</title><rect x="91.6820%" y="309" width="1.0019%" height="15" fill="rgb(229,67,23)"/><text x="91.9320%" y="319.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (300,923 samples, 0.18%)</title><rect x="92.4998%" y="293" width="0.1842%" height="15" fill="rgb(249,83,47)"/><text x="92.7498%" y="303.50"></text></g><g><title>normalize_projection_ty (205,470 samples, 0.13%)</title><rect x="92.5582%" y="277" width="0.1258%" height="15" fill="rgb(215,43,3)"/><text x="92.8082%" y="287.50"></text></g><g><title>is_copy_raw (1,020,081 samples, 0.62%)</title><rect x="95.2500%" y="277" width="0.6243%" height="15" fill="rgb(238,154,13)"/><text x="95.5000%" y="287.50"></text></g><g><title>evaluate_obligation (878,510 samples, 0.54%)</title><rect x="95.3367%" y="261" width="0.5377%" height="15" fill="rgb(219,56,2)"/><text x="95.5867%" y="271.50"></text></g><g><title>needs_drop_raw (1,267,663 samples, 0.78%)</title><rect x="95.1932%" y="293" width="0.7759%" height="15" fill="rgb(233,0,4)"/><text x="95.4432%" y="303.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,512,951 samples, 3.37%)</title><rect x="92.6840%" y="309" width="3.3742%" height="15" fill="rgb(235,30,7)"/><text x="92.9340%" y="319.50">mir..</text></g><g><title>optimized_mir (10,949,393 samples, 6.70%)</title><rect x="89.4127%" y="325" width="6.7016%" height="15" fill="rgb(250,79,13)"/><text x="89.6627%" y="335.50">optimized..</text></g><g><title>generate_crate_metadata (13,087,192 samples, 8.01%)</title><rect x="88.1552%" y="341" width="8.0101%" height="15" fill="rgb(211,146,34)"/><text x="88.4052%" y="351.50">generate_cr..</text></g><g><title>hir_lowering (2,816,228 samples, 1.72%)</title><rect x="96.1653%" y="341" width="1.7237%" height="15" fill="rgb(228,22,38)"/><text x="96.4153%" y="351.50"></text></g><g><title>link_crate (811,308 samples, 0.50%)</title><rect x="97.8991%" y="325" width="0.4966%" height="15" fill="rgb(235,168,5)"/><text x="98.1491%" y="335.50"></text></g><g><title>link_binary (801,488 samples, 0.49%)</title><rect x="97.9051%" y="309" width="0.4906%" height="15" fill="rgb(221,155,16)"/><text x="98.1551%" y="319.50"></text></g><g><title>link_rlib (548,575 samples, 0.34%)</title><rect x="98.0599%" y="293" width="0.3358%" height="15" fill="rgb(215,215,53)"/><text x="98.3099%" y="303.50"></text></g><g><title>link (834,558 samples, 0.51%)</title><rect x="97.8890%" y="341" width="0.5108%" height="15" fill="rgb(223,4,10)"/><text x="98.1390%" y="351.50"></text></g><g><title>parse_crate (1,087,791 samples, 0.67%)</title><rect x="98.3998%" y="341" width="0.6658%" height="15" fill="rgb(234,103,6)"/><text x="98.6498%" y="351.50"></text></g><g><title>prepare_outputs (197,762 samples, 0.12%)</title><rect x="99.0677%" y="341" width="0.1210%" height="15" fill="rgb(227,97,0)"/><text x="99.3177%" y="351.50"></text></g><g><title>self_profile_alloc_query_strings (861,049 samples, 0.53%)</title><rect x="99.1887%" y="341" width="0.5270%" height="15" fill="rgb(234,150,53)"/><text x="99.4387%" y="351.50"></text></g><g><title>all (163,383,744 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="383.50"></text></g><g><title>rustc (163,383,744 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="367.50">rustc</text></g><g><title>write_crate_metadata (407,804 samples, 0.25%)</title><rect x="99.7504%" y="341" width="0.2496%" height="15" fill="rgb(237,53,32)"/><text x="100.0004%" y="351.50"></text></g></svg></svg>