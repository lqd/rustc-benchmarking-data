<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (88,427,866 samples, 12.15%)</title><rect x="0.0908%" y="165" width="12.1488%" height="15" fill="rgb(227,0,7)"/><text x="0.3408%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (765,246 samples, 0.11%)</title><rect x="16.7313%" y="37" width="0.1051%" height="15" fill="rgb(217,0,24)"/><text x="16.9813%" y="47.50"></text></g><g><title>needs_drop_raw (1,127,510 samples, 0.15%)</title><rect x="16.6852%" y="53" width="0.1549%" height="15" fill="rgb(221,193,54)"/><text x="16.9352%" y="63.50"></text></g><g><title>specialization_graph_of (893,479 samples, 0.12%)</title><rect x="16.9417%" y="37" width="0.1228%" height="15" fill="rgb(248,212,6)"/><text x="17.1917%" y="47.50"></text></g><g><title>resolve_instance (1,697,586 samples, 0.23%)</title><rect x="16.8401%" y="53" width="0.2332%" height="15" fill="rgb(208,68,35)"/><text x="17.0901%" y="63.50"></text></g><g><title>thir_body (1,830,371 samples, 0.25%)</title><rect x="17.0785%" y="53" width="0.2515%" height="15" fill="rgb(232,128,0)"/><text x="17.3285%" y="63.50"></text></g><g><title>mir_const (12,116,307 samples, 1.66%)</title><rect x="15.6709%" y="101" width="1.6646%" height="15" fill="rgb(207,160,47)"/><text x="15.9209%" y="111.50"></text></g><g><title>unsafety_check_result (10,640,580 samples, 1.46%)</title><rect x="15.8737%" y="85" width="1.4619%" height="15" fill="rgb(228,23,34)"/><text x="16.1237%" y="95.50"></text></g><g><title>mir_built (9,687,349 samples, 1.33%)</title><rect x="16.0046%" y="69" width="1.3309%" height="15" fill="rgb(218,30,26)"/><text x="16.2546%" y="79.50"></text></g><g><title>mir_promoted (13,518,769 samples, 1.86%)</title><rect x="15.4908%" y="117" width="1.8573%" height="15" fill="rgb(220,122,19)"/><text x="15.7408%" y="127.50">m..</text></g><g><title>type_op_normalize_fn_sig (832,486 samples, 0.11%)</title><rect x="17.4256%" y="117" width="0.1144%" height="15" fill="rgb(250,228,42)"/><text x="17.6756%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,186,198 samples, 0.58%)</title><rect x="17.6039%" y="117" width="0.5751%" height="15" fill="rgb(240,193,28)"/><text x="17.8539%" y="127.50"></text></g><g><title>MIR_borrow_checking (42,818,288 samples, 5.88%)</title><rect x="12.2986%" y="149" width="5.8827%" height="15" fill="rgb(216,20,37)"/><text x="12.5486%" y="159.50">MIR_bor..</text></g><g><title>mir_borrowck (42,660,427 samples, 5.86%)</title><rect x="12.3202%" y="133" width="5.8610%" height="15" fill="rgb(206,188,39)"/><text x="12.5702%" y="143.50">mir_bor..</text></g><g><title>check_mod_attrs (1,182,082 samples, 0.16%)</title><rect x="18.2358%" y="133" width="0.1624%" height="15" fill="rgb(217,207,13)"/><text x="18.4858%" y="143.50"></text></g><g><title>misc_checking_1 (2,012,480 samples, 0.28%)</title><rect x="18.2312%" y="149" width="0.2765%" height="15" fill="rgb(231,73,38)"/><text x="18.4812%" y="159.50"></text></g><g><title>misc_checking_2 (1,645,677 samples, 0.23%)</title><rect x="18.5077%" y="149" width="0.2261%" height="15" fill="rgb(225,20,46)"/><text x="18.7577%" y="159.50"></text></g><g><title>match_checking (1,029,090 samples, 0.14%)</title><rect x="18.5924%" y="133" width="0.1414%" height="15" fill="rgb(210,31,41)"/><text x="18.8424%" y="143.50"></text></g><g><title>check_match (989,679 samples, 0.14%)</title><rect x="18.5978%" y="117" width="0.1360%" height="15" fill="rgb(221,200,47)"/><text x="18.8478%" y="127.50"></text></g><g><title>crate_lints (2,541,605 samples, 0.35%)</title><rect x="18.8581%" y="117" width="0.3492%" height="15" fill="rgb(226,26,5)"/><text x="19.1081%" y="127.50"></text></g><g><title>type_of (1,098,933 samples, 0.15%)</title><rect x="19.0563%" y="101" width="0.1510%" height="15" fill="rgb(249,33,26)"/><text x="19.3063%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (865,519 samples, 0.12%)</title><rect x="19.0884%" y="85" width="0.1189%" height="15" fill="rgb(235,183,28)"/><text x="19.3384%" y="95.50"></text></g><g><title>lint_checking (3,334,273 samples, 0.46%)</title><rect x="18.8579%" y="133" width="0.4581%" height="15" fill="rgb(221,5,38)"/><text x="19.1079%" y="143.50"></text></g><g><title>module_lints (791,168 samples, 0.11%)</title><rect x="19.2073%" y="117" width="0.1087%" height="15" fill="rgb(247,18,42)"/><text x="19.4573%" y="127.50"></text></g><g><title>lint_mod (782,638 samples, 0.11%)</title><rect x="19.2085%" y="101" width="0.1075%" height="15" fill="rgb(241,131,45)"/><text x="19.4585%" y="111.50"></text></g><g><title>privacy_checking_modules (1,421,994 samples, 0.20%)</title><rect x="19.3688%" y="133" width="0.1954%" height="15" fill="rgb(249,31,29)"/><text x="19.6188%" y="143.50"></text></g><g><title>check_mod_privacy (1,415,284 samples, 0.19%)</title><rect x="19.3697%" y="117" width="0.1944%" height="15" fill="rgb(225,111,53)"/><text x="19.6197%" y="127.50"></text></g><g><title>misc_checking_3 (6,062,220 samples, 0.83%)</title><rect x="18.7338%" y="149" width="0.8329%" height="15" fill="rgb(238,160,17)"/><text x="18.9838%" y="159.50"></text></g><g><title>impl_parent (2,683,799 samples, 0.37%)</title><rect x="20.2610%" y="85" width="0.3687%" height="15" fill="rgb(214,148,48)"/><text x="20.5110%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,335,997 samples, 0.18%)</title><rect x="20.4462%" y="69" width="0.1835%" height="15" fill="rgb(232,36,49)"/><text x="20.6962%" y="79.50"></text></g><g><title>impl_trait_ref (5,167,042 samples, 0.71%)</title><rect x="20.6301%" y="85" width="0.7099%" height="15" fill="rgb(209,103,24)"/><text x="20.8801%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,228,453 samples, 0.58%)</title><rect x="20.7590%" y="69" width="0.5809%" height="15" fill="rgb(229,88,8)"/><text x="21.0090%" y="79.50"></text></g><g><title>trait_impls_of (755,656 samples, 0.10%)</title><rect x="21.3494%" y="85" width="0.1038%" height="15" fill="rgb(213,181,19)"/><text x="21.5994%" y="95.50"></text></g><g><title>coherent_trait (13,635,937 samples, 1.87%)</title><rect x="19.5800%" y="117" width="1.8734%" height="15" fill="rgb(254,191,54)"/><text x="19.8300%" y="127.50">c..</text></g><g><title>specialization_graph_of (12,398,045 samples, 1.70%)</title><rect x="19.7501%" y="101" width="1.7033%" height="15" fill="rgb(241,83,37)"/><text x="20.0001%" y="111.50"></text></g><g><title>coherence_checking (13,729,177 samples, 1.89%)</title><rect x="19.5777%" y="133" width="1.8862%" height="15" fill="rgb(233,36,39)"/><text x="19.8277%" y="143.50">c..</text></g><g><title>associated_item (737,486 samples, 0.10%)</title><rect x="25.8196%" y="69" width="0.1013%" height="15" fill="rgb(226,3,54)"/><text x="26.0696%" y="79.50"></text></g><g><title>associated_items (904,618 samples, 0.12%)</title><rect x="25.7998%" y="85" width="0.1243%" height="15" fill="rgb(245,192,40)"/><text x="26.0498%" y="95.50"></text></g><g><title>evaluate_obligation (3,657,516 samples, 0.50%)</title><rect x="26.0165%" y="85" width="0.5025%" height="15" fill="rgb(238,167,29)"/><text x="26.2665%" y="95.50"></text></g><g><title>method_autoderef_steps (740,598 samples, 0.10%)</title><rect x="26.5974%" y="85" width="0.1017%" height="15" fill="rgb(232,182,51)"/><text x="26.8474%" y="95.50"></text></g><g><title>typeck (12,393,283 samples, 1.70%)</title><rect x="26.7499%" y="85" width="1.7027%" height="15" fill="rgb(231,60,39)"/><text x="26.9999%" y="95.50"></text></g><g><title>item_bodies_checking (50,877,909 samples, 6.99%)</title><rect x="21.4707%" y="133" width="6.9899%" height="15" fill="rgb(208,69,12)"/><text x="21.7207%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (50,875,629 samples, 6.99%)</title><rect x="21.4710%" y="117" width="6.9896%" height="15" fill="rgb(235,93,37)"/><text x="21.7210%" y="127.50">typeck_it..</text></g><g><title>typeck (50,764,378 samples, 6.97%)</title><rect x="21.4863%" y="101" width="6.9743%" height="15" fill="rgb(213,116,39)"/><text x="21.7363%" y="111.50">typeck</text></g><g><title>item_types_checking (1,295,443 samples, 0.18%)</title><rect x="28.4606%" y="133" width="0.1780%" height="15" fill="rgb(222,207,29)"/><text x="28.7106%" y="143.50"></text></g><g><title>check_mod_item_types (1,287,553 samples, 0.18%)</title><rect x="28.4617%" y="117" width="0.1769%" height="15" fill="rgb(206,96,30)"/><text x="28.7117%" y="127.50"></text></g><g><title>generics_of (829,548 samples, 0.11%)</title><rect x="28.7623%" y="101" width="0.1140%" height="15" fill="rgb(218,138,4)"/><text x="29.0123%" y="111.50"></text></g><g><title>type_collecting (3,030,470 samples, 0.42%)</title><rect x="28.6389%" y="133" width="0.4163%" height="15" fill="rgb(250,191,14)"/><text x="28.8889%" y="143.50"></text></g><g><title>collect_mod_item_types (3,010,530 samples, 0.41%)</title><rect x="28.6416%" y="117" width="0.4136%" height="15" fill="rgb(239,60,40)"/><text x="28.8916%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,353,333 samples, 0.74%)</title><rect x="29.0954%" y="117" width="0.7355%" height="15" fill="rgb(206,27,48)"/><text x="29.3454%" y="127.50"></text></g><g><title>check_item_well_formed (4,083,734 samples, 0.56%)</title><rect x="29.8309%" y="117" width="0.5610%" height="15" fill="rgb(225,35,8)"/><text x="30.0809%" y="127.50"></text></g><g><title>analysis (132,346,855 samples, 18.18%)</title><rect x="12.2396%" y="165" width="18.1827%" height="15" fill="rgb(250,213,24)"/><text x="12.4896%" y="175.50">analysis</text></g><g><title>type_check_crate (79,015,271 samples, 10.86%)</title><rect x="19.5666%" y="149" width="10.8556%" height="15" fill="rgb(247,123,22)"/><text x="19.8166%" y="159.50">type_check_crate</text></g><g><title>wf_checking (9,942,600 samples, 1.37%)</title><rect x="29.0563%" y="133" width="1.3660%" height="15" fill="rgb(231,138,38)"/><text x="29.3063%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,054,756 samples, 0.14%)</title><rect x="40.1815%" y="133" width="0.1449%" height="15" fill="rgb(231,145,46)"/><text x="40.4315%" y="143.50"></text></g><g><title>const_caller_location (1,106,458 samples, 0.15%)</title><rect x="40.3264%" y="133" width="0.1520%" height="15" fill="rgb(251,118,11)"/><text x="40.5764%" y="143.50"></text></g><g><title>layout_of (1,182,538 samples, 0.16%)</title><rect x="41.0189%" y="117" width="0.1625%" height="15" fill="rgb(217,147,25)"/><text x="41.2689%" y="127.50"></text></g><g><title>explicit_predicates_of (900,780 samples, 0.12%)</title><rect x="41.6396%" y="69" width="0.1238%" height="15" fill="rgb(247,81,37)"/><text x="41.8896%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (781,049 samples, 0.11%)</title><rect x="41.6561%" y="53" width="0.1073%" height="15" fill="rgb(209,12,38)"/><text x="41.9061%" y="63.50"></text></g><g><title>predicates_of (1,713,175 samples, 0.24%)</title><rect x="41.5488%" y="101" width="0.2354%" height="15" fill="rgb(227,1,9)"/><text x="41.7988%" y="111.50"></text></g><g><title>predicates_defined_on (1,388,853 samples, 0.19%)</title><rect x="41.5934%" y="85" width="0.1908%" height="15" fill="rgb(248,47,43)"/><text x="41.8434%" y="95.50"></text></g><g><title>param_env (4,399,640 samples, 0.60%)</title><rect x="41.1814%" y="117" width="0.6045%" height="15" fill="rgb(221,10,30)"/><text x="41.4314%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (775,548 samples, 0.11%)</title><rect x="41.7858%" y="117" width="0.1065%" height="15" fill="rgb(210,229,1)"/><text x="42.0358%" y="127.50"></text></g><g><title>fn_abi_of_instance (10,288,304 samples, 1.41%)</title><rect x="40.4816%" y="133" width="1.4135%" height="15" fill="rgb(222,148,37)"/><text x="40.7316%" y="143.50"></text></g><g><title>layout_of (1,423,975 samples, 0.20%)</title><rect x="41.9789%" y="133" width="0.1956%" height="15" fill="rgb(234,67,33)"/><text x="42.2289%" y="143.50"></text></g><g><title>codegen_module (83,122,961 samples, 11.42%)</title><rect x="30.8192%" y="149" width="11.4200%" height="15" fill="rgb(247,98,35)"/><text x="31.0692%" y="159.50">codegen_module</text></g><g><title>codegen_crate (86,082,582 samples, 11.83%)</title><rect x="30.4233%" y="165" width="11.8266%" height="15" fill="rgb(247,138,52)"/><text x="30.6733%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (328,582,779 samples, 45.14%)</title><rect x="42.2778%" y="149" width="45.1428%" height="15" fill="rgb(213,79,30)"/><text x="42.5278%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (315,176,584 samples, 43.30%)</title><rect x="44.1197%" y="133" width="43.3010%" height="15" fill="rgb(246,177,23)"/><text x="44.3697%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (344,051,055 samples, 47.27%)</title><rect x="42.2498%" y="165" width="47.2680%" height="15" fill="rgb(230,62,27)"/><text x="42.4998%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (15,264,543 samples, 2.10%)</title><rect x="87.4207%" y="149" width="2.0971%" height="15" fill="rgb(216,154,8)"/><text x="87.6707%" y="159.50">L..</text></g><g><title>metadata_register_crate (1,314,153 samples, 0.18%)</title><rect x="91.9038%" y="117" width="0.1805%" height="15" fill="rgb(244,35,45)"/><text x="92.1538%" y="127.50"></text></g><g><title>macro_expand_crate (18,683,426 samples, 2.57%)</title><rect x="89.5800%" y="149" width="2.5668%" height="15" fill="rgb(251,115,12)"/><text x="89.8300%" y="159.50">ma..</text></g><g><title>expand_crate (18,667,786 samples, 2.56%)</title><rect x="89.5821%" y="133" width="2.5647%" height="15" fill="rgb(240,54,50)"/><text x="89.8321%" y="143.50">ex..</text></g><g><title>late_resolve_crate (2,265,202 samples, 0.31%)</title><rect x="92.1868%" y="133" width="0.3112%" height="15" fill="rgb(233,84,52)"/><text x="92.4368%" y="143.50"></text></g><g><title>configure_and_expand (21,840,347 samples, 3.00%)</title><rect x="89.5178%" y="165" width="3.0006%" height="15" fill="rgb(207,117,47)"/><text x="89.7678%" y="175.50">con..</text></g><g><title>resolve_crate (2,628,577 samples, 0.36%)</title><rect x="92.1572%" y="149" width="0.3611%" height="15" fill="rgb(249,43,39)"/><text x="92.4072%" y="159.50"></text></g><g><title>free_global_ctxt (5,985,520 samples, 0.82%)</title><rect x="92.6536%" y="165" width="0.8223%" height="15" fill="rgb(209,38,44)"/><text x="92.9036%" y="175.50"></text></g><g><title>item_attrs (962,901 samples, 0.13%)</title><rect x="94.1208%" y="69" width="0.1323%" height="15" fill="rgb(236,212,23)"/><text x="94.3708%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (922,830 samples, 0.13%)</title><rect x="94.1263%" y="53" width="0.1268%" height="15" fill="rgb(242,79,21)"/><text x="94.3763%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,505,017 samples, 0.21%)</title><rect x="94.0881%" y="85" width="0.2068%" height="15" fill="rgb(211,96,35)"/><text x="94.3381%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,718,582 samples, 0.24%)</title><rect x="94.7933%" y="69" width="0.2361%" height="15" fill="rgb(253,215,40)"/><text x="95.0433%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,650,243 samples, 0.36%)</title><rect x="95.0294%" y="69" width="0.3641%" height="15" fill="rgb(211,81,21)"/><text x="95.2794%" y="79.50"></text></g><g><title>optimized_mir (7,536,559 samples, 1.04%)</title><rect x="94.3836%" y="85" width="1.0354%" height="15" fill="rgb(208,190,38)"/><text x="94.6336%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,132,754 samples, 0.29%)</title><rect x="95.5641%" y="69" width="0.2930%" height="15" fill="rgb(235,213,38)"/><text x="95.8141%" y="79.50"></text></g><g><title>specialization_graph_of (949,251 samples, 0.13%)</title><rect x="95.9406%" y="69" width="0.1304%" height="15" fill="rgb(237,122,38)"/><text x="96.1906%" y="79.50"></text></g><g><title>resolve_instance (5,037,313 samples, 0.69%)</title><rect x="95.4190%" y="85" width="0.6921%" height="15" fill="rgb(244,218,35)"/><text x="95.6690%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,188,796 samples, 0.16%)</title><rect x="96.1370%" y="69" width="0.1633%" height="15" fill="rgb(240,68,47)"/><text x="96.3870%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,148,506 samples, 0.16%)</title><rect x="96.1426%" y="53" width="0.1578%" height="15" fill="rgb(210,16,53)"/><text x="96.3926%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,081,965 samples, 0.15%)</title><rect x="96.1517%" y="37" width="0.1486%" height="15" fill="rgb(235,124,12)"/><text x="96.4017%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,366,120 samples, 0.19%)</title><rect x="96.1168%" y="85" width="0.1877%" height="15" fill="rgb(224,169,11)"/><text x="96.3668%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (18,891,879 samples, 2.60%)</title><rect x="93.7819%" y="101" width="2.5955%" height="15" fill="rgb(250,166,2)"/><text x="94.0319%" y="111.50">mo..</text></g><g><title>monomorphization_collector (18,978,840 samples, 2.61%)</title><rect x="93.7815%" y="117" width="2.6074%" height="15" fill="rgb(242,216,29)"/><text x="94.0315%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,554,135 samples, 0.35%)</title><rect x="96.3894%" y="101" width="0.3509%" height="15" fill="rgb(230,116,27)"/><text x="96.6394%" y="111.50"></text></g><g><title>symbol_name (2,389,694 samples, 0.33%)</title><rect x="96.4120%" y="85" width="0.3283%" height="15" fill="rgb(228,99,48)"/><text x="96.6620%" y="95.50"></text></g><g><title>type_of (876,408 samples, 0.12%)</title><rect x="96.6199%" y="69" width="0.1204%" height="15" fill="rgb(253,11,6)"/><text x="96.8699%" y="79.50"></text></g><g><title>metadata_decode_entry_type_of (863,128 samples, 0.12%)</title><rect x="96.6217%" y="53" width="0.1186%" height="15" fill="rgb(247,143,39)"/><text x="96.8717%" y="63.50"></text></g><g><title>collect_and_partition_mono_items (22,429,395 samples, 3.08%)</title><rect x="93.7770%" y="133" width="3.0815%" height="15" fill="rgb(236,97,10)"/><text x="94.0270%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,417,814 samples, 0.47%)</title><rect x="96.3889%" y="117" width="0.4696%" height="15" fill="rgb(233,208,19)"/><text x="96.6389%" y="127.50"></text></g><g><title>cgu_partitioning (860,359 samples, 0.12%)</title><rect x="96.7403%" y="101" width="0.1182%" height="15" fill="rgb(216,164,2)"/><text x="96.9903%" y="111.50"></text></g><g><title>exported_symbols (22,652,767 samples, 3.11%)</title><rect x="93.7654%" y="149" width="3.1122%" height="15" fill="rgb(220,129,5)"/><text x="94.0154%" y="159.50">exp..</text></g><g><title>layout_of (930,553 samples, 0.13%)</title><rect x="97.2447%" y="133" width="0.1278%" height="15" fill="rgb(242,17,10)"/><text x="97.4947%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,382,693 samples, 0.60%)</title><rect x="97.3725%" y="133" width="0.6021%" height="15" fill="rgb(242,107,0)"/><text x="97.6225%" y="143.50"></text></g><g><title>optimized_mir (8,053,023 samples, 1.11%)</title><rect x="96.8915%" y="149" width="1.1064%" height="15" fill="rgb(251,28,31)"/><text x="97.1415%" y="159.50"></text></g><g><title>generate_crate_metadata (33,470,125 samples, 4.60%)</title><rect x="93.4760%" y="165" width="4.5983%" height="15" fill="rgb(233,223,10)"/><text x="93.7260%" y="175.50">gener..</text></g><g><title>hir_lowering (4,305,783 samples, 0.59%)</title><rect x="98.0743%" y="165" width="0.5916%" height="15" fill="rgb(215,21,27)"/><text x="98.3243%" y="175.50"></text></g><g><title>finish_ongoing_codegen (4,192,032 samples, 0.58%)</title><rect x="98.6676%" y="149" width="0.5759%" height="15" fill="rgb(232,23,21)"/><text x="98.9176%" y="159.50"></text></g><g><title>link_crate (2,552,295 samples, 0.35%)</title><rect x="99.2436%" y="149" width="0.3507%" height="15" fill="rgb(244,5,23)"/><text x="99.4936%" y="159.50"></text></g><g><title>link_binary (2,505,675 samples, 0.34%)</title><rect x="99.2500%" y="133" width="0.3442%" height="15" fill="rgb(226,81,46)"/><text x="99.5000%" y="143.50"></text></g><g><title>link_rlib (1,830,908 samples, 0.25%)</title><rect x="99.3427%" y="117" width="0.2515%" height="15" fill="rgb(247,70,30)"/><text x="99.5927%" y="127.50"></text></g><g><title>link (6,765,108 samples, 0.93%)</title><rect x="98.6659%" y="165" width="0.9294%" height="15" fill="rgb(212,68,19)"/><text x="98.9159%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,572,555 samples, 0.22%)</title><rect x="99.7109%" y="165" width="0.2160%" height="15" fill="rgb(240,187,13)"/><text x="99.9609%" y="175.50"></text></g><g><title>all (727,873,698 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (727,873,698 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>