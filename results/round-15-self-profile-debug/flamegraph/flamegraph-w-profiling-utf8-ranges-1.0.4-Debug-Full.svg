<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (52,550,041 samples, 12.10%)</title><rect x="0.1929%" y="181" width="12.1033%" height="15" fill="rgb(227,0,7)"/><text x="0.4429%" y="191.50">LLVM_passes</text></g><g><title>thir_body (720,218 samples, 0.17%)</title><rect x="15.0738%" y="69" width="0.1659%" height="15" fill="rgb(217,0,24)"/><text x="15.3238%" y="79.50"></text></g><g><title>mir_const (4,297,826 samples, 0.99%)</title><rect x="14.2512%" y="117" width="0.9899%" height="15" fill="rgb(221,193,54)"/><text x="14.5012%" y="127.50"></text></g><g><title>unsafety_check_result (3,710,233 samples, 0.85%)</title><rect x="14.3865%" y="101" width="0.8545%" height="15" fill="rgb(248,212,6)"/><text x="14.6365%" y="111.50"></text></g><g><title>mir_built (3,277,247 samples, 0.75%)</title><rect x="14.4863%" y="85" width="0.7548%" height="15" fill="rgb(208,68,35)"/><text x="14.7363%" y="95.50"></text></g><g><title>mir_promoted (5,163,164 samples, 1.19%)</title><rect x="14.1270%" y="133" width="1.1892%" height="15" fill="rgb(232,128,0)"/><text x="14.3770%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,407,760 samples, 0.32%)</title><rect x="15.4642%" y="133" width="0.3242%" height="15" fill="rgb(207,160,47)"/><text x="15.7142%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,674,287 samples, 3.38%)</title><rect x="12.4095%" y="165" width="3.3798%" height="15" fill="rgb(228,23,34)"/><text x="12.6595%" y="175.50">MIR..</text></g><g><title>mir_borrowck (14,600,957 samples, 3.36%)</title><rect x="12.4264%" y="149" width="3.3629%" height="15" fill="rgb(218,30,26)"/><text x="12.6764%" y="159.50">mir..</text></g><g><title>codegen_fn_attrs (584,016 samples, 0.13%)</title><rect x="15.9978%" y="133" width="0.1345%" height="15" fill="rgb(220,122,19)"/><text x="16.2478%" y="143.50"></text></g><g><title>check_mod_attrs (957,090 samples, 0.22%)</title><rect x="15.9119%" y="149" width="0.2204%" height="15" fill="rgb(250,228,42)"/><text x="16.1619%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (605,337 samples, 0.14%)</title><rect x="16.1992%" y="149" width="0.1394%" height="15" fill="rgb(240,193,28)"/><text x="16.4492%" y="159.50"></text></g><g><title>misc_checking_1 (1,958,050 samples, 0.45%)</title><rect x="15.9022%" y="165" width="0.4510%" height="15" fill="rgb(216,20,37)"/><text x="16.1522%" y="175.50"></text></g><g><title>misc_checking_2 (695,487 samples, 0.16%)</title><rect x="16.3532%" y="165" width="0.1602%" height="15" fill="rgb(206,188,39)"/><text x="16.6032%" y="175.50"></text></g><g><title>crate_lints (2,132,392 samples, 0.49%)</title><rect x="16.6087%" y="133" width="0.4911%" height="15" fill="rgb(217,207,13)"/><text x="16.8587%" y="143.50"></text></g><g><title>type_of (1,307,961 samples, 0.30%)</title><rect x="16.7986%" y="117" width="0.3012%" height="15" fill="rgb(231,73,38)"/><text x="17.0486%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (843,856 samples, 0.19%)</title><rect x="16.9055%" y="101" width="0.1944%" height="15" fill="rgb(225,20,46)"/><text x="17.1555%" y="111.50"></text></g><g><title>lint_checking (2,467,176 samples, 0.57%)</title><rect x="16.6083%" y="149" width="0.5682%" height="15" fill="rgb(210,31,41)"/><text x="16.8583%" y="159.50"></text></g><g><title>privacy_checking_modules (499,985 samples, 0.12%)</title><rect x="17.2117%" y="149" width="0.1152%" height="15" fill="rgb(221,200,47)"/><text x="17.4617%" y="159.50"></text></g><g><title>check_mod_privacy (497,545 samples, 0.11%)</title><rect x="17.2123%" y="133" width="0.1146%" height="15" fill="rgb(226,26,5)"/><text x="17.4623%" y="143.50"></text></g><g><title>misc_checking_3 (3,542,747 samples, 0.82%)</title><rect x="16.5134%" y="165" width="0.8160%" height="15" fill="rgb(249,33,26)"/><text x="16.7634%" y="175.50"></text></g><g><title>adt_destructor (1,167,332 samples, 0.27%)</title><rect x="17.3662%" y="117" width="0.2689%" height="15" fill="rgb(235,183,28)"/><text x="17.6162%" y="127.50"></text></g><g><title>coherent_trait (1,160,742 samples, 0.27%)</title><rect x="17.3677%" y="101" width="0.2673%" height="15" fill="rgb(221,5,38)"/><text x="17.6177%" y="111.50"></text></g><g><title>specialization_graph_of (1,156,692 samples, 0.27%)</title><rect x="17.3686%" y="85" width="0.2664%" height="15" fill="rgb(247,18,42)"/><text x="17.6186%" y="95.50"></text></g><g><title>impl_parent (4,811,887 samples, 1.11%)</title><rect x="19.9703%" y="101" width="1.1083%" height="15" fill="rgb(241,131,45)"/><text x="20.2203%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,522,047 samples, 0.58%)</title><rect x="20.4977%" y="85" width="0.5809%" height="15" fill="rgb(249,31,29)"/><text x="20.7477%" y="95.50"></text></g><g><title>impl_trait_ref (11,430,499 samples, 2.63%)</title><rect x="21.0786%" y="101" width="2.6327%" height="15" fill="rgb(225,111,53)"/><text x="21.3286%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (9,195,099 samples, 2.12%)</title><rect x="21.5934%" y="85" width="2.1178%" height="15" fill="rgb(238,160,17)"/><text x="21.8434%" y="95.50">m..</text></g><g><title>trait_impls_of (1,880,750 samples, 0.43%)</title><rect x="23.8612%" y="101" width="0.4332%" height="15" fill="rgb(214,148,48)"/><text x="24.1112%" y="111.50"></text></g><g><title>implementations_of_trait (451,013 samples, 0.10%)</title><rect x="24.1905%" y="85" width="0.1039%" height="15" fill="rgb(232,36,49)"/><text x="24.4405%" y="95.50"></text></g><g><title>coherent_trait (30,210,213 samples, 6.96%)</title><rect x="17.3467%" y="133" width="6.9580%" height="15" fill="rgb(209,103,24)"/><text x="17.5967%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (28,355,324 samples, 6.53%)</title><rect x="17.7739%" y="117" width="6.5308%" height="15" fill="rgb(229,88,8)"/><text x="18.0239%" y="127.50">specializ..</text></g><g><title>coherence_checking (30,323,485 samples, 6.98%)</title><rect x="17.3393%" y="149" width="6.9841%" height="15" fill="rgb(213,181,19)"/><text x="17.5893%" y="159.50">coherence..</text></g><g><title>mir_borrowck (435,774 samples, 0.10%)</title><rect x="28.6750%" y="37" width="0.1004%" height="15" fill="rgb(254,191,54)"/><text x="28.9250%" y="47.50"></text></g><g><title>mir_for_ctfe (595,966 samples, 0.14%)</title><rect x="28.6384%" y="69" width="0.1373%" height="15" fill="rgb(241,83,37)"/><text x="28.8884%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (539,346 samples, 0.12%)</title><rect x="28.6515%" y="53" width="0.1242%" height="15" fill="rgb(233,36,39)"/><text x="28.9015%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,105,701 samples, 0.25%)</title><rect x="28.5602%" y="101" width="0.2547%" height="15" fill="rgb(226,3,54)"/><text x="28.8102%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,085,061 samples, 0.25%)</title><rect x="28.5649%" y="85" width="0.2499%" height="15" fill="rgb(245,192,40)"/><text x="28.8149%" y="95.50"></text></g><g><title>generics_of (933,056 samples, 0.21%)</title><rect x="29.8833%" y="85" width="0.2149%" height="15" fill="rgb(238,167,29)"/><text x="30.1333%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (677,063 samples, 0.16%)</title><rect x="29.9422%" y="69" width="0.1559%" height="15" fill="rgb(232,182,51)"/><text x="30.1922%" y="79.50"></text></g><g><title>impl_trait_ref (1,278,732 samples, 0.29%)</title><rect x="30.1450%" y="85" width="0.2945%" height="15" fill="rgb(231,60,39)"/><text x="30.3950%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,028,347 samples, 0.24%)</title><rect x="30.2026%" y="69" width="0.2368%" height="15" fill="rgb(208,69,12)"/><text x="30.4526%" y="79.50"></text></g><g><title>predicates_of (1,181,193 samples, 0.27%)</title><rect x="30.4528%" y="85" width="0.2721%" height="15" fill="rgb(235,93,37)"/><text x="30.7028%" y="95.50"></text></g><g><title>predicates_defined_on (759,550 samples, 0.17%)</title><rect x="30.5499%" y="69" width="0.1749%" height="15" fill="rgb(213,116,39)"/><text x="30.7999%" y="79.50"></text></g><g><title>specializes (2,576,168 samples, 0.59%)</title><rect x="30.7248%" y="85" width="0.5933%" height="15" fill="rgb(222,207,29)"/><text x="30.9748%" y="95.50"></text></g><g><title>param_env (1,500,868 samples, 0.35%)</title><rect x="30.9725%" y="69" width="0.3457%" height="15" fill="rgb(206,96,30)"/><text x="31.2225%" y="79.50"></text></g><g><title>def_span (696,202 samples, 0.16%)</title><rect x="31.1578%" y="53" width="0.1603%" height="15" fill="rgb(218,138,4)"/><text x="31.4078%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (618,912 samples, 0.14%)</title><rect x="31.1756%" y="37" width="0.1425%" height="15" fill="rgb(250,191,14)"/><text x="31.4256%" y="47.50"></text></g><g><title>trait_impls_of (540,088 samples, 0.12%)</title><rect x="31.3216%" y="85" width="0.1244%" height="15" fill="rgb(239,60,40)"/><text x="31.5716%" y="95.50"></text></g><g><title>evaluate_obligation (11,458,781 samples, 2.64%)</title><rect x="28.8148%" y="101" width="2.6392%" height="15" fill="rgb(206,27,48)"/><text x="29.0648%" y="111.50">ev..</text></g><g><title>item_bodies_checking (32,328,605 samples, 7.45%)</title><rect x="24.3347%" y="149" width="7.4459%" height="15" fill="rgb(225,35,8)"/><text x="24.5847%" y="159.50">item_bodie..</text></g><g><title>typeck_item_bodies (32,326,105 samples, 7.45%)</title><rect x="24.3352%" y="133" width="7.4453%" height="15" fill="rgb(250,213,24)"/><text x="24.5852%" y="143.50">typeck_ite..</text></g><g><title>typeck (32,279,664 samples, 7.43%)</title><rect x="24.3459%" y="117" width="7.4346%" height="15" fill="rgb(247,123,22)"/><text x="24.5959%" y="127.50">typeck</text></g><g><title>item_types_checking (931,540 samples, 0.21%)</title><rect x="31.7806%" y="149" width="0.2146%" height="15" fill="rgb(231,138,38)"/><text x="32.0306%" y="159.50"></text></g><g><title>check_mod_item_types (928,020 samples, 0.21%)</title><rect x="31.7814%" y="133" width="0.2137%" height="15" fill="rgb(231,145,46)"/><text x="32.0314%" y="143.50"></text></g><g><title>fn_sig (616,647 samples, 0.14%)</title><rect x="32.0851%" y="117" width="0.1420%" height="15" fill="rgb(251,118,11)"/><text x="32.3351%" y="127.50"></text></g><g><title>named_region_map (648,147 samples, 0.15%)</title><rect x="32.2805%" y="101" width="0.1493%" height="15" fill="rgb(217,147,25)"/><text x="32.5305%" y="111.50"></text></g><g><title>resolve_lifetimes (614,947 samples, 0.14%)</title><rect x="32.2881%" y="85" width="0.1416%" height="15" fill="rgb(247,81,37)"/><text x="32.5381%" y="95.50"></text></g><g><title>generics_of (902,571 samples, 0.21%)</title><rect x="32.2271%" y="117" width="0.2079%" height="15" fill="rgb(209,12,38)"/><text x="32.4771%" y="127.50"></text></g><g><title>predicates_of (676,073 samples, 0.16%)</title><rect x="32.4577%" y="117" width="0.1557%" height="15" fill="rgb(227,1,9)"/><text x="32.7077%" y="127.50"></text></g><g><title>predicates_defined_on (603,943 samples, 0.14%)</title><rect x="32.4743%" y="101" width="0.1391%" height="15" fill="rgb(248,47,43)"/><text x="32.7243%" y="111.50"></text></g><g><title>type_collecting (2,889,200 samples, 0.67%)</title><rect x="31.9954%" y="149" width="0.6654%" height="15" fill="rgb(221,10,30)"/><text x="32.2454%" y="159.50"></text></g><g><title>collect_mod_item_types (2,874,080 samples, 0.66%)</title><rect x="31.9989%" y="133" width="0.6620%" height="15" fill="rgb(210,229,1)"/><text x="32.2489%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,391,605 samples, 0.32%)</title><rect x="32.6857%" y="133" width="0.3205%" height="15" fill="rgb(222,148,37)"/><text x="32.9357%" y="143.50"></text></g><g><title>analysis (91,099,403 samples, 20.98%)</title><rect x="12.2962%" y="181" width="20.9819%" height="15" fill="rgb(234,67,33)"/><text x="12.5462%" y="191.50">analysis</text></g><g><title>type_check_crate (69,246,439 samples, 15.95%)</title><rect x="17.3293%" y="165" width="15.9488%" height="15" fill="rgb(247,98,35)"/><text x="17.5793%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,676,138 samples, 0.62%)</title><rect x="32.6617%" y="149" width="0.6164%" height="15" fill="rgb(247,138,52)"/><text x="32.9117%" y="159.50"></text></g><g><title>check_item_well_formed (1,180,369 samples, 0.27%)</title><rect x="33.0062%" y="133" width="0.2719%" height="15" fill="rgb(213,79,30)"/><text x="33.2562%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (675,406 samples, 0.16%)</title><rect x="43.2994%" y="149" width="0.1556%" height="15" fill="rgb(246,177,23)"/><text x="43.5494%" y="159.50"></text></g><g><title>const_caller_location (931,878 samples, 0.21%)</title><rect x="43.4550%" y="149" width="0.2146%" height="15" fill="rgb(230,62,27)"/><text x="43.7050%" y="159.50"></text></g><g><title>codegen_fn_attrs (517,093 samples, 0.12%)</title><rect x="44.1396%" y="133" width="0.1191%" height="15" fill="rgb(216,154,8)"/><text x="44.3896%" y="143.50"></text></g><g><title>layout_of (1,293,572 samples, 0.30%)</title><rect x="44.2724%" y="133" width="0.2979%" height="15" fill="rgb(244,35,45)"/><text x="44.5224%" y="143.50"></text></g><g><title>predicates_of (1,085,669 samples, 0.25%)</title><rect x="44.9898%" y="117" width="0.2501%" height="15" fill="rgb(251,115,12)"/><text x="45.2398%" y="127.50"></text></g><g><title>predicates_defined_on (813,487 samples, 0.19%)</title><rect x="45.0525%" y="101" width="0.1874%" height="15" fill="rgb(240,54,50)"/><text x="45.3025%" y="111.50"></text></g><g><title>param_env (2,914,183 samples, 0.67%)</title><rect x="44.5703%" y="133" width="0.6712%" height="15" fill="rgb(233,84,52)"/><text x="44.8203%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (951,058 samples, 0.22%)</title><rect x="45.2415%" y="133" width="0.2190%" height="15" fill="rgb(207,117,47)"/><text x="45.4915%" y="143.50"></text></g><g><title>normalize_projection_ty (772,596 samples, 0.18%)</title><rect x="45.2826%" y="117" width="0.1779%" height="15" fill="rgb(249,43,39)"/><text x="45.5326%" y="127.50"></text></g><g><title>fn_abi_of_instance (7,769,881 samples, 1.79%)</title><rect x="43.6758%" y="149" width="1.7896%" height="15" fill="rgb(209,38,44)"/><text x="43.9258%" y="159.50">f..</text></g><g><title>layout_of (993,220 samples, 0.23%)</title><rect x="45.5792%" y="149" width="0.2288%" height="15" fill="rgb(236,212,23)"/><text x="45.8292%" y="159.50"></text></g><g><title>codegen_module (51,913,615 samples, 11.96%)</title><rect x="33.9242%" y="165" width="11.9567%" height="15" fill="rgb(242,79,21)"/><text x="34.1742%" y="175.50">codegen_module</text></g><g><title>codegen_crate (54,786,396 samples, 12.62%)</title><rect x="33.2810%" y="181" width="12.6184%" height="15" fill="rgb(211,96,35)"/><text x="33.5310%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (160,011,198 samples, 36.85%)</title><rect x="45.9414%" y="165" width="36.8536%" height="15" fill="rgb(253,215,40)"/><text x="46.1914%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (150,414,387 samples, 34.64%)</title><rect x="48.1517%" y="149" width="34.6433%" height="15" fill="rgb(211,81,21)"/><text x="48.4017%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (170,752,246 samples, 39.33%)</title><rect x="45.8994%" y="181" width="39.3275%" height="15" fill="rgb(208,190,38)"/><text x="46.1494%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,558,515 samples, 2.43%)</title><rect x="82.7950%" y="165" width="2.4318%" height="15" fill="rgb(235,213,38)"/><text x="83.0450%" y="175.50">LL..</text></g><g><title>metadata_load_macro (513,449 samples, 0.12%)</title><rect x="88.9625%" y="133" width="0.1183%" height="15" fill="rgb(237,122,38)"/><text x="89.2125%" y="143.50"></text></g><g><title>metadata_register_crate (2,659,269 samples, 0.61%)</title><rect x="89.0807%" y="133" width="0.6125%" height="15" fill="rgb(244,218,35)"/><text x="89.3307%" y="143.50"></text></g><g><title>metadata_register_crate (985,960 samples, 0.23%)</title><rect x="89.4661%" y="117" width="0.2271%" height="15" fill="rgb(240,68,47)"/><text x="89.7161%" y="127.50"></text></g><g><title>macro_expand_crate (18,831,541 samples, 4.34%)</title><rect x="85.3664%" y="165" width="4.3373%" height="15" fill="rgb(210,16,53)"/><text x="85.6164%" y="175.50">macro..</text></g><g><title>expand_crate (18,803,651 samples, 4.33%)</title><rect x="85.3728%" y="149" width="4.3308%" height="15" fill="rgb(235,124,12)"/><text x="85.6228%" y="159.50">expan..</text></g><g><title>late_resolve_crate (3,672,259 samples, 0.85%)</title><rect x="89.8649%" y="149" width="0.8458%" height="15" fill="rgb(224,169,11)"/><text x="90.1149%" y="159.50"></text></g><g><title>configure_and_expand (23,977,326 samples, 5.52%)</title><rect x="85.2269%" y="181" width="5.5224%" height="15" fill="rgb(250,166,2)"/><text x="85.4769%" y="191.50">configu..</text></g><g><title>resolve_crate (4,236,285 samples, 0.98%)</title><rect x="89.7736%" y="165" width="0.9757%" height="15" fill="rgb(242,216,29)"/><text x="90.0236%" y="175.50"></text></g><g><title>early_lint_checks (700,587 samples, 0.16%)</title><rect x="90.8180%" y="181" width="0.1614%" height="15" fill="rgb(230,116,27)"/><text x="91.0680%" y="191.50"></text></g><g><title>free_global_ctxt (4,675,639 samples, 1.08%)</title><rect x="90.9794%" y="181" width="1.0769%" height="15" fill="rgb(228,99,48)"/><text x="91.2294%" y="191.50"></text></g><g><title>item_attrs (1,189,833 samples, 0.27%)</title><rect x="92.6579%" y="85" width="0.2740%" height="15" fill="rgb(253,11,6)"/><text x="92.9079%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,157,063 samples, 0.27%)</title><rect x="92.6654%" y="69" width="0.2665%" height="15" fill="rgb(247,143,39)"/><text x="92.9154%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,752,511 samples, 0.40%)</title><rect x="92.6040%" y="101" width="0.4036%" height="15" fill="rgb(236,97,10)"/><text x="92.8540%" y="111.50"></text></g><g><title>layout_of (448,644 samples, 0.10%)</title><rect x="93.5414%" y="85" width="0.1033%" height="15" fill="rgb(233,208,19)"/><text x="93.7914%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,383,077 samples, 0.32%)</title><rect x="93.6447%" y="85" width="0.3185%" height="15" fill="rgb(216,164,2)"/><text x="93.8947%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,659,867 samples, 0.38%)</title><rect x="93.9632%" y="85" width="0.3823%" height="15" fill="rgb(220,129,5)"/><text x="94.2132%" y="95.50"></text></g><g><title>specialization_graph_of (691,957 samples, 0.16%)</title><rect x="94.3815%" y="69" width="0.1594%" height="15" fill="rgb(242,17,10)"/><text x="94.6315%" y="79.50"></text></g><g><title>resolve_instance (855,368 samples, 0.20%)</title><rect x="94.3455%" y="85" width="0.1970%" height="15" fill="rgb(242,107,0)"/><text x="94.5955%" y="95.50"></text></g><g><title>optimized_mir (6,551,932 samples, 1.51%)</title><rect x="93.1377%" y="101" width="1.5090%" height="15" fill="rgb(251,28,31)"/><text x="93.3877%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (446,964 samples, 0.10%)</title><rect x="94.5438%" y="85" width="0.1029%" height="15" fill="rgb(233,223,10)"/><text x="94.7938%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,067,388 samples, 0.48%)</title><rect x="94.7928%" y="85" width="0.4762%" height="15" fill="rgb(215,21,27)"/><text x="95.0428%" y="95.50"></text></g><g><title>impl_parent (511,335 samples, 0.12%)</title><rect x="95.6329%" y="69" width="0.1178%" height="15" fill="rgb(232,23,21)"/><text x="95.8829%" y="79.50"></text></g><g><title>specialization_graph_of (2,411,974 samples, 0.56%)</title><rect x="95.3884%" y="85" width="0.5555%" height="15" fill="rgb(244,5,23)"/><text x="95.6384%" y="95.50"></text></g><g><title>impl_trait_ref (839,018 samples, 0.19%)</title><rect x="95.7507%" y="69" width="0.1932%" height="15" fill="rgb(226,81,46)"/><text x="96.0007%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (633,656 samples, 0.15%)</title><rect x="95.7980%" y="53" width="0.1459%" height="15" fill="rgb(247,70,30)"/><text x="96.0480%" y="63.50"></text></g><g><title>resolve_instance (5,890,080 samples, 1.36%)</title><rect x="94.6467%" y="101" width="1.3566%" height="15" fill="rgb(212,68,19)"/><text x="94.8967%" y="111.50"></text></g><g><title>eval_to_const_value_raw (598,489 samples, 0.14%)</title><rect x="96.0311%" y="85" width="0.1378%" height="15" fill="rgb(240,187,13)"/><text x="96.2811%" y="95.50"></text></g><g><title>eval_to_const_value_raw (591,549 samples, 0.14%)</title><rect x="96.0327%" y="69" width="0.1362%" height="15" fill="rgb(223,113,26)"/><text x="96.2827%" y="79.50"></text></g><g><title>eval_to_allocation_raw (577,669 samples, 0.13%)</title><rect x="96.0359%" y="53" width="0.1330%" height="15" fill="rgb(206,192,2)"/><text x="96.2859%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (664,519 samples, 0.15%)</title><rect x="96.0231%" y="101" width="0.1531%" height="15" fill="rgb(241,108,4)"/><text x="96.2731%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (17,311,755 samples, 3.99%)</title><rect x="92.2729%" y="117" width="3.9872%" height="15" fill="rgb(247,173,49)"/><text x="92.5229%" y="127.50">mono..</text></g><g><title>monomorphization_collector (17,353,075 samples, 4.00%)</title><rect x="92.2722%" y="133" width="3.9967%" height="15" fill="rgb(224,114,35)"/><text x="92.5222%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,241,404 samples, 0.29%)</title><rect x="96.2715%" y="117" width="0.2859%" height="15" fill="rgb(245,159,27)"/><text x="96.5215%" y="127.50"></text></g><g><title>symbol_name (1,128,513 samples, 0.26%)</title><rect x="96.2975%" y="101" width="0.2599%" height="15" fill="rgb(245,172,44)"/><text x="96.5475%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (19,298,526 samples, 4.44%)</title><rect x="92.2628%" y="149" width="4.4448%" height="15" fill="rgb(236,23,11)"/><text x="92.5128%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,904,551 samples, 0.44%)</title><rect x="96.2689%" y="133" width="0.4387%" height="15" fill="rgb(205,117,38)"/><text x="96.5189%" y="143.50"></text></g><g><title>cgu_partitioning (651,997 samples, 0.15%)</title><rect x="96.5574%" y="117" width="0.1502%" height="15" fill="rgb(237,72,25)"/><text x="96.8074%" y="127.50"></text></g><g><title>exported_symbols (19,430,007 samples, 4.48%)</title><rect x="92.2480%" y="165" width="4.4751%" height="15" fill="rgb(244,70,9)"/><text x="92.4980%" y="175.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (556,666 samples, 0.13%)</title><rect x="96.9068%" y="149" width="0.1282%" height="15" fill="rgb(217,125,39)"/><text x="97.1568%" y="159.50"></text></g><g><title>optimized_mir (1,335,375 samples, 0.31%)</title><rect x="96.7359%" y="165" width="0.3076%" height="15" fill="rgb(235,36,10)"/><text x="96.9859%" y="175.50"></text></g><g><title>generate_crate_metadata (21,684,762 samples, 4.99%)</title><rect x="92.0563%" y="181" width="4.9944%" height="15" fill="rgb(251,123,47)"/><text x="92.3063%" y="191.50">genera..</text></g><g><title>hir_lowering (4,031,133 samples, 0.93%)</title><rect x="97.0507%" y="181" width="0.9284%" height="15" fill="rgb(221,13,13)"/><text x="97.3007%" y="191.50"></text></g><g><title>finish_ongoing_codegen (677,117 samples, 0.16%)</title><rect x="97.9824%" y="165" width="0.1560%" height="15" fill="rgb(238,131,9)"/><text x="98.2324%" y="175.50"></text></g><g><title>link_crate (1,750,239 samples, 0.40%)</title><rect x="98.1384%" y="165" width="0.4031%" height="15" fill="rgb(211,50,8)"/><text x="98.3884%" y="175.50"></text></g><g><title>link_binary (1,728,849 samples, 0.40%)</title><rect x="98.1433%" y="149" width="0.3982%" height="15" fill="rgb(245,182,24)"/><text x="98.3933%" y="159.50"></text></g><g><title>link_rlib (1,185,153 samples, 0.27%)</title><rect x="98.2685%" y="133" width="0.2730%" height="15" fill="rgb(242,14,37)"/><text x="98.5185%" y="143.50"></text></g><g><title>link (2,450,366 samples, 0.56%)</title><rect x="97.9791%" y="181" width="0.5644%" height="15" fill="rgb(246,228,12)"/><text x="98.2291%" y="191.50"></text></g><g><title>parse_crate (4,186,494 samples, 0.96%)</title><rect x="98.5435%" y="181" width="0.9642%" height="15" fill="rgb(213,55,15)"/><text x="98.7935%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,322,575 samples, 0.30%)</title><rect x="99.5941%" y="181" width="0.3046%" height="15" fill="rgb(209,9,3)"/><text x="99.8441%" y="191.50"></text></g><g><title>all (434,180,319 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (434,180,319 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>