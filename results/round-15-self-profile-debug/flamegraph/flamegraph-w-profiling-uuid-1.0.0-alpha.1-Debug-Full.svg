<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (69,348,830 samples, 9.88%)</title><rect x="0.1228%" y="165" width="9.8803%" height="15" fill="rgb(227,0,7)"/><text x="0.3728%" y="175.50">LLVM_passes</text></g><g><title>specialization_graph_of (1,179,784 samples, 0.17%)</title><rect x="15.6515%" y="37" width="0.1681%" height="15" fill="rgb(217,0,24)"/><text x="15.9015%" y="47.50"></text></g><g><title>resolve_instance (2,077,863 samples, 0.30%)</title><rect x="15.5370%" y="53" width="0.2960%" height="15" fill="rgb(221,193,54)"/><text x="15.7870%" y="63.50"></text></g><g><title>thir_body (1,807,108 samples, 0.26%)</title><rect x="15.8397%" y="53" width="0.2575%" height="15" fill="rgb(248,212,6)"/><text x="16.0897%" y="63.50"></text></g><g><title>mir_const (12,180,309 samples, 1.74%)</title><rect x="14.3659%" y="101" width="1.7354%" height="15" fill="rgb(208,68,35)"/><text x="14.6159%" y="111.50"></text></g><g><title>unsafety_check_result (10,713,718 samples, 1.53%)</title><rect x="14.5749%" y="85" width="1.5264%" height="15" fill="rgb(232,128,0)"/><text x="14.8249%" y="95.50"></text></g><g><title>mir_built (9,650,525 samples, 1.37%)</title><rect x="14.7264%" y="69" width="1.3749%" height="15" fill="rgb(207,160,47)"/><text x="14.9764%" y="79.50"></text></g><g><title>thir_body (1,152,624 samples, 0.16%)</title><rect x="16.8433%" y="37" width="0.1642%" height="15" fill="rgb(228,23,34)"/><text x="17.0933%" y="47.50"></text></g><g><title>mir_const (5,166,599 samples, 0.74%)</title><rect x="16.2744%" y="85" width="0.7361%" height="15" fill="rgb(218,30,26)"/><text x="16.5244%" y="95.50"></text></g><g><title>unsafety_check_result (4,332,338 samples, 0.62%)</title><rect x="16.3933%" y="69" width="0.6172%" height="15" fill="rgb(220,122,19)"/><text x="16.6433%" y="79.50"></text></g><g><title>mir_built (3,941,075 samples, 0.56%)</title><rect x="16.4490%" y="53" width="0.5615%" height="15" fill="rgb(250,228,42)"/><text x="16.6990%" y="63.50"></text></g><g><title>mir_const_qualif (6,441,102 samples, 0.92%)</title><rect x="16.1013%" y="101" width="0.9177%" height="15" fill="rgb(240,193,28)"/><text x="16.3513%" y="111.50"></text></g><g><title>mir_promoted (20,648,723 samples, 2.94%)</title><rect x="14.0772%" y="117" width="2.9419%" height="15" fill="rgb(216,20,37)"/><text x="14.3272%" y="127.50">mi..</text></g><g><title>type_op_prove_predicate (1,855,348 samples, 0.26%)</title><rect x="17.1309%" y="117" width="0.2643%" height="15" fill="rgb(206,188,39)"/><text x="17.3809%" y="127.50"></text></g><g><title>MIR_borrow_checking (51,280,759 samples, 7.31%)</title><rect x="10.0915%" y="149" width="7.3061%" height="15" fill="rgb(217,207,13)"/><text x="10.3415%" y="159.50">MIR_borrow..</text></g><g><title>mir_borrowck (50,879,904 samples, 7.25%)</title><rect x="10.1486%" y="133" width="7.2490%" height="15" fill="rgb(231,73,38)"/><text x="10.3986%" y="143.50">mir_borrow..</text></g><g><title>MIR_effect_checking (2,962,771 samples, 0.42%)</title><rect x="17.3977%" y="149" width="0.4221%" height="15" fill="rgb(225,20,46)"/><text x="17.6477%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,766,881 samples, 0.39%)</title><rect x="17.4256%" y="133" width="0.3942%" height="15" fill="rgb(210,31,41)"/><text x="17.6756%" y="143.50"></text></g><g><title>check_mod_attrs (1,284,414 samples, 0.18%)</title><rect x="17.8818%" y="133" width="0.1830%" height="15" fill="rgb(221,200,47)"/><text x="18.1318%" y="143.50"></text></g><g><title>misc_checking_1 (2,463,476 samples, 0.35%)</title><rect x="17.8780%" y="149" width="0.3510%" height="15" fill="rgb(226,26,5)"/><text x="18.1280%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (814,458 samples, 0.12%)</title><rect x="18.2292%" y="133" width="0.1160%" height="15" fill="rgb(249,33,26)"/><text x="18.4792%" y="143.50"></text></g><g><title>misc_checking_2 (2,245,593 samples, 0.32%)</title><rect x="18.2290%" y="149" width="0.3199%" height="15" fill="rgb(235,183,28)"/><text x="18.4790%" y="159.50"></text></g><g><title>match_checking (1,429,475 samples, 0.20%)</title><rect x="18.3453%" y="133" width="0.2037%" height="15" fill="rgb(221,5,38)"/><text x="18.5953%" y="143.50"></text></g><g><title>check_match (1,330,184 samples, 0.19%)</title><rect x="18.3594%" y="117" width="0.1895%" height="15" fill="rgb(247,18,42)"/><text x="18.6094%" y="127.50"></text></g><g><title>death_checking (996,150 samples, 0.14%)</title><rect x="18.6161%" y="133" width="0.1419%" height="15" fill="rgb(241,131,45)"/><text x="18.8661%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,606,759 samples, 0.51%)</title><rect x="19.0060%" y="101" width="0.5139%" height="15" fill="rgb(249,31,29)"/><text x="19.2560%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,601,809 samples, 0.51%)</title><rect x="19.0067%" y="85" width="0.5132%" height="15" fill="rgb(225,111,53)"/><text x="19.2567%" y="95.50"></text></g><g><title>eval_to_allocation_raw (3,591,249 samples, 0.51%)</title><rect x="19.0082%" y="69" width="0.5117%" height="15" fill="rgb(238,160,17)"/><text x="19.2582%" y="79.50"></text></g><g><title>crate_lints (6,957,684 samples, 0.99%)</title><rect x="18.7584%" y="117" width="0.9913%" height="15" fill="rgb(214,148,48)"/><text x="19.0084%" y="127.50"></text></g><g><title>type_of (1,339,316 samples, 0.19%)</title><rect x="19.5589%" y="101" width="0.1908%" height="15" fill="rgb(232,36,49)"/><text x="19.8089%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (896,560 samples, 0.13%)</title><rect x="19.6220%" y="85" width="0.1277%" height="15" fill="rgb(209,103,24)"/><text x="19.8720%" y="95.50"></text></g><g><title>lint_checking (7,997,805 samples, 1.14%)</title><rect x="18.7580%" y="133" width="1.1395%" height="15" fill="rgb(229,88,8)"/><text x="19.0080%" y="143.50"></text></g><g><title>module_lints (1,037,281 samples, 0.15%)</title><rect x="19.7497%" y="117" width="0.1478%" height="15" fill="rgb(213,181,19)"/><text x="19.9997%" y="127.50"></text></g><g><title>lint_mod (1,028,881 samples, 0.15%)</title><rect x="19.7509%" y="101" width="0.1466%" height="15" fill="rgb(254,191,54)"/><text x="20.0009%" y="111.50"></text></g><g><title>privacy_checking_modules (1,645,417 samples, 0.23%)</title><rect x="19.9944%" y="133" width="0.2344%" height="15" fill="rgb(241,83,37)"/><text x="20.2444%" y="143.50"></text></g><g><title>check_mod_privacy (1,639,467 samples, 0.23%)</title><rect x="19.9952%" y="117" width="0.2336%" height="15" fill="rgb(233,36,39)"/><text x="20.2452%" y="127.50"></text></g><g><title>misc_checking_3 (11,826,466 samples, 1.68%)</title><rect x="18.5489%" y="149" width="1.6850%" height="15" fill="rgb(226,3,54)"/><text x="18.7989%" y="159.50"></text></g><g><title>impl_parent (3,147,397 samples, 0.45%)</title><rect x="21.0513%" y="85" width="0.4484%" height="15" fill="rgb(245,192,40)"/><text x="21.3013%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,709,851 samples, 0.24%)</title><rect x="21.2561%" y="69" width="0.2436%" height="15" fill="rgb(238,167,29)"/><text x="21.5061%" y="79.50"></text></g><g><title>impl_trait_ref (5,902,720 samples, 0.84%)</title><rect x="21.4999%" y="85" width="0.8410%" height="15" fill="rgb(232,182,51)"/><text x="21.7499%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,643,376 samples, 0.66%)</title><rect x="21.6793%" y="69" width="0.6616%" height="15" fill="rgb(231,60,39)"/><text x="21.9293%" y="79.50"></text></g><g><title>trait_impls_of (1,072,333 samples, 0.15%)</title><rect x="22.3554%" y="85" width="0.1528%" height="15" fill="rgb(208,69,12)"/><text x="22.6054%" y="95.50"></text></g><g><title>coherent_trait (15,760,278 samples, 2.25%)</title><rect x="20.2630%" y="117" width="2.2454%" height="15" fill="rgb(235,93,37)"/><text x="20.5130%" y="127.50">c..</text></g><g><title>specialization_graph_of (15,292,752 samples, 2.18%)</title><rect x="20.3296%" y="101" width="2.1788%" height="15" fill="rgb(213,116,39)"/><text x="20.5796%" y="111.50">s..</text></g><g><title>coherence_checking (15,908,520 samples, 2.27%)</title><rect x="20.2591%" y="133" width="2.2665%" height="15" fill="rgb(222,207,29)"/><text x="20.5091%" y="143.50">c..</text></g><g><title>mir_for_ctfe (743,569 samples, 0.11%)</title><rect x="31.3870%" y="53" width="0.1059%" height="15" fill="rgb(206,96,30)"/><text x="31.6370%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,506,895 samples, 0.21%)</title><rect x="31.3388%" y="69" width="0.2147%" height="15" fill="rgb(218,138,4)"/><text x="31.5888%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,866,448 samples, 0.27%)</title><rect x="31.3355%" y="85" width="0.2659%" height="15" fill="rgb(250,191,14)"/><text x="31.5855%" y="95.50"></text></g><g><title>generics_of (1,111,530 samples, 0.16%)</title><rect x="32.2985%" y="69" width="0.1584%" height="15" fill="rgb(239,60,40)"/><text x="32.5485%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (715,116 samples, 0.10%)</title><rect x="32.3550%" y="53" width="0.1019%" height="15" fill="rgb(206,27,48)"/><text x="32.6050%" y="63.50"></text></g><g><title>predicates_of (980,477 samples, 0.14%)</title><rect x="32.5839%" y="69" width="0.1397%" height="15" fill="rgb(225,35,8)"/><text x="32.8339%" y="79.50"></text></g><g><title>specializes (2,058,573 samples, 0.29%)</title><rect x="32.7236%" y="69" width="0.2933%" height="15" fill="rgb(250,213,24)"/><text x="32.9736%" y="79.50"></text></g><g><title>param_env (1,212,375 samples, 0.17%)</title><rect x="32.8441%" y="53" width="0.1727%" height="15" fill="rgb(247,123,22)"/><text x="33.0941%" y="63.50"></text></g><g><title>evaluate_obligation (10,352,143 samples, 1.47%)</title><rect x="31.6014%" y="85" width="1.4749%" height="15" fill="rgb(231,138,38)"/><text x="31.8514%" y="95.50"></text></g><g><title>generics_of (904,120 samples, 0.13%)</title><rect x="33.1009%" y="85" width="0.1288%" height="15" fill="rgb(231,145,46)"/><text x="33.3509%" y="95.50"></text></g><g><title>item_bodies_checking (77,630,220 samples, 11.06%)</title><rect x="22.5368%" y="133" width="11.0602%" height="15" fill="rgb(251,118,11)"/><text x="22.7868%" y="143.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (77,625,860 samples, 11.06%)</title><rect x="22.5374%" y="117" width="11.0596%" height="15" fill="rgb(217,147,25)"/><text x="22.7874%" y="127.50">typeck_item_bodi..</text></g><g><title>typeck (77,340,099 samples, 11.02%)</title><rect x="22.5781%" y="101" width="11.0189%" height="15" fill="rgb(247,81,37)"/><text x="22.8281%" y="111.50">typeck</text></g><g><title>item_types_checking (4,826,311 samples, 0.69%)</title><rect x="33.5970%" y="133" width="0.6876%" height="15" fill="rgb(209,12,38)"/><text x="33.8470%" y="143.50"></text></g><g><title>check_mod_item_types (4,818,521 samples, 0.69%)</title><rect x="33.5981%" y="117" width="0.6865%" height="15" fill="rgb(227,1,9)"/><text x="33.8481%" y="127.50"></text></g><g><title>typeck (2,237,445 samples, 0.32%)</title><rect x="33.9659%" y="101" width="0.3188%" height="15" fill="rgb(248,47,43)"/><text x="34.2159%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,302,104 samples, 0.19%)</title><rect x="34.3813%" y="101" width="0.1855%" height="15" fill="rgb(221,10,30)"/><text x="34.6313%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,287,044 samples, 0.18%)</title><rect x="34.3834%" y="85" width="0.1834%" height="15" fill="rgb(210,229,1)"/><text x="34.6334%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,280,374 samples, 0.18%)</title><rect x="34.3844%" y="69" width="0.1824%" height="15" fill="rgb(222,148,37)"/><text x="34.6344%" y="79.50"></text></g><g><title>fn_sig (845,657 samples, 0.12%)</title><rect x="34.5668%" y="101" width="0.1205%" height="15" fill="rgb(234,67,33)"/><text x="34.8168%" y="111.50"></text></g><g><title>named_region_map (1,022,509 samples, 0.15%)</title><rect x="34.7467%" y="85" width="0.1457%" height="15" fill="rgb(247,98,35)"/><text x="34.9967%" y="95.50"></text></g><g><title>resolve_lifetimes (959,989 samples, 0.14%)</title><rect x="34.7556%" y="69" width="0.1368%" height="15" fill="rgb(247,138,52)"/><text x="35.0056%" y="79.50"></text></g><g><title>generics_of (1,477,603 samples, 0.21%)</title><rect x="34.6873%" y="101" width="0.2105%" height="15" fill="rgb(213,79,30)"/><text x="34.9373%" y="111.50"></text></g><g><title>predicates_of (740,822 samples, 0.11%)</title><rect x="34.9382%" y="101" width="0.1055%" height="15" fill="rgb(246,177,23)"/><text x="35.1882%" y="111.50"></text></g><g><title>type_collecting (5,590,390 samples, 0.80%)</title><rect x="34.2850%" y="133" width="0.7965%" height="15" fill="rgb(230,62,27)"/><text x="34.5350%" y="143.50"></text></g><g><title>collect_mod_item_types (5,578,570 samples, 0.79%)</title><rect x="34.2866%" y="117" width="0.7948%" height="15" fill="rgb(216,154,8)"/><text x="34.5366%" y="127.50"></text></g><g><title>eval_to_const_value_raw (722,758 samples, 0.10%)</title><rect x="35.7328%" y="101" width="0.1030%" height="15" fill="rgb(244,35,45)"/><text x="35.9828%" y="111.50"></text></g><g><title>eval_to_const_value_raw (721,218 samples, 0.10%)</title><rect x="35.7330%" y="85" width="0.1028%" height="15" fill="rgb(251,115,12)"/><text x="35.9830%" y="95.50"></text></g><g><title>eval_to_allocation_raw (717,918 samples, 0.10%)</title><rect x="35.7335%" y="69" width="0.1023%" height="15" fill="rgb(240,54,50)"/><text x="35.9835%" y="79.50"></text></g><g><title>region_scope_tree (947,792 samples, 0.14%)</title><rect x="36.0444%" y="101" width="0.1350%" height="15" fill="rgb(233,84,52)"/><text x="36.2944%" y="111.50"></text></g><g><title>check_impl_item_well_formed (7,246,269 samples, 1.03%)</title><rect x="35.1499%" y="117" width="1.0324%" height="15" fill="rgb(207,117,47)"/><text x="35.3999%" y="127.50"></text></g><g><title>evaluate_obligation (926,662 samples, 0.13%)</title><rect x="36.5286%" y="101" width="0.1320%" height="15" fill="rgb(249,43,39)"/><text x="36.7786%" y="111.50"></text></g><g><title>analysis (188,178,490 samples, 26.81%)</title><rect x="10.0032%" y="165" width="26.8103%" height="15" fill="rgb(209,38,44)"/><text x="10.2532%" y="175.50">analysis</text></g><g><title>type_check_crate (116,370,374 samples, 16.58%)</title><rect x="20.2339%" y="149" width="16.5796%" height="15" fill="rgb(236,212,23)"/><text x="20.4839%" y="159.50">type_check_crate</text></g><g><title>wf_checking (12,138,490 samples, 1.73%)</title><rect x="35.0841%" y="133" width="1.7294%" height="15" fill="rgb(242,79,21)"/><text x="35.3341%" y="143.50"></text></g><g><title>check_item_well_formed (4,430,572 samples, 0.63%)</title><rect x="36.1823%" y="117" width="0.6312%" height="15" fill="rgb(211,96,35)"/><text x="36.4323%" y="127.50"></text></g><g><title>const_caller_location (1,149,338 samples, 0.16%)</title><rect x="42.6415%" y="133" width="0.1637%" height="15" fill="rgb(253,215,40)"/><text x="42.8915%" y="143.50"></text></g><g><title>layout_of (1,035,890 samples, 0.15%)</title><rect x="43.1463%" y="117" width="0.1476%" height="15" fill="rgb(211,81,21)"/><text x="43.3963%" y="127.50"></text></g><g><title>predicates_of (1,037,655 samples, 0.15%)</title><rect x="43.5009%" y="101" width="0.1478%" height="15" fill="rgb(208,190,38)"/><text x="43.7509%" y="111.50"></text></g><g><title>predicates_defined_on (857,282 samples, 0.12%)</title><rect x="43.5266%" y="85" width="0.1221%" height="15" fill="rgb(235,213,38)"/><text x="43.7766%" y="95.50"></text></g><g><title>param_env (2,496,773 samples, 0.36%)</title><rect x="43.2939%" y="117" width="0.3557%" height="15" fill="rgb(237,122,38)"/><text x="43.5439%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (850,820 samples, 0.12%)</title><rect x="43.6496%" y="117" width="0.1212%" height="15" fill="rgb(244,218,35)"/><text x="43.8996%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,778,716 samples, 0.97%)</title><rect x="42.8079%" y="133" width="0.9658%" height="15" fill="rgb(240,68,47)"/><text x="43.0579%" y="143.50"></text></g><g><title>codegen_module (48,107,375 samples, 6.85%)</title><rect x="37.0913%" y="149" width="6.8540%" height="15" fill="rgb(210,16,53)"/><text x="37.3413%" y="159.50">codegen_m..</text></g><g><title>codegen_crate (50,129,735 samples, 7.14%)</title><rect x="36.8151%" y="165" width="7.1421%" height="15" fill="rgb(235,124,12)"/><text x="37.0651%" y="175.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (264,561,804 samples, 37.69%)</title><rect x="44.0131%" y="149" width="37.6929%" height="15" fill="rgb(224,169,11)"/><text x="44.2631%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (252,633,408 samples, 35.99%)</title><rect x="45.7126%" y="133" width="35.9934%" height="15" fill="rgb(250,166,2)"/><text x="45.9626%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (276,832,157 samples, 39.44%)</title><rect x="43.9572%" y="165" width="39.4411%" height="15" fill="rgb(242,216,29)"/><text x="44.2072%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,877,766 samples, 1.69%)</title><rect x="81.7060%" y="149" width="1.6923%" height="15" fill="rgb(230,116,27)"/><text x="81.9560%" y="159.50"></text></g><g><title>metadata_register_crate (1,866,749 samples, 0.27%)</title><rect x="88.4828%" y="117" width="0.2660%" height="15" fill="rgb(228,99,48)"/><text x="88.7328%" y="127.50"></text></g><g><title>macro_expand_crate (37,279,378 samples, 5.31%)</title><rect x="83.5301%" y="149" width="5.3113%" height="15" fill="rgb(253,11,6)"/><text x="83.7801%" y="159.50">macro_e..</text></g><g><title>expand_crate (37,264,018 samples, 5.31%)</title><rect x="83.5322%" y="133" width="5.3091%" height="15" fill="rgb(247,143,39)"/><text x="83.7822%" y="143.50">expand..</text></g><g><title>late_resolve_crate (4,140,745 samples, 0.59%)</title><rect x="89.0004%" y="133" width="0.5899%" height="15" fill="rgb(236,97,10)"/><text x="89.2504%" y="143.50"></text></g><g><title>configure_and_expand (43,718,967 samples, 6.23%)</title><rect x="83.3983%" y="165" width="6.2288%" height="15" fill="rgb(233,208,19)"/><text x="83.6483%" y="175.50">configur..</text></g><g><title>resolve_crate (5,066,224 samples, 0.72%)</title><rect x="88.9052%" y="149" width="0.7218%" height="15" fill="rgb(216,164,2)"/><text x="89.1552%" y="159.50"></text></g><g><title>early_lint_checks (949,700 samples, 0.14%)</title><rect x="89.7027%" y="165" width="0.1353%" height="15" fill="rgb(220,129,5)"/><text x="89.9527%" y="175.50"></text></g><g><title>free_global_ctxt (5,946,113 samples, 0.85%)</title><rect x="89.8380%" y="165" width="0.8472%" height="15" fill="rgb(242,17,10)"/><text x="90.0880%" y="175.50"></text></g><g><title>codegen_fn_attrs (821,538 samples, 0.12%)</title><rect x="91.4468%" y="85" width="0.1170%" height="15" fill="rgb(242,107,0)"/><text x="91.6968%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (787,348 samples, 0.11%)</title><rect x="92.3078%" y="69" width="0.1122%" height="15" fill="rgb(251,28,31)"/><text x="92.5578%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,265,957 samples, 0.32%)</title><rect x="92.4200%" y="69" width="0.3228%" height="15" fill="rgb(233,223,10)"/><text x="92.6700%" y="79.50"></text></g><g><title>optimized_mir (8,458,272 samples, 1.21%)</title><rect x="91.6057%" y="85" width="1.2051%" height="15" fill="rgb(215,21,27)"/><text x="91.8557%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,025,466 samples, 0.15%)</title><rect x="92.8643%" y="69" width="0.1461%" height="15" fill="rgb(232,23,21)"/><text x="93.1143%" y="79.50"></text></g><g><title>resolve_instance (2,184,860 samples, 0.31%)</title><rect x="92.8108%" y="85" width="0.3113%" height="15" fill="rgb(244,5,23)"/><text x="93.0608%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (13,531,034 samples, 1.93%)</title><rect x="91.2700%" y="101" width="1.9278%" height="15" fill="rgb(226,81,46)"/><text x="91.5200%" y="111.50">m..</text></g><g><title>monomorphization_collector (13,694,176 samples, 1.95%)</title><rect x="91.2694%" y="117" width="1.9510%" height="15" fill="rgb(247,70,30)"/><text x="91.5194%" y="127.50">m..</text></g><g><title>assert_symbols_are_distinct (1,067,342 samples, 0.15%)</title><rect x="93.2211%" y="101" width="0.1521%" height="15" fill="rgb(212,68,19)"/><text x="93.4711%" y="111.50"></text></g><g><title>symbol_name (973,751 samples, 0.14%)</title><rect x="93.2344%" y="85" width="0.1387%" height="15" fill="rgb(240,187,13)"/><text x="93.4844%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (15,366,454 samples, 2.19%)</title><rect x="91.2647%" y="133" width="2.1893%" height="15" fill="rgb(223,113,26)"/><text x="91.5147%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,639,028 samples, 0.23%)</title><rect x="93.2205%" y="117" width="0.2335%" height="15" fill="rgb(206,192,2)"/><text x="93.4705%" y="127.50"></text></g><g><title>exported_symbols (15,708,377 samples, 2.24%)</title><rect x="91.2567%" y="149" width="2.2380%" height="15" fill="rgb(241,108,4)"/><text x="91.5067%" y="159.50">e..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,876,539 samples, 0.41%)</title><rect x="94.2116%" y="133" width="0.4098%" height="15" fill="rgb(247,173,49)"/><text x="94.4616%" y="143.50"></text></g><g><title>optimized_mir (7,621,119 samples, 1.09%)</title><rect x="93.5788%" y="149" width="1.0858%" height="15" fill="rgb(224,114,35)"/><text x="93.8288%" y="159.50"></text></g><g><title>generate_crate_metadata (28,075,241 samples, 4.00%)</title><rect x="90.6852%" y="165" width="4.0000%" height="15" fill="rgb(245,159,27)"/><text x="90.9352%" y="175.50">gene..</text></g><g><title>hir_lowering (6,822,372 samples, 0.97%)</title><rect x="94.6851%" y="165" width="0.9720%" height="15" fill="rgb(245,172,44)"/><text x="94.9351%" y="175.50"></text></g><g><title>finish_ongoing_codegen (17,945,202 samples, 2.56%)</title><rect x="95.6595%" y="149" width="2.5567%" height="15" fill="rgb(236,23,11)"/><text x="95.9095%" y="159.50">fi..</text></g><g><title>link_crate (2,676,359 samples, 0.38%)</title><rect x="98.2162%" y="149" width="0.3813%" height="15" fill="rgb(205,117,38)"/><text x="98.4662%" y="159.50"></text></g><g><title>link_binary (2,616,088 samples, 0.37%)</title><rect x="98.2248%" y="133" width="0.3727%" height="15" fill="rgb(237,72,25)"/><text x="98.4748%" y="143.50"></text></g><g><title>link_rlib (1,969,231 samples, 0.28%)</title><rect x="98.3169%" y="117" width="0.2806%" height="15" fill="rgb(244,70,9)"/><text x="98.5669%" y="127.50"></text></g><g><title>link (20,647,611 samples, 2.94%)</title><rect x="95.6571%" y="165" width="2.9417%" height="15" fill="rgb(217,125,39)"/><text x="95.9071%" y="175.50">li..</text></g><g><title>parse_crate (7,061,816 samples, 1.01%)</title><rect x="98.5989%" y="165" width="1.0061%" height="15" fill="rgb(235,36,10)"/><text x="98.8489%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,926,891 samples, 0.27%)</title><rect x="99.6350%" y="165" width="0.2745%" height="15" fill="rgb(251,123,47)"/><text x="99.8850%" y="175.50"></text></g><g><title>all (701,887,917 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (701,887,917 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>