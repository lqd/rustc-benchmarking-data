<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (54,663,574 samples, 11.94%)</title><rect x="0.1538%" y="181" width="11.9439%" height="15" fill="rgb(227,0,7)"/><text x="0.4038%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (772,329 samples, 0.17%)</title><rect x="15.6441%" y="69" width="0.1688%" height="15" fill="rgb(217,0,24)"/><text x="15.8941%" y="79.50"></text></g><g><title>is_copy_raw (565,118 samples, 0.12%)</title><rect x="15.6894%" y="53" width="0.1235%" height="15" fill="rgb(221,193,54)"/><text x="15.9394%" y="63.50"></text></g><g><title>evaluate_obligation (487,945 samples, 0.11%)</title><rect x="15.7063%" y="37" width="0.1066%" height="15" fill="rgb(248,212,6)"/><text x="15.9563%" y="47.50"></text></g><g><title>resolve_instance (688,894 samples, 0.15%)</title><rect x="15.8181%" y="69" width="0.1505%" height="15" fill="rgb(208,68,35)"/><text x="16.0681%" y="79.50"></text></g><g><title>thir_body (855,492 samples, 0.19%)</title><rect x="15.9751%" y="69" width="0.1869%" height="15" fill="rgb(232,128,0)"/><text x="16.2251%" y="79.50"></text></g><g><title>mir_const (6,554,535 samples, 1.43%)</title><rect x="14.7342%" y="117" width="1.4322%" height="15" fill="rgb(207,160,47)"/><text x="14.9842%" y="127.50"></text></g><g><title>unsafety_check_result (5,590,202 samples, 1.22%)</title><rect x="14.9449%" y="101" width="1.2214%" height="15" fill="rgb(228,23,34)"/><text x="15.1949%" y="111.50"></text></g><g><title>mir_built (4,965,588 samples, 1.08%)</title><rect x="15.0814%" y="85" width="1.0850%" height="15" fill="rgb(218,30,26)"/><text x="15.3314%" y="95.50"></text></g><g><title>mir_const (582,096 samples, 0.13%)</title><rect x="16.2264%" y="101" width="0.1272%" height="15" fill="rgb(220,122,19)"/><text x="16.4764%" y="111.50"></text></g><g><title>mir_const_qualif (863,729 samples, 0.19%)</title><rect x="16.1664%" y="117" width="0.1887%" height="15" fill="rgb(250,228,42)"/><text x="16.4164%" y="127.50"></text></g><g><title>mir_promoted (8,235,210 samples, 1.80%)</title><rect x="14.5559%" y="133" width="1.7994%" height="15" fill="rgb(240,193,28)"/><text x="14.8059%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (1,238,113 samples, 0.27%)</title><rect x="16.4525%" y="133" width="0.2705%" height="15" fill="rgb(216,20,37)"/><text x="16.7025%" y="143.50"></text></g><g><title>MIR_borrow_checking (20,887,612 samples, 4.56%)</title><rect x="12.1611%" y="165" width="4.5639%" height="15" fill="rgb(206,188,39)"/><text x="12.4111%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (20,730,541 samples, 4.53%)</title><rect x="12.1955%" y="149" width="4.5296%" height="15" fill="rgb(217,207,13)"/><text x="12.4455%" y="159.50">mir_b..</text></g><g><title>codegen_fn_attrs (464,756 samples, 0.10%)</title><rect x="16.9105%" y="133" width="0.1015%" height="15" fill="rgb(231,73,38)"/><text x="17.1605%" y="143.50"></text></g><g><title>check_mod_attrs (759,599 samples, 0.17%)</title><rect x="16.8461%" y="149" width="0.1660%" height="15" fill="rgb(225,20,46)"/><text x="17.0961%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (460,705 samples, 0.10%)</title><rect x="17.0594%" y="149" width="0.1007%" height="15" fill="rgb(210,31,41)"/><text x="17.3094%" y="159.50"></text></g><g><title>misc_checking_1 (1,550,965 samples, 0.34%)</title><rect x="16.8365%" y="165" width="0.3389%" height="15" fill="rgb(221,200,47)"/><text x="17.0865%" y="175.50"></text></g><g><title>misc_checking_2 (824,719 samples, 0.18%)</title><rect x="17.1754%" y="165" width="0.1802%" height="15" fill="rgb(226,26,5)"/><text x="17.4254%" y="175.50"></text></g><g><title>match_checking (471,105 samples, 0.10%)</title><rect x="17.2527%" y="149" width="0.1029%" height="15" fill="rgb(249,33,26)"/><text x="17.5027%" y="159.50"></text></g><g><title>death_checking (653,027 samples, 0.14%)</title><rect x="17.4129%" y="149" width="0.1427%" height="15" fill="rgb(235,183,28)"/><text x="17.6629%" y="159.50"></text></g><g><title>param_env (507,857 samples, 0.11%)</title><rect x="17.8093%" y="117" width="0.1110%" height="15" fill="rgb(221,5,38)"/><text x="18.0593%" y="127.50"></text></g><g><title>crate_lints (2,977,930 samples, 0.65%)</title><rect x="17.5560%" y="133" width="0.6507%" height="15" fill="rgb(247,18,42)"/><text x="17.8060%" y="143.50"></text></g><g><title>type_of (1,309,953 samples, 0.29%)</title><rect x="17.9204%" y="117" width="0.2862%" height="15" fill="rgb(241,131,45)"/><text x="18.1704%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (855,559 samples, 0.19%)</title><rect x="18.0197%" y="101" width="0.1869%" height="15" fill="rgb(249,31,29)"/><text x="18.2697%" y="111.50"></text></g><g><title>lint_checking (3,410,324 samples, 0.75%)</title><rect x="17.5555%" y="149" width="0.7451%" height="15" fill="rgb(225,111,53)"/><text x="17.8055%" y="159.50"></text></g><g><title>privacy_checking_modules (701,897 samples, 0.15%)</title><rect x="18.3589%" y="149" width="0.1534%" height="15" fill="rgb(238,160,17)"/><text x="18.6089%" y="159.50"></text></g><g><title>check_mod_privacy (693,127 samples, 0.15%)</title><rect x="18.3608%" y="133" width="0.1514%" height="15" fill="rgb(214,148,48)"/><text x="18.6108%" y="143.50"></text></g><g><title>misc_checking_3 (5,321,803 samples, 1.16%)</title><rect x="17.3556%" y="165" width="1.1628%" height="15" fill="rgb(232,36,49)"/><text x="17.6056%" y="175.50"></text></g><g><title>impl_parent (3,060,612 samples, 0.67%)</title><rect x="19.8370%" y="101" width="0.6687%" height="15" fill="rgb(209,103,24)"/><text x="20.0870%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,787,884 samples, 0.39%)</title><rect x="20.1151%" y="85" width="0.3906%" height="15" fill="rgb(229,88,8)"/><text x="20.3651%" y="95.50"></text></g><g><title>impl_trait_ref (6,389,004 samples, 1.40%)</title><rect x="20.5058%" y="101" width="1.3960%" height="15" fill="rgb(213,181,19)"/><text x="20.7558%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,912,602 samples, 1.07%)</title><rect x="20.8283%" y="85" width="1.0734%" height="15" fill="rgb(254,191,54)"/><text x="21.0783%" y="95.50"></text></g><g><title>trait_impls_of (1,068,620 samples, 0.23%)</title><rect x="21.9685%" y="101" width="0.2335%" height="15" fill="rgb(241,83,37)"/><text x="22.2185%" y="111.50"></text></g><g><title>coherent_trait (16,767,750 samples, 3.66%)</title><rect x="18.5418%" y="133" width="3.6637%" height="15" fill="rgb(233,36,39)"/><text x="18.7918%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (16,268,345 samples, 3.55%)</title><rect x="18.6509%" y="117" width="3.5546%" height="15" fill="rgb(226,3,54)"/><text x="18.9009%" y="127.50">spec..</text></g><g><title>coherence_checking (16,882,201 samples, 3.69%)</title><rect x="18.5362%" y="149" width="3.6887%" height="15" fill="rgb(245,192,40)"/><text x="18.7862%" y="159.50">cohe..</text></g><g><title>adt_dtorck_constraint (468,564 samples, 0.10%)</title><rect x="26.0114%" y="53" width="0.1024%" height="15" fill="rgb(238,167,29)"/><text x="26.2614%" y="63.50"></text></g><g><title>adt_dtorck_constraint (502,494 samples, 0.11%)</title><rect x="26.0061%" y="69" width="0.1098%" height="15" fill="rgb(232,182,51)"/><text x="26.2561%" y="79.50"></text></g><g><title>dropck_outlives (809,279 samples, 0.18%)</title><rect x="25.9446%" y="101" width="0.1768%" height="15" fill="rgb(231,60,39)"/><text x="26.1946%" y="111.50"></text></g><g><title>adt_dtorck_constraint (663,877 samples, 0.15%)</title><rect x="25.9764%" y="85" width="0.1451%" height="15" fill="rgb(208,69,12)"/><text x="26.2264%" y="95.50"></text></g><g><title>evaluate_obligation (1,476,495 samples, 0.32%)</title><rect x="26.1214%" y="101" width="0.3226%" height="15" fill="rgb(235,93,37)"/><text x="26.3714%" y="111.50"></text></g><g><title>typeck (741,648 samples, 0.16%)</title><rect x="26.7636%" y="101" width="0.1620%" height="15" fill="rgb(213,116,39)"/><text x="27.0136%" y="111.50"></text></g><g><title>item_bodies_checking (21,542,848 samples, 4.71%)</title><rect x="22.2342%" y="149" width="4.7071%" height="15" fill="rgb(222,207,29)"/><text x="22.4842%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (21,540,128 samples, 4.71%)</title><rect x="22.2348%" y="133" width="4.7065%" height="15" fill="rgb(206,96,30)"/><text x="22.4848%" y="143.50">typec..</text></g><g><title>typeck (21,430,996 samples, 4.68%)</title><rect x="22.2587%" y="117" width="4.6826%" height="15" fill="rgb(218,138,4)"/><text x="22.5087%" y="127.50">typeck</text></g><g><title>item_types_checking (1,448,125 samples, 0.32%)</title><rect x="26.9413%" y="149" width="0.3164%" height="15" fill="rgb(250,191,14)"/><text x="27.1913%" y="159.50"></text></g><g><title>check_mod_item_types (1,435,855 samples, 0.31%)</title><rect x="26.9440%" y="133" width="0.3137%" height="15" fill="rgb(239,60,40)"/><text x="27.1940%" y="143.50"></text></g><g><title>fn_sig (486,374 samples, 0.11%)</title><rect x="27.3302%" y="117" width="0.1063%" height="15" fill="rgb(206,27,48)"/><text x="27.5802%" y="127.50"></text></g><g><title>named_region_map (515,157 samples, 0.11%)</title><rect x="27.4803%" y="101" width="0.1126%" height="15" fill="rgb(225,35,8)"/><text x="27.7303%" y="111.50"></text></g><g><title>resolve_lifetimes (484,107 samples, 0.11%)</title><rect x="27.4871%" y="85" width="0.1058%" height="15" fill="rgb(250,213,24)"/><text x="27.7371%" y="95.50"></text></g><g><title>generics_of (738,670 samples, 0.16%)</title><rect x="27.4365%" y="117" width="0.1614%" height="15" fill="rgb(247,123,22)"/><text x="27.6865%" y="127.50"></text></g><g><title>predicates_of (563,906 samples, 0.12%)</title><rect x="27.6140%" y="117" width="0.1232%" height="15" fill="rgb(231,138,38)"/><text x="27.8640%" y="127.50"></text></g><g><title>predicates_defined_on (504,032 samples, 0.11%)</title><rect x="27.6271%" y="101" width="0.1101%" height="15" fill="rgb(231,145,46)"/><text x="27.8771%" y="111.50"></text></g><g><title>type_collecting (2,347,654 samples, 0.51%)</title><rect x="27.2587%" y="149" width="0.5130%" height="15" fill="rgb(251,118,11)"/><text x="27.5087%" y="159.50"></text></g><g><title>collect_mod_item_types (2,321,903 samples, 0.51%)</title><rect x="27.2643%" y="133" width="0.5073%" height="15" fill="rgb(217,147,25)"/><text x="27.5143%" y="143.50"></text></g><g><title>evaluate_obligation (609,276 samples, 0.13%)</title><rect x="28.2755%" y="117" width="0.1331%" height="15" fill="rgb(247,81,37)"/><text x="28.5255%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,660,162 samples, 0.80%)</title><rect x="27.8241%" y="133" width="0.7997%" height="15" fill="rgb(209,12,38)"/><text x="28.0741%" y="143.50"></text></g><g><title>check_item_well_formed (2,084,647 samples, 0.46%)</title><rect x="28.6239%" y="133" width="0.4555%" height="15" fill="rgb(227,1,9)"/><text x="28.8739%" y="143.50"></text></g><g><title>analysis (77,886,439 samples, 17.02%)</title><rect x="12.0977%" y="181" width="17.0180%" height="15" fill="rgb(248,47,43)"/><text x="12.3477%" y="191.50">analysis</text></g><g><title>type_check_crate (48,500,762 samples, 10.60%)</title><rect x="18.5184%" y="165" width="10.5973%" height="15" fill="rgb(221,10,30)"/><text x="18.7684%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,144,503 samples, 1.34%)</title><rect x="27.7732%" y="149" width="1.3426%" height="15" fill="rgb(210,229,1)"/><text x="28.0232%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (655,505 samples, 0.14%)</title><rect x="36.7163%" y="149" width="0.1432%" height="15" fill="rgb(222,148,37)"/><text x="36.9663%" y="159.50"></text></g><g><title>const_caller_location (511,256 samples, 0.11%)</title><rect x="36.8596%" y="149" width="0.1117%" height="15" fill="rgb(234,67,33)"/><text x="37.1096%" y="159.50"></text></g><g><title>codegen_fn_attrs (511,535 samples, 0.11%)</title><rect x="37.3527%" y="133" width="0.1118%" height="15" fill="rgb(247,98,35)"/><text x="37.6027%" y="143.50"></text></g><g><title>layout_of (1,159,511 samples, 0.25%)</title><rect x="37.4814%" y="133" width="0.2534%" height="15" fill="rgb(247,138,52)"/><text x="37.7314%" y="143.50"></text></g><g><title>predicates_of (707,742 samples, 0.15%)</title><rect x="38.0386%" y="117" width="0.1546%" height="15" fill="rgb(213,79,30)"/><text x="38.2886%" y="127.50"></text></g><g><title>predicates_defined_on (508,639 samples, 0.11%)</title><rect x="38.0821%" y="101" width="0.1111%" height="15" fill="rgb(246,177,23)"/><text x="38.3321%" y="111.50"></text></g><g><title>param_env (2,099,385 samples, 0.46%)</title><rect x="37.7347%" y="133" width="0.4587%" height="15" fill="rgb(230,62,27)"/><text x="37.9847%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,042,510 samples, 1.32%)</title><rect x="36.9724%" y="149" width="1.3203%" height="15" fill="rgb(216,154,8)"/><text x="37.2224%" y="159.50"></text></g><g><title>layout_of (720,708 samples, 0.16%)</title><rect x="38.3606%" y="149" width="0.1575%" height="15" fill="rgb(244,35,45)"/><text x="38.6106%" y="159.50"></text></g><g><title>codegen_module (41,333,296 samples, 9.03%)</title><rect x="29.6047%" y="165" width="9.0312%" height="15" fill="rgb(251,115,12)"/><text x="29.8547%" y="175.50">codegen_module</text></g><g><title>codegen_crate (43,643,942 samples, 9.54%)</title><rect x="29.1180%" y="181" width="9.5361%" height="15" fill="rgb(240,54,50)"/><text x="29.3680%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (184,419,003 samples, 40.30%)</title><rect x="38.7008%" y="165" width="40.2952%" height="15" fill="rgb(233,84,52)"/><text x="38.9508%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (173,692,735 samples, 37.95%)</title><rect x="41.0445%" y="149" width="37.9515%" height="15" fill="rgb(207,117,47)"/><text x="41.2945%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (194,705,537 samples, 42.54%)</title><rect x="38.6541%" y="181" width="42.5428%" height="15" fill="rgb(249,43,39)"/><text x="38.9041%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,072,733 samples, 2.20%)</title><rect x="78.9961%" y="165" width="2.2009%" height="15" fill="rgb(209,38,44)"/><text x="79.2461%" y="175.50">L..</text></g><g><title>metadata_load_macro (543,435 samples, 0.12%)</title><rect x="88.3208%" y="133" width="0.1187%" height="15" fill="rgb(236,212,23)"/><text x="88.5708%" y="143.50"></text></g><g><title>metadata_register_crate (2,682,198 samples, 0.59%)</title><rect x="88.4396%" y="133" width="0.5861%" height="15" fill="rgb(242,79,21)"/><text x="88.6896%" y="143.50"></text></g><g><title>metadata_register_crate (949,360 samples, 0.21%)</title><rect x="88.8182%" y="117" width="0.2074%" height="15" fill="rgb(211,96,35)"/><text x="89.0682%" y="127.50"></text></g><g><title>macro_expand_crate (35,568,511 samples, 7.77%)</title><rect x="81.3780%" y="165" width="7.7717%" height="15" fill="rgb(253,215,40)"/><text x="81.6280%" y="175.50">macro_expan..</text></g><g><title>expand_crate (35,549,151 samples, 7.77%)</title><rect x="81.3822%" y="149" width="7.7674%" height="15" fill="rgb(211,81,21)"/><text x="81.6322%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (567,714 samples, 0.12%)</title><rect x="89.0256%" y="133" width="0.1240%" height="15" fill="rgb(208,190,38)"/><text x="89.2756%" y="143.50"></text></g><g><title>finalize_macro_resolutions (579,976 samples, 0.13%)</title><rect x="89.2205%" y="149" width="0.1267%" height="15" fill="rgb(235,213,38)"/><text x="89.4705%" y="159.50"></text></g><g><title>late_resolve_crate (3,594,347 samples, 0.79%)</title><rect x="89.3472%" y="149" width="0.7854%" height="15" fill="rgb(237,122,38)"/><text x="89.5972%" y="159.50"></text></g><g><title>configure_and_expand (41,200,298 samples, 9.00%)</title><rect x="81.1969%" y="181" width="9.0022%" height="15" fill="rgb(244,218,35)"/><text x="81.4469%" y="191.50">configure_and..</text></g><g><title>resolve_crate (4,685,278 samples, 1.02%)</title><rect x="89.1754%" y="165" width="1.0237%" height="15" fill="rgb(240,68,47)"/><text x="89.4254%" y="175.50"></text></g><g><title>free_global_ctxt (4,583,816 samples, 1.00%)</title><rect x="90.3411%" y="181" width="1.0016%" height="15" fill="rgb(210,16,53)"/><text x="90.5911%" y="191.50"></text></g><g><title>item_attrs (711,193 samples, 0.16%)</title><rect x="92.0126%" y="85" width="0.1554%" height="15" fill="rgb(235,124,12)"/><text x="92.2626%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (688,042 samples, 0.15%)</title><rect x="92.0176%" y="69" width="0.1503%" height="15" fill="rgb(224,169,11)"/><text x="92.2676%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,046,847 samples, 0.23%)</title><rect x="91.9785%" y="101" width="0.2287%" height="15" fill="rgb(250,166,2)"/><text x="92.2285%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,323,868 samples, 0.29%)</title><rect x="92.8427%" y="85" width="0.2893%" height="15" fill="rgb(242,216,29)"/><text x="93.0927%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,821,239 samples, 0.40%)</title><rect x="93.1320%" y="85" width="0.3979%" height="15" fill="rgb(230,116,27)"/><text x="93.3820%" y="95.50"></text></g><g><title>optimized_mir (5,851,743 samples, 1.28%)</title><rect x="92.3021%" y="101" width="1.2786%" height="15" fill="rgb(228,99,48)"/><text x="92.5521%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (928,679 samples, 0.20%)</title><rect x="93.6887%" y="85" width="0.2029%" height="15" fill="rgb(253,11,6)"/><text x="93.9387%" y="95.50"></text></g><g><title>specialization_graph_of (946,891 samples, 0.21%)</title><rect x="93.9845%" y="85" width="0.2069%" height="15" fill="rgb(247,143,39)"/><text x="94.2345%" y="95.50"></text></g><g><title>resolve_instance (3,015,328 samples, 0.66%)</title><rect x="93.5807%" y="101" width="0.6588%" height="15" fill="rgb(236,97,10)"/><text x="93.8307%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (12,854,600 samples, 2.81%)</title><rect x="91.7101%" y="117" width="2.8087%" height="15" fill="rgb(233,208,19)"/><text x="91.9601%" y="127.50">mo..</text></g><g><title>vtable_entries (719,750 samples, 0.16%)</title><rect x="94.3616%" y="101" width="0.1573%" height="15" fill="rgb(216,164,2)"/><text x="94.6116%" y="111.50"></text></g><g><title>monomorphization_collector (12,946,311 samples, 2.83%)</title><rect x="91.7094%" y="133" width="2.8287%" height="15" fill="rgb(220,129,5)"/><text x="91.9594%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,123,342 samples, 0.25%)</title><rect x="94.5391%" y="117" width="0.2454%" height="15" fill="rgb(242,17,10)"/><text x="94.7891%" y="127.50"></text></g><g><title>symbol_name (1,024,941 samples, 0.22%)</title><rect x="94.5606%" y="101" width="0.2239%" height="15" fill="rgb(242,107,0)"/><text x="94.8106%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (14,709,669 samples, 3.21%)</title><rect x="91.7020%" y="149" width="3.2140%" height="15" fill="rgb(251,28,31)"/><text x="91.9520%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,729,608 samples, 0.38%)</title><rect x="94.5381%" y="133" width="0.3779%" height="15" fill="rgb(233,223,10)"/><text x="94.7881%" y="143.50"></text></g><g><title>cgu_partitioning (601,966 samples, 0.13%)</title><rect x="94.7845%" y="117" width="0.1315%" height="15" fill="rgb(215,21,27)"/><text x="95.0345%" y="127.50"></text></g><g><title>exported_symbols (14,890,881 samples, 3.25%)</title><rect x="91.6901%" y="165" width="3.2536%" height="15" fill="rgb(232,23,21)"/><text x="91.9401%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (880,710 samples, 0.19%)</title><rect x="95.2991%" y="149" width="0.1924%" height="15" fill="rgb(244,5,23)"/><text x="95.5491%" y="159.50"></text></g><g><title>optimized_mir (2,368,972 samples, 0.52%)</title><rect x="94.9848%" y="165" width="0.5176%" height="15" fill="rgb(226,81,46)"/><text x="95.2348%" y="175.50"></text></g><g><title>generate_crate_metadata (19,214,135 samples, 4.20%)</title><rect x="91.3426%" y="181" width="4.1983%" height="15" fill="rgb(247,70,30)"/><text x="91.5926%" y="191.50">gener..</text></g><g><title>hir_lowering (5,468,245 samples, 1.19%)</title><rect x="95.5409%" y="181" width="1.1948%" height="15" fill="rgb(212,68,19)"/><text x="95.7909%" y="191.50"></text></g><g><title>finish_ongoing_codegen (9,399,506 samples, 2.05%)</title><rect x="96.7392%" y="165" width="2.0538%" height="15" fill="rgb(240,187,13)"/><text x="96.9892%" y="175.50">f..</text></g><g><title>link_crate (2,255,253 samples, 0.49%)</title><rect x="98.7930%" y="165" width="0.4928%" height="15" fill="rgb(223,113,26)"/><text x="99.0430%" y="175.50"></text></g><g><title>link_binary (1,994,290 samples, 0.44%)</title><rect x="98.8500%" y="149" width="0.4357%" height="15" fill="rgb(206,192,2)"/><text x="99.1000%" y="159.50"></text></g><g><title>link_rlib (1,432,445 samples, 0.31%)</title><rect x="98.9728%" y="133" width="0.3130%" height="15" fill="rgb(241,108,4)"/><text x="99.2228%" y="143.50"></text></g><g><title>link (11,681,459 samples, 2.55%)</title><rect x="96.7357%" y="181" width="2.5524%" height="15" fill="rgb(247,173,49)"/><text x="96.9857%" y="191.50">li..</text></g><g><title>parse_crate (1,033,110 samples, 0.23%)</title><rect x="99.2881%" y="181" width="0.2257%" height="15" fill="rgb(224,114,35)"/><text x="99.5381%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,407,724 samples, 0.31%)</title><rect x="99.5876%" y="181" width="0.3076%" height="15" fill="rgb(245,159,27)"/><text x="99.8376%" y="191.50"></text></g><g><title>all (457,669,813 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (457,669,813 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>