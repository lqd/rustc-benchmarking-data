<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,463,693 samples, 3.66%)</title><rect x="0.2091%" y="325" width="3.6637%" height="15" fill="rgb(227,0,7)"/><text x="0.4591%" y="335.50">LLVM..</text></g><g><title>needs_drop_raw (1,419,441 samples, 0.45%)</title><rect x="10.4701%" y="213" width="0.4536%" height="15" fill="rgb(217,0,24)"/><text x="10.7201%" y="223.50"></text></g><g><title>is_copy_raw (1,103,909 samples, 0.35%)</title><rect x="10.5710%" y="197" width="0.3528%" height="15" fill="rgb(221,193,54)"/><text x="10.8210%" y="207.50"></text></g><g><title>evaluate_obligation (911,838 samples, 0.29%)</title><rect x="10.6324%" y="181" width="0.2914%" height="15" fill="rgb(248,212,6)"/><text x="10.8824%" y="191.50"></text></g><g><title>specialization_graph_of (1,013,431 samples, 0.32%)</title><rect x="11.1009%" y="197" width="0.3239%" height="15" fill="rgb(208,68,35)"/><text x="11.3509%" y="207.50"></text></g><g><title>impl_trait_ref (395,714 samples, 0.13%)</title><rect x="11.2983%" y="181" width="0.1265%" height="15" fill="rgb(232,128,0)"/><text x="11.5483%" y="191.50"></text></g><g><title>resolve_instance (1,644,928 samples, 0.53%)</title><rect x="10.9238%" y="213" width="0.5257%" height="15" fill="rgb(207,160,47)"/><text x="11.1738%" y="223.50"></text></g><g><title>thir_body (1,043,924 samples, 0.33%)</title><rect x="11.4588%" y="213" width="0.3336%" height="15" fill="rgb(228,23,34)"/><text x="11.7088%" y="223.50"></text></g><g><title>mir_const (8,636,466 samples, 2.76%)</title><rect x="9.0422%" y="261" width="2.7601%" height="15" fill="rgb(218,30,26)"/><text x="9.2922%" y="271.50">mi..</text></g><g><title>unsafety_check_result (7,647,382 samples, 2.44%)</title><rect x="9.3583%" y="245" width="2.4440%" height="15" fill="rgb(220,122,19)"/><text x="9.6083%" y="255.50">un..</text></g><g><title>mir_built (6,901,776 samples, 2.21%)</title><rect x="9.5966%" y="229" width="2.2057%" height="15" fill="rgb(250,228,42)"/><text x="9.8466%" y="239.50">m..</text></g><g><title>mir_promoted (9,649,925 samples, 3.08%)</title><rect x="8.7275%" y="277" width="3.0840%" height="15" fill="rgb(240,193,28)"/><text x="8.9775%" y="287.50">mir..</text></g><g><title>type_op_ascribe_user_type (792,639 samples, 0.25%)</title><rect x="11.8115%" y="277" width="0.2533%" height="15" fill="rgb(216,20,37)"/><text x="12.0615%" y="287.50"></text></g><g><title>type_op_normalize_fn_sig (387,947 samples, 0.12%)</title><rect x="12.0648%" y="277" width="0.1240%" height="15" fill="rgb(206,188,39)"/><text x="12.3148%" y="287.50"></text></g><g><title>type_op_prove_predicate (3,744,565 samples, 1.20%)</title><rect x="12.2759%" y="277" width="1.1967%" height="15" fill="rgb(217,207,13)"/><text x="12.5259%" y="287.50"></text></g><g><title>MIR_borrow_checking (29,613,448 samples, 9.46%)</title><rect x="4.0112%" y="309" width="9.4641%" height="15" fill="rgb(231,73,38)"/><text x="4.2612%" y="319.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (29,498,916 samples, 9.43%)</title><rect x="4.0478%" y="293" width="9.4275%" height="15" fill="rgb(225,20,46)"/><text x="4.2978%" y="303.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (324,654 samples, 0.10%)</title><rect x="13.7521%" y="261" width="0.1038%" height="15" fill="rgb(210,31,41)"/><text x="14.0021%" y="271.50"></text></g><g><title>codegen_fn_attrs (550,756 samples, 0.18%)</title><rect x="13.6853%" y="277" width="0.1760%" height="15" fill="rgb(221,200,47)"/><text x="13.9353%" y="287.50"></text></g><g><title>check_mod_attrs (870,859 samples, 0.28%)</title><rect x="13.5831%" y="293" width="0.2783%" height="15" fill="rgb(226,26,5)"/><text x="13.8331%" y="303.50"></text></g><g><title>check_mod_unstable_api_usage (503,814 samples, 0.16%)</title><rect x="13.9493%" y="293" width="0.1610%" height="15" fill="rgb(249,33,26)"/><text x="14.1993%" y="303.50"></text></g><g><title>misc_checking_1 (1,763,309 samples, 0.56%)</title><rect x="13.5723%" y="309" width="0.5635%" height="15" fill="rgb(235,183,28)"/><text x="13.8223%" y="319.50"></text></g><g><title>liveness_and_intrinsic_checking (1,373,995 samples, 0.44%)</title><rect x="14.1364%" y="293" width="0.4391%" height="15" fill="rgb(221,5,38)"/><text x="14.3864%" y="303.50"></text></g><g><title>check_mod_liveness (1,213,233 samples, 0.39%)</title><rect x="14.1878%" y="277" width="0.3877%" height="15" fill="rgb(247,18,42)"/><text x="14.4378%" y="287.50"></text></g><g><title>type_uninhabited_from (559,888 samples, 0.18%)</title><rect x="14.3966%" y="261" width="0.1789%" height="15" fill="rgb(241,131,45)"/><text x="14.6466%" y="271.50"></text></g><g><title>type_uninhabited_from (475,856 samples, 0.15%)</title><rect x="14.4235%" y="245" width="0.1521%" height="15" fill="rgb(249,31,29)"/><text x="14.6735%" y="255.50"></text></g><g><title>type_uninhabited_from (429,873 samples, 0.14%)</title><rect x="14.4382%" y="229" width="0.1374%" height="15" fill="rgb(225,111,53)"/><text x="14.6882%" y="239.50"></text></g><g><title>type_uninhabited_from (398,363 samples, 0.13%)</title><rect x="14.4482%" y="213" width="0.1273%" height="15" fill="rgb(238,160,17)"/><text x="14.6982%" y="223.50"></text></g><g><title>type_uninhabited_from (357,233 samples, 0.11%)</title><rect x="14.4614%" y="197" width="0.1142%" height="15" fill="rgb(214,148,48)"/><text x="14.7114%" y="207.50"></text></g><g><title>misc_checking_2 (2,327,765 samples, 0.74%)</title><rect x="14.1358%" y="309" width="0.7439%" height="15" fill="rgb(232,36,49)"/><text x="14.3858%" y="319.50"></text></g><g><title>match_checking (951,780 samples, 0.30%)</title><rect x="14.5755%" y="293" width="0.3042%" height="15" fill="rgb(209,103,24)"/><text x="14.8255%" y="303.50"></text></g><g><title>check_match (907,728 samples, 0.29%)</title><rect x="14.5896%" y="277" width="0.2901%" height="15" fill="rgb(229,88,8)"/><text x="14.8396%" y="287.50"></text></g><g><title>check_private_in_public (352,593 samples, 0.11%)</title><rect x="14.8831%" y="293" width="0.1127%" height="15" fill="rgb(213,181,19)"/><text x="15.1331%" y="303.50"></text></g><g><title>death_checking (641,577 samples, 0.21%)</title><rect x="14.9958%" y="293" width="0.2050%" height="15" fill="rgb(254,191,54)"/><text x="15.2458%" y="303.50"></text></g><g><title>param_env (795,759 samples, 0.25%)</title><rect x="15.5810%" y="261" width="0.2543%" height="15" fill="rgb(241,83,37)"/><text x="15.8310%" y="271.50"></text></g><g><title>crate_lints (3,769,750 samples, 1.20%)</title><rect x="15.2014%" y="277" width="1.2048%" height="15" fill="rgb(233,36,39)"/><text x="15.4514%" y="287.50"></text></g><g><title>type_of (1,771,874 samples, 0.57%)</title><rect x="15.8399%" y="261" width="0.5663%" height="15" fill="rgb(226,3,54)"/><text x="16.0899%" y="271.50"></text></g><g><title>metadata_decode_entry_type_of (1,183,908 samples, 0.38%)</title><rect x="16.0278%" y="245" width="0.3784%" height="15" fill="rgb(245,192,40)"/><text x="16.2778%" y="255.50"></text></g><g><title>lint_checking (4,678,300 samples, 1.50%)</title><rect x="15.2008%" y="293" width="1.4951%" height="15" fill="rgb(238,167,29)"/><text x="15.4508%" y="303.50"></text></g><g><title>module_lints (906,780 samples, 0.29%)</title><rect x="16.4061%" y="277" width="0.2898%" height="15" fill="rgb(232,182,51)"/><text x="16.6561%" y="287.50"></text></g><g><title>lint_mod (898,240 samples, 0.29%)</title><rect x="16.4089%" y="261" width="0.2871%" height="15" fill="rgb(231,60,39)"/><text x="16.6589%" y="271.50"></text></g><g><title>privacy_access_levels (685,968 samples, 0.22%)</title><rect x="16.6959%" y="293" width="0.2192%" height="15" fill="rgb(208,69,12)"/><text x="16.9459%" y="303.50"></text></g><g><title>privacy_checking_modules (1,987,371 samples, 0.64%)</title><rect x="16.9152%" y="293" width="0.6351%" height="15" fill="rgb(235,93,37)"/><text x="17.1652%" y="303.50"></text></g><g><title>check_mod_privacy (1,981,701 samples, 0.63%)</title><rect x="16.9170%" y="277" width="0.6333%" height="15" fill="rgb(213,116,39)"/><text x="17.1670%" y="287.50"></text></g><g><title>misc_checking_3 (8,381,200 samples, 2.68%)</title><rect x="14.8797%" y="309" width="2.6785%" height="15" fill="rgb(222,207,29)"/><text x="15.1297%" y="319.50">mi..</text></g><g><title>impl_parent (1,543,367 samples, 0.49%)</title><rect x="18.2854%" y="245" width="0.4932%" height="15" fill="rgb(206,96,30)"/><text x="18.5354%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,015,387 samples, 0.32%)</title><rect x="18.4541%" y="229" width="0.3245%" height="15" fill="rgb(218,138,4)"/><text x="18.7041%" y="239.50"></text></g><g><title>impl_trait_ref (4,582,802 samples, 1.46%)</title><rect x="18.7786%" y="245" width="1.4646%" height="15" fill="rgb(250,191,14)"/><text x="19.0286%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,856,684 samples, 1.23%)</title><rect x="19.0107%" y="229" width="1.2325%" height="15" fill="rgb(239,60,40)"/><text x="19.2607%" y="239.50"></text></g><g><title>coherent_trait (8,997,655 samples, 2.88%)</title><rect x="17.6020%" y="277" width="2.8755%" height="15" fill="rgb(206,27,48)"/><text x="17.8520%" y="287.50">co..</text></g><g><title>specialization_graph_of (8,976,545 samples, 2.87%)</title><rect x="17.6087%" y="261" width="2.8688%" height="15" fill="rgb(225,35,8)"/><text x="17.8587%" y="271.50">sp..</text></g><g><title>trait_impls_of (730,018 samples, 0.23%)</title><rect x="20.2442%" y="245" width="0.2333%" height="15" fill="rgb(250,213,24)"/><text x="20.4942%" y="255.50"></text></g><g><title>coherence_checking (9,088,867 samples, 2.90%)</title><rect x="17.5961%" y="293" width="2.9047%" height="15" fill="rgb(247,123,22)"/><text x="17.8461%" y="303.50">co..</text></g><g><title>dropck_outlives (709,838 samples, 0.23%)</title><rect x="25.0166%" y="245" width="0.2269%" height="15" fill="rgb(231,138,38)"/><text x="25.2666%" y="255.50"></text></g><g><title>evaluate_obligation (1,584,367 samples, 0.51%)</title><rect x="25.2434%" y="245" width="0.5063%" height="15" fill="rgb(231,145,46)"/><text x="25.4934%" y="255.50"></text></g><g><title>trait_impls_of (329,493 samples, 0.11%)</title><rect x="25.6445%" y="229" width="0.1053%" height="15" fill="rgb(251,118,11)"/><text x="25.8945%" y="239.50"></text></g><g><title>method_autoderef_steps (413,093 samples, 0.13%)</title><rect x="25.8780%" y="245" width="0.1320%" height="15" fill="rgb(217,147,25)"/><text x="26.1280%" y="255.50"></text></g><g><title>evaluate_obligation (1,203,881 samples, 0.38%)</title><rect x="30.0637%" y="229" width="0.3847%" height="15" fill="rgb(247,81,37)"/><text x="30.3137%" y="239.50"></text></g><g><title>is_copy_raw (372,542 samples, 0.12%)</title><rect x="30.4872%" y="229" width="0.1191%" height="15" fill="rgb(209,12,38)"/><text x="30.7372%" y="239.50"></text></g><g><title>typeck (14,219,102 samples, 4.54%)</title><rect x="26.1831%" y="245" width="4.5443%" height="15" fill="rgb(227,1,9)"/><text x="26.4331%" y="255.50">typeck</text></g><g><title>item_bodies_checking (31,986,473 samples, 10.22%)</title><rect x="20.5124%" y="293" width="10.2225%" height="15" fill="rgb(248,47,43)"/><text x="20.7624%" y="303.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (31,982,343 samples, 10.22%)</title><rect x="20.5137%" y="277" width="10.2212%" height="15" fill="rgb(221,10,30)"/><text x="20.7637%" y="287.50">typeck_item_bod..</text></g><g><title>typeck (31,910,092 samples, 10.20%)</title><rect x="20.5368%" y="261" width="10.1981%" height="15" fill="rgb(210,229,1)"/><text x="20.7868%" y="271.50">typeck</text></g><g><title>mir_promoted (318,202 samples, 0.10%)</title><rect x="36.4835%" y="197" width="0.1017%" height="15" fill="rgb(222,148,37)"/><text x="36.7335%" y="207.50"></text></g><g><title>type_op_prove_predicate (673,069 samples, 0.22%)</title><rect x="36.6490%" y="197" width="0.2151%" height="15" fill="rgb(234,67,33)"/><text x="36.8990%" y="207.50"></text></g><g><title>mir_borrowck (2,597,207 samples, 0.83%)</title><rect x="36.0345%" y="213" width="0.8300%" height="15" fill="rgb(247,98,35)"/><text x="36.2845%" y="223.50"></text></g><g><title>mir_const (727,348 samples, 0.23%)</title><rect x="37.0668%" y="197" width="0.2325%" height="15" fill="rgb(247,138,52)"/><text x="37.3168%" y="207.50"></text></g><g><title>mir_promoted (1,376,544 samples, 0.44%)</title><rect x="36.8645%" y="213" width="0.4399%" height="15" fill="rgb(213,79,30)"/><text x="37.1145%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (1,489,316 samples, 0.48%)</title><rect x="37.3432%" y="213" width="0.4760%" height="15" fill="rgb(246,177,23)"/><text x="37.5932%" y="223.50"></text></g><g><title>normalize_projection_ty (1,051,393 samples, 0.34%)</title><rect x="37.4831%" y="197" width="0.3360%" height="15" fill="rgb(230,62,27)"/><text x="37.7331%" y="207.50"></text></g><g><title>type_op_normalize_predicate (494,554 samples, 0.16%)</title><rect x="37.8192%" y="213" width="0.1581%" height="15" fill="rgb(216,154,8)"/><text x="38.0692%" y="223.50"></text></g><g><title>type_op_prove_predicate (3,638,934 samples, 1.16%)</title><rect x="38.0143%" y="213" width="1.1630%" height="15" fill="rgb(244,35,45)"/><text x="38.2643%" y="223.50"></text></g><g><title>mir_borrowck (19,872,223 samples, 6.35%)</title><rect x="32.8269%" y="229" width="6.3509%" height="15" fill="rgb(251,115,12)"/><text x="33.0769%" y="239.50">mir_borr..</text></g><g><title>needs_drop_raw (462,715 samples, 0.15%)</title><rect x="39.6031%" y="165" width="0.1479%" height="15" fill="rgb(240,54,50)"/><text x="39.8531%" y="175.50"></text></g><g><title>associated_items (406,117 samples, 0.13%)</title><rect x="48.3554%" y="149" width="0.1298%" height="15" fill="rgb(233,84,52)"/><text x="48.6054%" y="159.50"></text></g><g><title>impl_trait_ref (370,814 samples, 0.12%)</title><rect x="49.1746%" y="53" width="0.1185%" height="15" fill="rgb(207,117,47)"/><text x="49.4246%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (336,834 samples, 0.11%)</title><rect x="49.1855%" y="37" width="0.1076%" height="15" fill="rgb(249,43,39)"/><text x="49.4355%" y="47.50"></text></g><g><title>coherent_trait (666,097 samples, 0.21%)</title><rect x="49.0988%" y="85" width="0.2129%" height="15" fill="rgb(209,38,44)"/><text x="49.3488%" y="95.50"></text></g><g><title>specialization_graph_of (663,417 samples, 0.21%)</title><rect x="49.0996%" y="69" width="0.2120%" height="15" fill="rgb(236,212,23)"/><text x="49.3496%" y="79.50"></text></g><g><title>adt_destructor (720,188 samples, 0.23%)</title><rect x="49.0854%" y="117" width="0.2302%" height="15" fill="rgb(242,79,21)"/><text x="49.3354%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (701,508 samples, 0.22%)</title><rect x="49.0914%" y="101" width="0.2242%" height="15" fill="rgb(211,96,35)"/><text x="49.3414%" y="111.50"></text></g><g><title>adt_dtorck_constraint (497,776 samples, 0.16%)</title><rect x="49.5674%" y="85" width="0.1591%" height="15" fill="rgb(253,215,40)"/><text x="49.8174%" y="95.50"></text></g><g><title>adt_dtorck_constraint (935,449 samples, 0.30%)</title><rect x="49.4426%" y="101" width="0.2990%" height="15" fill="rgb(211,81,21)"/><text x="49.6926%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,390,568 samples, 0.44%)</title><rect x="49.3156%" y="117" width="0.4444%" height="15" fill="rgb(208,190,38)"/><text x="49.5656%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,578,940 samples, 0.82%)</title><rect x="48.9571%" y="133" width="0.8242%" height="15" fill="rgb(235,213,38)"/><text x="49.2071%" y="143.50"></text></g><g><title>normalize_projection_ty (331,812 samples, 0.11%)</title><rect x="49.8440%" y="133" width="0.1060%" height="15" fill="rgb(237,122,38)"/><text x="50.0940%" y="143.50"></text></g><g><title>dropck_outlives (4,536,352 samples, 1.45%)</title><rect x="48.5017%" y="149" width="1.4498%" height="15" fill="rgb(244,218,35)"/><text x="48.7517%" y="159.50"></text></g><g><title>evaluate_obligation (5,206,917 samples, 1.66%)</title><rect x="49.9534%" y="149" width="1.6641%" height="15" fill="rgb(240,68,47)"/><text x="50.2034%" y="159.50"></text></g><g><title>trait_impls_of (601,516 samples, 0.19%)</title><rect x="51.4252%" y="133" width="0.1922%" height="15" fill="rgb(210,16,53)"/><text x="51.6752%" y="143.50"></text></g><g><title>implied_outlives_bounds (327,974 samples, 0.10%)</title><rect x="51.7253%" y="149" width="0.1048%" height="15" fill="rgb(235,124,12)"/><text x="51.9753%" y="159.50"></text></g><g><title>is_copy_raw (2,227,604 samples, 0.71%)</title><rect x="51.8421%" y="149" width="0.7119%" height="15" fill="rgb(224,169,11)"/><text x="52.0921%" y="159.50"></text></g><g><title>evaluate_obligation (1,873,821 samples, 0.60%)</title><rect x="51.9551%" y="133" width="0.5989%" height="15" fill="rgb(250,166,2)"/><text x="52.2051%" y="143.50"></text></g><g><title>item_attrs (514,784 samples, 0.16%)</title><rect x="52.5540%" y="149" width="0.1645%" height="15" fill="rgb(242,216,29)"/><text x="52.8040%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (504,314 samples, 0.16%)</title><rect x="52.5573%" y="133" width="0.1612%" height="15" fill="rgb(230,116,27)"/><text x="52.8073%" y="143.50"></text></g><g><title>item_bounds (372,644 samples, 0.12%)</title><rect x="52.7185%" y="149" width="0.1191%" height="15" fill="rgb(228,99,48)"/><text x="52.9685%" y="159.50"></text></g><g><title>explicit_item_bounds (319,264 samples, 0.10%)</title><rect x="52.7356%" y="133" width="0.1020%" height="15" fill="rgb(253,11,6)"/><text x="52.9856%" y="143.50"></text></g><g><title>predicates_of (382,345 samples, 0.12%)</title><rect x="52.9616%" y="149" width="0.1222%" height="15" fill="rgb(247,143,39)"/><text x="53.2116%" y="159.50"></text></g><g><title>mir_built (43,475,987 samples, 13.89%)</title><rect x="39.3626%" y="181" width="13.8944%" height="15" fill="rgb(236,97,10)"/><text x="39.6126%" y="191.50">mir_built</text></g><g><title>typeck (41,973,252 samples, 13.41%)</title><rect x="39.8429%" y="165" width="13.4141%" height="15" fill="rgb(233,208,19)"/><text x="40.0929%" y="175.50">typeck</text></g><g><title>adt_drop_tys (427,413 samples, 0.14%)</title><rect x="54.2158%" y="133" width="0.1366%" height="15" fill="rgb(216,164,2)"/><text x="54.4658%" y="143.50"></text></g><g><title>is_copy_raw (323,182 samples, 0.10%)</title><rect x="54.3524%" y="133" width="0.1033%" height="15" fill="rgb(220,129,5)"/><text x="54.6024%" y="143.50"></text></g><g><title>needs_drop_raw (936,366 samples, 0.30%)</title><rect x="54.1577%" y="149" width="0.2993%" height="15" fill="rgb(242,17,10)"/><text x="54.4077%" y="159.50"></text></g><g><title>param_env (344,273 samples, 0.11%)</title><rect x="54.6572%" y="133" width="0.1100%" height="15" fill="rgb(242,107,0)"/><text x="54.9072%" y="143.50"></text></g><g><title>thir_body (927,921 samples, 0.30%)</title><rect x="54.4731%" y="149" width="0.2966%" height="15" fill="rgb(251,28,31)"/><text x="54.7231%" y="159.50"></text></g><g><title>mir_built (4,328,129 samples, 1.38%)</title><rect x="53.4015%" y="165" width="1.3832%" height="15" fill="rgb(233,223,10)"/><text x="53.6515%" y="175.50"></text></g><g><title>needs_drop_raw (333,123 samples, 0.11%)</title><rect x="54.9290%" y="133" width="0.1065%" height="15" fill="rgb(215,21,27)"/><text x="55.1790%" y="143.50"></text></g><g><title>mir_built (841,978 samples, 0.27%)</title><rect x="54.8300%" y="149" width="0.2691%" height="15" fill="rgb(232,23,21)"/><text x="55.0800%" y="159.50"></text></g><g><title>mir_const (49,614,803 samples, 15.86%)</title><rect x="39.2433%" y="213" width="15.8563%" height="15" fill="rgb(244,5,23)"/><text x="39.4933%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (49,338,772 samples, 15.77%)</title><rect x="39.3315%" y="197" width="15.7681%" height="15" fill="rgb(226,81,46)"/><text x="39.5815%" y="207.50">unsafety_check_result</text></g><g><title>unsafety_check_result (5,765,584 samples, 1.84%)</title><rect x="53.2570%" y="181" width="1.8426%" height="15" fill="rgb(247,70,30)"/><text x="53.5070%" y="191.50">u..</text></g><g><title>unsafety_check_result (980,909 samples, 0.31%)</title><rect x="54.7861%" y="165" width="0.3135%" height="15" fill="rgb(212,68,19)"/><text x="55.0361%" y="175.50"></text></g><g><title>mir_promoted (49,839,455 samples, 15.93%)</title><rect x="39.1778%" y="229" width="15.9281%" height="15" fill="rgb(240,187,13)"/><text x="39.4278%" y="239.50">mir_promoted</text></g><g><title>item_types_checking (77,673,313 samples, 24.82%)</title><rect x="30.7348%" y="293" width="24.8234%" height="15" fill="rgb(223,113,26)"/><text x="30.9848%" y="303.50">item_types_checking</text></g><g><title>check_mod_item_types (77,659,983 samples, 24.82%)</title><rect x="30.7391%" y="277" width="24.8192%" height="15" fill="rgb(206,192,2)"/><text x="30.9891%" y="287.50">check_mod_item_types</text></g><g><title>type_of (74,766,004 samples, 23.89%)</title><rect x="31.6640%" y="261" width="23.8943%" height="15" fill="rgb(241,108,4)"/><text x="31.9140%" y="271.50">type_of</text></g><g><title>mir_borrowck (74,698,443 samples, 23.87%)</title><rect x="31.6856%" y="245" width="23.8727%" height="15" fill="rgb(247,173,49)"/><text x="31.9356%" y="255.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,157,218 samples, 0.37%)</title><rect x="55.1885%" y="229" width="0.3698%" height="15" fill="rgb(224,114,35)"/><text x="55.4385%" y="239.50"></text></g><g><title>fn_sig (514,175 samples, 0.16%)</title><rect x="55.6691%" y="261" width="0.1643%" height="15" fill="rgb(245,159,27)"/><text x="55.9191%" y="271.50"></text></g><g><title>generics_of (316,536 samples, 0.10%)</title><rect x="55.8334%" y="261" width="0.1012%" height="15" fill="rgb(245,172,44)"/><text x="56.0834%" y="271.50"></text></g><g><title>late_bound_vars_map (716,668 samples, 0.23%)</title><rect x="56.1349%" y="213" width="0.2290%" height="15" fill="rgb(236,23,11)"/><text x="56.3849%" y="223.50"></text></g><g><title>resolve_lifetimes (695,528 samples, 0.22%)</title><rect x="56.1416%" y="197" width="0.2223%" height="15" fill="rgb(205,117,38)"/><text x="56.3916%" y="207.50"></text></g><g><title>explicit_predicates_of (1,292,004 samples, 0.41%)</title><rect x="55.9892%" y="229" width="0.4129%" height="15" fill="rgb(237,72,25)"/><text x="56.2392%" y="239.50"></text></g><g><title>predicates_of (1,719,079 samples, 0.55%)</title><rect x="55.9466%" y="261" width="0.5494%" height="15" fill="rgb(244,70,9)"/><text x="56.1966%" y="271.50"></text></g><g><title>predicates_defined_on (1,668,039 samples, 0.53%)</title><rect x="55.9629%" y="245" width="0.5331%" height="15" fill="rgb(217,125,39)"/><text x="56.2129%" y="255.50"></text></g><g><title>type_collecting (3,045,933 samples, 0.97%)</title><rect x="55.5610%" y="293" width="0.9734%" height="15" fill="rgb(235,36,10)"/><text x="55.8110%" y="303.50"></text></g><g><title>collect_mod_item_types (3,032,383 samples, 0.97%)</title><rect x="55.5653%" y="277" width="0.9691%" height="15" fill="rgb(251,123,47)"/><text x="55.8153%" y="287.50"></text></g><g><title>evaluate_obligation (812,690 samples, 0.26%)</title><rect x="57.4035%" y="261" width="0.2597%" height="15" fill="rgb(221,13,13)"/><text x="57.6535%" y="271.50"></text></g><g><title>implied_outlives_bounds (330,443 samples, 0.11%)</title><rect x="57.6758%" y="261" width="0.1056%" height="15" fill="rgb(238,131,9)"/><text x="57.9258%" y="271.50"></text></g><g><title>region_scope_tree (356,721 samples, 0.11%)</title><rect x="57.9017%" y="261" width="0.1140%" height="15" fill="rgb(211,50,8)"/><text x="58.1517%" y="271.50"></text></g><g><title>check_impl_item_well_formed (4,393,517 samples, 1.40%)</title><rect x="56.6240%" y="277" width="1.4041%" height="15" fill="rgb(245,182,24)"/><text x="56.8740%" y="287.50"></text></g><g><title>adt_sized_constraint (365,734 samples, 0.12%)</title><rect x="58.7992%" y="245" width="0.1169%" height="15" fill="rgb(242,14,37)"/><text x="59.0492%" y="255.50"></text></g><g><title>evaluate_obligation (615,407 samples, 0.20%)</title><rect x="58.7609%" y="261" width="0.1967%" height="15" fill="rgb(246,228,12)"/><text x="59.0109%" y="271.50"></text></g><g><title>param_env (668,038 samples, 0.21%)</title><rect x="59.0158%" y="261" width="0.2135%" height="15" fill="rgb(213,55,15)"/><text x="59.2658%" y="271.50"></text></g><g><title>region_scope_tree (321,050 samples, 0.10%)</title><rect x="59.2678%" y="261" width="0.1026%" height="15" fill="rgb(209,9,3)"/><text x="59.5178%" y="271.50"></text></g><g><title>check_item_well_formed (4,507,486 samples, 1.44%)</title><rect x="58.0281%" y="277" width="1.4405%" height="15" fill="rgb(230,59,30)"/><text x="58.2781%" y="287.50"></text></g><g><title>analysis (174,306,628 samples, 55.71%)</title><rect x="3.8727%" y="325" width="55.7063%" height="15" fill="rgb(209,121,21)"/><text x="4.1227%" y="335.50">analysis</text></g><g><title>type_check_crate (131,484,179 samples, 42.02%)</title><rect x="17.5582%" y="309" width="42.0207%" height="15" fill="rgb(220,109,13)"/><text x="17.8082%" y="319.50">type_check_crate</text></g><g><title>wf_checking (9,518,402 samples, 3.04%)</title><rect x="56.5370%" y="293" width="3.0420%" height="15" fill="rgb(232,18,1)"/><text x="56.7870%" y="303.50">wf_..</text></g><g><title>check_trait_item_well_formed (345,384 samples, 0.11%)</title><rect x="59.4686%" y="277" width="0.1104%" height="15" fill="rgb(215,41,42)"/><text x="59.7186%" y="287.50"></text></g><g><title>codegen_module (3,085,114 samples, 0.99%)</title><rect x="59.9635%" y="309" width="0.9860%" height="15" fill="rgb(224,123,36)"/><text x="60.2135%" y="319.50"></text></g><g><title>codegen_crate (4,466,758 samples, 1.43%)</title><rect x="59.5818%" y="325" width="1.4275%" height="15" fill="rgb(240,125,3)"/><text x="59.8318%" y="335.50"></text></g><g><title>LLVM_module_codegen (30,420,566 samples, 9.72%)</title><rect x="61.0302%" y="309" width="9.7220%" height="15" fill="rgb(205,98,50)"/><text x="61.2802%" y="319.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (29,029,751 samples, 9.28%)</title><rect x="61.4747%" y="293" width="9.2776%" height="15" fill="rgb(205,185,37)"/><text x="61.7247%" y="303.50">LLVM_module_c..</text></g><g><title>codegen_module_optimize (31,701,029 samples, 10.13%)</title><rect x="61.0093%" y="325" width="10.1313%" height="15" fill="rgb(238,207,15)"/><text x="61.2593%" y="335.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (1,214,973 samples, 0.39%)</title><rect x="70.7523%" y="309" width="0.3883%" height="15" fill="rgb(213,199,42)"/><text x="71.0023%" y="319.50"></text></g><g><title>metadata_register_crate (10,535,983 samples, 3.37%)</title><rect x="76.5061%" y="277" width="3.3672%" height="15" fill="rgb(235,201,11)"/><text x="76.7561%" y="287.50">met..</text></g><g><title>metadata_register_crate (8,528,439 samples, 2.73%)</title><rect x="77.1477%" y="261" width="2.7256%" height="15" fill="rgb(207,46,11)"/><text x="77.3977%" y="271.50">me..</text></g><g><title>metadata_register_crate (3,994,432 samples, 1.28%)</title><rect x="78.5967%" y="245" width="1.2766%" height="15" fill="rgb(241,35,35)"/><text x="78.8467%" y="255.50"></text></g><g><title>macro_expand_crate (26,997,519 samples, 8.63%)</title><rect x="71.2953%" y="309" width="8.6281%" height="15" fill="rgb(243,32,47)"/><text x="71.5453%" y="319.50">macro_expand..</text></g><g><title>expand_crate (26,985,979 samples, 8.62%)</title><rect x="71.2990%" y="293" width="8.6244%" height="15" fill="rgb(247,202,23)"/><text x="71.5490%" y="303.50">expand_crate</text></g><g><title>late_resolve_crate (2,224,514 samples, 0.71%)</title><rect x="80.0716%" y="293" width="0.7109%" height="15" fill="rgb(219,102,11)"/><text x="80.3216%" y="303.50"></text></g><g><title>configure_and_expand (30,311,355 samples, 9.69%)</title><rect x="71.1405%" y="325" width="9.6871%" height="15" fill="rgb(243,110,44)"/><text x="71.3905%" y="335.50">configure_and_..</text></g><g><title>resolve_crate (2,697,989 samples, 0.86%)</title><rect x="79.9654%" y="309" width="0.8622%" height="15" fill="rgb(222,74,54)"/><text x="80.2154%" y="319.50"></text></g><g><title>early_lint_checks (411,635 samples, 0.13%)</title><rect x="80.9106%" y="325" width="0.1316%" height="15" fill="rgb(216,99,12)"/><text x="81.1606%" y="335.50"></text></g><g><title>free_global_ctxt (7,402,919 samples, 2.37%)</title><rect x="81.0421%" y="325" width="2.3659%" height="15" fill="rgb(226,22,26)"/><text x="81.2921%" y="335.50">fr..</text></g><g><title>optimized_mir (313,713 samples, 0.10%)</title><rect x="84.6593%" y="245" width="0.1003%" height="15" fill="rgb(217,163,10)"/><text x="84.9093%" y="255.50"></text></g><g><title>upstream_monomorphizations_for (7,605,411 samples, 2.43%)</title><rect x="84.7809%" y="245" width="2.4306%" height="15" fill="rgb(213,25,53)"/><text x="85.0309%" y="255.50">up..</text></g><g><title>upstream_monomorphizations (7,600,161 samples, 2.43%)</title><rect x="84.7826%" y="229" width="2.4289%" height="15" fill="rgb(252,105,26)"/><text x="85.0326%" y="239.50">up..</text></g><g><title>exported_symbols (6,648,141 samples, 2.12%)</title><rect x="85.0868%" y="213" width="2.1247%" height="15" fill="rgb(220,39,43)"/><text x="85.3368%" y="223.50">e..</text></g><g><title>metadata_decode_entry_exported_symbols (6,625,231 samples, 2.12%)</title><rect x="85.0941%" y="197" width="2.1173%" height="15" fill="rgb(229,68,48)"/><text x="85.3441%" y="207.50">m..</text></g><g><title>monomorphization_collector_graph_walk (8,435,010 samples, 2.70%)</title><rect x="84.5633%" y="261" width="2.6957%" height="15" fill="rgb(252,8,32)"/><text x="84.8133%" y="271.50">mo..</text></g><g><title>monomorphization_collector (8,470,330 samples, 2.71%)</title><rect x="84.5611%" y="277" width="2.7070%" height="15" fill="rgb(223,20,43)"/><text x="84.8111%" y="287.50">mo..</text></g><g><title>assert_symbols_are_distinct (346,994 samples, 0.11%)</title><rect x="87.2733%" y="261" width="0.1109%" height="15" fill="rgb(229,81,49)"/><text x="87.5233%" y="271.50"></text></g><g><title>symbol_name (339,754 samples, 0.11%)</title><rect x="87.2757%" y="245" width="0.1086%" height="15" fill="rgb(236,28,36)"/><text x="87.5257%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (8,922,655 samples, 2.85%)</title><rect x="84.5529%" y="293" width="2.8516%" height="15" fill="rgb(249,185,26)"/><text x="84.8029%" y="303.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (426,425 samples, 0.14%)</title><rect x="87.2682%" y="277" width="0.1363%" height="15" fill="rgb(249,174,33)"/><text x="87.5182%" y="287.50"></text></g><g><title>exported_symbols (9,166,817 samples, 2.93%)</title><rect x="84.5456%" y="309" width="2.9296%" height="15" fill="rgb(233,201,37)"/><text x="84.7956%" y="319.50">ex..</text></g><g><title>layout_of (373,484 samples, 0.12%)</title><rect x="90.9909%" y="165" width="0.1194%" height="15" fill="rgb(221,78,26)"/><text x="91.2409%" y="175.50"></text></g><g><title>layout_of (329,034 samples, 0.11%)</title><rect x="91.0051%" y="149" width="0.1052%" height="15" fill="rgb(250,127,30)"/><text x="91.2551%" y="159.50"></text></g><g><title>layout_of (471,254 samples, 0.15%)</title><rect x="90.9673%" y="181" width="0.1506%" height="15" fill="rgb(230,49,44)"/><text x="91.2173%" y="191.50"></text></g><g><title>layout_of (619,595 samples, 0.20%)</title><rect x="90.9394%" y="197" width="0.1980%" height="15" fill="rgb(229,67,23)"/><text x="91.1894%" y="207.50"></text></g><g><title>layout_of (774,016 samples, 0.25%)</title><rect x="90.9017%" y="213" width="0.2474%" height="15" fill="rgb(249,83,47)"/><text x="91.1517%" y="223.50"></text></g><g><title>layout_of (975,580 samples, 0.31%)</title><rect x="90.8555%" y="229" width="0.3118%" height="15" fill="rgb(215,43,3)"/><text x="91.1055%" y="239.50"></text></g><g><title>layout_of (1,122,041 samples, 0.36%)</title><rect x="90.8250%" y="245" width="0.3586%" height="15" fill="rgb(238,154,13)"/><text x="91.0750%" y="255.50"></text></g><g><title>layout_of (1,460,806 samples, 0.47%)</title><rect x="90.7345%" y="261" width="0.4669%" height="15" fill="rgb(219,56,2)"/><text x="90.9845%" y="271.50"></text></g><g><title>layout_of (1,795,229 samples, 0.57%)</title><rect x="90.6457%" y="277" width="0.5737%" height="15" fill="rgb(233,0,4)"/><text x="90.8957%" y="287.50"></text></g><g><title>layout_of (2,999,385 samples, 0.96%)</title><rect x="90.3367%" y="293" width="0.9586%" height="15" fill="rgb(235,30,7)"/><text x="90.5867%" y="303.50"></text></g><g><title>is_copy_raw (2,105,542 samples, 0.67%)</title><rect x="94.8734%" y="261" width="0.6729%" height="15" fill="rgb(250,79,13)"/><text x="95.1234%" y="271.50"></text></g><g><title>evaluate_obligation (1,723,016 samples, 0.55%)</title><rect x="94.9956%" y="245" width="0.5507%" height="15" fill="rgb(211,146,34)"/><text x="95.2456%" y="255.50"></text></g><g><title>needs_drop_raw (2,538,822 samples, 0.81%)</title><rect x="94.7367%" y="277" width="0.8114%" height="15" fill="rgb(228,22,38)"/><text x="94.9867%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,508,453 samples, 4.64%)</title><rect x="91.2953%" y="293" width="4.6367%" height="15" fill="rgb(235,168,5)"/><text x="91.5453%" y="303.50">mir_d..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,163,842 samples, 0.37%)</title><rect x="95.5601%" y="277" width="0.3719%" height="15" fill="rgb(221,155,16)"/><text x="95.8101%" y="287.50"></text></g><g><title>normalize_projection_ty (802,897 samples, 0.26%)</title><rect x="95.6754%" y="261" width="0.2566%" height="15" fill="rgb(215,215,53)"/><text x="95.9254%" y="271.50"></text></g><g><title>specialization_graph_of (604,887 samples, 0.19%)</title><rect x="95.9924%" y="277" width="0.1933%" height="15" fill="rgb(223,4,10)"/><text x="96.2424%" y="287.50"></text></g><g><title>resolve_instance (766,888 samples, 0.25%)</title><rect x="95.9424%" y="293" width="0.2451%" height="15" fill="rgb(234,103,6)"/><text x="96.1924%" y="303.50"></text></g><g><title>optimized_mir (27,064,823 samples, 8.65%)</title><rect x="87.5480%" y="309" width="8.6496%" height="15" fill="rgb(227,97,0)"/><text x="87.7980%" y="319.50">optimized_mir</text></g><g><title>promoted_mir (880,078 samples, 0.28%)</title><rect x="96.1976%" y="309" width="0.2813%" height="15" fill="rgb(234,150,53)"/><text x="96.4476%" y="319.50"></text></g><g><title>generate_crate_metadata (40,942,359 samples, 13.08%)</title><rect x="83.4080%" y="325" width="13.0847%" height="15" fill="rgb(228,201,54)"/><text x="83.6580%" y="335.50">generate_crate_metad..</text></g><g><title>hir_lowering (4,268,875 samples, 1.36%)</title><rect x="96.4927%" y="325" width="1.3643%" height="15" fill="rgb(222,22,37)"/><text x="96.7427%" y="335.50"></text></g><g><title>link_crate (1,555,796 samples, 0.50%)</title><rect x="97.8650%" y="309" width="0.4972%" height="15" fill="rgb(237,53,32)"/><text x="98.1150%" y="319.50"></text></g><g><title>link_binary (1,528,556 samples, 0.49%)</title><rect x="97.8737%" y="293" width="0.4885%" height="15" fill="rgb(233,25,53)"/><text x="98.1237%" y="303.50"></text></g><g><title>link_rlib (1,106,382 samples, 0.35%)</title><rect x="98.0086%" y="277" width="0.3536%" height="15" fill="rgb(210,40,34)"/><text x="98.2586%" y="287.50"></text></g><g><title>link (1,592,887 samples, 0.51%)</title><rect x="97.8570%" y="325" width="0.5091%" height="15" fill="rgb(241,220,44)"/><text x="98.1070%" y="335.50"></text></g><g><title>parse_crate (1,523,166 samples, 0.49%)</title><rect x="98.3661%" y="325" width="0.4868%" height="15" fill="rgb(235,28,35)"/><text x="98.6161%" y="335.50"></text></g><g><title>self_profile_alloc_query_strings (2,811,161 samples, 0.90%)</title><rect x="98.9225%" y="325" width="0.8984%" height="15" fill="rgb(210,56,17)"/><text x="99.1725%" y="335.50"></text></g><g><title>all (312,903,003 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="367.50"></text></g><g><title>rustc (312,903,003 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(235,212,8)"/><text x="0.2500%" y="351.50">rustc</text></g><g><title>write_crate_metadata (479,415 samples, 0.15%)</title><rect x="99.8468%" y="325" width="0.1532%" height="15" fill="rgb(223,33,50)"/><text x="100.0968%" y="335.50"></text></g></svg></svg>