<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (276,907,109 samples, 6.88%)</title><rect x="0.0271%" y="181" width="6.8760%" height="15" fill="rgb(227,0,7)"/><text x="0.2771%" y="191.50">LLVM_pass..</text></g><g><title>is_copy_raw (5,656,497 samples, 0.14%)</title><rect x="18.2398%" y="53" width="0.1405%" height="15" fill="rgb(217,0,24)"/><text x="18.4898%" y="63.50"></text></g><g><title>evaluate_obligation (4,461,713 samples, 0.11%)</title><rect x="18.2695%" y="37" width="0.1108%" height="15" fill="rgb(221,193,54)"/><text x="18.5195%" y="47.50"></text></g><g><title>needs_drop_raw (7,873,315 samples, 0.20%)</title><rect x="18.1856%" y="69" width="0.1955%" height="15" fill="rgb(248,212,6)"/><text x="18.4356%" y="79.50"></text></g><g><title>resolve_instance (7,226,386 samples, 0.18%)</title><rect x="18.3820%" y="69" width="0.1794%" height="15" fill="rgb(208,68,35)"/><text x="18.6320%" y="79.50"></text></g><g><title>thir_body (28,134,970 samples, 0.70%)</title><rect x="18.5698%" y="69" width="0.6986%" height="15" fill="rgb(232,128,0)"/><text x="18.8198%" y="79.50"></text></g><g><title>mir_const (136,558,254 samples, 3.39%)</title><rect x="15.8872%" y="117" width="3.3910%" height="15" fill="rgb(207,160,47)"/><text x="16.1372%" y="127.50">mir..</text></g><g><title>unsafety_check_result (119,053,272 samples, 2.96%)</title><rect x="16.3219%" y="101" width="2.9563%" height="15" fill="rgb(228,23,34)"/><text x="16.5719%" y="111.50">uns..</text></g><g><title>mir_built (109,559,857 samples, 2.72%)</title><rect x="16.5576%" y="85" width="2.7205%" height="15" fill="rgb(218,30,26)"/><text x="16.8076%" y="95.50">mi..</text></g><g><title>mir_const (5,621,830 samples, 0.14%)</title><rect x="19.4155%" y="101" width="0.1396%" height="15" fill="rgb(220,122,19)"/><text x="19.6655%" y="111.50"></text></g><g><title>unsafety_check_result (4,446,176 samples, 0.11%)</title><rect x="19.4447%" y="85" width="0.1104%" height="15" fill="rgb(250,228,42)"/><text x="19.6947%" y="95.50"></text></g><g><title>mir_const_qualif (11,175,974 samples, 0.28%)</title><rect x="19.2782%" y="117" width="0.2775%" height="15" fill="rgb(240,193,28)"/><text x="19.5282%" y="127.50"></text></g><g><title>mir_promoted (162,536,739 samples, 4.04%)</title><rect x="15.5197%" y="133" width="4.0360%" height="15" fill="rgb(216,20,37)"/><text x="15.7697%" y="143.50">mir_..</text></g><g><title>type_op_normalize_fn_sig (4,079,271 samples, 0.10%)</title><rect x="19.6148%" y="133" width="0.1013%" height="15" fill="rgb(206,188,39)"/><text x="19.8648%" y="143.50"></text></g><g><title>type_op_prove_predicate (23,121,919 samples, 0.57%)</title><rect x="19.8310%" y="133" width="0.5742%" height="15" fill="rgb(217,207,13)"/><text x="20.0810%" y="143.50"></text></g><g><title>MIR_borrow_checking (539,950,897 samples, 13.41%)</title><rect x="6.9981%" y="165" width="13.4079%" height="15" fill="rgb(231,73,38)"/><text x="7.2481%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (538,124,799 samples, 13.36%)</title><rect x="7.0435%" y="149" width="13.3625%" height="15" fill="rgb(225,20,46)"/><text x="7.2935%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (6,471,594 samples, 0.16%)</title><rect x="20.5543%" y="149" width="0.1607%" height="15" fill="rgb(210,31,41)"/><text x="20.8043%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (6,250,774 samples, 0.16%)</title><rect x="20.7928%" y="149" width="0.1552%" height="15" fill="rgb(221,200,47)"/><text x="21.0428%" y="159.50"></text></g><g><title>misc_checking_1 (16,370,035 samples, 0.41%)</title><rect x="20.5525%" y="165" width="0.4065%" height="15" fill="rgb(226,26,5)"/><text x="20.8025%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (7,398,255 samples, 0.18%)</title><rect x="20.9591%" y="149" width="0.1837%" height="15" fill="rgb(249,33,26)"/><text x="21.2091%" y="159.50"></text></g><g><title>check_mod_liveness (5,908,473 samples, 0.15%)</title><rect x="20.9961%" y="133" width="0.1467%" height="15" fill="rgb(235,183,28)"/><text x="21.2461%" y="143.50"></text></g><g><title>misc_checking_2 (15,459,227 samples, 0.38%)</title><rect x="20.9590%" y="165" width="0.3839%" height="15" fill="rgb(221,5,38)"/><text x="21.2090%" y="175.50"></text></g><g><title>match_checking (8,057,572 samples, 0.20%)</title><rect x="21.1428%" y="149" width="0.2001%" height="15" fill="rgb(247,18,42)"/><text x="21.3928%" y="159.50"></text></g><g><title>check_match (7,524,376 samples, 0.19%)</title><rect x="21.1560%" y="133" width="0.1868%" height="15" fill="rgb(241,131,45)"/><text x="21.4060%" y="143.50"></text></g><g><title>death_checking (5,958,260 samples, 0.15%)</title><rect x="21.4166%" y="149" width="0.1480%" height="15" fill="rgb(249,31,29)"/><text x="21.6666%" y="159.50"></text></g><g><title>crate_lints (15,298,765 samples, 0.38%)</title><rect x="21.5646%" y="133" width="0.3799%" height="15" fill="rgb(225,111,53)"/><text x="21.8146%" y="143.50"></text></g><g><title>lint_checking (25,358,207 samples, 0.63%)</title><rect x="21.5646%" y="149" width="0.6297%" height="15" fill="rgb(238,160,17)"/><text x="21.8146%" y="159.50"></text></g><g><title>module_lints (10,055,872 samples, 0.25%)</title><rect x="21.9445%" y="133" width="0.2497%" height="15" fill="rgb(214,148,48)"/><text x="22.1945%" y="143.50"></text></g><g><title>lint_mod (10,030,562 samples, 0.25%)</title><rect x="21.9452%" y="117" width="0.2491%" height="15" fill="rgb(232,36,49)"/><text x="22.1952%" y="127.50"></text></g><g><title>privacy_access_levels (5,931,639 samples, 0.15%)</title><rect x="22.1942%" y="149" width="0.1473%" height="15" fill="rgb(209,103,24)"/><text x="22.4442%" y="159.50"></text></g><g><title>privacy_checking_modules (14,230,073 samples, 0.35%)</title><rect x="22.3415%" y="149" width="0.3534%" height="15" fill="rgb(229,88,8)"/><text x="22.5915%" y="159.50"></text></g><g><title>check_mod_privacy (14,208,023 samples, 0.35%)</title><rect x="22.3421%" y="133" width="0.3528%" height="15" fill="rgb(213,181,19)"/><text x="22.5921%" y="143.50"></text></g><g><title>misc_checking_3 (54,620,441 samples, 1.36%)</title><rect x="21.3429%" y="165" width="1.3563%" height="15" fill="rgb(254,191,54)"/><text x="21.5929%" y="175.50"></text></g><g><title>impl_trait_ref (7,738,334 samples, 0.19%)</title><rect x="23.0310%" y="101" width="0.1922%" height="15" fill="rgb(241,83,37)"/><text x="23.2810%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,863,257 samples, 0.15%)</title><rect x="23.0776%" y="85" width="0.1456%" height="15" fill="rgb(233,36,39)"/><text x="23.3276%" y="95.50"></text></g><g><title>coherent_trait (22,272,796 samples, 0.55%)</title><rect x="22.7245%" y="133" width="0.5531%" height="15" fill="rgb(226,3,54)"/><text x="22.9745%" y="143.50"></text></g><g><title>specialization_graph_of (21,664,310 samples, 0.54%)</title><rect x="22.7396%" y="117" width="0.5380%" height="15" fill="rgb(245,192,40)"/><text x="22.9896%" y="127.50"></text></g><g><title>coherence_checking (22,834,111 samples, 0.57%)</title><rect x="22.7234%" y="149" width="0.5670%" height="15" fill="rgb(238,167,29)"/><text x="22.9734%" y="159.50"></text></g><g><title>evaluate_obligation (19,547,269 samples, 0.49%)</title><rect x="28.3751%" y="101" width="0.4854%" height="15" fill="rgb(232,182,51)"/><text x="28.6251%" y="111.50"></text></g><g><title>evaluate_obligation (5,754,322 samples, 0.14%)</title><rect x="44.3829%" y="85" width="0.1429%" height="15" fill="rgb(231,60,39)"/><text x="44.6329%" y="95.50"></text></g><g><title>typeck (628,917,192 samples, 15.62%)</title><rect x="29.0379%" y="101" width="15.6170%" height="15" fill="rgb(208,69,12)"/><text x="29.2879%" y="111.50">typeck</text></g><g><title>item_bodies_checking (860,172,704 samples, 21.36%)</title><rect x="23.3036%" y="149" width="21.3595%" height="15" fill="rgb(235,93,37)"/><text x="23.5536%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (860,168,714 samples, 21.36%)</title><rect x="23.3037%" y="133" width="21.3594%" height="15" fill="rgb(213,116,39)"/><text x="23.5537%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (858,160,337 samples, 21.31%)</title><rect x="23.3535%" y="117" width="21.3095%" height="15" fill="rgb(222,207,29)"/><text x="23.6035%" y="127.50">typeck</text></g><g><title>evaluate_obligation (7,865,649 samples, 0.20%)</title><rect x="45.1635%" y="101" width="0.1953%" height="15" fill="rgb(206,96,30)"/><text x="45.4135%" y="111.50"></text></g><g><title>item_types_checking (28,351,307 samples, 0.70%)</title><rect x="44.6630%" y="149" width="0.7040%" height="15" fill="rgb(218,138,4)"/><text x="44.9130%" y="159.50"></text></g><g><title>check_mod_item_types (28,325,915 samples, 0.70%)</title><rect x="44.6637%" y="133" width="0.7034%" height="15" fill="rgb(250,191,14)"/><text x="44.9137%" y="143.50"></text></g><g><title>typeck (14,446,994 samples, 0.36%)</title><rect x="45.0083%" y="117" width="0.3587%" height="15" fill="rgb(239,60,40)"/><text x="45.2583%" y="127.50"></text></g><g><title>generics_of (5,877,821 samples, 0.15%)</title><rect x="45.5273%" y="117" width="0.1460%" height="15" fill="rgb(206,27,48)"/><text x="45.7773%" y="127.50"></text></g><g><title>predicates_of (5,120,136 samples, 0.13%)</title><rect x="45.6855%" y="117" width="0.1271%" height="15" fill="rgb(225,35,8)"/><text x="45.9355%" y="127.50"></text></g><g><title>predicates_defined_on (4,470,671 samples, 0.11%)</title><rect x="45.7016%" y="101" width="0.1110%" height="15" fill="rgb(250,213,24)"/><text x="45.9516%" y="111.50"></text></g><g><title>type_collecting (18,947,902 samples, 0.47%)</title><rect x="45.3674%" y="149" width="0.4705%" height="15" fill="rgb(247,123,22)"/><text x="45.6174%" y="159.50"></text></g><g><title>collect_mod_item_types (18,918,742 samples, 0.47%)</title><rect x="45.3681%" y="133" width="0.4698%" height="15" fill="rgb(231,138,38)"/><text x="45.6181%" y="143.50"></text></g><g><title>region_scope_tree (4,262,169 samples, 0.11%)</title><rect x="46.6845%" y="117" width="0.1058%" height="15" fill="rgb(231,145,46)"/><text x="46.9345%" y="127.50"></text></g><g><title>check_impl_item_well_formed (35,760,170 samples, 0.89%)</title><rect x="45.9033%" y="133" width="0.8880%" height="15" fill="rgb(251,118,11)"/><text x="46.1533%" y="143.50"></text></g><g><title>check_item_well_formed (28,553,999 samples, 0.71%)</title><rect x="46.7913%" y="133" width="0.7090%" height="15" fill="rgb(217,147,25)"/><text x="47.0413%" y="143.50"></text></g><g><title>analysis (1,635,260,357 samples, 40.61%)</title><rect x="6.9032%" y="181" width="40.6061%" height="15" fill="rgb(247,81,37)"/><text x="7.1532%" y="191.50">analysis</text></g><g><title>type_check_crate (999,134,638 samples, 24.81%)</title><rect x="22.6992%" y="165" width="24.8101%" height="15" fill="rgb(209,12,38)"/><text x="22.9492%" y="175.50">type_check_crate</text></g><g><title>wf_checking (67,198,799 samples, 1.67%)</title><rect x="45.8407%" y="149" width="1.6687%" height="15" fill="rgb(227,1,9)"/><text x="46.0907%" y="159.50"></text></g><g><title>param_env (7,572,623 samples, 0.19%)</title><rect x="52.7279%" y="133" width="0.1880%" height="15" fill="rgb(248,47,43)"/><text x="52.9779%" y="143.50"></text></g><g><title>fn_abi_of_instance (23,422,287 samples, 0.58%)</title><rect x="52.4182%" y="149" width="0.5816%" height="15" fill="rgb(221,10,30)"/><text x="52.6682%" y="159.50"></text></g><g><title>codegen_module (226,500,773 samples, 5.62%)</title><rect x="47.5737%" y="165" width="5.6244%" height="15" fill="rgb(210,229,1)"/><text x="47.8237%" y="175.50">codegen..</text></g><g><title>codegen_crate (229,180,917 samples, 5.69%)</title><rect x="47.5096%" y="181" width="5.6909%" height="15" fill="rgb(222,148,37)"/><text x="47.7596%" y="191.50">codegen..</text></g><g><title>LLVM_module_codegen (1,061,474,009 samples, 26.36%)</title><rect x="53.2073%" y="165" width="26.3581%" height="15" fill="rgb(234,67,33)"/><text x="53.4573%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,012,330,942 samples, 25.14%)</title><rect x="54.4276%" y="149" width="25.1378%" height="15" fill="rgb(247,98,35)"/><text x="54.6776%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,103,634,824 samples, 27.41%)</title><rect x="53.2005%" y="181" width="27.4050%" height="15" fill="rgb(247,138,52)"/><text x="53.4505%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (41,888,713 samples, 1.04%)</title><rect x="79.5654%" y="165" width="1.0402%" height="15" fill="rgb(213,79,30)"/><text x="79.8154%" y="175.50"></text></g><g><title>macro_expand_crate (205,134,173 samples, 5.09%)</title><rect x="80.7394%" y="165" width="5.0938%" height="15" fill="rgb(246,177,23)"/><text x="80.9894%" y="175.50">macro_..</text></g><g><title>expand_crate (205,102,483 samples, 5.09%)</title><rect x="80.7402%" y="149" width="5.0930%" height="15" fill="rgb(230,62,27)"/><text x="80.9902%" y="159.50">expand..</text></g><g><title>late_resolve_crate (17,280,945 samples, 0.43%)</title><rect x="85.8934%" y="149" width="0.4291%" height="15" fill="rgb(216,154,8)"/><text x="86.1434%" y="159.50"></text></g><g><title>configure_and_expand (233,894,133 samples, 5.81%)</title><rect x="80.6055%" y="181" width="5.8080%" height="15" fill="rgb(244,35,45)"/><text x="80.8555%" y="191.50">configu..</text></g><g><title>resolve_crate (23,255,215 samples, 0.58%)</title><rect x="85.8360%" y="165" width="0.5775%" height="15" fill="rgb(251,115,12)"/><text x="86.0860%" y="175.50"></text></g><g><title>drop_ast (23,702,320 samples, 0.59%)</title><rect x="86.4135%" y="181" width="0.5886%" height="15" fill="rgb(240,54,50)"/><text x="86.6635%" y="191.50"></text></g><g><title>early_lint_checks (7,207,643 samples, 0.18%)</title><rect x="87.0027%" y="181" width="0.1790%" height="15" fill="rgb(233,84,52)"/><text x="87.2527%" y="191.50"></text></g><g><title>free_global_ctxt (32,995,633 samples, 0.82%)</title><rect x="87.1817%" y="181" width="0.8193%" height="15" fill="rgb(207,117,47)"/><text x="87.4317%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,176,928 samples, 0.13%)</title><rect x="90.6913%" y="85" width="0.1286%" height="15" fill="rgb(249,43,39)"/><text x="90.9413%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (164,901,637 samples, 4.09%)</title><rect x="90.8199%" y="85" width="4.0948%" height="15" fill="rgb(209,38,44)"/><text x="91.0699%" y="95.50">mir_..</text></g><g><title>optimized_mir (247,756,291 samples, 6.15%)</title><rect x="88.7895%" y="101" width="6.1522%" height="15" fill="rgb(236,212,23)"/><text x="89.0395%" y="111.50">optimize..</text></g><g><title>codegen_fulfill_obligation (9,305,458 samples, 0.23%)</title><rect x="95.0152%" y="85" width="0.2311%" height="15" fill="rgb(242,79,21)"/><text x="95.2652%" y="95.50"></text></g><g><title>resolve_instance (15,748,844 samples, 0.39%)</title><rect x="94.9417%" y="101" width="0.3911%" height="15" fill="rgb(211,96,35)"/><text x="95.1917%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (283,834,929 samples, 7.05%)</title><rect x="88.4559%" y="117" width="7.0481%" height="15" fill="rgb(253,215,40)"/><text x="88.7059%" y="127.50">monomorph..</text></g><g><title>monomorphization_collector (284,281,533 samples, 7.06%)</title><rect x="88.4557%" y="133" width="7.0592%" height="15" fill="rgb(211,81,21)"/><text x="88.7057%" y="143.50">monomorph..</text></g><g><title>assert_symbols_are_distinct (6,365,455 samples, 0.16%)</title><rect x="95.5155%" y="117" width="0.1581%" height="15" fill="rgb(208,190,38)"/><text x="95.7655%" y="127.50"></text></g><g><title>symbol_name (5,724,600 samples, 0.14%)</title><rect x="95.5314%" y="101" width="0.1422%" height="15" fill="rgb(235,213,38)"/><text x="95.7814%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (293,718,599 samples, 7.29%)</title><rect x="88.4538%" y="149" width="7.2935%" height="15" fill="rgb(237,122,38)"/><text x="88.7038%" y="159.50">collect_an..</text></g><g><title>partition_and_assert_distinct_symbols (9,358,965 samples, 0.23%)</title><rect x="95.5149%" y="133" width="0.2324%" height="15" fill="rgb(244,218,35)"/><text x="95.7649%" y="143.50"></text></g><g><title>exported_symbols (295,673,328 samples, 7.34%)</title><rect x="88.4468%" y="165" width="7.3420%" height="15" fill="rgb(240,68,47)"/><text x="88.6968%" y="175.50">exported_s..</text></g><g><title>layout_of (4,768,112 samples, 0.12%)</title><rect x="96.4345%" y="149" width="0.1184%" height="15" fill="rgb(210,16,53)"/><text x="96.6845%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (30,763,565 samples, 0.76%)</title><rect x="96.5529%" y="149" width="0.7639%" height="15" fill="rgb(235,124,12)"/><text x="96.8029%" y="159.50"></text></g><g><title>optimized_mir (60,778,465 samples, 1.51%)</title><rect x="95.8260%" y="165" width="1.5092%" height="15" fill="rgb(224,169,11)"/><text x="96.0760%" y="175.50"></text></g><g><title>generate_crate_metadata (376,764,587 samples, 9.36%)</title><rect x="88.0010%" y="181" width="9.3557%" height="15" fill="rgb(250,166,2)"/><text x="88.2510%" y="191.50">generate_crat..</text></g><g><title>hir_lowering (44,386,359 samples, 1.10%)</title><rect x="97.3567%" y="181" width="1.1022%" height="15" fill="rgb(242,216,29)"/><text x="97.6067%" y="191.50"></text></g><g><title>finish_ongoing_codegen (47,996,656 samples, 1.19%)</title><rect x="98.4593%" y="165" width="1.1918%" height="15" fill="rgb(230,116,27)"/><text x="98.7093%" y="175.50"></text></g><g><title>link_crate (6,763,318 samples, 0.17%)</title><rect x="99.6512%" y="165" width="0.1679%" height="15" fill="rgb(228,99,48)"/><text x="99.9012%" y="175.50"></text></g><g><title>link_binary (6,625,797 samples, 0.16%)</title><rect x="99.6546%" y="149" width="0.1645%" height="15" fill="rgb(253,11,6)"/><text x="99.9046%" y="159.50"></text></g><g><title>link_rlib (5,512,356 samples, 0.14%)</title><rect x="99.6822%" y="133" width="0.1369%" height="15" fill="rgb(247,143,39)"/><text x="99.9322%" y="143.50"></text></g><g><title>link (54,789,994 samples, 1.36%)</title><rect x="98.4588%" y="181" width="1.3605%" height="15" fill="rgb(236,97,10)"/><text x="98.7088%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,435,805 samples, 0.11%)</title><rect x="99.8492%" y="181" width="0.1101%" height="15" fill="rgb(233,208,19)"/><text x="100.0992%" y="191.50"></text></g><g><title>all (4,027,125,042 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (4,027,125,042 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>