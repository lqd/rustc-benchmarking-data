<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (40,218,613 samples, 18.43%)</title><rect x="0.3098%" y="181" width="18.4322%" height="15" fill="rgb(227,0,7)"/><text x="0.5598%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (331,833 samples, 0.15%)</title><rect x="23.5914%" y="53" width="0.1521%" height="15" fill="rgb(217,0,24)"/><text x="23.8414%" y="63.50"></text></g><g><title>evaluate_obligation (299,453 samples, 0.14%)</title><rect x="23.6062%" y="37" width="0.1372%" height="15" fill="rgb(221,193,54)"/><text x="23.8562%" y="47.50"></text></g><g><title>thir_body (719,287 samples, 0.33%)</title><rect x="23.7932%" y="53" width="0.3296%" height="15" fill="rgb(248,212,6)"/><text x="24.0432%" y="63.50"></text></g><g><title>mir_const (3,837,471 samples, 1.76%)</title><rect x="22.3697%" y="101" width="1.7587%" height="15" fill="rgb(208,68,35)"/><text x="22.6197%" y="111.50"></text></g><g><title>unsafety_check_result (3,217,262 samples, 1.47%)</title><rect x="22.6539%" y="85" width="1.4745%" height="15" fill="rgb(232,128,0)"/><text x="22.9039%" y="95.50"></text></g><g><title>mir_built (2,863,517 samples, 1.31%)</title><rect x="22.8160%" y="69" width="1.3123%" height="15" fill="rgb(207,160,47)"/><text x="23.0660%" y="79.50"></text></g><g><title>mir_promoted (5,296,514 samples, 2.43%)</title><rect x="21.7478%" y="133" width="2.4274%" height="15" fill="rgb(228,23,34)"/><text x="21.9978%" y="143.50">mi..</text></g><g><title>mir_const_qualif (4,637,480 samples, 2.13%)</title><rect x="22.0498%" y="117" width="2.1254%" height="15" fill="rgb(218,30,26)"/><text x="22.2998%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (451,593 samples, 0.21%)</title><rect x="24.2215%" y="133" width="0.2070%" height="15" fill="rgb(220,122,19)"/><text x="24.4715%" y="143.50"></text></g><g><title>MIR_borrow_checking (12,000,190 samples, 5.50%)</title><rect x="18.9296%" y="165" width="5.4997%" height="15" fill="rgb(250,228,42)"/><text x="19.1796%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (11,905,890 samples, 5.46%)</title><rect x="18.9728%" y="149" width="5.4565%" height="15" fill="rgb(240,193,28)"/><text x="19.2228%" y="159.50">mir_bor..</text></g><g><title>MIR_effect_checking (1,639,177 samples, 0.75%)</title><rect x="24.4293%" y="165" width="0.7512%" height="15" fill="rgb(216,20,37)"/><text x="24.6793%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,575,477 samples, 0.72%)</title><rect x="24.4585%" y="149" width="0.7220%" height="15" fill="rgb(206,188,39)"/><text x="24.7085%" y="159.50"></text></g><g><title>hir_module_items (249,171 samples, 0.11%)</title><rect x="25.1805%" y="165" width="0.1142%" height="15" fill="rgb(217,207,13)"/><text x="25.4305%" y="175.50"></text></g><g><title>codegen_fn_attrs (313,283 samples, 0.14%)</title><rect x="25.4429%" y="133" width="0.1436%" height="15" fill="rgb(231,73,38)"/><text x="25.6929%" y="143.50"></text></g><g><title>check_mod_attrs (586,575 samples, 0.27%)</title><rect x="25.3177%" y="149" width="0.2688%" height="15" fill="rgb(225,20,46)"/><text x="25.5677%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (252,094 samples, 0.12%)</title><rect x="25.7017%" y="149" width="0.1155%" height="15" fill="rgb(210,31,41)"/><text x="25.9517%" y="159.50"></text></g><g><title>misc_checking_1 (1,203,922 samples, 0.55%)</title><rect x="25.2948%" y="165" width="0.5518%" height="15" fill="rgb(221,200,47)"/><text x="25.5448%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (278,713 samples, 0.13%)</title><rect x="25.8473%" y="149" width="0.1277%" height="15" fill="rgb(226,26,5)"/><text x="26.0973%" y="159.50"></text></g><g><title>check_mod_liveness (222,792 samples, 0.10%)</title><rect x="25.8729%" y="133" width="0.1021%" height="15" fill="rgb(249,33,26)"/><text x="26.1229%" y="143.50"></text></g><g><title>misc_checking_2 (507,005 samples, 0.23%)</title><rect x="25.8466%" y="165" width="0.2324%" height="15" fill="rgb(235,183,28)"/><text x="26.0966%" y="175.50"></text></g><g><title>match_checking (226,852 samples, 0.10%)</title><rect x="25.9750%" y="149" width="0.1040%" height="15" fill="rgb(221,5,38)"/><text x="26.2250%" y="159.50"></text></g><g><title>crate_lints (1,013,370 samples, 0.46%)</title><rect x="26.2073%" y="133" width="0.4644%" height="15" fill="rgb(247,18,42)"/><text x="26.4573%" y="143.50"></text></g><g><title>type_of (467,855 samples, 0.21%)</title><rect x="26.4573%" y="117" width="0.2144%" height="15" fill="rgb(241,131,45)"/><text x="26.7073%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (386,955 samples, 0.18%)</title><rect x="26.4944%" y="101" width="0.1773%" height="15" fill="rgb(249,31,29)"/><text x="26.7444%" y="111.50"></text></g><g><title>lint_checking (1,204,592 samples, 0.55%)</title><rect x="26.2067%" y="149" width="0.5521%" height="15" fill="rgb(225,111,53)"/><text x="26.4567%" y="159.50"></text></g><g><title>privacy_checking_modules (259,352 samples, 0.12%)</title><rect x="26.8051%" y="149" width="0.1189%" height="15" fill="rgb(238,160,17)"/><text x="27.0551%" y="159.50"></text></g><g><title>check_mod_privacy (255,932 samples, 0.12%)</title><rect x="26.8067%" y="133" width="0.1173%" height="15" fill="rgb(214,148,48)"/><text x="27.0567%" y="143.50"></text></g><g><title>misc_checking_3 (1,856,588 samples, 0.85%)</title><rect x="26.0790%" y="165" width="0.8509%" height="15" fill="rgb(232,36,49)"/><text x="26.3290%" y="175.50"></text></g><g><title>associated_item (564,257 samples, 0.26%)</title><rect x="32.8814%" y="85" width="0.2586%" height="15" fill="rgb(209,103,24)"/><text x="33.1314%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (457,156 samples, 0.21%)</title><rect x="32.9305%" y="69" width="0.2095%" height="15" fill="rgb(229,88,8)"/><text x="33.1805%" y="79.50"></text></g><g><title>associated_items (745,757 samples, 0.34%)</title><rect x="32.8054%" y="101" width="0.3418%" height="15" fill="rgb(213,181,19)"/><text x="33.0554%" y="111.50"></text></g><g><title>generics_of (501,064 samples, 0.23%)</title><rect x="34.4802%" y="85" width="0.2296%" height="15" fill="rgb(254,191,54)"/><text x="34.7302%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (392,273 samples, 0.18%)</title><rect x="34.5301%" y="69" width="0.1798%" height="15" fill="rgb(241,83,37)"/><text x="34.7801%" y="79.50"></text></g><g><title>impl_trait_ref (715,874 samples, 0.33%)</title><rect x="34.8104%" y="85" width="0.3281%" height="15" fill="rgb(233,36,39)"/><text x="35.0604%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (611,133 samples, 0.28%)</title><rect x="34.8584%" y="69" width="0.2801%" height="15" fill="rgb(226,3,54)"/><text x="35.1084%" y="79.50"></text></g><g><title>predicates_of (642,708 samples, 0.29%)</title><rect x="35.1616%" y="85" width="0.2946%" height="15" fill="rgb(245,192,40)"/><text x="35.4116%" y="95.50"></text></g><g><title>predicates_defined_on (376,833 samples, 0.17%)</title><rect x="35.2835%" y="69" width="0.1727%" height="15" fill="rgb(238,167,29)"/><text x="35.5335%" y="79.50"></text></g><g><title>specializes (1,837,200 samples, 0.84%)</title><rect x="35.4562%" y="85" width="0.8420%" height="15" fill="rgb(232,182,51)"/><text x="35.7062%" y="95.50"></text></g><g><title>param_env (1,105,623 samples, 0.51%)</title><rect x="35.7915%" y="69" width="0.5067%" height="15" fill="rgb(231,60,39)"/><text x="36.0415%" y="79.50"></text></g><g><title>def_span (473,124 samples, 0.22%)</title><rect x="36.0814%" y="53" width="0.2168%" height="15" fill="rgb(208,69,12)"/><text x="36.3314%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (415,404 samples, 0.19%)</title><rect x="36.1078%" y="37" width="0.1904%" height="15" fill="rgb(235,93,37)"/><text x="36.3578%" y="47.50"></text></g><g><title>trait_impls_of (246,242 samples, 0.11%)</title><rect x="36.3052%" y="85" width="0.1129%" height="15" fill="rgb(213,116,39)"/><text x="36.5552%" y="95.50"></text></g><g><title>evaluate_obligation (7,086,721 samples, 3.25%)</title><rect x="33.1805%" y="101" width="3.2478%" height="15" fill="rgb(222,207,29)"/><text x="33.4305%" y="111.50">eva..</text></g><g><title>generics_of (264,222 samples, 0.12%)</title><rect x="36.4552%" y="101" width="0.1211%" height="15" fill="rgb(206,96,30)"/><text x="36.7052%" y="111.50"></text></g><g><title>impl_trait_ref (322,255 samples, 0.15%)</title><rect x="36.6037%" y="101" width="0.1477%" height="15" fill="rgb(218,138,4)"/><text x="36.8537%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (266,183 samples, 0.12%)</title><rect x="36.6294%" y="85" width="0.1220%" height="15" fill="rgb(250,191,14)"/><text x="36.8794%" y="95.50"></text></g><g><title>item_bodies_checking (21,885,690 samples, 10.03%)</title><rect x="27.0640%" y="149" width="10.0302%" height="15" fill="rgb(239,60,40)"/><text x="27.3140%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (21,883,950 samples, 10.03%)</title><rect x="27.0648%" y="133" width="10.0294%" height="15" fill="rgb(206,27,48)"/><text x="27.3148%" y="143.50">typeck_item_bo..</text></g><g><title>typeck (21,816,279 samples, 10.00%)</title><rect x="27.0958%" y="117" width="9.9984%" height="15" fill="rgb(225,35,8)"/><text x="27.3458%" y="127.50">typeck</text></g><g><title>fn_sig (290,616 samples, 0.13%)</title><rect x="37.2846%" y="117" width="0.1332%" height="15" fill="rgb(250,213,24)"/><text x="37.5346%" y="127.50"></text></g><g><title>named_region_map (452,005 samples, 0.21%)</title><rect x="37.5567%" y="101" width="0.2072%" height="15" fill="rgb(247,123,22)"/><text x="37.8067%" y="111.50"></text></g><g><title>resolve_lifetimes (406,375 samples, 0.19%)</title><rect x="37.5776%" y="85" width="0.1862%" height="15" fill="rgb(231,138,38)"/><text x="37.8276%" y="95.50"></text></g><g><title>generics_of (785,208 samples, 0.36%)</title><rect x="37.4178%" y="117" width="0.3599%" height="15" fill="rgb(231,145,46)"/><text x="37.6678%" y="127.50"></text></g><g><title>predicates_of (651,525 samples, 0.30%)</title><rect x="37.7791%" y="117" width="0.2986%" height="15" fill="rgb(251,118,11)"/><text x="38.0291%" y="127.50"></text></g><g><title>predicates_defined_on (599,605 samples, 0.27%)</title><rect x="37.8029%" y="101" width="0.2748%" height="15" fill="rgb(217,147,25)"/><text x="38.0529%" y="111.50"></text></g><g><title>inferred_outlives_of (300,553 samples, 0.14%)</title><rect x="37.9399%" y="85" width="0.1377%" height="15" fill="rgb(247,81,37)"/><text x="38.1899%" y="95.50"></text></g><g><title>inferred_outlives_crate (274,553 samples, 0.13%)</title><rect x="37.9518%" y="69" width="0.1258%" height="15" fill="rgb(209,12,38)"/><text x="38.2018%" y="79.50"></text></g><g><title>type_collecting (2,190,033 samples, 1.00%)</title><rect x="37.1353%" y="149" width="1.0037%" height="15" fill="rgb(227,1,9)"/><text x="37.3853%" y="159.50"></text></g><g><title>collect_mod_item_types (2,162,062 samples, 0.99%)</title><rect x="37.1481%" y="133" width="0.9909%" height="15" fill="rgb(248,47,43)"/><text x="37.3981%" y="143.50"></text></g><g><title>evaluate_obligation (355,744 samples, 0.16%)</title><rect x="38.9783%" y="117" width="0.1630%" height="15" fill="rgb(221,10,30)"/><text x="39.2283%" y="127.50"></text></g><g><title>param_env (253,790 samples, 0.12%)</title><rect x="39.2344%" y="117" width="0.1163%" height="15" fill="rgb(210,229,1)"/><text x="39.4844%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,782,678 samples, 1.28%)</title><rect x="38.2150%" y="133" width="1.2753%" height="15" fill="rgb(222,148,37)"/><text x="38.4650%" y="143.50"></text></g><g><title>region_scope_tree (304,535 samples, 0.14%)</title><rect x="39.3508%" y="117" width="0.1396%" height="15" fill="rgb(234,67,33)"/><text x="39.6008%" y="127.50"></text></g><g><title>evaluate_obligation (218,633 samples, 0.10%)</title><rect x="39.6974%" y="117" width="0.1002%" height="15" fill="rgb(247,98,35)"/><text x="39.9474%" y="127.50"></text></g><g><title>analysis (46,303,785 samples, 21.22%)</title><rect x="18.7420%" y="181" width="21.2210%" height="15" fill="rgb(247,138,52)"/><text x="18.9920%" y="191.50">analysis</text></g><g><title>type_check_crate (28,438,067 samples, 13.03%)</title><rect x="26.9298%" y="165" width="13.0332%" height="15" fill="rgb(213,79,30)"/><text x="27.1798%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,976,161 samples, 1.82%)</title><rect x="38.1407%" y="149" width="1.8223%" height="15" fill="rgb(246,177,23)"/><text x="38.3907%" y="159.50">w..</text></g><g><title>check_item_well_formed (1,031,332 samples, 0.47%)</title><rect x="39.4903%" y="133" width="0.4727%" height="15" fill="rgb(230,62,27)"/><text x="39.7403%" y="143.50"></text></g><g><title>const_caller_location (411,943 samples, 0.19%)</title><rect x="42.8610%" y="149" width="0.1888%" height="15" fill="rgb(216,154,8)"/><text x="43.1110%" y="159.50"></text></g><g><title>fn_abi_of_instance (349,853 samples, 0.16%)</title><rect x="43.0498%" y="149" width="0.1603%" height="15" fill="rgb(244,35,45)"/><text x="43.2998%" y="159.50"></text></g><g><title>codegen_module (6,331,674 samples, 2.90%)</title><rect x="40.3333%" y="165" width="2.9018%" height="15" fill="rgb(251,115,12)"/><text x="40.5833%" y="175.50">co..</text></g><g><title>codegen_crate (7,154,142 samples, 3.28%)</title><rect x="39.9673%" y="181" width="3.2787%" height="15" fill="rgb(240,54,50)"/><text x="40.2173%" y="191.50">cod..</text></g><g><title>LLVM_module_codegen (57,818,660 samples, 26.50%)</title><rect x="43.2648%" y="165" width="26.4983%" height="15" fill="rgb(233,84,52)"/><text x="43.5148%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (56,432,946 samples, 25.86%)</title><rect x="43.8998%" y="149" width="25.8632%" height="15" fill="rgb(207,117,47)"/><text x="44.1498%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (60,759,090 samples, 27.85%)</title><rect x="43.2460%" y="181" width="27.8459%" height="15" fill="rgb(249,43,39)"/><text x="43.4960%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,899,590 samples, 1.33%)</title><rect x="69.7630%" y="165" width="1.3289%" height="15" fill="rgb(209,38,44)"/><text x="70.0130%" y="175.50"></text></g><g><title>macro_expand_crate (12,222,532 samples, 5.60%)</title><rect x="71.3187%" y="165" width="5.6016%" height="15" fill="rgb(236,212,23)"/><text x="71.5687%" y="175.50">macro_e..</text></g><g><title>expand_crate (12,201,302 samples, 5.59%)</title><rect x="71.3285%" y="149" width="5.5919%" height="15" fill="rgb(242,79,21)"/><text x="71.5785%" y="159.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (287,811 samples, 0.13%)</title><rect x="76.7884%" y="133" width="0.1319%" height="15" fill="rgb(211,96,35)"/><text x="77.0384%" y="143.50"></text></g><g><title>finalize_imports (329,763 samples, 0.15%)</title><rect x="76.9670%" y="149" width="0.1511%" height="15" fill="rgb(253,215,40)"/><text x="77.2170%" y="159.50"></text></g><g><title>late_resolve_crate (1,489,875 samples, 0.68%)</title><rect x="77.1222%" y="149" width="0.6828%" height="15" fill="rgb(211,81,21)"/><text x="77.3722%" y="159.50"></text></g><g><title>configure_and_expand (14,793,339 samples, 6.78%)</title><rect x="71.0919%" y="181" width="6.7798%" height="15" fill="rgb(208,190,38)"/><text x="71.3419%" y="191.50">configure..</text></g><g><title>resolve_crate (1,983,560 samples, 0.91%)</title><rect x="76.9626%" y="165" width="0.9091%" height="15" fill="rgb(235,213,38)"/><text x="77.2126%" y="175.50"></text></g><g><title>early_lint_checks (395,554 samples, 0.18%)</title><rect x="77.9547%" y="181" width="0.1813%" height="15" fill="rgb(237,122,38)"/><text x="78.2047%" y="191.50"></text></g><g><title>free_global_ctxt (2,467,895 samples, 1.13%)</title><rect x="78.1360%" y="181" width="1.1310%" height="15" fill="rgb(244,218,35)"/><text x="78.3860%" y="191.50"></text></g><g><title>layout_of (234,945 samples, 0.11%)</title><rect x="80.7106%" y="85" width="0.1077%" height="15" fill="rgb(240,68,47)"/><text x="80.9606%" y="95.50"></text></g><g><title>optimized_mir (2,312,242 samples, 1.06%)</title><rect x="79.8270%" y="101" width="1.0597%" height="15" fill="rgb(210,16,53)"/><text x="80.0770%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (2,698,947 samples, 1.24%)</title><rect x="79.6654%" y="117" width="1.2369%" height="15" fill="rgb(235,124,12)"/><text x="79.9154%" y="127.50"></text></g><g><title>monomorphization_collector (2,772,998 samples, 1.27%)</title><rect x="79.6644%" y="133" width="1.2709%" height="15" fill="rgb(224,169,11)"/><text x="79.9144%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (223,463 samples, 0.10%)</title><rect x="80.9365%" y="117" width="0.1024%" height="15" fill="rgb(250,166,2)"/><text x="81.1865%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (3,140,982 samples, 1.44%)</title><rect x="79.6546%" y="149" width="1.4395%" height="15" fill="rgb(242,216,29)"/><text x="79.9046%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (346,604 samples, 0.16%)</title><rect x="80.9353%" y="133" width="0.1588%" height="15" fill="rgb(230,116,27)"/><text x="81.1853%" y="143.50"></text></g><g><title>exported_symbols (3,226,673 samples, 1.48%)</title><rect x="79.6436%" y="165" width="1.4788%" height="15" fill="rgb(228,99,48)"/><text x="79.8936%" y="175.50"></text></g><g><title>mir_for_ctfe (235,173 samples, 0.11%)</title><rect x="81.1262%" y="165" width="0.1078%" height="15" fill="rgb(253,11,6)"/><text x="81.3762%" y="175.50"></text></g><g><title>generate_crate_metadata (4,355,083 samples, 2.00%)</title><rect x="79.2670%" y="181" width="1.9959%" height="15" fill="rgb(247,143,39)"/><text x="79.5170%" y="191.50">g..</text></g><g><title>hir_lowering (3,113,501 samples, 1.43%)</title><rect x="81.2630%" y="181" width="1.4269%" height="15" fill="rgb(236,97,10)"/><text x="81.5130%" y="191.50"></text></g><g><title>finish_ongoing_codegen (34,352,535 samples, 15.74%)</title><rect x="82.6952%" y="165" width="15.7438%" height="15" fill="rgb(233,208,19)"/><text x="82.9452%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (981,560 samples, 0.45%)</title><rect x="98.4390%" y="165" width="0.4498%" height="15" fill="rgb(216,164,2)"/><text x="98.6890%" y="175.50"></text></g><g><title>link_binary (934,850 samples, 0.43%)</title><rect x="98.4604%" y="149" width="0.4284%" height="15" fill="rgb(220,129,5)"/><text x="98.7104%" y="159.50"></text></g><g><title>link_rlib (626,037 samples, 0.29%)</title><rect x="98.6019%" y="133" width="0.2869%" height="15" fill="rgb(242,17,10)"/><text x="98.8519%" y="143.50"></text></g><g><title>link (35,352,425 samples, 16.20%)</title><rect x="82.6899%" y="181" width="16.2020%" height="15" fill="rgb(242,107,0)"/><text x="82.9399%" y="191.50">link</text></g><g><title>parse_crate (464,024 samples, 0.21%)</title><rect x="98.8919%" y="181" width="0.2127%" height="15" fill="rgb(251,28,31)"/><text x="99.1419%" y="191.50"></text></g><g><title>prepare_outputs (314,363 samples, 0.14%)</title><rect x="99.1086%" y="181" width="0.1441%" height="15" fill="rgb(233,223,10)"/><text x="99.3586%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,174,162 samples, 0.54%)</title><rect x="99.2526%" y="181" width="0.5381%" height="15" fill="rgb(215,21,27)"/><text x="99.5026%" y="191.50"></text></g><g><title>all (218,197,800 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (218,197,800 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (344,584 samples, 0.16%)</title><rect x="99.8421%" y="181" width="0.1579%" height="15" fill="rgb(226,81,46)"/><text x="100.0921%" y="191.50"></text></g></svg></svg>