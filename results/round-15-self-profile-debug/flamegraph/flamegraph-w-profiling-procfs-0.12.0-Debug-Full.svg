<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,177,298,172 samples, 12.05%)</title><rect x="0.0988%" y="181" width="12.0547%" height="15" fill="rgb(227,0,7)"/><text x="0.3488%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (13,293,233 samples, 0.14%)</title><rect x="19.1007%" y="69" width="0.1361%" height="15" fill="rgb(217,0,24)"/><text x="19.3507%" y="79.50"></text></g><g><title>thir_body (40,525,235 samples, 0.41%)</title><rect x="19.3144%" y="69" width="0.4150%" height="15" fill="rgb(221,193,54)"/><text x="19.5644%" y="79.50"></text></g><g><title>mir_const (201,280,780 samples, 2.06%)</title><rect x="17.6724%" y="117" width="2.0610%" height="15" fill="rgb(248,212,6)"/><text x="17.9224%" y="127.50">m..</text></g><g><title>unsafety_check_result (177,788,005 samples, 1.82%)</title><rect x="17.9130%" y="101" width="1.8204%" height="15" fill="rgb(208,68,35)"/><text x="18.1630%" y="111.50">u..</text></g><g><title>mir_built (162,125,725 samples, 1.66%)</title><rect x="18.0733%" y="85" width="1.6601%" height="15" fill="rgb(232,128,0)"/><text x="18.3233%" y="95.50"></text></g><g><title>mir_const (14,991,400 samples, 0.15%)</title><rect x="19.7940%" y="101" width="0.1535%" height="15" fill="rgb(207,160,47)"/><text x="20.0440%" y="111.50"></text></g><g><title>unsafety_check_result (11,606,540 samples, 0.12%)</title><rect x="19.8287%" y="85" width="0.1188%" height="15" fill="rgb(228,23,34)"/><text x="20.0787%" y="95.50"></text></g><g><title>mir_built (10,282,753 samples, 0.11%)</title><rect x="19.8423%" y="69" width="0.1053%" height="15" fill="rgb(218,30,26)"/><text x="20.0923%" y="79.50"></text></g><g><title>mir_const_qualif (21,226,492 samples, 0.22%)</title><rect x="19.7334%" y="117" width="0.2173%" height="15" fill="rgb(220,122,19)"/><text x="19.9834%" y="127.50"></text></g><g><title>mir_promoted (248,054,978 samples, 2.54%)</title><rect x="17.4108%" y="133" width="2.5399%" height="15" fill="rgb(250,228,42)"/><text x="17.6608%" y="143.50">mi..</text></g><g><title>type_op_prove_predicate (24,785,945 samples, 0.25%)</title><rect x="20.1083%" y="133" width="0.2538%" height="15" fill="rgb(240,193,28)"/><text x="20.3583%" y="143.50"></text></g><g><title>MIR_borrow_checking (794,521,362 samples, 8.14%)</title><rect x="12.2270%" y="165" width="8.1353%" height="15" fill="rgb(216,20,37)"/><text x="12.4770%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (791,202,964 samples, 8.10%)</title><rect x="12.2610%" y="149" width="8.1014%" height="15" fill="rgb(206,188,39)"/><text x="12.5110%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (11,273,800 samples, 0.12%)</title><rect x="20.4993%" y="149" width="0.1154%" height="15" fill="rgb(217,207,13)"/><text x="20.7493%" y="159.50"></text></g><g><title>misc_checking_1 (24,017,314 samples, 0.25%)</title><rect x="20.4984%" y="165" width="0.2459%" height="15" fill="rgb(231,73,38)"/><text x="20.7484%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (14,328,455 samples, 0.15%)</title><rect x="20.7444%" y="149" width="0.1467%" height="15" fill="rgb(225,20,46)"/><text x="20.9944%" y="159.50"></text></g><g><title>check_mod_liveness (11,525,527 samples, 0.12%)</title><rect x="20.7731%" y="133" width="0.1180%" height="15" fill="rgb(210,31,41)"/><text x="21.0231%" y="143.50"></text></g><g><title>misc_checking_2 (34,892,185 samples, 0.36%)</title><rect x="20.7443%" y="165" width="0.3573%" height="15" fill="rgb(221,200,47)"/><text x="20.9943%" y="175.50"></text></g><g><title>match_checking (20,558,829 samples, 0.21%)</title><rect x="20.8911%" y="149" width="0.2105%" height="15" fill="rgb(226,26,5)"/><text x="21.1411%" y="159.50"></text></g><g><title>check_match (19,578,929 samples, 0.20%)</title><rect x="20.9011%" y="133" width="0.2005%" height="15" fill="rgb(249,33,26)"/><text x="21.1511%" y="143.50"></text></g><g><title>death_checking (10,310,844 samples, 0.11%)</title><rect x="21.1755%" y="149" width="0.1056%" height="15" fill="rgb(235,183,28)"/><text x="21.4255%" y="159.50"></text></g><g><title>crate_lints (19,107,404 samples, 0.20%)</title><rect x="21.2811%" y="133" width="0.1956%" height="15" fill="rgb(221,5,38)"/><text x="21.5311%" y="143.50"></text></g><g><title>lint_checking (37,682,443 samples, 0.39%)</title><rect x="21.2811%" y="149" width="0.3858%" height="15" fill="rgb(247,18,42)"/><text x="21.5311%" y="159.50"></text></g><g><title>module_lints (18,571,399 samples, 0.19%)</title><rect x="21.4767%" y="133" width="0.1902%" height="15" fill="rgb(241,131,45)"/><text x="21.7267%" y="143.50"></text></g><g><title>lint_mod (18,542,659 samples, 0.19%)</title><rect x="21.4770%" y="117" width="0.1899%" height="15" fill="rgb(249,31,29)"/><text x="21.7270%" y="127.50"></text></g><g><title>privacy_checking_modules (29,274,667 samples, 0.30%)</title><rect x="21.7532%" y="149" width="0.2998%" height="15" fill="rgb(225,111,53)"/><text x="22.0032%" y="159.50"></text></g><g><title>check_mod_privacy (29,244,496 samples, 0.30%)</title><rect x="21.7535%" y="133" width="0.2994%" height="15" fill="rgb(238,160,17)"/><text x="22.0035%" y="143.50"></text></g><g><title>misc_checking_3 (93,193,327 samples, 0.95%)</title><rect x="21.1016%" y="165" width="0.9542%" height="15" fill="rgb(214,148,48)"/><text x="21.3516%" y="175.50"></text></g><g><title>coherent_trait (22,760,341 samples, 0.23%)</title><rect x="22.0709%" y="133" width="0.2331%" height="15" fill="rgb(232,36,49)"/><text x="22.3209%" y="143.50"></text></g><g><title>specialization_graph_of (22,074,464 samples, 0.23%)</title><rect x="22.0779%" y="117" width="0.2260%" height="15" fill="rgb(209,103,24)"/><text x="22.3279%" y="127.50"></text></g><g><title>coherence_checking (23,630,559 samples, 0.24%)</title><rect x="22.0703%" y="149" width="0.2420%" height="15" fill="rgb(229,88,8)"/><text x="22.3203%" y="159.50"></text></g><g><title>evaluate_obligation (27,359,438 samples, 0.28%)</title><rect x="31.3865%" y="101" width="0.2801%" height="15" fill="rgb(213,181,19)"/><text x="31.6365%" y="111.50"></text></g><g><title>typeck (228,502,366 samples, 2.34%)</title><rect x="31.7675%" y="101" width="2.3397%" height="15" fill="rgb(254,191,54)"/><text x="32.0175%" y="111.50">t..</text></g><g><title>item_bodies_checking (1,151,789,553 samples, 11.79%)</title><rect x="22.3204%" y="149" width="11.7935%" height="15" fill="rgb(241,83,37)"/><text x="22.5704%" y="159.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (1,151,785,463 samples, 11.79%)</title><rect x="22.3204%" y="133" width="11.7935%" height="15" fill="rgb(233,36,39)"/><text x="22.5704%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,148,029,734 samples, 11.76%)</title><rect x="22.3589%" y="117" width="11.7550%" height="15" fill="rgb(226,3,54)"/><text x="22.6089%" y="127.50">typeck</text></g><g><title>item_types_checking (16,094,593 samples, 0.16%)</title><rect x="34.1139%" y="149" width="0.1648%" height="15" fill="rgb(245,192,40)"/><text x="34.3639%" y="159.50"></text></g><g><title>check_mod_item_types (16,069,603 samples, 0.16%)</title><rect x="34.1141%" y="133" width="0.1645%" height="15" fill="rgb(238,167,29)"/><text x="34.3641%" y="143.50"></text></g><g><title>generics_of (15,451,164 samples, 0.16%)</title><rect x="34.4263%" y="117" width="0.1582%" height="15" fill="rgb(232,182,51)"/><text x="34.6763%" y="127.50"></text></g><g><title>type_collecting (39,418,100 samples, 0.40%)</title><rect x="34.2789%" y="149" width="0.4036%" height="15" fill="rgb(231,60,39)"/><text x="34.5289%" y="159.50"></text></g><g><title>collect_mod_item_types (39,379,879 samples, 0.40%)</title><rect x="34.2793%" y="133" width="0.4032%" height="15" fill="rgb(208,69,12)"/><text x="34.5293%" y="143.50"></text></g><g><title>region_scope_tree (10,765,496 samples, 0.11%)</title><rect x="35.0565%" y="117" width="0.1102%" height="15" fill="rgb(235,93,37)"/><text x="35.3065%" y="127.50"></text></g><g><title>check_impl_item_well_formed (43,438,472 samples, 0.44%)</title><rect x="34.7226%" y="133" width="0.4448%" height="15" fill="rgb(213,116,39)"/><text x="34.9726%" y="143.50"></text></g><g><title>check_item_well_formed (23,730,773 samples, 0.24%)</title><rect x="35.1673%" y="133" width="0.2430%" height="15" fill="rgb(222,207,29)"/><text x="35.4173%" y="143.50"></text></g><g><title>analysis (2,278,336,798 samples, 23.33%)</title><rect x="12.1535%" y="181" width="23.3286%" height="15" fill="rgb(206,96,30)"/><text x="12.4035%" y="191.50">analysis</text></g><g><title>type_check_crate (1,311,252,383 samples, 13.43%)</title><rect x="22.0558%" y="165" width="13.4263%" height="15" fill="rgb(218,138,4)"/><text x="22.3058%" y="175.50">type_check_crate</text></g><g><title>wf_checking (77,933,412 samples, 0.80%)</title><rect x="34.6841%" y="149" width="0.7980%" height="15" fill="rgb(250,191,14)"/><text x="34.9341%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (16,943,702 samples, 0.17%)</title><rect x="44.7379%" y="149" width="0.1735%" height="15" fill="rgb(239,60,40)"/><text x="44.9879%" y="159.50"></text></g><g><title>const_caller_location (11,368,225 samples, 0.12%)</title><rect x="44.9114%" y="149" width="0.1164%" height="15" fill="rgb(206,27,48)"/><text x="45.1614%" y="159.50"></text></g><g><title>param_env (21,056,840 samples, 0.22%)</title><rect x="45.4837%" y="133" width="0.2156%" height="15" fill="rgb(225,35,8)"/><text x="45.7337%" y="143.50"></text></g><g><title>fn_abi_of_instance (72,944,031 samples, 0.75%)</title><rect x="45.0310%" y="149" width="0.7469%" height="15" fill="rgb(250,213,24)"/><text x="45.2810%" y="159.50"></text></g><g><title>layout_of (13,486,427 samples, 0.14%)</title><rect x="45.8165%" y="149" width="0.1381%" height="15" fill="rgb(247,123,22)"/><text x="46.0665%" y="159.50"></text></g><g><title>codegen_module (1,024,301,364 samples, 10.49%)</title><rect x="35.5368%" y="165" width="10.4881%" height="15" fill="rgb(231,138,38)"/><text x="35.7868%" y="175.50">codegen_module</text></g><g><title>codegen_crate (1,029,790,873 samples, 10.54%)</title><rect x="35.4822%" y="181" width="10.5443%" height="15" fill="rgb(231,145,46)"/><text x="35.7322%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (3,877,124,782 samples, 39.70%)</title><rect x="46.0295%" y="165" width="39.6991%" height="15" fill="rgb(251,118,11)"/><text x="46.2795%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (3,643,160,910 samples, 37.30%)</title><rect x="48.4251%" y="149" width="37.3034%" height="15" fill="rgb(217,147,25)"/><text x="48.6751%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (4,049,085,420 samples, 41.46%)</title><rect x="46.0265%" y="181" width="41.4598%" height="15" fill="rgb(247,81,37)"/><text x="46.2765%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (171,671,003 samples, 1.76%)</title><rect x="85.7286%" y="165" width="1.7578%" height="15" fill="rgb(209,12,38)"/><text x="85.9786%" y="175.50"></text></g><g><title>macro_expand_crate (248,378,993 samples, 2.54%)</title><rect x="87.5790%" y="165" width="2.5432%" height="15" fill="rgb(227,1,9)"/><text x="87.8290%" y="175.50">ma..</text></g><g><title>expand_crate (248,357,313 samples, 2.54%)</title><rect x="87.5792%" y="149" width="2.5430%" height="15" fill="rgb(248,47,43)"/><text x="87.8292%" y="159.50">ex..</text></g><g><title>late_resolve_crate (44,961,077 samples, 0.46%)</title><rect x="90.1714%" y="149" width="0.4604%" height="15" fill="rgb(221,10,30)"/><text x="90.4214%" y="159.50"></text></g><g><title>configure_and_expand (313,947,310 samples, 3.21%)</title><rect x="87.4864%" y="181" width="3.2146%" height="15" fill="rgb(210,229,1)"/><text x="87.7364%" y="191.50">con..</text></g><g><title>resolve_crate (56,211,941 samples, 0.58%)</title><rect x="90.1254%" y="165" width="0.5756%" height="15" fill="rgb(222,148,37)"/><text x="90.3754%" y="175.50"></text></g><g><title>early_lint_checks (13,099,903 samples, 0.13%)</title><rect x="90.7841%" y="181" width="0.1341%" height="15" fill="rgb(234,67,33)"/><text x="91.0341%" y="191.50"></text></g><g><title>free_global_ctxt (65,130,481 samples, 0.67%)</title><rect x="90.9182%" y="181" width="0.6669%" height="15" fill="rgb(247,98,35)"/><text x="91.1682%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (13,620,074 samples, 0.14%)</title><rect x="93.1945%" y="85" width="0.1395%" height="15" fill="rgb(247,138,52)"/><text x="93.4445%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (81,589,282 samples, 0.84%)</title><rect x="93.3339%" y="85" width="0.8354%" height="15" fill="rgb(213,79,30)"/><text x="93.5839%" y="95.50"></text></g><g><title>eval_to_const_value_raw (18,527,842 samples, 0.19%)</title><rect x="94.1897%" y="69" width="0.1897%" height="15" fill="rgb(246,177,23)"/><text x="94.4397%" y="79.50"></text></g><g><title>eval_to_const_value_raw (18,038,004 samples, 0.18%)</title><rect x="94.1947%" y="53" width="0.1847%" height="15" fill="rgb(230,62,27)"/><text x="94.4447%" y="63.50"></text></g><g><title>eval_to_allocation_raw (17,227,332 samples, 0.18%)</title><rect x="94.2030%" y="37" width="0.1764%" height="15" fill="rgb(216,154,8)"/><text x="94.4530%" y="47.50"></text></g><g><title>optimized_mir (176,803,474 samples, 1.81%)</title><rect x="92.5699%" y="101" width="1.8103%" height="15" fill="rgb(244,35,45)"/><text x="92.8199%" y="111.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (20,208,246 samples, 0.21%)</title><rect x="94.1733%" y="85" width="0.2069%" height="15" fill="rgb(251,115,12)"/><text x="94.4233%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (40,028,697 samples, 0.41%)</title><rect x="94.5146%" y="85" width="0.4099%" height="15" fill="rgb(240,54,50)"/><text x="94.7646%" y="95.50"></text></g><g><title>resolve_instance (68,841,458 samples, 0.70%)</title><rect x="94.3802%" y="101" width="0.7049%" height="15" fill="rgb(233,84,52)"/><text x="94.6302%" y="111.50"></text></g><g><title>eval_to_const_value_raw (13,160,027 samples, 0.13%)</title><rect x="95.1554%" y="85" width="0.1347%" height="15" fill="rgb(207,117,47)"/><text x="95.4054%" y="95.50"></text></g><g><title>eval_to_const_value_raw (12,297,571 samples, 0.13%)</title><rect x="95.1642%" y="69" width="0.1259%" height="15" fill="rgb(249,43,39)"/><text x="95.4142%" y="79.50"></text></g><g><title>eval_to_allocation_raw (11,594,568 samples, 0.12%)</title><rect x="95.1714%" y="53" width="0.1187%" height="15" fill="rgb(209,38,44)"/><text x="95.4214%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (15,722,517 samples, 0.16%)</title><rect x="95.1332%" y="101" width="0.1610%" height="15" fill="rgb(236,212,23)"/><text x="95.3832%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (335,794,252 samples, 3.44%)</title><rect x="91.9273%" y="117" width="3.4383%" height="15" fill="rgb(242,79,21)"/><text x="92.1773%" y="127.50">mon..</text></g><g><title>monomorphization_collector (336,673,951 samples, 3.45%)</title><rect x="91.9272%" y="133" width="3.4473%" height="15" fill="rgb(211,96,35)"/><text x="92.1772%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (25,560,730 samples, 0.26%)</title><rect x="95.3747%" y="117" width="0.2617%" height="15" fill="rgb(253,215,40)"/><text x="95.6247%" y="127.50"></text></g><g><title>symbol_name (22,222,254 samples, 0.23%)</title><rect x="95.4089%" y="101" width="0.2275%" height="15" fill="rgb(211,81,21)"/><text x="95.6589%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (373,847,449 samples, 3.83%)</title><rect x="91.9257%" y="149" width="3.8279%" height="15" fill="rgb(208,190,38)"/><text x="92.1757%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (37,025,707 samples, 0.38%)</title><rect x="95.3745%" y="133" width="0.3791%" height="15" fill="rgb(235,213,38)"/><text x="95.6245%" y="143.50"></text></g><g><title>cgu_partitioning (11,448,596 samples, 0.12%)</title><rect x="95.6364%" y="117" width="0.1172%" height="15" fill="rgb(237,122,38)"/><text x="95.8864%" y="127.50"></text></g><g><title>exported_symbols (378,337,174 samples, 3.87%)</title><rect x="91.9120%" y="165" width="3.8739%" height="15" fill="rgb(244,218,35)"/><text x="92.1620%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (69,261,458 samples, 0.71%)</title><rect x="96.4012%" y="149" width="0.7092%" height="15" fill="rgb(240,68,47)"/><text x="96.6512%" y="159.50"></text></g><g><title>optimized_mir (134,550,170 samples, 1.38%)</title><rect x="95.8227%" y="165" width="1.3777%" height="15" fill="rgb(210,16,53)"/><text x="96.0727%" y="175.50"></text></g><g><title>generate_crate_metadata (553,674,416 samples, 5.67%)</title><rect x="91.5851%" y="181" width="5.6692%" height="15" fill="rgb(235,124,12)"/><text x="91.8351%" y="191.50">generat..</text></g><g><title>hir_lowering (91,592,751 samples, 0.94%)</title><rect x="97.2543%" y="181" width="0.9378%" height="15" fill="rgb(224,169,11)"/><text x="97.5043%" y="191.50"></text></g><g><title>finish_ongoing_codegen (143,230,295 samples, 1.47%)</title><rect x="98.1924%" y="165" width="1.4666%" height="15" fill="rgb(250,166,2)"/><text x="98.4424%" y="175.50"></text></g><g><title>link_crate (18,267,446 samples, 0.19%)</title><rect x="99.6590%" y="165" width="0.1870%" height="15" fill="rgb(242,216,29)"/><text x="99.9090%" y="175.50"></text></g><g><title>link_binary (17,880,202 samples, 0.18%)</title><rect x="99.6629%" y="149" width="0.1831%" height="15" fill="rgb(230,116,27)"/><text x="99.9129%" y="159.50"></text></g><g><title>link_rlib (15,498,577 samples, 0.16%)</title><rect x="99.6873%" y="133" width="0.1587%" height="15" fill="rgb(228,99,48)"/><text x="99.9373%" y="143.50"></text></g><g><title>link (161,530,371 samples, 1.65%)</title><rect x="98.1922%" y="181" width="1.6540%" height="15" fill="rgb(253,11,6)"/><text x="98.4422%" y="191.50"></text></g><g><title>all (9,766,286,920 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (9,766,286,920 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>