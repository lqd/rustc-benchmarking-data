<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,634,347 samples, 7.04%)</title><rect x="1.1178%" y="181" width="7.0393%" height="15" fill="rgb(227,0,7)"/><text x="1.3678%" y="191.50">LLVM_pass..</text></g><g><title>needs_drop_raw (182,871 samples, 0.23%)</title><rect x="12.6328%" y="69" width="0.2285%" height="15" fill="rgb(217,0,24)"/><text x="12.8828%" y="79.50"></text></g><g><title>is_copy_raw (156,361 samples, 0.20%)</title><rect x="12.6659%" y="53" width="0.1954%" height="15" fill="rgb(221,193,54)"/><text x="12.9159%" y="63.50"></text></g><g><title>evaluate_obligation (127,720 samples, 0.16%)</title><rect x="12.7017%" y="37" width="0.1596%" height="15" fill="rgb(248,212,6)"/><text x="12.9517%" y="47.50"></text></g><g><title>resolve_instance (93,070 samples, 0.12%)</title><rect x="12.8612%" y="69" width="0.1163%" height="15" fill="rgb(208,68,35)"/><text x="13.1112%" y="79.50"></text></g><g><title>thir_body (177,034 samples, 0.22%)</title><rect x="12.9890%" y="69" width="0.2212%" height="15" fill="rgb(232,128,0)"/><text x="13.2390%" y="79.50"></text></g><g><title>mir_const (1,489,485 samples, 1.86%)</title><rect x="11.4143%" y="117" width="1.8609%" height="15" fill="rgb(207,160,47)"/><text x="11.6643%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,204,473 samples, 1.50%)</title><rect x="11.7704%" y="101" width="1.5048%" height="15" fill="rgb(228,23,34)"/><text x="12.0204%" y="111.50"></text></g><g><title>mir_built (1,018,241 samples, 1.27%)</title><rect x="12.0031%" y="85" width="1.2721%" height="15" fill="rgb(218,30,26)"/><text x="12.2531%" y="95.50"></text></g><g><title>mir_promoted (1,697,256 samples, 2.12%)</title><rect x="11.1706%" y="133" width="2.1205%" height="15" fill="rgb(220,122,19)"/><text x="11.4206%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (325,535 samples, 0.41%)</title><rect x="13.2911%" y="133" width="0.4067%" height="15" fill="rgb(250,228,42)"/><text x="13.5411%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (88,471 samples, 0.11%)</title><rect x="13.6978%" y="133" width="0.1105%" height="15" fill="rgb(240,193,28)"/><text x="13.9478%" y="143.50"></text></g><g><title>type_op_normalize_ty (159,461 samples, 0.20%)</title><rect x="13.8565%" y="133" width="0.1992%" height="15" fill="rgb(216,20,37)"/><text x="14.1065%" y="143.50"></text></g><g><title>type_op_prove_predicate (466,886 samples, 0.58%)</title><rect x="14.0557%" y="133" width="0.5833%" height="15" fill="rgb(206,188,39)"/><text x="14.3057%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,948,879 samples, 6.18%)</title><rect x="8.4576%" y="165" width="6.1829%" height="15" fill="rgb(217,207,13)"/><text x="8.7076%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (4,925,218 samples, 6.15%)</title><rect x="8.4872%" y="149" width="6.1534%" height="15" fill="rgb(231,73,38)"/><text x="8.7372%" y="159.50">mir_borr..</text></g><g><title>hir_module_items (173,872 samples, 0.22%)</title><rect x="14.6491%" y="165" width="0.2172%" height="15" fill="rgb(225,20,46)"/><text x="14.8991%" y="175.50"></text></g><g><title>get_lang_items (80,161 samples, 0.10%)</title><rect x="15.2200%" y="117" width="0.1001%" height="15" fill="rgb(210,31,41)"/><text x="15.4700%" y="127.50"></text></g><g><title>codegen_fn_attrs (123,951 samples, 0.15%)</title><rect x="15.4651%" y="101" width="0.1549%" height="15" fill="rgb(221,200,47)"/><text x="15.7151%" y="111.50"></text></g><g><title>should_inherit_track_caller (246,592 samples, 0.31%)</title><rect x="15.3202%" y="117" width="0.3081%" height="15" fill="rgb(226,26,5)"/><text x="15.5702%" y="127.50"></text></g><g><title>codegen_fn_attrs (436,375 samples, 0.55%)</title><rect x="15.1269%" y="133" width="0.5452%" height="15" fill="rgb(249,33,26)"/><text x="15.3769%" y="143.50"></text></g><g><title>check_mod_attrs (616,196 samples, 0.77%)</title><rect x="14.9037%" y="149" width="0.7698%" height="15" fill="rgb(235,183,28)"/><text x="15.1537%" y="159.50"></text></g><g><title>check_mod_const_bodies (80,731 samples, 0.10%)</title><rect x="15.6735%" y="149" width="0.1009%" height="15" fill="rgb(221,5,38)"/><text x="15.9235%" y="159.50"></text></g><g><title>lookup_deprecation_entry (119,752 samples, 0.15%)</title><rect x="16.0130%" y="133" width="0.1496%" height="15" fill="rgb(247,18,42)"/><text x="16.2630%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (322,933 samples, 0.40%)</title><rect x="15.8428%" y="149" width="0.4035%" height="15" fill="rgb(241,131,45)"/><text x="16.0928%" y="159.50"></text></g><g><title>misc_checking_1 (1,165,812 samples, 1.46%)</title><rect x="14.8668%" y="165" width="1.4565%" height="15" fill="rgb(249,31,29)"/><text x="15.1168%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (104,591 samples, 0.13%)</title><rect x="16.3249%" y="149" width="0.1307%" height="15" fill="rgb(225,111,53)"/><text x="16.5749%" y="159.50"></text></g><g><title>check_mod_liveness (80,321 samples, 0.10%)</title><rect x="16.3552%" y="133" width="0.1003%" height="15" fill="rgb(238,160,17)"/><text x="16.6052%" y="143.50"></text></g><g><title>misc_checking_2 (258,513 samples, 0.32%)</title><rect x="16.3233%" y="165" width="0.3230%" height="15" fill="rgb(214,148,48)"/><text x="16.5733%" y="175.50"></text></g><g><title>match_checking (152,612 samples, 0.19%)</title><rect x="16.4556%" y="149" width="0.1907%" height="15" fill="rgb(232,36,49)"/><text x="16.7056%" y="159.50"></text></g><g><title>check_match (144,612 samples, 0.18%)</title><rect x="16.4656%" y="133" width="0.1807%" height="15" fill="rgb(209,103,24)"/><text x="16.7156%" y="143.50"></text></g><g><title>death_checking (478,075 samples, 0.60%)</title><rect x="16.7435%" y="149" width="0.5973%" height="15" fill="rgb(229,88,8)"/><text x="16.9935%" y="159.50"></text></g><g><title>item_attrs (353,234 samples, 0.44%)</title><rect x="16.8995%" y="133" width="0.4413%" height="15" fill="rgb(213,181,19)"/><text x="17.1495%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,291 samples, 0.15%)</title><rect x="17.1930%" y="117" width="0.1478%" height="15" fill="rgb(254,191,54)"/><text x="17.4430%" y="127.50"></text></g><g><title>crate_lints (650,837 samples, 0.81%)</title><rect x="17.3426%" y="133" width="0.8131%" height="15" fill="rgb(241,83,37)"/><text x="17.5926%" y="143.50"></text></g><g><title>type_of (341,843 samples, 0.43%)</title><rect x="17.7286%" y="117" width="0.4271%" height="15" fill="rgb(233,36,39)"/><text x="17.9786%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (260,182 samples, 0.33%)</title><rect x="17.8307%" y="101" width="0.3251%" height="15" fill="rgb(226,3,54)"/><text x="18.0807%" y="111.50"></text></g><g><title>lint_checking (727,717 samples, 0.91%)</title><rect x="17.3408%" y="149" width="0.9092%" height="15" fill="rgb(245,192,40)"/><text x="17.5908%" y="159.50"></text></g><g><title>privacy_access_levels (94,691 samples, 0.12%)</title><rect x="18.2500%" y="149" width="0.1183%" height="15" fill="rgb(238,167,29)"/><text x="18.5000%" y="159.50"></text></g><g><title>privacy_checking_modules (224,433 samples, 0.28%)</title><rect x="18.3683%" y="149" width="0.2804%" height="15" fill="rgb(232,182,51)"/><text x="18.6183%" y="159.50"></text></g><g><title>check_mod_privacy (223,183 samples, 0.28%)</title><rect x="18.3699%" y="133" width="0.2788%" height="15" fill="rgb(231,60,39)"/><text x="18.6199%" y="143.50"></text></g><g><title>misc_checking_3 (1,612,726 samples, 2.01%)</title><rect x="16.6463%" y="165" width="2.0149%" height="15" fill="rgb(208,69,12)"/><text x="16.8963%" y="175.50">m..</text></g><g><title>adt_destructor (100,691 samples, 0.13%)</title><rect x="18.8312%" y="117" width="0.1258%" height="15" fill="rgb(235,93,37)"/><text x="19.0812%" y="127.50"></text></g><g><title>coherent_trait (96,171 samples, 0.12%)</title><rect x="18.8368%" y="101" width="0.1202%" height="15" fill="rgb(213,116,39)"/><text x="19.0868%" y="111.50"></text></g><g><title>specialization_graph_of (93,941 samples, 0.12%)</title><rect x="18.8396%" y="85" width="0.1174%" height="15" fill="rgb(222,207,29)"/><text x="19.0896%" y="95.50"></text></g><g><title>param_env (124,201 samples, 0.16%)</title><rect x="18.9570%" y="117" width="0.1552%" height="15" fill="rgb(206,96,30)"/><text x="19.2070%" y="127.50"></text></g><g><title>impl_parent (1,626,173 samples, 2.03%)</title><rect x="22.8686%" y="101" width="2.0317%" height="15" fill="rgb(218,138,4)"/><text x="23.1186%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (843,626 samples, 1.05%)</title><rect x="23.8463%" y="85" width="1.0540%" height="15" fill="rgb(250,191,14)"/><text x="24.0963%" y="95.50"></text></g><g><title>impl_trait_ref (3,309,996 samples, 4.14%)</title><rect x="24.9003%" y="101" width="4.1354%" height="15" fill="rgb(239,60,40)"/><text x="25.1503%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,511,448 samples, 3.14%)</title><rect x="25.8979%" y="85" width="3.1377%" height="15" fill="rgb(206,27,48)"/><text x="26.1479%" y="95.50">met..</text></g><g><title>coherent_trait (8,900,429 samples, 11.12%)</title><rect x="18.7558%" y="133" width="11.1198%" height="15" fill="rgb(225,35,8)"/><text x="19.0058%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (8,615,175 samples, 10.76%)</title><rect x="19.1122%" y="117" width="10.7634%" height="15" fill="rgb(250,213,24)"/><text x="19.3622%" y="127.50">specialization_g..</text></g><g><title>trait_impls_of (669,625 samples, 0.84%)</title><rect x="29.0390%" y="101" width="0.8366%" height="15" fill="rgb(247,123,22)"/><text x="29.2890%" y="111.50"></text></g><g><title>implementations_of_trait (168,762 samples, 0.21%)</title><rect x="29.6647%" y="85" width="0.2108%" height="15" fill="rgb(231,138,38)"/><text x="29.9147%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (146,621 samples, 0.18%)</title><rect x="29.6924%" y="69" width="0.1832%" height="15" fill="rgb(231,145,46)"/><text x="29.9424%" y="79.50"></text></g><g><title>coherence_checking (9,007,620 samples, 11.25%)</title><rect x="18.7099%" y="149" width="11.2537%" height="15" fill="rgb(251,118,11)"/><text x="18.9599%" y="159.50">coherence_checking</text></g><g><title>associated_item (274,506 samples, 0.34%)</title><rect x="35.2629%" y="85" width="0.3430%" height="15" fill="rgb(217,147,25)"/><text x="35.5129%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (220,666 samples, 0.28%)</title><rect x="35.3301%" y="69" width="0.2757%" height="15" fill="rgb(247,81,37)"/><text x="35.5801%" y="79.50"></text></g><g><title>associated_items (374,847 samples, 0.47%)</title><rect x="35.1575%" y="101" width="0.4683%" height="15" fill="rgb(209,12,38)"/><text x="35.4075%" y="111.50"></text></g><g><title>dropck_outlives (103,072 samples, 0.13%)</title><rect x="35.6498%" y="101" width="0.1288%" height="15" fill="rgb(227,1,9)"/><text x="35.8998%" y="111.50"></text></g><g><title>evaluate_obligation (389,123 samples, 0.49%)</title><rect x="35.7786%" y="101" width="0.4862%" height="15" fill="rgb(248,47,43)"/><text x="36.0286%" y="111.50"></text></g><g><title>method_autoderef_steps (113,260 samples, 0.14%)</title><rect x="36.4612%" y="101" width="0.1415%" height="15" fill="rgb(221,10,30)"/><text x="36.7112%" y="111.50"></text></g><g><title>predicates_of (86,281 samples, 0.11%)</title><rect x="36.6253%" y="101" width="0.1078%" height="15" fill="rgb(210,229,1)"/><text x="36.8753%" y="111.50"></text></g><g><title>associated_item (81,691 samples, 0.10%)</title><rect x="37.9934%" y="69" width="0.1021%" height="15" fill="rgb(222,148,37)"/><text x="38.2434%" y="79.50"></text></g><g><title>associated_items (116,061 samples, 0.15%)</title><rect x="37.9555%" y="85" width="0.1450%" height="15" fill="rgb(234,67,33)"/><text x="38.2055%" y="95.50"></text></g><g><title>is_copy_raw (129,251 samples, 0.16%)</title><rect x="38.2461%" y="85" width="0.1615%" height="15" fill="rgb(247,98,35)"/><text x="38.4961%" y="95.50"></text></g><g><title>evaluate_obligation (116,581 samples, 0.15%)</title><rect x="38.2619%" y="69" width="0.1457%" height="15" fill="rgb(247,138,52)"/><text x="38.5119%" y="79.50"></text></g><g><title>typeck (1,315,923 samples, 1.64%)</title><rect x="36.8470%" y="101" width="1.6441%" height="15" fill="rgb(213,79,30)"/><text x="37.0970%" y="111.50"></text></g><g><title>item_bodies_checking (6,792,338 samples, 8.49%)</title><rect x="30.0133%" y="149" width="8.4861%" height="15" fill="rgb(246,177,23)"/><text x="30.2633%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (6,789,698 samples, 8.48%)</title><rect x="30.0166%" y="133" width="8.4828%" height="15" fill="rgb(230,62,27)"/><text x="30.2666%" y="143.50">typeck_item_..</text></g><g><title>typeck (6,770,458 samples, 8.46%)</title><rect x="30.0406%" y="117" width="8.4587%" height="15" fill="rgb(216,154,8)"/><text x="30.2906%" y="127.50">typeck</text></g><g><title>item_types_checking (1,564,406 samples, 1.95%)</title><rect x="38.4993%" y="149" width="1.9545%" height="15" fill="rgb(244,35,45)"/><text x="38.7493%" y="159.50">i..</text></g><g><title>check_mod_item_types (1,560,566 samples, 1.95%)</title><rect x="38.5041%" y="133" width="1.9497%" height="15" fill="rgb(251,115,12)"/><text x="38.7541%" y="143.50">c..</text></g><g><title>fn_sig (291,876 samples, 0.36%)</title><rect x="40.8410%" y="117" width="0.3647%" height="15" fill="rgb(240,54,50)"/><text x="41.0910%" y="127.50"></text></g><g><title>named_region_map (332,873 samples, 0.42%)</title><rect x="41.4785%" y="101" width="0.4159%" height="15" fill="rgb(233,84,52)"/><text x="41.7285%" y="111.50"></text></g><g><title>resolve_lifetimes (309,673 samples, 0.39%)</title><rect x="41.5075%" y="85" width="0.3869%" height="15" fill="rgb(207,117,47)"/><text x="41.7575%" y="95.50"></text></g><g><title>lint_levels (106,331 samples, 0.13%)</title><rect x="41.7615%" y="69" width="0.1328%" height="15" fill="rgb(249,43,39)"/><text x="42.0115%" y="79.50"></text></g><g><title>generics_of (576,775 samples, 0.72%)</title><rect x="41.2056%" y="117" width="0.7206%" height="15" fill="rgb(209,38,44)"/><text x="41.4556%" y="127.50"></text></g><g><title>explicit_item_bounds (106,981 samples, 0.13%)</title><rect x="42.2343%" y="101" width="0.1337%" height="15" fill="rgb(236,212,23)"/><text x="42.4843%" y="111.50"></text></g><g><title>item_bounds (306,553 samples, 0.38%)</title><rect x="42.0142%" y="117" width="0.3830%" height="15" fill="rgb(242,79,21)"/><text x="42.2642%" y="127.50"></text></g><g><title>late_bound_vars_map (123,081 samples, 0.15%)</title><rect x="42.9322%" y="69" width="0.1538%" height="15" fill="rgb(211,96,35)"/><text x="43.1822%" y="79.50"></text></g><g><title>resolve_lifetimes (116,431 samples, 0.15%)</title><rect x="42.9405%" y="53" width="0.1455%" height="15" fill="rgb(253,215,40)"/><text x="43.1905%" y="63.50"></text></g><g><title>explicit_predicates_of (536,765 samples, 0.67%)</title><rect x="42.6042%" y="85" width="0.6706%" height="15" fill="rgb(211,81,21)"/><text x="42.8542%" y="95.50"></text></g><g><title>type_param_predicates (107,470 samples, 0.13%)</title><rect x="43.1405%" y="69" width="0.1343%" height="15" fill="rgb(208,190,38)"/><text x="43.3905%" y="79.50"></text></g><g><title>predicates_of (731,847 samples, 0.91%)</title><rect x="42.3972%" y="117" width="0.9143%" height="15" fill="rgb(235,213,38)"/><text x="42.6472%" y="127.50"></text></g><g><title>predicates_defined_on (668,877 samples, 0.84%)</title><rect x="42.4759%" y="101" width="0.8357%" height="15" fill="rgb(237,122,38)"/><text x="42.7259%" y="111.50"></text></g><g><title>super_predicates_of (147,282 samples, 0.18%)</title><rect x="43.3115%" y="117" width="0.1840%" height="15" fill="rgb(244,218,35)"/><text x="43.5615%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (120,620 samples, 0.15%)</title><rect x="43.3448%" y="101" width="0.1507%" height="15" fill="rgb(240,68,47)"/><text x="43.5948%" y="111.50"></text></g><g><title>type_collecting (2,744,778 samples, 3.43%)</title><rect x="40.4553%" y="149" width="3.4292%" height="15" fill="rgb(210,16,53)"/><text x="40.7053%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (2,733,658 samples, 3.42%)</title><rect x="40.4692%" y="133" width="3.4153%" height="15" fill="rgb(235,124,12)"/><text x="40.7192%" y="143.50">col..</text></g><g><title>type_of (305,873 samples, 0.38%)</title><rect x="43.5024%" y="117" width="0.3821%" height="15" fill="rgb(224,169,11)"/><text x="43.7524%" y="127.50"></text></g><g><title>evaluate_obligation (141,821 samples, 0.18%)</title><rect x="45.6785%" y="117" width="0.1772%" height="15" fill="rgb(250,166,2)"/><text x="45.9285%" y="127.50"></text></g><g><title>implied_outlives_bounds (209,451 samples, 0.26%)</title><rect x="45.8646%" y="117" width="0.2617%" height="15" fill="rgb(242,216,29)"/><text x="46.1146%" y="127.50"></text></g><g><title>param_env (234,481 samples, 0.29%)</title><rect x="46.1263%" y="117" width="0.2930%" height="15" fill="rgb(230,116,27)"/><text x="46.3763%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,937,105 samples, 2.42%)</title><rect x="44.1099%" y="133" width="2.4201%" height="15" fill="rgb(228,99,48)"/><text x="44.3599%" y="143.50">ch..</text></g><g><title>region_scope_tree (88,710 samples, 0.11%)</title><rect x="46.4192%" y="117" width="0.1108%" height="15" fill="rgb(253,11,6)"/><text x="46.6692%" y="127.50"></text></g><g><title>evaluate_obligation (179,060 samples, 0.22%)</title><rect x="49.2006%" y="117" width="0.2237%" height="15" fill="rgb(247,143,39)"/><text x="49.4506%" y="127.50"></text></g><g><title>implied_outlives_bounds (150,583 samples, 0.19%)</title><rect x="49.4395%" y="117" width="0.1881%" height="15" fill="rgb(236,97,10)"/><text x="49.6895%" y="127.50"></text></g><g><title>param_env (398,825 samples, 0.50%)</title><rect x="49.6276%" y="117" width="0.4983%" height="15" fill="rgb(233,208,19)"/><text x="49.8776%" y="127.50"></text></g><g><title>check_item_well_formed (3,108,590 samples, 3.88%)</title><rect x="46.5300%" y="133" width="3.8837%" height="15" fill="rgb(216,164,2)"/><text x="46.7800%" y="143.50">chec..</text></g><g><title>evaluate_obligation (359,866 samples, 0.45%)</title><rect x="52.3977%" y="117" width="0.4496%" height="15" fill="rgb(220,129,5)"/><text x="52.6477%" y="127.50"></text></g><g><title>implied_outlives_bounds (280,501 samples, 0.35%)</title><rect x="52.8473%" y="117" width="0.3504%" height="15" fill="rgb(242,17,10)"/><text x="53.0973%" y="127.50"></text></g><g><title>param_env (198,472 samples, 0.25%)</title><rect x="53.2003%" y="117" width="0.2480%" height="15" fill="rgb(242,107,0)"/><text x="53.4503%" y="127.50"></text></g><g><title>predicates_of (127,472 samples, 0.16%)</title><rect x="53.4483%" y="117" width="0.1593%" height="15" fill="rgb(251,28,31)"/><text x="53.6983%" y="127.50"></text></g><g><title>predicates_defined_on (104,592 samples, 0.13%)</title><rect x="53.4769%" y="101" width="0.1307%" height="15" fill="rgb(233,223,10)"/><text x="53.7269%" y="111.50"></text></g><g><title>region_scope_tree (97,632 samples, 0.12%)</title><rect x="53.6076%" y="117" width="0.1220%" height="15" fill="rgb(215,21,27)"/><text x="53.8576%" y="127.50"></text></g><g><title>analysis (36,495,617 samples, 45.60%)</title><rect x="8.1572%" y="181" width="45.5960%" height="15" fill="rgb(232,23,21)"/><text x="8.4072%" y="191.50">analysis</text></g><g><title>type_check_crate (28,088,112 samples, 35.09%)</title><rect x="18.6611%" y="165" width="35.0921%" height="15" fill="rgb(244,5,23)"/><text x="18.9111%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,897,590 samples, 9.87%)</title><rect x="43.8863%" y="149" width="9.8669%" height="15" fill="rgb(226,81,46)"/><text x="44.1363%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,672,916 samples, 3.34%)</title><rect x="50.4138%" y="133" width="3.3394%" height="15" fill="rgb(247,70,30)"/><text x="50.6638%" y="143.50">che..</text></g><g><title>fn_abi_of_instance (115,961 samples, 0.14%)</title><rect x="55.4840%" y="149" width="0.1449%" height="15" fill="rgb(212,68,19)"/><text x="55.7340%" y="159.50"></text></g><g><title>codegen_module (1,119,721 samples, 1.40%)</title><rect x="54.2915%" y="165" width="1.3989%" height="15" fill="rgb(240,187,13)"/><text x="54.5415%" y="175.50"></text></g><g><title>codegen_crate (1,568,876 samples, 1.96%)</title><rect x="53.7688%" y="181" width="1.9601%" height="15" fill="rgb(223,113,26)"/><text x="54.0188%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (4,931,421 samples, 6.16%)</title><rect x="55.7572%" y="165" width="6.1611%" height="15" fill="rgb(206,192,2)"/><text x="56.0072%" y="175.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (4,739,578 samples, 5.92%)</title><rect x="55.9968%" y="149" width="5.9214%" height="15" fill="rgb(241,108,4)"/><text x="56.2468%" y="159.50">LLVM_mod..</text></g><g><title>codegen_module_optimize (5,453,246 samples, 6.81%)</title><rect x="55.7289%" y="181" width="6.8130%" height="15" fill="rgb(247,173,49)"/><text x="55.9789%" y="191.50">codegen_m..</text></g><g><title>LLVM_module_optimize (499,185 samples, 0.62%)</title><rect x="61.9183%" y="165" width="0.6237%" height="15" fill="rgb(224,114,35)"/><text x="62.1683%" y="175.50"></text></g><g><title>AST_validation (131,472 samples, 0.16%)</title><rect x="62.8266%" y="165" width="0.1643%" height="15" fill="rgb(245,159,27)"/><text x="63.0766%" y="175.50"></text></g><g><title>crate_injection (80,670 samples, 0.10%)</title><rect x="63.0635%" y="165" width="0.1008%" height="15" fill="rgb(245,172,44)"/><text x="63.3135%" y="175.50"></text></g><g><title>metadata_load_macro (107,561 samples, 0.13%)</title><rect x="78.6065%" y="133" width="0.1344%" height="15" fill="rgb(236,23,11)"/><text x="78.8565%" y="143.50"></text></g><g><title>macro_expand_crate (12,839,179 samples, 16.04%)</title><rect x="63.1643%" y="165" width="16.0407%" height="15" fill="rgb(205,117,38)"/><text x="63.4143%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (12,812,808 samples, 16.01%)</title><rect x="63.1972%" y="149" width="16.0078%" height="15" fill="rgb(237,72,25)"/><text x="63.4472%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (371,444 samples, 0.46%)</title><rect x="78.7409%" y="133" width="0.4641%" height="15" fill="rgb(244,70,9)"/><text x="78.9909%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (193,392 samples, 0.24%)</title><rect x="79.2195%" y="165" width="0.2416%" height="15" fill="rgb(217,125,39)"/><text x="79.4695%" y="175.50"></text></g><g><title>finalize_macro_resolutions (233,062 samples, 0.29%)</title><rect x="79.5280%" y="149" width="0.2912%" height="15" fill="rgb(235,36,10)"/><text x="79.7780%" y="159.50"></text></g><g><title>late_resolve_crate (1,145,602 samples, 1.43%)</title><rect x="79.8192%" y="149" width="1.4313%" height="15" fill="rgb(251,123,47)"/><text x="80.0692%" y="159.50"></text></g><g><title>configure_and_expand (15,066,921 samples, 18.82%)</title><rect x="62.5419%" y="181" width="18.8240%" height="15" fill="rgb(221,13,13)"/><text x="62.7919%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,524,566 samples, 1.90%)</title><rect x="79.4612%" y="165" width="1.9047%" height="15" fill="rgb(238,131,9)"/><text x="79.7112%" y="175.50">r..</text></g><g><title>drop_ast (139,171 samples, 0.17%)</title><rect x="81.3659%" y="181" width="0.1739%" height="15" fill="rgb(211,50,8)"/><text x="81.6159%" y="191.50"></text></g><g><title>early_lint_checks (266,663 samples, 0.33%)</title><rect x="81.5602%" y="181" width="0.3332%" height="15" fill="rgb(245,182,24)"/><text x="81.8102%" y="191.50"></text></g><g><title>free_global_ctxt (1,487,325 samples, 1.86%)</title><rect x="81.8934%" y="181" width="1.8582%" height="15" fill="rgb(242,14,37)"/><text x="82.1434%" y="191.50">f..</text></g><g><title>optimized_mir (189,612 samples, 0.24%)</title><rect x="84.6421%" y="101" width="0.2369%" height="15" fill="rgb(246,228,12)"/><text x="84.8921%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (280,333 samples, 0.35%)</title><rect x="84.5316%" y="117" width="0.3502%" height="15" fill="rgb(213,55,15)"/><text x="84.7816%" y="127.50"></text></g><g><title>monomorphization_collector (300,243 samples, 0.38%)</title><rect x="84.5287%" y="133" width="0.3751%" height="15" fill="rgb(209,9,3)"/><text x="84.7787%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (417,654 samples, 0.52%)</title><rect x="84.5034%" y="149" width="0.5218%" height="15" fill="rgb(230,59,30)"/><text x="84.7534%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (97,091 samples, 0.12%)</title><rect x="84.9039%" y="133" width="0.1213%" height="15" fill="rgb(209,121,21)"/><text x="85.1539%" y="143.50"></text></g><g><title>exported_symbols (481,135 samples, 0.60%)</title><rect x="84.4829%" y="165" width="0.6011%" height="15" fill="rgb(220,109,13)"/><text x="84.7329%" y="175.50"></text></g><g><title>is_sized_raw (176,032 samples, 0.22%)</title><rect x="85.9588%" y="133" width="0.2199%" height="15" fill="rgb(232,18,1)"/><text x="86.2088%" y="143.50"></text></g><g><title>evaluate_obligation (157,102 samples, 0.20%)</title><rect x="85.9825%" y="117" width="0.1963%" height="15" fill="rgb(215,41,42)"/><text x="86.2325%" y="127.50"></text></g><g><title>layout_of (456,275 samples, 0.57%)</title><rect x="85.8542%" y="149" width="0.5701%" height="15" fill="rgb(224,123,36)"/><text x="86.1042%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (194,793 samples, 0.24%)</title><rect x="86.1809%" y="133" width="0.2434%" height="15" fill="rgb(240,125,3)"/><text x="86.4309%" y="143.50"></text></g><g><title>normalize_projection_ty (160,121 samples, 0.20%)</title><rect x="86.2242%" y="117" width="0.2000%" height="15" fill="rgb(205,98,50)"/><text x="86.4742%" y="127.50"></text></g><g><title>needs_drop_raw (120,732 samples, 0.15%)</title><rect x="87.1402%" y="133" width="0.1508%" height="15" fill="rgb(205,185,37)"/><text x="87.3902%" y="143.50"></text></g><g><title>is_copy_raw (106,752 samples, 0.13%)</title><rect x="87.1576%" y="117" width="0.1334%" height="15" fill="rgb(238,207,15)"/><text x="87.4076%" y="127.50"></text></g><g><title>evaluate_obligation (83,241 samples, 0.10%)</title><rect x="87.1870%" y="101" width="0.1040%" height="15" fill="rgb(213,199,42)"/><text x="87.4370%" y="111.50"></text></g><g><title>optimized_mir (1,774,649 samples, 2.22%)</title><rect x="85.1430%" y="165" width="2.2172%" height="15" fill="rgb(235,201,11)"/><text x="85.3930%" y="175.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (749,127 samples, 0.94%)</title><rect x="86.4243%" y="149" width="0.9359%" height="15" fill="rgb(207,46,11)"/><text x="86.6743%" y="159.50"></text></g><g><title>generate_crate_metadata (2,912,749 samples, 3.64%)</title><rect x="83.7516%" y="181" width="3.6391%" height="15" fill="rgb(241,35,35)"/><text x="84.0016%" y="191.50">gene..</text></g><g><title>hir_lowering (1,687,917 samples, 2.11%)</title><rect x="87.3907%" y="181" width="2.1088%" height="15" fill="rgb(243,32,47)"/><text x="87.6407%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (3,856,369 samples, 4.82%)</title><rect x="89.5160%" y="165" width="4.8180%" height="15" fill="rgb(247,202,23)"/><text x="89.7660%" y="175.50">finish..</text></g><g><title>link_crate (681,647 samples, 0.85%)</title><rect x="94.3339%" y="165" width="0.8516%" height="15" fill="rgb(219,102,11)"/><text x="94.5839%" y="175.50"></text></g><g><title>link_binary (676,647 samples, 0.85%)</title><rect x="94.3402%" y="149" width="0.8454%" height="15" fill="rgb(243,110,44)"/><text x="94.5902%" y="159.50"></text></g><g><title>link_rlib (440,715 samples, 0.55%)</title><rect x="94.6350%" y="133" width="0.5506%" height="15" fill="rgb(222,74,54)"/><text x="94.8850%" y="143.50"></text></g><g><title>link (4,559,666 samples, 5.70%)</title><rect x="89.4995%" y="181" width="5.6966%" height="15" fill="rgb(216,99,12)"/><text x="89.7495%" y="191.50">link</text></g><g><title>parse_crate (2,557,856 samples, 3.20%)</title><rect x="95.1961%" y="181" width="3.1957%" height="15" fill="rgb(226,22,26)"/><text x="95.4461%" y="191.50">par..</text></g><g><title>prepare_outputs (357,764 samples, 0.45%)</title><rect x="98.4043%" y="181" width="0.4470%" height="15" fill="rgb(217,163,10)"/><text x="98.6543%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (465,785 samples, 0.58%)</title><rect x="98.8513%" y="181" width="0.5819%" height="15" fill="rgb(213,25,53)"/><text x="99.1013%" y="191.50"></text></g><g><title>setup_global_ctxt (153,692 samples, 0.19%)</title><rect x="99.4346%" y="181" width="0.1920%" height="15" fill="rgb(252,105,26)"/><text x="99.6846%" y="191.50"></text></g><g><title>all (80,041,186 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (80,041,186 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (298,833 samples, 0.37%)</title><rect x="99.6267%" y="181" width="0.3733%" height="15" fill="rgb(252,8,32)"/><text x="99.8767%" y="191.50"></text></g></svg></svg>