<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,569,674 samples, 7.17%)</title><rect x="0.2701%" y="213" width="7.1660%" height="15" fill="rgb(227,0,7)"/><text x="0.5201%" y="223.50">LLVM_passes</text></g><g><title>implied_outlives_bounds (289,102 samples, 0.13%)</title><rect x="15.2935%" y="165" width="0.1331%" height="15" fill="rgb(217,0,24)"/><text x="15.5435%" y="175.50"></text></g><g><title>codegen_fn_attrs (253,702 samples, 0.12%)</title><rect x="16.7551%" y="117" width="0.1168%" height="15" fill="rgb(221,193,54)"/><text x="17.0051%" y="127.50"></text></g><g><title>is_copy_raw (245,343 samples, 0.11%)</title><rect x="18.4268%" y="101" width="0.1129%" height="15" fill="rgb(248,212,6)"/><text x="18.6768%" y="111.50"></text></g><g><title>needs_drop_raw (966,242 samples, 0.44%)</title><rect x="18.5397%" y="101" width="0.4447%" height="15" fill="rgb(208,68,35)"/><text x="18.7897%" y="111.50"></text></g><g><title>is_copy_raw (699,178 samples, 0.32%)</title><rect x="18.6626%" y="85" width="0.3218%" height="15" fill="rgb(232,128,0)"/><text x="18.9126%" y="95.50"></text></g><g><title>evaluate_obligation (588,518 samples, 0.27%)</title><rect x="18.7136%" y="69" width="0.2709%" height="15" fill="rgb(207,160,47)"/><text x="18.9636%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (541,126 samples, 0.25%)</title><rect x="19.1147%" y="85" width="0.2491%" height="15" fill="rgb(228,23,34)"/><text x="19.3647%" y="95.50"></text></g><g><title>specialization_graph_of (1,070,782 samples, 0.49%)</title><rect x="19.3883%" y="85" width="0.4928%" height="15" fill="rgb(218,30,26)"/><text x="19.6383%" y="95.50"></text></g><g><title>impl_trait_ref (445,145 samples, 0.20%)</title><rect x="19.6762%" y="69" width="0.2049%" height="15" fill="rgb(220,122,19)"/><text x="19.9262%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (375,204 samples, 0.17%)</title><rect x="19.7084%" y="53" width="0.1727%" height="15" fill="rgb(250,228,42)"/><text x="19.9584%" y="63.50"></text></g><g><title>resolve_instance (1,996,916 samples, 0.92%)</title><rect x="18.9844%" y="101" width="0.9191%" height="15" fill="rgb(240,193,28)"/><text x="19.2344%" y="111.50"></text></g><g><title>thir_body (1,280,600 samples, 0.59%)</title><rect x="19.9314%" y="101" width="0.5894%" height="15" fill="rgb(216,20,37)"/><text x="20.1814%" y="111.50"></text></g><g><title>mir_const (10,011,236 samples, 4.61%)</title><rect x="15.9263%" y="149" width="4.6077%" height="15" fill="rgb(206,188,39)"/><text x="16.1763%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (8,877,375 samples, 4.09%)</title><rect x="16.4482%" y="133" width="4.0858%" height="15" fill="rgb(217,207,13)"/><text x="16.6982%" y="143.50">unsa..</text></g><g><title>mir_built (7,956,813 samples, 3.66%)</title><rect x="16.8718%" y="117" width="3.6621%" height="15" fill="rgb(231,73,38)"/><text x="17.1218%" y="127.50">mir_..</text></g><g><title>mir_promoted (11,168,814 samples, 5.14%)</title><rect x="15.4786%" y="165" width="5.1405%" height="15" fill="rgb(225,20,46)"/><text x="15.7286%" y="175.50">mir_pr..</text></g><g><title>type_op_normalize_fn_sig (1,471,227 samples, 0.68%)</title><rect x="20.6281%" y="165" width="0.6771%" height="15" fill="rgb(210,31,41)"/><text x="20.8781%" y="175.50"></text></g><g><title>normalize_projection_ty (971,844 samples, 0.45%)</title><rect x="20.8580%" y="149" width="0.4473%" height="15" fill="rgb(221,200,47)"/><text x="21.1080%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,174,009 samples, 0.54%)</title><rect x="21.3053%" y="165" width="0.5403%" height="15" fill="rgb(226,26,5)"/><text x="21.5553%" y="175.50"></text></g><g><title>normalize_projection_ty (958,558 samples, 0.44%)</title><rect x="21.4044%" y="149" width="0.4412%" height="15" fill="rgb(249,33,26)"/><text x="21.6544%" y="159.50"></text></g><g><title>type_op_normalize_ty (549,543 samples, 0.25%)</title><rect x="21.8456%" y="165" width="0.2529%" height="15" fill="rgb(235,183,28)"/><text x="22.0956%" y="175.50"></text></g><g><title>normalize_projection_ty (314,743 samples, 0.14%)</title><rect x="21.9537%" y="149" width="0.1449%" height="15" fill="rgb(221,5,38)"/><text x="22.2037%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,094,900 samples, 2.34%)</title><rect x="22.0985%" y="165" width="2.3449%" height="15" fill="rgb(247,18,42)"/><text x="22.3485%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (36,651,746 samples, 16.87%)</title><rect x="7.5751%" y="197" width="16.8690%" height="15" fill="rgb(241,131,45)"/><text x="7.8251%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (36,460,466 samples, 16.78%)</title><rect x="7.6632%" y="181" width="16.7810%" height="15" fill="rgb(249,31,29)"/><text x="7.9132%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (228,722 samples, 0.11%)</title><rect x="24.5185%" y="197" width="0.1053%" height="15" fill="rgb(225,111,53)"/><text x="24.7685%" y="207.50"></text></g><g><title>codegen_fn_attrs (434,575 samples, 0.20%)</title><rect x="24.7557%" y="165" width="0.2000%" height="15" fill="rgb(238,160,17)"/><text x="25.0057%" y="175.50"></text></g><g><title>should_inherit_track_caller (357,384 samples, 0.16%)</title><rect x="24.7913%" y="149" width="0.1645%" height="15" fill="rgb(214,148,48)"/><text x="25.0413%" y="159.50"></text></g><g><title>check_mod_attrs (701,496 samples, 0.32%)</title><rect x="24.6330%" y="181" width="0.3229%" height="15" fill="rgb(232,36,49)"/><text x="24.8830%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (292,313 samples, 0.13%)</title><rect x="25.0544%" y="181" width="0.1345%" height="15" fill="rgb(209,103,24)"/><text x="25.3044%" y="191.50"></text></g><g><title>misc_checking_1 (1,301,134 samples, 0.60%)</title><rect x="24.6239%" y="197" width="0.5988%" height="15" fill="rgb(229,88,8)"/><text x="24.8739%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (494,016 samples, 0.23%)</title><rect x="25.2235%" y="181" width="0.2274%" height="15" fill="rgb(213,181,19)"/><text x="25.4735%" y="191.50"></text></g><g><title>check_mod_liveness (404,094 samples, 0.19%)</title><rect x="25.2649%" y="165" width="0.1860%" height="15" fill="rgb(254,191,54)"/><text x="25.5149%" y="175.50"></text></g><g><title>misc_checking_2 (1,033,951 samples, 0.48%)</title><rect x="25.2228%" y="197" width="0.4759%" height="15" fill="rgb(241,83,37)"/><text x="25.4728%" y="207.50"></text></g><g><title>match_checking (538,315 samples, 0.25%)</title><rect x="25.4509%" y="181" width="0.2478%" height="15" fill="rgb(233,36,39)"/><text x="25.7009%" y="191.50"></text></g><g><title>check_match (496,735 samples, 0.23%)</title><rect x="25.4700%" y="165" width="0.2286%" height="15" fill="rgb(226,3,54)"/><text x="25.7200%" y="175.50"></text></g><g><title>check_private_in_public (322,813 samples, 0.15%)</title><rect x="25.7040%" y="181" width="0.1486%" height="15" fill="rgb(245,192,40)"/><text x="25.9540%" y="191.50"></text></g><g><title>death_checking (556,406 samples, 0.26%)</title><rect x="25.8526%" y="181" width="0.2561%" height="15" fill="rgb(238,167,29)"/><text x="26.1026%" y="191.50"></text></g><g><title>param_env (295,705 samples, 0.14%)</title><rect x="26.5748%" y="149" width="0.1361%" height="15" fill="rgb(232,182,51)"/><text x="26.8248%" y="159.50"></text></g><g><title>crate_lints (2,522,557 samples, 1.16%)</title><rect x="26.1094%" y="165" width="1.1610%" height="15" fill="rgb(231,60,39)"/><text x="26.3594%" y="175.50"></text></g><g><title>type_of (1,164,072 samples, 0.54%)</title><rect x="26.7347%" y="149" width="0.5358%" height="15" fill="rgb(208,69,12)"/><text x="26.9847%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (930,270 samples, 0.43%)</title><rect x="26.8423%" y="133" width="0.4282%" height="15" fill="rgb(235,93,37)"/><text x="27.0923%" y="143.50"></text></g><g><title>lint_checking (3,152,824 samples, 1.45%)</title><rect x="26.1087%" y="181" width="1.4511%" height="15" fill="rgb(213,116,39)"/><text x="26.3587%" y="191.50"></text></g><g><title>module_lints (628,537 samples, 0.29%)</title><rect x="27.2705%" y="165" width="0.2893%" height="15" fill="rgb(222,207,29)"/><text x="27.5205%" y="175.50"></text></g><g><title>lint_mod (624,277 samples, 0.29%)</title><rect x="27.2724%" y="149" width="0.2873%" height="15" fill="rgb(206,96,30)"/><text x="27.5224%" y="159.50"></text></g><g><title>privacy_access_levels (459,965 samples, 0.21%)</title><rect x="27.5597%" y="181" width="0.2117%" height="15" fill="rgb(218,138,4)"/><text x="27.8097%" y="191.50"></text></g><g><title>privacy_checking_modules (1,518,256 samples, 0.70%)</title><rect x="27.7714%" y="181" width="0.6988%" height="15" fill="rgb(250,191,14)"/><text x="28.0214%" y="191.50"></text></g><g><title>check_mod_privacy (1,515,866 samples, 0.70%)</title><rect x="27.7725%" y="165" width="0.6977%" height="15" fill="rgb(239,60,40)"/><text x="28.0225%" y="175.50"></text></g><g><title>misc_checking_3 (6,036,674 samples, 2.78%)</title><rect x="25.6987%" y="197" width="2.7784%" height="15" fill="rgb(206,27,48)"/><text x="25.9487%" y="207.50">mi..</text></g><g><title>impl_parent (1,501,440 samples, 0.69%)</title><rect x="29.4588%" y="133" width="0.6910%" height="15" fill="rgb(225,35,8)"/><text x="29.7088%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (986,637 samples, 0.45%)</title><rect x="29.6958%" y="117" width="0.4541%" height="15" fill="rgb(250,213,24)"/><text x="29.9458%" y="127.50"></text></g><g><title>impl_trait_ref (4,422,351 samples, 2.04%)</title><rect x="30.1499%" y="133" width="2.0354%" height="15" fill="rgb(247,123,22)"/><text x="30.3999%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,687,702 samples, 1.70%)</title><rect x="30.4880%" y="117" width="1.6973%" height="15" fill="rgb(231,138,38)"/><text x="30.7380%" y="127.50"></text></g><g><title>coherent_trait (8,490,810 samples, 3.91%)</title><rect x="28.5279%" y="165" width="3.9079%" height="15" fill="rgb(231,145,46)"/><text x="28.7779%" y="175.50">cohe..</text></g><g><title>specialization_graph_of (8,465,810 samples, 3.90%)</title><rect x="28.5394%" y="149" width="3.8964%" height="15" fill="rgb(251,118,11)"/><text x="28.7894%" y="159.50">spec..</text></g><g><title>trait_impls_of (542,975 samples, 0.25%)</title><rect x="32.1859%" y="133" width="0.2499%" height="15" fill="rgb(217,147,25)"/><text x="32.4359%" y="143.50"></text></g><g><title>coherence_checking (8,600,811 samples, 3.96%)</title><rect x="28.5197%" y="181" width="3.9585%" height="15" fill="rgb(247,81,37)"/><text x="28.7697%" y="191.50">cohe..</text></g><g><title>associated_item (429,653 samples, 0.20%)</title><rect x="41.2623%" y="117" width="0.1977%" height="15" fill="rgb(209,12,38)"/><text x="41.5123%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (355,162 samples, 0.16%)</title><rect x="41.2966%" y="101" width="0.1635%" height="15" fill="rgb(227,1,9)"/><text x="41.5466%" y="111.50"></text></g><g><title>associated_items (562,429 samples, 0.26%)</title><rect x="41.2104%" y="133" width="0.2589%" height="15" fill="rgb(248,47,43)"/><text x="41.4604%" y="143.50"></text></g><g><title>dropck_outlives (313,022 samples, 0.14%)</title><rect x="41.4912%" y="133" width="0.1441%" height="15" fill="rgb(221,10,30)"/><text x="41.7412%" y="143.50"></text></g><g><title>mir_borrowck (326,753 samples, 0.15%)</title><rect x="42.0054%" y="53" width="0.1504%" height="15" fill="rgb(210,229,1)"/><text x="42.2554%" y="63.50"></text></g><g><title>mir_for_ctfe (501,994 samples, 0.23%)</title><rect x="41.9253%" y="85" width="0.2310%" height="15" fill="rgb(222,148,37)"/><text x="42.1753%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (437,674 samples, 0.20%)</title><rect x="41.9549%" y="69" width="0.2014%" height="15" fill="rgb(234,67,33)"/><text x="42.2049%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,163,920 samples, 0.54%)</title><rect x="41.6353%" y="133" width="0.5357%" height="15" fill="rgb(247,98,35)"/><text x="41.8853%" y="143.50"></text></g><g><title>eval_to_const_value_raw (976,618 samples, 0.45%)</title><rect x="41.7215%" y="117" width="0.4495%" height="15" fill="rgb(247,138,52)"/><text x="41.9715%" y="127.50"></text></g><g><title>eval_to_allocation_raw (961,078 samples, 0.44%)</title><rect x="41.7287%" y="101" width="0.4423%" height="15" fill="rgb(213,79,30)"/><text x="41.9787%" y="111.50"></text></g><g><title>mir_for_ctfe (872,277 samples, 0.40%)</title><rect x="43.1373%" y="69" width="0.4015%" height="15" fill="rgb(246,177,23)"/><text x="43.3873%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (863,107 samples, 0.40%)</title><rect x="43.1416%" y="53" width="0.3972%" height="15" fill="rgb(230,62,27)"/><text x="43.3916%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,632,728 samples, 0.75%)</title><rect x="42.8005%" y="117" width="0.7515%" height="15" fill="rgb(216,154,8)"/><text x="43.0505%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,606,428 samples, 0.74%)</title><rect x="42.8126%" y="101" width="0.7394%" height="15" fill="rgb(244,35,45)"/><text x="43.0626%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,571,177 samples, 0.72%)</title><rect x="42.8289%" y="85" width="0.7231%" height="15" fill="rgb(251,115,12)"/><text x="43.0789%" y="95.50"></text></g><g><title>trait_impls_of (551,916 samples, 0.25%)</title><rect x="43.8026%" y="117" width="0.2540%" height="15" fill="rgb(240,54,50)"/><text x="44.0526%" y="127.50"></text></g><g><title>evaluate_obligation (4,099,464 samples, 1.89%)</title><rect x="42.1710%" y="133" width="1.8868%" height="15" fill="rgb(233,84,52)"/><text x="42.4210%" y="143.50">e..</text></g><g><title>method_autoderef_steps (239,152 samples, 0.11%)</title><rect x="44.4238%" y="133" width="0.1101%" height="15" fill="rgb(207,117,47)"/><text x="44.6738%" y="143.50"></text></g><g><title>predicates_of (291,774 samples, 0.13%)</title><rect x="44.5927%" y="133" width="0.1343%" height="15" fill="rgb(249,43,39)"/><text x="44.8427%" y="143.50"></text></g><g><title>dropck_outlives (225,622 samples, 0.10%)</title><rect x="52.0691%" y="117" width="0.1038%" height="15" fill="rgb(209,38,44)"/><text x="52.3191%" y="127.50"></text></g><g><title>evaluate_obligation (931,313 samples, 0.43%)</title><rect x="52.1729%" y="117" width="0.4286%" height="15" fill="rgb(236,212,23)"/><text x="52.4229%" y="127.50"></text></g><g><title>is_copy_raw (1,190,072 samples, 0.55%)</title><rect x="52.6325%" y="117" width="0.5477%" height="15" fill="rgb(242,79,21)"/><text x="52.8825%" y="127.50"></text></g><g><title>evaluate_obligation (1,131,011 samples, 0.52%)</title><rect x="52.6597%" y="101" width="0.5206%" height="15" fill="rgb(211,96,35)"/><text x="52.9097%" y="111.50"></text></g><g><title>lint_levels (266,382 samples, 0.12%)</title><rect x="53.1803%" y="117" width="0.1226%" height="15" fill="rgb(253,215,40)"/><text x="53.4303%" y="127.50"></text></g><g><title>method_autoderef_steps (372,145 samples, 0.17%)</title><rect x="53.3039%" y="117" width="0.1713%" height="15" fill="rgb(211,81,21)"/><text x="53.5539%" y="127.50"></text></g><g><title>typeck (18,987,860 samples, 8.74%)</title><rect x="44.7854%" y="133" width="8.7392%" height="15" fill="rgb(208,190,38)"/><text x="45.0354%" y="143.50">typeck</text></g><g><title>item_bodies_checking (45,718,753 samples, 21.04%)</title><rect x="32.5085%" y="181" width="21.0422%" height="15" fill="rgb(235,213,38)"/><text x="32.7585%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (45,714,603 samples, 21.04%)</title><rect x="32.5105%" y="165" width="21.0402%" height="15" fill="rgb(237,122,38)"/><text x="32.7605%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (45,594,893 samples, 20.99%)</title><rect x="32.5656%" y="149" width="20.9851%" height="15" fill="rgb(244,218,35)"/><text x="32.8156%" y="159.50">typeck</text></g><g><title>adt_destructor (356,165 samples, 0.16%)</title><rect x="54.9050%" y="149" width="0.1639%" height="15" fill="rgb(240,68,47)"/><text x="55.1550%" y="159.50"></text></g><g><title>coherent_trait (344,624 samples, 0.16%)</title><rect x="54.9103%" y="133" width="0.1586%" height="15" fill="rgb(210,16,53)"/><text x="55.1603%" y="143.50"></text></g><g><title>specialization_graph_of (341,924 samples, 0.16%)</title><rect x="54.9115%" y="117" width="0.1574%" height="15" fill="rgb(235,124,12)"/><text x="55.1615%" y="127.50"></text></g><g><title>evaluate_obligation (1,698,919 samples, 0.78%)</title><rect x="55.0734%" y="149" width="0.7819%" height="15" fill="rgb(224,169,11)"/><text x="55.3234%" y="159.50"></text></g><g><title>predicates_of (224,613 samples, 0.10%)</title><rect x="55.9436%" y="149" width="0.1034%" height="15" fill="rgb(250,166,2)"/><text x="56.1936%" y="159.50"></text></g><g><title>predicates_defined_on (219,473 samples, 0.10%)</title><rect x="55.9459%" y="133" width="0.1010%" height="15" fill="rgb(242,216,29)"/><text x="56.1959%" y="143.50"></text></g><g><title>item_types_checking (5,482,218 samples, 2.52%)</title><rect x="53.5507%" y="181" width="2.5232%" height="15" fill="rgb(230,116,27)"/><text x="53.8007%" y="191.50">it..</text></g><g><title>check_mod_item_types (5,477,198 samples, 2.52%)</title><rect x="53.5530%" y="165" width="2.5209%" height="15" fill="rgb(228,99,48)"/><text x="53.8030%" y="175.50">ch..</text></g><g><title>fn_sig (453,503 samples, 0.21%)</title><rect x="56.2838%" y="149" width="0.2087%" height="15" fill="rgb(253,11,6)"/><text x="56.5338%" y="159.50"></text></g><g><title>named_region_map (465,339 samples, 0.21%)</title><rect x="56.5803%" y="133" width="0.2142%" height="15" fill="rgb(247,143,39)"/><text x="56.8303%" y="143.50"></text></g><g><title>resolve_lifetimes (420,488 samples, 0.19%)</title><rect x="56.6009%" y="117" width="0.1935%" height="15" fill="rgb(236,97,10)"/><text x="56.8509%" y="127.50"></text></g><g><title>generics_of (687,271 samples, 0.32%)</title><rect x="56.4925%" y="149" width="0.3163%" height="15" fill="rgb(233,208,19)"/><text x="56.7425%" y="159.50"></text></g><g><title>predicates_of (586,067 samples, 0.27%)</title><rect x="56.8555%" y="149" width="0.2697%" height="15" fill="rgb(216,164,2)"/><text x="57.1055%" y="159.50"></text></g><g><title>predicates_defined_on (477,305 samples, 0.22%)</title><rect x="56.9056%" y="133" width="0.2197%" height="15" fill="rgb(220,129,5)"/><text x="57.1556%" y="143.50"></text></g><g><title>type_collecting (2,512,956 samples, 1.16%)</title><rect x="56.0752%" y="181" width="1.1566%" height="15" fill="rgb(242,17,10)"/><text x="56.3252%" y="191.50"></text></g><g><title>collect_mod_item_types (2,504,506 samples, 1.15%)</title><rect x="56.0791%" y="165" width="1.1527%" height="15" fill="rgb(242,107,0)"/><text x="56.3291%" y="175.50"></text></g><g><title>type_of (231,554 samples, 0.11%)</title><rect x="57.1253%" y="149" width="0.1066%" height="15" fill="rgb(251,28,31)"/><text x="57.3753%" y="159.50"></text></g><g><title>evaluate_obligation (1,934,916 samples, 0.89%)</title><rect x="60.0759%" y="149" width="0.8905%" height="15" fill="rgb(233,223,10)"/><text x="60.3259%" y="159.50"></text></g><g><title>implied_outlives_bounds (1,254,332 samples, 0.58%)</title><rect x="60.9997%" y="149" width="0.5773%" height="15" fill="rgb(215,21,27)"/><text x="61.2497%" y="159.50"></text></g><g><title>mir_borrowck (380,474 samples, 0.18%)</title><rect x="62.0499%" y="53" width="0.1751%" height="15" fill="rgb(232,23,21)"/><text x="62.2999%" y="63.50"></text></g><g><title>mir_for_ctfe (512,776 samples, 0.24%)</title><rect x="61.9898%" y="85" width="0.2360%" height="15" fill="rgb(244,5,23)"/><text x="62.2398%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (473,895 samples, 0.22%)</title><rect x="62.0077%" y="69" width="0.2181%" height="15" fill="rgb(226,81,46)"/><text x="62.2577%" y="79.50"></text></g><g><title>generics_of (228,822 samples, 0.11%)</title><rect x="62.6133%" y="53" width="0.1053%" height="15" fill="rgb(247,70,30)"/><text x="62.8633%" y="63.50"></text></g><g><title>impl_trait_ref (293,562 samples, 0.14%)</title><rect x="62.7311%" y="53" width="0.1351%" height="15" fill="rgb(212,68,19)"/><text x="62.9811%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (247,132 samples, 0.11%)</title><rect x="62.7524%" y="37" width="0.1137%" height="15" fill="rgb(240,187,13)"/><text x="63.0024%" y="47.50"></text></g><g><title>specializes (277,403 samples, 0.13%)</title><rect x="62.9030%" y="53" width="0.1277%" height="15" fill="rgb(223,113,26)"/><text x="63.1530%" y="63.50"></text></g><g><title>evaluate_obligation (1,442,434 samples, 0.66%)</title><rect x="62.3917%" y="69" width="0.6639%" height="15" fill="rgb(206,192,2)"/><text x="62.6417%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,763,609 samples, 1.27%)</title><rect x="61.8107%" y="133" width="1.2720%" height="15" fill="rgb(241,108,4)"/><text x="62.0607%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,749,689 samples, 1.27%)</title><rect x="61.8171%" y="117" width="1.2656%" height="15" fill="rgb(247,173,49)"/><text x="62.0671%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,747,869 samples, 1.26%)</title><rect x="61.8179%" y="101" width="1.2647%" height="15" fill="rgb(224,114,35)"/><text x="62.0679%" y="111.50"></text></g><g><title>typeck (1,667,008 samples, 0.77%)</title><rect x="62.3154%" y="85" width="0.7672%" height="15" fill="rgb(245,159,27)"/><text x="62.5654%" y="95.50"></text></g><g><title>param_env (3,292,836 samples, 1.52%)</title><rect x="61.5773%" y="149" width="1.5155%" height="15" fill="rgb(245,172,44)"/><text x="61.8273%" y="159.50"></text></g><g><title>check_impl_item_well_formed (12,989,909 samples, 5.98%)</title><rect x="57.3961%" y="165" width="5.9786%" height="15" fill="rgb(236,23,11)"/><text x="57.6461%" y="175.50">check_im..</text></g><g><title>region_scope_tree (516,530 samples, 0.24%)</title><rect x="63.1370%" y="149" width="0.2377%" height="15" fill="rgb(205,117,38)"/><text x="63.3870%" y="159.50"></text></g><g><title>evaluate_obligation (2,619,830 samples, 1.21%)</title><rect x="65.7311%" y="149" width="1.2058%" height="15" fill="rgb(237,72,25)"/><text x="65.9811%" y="159.50"></text></g><g><title>param_env (571,578 samples, 0.26%)</title><rect x="67.0246%" y="149" width="0.2631%" height="15" fill="rgb(244,70,9)"/><text x="67.2746%" y="159.50"></text></g><g><title>analysis (130,375,296 samples, 60.01%)</title><rect x="7.4361%" y="213" width="60.0055%" height="15" fill="rgb(217,125,39)"/><text x="7.6861%" y="223.50">analysis</text></g><g><title>type_check_crate (84,659,124 samples, 38.96%)</title><rect x="28.4771%" y="197" width="38.9645%" height="15" fill="rgb(235,36,10)"/><text x="28.7271%" y="207.50">type_check_crate</text></g><g><title>wf_checking (22,175,284 samples, 10.21%)</title><rect x="57.2354%" y="181" width="10.2062%" height="15" fill="rgb(251,123,47)"/><text x="57.4854%" y="191.50">wf_checking</text></g><g><title>check_item_well_formed (8,836,223 samples, 4.07%)</title><rect x="63.3747%" y="165" width="4.0669%" height="15" fill="rgb(221,13,13)"/><text x="63.6247%" y="175.50">chec..</text></g><g><title>codegen_module (2,005,001 samples, 0.92%)</title><rect x="67.6563%" y="197" width="0.9228%" height="15" fill="rgb(238,131,9)"/><text x="67.9063%" y="207.50"></text></g><g><title>codegen_crate (2,634,189 samples, 1.21%)</title><rect x="67.4444%" y="213" width="1.2124%" height="15" fill="rgb(211,50,8)"/><text x="67.6944%" y="223.50"></text></g><g><title>LLVM_module_codegen (14,663,944 samples, 6.75%)</title><rect x="68.6653%" y="197" width="6.7491%" height="15" fill="rgb(245,182,24)"/><text x="68.9153%" y="207.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (14,300,431 samples, 6.58%)</title><rect x="68.8326%" y="181" width="6.5818%" height="15" fill="rgb(242,14,37)"/><text x="69.0826%" y="191.50">LLVM_modu..</text></g><g><title>codegen_module_optimize (15,399,532 samples, 7.09%)</title><rect x="68.6568%" y="213" width="7.0877%" height="15" fill="rgb(246,228,12)"/><text x="68.9068%" y="223.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (717,128 samples, 0.33%)</title><rect x="75.4144%" y="197" width="0.3301%" height="15" fill="rgb(213,55,15)"/><text x="75.6644%" y="207.50"></text></g><g><title>metadata_register_crate (1,502,207 samples, 0.69%)</title><rect x="81.8627%" y="165" width="0.6914%" height="15" fill="rgb(209,9,3)"/><text x="82.1127%" y="175.50"></text></g><g><title>metadata_register_crate (1,016,401 samples, 0.47%)</title><rect x="82.0862%" y="149" width="0.4678%" height="15" fill="rgb(230,59,30)"/><text x="82.3362%" y="159.50"></text></g><g><title>metadata_register_crate (395,852 samples, 0.18%)</title><rect x="82.3719%" y="133" width="0.1822%" height="15" fill="rgb(209,121,21)"/><text x="82.6219%" y="143.50"></text></g><g><title>macro_expand_crate (14,445,353 samples, 6.65%)</title><rect x="75.9389%" y="197" width="6.6485%" height="15" fill="rgb(220,109,13)"/><text x="76.1889%" y="207.50">macro_exp..</text></g><g><title>expand_crate (14,435,292 samples, 6.64%)</title><rect x="75.9436%" y="181" width="6.6439%" height="15" fill="rgb(232,18,1)"/><text x="76.1936%" y="191.50">expand_cr..</text></g><g><title>late_resolve_crate (1,552,486 samples, 0.71%)</title><rect x="82.7160%" y="181" width="0.7145%" height="15" fill="rgb(215,41,42)"/><text x="82.9660%" y="191.50"></text></g><g><title>configure_and_expand (16,886,258 samples, 7.77%)</title><rect x="75.7445%" y="213" width="7.7719%" height="15" fill="rgb(224,123,36)"/><text x="75.9945%" y="223.50">configure_a..</text></g><g><title>resolve_crate (1,950,730 samples, 0.90%)</title><rect x="82.6186%" y="197" width="0.8978%" height="15" fill="rgb(240,125,3)"/><text x="82.8686%" y="207.50"></text></g><g><title>drop_ast (239,982 samples, 0.11%)</title><rect x="83.5164%" y="213" width="0.1105%" height="15" fill="rgb(205,98,50)"/><text x="83.7664%" y="223.50"></text></g><g><title>early_lint_checks (401,175 samples, 0.18%)</title><rect x="83.6354%" y="213" width="0.1846%" height="15" fill="rgb(205,185,37)"/><text x="83.8854%" y="223.50"></text></g><g><title>free_global_ctxt (3,998,772 samples, 1.84%)</title><rect x="83.8200%" y="213" width="1.8404%" height="15" fill="rgb(238,207,15)"/><text x="84.0700%" y="223.50">f..</text></g><g><title>optimized_mir (1,082,950 samples, 0.50%)</title><rect x="86.7671%" y="133" width="0.4984%" height="15" fill="rgb(213,199,42)"/><text x="87.0171%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (464,167 samples, 0.21%)</title><rect x="87.0519%" y="117" width="0.2136%" height="15" fill="rgb(235,201,11)"/><text x="87.3019%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,244,594 samples, 0.57%)</title><rect x="86.6937%" y="149" width="0.5728%" height="15" fill="rgb(207,46,11)"/><text x="86.9437%" y="159.50"></text></g><g><title>monomorphization_collector (1,320,995 samples, 0.61%)</title><rect x="86.6921%" y="165" width="0.6080%" height="15" fill="rgb(241,35,35)"/><text x="86.9421%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,552,287 samples, 0.71%)</title><rect x="86.6844%" y="181" width="0.7144%" height="15" fill="rgb(243,32,47)"/><text x="86.9344%" y="191.50"></text></g><g><title>exported_symbols (1,772,729 samples, 0.82%)</title><rect x="86.6743%" y="197" width="0.8159%" height="15" fill="rgb(247,202,23)"/><text x="86.9243%" y="207.50"></text></g><g><title>is_sized_raw (640,557 samples, 0.29%)</title><rect x="89.3579%" y="165" width="0.2948%" height="15" fill="rgb(219,102,11)"/><text x="89.6079%" y="175.50"></text></g><g><title>evaluate_obligation (606,057 samples, 0.28%)</title><rect x="89.3738%" y="149" width="0.2789%" height="15" fill="rgb(243,110,44)"/><text x="89.6238%" y="159.50"></text></g><g><title>is_sized_raw (842,030 samples, 0.39%)</title><rect x="89.7010%" y="149" width="0.3875%" height="15" fill="rgb(222,74,54)"/><text x="89.9510%" y="159.50"></text></g><g><title>evaluate_obligation (824,750 samples, 0.38%)</title><rect x="89.7089%" y="133" width="0.3796%" height="15" fill="rgb(216,99,12)"/><text x="89.9589%" y="143.50"></text></g><g><title>layout_of (1,346,364 samples, 0.62%)</title><rect x="89.6527%" y="165" width="0.6197%" height="15" fill="rgb(226,22,26)"/><text x="89.9027%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (232,162 samples, 0.11%)</title><rect x="90.1656%" y="149" width="0.1069%" height="15" fill="rgb(217,163,10)"/><text x="90.4156%" y="159.50"></text></g><g><title>layout_of (2,544,028 samples, 1.17%)</title><rect x="89.1148%" y="181" width="1.1709%" height="15" fill="rgb(213,25,53)"/><text x="89.3648%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,364,318 samples, 1.55%)</title><rect x="90.2857%" y="181" width="1.5484%" height="15" fill="rgb(252,105,26)"/><text x="90.5357%" y="191.50"></text></g><g><title>optimized_mir (9,439,479 samples, 4.34%)</title><rect x="87.5238%" y="197" width="4.3445%" height="15" fill="rgb(220,39,43)"/><text x="87.7738%" y="207.50">optim..</text></g><g><title>generate_crate_metadata (13,559,643 samples, 6.24%)</title><rect x="85.6605%" y="213" width="6.2409%" height="15" fill="rgb(229,68,48)"/><text x="85.9105%" y="223.50">generate..</text></g><g><title>hir_lowering (4,010,293 samples, 1.85%)</title><rect x="91.9013%" y="213" width="1.8457%" height="15" fill="rgb(252,8,32)"/><text x="92.1513%" y="223.50">h..</text></g><g><title>finish_ongoing_codegen (10,814,865 samples, 4.98%)</title><rect x="93.7555%" y="197" width="4.9776%" height="15" fill="rgb(223,20,43)"/><text x="94.0055%" y="207.50">finish..</text></g><g><title>link_crate (891,779 samples, 0.41%)</title><rect x="98.7331%" y="197" width="0.4104%" height="15" fill="rgb(229,81,49)"/><text x="98.9831%" y="207.50"></text></g><g><title>link_binary (874,059 samples, 0.40%)</title><rect x="98.7412%" y="181" width="0.4023%" height="15" fill="rgb(236,28,36)"/><text x="98.9912%" y="191.50"></text></g><g><title>link_rlib (614,437 samples, 0.28%)</title><rect x="98.8607%" y="165" width="0.2828%" height="15" fill="rgb(249,185,26)"/><text x="99.1107%" y="175.50"></text></g><g><title>link (11,733,834 samples, 5.40%)</title><rect x="93.7471%" y="213" width="5.4005%" height="15" fill="rgb(249,174,33)"/><text x="93.9971%" y="223.50">link</text></g><g><title>parse_crate (317,373 samples, 0.15%)</title><rect x="99.1476%" y="213" width="0.1461%" height="15" fill="rgb(233,201,37)"/><text x="99.3976%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (900,029 samples, 0.41%)</title><rect x="99.3854%" y="213" width="0.4142%" height="15" fill="rgb(221,78,26)"/><text x="99.6354%" y="223.50"></text></g><g><title>all (217,272,213 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (217,272,213 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (342,113 samples, 0.16%)</title><rect x="99.8425%" y="213" width="0.1575%" height="15" fill="rgb(229,67,23)"/><text x="100.0925%" y="223.50"></text></g></svg></svg>