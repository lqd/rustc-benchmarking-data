<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (360,936,716 samples, 13.43%)</title><rect x="0.0457%" y="181" width="13.4344%" height="15" fill="rgb(227,0,7)"/><text x="0.2957%" y="191.50">LLVM_passes</text></g><g><title>implied_outlives_bounds (2,957,615 samples, 0.11%)</title><rect x="16.1582%" y="133" width="0.1101%" height="15" fill="rgb(217,0,24)"/><text x="16.4082%" y="143.50"></text></g><g><title>is_copy_raw (6,171,189 samples, 0.23%)</title><rect x="17.3909%" y="53" width="0.2297%" height="15" fill="rgb(221,193,54)"/><text x="17.6409%" y="63.50"></text></g><g><title>evaluate_obligation (4,544,082 samples, 0.17%)</title><rect x="17.4514%" y="37" width="0.1691%" height="15" fill="rgb(248,212,6)"/><text x="17.7014%" y="47.50"></text></g><g><title>needs_drop_raw (8,001,132 samples, 0.30%)</title><rect x="17.3261%" y="69" width="0.2978%" height="15" fill="rgb(208,68,35)"/><text x="17.5761%" y="79.50"></text></g><g><title>resolve_instance (5,089,509 samples, 0.19%)</title><rect x="17.6239%" y="69" width="0.1894%" height="15" fill="rgb(232,128,0)"/><text x="17.8739%" y="79.50"></text></g><g><title>thir_body (5,297,146 samples, 0.20%)</title><rect x="17.8187%" y="69" width="0.1972%" height="15" fill="rgb(207,160,47)"/><text x="18.0687%" y="79.50"></text></g><g><title>mir_const (42,367,897 samples, 1.58%)</title><rect x="16.4665%" y="117" width="1.5770%" height="15" fill="rgb(228,23,34)"/><text x="16.7165%" y="127.50"></text></g><g><title>unsafety_check_result (37,959,397 samples, 1.41%)</title><rect x="16.6306%" y="101" width="1.4129%" height="15" fill="rgb(218,30,26)"/><text x="16.8806%" y="111.50"></text></g><g><title>mir_built (34,991,150 samples, 1.30%)</title><rect x="16.7411%" y="85" width="1.3024%" height="15" fill="rgb(220,122,19)"/><text x="16.9911%" y="95.50"></text></g><g><title>mir_promoted (47,555,442 samples, 1.77%)</title><rect x="16.3089%" y="133" width="1.7701%" height="15" fill="rgb(250,228,42)"/><text x="16.5589%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (4,691,431 samples, 0.17%)</title><rect x="18.0790%" y="133" width="0.1746%" height="15" fill="rgb(240,193,28)"/><text x="18.3290%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,527,935 samples, 0.13%)</title><rect x="18.2536%" y="133" width="0.1313%" height="15" fill="rgb(216,20,37)"/><text x="18.5036%" y="143.50"></text></g><g><title>type_op_normalize_predicate (2,768,107 samples, 0.10%)</title><rect x="18.3849%" y="133" width="0.1030%" height="15" fill="rgb(206,188,39)"/><text x="18.6349%" y="143.50"></text></g><g><title>type_op_prove_predicate (24,699,889 samples, 0.92%)</title><rect x="18.5876%" y="133" width="0.9194%" height="15" fill="rgb(217,207,13)"/><text x="18.8376%" y="143.50"></text></g><g><title>MIR_borrow_checking (160,665,498 samples, 5.98%)</title><rect x="13.5279%" y="165" width="5.9801%" height="15" fill="rgb(231,73,38)"/><text x="13.7779%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (160,050,340 samples, 5.96%)</title><rect x="13.5508%" y="149" width="5.9572%" height="15" fill="rgb(225,20,46)"/><text x="13.8008%" y="159.50">mir_borr..</text></g><g><title>misc_checking_1 (4,500,665 samples, 0.17%)</title><rect x="19.5665%" y="165" width="0.1675%" height="15" fill="rgb(210,31,41)"/><text x="19.8165%" y="175.50"></text></g><g><title>misc_checking_2 (6,618,577 samples, 0.25%)</title><rect x="19.7341%" y="165" width="0.2463%" height="15" fill="rgb(221,200,47)"/><text x="19.9841%" y="175.50"></text></g><g><title>match_checking (4,305,164 samples, 0.16%)</title><rect x="19.8202%" y="149" width="0.1602%" height="15" fill="rgb(226,26,5)"/><text x="20.0702%" y="159.50"></text></g><g><title>check_match (4,138,593 samples, 0.15%)</title><rect x="19.8264%" y="133" width="0.1540%" height="15" fill="rgb(249,33,26)"/><text x="20.0764%" y="143.50"></text></g><g><title>crate_lints (6,400,835 samples, 0.24%)</title><rect x="20.0906%" y="133" width="0.2382%" height="15" fill="rgb(235,183,28)"/><text x="20.3406%" y="143.50"></text></g><g><title>lint_checking (9,130,073 samples, 0.34%)</title><rect x="20.0904%" y="149" width="0.3398%" height="15" fill="rgb(221,5,38)"/><text x="20.3404%" y="159.50"></text></g><g><title>module_lints (2,725,868 samples, 0.10%)</title><rect x="20.3288%" y="133" width="0.1015%" height="15" fill="rgb(247,18,42)"/><text x="20.5788%" y="143.50"></text></g><g><title>lint_mod (2,712,378 samples, 0.10%)</title><rect x="20.3293%" y="117" width="0.1010%" height="15" fill="rgb(241,131,45)"/><text x="20.5793%" y="127.50"></text></g><g><title>privacy_checking_modules (5,691,588 samples, 0.21%)</title><rect x="20.4868%" y="149" width="0.2118%" height="15" fill="rgb(249,31,29)"/><text x="20.7368%" y="159.50"></text></g><g><title>check_mod_privacy (5,680,928 samples, 0.21%)</title><rect x="20.4872%" y="133" width="0.2114%" height="15" fill="rgb(225,111,53)"/><text x="20.7372%" y="143.50"></text></g><g><title>misc_checking_3 (19,335,006 samples, 0.72%)</title><rect x="19.9804%" y="165" width="0.7197%" height="15" fill="rgb(238,160,17)"/><text x="20.2304%" y="175.50"></text></g><g><title>impl_parent (3,711,378 samples, 0.14%)</title><rect x="20.9623%" y="101" width="0.1381%" height="15" fill="rgb(214,148,48)"/><text x="21.2123%" y="111.50"></text></g><g><title>impl_trait_ref (7,261,421 samples, 0.27%)</title><rect x="21.1005%" y="101" width="0.2703%" height="15" fill="rgb(232,36,49)"/><text x="21.3505%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,707,775 samples, 0.21%)</title><rect x="21.1583%" y="85" width="0.2124%" height="15" fill="rgb(209,103,24)"/><text x="21.4083%" y="95.50"></text></g><g><title>coherent_trait (19,686,478 samples, 0.73%)</title><rect x="20.7120%" y="133" width="0.7327%" height="15" fill="rgb(229,88,8)"/><text x="20.9620%" y="143.50"></text></g><g><title>specialization_graph_of (19,238,744 samples, 0.72%)</title><rect x="20.7286%" y="117" width="0.7161%" height="15" fill="rgb(213,181,19)"/><text x="20.9786%" y="127.50"></text></g><g><title>coherence_checking (19,928,141 samples, 0.74%)</title><rect x="20.7107%" y="149" width="0.7417%" height="15" fill="rgb(254,191,54)"/><text x="20.9607%" y="159.50"></text></g><g><title>dropck_outlives (4,318,177 samples, 0.16%)</title><rect x="25.6767%" y="101" width="0.1607%" height="15" fill="rgb(241,83,37)"/><text x="25.9267%" y="111.50"></text></g><g><title>evaluate_obligation (8,897,739 samples, 0.33%)</title><rect x="25.8375%" y="101" width="0.3312%" height="15" fill="rgb(233,36,39)"/><text x="26.0875%" y="111.50"></text></g><g><title>evaluate_obligation (3,289,865 samples, 0.12%)</title><rect x="27.2782%" y="85" width="0.1225%" height="15" fill="rgb(226,3,54)"/><text x="27.5282%" y="95.50"></text></g><g><title>typeck (31,293,638 samples, 1.16%)</title><rect x="26.3466%" y="101" width="1.1648%" height="15" fill="rgb(245,192,40)"/><text x="26.5966%" y="111.50"></text></g><g><title>item_bodies_checking (162,754,249 samples, 6.06%)</title><rect x="21.4588%" y="149" width="6.0579%" height="15" fill="rgb(238,167,29)"/><text x="21.7088%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (162,749,609 samples, 6.06%)</title><rect x="21.4589%" y="133" width="6.0577%" height="15" fill="rgb(232,182,51)"/><text x="21.7089%" y="143.50">typeck_i..</text></g><g><title>typeck (162,340,896 samples, 6.04%)</title><rect x="21.4741%" y="117" width="6.0425%" height="15" fill="rgb(231,60,39)"/><text x="21.7241%" y="127.50">typeck</text></g><g><title>item_types_checking (12,331,594 samples, 0.46%)</title><rect x="27.5166%" y="149" width="0.4590%" height="15" fill="rgb(208,69,12)"/><text x="27.7666%" y="159.50"></text></g><g><title>check_mod_item_types (12,318,064 samples, 0.46%)</title><rect x="27.5171%" y="133" width="0.4585%" height="15" fill="rgb(235,93,37)"/><text x="27.7671%" y="143.50"></text></g><g><title>explicit_predicates_of (3,148,858 samples, 0.12%)</title><rect x="28.2086%" y="85" width="0.1172%" height="15" fill="rgb(213,116,39)"/><text x="28.4586%" y="95.50"></text></g><g><title>predicates_of (4,423,349 samples, 0.16%)</title><rect x="28.1829%" y="117" width="0.1646%" height="15" fill="rgb(222,207,29)"/><text x="28.4329%" y="127.50"></text></g><g><title>predicates_defined_on (4,166,047 samples, 0.16%)</title><rect x="28.1925%" y="101" width="0.1551%" height="15" fill="rgb(206,96,30)"/><text x="28.4425%" y="111.50"></text></g><g><title>type_collecting (11,132,653 samples, 0.41%)</title><rect x="27.9759%" y="149" width="0.4144%" height="15" fill="rgb(218,138,4)"/><text x="28.2259%" y="159.50"></text></g><g><title>collect_mod_item_types (11,113,593 samples, 0.41%)</title><rect x="27.9766%" y="133" width="0.4137%" height="15" fill="rgb(250,191,14)"/><text x="28.2266%" y="143.50"></text></g><g><title>check_impl_item_well_formed (24,767,674 samples, 0.92%)</title><rect x="28.4315%" y="133" width="0.9219%" height="15" fill="rgb(239,60,40)"/><text x="28.6815%" y="143.50"></text></g><g><title>check_item_well_formed (14,147,938 samples, 0.53%)</title><rect x="29.3534%" y="133" width="0.5266%" height="15" fill="rgb(206,27,48)"/><text x="29.6034%" y="143.50"></text></g><g><title>analysis (442,603,404 samples, 16.47%)</title><rect x="13.4801%" y="181" width="16.4741%" height="15" fill="rgb(225,35,8)"/><text x="13.7301%" y="191.50">analysis</text></g><g><title>type_check_crate (248,627,078 samples, 9.25%)</title><rect x="20.7001%" y="165" width="9.2541%" height="15" fill="rgb(250,213,24)"/><text x="20.9501%" y="175.50">type_check_cr..</text></g><g><title>wf_checking (41,989,966 samples, 1.56%)</title><rect x="28.3913%" y="149" width="1.5629%" height="15" fill="rgb(247,123,22)"/><text x="28.6413%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (8,422,412 samples, 0.31%)</title><rect x="39.7294%" y="149" width="0.3135%" height="15" fill="rgb(231,138,38)"/><text x="39.9794%" y="159.50"></text></g><g><title>layout_of (3,688,116 samples, 0.14%)</title><rect x="40.6581%" y="133" width="0.1373%" height="15" fill="rgb(231,145,46)"/><text x="40.9081%" y="143.50"></text></g><g><title>predicates_of (3,567,349 samples, 0.13%)</title><rect x="41.0848%" y="117" width="0.1328%" height="15" fill="rgb(251,118,11)"/><text x="41.3348%" y="127.50"></text></g><g><title>param_env (11,374,051 samples, 0.42%)</title><rect x="40.7954%" y="133" width="0.4234%" height="15" fill="rgb(217,147,25)"/><text x="41.0454%" y="143.50"></text></g><g><title>normalize_projection_ty (6,610,112 samples, 0.25%)</title><rect x="41.3199%" y="117" width="0.2460%" height="15" fill="rgb(247,81,37)"/><text x="41.5699%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (9,332,446 samples, 0.35%)</title><rect x="41.2187%" y="133" width="0.3474%" height="15" fill="rgb(209,12,38)"/><text x="41.4687%" y="143.50"></text></g><g><title>fn_abi_of_instance (39,473,064 samples, 1.47%)</title><rect x="40.1004%" y="149" width="1.4692%" height="15" fill="rgb(227,1,9)"/><text x="40.3504%" y="159.50"></text></g><g><title>layout_of (5,629,855 samples, 0.21%)</title><rect x="41.6299%" y="149" width="0.2095%" height="15" fill="rgb(248,47,43)"/><text x="41.8799%" y="159.50"></text></g><g><title>symbol_name (3,263,516 samples, 0.12%)</title><rect x="41.8406%" y="149" width="0.1215%" height="15" fill="rgb(221,10,30)"/><text x="42.0906%" y="159.50"></text></g><g><title>codegen_module (321,590,666 samples, 11.97%)</title><rect x="30.0797%" y="165" width="11.9699%" height="15" fill="rgb(210,229,1)"/><text x="30.3297%" y="175.50">codegen_module</text></g><g><title>codegen_crate (325,086,202 samples, 12.10%)</title><rect x="29.9546%" y="181" width="12.1000%" height="15" fill="rgb(222,148,37)"/><text x="30.2046%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,111,260,365 samples, 41.36%)</title><rect x="42.1125%" y="165" width="41.3621%" height="15" fill="rgb(234,67,33)"/><text x="42.3625%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,057,118,258 samples, 39.35%)</title><rect x="44.1277%" y="149" width="39.3469%" height="15" fill="rgb(247,98,35)"/><text x="44.3777%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,150,417,374 samples, 42.82%)</title><rect x="42.0545%" y="181" width="42.8195%" height="15" fill="rgb(247,138,52)"/><text x="42.3045%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (37,599,963 samples, 1.40%)</title><rect x="83.4746%" y="165" width="1.3995%" height="15" fill="rgb(213,79,30)"/><text x="83.7246%" y="175.50"></text></g><g><title>metadata_register_crate (10,763,969 samples, 0.40%)</title><rect x="89.6297%" y="133" width="0.4006%" height="15" fill="rgb(246,177,23)"/><text x="89.8797%" y="143.50"></text></g><g><title>metadata_register_crate (4,587,788 samples, 0.17%)</title><rect x="89.8596%" y="117" width="0.1708%" height="15" fill="rgb(230,62,27)"/><text x="90.1096%" y="127.50"></text></g><g><title>metadata_register_crate (3,201,642 samples, 0.12%)</title><rect x="89.9112%" y="101" width="0.1192%" height="15" fill="rgb(216,154,8)"/><text x="90.1612%" y="111.50"></text></g><g><title>macro_expand_crate (138,077,948 samples, 5.14%)</title><rect x="84.9246%" y="165" width="5.1394%" height="15" fill="rgb(244,35,45)"/><text x="85.1746%" y="175.50">macro_..</text></g><g><title>expand_crate (138,058,618 samples, 5.14%)</title><rect x="84.9253%" y="149" width="5.1387%" height="15" fill="rgb(251,115,12)"/><text x="85.1753%" y="159.50">expand..</text></g><g><title>late_resolve_crate (9,066,002 samples, 0.34%)</title><rect x="90.0937%" y="149" width="0.3374%" height="15" fill="rgb(240,54,50)"/><text x="90.3437%" y="159.50"></text></g><g><title>configure_and_expand (149,919,219 samples, 5.58%)</title><rect x="84.8741%" y="181" width="5.5801%" height="15" fill="rgb(233,84,52)"/><text x="85.1241%" y="191.50">configu..</text></g><g><title>resolve_crate (10,387,916 samples, 0.39%)</title><rect x="90.0675%" y="165" width="0.3866%" height="15" fill="rgb(207,117,47)"/><text x="90.3175%" y="175.50"></text></g><g><title>free_global_ctxt (14,173,954 samples, 0.53%)</title><rect x="90.5833%" y="181" width="0.5276%" height="15" fill="rgb(249,43,39)"/><text x="90.8333%" y="191.50"></text></g><g><title>codegen_fn_attrs (4,014,094 samples, 0.15%)</title><rect x="92.0997%" y="101" width="0.1494%" height="15" fill="rgb(209,38,44)"/><text x="92.3497%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,916,489 samples, 0.22%)</title><rect x="92.4978%" y="85" width="0.2202%" height="15" fill="rgb(236,212,23)"/><text x="92.7478%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,527,410 samples, 0.13%)</title><rect x="92.7180%" y="85" width="0.1313%" height="15" fill="rgb(242,79,21)"/><text x="92.9680%" y="95.50"></text></g><g><title>optimized_mir (13,720,247 samples, 0.51%)</title><rect x="92.3562%" y="101" width="0.5107%" height="15" fill="rgb(211,96,35)"/><text x="92.6062%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (15,536,121 samples, 0.58%)</title><rect x="93.0312%" y="85" width="0.5783%" height="15" fill="rgb(253,215,40)"/><text x="93.2812%" y="95.50"></text></g><g><title>resolve_instance (25,360,129 samples, 0.94%)</title><rect x="92.8669%" y="101" width="0.9439%" height="15" fill="rgb(211,81,21)"/><text x="93.1169%" y="111.50"></text></g><g><title>normalize_projection_ty (4,253,405 samples, 0.16%)</title><rect x="93.8708%" y="85" width="0.1583%" height="15" fill="rgb(208,190,38)"/><text x="94.1208%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,869,065 samples, 0.22%)</title><rect x="93.8108%" y="101" width="0.2185%" height="15" fill="rgb(235,213,38)"/><text x="94.0608%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,773,317 samples, 0.14%)</title><rect x="94.0293%" y="101" width="0.1404%" height="15" fill="rgb(237,122,38)"/><text x="94.2793%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (73,271,191 samples, 2.73%)</title><rect x="91.5908%" y="117" width="2.7272%" height="15" fill="rgb(244,218,35)"/><text x="91.8408%" y="127.50">mo..</text></g><g><title>monomorphization_collector (73,449,383 samples, 2.73%)</title><rect x="91.5906%" y="133" width="2.7338%" height="15" fill="rgb(240,68,47)"/><text x="91.8406%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (9,379,915 samples, 0.35%)</title><rect x="94.3246%" y="117" width="0.3491%" height="15" fill="rgb(210,16,53)"/><text x="94.5746%" y="127.50"></text></g><g><title>symbol_name (8,263,244 samples, 0.31%)</title><rect x="94.3662%" y="101" width="0.3076%" height="15" fill="rgb(235,124,12)"/><text x="94.6162%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (86,290,284 samples, 3.21%)</title><rect x="91.5879%" y="149" width="3.2118%" height="15" fill="rgb(224,169,11)"/><text x="91.8379%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (12,768,210 samples, 0.48%)</title><rect x="94.3244%" y="133" width="0.4752%" height="15" fill="rgb(250,166,2)"/><text x="94.5744%" y="143.50"></text></g><g><title>cgu_partitioning (3,382,605 samples, 0.13%)</title><rect x="94.6738%" y="117" width="0.1259%" height="15" fill="rgb(242,216,29)"/><text x="94.9238%" y="127.50"></text></g><g><title>exported_symbols (87,297,694 samples, 3.25%)</title><rect x="91.5731%" y="165" width="3.2493%" height="15" fill="rgb(230,116,27)"/><text x="91.8231%" y="175.50">exp..</text></g><g><title>layout_of (6,135,093 samples, 0.23%)</title><rect x="95.3744%" y="149" width="0.2284%" height="15" fill="rgb(228,99,48)"/><text x="95.6244%" y="159.50"></text></g><g><title>is_copy_raw (4,452,984 samples, 0.17%)</title><rect x="96.4672%" y="117" width="0.1657%" height="15" fill="rgb(253,11,6)"/><text x="96.7172%" y="127.50"></text></g><g><title>evaluate_obligation (3,347,284 samples, 0.12%)</title><rect x="96.5083%" y="101" width="0.1246%" height="15" fill="rgb(247,143,39)"/><text x="96.7583%" y="111.50"></text></g><g><title>needs_drop_raw (5,145,219 samples, 0.19%)</title><rect x="96.4443%" y="133" width="0.1915%" height="15" fill="rgb(236,97,10)"/><text x="96.6943%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (28,632,757 samples, 1.07%)</title><rect x="95.6028%" y="149" width="1.0657%" height="15" fill="rgb(233,208,19)"/><text x="95.8528%" y="159.50"></text></g><g><title>optimized_mir (49,464,413 samples, 1.84%)</title><rect x="94.8380%" y="165" width="1.8411%" height="15" fill="rgb(216,164,2)"/><text x="95.0880%" y="175.50">o..</text></g><g><title>generate_crate_metadata (150,284,472 samples, 5.59%)</title><rect x="91.1109%" y="181" width="5.5937%" height="15" fill="rgb(220,129,5)"/><text x="91.3609%" y="191.50">generat..</text></g><g><title>hir_lowering (16,072,793 samples, 0.60%)</title><rect x="96.7046%" y="181" width="0.5982%" height="15" fill="rgb(242,17,10)"/><text x="96.9546%" y="191.50"></text></g><g><title>finish_ongoing_codegen (59,190,270 samples, 2.20%)</title><rect x="97.3035%" y="165" width="2.2031%" height="15" fill="rgb(242,107,0)"/><text x="97.5535%" y="175.50">f..</text></g><g><title>link_crate (7,255,044 samples, 0.27%)</title><rect x="99.5066%" y="165" width="0.2700%" height="15" fill="rgb(251,28,31)"/><text x="99.7566%" y="175.50"></text></g><g><title>link_binary (7,086,012 samples, 0.26%)</title><rect x="99.5129%" y="149" width="0.2637%" height="15" fill="rgb(233,223,10)"/><text x="99.7629%" y="159.50"></text></g><g><title>link_rlib (5,924,690 samples, 0.22%)</title><rect x="99.5561%" y="133" width="0.2205%" height="15" fill="rgb(215,21,27)"/><text x="99.8061%" y="143.50"></text></g><g><title>link (66,473,774 samples, 2.47%)</title><rect x="97.3029%" y="181" width="2.4742%" height="15" fill="rgb(232,23,21)"/><text x="97.5529%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (4,088,512 samples, 0.15%)</title><rect x="99.8115%" y="181" width="0.1522%" height="15" fill="rgb(244,5,23)"/><text x="100.0615%" y="191.50"></text></g><g><title>all (2,686,665,335 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,686,665,335 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>