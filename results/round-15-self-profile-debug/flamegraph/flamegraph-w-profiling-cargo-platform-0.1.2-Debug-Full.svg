<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (103,753,211 samples, 12.42%)</title><rect x="0.0849%" y="165" width="12.4177%" height="15" fill="rgb(227,0,7)"/><text x="0.3349%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (959,457 samples, 0.11%)</title><rect x="16.2757%" y="37" width="0.1148%" height="15" fill="rgb(217,0,24)"/><text x="16.5257%" y="47.50"></text></g><g><title>needs_drop_raw (1,450,661 samples, 0.17%)</title><rect x="16.2180%" y="53" width="0.1736%" height="15" fill="rgb(221,193,54)"/><text x="16.4680%" y="63.50"></text></g><g><title>resolve_instance (846,167 samples, 0.10%)</title><rect x="16.3948%" y="53" width="0.1013%" height="15" fill="rgb(248,212,6)"/><text x="16.6448%" y="63.50"></text></g><g><title>thir_body (1,913,517 samples, 0.23%)</title><rect x="16.4999%" y="53" width="0.2290%" height="15" fill="rgb(208,68,35)"/><text x="16.7499%" y="63.50"></text></g><g><title>mir_const (12,224,749 samples, 1.46%)</title><rect x="15.2699%" y="101" width="1.4631%" height="15" fill="rgb(232,128,0)"/><text x="15.5199%" y="111.50"></text></g><g><title>unsafety_check_result (10,658,979 samples, 1.28%)</title><rect x="15.4573%" y="85" width="1.2757%" height="15" fill="rgb(207,160,47)"/><text x="15.7073%" y="95.50"></text></g><g><title>mir_built (9,366,517 samples, 1.12%)</title><rect x="15.6120%" y="69" width="1.1210%" height="15" fill="rgb(228,23,34)"/><text x="15.8620%" y="79.50"></text></g><g><title>mir_promoted (13,633,309 samples, 1.63%)</title><rect x="15.1070%" y="117" width="1.6317%" height="15" fill="rgb(218,30,26)"/><text x="15.3570%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,183,658 samples, 0.38%)</title><rect x="16.9334%" y="117" width="0.3810%" height="15" fill="rgb(220,122,19)"/><text x="17.1834%" y="127.50"></text></g><g><title>MIR_borrow_checking (39,799,800 samples, 4.76%)</title><rect x="12.5540%" y="149" width="4.7634%" height="15" fill="rgb(250,228,42)"/><text x="12.8040%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (39,666,979 samples, 4.75%)</title><rect x="12.5699%" y="133" width="4.7475%" height="15" fill="rgb(240,193,28)"/><text x="12.8199%" y="143.50">mir_bo..</text></g><g><title>misc_checking_1 (1,511,735 samples, 0.18%)</title><rect x="17.3455%" y="149" width="0.1809%" height="15" fill="rgb(216,20,37)"/><text x="17.5955%" y="159.50"></text></g><g><title>misc_checking_2 (1,941,469 samples, 0.23%)</title><rect x="17.5264%" y="149" width="0.2324%" height="15" fill="rgb(206,188,39)"/><text x="17.7764%" y="159.50"></text></g><g><title>match_checking (1,406,034 samples, 0.17%)</title><rect x="17.5905%" y="133" width="0.1683%" height="15" fill="rgb(217,207,13)"/><text x="17.8405%" y="143.50"></text></g><g><title>check_match (1,370,173 samples, 0.16%)</title><rect x="17.5948%" y="117" width="0.1640%" height="15" fill="rgb(231,73,38)"/><text x="17.8448%" y="127.50"></text></g><g><title>crate_lints (2,376,624 samples, 0.28%)</title><rect x="17.8650%" y="117" width="0.2844%" height="15" fill="rgb(225,20,46)"/><text x="18.1150%" y="127.50"></text></g><g><title>type_of (1,164,004 samples, 0.14%)</title><rect x="18.0101%" y="101" width="0.1393%" height="15" fill="rgb(210,31,41)"/><text x="18.2601%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (907,231 samples, 0.11%)</title><rect x="18.0408%" y="85" width="0.1086%" height="15" fill="rgb(221,200,47)"/><text x="18.2908%" y="95.50"></text></g><g><title>lint_checking (3,260,503 samples, 0.39%)</title><rect x="17.8648%" y="133" width="0.3902%" height="15" fill="rgb(226,26,5)"/><text x="18.1148%" y="143.50"></text></g><g><title>module_lints (882,349 samples, 0.11%)</title><rect x="18.1494%" y="117" width="0.1056%" height="15" fill="rgb(249,33,26)"/><text x="18.3994%" y="127.50"></text></g><g><title>lint_mod (877,298 samples, 0.10%)</title><rect x="18.1500%" y="101" width="0.1050%" height="15" fill="rgb(235,183,28)"/><text x="18.4000%" y="111.50"></text></g><g><title>privacy_checking_modules (1,340,523 samples, 0.16%)</title><rect x="18.2964%" y="133" width="0.1604%" height="15" fill="rgb(221,5,38)"/><text x="18.5464%" y="143.50"></text></g><g><title>check_mod_privacy (1,337,263 samples, 0.16%)</title><rect x="18.2968%" y="117" width="0.1601%" height="15" fill="rgb(247,18,42)"/><text x="18.5468%" y="127.50"></text></g><g><title>misc_checking_3 (5,851,819 samples, 0.70%)</title><rect x="17.7588%" y="149" width="0.7004%" height="15" fill="rgb(241,131,45)"/><text x="18.0088%" y="159.50"></text></g><g><title>impl_parent (2,620,944 samples, 0.31%)</title><rect x="19.0021%" y="85" width="0.3137%" height="15" fill="rgb(249,31,29)"/><text x="19.2521%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,546,113 samples, 0.19%)</title><rect x="19.1308%" y="69" width="0.1850%" height="15" fill="rgb(225,111,53)"/><text x="19.3808%" y="79.50"></text></g><g><title>impl_trait_ref (5,980,927 samples, 0.72%)</title><rect x="19.3158%" y="85" width="0.7158%" height="15" fill="rgb(238,160,17)"/><text x="19.5658%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,667,627 samples, 0.56%)</title><rect x="19.4730%" y="69" width="0.5586%" height="15" fill="rgb(214,148,48)"/><text x="19.7230%" y="79.50"></text></g><g><title>coherent_trait (14,016,701 samples, 1.68%)</title><rect x="18.4693%" y="117" width="1.6776%" height="15" fill="rgb(232,36,49)"/><text x="18.7193%" y="127.50"></text></g><g><title>specialization_graph_of (13,990,021 samples, 1.67%)</title><rect x="18.4725%" y="101" width="1.6744%" height="15" fill="rgb(209,103,24)"/><text x="18.7225%" y="111.50"></text></g><g><title>trait_impls_of (959,270 samples, 0.11%)</title><rect x="20.0320%" y="85" width="0.1148%" height="15" fill="rgb(229,88,8)"/><text x="20.2820%" y="95.50"></text></g><g><title>coherence_checking (14,098,332 samples, 1.69%)</title><rect x="18.4663%" y="133" width="1.6874%" height="15" fill="rgb(213,181,19)"/><text x="18.7163%" y="143.50"></text></g><g><title>evaluate_obligation (2,678,749 samples, 0.32%)</title><rect x="24.7247%" y="85" width="0.3206%" height="15" fill="rgb(254,191,54)"/><text x="24.9747%" y="95.50"></text></g><g><title>typeck (5,240,112 samples, 0.63%)</title><rect x="25.2653%" y="85" width="0.6272%" height="15" fill="rgb(241,83,37)"/><text x="25.5153%" y="95.50"></text></g><g><title>item_bodies_checking (47,983,471 samples, 5.74%)</title><rect x="20.1574%" y="133" width="5.7429%" height="15" fill="rgb(233,36,39)"/><text x="20.4074%" y="143.50">item_bo..</text></g><g><title>typeck_item_bodies (47,979,571 samples, 5.74%)</title><rect x="20.1578%" y="117" width="5.7424%" height="15" fill="rgb(226,3,54)"/><text x="20.4078%" y="127.50">typeck_..</text></g><g><title>typeck (47,885,977 samples, 5.73%)</title><rect x="20.1690%" y="101" width="5.7312%" height="15" fill="rgb(245,192,40)"/><text x="20.4190%" y="111.50">typeck</text></g><g><title>item_types_checking (1,756,288 samples, 0.21%)</title><rect x="25.9003%" y="133" width="0.2102%" height="15" fill="rgb(238,167,29)"/><text x="26.1503%" y="143.50"></text></g><g><title>check_mod_item_types (1,751,688 samples, 0.21%)</title><rect x="25.9008%" y="117" width="0.2097%" height="15" fill="rgb(232,182,51)"/><text x="26.1508%" y="127.50"></text></g><g><title>generics_of (874,918 samples, 0.10%)</title><rect x="26.2128%" y="101" width="0.1047%" height="15" fill="rgb(231,60,39)"/><text x="26.4628%" y="111.50"></text></g><g><title>type_collecting (2,612,747 samples, 0.31%)</title><rect x="26.1107%" y="133" width="0.3127%" height="15" fill="rgb(208,69,12)"/><text x="26.3607%" y="143.50"></text></g><g><title>collect_mod_item_types (2,603,617 samples, 0.31%)</title><rect x="26.1118%" y="117" width="0.3116%" height="15" fill="rgb(235,93,37)"/><text x="26.3618%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,686,171 samples, 0.44%)</title><rect x="26.4508%" y="117" width="0.4412%" height="15" fill="rgb(213,116,39)"/><text x="26.7008%" y="127.50"></text></g><g><title>analysis (122,744,212 samples, 14.69%)</title><rect x="12.5026%" y="165" width="14.6906%" height="15" fill="rgb(222,207,29)"/><text x="12.7526%" y="175.50">analysis</text></g><g><title>type_check_crate (72,975,213 samples, 8.73%)</title><rect x="18.4592%" y="149" width="8.7340%" height="15" fill="rgb(206,96,30)"/><text x="18.7092%" y="159.50">type_check_c..</text></g><g><title>wf_checking (6,427,564 samples, 0.77%)</title><rect x="26.4239%" y="133" width="0.7693%" height="15" fill="rgb(218,138,4)"/><text x="26.6739%" y="143.50"></text></g><g><title>check_item_well_formed (2,516,432 samples, 0.30%)</title><rect x="26.8920%" y="117" width="0.3012%" height="15" fill="rgb(250,191,14)"/><text x="27.1420%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (1,149,430 samples, 0.14%)</title><rect x="36.1519%" y="133" width="0.1376%" height="15" fill="rgb(239,60,40)"/><text x="36.4019%" y="143.50"></text></g><g><title>const_caller_location (1,172,251 samples, 0.14%)</title><rect x="36.2894%" y="133" width="0.1403%" height="15" fill="rgb(206,27,48)"/><text x="36.5394%" y="143.50"></text></g><g><title>codegen_fn_attrs (931,906 samples, 0.11%)</title><rect x="36.8911%" y="117" width="0.1115%" height="15" fill="rgb(225,35,8)"/><text x="37.1411%" y="127.50"></text></g><g><title>layout_of (1,522,108 samples, 0.18%)</title><rect x="37.0169%" y="117" width="0.1822%" height="15" fill="rgb(250,213,24)"/><text x="37.2669%" y="127.50"></text></g><g><title>predicates_of (1,481,187 samples, 0.18%)</title><rect x="37.5896%" y="101" width="0.1773%" height="15" fill="rgb(247,123,22)"/><text x="37.8396%" y="111.50"></text></g><g><title>predicates_defined_on (1,110,343 samples, 0.13%)</title><rect x="37.6340%" y="85" width="0.1329%" height="15" fill="rgb(231,138,38)"/><text x="37.8840%" y="95.50"></text></g><g><title>param_env (4,755,096 samples, 0.57%)</title><rect x="37.1991%" y="117" width="0.5691%" height="15" fill="rgb(231,145,46)"/><text x="37.4491%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,219,452 samples, 0.15%)</title><rect x="37.7682%" y="117" width="0.1460%" height="15" fill="rgb(251,118,11)"/><text x="38.0182%" y="127.50"></text></g><g><title>normalize_projection_ty (902,219 samples, 0.11%)</title><rect x="37.8062%" y="101" width="0.1080%" height="15" fill="rgb(217,147,25)"/><text x="38.0562%" y="111.50"></text></g><g><title>fn_abi_of_instance (12,366,441 samples, 1.48%)</title><rect x="36.4377%" y="133" width="1.4801%" height="15" fill="rgb(247,81,37)"/><text x="36.6877%" y="143.50"></text></g><g><title>layout_of (1,554,118 samples, 0.19%)</title><rect x="37.9930%" y="133" width="0.1860%" height="15" fill="rgb(209,12,38)"/><text x="38.2430%" y="143.50"></text></g><g><title>symbol_name (950,317 samples, 0.11%)</title><rect x="38.1820%" y="133" width="0.1137%" height="15" fill="rgb(227,1,9)"/><text x="38.4320%" y="143.50"></text></g><g><title>codegen_module (90,231,557 samples, 10.80%)</title><rect x="27.5186%" y="149" width="10.7994%" height="15" fill="rgb(248,47,43)"/><text x="27.7686%" y="159.50">codegen_module</text></g><g><title>codegen_crate (93,021,175 samples, 11.13%)</title><rect x="27.1946%" y="165" width="11.1332%" height="15" fill="rgb(221,10,30)"/><text x="27.4446%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (384,022,362 samples, 45.96%)</title><rect x="38.3567%" y="149" width="45.9617%" height="15" fill="rgb(210,229,1)"/><text x="38.6067%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (362,518,441 samples, 43.39%)</title><rect x="40.9304%" y="133" width="43.3880%" height="15" fill="rgb(222,148,37)"/><text x="41.1804%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (405,090,183 samples, 48.48%)</title><rect x="38.3278%" y="165" width="48.4832%" height="15" fill="rgb(234,67,33)"/><text x="38.5778%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (20,826,808 samples, 2.49%)</title><rect x="84.3184%" y="149" width="2.4927%" height="15" fill="rgb(247,98,35)"/><text x="84.5684%" y="159.50">LL..</text></g><g><title>metadata_register_crate (2,714,338 samples, 0.32%)</title><rect x="89.6573%" y="117" width="0.3249%" height="15" fill="rgb(247,138,52)"/><text x="89.9073%" y="127.50"></text></g><g><title>metadata_register_crate (999,490 samples, 0.12%)</title><rect x="89.8626%" y="101" width="0.1196%" height="15" fill="rgb(213,79,30)"/><text x="90.1126%" y="111.50"></text></g><g><title>macro_expand_crate (25,990,102 samples, 3.11%)</title><rect x="86.8979%" y="149" width="3.1106%" height="15" fill="rgb(246,177,23)"/><text x="87.1479%" y="159.50">mac..</text></g><g><title>expand_crate (25,963,441 samples, 3.11%)</title><rect x="86.9011%" y="133" width="3.1074%" height="15" fill="rgb(230,62,27)"/><text x="87.1511%" y="143.50">exp..</text></g><g><title>late_resolve_crate (9,255,262 samples, 1.11%)</title><rect x="90.0768%" y="133" width="1.1077%" height="15" fill="rgb(216,154,8)"/><text x="90.3268%" y="143.50"></text></g><g><title>metadata_register_crate (3,482,765 samples, 0.42%)</title><rect x="90.7677%" y="117" width="0.4168%" height="15" fill="rgb(244,35,45)"/><text x="91.0177%" y="127.50"></text></g><g><title>metadata_register_crate (2,764,988 samples, 0.33%)</title><rect x="90.8536%" y="101" width="0.3309%" height="15" fill="rgb(251,115,12)"/><text x="91.1036%" y="111.50"></text></g><g><title>configure_and_expand (36,738,099 samples, 4.40%)</title><rect x="86.8110%" y="165" width="4.3970%" height="15" fill="rgb(240,54,50)"/><text x="87.0610%" y="175.50">confi..</text></g><g><title>resolve_crate (9,890,279 samples, 1.18%)</title><rect x="90.0243%" y="149" width="1.1837%" height="15" fill="rgb(233,84,52)"/><text x="90.2743%" y="159.50"></text></g><g><title>free_global_ctxt (6,833,758 samples, 0.82%)</title><rect x="91.3013%" y="165" width="0.8179%" height="15" fill="rgb(207,117,47)"/><text x="91.5513%" y="175.50"></text></g><g><title>item_attrs (1,165,254 samples, 0.14%)</title><rect x="92.7452%" y="69" width="0.1395%" height="15" fill="rgb(249,43,39)"/><text x="92.9952%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,111,414 samples, 0.13%)</title><rect x="92.7516%" y="53" width="0.1330%" height="15" fill="rgb(209,38,44)"/><text x="93.0016%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,922,468 samples, 0.23%)</title><rect x="92.7051%" y="85" width="0.2301%" height="15" fill="rgb(236,212,23)"/><text x="92.9551%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,345,761 samples, 0.28%)</title><rect x="93.4984%" y="69" width="0.2808%" height="15" fill="rgb(242,79,21)"/><text x="93.7484%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,411,097 samples, 0.53%)</title><rect x="93.7791%" y="69" width="0.5279%" height="15" fill="rgb(211,96,35)"/><text x="94.0291%" y="79.50"></text></g><g><title>optimized_mir (11,655,561 samples, 1.39%)</title><rect x="93.0520%" y="85" width="1.3950%" height="15" fill="rgb(253,215,40)"/><text x="93.3020%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (935,300 samples, 0.11%)</title><rect x="94.3350%" y="69" width="0.1119%" height="15" fill="rgb(211,81,21)"/><text x="94.5850%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (3,556,128 samples, 0.43%)</title><rect x="94.6255%" y="69" width="0.4256%" height="15" fill="rgb(208,190,38)"/><text x="94.8755%" y="79.50"></text></g><g><title>specialization_graph_of (1,549,075 samples, 0.19%)</title><rect x="95.1699%" y="69" width="0.1854%" height="15" fill="rgb(235,213,38)"/><text x="95.4199%" y="79.50"></text></g><g><title>resolve_instance (8,091,175 samples, 0.97%)</title><rect x="94.4470%" y="85" width="0.9684%" height="15" fill="rgb(237,122,38)"/><text x="94.6970%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,031,082 samples, 0.12%)</title><rect x="95.4154%" y="85" width="0.1234%" height="15" fill="rgb(244,218,35)"/><text x="95.6654%" y="95.50"></text></g><g><title>eval_to_const_value_raw (865,147 samples, 0.10%)</title><rect x="95.5540%" y="69" width="0.1035%" height="15" fill="rgb(240,68,47)"/><text x="95.8040%" y="79.50"></text></g><g><title>eval_to_const_value_raw (843,396 samples, 0.10%)</title><rect x="95.5566%" y="53" width="0.1009%" height="15" fill="rgb(210,16,53)"/><text x="95.8066%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,038,947 samples, 0.12%)</title><rect x="95.5388%" y="85" width="0.1243%" height="15" fill="rgb(235,124,12)"/><text x="95.7888%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (28,178,002 samples, 3.37%)</title><rect x="92.3683%" y="101" width="3.3725%" height="15" fill="rgb(224,169,11)"/><text x="92.6183%" y="111.50">mon..</text></g><g><title>monomorphization_collector (28,240,993 samples, 3.38%)</title><rect x="92.3679%" y="117" width="3.3800%" height="15" fill="rgb(250,166,2)"/><text x="92.6179%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,297,153 samples, 0.27%)</title><rect x="95.7494%" y="101" width="0.2749%" height="15" fill="rgb(242,216,29)"/><text x="95.9994%" y="111.50"></text></g><g><title>symbol_name (2,068,813 samples, 0.25%)</title><rect x="95.7768%" y="85" width="0.2476%" height="15" fill="rgb(230,116,27)"/><text x="96.0268%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (31,684,518 samples, 3.79%)</title><rect x="92.3619%" y="133" width="3.7922%" height="15" fill="rgb(228,99,48)"/><text x="92.6119%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (3,393,144 samples, 0.41%)</title><rect x="95.7479%" y="117" width="0.4061%" height="15" fill="rgb(253,11,6)"/><text x="95.9979%" y="127.50"></text></g><g><title>cgu_partitioning (1,083,501 samples, 0.13%)</title><rect x="96.0244%" y="101" width="0.1297%" height="15" fill="rgb(247,143,39)"/><text x="96.2744%" y="111.50"></text></g><g><title>exported_symbols (31,897,089 samples, 3.82%)</title><rect x="92.3510%" y="149" width="3.8176%" height="15" fill="rgb(236,97,10)"/><text x="92.6010%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,887,730 samples, 0.35%)</title><rect x="96.5292%" y="133" width="0.3456%" height="15" fill="rgb(233,208,19)"/><text x="96.7792%" y="143.50"></text></g><g><title>optimized_mir (5,847,026 samples, 0.70%)</title><rect x="96.1813%" y="149" width="0.6998%" height="15" fill="rgb(216,164,2)"/><text x="96.4313%" y="159.50"></text></g><g><title>generate_crate_metadata (39,889,790 samples, 4.77%)</title><rect x="92.1192%" y="165" width="4.7742%" height="15" fill="rgb(220,129,5)"/><text x="92.3692%" y="175.50">genera..</text></g><g><title>hir_lowering (4,031,520 samples, 0.48%)</title><rect x="96.8934%" y="165" width="0.4825%" height="15" fill="rgb(242,17,10)"/><text x="97.1434%" y="175.50"></text></g><g><title>finish_ongoing_codegen (15,631,967 samples, 1.87%)</title><rect x="97.3782%" y="149" width="1.8709%" height="15" fill="rgb(242,107,0)"/><text x="97.6282%" y="159.50">f..</text></g><g><title>link_crate (2,417,084 samples, 0.29%)</title><rect x="99.2491%" y="149" width="0.2893%" height="15" fill="rgb(251,28,31)"/><text x="99.4991%" y="159.50"></text></g><g><title>link_binary (2,373,774 samples, 0.28%)</title><rect x="99.2543%" y="133" width="0.2841%" height="15" fill="rgb(233,223,10)"/><text x="99.5043%" y="143.50"></text></g><g><title>link_rlib (1,715,757 samples, 0.21%)</title><rect x="99.3330%" y="117" width="0.2054%" height="15" fill="rgb(215,21,27)"/><text x="99.5830%" y="127.50"></text></g><g><title>link (18,080,601 samples, 2.16%)</title><rect x="97.3759%" y="165" width="2.1640%" height="15" fill="rgb(232,23,21)"/><text x="97.6259%" y="175.50">l..</text></g><g><title>parse_crate (1,713,647 samples, 0.21%)</title><rect x="99.5399%" y="165" width="0.2051%" height="15" fill="rgb(244,5,23)"/><text x="99.7899%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,490,405 samples, 0.18%)</title><rect x="99.7691%" y="165" width="0.1784%" height="15" fill="rgb(226,81,46)"/><text x="100.0191%" y="175.50"></text></g><g><title>all (835,527,123 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (835,527,123 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>