<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (72,292,392 samples, 3.11%)</title><rect x="0.1853%" y="181" width="3.1123%" height="15" fill="rgb(227,0,7)"/><text x="0.4353%" y="191.50">LLV..</text></g><g><title>implied_outlives_bounds (2,967,664 samples, 0.13%)</title><rect x="13.9246%" y="133" width="0.1278%" height="15" fill="rgb(217,0,24)"/><text x="14.1746%" y="143.50"></text></g><g><title>is_sized_raw (5,080,547 samples, 0.22%)</title><rect x="14.0947%" y="133" width="0.2187%" height="15" fill="rgb(221,193,54)"/><text x="14.3447%" y="143.50"></text></g><g><title>evaluate_obligation (3,026,492 samples, 0.13%)</title><rect x="14.1831%" y="117" width="0.1303%" height="15" fill="rgb(248,212,6)"/><text x="14.4331%" y="127.50"></text></g><g><title>is_copy_raw (19,758,139 samples, 0.85%)</title><rect x="18.7639%" y="53" width="0.8506%" height="15" fill="rgb(208,68,35)"/><text x="19.0139%" y="63.50"></text></g><g><title>evaluate_obligation (15,678,905 samples, 0.68%)</title><rect x="18.9395%" y="37" width="0.6750%" height="15" fill="rgb(232,128,0)"/><text x="19.1895%" y="47.50"></text></g><g><title>needs_drop_raw (24,387,187 samples, 1.05%)</title><rect x="18.5676%" y="69" width="1.0499%" height="15" fill="rgb(207,160,47)"/><text x="18.8176%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (7,693,048 samples, 0.33%)</title><rect x="19.7804%" y="53" width="0.3312%" height="15" fill="rgb(228,23,34)"/><text x="20.0304%" y="63.50"></text></g><g><title>resolve_instance (14,809,505 samples, 0.64%)</title><rect x="19.6189%" y="69" width="0.6376%" height="15" fill="rgb(218,30,26)"/><text x="19.8689%" y="79.50"></text></g><g><title>thir_body (20,274,502 samples, 0.87%)</title><rect x="20.2848%" y="69" width="0.8729%" height="15" fill="rgb(220,122,19)"/><text x="20.5348%" y="79.50"></text></g><g><title>mir_const (146,636,283 samples, 6.31%)</title><rect x="14.9333%" y="117" width="6.3129%" height="15" fill="rgb(250,228,42)"/><text x="15.1833%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (129,608,802 samples, 5.58%)</title><rect x="15.6664%" y="101" width="5.5799%" height="15" fill="rgb(240,193,28)"/><text x="15.9164%" y="111.50">unsafet..</text></g><g><title>mir_built (118,207,473 samples, 5.09%)</title><rect x="16.1572%" y="85" width="5.0890%" height="15" fill="rgb(216,20,37)"/><text x="16.4072%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (161,807,617 samples, 6.97%)</title><rect x="14.3134%" y="133" width="6.9661%" height="15" fill="rgb(206,188,39)"/><text x="14.5634%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (4,487,889 samples, 0.19%)</title><rect x="21.2795%" y="133" width="0.1932%" height="15" fill="rgb(217,207,13)"/><text x="21.5295%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (9,773,145 samples, 0.42%)</title><rect x="21.4727%" y="133" width="0.4208%" height="15" fill="rgb(231,73,38)"/><text x="21.7227%" y="143.50"></text></g><g><title>normalize_projection_ty (4,014,400 samples, 0.17%)</title><rect x="21.7207%" y="117" width="0.1728%" height="15" fill="rgb(225,20,46)"/><text x="21.9707%" y="127.50"></text></g><g><title>type_op_normalize_predicate (8,020,498 samples, 0.35%)</title><rect x="21.8941%" y="133" width="0.3453%" height="15" fill="rgb(210,31,41)"/><text x="22.1441%" y="143.50"></text></g><g><title>normalize_projection_ty (2,929,943 samples, 0.13%)</title><rect x="22.1133%" y="117" width="0.1261%" height="15" fill="rgb(221,200,47)"/><text x="22.3633%" y="127.50"></text></g><g><title>type_op_normalize_ty (11,425,119 samples, 0.49%)</title><rect x="22.2394%" y="133" width="0.4919%" height="15" fill="rgb(226,26,5)"/><text x="22.4894%" y="143.50"></text></g><g><title>normalize_projection_ty (6,143,054 samples, 0.26%)</title><rect x="22.4668%" y="117" width="0.2645%" height="15" fill="rgb(249,33,26)"/><text x="22.7168%" y="127.50"></text></g><g><title>type_op_prove_predicate (66,609,734 samples, 2.87%)</title><rect x="22.7313%" y="133" width="2.8677%" height="15" fill="rgb(235,183,28)"/><text x="22.9813%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (514,066,634 samples, 22.13%)</title><rect x="3.4684%" y="165" width="22.1314%" height="15" fill="rgb(221,5,38)"/><text x="3.7184%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (511,935,214 samples, 22.04%)</title><rect x="3.5601%" y="149" width="22.0397%" height="15" fill="rgb(247,18,42)"/><text x="3.8101%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (2,873,289 samples, 0.12%)</title><rect x="25.6359%" y="165" width="0.1237%" height="15" fill="rgb(241,131,45)"/><text x="25.8859%" y="175.50"></text></g><g><title>codegen_fn_attrs (3,288,921 samples, 0.14%)</title><rect x="25.9081%" y="133" width="0.1416%" height="15" fill="rgb(249,31,29)"/><text x="26.1581%" y="143.50"></text></g><g><title>check_mod_attrs (6,614,557 samples, 0.28%)</title><rect x="25.7649%" y="149" width="0.2848%" height="15" fill="rgb(225,111,53)"/><text x="26.0149%" y="159.50"></text></g><g><title>lint_levels (2,951,200 samples, 0.13%)</title><rect x="26.3040%" y="133" width="0.1271%" height="15" fill="rgb(238,160,17)"/><text x="26.5540%" y="143.50"></text></g><g><title>lookup_deprecation_entry (2,403,452 samples, 0.10%)</title><rect x="26.4310%" y="133" width="0.1035%" height="15" fill="rgb(214,148,48)"/><text x="26.6810%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (7,901,461 samples, 0.34%)</title><rect x="26.2061%" y="149" width="0.3402%" height="15" fill="rgb(232,36,49)"/><text x="26.4561%" y="159.50"></text></g><g><title>misc_checking_1 (18,776,620 samples, 0.81%)</title><rect x="25.7596%" y="165" width="0.8084%" height="15" fill="rgb(209,103,24)"/><text x="26.0096%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (10,442,486 samples, 0.45%)</title><rect x="26.5682%" y="149" width="0.4496%" height="15" fill="rgb(229,88,8)"/><text x="26.8182%" y="159.50"></text></g><g><title>check_mod_liveness (9,005,210 samples, 0.39%)</title><rect x="26.6300%" y="133" width="0.3877%" height="15" fill="rgb(213,181,19)"/><text x="26.8800%" y="143.50"></text></g><g><title>param_env (4,607,010 samples, 0.20%)</title><rect x="27.5591%" y="117" width="0.1983%" height="15" fill="rgb(254,191,54)"/><text x="27.8091%" y="127.50"></text></g><g><title>misc_checking_2 (28,057,014 samples, 1.21%)</title><rect x="26.5680%" y="165" width="1.2079%" height="15" fill="rgb(241,83,37)"/><text x="26.8180%" y="175.50"></text></g><g><title>match_checking (17,610,468 samples, 0.76%)</title><rect x="27.0177%" y="149" width="0.7582%" height="15" fill="rgb(233,36,39)"/><text x="27.2677%" y="159.50"></text></g><g><title>check_match (15,926,988 samples, 0.69%)</title><rect x="27.0902%" y="133" width="0.6857%" height="15" fill="rgb(226,3,54)"/><text x="27.3402%" y="143.50"></text></g><g><title>check_private_in_public (4,506,965 samples, 0.19%)</title><rect x="27.7769%" y="149" width="0.1940%" height="15" fill="rgb(245,192,40)"/><text x="28.0269%" y="159.50"></text></g><g><title>death_checking (6,450,236 samples, 0.28%)</title><rect x="27.9709%" y="149" width="0.2777%" height="15" fill="rgb(238,167,29)"/><text x="28.2209%" y="159.50"></text></g><g><title>crate_lints (11,308,105 samples, 0.49%)</title><rect x="28.2488%" y="133" width="0.4868%" height="15" fill="rgb(232,182,51)"/><text x="28.4988%" y="143.50"></text></g><g><title>lint_checking (20,390,106 samples, 0.88%)</title><rect x="28.2486%" y="149" width="0.8778%" height="15" fill="rgb(231,60,39)"/><text x="28.4986%" y="159.50"></text></g><g><title>module_lints (9,078,331 samples, 0.39%)</title><rect x="28.7356%" y="133" width="0.3908%" height="15" fill="rgb(208,69,12)"/><text x="28.9856%" y="143.50"></text></g><g><title>lint_mod (9,038,491 samples, 0.39%)</title><rect x="28.7373%" y="117" width="0.3891%" height="15" fill="rgb(235,93,37)"/><text x="28.9873%" y="127.50"></text></g><g><title>privacy_access_levels (11,350,825 samples, 0.49%)</title><rect x="29.1264%" y="149" width="0.4887%" height="15" fill="rgb(213,116,39)"/><text x="29.3764%" y="159.50"></text></g><g><title>privacy_checking_modules (20,624,199 samples, 0.89%)</title><rect x="29.6151%" y="149" width="0.8879%" height="15" fill="rgb(222,207,29)"/><text x="29.8651%" y="159.50"></text></g><g><title>check_mod_privacy (20,585,638 samples, 0.89%)</title><rect x="29.6168%" y="133" width="0.8862%" height="15" fill="rgb(206,96,30)"/><text x="29.8668%" y="143.50"></text></g><g><title>misc_checking_3 (63,513,403 samples, 2.73%)</title><rect x="27.7759%" y="165" width="2.7344%" height="15" fill="rgb(218,138,4)"/><text x="28.0259%" y="175.50">mi..</text></g><g><title>impl_parent (3,171,654 samples, 0.14%)</title><rect x="31.0446%" y="101" width="0.1365%" height="15" fill="rgb(250,191,14)"/><text x="31.2946%" y="111.50"></text></g><g><title>impl_trait_ref (6,789,755 samples, 0.29%)</title><rect x="31.1816%" y="101" width="0.2923%" height="15" fill="rgb(239,60,40)"/><text x="31.4316%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,322,767 samples, 0.23%)</title><rect x="31.2448%" y="85" width="0.2292%" height="15" fill="rgb(206,27,48)"/><text x="31.4948%" y="95.50"></text></g><g><title>coherent_trait (27,704,301 samples, 1.19%)</title><rect x="30.5508%" y="133" width="1.1927%" height="15" fill="rgb(225,35,8)"/><text x="30.8008%" y="143.50"></text></g><g><title>specialization_graph_of (27,162,934 samples, 1.17%)</title><rect x="30.5741%" y="117" width="1.1694%" height="15" fill="rgb(250,213,24)"/><text x="30.8241%" y="127.50"></text></g><g><title>visible_parent_map (4,575,287 samples, 0.20%)</title><rect x="31.5466%" y="101" width="0.1970%" height="15" fill="rgb(247,123,22)"/><text x="31.7966%" y="111.50"></text></g><g><title>module_children (4,151,233 samples, 0.18%)</title><rect x="31.5648%" y="85" width="0.1787%" height="15" fill="rgb(231,138,38)"/><text x="31.8148%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,077,752 samples, 0.18%)</title><rect x="31.5680%" y="69" width="0.1756%" height="15" fill="rgb(231,145,46)"/><text x="31.8180%" y="79.50"></text></g><g><title>coherence_checking (28,327,956 samples, 1.22%)</title><rect x="30.5488%" y="149" width="1.2196%" height="15" fill="rgb(251,118,11)"/><text x="30.7988%" y="159.50"></text></g><g><title>dropck_outlives (7,038,144 samples, 0.30%)</title><rect x="45.8655%" y="101" width="0.3030%" height="15" fill="rgb(217,147,25)"/><text x="46.1155%" y="111.50"></text></g><g><title>evaluate_obligation (18,679,905 samples, 0.80%)</title><rect x="46.1685%" y="101" width="0.8042%" height="15" fill="rgb(247,81,37)"/><text x="46.4185%" y="111.50"></text></g><g><title>evaluate_obligation (3,507,740 samples, 0.15%)</title><rect x="47.2087%" y="85" width="0.1510%" height="15" fill="rgb(209,12,38)"/><text x="47.4587%" y="95.50"></text></g><g><title>method_autoderef_steps (7,482,979 samples, 0.32%)</title><rect x="47.0382%" y="101" width="0.3222%" height="15" fill="rgb(227,1,9)"/><text x="47.2882%" y="111.50"></text></g><g><title>evaluate_obligation (12,980,266 samples, 0.56%)</title><rect x="52.7440%" y="85" width="0.5588%" height="15" fill="rgb(248,47,43)"/><text x="52.9940%" y="95.50"></text></g><g><title>is_copy_raw (5,320,959 samples, 0.23%)</title><rect x="53.4094%" y="85" width="0.2291%" height="15" fill="rgb(221,10,30)"/><text x="53.6594%" y="95.50"></text></g><g><title>evaluate_obligation (3,920,056 samples, 0.17%)</title><rect x="53.4697%" y="69" width="0.1688%" height="15" fill="rgb(210,229,1)"/><text x="53.7197%" y="79.50"></text></g><g><title>method_autoderef_steps (4,683,835 samples, 0.20%)</title><rect x="53.6530%" y="85" width="0.2016%" height="15" fill="rgb(222,148,37)"/><text x="53.9030%" y="95.50"></text></g><g><title>typeck (151,035,631 samples, 6.50%)</title><rect x="47.4312%" y="101" width="6.5023%" height="15" fill="rgb(234,67,33)"/><text x="47.6812%" y="111.50">typeck</text></g><g><title>item_bodies_checking (514,426,708 samples, 22.15%)</title><rect x="31.7999%" y="149" width="22.1469%" height="15" fill="rgb(247,98,35)"/><text x="32.0499%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (514,422,088 samples, 22.15%)</title><rect x="31.8001%" y="133" width="22.1467%" height="15" fill="rgb(247,138,52)"/><text x="32.0501%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (513,095,035 samples, 22.09%)</title><rect x="31.8573%" y="117" width="22.0896%" height="15" fill="rgb(213,79,30)"/><text x="32.1073%" y="127.50">typeck</text></g><g><title>item_types_checking (37,304,137 samples, 1.61%)</title><rect x="53.9468%" y="149" width="1.6060%" height="15" fill="rgb(246,177,23)"/><text x="54.1968%" y="159.50"></text></g><g><title>check_mod_item_types (37,258,057 samples, 1.60%)</title><rect x="53.9488%" y="133" width="1.6040%" height="15" fill="rgb(230,62,27)"/><text x="54.1988%" y="143.50"></text></g><g><title>fn_sig (4,146,049 samples, 0.18%)</title><rect x="55.7454%" y="117" width="0.1785%" height="15" fill="rgb(216,154,8)"/><text x="55.9954%" y="127.50"></text></g><g><title>generics_of (3,777,744 samples, 0.16%)</title><rect x="55.9239%" y="117" width="0.1626%" height="15" fill="rgb(244,35,45)"/><text x="56.1739%" y="127.50"></text></g><g><title>late_bound_vars_map (5,989,316 samples, 0.26%)</title><rect x="56.5220%" y="69" width="0.2578%" height="15" fill="rgb(251,115,12)"/><text x="56.7720%" y="79.50"></text></g><g><title>resolve_lifetimes (5,662,443 samples, 0.24%)</title><rect x="56.5361%" y="53" width="0.2438%" height="15" fill="rgb(240,54,50)"/><text x="56.7861%" y="63.50"></text></g><g><title>explicit_predicates_of (15,061,305 samples, 0.65%)</title><rect x="56.1943%" y="85" width="0.6484%" height="15" fill="rgb(233,84,52)"/><text x="56.4443%" y="95.50"></text></g><g><title>predicates_of (19,418,979 samples, 0.84%)</title><rect x="56.1086%" y="117" width="0.8360%" height="15" fill="rgb(207,117,47)"/><text x="56.3586%" y="127.50"></text></g><g><title>predicates_defined_on (18,675,304 samples, 0.80%)</title><rect x="56.1406%" y="101" width="0.8040%" height="15" fill="rgb(249,43,39)"/><text x="56.3906%" y="111.50"></text></g><g><title>inferred_outlives_of (2,366,073 samples, 0.10%)</title><rect x="56.8427%" y="85" width="0.1019%" height="15" fill="rgb(209,38,44)"/><text x="57.0927%" y="95.50"></text></g><g><title>type_collecting (35,068,805 samples, 1.51%)</title><rect x="55.5535%" y="149" width="1.5098%" height="15" fill="rgb(236,212,23)"/><text x="55.8035%" y="159.50"></text></g><g><title>collect_mod_item_types (35,019,255 samples, 1.51%)</title><rect x="55.5557%" y="133" width="1.5076%" height="15" fill="rgb(242,79,21)"/><text x="55.8057%" y="143.50"></text></g><g><title>type_of (2,671,869 samples, 0.12%)</title><rect x="56.9483%" y="117" width="0.1150%" height="15" fill="rgb(211,96,35)"/><text x="57.1983%" y="127.50"></text></g><g><title>mir_for_ctfe (2,513,576 samples, 0.11%)</title><rect x="59.2179%" y="69" width="0.1082%" height="15" fill="rgb(253,215,40)"/><text x="59.4679%" y="79.50"></text></g><g><title>eval_to_const_value_raw (10,924,429 samples, 0.47%)</title><rect x="59.1139%" y="117" width="0.4703%" height="15" fill="rgb(211,81,21)"/><text x="59.3639%" y="127.50"></text></g><g><title>eval_to_const_value_raw (10,896,819 samples, 0.47%)</title><rect x="59.1150%" y="101" width="0.4691%" height="15" fill="rgb(208,190,38)"/><text x="59.3650%" y="111.50"></text></g><g><title>eval_to_allocation_raw (10,868,829 samples, 0.47%)</title><rect x="59.1163%" y="85" width="0.4679%" height="15" fill="rgb(235,213,38)"/><text x="59.3663%" y="95.50"></text></g><g><title>typeck (5,992,260 samples, 0.26%)</title><rect x="59.3262%" y="69" width="0.2580%" height="15" fill="rgb(237,122,38)"/><text x="59.5762%" y="79.50"></text></g><g><title>evaluate_obligation (8,332,872 samples, 0.36%)</title><rect x="59.5842%" y="117" width="0.3587%" height="15" fill="rgb(244,218,35)"/><text x="59.8342%" y="127.50"></text></g><g><title>implied_outlives_bounds (5,977,598 samples, 0.26%)</title><rect x="59.9556%" y="117" width="0.2573%" height="15" fill="rgb(240,68,47)"/><text x="60.2056%" y="127.50"></text></g><g><title>param_env (9,332,786 samples, 0.40%)</title><rect x="60.2132%" y="117" width="0.4018%" height="15" fill="rgb(210,16,53)"/><text x="60.4632%" y="127.50"></text></g><g><title>region_scope_tree (5,796,502 samples, 0.25%)</title><rect x="60.6175%" y="117" width="0.2495%" height="15" fill="rgb(235,124,12)"/><text x="60.8675%" y="127.50"></text></g><g><title>check_impl_item_well_formed (84,866,424 samples, 3.65%)</title><rect x="57.2224%" y="133" width="3.6536%" height="15" fill="rgb(224,169,11)"/><text x="57.4724%" y="143.50">chec..</text></g><g><title>implied_outlives_bounds (3,201,963 samples, 0.14%)</title><rect x="63.0391%" y="117" width="0.1378%" height="15" fill="rgb(250,166,2)"/><text x="63.2891%" y="127.50"></text></g><g><title>param_env (7,353,180 samples, 0.32%)</title><rect x="63.1780%" y="117" width="0.3166%" height="15" fill="rgb(242,216,29)"/><text x="63.4280%" y="127.50"></text></g><g><title>check_item_well_formed (63,522,722 samples, 2.73%)</title><rect x="60.8761%" y="133" width="2.7348%" height="15" fill="rgb(230,116,27)"/><text x="61.1261%" y="143.50">ch..</text></g><g><title>analysis (1,412,184,716 samples, 60.80%)</title><rect x="3.2976%" y="181" width="60.7969%" height="15" fill="rgb(228,99,48)"/><text x="3.5476%" y="191.50">analysis</text></g><g><title>type_check_crate (780,092,327 samples, 33.58%)</title><rect x="30.5103%" y="165" width="33.5843%" height="15" fill="rgb(253,11,6)"/><text x="30.7603%" y="175.50">type_check_crate</text></g><g><title>wf_checking (163,217,353 samples, 7.03%)</title><rect x="57.0677%" y="149" width="7.0268%" height="15" fill="rgb(247,143,39)"/><text x="57.3177%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (11,234,855 samples, 0.48%)</title><rect x="63.6108%" y="133" width="0.4837%" height="15" fill="rgb(236,97,10)"/><text x="63.8608%" y="143.50"></text></g><g><title>param_env (4,177,678 samples, 0.18%)</title><rect x="66.3939%" y="133" width="0.1799%" height="15" fill="rgb(233,208,19)"/><text x="66.6439%" y="143.50"></text></g><g><title>fn_abi_of_instance (9,321,026 samples, 0.40%)</title><rect x="66.1983%" y="149" width="0.4013%" height="15" fill="rgb(216,164,2)"/><text x="66.4483%" y="159.50"></text></g><g><title>codegen_module (57,917,849 samples, 2.49%)</title><rect x="64.1964%" y="165" width="2.4935%" height="15" fill="rgb(220,129,5)"/><text x="64.4464%" y="175.50">co..</text></g><g><title>codegen_crate (60,370,682 samples, 2.60%)</title><rect x="64.0948%" y="181" width="2.5991%" height="15" fill="rgb(242,17,10)"/><text x="64.3448%" y="191.50">co..</text></g><g><title>LLVM_module_codegen (266,733,843 samples, 11.48%)</title><rect x="66.7040%" y="165" width="11.4833%" height="15" fill="rgb(242,107,0)"/><text x="66.9540%" y="175.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (251,028,601 samples, 10.81%)</title><rect x="67.3802%" y="149" width="10.8072%" height="15" fill="rgb(251,28,31)"/><text x="67.6302%" y="159.50">LLVM_module_code..</text></g><g><title>codegen_module_optimize (282,648,583 samples, 12.17%)</title><rect x="66.6939%" y="181" width="12.1685%" height="15" fill="rgb(233,223,10)"/><text x="66.9439%" y="191.50">codegen_module_opt..</text></g><g><title>LLVM_module_optimize (15,678,228 samples, 0.67%)</title><rect x="78.1874%" y="165" width="0.6750%" height="15" fill="rgb(215,21,27)"/><text x="78.4374%" y="175.50"></text></g><g><title>AST_validation (2,547,106 samples, 0.11%)</title><rect x="78.8684%" y="165" width="0.1097%" height="15" fill="rgb(232,23,21)"/><text x="79.1184%" y="175.50"></text></g><g><title>macro_expand_crate (89,737,848 samples, 3.86%)</title><rect x="79.0655%" y="165" width="3.8634%" height="15" fill="rgb(244,5,23)"/><text x="79.3155%" y="175.50">macr..</text></g><g><title>expand_crate (89,724,668 samples, 3.86%)</title><rect x="79.0661%" y="149" width="3.8628%" height="15" fill="rgb(226,81,46)"/><text x="79.3161%" y="159.50">expa..</text></g><g><title>late_resolve_crate (23,415,846 samples, 1.01%)</title><rect x="83.0037%" y="149" width="1.0081%" height="15" fill="rgb(247,70,30)"/><text x="83.2537%" y="159.50"></text></g><g><title>configure_and_expand (123,434,959 samples, 5.31%)</title><rect x="78.8623%" y="181" width="5.3141%" height="15" fill="rgb(212,68,19)"/><text x="79.1123%" y="191.50">configu..</text></g><g><title>resolve_crate (28,661,440 samples, 1.23%)</title><rect x="82.9425%" y="165" width="1.2339%" height="15" fill="rgb(240,187,13)"/><text x="83.1925%" y="175.50"></text></g><g><title>drop_ast (4,317,794 samples, 0.19%)</title><rect x="84.1764%" y="181" width="0.1859%" height="15" fill="rgb(223,113,26)"/><text x="84.4264%" y="191.50"></text></g><g><title>early_lint_checks (7,045,402 samples, 0.30%)</title><rect x="84.3635%" y="181" width="0.3033%" height="15" fill="rgb(206,192,2)"/><text x="84.6135%" y="191.50"></text></g><g><title>free_global_ctxt (21,730,800 samples, 0.94%)</title><rect x="84.6668%" y="181" width="0.9355%" height="15" fill="rgb(241,108,4)"/><text x="84.9168%" y="191.50"></text></g><g><title>optimized_mir (4,337,013 samples, 0.19%)</title><rect x="87.1610%" y="101" width="0.1867%" height="15" fill="rgb(247,173,49)"/><text x="87.4110%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,436,756 samples, 0.10%)</title><rect x="87.3843%" y="85" width="0.1049%" height="15" fill="rgb(224,114,35)"/><text x="87.6343%" y="95.50"></text></g><g><title>resolve_instance (4,537,596 samples, 0.20%)</title><rect x="87.3477%" y="101" width="0.1954%" height="15" fill="rgb(245,159,27)"/><text x="87.5977%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (14,703,599 samples, 0.63%)</title><rect x="86.9777%" y="117" width="0.6330%" height="15" fill="rgb(245,172,44)"/><text x="87.2277%" y="127.50"></text></g><g><title>monomorphization_collector (14,937,791 samples, 0.64%)</title><rect x="86.9775%" y="133" width="0.6431%" height="15" fill="rgb(236,23,11)"/><text x="87.2275%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (17,796,800 samples, 0.77%)</title><rect x="86.9757%" y="149" width="0.7662%" height="15" fill="rgb(205,117,38)"/><text x="87.2257%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (2,817,329 samples, 0.12%)</title><rect x="87.6206%" y="133" width="0.1213%" height="15" fill="rgb(237,72,25)"/><text x="87.8706%" y="143.50"></text></g><g><title>exported_symbols (20,522,508 samples, 0.88%)</title><rect x="86.9721%" y="165" width="0.8835%" height="15" fill="rgb(244,70,9)"/><text x="87.2221%" y="175.50"></text></g><g><title>reachable_non_generics (2,642,947 samples, 0.11%)</title><rect x="87.7418%" y="149" width="0.1138%" height="15" fill="rgb(217,125,39)"/><text x="87.9918%" y="159.50"></text></g><g><title>reachable_set (2,497,585 samples, 0.11%)</title><rect x="87.7481%" y="133" width="0.1075%" height="15" fill="rgb(235,36,10)"/><text x="87.9981%" y="143.50"></text></g><g><title>is_sized_raw (5,221,290 samples, 0.22%)</title><rect x="90.8948%" y="133" width="0.2248%" height="15" fill="rgb(251,123,47)"/><text x="91.1448%" y="143.50"></text></g><g><title>evaluate_obligation (3,974,122 samples, 0.17%)</title><rect x="90.9485%" y="117" width="0.1711%" height="15" fill="rgb(221,13,13)"/><text x="91.1985%" y="127.50"></text></g><g><title>layout_of (2,880,610 samples, 0.12%)</title><rect x="91.1196%" y="133" width="0.1240%" height="15" fill="rgb(238,131,9)"/><text x="91.3696%" y="143.50"></text></g><g><title>layout_of (16,287,395 samples, 0.70%)</title><rect x="90.6267%" y="149" width="0.7012%" height="15" fill="rgb(211,50,8)"/><text x="90.8767%" y="159.50"></text></g><g><title>is_copy_raw (17,218,492 samples, 0.74%)</title><rect x="95.6081%" y="117" width="0.7413%" height="15" fill="rgb(245,182,24)"/><text x="95.8581%" y="127.50"></text></g><g><title>evaluate_obligation (13,728,896 samples, 0.59%)</title><rect x="95.7583%" y="101" width="0.5911%" height="15" fill="rgb(242,14,37)"/><text x="96.0083%" y="111.50"></text></g><g><title>needs_drop_raw (20,715,116 samples, 0.89%)</title><rect x="95.4826%" y="133" width="0.8918%" height="15" fill="rgb(246,228,12)"/><text x="95.7326%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (123,940,666 samples, 5.34%)</title><rect x="91.3279%" y="149" width="5.3359%" height="15" fill="rgb(213,55,15)"/><text x="91.5779%" y="159.50">mir_dro..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,974,578 samples, 0.26%)</title><rect x="96.4066%" y="133" width="0.2572%" height="15" fill="rgb(209,9,3)"/><text x="96.6566%" y="143.50"></text></g><g><title>normalize_projection_ty (4,587,453 samples, 0.20%)</title><rect x="96.4663%" y="117" width="0.1975%" height="15" fill="rgb(230,59,30)"/><text x="96.7163%" y="127.50"></text></g><g><title>optimized_mir (203,265,257 samples, 8.75%)</title><rect x="87.9303%" y="165" width="8.7509%" height="15" fill="rgb(209,121,21)"/><text x="88.1803%" y="175.50">optimized_mir</text></g><g><title>generate_crate_metadata (258,643,249 samples, 11.14%)</title><rect x="85.6024%" y="181" width="11.1350%" height="15" fill="rgb(220,109,13)"/><text x="85.8524%" y="191.50">generate_crate_m..</text></g><g><title>hir_lowering (54,354,790 samples, 2.34%)</title><rect x="96.7374%" y="181" width="2.3401%" height="15" fill="rgb(232,18,1)"/><text x="96.9874%" y="191.50">h..</text></g><g><title>link_crate (6,599,257 samples, 0.28%)</title><rect x="99.0788%" y="165" width="0.2841%" height="15" fill="rgb(215,41,42)"/><text x="99.3288%" y="175.50"></text></g><g><title>link_binary (6,494,366 samples, 0.28%)</title><rect x="99.0833%" y="149" width="0.2796%" height="15" fill="rgb(224,123,36)"/><text x="99.3333%" y="159.50"></text></g><g><title>link_rlib (5,566,057 samples, 0.24%)</title><rect x="99.1233%" y="133" width="0.2396%" height="15" fill="rgb(240,125,3)"/><text x="99.3733%" y="143.50"></text></g><g><title>link (6,642,617 samples, 0.29%)</title><rect x="99.0775%" y="181" width="0.2860%" height="15" fill="rgb(205,98,50)"/><text x="99.3275%" y="191.50"></text></g><g><title>parse_crate (6,798,439 samples, 0.29%)</title><rect x="99.3634%" y="181" width="0.2927%" height="15" fill="rgb(205,185,37)"/><text x="99.6134%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (5,526,406 samples, 0.24%)</title><rect x="99.6676%" y="181" width="0.2379%" height="15" fill="rgb(238,207,15)"/><text x="99.9176%" y="191.50"></text></g><g><title>all (2,322,791,056 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,322,791,056 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>