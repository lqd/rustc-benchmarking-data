<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (568,992,533 samples, 7.03%)</title><rect x="0.0249%" y="197" width="7.0309%" height="15" fill="rgb(227,0,7)"/><text x="0.2749%" y="207.50">LLVM_pass..</text></g><g><title>is_late_bound_map (9,015,612 samples, 0.11%)</title><rect x="14.9012%" y="149" width="0.1114%" height="15" fill="rgb(217,0,24)"/><text x="15.1512%" y="159.50"></text></g><g><title>is_copy_raw (11,927,393 samples, 0.15%)</title><rect x="18.2763%" y="69" width="0.1474%" height="15" fill="rgb(221,193,54)"/><text x="18.5263%" y="79.50"></text></g><g><title>evaluate_obligation (9,265,510 samples, 0.11%)</title><rect x="18.3092%" y="53" width="0.1145%" height="15" fill="rgb(248,212,6)"/><text x="18.5592%" y="63.50"></text></g><g><title>needs_drop_raw (14,043,084 samples, 0.17%)</title><rect x="18.2502%" y="85" width="0.1735%" height="15" fill="rgb(208,68,35)"/><text x="18.5002%" y="95.50"></text></g><g><title>resolve_instance (15,737,529 samples, 0.19%)</title><rect x="18.4244%" y="85" width="0.1945%" height="15" fill="rgb(232,128,0)"/><text x="18.6744%" y="95.50"></text></g><g><title>thir_body (61,305,085 samples, 0.76%)</title><rect x="18.6391%" y="85" width="0.7575%" height="15" fill="rgb(207,160,47)"/><text x="18.8891%" y="95.50"></text></g><g><title>mir_const (309,702,612 samples, 3.83%)</title><rect x="15.5838%" y="133" width="3.8269%" height="15" fill="rgb(228,23,34)"/><text x="15.8338%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (264,742,091 samples, 3.27%)</title><rect x="16.1394%" y="117" width="3.2714%" height="15" fill="rgb(218,30,26)"/><text x="16.3894%" y="127.50">uns..</text></g><g><title>mir_built (239,827,732 samples, 2.96%)</title><rect x="16.4473%" y="101" width="2.9635%" height="15" fill="rgb(220,122,19)"/><text x="16.6973%" y="111.50">mir..</text></g><g><title>thir_body (10,174,969 samples, 0.13%)</title><rect x="20.2027%" y="69" width="0.1257%" height="15" fill="rgb(250,228,42)"/><text x="20.4527%" y="79.50"></text></g><g><title>mir_const (55,555,476 samples, 0.69%)</title><rect x="19.6475%" y="117" width="0.6865%" height="15" fill="rgb(240,193,28)"/><text x="19.8975%" y="127.50"></text></g><g><title>unsafety_check_result (43,879,629 samples, 0.54%)</title><rect x="19.7918%" y="101" width="0.5422%" height="15" fill="rgb(216,20,37)"/><text x="20.0418%" y="111.50"></text></g><g><title>mir_built (39,269,697 samples, 0.49%)</title><rect x="19.8487%" y="85" width="0.4852%" height="15" fill="rgb(206,188,39)"/><text x="20.0987%" y="95.50"></text></g><g><title>mir_const_qualif (76,022,469 samples, 0.94%)</title><rect x="19.4108%" y="133" width="0.9394%" height="15" fill="rgb(217,207,13)"/><text x="19.6608%" y="143.50"></text></g><g><title>mir_promoted (431,239,158 samples, 5.33%)</title><rect x="15.0215%" y="149" width="5.3287%" height="15" fill="rgb(231,73,38)"/><text x="15.2715%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (11,963,945 samples, 0.15%)</title><rect x="20.3530%" y="149" width="0.1478%" height="15" fill="rgb(225,20,46)"/><text x="20.6030%" y="159.50"></text></g><g><title>type_op_prove_predicate (41,696,012 samples, 0.52%)</title><rect x="20.6468%" y="149" width="0.5152%" height="15" fill="rgb(210,31,41)"/><text x="20.8968%" y="159.50"></text></g><g><title>MIR_borrow_checking (1,129,047,426 samples, 13.95%)</title><rect x="7.2111%" y="181" width="13.9514%" height="15" fill="rgb(221,200,47)"/><text x="7.4611%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,111,039,001 samples, 13.73%)</title><rect x="7.4336%" y="165" width="13.7288%" height="15" fill="rgb(226,26,5)"/><text x="7.6836%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (31,670,402 samples, 0.39%)</title><rect x="21.1624%" y="181" width="0.3913%" height="15" fill="rgb(249,33,26)"/><text x="21.4124%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (25,786,252 samples, 0.32%)</title><rect x="21.2351%" y="165" width="0.3186%" height="15" fill="rgb(235,183,28)"/><text x="21.4851%" y="175.50"></text></g><g><title>hir_module_items (10,981,528 samples, 0.14%)</title><rect x="21.5538%" y="181" width="0.1357%" height="15" fill="rgb(221,5,38)"/><text x="21.8038%" y="191.50"></text></g><g><title>get_lang_items (11,543,047 samples, 0.14%)</title><rect x="21.9353%" y="133" width="0.1426%" height="15" fill="rgb(247,18,42)"/><text x="22.1853%" y="143.50"></text></g><g><title>codegen_fn_attrs (20,523,883 samples, 0.25%)</title><rect x="21.9059%" y="149" width="0.2536%" height="15" fill="rgb(241,131,45)"/><text x="22.1559%" y="159.50"></text></g><g><title>check_mod_attrs (37,816,838 samples, 0.47%)</title><rect x="21.6922%" y="165" width="0.4673%" height="15" fill="rgb(249,31,29)"/><text x="21.9422%" y="175.50"></text></g><g><title>lint_levels (18,453,687 samples, 0.23%)</title><rect x="22.4228%" y="149" width="0.2280%" height="15" fill="rgb(225,111,53)"/><text x="22.6728%" y="159.50"></text></g><g><title>lookup_deprecation_entry (12,010,536 samples, 0.15%)</title><rect x="22.6508%" y="149" width="0.1484%" height="15" fill="rgb(238,160,17)"/><text x="22.9008%" y="159.50"></text></g><g><title>stability_index (11,218,844 samples, 0.14%)</title><rect x="22.6606%" y="133" width="0.1386%" height="15" fill="rgb(214,148,48)"/><text x="22.9106%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (36,934,134 samples, 0.46%)</title><rect x="22.3477%" y="165" width="0.4564%" height="15" fill="rgb(232,36,49)"/><text x="22.5977%" y="175.50"></text></g><g><title>misc_checking_1 (92,136,185 samples, 1.14%)</title><rect x="21.6895%" y="181" width="1.1385%" height="15" fill="rgb(209,103,24)"/><text x="21.9395%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (25,668,091 samples, 0.32%)</title><rect x="22.8280%" y="165" width="0.3172%" height="15" fill="rgb(229,88,8)"/><text x="23.0780%" y="175.50"></text></g><g><title>check_mod_liveness (20,354,968 samples, 0.25%)</title><rect x="22.8937%" y="149" width="0.2515%" height="15" fill="rgb(213,181,19)"/><text x="23.1437%" y="159.50"></text></g><g><title>misc_checking_2 (65,343,953 samples, 0.81%)</title><rect x="22.8280%" y="181" width="0.8074%" height="15" fill="rgb(254,191,54)"/><text x="23.0780%" y="191.50"></text></g><g><title>match_checking (39,672,472 samples, 0.49%)</title><rect x="23.1452%" y="165" width="0.4902%" height="15" fill="rgb(241,83,37)"/><text x="23.3952%" y="175.50"></text></g><g><title>check_match (35,833,534 samples, 0.44%)</title><rect x="23.1926%" y="149" width="0.4428%" height="15" fill="rgb(233,36,39)"/><text x="23.4426%" y="159.50"></text></g><g><title>check_private_in_public (19,890,182 samples, 0.25%)</title><rect x="23.6365%" y="165" width="0.2458%" height="15" fill="rgb(226,3,54)"/><text x="23.8865%" y="175.50"></text></g><g><title>death_checking (29,234,206 samples, 0.36%)</title><rect x="23.8823%" y="165" width="0.3612%" height="15" fill="rgb(245,192,40)"/><text x="24.1323%" y="175.50"></text></g><g><title>crate_lints (40,519,621 samples, 0.50%)</title><rect x="24.2436%" y="149" width="0.5007%" height="15" fill="rgb(238,167,29)"/><text x="24.4936%" y="159.50"></text></g><g><title>lint_checking (72,657,588 samples, 0.90%)</title><rect x="24.2435%" y="165" width="0.8978%" height="15" fill="rgb(232,182,51)"/><text x="24.4935%" y="175.50"></text></g><g><title>module_lints (32,132,956 samples, 0.40%)</title><rect x="24.7443%" y="149" width="0.3971%" height="15" fill="rgb(231,60,39)"/><text x="24.9943%" y="159.50"></text></g><g><title>lint_mod (32,059,315 samples, 0.40%)</title><rect x="24.7452%" y="133" width="0.3961%" height="15" fill="rgb(208,69,12)"/><text x="24.9952%" y="143.50"></text></g><g><title>privacy_access_levels (25,470,239 samples, 0.31%)</title><rect x="25.1413%" y="165" width="0.3147%" height="15" fill="rgb(235,93,37)"/><text x="25.3913%" y="175.50"></text></g><g><title>privacy_checking_modules (47,581,412 samples, 0.59%)</title><rect x="25.4561%" y="165" width="0.5880%" height="15" fill="rgb(213,116,39)"/><text x="25.7061%" y="175.50"></text></g><g><title>check_mod_privacy (47,519,562 samples, 0.59%)</title><rect x="25.4568%" y="149" width="0.5872%" height="15" fill="rgb(222,207,29)"/><text x="25.7068%" y="159.50"></text></g><g><title>misc_checking_3 (195,752,116 samples, 2.42%)</title><rect x="23.6354%" y="181" width="2.4189%" height="15" fill="rgb(206,96,30)"/><text x="23.8854%" y="191.50">mi..</text></g><g><title>impl_trait_ref (9,782,465 samples, 0.12%)</title><rect x="26.3294%" y="117" width="0.1209%" height="15" fill="rgb(218,138,4)"/><text x="26.5794%" y="127.50"></text></g><g><title>coherent_trait (30,667,202 samples, 0.38%)</title><rect x="26.1110%" y="149" width="0.3789%" height="15" fill="rgb(250,191,14)"/><text x="26.3610%" y="159.50"></text></g><g><title>specialization_graph_of (28,267,448 samples, 0.35%)</title><rect x="26.1407%" y="133" width="0.3493%" height="15" fill="rgb(239,60,40)"/><text x="26.3907%" y="143.50"></text></g><g><title>coherence_checking (33,156,056 samples, 0.41%)</title><rect x="26.1100%" y="165" width="0.4097%" height="15" fill="rgb(206,27,48)"/><text x="26.3600%" y="175.50"></text></g><g><title>evaluate_obligation (29,368,582 samples, 0.36%)</title><rect x="39.1675%" y="117" width="0.3629%" height="15" fill="rgb(225,35,8)"/><text x="39.4175%" y="127.50"></text></g><g><title>evaluate_obligation (8,764,341 samples, 0.11%)</title><rect x="40.8788%" y="101" width="0.1083%" height="15" fill="rgb(250,213,24)"/><text x="41.1288%" y="111.50"></text></g><g><title>typeck (107,570,378 samples, 1.33%)</title><rect x="39.7594%" y="117" width="1.3292%" height="15" fill="rgb(247,123,22)"/><text x="40.0094%" y="127.50"></text></g><g><title>item_bodies_checking (1,177,627,470 samples, 14.55%)</title><rect x="26.5613%" y="165" width="14.5516%" height="15" fill="rgb(231,138,38)"/><text x="26.8113%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,177,623,380 samples, 14.55%)</title><rect x="26.5614%" y="149" width="14.5516%" height="15" fill="rgb(231,145,46)"/><text x="26.8114%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (1,170,378,162 samples, 14.46%)</title><rect x="26.6509%" y="133" width="14.4621%" height="15" fill="rgb(251,118,11)"/><text x="26.9009%" y="143.50">typeck</text></g><g><title>evaluate_obligation (8,805,661 samples, 0.11%)</title><rect x="41.9066%" y="117" width="0.1088%" height="15" fill="rgb(217,147,25)"/><text x="42.1566%" y="127.50"></text></g><g><title>item_types_checking (73,491,196 samples, 0.91%)</title><rect x="41.1129%" y="165" width="0.9081%" height="15" fill="rgb(247,81,37)"/><text x="41.3629%" y="175.50"></text></g><g><title>check_mod_item_types (73,423,226 samples, 0.91%)</title><rect x="41.1138%" y="149" width="0.9073%" height="15" fill="rgb(209,12,38)"/><text x="41.3638%" y="159.50"></text></g><g><title>typeck (12,721,341 samples, 0.16%)</title><rect x="41.8639%" y="133" width="0.1572%" height="15" fill="rgb(227,1,9)"/><text x="42.1139%" y="143.50"></text></g><g><title>mir_const_qualif (11,936,046 samples, 0.15%)</title><rect x="42.4171%" y="85" width="0.1475%" height="15" fill="rgb(248,47,43)"/><text x="42.6671%" y="95.50"></text></g><g><title>mir_const (9,851,951 samples, 0.12%)</title><rect x="42.4429%" y="69" width="0.1217%" height="15" fill="rgb(221,10,30)"/><text x="42.6929%" y="79.50"></text></g><g><title>mir_borrowck (31,864,012 samples, 0.39%)</title><rect x="42.7439%" y="53" width="0.3937%" height="15" fill="rgb(210,229,1)"/><text x="42.9939%" y="63.50"></text></g><g><title>mir_for_ctfe (46,571,787 samples, 0.58%)</title><rect x="42.5646%" y="85" width="0.5755%" height="15" fill="rgb(222,148,37)"/><text x="42.8146%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,080,958 samples, 0.53%)</title><rect x="42.6077%" y="69" width="0.5323%" height="15" fill="rgb(234,67,33)"/><text x="42.8577%" y="79.50"></text></g><g><title>eval_to_const_value_raw (10,030,148 samples, 0.12%)</title><rect x="43.1717%" y="69" width="0.1239%" height="15" fill="rgb(247,98,35)"/><text x="43.4217%" y="79.50"></text></g><g><title>eval_to_const_value_raw (9,405,912 samples, 0.12%)</title><rect x="43.1795%" y="53" width="0.1162%" height="15" fill="rgb(247,138,52)"/><text x="43.4295%" y="63.50"></text></g><g><title>eval_to_allocation_raw (8,426,526 samples, 0.10%)</title><rect x="43.1916%" y="37" width="0.1041%" height="15" fill="rgb(213,79,30)"/><text x="43.4416%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (14,241,297 samples, 0.18%)</title><rect x="43.1414%" y="85" width="0.1760%" height="15" fill="rgb(246,177,23)"/><text x="43.3914%" y="95.50"></text></g><g><title>eval_to_const_value_raw (105,201,114 samples, 1.30%)</title><rect x="42.2771%" y="133" width="1.2999%" height="15" fill="rgb(230,62,27)"/><text x="42.5271%" y="143.50"></text></g><g><title>eval_to_const_value_raw (104,895,073 samples, 1.30%)</title><rect x="42.2809%" y="117" width="1.2962%" height="15" fill="rgb(216,154,8)"/><text x="42.5309%" y="127.50"></text></g><g><title>eval_to_allocation_raw (104,440,736 samples, 1.29%)</title><rect x="42.2865%" y="101" width="1.2905%" height="15" fill="rgb(244,35,45)"/><text x="42.5365%" y="111.50"></text></g><g><title>typeck (21,014,963 samples, 0.26%)</title><rect x="43.3174%" y="85" width="0.2597%" height="15" fill="rgb(251,115,12)"/><text x="43.5674%" y="95.50"></text></g><g><title>fn_sig (15,011,367 samples, 0.19%)</title><rect x="43.5771%" y="133" width="0.1855%" height="15" fill="rgb(240,54,50)"/><text x="43.8271%" y="143.50"></text></g><g><title>named_region_map (16,671,892 samples, 0.21%)</title><rect x="43.8796%" y="117" width="0.2060%" height="15" fill="rgb(233,84,52)"/><text x="44.1296%" y="127.50"></text></g><g><title>resolve_lifetimes (15,144,258 samples, 0.19%)</title><rect x="43.8985%" y="101" width="0.1871%" height="15" fill="rgb(207,117,47)"/><text x="44.1485%" y="111.50"></text></g><g><title>generics_of (27,126,509 samples, 0.34%)</title><rect x="43.7626%" y="133" width="0.3352%" height="15" fill="rgb(249,43,39)"/><text x="44.0126%" y="143.50"></text></g><g><title>predicates_of (24,222,791 samples, 0.30%)</title><rect x="44.1918%" y="133" width="0.2993%" height="15" fill="rgb(209,38,44)"/><text x="44.4418%" y="143.50"></text></g><g><title>predicates_defined_on (19,176,711 samples, 0.24%)</title><rect x="44.2542%" y="117" width="0.2370%" height="15" fill="rgb(236,212,23)"/><text x="44.5042%" y="127.50"></text></g><g><title>type_collecting (204,337,553 samples, 2.52%)</title><rect x="42.0215%" y="165" width="2.5249%" height="15" fill="rgb(242,79,21)"/><text x="42.2715%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (204,253,101 samples, 2.52%)</title><rect x="42.0226%" y="149" width="2.5239%" height="15" fill="rgb(211,96,35)"/><text x="42.2726%" y="159.50">co..</text></g><g><title>evaluate_obligation (9,805,977 samples, 0.12%)</title><rect x="45.8077%" y="133" width="0.1212%" height="15" fill="rgb(253,215,40)"/><text x="46.0577%" y="143.50"></text></g><g><title>param_env (16,552,957 samples, 0.20%)</title><rect x="45.9793%" y="133" width="0.2045%" height="15" fill="rgb(211,81,21)"/><text x="46.2293%" y="143.50"></text></g><g><title>region_scope_tree (23,950,548 samples, 0.30%)</title><rect x="46.1853%" y="133" width="0.2960%" height="15" fill="rgb(208,190,38)"/><text x="46.4353%" y="143.50"></text></g><g><title>check_impl_item_well_formed (143,890,463 samples, 1.78%)</title><rect x="44.7040%" y="149" width="1.7780%" height="15" fill="rgb(235,213,38)"/><text x="44.9540%" y="159.50">c..</text></g><g><title>evaluate_obligation (21,306,467 samples, 0.26%)</title><rect x="47.1376%" y="133" width="0.2633%" height="15" fill="rgb(237,122,38)"/><text x="47.3876%" y="143.50"></text></g><g><title>param_env (11,774,543 samples, 0.15%)</title><rect x="47.4396%" y="133" width="0.1455%" height="15" fill="rgb(244,218,35)"/><text x="47.6896%" y="143.50"></text></g><g><title>check_item_well_formed (96,695,672 samples, 1.19%)</title><rect x="46.4820%" y="149" width="1.1948%" height="15" fill="rgb(240,68,47)"/><text x="46.7320%" y="159.50"></text></g><g><title>analysis (3,311,617,274 samples, 40.92%)</title><rect x="7.0558%" y="197" width="40.9208%" height="15" fill="rgb(210,16,53)"/><text x="7.3058%" y="207.50">analysis</text></g><g><title>type_check_crate (1,774,119,902 samples, 21.92%)</title><rect x="26.0543%" y="181" width="21.9224%" height="15" fill="rgb(235,124,12)"/><text x="26.3043%" y="191.50">type_check_crate</text></g><g><title>wf_checking (276,990,621 samples, 3.42%)</title><rect x="44.5539%" y="165" width="3.4227%" height="15" fill="rgb(224,169,11)"/><text x="44.8039%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (24,258,961 samples, 0.30%)</title><rect x="47.6769%" y="149" width="0.2998%" height="15" fill="rgb(250,166,2)"/><text x="47.9269%" y="159.50"></text></g><g><title>param_env (8,870,508 samples, 0.11%)</title><rect x="53.8885%" y="149" width="0.1096%" height="15" fill="rgb(242,216,29)"/><text x="54.1385%" y="159.50"></text></g><g><title>fn_abi_of_instance (37,383,675 samples, 0.46%)</title><rect x="53.5878%" y="165" width="0.4619%" height="15" fill="rgb(230,116,27)"/><text x="53.8378%" y="175.50"></text></g><g><title>codegen_module (497,366,998 samples, 6.15%)</title><rect x="48.0285%" y="181" width="6.1458%" height="15" fill="rgb(228,99,48)"/><text x="48.2785%" y="191.50">codegen_..</text></g><g><title>codegen_crate (501,662,011 samples, 6.20%)</title><rect x="47.9768%" y="197" width="6.1989%" height="15" fill="rgb(253,11,6)"/><text x="48.2268%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (1,878,985,577 samples, 23.22%)</title><rect x="54.1792%" y="181" width="23.2181%" height="15" fill="rgb(247,143,39)"/><text x="54.4292%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,776,857,689 samples, 21.96%)</title><rect x="55.4412%" y="165" width="21.9562%" height="15" fill="rgb(236,97,10)"/><text x="55.6912%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,980,124,442 samples, 24.47%)</title><rect x="54.1757%" y="197" width="24.4679%" height="15" fill="rgb(233,208,19)"/><text x="54.4257%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (100,854,433 samples, 1.25%)</title><rect x="77.3973%" y="181" width="1.2462%" height="15" fill="rgb(216,164,2)"/><text x="77.6473%" y="191.50"></text></g><g><title>AST_validation (15,974,801 samples, 0.20%)</title><rect x="78.6463%" y="181" width="0.1974%" height="15" fill="rgb(220,129,5)"/><text x="78.8963%" y="191.50"></text></g><g><title>macro_expand_crate (627,109,204 samples, 7.75%)</title><rect x="78.9305%" y="181" width="7.7490%" height="15" fill="rgb(242,17,10)"/><text x="79.1805%" y="191.50">macro_expan..</text></g><g><title>expand_crate (627,069,953 samples, 7.75%)</title><rect x="78.9310%" y="165" width="7.7485%" height="15" fill="rgb(242,107,0)"/><text x="79.1810%" y="175.50">expand_crate</text></g><g><title>finalize_macro_resolutions (8,550,417 samples, 0.11%)</title><rect x="86.6955%" y="165" width="0.1057%" height="15" fill="rgb(251,28,31)"/><text x="86.9455%" y="175.50"></text></g><g><title>late_resolve_crate (68,638,736 samples, 0.85%)</title><rect x="86.8012%" y="165" width="0.8482%" height="15" fill="rgb(233,223,10)"/><text x="87.0512%" y="175.50"></text></g><g><title>configure_and_expand (740,147,990 samples, 9.15%)</title><rect x="78.6436%" y="197" width="9.1458%" height="15" fill="rgb(215,21,27)"/><text x="78.8936%" y="207.50">configure_and..</text></g><g><title>resolve_crate (89,629,459 samples, 1.11%)</title><rect x="86.6819%" y="181" width="1.1075%" height="15" fill="rgb(232,23,21)"/><text x="86.9319%" y="191.50"></text></g><g><title>drop_ast (24,718,691 samples, 0.31%)</title><rect x="87.7894%" y="197" width="0.3054%" height="15" fill="rgb(244,5,23)"/><text x="88.0394%" y="207.50"></text></g><g><title>early_lint_checks (22,707,920 samples, 0.28%)</title><rect x="88.0952%" y="197" width="0.2806%" height="15" fill="rgb(226,81,46)"/><text x="88.3452%" y="207.50"></text></g><g><title>free_global_ctxt (49,363,351 samples, 0.61%)</title><rect x="88.3758%" y="197" width="0.6100%" height="15" fill="rgb(247,70,30)"/><text x="88.6258%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (80,570,515 samples, 1.00%)</title><rect x="91.5189%" y="101" width="0.9956%" height="15" fill="rgb(212,68,19)"/><text x="91.7689%" y="111.50"></text></g><g><title>optimized_mir (166,835,419 samples, 2.06%)</title><rect x="90.5026%" y="117" width="2.0615%" height="15" fill="rgb(240,187,13)"/><text x="90.7526%" y="127.50">o..</text></g><g><title>codegen_fulfill_obligation (10,952,325 samples, 0.14%)</title><rect x="92.6390%" y="101" width="0.1353%" height="15" fill="rgb(223,113,26)"/><text x="92.8890%" y="111.50"></text></g><g><title>resolve_instance (21,982,037 samples, 0.27%)</title><rect x="92.5642%" y="117" width="0.2716%" height="15" fill="rgb(206,192,2)"/><text x="92.8142%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (227,419,188 samples, 2.81%)</title><rect x="90.1427%" y="133" width="2.8102%" height="15" fill="rgb(241,108,4)"/><text x="90.3927%" y="143.50">mo..</text></g><g><title>monomorphization_collector (230,771,282 samples, 2.85%)</title><rect x="90.1427%" y="149" width="2.8516%" height="15" fill="rgb(247,173,49)"/><text x="90.3927%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (18,348,245 samples, 0.23%)</title><rect x="92.9949%" y="133" width="0.2267%" height="15" fill="rgb(224,114,35)"/><text x="93.2449%" y="143.50"></text></g><g><title>symbol_name (16,086,121 samples, 0.20%)</title><rect x="93.0228%" y="117" width="0.1988%" height="15" fill="rgb(245,159,27)"/><text x="93.2728%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (258,315,191 samples, 3.19%)</title><rect x="90.1406%" y="165" width="3.1919%" height="15" fill="rgb(245,172,44)"/><text x="90.3906%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (27,373,547 samples, 0.34%)</title><rect x="92.9942%" y="149" width="0.3382%" height="15" fill="rgb(236,23,11)"/><text x="93.2442%" y="159.50"></text></g><g><title>cgu_partitioning (8,975,731 samples, 0.11%)</title><rect x="93.2216%" y="133" width="0.1109%" height="15" fill="rgb(205,117,38)"/><text x="93.4716%" y="143.50"></text></g><g><title>exported_symbols (270,411,564 samples, 3.34%)</title><rect x="90.1291%" y="181" width="3.3414%" height="15" fill="rgb(237,72,25)"/><text x="90.3791%" y="191.50">exp..</text></g><g><title>reachable_non_generics (11,171,683 samples, 0.14%)</title><rect x="93.3325%" y="165" width="0.1380%" height="15" fill="rgb(244,70,9)"/><text x="93.5825%" y="175.50"></text></g><g><title>reachable_set (9,654,707 samples, 0.12%)</title><rect x="93.3512%" y="149" width="0.1193%" height="15" fill="rgb(217,125,39)"/><text x="93.6012%" y="159.50"></text></g><g><title>mir_for_ctfe (18,464,657 samples, 0.23%)</title><rect x="93.4840%" y="181" width="0.2282%" height="15" fill="rgb(235,36,10)"/><text x="93.7340%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,453,556 samples, 0.10%)</title><rect x="93.6077%" y="165" width="0.1045%" height="15" fill="rgb(251,123,47)"/><text x="93.8577%" y="175.50"></text></g><g><title>layout_of (10,250,988 samples, 0.13%)</title><rect x="95.1285%" y="165" width="0.1267%" height="15" fill="rgb(221,13,13)"/><text x="95.3785%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (88,566,013 samples, 1.09%)</title><rect x="95.2552%" y="165" width="1.0944%" height="15" fill="rgb(238,131,9)"/><text x="95.5052%" y="175.50"></text></g><g><title>mir_for_ctfe (13,513,925 samples, 0.17%)</title><rect x="96.4490%" y="101" width="0.1670%" height="15" fill="rgb(211,50,8)"/><text x="96.6990%" y="111.50"></text></g><g><title>eval_to_const_value_raw (19,093,029 samples, 0.24%)</title><rect x="96.3862%" y="149" width="0.2359%" height="15" fill="rgb(245,182,24)"/><text x="96.6362%" y="159.50"></text></g><g><title>eval_to_const_value_raw (18,792,827 samples, 0.23%)</title><rect x="96.3899%" y="133" width="0.2322%" height="15" fill="rgb(242,14,37)"/><text x="96.6399%" y="143.50"></text></g><g><title>eval_to_allocation_raw (18,265,141 samples, 0.23%)</title><rect x="96.3964%" y="117" width="0.2257%" height="15" fill="rgb(246,228,12)"/><text x="96.6464%" y="127.50"></text></g><g><title>optimized_mir (236,874,471 samples, 2.93%)</title><rect x="93.7248%" y="181" width="2.9270%" height="15" fill="rgb(213,55,15)"/><text x="93.9748%" y="191.50">op..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (22,559,734 samples, 0.28%)</title><rect x="96.3730%" y="165" width="0.2788%" height="15" fill="rgb(209,9,3)"/><text x="96.6230%" y="175.50"></text></g><g><title>generate_crate_metadata (625,402,107 samples, 7.73%)</title><rect x="88.9857%" y="197" width="7.7279%" height="15" fill="rgb(230,59,30)"/><text x="89.2357%" y="207.50">generate_cr..</text></g><g><title>hir_lowering (186,192,870 samples, 2.30%)</title><rect x="96.7137%" y="197" width="2.3007%" height="15" fill="rgb(209,121,21)"/><text x="96.9637%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (31,003,875 samples, 0.38%)</title><rect x="99.0147%" y="181" width="0.3831%" height="15" fill="rgb(220,109,13)"/><text x="99.2647%" y="191.50"></text></g><g><title>link_crate (19,644,269 samples, 0.24%)</title><rect x="99.3978%" y="181" width="0.2427%" height="15" fill="rgb(232,18,1)"/><text x="99.6478%" y="191.50"></text></g><g><title>link_binary (19,176,644 samples, 0.24%)</title><rect x="99.4035%" y="165" width="0.2370%" height="15" fill="rgb(215,41,42)"/><text x="99.6535%" y="175.50"></text></g><g><title>link_rlib (16,994,622 samples, 0.21%)</title><rect x="99.4305%" y="149" width="0.2100%" height="15" fill="rgb(224,123,36)"/><text x="99.6805%" y="159.50"></text></g><g><title>link (50,679,774 samples, 0.63%)</title><rect x="99.0144%" y="197" width="0.6262%" height="15" fill="rgb(240,125,3)"/><text x="99.2644%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (20,690,500 samples, 0.26%)</title><rect x="99.6706%" y="197" width="0.2557%" height="15" fill="rgb(205,98,50)"/><text x="99.9206%" y="207.50"></text></g><g><title>all (8,092,744,978 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (8,092,744,978 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>