<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (176,071,476 samples, 13.50%)</title><rect x="0.0660%" y="197" width="13.4998%" height="15" fill="rgb(227,0,7)"/><text x="0.3160%" y="207.50">LLVM_passes</text></g><g><title>resolve_instance (1,438,924 samples, 0.11%)</title><rect x="15.1640%" y="85" width="0.1103%" height="15" fill="rgb(217,0,24)"/><text x="15.4140%" y="95.50"></text></g><g><title>mir_const (6,385,137 samples, 0.49%)</title><rect x="14.8403%" y="133" width="0.4896%" height="15" fill="rgb(221,193,54)"/><text x="15.0903%" y="143.50"></text></g><g><title>unsafety_check_result (5,577,788 samples, 0.43%)</title><rect x="14.9022%" y="117" width="0.4277%" height="15" fill="rgb(248,212,6)"/><text x="15.1522%" y="127.50"></text></g><g><title>mir_built (5,005,981 samples, 0.38%)</title><rect x="14.9460%" y="101" width="0.3838%" height="15" fill="rgb(208,68,35)"/><text x="15.1960%" y="111.50"></text></g><g><title>thir_body (3,469,297 samples, 0.27%)</title><rect x="15.5219%" y="69" width="0.2660%" height="15" fill="rgb(232,128,0)"/><text x="15.7719%" y="79.50"></text></g><g><title>mir_const_qualif (5,975,853 samples, 0.46%)</title><rect x="15.3298%" y="133" width="0.4582%" height="15" fill="rgb(207,160,47)"/><text x="15.5798%" y="143.50"></text></g><g><title>mir_const (5,849,413 samples, 0.45%)</title><rect x="15.3395%" y="117" width="0.4485%" height="15" fill="rgb(228,23,34)"/><text x="15.5895%" y="127.50"></text></g><g><title>unsafety_check_result (5,672,991 samples, 0.43%)</title><rect x="15.3531%" y="101" width="0.4350%" height="15" fill="rgb(218,30,26)"/><text x="15.6031%" y="111.50"></text></g><g><title>mir_built (5,559,750 samples, 0.43%)</title><rect x="15.3617%" y="85" width="0.4263%" height="15" fill="rgb(220,122,19)"/><text x="15.6117%" y="95.50"></text></g><g><title>mir_promoted (13,891,465 samples, 1.07%)</title><rect x="14.7230%" y="149" width="1.0651%" height="15" fill="rgb(250,228,42)"/><text x="14.9730%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,404,075 samples, 0.18%)</title><rect x="15.9044%" y="149" width="0.1843%" height="15" fill="rgb(240,193,28)"/><text x="16.1544%" y="159.50"></text></g><g><title>MIR_borrow_checking (32,425,452 samples, 2.49%)</title><rect x="13.6031%" y="181" width="2.4861%" height="15" fill="rgb(216,20,37)"/><text x="13.8531%" y="191.50">MI..</text></g><g><title>mir_borrowck (32,337,772 samples, 2.48%)</title><rect x="13.6098%" y="165" width="2.4794%" height="15" fill="rgb(206,188,39)"/><text x="13.8598%" y="175.50">mi..</text></g><g><title>misc_checking_1 (1,608,588 samples, 0.12%)</title><rect x="16.1204%" y="181" width="0.1233%" height="15" fill="rgb(217,207,13)"/><text x="16.3704%" y="191.50"></text></g><g><title>misc_checking_2 (1,355,924 samples, 0.10%)</title><rect x="16.2437%" y="181" width="0.1040%" height="15" fill="rgb(231,73,38)"/><text x="16.4937%" y="191.50"></text></g><g><title>eval_to_const_value_raw (8,258,017 samples, 0.63%)</title><rect x="16.6747%" y="69" width="0.6332%" height="15" fill="rgb(225,20,46)"/><text x="16.9247%" y="79.50"></text></g><g><title>eval_to_const_value_raw (8,255,727 samples, 0.63%)</title><rect x="16.6749%" y="53" width="0.6330%" height="15" fill="rgb(210,31,41)"/><text x="16.9249%" y="63.50"></text></g><g><title>eval_to_allocation_raw (8,249,547 samples, 0.63%)</title><rect x="16.6754%" y="37" width="0.6325%" height="15" fill="rgb(221,200,47)"/><text x="16.9254%" y="47.50"></text></g><g><title>eval_to_const_value_raw (10,991,876 samples, 0.84%)</title><rect x="16.4656%" y="133" width="0.8428%" height="15" fill="rgb(226,26,5)"/><text x="16.7156%" y="143.50"></text></g><g><title>eval_to_const_value_raw (10,989,626 samples, 0.84%)</title><rect x="16.4658%" y="117" width="0.8426%" height="15" fill="rgb(249,33,26)"/><text x="16.7158%" y="127.50"></text></g><g><title>eval_to_allocation_raw (10,985,236 samples, 0.84%)</title><rect x="16.4661%" y="101" width="0.8423%" height="15" fill="rgb(235,183,28)"/><text x="16.7161%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,277,527 samples, 0.63%)</title><rect x="16.6738%" y="85" width="0.6347%" height="15" fill="rgb(221,5,38)"/><text x="16.9238%" y="95.50"></text></g><g><title>crate_lints (13,484,202 samples, 1.03%)</title><rect x="16.3742%" y="149" width="1.0339%" height="15" fill="rgb(247,18,42)"/><text x="16.6242%" y="159.50"></text></g><g><title>lint_checking (14,732,346 samples, 1.13%)</title><rect x="16.3740%" y="165" width="1.1296%" height="15" fill="rgb(241,131,45)"/><text x="16.6240%" y="175.50"></text></g><g><title>misc_checking_3 (16,019,399 samples, 1.23%)</title><rect x="16.3477%" y="181" width="1.2282%" height="15" fill="rgb(249,31,29)"/><text x="16.5977%" y="191.50"></text></g><g><title>impl_trait_ref (3,785,148 samples, 0.29%)</title><rect x="17.7825%" y="117" width="0.2902%" height="15" fill="rgb(225,111,53)"/><text x="18.0325%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,416,445 samples, 0.26%)</title><rect x="17.8108%" y="101" width="0.2619%" height="15" fill="rgb(238,160,17)"/><text x="18.0608%" y="111.50"></text></g><g><title>coherent_trait (6,636,250 samples, 0.51%)</title><rect x="17.5888%" y="149" width="0.5088%" height="15" fill="rgb(214,148,48)"/><text x="17.8388%" y="159.50"></text></g><g><title>specialization_graph_of (6,621,120 samples, 0.51%)</title><rect x="17.5900%" y="133" width="0.5077%" height="15" fill="rgb(232,36,49)"/><text x="17.8400%" y="143.50"></text></g><g><title>coherence_checking (6,692,740 samples, 0.51%)</title><rect x="17.5877%" y="165" width="0.5131%" height="15" fill="rgb(209,103,24)"/><text x="17.8377%" y="175.50"></text></g><g><title>evaluate_obligation (2,213,974 samples, 0.17%)</title><rect x="19.2465%" y="101" width="0.1698%" height="15" fill="rgb(229,88,8)"/><text x="19.4965%" y="111.50"></text></g><g><title>typeck (14,323,321 samples, 1.10%)</title><rect x="18.4312%" y="117" width="1.0982%" height="15" fill="rgb(213,181,19)"/><text x="18.6812%" y="127.50"></text></g><g><title>item_bodies_checking (18,631,647 samples, 1.43%)</title><rect x="18.1021%" y="165" width="1.4285%" height="15" fill="rgb(254,191,54)"/><text x="18.3521%" y="175.50"></text></g><g><title>typeck_item_bodies (18,628,666 samples, 1.43%)</title><rect x="18.1024%" y="149" width="1.4283%" height="15" fill="rgb(241,83,37)"/><text x="18.3524%" y="159.50"></text></g><g><title>typeck (18,594,306 samples, 1.43%)</title><rect x="18.1050%" y="133" width="1.4257%" height="15" fill="rgb(233,36,39)"/><text x="18.3550%" y="143.50"></text></g><g><title>item_types_checking (15,240,781 samples, 1.17%)</title><rect x="19.5307%" y="165" width="1.1685%" height="15" fill="rgb(226,3,54)"/><text x="19.7807%" y="175.50"></text></g><g><title>check_mod_item_types (15,235,841 samples, 1.17%)</title><rect x="19.5311%" y="149" width="1.1682%" height="15" fill="rgb(245,192,40)"/><text x="19.7811%" y="159.50"></text></g><g><title>typeck (14,434,593 samples, 1.11%)</title><rect x="19.5925%" y="133" width="1.1067%" height="15" fill="rgb(238,167,29)"/><text x="19.8425%" y="143.50"></text></g><g><title>analysis (96,769,041 samples, 7.42%)</title><rect x="13.5658%" y="197" width="7.4195%" height="15" fill="rgb(232,182,51)"/><text x="13.8158%" y="207.50">analysis</text></g><g><title>type_check_crate (44,466,778 samples, 3.41%)</title><rect x="17.5760%" y="181" width="3.4094%" height="15" fill="rgb(231,60,39)"/><text x="17.8260%" y="191.50">typ..</text></g><g><title>wf_checking (2,611,707 samples, 0.20%)</title><rect x="20.7851%" y="165" width="0.2002%" height="15" fill="rgb(208,69,12)"/><text x="21.0351%" y="175.50"></text></g><g><title>check_item_well_formed (1,995,021 samples, 0.15%)</title><rect x="20.8324%" y="149" width="0.1530%" height="15" fill="rgb(235,93,37)"/><text x="21.0824%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (3,113,476 samples, 0.24%)</title><rect x="30.4708%" y="165" width="0.2387%" height="15" fill="rgb(213,116,39)"/><text x="30.7208%" y="175.50"></text></g><g><title>const_caller_location (1,964,326 samples, 0.15%)</title><rect x="30.7095%" y="165" width="0.1506%" height="15" fill="rgb(222,207,29)"/><text x="30.9595%" y="175.50"></text></g><g><title>layout_of (2,249,382 samples, 0.17%)</title><rect x="31.4244%" y="149" width="0.1725%" height="15" fill="rgb(206,96,30)"/><text x="31.6744%" y="159.50"></text></g><g><title>predicates_of (1,969,193 samples, 0.15%)</title><rect x="31.9438%" y="133" width="0.1510%" height="15" fill="rgb(218,138,4)"/><text x="32.1938%" y="143.50"></text></g><g><title>predicates_defined_on (1,464,669 samples, 0.11%)</title><rect x="31.9825%" y="117" width="0.1123%" height="15" fill="rgb(250,191,14)"/><text x="32.2325%" y="127.50"></text></g><g><title>param_env (6,511,382 samples, 0.50%)</title><rect x="31.5969%" y="149" width="0.4992%" height="15" fill="rgb(239,60,40)"/><text x="31.8469%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,317,499 samples, 0.25%)</title><rect x="32.0962%" y="149" width="0.2544%" height="15" fill="rgb(206,27,48)"/><text x="32.3462%" y="159.50"></text></g><g><title>normalize_projection_ty (2,671,210 samples, 0.20%)</title><rect x="32.1457%" y="133" width="0.2048%" height="15" fill="rgb(225,35,8)"/><text x="32.3957%" y="143.50"></text></g><g><title>fn_abi_of_instance (19,416,517 samples, 1.49%)</title><rect x="30.8653%" y="165" width="1.4887%" height="15" fill="rgb(250,213,24)"/><text x="31.1153%" y="175.50"></text></g><g><title>layout_of (2,469,727 samples, 0.19%)</title><rect x="32.4267%" y="165" width="0.1894%" height="15" fill="rgb(247,123,22)"/><text x="32.6767%" y="175.50"></text></g><g><title>codegen_module (150,907,710 samples, 11.57%)</title><rect x="21.1810%" y="181" width="11.5705%" height="15" fill="rgb(231,138,38)"/><text x="21.4310%" y="191.50">codegen_module</text></g><g><title>codegen_crate (153,539,509 samples, 11.77%)</title><rect x="20.9861%" y="197" width="11.7723%" height="15" fill="rgb(231,145,46)"/><text x="21.2361%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (670,509,702 samples, 51.41%)</title><rect x="32.7767%" y="181" width="51.4097%" height="15" fill="rgb(251,118,11)"/><text x="33.0267%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (645,350,406 samples, 49.48%)</title><rect x="34.7057%" y="165" width="49.4806%" height="15" fill="rgb(217,147,25)"/><text x="34.9557%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (723,420,732 samples, 55.47%)</title><rect x="32.7584%" y="197" width="55.4665%" height="15" fill="rgb(247,81,37)"/><text x="33.0084%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (52,672,459 samples, 4.04%)</title><rect x="84.1864%" y="181" width="4.0385%" height="15" fill="rgb(209,12,38)"/><text x="84.4364%" y="191.50">LLVM..</text></g><g><title>metadata_register_crate (2,502,256 samples, 0.19%)</title><rect x="90.2721%" y="149" width="0.1919%" height="15" fill="rgb(227,1,9)"/><text x="90.5221%" y="159.50"></text></g><g><title>macro_expand_crate (29,277,029 samples, 2.24%)</title><rect x="88.2728%" y="181" width="2.2447%" height="15" fill="rgb(248,47,43)"/><text x="88.5228%" y="191.50">m..</text></g><g><title>expand_crate (29,254,059 samples, 2.24%)</title><rect x="88.2746%" y="165" width="2.2430%" height="15" fill="rgb(221,10,30)"/><text x="88.5246%" y="175.50">e..</text></g><g><title>late_resolve_crate (1,952,461 samples, 0.15%)</title><rect x="90.5400%" y="165" width="0.1497%" height="15" fill="rgb(210,229,1)"/><text x="90.7900%" y="175.50"></text></g><g><title>configure_and_expand (32,378,991 samples, 2.48%)</title><rect x="88.2249%" y="197" width="2.4826%" height="15" fill="rgb(222,148,37)"/><text x="88.4749%" y="207.50">co..</text></g><g><title>resolve_crate (2,278,954 samples, 0.17%)</title><rect x="90.5327%" y="181" width="0.1747%" height="15" fill="rgb(234,67,33)"/><text x="90.7827%" y="191.50"></text></g><g><title>early_lint_checks (4,513,377 samples, 0.35%)</title><rect x="90.7398%" y="197" width="0.3461%" height="15" fill="rgb(247,98,35)"/><text x="90.9898%" y="207.50"></text></g><g><title>free_global_ctxt (6,929,913 samples, 0.53%)</title><rect x="91.0859%" y="197" width="0.5313%" height="15" fill="rgb(247,138,52)"/><text x="91.3359%" y="207.50"></text></g><g><title>item_attrs (1,612,926 samples, 0.12%)</title><rect x="92.5910%" y="101" width="0.1237%" height="15" fill="rgb(213,79,30)"/><text x="92.8410%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,535,594 samples, 0.12%)</title><rect x="92.5969%" y="85" width="0.1177%" height="15" fill="rgb(246,177,23)"/><text x="92.8469%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,805,488 samples, 0.22%)</title><rect x="92.5542%" y="117" width="0.2151%" height="15" fill="rgb(230,62,27)"/><text x="92.8042%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,807,471 samples, 0.29%)</title><rect x="93.1098%" y="101" width="0.2919%" height="15" fill="rgb(216,154,8)"/><text x="93.3598%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,861,009 samples, 0.14%)</title><rect x="93.4017%" y="101" width="0.1427%" height="15" fill="rgb(244,35,45)"/><text x="93.6517%" y="111.50"></text></g><g><title>optimized_mir (8,647,500 samples, 0.66%)</title><rect x="92.8928%" y="117" width="0.6630%" height="15" fill="rgb(251,115,12)"/><text x="93.1428%" y="127.50"></text></g><g><title>evaluate_obligation (2,594,497 samples, 0.20%)</title><rect x="94.4238%" y="85" width="0.1989%" height="15" fill="rgb(240,54,50)"/><text x="94.6738%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (12,688,297 samples, 0.97%)</title><rect x="93.7403%" y="101" width="0.9728%" height="15" fill="rgb(233,84,52)"/><text x="93.9903%" y="111.50"></text></g><g><title>impl_parent (1,625,215 samples, 0.12%)</title><rect x="95.0935%" y="85" width="0.1246%" height="15" fill="rgb(207,117,47)"/><text x="95.3435%" y="95.50"></text></g><g><title>specialization_graph_of (7,636,443 samples, 0.59%)</title><rect x="94.8945%" y="101" width="0.5855%" height="15" fill="rgb(249,43,39)"/><text x="95.1445%" y="111.50"></text></g><g><title>impl_trait_ref (3,416,574 samples, 0.26%)</title><rect x="95.2181%" y="85" width="0.2620%" height="15" fill="rgb(209,38,44)"/><text x="95.4681%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,799,979 samples, 0.21%)</title><rect x="95.2653%" y="69" width="0.2147%" height="15" fill="rgb(236,212,23)"/><text x="95.5153%" y="79.50"></text></g><g><title>resolve_instance (25,709,012 samples, 1.97%)</title><rect x="93.5558%" y="117" width="1.9712%" height="15" fill="rgb(242,79,21)"/><text x="93.8058%" y="127.50">r..</text></g><g><title>normalize_projection_ty (1,569,996 samples, 0.12%)</title><rect x="95.5789%" y="101" width="0.1204%" height="15" fill="rgb(211,96,35)"/><text x="95.8289%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,273,784 samples, 0.17%)</title><rect x="95.5270%" y="117" width="0.1743%" height="15" fill="rgb(253,215,40)"/><text x="95.7770%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,467,436 samples, 0.11%)</title><rect x="95.7434%" y="101" width="0.1125%" height="15" fill="rgb(211,81,21)"/><text x="95.9934%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,429,146 samples, 0.11%)</title><rect x="95.7463%" y="85" width="0.1096%" height="15" fill="rgb(208,190,38)"/><text x="95.9963%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,363,606 samples, 0.10%)</title><rect x="95.7514%" y="69" width="0.1046%" height="15" fill="rgb(235,213,38)"/><text x="96.0014%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,091,491 samples, 0.16%)</title><rect x="95.7013%" y="117" width="0.1604%" height="15" fill="rgb(237,122,38)"/><text x="95.9513%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (51,706,945 samples, 3.96%)</title><rect x="91.9638%" y="133" width="3.9645%" height="15" fill="rgb(244,218,35)"/><text x="92.2138%" y="143.50">mono..</text></g><g><title>monomorphization_collector (51,809,556 samples, 3.97%)</title><rect x="91.9636%" y="149" width="3.9724%" height="15" fill="rgb(240,68,47)"/><text x="92.2136%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,783,141 samples, 0.37%)</title><rect x="95.9363%" y="133" width="0.3667%" height="15" fill="rgb(210,16,53)"/><text x="96.1863%" y="143.50"></text></g><g><title>symbol_name (4,370,776 samples, 0.34%)</title><rect x="95.9679%" y="117" width="0.3351%" height="15" fill="rgb(235,124,12)"/><text x="96.2179%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (58,360,796 samples, 4.47%)</title><rect x="91.9599%" y="165" width="4.4747%" height="15" fill="rgb(224,169,11)"/><text x="92.2099%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (6,503,800 samples, 0.50%)</title><rect x="95.9359%" y="149" width="0.4987%" height="15" fill="rgb(250,166,2)"/><text x="96.1859%" y="159.50"></text></g><g><title>cgu_partitioning (1,715,929 samples, 0.13%)</title><rect x="96.3030%" y="133" width="0.1316%" height="15" fill="rgb(242,216,29)"/><text x="96.5530%" y="143.50"></text></g><g><title>exported_symbols (58,606,879 samples, 4.49%)</title><rect x="91.9454%" y="181" width="4.4935%" height="15" fill="rgb(230,116,27)"/><text x="92.1954%" y="191.50">expor..</text></g><g><title>optimized_mir (1,703,179 samples, 0.13%)</title><rect x="96.4418%" y="181" width="0.1306%" height="15" fill="rgb(228,99,48)"/><text x="96.6918%" y="191.50"></text></g><g><title>generate_crate_metadata (64,654,522 samples, 4.96%)</title><rect x="91.6172%" y="197" width="4.9572%" height="15" fill="rgb(253,11,6)"/><text x="91.8672%" y="207.50">genera..</text></g><g><title>hir_lowering (5,502,738 samples, 0.42%)</title><rect x="96.5745%" y="197" width="0.4219%" height="15" fill="rgb(247,143,39)"/><text x="96.8245%" y="207.50"></text></g><g><title>finish_ongoing_codegen (30,116,708 samples, 2.31%)</title><rect x="96.9977%" y="181" width="2.3091%" height="15" fill="rgb(236,97,10)"/><text x="97.2477%" y="191.50">f..</text></g><g><title>link_crate (3,888,551 samples, 0.30%)</title><rect x="99.3068%" y="181" width="0.2981%" height="15" fill="rgb(233,208,19)"/><text x="99.5568%" y="191.50"></text></g><g><title>link_binary (3,849,831 samples, 0.30%)</title><rect x="99.3098%" y="165" width="0.2952%" height="15" fill="rgb(216,164,2)"/><text x="99.5598%" y="175.50"></text></g><g><title>link_rlib (2,962,361 samples, 0.23%)</title><rect x="99.3778%" y="149" width="0.2271%" height="15" fill="rgb(220,129,5)"/><text x="99.6278%" y="159.50"></text></g><g><title>link (34,034,639 samples, 2.61%)</title><rect x="96.9964%" y="197" width="2.6095%" height="15" fill="rgb(242,17,10)"/><text x="97.2464%" y="207.50">li..</text></g><g><title>parse_crate (2,756,810 samples, 0.21%)</title><rect x="99.6059%" y="197" width="0.2114%" height="15" fill="rgb(242,107,0)"/><text x="99.8559%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,510,796 samples, 0.12%)</title><rect x="99.8399%" y="197" width="0.1158%" height="15" fill="rgb(251,28,31)"/><text x="100.0899%" y="207.50"></text></g><g><title>all (1,304,248,307 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,304,248,307 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>