<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (376,545,718 samples, 14.81%)</title><rect x="0.0416%" y="165" width="14.8100%" height="15" fill="rgb(227,0,7)"/><text x="0.2916%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (2,570,778 samples, 0.10%)</title><rect x="19.2653%" y="37" width="0.1011%" height="15" fill="rgb(217,0,24)"/><text x="19.5153%" y="47.50"></text></g><g><title>needs_drop_raw (3,980,773 samples, 0.16%)</title><rect x="19.2137%" y="53" width="0.1566%" height="15" fill="rgb(221,193,54)"/><text x="19.4637%" y="63.50"></text></g><g><title>resolve_instance (3,026,598 samples, 0.12%)</title><rect x="19.3703%" y="53" width="0.1190%" height="15" fill="rgb(248,212,6)"/><text x="19.6203%" y="63.50"></text></g><g><title>thir_body (7,161,886 samples, 0.28%)</title><rect x="19.4944%" y="53" width="0.2817%" height="15" fill="rgb(208,68,35)"/><text x="19.7444%" y="63.50"></text></g><g><title>mir_const (41,415,888 samples, 1.63%)</title><rect x="18.1503%" y="101" width="1.6289%" height="15" fill="rgb(232,128,0)"/><text x="18.4003%" y="111.50"></text></g><g><title>unsafety_check_result (35,901,018 samples, 1.41%)</title><rect x="18.3673%" y="85" width="1.4120%" height="15" fill="rgb(207,160,47)"/><text x="18.6173%" y="95.50"></text></g><g><title>mir_built (32,121,745 samples, 1.26%)</title><rect x="18.5159%" y="69" width="1.2634%" height="15" fill="rgb(228,23,34)"/><text x="18.7659%" y="79.50"></text></g><g><title>mir_promoted (46,212,469 samples, 1.82%)</title><rect x="17.9785%" y="117" width="1.8176%" height="15" fill="rgb(218,30,26)"/><text x="18.2285%" y="127.50">m..</text></g><g><title>type_op_normalize_fn_sig (2,834,585 samples, 0.11%)</title><rect x="19.8371%" y="117" width="0.1115%" height="15" fill="rgb(220,122,19)"/><text x="20.0871%" y="127.50"></text></g><g><title>type_op_prove_predicate (9,199,655 samples, 0.36%)</title><rect x="19.9800%" y="117" width="0.3618%" height="15" fill="rgb(250,228,42)"/><text x="20.2300%" y="127.50"></text></g><g><title>MIR_borrow_checking (138,360,975 samples, 5.44%)</title><rect x="14.9012%" y="149" width="5.4419%" height="15" fill="rgb(240,193,28)"/><text x="15.1512%" y="159.50">MIR_bor..</text></g><g><title>mir_borrowck (137,864,009 samples, 5.42%)</title><rect x="14.9207%" y="133" width="5.4223%" height="15" fill="rgb(216,20,37)"/><text x="15.1707%" y="143.50">mir_bor..</text></g><g><title>misc_checking_1 (4,719,238 samples, 0.19%)</title><rect x="20.3852%" y="149" width="0.1856%" height="15" fill="rgb(206,188,39)"/><text x="20.6352%" y="159.50"></text></g><g><title>misc_checking_2 (6,657,457 samples, 0.26%)</title><rect x="20.5708%" y="149" width="0.2618%" height="15" fill="rgb(217,207,13)"/><text x="20.8208%" y="159.50"></text></g><g><title>match_checking (4,189,122 samples, 0.16%)</title><rect x="20.6679%" y="133" width="0.1648%" height="15" fill="rgb(231,73,38)"/><text x="20.9179%" y="143.50"></text></g><g><title>check_match (4,067,691 samples, 0.16%)</title><rect x="20.6727%" y="117" width="0.1600%" height="15" fill="rgb(225,20,46)"/><text x="20.9227%" y="127.50"></text></g><g><title>crate_lints (4,696,507 samples, 0.18%)</title><rect x="20.9253%" y="117" width="0.1847%" height="15" fill="rgb(210,31,41)"/><text x="21.1753%" y="127.50"></text></g><g><title>lint_checking (7,813,549 samples, 0.31%)</title><rect x="20.9252%" y="133" width="0.3073%" height="15" fill="rgb(221,200,47)"/><text x="21.1752%" y="143.50"></text></g><g><title>module_lints (3,114,852 samples, 0.12%)</title><rect x="21.1100%" y="117" width="0.1225%" height="15" fill="rgb(226,26,5)"/><text x="21.3600%" y="127.50"></text></g><g><title>lint_mod (3,103,191 samples, 0.12%)</title><rect x="21.1105%" y="101" width="0.1221%" height="15" fill="rgb(249,33,26)"/><text x="21.3605%" y="111.50"></text></g><g><title>privacy_checking_modules (4,721,988 samples, 0.19%)</title><rect x="21.2876%" y="133" width="0.1857%" height="15" fill="rgb(235,183,28)"/><text x="21.5376%" y="143.50"></text></g><g><title>check_mod_privacy (4,714,118 samples, 0.19%)</title><rect x="21.2879%" y="117" width="0.1854%" height="15" fill="rgb(221,5,38)"/><text x="21.5379%" y="127.50"></text></g><g><title>misc_checking_3 (16,319,355 samples, 0.64%)</title><rect x="20.8327%" y="149" width="0.6419%" height="15" fill="rgb(247,18,42)"/><text x="21.0827%" y="159.50"></text></g><g><title>impl_parent (3,426,755 samples, 0.13%)</title><rect x="21.7337%" y="85" width="0.1348%" height="15" fill="rgb(241,131,45)"/><text x="21.9837%" y="95.50"></text></g><g><title>impl_trait_ref (7,011,501 samples, 0.28%)</title><rect x="21.8685%" y="85" width="0.2758%" height="15" fill="rgb(249,31,29)"/><text x="22.1185%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,695,190 samples, 0.22%)</title><rect x="21.9203%" y="69" width="0.2240%" height="15" fill="rgb(225,111,53)"/><text x="22.1703%" y="79.50"></text></g><g><title>coherent_trait (18,001,601 samples, 0.71%)</title><rect x="21.4840%" y="117" width="0.7080%" height="15" fill="rgb(238,160,17)"/><text x="21.7340%" y="127.50"></text></g><g><title>specialization_graph_of (17,491,236 samples, 0.69%)</title><rect x="21.5041%" y="101" width="0.6880%" height="15" fill="rgb(214,148,48)"/><text x="21.7541%" y="111.50"></text></g><g><title>coherence_checking (18,172,603 samples, 0.71%)</title><rect x="21.4827%" y="133" width="0.7147%" height="15" fill="rgb(232,36,49)"/><text x="21.7327%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,932,192 samples, 0.12%)</title><rect x="26.8537%" y="69" width="0.1153%" height="15" fill="rgb(209,103,24)"/><text x="27.1037%" y="79.50"></text></g><g><title>dropck_outlives (4,008,017 samples, 0.16%)</title><rect x="26.8165%" y="85" width="0.1576%" height="15" fill="rgb(229,88,8)"/><text x="27.0665%" y="95.50"></text></g><g><title>evaluate_obligation (11,153,569 samples, 0.44%)</title><rect x="26.9741%" y="85" width="0.4387%" height="15" fill="rgb(213,181,19)"/><text x="27.2241%" y="95.50"></text></g><g><title>evaluate_obligation (2,862,310 samples, 0.11%)</title><rect x="28.9456%" y="69" width="0.1126%" height="15" fill="rgb(254,191,54)"/><text x="29.1956%" y="79.50"></text></g><g><title>typeck (39,450,449 samples, 1.55%)</title><rect x="27.6016%" y="85" width="1.5516%" height="15" fill="rgb(241,83,37)"/><text x="27.8516%" y="95.50"></text></g><g><title>item_bodies_checking (176,907,255 samples, 6.96%)</title><rect x="22.2006%" y="133" width="6.9580%" height="15" fill="rgb(233,36,39)"/><text x="22.4506%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (176,903,625 samples, 6.96%)</title><rect x="22.2007%" y="117" width="6.9578%" height="15" fill="rgb(226,3,54)"/><text x="22.4507%" y="127.50">typeck_it..</text></g><g><title>typeck (176,596,252 samples, 6.95%)</title><rect x="22.2128%" y="101" width="6.9457%" height="15" fill="rgb(245,192,40)"/><text x="22.4628%" y="111.50">typeck</text></g><g><title>evaluate_obligation (6,110,241 samples, 0.24%)</title><rect x="29.2924%" y="85" width="0.2403%" height="15" fill="rgb(238,167,29)"/><text x="29.5424%" y="95.50"></text></g><g><title>item_types_checking (9,741,928 samples, 0.38%)</title><rect x="29.1585%" y="133" width="0.3832%" height="15" fill="rgb(232,182,51)"/><text x="29.4085%" y="143.50"></text></g><g><title>check_mod_item_types (9,730,438 samples, 0.38%)</title><rect x="29.1590%" y="117" width="0.3827%" height="15" fill="rgb(231,60,39)"/><text x="29.4090%" y="127.50"></text></g><g><title>typeck (7,518,216 samples, 0.30%)</title><rect x="29.2460%" y="101" width="0.2957%" height="15" fill="rgb(208,69,12)"/><text x="29.4960%" y="111.50"></text></g><g><title>type_collecting (5,608,096 samples, 0.22%)</title><rect x="29.5419%" y="133" width="0.2206%" height="15" fill="rgb(235,93,37)"/><text x="29.7919%" y="143.50"></text></g><g><title>collect_mod_item_types (5,593,726 samples, 0.22%)</title><rect x="29.5425%" y="117" width="0.2200%" height="15" fill="rgb(213,116,39)"/><text x="29.7925%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,940,695 samples, 0.39%)</title><rect x="29.7883%" y="117" width="0.3910%" height="15" fill="rgb(222,207,29)"/><text x="30.0383%" y="127.50"></text></g><g><title>check_item_well_formed (5,347,338 samples, 0.21%)</title><rect x="30.1793%" y="117" width="0.2103%" height="15" fill="rgb(206,96,30)"/><text x="30.4293%" y="127.50"></text></g><g><title>analysis (395,355,518 samples, 15.55%)</title><rect x="14.8516%" y="165" width="15.5498%" height="15" fill="rgb(218,138,4)"/><text x="15.1016%" y="175.50">analysis</text></g><g><title>type_check_crate (226,965,519 samples, 8.93%)</title><rect x="21.4745%" y="149" width="8.9268%" height="15" fill="rgb(250,191,14)"/><text x="21.7245%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (16,226,824 samples, 0.64%)</title><rect x="29.7631%" y="133" width="0.6382%" height="15" fill="rgb(239,60,40)"/><text x="30.0131%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (7,558,298 samples, 0.30%)</title><rect x="42.0763%" y="133" width="0.2973%" height="15" fill="rgb(206,27,48)"/><text x="42.3263%" y="143.50"></text></g><g><title>const_caller_location (6,850,098 samples, 0.27%)</title><rect x="42.3736%" y="133" width="0.2694%" height="15" fill="rgb(225,35,8)"/><text x="42.6236%" y="143.50"></text></g><g><title>layout_of (4,732,314 samples, 0.19%)</title><rect x="43.2540%" y="117" width="0.1861%" height="15" fill="rgb(250,213,24)"/><text x="43.5040%" y="127.50"></text></g><g><title>predicates_of (3,543,934 samples, 0.14%)</title><rect x="43.7699%" y="101" width="0.1394%" height="15" fill="rgb(247,123,22)"/><text x="44.0199%" y="111.50"></text></g><g><title>predicates_defined_on (2,592,905 samples, 0.10%)</title><rect x="43.8073%" y="85" width="0.1020%" height="15" fill="rgb(231,138,38)"/><text x="44.0573%" y="95.50"></text></g><g><title>param_env (11,943,410 samples, 0.47%)</title><rect x="43.4402%" y="117" width="0.4697%" height="15" fill="rgb(231,145,46)"/><text x="43.6902%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,240,582 samples, 0.17%)</title><rect x="43.9099%" y="117" width="0.1668%" height="15" fill="rgb(251,118,11)"/><text x="44.1599%" y="127.50"></text></g><g><title>normalize_projection_ty (3,244,824 samples, 0.13%)</title><rect x="43.9491%" y="101" width="0.1276%" height="15" fill="rgb(217,147,25)"/><text x="44.1991%" y="111.50"></text></g><g><title>fn_abi_of_instance (36,521,189 samples, 1.44%)</title><rect x="42.6460%" y="133" width="1.4364%" height="15" fill="rgb(247,81,37)"/><text x="42.8960%" y="143.50"></text></g><g><title>layout_of (5,031,363 samples, 0.20%)</title><rect x="44.1426%" y="133" width="0.1979%" height="15" fill="rgb(209,12,38)"/><text x="44.3926%" y="143.50"></text></g><g><title>symbol_name (3,729,122 samples, 0.15%)</title><rect x="44.3426%" y="133" width="0.1467%" height="15" fill="rgb(227,1,9)"/><text x="44.5926%" y="143.50"></text></g><g><title>codegen_module (355,175,214 samples, 13.97%)</title><rect x="30.5471%" y="149" width="13.9694%" height="15" fill="rgb(248,47,43)"/><text x="30.7971%" y="159.50">codegen_module</text></g><g><title>codegen_crate (358,961,050 samples, 14.12%)</title><rect x="30.4018%" y="165" width="14.1183%" height="15" fill="rgb(221,10,30)"/><text x="30.6518%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,093,217,266 samples, 43.00%)</title><rect x="44.5297%" y="149" width="42.9975%" height="15" fill="rgb(210,229,1)"/><text x="44.7797%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,032,545,452 samples, 40.61%)</title><rect x="46.9160%" y="133" width="40.6112%" height="15" fill="rgb(222,148,37)"/><text x="47.1660%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,150,723,760 samples, 45.26%)</title><rect x="44.5201%" y="165" width="45.2593%" height="15" fill="rgb(234,67,33)"/><text x="44.7701%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (57,261,297 samples, 2.25%)</title><rect x="87.5272%" y="149" width="2.2522%" height="15" fill="rgb(247,98,35)"/><text x="87.7772%" y="159.50">L..</text></g><g><title>macro_expand_crate (41,965,383 samples, 1.65%)</title><rect x="89.8182%" y="149" width="1.6505%" height="15" fill="rgb(247,138,52)"/><text x="90.0682%" y="159.50"></text></g><g><title>expand_crate (41,945,123 samples, 1.65%)</title><rect x="89.8190%" y="133" width="1.6497%" height="15" fill="rgb(213,79,30)"/><text x="90.0690%" y="143.50"></text></g><g><title>late_resolve_crate (6,617,127 samples, 0.26%)</title><rect x="91.5026%" y="133" width="0.2603%" height="15" fill="rgb(246,177,23)"/><text x="91.7526%" y="143.50"></text></g><g><title>configure_and_expand (50,975,604 samples, 2.00%)</title><rect x="89.7794%" y="165" width="2.0049%" height="15" fill="rgb(230,62,27)"/><text x="90.0294%" y="175.50">c..</text></g><g><title>resolve_crate (7,508,775 samples, 0.30%)</title><rect x="91.4890%" y="149" width="0.2953%" height="15" fill="rgb(216,154,8)"/><text x="91.7390%" y="159.50"></text></g><g><title>free_global_ctxt (12,681,027 samples, 0.50%)</title><rect x="91.8952%" y="165" width="0.4988%" height="15" fill="rgb(244,35,45)"/><text x="92.1452%" y="175.50"></text></g><g><title>codegen_fn_attrs (4,747,822 samples, 0.19%)</title><rect x="93.0313%" y="85" width="0.1867%" height="15" fill="rgb(251,115,12)"/><text x="93.2813%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,272,549 samples, 0.25%)</title><rect x="94.0278%" y="69" width="0.2467%" height="15" fill="rgb(240,54,50)"/><text x="94.2778%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (22,272,800 samples, 0.88%)</title><rect x="94.2745%" y="69" width="0.8760%" height="15" fill="rgb(233,84,52)"/><text x="94.5245%" y="79.50"></text></g><g><title>optimized_mir (47,966,536 samples, 1.89%)</title><rect x="93.3349%" y="85" width="1.8866%" height="15" fill="rgb(207,117,47)"/><text x="93.5849%" y="95.50">o..</text></g><g><title>codegen_fulfill_obligation (11,226,897 samples, 0.44%)</title><rect x="95.3836%" y="69" width="0.4416%" height="15" fill="rgb(249,43,39)"/><text x="95.6336%" y="79.50"></text></g><g><title>specialization_graph_of (6,922,988 samples, 0.27%)</title><rect x="95.9631%" y="69" width="0.2723%" height="15" fill="rgb(209,38,44)"/><text x="96.2131%" y="79.50"></text></g><g><title>impl_trait_ref (2,614,302 samples, 0.10%)</title><rect x="96.1326%" y="53" width="0.1028%" height="15" fill="rgb(236,212,23)"/><text x="96.3826%" y="63.50"></text></g><g><title>resolve_instance (26,735,957 samples, 1.05%)</title><rect x="95.2215%" y="85" width="1.0516%" height="15" fill="rgb(242,79,21)"/><text x="95.4715%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,756,825 samples, 0.11%)</title><rect x="96.3262%" y="85" width="0.1084%" height="15" fill="rgb(211,96,35)"/><text x="96.5762%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (3,812,651 samples, 0.15%)</title><rect x="96.4358%" y="85" width="0.1500%" height="15" fill="rgb(253,215,40)"/><text x="96.6858%" y="95.50"></text></g><g><title>upstream_monomorphizations (3,708,057 samples, 0.15%)</title><rect x="96.4399%" y="69" width="0.1458%" height="15" fill="rgb(211,81,21)"/><text x="96.6899%" y="79.50"></text></g><g><title>exported_symbols (3,127,312 samples, 0.12%)</title><rect x="96.4628%" y="53" width="0.1230%" height="15" fill="rgb(208,190,38)"/><text x="96.7128%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,121,302 samples, 0.12%)</title><rect x="96.4630%" y="37" width="0.1228%" height="15" fill="rgb(235,213,38)"/><text x="96.7130%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (103,544,145 samples, 4.07%)</title><rect x="92.5808%" y="101" width="4.0725%" height="15" fill="rgb(237,122,38)"/><text x="92.8308%" y="111.50">mono..</text></g><g><title>monomorphization_collector (103,723,626 samples, 4.08%)</title><rect x="92.5806%" y="117" width="4.0796%" height="15" fill="rgb(244,218,35)"/><text x="92.8306%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (8,377,664 samples, 0.33%)</title><rect x="96.6606%" y="101" width="0.3295%" height="15" fill="rgb(240,68,47)"/><text x="96.9106%" y="111.50"></text></g><g><title>symbol_name (7,565,194 samples, 0.30%)</title><rect x="96.6925%" y="85" width="0.2975%" height="15" fill="rgb(210,16,53)"/><text x="96.9425%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (115,728,917 samples, 4.55%)</title><rect x="92.5780%" y="133" width="4.5518%" height="15" fill="rgb(235,124,12)"/><text x="92.8280%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (11,938,810 samples, 0.47%)</title><rect x="96.6602%" y="117" width="0.4696%" height="15" fill="rgb(224,169,11)"/><text x="96.9102%" y="127.50"></text></g><g><title>cgu_partitioning (3,551,746 samples, 0.14%)</title><rect x="96.9901%" y="101" width="0.1397%" height="15" fill="rgb(250,166,2)"/><text x="97.2401%" y="111.50"></text></g><g><title>exported_symbols (116,341,133 samples, 4.58%)</title><rect x="92.5636%" y="149" width="4.5758%" height="15" fill="rgb(242,216,29)"/><text x="92.8136%" y="159.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,290,761 samples, 0.21%)</title><rect x="97.3495%" y="133" width="0.2081%" height="15" fill="rgb(230,116,27)"/><text x="97.5995%" y="143.50"></text></g><g><title>optimized_mir (10,814,531 samples, 0.43%)</title><rect x="97.1477%" y="149" width="0.4253%" height="15" fill="rgb(228,99,48)"/><text x="97.3977%" y="159.50"></text></g><g><title>generate_crate_metadata (131,914,230 samples, 5.19%)</title><rect x="92.3939%" y="165" width="5.1883%" height="15" fill="rgb(253,11,6)"/><text x="92.6439%" y="175.50">genera..</text></g><g><title>hir_lowering (12,973,751 samples, 0.51%)</title><rect x="97.5822%" y="165" width="0.5103%" height="15" fill="rgb(247,143,39)"/><text x="97.8322%" y="175.50"></text></g><g><title>finish_ongoing_codegen (25,379,047 samples, 1.00%)</title><rect x="98.0936%" y="149" width="0.9982%" height="15" fill="rgb(236,97,10)"/><text x="98.3436%" y="159.50"></text></g><g><title>link_crate (6,818,119 samples, 0.27%)</title><rect x="99.0918%" y="149" width="0.2682%" height="15" fill="rgb(233,208,19)"/><text x="99.3418%" y="159.50"></text></g><g><title>link_binary (6,722,718 samples, 0.26%)</title><rect x="99.0956%" y="133" width="0.2644%" height="15" fill="rgb(216,164,2)"/><text x="99.3456%" y="143.50"></text></g><g><title>link_rlib (5,415,945 samples, 0.21%)</title><rect x="99.1469%" y="117" width="0.2130%" height="15" fill="rgb(220,129,5)"/><text x="99.3969%" y="127.50"></text></g><g><title>link (32,240,716 samples, 1.27%)</title><rect x="98.0925%" y="165" width="1.2681%" height="15" fill="rgb(242,17,10)"/><text x="98.3425%" y="175.50"></text></g><g><title>parse_crate (8,812,319 samples, 0.35%)</title><rect x="99.3606%" y="165" width="0.3466%" height="15" fill="rgb(242,107,0)"/><text x="99.6106%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (6,524,367 samples, 0.26%)</title><rect x="99.7169%" y="165" width="0.2566%" height="15" fill="rgb(251,28,31)"/><text x="99.9669%" y="175.50"></text></g><g><title>all (2,542,514,738 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,542,514,738 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>