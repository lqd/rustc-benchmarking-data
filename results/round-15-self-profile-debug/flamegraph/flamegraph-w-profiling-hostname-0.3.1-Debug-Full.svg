<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (47,029,104 samples, 13.49%)</title><rect x="0.2953%" y="229" width="13.4896%" height="15" fill="rgb(227,0,7)"/><text x="0.5453%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (517,686 samples, 0.15%)</title><rect x="14.6703%" y="117" width="0.1485%" height="15" fill="rgb(217,0,24)"/><text x="14.9203%" y="127.50"></text></g><g><title>specialization_graph_of (1,823,349 samples, 0.52%)</title><rect x="14.8644%" y="101" width="0.5230%" height="15" fill="rgb(221,193,54)"/><text x="15.1144%" y="111.50"></text></g><g><title>impl_trait_ref (1,044,480 samples, 0.30%)</title><rect x="15.0878%" y="85" width="0.2996%" height="15" fill="rgb(248,212,6)"/><text x="15.3378%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (923,738 samples, 0.26%)</title><rect x="15.1224%" y="69" width="0.2650%" height="15" fill="rgb(208,68,35)"/><text x="15.3724%" y="79.50"></text></g><g><title>resolve_instance (2,017,100 samples, 0.58%)</title><rect x="14.8188%" y="117" width="0.5786%" height="15" fill="rgb(232,128,0)"/><text x="15.0688%" y="127.50"></text></g><g><title>mir_const (3,893,439 samples, 1.12%)</title><rect x="14.3386%" y="165" width="1.1168%" height="15" fill="rgb(207,160,47)"/><text x="14.5886%" y="175.50"></text></g><g><title>unsafety_check_result (3,495,744 samples, 1.00%)</title><rect x="14.4527%" y="149" width="1.0027%" height="15" fill="rgb(228,23,34)"/><text x="14.7027%" y="159.50"></text></g><g><title>mir_built (3,221,411 samples, 0.92%)</title><rect x="14.5314%" y="133" width="0.9240%" height="15" fill="rgb(218,30,26)"/><text x="14.7814%" y="143.50"></text></g><g><title>mir_promoted (4,096,502 samples, 1.18%)</title><rect x="14.2840%" y="181" width="1.1750%" height="15" fill="rgb(220,122,19)"/><text x="14.5340%" y="191.50"></text></g><g><title>MIR_borrow_checking (6,064,521 samples, 1.74%)</title><rect x="13.8273%" y="213" width="1.7395%" height="15" fill="rgb(250,228,42)"/><text x="14.0773%" y="223.50"></text></g><g><title>mir_borrowck (6,047,870 samples, 1.73%)</title><rect x="13.8321%" y="197" width="1.7347%" height="15" fill="rgb(240,193,28)"/><text x="14.0821%" y="207.50"></text></g><g><title>misc_checking_1 (662,057 samples, 0.19%)</title><rect x="15.6055%" y="213" width="0.1899%" height="15" fill="rgb(216,20,37)"/><text x="15.8555%" y="223.50"></text></g><g><title>misc_checking_2 (356,484 samples, 0.10%)</title><rect x="15.7954%" y="213" width="0.1023%" height="15" fill="rgb(206,188,39)"/><text x="16.0454%" y="223.50"></text></g><g><title>associated_items (466,185 samples, 0.13%)</title><rect x="16.4960%" y="149" width="0.1337%" height="15" fill="rgb(217,207,13)"/><text x="16.7460%" y="159.50"></text></g><g><title>impl_trait_ref (627,137 samples, 0.18%)</title><rect x="16.7765%" y="53" width="0.1799%" height="15" fill="rgb(231,73,38)"/><text x="17.0265%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (568,817 samples, 0.16%)</title><rect x="16.7932%" y="37" width="0.1632%" height="15" fill="rgb(225,20,46)"/><text x="17.0432%" y="47.50"></text></g><g><title>coherent_trait (1,061,481 samples, 0.30%)</title><rect x="16.6700%" y="85" width="0.3045%" height="15" fill="rgb(210,31,41)"/><text x="16.9200%" y="95.50"></text></g><g><title>specialization_graph_of (1,054,281 samples, 0.30%)</title><rect x="16.6721%" y="69" width="0.3024%" height="15" fill="rgb(221,200,47)"/><text x="16.9221%" y="79.50"></text></g><g><title>adt_destructor (1,086,471 samples, 0.31%)</title><rect x="16.6652%" y="117" width="0.3116%" height="15" fill="rgb(226,26,5)"/><text x="16.9152%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,083,501 samples, 0.31%)</title><rect x="16.6661%" y="101" width="0.3108%" height="15" fill="rgb(249,33,26)"/><text x="16.9161%" y="111.50"></text></g><g><title>dropck_outlives (1,515,915 samples, 0.43%)</title><rect x="16.6325%" y="149" width="0.4348%" height="15" fill="rgb(235,183,28)"/><text x="16.8825%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,446,125 samples, 0.41%)</title><rect x="16.6525%" y="133" width="0.4148%" height="15" fill="rgb(221,5,38)"/><text x="16.9025%" y="143.50"></text></g><g><title>evaluate_obligation (950,840 samples, 0.27%)</title><rect x="17.0673%" y="149" width="0.2727%" height="15" fill="rgb(247,18,42)"/><text x="17.3173%" y="159.50"></text></g><g><title>trait_impls_of (669,707 samples, 0.19%)</title><rect x="17.1479%" y="133" width="0.1921%" height="15" fill="rgb(241,131,45)"/><text x="17.3979%" y="143.50"></text></g><g><title>associated_item (371,835 samples, 0.11%)</title><rect x="18.1387%" y="117" width="0.1067%" height="15" fill="rgb(249,31,29)"/><text x="18.3887%" y="127.50"></text></g><g><title>associated_items (526,735 samples, 0.15%)</title><rect x="18.1036%" y="133" width="0.1511%" height="15" fill="rgb(225,111,53)"/><text x="18.3536%" y="143.50"></text></g><g><title>evaluate_obligation (683,726 samples, 0.20%)</title><rect x="18.3044%" y="133" width="0.1961%" height="15" fill="rgb(238,160,17)"/><text x="18.5544%" y="143.50"></text></g><g><title>is_copy_raw (561,444 samples, 0.16%)</title><rect x="18.5609%" y="133" width="0.1610%" height="15" fill="rgb(214,148,48)"/><text x="18.8109%" y="143.50"></text></g><g><title>evaluate_obligation (539,304 samples, 0.15%)</title><rect x="18.5673%" y="117" width="0.1547%" height="15" fill="rgb(232,36,49)"/><text x="18.8173%" y="127.50"></text></g><g><title>trait_impls_of (409,654 samples, 0.12%)</title><rect x="18.6045%" y="101" width="0.1175%" height="15" fill="rgb(209,103,24)"/><text x="18.8545%" y="111.50"></text></g><g><title>typeck (4,566,906 samples, 1.31%)</title><rect x="17.5504%" y="149" width="1.3099%" height="15" fill="rgb(229,88,8)"/><text x="17.8004%" y="159.50"></text></g><g><title>item_bodies_checking (9,933,720 samples, 2.85%)</title><rect x="16.0209%" y="197" width="2.8493%" height="15" fill="rgb(213,181,19)"/><text x="16.2709%" y="207.50">it..</text></g><g><title>typeck_item_bodies (9,930,040 samples, 2.85%)</title><rect x="16.0219%" y="181" width="2.8483%" height="15" fill="rgb(254,191,54)"/><text x="16.2719%" y="191.50">ty..</text></g><g><title>typeck (9,915,930 samples, 2.84%)</title><rect x="16.0260%" y="165" width="2.8442%" height="15" fill="rgb(241,83,37)"/><text x="16.2760%" y="175.50">ty..</text></g><g><title>type_collecting (459,115 samples, 0.13%)</title><rect x="18.8728%" y="197" width="0.1317%" height="15" fill="rgb(233,36,39)"/><text x="19.1228%" y="207.50"></text></g><g><title>collect_mod_item_types (446,375 samples, 0.13%)</title><rect x="18.8765%" y="181" width="0.1280%" height="15" fill="rgb(226,3,54)"/><text x="19.1265%" y="191.50"></text></g><g><title>adt_sized_constraint (416,165 samples, 0.12%)</title><rect x="19.1871%" y="149" width="0.1194%" height="15" fill="rgb(245,192,40)"/><text x="19.4371%" y="159.50"></text></g><g><title>evaluate_obligation (665,357 samples, 0.19%)</title><rect x="19.1386%" y="165" width="0.1908%" height="15" fill="rgb(238,167,29)"/><text x="19.3886%" y="175.50"></text></g><g><title>analysis (19,815,730 samples, 5.68%)</title><rect x="13.7848%" y="229" width="5.6838%" height="15" fill="rgb(232,182,51)"/><text x="14.0348%" y="239.50">analysis</text></g><g><title>type_check_crate (12,102,332 samples, 3.47%)</title><rect x="15.9973%" y="213" width="3.4714%" height="15" fill="rgb(231,60,39)"/><text x="16.2473%" y="223.50">typ..</text></g><g><title>wf_checking (1,616,417 samples, 0.46%)</title><rect x="19.0050%" y="197" width="0.4636%" height="15" fill="rgb(208,69,12)"/><text x="19.2550%" y="207.50"></text></g><g><title>check_item_well_formed (1,580,217 samples, 0.45%)</title><rect x="19.0154%" y="181" width="0.4533%" height="15" fill="rgb(235,93,37)"/><text x="19.2654%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (456,385 samples, 0.13%)</title><rect x="28.1753%" y="197" width="0.1309%" height="15" fill="rgb(213,116,39)"/><text x="28.4253%" y="207.50"></text></g><g><title>const_caller_location (452,106 samples, 0.13%)</title><rect x="28.3062%" y="197" width="0.1297%" height="15" fill="rgb(222,207,29)"/><text x="28.5562%" y="207.50"></text></g><g><title>layout_of (1,082,830 samples, 0.31%)</title><rect x="28.9045%" y="181" width="0.3106%" height="15" fill="rgb(206,96,30)"/><text x="29.1545%" y="191.50"></text></g><g><title>predicates_of (1,007,586 samples, 0.29%)</title><rect x="29.6738%" y="165" width="0.2890%" height="15" fill="rgb(218,138,4)"/><text x="29.9238%" y="175.50"></text></g><g><title>predicates_defined_on (804,554 samples, 0.23%)</title><rect x="29.7320%" y="149" width="0.2308%" height="15" fill="rgb(250,191,14)"/><text x="29.9820%" y="159.50"></text></g><g><title>param_env (2,612,167 samples, 0.75%)</title><rect x="29.2151%" y="181" width="0.7493%" height="15" fill="rgb(239,60,40)"/><text x="29.4651%" y="191.50"></text></g><g><title>fn_abi_of_instance (5,583,022 samples, 1.60%)</title><rect x="28.4373%" y="197" width="1.6014%" height="15" fill="rgb(206,27,48)"/><text x="28.6873%" y="207.50"></text></g><g><title>layout_of (895,525 samples, 0.26%)</title><rect x="30.1366%" y="197" width="0.2569%" height="15" fill="rgb(225,35,8)"/><text x="30.3866%" y="207.50"></text></g><g><title>codegen_module (36,035,416 samples, 10.34%)</title><rect x="20.0858%" y="213" width="10.3362%" height="15" fill="rgb(250,213,24)"/><text x="20.3358%" y="223.50">codegen_module</text></g><g><title>codegen_crate (38,266,777 samples, 10.98%)</title><rect x="19.4715%" y="229" width="10.9762%" height="15" fill="rgb(247,123,22)"/><text x="19.7215%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (170,083,038 samples, 48.79%)</title><rect x="30.5041%" y="213" width="48.7856%" height="15" fill="rgb(231,138,38)"/><text x="30.7541%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (161,923,988 samples, 46.45%)</title><rect x="32.8444%" y="197" width="46.4453%" height="15" fill="rgb(231,145,46)"/><text x="33.0944%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (180,193,534 samples, 51.69%)</title><rect x="30.4477%" y="229" width="51.6857%" height="15" fill="rgb(251,118,11)"/><text x="30.6977%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,913,943 samples, 2.84%)</title><rect x="79.2897%" y="213" width="2.8437%" height="15" fill="rgb(217,147,25)"/><text x="79.5397%" y="223.50">LL..</text></g><g><title>metadata_register_crate (2,689,127 samples, 0.77%)</title><rect x="85.8127%" y="181" width="0.7713%" height="15" fill="rgb(247,81,37)"/><text x="86.0627%" y="191.50"></text></g><g><title>metadata_register_crate (966,259 samples, 0.28%)</title><rect x="86.3069%" y="165" width="0.2772%" height="15" fill="rgb(209,12,38)"/><text x="86.5569%" y="175.50"></text></g><g><title>macro_expand_crate (15,101,762 samples, 4.33%)</title><rect x="82.2734%" y="213" width="4.3317%" height="15" fill="rgb(227,1,9)"/><text x="82.5234%" y="223.50">macro..</text></g><g><title>expand_crate (15,084,522 samples, 4.33%)</title><rect x="82.2784%" y="197" width="4.3268%" height="15" fill="rgb(248,47,43)"/><text x="82.5284%" y="207.50">expan..</text></g><g><title>finalize_macro_resolutions (507,915 samples, 0.15%)</title><rect x="86.6642%" y="197" width="0.1457%" height="15" fill="rgb(221,10,30)"/><text x="86.9142%" y="207.50"></text></g><g><title>late_resolve_crate (8,363,014 samples, 2.40%)</title><rect x="86.8099%" y="197" width="2.3988%" height="15" fill="rgb(210,229,1)"/><text x="87.0599%" y="207.50">la..</text></g><g><title>configure_and_expand (24,712,329 samples, 7.09%)</title><rect x="82.1334%" y="229" width="7.0883%" height="15" fill="rgb(222,148,37)"/><text x="82.3834%" y="239.50">configure_..</text></g><g><title>resolve_crate (8,977,561 samples, 2.58%)</title><rect x="86.6466%" y="213" width="2.5751%" height="15" fill="rgb(234,67,33)"/><text x="86.8966%" y="223.50">re..</text></g><g><title>free_global_ctxt (3,754,158 samples, 1.08%)</title><rect x="89.2992%" y="229" width="1.0768%" height="15" fill="rgb(247,98,35)"/><text x="89.5492%" y="239.50"></text></g><g><title>item_attrs (928,976 samples, 0.27%)</title><rect x="90.8654%" y="133" width="0.2665%" height="15" fill="rgb(247,138,52)"/><text x="91.1154%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (895,825 samples, 0.26%)</title><rect x="90.8750%" y="117" width="0.2570%" height="15" fill="rgb(213,79,30)"/><text x="91.1250%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,492,152 samples, 0.43%)</title><rect x="90.8040%" y="149" width="0.4280%" height="15" fill="rgb(246,177,23)"/><text x="91.0540%" y="159.50"></text></g><g><title>should_inherit_track_caller (349,064 samples, 0.10%)</title><rect x="91.1319%" y="133" width="0.1001%" height="15" fill="rgb(230,62,27)"/><text x="91.3819%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,418,310 samples, 0.41%)</title><rect x="91.5510%" y="133" width="0.4068%" height="15" fill="rgb(216,154,8)"/><text x="91.8010%" y="143.50"></text></g><g><title>optimized_mir (2,268,269 samples, 0.65%)</title><rect x="91.3814%" y="149" width="0.6506%" height="15" fill="rgb(244,35,45)"/><text x="91.6314%" y="159.50"></text></g><g><title>evaluate_obligation (432,014 samples, 0.12%)</title><rect x="92.4083%" y="117" width="0.1239%" height="15" fill="rgb(251,115,12)"/><text x="92.6583%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,725,882 samples, 0.50%)</title><rect x="92.1808%" y="133" width="0.4950%" height="15" fill="rgb(240,54,50)"/><text x="92.4308%" y="143.50"></text></g><g><title>fn_sig (353,484 samples, 0.10%)</title><rect x="92.6759%" y="133" width="0.1014%" height="15" fill="rgb(233,84,52)"/><text x="92.9259%" y="143.50"></text></g><g><title>impl_parent (1,196,043 samples, 0.34%)</title><rect x="93.4014%" y="117" width="0.3431%" height="15" fill="rgb(207,117,47)"/><text x="93.6514%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (747,799 samples, 0.21%)</title><rect x="93.5300%" y="101" width="0.2145%" height="15" fill="rgb(249,43,39)"/><text x="93.7800%" y="111.50"></text></g><g><title>specialization_graph_of (6,156,381 samples, 1.77%)</title><rect x="92.8979%" y="133" width="1.7659%" height="15" fill="rgb(209,38,44)"/><text x="93.1479%" y="143.50"></text></g><g><title>impl_trait_ref (3,204,826 samples, 0.92%)</title><rect x="93.7445%" y="117" width="0.9193%" height="15" fill="rgb(236,212,23)"/><text x="93.9945%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,771,019 samples, 0.79%)</title><rect x="93.8689%" y="101" width="0.7948%" height="15" fill="rgb(242,79,21)"/><text x="94.1189%" y="111.50"></text></g><g><title>resolve_instance (9,455,699 samples, 2.71%)</title><rect x="92.0320%" y="149" width="2.7122%" height="15" fill="rgb(211,96,35)"/><text x="92.2820%" y="159.50">re..</text></g><g><title>monomorphization_collector_graph_walk (15,263,774 samples, 4.38%)</title><rect x="90.5040%" y="165" width="4.3782%" height="15" fill="rgb(253,215,40)"/><text x="90.7540%" y="175.50">monom..</text></g><g><title>monomorphization_collector (15,279,574 samples, 4.38%)</title><rect x="90.5033%" y="181" width="4.3827%" height="15" fill="rgb(211,81,21)"/><text x="90.7533%" y="191.50">monom..</text></g><g><title>assert_symbols_are_distinct (961,440 samples, 0.28%)</title><rect x="94.8878%" y="165" width="0.2758%" height="15" fill="rgb(208,190,38)"/><text x="95.1378%" y="175.50"></text></g><g><title>symbol_name (870,119 samples, 0.25%)</title><rect x="94.9140%" y="149" width="0.2496%" height="15" fill="rgb(235,213,38)"/><text x="95.1640%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (16,802,830 samples, 4.82%)</title><rect x="90.4921%" y="197" width="4.8196%" height="15" fill="rgb(237,122,38)"/><text x="90.7421%" y="207.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (1,484,095 samples, 0.43%)</title><rect x="94.8860%" y="181" width="0.4257%" height="15" fill="rgb(244,218,35)"/><text x="95.1360%" y="191.50"></text></g><g><title>cgu_partitioning (516,345 samples, 0.15%)</title><rect x="95.1636%" y="165" width="0.1481%" height="15" fill="rgb(240,68,47)"/><text x="95.4136%" y="175.50"></text></g><g><title>exported_symbols (16,869,850 samples, 4.84%)</title><rect x="90.4776%" y="213" width="4.8388%" height="15" fill="rgb(210,16,53)"/><text x="90.7276%" y="223.50">export..</text></g><g><title>generate_crate_metadata (17,555,118 samples, 5.04%)</title><rect x="90.3760%" y="229" width="5.0354%" height="15" fill="rgb(235,124,12)"/><text x="90.6260%" y="239.50">genera..</text></g><g><title>hir_lowering (685,747 samples, 0.20%)</title><rect x="95.4114%" y="229" width="0.1967%" height="15" fill="rgb(224,169,11)"/><text x="95.6614%" y="239.50"></text></g><g><title>finish_ongoing_codegen (11,512,306 samples, 3.30%)</title><rect x="95.6123%" y="213" width="3.3021%" height="15" fill="rgb(250,166,2)"/><text x="95.8623%" y="223.50">fin..</text></g><g><title>link_crate (1,667,927 samples, 0.48%)</title><rect x="98.9145%" y="213" width="0.4784%" height="15" fill="rgb(242,216,29)"/><text x="99.1645%" y="223.50"></text></g><g><title>link_binary (1,647,577 samples, 0.47%)</title><rect x="98.9203%" y="197" width="0.4726%" height="15" fill="rgb(230,116,27)"/><text x="99.1703%" y="207.50"></text></g><g><title>link_rlib (1,075,251 samples, 0.31%)</title><rect x="99.0845%" y="181" width="0.3084%" height="15" fill="rgb(228,99,48)"/><text x="99.3345%" y="191.50"></text></g><g><title>link (13,204,143 samples, 3.79%)</title><rect x="95.6081%" y="229" width="3.7874%" height="15" fill="rgb(253,11,6)"/><text x="95.8581%" y="239.50">link</text></g><g><title>parse_crate (688,227 samples, 0.20%)</title><rect x="99.3955%" y="229" width="0.1974%" height="15" fill="rgb(247,143,39)"/><text x="99.6455%" y="239.50"></text></g><g><title>prepare_outputs (348,714 samples, 0.10%)</title><rect x="99.5957%" y="229" width="0.1000%" height="15" fill="rgb(236,97,10)"/><text x="99.8457%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (643,457 samples, 0.18%)</title><rect x="99.6958%" y="229" width="0.1846%" height="15" fill="rgb(233,208,19)"/><text x="99.9458%" y="239.50"></text></g><g><title>all (348,633,564 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (348,633,564 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>