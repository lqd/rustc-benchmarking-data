<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,872,088 samples, 5.65%)</title><rect x="1.4534%" y="245" width="5.6494%" height="15" fill="rgb(227,0,7)"/><text x="1.7034%" y="255.50">LLVM_pa..</text></g><g><title>param_env (91,270 samples, 0.18%)</title><rect x="11.0357%" y="165" width="0.1795%" height="15" fill="rgb(217,0,24)"/><text x="11.2857%" y="175.50"></text></g><g><title>is_copy_raw (178,502 samples, 0.35%)</title><rect x="12.1090%" y="133" width="0.3511%" height="15" fill="rgb(221,193,54)"/><text x="12.3590%" y="143.50"></text></g><g><title>evaluate_obligation (164,652 samples, 0.32%)</title><rect x="12.1363%" y="117" width="0.3239%" height="15" fill="rgb(248,212,6)"/><text x="12.3863%" y="127.50"></text></g><g><title>trait_impls_of (63,530 samples, 0.12%)</title><rect x="12.3352%" y="101" width="0.1250%" height="15" fill="rgb(208,68,35)"/><text x="12.5852%" y="111.50"></text></g><g><title>explicit_predicates_of (106,211 samples, 0.21%)</title><rect x="12.6432%" y="53" width="0.2089%" height="15" fill="rgb(232,128,0)"/><text x="12.8932%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (105,391 samples, 0.21%)</title><rect x="12.6448%" y="37" width="0.2073%" height="15" fill="rgb(207,160,47)"/><text x="12.8948%" y="47.50"></text></g><g><title>needs_drop_raw (200,913 samples, 0.40%)</title><rect x="12.4601%" y="133" width="0.3952%" height="15" fill="rgb(228,23,34)"/><text x="12.7101%" y="143.50"></text></g><g><title>is_copy_raw (194,733 samples, 0.38%)</title><rect x="12.4723%" y="117" width="0.3830%" height="15" fill="rgb(218,30,26)"/><text x="12.7223%" y="127.50"></text></g><g><title>evaluate_obligation (182,923 samples, 0.36%)</title><rect x="12.4955%" y="101" width="0.3598%" height="15" fill="rgb(220,122,19)"/><text x="12.7455%" y="111.50"></text></g><g><title>predicates_of (115,301 samples, 0.23%)</title><rect x="12.6285%" y="85" width="0.2268%" height="15" fill="rgb(250,228,42)"/><text x="12.8785%" y="95.50"></text></g><g><title>predicates_defined_on (110,951 samples, 0.22%)</title><rect x="12.6371%" y="69" width="0.2182%" height="15" fill="rgb(240,193,28)"/><text x="12.8871%" y="79.50"></text></g><g><title>specialization_graph_of (76,920 samples, 0.15%)</title><rect x="13.0847%" y="117" width="0.1513%" height="15" fill="rgb(216,20,37)"/><text x="13.3347%" y="127.50"></text></g><g><title>resolve_instance (207,132 samples, 0.41%)</title><rect x="12.8553%" y="133" width="0.4074%" height="15" fill="rgb(206,188,39)"/><text x="13.1053%" y="143.50"></text></g><g><title>thir_body (106,601 samples, 0.21%)</title><rect x="13.2717%" y="133" width="0.2097%" height="15" fill="rgb(217,207,13)"/><text x="13.5217%" y="143.50"></text></g><g><title>mir_const (1,451,145 samples, 2.85%)</title><rect x="10.6323%" y="181" width="2.8544%" height="15" fill="rgb(231,73,38)"/><text x="10.8823%" y="191.50">mi..</text></g><g><title>unsafety_check_result (1,154,823 samples, 2.27%)</title><rect x="11.2152%" y="165" width="2.2715%" height="15" fill="rgb(225,20,46)"/><text x="11.4652%" y="175.50">u..</text></g><g><title>mir_built (998,019 samples, 1.96%)</title><rect x="11.5236%" y="149" width="1.9631%" height="15" fill="rgb(210,31,41)"/><text x="11.7736%" y="159.50">m..</text></g><g><title>mir_promoted (1,651,647 samples, 3.25%)</title><rect x="10.2623%" y="197" width="3.2488%" height="15" fill="rgb(221,200,47)"/><text x="10.5123%" y="207.50">mir..</text></g><g><title>type_op_ascribe_user_type (53,921 samples, 0.11%)</title><rect x="13.5111%" y="197" width="0.1061%" height="15" fill="rgb(226,26,5)"/><text x="13.7611%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (75,781 samples, 0.15%)</title><rect x="13.6172%" y="197" width="0.1491%" height="15" fill="rgb(249,33,26)"/><text x="13.8672%" y="207.50"></text></g><g><title>MIR_borrow_checking (3,368,704 samples, 6.63%)</title><rect x="7.4469%" y="229" width="6.6262%" height="15" fill="rgb(235,183,28)"/><text x="7.6969%" y="239.50">MIR_borro..</text></g><g><title>mir_borrowck (3,346,844 samples, 6.58%)</title><rect x="7.4899%" y="213" width="6.5832%" height="15" fill="rgb(221,5,38)"/><text x="7.7399%" y="223.50">mir_borro..</text></g><g><title>type_op_prove_predicate (156,010 samples, 0.31%)</title><rect x="13.7662%" y="197" width="0.3069%" height="15" fill="rgb(247,18,42)"/><text x="14.0162%" y="207.50"></text></g><g><title>hir_module_items (156,351 samples, 0.31%)</title><rect x="14.0919%" y="229" width="0.3075%" height="15" fill="rgb(241,131,45)"/><text x="14.3419%" y="239.50"></text></g><g><title>get_lang_items (57,001 samples, 0.11%)</title><rect x="14.9120%" y="181" width="0.1121%" height="15" fill="rgb(249,31,29)"/><text x="15.1620%" y="191.50"></text></g><g><title>associated_item (53,461 samples, 0.11%)</title><rect x="15.0614%" y="165" width="0.1052%" height="15" fill="rgb(225,111,53)"/><text x="15.3114%" y="175.50"></text></g><g><title>codegen_fn_attrs (53,151 samples, 0.10%)</title><rect x="15.1666%" y="165" width="0.1045%" height="15" fill="rgb(238,160,17)"/><text x="15.4166%" y="175.50"></text></g><g><title>should_inherit_track_caller (128,422 samples, 0.25%)</title><rect x="15.0241%" y="181" width="0.2526%" height="15" fill="rgb(214,148,48)"/><text x="15.2741%" y="191.50"></text></g><g><title>codegen_fn_attrs (295,313 samples, 0.58%)</title><rect x="14.7683%" y="197" width="0.5809%" height="15" fill="rgb(232,36,49)"/><text x="15.0183%" y="207.50"></text></g><g><title>check_mod_attrs (450,215 samples, 0.89%)</title><rect x="14.4645%" y="213" width="0.8856%" height="15" fill="rgb(209,103,24)"/><text x="14.7145%" y="223.50"></text></g><g><title>check_mod_const_bodies (52,141 samples, 0.10%)</title><rect x="15.3500%" y="213" width="0.1026%" height="15" fill="rgb(229,88,8)"/><text x="15.6000%" y="223.50"></text></g><g><title>lookup_deprecation_entry (101,501 samples, 0.20%)</title><rect x="15.7092%" y="197" width="0.1997%" height="15" fill="rgb(213,181,19)"/><text x="15.9592%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (265,502 samples, 0.52%)</title><rect x="15.5136%" y="213" width="0.5222%" height="15" fill="rgb(254,191,54)"/><text x="15.7636%" y="223.50"></text></g><g><title>misc_checking_1 (885,049 samples, 1.74%)</title><rect x="14.4012%" y="229" width="1.7409%" height="15" fill="rgb(241,83,37)"/><text x="14.6512%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (110,431 samples, 0.22%)</title><rect x="16.1471%" y="213" width="0.2172%" height="15" fill="rgb(233,36,39)"/><text x="16.3971%" y="223.50"></text></g><g><title>check_mod_liveness (83,171 samples, 0.16%)</title><rect x="16.2007%" y="197" width="0.1636%" height="15" fill="rgb(226,3,54)"/><text x="16.4507%" y="207.50"></text></g><g><title>misc_checking_2 (241,443 samples, 0.47%)</title><rect x="16.1421%" y="229" width="0.4749%" height="15" fill="rgb(245,192,40)"/><text x="16.3921%" y="239.50"></text></g><g><title>match_checking (128,472 samples, 0.25%)</title><rect x="16.3643%" y="213" width="0.2527%" height="15" fill="rgb(238,167,29)"/><text x="16.6143%" y="223.50"></text></g><g><title>check_match (120,502 samples, 0.24%)</title><rect x="16.3800%" y="197" width="0.2370%" height="15" fill="rgb(232,182,51)"/><text x="16.6300%" y="207.50"></text></g><g><title>check_private_in_public (97,951 samples, 0.19%)</title><rect x="16.6473%" y="213" width="0.1927%" height="15" fill="rgb(231,60,39)"/><text x="16.8973%" y="223.50"></text></g><g><title>codegen_fn_attrs (59,650 samples, 0.12%)</title><rect x="17.1471%" y="197" width="0.1173%" height="15" fill="rgb(208,69,12)"/><text x="17.3971%" y="207.50"></text></g><g><title>death_checking (333,943 samples, 0.66%)</title><rect x="16.8399%" y="213" width="0.6569%" height="15" fill="rgb(235,93,37)"/><text x="17.0899%" y="223.50"></text></g><g><title>lint_levels (108,891 samples, 0.21%)</title><rect x="17.2826%" y="197" width="0.2142%" height="15" fill="rgb(213,116,39)"/><text x="17.5326%" y="207.50"></text></g><g><title>explicit_predicates_of (51,670 samples, 0.10%)</title><rect x="19.6547%" y="133" width="0.1016%" height="15" fill="rgb(222,207,29)"/><text x="19.9047%" y="143.50"></text></g><g><title>param_env (251,021 samples, 0.49%)</title><rect x="19.2740%" y="181" width="0.4938%" height="15" fill="rgb(206,96,30)"/><text x="19.5240%" y="191.50"></text></g><g><title>predicates_of (120,260 samples, 0.24%)</title><rect x="19.5312%" y="165" width="0.2366%" height="15" fill="rgb(218,138,4)"/><text x="19.7812%" y="175.50"></text></g><g><title>predicates_defined_on (96,840 samples, 0.19%)</title><rect x="19.5773%" y="149" width="0.1905%" height="15" fill="rgb(250,191,14)"/><text x="19.8273%" y="159.50"></text></g><g><title>trait_impls_of (169,752 samples, 0.33%)</title><rect x="19.7678%" y="181" width="0.3339%" height="15" fill="rgb(239,60,40)"/><text x="20.0178%" y="191.50"></text></g><g><title>crate_lints (3,175,992 samples, 6.25%)</title><rect x="17.5034%" y="197" width="6.2472%" height="15" fill="rgb(206,27,48)"/><text x="17.7534%" y="207.50">crate_li..</text></g><g><title>type_of (1,855,049 samples, 3.65%)</title><rect x="20.1017%" y="181" width="3.6489%" height="15" fill="rgb(225,35,8)"/><text x="20.3517%" y="191.50">type..</text></g><g><title>metadata_decode_entry_type_of (1,648,715 samples, 3.24%)</title><rect x="20.5076%" y="165" width="3.2430%" height="15" fill="rgb(250,213,24)"/><text x="20.7576%" y="175.50">met..</text></g><g><title>lint_checking (3,265,433 samples, 6.42%)</title><rect x="17.4968%" y="213" width="6.4231%" height="15" fill="rgb(247,123,22)"/><text x="17.7468%" y="223.50">lint_che..</text></g><g><title>module_lints (86,081 samples, 0.17%)</title><rect x="23.7506%" y="197" width="0.1693%" height="15" fill="rgb(231,138,38)"/><text x="24.0006%" y="207.50"></text></g><g><title>lint_mod (80,901 samples, 0.16%)</title><rect x="23.7608%" y="181" width="0.1591%" height="15" fill="rgb(231,145,46)"/><text x="24.0108%" y="191.50"></text></g><g><title>privacy_access_levels (118,442 samples, 0.23%)</title><rect x="23.9199%" y="213" width="0.2330%" height="15" fill="rgb(251,118,11)"/><text x="24.1699%" y="223.50"></text></g><g><title>privacy_checking_modules (170,372 samples, 0.34%)</title><rect x="24.1529%" y="213" width="0.3351%" height="15" fill="rgb(217,147,25)"/><text x="24.4029%" y="223.50"></text></g><g><title>check_mod_privacy (167,682 samples, 0.33%)</title><rect x="24.1582%" y="197" width="0.3298%" height="15" fill="rgb(247,81,37)"/><text x="24.4082%" y="207.50"></text></g><g><title>misc_checking_3 (4,018,731 samples, 7.90%)</title><rect x="16.6170%" y="229" width="7.9048%" height="15" fill="rgb(209,12,38)"/><text x="16.8670%" y="239.50">misc_checki..</text></g><g><title>impl_trait_ref (150,232 samples, 0.30%)</title><rect x="25.0088%" y="165" width="0.2955%" height="15" fill="rgb(227,1,9)"/><text x="25.2588%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (138,062 samples, 0.27%)</title><rect x="25.0328%" y="149" width="0.2716%" height="15" fill="rgb(248,47,43)"/><text x="25.2828%" y="159.50"></text></g><g><title>coherent_trait (380,904 samples, 0.75%)</title><rect x="24.6505%" y="197" width="0.7492%" height="15" fill="rgb(221,10,30)"/><text x="24.9005%" y="207.50"></text></g><g><title>specialization_graph_of (368,154 samples, 0.72%)</title><rect x="24.6756%" y="181" width="0.7242%" height="15" fill="rgb(210,229,1)"/><text x="24.9256%" y="191.50"></text></g><g><title>coherence_checking (463,545 samples, 0.91%)</title><rect x="24.6087%" y="213" width="0.9118%" height="15" fill="rgb(222,148,37)"/><text x="24.8587%" y="223.50"></text></g><g><title>adt_sized_constraint (63,860 samples, 0.13%)</title><rect x="28.6817%" y="165" width="0.1256%" height="15" fill="rgb(234,67,33)"/><text x="28.9317%" y="175.50"></text></g><g><title>adt_sized_constraint (57,740 samples, 0.11%)</title><rect x="28.6937%" y="149" width="0.1136%" height="15" fill="rgb(247,98,35)"/><text x="28.9437%" y="159.50"></text></g><g><title>adt_def (53,390 samples, 0.11%)</title><rect x="28.7023%" y="133" width="0.1050%" height="15" fill="rgb(247,138,52)"/><text x="28.9523%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (52,570 samples, 0.10%)</title><rect x="28.7039%" y="117" width="0.1034%" height="15" fill="rgb(213,79,30)"/><text x="28.9539%" y="127.50"></text></g><g><title>dropck_outlives (59,860 samples, 0.12%)</title><rect x="28.8860%" y="165" width="0.1177%" height="15" fill="rgb(246,177,23)"/><text x="29.1360%" y="175.50"></text></g><g><title>evaluate_obligation (93,582 samples, 0.18%)</title><rect x="29.0037%" y="165" width="0.1841%" height="15" fill="rgb(230,62,27)"/><text x="29.2537%" y="175.50"></text></g><g><title>item_attrs (147,772 samples, 0.29%)</title><rect x="29.3670%" y="165" width="0.2907%" height="15" fill="rgb(216,154,8)"/><text x="29.6170%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (143,742 samples, 0.28%)</title><rect x="29.3749%" y="149" width="0.2827%" height="15" fill="rgb(244,35,45)"/><text x="29.6249%" y="159.50"></text></g><g><title>predicates_of (72,081 samples, 0.14%)</title><rect x="29.6892%" y="165" width="0.1418%" height="15" fill="rgb(251,115,12)"/><text x="29.9392%" y="175.50"></text></g><g><title>item_bodies_checking (2,204,663 samples, 4.34%)</title><rect x="25.5818%" y="213" width="4.3366%" height="15" fill="rgb(240,54,50)"/><text x="25.8318%" y="223.50">item_..</text></g><g><title>typeck_item_bodies (2,201,503 samples, 4.33%)</title><rect x="25.5880%" y="197" width="4.3303%" height="15" fill="rgb(233,84,52)"/><text x="25.8380%" y="207.50">typec..</text></g><g><title>typeck (2,185,592 samples, 4.30%)</title><rect x="25.6193%" y="181" width="4.2991%" height="15" fill="rgb(207,117,47)"/><text x="25.8693%" y="191.50">typeck</text></g><g><title>item_types_checking (287,523 samples, 0.57%)</title><rect x="29.9184%" y="213" width="0.5656%" height="15" fill="rgb(249,43,39)"/><text x="30.1684%" y="223.50"></text></g><g><title>check_mod_item_types (283,143 samples, 0.56%)</title><rect x="29.9270%" y="197" width="0.5569%" height="15" fill="rgb(209,38,44)"/><text x="30.1770%" y="207.50"></text></g><g><title>fn_sig (116,711 samples, 0.23%)</title><rect x="30.8516%" y="181" width="0.2296%" height="15" fill="rgb(236,212,23)"/><text x="31.1016%" y="191.50"></text></g><g><title>is_late_bound_map (99,461 samples, 0.20%)</title><rect x="31.2677%" y="165" width="0.1956%" height="15" fill="rgb(242,79,21)"/><text x="31.5177%" y="175.50"></text></g><g><title>resolve_lifetimes (78,791 samples, 0.15%)</title><rect x="31.3083%" y="149" width="0.1550%" height="15" fill="rgb(211,96,35)"/><text x="31.5583%" y="159.50"></text></g><g><title>named_region_map (58,901 samples, 0.12%)</title><rect x="31.4633%" y="165" width="0.1159%" height="15" fill="rgb(253,215,40)"/><text x="31.7133%" y="175.50"></text></g><g><title>resolve_lifetimes (52,371 samples, 0.10%)</title><rect x="31.4761%" y="149" width="0.1030%" height="15" fill="rgb(211,81,21)"/><text x="31.7261%" y="159.50"></text></g><g><title>generics_of (267,463 samples, 0.53%)</title><rect x="31.0811%" y="181" width="0.5261%" height="15" fill="rgb(208,190,38)"/><text x="31.3311%" y="191.50"></text></g><g><title>explicit_predicates_of (183,072 samples, 0.36%)</title><rect x="31.8073%" y="149" width="0.3601%" height="15" fill="rgb(235,213,38)"/><text x="32.0573%" y="159.50"></text></g><g><title>predicates_of (535,827 samples, 1.05%)</title><rect x="31.6572%" y="181" width="1.0540%" height="15" fill="rgb(237,122,38)"/><text x="31.9072%" y="191.50"></text></g><g><title>predicates_defined_on (505,555 samples, 0.99%)</title><rect x="31.7168%" y="165" width="0.9944%" height="15" fill="rgb(244,218,35)"/><text x="31.9668%" y="175.50"></text></g><g><title>inferred_outlives_of (276,453 samples, 0.54%)</title><rect x="32.1674%" y="149" width="0.5438%" height="15" fill="rgb(240,68,47)"/><text x="32.4174%" y="159.50"></text></g><g><title>inferred_outlives_crate (252,983 samples, 0.50%)</title><rect x="32.2136%" y="133" width="0.4976%" height="15" fill="rgb(210,16,53)"/><text x="32.4636%" y="143.50"></text></g><g><title>type_of (122,661 samples, 0.24%)</title><rect x="32.4699%" y="117" width="0.2413%" height="15" fill="rgb(235,124,12)"/><text x="32.7199%" y="127.50"></text></g><g><title>super_predicates_of (53,481 samples, 0.11%)</title><rect x="32.7112%" y="181" width="0.1052%" height="15" fill="rgb(224,169,11)"/><text x="32.9612%" y="191.50"></text></g><g><title>type_collecting (1,281,613 samples, 2.52%)</title><rect x="30.4873%" y="213" width="2.5209%" height="15" fill="rgb(250,166,2)"/><text x="30.7373%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (1,258,303 samples, 2.48%)</title><rect x="30.5332%" y="197" width="2.4751%" height="15" fill="rgb(242,216,29)"/><text x="30.7832%" y="207.50">co..</text></g><g><title>type_of (93,411 samples, 0.18%)</title><rect x="32.8245%" y="181" width="0.1837%" height="15" fill="rgb(230,116,27)"/><text x="33.0745%" y="191.50"></text></g><g><title>evaluate_obligation (86,621 samples, 0.17%)</title><rect x="33.6293%" y="181" width="0.1704%" height="15" fill="rgb(228,99,48)"/><text x="33.8793%" y="191.50"></text></g><g><title>check_impl_item_well_formed (455,504 samples, 0.90%)</title><rect x="33.1527%" y="197" width="0.8960%" height="15" fill="rgb(253,11,6)"/><text x="33.4027%" y="207.50"></text></g><g><title>adt_sized_constraint (84,231 samples, 0.17%)</title><rect x="35.7254%" y="181" width="0.1657%" height="15" fill="rgb(247,143,39)"/><text x="35.9754%" y="191.50"></text></g><g><title>adt_def (80,051 samples, 0.16%)</title><rect x="35.7336%" y="165" width="0.1575%" height="15" fill="rgb(236,97,10)"/><text x="35.9836%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (71,101 samples, 0.14%)</title><rect x="35.7512%" y="149" width="0.1399%" height="15" fill="rgb(233,208,19)"/><text x="36.0012%" y="159.50"></text></g><g><title>item_attrs (62,440 samples, 0.12%)</title><rect x="35.7683%" y="133" width="0.1228%" height="15" fill="rgb(216,164,2)"/><text x="36.0183%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,980 samples, 0.12%)</title><rect x="35.7712%" y="117" width="0.1199%" height="15" fill="rgb(220,129,5)"/><text x="36.0212%" y="127.50"></text></g><g><title>param_env (351,372 samples, 0.69%)</title><rect x="35.9793%" y="181" width="0.6911%" height="15" fill="rgb(242,17,10)"/><text x="36.2293%" y="191.50"></text></g><g><title>check_item_well_formed (1,471,026 samples, 2.89%)</title><rect x="34.0486%" y="197" width="2.8935%" height="15" fill="rgb(242,107,0)"/><text x="34.2986%" y="207.50">ch..</text></g><g><title>variances_of (93,120 samples, 0.18%)</title><rect x="36.7590%" y="181" width="0.1832%" height="15" fill="rgb(251,28,31)"/><text x="37.0090%" y="191.50"></text></g><g><title>crate_variances (85,840 samples, 0.17%)</title><rect x="36.7733%" y="165" width="0.1688%" height="15" fill="rgb(233,223,10)"/><text x="37.0233%" y="175.50"></text></g><g><title>evaluate_obligation (408,444 samples, 0.80%)</title><rect x="37.5656%" y="181" width="0.8034%" height="15" fill="rgb(215,21,27)"/><text x="37.8156%" y="191.50"></text></g><g><title>implied_outlives_bounds (75,891 samples, 0.15%)</title><rect x="38.4498%" y="181" width="0.1493%" height="15" fill="rgb(232,23,21)"/><text x="38.6998%" y="191.50"></text></g><g><title>analysis (16,068,403 samples, 31.61%)</title><rect x="7.1028%" y="245" width="31.6065%" height="15" fill="rgb(244,5,23)"/><text x="7.3528%" y="255.50">analysis</text></g><g><title>type_check_crate (7,212,763 samples, 14.19%)</title><rect x="24.5218%" y="229" width="14.1875%" height="15" fill="rgb(226,81,46)"/><text x="24.7718%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,897,089 samples, 5.70%)</title><rect x="33.0107%" y="213" width="5.6986%" height="15" fill="rgb(247,70,30)"/><text x="33.2607%" y="223.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (898,409 samples, 1.77%)</title><rect x="36.9421%" y="197" width="1.7672%" height="15" fill="rgb(212,68,19)"/><text x="37.1921%" y="207.50"></text></g><g><title>codegen_module (545,875 samples, 1.07%)</title><rect x="40.2549%" y="229" width="1.0737%" height="15" fill="rgb(240,187,13)"/><text x="40.5049%" y="239.50"></text></g><g><title>codegen_crate (1,352,414 samples, 2.66%)</title><rect x="38.7321%" y="245" width="2.6602%" height="15" fill="rgb(223,113,26)"/><text x="38.9821%" y="255.50">co..</text></g><g><title>LLVM_module_codegen (2,388,004 samples, 4.70%)</title><rect x="41.4222%" y="229" width="4.6972%" height="15" fill="rgb(206,192,2)"/><text x="41.6722%" y="239.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,339,854 samples, 4.60%)</title><rect x="41.5169%" y="213" width="4.6025%" height="15" fill="rgb(241,108,4)"/><text x="41.7669%" y="223.50">LLVM_..</text></g><g><title>codegen_module_optimize (2,687,227 samples, 5.29%)</title><rect x="41.3923%" y="245" width="5.2858%" height="15" fill="rgb(247,173,49)"/><text x="41.6423%" y="255.50">codege..</text></g><g><title>LLVM_module_optimize (284,013 samples, 0.56%)</title><rect x="46.1194%" y="229" width="0.5587%" height="15" fill="rgb(224,114,35)"/><text x="46.3694%" y="239.50"></text></g><g><title>AST_validation (211,212 samples, 0.42%)</title><rect x="47.1449%" y="229" width="0.4155%" height="15" fill="rgb(245,159,27)"/><text x="47.3949%" y="239.50"></text></g><g><title>complete_gated_feature_checking (54,391 samples, 0.11%)</title><rect x="47.5603%" y="229" width="0.1070%" height="15" fill="rgb(245,172,44)"/><text x="47.8103%" y="239.50"></text></g><g><title>crate_injection (97,301 samples, 0.19%)</title><rect x="47.6673%" y="229" width="0.1914%" height="15" fill="rgb(236,23,11)"/><text x="47.9173%" y="239.50"></text></g><g><title>macro_expand_crate (15,523,178 samples, 30.53%)</title><rect x="47.8587%" y="229" width="30.5340%" height="15" fill="rgb(205,117,38)"/><text x="48.1087%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (15,495,478 samples, 30.48%)</title><rect x="47.9132%" y="213" width="30.4795%" height="15" fill="rgb(237,72,25)"/><text x="48.1632%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (7,676,008 samples, 15.10%)</title><rect x="63.2941%" y="197" width="15.0987%" height="15" fill="rgb(244,70,9)"/><text x="63.5441%" y="207.50">metadata_register_crate</text></g><g><title>pre_AST_expansion_lint_checks (178,842 samples, 0.35%)</title><rect x="78.4031%" y="229" width="0.3518%" height="15" fill="rgb(217,125,39)"/><text x="78.6531%" y="239.50"></text></g><g><title>finalize_imports (206,872 samples, 0.41%)</title><rect x="78.7719%" y="213" width="0.4069%" height="15" fill="rgb(235,36,10)"/><text x="79.0219%" y="223.50"></text></g><g><title>late_resolve_crate (1,068,431 samples, 2.10%)</title><rect x="79.2205%" y="213" width="2.1016%" height="15" fill="rgb(251,123,47)"/><text x="79.4705%" y="223.50">l..</text></g><g><title>configure_and_expand (17,691,330 samples, 34.80%)</title><rect x="46.6781%" y="245" width="34.7988%" height="15" fill="rgb(221,13,13)"/><text x="46.9281%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,383,824 samples, 2.72%)</title><rect x="78.7549%" y="229" width="2.7220%" height="15" fill="rgb(238,131,9)"/><text x="79.0049%" y="239.50">re..</text></g><g><title>drop_ast (71,141 samples, 0.14%)</title><rect x="81.4768%" y="245" width="0.1399%" height="15" fill="rgb(211,50,8)"/><text x="81.7268%" y="255.50"></text></g><g><title>early_lint_checks (211,802 samples, 0.42%)</title><rect x="81.6468%" y="245" width="0.4166%" height="15" fill="rgb(245,182,24)"/><text x="81.8968%" y="255.50"></text></g><g><title>free_global_ctxt (1,672,147 samples, 3.29%)</title><rect x="82.0634%" y="245" width="3.2891%" height="15" fill="rgb(242,14,37)"/><text x="82.3134%" y="255.50">fre..</text></g><g><title>crate_hash (134,271 samples, 0.26%)</title><rect x="86.9011%" y="229" width="0.2641%" height="15" fill="rgb(246,228,12)"/><text x="87.1511%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (80,061 samples, 0.16%)</title><rect x="87.2869%" y="213" width="0.1575%" height="15" fill="rgb(213,55,15)"/><text x="87.5369%" y="223.50"></text></g><g><title>exported_symbols (154,412 samples, 0.30%)</title><rect x="87.2367%" y="229" width="0.3037%" height="15" fill="rgb(209,9,3)"/><text x="87.4867%" y="239.50"></text></g><g><title>layout_of (123,203 samples, 0.24%)</title><rect x="88.7130%" y="213" width="0.2423%" height="15" fill="rgb(230,59,30)"/><text x="88.9630%" y="223.50"></text></g><g><title>layout_of (55,522 samples, 0.11%)</title><rect x="88.8461%" y="197" width="0.1092%" height="15" fill="rgb(209,121,21)"/><text x="89.0961%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (506,237 samples, 1.00%)</title><rect x="88.9553%" y="213" width="0.9958%" height="15" fill="rgb(220,109,13)"/><text x="89.2053%" y="223.50"></text></g><g><title>optimized_mir (1,177,393 samples, 2.32%)</title><rect x="87.7190%" y="229" width="2.3159%" height="15" fill="rgb(232,18,1)"/><text x="87.9690%" y="239.50">o..</text></g><g><title>generate_crate_metadata (2,412,595 samples, 4.75%)</title><rect x="85.3526%" y="245" width="4.7456%" height="15" fill="rgb(215,41,42)"/><text x="85.6026%" y="255.50">genera..</text></g><g><title>hir_lowering (1,044,221 samples, 2.05%)</title><rect x="90.0981%" y="245" width="2.0540%" height="15" fill="rgb(224,123,36)"/><text x="90.3481%" y="255.50">h..</text></g><g><title>finish_ongoing_codegen (398,254 samples, 0.78%)</title><rect x="92.1838%" y="229" width="0.7834%" height="15" fill="rgb(240,125,3)"/><text x="92.4338%" y="239.50"></text></g><g><title>link_crate (570,256 samples, 1.12%)</title><rect x="92.9672%" y="229" width="1.1217%" height="15" fill="rgb(205,98,50)"/><text x="93.2172%" y="239.50"></text></g><g><title>link_binary (559,106 samples, 1.10%)</title><rect x="92.9891%" y="213" width="1.0998%" height="15" fill="rgb(205,185,37)"/><text x="93.2391%" y="223.50"></text></g><g><title>link_rlib (323,613 samples, 0.64%)</title><rect x="93.4523%" y="197" width="0.6365%" height="15" fill="rgb(238,207,15)"/><text x="93.7023%" y="207.50"></text></g><g><title>link (993,160 samples, 1.95%)</title><rect x="92.1521%" y="245" width="1.9535%" height="15" fill="rgb(213,199,42)"/><text x="92.4021%" y="255.50">l..</text></g><g><title>parse_crate (1,427,015 samples, 2.81%)</title><rect x="94.1056%" y="245" width="2.8069%" height="15" fill="rgb(235,201,11)"/><text x="94.3556%" y="255.50">pa..</text></g><g><title>prepare_outputs (318,203 samples, 0.63%)</title><rect x="96.9332%" y="245" width="0.6259%" height="15" fill="rgb(207,46,11)"/><text x="97.1832%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (591,506 samples, 1.16%)</title><rect x="97.5592%" y="245" width="1.1635%" height="15" fill="rgb(241,35,35)"/><text x="97.8092%" y="255.50"></text></g><g><title>setup_global_ctxt (142,941 samples, 0.28%)</title><rect x="98.7253%" y="245" width="0.2812%" height="15" fill="rgb(243,32,47)"/><text x="98.9753%" y="255.50"></text></g><g><title>all (50,838,945 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (50,838,945 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (505,125 samples, 0.99%)</title><rect x="99.0064%" y="245" width="0.9936%" height="15" fill="rgb(243,110,44)"/><text x="99.2564%" y="255.50"></text></g></svg></svg>