<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (74,836,078 samples, 11.50%)</title><rect x="0.1080%" y="181" width="11.5015%" height="15" fill="rgb(227,0,7)"/><text x="0.3580%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,172,443 samples, 0.18%)</title><rect x="15.4995%" y="69" width="0.1802%" height="15" fill="rgb(217,0,24)"/><text x="15.7495%" y="79.50"></text></g><g><title>is_copy_raw (893,280 samples, 0.14%)</title><rect x="15.5424%" y="53" width="0.1373%" height="15" fill="rgb(221,193,54)"/><text x="15.7924%" y="63.50"></text></g><g><title>evaluate_obligation (751,489 samples, 0.12%)</title><rect x="15.5642%" y="37" width="0.1155%" height="15" fill="rgb(248,212,6)"/><text x="15.8142%" y="47.50"></text></g><g><title>resolve_instance (694,205 samples, 0.11%)</title><rect x="15.6796%" y="69" width="0.1067%" height="15" fill="rgb(208,68,35)"/><text x="15.9296%" y="79.50"></text></g><g><title>thir_body (1,645,517 samples, 0.25%)</title><rect x="15.7935%" y="69" width="0.2529%" height="15" fill="rgb(232,128,0)"/><text x="16.0435%" y="79.50"></text></g><g><title>mir_const (11,033,030 samples, 1.70%)</title><rect x="14.3557%" y="117" width="1.6957%" height="15" fill="rgb(207,160,47)"/><text x="14.6057%" y="127.50"></text></g><g><title>unsafety_check_result (9,202,387 samples, 1.41%)</title><rect x="14.6370%" y="101" width="1.4143%" height="15" fill="rgb(228,23,34)"/><text x="14.8870%" y="111.50"></text></g><g><title>mir_built (8,005,445 samples, 1.23%)</title><rect x="14.8210%" y="85" width="1.2303%" height="15" fill="rgb(218,30,26)"/><text x="15.0710%" y="95.50"></text></g><g><title>mir_promoted (12,575,865 samples, 1.93%)</title><rect x="14.1518%" y="133" width="1.9328%" height="15" fill="rgb(220,122,19)"/><text x="14.4018%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (656,673 samples, 0.10%)</title><rect x="16.0851%" y="133" width="0.1009%" height="15" fill="rgb(250,228,42)"/><text x="16.3351%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,416,723 samples, 0.22%)</title><rect x="16.2462%" y="133" width="0.2177%" height="15" fill="rgb(240,193,28)"/><text x="16.4962%" y="143.50"></text></g><g><title>MIR_borrow_checking (31,214,972 samples, 4.80%)</title><rect x="11.6687%" y="165" width="4.7974%" height="15" fill="rgb(216,20,37)"/><text x="11.9187%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (30,990,910 samples, 4.76%)</title><rect x="11.7032%" y="149" width="4.7630%" height="15" fill="rgb(206,188,39)"/><text x="11.9532%" y="159.50">mir_bo..</text></g><g><title>check_mod_attrs (854,009 samples, 0.13%)</title><rect x="16.5320%" y="149" width="0.1313%" height="15" fill="rgb(217,207,13)"/><text x="16.7820%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (726,867 samples, 0.11%)</title><rect x="16.7060%" y="149" width="0.1117%" height="15" fill="rgb(231,73,38)"/><text x="16.9560%" y="159.50"></text></g><g><title>misc_checking_1 (1,947,501 samples, 0.30%)</title><rect x="16.5281%" y="165" width="0.2993%" height="15" fill="rgb(225,20,46)"/><text x="16.7781%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (657,917 samples, 0.10%)</title><rect x="16.8276%" y="149" width="0.1011%" height="15" fill="rgb(210,31,41)"/><text x="17.0776%" y="159.50"></text></g><g><title>misc_checking_2 (1,593,657 samples, 0.24%)</title><rect x="16.8274%" y="165" width="0.2449%" height="15" fill="rgb(221,200,47)"/><text x="17.0774%" y="175.50"></text></g><g><title>match_checking (934,180 samples, 0.14%)</title><rect x="16.9287%" y="149" width="0.1436%" height="15" fill="rgb(226,26,5)"/><text x="17.1787%" y="159.50"></text></g><g><title>check_match (876,089 samples, 0.13%)</title><rect x="16.9377%" y="133" width="0.1346%" height="15" fill="rgb(249,33,26)"/><text x="17.1877%" y="143.50"></text></g><g><title>crate_lints (2,633,098 samples, 0.40%)</title><rect x="17.2074%" y="133" width="0.4047%" height="15" fill="rgb(235,183,28)"/><text x="17.4574%" y="143.50"></text></g><g><title>type_of (1,317,414 samples, 0.20%)</title><rect x="17.4096%" y="117" width="0.2025%" height="15" fill="rgb(221,5,38)"/><text x="17.6596%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (861,548 samples, 0.13%)</title><rect x="17.4797%" y="101" width="0.1324%" height="15" fill="rgb(247,18,42)"/><text x="17.7297%" y="111.50"></text></g><g><title>lint_checking (3,237,284 samples, 0.50%)</title><rect x="17.2072%" y="149" width="0.4975%" height="15" fill="rgb(241,131,45)"/><text x="17.4572%" y="159.50"></text></g><g><title>privacy_checking_modules (1,023,771 samples, 0.16%)</title><rect x="17.7664%" y="149" width="0.1573%" height="15" fill="rgb(249,31,29)"/><text x="18.0164%" y="159.50"></text></g><g><title>check_mod_privacy (1,019,751 samples, 0.16%)</title><rect x="17.7670%" y="133" width="0.1567%" height="15" fill="rgb(225,111,53)"/><text x="18.0170%" y="143.50"></text></g><g><title>misc_checking_3 (5,567,729 samples, 0.86%)</title><rect x="17.0723%" y="165" width="0.8557%" height="15" fill="rgb(238,160,17)"/><text x="17.3223%" y="175.50"></text></g><g><title>impl_parent (2,406,871 samples, 0.37%)</title><rect x="18.6462%" y="101" width="0.3699%" height="15" fill="rgb(214,148,48)"/><text x="18.8962%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,415,340 samples, 0.22%)</title><rect x="18.7986%" y="85" width="0.2175%" height="15" fill="rgb(232,36,49)"/><text x="19.0486%" y="95.50"></text></g><g><title>impl_trait_ref (5,537,497 samples, 0.85%)</title><rect x="19.0161%" y="101" width="0.8511%" height="15" fill="rgb(209,103,24)"/><text x="19.2661%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,531,437 samples, 0.70%)</title><rect x="19.1708%" y="85" width="0.6964%" height="15" fill="rgb(229,88,8)"/><text x="19.4208%" y="95.50"></text></g><g><title>trait_impls_of (867,809 samples, 0.13%)</title><rect x="19.8713%" y="101" width="0.1334%" height="15" fill="rgb(213,181,19)"/><text x="20.1213%" y="111.50"></text></g><g><title>coherent_trait (13,380,133 samples, 2.06%)</title><rect x="17.9485%" y="133" width="2.0564%" height="15" fill="rgb(254,191,54)"/><text x="18.1985%" y="143.50">c..</text></g><g><title>specialization_graph_of (13,038,399 samples, 2.00%)</title><rect x="18.0010%" y="117" width="2.0039%" height="15" fill="rgb(241,83,37)"/><text x="18.2510%" y="127.50">s..</text></g><g><title>coherence_checking (13,491,584 samples, 2.07%)</title><rect x="17.9443%" y="149" width="2.0735%" height="15" fill="rgb(233,36,39)"/><text x="18.1943%" y="159.50">c..</text></g><g><title>associated_item (950,619 samples, 0.15%)</title><rect x="24.3283%" y="85" width="0.1461%" height="15" fill="rgb(226,3,54)"/><text x="24.5783%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (822,898 samples, 0.13%)</title><rect x="24.3479%" y="69" width="0.1265%" height="15" fill="rgb(245,192,40)"/><text x="24.5979%" y="79.50"></text></g><g><title>associated_items (1,236,822 samples, 0.19%)</title><rect x="24.2905%" y="101" width="0.1901%" height="15" fill="rgb(238,167,29)"/><text x="24.5405%" y="111.50"></text></g><g><title>dropck_outlives (677,684 samples, 0.10%)</title><rect x="24.4984%" y="101" width="0.1042%" height="15" fill="rgb(232,182,51)"/><text x="24.7484%" y="111.50"></text></g><g><title>evaluate_obligation (3,364,230 samples, 0.52%)</title><rect x="24.6025%" y="101" width="0.5170%" height="15" fill="rgb(231,60,39)"/><text x="24.8525%" y="111.50"></text></g><g><title>typeck (758,938 samples, 0.12%)</title><rect x="25.4418%" y="101" width="0.1166%" height="15" fill="rgb(208,69,12)"/><text x="25.6918%" y="111.50"></text></g><g><title>item_bodies_checking (36,089,666 samples, 5.55%)</title><rect x="20.0254%" y="149" width="5.5466%" height="15" fill="rgb(235,93,37)"/><text x="20.2754%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (36,086,376 samples, 5.55%)</title><rect x="20.0259%" y="133" width="5.5461%" height="15" fill="rgb(213,116,39)"/><text x="20.2759%" y="143.50">typeck_..</text></g><g><title>typeck (35,920,954 samples, 5.52%)</title><rect x="20.0513%" y="117" width="5.5207%" height="15" fill="rgb(222,207,29)"/><text x="20.3013%" y="127.50">typeck</text></g><g><title>item_types_checking (1,151,682 samples, 0.18%)</title><rect x="25.5720%" y="149" width="0.1770%" height="15" fill="rgb(206,96,30)"/><text x="25.8220%" y="159.50"></text></g><g><title>check_mod_item_types (1,146,222 samples, 0.18%)</title><rect x="25.5728%" y="133" width="0.1762%" height="15" fill="rgb(218,138,4)"/><text x="25.8228%" y="143.50"></text></g><g><title>mir_borrowck (1,341,074 samples, 0.21%)</title><rect x="26.0475%" y="37" width="0.2061%" height="15" fill="rgb(250,191,14)"/><text x="26.2975%" y="47.50"></text></g><g><title>mir_for_ctfe (1,886,560 samples, 0.29%)</title><rect x="25.9645%" y="69" width="0.2899%" height="15" fill="rgb(239,60,40)"/><text x="26.2145%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,745,048 samples, 0.27%)</title><rect x="25.9863%" y="53" width="0.2682%" height="15" fill="rgb(206,27,48)"/><text x="26.2363%" y="63.50"></text></g><g><title>eval_to_const_value_raw (4,186,454 samples, 0.64%)</title><rect x="25.8302%" y="117" width="0.6434%" height="15" fill="rgb(225,35,8)"/><text x="26.0802%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,166,843 samples, 0.64%)</title><rect x="25.8332%" y="101" width="0.6404%" height="15" fill="rgb(250,213,24)"/><text x="26.0832%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,152,543 samples, 0.64%)</title><rect x="25.8354%" y="85" width="0.6382%" height="15" fill="rgb(247,123,22)"/><text x="26.0854%" y="95.50"></text></g><g><title>typeck (998,850 samples, 0.15%)</title><rect x="26.3201%" y="69" width="0.1535%" height="15" fill="rgb(231,138,38)"/><text x="26.5701%" y="79.50"></text></g><g><title>predicates_of (1,010,040 samples, 0.16%)</title><rect x="26.6585%" y="117" width="0.1552%" height="15" fill="rgb(231,145,46)"/><text x="26.9085%" y="127.50"></text></g><g><title>predicates_defined_on (918,820 samples, 0.14%)</title><rect x="26.6726%" y="101" width="0.1412%" height="15" fill="rgb(251,118,11)"/><text x="26.9226%" y="111.50"></text></g><g><title>type_collecting (7,080,905 samples, 1.09%)</title><rect x="25.7494%" y="149" width="1.0883%" height="15" fill="rgb(217,147,25)"/><text x="25.9994%" y="159.50"></text></g><g><title>collect_mod_item_types (7,064,305 samples, 1.09%)</title><rect x="25.7519%" y="133" width="1.0857%" height="15" fill="rgb(247,81,37)"/><text x="26.0019%" y="143.50"></text></g><g><title>evaluate_obligation (711,200 samples, 0.11%)</title><rect x="27.4081%" y="117" width="0.1093%" height="15" fill="rgb(209,12,38)"/><text x="27.6581%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,702,640 samples, 0.88%)</title><rect x="26.8861%" y="133" width="0.8764%" height="15" fill="rgb(227,1,9)"/><text x="27.1361%" y="143.50"></text></g><g><title>analysis (107,817,489 samples, 16.57%)</title><rect x="11.6095%" y="181" width="16.5704%" height="15" fill="rgb(248,47,43)"/><text x="11.8595%" y="191.50">analysis</text></g><g><title>type_check_crate (66,705,041 samples, 10.25%)</title><rect x="17.9280%" y="165" width="10.2518%" height="15" fill="rgb(221,10,30)"/><text x="18.1780%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,722,363 samples, 1.34%)</title><rect x="26.8393%" y="149" width="1.3405%" height="15" fill="rgb(210,229,1)"/><text x="27.0893%" y="159.50"></text></g><g><title>check_item_well_formed (2,715,202 samples, 0.42%)</title><rect x="27.7626%" y="133" width="0.4173%" height="15" fill="rgb(222,148,37)"/><text x="28.0126%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (990,467 samples, 0.15%)</title><rect x="35.8421%" y="149" width="0.1522%" height="15" fill="rgb(234,67,33)"/><text x="36.0921%" y="159.50"></text></g><g><title>const_caller_location (744,076 samples, 0.11%)</title><rect x="35.9943%" y="149" width="0.1144%" height="15" fill="rgb(247,98,35)"/><text x="36.2443%" y="159.50"></text></g><g><title>layout_of (1,519,056 samples, 0.23%)</title><rect x="36.5381%" y="133" width="0.2335%" height="15" fill="rgb(247,138,52)"/><text x="36.7881%" y="143.50"></text></g><g><title>predicates_of (894,743 samples, 0.14%)</title><rect x="37.0210%" y="117" width="0.1375%" height="15" fill="rgb(213,79,30)"/><text x="37.2710%" y="127.50"></text></g><g><title>predicates_defined_on (653,087 samples, 0.10%)</title><rect x="37.0582%" y="101" width="0.1004%" height="15" fill="rgb(246,177,23)"/><text x="37.3082%" y="111.50"></text></g><g><title>param_env (2,529,285 samples, 0.39%)</title><rect x="36.7716%" y="133" width="0.3887%" height="15" fill="rgb(230,62,27)"/><text x="37.0216%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,090,391 samples, 1.09%)</title><rect x="36.1127%" y="149" width="1.0897%" height="15" fill="rgb(216,154,8)"/><text x="36.3627%" y="159.50"></text></g><g><title>layout_of (784,778 samples, 0.12%)</title><rect x="37.4203%" y="133" width="0.1206%" height="15" fill="rgb(244,35,45)"/><text x="37.6703%" y="143.50"></text></g><g><title>layout_of (1,942,987 samples, 0.30%)</title><rect x="37.2661%" y="149" width="0.2986%" height="15" fill="rgb(251,115,12)"/><text x="37.5161%" y="159.50"></text></g><g><title>codegen_module (59,238,043 samples, 9.10%)</title><rect x="28.5095%" y="165" width="9.1042%" height="15" fill="rgb(240,54,50)"/><text x="28.7595%" y="175.50">codegen_module</text></g><g><title>codegen_crate (61,442,245 samples, 9.44%)</title><rect x="28.1832%" y="181" width="9.4430%" height="15" fill="rgb(233,84,52)"/><text x="28.4332%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (297,984,496 samples, 45.80%)</title><rect x="37.6661%" y="165" width="45.7970%" height="15" fill="rgb(207,117,47)"/><text x="37.9161%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (284,741,842 samples, 43.76%)</title><rect x="39.7013%" y="149" width="43.7617%" height="15" fill="rgb(249,43,39)"/><text x="39.9513%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (315,872,825 samples, 48.55%)</title><rect x="37.6262%" y="181" width="48.5462%" height="15" fill="rgb(209,38,44)"/><text x="37.8762%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (17,629,328 samples, 2.71%)</title><rect x="83.4630%" y="165" width="2.7094%" height="15" fill="rgb(236,212,23)"/><text x="83.7130%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,392,466 samples, 0.37%)</title><rect x="89.7173%" y="133" width="0.3677%" height="15" fill="rgb(242,79,21)"/><text x="89.9673%" y="143.50"></text></g><g><title>metadata_register_crate (878,799 samples, 0.14%)</title><rect x="89.9499%" y="117" width="0.1351%" height="15" fill="rgb(211,96,35)"/><text x="90.1999%" y="127.50"></text></g><g><title>macro_expand_crate (25,582,012 samples, 3.93%)</title><rect x="86.2484%" y="165" width="3.9317%" height="15" fill="rgb(253,215,40)"/><text x="86.4984%" y="175.50">macr..</text></g><g><title>expand_crate (25,562,362 samples, 3.93%)</title><rect x="86.2514%" y="149" width="3.9287%" height="15" fill="rgb(211,81,21)"/><text x="86.5014%" y="159.50">expa..</text></g><g><title>late_resolve_crate (2,651,418 samples, 0.41%)</title><rect x="90.2286%" y="149" width="0.4075%" height="15" fill="rgb(208,190,38)"/><text x="90.4786%" y="159.50"></text></g><g><title>configure_and_expand (29,169,081 samples, 4.48%)</title><rect x="86.1725%" y="181" width="4.4830%" height="15" fill="rgb(235,213,38)"/><text x="86.4225%" y="191.50">confi..</text></g><g><title>resolve_crate (3,000,322 samples, 0.46%)</title><rect x="90.1943%" y="165" width="0.4611%" height="15" fill="rgb(237,122,38)"/><text x="90.4443%" y="175.50"></text></g><g><title>free_global_ctxt (6,818,972 samples, 1.05%)</title><rect x="90.7640%" y="181" width="1.0480%" height="15" fill="rgb(244,218,35)"/><text x="91.0140%" y="191.50"></text></g><g><title>item_attrs (839,576 samples, 0.13%)</title><rect x="92.4540%" y="85" width="0.1290%" height="15" fill="rgb(240,68,47)"/><text x="92.7040%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (808,705 samples, 0.12%)</title><rect x="92.4587%" y="69" width="0.1243%" height="15" fill="rgb(210,16,53)"/><text x="92.7087%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,238,900 samples, 0.19%)</title><rect x="92.4232%" y="101" width="0.1904%" height="15" fill="rgb(235,124,12)"/><text x="92.6732%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,339,302 samples, 0.21%)</title><rect x="93.1331%" y="85" width="0.2058%" height="15" fill="rgb(224,169,11)"/><text x="93.3831%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,149,672 samples, 0.33%)</title><rect x="93.3389%" y="85" width="0.3304%" height="15" fill="rgb(250,166,2)"/><text x="93.5889%" y="95.50"></text></g><g><title>optimized_mir (6,499,658 samples, 1.00%)</title><rect x="92.7301%" y="101" width="0.9989%" height="15" fill="rgb(242,216,29)"/><text x="92.9801%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,220,307 samples, 0.19%)</title><rect x="93.8202%" y="85" width="0.1875%" height="15" fill="rgb(230,116,27)"/><text x="94.0702%" y="95.50"></text></g><g><title>resolve_instance (3,072,035 samples, 0.47%)</title><rect x="93.7290%" y="101" width="0.4721%" height="15" fill="rgb(228,99,48)"/><text x="93.9790%" y="111.50"></text></g><g><title>own_existential_vtable_entries (872,530 samples, 0.13%)</title><rect x="94.2900%" y="85" width="0.1341%" height="15" fill="rgb(253,11,6)"/><text x="94.5400%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (14,633,246 samples, 2.25%)</title><rect x="92.1810%" y="117" width="2.2490%" height="15" fill="rgb(247,143,39)"/><text x="92.4310%" y="127.50">m..</text></g><g><title>vtable_entries (985,530 samples, 0.15%)</title><rect x="94.2785%" y="101" width="0.1515%" height="15" fill="rgb(236,97,10)"/><text x="94.5285%" y="111.50"></text></g><g><title>monomorphization_collector (14,721,617 samples, 2.26%)</title><rect x="92.1804%" y="133" width="2.2626%" height="15" fill="rgb(233,208,19)"/><text x="92.4304%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (1,578,627 samples, 0.24%)</title><rect x="94.4447%" y="117" width="0.2426%" height="15" fill="rgb(216,164,2)"/><text x="94.6947%" y="127.50"></text></g><g><title>symbol_name (1,435,656 samples, 0.22%)</title><rect x="94.4667%" y="101" width="0.2206%" height="15" fill="rgb(220,129,5)"/><text x="94.7167%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (16,999,881 samples, 2.61%)</title><rect x="92.1732%" y="149" width="2.6127%" height="15" fill="rgb(242,17,10)"/><text x="92.4232%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (2,231,314 samples, 0.34%)</title><rect x="94.4430%" y="133" width="0.3429%" height="15" fill="rgb(242,107,0)"/><text x="94.6930%" y="143.50"></text></g><g><title>exported_symbols (17,244,294 samples, 2.65%)</title><rect x="92.1609%" y="165" width="2.6503%" height="15" fill="rgb(251,28,31)"/><text x="92.4109%" y="175.50">ex..</text></g><g><title>layout_of (662,237 samples, 0.10%)</title><rect x="95.3170%" y="149" width="0.1018%" height="15" fill="rgb(233,223,10)"/><text x="95.5670%" y="159.50"></text></g><g><title>optimized_mir (8,482,751 samples, 1.30%)</title><rect x="94.8230%" y="165" width="1.3037%" height="15" fill="rgb(215,21,27)"/><text x="95.0730%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,606,298 samples, 0.71%)</title><rect x="95.4188%" y="149" width="0.7079%" height="15" fill="rgb(232,23,21)"/><text x="95.6688%" y="159.50"></text></g><g><title>generate_crate_metadata (28,303,821 samples, 4.35%)</title><rect x="91.8120%" y="181" width="4.3500%" height="15" fill="rgb(244,5,23)"/><text x="92.0620%" y="191.50">gener..</text></g><g><title>hir_lowering (3,707,520 samples, 0.57%)</title><rect x="96.1620%" y="181" width="0.5698%" height="15" fill="rgb(226,81,46)"/><text x="96.4120%" y="191.50"></text></g><g><title>finish_ongoing_codegen (14,209,832 samples, 2.18%)</title><rect x="96.7342%" y="165" width="2.1839%" height="15" fill="rgb(247,70,30)"/><text x="96.9842%" y="175.50">f..</text></g><g><title>link_crate (2,193,953 samples, 0.34%)</title><rect x="98.9181%" y="165" width="0.3372%" height="15" fill="rgb(212,68,19)"/><text x="99.1681%" y="175.50"></text></g><g><title>link_binary (2,144,803 samples, 0.33%)</title><rect x="98.9256%" y="149" width="0.3296%" height="15" fill="rgb(240,187,13)"/><text x="99.1756%" y="159.50"></text></g><g><title>link_rlib (1,529,156 samples, 0.24%)</title><rect x="99.0202%" y="133" width="0.2350%" height="15" fill="rgb(223,113,26)"/><text x="99.2702%" y="143.50"></text></g><g><title>link (16,429,935 samples, 2.53%)</title><rect x="96.7318%" y="181" width="2.5251%" height="15" fill="rgb(206,192,2)"/><text x="96.9818%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (3,786,571 samples, 0.58%)</title><rect x="99.3481%" y="181" width="0.5820%" height="15" fill="rgb(241,108,4)"/><text x="99.5981%" y="191.50"></text></g><g><title>all (650,664,083 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (650,664,083 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>