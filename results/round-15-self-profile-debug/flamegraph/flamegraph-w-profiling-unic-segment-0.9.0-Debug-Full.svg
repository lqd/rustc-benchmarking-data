<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (61,114,452 samples, 11.35%)</title><rect x="0.1327%" y="165" width="11.3508%" height="15" fill="rgb(227,0,7)"/><text x="0.3827%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,012,502 samples, 0.19%)</title><rect x="17.0507%" y="53" width="0.1881%" height="15" fill="rgb(217,0,24)"/><text x="17.3007%" y="63.50"></text></g><g><title>is_copy_raw (597,757 samples, 0.11%)</title><rect x="17.1278%" y="37" width="0.1110%" height="15" fill="rgb(221,193,54)"/><text x="17.3778%" y="47.50"></text></g><g><title>resolve_instance (972,981 samples, 0.18%)</title><rect x="17.2388%" y="53" width="0.1807%" height="15" fill="rgb(248,212,6)"/><text x="17.4888%" y="63.50"></text></g><g><title>thir_body (2,137,927 samples, 0.40%)</title><rect x="17.4264%" y="53" width="0.3971%" height="15" fill="rgb(208,68,35)"/><text x="17.6764%" y="63.50"></text></g><g><title>mir_const (12,080,739 samples, 2.24%)</title><rect x="15.5841%" y="101" width="2.2438%" height="15" fill="rgb(232,128,0)"/><text x="15.8341%" y="111.50">m..</text></g><g><title>unsafety_check_result (10,506,800 samples, 1.95%)</title><rect x="15.8764%" y="85" width="1.9514%" height="15" fill="rgb(207,160,47)"/><text x="16.1264%" y="95.50">u..</text></g><g><title>mir_built (9,426,513 samples, 1.75%)</title><rect x="16.0770%" y="69" width="1.7508%" height="15" fill="rgb(228,23,34)"/><text x="16.3270%" y="79.50"></text></g><g><title>mir_promoted (13,760,800 samples, 2.56%)</title><rect x="15.3214%" y="117" width="2.5558%" height="15" fill="rgb(218,30,26)"/><text x="15.5714%" y="127.50">mi..</text></g><g><title>type_op_normalize_fn_sig (568,144 samples, 0.11%)</title><rect x="17.9234%" y="117" width="0.1055%" height="15" fill="rgb(220,122,19)"/><text x="18.1734%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,527,902 samples, 0.47%)</title><rect x="18.0839%" y="117" width="0.4695%" height="15" fill="rgb(250,228,42)"/><text x="18.3339%" y="127.50"></text></g><g><title>MIR_borrow_checking (37,598,351 samples, 6.98%)</title><rect x="11.5722%" y="149" width="6.9832%" height="15" fill="rgb(240,193,28)"/><text x="11.8222%" y="159.50">MIR_borro..</text></g><g><title>mir_borrowck (37,426,886 samples, 6.95%)</title><rect x="11.6041%" y="133" width="6.9513%" height="15" fill="rgb(216,20,37)"/><text x="11.8541%" y="143.50">mir_borro..</text></g><g><title>check_mod_attrs (735,417 samples, 0.14%)</title><rect x="18.6351%" y="133" width="0.1366%" height="15" fill="rgb(206,188,39)"/><text x="18.8851%" y="143.50"></text></g><g><title>misc_checking_1 (1,601,687 samples, 0.30%)</title><rect x="18.6307%" y="149" width="0.2975%" height="15" fill="rgb(217,207,13)"/><text x="18.8807%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (637,217 samples, 0.12%)</title><rect x="18.9285%" y="133" width="0.1184%" height="15" fill="rgb(231,73,38)"/><text x="19.1785%" y="143.50"></text></g><g><title>misc_checking_2 (1,987,922 samples, 0.37%)</title><rect x="18.9282%" y="149" width="0.3692%" height="15" fill="rgb(225,20,46)"/><text x="19.1782%" y="159.50"></text></g><g><title>match_checking (1,348,955 samples, 0.25%)</title><rect x="19.0469%" y="133" width="0.2505%" height="15" fill="rgb(210,31,41)"/><text x="19.2969%" y="143.50"></text></g><g><title>check_match (1,308,574 samples, 0.24%)</title><rect x="19.0544%" y="117" width="0.2430%" height="15" fill="rgb(221,200,47)"/><text x="19.3044%" y="127.50"></text></g><g><title>death_checking (1,016,631 samples, 0.19%)</title><rect x="19.3513%" y="133" width="0.1888%" height="15" fill="rgb(226,26,5)"/><text x="19.6013%" y="143.50"></text></g><g><title>crate_lints (2,432,656 samples, 0.45%)</title><rect x="19.5404%" y="117" width="0.4518%" height="15" fill="rgb(249,33,26)"/><text x="19.7904%" y="127.50"></text></g><g><title>type_of (1,069,493 samples, 0.20%)</title><rect x="19.7935%" y="101" width="0.1986%" height="15" fill="rgb(235,183,28)"/><text x="20.0435%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (839,242 samples, 0.16%)</title><rect x="19.8363%" y="85" width="0.1559%" height="15" fill="rgb(221,5,38)"/><text x="20.0863%" y="95.50"></text></g><g><title>lint_checking (3,219,745 samples, 0.60%)</title><rect x="19.5401%" y="133" width="0.5980%" height="15" fill="rgb(247,18,42)"/><text x="19.7901%" y="143.50"></text></g><g><title>module_lints (785,749 samples, 0.15%)</title><rect x="19.9922%" y="117" width="0.1459%" height="15" fill="rgb(241,131,45)"/><text x="20.2422%" y="127.50"></text></g><g><title>lint_mod (780,009 samples, 0.14%)</title><rect x="19.9932%" y="101" width="0.1449%" height="15" fill="rgb(249,31,29)"/><text x="20.2432%" y="111.50"></text></g><g><title>privacy_checking_modules (1,265,153 samples, 0.23%)</title><rect x="20.2016%" y="133" width="0.2350%" height="15" fill="rgb(225,111,53)"/><text x="20.4516%" y="143.50"></text></g><g><title>check_mod_privacy (1,261,713 samples, 0.23%)</title><rect x="20.2022%" y="117" width="0.2343%" height="15" fill="rgb(238,160,17)"/><text x="20.4522%" y="127.50"></text></g><g><title>misc_checking_3 (6,151,176 samples, 1.14%)</title><rect x="19.2974%" y="149" width="1.1425%" height="15" fill="rgb(214,148,48)"/><text x="19.5474%" y="159.50"></text></g><g><title>impl_parent (2,670,889 samples, 0.50%)</title><rect x="21.2643%" y="85" width="0.4961%" height="15" fill="rgb(232,36,49)"/><text x="21.5143%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,451,540 samples, 0.27%)</title><rect x="21.4908%" y="69" width="0.2696%" height="15" fill="rgb(209,103,24)"/><text x="21.7408%" y="79.50"></text></g><g><title>impl_trait_ref (5,363,355 samples, 1.00%)</title><rect x="21.7604%" y="85" width="0.9961%" height="15" fill="rgb(229,88,8)"/><text x="22.0104%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,185,182 samples, 0.78%)</title><rect x="21.9792%" y="69" width="0.7773%" height="15" fill="rgb(213,181,19)"/><text x="22.2292%" y="79.50"></text></g><g><title>coherent_trait (13,187,221 samples, 2.45%)</title><rect x="20.4568%" y="117" width="2.4493%" height="15" fill="rgb(254,191,54)"/><text x="20.7068%" y="127.50">co..</text></g><g><title>specialization_graph_of (12,498,644 samples, 2.32%)</title><rect x="20.5847%" y="101" width="2.3214%" height="15" fill="rgb(241,83,37)"/><text x="20.8347%" y="111.50">s..</text></g><g><title>trait_impls_of (803,508 samples, 0.15%)</title><rect x="22.7569%" y="85" width="0.1492%" height="15" fill="rgb(233,36,39)"/><text x="23.0069%" y="95.50"></text></g><g><title>coherence_checking (13,277,642 samples, 2.47%)</title><rect x="20.4533%" y="133" width="2.4661%" height="15" fill="rgb(226,3,54)"/><text x="20.7033%" y="143.50">co..</text></g><g><title>evaluate_obligation (1,945,557 samples, 0.36%)</title><rect x="28.6175%" y="85" width="0.3614%" height="15" fill="rgb(245,192,40)"/><text x="28.8675%" y="95.50"></text></g><g><title>evaluate_obligation (945,472 samples, 0.18%)</title><rect x="30.6289%" y="69" width="0.1756%" height="15" fill="rgb(238,167,29)"/><text x="30.8789%" y="79.50"></text></g><g><title>typeck (8,645,381 samples, 1.61%)</title><rect x="29.2895%" y="85" width="1.6057%" height="15" fill="rgb(232,182,51)"/><text x="29.5395%" y="95.50"></text></g><g><title>item_bodies_checking (42,951,599 samples, 7.98%)</title><rect x="22.9274%" y="133" width="7.9774%" height="15" fill="rgb(231,60,39)"/><text x="23.1774%" y="143.50">item_bodies..</text></g><g><title>typeck_item_bodies (42,948,299 samples, 7.98%)</title><rect x="22.9281%" y="117" width="7.9768%" height="15" fill="rgb(208,69,12)"/><text x="23.1781%" y="127.50">typeck_item..</text></g><g><title>typeck (42,839,388 samples, 7.96%)</title><rect x="22.9483%" y="101" width="7.9566%" height="15" fill="rgb(235,93,37)"/><text x="23.1983%" y="111.50">typeck</text></g><g><title>item_types_checking (1,735,519 samples, 0.32%)</title><rect x="30.9049%" y="133" width="0.3223%" height="15" fill="rgb(213,116,39)"/><text x="31.1549%" y="143.50"></text></g><g><title>check_mod_item_types (1,731,099 samples, 0.32%)</title><rect x="30.9057%" y="117" width="0.3215%" height="15" fill="rgb(222,207,29)"/><text x="31.1557%" y="127.50"></text></g><g><title>is_late_bound_map (598,097 samples, 0.11%)</title><rect x="31.3825%" y="85" width="0.1111%" height="15" fill="rgb(206,96,30)"/><text x="31.6325%" y="95.50"></text></g><g><title>resolve_lifetimes (568,687 samples, 0.11%)</title><rect x="31.3879%" y="69" width="0.1056%" height="15" fill="rgb(218,138,4)"/><text x="31.6379%" y="79.50"></text></g><g><title>generics_of (941,820 samples, 0.17%)</title><rect x="31.3529%" y="101" width="0.1749%" height="15" fill="rgb(250,191,14)"/><text x="31.6029%" y="111.50"></text></g><g><title>predicates_of (633,768 samples, 0.12%)</title><rect x="31.5407%" y="101" width="0.1177%" height="15" fill="rgb(239,60,40)"/><text x="31.7907%" y="111.50"></text></g><g><title>predicates_defined_on (559,597 samples, 0.10%)</title><rect x="31.5545%" y="85" width="0.1039%" height="15" fill="rgb(206,27,48)"/><text x="31.8045%" y="95.50"></text></g><g><title>type_collecting (2,501,877 samples, 0.46%)</title><rect x="31.2275%" y="133" width="0.4647%" height="15" fill="rgb(225,35,8)"/><text x="31.4775%" y="143.50"></text></g><g><title>collect_mod_item_types (2,488,577 samples, 0.46%)</title><rect x="31.2300%" y="117" width="0.4622%" height="15" fill="rgb(250,213,24)"/><text x="31.4800%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,891,459 samples, 0.72%)</title><rect x="31.7434%" y="117" width="0.7228%" height="15" fill="rgb(247,123,22)"/><text x="31.9934%" y="127.50"></text></g><g><title>region_scope_tree (796,611 samples, 0.15%)</title><rect x="32.3183%" y="101" width="0.1480%" height="15" fill="rgb(231,138,38)"/><text x="32.5683%" y="111.50"></text></g><g><title>analysis (115,355,123 samples, 21.43%)</title><rect x="11.4835%" y="165" width="21.4250%" height="15" fill="rgb(231,145,46)"/><text x="11.7335%" y="175.50">analysis</text></g><g><title>type_check_crate (67,132,847 samples, 12.47%)</title><rect x="20.4399%" y="149" width="12.4686%" height="15" fill="rgb(251,118,11)"/><text x="20.6899%" y="159.50">type_check_crate</text></g><g><title>wf_checking (6,542,580 samples, 1.22%)</title><rect x="31.6934%" y="133" width="1.2152%" height="15" fill="rgb(217,147,25)"/><text x="31.9434%" y="143.50"></text></g><g><title>check_item_well_formed (2,381,596 samples, 0.44%)</title><rect x="32.4662%" y="117" width="0.4423%" height="15" fill="rgb(247,81,37)"/><text x="32.7162%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (581,125 samples, 0.11%)</title><rect x="39.4308%" y="133" width="0.1079%" height="15" fill="rgb(209,12,38)"/><text x="39.6808%" y="143.50"></text></g><g><title>const_caller_location (713,987 samples, 0.13%)</title><rect x="39.5388%" y="133" width="0.1326%" height="15" fill="rgb(227,1,9)"/><text x="39.7888%" y="143.50"></text></g><g><title>layout_of (1,684,675 samples, 0.31%)</title><rect x="40.1289%" y="117" width="0.3129%" height="15" fill="rgb(248,47,43)"/><text x="40.3789%" y="127.50"></text></g><g><title>predicates_of (767,957 samples, 0.14%)</title><rect x="40.7214%" y="101" width="0.1426%" height="15" fill="rgb(221,10,30)"/><text x="40.9714%" y="111.50"></text></g><g><title>predicates_defined_on (570,813 samples, 0.11%)</title><rect x="40.7580%" y="85" width="0.1060%" height="15" fill="rgb(210,229,1)"/><text x="41.0080%" y="95.50"></text></g><g><title>param_env (2,281,127 samples, 0.42%)</title><rect x="40.4418%" y="117" width="0.4237%" height="15" fill="rgb(222,148,37)"/><text x="40.6918%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,952,380 samples, 1.29%)</title><rect x="39.6747%" y="133" width="1.2913%" height="15" fill="rgb(234,67,33)"/><text x="39.9247%" y="143.50"></text></g><g><title>layout_of (734,359 samples, 0.14%)</title><rect x="41.0190%" y="133" width="0.1364%" height="15" fill="rgb(247,98,35)"/><text x="41.2690%" y="143.50"></text></g><g><title>codegen_module (42,798,564 samples, 7.95%)</title><rect x="33.3043%" y="149" width="7.9490%" height="15" fill="rgb(247,138,52)"/><text x="33.5543%" y="159.50">codegen_mod..</text></g><g><title>codegen_crate (45,003,591 samples, 8.36%)</title><rect x="32.9105%" y="165" width="8.3586%" height="15" fill="rgb(213,79,30)"/><text x="33.1605%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (211,159,468 samples, 39.22%)</title><rect x="41.3084%" y="149" width="39.2188%" height="15" fill="rgb(246,177,23)"/><text x="41.5584%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (201,621,765 samples, 37.45%)</title><rect x="43.0799%" y="133" width="37.4474%" height="15" fill="rgb(230,62,27)"/><text x="43.3299%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (222,142,625 samples, 41.26%)</title><rect x="41.2690%" y="165" width="41.2588%" height="15" fill="rgb(216,154,8)"/><text x="41.5190%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,771,074 samples, 2.00%)</title><rect x="80.5273%" y="149" width="2.0005%" height="15" fill="rgb(244,35,45)"/><text x="80.7773%" y="159.50">L..</text></g><g><title>metadata_register_crate (3,032,792 samples, 0.56%)</title><rect x="87.3025%" y="117" width="0.5633%" height="15" fill="rgb(251,115,12)"/><text x="87.5525%" y="127.50"></text></g><g><title>metadata_register_crate (1,144,363 samples, 0.21%)</title><rect x="87.6532%" y="101" width="0.2125%" height="15" fill="rgb(240,54,50)"/><text x="87.9032%" y="111.50"></text></g><g><title>macro_expand_crate (28,709,776 samples, 5.33%)</title><rect x="82.6396%" y="149" width="5.3323%" height="15" fill="rgb(233,84,52)"/><text x="82.8896%" y="159.50">macro_e..</text></g><g><title>expand_crate (28,690,326 samples, 5.33%)</title><rect x="82.6433%" y="133" width="5.3287%" height="15" fill="rgb(207,117,47)"/><text x="82.8933%" y="143.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (571,726 samples, 0.11%)</title><rect x="87.8658%" y="117" width="0.1062%" height="15" fill="rgb(249,43,39)"/><text x="88.1158%" y="127.50"></text></g><g><title>late_resolve_crate (2,534,427 samples, 0.47%)</title><rect x="88.0419%" y="133" width="0.4707%" height="15" fill="rgb(209,38,44)"/><text x="88.2919%" y="143.50"></text></g><g><title>configure_and_expand (32,389,346 samples, 6.02%)</title><rect x="82.5278%" y="165" width="6.0157%" height="15" fill="rgb(236,212,23)"/><text x="82.7778%" y="175.50">configur..</text></g><g><title>resolve_crate (2,967,252 samples, 0.55%)</title><rect x="87.9924%" y="149" width="0.5511%" height="15" fill="rgb(242,79,21)"/><text x="88.2424%" y="159.50"></text></g><g><title>early_lint_checks (645,027 samples, 0.12%)</title><rect x="88.6005%" y="165" width="0.1198%" height="15" fill="rgb(211,96,35)"/><text x="88.8505%" y="175.50"></text></g><g><title>free_global_ctxt (7,243,107 samples, 1.35%)</title><rect x="88.7203%" y="165" width="1.3453%" height="15" fill="rgb(253,215,40)"/><text x="88.9703%" y="175.50"></text></g><g><title>item_attrs (687,738 samples, 0.13%)</title><rect x="90.7909%" y="69" width="0.1277%" height="15" fill="rgb(211,81,21)"/><text x="91.0409%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (660,536 samples, 0.12%)</title><rect x="90.7959%" y="53" width="0.1227%" height="15" fill="rgb(208,190,38)"/><text x="91.0459%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,265,596 samples, 0.24%)</title><rect x="90.7190%" y="85" width="0.2351%" height="15" fill="rgb(235,213,38)"/><text x="90.9690%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,127,260 samples, 0.21%)</title><rect x="91.5059%" y="69" width="0.2094%" height="15" fill="rgb(237,122,38)"/><text x="91.7559%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,518,798 samples, 0.47%)</title><rect x="91.7152%" y="69" width="0.4678%" height="15" fill="rgb(244,218,35)"/><text x="91.9652%" y="79.50"></text></g><g><title>optimized_mir (6,635,881 samples, 1.23%)</title><rect x="91.0222%" y="85" width="1.2325%" height="15" fill="rgb(240,68,47)"/><text x="91.2722%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (882,199 samples, 0.16%)</title><rect x="92.3528%" y="69" width="0.1639%" height="15" fill="rgb(210,16,53)"/><text x="92.6028%" y="79.50"></text></g><g><title>specialization_graph_of (1,040,541 samples, 0.19%)</title><rect x="92.6064%" y="69" width="0.1933%" height="15" fill="rgb(235,124,12)"/><text x="92.8564%" y="79.50"></text></g><g><title>resolve_instance (3,139,579 samples, 0.58%)</title><rect x="92.2547%" y="85" width="0.5831%" height="15" fill="rgb(224,169,11)"/><text x="92.5047%" y="95.50"></text></g><g><title>resolve_instance (657,219 samples, 0.12%)</title><rect x="93.0097%" y="69" width="0.1221%" height="15" fill="rgb(250,166,2)"/><text x="93.2597%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (14,255,333 samples, 2.65%)</title><rect x="90.4848%" y="101" width="2.6477%" height="15" fill="rgb(242,216,29)"/><text x="90.7348%" y="111.50">mo..</text></g><g><title>vtable_entries (1,075,935 samples, 0.20%)</title><rect x="92.9327%" y="85" width="0.1998%" height="15" fill="rgb(230,116,27)"/><text x="93.1827%" y="95.50"></text></g><g><title>monomorphization_collector (14,323,084 samples, 2.66%)</title><rect x="90.4842%" y="117" width="2.6602%" height="15" fill="rgb(228,99,48)"/><text x="90.7342%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,252,933 samples, 0.23%)</title><rect x="93.1455%" y="101" width="0.2327%" height="15" fill="rgb(253,11,6)"/><text x="93.3955%" y="111.50"></text></g><g><title>symbol_name (1,148,171 samples, 0.21%)</title><rect x="93.1650%" y="85" width="0.2133%" height="15" fill="rgb(247,143,39)"/><text x="93.4150%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (16,231,764 samples, 3.01%)</title><rect x="90.4761%" y="133" width="3.0147%" height="15" fill="rgb(236,97,10)"/><text x="90.7261%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,864,830 samples, 0.35%)</title><rect x="93.1444%" y="117" width="0.3464%" height="15" fill="rgb(233,208,19)"/><text x="93.3944%" y="127.50"></text></g><g><title>cgu_partitioning (606,197 samples, 0.11%)</title><rect x="93.3782%" y="101" width="0.1126%" height="15" fill="rgb(216,164,2)"/><text x="93.6282%" y="111.50"></text></g><g><title>exported_symbols (16,456,936 samples, 3.06%)</title><rect x="90.4654%" y="149" width="3.0566%" height="15" fill="rgb(220,129,5)"/><text x="90.7154%" y="159.50">exp..</text></g><g><title>layout_of (588,839 samples, 0.11%)</title><rect x="94.1961%" y="133" width="0.1094%" height="15" fill="rgb(242,17,10)"/><text x="94.4461%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,527,065 samples, 0.66%)</title><rect x="94.3055%" y="133" width="0.6551%" height="15" fill="rgb(242,107,0)"/><text x="94.5555%" y="143.50"></text></g><g><title>eval_to_const_value_raw (952,551 samples, 0.18%)</title><rect x="95.0663%" y="117" width="0.1769%" height="15" fill="rgb(251,28,31)"/><text x="95.3163%" y="127.50"></text></g><g><title>eval_to_const_value_raw (926,681 samples, 0.17%)</title><rect x="95.0711%" y="101" width="0.1721%" height="15" fill="rgb(233,223,10)"/><text x="95.3211%" y="111.50"></text></g><g><title>eval_to_allocation_raw (881,181 samples, 0.16%)</title><rect x="95.0796%" y="85" width="0.1637%" height="15" fill="rgb(215,21,27)"/><text x="95.3296%" y="95.50"></text></g><g><title>optimized_mir (9,209,751 samples, 1.71%)</title><rect x="93.5344%" y="149" width="1.7105%" height="15" fill="rgb(232,23,21)"/><text x="93.7844%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,051,872 samples, 0.20%)</title><rect x="95.0495%" y="133" width="0.1954%" height="15" fill="rgb(244,5,23)"/><text x="95.2995%" y="143.50"></text></g><g><title>generate_crate_metadata (28,012,499 samples, 5.20%)</title><rect x="90.0656%" y="165" width="5.2028%" height="15" fill="rgb(226,81,46)"/><text x="90.3156%" y="175.50">genera..</text></g><g><title>hir_lowering (4,555,309 samples, 0.85%)</title><rect x="95.2684%" y="165" width="0.8461%" height="15" fill="rgb(247,70,30)"/><text x="95.5184%" y="175.50"></text></g><g><title>finish_ongoing_codegen (16,402,775 samples, 3.05%)</title><rect x="96.1190%" y="149" width="3.0465%" height="15" fill="rgb(212,68,19)"/><text x="96.3690%" y="159.50">fin..</text></g><g><title>link_crate (2,065,262 samples, 0.38%)</title><rect x="99.1655%" y="149" width="0.3836%" height="15" fill="rgb(240,187,13)"/><text x="99.4155%" y="159.50"></text></g><g><title>link_binary (2,009,551 samples, 0.37%)</title><rect x="99.1758%" y="133" width="0.3732%" height="15" fill="rgb(223,113,26)"/><text x="99.4258%" y="143.50"></text></g><g><title>link_rlib (1,424,286 samples, 0.26%)</title><rect x="99.2845%" y="117" width="0.2645%" height="15" fill="rgb(206,192,2)"/><text x="99.5345%" y="127.50"></text></g><g><title>link (18,501,858 samples, 3.44%)</title><rect x="96.1145%" y="165" width="3.4364%" height="15" fill="rgb(241,108,4)"/><text x="96.3645%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (1,257,764 samples, 0.23%)</title><rect x="99.6793%" y="165" width="0.2336%" height="15" fill="rgb(247,173,49)"/><text x="99.9293%" y="175.50"></text></g><g><title>all (538,413,233 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (538,413,233 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>