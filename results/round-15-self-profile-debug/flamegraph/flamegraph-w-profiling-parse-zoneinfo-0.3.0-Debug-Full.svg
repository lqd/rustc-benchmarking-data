<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (421,929,564 samples, 15.28%)</title><rect x="0.0354%" y="149" width="15.2797%" height="15" fill="rgb(227,0,7)"/><text x="0.2854%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,871,849 samples, 0.10%)</title><rect x="18.1607%" y="37" width="0.1040%" height="15" fill="rgb(217,0,24)"/><text x="18.4107%" y="47.50"></text></g><g><title>thir_body (5,091,801 samples, 0.18%)</title><rect x="18.3661%" y="37" width="0.1844%" height="15" fill="rgb(221,193,54)"/><text x="18.6161%" y="47.50"></text></g><g><title>mir_const (30,123,980 samples, 1.09%)</title><rect x="17.4618%" y="85" width="1.0909%" height="15" fill="rgb(248,212,6)"/><text x="17.7118%" y="95.50"></text></g><g><title>unsafety_check_result (26,350,726 samples, 0.95%)</title><rect x="17.5984%" y="69" width="0.9543%" height="15" fill="rgb(208,68,35)"/><text x="17.8484%" y="79.50"></text></g><g><title>mir_built (23,553,320 samples, 0.85%)</title><rect x="17.6998%" y="53" width="0.8530%" height="15" fill="rgb(232,128,0)"/><text x="17.9498%" y="63.50"></text></g><g><title>mir_promoted (33,938,322 samples, 1.23%)</title><rect x="17.3467%" y="101" width="1.2290%" height="15" fill="rgb(207,160,47)"/><text x="17.5967%" y="111.50"></text></g><g><title>type_op_prove_predicate (6,933,401 samples, 0.25%)</title><rect x="18.7213%" y="101" width="0.2511%" height="15" fill="rgb(228,23,34)"/><text x="18.9713%" y="111.50"></text></g><g><title>MIR_borrow_checking (100,023,836 samples, 3.62%)</title><rect x="15.3512%" y="133" width="3.6223%" height="15" fill="rgb(218,30,26)"/><text x="15.6012%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (99,647,218 samples, 3.61%)</title><rect x="15.3648%" y="117" width="3.6086%" height="15" fill="rgb(220,122,19)"/><text x="15.6148%" y="127.50">mir_..</text></g><g><title>misc_checking_1 (3,767,188 samples, 0.14%)</title><rect x="19.0139%" y="133" width="0.1364%" height="15" fill="rgb(250,228,42)"/><text x="19.2639%" y="143.50"></text></g><g><title>misc_checking_2 (5,181,282 samples, 0.19%)</title><rect x="19.1504%" y="133" width="0.1876%" height="15" fill="rgb(240,193,28)"/><text x="19.4004%" y="143.50"></text></g><g><title>match_checking (3,838,639 samples, 0.14%)</title><rect x="19.1990%" y="117" width="0.1390%" height="15" fill="rgb(216,20,37)"/><text x="19.4490%" y="127.50"></text></g><g><title>check_match (3,741,638 samples, 0.14%)</title><rect x="19.2025%" y="101" width="0.1355%" height="15" fill="rgb(206,188,39)"/><text x="19.4525%" y="111.50"></text></g><g><title>crate_lints (3,841,649 samples, 0.14%)</title><rect x="19.4044%" y="101" width="0.1391%" height="15" fill="rgb(217,207,13)"/><text x="19.6544%" y="111.50"></text></g><g><title>trimmed_def_paths (4,668,417 samples, 0.17%)</title><rect x="19.6357%" y="69" width="0.1691%" height="15" fill="rgb(231,73,38)"/><text x="19.8857%" y="79.50"></text></g><g><title>module_children (3,865,460 samples, 0.14%)</title><rect x="19.6648%" y="53" width="0.1400%" height="15" fill="rgb(225,20,46)"/><text x="19.9148%" y="63.50"></text></g><g><title>metadata_decode_entry_module_children (3,803,169 samples, 0.14%)</title><rect x="19.6670%" y="37" width="0.1377%" height="15" fill="rgb(210,31,41)"/><text x="19.9170%" y="47.50"></text></g><g><title>lint_checking (11,379,745 samples, 0.41%)</title><rect x="19.4043%" y="117" width="0.4121%" height="15" fill="rgb(221,200,47)"/><text x="19.6543%" y="127.50"></text></g><g><title>module_lints (7,536,206 samples, 0.27%)</title><rect x="19.5435%" y="101" width="0.2729%" height="15" fill="rgb(226,26,5)"/><text x="19.7935%" y="111.50"></text></g><g><title>lint_mod (7,527,666 samples, 0.27%)</title><rect x="19.5438%" y="85" width="0.2726%" height="15" fill="rgb(249,33,26)"/><text x="19.7938%" y="95.50"></text></g><g><title>privacy_checking_modules (3,837,989 samples, 0.14%)</title><rect x="19.8536%" y="117" width="0.1390%" height="15" fill="rgb(235,183,28)"/><text x="20.1036%" y="127.50"></text></g><g><title>check_mod_privacy (3,831,499 samples, 0.14%)</title><rect x="19.8538%" y="101" width="0.1388%" height="15" fill="rgb(221,5,38)"/><text x="20.1038%" y="111.50"></text></g><g><title>misc_checking_3 (18,108,383 samples, 0.66%)</title><rect x="19.3380%" y="133" width="0.6558%" height="15" fill="rgb(247,18,42)"/><text x="19.5880%" y="143.50"></text></g><g><title>impl_parent (3,726,045 samples, 0.13%)</title><rect x="20.2443%" y="69" width="0.1349%" height="15" fill="rgb(241,131,45)"/><text x="20.4943%" y="79.50"></text></g><g><title>impl_trait_ref (6,665,331 samples, 0.24%)</title><rect x="20.3792%" y="69" width="0.2414%" height="15" fill="rgb(249,31,29)"/><text x="20.6292%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,260,256 samples, 0.19%)</title><rect x="20.4301%" y="53" width="0.1905%" height="15" fill="rgb(225,111,53)"/><text x="20.6801%" y="63.50"></text></g><g><title>coherent_trait (18,352,687 samples, 0.66%)</title><rect x="20.0003%" y="101" width="0.6646%" height="15" fill="rgb(238,160,17)"/><text x="20.2503%" y="111.50"></text></g><g><title>specialization_graph_of (17,419,547 samples, 0.63%)</title><rect x="20.0341%" y="85" width="0.6308%" height="15" fill="rgb(214,148,48)"/><text x="20.2841%" y="95.50"></text></g><g><title>coherence_checking (18,520,709 samples, 0.67%)</title><rect x="19.9992%" y="117" width="0.6707%" height="15" fill="rgb(232,36,49)"/><text x="20.2492%" y="127.50"></text></g><g><title>evaluate_obligation (6,622,876 samples, 0.24%)</title><rect x="23.8313%" y="69" width="0.2398%" height="15" fill="rgb(209,103,24)"/><text x="24.0813%" y="79.50"></text></g><g><title>evaluate_obligation (3,310,013 samples, 0.12%)</title><rect x="24.8351%" y="53" width="0.1199%" height="15" fill="rgb(229,88,8)"/><text x="25.0851%" y="63.50"></text></g><g><title>typeck (24,314,577 samples, 0.88%)</title><rect x="24.1752%" y="69" width="0.8805%" height="15" fill="rgb(213,181,19)"/><text x="24.4252%" y="79.50"></text></g><g><title>item_bodies_checking (121,149,110 samples, 4.39%)</title><rect x="20.6731%" y="117" width="4.3873%" height="15" fill="rgb(254,191,54)"/><text x="20.9231%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (121,145,070 samples, 4.39%)</title><rect x="20.6732%" y="101" width="4.3871%" height="15" fill="rgb(241,83,37)"/><text x="20.9232%" y="111.50">typec..</text></g><g><title>typeck (120,894,907 samples, 4.38%)</title><rect x="20.6823%" y="85" width="4.3781%" height="15" fill="rgb(233,36,39)"/><text x="20.9323%" y="95.50">typeck</text></g><g><title>item_types_checking (7,671,208 samples, 0.28%)</title><rect x="25.0604%" y="117" width="0.2778%" height="15" fill="rgb(226,3,54)"/><text x="25.3104%" y="127.50"></text></g><g><title>check_mod_item_types (7,664,568 samples, 0.28%)</title><rect x="25.0606%" y="101" width="0.2776%" height="15" fill="rgb(245,192,40)"/><text x="25.3106%" y="111.50"></text></g><g><title>typeck (4,705,728 samples, 0.17%)</title><rect x="25.1678%" y="85" width="0.1704%" height="15" fill="rgb(238,167,29)"/><text x="25.4178%" y="95.50"></text></g><g><title>type_collecting (8,582,187 samples, 0.31%)</title><rect x="25.3383%" y="117" width="0.3108%" height="15" fill="rgb(232,182,51)"/><text x="25.5883%" y="127.50"></text></g><g><title>collect_mod_item_types (8,564,427 samples, 0.31%)</title><rect x="25.3389%" y="101" width="0.3102%" height="15" fill="rgb(231,60,39)"/><text x="25.5889%" y="111.50"></text></g><g><title>check_impl_item_well_formed (8,924,356 samples, 0.32%)</title><rect x="25.6703%" y="101" width="0.3232%" height="15" fill="rgb(208,69,12)"/><text x="25.9203%" y="111.50"></text></g><g><title>check_item_well_formed (5,664,683 samples, 0.21%)</title><rect x="25.9935%" y="101" width="0.2051%" height="15" fill="rgb(235,93,37)"/><text x="26.2435%" y="111.50"></text></g><g><title>analysis (300,687,023 samples, 10.89%)</title><rect x="15.3151%" y="149" width="10.8890%" height="15" fill="rgb(213,116,39)"/><text x="15.5651%" y="159.50">analysis</text></g><g><title>type_check_crate (171,490,561 samples, 6.21%)</title><rect x="19.9938%" y="133" width="6.2103%" height="15" fill="rgb(222,207,29)"/><text x="20.2438%" y="143.50">type_che..</text></g><g><title>wf_checking (15,311,985 samples, 0.55%)</title><rect x="25.6496%" y="117" width="0.5545%" height="15" fill="rgb(206,96,30)"/><text x="25.8996%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (10,681,874 samples, 0.39%)</title><rect x="38.7577%" y="117" width="0.3868%" height="15" fill="rgb(218,138,4)"/><text x="39.0077%" y="127.50"></text></g><g><title>const_caller_location (5,219,432 samples, 0.19%)</title><rect x="39.1445%" y="117" width="0.1890%" height="15" fill="rgb(250,191,14)"/><text x="39.3945%" y="127.50"></text></g><g><title>layout_of (4,522,856 samples, 0.16%)</title><rect x="40.0048%" y="101" width="0.1638%" height="15" fill="rgb(239,60,40)"/><text x="40.2548%" y="111.50"></text></g><g><title>predicates_of (4,248,076 samples, 0.15%)</title><rect x="40.4869%" y="85" width="0.1538%" height="15" fill="rgb(206,27,48)"/><text x="40.7369%" y="95.50"></text></g><g><title>predicates_defined_on (3,122,454 samples, 0.11%)</title><rect x="40.5277%" y="69" width="0.1131%" height="15" fill="rgb(225,35,8)"/><text x="40.7777%" y="79.50"></text></g><g><title>param_env (13,057,641 samples, 0.47%)</title><rect x="40.1685%" y="101" width="0.4729%" height="15" fill="rgb(250,213,24)"/><text x="40.4185%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,336,263 samples, 0.19%)</title><rect x="40.6414%" y="101" width="0.1932%" height="15" fill="rgb(247,123,22)"/><text x="40.8914%" y="111.50"></text></g><g><title>normalize_projection_ty (4,157,997 samples, 0.15%)</title><rect x="40.6841%" y="85" width="0.1506%" height="15" fill="rgb(231,138,38)"/><text x="40.9341%" y="95.50"></text></g><g><title>fn_abi_of_instance (41,473,804 samples, 1.50%)</title><rect x="39.3367%" y="117" width="1.5019%" height="15" fill="rgb(231,145,46)"/><text x="39.5867%" y="127.50"></text></g><g><title>layout_of (8,212,265 samples, 0.30%)</title><rect x="40.9073%" y="117" width="0.2974%" height="15" fill="rgb(251,118,11)"/><text x="41.1573%" y="127.50"></text></g><g><title>codegen_module (414,442,826 samples, 15.01%)</title><rect x="26.3309%" y="133" width="15.0086%" height="15" fill="rgb(217,147,25)"/><text x="26.5809%" y="143.50">codegen_module</text></g><g><title>codegen_crate (418,033,354 samples, 15.14%)</title><rect x="26.2044%" y="149" width="15.1386%" height="15" fill="rgb(247,81,37)"/><text x="26.4544%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,294,091,659 samples, 46.86%)</title><rect x="41.3522%" y="133" width="46.8641%" height="15" fill="rgb(209,12,38)"/><text x="41.6022%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,230,131,914 samples, 44.55%)</title><rect x="43.6685%" y="117" width="44.5479%" height="15" fill="rgb(227,1,9)"/><text x="43.9185%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,382,644,061 samples, 50.07%)</title><rect x="41.3430%" y="149" width="50.0709%" height="15" fill="rgb(248,47,43)"/><text x="41.5930%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (88,297,328 samples, 3.20%)</title><rect x="88.2163%" y="133" width="3.1976%" height="15" fill="rgb(221,10,30)"/><text x="88.4663%" y="143.50">LLV..</text></g><g><title>macro_expand_crate (24,273,667 samples, 0.88%)</title><rect x="91.4424%" y="133" width="0.8790%" height="15" fill="rgb(210,229,1)"/><text x="91.6924%" y="143.50"></text></g><g><title>expand_crate (24,255,687 samples, 0.88%)</title><rect x="91.4431%" y="117" width="0.8784%" height="15" fill="rgb(222,148,37)"/><text x="91.6931%" y="127.50"></text></g><g><title>late_resolve_crate (5,369,354 samples, 0.19%)</title><rect x="92.3372%" y="117" width="0.1944%" height="15" fill="rgb(234,67,33)"/><text x="92.5872%" y="127.50"></text></g><g><title>configure_and_expand (31,246,798 samples, 1.13%)</title><rect x="91.4139%" y="149" width="1.1316%" height="15" fill="rgb(247,98,35)"/><text x="91.6639%" y="159.50"></text></g><g><title>resolve_crate (6,141,642 samples, 0.22%)</title><rect x="92.3231%" y="133" width="0.2224%" height="15" fill="rgb(247,138,52)"/><text x="92.5731%" y="143.50"></text></g><g><title>free_global_ctxt (14,443,487 samples, 0.52%)</title><rect x="92.6256%" y="149" width="0.5231%" height="15" fill="rgb(213,79,30)"/><text x="92.8756%" y="159.50"></text></g><g><title>codegen_fn_attrs (4,480,903 samples, 0.16%)</title><rect x="93.8832%" y="69" width="0.1623%" height="15" fill="rgb(246,177,23)"/><text x="94.1332%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,825,647 samples, 0.32%)</title><rect x="94.5848%" y="53" width="0.3196%" height="15" fill="rgb(230,62,27)"/><text x="94.8348%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,370,880 samples, 0.41%)</title><rect x="94.9044%" y="53" width="0.4118%" height="15" fill="rgb(216,154,8)"/><text x="95.1544%" y="63.50"></text></g><g><title>optimized_mir (31,325,855 samples, 1.13%)</title><rect x="94.1997%" y="69" width="1.1344%" height="15" fill="rgb(244,35,45)"/><text x="94.4497%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (14,098,518 samples, 0.51%)</title><rect x="95.5364%" y="53" width="0.5106%" height="15" fill="rgb(251,115,12)"/><text x="95.7864%" y="63.50"></text></g><g><title>needs_drop_raw (2,930,514 samples, 0.11%)</title><rect x="96.1011%" y="53" width="0.1061%" height="15" fill="rgb(240,54,50)"/><text x="96.3511%" y="63.50"></text></g><g><title>resolve_instance (26,317,407 samples, 0.95%)</title><rect x="95.3341%" y="69" width="0.9531%" height="15" fill="rgb(233,84,52)"/><text x="95.5841%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,931,807 samples, 0.11%)</title><rect x="96.3504%" y="69" width="0.1062%" height="15" fill="rgb(207,117,47)"/><text x="96.6004%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (90,036,515 samples, 3.26%)</title><rect x="93.3419%" y="85" width="3.2606%" height="15" fill="rgb(249,43,39)"/><text x="93.5919%" y="95.50">mon..</text></g><g><title>monomorphization_collector (90,191,516 samples, 3.27%)</title><rect x="93.3417%" y="101" width="3.2662%" height="15" fill="rgb(209,38,44)"/><text x="93.5917%" y="111.50">mon..</text></g><g><title>assert_symbols_are_distinct (12,861,180 samples, 0.47%)</title><rect x="96.6081%" y="85" width="0.4658%" height="15" fill="rgb(236,212,23)"/><text x="96.8581%" y="95.50"></text></g><g><title>symbol_name (11,244,595 samples, 0.41%)</title><rect x="96.6666%" y="69" width="0.4072%" height="15" fill="rgb(242,79,21)"/><text x="96.9166%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (107,869,655 samples, 3.91%)</title><rect x="93.3389%" y="117" width="3.9064%" height="15" fill="rgb(211,96,35)"/><text x="93.5889%" y="127.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (17,602,058 samples, 0.64%)</title><rect x="96.6079%" y="101" width="0.6374%" height="15" fill="rgb(253,215,40)"/><text x="96.8579%" y="111.50"></text></g><g><title>cgu_partitioning (4,735,938 samples, 0.17%)</title><rect x="97.0738%" y="85" width="0.1715%" height="15" fill="rgb(211,81,21)"/><text x="97.3238%" y="95.50"></text></g><g><title>exported_symbols (108,738,684 samples, 3.94%)</title><rect x="93.3183%" y="133" width="3.9379%" height="15" fill="rgb(208,190,38)"/><text x="93.5683%" y="143.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,288,002 samples, 0.19%)</title><rect x="97.4756%" y="117" width="0.1915%" height="15" fill="rgb(235,213,38)"/><text x="97.7256%" y="127.50"></text></g><g><title>optimized_mir (11,231,642 samples, 0.41%)</title><rect x="97.2644%" y="133" width="0.4067%" height="15" fill="rgb(237,122,38)"/><text x="97.5144%" y="143.50"></text></g><g><title>generate_crate_metadata (125,054,280 samples, 4.53%)</title><rect x="93.1487%" y="149" width="4.5287%" height="15" fill="rgb(244,218,35)"/><text x="93.3987%" y="159.50">gener..</text></g><g><title>hir_lowering (10,621,428 samples, 0.38%)</title><rect x="97.6774%" y="149" width="0.3846%" height="15" fill="rgb(240,68,47)"/><text x="97.9274%" y="159.50"></text></g><g><title>finish_ongoing_codegen (41,322,090 samples, 1.50%)</title><rect x="98.0627%" y="133" width="1.4964%" height="15" fill="rgb(210,16,53)"/><text x="98.3127%" y="143.50"></text></g><g><title>link_crate (8,208,173 samples, 0.30%)</title><rect x="99.5591%" y="133" width="0.2972%" height="15" fill="rgb(235,124,12)"/><text x="99.8091%" y="143.50"></text></g><g><title>link_binary (8,088,832 samples, 0.29%)</title><rect x="99.5634%" y="117" width="0.2929%" height="15" fill="rgb(224,169,11)"/><text x="99.8134%" y="127.50"></text></g><g><title>link_rlib (6,699,578 samples, 0.24%)</title><rect x="99.6137%" y="101" width="0.2426%" height="15" fill="rgb(250,166,2)"/><text x="99.8637%" y="111.50"></text></g><g><title>link (49,561,633 samples, 1.79%)</title><rect x="98.0620%" y="149" width="1.7948%" height="15" fill="rgb(242,216,29)"/><text x="98.3120%" y="159.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,933,790 samples, 0.11%)</title><rect x="99.8720%" y="149" width="0.1062%" height="15" fill="rgb(230,116,27)"/><text x="100.1220%" y="159.50"></text></g><g><title>all (2,761,371,760 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (2,761,371,760 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>