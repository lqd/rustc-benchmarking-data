<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,157,383 samples, 1.32%)</title><rect x="0.8042%" y="197" width="1.3240%" height="15" fill="rgb(227,0,7)"/><text x="1.0542%" y="207.50"></text></g><g><title>param_env (277,965 samples, 0.32%)</title><rect x="11.2273%" y="117" width="0.3180%" height="15" fill="rgb(217,0,24)"/><text x="11.4773%" y="127.50"></text></g><g><title>item_attrs (306,822 samples, 0.35%)</title><rect x="11.9354%" y="85" width="0.3510%" height="15" fill="rgb(221,193,54)"/><text x="12.1854%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (298,162 samples, 0.34%)</title><rect x="11.9453%" y="69" width="0.3411%" height="15" fill="rgb(248,212,6)"/><text x="12.1953%" y="79.50"></text></g><g><title>codegen_fn_attrs (407,403 samples, 0.47%)</title><rect x="11.8332%" y="101" width="0.4660%" height="15" fill="rgb(208,68,35)"/><text x="12.0832%" y="111.50"></text></g><g><title>is_copy_raw (95,561 samples, 0.11%)</title><rect x="14.0566%" y="53" width="0.1093%" height="15" fill="rgb(232,128,0)"/><text x="14.3066%" y="63.50"></text></g><g><title>adt_drop_tys (254,961 samples, 0.29%)</title><rect x="13.9709%" y="69" width="0.2917%" height="15" fill="rgb(207,160,47)"/><text x="14.2209%" y="79.50"></text></g><g><title>needs_drop_raw (703,546 samples, 0.80%)</title><rect x="13.8892%" y="85" width="0.8048%" height="15" fill="rgb(228,23,34)"/><text x="14.1392%" y="95.50"></text></g><g><title>is_copy_raw (377,115 samples, 0.43%)</title><rect x="14.2626%" y="69" width="0.4314%" height="15" fill="rgb(218,30,26)"/><text x="14.5126%" y="79.50"></text></g><g><title>evaluate_obligation (301,544 samples, 0.34%)</title><rect x="14.3491%" y="53" width="0.3450%" height="15" fill="rgb(220,122,19)"/><text x="14.5991%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (164,492 samples, 0.19%)</title><rect x="14.8630%" y="69" width="0.1882%" height="15" fill="rgb(250,228,42)"/><text x="15.1130%" y="79.50"></text></g><g><title>specialization_graph_of (290,095 samples, 0.33%)</title><rect x="15.0827%" y="69" width="0.3319%" height="15" fill="rgb(240,193,28)"/><text x="15.3327%" y="79.50"></text></g><g><title>impl_trait_ref (125,873 samples, 0.14%)</title><rect x="15.2705%" y="53" width="0.1440%" height="15" fill="rgb(216,20,37)"/><text x="15.5205%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (106,761 samples, 0.12%)</title><rect x="15.2924%" y="37" width="0.1221%" height="15" fill="rgb(206,188,39)"/><text x="15.5424%" y="47.50"></text></g><g><title>resolve_instance (722,468 samples, 0.83%)</title><rect x="14.6940%" y="85" width="0.8265%" height="15" fill="rgb(217,207,13)"/><text x="14.9440%" y="95.50"></text></g><g><title>thir_body (545,698 samples, 0.62%)</title><rect x="15.5344%" y="85" width="0.6243%" height="15" fill="rgb(231,73,38)"/><text x="15.7844%" y="95.50"></text></g><g><title>mir_const (4,754,046 samples, 5.44%)</title><rect x="10.7332%" y="133" width="5.4384%" height="15" fill="rgb(225,20,46)"/><text x="10.9832%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (4,044,176 samples, 4.63%)</title><rect x="11.5453%" y="117" width="4.6263%" height="15" fill="rgb(210,31,41)"/><text x="11.7953%" y="127.50">unsaf..</text></g><g><title>mir_built (3,385,121 samples, 3.87%)</title><rect x="12.2992%" y="101" width="3.8724%" height="15" fill="rgb(221,200,47)"/><text x="12.5492%" y="111.50">mir_..</text></g><g><title>mir_promoted (5,367,421 samples, 6.14%)</title><rect x="10.2762%" y="149" width="6.1401%" height="15" fill="rgb(226,26,5)"/><text x="10.5262%" y="159.50">mir_prom..</text></g><g><title>mir_const_qualif (213,892 samples, 0.24%)</title><rect x="16.1716%" y="133" width="0.2447%" height="15" fill="rgb(249,33,26)"/><text x="16.4216%" y="143.50"></text></g><g><title>mir_const (157,501 samples, 0.18%)</title><rect x="16.2361%" y="117" width="0.1802%" height="15" fill="rgb(235,183,28)"/><text x="16.4861%" y="127.50"></text></g><g><title>unsafety_check_result (111,441 samples, 0.13%)</title><rect x="16.2888%" y="101" width="0.1275%" height="15" fill="rgb(221,5,38)"/><text x="16.5388%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (150,202 samples, 0.17%)</title><rect x="16.4163%" y="149" width="0.1718%" height="15" fill="rgb(247,18,42)"/><text x="16.6663%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (543,436 samples, 0.62%)</title><rect x="16.5881%" y="149" width="0.6217%" height="15" fill="rgb(241,131,45)"/><text x="16.8381%" y="159.50"></text></g><g><title>normalize_projection_ty (341,304 samples, 0.39%)</title><rect x="16.8194%" y="133" width="0.3904%" height="15" fill="rgb(249,31,29)"/><text x="17.0694%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,501,062 samples, 1.72%)</title><rect x="17.2852%" y="149" width="1.7171%" height="15" fill="rgb(225,111,53)"/><text x="17.5352%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,578,546 samples, 16.68%)</title><rect x="2.3270%" y="181" width="16.6771%" height="15" fill="rgb(238,160,17)"/><text x="2.5770%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,536,366 samples, 16.63%)</title><rect x="2.3752%" y="165" width="16.6289%" height="15" fill="rgb(214,148,48)"/><text x="2.6252%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (130,761 samples, 0.15%)</title><rect x="19.0041%" y="181" width="0.1496%" height="15" fill="rgb(232,36,49)"/><text x="19.2541%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (93,011 samples, 0.11%)</title><rect x="19.0473%" y="165" width="0.1064%" height="15" fill="rgb(209,103,24)"/><text x="19.2973%" y="175.50"></text></g><g><title>hir_module_items (110,611 samples, 0.13%)</title><rect x="19.1537%" y="181" width="0.1265%" height="15" fill="rgb(229,88,8)"/><text x="19.4037%" y="191.50"></text></g><g><title>should_inherit_track_caller (128,992 samples, 0.15%)</title><rect x="19.5715%" y="133" width="0.1476%" height="15" fill="rgb(213,181,19)"/><text x="19.8215%" y="143.50"></text></g><g><title>codegen_fn_attrs (273,532 samples, 0.31%)</title><rect x="19.4246%" y="149" width="0.3129%" height="15" fill="rgb(254,191,54)"/><text x="19.6746%" y="159.50"></text></g><g><title>check_mod_attrs (381,604 samples, 0.44%)</title><rect x="19.3012%" y="165" width="0.4365%" height="15" fill="rgb(241,83,37)"/><text x="19.5512%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (218,852 samples, 0.25%)</title><rect x="19.8331%" y="165" width="0.2504%" height="15" fill="rgb(233,36,39)"/><text x="20.0831%" y="175.50"></text></g><g><title>misc_checking_1 (735,548 samples, 0.84%)</title><rect x="19.2807%" y="181" width="0.8414%" height="15" fill="rgb(226,3,54)"/><text x="19.5307%" y="191.50"></text></g><g><title>check_mod_intrinsics (172,942 samples, 0.20%)</title><rect x="20.1292%" y="149" width="0.1978%" height="15" fill="rgb(245,192,40)"/><text x="20.3792%" y="159.50"></text></g><g><title>layout_of (117,981 samples, 0.13%)</title><rect x="20.1921%" y="133" width="0.1350%" height="15" fill="rgb(238,167,29)"/><text x="20.4421%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (407,904 samples, 0.47%)</title><rect x="20.1239%" y="165" width="0.4666%" height="15" fill="rgb(232,182,51)"/><text x="20.3739%" y="175.50"></text></g><g><title>check_mod_liveness (230,342 samples, 0.26%)</title><rect x="20.3270%" y="149" width="0.2635%" height="15" fill="rgb(231,60,39)"/><text x="20.5770%" y="159.50"></text></g><g><title>misc_checking_2 (670,277 samples, 0.77%)</title><rect x="20.1221%" y="181" width="0.7668%" height="15" fill="rgb(208,69,12)"/><text x="20.3721%" y="191.50"></text></g><g><title>match_checking (260,813 samples, 0.30%)</title><rect x="20.5905%" y="165" width="0.2984%" height="15" fill="rgb(235,93,37)"/><text x="20.8405%" y="175.50"></text></g><g><title>check_match (248,863 samples, 0.28%)</title><rect x="20.6042%" y="149" width="0.2847%" height="15" fill="rgb(213,116,39)"/><text x="20.8542%" y="159.50"></text></g><g><title>death_checking (127,391 samples, 0.15%)</title><rect x="20.9921%" y="165" width="0.1457%" height="15" fill="rgb(222,207,29)"/><text x="21.2421%" y="175.50"></text></g><g><title>eval_to_const_value_raw (140,832 samples, 0.16%)</title><rect x="21.7286%" y="133" width="0.1611%" height="15" fill="rgb(206,96,30)"/><text x="21.9786%" y="143.50"></text></g><g><title>eval_to_const_value_raw (132,812 samples, 0.15%)</title><rect x="21.7377%" y="117" width="0.1519%" height="15" fill="rgb(218,138,4)"/><text x="21.9877%" y="127.50"></text></g><g><title>eval_to_allocation_raw (126,602 samples, 0.14%)</title><rect x="21.7448%" y="101" width="0.1448%" height="15" fill="rgb(250,191,14)"/><text x="21.9948%" y="111.50"></text></g><g><title>trait_impls_of (215,873 samples, 0.25%)</title><rect x="21.9581%" y="133" width="0.2469%" height="15" fill="rgb(239,60,40)"/><text x="22.2081%" y="143.50"></text></g><g><title>crate_lints (3,043,423 samples, 3.48%)</title><rect x="21.1400%" y="149" width="3.4815%" height="15" fill="rgb(206,27,48)"/><text x="21.3900%" y="159.50">cra..</text></g><g><title>type_of (2,104,602 samples, 2.41%)</title><rect x="22.2140%" y="133" width="2.4076%" height="15" fill="rgb(225,35,8)"/><text x="22.4640%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,856,481 samples, 2.12%)</title><rect x="22.4978%" y="117" width="2.1237%" height="15" fill="rgb(250,213,24)"/><text x="22.7478%" y="127.50">m..</text></g><g><title>lint_checking (3,331,626 samples, 3.81%)</title><rect x="21.1379%" y="165" width="3.8112%" height="15" fill="rgb(247,123,22)"/><text x="21.3879%" y="175.50">lint..</text></g><g><title>module_lints (286,343 samples, 0.33%)</title><rect x="24.6215%" y="149" width="0.3276%" height="15" fill="rgb(231,138,38)"/><text x="24.8715%" y="159.50"></text></g><g><title>lint_mod (283,033 samples, 0.32%)</title><rect x="24.6253%" y="133" width="0.3238%" height="15" fill="rgb(231,145,46)"/><text x="24.8753%" y="143.50"></text></g><g><title>privacy_access_levels (95,171 samples, 0.11%)</title><rect x="24.9491%" y="165" width="0.1089%" height="15" fill="rgb(251,118,11)"/><text x="25.1991%" y="175.50"></text></g><g><title>privacy_checking_modules (360,384 samples, 0.41%)</title><rect x="25.0579%" y="165" width="0.4123%" height="15" fill="rgb(217,147,25)"/><text x="25.3079%" y="175.50"></text></g><g><title>check_mod_privacy (358,734 samples, 0.41%)</title><rect x="25.0598%" y="149" width="0.4104%" height="15" fill="rgb(247,81,37)"/><text x="25.3098%" y="159.50"></text></g><g><title>misc_checking_3 (4,022,183 samples, 4.60%)</title><rect x="20.8889%" y="181" width="4.6012%" height="15" fill="rgb(209,12,38)"/><text x="21.1389%" y="191.50">misc_..</text></g><g><title>impl_parent (378,564 samples, 0.43%)</title><rect x="26.0288%" y="117" width="0.4331%" height="15" fill="rgb(227,1,9)"/><text x="26.2788%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (284,502 samples, 0.33%)</title><rect x="26.1364%" y="101" width="0.3255%" height="15" fill="rgb(248,47,43)"/><text x="26.3864%" y="111.50"></text></g><g><title>impl_trait_ref (1,026,524 samples, 1.17%)</title><rect x="26.4618%" y="117" width="1.1743%" height="15" fill="rgb(221,10,30)"/><text x="26.7118%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (931,941 samples, 1.07%)</title><rect x="26.5700%" y="101" width="1.0661%" height="15" fill="rgb(210,229,1)"/><text x="26.8200%" y="111.50"></text></g><g><title>coherent_trait (1,955,181 samples, 2.24%)</title><rect x="25.5400%" y="149" width="2.2366%" height="15" fill="rgb(222,148,37)"/><text x="25.7900%" y="159.50">c..</text></g><g><title>specialization_graph_of (1,948,901 samples, 2.23%)</title><rect x="25.5472%" y="133" width="2.2294%" height="15" fill="rgb(234,67,33)"/><text x="25.7972%" y="143.50">s..</text></g><g><title>trait_impls_of (122,791 samples, 0.14%)</title><rect x="27.6361%" y="117" width="0.1405%" height="15" fill="rgb(247,98,35)"/><text x="27.8861%" y="127.50"></text></g><g><title>coherence_checking (1,999,172 samples, 2.29%)</title><rect x="25.5266%" y="165" width="2.2870%" height="15" fill="rgb(247,138,52)"/><text x="25.7766%" y="175.50">c..</text></g><g><title>adt_sized_constraint (128,862 samples, 0.15%)</title><rect x="41.2052%" y="117" width="0.1474%" height="15" fill="rgb(213,79,30)"/><text x="41.4552%" y="127.50"></text></g><g><title>associated_item (418,784 samples, 0.48%)</title><rect x="41.5427%" y="101" width="0.4791%" height="15" fill="rgb(246,177,23)"/><text x="41.7927%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (324,473 samples, 0.37%)</title><rect x="41.6506%" y="85" width="0.3712%" height="15" fill="rgb(230,62,27)"/><text x="41.9006%" y="95.50"></text></g><g><title>associated_items (619,625 samples, 0.71%)</title><rect x="41.3566%" y="117" width="0.7088%" height="15" fill="rgb(216,154,8)"/><text x="41.6066%" y="127.50"></text></g><g><title>adt_dtorck_constraint (168,851 samples, 0.19%)</title><rect x="42.3461%" y="85" width="0.1932%" height="15" fill="rgb(244,35,45)"/><text x="42.5961%" y="95.50"></text></g><g><title>adt_dtorck_constraint (249,473 samples, 0.29%)</title><rect x="42.2775%" y="101" width="0.2854%" height="15" fill="rgb(251,115,12)"/><text x="42.5275%" y="111.50"></text></g><g><title>dropck_outlives (378,033 samples, 0.43%)</title><rect x="42.1389%" y="117" width="0.4325%" height="15" fill="rgb(240,54,50)"/><text x="42.3889%" y="127.50"></text></g><g><title>generics_of (329,576 samples, 0.38%)</title><rect x="44.5331%" y="101" width="0.3770%" height="15" fill="rgb(233,84,52)"/><text x="44.7831%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (255,854 samples, 0.29%)</title><rect x="44.6174%" y="85" width="0.2927%" height="15" fill="rgb(207,117,47)"/><text x="44.8674%" y="95.50"></text></g><g><title>impl_trait_ref (494,083 samples, 0.57%)</title><rect x="44.9892%" y="101" width="0.5652%" height="15" fill="rgb(249,43,39)"/><text x="45.2392%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (416,992 samples, 0.48%)</title><rect x="45.0774%" y="85" width="0.4770%" height="15" fill="rgb(209,38,44)"/><text x="45.3274%" y="95.50"></text></g><g><title>predicates_of (496,433 samples, 0.57%)</title><rect x="45.5822%" y="101" width="0.5679%" height="15" fill="rgb(236,212,23)"/><text x="45.8322%" y="111.50"></text></g><g><title>predicates_defined_on (381,643 samples, 0.44%)</title><rect x="45.7135%" y="85" width="0.4366%" height="15" fill="rgb(242,79,21)"/><text x="45.9635%" y="95.50"></text></g><g><title>inferred_outlives_of (255,753 samples, 0.29%)</title><rect x="45.8575%" y="69" width="0.2926%" height="15" fill="rgb(211,96,35)"/><text x="46.1075%" y="79.50"></text></g><g><title>specializes (406,074 samples, 0.46%)</title><rect x="46.1501%" y="101" width="0.4645%" height="15" fill="rgb(253,215,40)"/><text x="46.4001%" y="111.50"></text></g><g><title>param_env (251,363 samples, 0.29%)</title><rect x="46.3271%" y="85" width="0.2875%" height="15" fill="rgb(211,81,21)"/><text x="46.5771%" y="95.50"></text></g><g><title>def_span (120,392 samples, 0.14%)</title><rect x="46.4769%" y="69" width="0.1377%" height="15" fill="rgb(208,190,38)"/><text x="46.7269%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (108,882 samples, 0.12%)</title><rect x="46.4901%" y="53" width="0.1246%" height="15" fill="rgb(235,213,38)"/><text x="46.7401%" y="63.50"></text></g><g><title>trait_impls_of (448,316 samples, 0.51%)</title><rect x="46.6302%" y="101" width="0.5129%" height="15" fill="rgb(237,122,38)"/><text x="46.8802%" y="111.50"></text></g><g><title>implementations_of_trait (166,884 samples, 0.19%)</title><rect x="46.9522%" y="85" width="0.1909%" height="15" fill="rgb(244,218,35)"/><text x="47.2022%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (103,104 samples, 0.12%)</title><rect x="47.0251%" y="69" width="0.1179%" height="15" fill="rgb(240,68,47)"/><text x="47.2751%" y="79.50"></text></g><g><title>evaluate_obligation (4,007,934 samples, 4.58%)</title><rect x="42.5714%" y="117" width="4.5849%" height="15" fill="rgb(210,16,53)"/><text x="42.8214%" y="127.50">evalu..</text></g><g><title>fn_sig (121,802 samples, 0.14%)</title><rect x="47.1840%" y="117" width="0.1393%" height="15" fill="rgb(235,124,12)"/><text x="47.4340%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (104,842 samples, 0.12%)</title><rect x="47.2034%" y="101" width="0.1199%" height="15" fill="rgb(224,169,11)"/><text x="47.4534%" y="111.50"></text></g><g><title>generics_of (515,188 samples, 0.59%)</title><rect x="47.3233%" y="117" width="0.5893%" height="15" fill="rgb(250,166,2)"/><text x="47.5733%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (429,676 samples, 0.49%)</title><rect x="47.4211%" y="101" width="0.4915%" height="15" fill="rgb(242,216,29)"/><text x="47.6711%" y="111.50"></text></g><g><title>impl_item_implementor_ids (132,202 samples, 0.15%)</title><rect x="47.9127%" y="117" width="0.1512%" height="15" fill="rgb(230,116,27)"/><text x="48.1627%" y="127.50"></text></g><g><title>associated_items (115,631 samples, 0.13%)</title><rect x="47.9316%" y="101" width="0.1323%" height="15" fill="rgb(228,99,48)"/><text x="48.1816%" y="111.50"></text></g><g><title>impl_trait_ref (443,862 samples, 0.51%)</title><rect x="48.0796%" y="117" width="0.5078%" height="15" fill="rgb(253,11,6)"/><text x="48.3296%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (388,412 samples, 0.44%)</title><rect x="48.1430%" y="101" width="0.4443%" height="15" fill="rgb(247,143,39)"/><text x="48.3930%" y="111.50"></text></g><g><title>item_attrs (221,653 samples, 0.25%)</title><rect x="48.6080%" y="117" width="0.2536%" height="15" fill="rgb(236,97,10)"/><text x="48.8580%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (214,723 samples, 0.25%)</title><rect x="48.6159%" y="101" width="0.2456%" height="15" fill="rgb(233,208,19)"/><text x="48.8659%" y="111.50"></text></g><g><title>evaluate_obligation (229,083 samples, 0.26%)</title><rect x="49.2167%" y="101" width="0.2621%" height="15" fill="rgb(216,164,2)"/><text x="49.4667%" y="111.50"></text></g><g><title>method_autoderef_steps (488,288 samples, 0.56%)</title><rect x="48.9270%" y="117" width="0.5586%" height="15" fill="rgb(220,129,5)"/><text x="49.1770%" y="127.50"></text></g><g><title>explicit_predicates_of (114,190 samples, 0.13%)</title><rect x="49.7534%" y="85" width="0.1306%" height="15" fill="rgb(242,17,10)"/><text x="50.0034%" y="95.50"></text></g><g><title>predicates_of (382,617 samples, 0.44%)</title><rect x="49.5168%" y="117" width="0.4377%" height="15" fill="rgb(242,107,0)"/><text x="49.7668%" y="127.50"></text></g><g><title>predicates_defined_on (253,845 samples, 0.29%)</title><rect x="49.6641%" y="101" width="0.2904%" height="15" fill="rgb(251,28,31)"/><text x="49.9141%" y="111.50"></text></g><g><title>trait_impls_of (94,881 samples, 0.11%)</title><rect x="50.0622%" y="117" width="0.1085%" height="15" fill="rgb(233,223,10)"/><text x="50.3122%" y="127.50"></text></g><g><title>evaluate_obligation (382,616 samples, 0.44%)</title><rect x="53.4105%" y="101" width="0.4377%" height="15" fill="rgb(215,21,27)"/><text x="53.6605%" y="111.50"></text></g><g><title>is_copy_raw (176,753 samples, 0.20%)</title><rect x="53.9670%" y="101" width="0.2022%" height="15" fill="rgb(232,23,21)"/><text x="54.2170%" y="111.50"></text></g><g><title>evaluate_obligation (164,002 samples, 0.19%)</title><rect x="53.9816%" y="85" width="0.1876%" height="15" fill="rgb(244,5,23)"/><text x="54.2316%" y="95.50"></text></g><g><title>trait_impls_of (131,161 samples, 0.15%)</title><rect x="54.0192%" y="69" width="0.1500%" height="15" fill="rgb(226,81,46)"/><text x="54.2692%" y="79.50"></text></g><g><title>method_autoderef_steps (137,273 samples, 0.16%)</title><rect x="54.1836%" y="101" width="0.1570%" height="15" fill="rgb(247,70,30)"/><text x="54.4336%" y="111.50"></text></g><g><title>typeck (3,667,340 samples, 4.20%)</title><rect x="50.2510%" y="117" width="4.1953%" height="15" fill="rgb(212,68,19)"/><text x="50.5010%" y="127.50">typeck</text></g><g><title>item_bodies_checking (23,293,249 samples, 26.65%)</title><rect x="27.8336%" y="165" width="26.6463%" height="15" fill="rgb(240,187,13)"/><text x="28.0836%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,290,069 samples, 26.64%)</title><rect x="27.8372%" y="149" width="26.6427%" height="15" fill="rgb(223,113,26)"/><text x="28.0872%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,263,879 samples, 26.61%)</title><rect x="27.8672%" y="133" width="26.6127%" height="15" fill="rgb(206,192,2)"/><text x="28.1172%" y="143.50">typeck</text></g><g><title>impl_trait_ref (361,362 samples, 0.41%)</title><rect x="54.9108%" y="85" width="0.4134%" height="15" fill="rgb(241,108,4)"/><text x="55.1608%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (341,242 samples, 0.39%)</title><rect x="54.9338%" y="69" width="0.3904%" height="15" fill="rgb(247,173,49)"/><text x="55.1838%" y="79.50"></text></g><g><title>adt_destructor (516,055 samples, 0.59%)</title><rect x="54.7598%" y="133" width="0.5903%" height="15" fill="rgb(224,114,35)"/><text x="55.0098%" y="143.50"></text></g><g><title>coherent_trait (512,375 samples, 0.59%)</title><rect x="54.7640%" y="117" width="0.5861%" height="15" fill="rgb(245,159,27)"/><text x="55.0140%" y="127.50"></text></g><g><title>specialization_graph_of (510,855 samples, 0.58%)</title><rect x="54.7657%" y="101" width="0.5844%" height="15" fill="rgb(245,172,44)"/><text x="55.0157%" y="111.50"></text></g><g><title>item_types_checking (961,930 samples, 1.10%)</title><rect x="54.4799%" y="165" width="1.1004%" height="15" fill="rgb(236,23,11)"/><text x="54.7299%" y="175.50"></text></g><g><title>check_mod_item_types (960,080 samples, 1.10%)</title><rect x="54.4820%" y="149" width="1.0983%" height="15" fill="rgb(205,117,38)"/><text x="54.7320%" y="159.50"></text></g><g><title>typeck (93,371 samples, 0.11%)</title><rect x="55.4735%" y="133" width="0.1068%" height="15" fill="rgb(237,72,25)"/><text x="55.7235%" y="143.50"></text></g><g><title>late_bound_vars_map (162,942 samples, 0.19%)</title><rect x="55.7770%" y="117" width="0.1864%" height="15" fill="rgb(244,70,9)"/><text x="56.0270%" y="127.50"></text></g><g><title>resolve_lifetimes (158,402 samples, 0.18%)</title><rect x="55.7822%" y="101" width="0.1812%" height="15" fill="rgb(217,125,39)"/><text x="56.0322%" y="111.50"></text></g><g><title>fn_sig (243,263 samples, 0.28%)</title><rect x="55.7127%" y="133" width="0.2783%" height="15" fill="rgb(235,36,10)"/><text x="55.9627%" y="143.50"></text></g><g><title>generics_of (118,931 samples, 0.14%)</title><rect x="55.9910%" y="133" width="0.1361%" height="15" fill="rgb(251,123,47)"/><text x="56.2410%" y="143.50"></text></g><g><title>explicit_predicates_of (95,123 samples, 0.11%)</title><rect x="56.1890%" y="101" width="0.1088%" height="15" fill="rgb(221,13,13)"/><text x="56.4390%" y="111.50"></text></g><g><title>predicates_of (413,346 samples, 0.47%)</title><rect x="56.1406%" y="133" width="0.4728%" height="15" fill="rgb(238,131,9)"/><text x="56.3906%" y="143.50"></text></g><g><title>predicates_defined_on (396,436 samples, 0.45%)</title><rect x="56.1599%" y="117" width="0.4535%" height="15" fill="rgb(211,50,8)"/><text x="56.4099%" y="127.50"></text></g><g><title>inferred_outlives_of (275,943 samples, 0.32%)</title><rect x="56.2978%" y="101" width="0.3157%" height="15" fill="rgb(245,182,24)"/><text x="56.5478%" y="111.50"></text></g><g><title>inferred_outlives_crate (263,163 samples, 0.30%)</title><rect x="56.3124%" y="85" width="0.3010%" height="15" fill="rgb(242,14,37)"/><text x="56.5624%" y="95.50"></text></g><g><title>type_of (137,341 samples, 0.16%)</title><rect x="56.4563%" y="69" width="0.1571%" height="15" fill="rgb(246,228,12)"/><text x="56.7063%" y="79.50"></text></g><g><title>type_collecting (974,120 samples, 1.11%)</title><rect x="55.5816%" y="165" width="1.1143%" height="15" fill="rgb(213,55,15)"/><text x="55.8316%" y="175.50"></text></g><g><title>collect_mod_item_types (966,770 samples, 1.11%)</title><rect x="55.5900%" y="149" width="1.1059%" height="15" fill="rgb(209,9,3)"/><text x="55.8400%" y="159.50"></text></g><g><title>evaluate_obligation (196,062 samples, 0.22%)</title><rect x="57.5927%" y="133" width="0.2243%" height="15" fill="rgb(230,59,30)"/><text x="57.8427%" y="143.50"></text></g><g><title>implied_outlives_bounds (122,022 samples, 0.14%)</title><rect x="57.8207%" y="133" width="0.1396%" height="15" fill="rgb(209,121,21)"/><text x="58.0707%" y="143.50"></text></g><g><title>param_env (102,851 samples, 0.12%)</title><rect x="57.9603%" y="133" width="0.1177%" height="15" fill="rgb(220,109,13)"/><text x="58.2103%" y="143.50"></text></g><g><title>region_scope_tree (159,771 samples, 0.18%)</title><rect x="58.1307%" y="133" width="0.1828%" height="15" fill="rgb(232,18,1)"/><text x="58.3807%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,369,955 samples, 1.57%)</title><rect x="56.7689%" y="149" width="1.5672%" height="15" fill="rgb(215,41,42)"/><text x="57.0189%" y="159.50"></text></g><g><title>adt_sized_constraint (177,803 samples, 0.20%)</title><rect x="58.8321%" y="133" width="0.2034%" height="15" fill="rgb(224,123,36)"/><text x="59.0821%" y="143.50"></text></g><g><title>evaluate_obligation (108,781 samples, 0.12%)</title><rect x="59.0355%" y="133" width="0.1244%" height="15" fill="rgb(240,125,3)"/><text x="59.2855%" y="143.50"></text></g><g><title>param_env (172,451 samples, 0.20%)</title><rect x="59.2320%" y="133" width="0.1973%" height="15" fill="rgb(205,98,50)"/><text x="59.4820%" y="143.50"></text></g><g><title>analysis (50,176,276 samples, 57.40%)</title><rect x="2.1281%" y="197" width="57.3992%" height="15" fill="rgb(205,185,37)"/><text x="2.3781%" y="207.50">analysis</text></g><g><title>type_check_crate (29,754,127 samples, 34.04%)</title><rect x="25.4901%" y="181" width="34.0372%" height="15" fill="rgb(238,207,15)"/><text x="25.7401%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,472,646 samples, 2.83%)</title><rect x="56.6987%" y="165" width="2.8286%" height="15" fill="rgb(213,199,42)"/><text x="56.9487%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,041,350 samples, 1.19%)</title><rect x="58.3361%" y="149" width="1.1913%" height="15" fill="rgb(235,201,11)"/><text x="58.5861%" y="159.50"></text></g><g><title>codegen_module (286,403 samples, 0.33%)</title><rect x="60.4529%" y="181" width="0.3276%" height="15" fill="rgb(207,46,11)"/><text x="60.7029%" y="191.50"></text></g><g><title>codegen_crate (1,155,262 samples, 1.32%)</title><rect x="59.5421%" y="197" width="1.3216%" height="15" fill="rgb(241,35,35)"/><text x="59.7921%" y="207.50"></text></g><g><title>LLVM_module_codegen (869,089 samples, 0.99%)</title><rect x="60.8745%" y="181" width="0.9942%" height="15" fill="rgb(243,32,47)"/><text x="61.1245%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (809,679 samples, 0.93%)</title><rect x="60.9425%" y="165" width="0.9262%" height="15" fill="rgb(247,202,23)"/><text x="61.1925%" y="175.50"></text></g><g><title>codegen_module_optimize (1,055,272 samples, 1.21%)</title><rect x="60.8636%" y="197" width="1.2072%" height="15" fill="rgb(219,102,11)"/><text x="61.1136%" y="207.50"></text></g><g><title>LLVM_module_optimize (176,662 samples, 0.20%)</title><rect x="61.8687%" y="181" width="0.2021%" height="15" fill="rgb(243,110,44)"/><text x="62.1187%" y="191.50"></text></g><g><title>AST_validation (132,982 samples, 0.15%)</title><rect x="62.3307%" y="181" width="0.1521%" height="15" fill="rgb(222,74,54)"/><text x="62.5807%" y="191.50"></text></g><g><title>crate_injection (95,481 samples, 0.11%)</title><rect x="62.5196%" y="181" width="0.1092%" height="15" fill="rgb(216,99,12)"/><text x="62.7696%" y="191.50"></text></g><g><title>metadata_load_macro (162,602 samples, 0.19%)</title><rect x="74.8172%" y="149" width="0.1860%" height="15" fill="rgb(226,22,26)"/><text x="75.0672%" y="159.50"></text></g><g><title>macro_expand_crate (13,515,964 samples, 15.46%)</title><rect x="62.6288%" y="181" width="15.4616%" height="15" fill="rgb(217,163,10)"/><text x="62.8788%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,500,514 samples, 15.44%)</title><rect x="62.6465%" y="165" width="15.4439%" height="15" fill="rgb(213,25,53)"/><text x="62.8965%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,698,719 samples, 3.09%)</title><rect x="75.0032%" y="149" width="3.0872%" height="15" fill="rgb(252,105,26)"/><text x="75.2532%" y="159.50">met..</text></g><g><title>metadata_register_crate (983,911 samples, 1.13%)</title><rect x="76.9649%" y="133" width="1.1255%" height="15" fill="rgb(220,39,43)"/><text x="77.2149%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (235,622 samples, 0.27%)</title><rect x="78.0951%" y="181" width="0.2695%" height="15" fill="rgb(229,68,48)"/><text x="78.3451%" y="191.50"></text></g><g><title>finalize_macro_resolutions (244,053 samples, 0.28%)</title><rect x="78.4047%" y="165" width="0.2792%" height="15" fill="rgb(252,8,32)"/><text x="78.6547%" y="175.50"></text></g><g><title>late_resolve_crate (1,854,710 samples, 2.12%)</title><rect x="78.6839%" y="165" width="2.1217%" height="15" fill="rgb(223,20,43)"/><text x="78.9339%" y="175.50">l..</text></g><g><title>configure_and_expand (16,430,995 samples, 18.80%)</title><rect x="62.0708%" y="197" width="18.7962%" height="15" fill="rgb(229,81,49)"/><text x="62.3208%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,187,463 samples, 2.50%)</title><rect x="78.3647%" y="181" width="2.5023%" height="15" fill="rgb(236,28,36)"/><text x="78.6147%" y="191.50">re..</text></g><g><title>early_lint_checks (189,692 samples, 0.22%)</title><rect x="80.9790%" y="197" width="0.2170%" height="15" fill="rgb(249,185,26)"/><text x="81.2290%" y="207.50"></text></g><g><title>free_global_ctxt (3,752,421 samples, 4.29%)</title><rect x="81.1960%" y="197" width="4.2926%" height="15" fill="rgb(249,174,33)"/><text x="81.4460%" y="207.50">free_..</text></g><g><title>exported_symbols (138,311 samples, 0.16%)</title><rect x="86.4432%" y="181" width="0.1582%" height="15" fill="rgb(233,201,37)"/><text x="86.6932%" y="191.50"></text></g><g><title>is_sized_raw (162,611 samples, 0.19%)</title><rect x="88.6524%" y="149" width="0.1860%" height="15" fill="rgb(221,78,26)"/><text x="88.9024%" y="159.50"></text></g><g><title>evaluate_obligation (135,931 samples, 0.16%)</title><rect x="88.6830%" y="133" width="0.1555%" height="15" fill="rgb(250,127,30)"/><text x="88.9330%" y="143.50"></text></g><g><title>layout_of (202,412 samples, 0.23%)</title><rect x="88.8385%" y="149" width="0.2315%" height="15" fill="rgb(230,49,44)"/><text x="89.0885%" y="159.50"></text></g><g><title>layout_of (149,032 samples, 0.17%)</title><rect x="88.8995%" y="133" width="0.1705%" height="15" fill="rgb(229,67,23)"/><text x="89.1495%" y="143.50"></text></g><g><title>layout_of (103,071 samples, 0.12%)</title><rect x="88.9521%" y="117" width="0.1179%" height="15" fill="rgb(249,83,47)"/><text x="89.2021%" y="127.50"></text></g><g><title>layout_of (644,185 samples, 0.74%)</title><rect x="88.4006%" y="165" width="0.7369%" height="15" fill="rgb(215,43,3)"/><text x="88.6506%" y="175.50"></text></g><g><title>needs_drop_raw (198,462 samples, 0.23%)</title><rect x="91.3783%" y="149" width="0.2270%" height="15" fill="rgb(238,154,13)"/><text x="91.6283%" y="159.50"></text></g><g><title>is_copy_raw (167,212 samples, 0.19%)</title><rect x="91.4140%" y="133" width="0.1913%" height="15" fill="rgb(219,56,2)"/><text x="91.6640%" y="143.50"></text></g><g><title>evaluate_obligation (130,192 samples, 0.15%)</title><rect x="91.4564%" y="117" width="0.1489%" height="15" fill="rgb(233,0,4)"/><text x="91.7064%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,194,354 samples, 2.51%)</title><rect x="89.1375%" y="165" width="2.5102%" height="15" fill="rgb(235,30,7)"/><text x="89.3875%" y="175.50">mi..</text></g><g><title>optimized_mir (4,393,197 samples, 5.03%)</title><rect x="86.6328%" y="181" width="5.0256%" height="15" fill="rgb(250,79,13)"/><text x="86.8828%" y="191.50">optimi..</text></g><g><title>generate_crate_metadata (5,420,998 samples, 6.20%)</title><rect x="85.4886%" y="197" width="6.2014%" height="15" fill="rgb(211,146,34)"/><text x="85.7386%" y="207.50">generate..</text></g><g><title>hir_lowering (1,208,623 samples, 1.38%)</title><rect x="91.6899%" y="197" width="1.3826%" height="15" fill="rgb(228,22,38)"/><text x="91.9399%" y="207.50"></text></g><g><title>link_crate (636,037 samples, 0.73%)</title><rect x="93.0972%" y="181" width="0.7276%" height="15" fill="rgb(235,168,5)"/><text x="93.3472%" y="191.50"></text></g><g><title>link_binary (619,637 samples, 0.71%)</title><rect x="93.1159%" y="165" width="0.7088%" height="15" fill="rgb(221,155,16)"/><text x="93.3659%" y="175.50"></text></g><g><title>link_rlib (395,744 samples, 0.45%)</title><rect x="93.3720%" y="149" width="0.4527%" height="15" fill="rgb(215,215,53)"/><text x="93.6220%" y="159.50"></text></g><g><title>link (664,267 samples, 0.76%)</title><rect x="93.0725%" y="197" width="0.7599%" height="15" fill="rgb(223,4,10)"/><text x="93.3225%" y="207.50"></text></g><g><title>parse_crate (3,783,200 samples, 4.33%)</title><rect x="93.8324%" y="197" width="4.3278%" height="15" fill="rgb(234,103,6)"/><text x="94.0824%" y="207.50">parse..</text></g><g><title>prepare_outputs (185,542 samples, 0.21%)</title><rect x="98.1717%" y="197" width="0.2123%" height="15" fill="rgb(227,97,0)"/><text x="98.4217%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,014,700 samples, 1.16%)</title><rect x="98.3839%" y="197" width="1.1608%" height="15" fill="rgb(234,150,53)"/><text x="98.6339%" y="207.50"></text></g><g><title>all (87,416,405 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (87,416,405 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (316,353 samples, 0.36%)</title><rect x="99.6381%" y="197" width="0.3619%" height="15" fill="rgb(237,53,32)"/><text x="99.8881%" y="207.50"></text></g></svg></svg>