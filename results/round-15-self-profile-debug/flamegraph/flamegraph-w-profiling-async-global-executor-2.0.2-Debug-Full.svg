<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (379,767,614 samples, 18.27%)</title><rect x="0.0225%" y="213" width="18.2712%" height="15" fill="rgb(227,0,7)"/><text x="0.2725%" y="223.50">LLVM_passes</text></g><g><title>mir_const (4,605,026 samples, 0.22%)</title><rect x="18.7122%" y="149" width="0.2216%" height="15" fill="rgb(217,0,24)"/><text x="18.9622%" y="159.50"></text></g><g><title>unsafety_check_result (3,896,912 samples, 0.19%)</title><rect x="18.7463%" y="133" width="0.1875%" height="15" fill="rgb(221,193,54)"/><text x="18.9963%" y="143.50"></text></g><g><title>mir_built (3,347,947 samples, 0.16%)</title><rect x="18.7727%" y="117" width="0.1611%" height="15" fill="rgb(248,212,6)"/><text x="19.0227%" y="127.50"></text></g><g><title>mir_promoted (6,390,821 samples, 0.31%)</title><rect x="18.6876%" y="165" width="0.3075%" height="15" fill="rgb(208,68,35)"/><text x="18.9376%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,643,688 samples, 0.13%)</title><rect x="19.0313%" y="165" width="0.1272%" height="15" fill="rgb(232,128,0)"/><text x="19.2813%" y="175.50"></text></g><g><title>MIR_borrow_checking (17,789,269 samples, 0.86%)</title><rect x="18.3030%" y="197" width="0.8559%" height="15" fill="rgb(207,160,47)"/><text x="18.5530%" y="207.50"></text></g><g><title>mir_borrowck (17,700,499 samples, 0.85%)</title><rect x="18.3073%" y="181" width="0.8516%" height="15" fill="rgb(228,23,34)"/><text x="18.5573%" y="191.50"></text></g><g><title>crate_lints (4,349,783 samples, 0.21%)</title><rect x="19.2800%" y="165" width="0.2093%" height="15" fill="rgb(218,30,26)"/><text x="19.5300%" y="175.50"></text></g><g><title>lint_checking (4,720,307 samples, 0.23%)</title><rect x="19.2799%" y="181" width="0.2271%" height="15" fill="rgb(220,122,19)"/><text x="19.5299%" y="191.50"></text></g><g><title>misc_checking_3 (6,042,820 samples, 0.29%)</title><rect x="19.2616%" y="197" width="0.2907%" height="15" fill="rgb(250,228,42)"/><text x="19.5116%" y="207.50"></text></g><g><title>impl_trait_ref (3,449,853 samples, 0.17%)</title><rect x="19.6694%" y="133" width="0.1660%" height="15" fill="rgb(240,193,28)"/><text x="19.9194%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,102,938 samples, 0.15%)</title><rect x="19.6861%" y="117" width="0.1493%" height="15" fill="rgb(216,20,37)"/><text x="19.9361%" y="127.50"></text></g><g><title>coherent_trait (6,131,211 samples, 0.29%)</title><rect x="19.5554%" y="165" width="0.2950%" height="15" fill="rgb(206,188,39)"/><text x="19.8054%" y="175.50"></text></g><g><title>specialization_graph_of (6,124,621 samples, 0.29%)</title><rect x="19.5558%" y="149" width="0.2947%" height="15" fill="rgb(217,207,13)"/><text x="19.8058%" y="159.50"></text></g><g><title>coherence_checking (6,168,682 samples, 0.30%)</title><rect x="19.5549%" y="181" width="0.2968%" height="15" fill="rgb(231,73,38)"/><text x="19.8049%" y="191.50"></text></g><g><title>typeck (11,673,605 samples, 0.56%)</title><rect x="20.0582%" y="133" width="0.5616%" height="15" fill="rgb(225,20,46)"/><text x="20.3082%" y="143.50"></text></g><g><title>item_bodies_checking (15,961,750 samples, 0.77%)</title><rect x="19.8525%" y="181" width="0.7679%" height="15" fill="rgb(210,31,41)"/><text x="20.1025%" y="191.50"></text></g><g><title>typeck_item_bodies (15,957,020 samples, 0.77%)</title><rect x="19.8527%" y="165" width="0.7677%" height="15" fill="rgb(221,200,47)"/><text x="20.1027%" y="175.50"></text></g><g><title>typeck (15,915,059 samples, 0.77%)</title><rect x="19.8547%" y="149" width="0.7657%" height="15" fill="rgb(226,26,5)"/><text x="20.1047%" y="159.50"></text></g><g><title>mir_borrowck (6,157,361 samples, 0.30%)</title><rect x="20.7107%" y="117" width="0.2962%" height="15" fill="rgb(249,33,26)"/><text x="20.9607%" y="127.50"></text></g><g><title>evaluate_obligation (2,609,397 samples, 0.13%)</title><rect x="21.4411%" y="37" width="0.1255%" height="15" fill="rgb(235,183,28)"/><text x="21.6911%" y="47.50"></text></g><g><title>mir_built (13,562,695 samples, 0.65%)</title><rect x="21.0182%" y="69" width="0.6525%" height="15" fill="rgb(221,5,38)"/><text x="21.2682%" y="79.50"></text></g><g><title>typeck (13,181,792 samples, 0.63%)</title><rect x="21.0365%" y="53" width="0.6342%" height="15" fill="rgb(247,18,42)"/><text x="21.2865%" y="63.50"></text></g><g><title>mir_const (15,444,486 samples, 0.74%)</title><rect x="21.0112%" y="101" width="0.7431%" height="15" fill="rgb(241,131,45)"/><text x="21.2612%" y="111.50"></text></g><g><title>unsafety_check_result (15,328,664 samples, 0.74%)</title><rect x="21.0168%" y="85" width="0.7375%" height="15" fill="rgb(249,31,29)"/><text x="21.2668%" y="95.50"></text></g><g><title>mir_promoted (15,540,086 samples, 0.75%)</title><rect x="21.0070%" y="117" width="0.7477%" height="15" fill="rgb(225,111,53)"/><text x="21.2570%" y="127.50"></text></g><g><title>type_of (22,751,309 samples, 1.09%)</title><rect x="20.6685%" y="149" width="1.0946%" height="15" fill="rgb(238,160,17)"/><text x="20.9185%" y="159.50"></text></g><g><title>mir_borrowck (22,710,268 samples, 1.09%)</title><rect x="20.6704%" y="133" width="1.0926%" height="15" fill="rgb(214,148,48)"/><text x="20.9204%" y="143.50"></text></g><g><title>dropck_outlives (2,116,521 samples, 0.10%)</title><rect x="21.8259%" y="133" width="0.1018%" height="15" fill="rgb(232,36,49)"/><text x="22.0759%" y="143.50"></text></g><g><title>item_types_checking (27,476,885 samples, 1.32%)</title><rect x="20.6204%" y="181" width="1.3220%" height="15" fill="rgb(209,103,24)"/><text x="20.8704%" y="191.50"></text></g><g><title>check_mod_item_types (27,467,825 samples, 1.32%)</title><rect x="20.6208%" y="165" width="1.3215%" height="15" fill="rgb(229,88,8)"/><text x="20.8708%" y="175.50"></text></g><g><title>typeck (3,726,488 samples, 0.18%)</title><rect x="21.7631%" y="149" width="0.1793%" height="15" fill="rgb(213,181,19)"/><text x="22.0131%" y="159.50"></text></g><g><title>analysis (80,574,717 samples, 3.88%)</title><rect x="18.2936%" y="213" width="3.8766%" height="15" fill="rgb(254,191,54)"/><text x="18.5436%" y="223.50">anal..</text></g><g><title>type_check_crate (54,412,355 samples, 2.62%)</title><rect x="19.5523%" y="197" width="2.6179%" height="15" fill="rgb(241,83,37)"/><text x="19.8023%" y="207.50">ty..</text></g><g><title>wf_checking (3,458,094 samples, 0.17%)</title><rect x="22.0038%" y="181" width="0.1664%" height="15" fill="rgb(233,36,39)"/><text x="22.2538%" y="191.50"></text></g><g><title>check_item_well_formed (2,812,978 samples, 0.14%)</title><rect x="22.0348%" y="165" width="0.1353%" height="15" fill="rgb(226,3,54)"/><text x="22.2848%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (8,905,541 samples, 0.43%)</title><rect x="34.5562%" y="181" width="0.4285%" height="15" fill="rgb(245,192,40)"/><text x="34.8062%" y="191.50"></text></g><g><title>const_caller_location (3,032,205 samples, 0.15%)</title><rect x="34.9846%" y="181" width="0.1459%" height="15" fill="rgb(238,167,29)"/><text x="35.2346%" y="191.50"></text></g><g><title>layout_of (6,033,655 samples, 0.29%)</title><rect x="35.8621%" y="165" width="0.2903%" height="15" fill="rgb(232,182,51)"/><text x="36.1121%" y="175.50"></text></g><g><title>predicates_of (3,411,872 samples, 0.16%)</title><rect x="36.4737%" y="149" width="0.1641%" height="15" fill="rgb(231,60,39)"/><text x="36.7237%" y="159.50"></text></g><g><title>predicates_defined_on (2,538,396 samples, 0.12%)</title><rect x="36.5157%" y="133" width="0.1221%" height="15" fill="rgb(208,69,12)"/><text x="36.7657%" y="143.50"></text></g><g><title>param_env (10,117,767 samples, 0.49%)</title><rect x="36.1523%" y="165" width="0.4868%" height="15" fill="rgb(235,93,37)"/><text x="36.4023%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,954,344 samples, 0.19%)</title><rect x="36.6391%" y="165" width="0.1902%" height="15" fill="rgb(213,116,39)"/><text x="36.8891%" y="175.50"></text></g><g><title>normalize_projection_ty (2,310,990 samples, 0.11%)</title><rect x="36.7182%" y="149" width="0.1112%" height="15" fill="rgb(222,207,29)"/><text x="36.9682%" y="159.50"></text></g><g><title>fn_abi_of_instance (35,263,779 samples, 1.70%)</title><rect x="35.1381%" y="181" width="1.6966%" height="15" fill="rgb(206,96,30)"/><text x="35.3881%" y="191.50"></text></g><g><title>layout_of (2,636,063 samples, 0.13%)</title><rect x="37.1851%" y="165" width="0.1268%" height="15" fill="rgb(218,138,4)"/><text x="37.4351%" y="175.50"></text></g><g><title>layout_of (8,850,020 samples, 0.43%)</title><rect x="36.9140%" y="181" width="0.4258%" height="15" fill="rgb(250,191,14)"/><text x="37.1640%" y="191.50"></text></g><g><title>symbol_name (3,151,573 samples, 0.15%)</title><rect x="37.3409%" y="181" width="0.1516%" height="15" fill="rgb(239,60,40)"/><text x="37.5909%" y="191.50"></text></g><g><title>codegen_module (316,267,689 samples, 15.22%)</title><rect x="22.3283%" y="197" width="15.2161%" height="15" fill="rgb(206,27,48)"/><text x="22.5783%" y="207.50">codegen_module</text></g><g><title>codegen_crate (319,683,862 samples, 15.38%)</title><rect x="22.1705%" y="213" width="15.3804%" height="15" fill="rgb(225,35,8)"/><text x="22.4205%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,024,170,685 samples, 49.27%)</title><rect x="37.5626%" y="197" width="49.2743%" height="15" fill="rgb(250,213,24)"/><text x="37.8126%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (981,119,687 samples, 47.20%)</title><rect x="39.6338%" y="181" width="47.2030%" height="15" fill="rgb(247,123,22)"/><text x="39.8838%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,085,412,091 samples, 52.22%)</title><rect x="37.5509%" y="213" width="52.2207%" height="15" fill="rgb(231,138,38)"/><text x="37.8009%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (60,998,574 samples, 2.93%)</title><rect x="86.8369%" y="197" width="2.9347%" height="15" fill="rgb(231,145,46)"/><text x="87.0869%" y="207.50">LL..</text></g><g><title>metadata_register_crate (2,131,542 samples, 0.10%)</title><rect x="90.1975%" y="165" width="0.1026%" height="15" fill="rgb(251,118,11)"/><text x="90.4475%" y="175.50"></text></g><g><title>macro_expand_crate (10,771,898 samples, 0.52%)</title><rect x="89.7869%" y="197" width="0.5183%" height="15" fill="rgb(217,147,25)"/><text x="90.0369%" y="207.50"></text></g><g><title>expand_crate (10,761,418 samples, 0.52%)</title><rect x="89.7874%" y="181" width="0.5177%" height="15" fill="rgb(247,81,37)"/><text x="90.0374%" y="191.50"></text></g><g><title>late_resolve_crate (2,421,144 samples, 0.12%)</title><rect x="90.3135%" y="181" width="0.1165%" height="15" fill="rgb(209,12,38)"/><text x="90.5635%" y="191.50"></text></g><g><title>configure_and_expand (13,747,437 samples, 0.66%)</title><rect x="89.7716%" y="213" width="0.6614%" height="15" fill="rgb(227,1,9)"/><text x="90.0216%" y="223.50"></text></g><g><title>resolve_crate (2,591,476 samples, 0.12%)</title><rect x="90.3083%" y="197" width="0.1247%" height="15" fill="rgb(248,47,43)"/><text x="90.5583%" y="207.50"></text></g><g><title>free_global_ctxt (9,553,866 samples, 0.46%)</title><rect x="90.4490%" y="213" width="0.4596%" height="15" fill="rgb(221,10,30)"/><text x="90.6990%" y="223.50"></text></g><g><title>item_attrs (2,275,014 samples, 0.11%)</title><rect x="91.8404%" y="117" width="0.1095%" height="15" fill="rgb(210,229,1)"/><text x="92.0904%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,159,081 samples, 0.10%)</title><rect x="91.8460%" y="101" width="0.1039%" height="15" fill="rgb(222,148,37)"/><text x="92.0960%" y="111.50"></text></g><g><title>codegen_fn_attrs (4,084,370 samples, 0.20%)</title><rect x="91.8079%" y="133" width="0.1965%" height="15" fill="rgb(234,67,33)"/><text x="92.0579%" y="143.50"></text></g><g><title>mir_shims (4,200,603 samples, 0.20%)</title><rect x="92.0608%" y="133" width="0.2021%" height="15" fill="rgb(247,98,35)"/><text x="92.3108%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,803,340 samples, 0.33%)</title><rect x="92.3550%" y="117" width="0.3273%" height="15" fill="rgb(247,138,52)"/><text x="92.6050%" y="127.50"></text></g><g><title>optimized_mir (9,895,111 samples, 0.48%)</title><rect x="92.2630%" y="133" width="0.4761%" height="15" fill="rgb(213,79,30)"/><text x="92.5130%" y="143.50"></text></g><g><title>evaluate_obligation (3,602,935 samples, 0.17%)</title><rect x="93.4419%" y="101" width="0.1733%" height="15" fill="rgb(246,177,23)"/><text x="93.6919%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (14,300,112 samples, 0.69%)</title><rect x="92.9649%" y="117" width="0.6880%" height="15" fill="rgb(230,62,27)"/><text x="93.2149%" y="127.50"></text></g><g><title>is_copy_raw (2,108,849 samples, 0.10%)</title><rect x="93.7481%" y="101" width="0.1015%" height="15" fill="rgb(216,154,8)"/><text x="93.9981%" y="111.50"></text></g><g><title>needs_drop_raw (2,904,595 samples, 0.14%)</title><rect x="93.7119%" y="117" width="0.1397%" height="15" fill="rgb(244,35,45)"/><text x="93.9619%" y="127.50"></text></g><g><title>specialization_graph_of (7,927,826 samples, 0.38%)</title><rect x="93.8516%" y="117" width="0.3814%" height="15" fill="rgb(251,115,12)"/><text x="94.1016%" y="127.50"></text></g><g><title>impl_trait_ref (3,123,348 samples, 0.15%)</title><rect x="94.0828%" y="101" width="0.1503%" height="15" fill="rgb(240,54,50)"/><text x="94.3328%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,485,193 samples, 0.12%)</title><rect x="94.1135%" y="85" width="0.1196%" height="15" fill="rgb(233,84,52)"/><text x="94.3635%" y="95.50"></text></g><g><title>resolve_instance (32,228,186 samples, 1.55%)</title><rect x="92.7391%" y="133" width="1.5505%" height="15" fill="rgb(207,117,47)"/><text x="92.9891%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,252,429 samples, 0.11%)</title><rect x="94.2896%" y="133" width="0.1084%" height="15" fill="rgb(249,43,39)"/><text x="94.5396%" y="143.50"></text></g><g><title>eval_to_const_value_raw (5,317,439 samples, 0.26%)</title><rect x="94.5062%" y="117" width="0.2558%" height="15" fill="rgb(209,38,44)"/><text x="94.7562%" y="127.50"></text></g><g><title>eval_to_const_value_raw (5,112,247 samples, 0.25%)</title><rect x="94.5160%" y="101" width="0.2460%" height="15" fill="rgb(236,212,23)"/><text x="94.7660%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,823,045 samples, 0.23%)</title><rect x="94.5300%" y="85" width="0.2320%" height="15" fill="rgb(242,79,21)"/><text x="94.7800%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,704,032 samples, 0.37%)</title><rect x="94.3980%" y="133" width="0.3707%" height="15" fill="rgb(211,96,35)"/><text x="94.6480%" y="143.50"></text></g><g><title>upstream_drop_glue_for (2,804,140 samples, 0.13%)</title><rect x="94.7686%" y="133" width="0.1349%" height="15" fill="rgb(253,215,40)"/><text x="95.0186%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (2,756,608 samples, 0.13%)</title><rect x="94.7709%" y="117" width="0.1326%" height="15" fill="rgb(211,81,21)"/><text x="95.0209%" y="127.50"></text></g><g><title>upstream_monomorphizations (2,752,438 samples, 0.13%)</title><rect x="94.7711%" y="101" width="0.1324%" height="15" fill="rgb(208,190,38)"/><text x="95.0211%" y="111.50"></text></g><g><title>exported_symbols (2,315,462 samples, 0.11%)</title><rect x="94.7921%" y="85" width="0.1114%" height="15" fill="rgb(235,213,38)"/><text x="95.0421%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,304,062 samples, 0.11%)</title><rect x="94.7927%" y="69" width="0.1109%" height="15" fill="rgb(237,122,38)"/><text x="95.0427%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (81,674,987 samples, 3.93%)</title><rect x="91.0130%" y="149" width="3.9295%" height="15" fill="rgb(244,218,35)"/><text x="91.2630%" y="159.50">mono..</text></g><g><title>monomorphization_collector (81,727,778 samples, 3.93%)</title><rect x="91.0128%" y="165" width="3.9320%" height="15" fill="rgb(240,68,47)"/><text x="91.2628%" y="175.50">mono..</text></g><g><title>assert_symbols_are_distinct (7,893,819 samples, 0.38%)</title><rect x="94.9455%" y="149" width="0.3798%" height="15" fill="rgb(210,16,53)"/><text x="95.1955%" y="159.50"></text></g><g><title>symbol_name (6,997,060 samples, 0.34%)</title><rect x="94.9886%" y="133" width="0.3366%" height="15" fill="rgb(235,124,12)"/><text x="95.2386%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (93,314,104 samples, 4.49%)</title><rect x="91.0097%" y="181" width="4.4895%" height="15" fill="rgb(224,169,11)"/><text x="91.2597%" y="191.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (11,522,546 samples, 0.55%)</title><rect x="94.9448%" y="165" width="0.5544%" height="15" fill="rgb(250,166,2)"/><text x="95.1948%" y="175.50"></text></g><g><title>cgu_partitioning (3,615,047 samples, 0.17%)</title><rect x="95.3253%" y="149" width="0.1739%" height="15" fill="rgb(242,216,29)"/><text x="95.5753%" y="159.50"></text></g><g><title>exported_symbols (93,778,559 samples, 4.51%)</title><rect x="90.9908%" y="197" width="4.5118%" height="15" fill="rgb(230,116,27)"/><text x="91.2408%" y="207.50">expor..</text></g><g><title>layout_of (2,228,101 samples, 0.11%)</title><rect x="95.6677%" y="181" width="0.1072%" height="15" fill="rgb(228,99,48)"/><text x="95.9177%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,518,297 samples, 0.22%)</title><rect x="95.7749%" y="181" width="0.2174%" height="15" fill="rgb(253,11,6)"/><text x="96.0249%" y="191.50"></text></g><g><title>optimized_mir (10,565,168 samples, 0.51%)</title><rect x="95.5053%" y="197" width="0.5083%" height="15" fill="rgb(247,143,39)"/><text x="95.7553%" y="207.50"></text></g><g><title>generate_crate_metadata (106,248,364 samples, 5.11%)</title><rect x="90.9087%" y="213" width="5.1118%" height="15" fill="rgb(236,97,10)"/><text x="91.1587%" y="223.50">genera..</text></g><g><title>finish_ongoing_codegen (71,406,455 samples, 3.44%)</title><rect x="96.0989%" y="197" width="3.4355%" height="15" fill="rgb(233,208,19)"/><text x="96.3489%" y="207.50">fin..</text></g><g><title>link_crate (6,138,311 samples, 0.30%)</title><rect x="99.5344%" y="197" width="0.2953%" height="15" fill="rgb(216,164,2)"/><text x="99.7844%" y="207.50"></text></g><g><title>link_binary (6,032,370 samples, 0.29%)</title><rect x="99.5395%" y="181" width="0.2902%" height="15" fill="rgb(220,129,5)"/><text x="99.7895%" y="191.50"></text></g><g><title>link_rlib (4,835,559 samples, 0.23%)</title><rect x="99.5971%" y="165" width="0.2326%" height="15" fill="rgb(242,17,10)"/><text x="99.8471%" y="175.50"></text></g><g><title>link (77,574,467 samples, 3.73%)</title><rect x="96.0980%" y="213" width="3.7322%" height="15" fill="rgb(242,107,0)"/><text x="96.3480%" y="223.50">link</text></g><g><title>self_profile_alloc_query_strings (2,736,167 samples, 0.13%)</title><rect x="99.8479%" y="213" width="0.1316%" height="15" fill="rgb(251,28,31)"/><text x="100.0979%" y="223.50"></text></g><g><title>all (2,078,509,527 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,078,509,527 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>