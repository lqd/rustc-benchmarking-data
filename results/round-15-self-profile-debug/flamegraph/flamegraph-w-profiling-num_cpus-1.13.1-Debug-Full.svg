<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (187,506,294 samples, 16.34%)</title><rect x="0.0478%" y="165" width="16.3356%" height="15" fill="rgb(227,0,7)"/><text x="0.2978%" y="175.50">LLVM_passes</text></g><g><title>resolve_instance (1,247,213 samples, 0.11%)</title><rect x="17.6408%" y="53" width="0.1087%" height="15" fill="rgb(217,0,24)"/><text x="17.8908%" y="63.50"></text></g><g><title>mir_const (6,717,648 samples, 0.59%)</title><rect x="17.2302%" y="101" width="0.5852%" height="15" fill="rgb(221,193,54)"/><text x="17.4802%" y="111.50"></text></g><g><title>unsafety_check_result (5,849,370 samples, 0.51%)</title><rect x="17.3059%" y="85" width="0.5096%" height="15" fill="rgb(248,212,6)"/><text x="17.5559%" y="95.50"></text></g><g><title>mir_built (5,174,705 samples, 0.45%)</title><rect x="17.3647%" y="69" width="0.4508%" height="15" fill="rgb(208,68,35)"/><text x="17.6147%" y="79.50"></text></g><g><title>mir_promoted (7,817,749 samples, 0.68%)</title><rect x="17.1732%" y="117" width="0.6811%" height="15" fill="rgb(232,128,0)"/><text x="17.4232%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,683,815 samples, 0.15%)</title><rect x="17.9500%" y="117" width="0.1467%" height="15" fill="rgb(207,160,47)"/><text x="18.2000%" y="127.50"></text></g><g><title>MIR_borrow_checking (19,482,687 samples, 1.70%)</title><rect x="16.4002%" y="149" width="1.6973%" height="15" fill="rgb(228,23,34)"/><text x="16.6502%" y="159.50"></text></g><g><title>mir_borrowck (19,431,147 samples, 1.69%)</title><rect x="16.4047%" y="133" width="1.6928%" height="15" fill="rgb(218,30,26)"/><text x="16.6547%" y="143.50"></text></g><g><title>misc_checking_3 (1,792,258 samples, 0.16%)</title><rect x="18.2456%" y="149" width="0.1561%" height="15" fill="rgb(220,122,19)"/><text x="18.4956%" y="159.50"></text></g><g><title>evaluate_obligation (1,537,266 samples, 0.13%)</title><rect x="19.1158%" y="85" width="0.1339%" height="15" fill="rgb(250,228,42)"/><text x="19.3658%" y="95.50"></text></g><g><title>impl_trait_ref (1,808,427 samples, 0.16%)</title><rect x="20.6166%" y="53" width="0.1576%" height="15" fill="rgb(240,193,28)"/><text x="20.8666%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,619,364 samples, 0.14%)</title><rect x="20.6331%" y="37" width="0.1411%" height="15" fill="rgb(216,20,37)"/><text x="20.8831%" y="47.50"></text></g><g><title>evaluate_obligation (6,912,119 samples, 0.60%)</title><rect x="20.2587%" y="69" width="0.6022%" height="15" fill="rgb(206,188,39)"/><text x="20.5087%" y="79.50"></text></g><g><title>typeck (18,951,793 samples, 1.65%)</title><rect x="19.3291%" y="85" width="1.6511%" height="15" fill="rgb(217,207,13)"/><text x="19.5791%" y="95.50"></text></g><g><title>item_bodies_checking (29,546,069 samples, 2.57%)</title><rect x="18.4081%" y="133" width="2.5741%" height="15" fill="rgb(231,73,38)"/><text x="18.6581%" y="143.50">it..</text></g><g><title>typeck_item_bodies (29,543,389 samples, 2.57%)</title><rect x="18.4083%" y="117" width="2.5738%" height="15" fill="rgb(225,20,46)"/><text x="18.6583%" y="127.50">ty..</text></g><g><title>typeck (29,515,759 samples, 2.57%)</title><rect x="18.4107%" y="101" width="2.5714%" height="15" fill="rgb(210,31,41)"/><text x="18.6607%" y="111.50">ty..</text></g><g><title>analysis (56,161,650 samples, 4.89%)</title><rect x="16.3834%" y="165" width="4.8928%" height="15" fill="rgb(221,200,47)"/><text x="16.6334%" y="175.50">analys..</text></g><g><title>type_check_crate (32,994,185 samples, 2.87%)</title><rect x="18.4018%" y="149" width="2.8745%" height="15" fill="rgb(226,26,5)"/><text x="18.6518%" y="159.50">ty..</text></g><g><title>wf_checking (1,861,289 samples, 0.16%)</title><rect x="21.1141%" y="133" width="0.1622%" height="15" fill="rgb(249,33,26)"/><text x="21.3641%" y="143.50"></text></g><g><title>check_item_well_formed (1,181,991 samples, 0.10%)</title><rect x="21.1733%" y="117" width="0.1030%" height="15" fill="rgb(235,183,28)"/><text x="21.4233%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (2,789,257 samples, 0.24%)</title><rect x="33.1674%" y="133" width="0.2430%" height="15" fill="rgb(221,5,38)"/><text x="33.4174%" y="143.50"></text></g><g><title>const_caller_location (2,547,127 samples, 0.22%)</title><rect x="33.4104%" y="133" width="0.2219%" height="15" fill="rgb(247,18,42)"/><text x="33.6604%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,208,429 samples, 0.11%)</title><rect x="34.2484%" y="117" width="0.1053%" height="15" fill="rgb(241,131,45)"/><text x="34.4984%" y="127.50"></text></g><g><title>layout_of (3,490,510 samples, 0.30%)</title><rect x="34.3765%" y="117" width="0.3041%" height="15" fill="rgb(249,31,29)"/><text x="34.6265%" y="127.50"></text></g><g><title>explicit_predicates_of (1,242,648 samples, 0.11%)</title><rect x="35.4267%" y="69" width="0.1083%" height="15" fill="rgb(225,111,53)"/><text x="35.6767%" y="79.50"></text></g><g><title>predicates_of (3,291,840 samples, 0.29%)</title><rect x="35.2802%" y="101" width="0.2868%" height="15" fill="rgb(238,160,17)"/><text x="35.5302%" y="111.50"></text></g><g><title>predicates_defined_on (2,471,323 samples, 0.22%)</title><rect x="35.3517%" y="85" width="0.2153%" height="15" fill="rgb(214,148,48)"/><text x="35.6017%" y="95.50"></text></g><g><title>param_env (10,206,933 samples, 0.89%)</title><rect x="34.6806%" y="117" width="0.8892%" height="15" fill="rgb(232,36,49)"/><text x="34.9306%" y="127.50"></text></g><g><title>normalize_projection_ty (1,624,421 samples, 0.14%)</title><rect x="35.6206%" y="101" width="0.1415%" height="15" fill="rgb(209,103,24)"/><text x="35.8706%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,220,579 samples, 0.19%)</title><rect x="35.5698%" y="117" width="0.1935%" height="15" fill="rgb(229,88,8)"/><text x="35.8198%" y="127.50"></text></g><g><title>fn_abi_of_instance (24,423,757 samples, 2.13%)</title><rect x="33.6407%" y="133" width="2.1278%" height="15" fill="rgb(213,181,19)"/><text x="33.8907%" y="143.50">f..</text></g><g><title>layout_of (4,712,436 samples, 0.41%)</title><rect x="35.8997%" y="133" width="0.4105%" height="15" fill="rgb(254,191,54)"/><text x="36.1497%" y="143.50"></text></g><g><title>codegen_module (170,277,000 samples, 14.83%)</title><rect x="21.5697%" y="149" width="14.8346%" height="15" fill="rgb(241,83,37)"/><text x="21.8197%" y="159.50">codegen_module</text></g><g><title>codegen_crate (173,720,042 samples, 15.13%)</title><rect x="21.2768%" y="165" width="15.1346%" height="15" fill="rgb(233,36,39)"/><text x="21.5268%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (572,298,067 samples, 49.86%)</title><rect x="36.4315%" y="149" width="49.8588%" height="15" fill="rgb(226,3,54)"/><text x="36.6815%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (548,156,883 samples, 47.76%)</title><rect x="38.5347%" y="133" width="47.7557%" height="15" fill="rgb(245,192,40)"/><text x="38.7847%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (606,465,435 samples, 52.84%)</title><rect x="36.4114%" y="165" width="52.8355%" height="15" fill="rgb(238,167,29)"/><text x="36.6614%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (33,935,874 samples, 2.96%)</title><rect x="86.2904%" y="149" width="2.9565%" height="15" fill="rgb(232,182,51)"/><text x="86.5404%" y="159.50">LLV..</text></g><g><title>metadata_register_crate (1,224,723 samples, 0.11%)</title><rect x="90.0980%" y="117" width="0.1067%" height="15" fill="rgb(231,60,39)"/><text x="90.3480%" y="127.50"></text></g><g><title>macro_expand_crate (10,776,430 samples, 0.94%)</title><rect x="89.2737%" y="149" width="0.9388%" height="15" fill="rgb(208,69,12)"/><text x="89.5237%" y="159.50"></text></g><g><title>expand_crate (10,761,910 samples, 0.94%)</title><rect x="89.2750%" y="133" width="0.9376%" height="15" fill="rgb(235,93,37)"/><text x="89.5250%" y="143.50"></text></g><g><title>late_resolve_crate (3,972,851 samples, 0.35%)</title><rect x="90.2386%" y="133" width="0.3461%" height="15" fill="rgb(213,116,39)"/><text x="90.4886%" y="143.50"></text></g><g><title>configure_and_expand (15,420,107 samples, 1.34%)</title><rect x="89.2469%" y="165" width="1.3434%" height="15" fill="rgb(222,207,29)"/><text x="89.4969%" y="175.50"></text></g><g><title>resolve_crate (4,209,622 samples, 0.37%)</title><rect x="90.2236%" y="149" width="0.3667%" height="15" fill="rgb(206,96,30)"/><text x="90.4736%" y="159.50"></text></g><g><title>free_global_ctxt (8,462,687 samples, 0.74%)</title><rect x="90.6246%" y="165" width="0.7373%" height="15" fill="rgb(218,138,4)"/><text x="90.8746%" y="175.50"></text></g><g><title>item_attrs (3,038,531 samples, 0.26%)</title><rect x="92.0201%" y="69" width="0.2647%" height="15" fill="rgb(250,191,14)"/><text x="92.2701%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,909,830 samples, 0.25%)</title><rect x="92.0313%" y="53" width="0.2535%" height="15" fill="rgb(239,60,40)"/><text x="92.2813%" y="63.50"></text></g><g><title>codegen_fn_attrs (5,220,137 samples, 0.45%)</title><rect x="91.9527%" y="85" width="0.4548%" height="15" fill="rgb(206,27,48)"/><text x="92.2027%" y="95.50"></text></g><g><title>should_inherit_track_caller (1,408,189 samples, 0.12%)</title><rect x="92.2848%" y="69" width="0.1227%" height="15" fill="rgb(225,35,8)"/><text x="92.5348%" y="79.50"></text></g><g><title>mir_shims (1,541,537 samples, 0.13%)</title><rect x="92.4793%" y="85" width="0.1343%" height="15" fill="rgb(250,213,24)"/><text x="92.7293%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,332,772 samples, 0.55%)</title><rect x="92.8140%" y="69" width="0.5517%" height="15" fill="rgb(247,123,22)"/><text x="93.0640%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,897,090 samples, 0.17%)</title><rect x="93.3657%" y="69" width="0.1653%" height="15" fill="rgb(231,138,38)"/><text x="93.6157%" y="79.50"></text></g><g><title>optimized_mir (11,302,012 samples, 0.98%)</title><rect x="92.6138%" y="85" width="0.9846%" height="15" fill="rgb(231,145,46)"/><text x="92.8638%" y="95.50"></text></g><g><title>evaluate_obligation (1,565,654 samples, 0.14%)</title><rect x="94.2628%" y="53" width="0.1364%" height="15" fill="rgb(251,118,11)"/><text x="94.5128%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (8,451,860 samples, 0.74%)</title><rect x="93.8267%" y="69" width="0.7363%" height="15" fill="rgb(217,147,25)"/><text x="94.0767%" y="79.50"></text></g><g><title>needs_drop_raw (1,698,711 samples, 0.15%)</title><rect x="94.6850%" y="69" width="0.1480%" height="15" fill="rgb(247,81,37)"/><text x="94.9350%" y="79.50"></text></g><g><title>impl_parent (2,005,539 samples, 0.17%)</title><rect x="95.1159%" y="53" width="0.1747%" height="15" fill="rgb(209,12,38)"/><text x="95.3659%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,223,952 samples, 0.11%)</title><rect x="95.1840%" y="37" width="0.1066%" height="15" fill="rgb(227,1,9)"/><text x="95.4340%" y="47.50"></text></g><g><title>specialization_graph_of (8,617,823 samples, 0.75%)</title><rect x="94.8340%" y="69" width="0.7508%" height="15" fill="rgb(248,47,43)"/><text x="95.0840%" y="79.50"></text></g><g><title>impl_trait_ref (3,376,216 samples, 0.29%)</title><rect x="95.2907%" y="53" width="0.2941%" height="15" fill="rgb(221,10,30)"/><text x="95.5407%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,675,482 samples, 0.23%)</title><rect x="95.3517%" y="37" width="0.2331%" height="15" fill="rgb(210,229,1)"/><text x="95.6017%" y="47.50"></text></g><g><title>resolve_instance (23,836,279 samples, 2.08%)</title><rect x="93.5984%" y="85" width="2.0766%" height="15" fill="rgb(222,148,37)"/><text x="93.8484%" y="95.50">r..</text></g><g><title>eval_to_const_value_raw (1,870,989 samples, 0.16%)</title><rect x="95.7495%" y="69" width="0.1630%" height="15" fill="rgb(234,67,33)"/><text x="95.9995%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,833,699 samples, 0.16%)</title><rect x="95.7527%" y="53" width="0.1598%" height="15" fill="rgb(247,98,35)"/><text x="96.0027%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,766,718 samples, 0.15%)</title><rect x="95.7586%" y="37" width="0.1539%" height="15" fill="rgb(247,138,52)"/><text x="96.0086%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,226,471 samples, 0.19%)</title><rect x="95.7238%" y="85" width="0.1940%" height="15" fill="rgb(213,79,30)"/><text x="95.9738%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (52,341,591 samples, 4.56%)</title><rect x="91.4491%" y="101" width="4.5600%" height="15" fill="rgb(246,177,23)"/><text x="91.6991%" y="111.50">monom..</text></g><g><title>monomorphization_collector (52,372,562 samples, 4.56%)</title><rect x="91.4488%" y="117" width="4.5627%" height="15" fill="rgb(230,62,27)"/><text x="91.6988%" y="127.50">monom..</text></g><g><title>assert_symbols_are_distinct (4,734,958 samples, 0.41%)</title><rect x="96.0120%" y="101" width="0.4125%" height="15" fill="rgb(216,154,8)"/><text x="96.2620%" y="111.50"></text></g><g><title>symbol_name (4,300,874 samples, 0.37%)</title><rect x="96.0498%" y="85" width="0.3747%" height="15" fill="rgb(244,35,45)"/><text x="96.2998%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (59,422,584 samples, 5.18%)</title><rect x="91.4434%" y="133" width="5.1769%" height="15" fill="rgb(251,115,12)"/><text x="91.6934%" y="143.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (6,987,811 samples, 0.61%)</title><rect x="96.0115%" y="117" width="0.6088%" height="15" fill="rgb(240,54,50)"/><text x="96.2615%" y="127.50"></text></g><g><title>cgu_partitioning (2,247,383 samples, 0.20%)</title><rect x="96.4245%" y="101" width="0.1958%" height="15" fill="rgb(233,84,52)"/><text x="96.6745%" y="111.50"></text></g><g><title>exported_symbols (59,630,905 samples, 5.20%)</title><rect x="91.4281%" y="149" width="5.1951%" height="15" fill="rgb(207,117,47)"/><text x="91.6781%" y="159.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,234,653 samples, 0.11%)</title><rect x="96.7321%" y="133" width="0.1076%" height="15" fill="rgb(249,43,39)"/><text x="96.9821%" y="143.50"></text></g><g><title>impl_trait_ref (2,048,552 samples, 0.18%)</title><rect x="97.0060%" y="101" width="0.1785%" height="15" fill="rgb(209,38,44)"/><text x="97.2560%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,803,610 samples, 0.16%)</title><rect x="97.0274%" y="85" width="0.1571%" height="15" fill="rgb(236,212,23)"/><text x="97.2774%" y="95.50"></text></g><g><title>specialization_graph_of (3,889,629 samples, 0.34%)</title><rect x="96.8458%" y="117" width="0.3389%" height="15" fill="rgb(242,79,21)"/><text x="97.0958%" y="127.50"></text></g><g><title>optimized_mir (6,415,805 samples, 0.56%)</title><rect x="96.6261%" y="149" width="0.5589%" height="15" fill="rgb(211,96,35)"/><text x="96.8761%" y="159.50"></text></g><g><title>resolve_instance (3,964,580 samples, 0.35%)</title><rect x="96.8397%" y="133" width="0.3454%" height="15" fill="rgb(253,215,40)"/><text x="97.0897%" y="143.50"></text></g><g><title>generate_crate_metadata (67,019,141 samples, 5.84%)</title><rect x="91.3619%" y="165" width="5.8387%" height="15" fill="rgb(211,81,21)"/><text x="91.6119%" y="175.50">generat..</text></g><g><title>hir_lowering (1,369,294 samples, 0.12%)</title><rect x="97.2006%" y="165" width="0.1193%" height="15" fill="rgb(208,190,38)"/><text x="97.4506%" y="175.50"></text></g><g><title>finish_ongoing_codegen (22,697,820 samples, 1.98%)</title><rect x="97.3213%" y="149" width="1.9774%" height="15" fill="rgb(235,213,38)"/><text x="97.5713%" y="159.50">f..</text></g><g><title>link_crate (3,392,325 samples, 0.30%)</title><rect x="99.2988%" y="149" width="0.2955%" height="15" fill="rgb(237,122,38)"/><text x="99.5488%" y="159.50"></text></g><g><title>link_binary (3,345,845 samples, 0.29%)</title><rect x="99.3028%" y="133" width="0.2915%" height="15" fill="rgb(244,218,35)"/><text x="99.5528%" y="143.50"></text></g><g><title>link_rlib (2,567,996 samples, 0.22%)</title><rect x="99.3706%" y="117" width="0.2237%" height="15" fill="rgb(240,68,47)"/><text x="99.6206%" y="127.50"></text></g><g><title>link (26,117,925 samples, 2.28%)</title><rect x="97.3199%" y="165" width="2.2754%" height="15" fill="rgb(210,16,53)"/><text x="97.5699%" y="175.50">l..</text></g><g><title>parse_crate (1,389,524 samples, 0.12%)</title><rect x="99.5953%" y="165" width="0.1211%" height="15" fill="rgb(235,124,12)"/><text x="99.8453%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,675,637 samples, 0.23%)</title><rect x="99.7343%" y="165" width="0.2331%" height="15" fill="rgb(224,169,11)"/><text x="99.9843%" y="175.50"></text></g><g><title>all (1,147,836,680 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,147,836,680 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>