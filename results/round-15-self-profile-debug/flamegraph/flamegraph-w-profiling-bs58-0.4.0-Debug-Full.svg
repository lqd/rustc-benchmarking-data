<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (46,248,784 samples, 11.72%)</title><rect x="0.2405%" y="277" width="11.7160%" height="15" fill="rgb(227,0,7)"/><text x="0.4905%" y="287.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,108,002 samples, 0.28%)</title><rect x="16.4643%" y="165" width="0.2807%" height="15" fill="rgb(217,0,24)"/><text x="16.7143%" y="175.50"></text></g><g><title>is_copy_raw (783,597 samples, 0.20%)</title><rect x="16.5464%" y="149" width="0.1985%" height="15" fill="rgb(221,193,54)"/><text x="16.7964%" y="159.50"></text></g><g><title>evaluate_obligation (651,966 samples, 0.17%)</title><rect x="16.5798%" y="133" width="0.1652%" height="15" fill="rgb(248,212,6)"/><text x="16.8298%" y="143.50"></text></g><g><title>specialization_graph_of (944,731 samples, 0.24%)</title><rect x="16.8414%" y="149" width="0.2393%" height="15" fill="rgb(208,68,35)"/><text x="17.0914%" y="159.50"></text></g><g><title>impl_trait_ref (433,504 samples, 0.11%)</title><rect x="16.9709%" y="133" width="0.1098%" height="15" fill="rgb(232,128,0)"/><text x="17.2209%" y="143.50"></text></g><g><title>resolve_instance (1,380,975 samples, 0.35%)</title><rect x="16.7449%" y="165" width="0.3498%" height="15" fill="rgb(207,160,47)"/><text x="16.9949%" y="175.50"></text></g><g><title>thir_body (886,799 samples, 0.22%)</title><rect x="17.1010%" y="165" width="0.2246%" height="15" fill="rgb(228,23,34)"/><text x="17.3510%" y="175.50"></text></g><g><title>mir_const (7,587,648 samples, 1.92%)</title><rect x="15.4094%" y="213" width="1.9221%" height="15" fill="rgb(218,30,26)"/><text x="15.6594%" y="223.50">m..</text></g><g><title>unsafety_check_result (6,755,738 samples, 1.71%)</title><rect x="15.6201%" y="197" width="1.7114%" height="15" fill="rgb(220,122,19)"/><text x="15.8701%" y="207.50"></text></g><g><title>mir_built (6,021,303 samples, 1.53%)</title><rect x="15.8062%" y="181" width="1.5254%" height="15" fill="rgb(250,228,42)"/><text x="16.0562%" y="191.50"></text></g><g><title>mir_const (908,648 samples, 0.23%)</title><rect x="17.4283%" y="197" width="0.2302%" height="15" fill="rgb(240,193,28)"/><text x="17.6783%" y="207.50"></text></g><g><title>unsafety_check_result (674,646 samples, 0.17%)</title><rect x="17.4876%" y="181" width="0.1709%" height="15" fill="rgb(216,20,37)"/><text x="17.7376%" y="191.50"></text></g><g><title>mir_built (557,884 samples, 0.14%)</title><rect x="17.5171%" y="165" width="0.1413%" height="15" fill="rgb(206,188,39)"/><text x="17.7671%" y="175.50"></text></g><g><title>mir_const_qualif (1,322,282 samples, 0.33%)</title><rect x="17.3315%" y="213" width="0.3350%" height="15" fill="rgb(217,207,13)"/><text x="17.5815%" y="223.50"></text></g><g><title>mir_promoted (9,714,029 samples, 2.46%)</title><rect x="15.2068%" y="229" width="2.4608%" height="15" fill="rgb(231,73,38)"/><text x="15.4568%" y="239.50">mi..</text></g><g><title>type_op_normalize_fn_sig (1,152,602 samples, 0.29%)</title><rect x="17.7509%" y="229" width="0.2920%" height="15" fill="rgb(225,20,46)"/><text x="18.0009%" y="239.50"></text></g><g><title>normalize_projection_ty (815,776 samples, 0.21%)</title><rect x="17.8362%" y="213" width="0.2067%" height="15" fill="rgb(210,31,41)"/><text x="18.0862%" y="223.50"></text></g><g><title>type_op_prove_predicate (2,596,095 samples, 0.66%)</title><rect x="18.1086%" y="229" width="0.6577%" height="15" fill="rgb(221,200,47)"/><text x="18.3586%" y="239.50"></text></g><g><title>MIR_borrow_checking (26,268,013 samples, 6.65%)</title><rect x="12.1141%" y="261" width="6.6544%" height="15" fill="rgb(226,26,5)"/><text x="12.3641%" y="271.50">MIR_borro..</text></g><g><title>mir_borrowck (26,154,563 samples, 6.63%)</title><rect x="12.1429%" y="245" width="6.6256%" height="15" fill="rgb(249,33,26)"/><text x="12.3929%" y="255.50">mir_borro..</text></g><g><title>MIR_effect_checking (457,855 samples, 0.12%)</title><rect x="18.7685%" y="261" width="0.1160%" height="15" fill="rgb(235,183,28)"/><text x="19.0185%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (404,704 samples, 0.10%)</title><rect x="18.7820%" y="245" width="0.1025%" height="15" fill="rgb(221,5,38)"/><text x="19.0320%" y="255.50"></text></g><g><title>codegen_fn_attrs (654,318 samples, 0.17%)</title><rect x="19.1216%" y="229" width="0.1658%" height="15" fill="rgb(247,18,42)"/><text x="19.3716%" y="239.50"></text></g><g><title>check_mod_attrs (1,199,521 samples, 0.30%)</title><rect x="18.9835%" y="245" width="0.3039%" height="15" fill="rgb(241,131,45)"/><text x="19.2335%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (787,048 samples, 0.20%)</title><rect x="19.4049%" y="245" width="0.1994%" height="15" fill="rgb(249,31,29)"/><text x="19.6549%" y="255.50"></text></g><g><title>misc_checking_1 (2,597,746 samples, 0.66%)</title><rect x="18.9723%" y="261" width="0.6581%" height="15" fill="rgb(225,111,53)"/><text x="19.2223%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (445,395 samples, 0.11%)</title><rect x="19.6307%" y="245" width="0.1128%" height="15" fill="rgb(238,160,17)"/><text x="19.8807%" y="255.50"></text></g><g><title>misc_checking_2 (1,064,531 samples, 0.27%)</title><rect x="19.6303%" y="261" width="0.2697%" height="15" fill="rgb(214,148,48)"/><text x="19.8803%" y="271.50"></text></g><g><title>match_checking (617,496 samples, 0.16%)</title><rect x="19.7436%" y="245" width="0.1564%" height="15" fill="rgb(232,36,49)"/><text x="19.9936%" y="255.50"></text></g><g><title>check_match (587,656 samples, 0.15%)</title><rect x="19.7511%" y="229" width="0.1489%" height="15" fill="rgb(209,103,24)"/><text x="20.0011%" y="239.50"></text></g><g><title>death_checking (449,894 samples, 0.11%)</title><rect x="19.9504%" y="245" width="0.1140%" height="15" fill="rgb(229,88,8)"/><text x="20.2004%" y="255.50"></text></g><g><title>mir_for_ctfe (4,577,915 samples, 1.16%)</title><rect x="20.3802%" y="101" width="1.1597%" height="15" fill="rgb(213,181,19)"/><text x="20.6302%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,428,485 samples, 1.12%)</title><rect x="20.4180%" y="85" width="1.1218%" height="15" fill="rgb(254,191,54)"/><text x="20.6680%" y="95.50"></text></g><g><title>eval_to_const_value_raw (4,417,415 samples, 1.12%)</title><rect x="20.4208%" y="69" width="1.1190%" height="15" fill="rgb(241,83,37)"/><text x="20.6708%" y="79.50"></text></g><g><title>eval_to_const_value_raw (4,414,355 samples, 1.12%)</title><rect x="20.4216%" y="53" width="1.1183%" height="15" fill="rgb(233,36,39)"/><text x="20.6716%" y="63.50"></text></g><g><title>eval_to_allocation_raw (4,405,035 samples, 1.12%)</title><rect x="20.4240%" y="37" width="1.1159%" height="15" fill="rgb(226,3,54)"/><text x="20.6740%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,658,327 samples, 1.18%)</title><rect x="20.3618%" y="149" width="1.1801%" height="15" fill="rgb(245,192,40)"/><text x="20.6118%" y="159.50"></text></g><g><title>eval_to_const_value_raw (4,654,177 samples, 1.18%)</title><rect x="20.3628%" y="133" width="1.1790%" height="15" fill="rgb(238,167,29)"/><text x="20.6128%" y="143.50"></text></g><g><title>eval_to_allocation_raw (4,648,967 samples, 1.18%)</title><rect x="20.3642%" y="117" width="1.1777%" height="15" fill="rgb(232,182,51)"/><text x="20.6142%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,792,358 samples, 1.21%)</title><rect x="20.3301%" y="213" width="1.2140%" height="15" fill="rgb(231,60,39)"/><text x="20.5801%" y="223.50"></text></g><g><title>eval_to_const_value_raw (4,790,378 samples, 1.21%)</title><rect x="20.3306%" y="197" width="1.2135%" height="15" fill="rgb(208,69,12)"/><text x="20.5806%" y="207.50"></text></g><g><title>eval_to_allocation_raw (4,787,098 samples, 1.21%)</title><rect x="20.3314%" y="181" width="1.2127%" height="15" fill="rgb(235,93,37)"/><text x="20.5814%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,684,467 samples, 1.19%)</title><rect x="20.3574%" y="165" width="1.1867%" height="15" fill="rgb(213,116,39)"/><text x="20.6074%" y="175.50"></text></g><g><title>crate_lints (7,115,621 samples, 1.80%)</title><rect x="20.0651%" y="229" width="1.8026%" height="15" fill="rgb(222,207,29)"/><text x="20.3151%" y="239.50">c..</text></g><g><title>type_of (1,113,083 samples, 0.28%)</title><rect x="21.5857%" y="213" width="0.2820%" height="15" fill="rgb(206,96,30)"/><text x="21.8357%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (880,347 samples, 0.22%)</title><rect x="21.6447%" y="197" width="0.2230%" height="15" fill="rgb(218,138,4)"/><text x="21.8947%" y="207.50"></text></g><g><title>lint_checking (7,536,685 samples, 1.91%)</title><rect x="20.0644%" y="245" width="1.9092%" height="15" fill="rgb(250,191,14)"/><text x="20.3144%" y="255.50">l..</text></g><g><title>module_lints (418,174 samples, 0.11%)</title><rect x="21.8677%" y="229" width="0.1059%" height="15" fill="rgb(239,60,40)"/><text x="22.1177%" y="239.50"></text></g><g><title>lint_mod (411,924 samples, 0.10%)</title><rect x="21.8693%" y="213" width="0.1044%" height="15" fill="rgb(206,27,48)"/><text x="22.1193%" y="223.50"></text></g><g><title>privacy_checking_modules (771,308 samples, 0.20%)</title><rect x="22.0364%" y="245" width="0.1954%" height="15" fill="rgb(225,35,8)"/><text x="22.2864%" y="255.50"></text></g><g><title>check_mod_privacy (767,868 samples, 0.19%)</title><rect x="22.0372%" y="229" width="0.1945%" height="15" fill="rgb(250,213,24)"/><text x="22.2872%" y="239.50"></text></g><g><title>misc_checking_3 (9,220,372 samples, 2.34%)</title><rect x="19.9000%" y="261" width="2.3358%" height="15" fill="rgb(247,123,22)"/><text x="20.1500%" y="271.50">m..</text></g><g><title>impl_parent (2,476,140 samples, 0.63%)</title><rect x="23.4366%" y="197" width="0.6273%" height="15" fill="rgb(231,138,38)"/><text x="23.6866%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,345,931 samples, 0.34%)</title><rect x="23.7229%" y="181" width="0.3410%" height="15" fill="rgb(231,145,46)"/><text x="23.9729%" y="191.50"></text></g><g><title>impl_trait_ref (5,045,425 samples, 1.28%)</title><rect x="24.0639%" y="197" width="1.2781%" height="15" fill="rgb(251,118,11)"/><text x="24.3139%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,082,394 samples, 1.03%)</title><rect x="24.3079%" y="181" width="1.0342%" height="15" fill="rgb(217,147,25)"/><text x="24.5579%" y="191.50"></text></g><g><title>coherent_trait (12,989,120 samples, 3.29%)</title><rect x="22.2586%" y="229" width="3.2905%" height="15" fill="rgb(247,81,37)"/><text x="22.5086%" y="239.50">coh..</text></g><g><title>specialization_graph_of (12,197,262 samples, 3.09%)</title><rect x="22.4592%" y="213" width="3.0899%" height="15" fill="rgb(209,12,38)"/><text x="22.7092%" y="223.50">spe..</text></g><g><title>trait_impls_of (815,026 samples, 0.21%)</title><rect x="25.3426%" y="197" width="0.2065%" height="15" fill="rgb(227,1,9)"/><text x="25.5926%" y="207.50"></text></g><g><title>coherence_checking (13,099,022 samples, 3.32%)</title><rect x="22.2532%" y="245" width="3.3183%" height="15" fill="rgb(248,47,43)"/><text x="22.5032%" y="255.50">coh..</text></g><g><title>associated_items (407,515 samples, 0.10%)</title><rect x="29.9187%" y="197" width="0.1032%" height="15" fill="rgb(221,10,30)"/><text x="30.1687%" y="207.50"></text></g><g><title>generics_of (472,364 samples, 0.12%)</title><rect x="30.5675%" y="181" width="0.1197%" height="15" fill="rgb(210,229,1)"/><text x="30.8175%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (408,103 samples, 0.10%)</title><rect x="30.5838%" y="165" width="0.1034%" height="15" fill="rgb(222,148,37)"/><text x="30.8338%" y="175.50"></text></g><g><title>evaluate_obligation (3,108,298 samples, 0.79%)</title><rect x="30.1042%" y="197" width="0.7874%" height="15" fill="rgb(234,67,33)"/><text x="30.3542%" y="207.50"></text></g><g><title>generics_of (700,019 samples, 0.18%)</title><rect x="30.9267%" y="197" width="0.1773%" height="15" fill="rgb(247,98,35)"/><text x="31.1767%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (551,447 samples, 0.14%)</title><rect x="30.9644%" y="181" width="0.1397%" height="15" fill="rgb(247,138,52)"/><text x="31.2144%" y="191.50"></text></g><g><title>specializes (866,659 samples, 0.22%)</title><rect x="34.4716%" y="165" width="0.2195%" height="15" fill="rgb(213,79,30)"/><text x="34.7216%" y="175.50"></text></g><g><title>param_env (693,258 samples, 0.18%)</title><rect x="34.5156%" y="149" width="0.1756%" height="15" fill="rgb(246,177,23)"/><text x="34.7656%" y="159.50"></text></g><g><title>def_span (527,426 samples, 0.13%)</title><rect x="34.5576%" y="133" width="0.1336%" height="15" fill="rgb(230,62,27)"/><text x="34.8076%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (513,535 samples, 0.13%)</title><rect x="34.5611%" y="117" width="0.1301%" height="15" fill="rgb(216,154,8)"/><text x="34.8111%" y="127.50"></text></g><g><title>evaluate_obligation (2,932,881 samples, 0.74%)</title><rect x="34.0469%" y="181" width="0.7430%" height="15" fill="rgb(244,35,45)"/><text x="34.2969%" y="191.50"></text></g><g><title>generics_of (950,874 samples, 0.24%)</title><rect x="34.8096%" y="181" width="0.2409%" height="15" fill="rgb(251,115,12)"/><text x="35.0596%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (704,712 samples, 0.18%)</title><rect x="34.8719%" y="165" width="0.1785%" height="15" fill="rgb(240,54,50)"/><text x="35.1219%" y="175.50"></text></g><g><title>typeck (15,606,495 samples, 3.95%)</title><rect x="31.4436%" y="197" width="3.9535%" height="15" fill="rgb(233,84,52)"/><text x="31.6936%" y="207.50">type..</text></g><g><title>item_bodies_checking (38,764,130 samples, 9.82%)</title><rect x="25.5866%" y="245" width="9.8200%" height="15" fill="rgb(207,117,47)"/><text x="25.8366%" y="255.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (38,761,140 samples, 9.82%)</title><rect x="25.5874%" y="229" width="9.8192%" height="15" fill="rgb(249,43,39)"/><text x="25.8374%" y="239.50">typeck_item_bo..</text></g><g><title>typeck (38,685,818 samples, 9.80%)</title><rect x="25.6065%" y="213" width="9.8001%" height="15" fill="rgb(209,38,44)"/><text x="25.8565%" y="223.50">typeck</text></g><g><title>item_types_checking (1,167,171 samples, 0.30%)</title><rect x="35.4066%" y="245" width="0.2957%" height="15" fill="rgb(236,212,23)"/><text x="35.6566%" y="255.50"></text></g><g><title>check_mod_item_types (1,162,601 samples, 0.29%)</title><rect x="35.4077%" y="229" width="0.2945%" height="15" fill="rgb(242,79,21)"/><text x="35.6577%" y="239.50"></text></g><g><title>named_region_map (789,590 samples, 0.20%)</title><rect x="36.0237%" y="197" width="0.2000%" height="15" fill="rgb(211,96,35)"/><text x="36.2737%" y="207.50"></text></g><g><title>resolve_lifetimes (749,539 samples, 0.19%)</title><rect x="36.0338%" y="181" width="0.1899%" height="15" fill="rgb(253,215,40)"/><text x="36.2838%" y="191.50"></text></g><g><title>generics_of (1,243,495 samples, 0.32%)</title><rect x="35.9151%" y="213" width="0.3150%" height="15" fill="rgb(211,81,21)"/><text x="36.1651%" y="223.50"></text></g><g><title>explicit_predicates_of (412,102 samples, 0.10%)</title><rect x="36.3092%" y="181" width="0.1044%" height="15" fill="rgb(208,190,38)"/><text x="36.5592%" y="191.50"></text></g><g><title>predicates_of (989,657 samples, 0.25%)</title><rect x="36.2545%" y="213" width="0.2507%" height="15" fill="rgb(235,213,38)"/><text x="36.5045%" y="223.50"></text></g><g><title>predicates_defined_on (906,016 samples, 0.23%)</title><rect x="36.2757%" y="197" width="0.2295%" height="15" fill="rgb(237,122,38)"/><text x="36.5257%" y="207.50"></text></g><g><title>type_collecting (3,404,424 samples, 0.86%)</title><rect x="35.7027%" y="245" width="0.8624%" height="15" fill="rgb(244,218,35)"/><text x="35.9527%" y="255.50"></text></g><g><title>collect_mod_item_types (3,385,014 samples, 0.86%)</title><rect x="35.7076%" y="229" width="0.8575%" height="15" fill="rgb(240,68,47)"/><text x="35.9576%" y="239.50"></text></g><g><title>evaluate_obligation (481,254 samples, 0.12%)</title><rect x="36.9407%" y="213" width="0.1219%" height="15" fill="rgb(210,16,53)"/><text x="37.1907%" y="223.50"></text></g><g><title>check_impl_item_well_formed (2,546,367 samples, 0.65%)</title><rect x="36.6079%" y="229" width="0.6451%" height="15" fill="rgb(235,124,12)"/><text x="36.8579%" y="239.50"></text></g><g><title>check_item_well_formed (2,068,018 samples, 0.52%)</title><rect x="37.2529%" y="229" width="0.5239%" height="15" fill="rgb(224,169,11)"/><text x="37.5029%" y="239.50"></text></g><g><title>analysis (102,056,363 samples, 25.85%)</title><rect x="11.9565%" y="277" width="25.8535%" height="15" fill="rgb(250,166,2)"/><text x="12.2065%" y="287.50">analysis</text></g><g><title>type_check_crate (61,479,016 samples, 15.57%)</title><rect x="22.2358%" y="261" width="15.5742%" height="15" fill="rgb(242,216,29)"/><text x="22.4858%" y="271.50">type_check_crate</text></g><g><title>wf_checking (4,909,359 samples, 1.24%)</title><rect x="36.5663%" y="245" width="1.2437%" height="15" fill="rgb(230,116,27)"/><text x="36.8163%" y="255.50"></text></g><g><title>const_caller_location (921,921 samples, 0.23%)</title><rect x="46.0611%" y="245" width="0.2335%" height="15" fill="rgb(228,99,48)"/><text x="46.3111%" y="255.50"></text></g><g><title>codegen_fn_attrs (469,045 samples, 0.12%)</title><rect x="46.6685%" y="229" width="0.1188%" height="15" fill="rgb(253,11,6)"/><text x="46.9185%" y="239.50"></text></g><g><title>layout_of (896,918 samples, 0.23%)</title><rect x="46.8092%" y="229" width="0.2272%" height="15" fill="rgb(247,143,39)"/><text x="47.0592%" y="239.50"></text></g><g><title>predicates_of (630,470 samples, 0.16%)</title><rect x="47.4009%" y="213" width="0.1597%" height="15" fill="rgb(236,97,10)"/><text x="47.6509%" y="223.50"></text></g><g><title>predicates_defined_on (465,568 samples, 0.12%)</title><rect x="47.4427%" y="197" width="0.1179%" height="15" fill="rgb(233,208,19)"/><text x="47.6927%" y="207.50"></text></g><g><title>param_env (2,075,254 samples, 0.53%)</title><rect x="47.0364%" y="229" width="0.5257%" height="15" fill="rgb(216,164,2)"/><text x="47.2864%" y="239.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (719,106 samples, 0.18%)</title><rect x="47.5621%" y="229" width="0.1822%" height="15" fill="rgb(220,129,5)"/><text x="47.8121%" y="239.50"></text></g><g><title>normalize_projection_ty (557,656 samples, 0.14%)</title><rect x="47.6030%" y="213" width="0.1413%" height="15" fill="rgb(242,17,10)"/><text x="47.8530%" y="223.50"></text></g><g><title>fn_abi_of_instance (5,719,100 samples, 1.45%)</title><rect x="46.2990%" y="245" width="1.4488%" height="15" fill="rgb(242,107,0)"/><text x="46.5490%" y="255.50"></text></g><g><title>layout_of (673,527 samples, 0.17%)</title><rect x="47.8256%" y="245" width="0.1706%" height="15" fill="rgb(251,28,31)"/><text x="48.0756%" y="255.50"></text></g><g><title>codegen_module (37,397,054 samples, 9.47%)</title><rect x="38.6324%" y="261" width="9.4736%" height="15" fill="rgb(233,223,10)"/><text x="38.8824%" y="271.50">codegen_module</text></g><g><title>codegen_crate (40,704,638 samples, 10.31%)</title><rect x="37.8130%" y="277" width="10.3115%" height="15" fill="rgb(215,21,27)"/><text x="38.0630%" y="287.50">codegen_crate</text></g><g><title>LLVM_module_codegen (123,818,843 samples, 31.37%)</title><rect x="48.1696%" y="261" width="31.3665%" height="15" fill="rgb(232,23,21)"/><text x="48.4196%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (116,743,705 samples, 29.57%)</title><rect x="49.9619%" y="245" width="29.5742%" height="15" fill="rgb(244,5,23)"/><text x="50.2119%" y="255.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (134,600,850 samples, 34.10%)</title><rect x="48.1245%" y="277" width="34.0979%" height="15" fill="rgb(226,81,46)"/><text x="48.3745%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,603,956 samples, 2.69%)</title><rect x="79.5361%" y="261" width="2.6863%" height="15" fill="rgb(247,70,30)"/><text x="79.7861%" y="271.50">LL..</text></g><g><title>metadata_register_crate (2,169,412 samples, 0.55%)</title><rect x="88.1728%" y="229" width="0.5496%" height="15" fill="rgb(212,68,19)"/><text x="88.4228%" y="239.50"></text></g><g><title>metadata_register_crate (789,997 samples, 0.20%)</title><rect x="88.5222%" y="213" width="0.2001%" height="15" fill="rgb(240,187,13)"/><text x="88.7722%" y="223.50"></text></g><g><title>macro_expand_crate (25,203,892 samples, 6.38%)</title><rect x="82.4291%" y="261" width="6.3848%" height="15" fill="rgb(223,113,26)"/><text x="82.6791%" y="271.50">macro_ex..</text></g><g><title>expand_crate (25,185,882 samples, 6.38%)</title><rect x="82.4337%" y="245" width="6.3802%" height="15" fill="rgb(206,192,2)"/><text x="82.6837%" y="255.50">expand_c..</text></g><g><title>late_resolve_crate (5,043,681 samples, 1.28%)</title><rect x="88.9599%" y="245" width="1.2777%" height="15" fill="rgb(241,108,4)"/><text x="89.2099%" y="255.50"></text></g><g><title>configure_and_expand (31,892,059 samples, 8.08%)</title><rect x="82.2224%" y="277" width="8.0791%" height="15" fill="rgb(247,173,49)"/><text x="82.4724%" y="287.50">configure_a..</text></g><g><title>resolve_crate (5,731,787 samples, 1.45%)</title><rect x="88.8495%" y="261" width="1.4520%" height="15" fill="rgb(224,114,35)"/><text x="89.0995%" y="271.50"></text></g><g><title>drop_ast (426,475 samples, 0.11%)</title><rect x="90.3015%" y="277" width="0.1080%" height="15" fill="rgb(245,159,27)"/><text x="90.5515%" y="287.50"></text></g><g><title>early_lint_checks (866,048 samples, 0.22%)</title><rect x="90.4132%" y="277" width="0.2194%" height="15" fill="rgb(245,172,44)"/><text x="90.6632%" y="287.50"></text></g><g><title>free_global_ctxt (6,437,275 samples, 1.63%)</title><rect x="90.6326%" y="277" width="1.6307%" height="15" fill="rgb(236,23,11)"/><text x="90.8826%" y="287.50"></text></g><g><title>item_attrs (661,006 samples, 0.17%)</title><rect x="92.9163%" y="181" width="0.1674%" height="15" fill="rgb(205,117,38)"/><text x="93.1663%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (639,266 samples, 0.16%)</title><rect x="92.9218%" y="165" width="0.1619%" height="15" fill="rgb(237,72,25)"/><text x="93.1718%" y="175.50"></text></g><g><title>codegen_fn_attrs (996,648 samples, 0.25%)</title><rect x="92.8806%" y="197" width="0.2525%" height="15" fill="rgb(244,70,9)"/><text x="93.1306%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (908,159 samples, 0.23%)</title><rect x="93.6000%" y="181" width="0.2301%" height="15" fill="rgb(217,125,39)"/><text x="93.8500%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,114,112 samples, 0.28%)</title><rect x="93.8300%" y="181" width="0.2822%" height="15" fill="rgb(235,36,10)"/><text x="94.0800%" y="191.50"></text></g><g><title>optimized_mir (4,044,442 samples, 1.02%)</title><rect x="93.1897%" y="197" width="1.0246%" height="15" fill="rgb(251,123,47)"/><text x="93.4397%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (1,211,745 samples, 0.31%)</title><rect x="94.3042%" y="181" width="0.3070%" height="15" fill="rgb(221,13,13)"/><text x="94.5542%" y="191.50"></text></g><g><title>specialization_graph_of (1,406,263 samples, 0.36%)</title><rect x="94.6686%" y="181" width="0.3562%" height="15" fill="rgb(238,131,9)"/><text x="94.9186%" y="191.50"></text></g><g><title>impl_trait_ref (438,434 samples, 0.11%)</title><rect x="94.9138%" y="165" width="0.1111%" height="15" fill="rgb(211,50,8)"/><text x="95.1638%" y="175.50"></text></g><g><title>resolve_instance (3,366,344 samples, 0.85%)</title><rect x="94.2143%" y="197" width="0.8528%" height="15" fill="rgb(245,182,24)"/><text x="94.4643%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (10,009,971 samples, 2.54%)</title><rect x="92.6591%" y="213" width="2.5358%" height="15" fill="rgb(242,14,37)"/><text x="92.9091%" y="223.50">mo..</text></g><g><title>monomorphization_collector (10,051,571 samples, 2.55%)</title><rect x="92.6583%" y="229" width="2.5463%" height="15" fill="rgb(246,228,12)"/><text x="92.9083%" y="239.50">mo..</text></g><g><title>assert_symbols_are_distinct (870,728 samples, 0.22%)</title><rect x="95.2075%" y="213" width="0.2206%" height="15" fill="rgb(213,55,15)"/><text x="95.4575%" y="223.50"></text></g><g><title>symbol_name (800,868 samples, 0.20%)</title><rect x="95.2251%" y="197" width="0.2029%" height="15" fill="rgb(209,9,3)"/><text x="95.4751%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (11,374,464 samples, 2.88%)</title><rect x="92.6515%" y="245" width="2.8814%" height="15" fill="rgb(230,59,30)"/><text x="92.9015%" y="255.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,296,013 samples, 0.33%)</title><rect x="95.2046%" y="229" width="0.3283%" height="15" fill="rgb(209,121,21)"/><text x="95.4546%" y="239.50"></text></g><g><title>cgu_partitioning (414,134 samples, 0.10%)</title><rect x="95.4280%" y="213" width="0.1049%" height="15" fill="rgb(220,109,13)"/><text x="95.6780%" y="223.50"></text></g><g><title>exported_symbols (11,513,946 samples, 2.92%)</title><rect x="92.6398%" y="261" width="2.9168%" height="15" fill="rgb(232,18,1)"/><text x="92.8898%" y="271.50">ex..</text></g><g><title>layout_of (462,854 samples, 0.12%)</title><rect x="96.0160%" y="245" width="0.1173%" height="15" fill="rgb(215,41,42)"/><text x="96.2660%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,278,654 samples, 0.58%)</title><rect x="96.1332%" y="245" width="0.5772%" height="15" fill="rgb(224,123,36)"/><text x="96.3832%" y="255.50"></text></g><g><title>optimized_mir (4,488,304 samples, 1.14%)</title><rect x="95.5763%" y="261" width="1.1370%" height="15" fill="rgb(240,125,3)"/><text x="95.8263%" y="271.50"></text></g><g><title>generate_crate_metadata (17,615,437 samples, 4.46%)</title><rect x="92.2634%" y="277" width="4.4624%" height="15" fill="rgb(205,98,50)"/><text x="92.5134%" y="287.50">gener..</text></g><g><title>hir_lowering (6,342,605 samples, 1.61%)</title><rect x="96.7258%" y="277" width="1.6067%" height="15" fill="rgb(205,185,37)"/><text x="96.9758%" y="287.50"></text></g><g><title>finish_ongoing_codegen (1,068,571 samples, 0.27%)</title><rect x="98.3511%" y="261" width="0.2707%" height="15" fill="rgb(238,207,15)"/><text x="98.6011%" y="271.50"></text></g><g><title>link_crate (1,766,088 samples, 0.45%)</title><rect x="98.6218%" y="261" width="0.4474%" height="15" fill="rgb(213,199,42)"/><text x="98.8718%" y="271.50"></text></g><g><title>link_binary (1,747,468 samples, 0.44%)</title><rect x="98.6265%" y="245" width="0.4427%" height="15" fill="rgb(235,201,11)"/><text x="98.8765%" y="255.50"></text></g><g><title>link_rlib (1,192,662 samples, 0.30%)</title><rect x="98.7671%" y="229" width="0.3021%" height="15" fill="rgb(207,46,11)"/><text x="99.0171%" y="239.50"></text></g><g><title>link (2,919,609 samples, 0.74%)</title><rect x="98.3326%" y="277" width="0.7396%" height="15" fill="rgb(241,35,35)"/><text x="98.5826%" y="287.50"></text></g><g><title>parse_crate (884,759 samples, 0.22%)</title><rect x="99.0722%" y="277" width="0.2241%" height="15" fill="rgb(243,32,47)"/><text x="99.3222%" y="287.50"></text></g><g><title>prepare_outputs (398,804 samples, 0.10%)</title><rect x="99.2985%" y="277" width="0.1010%" height="15" fill="rgb(247,202,23)"/><text x="99.5485%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (1,834,858 samples, 0.46%)</title><rect x="99.3995%" y="277" width="0.4648%" height="15" fill="rgb(219,102,11)"/><text x="99.6495%" y="287.50"></text></g><g><title>all (394,748,709 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (394,748,709 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="303.50">rustc</text></g></svg></svg>