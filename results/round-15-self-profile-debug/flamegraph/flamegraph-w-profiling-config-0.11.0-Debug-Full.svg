<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (367,086,697 samples, 13.95%)</title><rect x="0.0478%" y="197" width="13.9523%" height="15" fill="rgb(227,0,7)"/><text x="0.2978%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (5,682,029 samples, 0.22%)</title><rect x="18.4479%" y="69" width="0.2160%" height="15" fill="rgb(217,0,24)"/><text x="18.6979%" y="79.50"></text></g><g><title>evaluate_obligation (4,724,499 samples, 0.18%)</title><rect x="18.4843%" y="53" width="0.1796%" height="15" fill="rgb(221,193,54)"/><text x="18.7343%" y="63.50"></text></g><g><title>needs_drop_raw (7,592,240 samples, 0.29%)</title><rect x="18.3759%" y="85" width="0.2886%" height="15" fill="rgb(248,212,6)"/><text x="18.6259%" y="95.50"></text></g><g><title>resolve_instance (4,882,669 samples, 0.19%)</title><rect x="18.6644%" y="85" width="0.1856%" height="15" fill="rgb(208,68,35)"/><text x="18.9144%" y="95.50"></text></g><g><title>thir_body (6,043,169 samples, 0.23%)</title><rect x="18.8565%" y="85" width="0.2297%" height="15" fill="rgb(232,128,0)"/><text x="19.1065%" y="95.50"></text></g><g><title>mir_const (47,765,958 samples, 1.82%)</title><rect x="17.2788%" y="133" width="1.8155%" height="15" fill="rgb(207,160,47)"/><text x="17.5288%" y="143.50">m..</text></g><g><title>unsafety_check_result (41,461,444 samples, 1.58%)</title><rect x="17.5184%" y="117" width="1.5759%" height="15" fill="rgb(228,23,34)"/><text x="17.7684%" y="127.50"></text></g><g><title>mir_built (37,289,551 samples, 1.42%)</title><rect x="17.6770%" y="101" width="1.4173%" height="15" fill="rgb(218,30,26)"/><text x="17.9270%" y="111.50"></text></g><g><title>mir_promoted (53,503,820 samples, 2.03%)</title><rect x="17.0861%" y="149" width="2.0336%" height="15" fill="rgb(220,122,19)"/><text x="17.3361%" y="159.50">m..</text></g><g><title>type_op_normalize_fn_sig (4,493,994 samples, 0.17%)</title><rect x="19.1863%" y="149" width="0.1708%" height="15" fill="rgb(250,228,42)"/><text x="19.4363%" y="159.50"></text></g><g><title>type_op_prove_predicate (15,125,966 samples, 0.57%)</title><rect x="19.4630%" y="149" width="0.5749%" height="15" fill="rgb(240,193,28)"/><text x="19.7130%" y="159.50"></text></g><g><title>MIR_borrow_checking (157,640,083 samples, 5.99%)</title><rect x="14.0478%" y="181" width="5.9916%" height="15" fill="rgb(216,20,37)"/><text x="14.2978%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (156,888,566 samples, 5.96%)</title><rect x="14.0764%" y="165" width="5.9630%" height="15" fill="rgb(206,188,39)"/><text x="14.3264%" y="175.50">mir_borr..</text></g><g><title>misc_checking_1 (5,179,642 samples, 0.20%)</title><rect x="20.0882%" y="181" width="0.1969%" height="15" fill="rgb(217,207,13)"/><text x="20.3382%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,938,609 samples, 0.11%)</title><rect x="20.2852%" y="165" width="0.1117%" height="15" fill="rgb(231,73,38)"/><text x="20.5352%" y="175.50"></text></g><g><title>misc_checking_2 (6,740,518 samples, 0.26%)</title><rect x="20.2851%" y="181" width="0.2562%" height="15" fill="rgb(225,20,46)"/><text x="20.5351%" y="191.50"></text></g><g><title>match_checking (3,799,989 samples, 0.14%)</title><rect x="20.3969%" y="165" width="0.1444%" height="15" fill="rgb(210,31,41)"/><text x="20.6469%" y="175.50"></text></g><g><title>check_match (3,608,826 samples, 0.14%)</title><rect x="20.4041%" y="149" width="0.1372%" height="15" fill="rgb(221,200,47)"/><text x="20.6541%" y="159.50"></text></g><g><title>crate_lints (6,118,892 samples, 0.23%)</title><rect x="20.6582%" y="149" width="0.2326%" height="15" fill="rgb(226,26,5)"/><text x="20.9082%" y="159.50"></text></g><g><title>lint_checking (8,921,460 samples, 0.34%)</title><rect x="20.6581%" y="165" width="0.3391%" height="15" fill="rgb(249,33,26)"/><text x="20.9081%" y="175.50"></text></g><g><title>module_lints (2,799,578 samples, 0.11%)</title><rect x="20.8908%" y="149" width="0.1064%" height="15" fill="rgb(235,183,28)"/><text x="21.1408%" y="159.50"></text></g><g><title>lint_mod (2,780,398 samples, 0.11%)</title><rect x="20.8915%" y="133" width="0.1057%" height="15" fill="rgb(221,5,38)"/><text x="21.1415%" y="143.50"></text></g><g><title>privacy_checking_modules (6,329,433 samples, 0.24%)</title><rect x="21.0632%" y="165" width="0.2406%" height="15" fill="rgb(247,18,42)"/><text x="21.3132%" y="175.50"></text></g><g><title>check_mod_privacy (6,313,273 samples, 0.24%)</title><rect x="21.0639%" y="149" width="0.2400%" height="15" fill="rgb(241,131,45)"/><text x="21.3139%" y="159.50"></text></g><g><title>misc_checking_3 (20,105,052 samples, 0.76%)</title><rect x="20.5413%" y="181" width="0.7642%" height="15" fill="rgb(249,31,29)"/><text x="20.7913%" y="191.50"></text></g><g><title>impl_parent (3,705,747 samples, 0.14%)</title><rect x="21.6084%" y="117" width="0.1408%" height="15" fill="rgb(225,111,53)"/><text x="21.8584%" y="127.50"></text></g><g><title>impl_trait_ref (7,982,376 samples, 0.30%)</title><rect x="21.7494%" y="117" width="0.3034%" height="15" fill="rgb(238,160,17)"/><text x="21.9994%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,458,550 samples, 0.25%)</title><rect x="21.8073%" y="101" width="0.2455%" height="15" fill="rgb(214,148,48)"/><text x="22.0573%" y="111.50"></text></g><g><title>coherent_trait (21,223,993 samples, 0.81%)</title><rect x="21.3191%" y="149" width="0.8067%" height="15" fill="rgb(232,36,49)"/><text x="21.5691%" y="159.50"></text></g><g><title>specialization_graph_of (20,694,127 samples, 0.79%)</title><rect x="21.3393%" y="133" width="0.7865%" height="15" fill="rgb(209,103,24)"/><text x="21.5893%" y="143.50"></text></g><g><title>coherence_checking (21,494,515 samples, 0.82%)</title><rect x="21.3177%" y="165" width="0.8170%" height="15" fill="rgb(229,88,8)"/><text x="21.5677%" y="175.50"></text></g><g><title>evaluate_obligation (8,996,876 samples, 0.34%)</title><rect x="27.0280%" y="117" width="0.3420%" height="15" fill="rgb(213,181,19)"/><text x="27.2780%" y="127.50"></text></g><g><title>evaluate_obligation (3,377,345 samples, 0.13%)</title><rect x="28.4300%" y="101" width="0.1284%" height="15" fill="rgb(254,191,54)"/><text x="28.6800%" y="111.50"></text></g><g><title>typeck (28,695,776 samples, 1.09%)</title><rect x="27.5638%" y="117" width="1.0907%" height="15" fill="rgb(241,83,37)"/><text x="27.8138%" y="127.50"></text></g><g><title>item_bodies_checking (171,634,773 samples, 6.52%)</title><rect x="22.1395%" y="165" width="6.5235%" height="15" fill="rgb(233,36,39)"/><text x="22.3895%" y="175.50">item_bodi..</text></g><g><title>typeck_item_bodies (171,631,123 samples, 6.52%)</title><rect x="22.1397%" y="149" width="6.5234%" height="15" fill="rgb(226,3,54)"/><text x="22.3897%" y="159.50">typeck_it..</text></g><g><title>typeck (171,130,029 samples, 6.50%)</title><rect x="22.1587%" y="133" width="6.5043%" height="15" fill="rgb(245,192,40)"/><text x="22.4087%" y="143.50">typeck</text></g><g><title>mir_built (4,694,477 samples, 0.18%)</title><rect x="29.1546%" y="53" width="0.1784%" height="15" fill="rgb(238,167,29)"/><text x="29.4046%" y="63.50"></text></g><g><title>typeck (4,312,543 samples, 0.16%)</title><rect x="29.1691%" y="37" width="0.1639%" height="15" fill="rgb(232,182,51)"/><text x="29.4191%" y="47.50"></text></g><g><title>mir_const (5,081,261 samples, 0.19%)</title><rect x="29.1459%" y="85" width="0.1931%" height="15" fill="rgb(231,60,39)"/><text x="29.3959%" y="95.50"></text></g><g><title>unsafety_check_result (4,883,949 samples, 0.19%)</title><rect x="29.1534%" y="69" width="0.1856%" height="15" fill="rgb(208,69,12)"/><text x="29.4034%" y="79.50"></text></g><g><title>mir_promoted (5,157,971 samples, 0.20%)</title><rect x="29.1432%" y="101" width="0.1960%" height="15" fill="rgb(235,93,37)"/><text x="29.3932%" y="111.50"></text></g><g><title>type_of (8,427,765 samples, 0.32%)</title><rect x="29.0635%" y="133" width="0.3203%" height="15" fill="rgb(213,116,39)"/><text x="29.3135%" y="143.50"></text></g><g><title>mir_borrowck (8,376,754 samples, 0.32%)</title><rect x="29.0654%" y="117" width="0.3184%" height="15" fill="rgb(222,207,29)"/><text x="29.3154%" y="127.50"></text></g><g><title>item_types_checking (19,614,247 samples, 0.75%)</title><rect x="28.6631%" y="165" width="0.7455%" height="15" fill="rgb(206,96,30)"/><text x="28.9131%" y="175.50"></text></g><g><title>check_mod_item_types (19,595,467 samples, 0.74%)</title><rect x="28.6638%" y="149" width="0.7448%" height="15" fill="rgb(218,138,4)"/><text x="28.9138%" y="159.50"></text></g><g><title>generics_of (2,988,951 samples, 0.11%)</title><rect x="29.5619%" y="133" width="0.1136%" height="15" fill="rgb(250,191,14)"/><text x="29.8119%" y="143.50"></text></g><g><title>type_collecting (9,948,051 samples, 0.38%)</title><rect x="29.4090%" y="165" width="0.3781%" height="15" fill="rgb(239,60,40)"/><text x="29.6590%" y="175.50"></text></g><g><title>collect_mod_item_types (9,913,900 samples, 0.38%)</title><rect x="29.4103%" y="149" width="0.3768%" height="15" fill="rgb(206,27,48)"/><text x="29.6603%" y="159.50"></text></g><g><title>check_impl_item_well_formed (18,986,744 samples, 0.72%)</title><rect x="29.8248%" y="149" width="0.7217%" height="15" fill="rgb(225,35,8)"/><text x="30.0748%" y="159.50"></text></g><g><title>check_item_well_formed (6,460,337 samples, 0.25%)</title><rect x="30.5465%" y="149" width="0.2455%" height="15" fill="rgb(250,213,24)"/><text x="30.7965%" y="159.50"></text></g><g><title>analysis (442,124,351 samples, 16.80%)</title><rect x="14.0001%" y="197" width="16.8043%" height="15" fill="rgb(247,123,22)"/><text x="14.2501%" y="207.50">analysis</text></g><g><title>type_check_crate (249,919,830 samples, 9.50%)</title><rect x="21.3055%" y="181" width="9.4990%" height="15" fill="rgb(231,138,38)"/><text x="21.5555%" y="191.50">type_check_cra..</text></g><g><title>wf_checking (26,737,749 samples, 1.02%)</title><rect x="29.7882%" y="165" width="1.0163%" height="15" fill="rgb(231,145,46)"/><text x="30.0382%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (7,257,338 samples, 0.28%)</title><rect x="40.5924%" y="165" width="0.2758%" height="15" fill="rgb(251,118,11)"/><text x="40.8424%" y="175.50"></text></g><g><title>const_caller_location (3,294,862 samples, 0.13%)</title><rect x="40.8682%" y="165" width="0.1252%" height="15" fill="rgb(217,147,25)"/><text x="41.1182%" y="175.50"></text></g><g><title>layout_of (4,145,804 samples, 0.16%)</title><rect x="41.6023%" y="149" width="0.1576%" height="15" fill="rgb(247,81,37)"/><text x="41.8523%" y="159.50"></text></g><g><title>predicates_of (3,659,381 samples, 0.14%)</title><rect x="42.0713%" y="133" width="0.1391%" height="15" fill="rgb(209,12,38)"/><text x="42.3213%" y="143.50"></text></g><g><title>predicates_defined_on (2,671,228 samples, 0.10%)</title><rect x="42.1089%" y="117" width="0.1015%" height="15" fill="rgb(227,1,9)"/><text x="42.3589%" y="127.50"></text></g><g><title>param_env (11,871,042 samples, 0.45%)</title><rect x="41.7599%" y="149" width="0.4512%" height="15" fill="rgb(248,47,43)"/><text x="42.0099%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,872,286 samples, 0.19%)</title><rect x="42.2110%" y="149" width="0.1852%" height="15" fill="rgb(221,10,30)"/><text x="42.4610%" y="159.50"></text></g><g><title>normalize_projection_ty (3,595,548 samples, 0.14%)</title><rect x="42.2596%" y="133" width="0.1367%" height="15" fill="rgb(210,229,1)"/><text x="42.5096%" y="143.50"></text></g><g><title>fn_abi_of_instance (36,948,924 samples, 1.40%)</title><rect x="40.9995%" y="165" width="1.4044%" height="15" fill="rgb(222,148,37)"/><text x="41.2495%" y="175.50"></text></g><g><title>layout_of (5,880,292 samples, 0.22%)</title><rect x="42.4756%" y="165" width="0.2235%" height="15" fill="rgb(234,67,33)"/><text x="42.7256%" y="175.50"></text></g><g><title>symbol_name (4,001,529 samples, 0.15%)</title><rect x="42.7009%" y="165" width="0.1521%" height="15" fill="rgb(247,98,35)"/><text x="42.9509%" y="175.50"></text></g><g><title>codegen_module (314,195,096 samples, 11.94%)</title><rect x="30.9470%" y="181" width="11.9420%" height="15" fill="rgb(247,138,52)"/><text x="31.1970%" y="191.50">codegen_module</text></g><g><title>codegen_crate (318,068,835 samples, 12.09%)</title><rect x="30.8049%" y="197" width="12.0892%" height="15" fill="rgb(213,79,30)"/><text x="31.0549%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,134,704,545 samples, 43.13%)</title><rect x="42.9041%" y="181" width="43.1280%" height="15" fill="rgb(246,177,23)"/><text x="43.1541%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,082,450,873 samples, 41.14%)</title><rect x="44.8901%" y="165" width="41.1420%" height="15" fill="rgb(230,62,27)"/><text x="45.1401%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,182,426,597 samples, 44.94%)</title><rect x="42.8941%" y="197" width="44.9419%" height="15" fill="rgb(216,154,8)"/><text x="43.1441%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (47,459,609 samples, 1.80%)</title><rect x="86.0321%" y="181" width="1.8039%" height="15" fill="rgb(244,35,45)"/><text x="86.2821%" y="191.50">L..</text></g><g><title>macro_expand_crate (51,949,352 samples, 1.97%)</title><rect x="87.8775%" y="181" width="1.9745%" height="15" fill="rgb(251,115,12)"/><text x="88.1275%" y="191.50">m..</text></g><g><title>expand_crate (51,934,141 samples, 1.97%)</title><rect x="87.8780%" y="165" width="1.9739%" height="15" fill="rgb(240,54,50)"/><text x="88.1280%" y="175.50">e..</text></g><g><title>late_resolve_crate (7,908,359 samples, 0.30%)</title><rect x="89.8778%" y="165" width="0.3006%" height="15" fill="rgb(233,84,52)"/><text x="90.1278%" y="175.50"></text></g><g><title>configure_and_expand (62,212,784 samples, 2.36%)</title><rect x="87.8360%" y="197" width="2.3646%" height="15" fill="rgb(207,117,47)"/><text x="88.0860%" y="207.50">co..</text></g><g><title>resolve_crate (9,041,801 samples, 0.34%)</title><rect x="89.8569%" y="181" width="0.3437%" height="15" fill="rgb(249,43,39)"/><text x="90.1069%" y="191.50"></text></g><g><title>free_global_ctxt (54,527,028 samples, 2.07%)</title><rect x="90.3005%" y="197" width="2.0725%" height="15" fill="rgb(209,38,44)"/><text x="90.5505%" y="207.50">f..</text></g><g><title>item_attrs (3,189,482 samples, 0.12%)</title><rect x="93.1664%" y="101" width="0.1212%" height="15" fill="rgb(236,212,23)"/><text x="93.4164%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (3,054,361 samples, 0.12%)</title><rect x="93.1715%" y="85" width="0.1161%" height="15" fill="rgb(242,79,21)"/><text x="93.4215%" y="95.50"></text></g><g><title>codegen_fn_attrs (5,246,234 samples, 0.20%)</title><rect x="93.1340%" y="117" width="0.1994%" height="15" fill="rgb(211,96,35)"/><text x="93.3840%" y="127.50"></text></g><g><title>layout_of (2,693,787 samples, 0.10%)</title><rect x="93.9355%" y="101" width="0.1024%" height="15" fill="rgb(253,215,40)"/><text x="94.1855%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,536,980 samples, 0.25%)</title><rect x="94.0379%" y="101" width="0.2485%" height="15" fill="rgb(211,81,21)"/><text x="94.2879%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (16,146,592 samples, 0.61%)</title><rect x="94.2863%" y="101" width="0.6137%" height="15" fill="rgb(208,190,38)"/><text x="94.5363%" y="111.50"></text></g><g><title>optimized_mir (39,213,604 samples, 1.49%)</title><rect x="93.4785%" y="117" width="1.4904%" height="15" fill="rgb(235,213,38)"/><text x="93.7285%" y="127.50"></text></g><g><title>evaluate_obligation (2,871,039 samples, 0.11%)</title><rect x="95.6005%" y="85" width="0.1091%" height="15" fill="rgb(237,122,38)"/><text x="95.8505%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (15,858,879 samples, 0.60%)</title><rect x="95.1577%" y="101" width="0.6028%" height="15" fill="rgb(244,218,35)"/><text x="95.4077%" y="111.50"></text></g><g><title>specialization_graph_of (3,170,932 samples, 0.12%)</title><rect x="95.9142%" y="101" width="0.1205%" height="15" fill="rgb(240,68,47)"/><text x="96.1642%" y="111.50"></text></g><g><title>resolve_instance (29,094,518 samples, 1.11%)</title><rect x="94.9689%" y="117" width="1.1058%" height="15" fill="rgb(210,16,53)"/><text x="95.2189%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (8,184,432 samples, 0.31%)</title><rect x="96.2211%" y="117" width="0.3111%" height="15" fill="rgb(235,124,12)"/><text x="96.4711%" y="127.50"></text></g><g><title>upstream_monomorphizations (8,066,282 samples, 0.31%)</title><rect x="96.2256%" y="101" width="0.3066%" height="15" fill="rgb(224,169,11)"/><text x="96.4756%" y="111.50"></text></g><g><title>exported_symbols (7,092,041 samples, 0.27%)</title><rect x="96.2626%" y="85" width="0.2696%" height="15" fill="rgb(250,166,2)"/><text x="96.5126%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (7,081,391 samples, 0.27%)</title><rect x="96.2630%" y="69" width="0.2692%" height="15" fill="rgb(242,216,29)"/><text x="96.5130%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (104,442,009 samples, 3.97%)</title><rect x="92.6585%" y="133" width="3.9696%" height="15" fill="rgb(230,116,27)"/><text x="92.9085%" y="143.50">mono..</text></g><g><title>monomorphization_collector (104,711,212 samples, 3.98%)</title><rect x="92.6583%" y="149" width="3.9799%" height="15" fill="rgb(228,99,48)"/><text x="92.9083%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (9,093,581 samples, 0.35%)</title><rect x="96.6383%" y="133" width="0.3456%" height="15" fill="rgb(253,11,6)"/><text x="96.8883%" y="143.50"></text></g><g><title>symbol_name (8,222,732 samples, 0.31%)</title><rect x="96.6714%" y="117" width="0.3125%" height="15" fill="rgb(247,143,39)"/><text x="96.9214%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (117,873,104 samples, 4.48%)</title><rect x="92.6554%" y="165" width="4.4801%" height="15" fill="rgb(236,97,10)"/><text x="92.9054%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (13,085,861 samples, 0.50%)</title><rect x="96.6382%" y="149" width="0.4974%" height="15" fill="rgb(233,208,19)"/><text x="96.8882%" y="159.50"></text></g><g><title>cgu_partitioning (3,987,340 samples, 0.15%)</title><rect x="96.9840%" y="133" width="0.1516%" height="15" fill="rgb(216,164,2)"/><text x="97.2340%" y="143.50"></text></g><g><title>exported_symbols (118,813,174 samples, 4.52%)</title><rect x="92.6404%" y="181" width="4.5159%" height="15" fill="rgb(220,129,5)"/><text x="92.8904%" y="191.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (16,640,366 samples, 0.63%)</title><rect x="97.6347%" y="165" width="0.6325%" height="15" fill="rgb(242,17,10)"/><text x="97.8847%" y="175.50"></text></g><g><title>optimized_mir (29,046,030 samples, 1.10%)</title><rect x="97.1706%" y="181" width="1.1040%" height="15" fill="rgb(242,107,0)"/><text x="97.4206%" y="191.50"></text></g><g><title>generate_crate_metadata (155,622,123 samples, 5.91%)</title><rect x="92.3730%" y="197" width="5.9149%" height="15" fill="rgb(251,28,31)"/><text x="92.6230%" y="207.50">generate..</text></g><g><title>hir_lowering (15,087,362 samples, 0.57%)</title><rect x="98.2879%" y="197" width="0.5734%" height="15" fill="rgb(233,223,10)"/><text x="98.5379%" y="207.50"></text></g><g><title>finish_ongoing_codegen (17,394,214 samples, 0.66%)</title><rect x="98.8622%" y="181" width="0.6611%" height="15" fill="rgb(215,21,27)"/><text x="99.1122%" y="191.50"></text></g><g><title>link_crate (7,408,565 samples, 0.28%)</title><rect x="99.5234%" y="181" width="0.2816%" height="15" fill="rgb(232,23,21)"/><text x="99.7734%" y="191.50"></text></g><g><title>link_binary (7,206,053 samples, 0.27%)</title><rect x="99.5311%" y="165" width="0.2739%" height="15" fill="rgb(244,5,23)"/><text x="99.7811%" y="175.50"></text></g><g><title>link_rlib (5,733,588 samples, 0.22%)</title><rect x="99.5870%" y="149" width="0.2179%" height="15" fill="rgb(226,81,46)"/><text x="99.8370%" y="159.50"></text></g><g><title>link (24,834,319 samples, 0.94%)</title><rect x="98.8613%" y="197" width="0.9439%" height="15" fill="rgb(247,70,30)"/><text x="99.1113%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (3,716,357 samples, 0.14%)</title><rect x="99.8319%" y="197" width="0.1413%" height="15" fill="rgb(212,68,19)"/><text x="100.0819%" y="207.50"></text></g><g><title>all (2,631,013,316 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,631,013,316 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>