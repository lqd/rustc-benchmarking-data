<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,760,510,527 samples, 19.86%)</title><rect x="0.0120%" y="197" width="19.8635%" height="15" fill="rgb(227,0,7)"/><text x="0.2620%" y="207.50">LLVM_passes</text></g><g><title>mir_const (29,156,486 samples, 0.33%)</title><rect x="20.4848%" y="133" width="0.3290%" height="15" fill="rgb(217,0,24)"/><text x="20.7348%" y="143.50"></text></g><g><title>unsafety_check_result (25,540,532 samples, 0.29%)</title><rect x="20.5256%" y="117" width="0.2882%" height="15" fill="rgb(221,193,54)"/><text x="20.7756%" y="127.50"></text></g><g><title>mir_built (23,017,064 samples, 0.26%)</title><rect x="20.5541%" y="101" width="0.2597%" height="15" fill="rgb(248,212,6)"/><text x="20.8041%" y="111.50"></text></g><g><title>mir_promoted (32,707,527 samples, 0.37%)</title><rect x="20.4508%" y="149" width="0.3690%" height="15" fill="rgb(208,68,35)"/><text x="20.7008%" y="159.50"></text></g><g><title>type_op_prove_predicate (14,262,928 samples, 0.16%)</title><rect x="20.9059%" y="149" width="0.1609%" height="15" fill="rgb(232,128,0)"/><text x="21.1559%" y="159.50"></text></g><g><title>MIR_borrow_checking (104,846,757 samples, 1.18%)</title><rect x="19.8841%" y="181" width="1.1830%" height="15" fill="rgb(207,160,47)"/><text x="20.1341%" y="191.50"></text></g><g><title>mir_borrowck (104,401,313 samples, 1.18%)</title><rect x="19.8891%" y="165" width="1.1779%" height="15" fill="rgb(228,23,34)"/><text x="20.1391%" y="175.50"></text></g><g><title>misc_checking_3 (13,189,394 samples, 0.15%)</title><rect x="21.1613%" y="181" width="0.1488%" height="15" fill="rgb(218,30,26)"/><text x="21.4113%" y="191.50"></text></g><g><title>coherent_trait (18,957,902 samples, 0.21%)</title><rect x="21.3128%" y="149" width="0.2139%" height="15" fill="rgb(220,122,19)"/><text x="21.5628%" y="159.50"></text></g><g><title>specialization_graph_of (18,928,002 samples, 0.21%)</title><rect x="21.3132%" y="133" width="0.2136%" height="15" fill="rgb(250,228,42)"/><text x="21.5632%" y="143.50"></text></g><g><title>coherence_checking (19,105,254 samples, 0.22%)</title><rect x="21.3125%" y="165" width="0.2156%" height="15" fill="rgb(240,193,28)"/><text x="21.5625%" y="175.50"></text></g><g><title>evaluate_obligation (60,498,358 samples, 0.68%)</title><rect x="22.6243%" y="101" width="0.6826%" height="15" fill="rgb(216,20,37)"/><text x="22.8743%" y="111.50"></text></g><g><title>typeck (119,173,884 samples, 1.34%)</title><rect x="22.0357%" y="117" width="1.3446%" height="15" fill="rgb(206,188,39)"/><text x="22.2857%" y="127.50"></text></g><g><title>item_bodies_checking (164,151,169 samples, 1.85%)</title><rect x="21.5289%" y="165" width="1.8521%" height="15" fill="rgb(217,207,13)"/><text x="21.7789%" y="175.50">i..</text></g><g><title>typeck_item_bodies (164,146,669 samples, 1.85%)</title><rect x="21.5290%" y="149" width="1.8520%" height="15" fill="rgb(231,73,38)"/><text x="21.7790%" y="159.50">t..</text></g><g><title>typeck (163,894,965 samples, 1.85%)</title><rect x="21.5318%" y="133" width="1.8492%" height="15" fill="rgb(225,20,46)"/><text x="21.7818%" y="143.50">t..</text></g><g><title>mir_borrowck (10,193,923 samples, 0.12%)</title><rect x="23.4398%" y="101" width="0.1150%" height="15" fill="rgb(210,31,41)"/><text x="23.6898%" y="111.50"></text></g><g><title>mir_built (27,310,918 samples, 0.31%)</title><rect x="23.5583%" y="53" width="0.3081%" height="15" fill="rgb(221,200,47)"/><text x="23.8083%" y="63.50"></text></g><g><title>typeck (26,610,791 samples, 0.30%)</title><rect x="23.5662%" y="37" width="0.3002%" height="15" fill="rgb(226,26,5)"/><text x="23.8162%" y="47.50"></text></g><g><title>mir_const (30,650,703 samples, 0.35%)</title><rect x="23.5560%" y="85" width="0.3458%" height="15" fill="rgb(249,33,26)"/><text x="23.8060%" y="95.50"></text></g><g><title>unsafety_check_result (30,494,442 samples, 0.34%)</title><rect x="23.5578%" y="69" width="0.3441%" height="15" fill="rgb(235,183,28)"/><text x="23.8078%" y="79.50"></text></g><g><title>mir_promoted (30,763,993 samples, 0.35%)</title><rect x="23.5548%" y="101" width="0.3471%" height="15" fill="rgb(221,5,38)"/><text x="23.8048%" y="111.50"></text></g><g><title>type_of (43,159,458 samples, 0.49%)</title><rect x="23.4208%" y="133" width="0.4870%" height="15" fill="rgb(247,18,42)"/><text x="23.6708%" y="143.50"></text></g><g><title>mir_borrowck (43,084,648 samples, 0.49%)</title><rect x="23.4216%" y="117" width="0.4861%" height="15" fill="rgb(241,131,45)"/><text x="23.6716%" y="127.50"></text></g><g><title>item_types_checking (47,311,391 samples, 0.53%)</title><rect x="23.3810%" y="165" width="0.5338%" height="15" fill="rgb(249,31,29)"/><text x="23.6310%" y="175.50"></text></g><g><title>check_mod_item_types (47,295,031 samples, 0.53%)</title><rect x="23.3812%" y="149" width="0.5336%" height="15" fill="rgb(225,111,53)"/><text x="23.6312%" y="159.50"></text></g><g><title>check_impl_item_well_formed (9,786,464 samples, 0.11%)</title><rect x="23.9881%" y="149" width="0.1104%" height="15" fill="rgb(238,160,17)"/><text x="24.2381%" y="159.50"></text></g><g><title>analysis (380,898,675 samples, 4.30%)</title><rect x="19.8755%" y="197" width="4.2976%" height="15" fill="rgb(214,148,48)"/><text x="20.1255%" y="207.50">analy..</text></g><g><title>type_check_crate (253,746,211 samples, 2.86%)</title><rect x="21.3101%" y="181" width="2.8630%" height="15" fill="rgb(232,36,49)"/><text x="21.5601%" y="191.50">ty..</text></g><g><title>wf_checking (16,960,703 samples, 0.19%)</title><rect x="23.9817%" y="165" width="0.1914%" height="15" fill="rgb(209,103,24)"/><text x="24.2317%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (97,302,613 samples, 1.10%)</title><rect x="38.0612%" y="165" width="1.0978%" height="15" fill="rgb(229,88,8)"/><text x="38.3112%" y="175.50"></text></g><g><title>layout_of (20,981,510 samples, 0.24%)</title><rect x="39.9374%" y="149" width="0.2367%" height="15" fill="rgb(213,181,19)"/><text x="40.1874%" y="159.50"></text></g><g><title>predicates_of (11,967,257 samples, 0.14%)</title><rect x="40.4195%" y="133" width="0.1350%" height="15" fill="rgb(254,191,54)"/><text x="40.6695%" y="143.50"></text></g><g><title>param_env (33,801,299 samples, 0.38%)</title><rect x="40.1741%" y="149" width="0.3814%" height="15" fill="rgb(241,83,37)"/><text x="40.4241%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (42,603,110 samples, 0.48%)</title><rect x="40.5555%" y="149" width="0.4807%" height="15" fill="rgb(233,36,39)"/><text x="40.8055%" y="159.50"></text></g><g><title>normalize_projection_ty (37,817,090 samples, 0.43%)</title><rect x="40.6095%" y="133" width="0.4267%" height="15" fill="rgb(226,3,54)"/><text x="40.8595%" y="143.50"></text></g><g><title>fn_abi_of_instance (157,670,313 samples, 1.78%)</title><rect x="39.2621%" y="165" width="1.7790%" height="15" fill="rgb(245,192,40)"/><text x="39.5121%" y="175.50">f..</text></g><g><title>layout_of (27,390,167 samples, 0.31%)</title><rect x="41.0996%" y="165" width="0.3090%" height="15" fill="rgb(238,167,29)"/><text x="41.3496%" y="175.50"></text></g><g><title>symbol_name (12,478,445 samples, 0.14%)</title><rect x="41.4114%" y="165" width="0.1408%" height="15" fill="rgb(232,182,51)"/><text x="41.6614%" y="175.50"></text></g><g><title>codegen_module (1,539,816,862 samples, 17.37%)</title><rect x="24.2391%" y="181" width="17.3734%" height="15" fill="rgb(231,60,39)"/><text x="24.4891%" y="191.50">codegen_module</text></g><g><title>codegen_crate (1,545,896,263 samples, 17.44%)</title><rect x="24.1732%" y="197" width="17.4420%" height="15" fill="rgb(208,69,12)"/><text x="24.4232%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (3,723,339,511 samples, 42.01%)</title><rect x="41.6190%" y="181" width="42.0097%" height="15" fill="rgb(235,93,37)"/><text x="41.8690%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (3,390,580,255 samples, 38.26%)</title><rect x="45.3735%" y="165" width="38.2552%" height="15" fill="rgb(213,116,39)"/><text x="45.6235%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (4,022,240,392 samples, 45.38%)</title><rect x="41.6152%" y="197" width="45.3821%" height="15" fill="rgb(222,207,29)"/><text x="41.8652%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (298,565,046 samples, 3.37%)</title><rect x="83.6287%" y="181" width="3.3686%" height="15" fill="rgb(206,96,30)"/><text x="83.8787%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (21,986,473 samples, 0.25%)</title><rect x="88.3917%" y="149" width="0.2481%" height="15" fill="rgb(218,138,4)"/><text x="88.6417%" y="159.50"></text></g><g><title>metadata_register_crate (13,499,557 samples, 0.15%)</title><rect x="88.4875%" y="133" width="0.1523%" height="15" fill="rgb(250,191,14)"/><text x="88.7375%" y="143.50"></text></g><g><title>metadata_register_crate (10,565,217 samples, 0.12%)</title><rect x="88.5206%" y="117" width="0.1192%" height="15" fill="rgb(239,60,40)"/><text x="88.7706%" y="127.50"></text></g><g><title>macro_expand_crate (145,575,601 samples, 1.64%)</title><rect x="87.0068%" y="181" width="1.6425%" height="15" fill="rgb(206,27,48)"/><text x="87.2568%" y="191.50"></text></g><g><title>expand_crate (145,562,210 samples, 1.64%)</title><rect x="87.0069%" y="165" width="1.6423%" height="15" fill="rgb(225,35,8)"/><text x="87.2569%" y="175.50"></text></g><g><title>configure_and_expand (153,222,668 samples, 1.73%)</title><rect x="86.9974%" y="197" width="1.7288%" height="15" fill="rgb(250,213,24)"/><text x="87.2474%" y="207.50"></text></g><g><title>free_global_ctxt (32,378,580 samples, 0.37%)</title><rect x="88.7472%" y="197" width="0.3653%" height="15" fill="rgb(247,123,22)"/><text x="88.9972%" y="207.50"></text></g><g><title>codegen_fn_attrs (11,442,187 samples, 0.13%)</title><rect x="89.9057%" y="117" width="0.1291%" height="15" fill="rgb(231,138,38)"/><text x="90.1557%" y="127.50"></text></g><g><title>evaluate_obligation (13,235,315 samples, 0.15%)</title><rect x="90.1146%" y="101" width="0.1493%" height="15" fill="rgb(231,145,46)"/><text x="90.3646%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (20,324,448 samples, 0.23%)</title><rect x="90.0348%" y="117" width="0.2293%" height="15" fill="rgb(251,118,11)"/><text x="90.2848%" y="127.50"></text></g><g><title>mir_shims (17,942,087 samples, 0.20%)</title><rect x="90.3086%" y="117" width="0.2024%" height="15" fill="rgb(217,147,25)"/><text x="90.5586%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (27,097,624 samples, 0.31%)</title><rect x="90.6161%" y="101" width="0.3057%" height="15" fill="rgb(247,81,37)"/><text x="90.8661%" y="111.50"></text></g><g><title>optimized_mir (45,029,713 samples, 0.51%)</title><rect x="90.5111%" y="117" width="0.5081%" height="15" fill="rgb(209,12,38)"/><text x="90.7611%" y="127.50"></text></g><g><title>evaluate_obligation (18,435,189 samples, 0.21%)</title><rect x="92.0298%" y="85" width="0.2080%" height="15" fill="rgb(227,1,9)"/><text x="92.2798%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (94,538,677 samples, 1.07%)</title><rect x="91.2249%" y="101" width="1.0667%" height="15" fill="rgb(248,47,43)"/><text x="91.4749%" y="111.50"></text></g><g><title>needs_drop_raw (12,526,944 samples, 0.14%)</title><rect x="92.3526%" y="101" width="0.1413%" height="15" fill="rgb(221,10,30)"/><text x="92.6026%" y="111.50"></text></g><g><title>resolve_instance (142,933,090 samples, 1.61%)</title><rect x="91.0192%" y="117" width="1.6127%" height="15" fill="rgb(210,229,1)"/><text x="91.2692%" y="127.50"></text></g><g><title>normalize_projection_ty (18,337,615 samples, 0.21%)</title><rect x="92.6769%" y="101" width="0.2069%" height="15" fill="rgb(222,148,37)"/><text x="92.9269%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (22,381,949 samples, 0.25%)</title><rect x="92.6318%" y="117" width="0.2525%" height="15" fill="rgb(234,67,33)"/><text x="92.8818%" y="127.50"></text></g><g><title>eval_to_const_value_raw (17,664,359 samples, 0.20%)</title><rect x="92.9364%" y="101" width="0.1993%" height="15" fill="rgb(247,98,35)"/><text x="93.1864%" y="111.50"></text></g><g><title>eval_to_const_value_raw (17,159,296 samples, 0.19%)</title><rect x="92.9421%" y="85" width="0.1936%" height="15" fill="rgb(247,138,52)"/><text x="93.1921%" y="95.50"></text></g><g><title>eval_to_allocation_raw (16,291,540 samples, 0.18%)</title><rect x="92.9519%" y="69" width="0.1838%" height="15" fill="rgb(213,79,30)"/><text x="93.2019%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (22,946,131 samples, 0.26%)</title><rect x="92.8844%" y="117" width="0.2589%" height="15" fill="rgb(246,177,23)"/><text x="93.1344%" y="127.50"></text></g><g><title>upstream_drop_glue_for (10,726,040 samples, 0.12%)</title><rect x="93.1433%" y="117" width="0.1210%" height="15" fill="rgb(230,62,27)"/><text x="93.3933%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (10,535,087 samples, 0.12%)</title><rect x="93.1454%" y="101" width="0.1189%" height="15" fill="rgb(216,154,8)"/><text x="93.3954%" y="111.50"></text></g><g><title>upstream_monomorphizations (10,529,657 samples, 0.12%)</title><rect x="93.1455%" y="85" width="0.1188%" height="15" fill="rgb(244,35,45)"/><text x="93.3955%" y="95.50"></text></g><g><title>exported_symbols (9,448,127 samples, 0.11%)</title><rect x="93.1577%" y="69" width="0.1066%" height="15" fill="rgb(251,115,12)"/><text x="93.4077%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (9,429,167 samples, 0.11%)</title><rect x="93.1579%" y="53" width="0.1064%" height="15" fill="rgb(240,54,50)"/><text x="93.4079%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (365,835,661 samples, 4.13%)</title><rect x="89.2228%" y="133" width="4.1276%" height="15" fill="rgb(233,84,52)"/><text x="89.4728%" y="143.50">mono..</text></g><g><title>monomorphization_collector (366,012,573 samples, 4.13%)</title><rect x="89.2227%" y="149" width="4.1296%" height="15" fill="rgb(207,117,47)"/><text x="89.4727%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (47,436,282 samples, 0.54%)</title><rect x="93.3524%" y="133" width="0.5352%" height="15" fill="rgb(249,43,39)"/><text x="93.6024%" y="143.50"></text></g><g><title>symbol_name (42,599,425 samples, 0.48%)</title><rect x="93.4070%" y="117" width="0.4806%" height="15" fill="rgb(209,38,44)"/><text x="93.6570%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (428,235,296 samples, 4.83%)</title><rect x="89.2193%" y="165" width="4.8317%" height="15" fill="rgb(236,212,23)"/><text x="89.4693%" y="175.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (61,919,480 samples, 0.70%)</title><rect x="93.3524%" y="149" width="0.6986%" height="15" fill="rgb(242,79,21)"/><text x="93.6024%" y="159.50"></text></g><g><title>cgu_partitioning (14,476,217 samples, 0.16%)</title><rect x="93.8876%" y="133" width="0.1633%" height="15" fill="rgb(211,96,35)"/><text x="94.1376%" y="143.50"></text></g><g><title>exported_symbols (430,653,881 samples, 4.86%)</title><rect x="89.1949%" y="181" width="4.8590%" height="15" fill="rgb(253,215,40)"/><text x="89.4449%" y="191.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (18,383,112 samples, 0.21%)</title><rect x="94.2381%" y="165" width="0.2074%" height="15" fill="rgb(211,81,21)"/><text x="94.4881%" y="175.50"></text></g><g><title>optimized_mir (34,792,479 samples, 0.39%)</title><rect x="94.0562%" y="181" width="0.3926%" height="15" fill="rgb(208,190,38)"/><text x="94.3062%" y="191.50"></text></g><g><title>generate_crate_metadata (473,568,337 samples, 5.34%)</title><rect x="89.1126%" y="197" width="5.3432%" height="15" fill="rgb(235,213,38)"/><text x="89.3626%" y="207.50">generat..</text></g><g><title>finish_ongoing_codegen (297,323,124 samples, 3.35%)</title><rect x="94.5527%" y="181" width="3.3546%" height="15" fill="rgb(237,122,38)"/><text x="94.8027%" y="191.50">fin..</text></g><g><title>link_binary_remove_temps (146,654,831 samples, 1.65%)</title><rect x="97.9170%" y="149" width="1.6547%" height="15" fill="rgb(244,218,35)"/><text x="98.1670%" y="159.50"></text></g><g><title>link_crate (169,721,816 samples, 1.91%)</title><rect x="97.9074%" y="181" width="1.9149%" height="15" fill="rgb(240,68,47)"/><text x="98.1574%" y="191.50">l..</text></g><g><title>link_binary (169,423,793 samples, 1.91%)</title><rect x="97.9107%" y="165" width="1.9116%" height="15" fill="rgb(210,16,53)"/><text x="98.1607%" y="175.50">l..</text></g><g><title>link_rlib (22,216,756 samples, 0.25%)</title><rect x="99.5717%" y="149" width="0.2507%" height="15" fill="rgb(235,124,12)"/><text x="99.8217%" y="159.50"></text></g><g><title>link (467,078,820 samples, 5.27%)</title><rect x="94.5525%" y="197" width="5.2700%" height="15" fill="rgb(224,169,11)"/><text x="94.8025%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (10,975,142 samples, 0.12%)</title><rect x="99.8674%" y="197" width="0.1238%" height="15" fill="rgb(250,166,2)"/><text x="100.1174%" y="207.50"></text></g><g><title>all (8,863,049,940 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (8,863,049,940 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>