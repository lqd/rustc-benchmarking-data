<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,911,920 samples, 14.63%)</title><rect x="0.3645%" y="181" width="14.6264%" height="15" fill="rgb(227,0,7)"/><text x="0.6145%" y="191.50">LLVM_passes</text></g><g><title>param_env (166,632 samples, 0.14%)</title><rect x="19.3829%" y="101" width="0.1361%" height="15" fill="rgb(217,0,24)"/><text x="19.6329%" y="111.50"></text></g><g><title>item_attrs (243,671 samples, 0.20%)</title><rect x="19.7326%" y="69" width="0.1990%" height="15" fill="rgb(221,193,54)"/><text x="19.9826%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (235,821 samples, 0.19%)</title><rect x="19.7390%" y="53" width="0.1926%" height="15" fill="rgb(248,212,6)"/><text x="19.9890%" y="63.50"></text></g><g><title>codegen_fn_attrs (315,013 samples, 0.26%)</title><rect x="19.6817%" y="85" width="0.2572%" height="15" fill="rgb(208,68,35)"/><text x="19.9317%" y="95.50"></text></g><g><title>adt_drop_tys (148,182 samples, 0.12%)</title><rect x="20.9911%" y="53" width="0.1210%" height="15" fill="rgb(232,128,0)"/><text x="21.2411%" y="63.50"></text></g><g><title>needs_drop_raw (368,962 samples, 0.30%)</title><rect x="20.9651%" y="69" width="0.3013%" height="15" fill="rgb(207,160,47)"/><text x="21.2151%" y="79.50"></text></g><g><title>is_copy_raw (188,970 samples, 0.15%)</title><rect x="21.1121%" y="53" width="0.1543%" height="15" fill="rgb(228,23,34)"/><text x="21.3621%" y="63.50"></text></g><g><title>evaluate_obligation (152,080 samples, 0.12%)</title><rect x="21.1422%" y="37" width="0.1242%" height="15" fill="rgb(218,30,26)"/><text x="21.3922%" y="47.50"></text></g><g><title>thir_body (502,664 samples, 0.41%)</title><rect x="21.3628%" y="69" width="0.4105%" height="15" fill="rgb(220,122,19)"/><text x="21.6128%" y="79.50"></text></g><g><title>mir_const (3,395,251 samples, 2.77%)</title><rect x="19.0302%" y="117" width="2.7725%" height="15" fill="rgb(250,228,42)"/><text x="19.2802%" y="127.50">mi..</text></g><g><title>unsafety_check_result (2,796,685 samples, 2.28%)</title><rect x="19.5190%" y="101" width="2.2837%" height="15" fill="rgb(240,193,28)"/><text x="19.7690%" y="111.50">u..</text></g><g><title>mir_built (2,282,471 samples, 1.86%)</title><rect x="19.9389%" y="85" width="1.8638%" height="15" fill="rgb(216,20,37)"/><text x="20.1889%" y="95.50">m..</text></g><g><title>mir_promoted (3,783,186 samples, 3.09%)</title><rect x="18.7306%" y="133" width="3.0893%" height="15" fill="rgb(206,188,39)"/><text x="18.9806%" y="143.50">mir..</text></g><g><title>type_op_normalize_fn_sig (245,634 samples, 0.20%)</title><rect x="21.8815%" y="133" width="0.2006%" height="15" fill="rgb(217,207,13)"/><text x="22.1315%" y="143.50"></text></g><g><title>type_op_normalize_predicate (223,583 samples, 0.18%)</title><rect x="22.0820%" y="133" width="0.1826%" height="15" fill="rgb(231,73,38)"/><text x="22.3320%" y="143.50"></text></g><g><title>type_op_prove_predicate (777,895 samples, 0.64%)</title><rect x="22.2917%" y="133" width="0.6352%" height="15" fill="rgb(225,20,46)"/><text x="22.5417%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,564,387 samples, 7.81%)</title><rect x="15.1197%" y="165" width="7.8100%" height="15" fill="rgb(210,31,41)"/><text x="15.3697%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (9,503,884 samples, 7.76%)</title><rect x="15.1691%" y="149" width="7.7606%" height="15" fill="rgb(221,200,47)"/><text x="15.4191%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (194,281 samples, 0.16%)</title><rect x="23.1369%" y="133" width="0.1586%" height="15" fill="rgb(226,26,5)"/><text x="23.3869%" y="143.50"></text></g><g><title>check_mod_attrs (311,692 samples, 0.25%)</title><rect x="23.0411%" y="149" width="0.2545%" height="15" fill="rgb(249,33,26)"/><text x="23.2911%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (291,493 samples, 0.24%)</title><rect x="23.3812%" y="149" width="0.2380%" height="15" fill="rgb(235,183,28)"/><text x="23.6312%" y="159.50"></text></g><g><title>misc_checking_1 (761,127 samples, 0.62%)</title><rect x="23.0248%" y="165" width="0.6215%" height="15" fill="rgb(221,5,38)"/><text x="23.2748%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (194,642 samples, 0.16%)</title><rect x="23.6475%" y="149" width="0.1589%" height="15" fill="rgb(247,18,42)"/><text x="23.8975%" y="159.50"></text></g><g><title>check_mod_liveness (148,161 samples, 0.12%)</title><rect x="23.6854%" y="133" width="0.1210%" height="15" fill="rgb(241,131,45)"/><text x="23.9354%" y="143.50"></text></g><g><title>misc_checking_2 (481,505 samples, 0.39%)</title><rect x="23.6463%" y="165" width="0.3932%" height="15" fill="rgb(249,31,29)"/><text x="23.8963%" y="175.50"></text></g><g><title>match_checking (285,383 samples, 0.23%)</title><rect x="23.8064%" y="149" width="0.2330%" height="15" fill="rgb(225,111,53)"/><text x="24.0564%" y="159.50"></text></g><g><title>check_match (270,423 samples, 0.22%)</title><rect x="23.8186%" y="133" width="0.2208%" height="15" fill="rgb(238,160,17)"/><text x="24.0686%" y="143.50"></text></g><g><title>death_checking (236,943 samples, 0.19%)</title><rect x="24.1303%" y="149" width="0.1935%" height="15" fill="rgb(214,148,48)"/><text x="24.3803%" y="159.50"></text></g><g><title>param_env (160,431 samples, 0.13%)</title><rect x="24.5786%" y="117" width="0.1310%" height="15" fill="rgb(232,36,49)"/><text x="24.8286%" y="127.50"></text></g><g><title>crate_lints (755,247 samples, 0.62%)</title><rect x="24.3247%" y="133" width="0.6167%" height="15" fill="rgb(209,103,24)"/><text x="24.5747%" y="143.50"></text></g><g><title>type_of (275,711 samples, 0.23%)</title><rect x="24.7163%" y="117" width="0.2251%" height="15" fill="rgb(229,88,8)"/><text x="24.9663%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (198,640 samples, 0.16%)</title><rect x="24.7792%" y="101" width="0.1622%" height="15" fill="rgb(213,181,19)"/><text x="25.0292%" y="111.50"></text></g><g><title>lint_checking (915,059 samples, 0.75%)</title><rect x="24.3238%" y="149" width="0.7472%" height="15" fill="rgb(254,191,54)"/><text x="24.5738%" y="159.50"></text></g><g><title>module_lints (158,702 samples, 0.13%)</title><rect x="24.9414%" y="133" width="0.1296%" height="15" fill="rgb(241,83,37)"/><text x="25.1914%" y="143.50"></text></g><g><title>lint_mod (154,602 samples, 0.13%)</title><rect x="24.9447%" y="117" width="0.1262%" height="15" fill="rgb(233,36,39)"/><text x="25.1947%" y="127.50"></text></g><g><title>privacy_access_levels (125,881 samples, 0.10%)</title><rect x="25.0710%" y="149" width="0.1028%" height="15" fill="rgb(226,3,54)"/><text x="25.3210%" y="159.50"></text></g><g><title>privacy_checking_modules (341,063 samples, 0.28%)</title><rect x="25.1738%" y="149" width="0.2785%" height="15" fill="rgb(245,192,40)"/><text x="25.4238%" y="159.50"></text></g><g><title>check_mod_privacy (337,893 samples, 0.28%)</title><rect x="25.1764%" y="133" width="0.2759%" height="15" fill="rgb(238,167,29)"/><text x="25.4264%" y="143.50"></text></g><g><title>misc_checking_3 (1,739,877 samples, 1.42%)</title><rect x="24.0395%" y="165" width="1.4207%" height="15" fill="rgb(232,182,51)"/><text x="24.2895%" y="175.50"></text></g><g><title>impl_parent (513,006 samples, 0.42%)</title><rect x="26.4864%" y="101" width="0.4189%" height="15" fill="rgb(231,60,39)"/><text x="26.7364%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (271,983 samples, 0.22%)</title><rect x="26.6833%" y="85" width="0.2221%" height="15" fill="rgb(208,69,12)"/><text x="26.9333%" y="95.50"></text></g><g><title>impl_trait_ref (1,247,545 samples, 1.02%)</title><rect x="26.9054%" y="101" width="1.0187%" height="15" fill="rgb(235,93,37)"/><text x="27.1554%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,008,252 samples, 0.82%)</title><rect x="27.1008%" y="85" width="0.8233%" height="15" fill="rgb(213,116,39)"/><text x="27.3508%" y="95.50"></text></g><g><title>trait_impls_of (184,022 samples, 0.15%)</title><rect x="27.9413%" y="101" width="0.1503%" height="15" fill="rgb(222,207,29)"/><text x="28.1913%" y="111.50"></text></g><g><title>coherent_trait (3,168,342 samples, 2.59%)</title><rect x="25.5049%" y="133" width="2.5872%" height="15" fill="rgb(206,96,30)"/><text x="25.7549%" y="143.50">co..</text></g><g><title>specialization_graph_of (2,950,909 samples, 2.41%)</title><rect x="25.6824%" y="117" width="2.4096%" height="15" fill="rgb(218,138,4)"/><text x="25.9324%" y="127.50">sp..</text></g><g><title>coherence_checking (3,221,262 samples, 2.63%)</title><rect x="25.4942%" y="149" width="2.6304%" height="15" fill="rgb(250,191,14)"/><text x="25.7442%" y="159.50">co..</text></g><g><title>associated_item (291,964 samples, 0.24%)</title><rect x="33.6890%" y="85" width="0.2384%" height="15" fill="rgb(239,60,40)"/><text x="33.9390%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (218,064 samples, 0.18%)</title><rect x="33.7494%" y="69" width="0.1781%" height="15" fill="rgb(206,27,48)"/><text x="33.9994%" y="79.50"></text></g><g><title>associated_items (421,155 samples, 0.34%)</title><rect x="33.5980%" y="101" width="0.3439%" height="15" fill="rgb(225,35,8)"/><text x="33.8480%" y="111.50"></text></g><g><title>specializes (173,951 samples, 0.14%)</title><rect x="34.7151%" y="85" width="0.1420%" height="15" fill="rgb(250,213,24)"/><text x="34.9651%" y="95.50"></text></g><g><title>param_env (137,860 samples, 0.11%)</title><rect x="34.7446%" y="69" width="0.1126%" height="15" fill="rgb(247,123,22)"/><text x="34.9946%" y="79.50"></text></g><g><title>evaluate_obligation (1,086,490 samples, 0.89%)</title><rect x="34.0296%" y="101" width="0.8872%" height="15" fill="rgb(231,138,38)"/><text x="34.2796%" y="111.50"></text></g><g><title>method_autoderef_steps (148,411 samples, 0.12%)</title><rect x="35.1710%" y="101" width="0.1212%" height="15" fill="rgb(231,145,46)"/><text x="35.4210%" y="111.50"></text></g><g><title>object_safety_violations (142,382 samples, 0.12%)</title><rect x="35.2922%" y="101" width="0.1163%" height="15" fill="rgb(251,118,11)"/><text x="35.5422%" y="111.50"></text></g><g><title>predicates_of (219,492 samples, 0.18%)</title><rect x="35.4290%" y="101" width="0.1792%" height="15" fill="rgb(217,147,25)"/><text x="35.6790%" y="111.50"></text></g><g><title>predicates_defined_on (152,022 samples, 0.12%)</title><rect x="35.4841%" y="85" width="0.1241%" height="15" fill="rgb(247,81,37)"/><text x="35.7341%" y="95.50"></text></g><g><title>associated_item (177,851 samples, 0.15%)</title><rect x="36.5339%" y="69" width="0.1452%" height="15" fill="rgb(209,12,38)"/><text x="36.7839%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (139,891 samples, 0.11%)</title><rect x="36.5649%" y="53" width="0.1142%" height="15" fill="rgb(227,1,9)"/><text x="36.8149%" y="63.50"></text></g><g><title>associated_items (234,973 samples, 0.19%)</title><rect x="36.4915%" y="85" width="0.1919%" height="15" fill="rgb(248,47,43)"/><text x="36.7415%" y="95.50"></text></g><g><title>opt_def_kind (229,322 samples, 0.19%)</title><rect x="36.9102%" y="53" width="0.1873%" height="15" fill="rgb(221,10,30)"/><text x="37.1602%" y="63.50"></text></g><g><title>predicates_of (251,292 samples, 0.21%)</title><rect x="36.9031%" y="69" width="0.2052%" height="15" fill="rgb(210,229,1)"/><text x="37.1531%" y="79.50"></text></g><g><title>evaluate_obligation (473,894 samples, 0.39%)</title><rect x="36.7481%" y="85" width="0.3870%" height="15" fill="rgb(222,148,37)"/><text x="36.9981%" y="95.50"></text></g><g><title>typeck (2,078,981 samples, 1.70%)</title><rect x="35.6662%" y="101" width="1.6976%" height="15" fill="rgb(234,67,33)"/><text x="35.9162%" y="111.50"></text></g><g><title>item_bodies_checking (11,321,675 samples, 9.24%)</title><rect x="28.1427%" y="149" width="9.2450%" height="15" fill="rgb(247,98,35)"/><text x="28.3927%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (11,319,775 samples, 9.24%)</title><rect x="28.1442%" y="133" width="9.2434%" height="15" fill="rgb(247,138,52)"/><text x="28.3942%" y="143.50">typeck_item_b..</text></g><g><title>typeck (11,285,765 samples, 9.22%)</title><rect x="28.1720%" y="117" width="9.2157%" height="15" fill="rgb(213,79,30)"/><text x="28.4220%" y="127.50">typeck</text></g><g><title>item_types_checking (757,377 samples, 0.62%)</title><rect x="37.3877%" y="149" width="0.6185%" height="15" fill="rgb(246,177,23)"/><text x="37.6377%" y="159.50"></text></g><g><title>check_mod_item_types (752,717 samples, 0.61%)</title><rect x="37.3915%" y="133" width="0.6146%" height="15" fill="rgb(230,62,27)"/><text x="37.6415%" y="143.50"></text></g><g><title>fn_sig (163,301 samples, 0.13%)</title><rect x="38.1485%" y="117" width="0.1333%" height="15" fill="rgb(216,154,8)"/><text x="38.3985%" y="127.50"></text></g><g><title>generics_of (217,702 samples, 0.18%)</title><rect x="38.2819%" y="117" width="0.1778%" height="15" fill="rgb(244,35,45)"/><text x="38.5319%" y="127.50"></text></g><g><title>item_bounds (156,673 samples, 0.13%)</title><rect x="38.4822%" y="117" width="0.1279%" height="15" fill="rgb(251,115,12)"/><text x="38.7322%" y="127.50"></text></g><g><title>explicit_predicates_of (152,342 samples, 0.12%)</title><rect x="38.6765%" y="85" width="0.1244%" height="15" fill="rgb(240,54,50)"/><text x="38.9265%" y="95.50"></text></g><g><title>predicates_of (254,852 samples, 0.21%)</title><rect x="38.6101%" y="117" width="0.2081%" height="15" fill="rgb(233,84,52)"/><text x="38.8601%" y="127.50"></text></g><g><title>predicates_defined_on (225,452 samples, 0.18%)</title><rect x="38.6341%" y="101" width="0.1841%" height="15" fill="rgb(207,117,47)"/><text x="38.8841%" y="111.50"></text></g><g><title>type_collecting (1,157,052 samples, 0.94%)</title><rect x="38.0076%" y="149" width="0.9448%" height="15" fill="rgb(249,43,39)"/><text x="38.2576%" y="159.50"></text></g><g><title>collect_mod_item_types (1,146,122 samples, 0.94%)</title><rect x="38.0165%" y="133" width="0.9359%" height="15" fill="rgb(209,38,44)"/><text x="38.2665%" y="143.50"></text></g><g><title>param_env (199,561 samples, 0.16%)</title><rect x="39.7370%" y="117" width="0.1630%" height="15" fill="rgb(236,212,23)"/><text x="39.9870%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,229,132 samples, 1.00%)</title><rect x="39.0383%" y="133" width="1.0037%" height="15" fill="rgb(242,79,21)"/><text x="39.2883%" y="143.50"></text></g><g><title>region_scope_tree (155,093 samples, 0.13%)</title><rect x="39.9154%" y="117" width="0.1266%" height="15" fill="rgb(211,96,35)"/><text x="40.1654%" y="127.50"></text></g><g><title>evaluate_obligation (514,207 samples, 0.42%)</title><rect x="40.5705%" y="117" width="0.4199%" height="15" fill="rgb(253,215,40)"/><text x="40.8205%" y="127.50"></text></g><g><title>param_env (123,381 samples, 0.10%)</title><rect x="41.0173%" y="117" width="0.1007%" height="15" fill="rgb(211,81,21)"/><text x="41.2673%" y="127.50"></text></g><g><title>trait_impls_of (133,302 samples, 0.11%)</title><rect x="41.1820%" y="117" width="0.1089%" height="15" fill="rgb(208,190,38)"/><text x="41.4320%" y="127.50"></text></g><g><title>check_item_well_formed (1,554,906 samples, 1.27%)</title><rect x="40.0420%" y="133" width="1.2697%" height="15" fill="rgb(235,213,38)"/><text x="40.2920%" y="143.50"></text></g><g><title>analysis (33,207,605 samples, 27.12%)</title><rect x="14.9909%" y="181" width="27.1165%" height="15" fill="rgb(237,122,38)"/><text x="15.2409%" y="191.50">analysis</text></g><g><title>type_check_crate (20,386,646 samples, 16.65%)</title><rect x="25.4602%" y="165" width="16.6472%" height="15" fill="rgb(244,218,35)"/><text x="25.7102%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,860,979 samples, 3.15%)</title><rect x="38.9546%" y="149" width="3.1528%" height="15" fill="rgb(240,68,47)"/><text x="39.2046%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (974,450 samples, 0.80%)</title><rect x="41.3117%" y="133" width="0.7957%" height="15" fill="rgb(210,16,53)"/><text x="41.5617%" y="143.50"></text></g><g><title>const_caller_location (232,183 samples, 0.19%)</title><rect x="51.9590%" y="149" width="0.1896%" height="15" fill="rgb(235,124,12)"/><text x="52.2090%" y="159.50"></text></g><g><title>item_attrs (164,221 samples, 0.13%)</title><rect x="52.6954%" y="117" width="0.1341%" height="15" fill="rgb(224,169,11)"/><text x="52.9454%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (155,061 samples, 0.13%)</title><rect x="52.7029%" y="101" width="0.1266%" height="15" fill="rgb(250,166,2)"/><text x="52.9529%" y="111.50"></text></g><g><title>item_attrs (415,195 samples, 0.34%)</title><rect x="52.8498%" y="85" width="0.3390%" height="15" fill="rgb(242,216,29)"/><text x="53.0998%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (413,155 samples, 0.34%)</title><rect x="52.8515%" y="69" width="0.3374%" height="15" fill="rgb(230,116,27)"/><text x="53.1015%" y="79.50"></text></g><g><title>codegen_fn_attrs (691,377 samples, 0.56%)</title><rect x="52.6401%" y="133" width="0.5646%" height="15" fill="rgb(228,99,48)"/><text x="52.8901%" y="143.50"></text></g><g><title>should_inherit_track_caller (459,425 samples, 0.38%)</title><rect x="52.8295%" y="117" width="0.3752%" height="15" fill="rgb(253,11,6)"/><text x="53.0795%" y="127.50"></text></g><g><title>codegen_fn_attrs (446,035 samples, 0.36%)</title><rect x="52.8405%" y="101" width="0.3642%" height="15" fill="rgb(247,143,39)"/><text x="53.0905%" y="111.50"></text></g><g><title>layout_of (152,872 samples, 0.12%)</title><rect x="53.2424%" y="133" width="0.1248%" height="15" fill="rgb(236,97,10)"/><text x="53.4924%" y="143.50"></text></g><g><title>param_env (550,453 samples, 0.45%)</title><rect x="53.3672%" y="133" width="0.4495%" height="15" fill="rgb(233,208,19)"/><text x="53.6172%" y="143.50"></text></g><g><title>predicates_of (154,441 samples, 0.13%)</title><rect x="53.6906%" y="117" width="0.1261%" height="15" fill="rgb(216,164,2)"/><text x="53.9406%" y="127.50"></text></g><g><title>fn_abi_of_instance (2,065,909 samples, 1.69%)</title><rect x="52.1485%" y="149" width="1.6870%" height="15" fill="rgb(220,129,5)"/><text x="52.3985%" y="159.50"></text></g><g><title>layout_of (142,332 samples, 0.12%)</title><rect x="53.8782%" y="149" width="0.1162%" height="15" fill="rgb(242,17,10)"/><text x="54.1282%" y="159.50"></text></g><g><title>symbol_name (299,485 samples, 0.24%)</title><rect x="53.9944%" y="149" width="0.2446%" height="15" fill="rgb(242,107,0)"/><text x="54.2444%" y="159.50"></text></g><g><title>codegen_module (12,773,048 samples, 10.43%)</title><rect x="43.8302%" y="165" width="10.4301%" height="15" fill="rgb(251,28,31)"/><text x="44.0802%" y="175.50">codegen_module</text></g><g><title>codegen_crate (14,897,641 samples, 12.17%)</title><rect x="42.1114%" y="181" width="12.1650%" height="15" fill="rgb(233,223,10)"/><text x="42.3614%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (28,844,741 samples, 23.55%)</title><rect x="54.3227%" y="165" width="23.5539%" height="15" fill="rgb(215,21,27)"/><text x="54.5727%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (27,396,666 samples, 22.37%)</title><rect x="55.5052%" y="149" width="22.3714%" height="15" fill="rgb(232,23,21)"/><text x="55.7552%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (30,425,189 samples, 24.84%)</title><rect x="54.2764%" y="181" width="24.8444%" height="15" fill="rgb(244,5,23)"/><text x="54.5264%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,523,717 samples, 1.24%)</title><rect x="77.8766%" y="165" width="1.2442%" height="15" fill="rgb(226,81,46)"/><text x="78.1266%" y="175.50"></text></g><g><title>macro_expand_crate (8,045,241 samples, 6.57%)</title><rect x="79.3192%" y="165" width="6.5695%" height="15" fill="rgb(247,70,30)"/><text x="79.5692%" y="175.50">macro_exp..</text></g><g><title>expand_crate (8,038,021 samples, 6.56%)</title><rect x="79.3251%" y="149" width="6.5636%" height="15" fill="rgb(212,68,19)"/><text x="79.5751%" y="159.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (199,632 samples, 0.16%)</title><rect x="85.7257%" y="133" width="0.1630%" height="15" fill="rgb(240,187,13)"/><text x="85.9757%" y="143.50"></text></g><g><title>late_resolve_crate (751,757 samples, 0.61%)</title><rect x="86.0223%" y="149" width="0.6139%" height="15" fill="rgb(223,113,26)"/><text x="86.2723%" y="159.50"></text></g><g><title>configure_and_expand (9,268,163 samples, 7.57%)</title><rect x="79.1208%" y="181" width="7.5681%" height="15" fill="rgb(206,192,2)"/><text x="79.3708%" y="191.50">configure_..</text></g><g><title>resolve_crate (957,980 samples, 0.78%)</title><rect x="85.9067%" y="165" width="0.7823%" height="15" fill="rgb(241,108,4)"/><text x="86.1567%" y="175.50"></text></g><g><title>drop_ast (124,651 samples, 0.10%)</title><rect x="86.6890%" y="181" width="0.1018%" height="15" fill="rgb(247,173,49)"/><text x="86.9390%" y="191.50"></text></g><g><title>early_lint_checks (191,192 samples, 0.16%)</title><rect x="86.8078%" y="181" width="0.1561%" height="15" fill="rgb(224,114,35)"/><text x="87.0578%" y="191.50"></text></g><g><title>free_global_ctxt (2,612,247 samples, 2.13%)</title><rect x="86.9639%" y="181" width="2.1331%" height="15" fill="rgb(245,159,27)"/><text x="87.2139%" y="191.50">f..</text></g><g><title>metadata_decode_entry_optimized_mir (138,280 samples, 0.11%)</title><rect x="90.8415%" y="85" width="0.1129%" height="15" fill="rgb(245,172,44)"/><text x="91.0915%" y="95.50"></text></g><g><title>optimized_mir (1,763,506 samples, 1.44%)</title><rect x="90.1156%" y="101" width="1.4400%" height="15" fill="rgb(236,23,11)"/><text x="90.3656%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (736,216 samples, 0.60%)</title><rect x="90.9544%" y="85" width="0.6012%" height="15" fill="rgb(205,117,38)"/><text x="91.2044%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (164,421 samples, 0.13%)</title><rect x="91.6282%" y="85" width="0.1343%" height="15" fill="rgb(237,72,25)"/><text x="91.8782%" y="95.50"></text></g><g><title>specialization_graph_of (238,133 samples, 0.19%)</title><rect x="91.8285%" y="85" width="0.1945%" height="15" fill="rgb(244,70,9)"/><text x="92.0785%" y="95.50"></text></g><g><title>resolve_instance (595,065 samples, 0.49%)</title><rect x="91.5556%" y="101" width="0.4859%" height="15" fill="rgb(217,125,39)"/><text x="91.8056%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (3,072,421 samples, 2.51%)</title><rect x="89.7728%" y="117" width="2.5089%" height="15" fill="rgb(235,36,10)"/><text x="90.0228%" y="127.50">mo..</text></g><g><title>vtable_entries (178,081 samples, 0.15%)</title><rect x="92.1363%" y="101" width="0.1454%" height="15" fill="rgb(251,123,47)"/><text x="92.3863%" y="111.50"></text></g><g><title>resolve_instance (133,050 samples, 0.11%)</title><rect x="92.1730%" y="85" width="0.1086%" height="15" fill="rgb(221,13,13)"/><text x="92.4230%" y="95.50"></text></g><g><title>monomorphization_collector (3,109,301 samples, 2.54%)</title><rect x="89.7710%" y="133" width="2.5390%" height="15" fill="rgb(238,131,9)"/><text x="90.0210%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (216,362 samples, 0.18%)</title><rect x="92.3122%" y="117" width="0.1767%" height="15" fill="rgb(211,50,8)"/><text x="92.5622%" y="127.50"></text></g><g><title>symbol_name (190,682 samples, 0.16%)</title><rect x="92.3332%" y="101" width="0.1557%" height="15" fill="rgb(245,182,24)"/><text x="92.5832%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (3,489,225 samples, 2.85%)</title><rect x="89.7476%" y="149" width="2.8492%" height="15" fill="rgb(242,14,37)"/><text x="89.9976%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (351,243 samples, 0.29%)</title><rect x="92.3100%" y="133" width="0.2868%" height="15" fill="rgb(246,228,12)"/><text x="92.5600%" y="143.50"></text></g><g><title>cgu_partitioning (132,171 samples, 0.11%)</title><rect x="92.4889%" y="117" width="0.1079%" height="15" fill="rgb(213,55,15)"/><text x="92.7389%" y="127.50"></text></g><g><title>exported_symbols (3,573,566 samples, 2.92%)</title><rect x="89.7295%" y="165" width="2.9181%" height="15" fill="rgb(209,9,3)"/><text x="89.9795%" y="175.50">ex..</text></g><g><title>layout_of (269,133 samples, 0.22%)</title><rect x="93.3156%" y="149" width="0.2198%" height="15" fill="rgb(230,59,30)"/><text x="93.5656%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (819,506 samples, 0.67%)</title><rect x="93.5354%" y="149" width="0.6692%" height="15" fill="rgb(209,121,21)"/><text x="93.7854%" y="159.50"></text></g><g><title>eval_to_const_value_raw (150,162 samples, 0.12%)</title><rect x="94.3048%" y="69" width="0.1226%" height="15" fill="rgb(220,109,13)"/><text x="94.5548%" y="79.50"></text></g><g><title>eval_to_const_value_raw (147,512 samples, 0.12%)</title><rect x="94.3070%" y="53" width="0.1205%" height="15" fill="rgb(232,18,1)"/><text x="94.5570%" y="63.50"></text></g><g><title>eval_to_allocation_raw (141,502 samples, 0.12%)</title><rect x="94.3119%" y="37" width="0.1155%" height="15" fill="rgb(215,41,42)"/><text x="94.5619%" y="47.50"></text></g><g><title>eval_to_const_value_raw (261,073 samples, 0.21%)</title><rect x="94.2209%" y="133" width="0.2132%" height="15" fill="rgb(224,123,36)"/><text x="94.4709%" y="143.50"></text></g><g><title>eval_to_const_value_raw (253,112 samples, 0.21%)</title><rect x="94.2274%" y="117" width="0.2067%" height="15" fill="rgb(240,125,3)"/><text x="94.4774%" y="127.50"></text></g><g><title>eval_to_allocation_raw (248,422 samples, 0.20%)</title><rect x="94.2313%" y="101" width="0.2029%" height="15" fill="rgb(205,98,50)"/><text x="94.4813%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (166,942 samples, 0.14%)</title><rect x="94.2978%" y="85" width="0.1363%" height="15" fill="rgb(205,185,37)"/><text x="94.5478%" y="95.50"></text></g><g><title>optimized_mir (2,151,130 samples, 1.76%)</title><rect x="92.6887%" y="165" width="1.7566%" height="15" fill="rgb(238,207,15)"/><text x="92.9387%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (294,803 samples, 0.24%)</title><rect x="94.2046%" y="149" width="0.2407%" height="15" fill="rgb(213,199,42)"/><text x="94.4546%" y="159.50"></text></g><g><title>generate_crate_metadata (6,572,796 samples, 5.37%)</title><rect x="89.0970%" y="181" width="5.3672%" height="15" fill="rgb(235,201,11)"/><text x="89.3470%" y="191.50">generat..</text></g><g><title>hir_lowering (1,415,524 samples, 1.16%)</title><rect x="94.4641%" y="181" width="1.1559%" height="15" fill="rgb(207,46,11)"/><text x="94.7141%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,561,725 samples, 1.28%)</title><rect x="95.6342%" y="165" width="1.2753%" height="15" fill="rgb(241,35,35)"/><text x="95.8842%" y="175.50"></text></g><g><title>link_binary_remove_temps (230,942 samples, 0.19%)</title><rect x="97.2711%" y="133" width="0.1886%" height="15" fill="rgb(243,32,47)"/><text x="97.5211%" y="143.50"></text></g><g><title>link_crate (1,804,678 samples, 1.47%)</title><rect x="96.9094%" y="165" width="1.4737%" height="15" fill="rgb(247,202,23)"/><text x="97.1594%" y="175.50"></text></g><g><title>link_binary (1,773,227 samples, 1.45%)</title><rect x="96.9351%" y="149" width="1.4480%" height="15" fill="rgb(219,102,11)"/><text x="97.1851%" y="159.50"></text></g><g><title>link_rlib (1,130,851 samples, 0.92%)</title><rect x="97.4596%" y="133" width="0.9234%" height="15" fill="rgb(243,110,44)"/><text x="97.7096%" y="143.50"></text></g><g><title>link (3,394,164 samples, 2.77%)</title><rect x="95.6200%" y="181" width="2.7716%" height="15" fill="rgb(222,74,54)"/><text x="95.8700%" y="191.50">li..</text></g><g><title>parse_crate (222,432 samples, 0.18%)</title><rect x="98.3916%" y="181" width="0.1816%" height="15" fill="rgb(216,99,12)"/><text x="98.6416%" y="191.50"></text></g><g><title>prepare_outputs (180,752 samples, 0.15%)</title><rect x="98.5773%" y="181" width="0.1476%" height="15" fill="rgb(226,22,26)"/><text x="98.8273%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,151,231 samples, 0.94%)</title><rect x="98.7249%" y="181" width="0.9401%" height="15" fill="rgb(217,163,10)"/><text x="98.9749%" y="191.50"></text></g><g><title>all (122,462,857 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (122,462,857 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (341,204 samples, 0.28%)</title><rect x="99.7214%" y="181" width="0.2786%" height="15" fill="rgb(220,39,43)"/><text x="99.9714%" y="191.50"></text></g></svg></svg>