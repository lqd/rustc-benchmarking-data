<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (119,872,258 samples, 12.00%)</title><rect x="0.0721%" y="181" width="11.9990%" height="15" fill="rgb(227,0,7)"/><text x="0.3221%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,176,291 samples, 0.22%)</title><rect x="16.8408%" y="69" width="0.2178%" height="15" fill="rgb(217,0,24)"/><text x="17.0908%" y="79.50"></text></g><g><title>is_copy_raw (1,679,397 samples, 0.17%)</title><rect x="16.8905%" y="53" width="0.1681%" height="15" fill="rgb(221,193,54)"/><text x="17.1405%" y="63.50"></text></g><g><title>evaluate_obligation (1,371,703 samples, 0.14%)</title><rect x="16.9213%" y="37" width="0.1373%" height="15" fill="rgb(248,212,6)"/><text x="17.1713%" y="47.50"></text></g><g><title>resolve_instance (1,499,498 samples, 0.15%)</title><rect x="17.0616%" y="69" width="0.1501%" height="15" fill="rgb(208,68,35)"/><text x="17.3116%" y="79.50"></text></g><g><title>thir_body (2,728,990 samples, 0.27%)</title><rect x="17.2201%" y="69" width="0.2732%" height="15" fill="rgb(232,128,0)"/><text x="17.4701%" y="79.50"></text></g><g><title>mir_const (18,046,211 samples, 1.81%)</title><rect x="15.6932%" y="117" width="1.8064%" height="15" fill="rgb(207,160,47)"/><text x="15.9432%" y="127.50">m..</text></g><g><title>unsafety_check_result (15,600,749 samples, 1.56%)</title><rect x="15.9380%" y="101" width="1.5616%" height="15" fill="rgb(228,23,34)"/><text x="16.1880%" y="111.50"></text></g><g><title>mir_built (14,062,996 samples, 1.41%)</title><rect x="16.0920%" y="85" width="1.4077%" height="15" fill="rgb(218,30,26)"/><text x="16.3420%" y="95.50"></text></g><g><title>mir_const_qualif (1,708,209 samples, 0.17%)</title><rect x="17.4996%" y="117" width="0.1710%" height="15" fill="rgb(220,122,19)"/><text x="17.7496%" y="127.50"></text></g><g><title>mir_promoted (21,748,590 samples, 2.18%)</title><rect x="15.4937%" y="133" width="2.1770%" height="15" fill="rgb(250,228,42)"/><text x="15.7437%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (5,717,837 samples, 0.57%)</title><rect x="17.8892%" y="133" width="0.5723%" height="15" fill="rgb(240,193,28)"/><text x="18.1392%" y="143.50"></text></g><g><title>MIR_borrow_checking (63,269,855 samples, 6.33%)</title><rect x="12.1308%" y="165" width="6.3332%" height="15" fill="rgb(216,20,37)"/><text x="12.3808%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (62,952,283 samples, 6.30%)</title><rect x="12.1626%" y="149" width="6.3014%" height="15" fill="rgb(206,188,39)"/><text x="12.4126%" y="159.50">mir_borr..</text></g><g><title>check_mod_attrs (1,036,323 samples, 0.10%)</title><rect x="18.5583%" y="149" width="0.1037%" height="15" fill="rgb(217,207,13)"/><text x="18.8083%" y="159.50"></text></g><g><title>misc_checking_1 (2,329,445 samples, 0.23%)</title><rect x="18.5539%" y="165" width="0.2332%" height="15" fill="rgb(231,73,38)"/><text x="18.8039%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,425,425 samples, 0.14%)</title><rect x="18.7872%" y="149" width="0.1427%" height="15" fill="rgb(225,20,46)"/><text x="19.0372%" y="159.50"></text></g><g><title>check_mod_liveness (1,171,043 samples, 0.12%)</title><rect x="18.8127%" y="133" width="0.1172%" height="15" fill="rgb(210,31,41)"/><text x="19.0627%" y="143.50"></text></g><g><title>mir_for_ctfe (1,114,113 samples, 0.11%)</title><rect x="19.1419%" y="69" width="0.1115%" height="15" fill="rgb(221,200,47)"/><text x="19.3919%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,021,770 samples, 0.10%)</title><rect x="19.1511%" y="53" width="0.1023%" height="15" fill="rgb(226,26,5)"/><text x="19.4011%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,503,957 samples, 0.15%)</title><rect x="19.1153%" y="117" width="0.1505%" height="15" fill="rgb(249,33,26)"/><text x="19.3653%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,491,287 samples, 0.15%)</title><rect x="19.1166%" y="101" width="0.1493%" height="15" fill="rgb(235,183,28)"/><text x="19.3666%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,474,657 samples, 0.15%)</title><rect x="19.1182%" y="85" width="0.1476%" height="15" fill="rgb(221,5,38)"/><text x="19.3682%" y="95.50"></text></g><g><title>misc_checking_2 (5,419,817 samples, 0.54%)</title><rect x="18.7870%" y="165" width="0.5425%" height="15" fill="rgb(247,18,42)"/><text x="19.0370%" y="175.50"></text></g><g><title>match_checking (3,992,502 samples, 0.40%)</title><rect x="18.9299%" y="149" width="0.3996%" height="15" fill="rgb(241,131,45)"/><text x="19.1799%" y="159.50"></text></g><g><title>check_match (3,908,400 samples, 0.39%)</title><rect x="18.9383%" y="133" width="0.3912%" height="15" fill="rgb(249,31,29)"/><text x="19.1883%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,251,204 samples, 0.13%)</title><rect x="19.5785%" y="117" width="0.1252%" height="15" fill="rgb(225,111,53)"/><text x="19.8285%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,244,794 samples, 0.12%)</title><rect x="19.5791%" y="101" width="0.1246%" height="15" fill="rgb(238,160,17)"/><text x="19.8291%" y="111.50"></text></g><g><title>crate_lints (3,650,309 samples, 0.37%)</title><rect x="19.4698%" y="133" width="0.3654%" height="15" fill="rgb(214,148,48)"/><text x="19.7198%" y="143.50"></text></g><g><title>lint_checking (4,983,583 samples, 0.50%)</title><rect x="19.4696%" y="149" width="0.4988%" height="15" fill="rgb(232,36,49)"/><text x="19.7196%" y="159.50"></text></g><g><title>module_lints (1,331,314 samples, 0.13%)</title><rect x="19.8352%" y="133" width="0.1333%" height="15" fill="rgb(209,103,24)"/><text x="20.0852%" y="143.50"></text></g><g><title>lint_mod (1,317,094 samples, 0.13%)</title><rect x="19.8366%" y="117" width="0.1318%" height="15" fill="rgb(229,88,8)"/><text x="20.0866%" y="127.50"></text></g><g><title>privacy_checking_modules (2,129,103 samples, 0.21%)</title><rect x="20.0454%" y="149" width="0.2131%" height="15" fill="rgb(213,181,19)"/><text x="20.2954%" y="159.50"></text></g><g><title>check_mod_privacy (2,119,103 samples, 0.21%)</title><rect x="20.0464%" y="133" width="0.2121%" height="15" fill="rgb(254,191,54)"/><text x="20.2964%" y="143.50"></text></g><g><title>misc_checking_3 (9,302,250 samples, 0.93%)</title><rect x="19.3296%" y="165" width="0.9311%" height="15" fill="rgb(241,83,37)"/><text x="19.5796%" y="175.50"></text></g><g><title>impl_parent (1,436,567 samples, 0.14%)</title><rect x="20.5363%" y="101" width="0.1438%" height="15" fill="rgb(233,36,39)"/><text x="20.7863%" y="111.50"></text></g><g><title>impl_trait_ref (2,523,744 samples, 0.25%)</title><rect x="20.6802%" y="101" width="0.2526%" height="15" fill="rgb(226,3,54)"/><text x="20.9302%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,979,419 samples, 0.20%)</title><rect x="20.7347%" y="85" width="0.1981%" height="15" fill="rgb(245,192,40)"/><text x="20.9847%" y="95.50"></text></g><g><title>coherent_trait (7,102,586 samples, 0.71%)</title><rect x="20.2776%" y="133" width="0.7110%" height="15" fill="rgb(238,167,29)"/><text x="20.5276%" y="143.50"></text></g><g><title>specialization_graph_of (6,711,442 samples, 0.67%)</title><rect x="20.3168%" y="117" width="0.6718%" height="15" fill="rgb(232,182,51)"/><text x="20.5668%" y="127.50"></text></g><g><title>coherence_checking (7,198,027 samples, 0.72%)</title><rect x="20.2751%" y="149" width="0.7205%" height="15" fill="rgb(231,60,39)"/><text x="20.5251%" y="159.50"></text></g><g><title>evaluate_obligation (3,580,510 samples, 0.36%)</title><rect x="23.6145%" y="101" width="0.3584%" height="15" fill="rgb(208,69,12)"/><text x="23.8645%" y="111.50"></text></g><g><title>evaluate_obligation (2,232,646 samples, 0.22%)</title><rect x="27.4567%" y="85" width="0.2235%" height="15" fill="rgb(235,93,37)"/><text x="27.7067%" y="95.50"></text></g><g><title>typeck (38,042,915 samples, 3.81%)</title><rect x="24.0805%" y="101" width="3.8080%" height="15" fill="rgb(213,116,39)"/><text x="24.3305%" y="111.50">type..</text></g><g><title>item_bodies_checking (68,865,025 samples, 6.89%)</title><rect x="21.0000%" y="149" width="6.8933%" height="15" fill="rgb(222,207,29)"/><text x="21.2500%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (68,861,285 samples, 6.89%)</title><rect x="21.0004%" y="133" width="6.8929%" height="15" fill="rgb(206,96,30)"/><text x="21.2504%" y="143.50">typeck_it..</text></g><g><title>typeck (68,708,521 samples, 6.88%)</title><rect x="21.0157%" y="117" width="6.8776%" height="15" fill="rgb(218,138,4)"/><text x="21.2657%" y="127.50">typeck</text></g><g><title>evaluate_obligation (2,691,719 samples, 0.27%)</title><rect x="28.3028%" y="101" width="0.2694%" height="15" fill="rgb(250,191,14)"/><text x="28.5528%" y="111.50"></text></g><g><title>item_types_checking (7,053,264 samples, 0.71%)</title><rect x="27.8933%" y="149" width="0.7060%" height="15" fill="rgb(239,60,40)"/><text x="28.1433%" y="159.50"></text></g><g><title>check_mod_item_types (7,039,874 samples, 0.70%)</title><rect x="27.8946%" y="133" width="0.7047%" height="15" fill="rgb(206,27,48)"/><text x="28.1446%" y="143.50"></text></g><g><title>typeck (5,966,981 samples, 0.60%)</title><rect x="28.0020%" y="117" width="0.5973%" height="15" fill="rgb(225,35,8)"/><text x="28.2520%" y="127.50"></text></g><g><title>named_region_map (1,048,221 samples, 0.10%)</title><rect x="28.7861%" y="101" width="0.1049%" height="15" fill="rgb(250,213,24)"/><text x="29.0361%" y="111.50"></text></g><g><title>resolve_lifetimes (1,013,331 samples, 0.10%)</title><rect x="28.7896%" y="85" width="0.1014%" height="15" fill="rgb(247,123,22)"/><text x="29.0396%" y="95.50"></text></g><g><title>generics_of (1,790,309 samples, 0.18%)</title><rect x="28.7136%" y="117" width="0.1792%" height="15" fill="rgb(231,138,38)"/><text x="28.9636%" y="127.50"></text></g><g><title>predicates_of (1,109,631 samples, 0.11%)</title><rect x="28.8991%" y="117" width="0.1111%" height="15" fill="rgb(231,145,46)"/><text x="29.1491%" y="127.50"></text></g><g><title>predicates_defined_on (1,002,758 samples, 0.10%)</title><rect x="28.9098%" y="101" width="0.1004%" height="15" fill="rgb(251,118,11)"/><text x="29.1598%" y="111.50"></text></g><g><title>type_collecting (4,366,987 samples, 0.44%)</title><rect x="28.5999%" y="149" width="0.4371%" height="15" fill="rgb(217,147,25)"/><text x="28.8499%" y="159.50"></text></g><g><title>collect_mod_item_types (4,346,275 samples, 0.44%)</title><rect x="28.6019%" y="133" width="0.4351%" height="15" fill="rgb(247,81,37)"/><text x="28.8519%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,218,091 samples, 0.22%)</title><rect x="29.0737%" y="133" width="0.2220%" height="15" fill="rgb(209,12,38)"/><text x="29.3237%" y="143.50"></text></g><g><title>analysis (177,995,628 samples, 17.82%)</title><rect x="12.0711%" y="181" width="17.8170%" height="15" fill="rgb(227,1,9)"/><text x="12.3211%" y="191.50">analysis</text></g><g><title>type_check_crate (96,179,876 samples, 9.63%)</title><rect x="20.2607%" y="165" width="9.6274%" height="15" fill="rgb(248,47,43)"/><text x="20.5107%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (8,488,751 samples, 0.85%)</title><rect x="29.0384%" y="149" width="0.8497%" height="15" fill="rgb(221,10,30)"/><text x="29.2884%" y="159.50"></text></g><g><title>check_item_well_formed (5,917,988 samples, 0.59%)</title><rect x="29.2957%" y="133" width="0.5924%" height="15" fill="rgb(210,229,1)"/><text x="29.5457%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,235,719 samples, 0.12%)</title><rect x="38.2053%" y="149" width="0.1237%" height="15" fill="rgb(222,148,37)"/><text x="38.4553%" y="159.50"></text></g><g><title>const_caller_location (2,243,334 samples, 0.22%)</title><rect x="38.3290%" y="149" width="0.2246%" height="15" fill="rgb(234,67,33)"/><text x="38.5790%" y="159.50"></text></g><g><title>param_env (2,200,771 samples, 0.22%)</title><rect x="39.0746%" y="133" width="0.2203%" height="15" fill="rgb(247,98,35)"/><text x="39.3246%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,127,011 samples, 0.11%)</title><rect x="39.2949%" y="133" width="0.1128%" height="15" fill="rgb(247,138,52)"/><text x="39.5449%" y="143.50"></text></g><g><title>fn_abi_of_instance (8,306,464 samples, 0.83%)</title><rect x="38.5808%" y="149" width="0.8315%" height="15" fill="rgb(213,79,30)"/><text x="38.8308%" y="159.50"></text></g><g><title>layout_of (1,938,928 samples, 0.19%)</title><rect x="39.4502%" y="149" width="0.1941%" height="15" fill="rgb(246,177,23)"/><text x="39.7002%" y="159.50"></text></g><g><title>codegen_module (96,511,046 samples, 9.66%)</title><rect x="30.0899%" y="165" width="9.6606%" height="15" fill="rgb(230,62,27)"/><text x="30.3399%" y="175.50">codegen_module</text></g><g><title>codegen_crate (98,557,480 samples, 9.87%)</title><rect x="29.8887%" y="181" width="9.8654%" height="15" fill="rgb(216,154,8)"/><text x="30.1387%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (480,028,856 samples, 48.05%)</title><rect x="39.7770%" y="165" width="48.0500%" height="15" fill="rgb(244,35,45)"/><text x="40.0270%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (451,835,855 samples, 45.23%)</title><rect x="42.5991%" y="149" width="45.2280%" height="15" fill="rgb(251,115,12)"/><text x="42.8491%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (497,250,661 samples, 49.77%)</title><rect x="39.7542%" y="181" width="49.7739%" height="15" fill="rgb(240,54,50)"/><text x="40.0042%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (16,993,192 samples, 1.70%)</title><rect x="87.8271%" y="165" width="1.7010%" height="15" fill="rgb(233,84,52)"/><text x="88.0771%" y="175.50"></text></g><g><title>macro_expand_crate (17,695,489 samples, 1.77%)</title><rect x="89.5850%" y="165" width="1.7713%" height="15" fill="rgb(207,117,47)"/><text x="89.8350%" y="175.50">m..</text></g><g><title>expand_crate (17,679,338 samples, 1.77%)</title><rect x="89.5866%" y="149" width="1.7697%" height="15" fill="rgb(249,43,39)"/><text x="89.8366%" y="159.50"></text></g><g><title>late_resolve_crate (3,498,927 samples, 0.35%)</title><rect x="91.4010%" y="149" width="0.3502%" height="15" fill="rgb(209,38,44)"/><text x="91.6510%" y="159.50"></text></g><g><title>configure_and_expand (22,448,249 samples, 2.25%)</title><rect x="89.5281%" y="181" width="2.2470%" height="15" fill="rgb(236,212,23)"/><text x="89.7781%" y="191.50">c..</text></g><g><title>resolve_crate (4,078,233 samples, 0.41%)</title><rect x="91.3669%" y="165" width="0.4082%" height="15" fill="rgb(242,79,21)"/><text x="91.6169%" y="175.50"></text></g><g><title>free_global_ctxt (6,700,211 samples, 0.67%)</title><rect x="91.8990%" y="181" width="0.6707%" height="15" fill="rgb(211,96,35)"/><text x="92.1490%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,841,148 samples, 0.18%)</title><rect x="93.9299%" y="85" width="0.1843%" height="15" fill="rgb(253,215,40)"/><text x="94.1799%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,712,477 samples, 0.57%)</title><rect x="94.1142%" y="85" width="0.5718%" height="15" fill="rgb(211,81,21)"/><text x="94.3642%" y="95.50"></text></g><g><title>optimized_mir (14,523,084 samples, 1.45%)</title><rect x="93.2993%" y="101" width="1.4537%" height="15" fill="rgb(208,190,38)"/><text x="93.5493%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,891,172 samples, 0.29%)</title><rect x="94.8610%" y="85" width="0.2894%" height="15" fill="rgb(235,213,38)"/><text x="95.1110%" y="95.50"></text></g><g><title>resolve_instance (6,136,481 samples, 0.61%)</title><rect x="94.7530%" y="101" width="0.6143%" height="15" fill="rgb(237,122,38)"/><text x="95.0030%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (25,682,204 samples, 2.57%)</title><rect x="92.9152%" y="117" width="2.5707%" height="15" fill="rgb(244,218,35)"/><text x="93.1652%" y="127.50">mo..</text></g><g><title>monomorphization_collector (25,775,375 samples, 2.58%)</title><rect x="92.9148%" y="133" width="2.5801%" height="15" fill="rgb(240,68,47)"/><text x="93.1648%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,841,039 samples, 0.18%)</title><rect x="95.4953%" y="117" width="0.1843%" height="15" fill="rgb(210,16,53)"/><text x="95.7453%" y="127.50"></text></g><g><title>symbol_name (1,665,969 samples, 0.17%)</title><rect x="95.5128%" y="101" width="0.1668%" height="15" fill="rgb(235,124,12)"/><text x="95.7628%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (28,505,574 samples, 2.85%)</title><rect x="92.9088%" y="149" width="2.8534%" height="15" fill="rgb(224,169,11)"/><text x="93.1588%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (2,670,678 samples, 0.27%)</title><rect x="95.4949%" y="133" width="0.2673%" height="15" fill="rgb(250,166,2)"/><text x="95.7449%" y="143.50"></text></g><g><title>exported_symbols (28,718,436 samples, 2.87%)</title><rect x="92.9004%" y="165" width="2.8747%" height="15" fill="rgb(242,216,29)"/><text x="93.1504%" y="175.50">ex..</text></g><g><title>layout_of (1,002,876 samples, 0.10%)</title><rect x="96.1086%" y="149" width="0.1004%" height="15" fill="rgb(230,116,27)"/><text x="96.3586%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,263,496 samples, 0.33%)</title><rect x="96.2090%" y="149" width="0.3267%" height="15" fill="rgb(228,99,48)"/><text x="96.4590%" y="159.50"></text></g><g><title>optimized_mir (7,496,126 samples, 0.75%)</title><rect x="95.7900%" y="165" width="0.7503%" height="15" fill="rgb(253,11,6)"/><text x="96.0400%" y="175.50"></text></g><g><title>generate_crate_metadata (39,777,444 samples, 3.98%)</title><rect x="92.5697%" y="181" width="3.9817%" height="15" fill="rgb(247,143,39)"/><text x="92.8197%" y="191.50">gene..</text></g><g><title>hir_lowering (6,374,428 samples, 0.64%)</title><rect x="96.5514%" y="181" width="0.6381%" height="15" fill="rgb(236,97,10)"/><text x="96.8014%" y="191.50"></text></g><g><title>finish_ongoing_codegen (22,043,066 samples, 2.21%)</title><rect x="97.1909%" y="165" width="2.2065%" height="15" fill="rgb(233,208,19)"/><text x="97.4409%" y="175.50">f..</text></g><g><title>link_crate (2,678,598 samples, 0.27%)</title><rect x="99.3974%" y="165" width="0.2681%" height="15" fill="rgb(216,164,2)"/><text x="99.6474%" y="175.50"></text></g><g><title>link_binary (2,638,708 samples, 0.26%)</title><rect x="99.4014%" y="149" width="0.2641%" height="15" fill="rgb(220,129,5)"/><text x="99.6514%" y="159.50"></text></g><g><title>link_rlib (2,017,001 samples, 0.20%)</title><rect x="99.4636%" y="133" width="0.2019%" height="15" fill="rgb(242,17,10)"/><text x="99.7136%" y="143.50"></text></g><g><title>link (24,748,154 samples, 2.48%)</title><rect x="97.1894%" y="181" width="2.4772%" height="15" fill="rgb(242,107,0)"/><text x="97.4394%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (2,264,484 samples, 0.23%)</title><rect x="99.7221%" y="181" width="0.2267%" height="15" fill="rgb(251,28,31)"/><text x="99.9721%" y="191.50"></text></g><g><title>all (999,018,881 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (999,018,881 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>