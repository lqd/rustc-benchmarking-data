<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,046,755,111 samples, 12.25%)</title><rect x="0.0794%" y="181" width="12.2472%" height="15" fill="rgb(227,0,7)"/><text x="0.3294%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (26,542,414 samples, 0.31%)</title><rect x="18.3347%" y="53" width="0.3105%" height="15" fill="rgb(217,0,24)"/><text x="18.5847%" y="63.50"></text></g><g><title>evaluate_obligation (21,540,394 samples, 0.25%)</title><rect x="18.3932%" y="37" width="0.2520%" height="15" fill="rgb(221,193,54)"/><text x="18.6432%" y="47.50"></text></g><g><title>needs_drop_raw (31,782,026 samples, 0.37%)</title><rect x="18.2750%" y="69" width="0.3719%" height="15" fill="rgb(248,212,6)"/><text x="18.5250%" y="79.50"></text></g><g><title>resolve_instance (10,293,790 samples, 0.12%)</title><rect x="18.6472%" y="69" width="0.1204%" height="15" fill="rgb(208,68,35)"/><text x="18.8972%" y="79.50"></text></g><g><title>thir_body (27,843,128 samples, 0.33%)</title><rect x="18.7754%" y="69" width="0.3258%" height="15" fill="rgb(232,128,0)"/><text x="19.0254%" y="79.50"></text></g><g><title>mir_const (191,624,175 samples, 2.24%)</title><rect x="16.8793%" y="117" width="2.2420%" height="15" fill="rgb(207,160,47)"/><text x="17.1293%" y="127.50">m..</text></g><g><title>unsafety_check_result (167,993,671 samples, 1.97%)</title><rect x="17.1558%" y="101" width="1.9655%" height="15" fill="rgb(228,23,34)"/><text x="17.4058%" y="111.50">u..</text></g><g><title>mir_built (152,964,925 samples, 1.79%)</title><rect x="17.3317%" y="85" width="1.7897%" height="15" fill="rgb(218,30,26)"/><text x="17.5817%" y="95.50">m..</text></g><g><title>mir_promoted (219,266,153 samples, 2.57%)</title><rect x="16.6131%" y="133" width="2.5654%" height="15" fill="rgb(220,122,19)"/><text x="16.8631%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (11,271,957 samples, 0.13%)</title><rect x="19.1787%" y="133" width="0.1319%" height="15" fill="rgb(250,228,42)"/><text x="19.4287%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (17,649,324 samples, 0.21%)</title><rect x="19.3106%" y="133" width="0.2065%" height="15" fill="rgb(240,193,28)"/><text x="19.5606%" y="143.50"></text></g><g><title>normalize_projection_ty (9,578,339 samples, 0.11%)</title><rect x="19.4050%" y="117" width="0.1121%" height="15" fill="rgb(216,20,37)"/><text x="19.6550%" y="127.50"></text></g><g><title>type_op_normalize_predicate (9,383,627 samples, 0.11%)</title><rect x="19.5171%" y="133" width="0.1098%" height="15" fill="rgb(206,188,39)"/><text x="19.7671%" y="143.50"></text></g><g><title>type_op_prove_predicate (55,521,844 samples, 0.65%)</title><rect x="19.7151%" y="133" width="0.6496%" height="15" fill="rgb(217,207,13)"/><text x="19.9651%" y="143.50"></text></g><g><title>MIR_borrow_checking (681,521,327 samples, 7.97%)</title><rect x="12.3917%" y="165" width="7.9739%" height="15" fill="rgb(231,73,38)"/><text x="12.6417%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (677,767,869 samples, 7.93%)</title><rect x="12.4356%" y="149" width="7.9300%" height="15" fill="rgb(225,20,46)"/><text x="12.6856%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (10,884,787 samples, 0.13%)</title><rect x="20.4483%" y="149" width="0.1274%" height="15" fill="rgb(210,31,41)"/><text x="20.6983%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (12,682,614 samples, 0.15%)</title><rect x="20.6403%" y="149" width="0.1484%" height="15" fill="rgb(221,200,47)"/><text x="20.8903%" y="159.50"></text></g><g><title>misc_checking_1 (30,183,533 samples, 0.35%)</title><rect x="20.4441%" y="165" width="0.3532%" height="15" fill="rgb(226,26,5)"/><text x="20.6941%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (13,901,059 samples, 0.16%)</title><rect x="20.7974%" y="149" width="0.1626%" height="15" fill="rgb(249,33,26)"/><text x="21.0474%" y="159.50"></text></g><g><title>check_mod_liveness (11,747,327 samples, 0.14%)</title><rect x="20.8226%" y="133" width="0.1374%" height="15" fill="rgb(235,183,28)"/><text x="21.0726%" y="143.50"></text></g><g><title>misc_checking_2 (34,995,631 samples, 0.41%)</title><rect x="20.7973%" y="165" width="0.4095%" height="15" fill="rgb(221,5,38)"/><text x="21.0473%" y="175.50"></text></g><g><title>match_checking (21,088,262 samples, 0.25%)</title><rect x="20.9600%" y="149" width="0.2467%" height="15" fill="rgb(247,18,42)"/><text x="21.2100%" y="159.50"></text></g><g><title>check_match (19,922,899 samples, 0.23%)</title><rect x="20.9736%" y="133" width="0.2331%" height="15" fill="rgb(241,131,45)"/><text x="21.2236%" y="143.50"></text></g><g><title>death_checking (10,878,780 samples, 0.13%)</title><rect x="21.2960%" y="149" width="0.1273%" height="15" fill="rgb(249,31,29)"/><text x="21.5460%" y="159.50"></text></g><g><title>crate_lints (20,605,466 samples, 0.24%)</title><rect x="21.4233%" y="133" width="0.2411%" height="15" fill="rgb(225,111,53)"/><text x="21.6733%" y="143.50"></text></g><g><title>lint_checking (34,219,863 samples, 0.40%)</title><rect x="21.4232%" y="149" width="0.4004%" height="15" fill="rgb(238,160,17)"/><text x="21.6732%" y="159.50"></text></g><g><title>module_lints (13,610,987 samples, 0.16%)</title><rect x="21.6644%" y="133" width="0.1593%" height="15" fill="rgb(214,148,48)"/><text x="21.9144%" y="143.50"></text></g><g><title>lint_mod (13,569,615 samples, 0.16%)</title><rect x="21.6649%" y="117" width="0.1588%" height="15" fill="rgb(232,36,49)"/><text x="21.9149%" y="127.50"></text></g><g><title>privacy_access_levels (11,146,512 samples, 0.13%)</title><rect x="21.8236%" y="149" width="0.1304%" height="15" fill="rgb(209,103,24)"/><text x="22.0736%" y="159.50"></text></g><g><title>privacy_checking_modules (28,654,918 samples, 0.34%)</title><rect x="21.9540%" y="149" width="0.3353%" height="15" fill="rgb(229,88,8)"/><text x="22.2040%" y="159.50"></text></g><g><title>check_mod_privacy (28,620,618 samples, 0.33%)</title><rect x="21.9544%" y="133" width="0.3349%" height="15" fill="rgb(213,181,19)"/><text x="22.2044%" y="143.50"></text></g><g><title>misc_checking_3 (92,752,961 samples, 1.09%)</title><rect x="21.2067%" y="165" width="1.0852%" height="15" fill="rgb(254,191,54)"/><text x="21.4567%" y="175.50"></text></g><g><title>impl_trait_ref (9,964,070 samples, 0.12%)</title><rect x="22.5181%" y="101" width="0.1166%" height="15" fill="rgb(241,83,37)"/><text x="22.7681%" y="111.50"></text></g><g><title>coherent_trait (30,674,378 samples, 0.36%)</title><rect x="22.3146%" y="133" width="0.3589%" height="15" fill="rgb(233,36,39)"/><text x="22.5646%" y="143.50"></text></g><g><title>specialization_graph_of (27,145,441 samples, 0.32%)</title><rect x="22.3558%" y="117" width="0.3176%" height="15" fill="rgb(226,3,54)"/><text x="22.6058%" y="127.50"></text></g><g><title>coherence_checking (31,545,356 samples, 0.37%)</title><rect x="22.3140%" y="149" width="0.3691%" height="15" fill="rgb(245,192,40)"/><text x="22.5640%" y="159.50"></text></g><g><title>dropck_outlives (9,303,768 samples, 0.11%)</title><rect x="29.1420%" y="101" width="0.1089%" height="15" fill="rgb(238,167,29)"/><text x="29.3920%" y="111.50"></text></g><g><title>evaluate_obligation (26,514,064 samples, 0.31%)</title><rect x="29.2923%" y="101" width="0.3102%" height="15" fill="rgb(232,182,51)"/><text x="29.5423%" y="111.50"></text></g><g><title>evaluate_obligation (10,228,188 samples, 0.12%)</title><rect x="31.1844%" y="85" width="0.1197%" height="15" fill="rgb(231,60,39)"/><text x="31.4344%" y="95.50"></text></g><g><title>typeck (139,751,735 samples, 1.64%)</title><rect x="29.7500%" y="101" width="1.6351%" height="15" fill="rgb(208,69,12)"/><text x="30.0000%" y="111.50"></text></g><g><title>item_bodies_checking (743,706,210 samples, 8.70%)</title><rect x="22.6928%" y="149" width="8.7015%" height="15" fill="rgb(235,93,37)"/><text x="22.9428%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (743,702,110 samples, 8.70%)</title><rect x="22.6929%" y="133" width="8.7014%" height="15" fill="rgb(213,116,39)"/><text x="22.9429%" y="143.50">typeck_item_..</text></g><g><title>typeck (739,221,487 samples, 8.65%)</title><rect x="22.7453%" y="117" width="8.6490%" height="15" fill="rgb(222,207,29)"/><text x="22.9953%" y="127.50">typeck</text></g><g><title>item_types_checking (51,224,034 samples, 0.60%)</title><rect x="31.3943%" y="149" width="0.5993%" height="15" fill="rgb(206,96,30)"/><text x="31.6443%" y="159.50"></text></g><g><title>check_mod_item_types (51,190,624 samples, 0.60%)</title><rect x="31.3947%" y="133" width="0.5989%" height="15" fill="rgb(218,138,4)"/><text x="31.6447%" y="143.50"></text></g><g><title>eval_to_const_value_raw (8,793,505 samples, 0.10%)</title><rect x="32.0678%" y="117" width="0.1029%" height="15" fill="rgb(250,191,14)"/><text x="32.3178%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,765,915 samples, 0.10%)</title><rect x="32.0682%" y="101" width="0.1026%" height="15" fill="rgb(239,60,40)"/><text x="32.3182%" y="111.50"></text></g><g><title>eval_to_allocation_raw (8,742,485 samples, 0.10%)</title><rect x="32.0684%" y="85" width="0.1023%" height="15" fill="rgb(206,27,48)"/><text x="32.3184%" y="95.50"></text></g><g><title>fn_sig (10,959,940 samples, 0.13%)</title><rect x="32.1707%" y="117" width="0.1282%" height="15" fill="rgb(225,35,8)"/><text x="32.4207%" y="127.50"></text></g><g><title>generics_of (12,428,692 samples, 0.15%)</title><rect x="32.2989%" y="117" width="0.1454%" height="15" fill="rgb(250,213,24)"/><text x="32.5489%" y="127.50"></text></g><g><title>predicates_of (11,620,265 samples, 0.14%)</title><rect x="32.4553%" y="117" width="0.1360%" height="15" fill="rgb(247,123,22)"/><text x="32.7053%" y="127.50"></text></g><g><title>predicates_defined_on (10,178,575 samples, 0.12%)</title><rect x="32.4722%" y="101" width="0.1191%" height="15" fill="rgb(231,138,38)"/><text x="32.7222%" y="111.50"></text></g><g><title>type_collecting (52,916,481 samples, 0.62%)</title><rect x="31.9941%" y="149" width="0.6191%" height="15" fill="rgb(231,145,46)"/><text x="32.2441%" y="159.50"></text></g><g><title>collect_mod_item_types (52,859,811 samples, 0.62%)</title><rect x="31.9948%" y="133" width="0.6185%" height="15" fill="rgb(251,118,11)"/><text x="32.2448%" y="143.50"></text></g><g><title>param_env (9,270,598 samples, 0.11%)</title><rect x="33.5681%" y="117" width="0.1085%" height="15" fill="rgb(217,147,25)"/><text x="33.8181%" y="127.50"></text></g><g><title>region_scope_tree (9,866,219 samples, 0.12%)</title><rect x="33.6790%" y="117" width="0.1154%" height="15" fill="rgb(247,81,37)"/><text x="33.9290%" y="127.50"></text></g><g><title>check_impl_item_well_formed (95,970,165 samples, 1.12%)</title><rect x="32.6737%" y="133" width="1.1229%" height="15" fill="rgb(209,12,38)"/><text x="32.9237%" y="143.50"></text></g><g><title>analysis (1,865,311,943 samples, 21.82%)</title><rect x="12.3266%" y="181" width="21.8244%" height="15" fill="rgb(227,1,9)"/><text x="12.5766%" y="191.50">analysis</text></g><g><title>type_check_crate (1,013,579,808 samples, 11.86%)</title><rect x="22.2920%" y="165" width="11.8590%" height="15" fill="rgb(248,47,43)"/><text x="22.5420%" y="175.50">type_check_crate</text></g><g><title>wf_checking (131,230,067 samples, 1.54%)</title><rect x="32.6156%" y="149" width="1.5354%" height="15" fill="rgb(221,10,30)"/><text x="32.8656%" y="159.50"></text></g><g><title>check_item_well_formed (30,294,007 samples, 0.35%)</title><rect x="33.7965%" y="133" width="0.3544%" height="15" fill="rgb(210,229,1)"/><text x="34.0465%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (17,728,673 samples, 0.21%)</title><rect x="43.5668%" y="149" width="0.2074%" height="15" fill="rgb(222,148,37)"/><text x="43.8168%" y="159.50"></text></g><g><title>const_caller_location (11,264,421 samples, 0.13%)</title><rect x="43.7742%" y="149" width="0.1318%" height="15" fill="rgb(234,67,33)"/><text x="44.0242%" y="159.50"></text></g><g><title>param_env (23,422,307 samples, 0.27%)</title><rect x="44.4463%" y="133" width="0.2740%" height="15" fill="rgb(247,98,35)"/><text x="44.6963%" y="143.50"></text></g><g><title>normalize_projection_ty (10,454,872 samples, 0.12%)</title><rect x="44.7832%" y="117" width="0.1223%" height="15" fill="rgb(247,138,52)"/><text x="45.0332%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (15,894,619 samples, 0.19%)</title><rect x="44.7203%" y="133" width="0.1860%" height="15" fill="rgb(213,79,30)"/><text x="44.9703%" y="143.50"></text></g><g><title>fn_abi_of_instance (85,616,154 samples, 1.00%)</title><rect x="43.9086%" y="149" width="1.0017%" height="15" fill="rgb(246,177,23)"/><text x="44.1586%" y="159.50"></text></g><g><title>layout_of (12,436,821 samples, 0.15%)</title><rect x="44.9487%" y="149" width="0.1455%" height="15" fill="rgb(230,62,27)"/><text x="45.1987%" y="159.50"></text></g><g><title>codegen_module (940,545,065 samples, 11.00%)</title><rect x="34.2107%" y="165" width="11.0045%" height="15" fill="rgb(216,154,8)"/><text x="34.4607%" y="175.50">codegen_module</text></g><g><title>codegen_crate (945,791,167 samples, 11.07%)</title><rect x="34.1511%" y="181" width="11.0659%" height="15" fill="rgb(244,35,45)"/><text x="34.4011%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (3,362,671,186 samples, 39.34%)</title><rect x="45.2205%" y="165" width="39.3437%" height="15" fill="rgb(251,115,12)"/><text x="45.4705%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (3,171,073,991 samples, 37.10%)</title><rect x="47.4622%" y="149" width="37.1019%" height="15" fill="rgb(240,54,50)"/><text x="47.7122%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (3,499,983,772 samples, 40.95%)</title><rect x="45.2170%" y="181" width="40.9502%" height="15" fill="rgb(233,84,52)"/><text x="45.4670%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (137,012,865 samples, 1.60%)</title><rect x="84.5641%" y="165" width="1.6031%" height="15" fill="rgb(207,117,47)"/><text x="84.8141%" y="175.50"></text></g><g><title>macro_expand_crate (303,692,827 samples, 3.55%)</title><rect x="86.2556%" y="165" width="3.5532%" height="15" fill="rgb(249,43,39)"/><text x="86.5056%" y="175.50">macr..</text></g><g><title>expand_crate (303,666,206 samples, 3.55%)</title><rect x="86.2559%" y="149" width="3.5529%" height="15" fill="rgb(209,38,44)"/><text x="86.5059%" y="159.50">expa..</text></g><g><title>late_resolve_crate (35,564,917 samples, 0.42%)</title><rect x="89.8401%" y="149" width="0.4161%" height="15" fill="rgb(236,212,23)"/><text x="90.0901%" y="159.50"></text></g><g><title>configure_and_expand (354,643,718 samples, 4.15%)</title><rect x="86.1672%" y="181" width="4.1494%" height="15" fill="rgb(242,79,21)"/><text x="86.4172%" y="191.50">confi..</text></g><g><title>resolve_crate (43,282,144 samples, 0.51%)</title><rect x="89.8102%" y="165" width="0.5064%" height="15" fill="rgb(211,96,35)"/><text x="90.0602%" y="175.50"></text></g><g><title>early_lint_checks (9,994,870 samples, 0.12%)</title><rect x="90.3894%" y="181" width="0.1169%" height="15" fill="rgb(253,215,40)"/><text x="90.6394%" y="191.50"></text></g><g><title>free_global_ctxt (32,326,895 samples, 0.38%)</title><rect x="90.5063%" y="181" width="0.3782%" height="15" fill="rgb(211,81,21)"/><text x="90.7563%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (13,918,353 samples, 0.16%)</title><rect x="92.3734%" y="85" width="0.1628%" height="15" fill="rgb(208,190,38)"/><text x="92.6234%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (31,976,319 samples, 0.37%)</title><rect x="92.5363%" y="85" width="0.3741%" height="15" fill="rgb(235,213,38)"/><text x="92.7863%" y="95.50"></text></g><g><title>optimized_mir (79,694,632 samples, 0.93%)</title><rect x="92.0398%" y="101" width="0.9324%" height="15" fill="rgb(237,122,38)"/><text x="92.2898%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (42,883,949 samples, 0.50%)</title><rect x="93.1264%" y="85" width="0.5017%" height="15" fill="rgb(244,218,35)"/><text x="93.3764%" y="95.50"></text></g><g><title>resolve_instance (69,531,188 samples, 0.81%)</title><rect x="92.9723%" y="101" width="0.8135%" height="15" fill="rgb(240,68,47)"/><text x="93.2223%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (9,211,449 samples, 0.11%)</title><rect x="93.7858%" y="101" width="0.1078%" height="15" fill="rgb(210,16,53)"/><text x="94.0358%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (9,543,688 samples, 0.11%)</title><rect x="93.8936%" y="101" width="0.1117%" height="15" fill="rgb(235,124,12)"/><text x="94.1436%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (227,334,090 samples, 2.66%)</title><rect x="91.4138%" y="117" width="2.6598%" height="15" fill="rgb(224,169,11)"/><text x="91.6638%" y="127.50">mo..</text></g><g><title>monomorphization_collector (228,301,509 samples, 2.67%)</title><rect x="91.4137%" y="133" width="2.6712%" height="15" fill="rgb(250,166,2)"/><text x="91.6637%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (27,284,544 samples, 0.32%)</title><rect x="94.0850%" y="117" width="0.3192%" height="15" fill="rgb(242,216,29)"/><text x="94.3350%" y="127.50"></text></g><g><title>symbol_name (24,018,763 samples, 0.28%)</title><rect x="94.1232%" y="101" width="0.2810%" height="15" fill="rgb(230,116,27)"/><text x="94.3732%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (266,397,583 samples, 3.12%)</title><rect x="91.4120%" y="149" width="3.1169%" height="15" fill="rgb(228,99,48)"/><text x="91.6620%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (37,948,390 samples, 0.44%)</title><rect x="94.0849%" y="133" width="0.4440%" height="15" fill="rgb(253,11,6)"/><text x="94.3349%" y="143.50"></text></g><g><title>cgu_partitioning (10,656,796 samples, 0.12%)</title><rect x="94.4042%" y="117" width="0.1247%" height="15" fill="rgb(247,143,39)"/><text x="94.6542%" y="127.50"></text></g><g><title>exported_symbols (271,761,646 samples, 3.18%)</title><rect x="91.3957%" y="165" width="3.1796%" height="15" fill="rgb(236,97,10)"/><text x="91.6457%" y="175.50">exp..</text></g><g><title>layout_of (11,176,996 samples, 0.13%)</title><rect x="95.3644%" y="149" width="0.1308%" height="15" fill="rgb(233,208,19)"/><text x="95.6144%" y="159.50"></text></g><g><title>is_copy_raw (14,681,940 samples, 0.17%)</title><rect x="96.6586%" y="117" width="0.1718%" height="15" fill="rgb(216,164,2)"/><text x="96.9086%" y="127.50"></text></g><g><title>evaluate_obligation (12,289,595 samples, 0.14%)</title><rect x="96.6865%" y="101" width="0.1438%" height="15" fill="rgb(220,129,5)"/><text x="96.9365%" y="111.50"></text></g><g><title>needs_drop_raw (16,230,811 samples, 0.19%)</title><rect x="96.6418%" y="133" width="0.1899%" height="15" fill="rgb(242,17,10)"/><text x="96.8918%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (116,590,678 samples, 1.36%)</title><rect x="95.4951%" y="149" width="1.3641%" height="15" fill="rgb(242,107,0)"/><text x="95.7451%" y="159.50"></text></g><g><title>optimized_mir (194,542,684 samples, 2.28%)</title><rect x="94.5999%" y="165" width="2.2762%" height="15" fill="rgb(251,28,31)"/><text x="94.8499%" y="175.50">o..</text></g><g><title>generate_crate_metadata (515,949,306 samples, 6.04%)</title><rect x="90.8845%" y="181" width="6.0367%" height="15" fill="rgb(233,223,10)"/><text x="91.1345%" y="191.50">generate..</text></g><g><title>hir_lowering (77,968,333 samples, 0.91%)</title><rect x="96.9212%" y="181" width="0.9122%" height="15" fill="rgb(215,21,27)"/><text x="97.1712%" y="191.50"></text></g><g><title>finish_ongoing_codegen (131,879,883 samples, 1.54%)</title><rect x="97.8336%" y="165" width="1.5430%" height="15" fill="rgb(232,23,21)"/><text x="98.0836%" y="175.50"></text></g><g><title>link_crate (37,577,907 samples, 0.44%)</title><rect x="99.3767%" y="165" width="0.4397%" height="15" fill="rgb(244,5,23)"/><text x="99.6267%" y="175.50"></text></g><g><title>link_binary (36,990,021 samples, 0.43%)</title><rect x="99.3835%" y="149" width="0.4328%" height="15" fill="rgb(226,81,46)"/><text x="99.6335%" y="159.50"></text></g><g><title>link_rlib (32,538,896 samples, 0.38%)</title><rect x="99.4356%" y="133" width="0.3807%" height="15" fill="rgb(247,70,30)"/><text x="99.6856%" y="143.50"></text></g><g><title>link (169,487,620 samples, 1.98%)</title><rect x="97.8334%" y="181" width="1.9830%" height="15" fill="rgb(212,68,19)"/><text x="98.0834%" y="191.50">l..</text></g><g><title>self_profile_alloc_query_strings (11,577,146 samples, 0.14%)</title><rect x="99.8291%" y="181" width="0.1355%" height="15" fill="rgb(240,187,13)"/><text x="100.0791%" y="191.50"></text></g><g><title>all (8,546,921,332 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (8,546,921,332 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>