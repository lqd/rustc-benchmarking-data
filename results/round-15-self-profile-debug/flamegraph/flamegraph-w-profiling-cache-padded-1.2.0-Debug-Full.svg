<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,213,612 samples, 3.79%)</title><rect x="1.1704%" y="261" width="3.7861%" height="15" fill="rgb(227,0,7)"/><text x="1.4204%" y="271.50">LLVM..</text></g><g><title>codegen_fn_attrs (78,520 samples, 0.13%)</title><rect x="11.4940%" y="165" width="0.1343%" height="15" fill="rgb(217,0,24)"/><text x="11.7440%" y="175.50"></text></g><g><title>explicit_predicates_of (121,311 samples, 0.21%)</title><rect x="12.8561%" y="53" width="0.2075%" height="15" fill="rgb(221,193,54)"/><text x="13.1061%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (120,491 samples, 0.21%)</title><rect x="12.8575%" y="37" width="0.2061%" height="15" fill="rgb(248,212,6)"/><text x="13.1075%" y="47.50"></text></g><g><title>is_copy_raw (214,293 samples, 0.37%)</title><rect x="12.6996%" y="117" width="0.3665%" height="15" fill="rgb(208,68,35)"/><text x="12.9496%" y="127.50"></text></g><g><title>evaluate_obligation (205,382 samples, 0.35%)</title><rect x="12.7148%" y="101" width="0.3513%" height="15" fill="rgb(232,128,0)"/><text x="12.9648%" y="111.50"></text></g><g><title>predicates_of (131,041 samples, 0.22%)</title><rect x="12.8420%" y="85" width="0.2241%" height="15" fill="rgb(207,160,47)"/><text x="13.0920%" y="95.50"></text></g><g><title>predicates_defined_on (126,011 samples, 0.22%)</title><rect x="12.8506%" y="69" width="0.2155%" height="15" fill="rgb(228,23,34)"/><text x="13.1006%" y="79.50"></text></g><g><title>adt_drop_tys (264,033 samples, 0.45%)</title><rect x="12.6558%" y="133" width="0.4516%" height="15" fill="rgb(218,30,26)"/><text x="12.9058%" y="143.50"></text></g><g><title>needs_drop_raw (385,645 samples, 0.66%)</title><rect x="12.6134%" y="149" width="0.6596%" height="15" fill="rgb(220,122,19)"/><text x="12.8634%" y="159.50"></text></g><g><title>is_copy_raw (96,832 samples, 0.17%)</title><rect x="13.1074%" y="133" width="0.1656%" height="15" fill="rgb(250,228,42)"/><text x="13.3574%" y="143.50"></text></g><g><title>evaluate_obligation (72,202 samples, 0.12%)</title><rect x="13.1495%" y="117" width="0.1235%" height="15" fill="rgb(240,193,28)"/><text x="13.3995%" y="127.50"></text></g><g><title>resolve_instance (122,631 samples, 0.21%)</title><rect x="13.2730%" y="149" width="0.2097%" height="15" fill="rgb(216,20,37)"/><text x="13.5230%" y="159.50"></text></g><g><title>thir_body (261,852 samples, 0.45%)</title><rect x="13.4984%" y="149" width="0.4479%" height="15" fill="rgb(206,188,39)"/><text x="13.7484%" y="159.50"></text></g><g><title>mir_const (1,875,630 samples, 3.21%)</title><rect x="10.7477%" y="197" width="3.2080%" height="15" fill="rgb(217,207,13)"/><text x="10.9977%" y="207.50">mir..</text></g><g><title>unsafety_check_result (1,554,307 samples, 2.66%)</title><rect x="11.2973%" y="181" width="2.6584%" height="15" fill="rgb(231,73,38)"/><text x="11.5473%" y="191.50">un..</text></g><g><title>mir_built (1,360,783 samples, 2.33%)</title><rect x="11.6283%" y="165" width="2.3274%" height="15" fill="rgb(225,20,46)"/><text x="11.8783%" y="175.50">m..</text></g><g><title>is_freeze_raw (105,141 samples, 0.18%)</title><rect x="14.3798%" y="181" width="0.1798%" height="15" fill="rgb(210,31,41)"/><text x="14.6298%" y="191.50"></text></g><g><title>evaluate_obligation (95,831 samples, 0.16%)</title><rect x="14.3957%" y="165" width="0.1639%" height="15" fill="rgb(221,200,47)"/><text x="14.6457%" y="175.50"></text></g><g><title>mir_const (288,313 samples, 0.49%)</title><rect x="14.5596%" y="181" width="0.4931%" height="15" fill="rgb(226,26,5)"/><text x="14.8096%" y="191.50"></text></g><g><title>unsafety_check_result (216,942 samples, 0.37%)</title><rect x="14.6817%" y="165" width="0.3711%" height="15" fill="rgb(249,33,26)"/><text x="14.9317%" y="175.50"></text></g><g><title>mir_built (157,632 samples, 0.27%)</title><rect x="14.7831%" y="149" width="0.2696%" height="15" fill="rgb(235,183,28)"/><text x="15.0331%" y="159.50"></text></g><g><title>mir_promoted (2,825,219 samples, 4.83%)</title><rect x="10.3140%" y="213" width="4.8322%" height="15" fill="rgb(221,5,38)"/><text x="10.5640%" y="223.50">mir_pr..</text></g><g><title>mir_const_qualif (696,037 samples, 1.19%)</title><rect x="13.9557%" y="197" width="1.1905%" height="15" fill="rgb(247,18,42)"/><text x="14.2057%" y="207.50"></text></g><g><title>type_op_prove_predicate (444,525 samples, 0.76%)</title><rect x="15.2409%" y="213" width="0.7603%" height="15" fill="rgb(241,131,45)"/><text x="15.4909%" y="223.50"></text></g><g><title>MIR_borrow_checking (6,269,603 samples, 10.72%)</title><rect x="5.2823%" y="245" width="10.7234%" height="15" fill="rgb(249,31,29)"/><text x="5.5323%" y="255.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (6,225,303 samples, 10.65%)</title><rect x="5.3580%" y="229" width="10.6476%" height="15" fill="rgb(225,111,53)"/><text x="5.6080%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (220,882 samples, 0.38%)</title><rect x="16.0056%" y="245" width="0.3778%" height="15" fill="rgb(238,160,17)"/><text x="16.2556%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (191,822 samples, 0.33%)</title><rect x="16.0553%" y="229" width="0.3281%" height="15" fill="rgb(214,148,48)"/><text x="16.3053%" y="239.50"></text></g><g><title>hir_module_items (149,762 samples, 0.26%)</title><rect x="16.3834%" y="245" width="0.2561%" height="15" fill="rgb(232,36,49)"/><text x="16.6334%" y="255.50"></text></g><g><title>associated_item (76,721 samples, 0.13%)</title><rect x="17.1057%" y="181" width="0.1312%" height="15" fill="rgb(209,103,24)"/><text x="17.3557%" y="191.50"></text></g><g><title>get_lang_items (69,421 samples, 0.12%)</title><rect x="17.3250%" y="165" width="0.1187%" height="15" fill="rgb(229,88,8)"/><text x="17.5750%" y="175.50"></text></g><g><title>item_attrs (93,912 samples, 0.16%)</title><rect x="17.4438%" y="165" width="0.1606%" height="15" fill="rgb(213,181,19)"/><text x="17.6938%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (87,612 samples, 0.15%)</title><rect x="17.4545%" y="149" width="0.1498%" height="15" fill="rgb(254,191,54)"/><text x="17.7045%" y="159.50"></text></g><g><title>codegen_fn_attrs (295,343 samples, 0.51%)</title><rect x="17.2369%" y="181" width="0.5051%" height="15" fill="rgb(241,83,37)"/><text x="17.4869%" y="191.50"></text></g><g><title>codegen_fn_attrs (463,584 samples, 0.79%)</title><rect x="16.9574%" y="213" width="0.7929%" height="15" fill="rgb(233,36,39)"/><text x="17.2074%" y="223.50"></text></g><g><title>should_inherit_track_caller (411,344 samples, 0.70%)</title><rect x="17.0467%" y="197" width="0.7036%" height="15" fill="rgb(226,3,54)"/><text x="17.2967%" y="207.50"></text></g><g><title>check_mod_attrs (629,266 samples, 1.08%)</title><rect x="16.6870%" y="229" width="1.0763%" height="15" fill="rgb(245,192,40)"/><text x="16.9370%" y="239.50"></text></g><g><title>check_mod_const_bodies (65,561 samples, 0.11%)</title><rect x="17.7632%" y="229" width="0.1121%" height="15" fill="rgb(238,167,29)"/><text x="18.0132%" y="239.50"></text></g><g><title>lookup_deprecation_entry (96,410 samples, 0.16%)</title><rect x="18.1221%" y="213" width="0.1649%" height="15" fill="rgb(232,182,51)"/><text x="18.3721%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (293,333 samples, 0.50%)</title><rect x="17.9307%" y="229" width="0.5017%" height="15" fill="rgb(231,60,39)"/><text x="18.1807%" y="239.50"></text></g><g><title>misc_checking_1 (1,091,601 samples, 1.87%)</title><rect x="16.6407%" y="245" width="1.8670%" height="15" fill="rgb(208,69,12)"/><text x="16.8907%" y="255.50">m..</text></g><g><title>liveness_and_intrinsic_checking (124,892 samples, 0.21%)</title><rect x="18.5121%" y="229" width="0.2136%" height="15" fill="rgb(235,93,37)"/><text x="18.7621%" y="239.50"></text></g><g><title>check_mod_liveness (90,181 samples, 0.15%)</title><rect x="18.5715%" y="213" width="0.1542%" height="15" fill="rgb(213,116,39)"/><text x="18.8215%" y="223.50"></text></g><g><title>misc_checking_2 (352,324 samples, 0.60%)</title><rect x="18.5077%" y="245" width="0.6026%" height="15" fill="rgb(222,207,29)"/><text x="18.7577%" y="255.50"></text></g><g><title>match_checking (224,872 samples, 0.38%)</title><rect x="18.7257%" y="229" width="0.3846%" height="15" fill="rgb(206,96,30)"/><text x="18.9757%" y="239.50"></text></g><g><title>check_match (210,122 samples, 0.36%)</title><rect x="18.7510%" y="213" width="0.3594%" height="15" fill="rgb(218,138,4)"/><text x="19.0010%" y="223.50"></text></g><g><title>check_private_in_public (88,181 samples, 0.15%)</title><rect x="19.1314%" y="229" width="0.1508%" height="15" fill="rgb(250,191,14)"/><text x="19.3814%" y="239.50"></text></g><g><title>item_attrs (194,651 samples, 0.33%)</title><rect x="19.5383%" y="213" width="0.3329%" height="15" fill="rgb(239,60,40)"/><text x="19.7883%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (191,841 samples, 0.33%)</title><rect x="19.5432%" y="197" width="0.3281%" height="15" fill="rgb(206,27,48)"/><text x="19.7932%" y="207.50"></text></g><g><title>death_checking (428,584 samples, 0.73%)</title><rect x="19.2822%" y="229" width="0.7330%" height="15" fill="rgb(225,35,8)"/><text x="19.5322%" y="239.50"></text></g><g><title>lint_levels (84,161 samples, 0.14%)</title><rect x="19.8713%" y="213" width="0.1439%" height="15" fill="rgb(250,213,24)"/><text x="20.1213%" y="223.50"></text></g><g><title>param_env (75,571 samples, 0.13%)</title><rect x="21.2493%" y="197" width="0.1293%" height="15" fill="rgb(247,123,22)"/><text x="21.4993%" y="207.50"></text></g><g><title>crate_lints (1,302,323 samples, 2.23%)</title><rect x="20.0200%" y="213" width="2.2275%" height="15" fill="rgb(231,138,38)"/><text x="20.2700%" y="223.50">c..</text></g><g><title>type_of (508,023 samples, 0.87%)</title><rect x="21.3785%" y="197" width="0.8689%" height="15" fill="rgb(231,145,46)"/><text x="21.6285%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (357,962 samples, 0.61%)</title><rect x="21.6352%" y="181" width="0.6122%" height="15" fill="rgb(251,118,11)"/><text x="21.8852%" y="191.50"></text></g><g><title>lint_checking (1,384,374 samples, 2.37%)</title><rect x="20.0152%" y="229" width="2.3678%" height="15" fill="rgb(217,147,25)"/><text x="20.2652%" y="239.50">li..</text></g><g><title>module_lints (79,281 samples, 0.14%)</title><rect x="22.2474%" y="213" width="0.1356%" height="15" fill="rgb(247,81,37)"/><text x="22.4974%" y="223.50"></text></g><g><title>lint_mod (75,911 samples, 0.13%)</title><rect x="22.2532%" y="197" width="0.1298%" height="15" fill="rgb(209,12,38)"/><text x="22.5032%" y="207.50"></text></g><g><title>privacy_access_levels (104,721 samples, 0.18%)</title><rect x="22.3830%" y="229" width="0.1791%" height="15" fill="rgb(227,1,9)"/><text x="22.6330%" y="239.50"></text></g><g><title>privacy_checking_modules (213,742 samples, 0.37%)</title><rect x="22.5621%" y="229" width="0.3656%" height="15" fill="rgb(248,47,43)"/><text x="22.8121%" y="239.50"></text></g><g><title>check_mod_privacy (211,132 samples, 0.36%)</title><rect x="22.5666%" y="213" width="0.3611%" height="15" fill="rgb(221,10,30)"/><text x="22.8166%" y="223.50"></text></g><g><title>misc_checking_3 (2,242,342 samples, 3.84%)</title><rect x="19.1104%" y="245" width="3.8352%" height="15" fill="rgb(210,229,1)"/><text x="19.3604%" y="255.50">misc..</text></g><g><title>adt_destructor (89,271 samples, 0.15%)</title><rect x="23.2030%" y="197" width="0.1527%" height="15" fill="rgb(222,148,37)"/><text x="23.4530%" y="207.50"></text></g><g><title>coherent_trait (76,460 samples, 0.13%)</title><rect x="23.2249%" y="181" width="0.1308%" height="15" fill="rgb(234,67,33)"/><text x="23.4749%" y="191.50"></text></g><g><title>specialization_graph_of (74,040 samples, 0.13%)</title><rect x="23.2290%" y="165" width="0.1266%" height="15" fill="rgb(247,98,35)"/><text x="23.4790%" y="175.50"></text></g><g><title>is_copy_raw (107,921 samples, 0.18%)</title><rect x="23.3557%" y="197" width="0.1846%" height="15" fill="rgb(247,138,52)"/><text x="23.6057%" y="207.50"></text></g><g><title>evaluate_obligation (78,811 samples, 0.13%)</title><rect x="23.4055%" y="181" width="0.1348%" height="15" fill="rgb(213,79,30)"/><text x="23.6555%" y="191.50"></text></g><g><title>param_env (94,221 samples, 0.16%)</title><rect x="23.5403%" y="197" width="0.1612%" height="15" fill="rgb(246,177,23)"/><text x="23.7903%" y="207.50"></text></g><g><title>impl_parent (1,961,286 samples, 3.35%)</title><rect x="30.8135%" y="181" width="3.3545%" height="15" fill="rgb(230,62,27)"/><text x="31.0635%" y="191.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (996,447 samples, 1.70%)</title><rect x="32.4637%" y="165" width="1.7043%" height="15" fill="rgb(216,154,8)"/><text x="32.7137%" y="175.50"></text></g><g><title>impl_trait_ref (3,851,593 samples, 6.59%)</title><rect x="34.1739%" y="181" width="6.5877%" height="15" fill="rgb(244,35,45)"/><text x="34.4239%" y="191.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,859,436 samples, 4.89%)</title><rect x="35.8708%" y="165" width="4.8907%" height="15" fill="rgb(251,115,12)"/><text x="36.1208%" y="175.50">metada..</text></g><g><title>trait_impls_of (821,209 samples, 1.40%)</title><rect x="40.9121%" y="181" width="1.4046%" height="15" fill="rgb(240,54,50)"/><text x="41.1621%" y="191.50"></text></g><g><title>implementations_of_trait (189,003 samples, 0.32%)</title><rect x="41.9934%" y="165" width="0.3233%" height="15" fill="rgb(233,84,52)"/><text x="42.2434%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (167,643 samples, 0.29%)</title><rect x="42.0299%" y="149" width="0.2867%" height="15" fill="rgb(207,117,47)"/><text x="42.2799%" y="159.50"></text></g><g><title>coherent_trait (11,243,944 samples, 19.23%)</title><rect x="23.0898%" y="213" width="19.2313%" height="15" fill="rgb(249,43,39)"/><text x="23.3398%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (10,886,368 samples, 18.62%)</title><rect x="23.7014%" y="197" width="18.6198%" height="15" fill="rgb(209,38,44)"/><text x="23.9514%" y="207.50">specialization_graph_of</text></g><g><title>coherence_checking (11,350,245 samples, 19.41%)</title><rect x="23.0297%" y="229" width="19.4132%" height="15" fill="rgb(236,212,23)"/><text x="23.2797%" y="239.50">coherence_checking</text></g><g><title>associated_items (91,251 samples, 0.16%)</title><rect x="49.4492%" y="181" width="0.1561%" height="15" fill="rgb(242,79,21)"/><text x="49.6992%" y="191.50"></text></g><g><title>dropck_outlives (190,953 samples, 0.33%)</title><rect x="49.6297%" y="181" width="0.3266%" height="15" fill="rgb(211,96,35)"/><text x="49.8797%" y="191.50"></text></g><g><title>adt_dtorck_constraint (106,183 samples, 0.18%)</title><rect x="49.7747%" y="165" width="0.1816%" height="15" fill="rgb(253,215,40)"/><text x="50.0247%" y="175.50"></text></g><g><title>evaluate_obligation (273,282 samples, 0.47%)</title><rect x="49.9563%" y="181" width="0.4674%" height="15" fill="rgb(211,81,21)"/><text x="50.2063%" y="191.50"></text></g><g><title>method_autoderef_steps (103,710 samples, 0.18%)</title><rect x="50.6442%" y="181" width="0.1774%" height="15" fill="rgb(208,190,38)"/><text x="50.8942%" y="191.50"></text></g><g><title>evaluate_obligation (115,491 samples, 0.20%)</title><rect x="50.9508%" y="165" width="0.1975%" height="15" fill="rgb(235,213,38)"/><text x="51.2008%" y="175.50"></text></g><g><title>layout_of (77,661 samples, 0.13%)</title><rect x="51.1483%" y="165" width="0.1328%" height="15" fill="rgb(237,122,38)"/><text x="51.3983%" y="175.50"></text></g><g><title>object_safety_violations (294,363 samples, 0.50%)</title><rect x="50.8215%" y="181" width="0.5035%" height="15" fill="rgb(244,218,35)"/><text x="51.0715%" y="191.50"></text></g><g><title>predicates_of (87,722 samples, 0.15%)</title><rect x="51.3562%" y="181" width="0.1500%" height="15" fill="rgb(240,68,47)"/><text x="51.6062%" y="191.50"></text></g><g><title>predicates_defined_on (62,751 samples, 0.11%)</title><rect x="51.3989%" y="165" width="0.1073%" height="15" fill="rgb(210,16,53)"/><text x="51.6489%" y="175.50"></text></g><g><title>item_bodies_checking (5,335,254 samples, 9.13%)</title><rect x="42.5064%" y="229" width="9.1253%" height="15" fill="rgb(235,124,12)"/><text x="42.7564%" y="239.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (5,331,764 samples, 9.12%)</title><rect x="42.5124%" y="213" width="9.1193%" height="15" fill="rgb(224,169,11)"/><text x="42.7624%" y="223.50">typeck_item_b..</text></g><g><title>typeck (5,296,373 samples, 9.06%)</title><rect x="42.5729%" y="197" width="9.0588%" height="15" fill="rgb(250,166,2)"/><text x="42.8229%" y="207.50">typeck</text></g><g><title>fn_sig (133,241 samples, 0.23%)</title><rect x="53.0854%" y="197" width="0.2279%" height="15" fill="rgb(242,216,29)"/><text x="53.3354%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (125,181 samples, 0.21%)</title><rect x="53.0992%" y="181" width="0.2141%" height="15" fill="rgb(230,116,27)"/><text x="53.3492%" y="191.50"></text></g><g><title>item_types_checking (1,136,011 samples, 1.94%)</title><rect x="51.6317%" y="229" width="1.9430%" height="15" fill="rgb(228,99,48)"/><text x="51.8817%" y="239.50">i..</text></g><g><title>check_mod_item_types (1,131,811 samples, 1.94%)</title><rect x="51.6389%" y="213" width="1.9358%" height="15" fill="rgb(253,11,6)"/><text x="51.8889%" y="223.50">c..</text></g><g><title>predicates_of (83,730 samples, 0.14%)</title><rect x="53.4315%" y="197" width="0.1432%" height="15" fill="rgb(247,143,39)"/><text x="53.6815%" y="207.50"></text></g><g><title>predicates_defined_on (65,430 samples, 0.11%)</title><rect x="53.4628%" y="181" width="0.1119%" height="15" fill="rgb(236,97,10)"/><text x="53.7128%" y="191.50"></text></g><g><title>fn_sig (189,612 samples, 0.32%)</title><rect x="53.9068%" y="197" width="0.3243%" height="15" fill="rgb(233,208,19)"/><text x="54.1568%" y="207.50"></text></g><g><title>generics_of (143,933 samples, 0.25%)</title><rect x="54.2311%" y="197" width="0.2462%" height="15" fill="rgb(216,164,2)"/><text x="54.4811%" y="207.50"></text></g><g><title>impl_trait_ref (114,601 samples, 0.20%)</title><rect x="54.4772%" y="197" width="0.1960%" height="15" fill="rgb(220,129,5)"/><text x="54.7272%" y="207.50"></text></g><g><title>late_bound_vars_map (178,712 samples, 0.31%)</title><rect x="55.1844%" y="149" width="0.3057%" height="15" fill="rgb(242,17,10)"/><text x="55.4344%" y="159.50"></text></g><g><title>resolve_lifetimes (156,582 samples, 0.27%)</title><rect x="55.2223%" y="133" width="0.2678%" height="15" fill="rgb(242,107,0)"/><text x="55.4723%" y="143.50"></text></g><g><title>explicit_predicates_of (391,735 samples, 0.67%)</title><rect x="54.8325%" y="165" width="0.6700%" height="15" fill="rgb(251,28,31)"/><text x="55.0825%" y="175.50"></text></g><g><title>predicates_of (532,006 samples, 0.91%)</title><rect x="54.6733%" y="197" width="0.9099%" height="15" fill="rgb(233,223,10)"/><text x="54.9233%" y="207.50"></text></g><g><title>predicates_defined_on (500,206 samples, 0.86%)</title><rect x="54.7276%" y="181" width="0.8555%" height="15" fill="rgb(215,21,27)"/><text x="54.9776%" y="191.50"></text></g><g><title>type_collecting (1,312,833 samples, 2.25%)</title><rect x="53.5775%" y="229" width="2.2454%" height="15" fill="rgb(232,23,21)"/><text x="53.8275%" y="239.50">t..</text></g><g><title>collect_mod_item_types (1,301,213 samples, 2.23%)</title><rect x="53.5974%" y="213" width="2.2256%" height="15" fill="rgb(244,5,23)"/><text x="53.8474%" y="223.50">c..</text></g><g><title>type_of (140,170 samples, 0.24%)</title><rect x="55.5832%" y="197" width="0.2397%" height="15" fill="rgb(226,81,46)"/><text x="55.8332%" y="207.50"></text></g><g><title>evaluate_obligation (465,233 samples, 0.80%)</title><rect x="58.0037%" y="197" width="0.7957%" height="15" fill="rgb(247,70,30)"/><text x="58.2537%" y="207.50"></text></g><g><title>implied_outlives_bounds (198,082 samples, 0.34%)</title><rect x="58.7995%" y="197" width="0.3388%" height="15" fill="rgb(212,68,19)"/><text x="59.0495%" y="207.50"></text></g><g><title>param_env (189,501 samples, 0.32%)</title><rect x="59.1383%" y="197" width="0.3241%" height="15" fill="rgb(240,187,13)"/><text x="59.3883%" y="207.50"></text></g><g><title>region_scope_tree (116,680 samples, 0.20%)</title><rect x="59.5528%" y="197" width="0.1996%" height="15" fill="rgb(223,113,26)"/><text x="59.8028%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,208,801 samples, 3.78%)</title><rect x="56.0134%" y="213" width="3.7779%" height="15" fill="rgb(206,192,2)"/><text x="56.2634%" y="223.50">chec..</text></g><g><title>implied_outlives_bounds (125,892 samples, 0.22%)</title><rect x="62.0900%" y="197" width="0.2153%" height="15" fill="rgb(241,108,4)"/><text x="62.3400%" y="207.50"></text></g><g><title>param_env (243,165 samples, 0.42%)</title><rect x="62.3054%" y="197" width="0.4159%" height="15" fill="rgb(247,173,49)"/><text x="62.5554%" y="207.50"></text></g><g><title>predicates_of (147,980 samples, 0.25%)</title><rect x="62.7213%" y="197" width="0.2531%" height="15" fill="rgb(224,114,35)"/><text x="62.9713%" y="207.50"></text></g><g><title>predicates_defined_on (99,270 samples, 0.17%)</title><rect x="62.8046%" y="181" width="0.1698%" height="15" fill="rgb(245,159,27)"/><text x="63.0546%" y="191.50"></text></g><g><title>analysis (34,025,211 samples, 58.20%)</title><rect x="4.9565%" y="261" width="58.1958%" height="15" fill="rgb(245,172,44)"/><text x="5.2065%" y="271.50">analysis</text></g><g><title>type_check_crate (23,507,556 samples, 40.21%)</title><rect x="22.9456%" y="245" width="40.2067%" height="15" fill="rgb(236,23,11)"/><text x="23.1956%" y="255.50">type_check_crate</text></g><g><title>wf_checking (4,282,973 samples, 7.33%)</title><rect x="55.8268%" y="229" width="7.3255%" height="15" fill="rgb(205,117,38)"/><text x="56.0768%" y="239.50">wf_checking</text></g><g><title>check_item_well_formed (1,965,112 samples, 3.36%)</title><rect x="59.7912%" y="213" width="3.3611%" height="15" fill="rgb(237,72,25)"/><text x="60.0412%" y="223.50">che..</text></g><g><title>variances_of (78,521 samples, 0.13%)</title><rect x="63.0180%" y="197" width="0.1343%" height="15" fill="rgb(244,70,9)"/><text x="63.2680%" y="207.50"></text></g><g><title>crate_variances (73,701 samples, 0.13%)</title><rect x="63.0263%" y="181" width="0.1261%" height="15" fill="rgb(217,125,39)"/><text x="63.2763%" y="191.50"></text></g><g><title>codegen_module (292,003 samples, 0.50%)</title><rect x="64.0871%" y="245" width="0.4994%" height="15" fill="rgb(235,36,10)"/><text x="64.3371%" y="255.50"></text></g><g><title>codegen_crate (841,609 samples, 1.44%)</title><rect x="63.1709%" y="261" width="1.4395%" height="15" fill="rgb(251,123,47)"/><text x="63.4209%" y="271.50"></text></g><g><title>LLVM_module_codegen (1,784,838 samples, 3.05%)</title><rect x="64.6365%" y="245" width="3.0527%" height="15" fill="rgb(221,13,13)"/><text x="64.8865%" y="255.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (1,711,257 samples, 2.93%)</title><rect x="64.7624%" y="229" width="2.9269%" height="15" fill="rgb(238,131,9)"/><text x="65.0124%" y="239.50">LL..</text></g><g><title>codegen_module_optimize (2,053,261 samples, 3.51%)</title><rect x="64.6104%" y="261" width="3.5118%" height="15" fill="rgb(211,50,8)"/><text x="64.8604%" y="271.50">cod..</text></g><g><title>LLVM_module_optimize (253,123 samples, 0.43%)</title><rect x="67.6893%" y="245" width="0.4329%" height="15" fill="rgb(245,182,24)"/><text x="67.9393%" y="255.50"></text></g><g><title>AST_validation (114,791 samples, 0.20%)</title><rect x="68.4980%" y="245" width="0.1963%" height="15" fill="rgb(242,14,37)"/><text x="68.7480%" y="255.50"></text></g><g><title>crate_injection (96,561 samples, 0.17%)</title><rect x="68.7709%" y="245" width="0.1652%" height="15" fill="rgb(246,228,12)"/><text x="69.0209%" y="255.50"></text></g><g><title>metadata_load_macro (120,531 samples, 0.21%)</title><rect x="82.8537%" y="213" width="0.2062%" height="15" fill="rgb(213,55,15)"/><text x="83.1037%" y="223.50"></text></g><g><title>macro_expand_crate (8,469,595 samples, 14.49%)</title><rect x="68.9360%" y="245" width="14.4862%" height="15" fill="rgb(209,9,3)"/><text x="69.1860%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (8,444,145 samples, 14.44%)</title><rect x="68.9796%" y="229" width="14.4426%" height="15" fill="rgb(230,59,30)"/><text x="69.2296%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (211,892 samples, 0.36%)</title><rect x="83.0598%" y="213" width="0.3624%" height="15" fill="rgb(209,121,21)"/><text x="83.3098%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (115,541 samples, 0.20%)</title><rect x="83.4307%" y="245" width="0.1976%" height="15" fill="rgb(220,109,13)"/><text x="83.6807%" y="255.50"></text></g><g><title>finalize_macro_resolutions (310,343 samples, 0.53%)</title><rect x="83.7173%" y="229" width="0.5308%" height="15" fill="rgb(232,18,1)"/><text x="83.9673%" y="239.50"></text></g><g><title>late_resolve_crate (1,223,302 samples, 2.09%)</title><rect x="84.2481%" y="229" width="2.0923%" height="15" fill="rgb(215,41,42)"/><text x="84.4981%" y="239.50">l..</text></g><g><title>configure_and_expand (10,711,947 samples, 18.32%)</title><rect x="68.1222%" y="261" width="18.3214%" height="15" fill="rgb(224,123,36)"/><text x="68.3722%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,646,007 samples, 2.82%)</title><rect x="83.6283%" y="245" width="2.8153%" height="15" fill="rgb(240,125,3)"/><text x="83.8783%" y="255.50">re..</text></g><g><title>drop_ast (90,771 samples, 0.16%)</title><rect x="86.4436%" y="261" width="0.1553%" height="15" fill="rgb(205,98,50)"/><text x="86.6936%" y="271.50"></text></g><g><title>early_lint_checks (187,952 samples, 0.32%)</title><rect x="86.6221%" y="261" width="0.3215%" height="15" fill="rgb(205,185,37)"/><text x="86.8721%" y="271.50"></text></g><g><title>free_global_ctxt (1,375,474 samples, 2.35%)</title><rect x="86.9435%" y="261" width="2.3526%" height="15" fill="rgb(238,207,15)"/><text x="87.1935%" y="271.50">f..</text></g><g><title>crate_hash (64,350 samples, 0.11%)</title><rect x="90.0784%" y="245" width="0.1101%" height="15" fill="rgb(213,199,42)"/><text x="90.3284%" y="255.50"></text></g><g><title>exported_symbols (102,972 samples, 0.18%)</title><rect x="90.2260%" y="245" width="0.1761%" height="15" fill="rgb(235,201,11)"/><text x="90.4760%" y="255.50"></text></g><g><title>layout_of (152,491 samples, 0.26%)</title><rect x="91.3165%" y="229" width="0.2608%" height="15" fill="rgb(207,46,11)"/><text x="91.5665%" y="239.50"></text></g><g><title>needs_drop_raw (78,340 samples, 0.13%)</title><rect x="92.1845%" y="213" width="0.1340%" height="15" fill="rgb(241,35,35)"/><text x="92.4345%" y="223.50"></text></g><g><title>is_copy_raw (70,710 samples, 0.12%)</title><rect x="92.1975%" y="197" width="0.1209%" height="15" fill="rgb(243,32,47)"/><text x="92.4475%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (445,335 samples, 0.76%)</title><rect x="91.5773%" y="229" width="0.7617%" height="15" fill="rgb(247,202,23)"/><text x="91.8273%" y="239.50"></text></g><g><title>optimized_mir (1,109,770 samples, 1.90%)</title><rect x="90.4706%" y="245" width="1.8981%" height="15" fill="rgb(219,102,11)"/><text x="90.7206%" y="255.50">o..</text></g><g><title>generate_crate_metadata (1,818,209 samples, 3.11%)</title><rect x="89.2961%" y="261" width="3.1098%" height="15" fill="rgb(243,110,44)"/><text x="89.5461%" y="271.50">gen..</text></g><g><title>hir_lowering (1,144,001 samples, 1.96%)</title><rect x="92.4059%" y="261" width="1.9567%" height="15" fill="rgb(222,74,54)"/><text x="92.6559%" y="271.50">h..</text></g><g><title>finish_ongoing_codegen (472,495 samples, 0.81%)</title><rect x="94.3813%" y="245" width="0.8081%" height="15" fill="rgb(216,99,12)"/><text x="94.6313%" y="255.50"></text></g><g><title>link_crate (557,705 samples, 0.95%)</title><rect x="95.1895%" y="245" width="0.9539%" height="15" fill="rgb(226,22,26)"/><text x="95.4395%" y="255.50"></text></g><g><title>link_binary (549,465 samples, 0.94%)</title><rect x="95.2036%" y="229" width="0.9398%" height="15" fill="rgb(217,163,10)"/><text x="95.4536%" y="239.50"></text></g><g><title>link_rlib (355,323 samples, 0.61%)</title><rect x="95.5356%" y="213" width="0.6077%" height="15" fill="rgb(213,25,53)"/><text x="95.7856%" y="223.50"></text></g><g><title>link (1,047,470 samples, 1.79%)</title><rect x="94.3626%" y="261" width="1.7916%" height="15" fill="rgb(252,105,26)"/><text x="94.6126%" y="271.50">l..</text></g><g><title>parse_crate (1,051,391 samples, 1.80%)</title><rect x="96.1542%" y="261" width="1.7983%" height="15" fill="rgb(220,39,43)"/><text x="96.4042%" y="271.50">p..</text></g><g><title>prepare_outputs (350,624 samples, 0.60%)</title><rect x="97.9691%" y="261" width="0.5997%" height="15" fill="rgb(229,68,48)"/><text x="98.2191%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (432,634 samples, 0.74%)</title><rect x="98.5688%" y="261" width="0.7400%" height="15" fill="rgb(252,8,32)"/><text x="98.8188%" y="271.50"></text></g><g><title>setup_global_ctxt (135,341 samples, 0.23%)</title><rect x="99.3179%" y="261" width="0.2315%" height="15" fill="rgb(223,20,43)"/><text x="99.5679%" y="271.50"></text></g><g><title>all (58,466,747 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (58,466,747 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (263,452 samples, 0.45%)</title><rect x="99.5494%" y="261" width="0.4506%" height="15" fill="rgb(249,185,26)"/><text x="99.7994%" y="271.50"></text></g></svg></svg>