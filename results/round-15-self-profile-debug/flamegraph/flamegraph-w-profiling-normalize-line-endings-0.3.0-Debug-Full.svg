<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,504,296 samples, 7.95%)</title><rect x="1.6098%" y="277" width="7.9455%" height="15" fill="rgb(227,0,7)"/><text x="1.8598%" y="287.50">LLVM_passes</text></g><g><title>is_copy_raw (49,950 samples, 0.11%)</title><rect x="12.3767%" y="165" width="0.1133%" height="15" fill="rgb(217,0,24)"/><text x="12.6267%" y="175.50"></text></g><g><title>explicit_predicates_of (143,403 samples, 0.33%)</title><rect x="12.8614%" y="85" width="0.3251%" height="15" fill="rgb(221,193,54)"/><text x="13.1114%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (141,933 samples, 0.32%)</title><rect x="12.8648%" y="69" width="0.3218%" height="15" fill="rgb(248,212,6)"/><text x="13.1148%" y="79.50"></text></g><g><title>needs_drop_raw (299,883 samples, 0.68%)</title><rect x="12.5282%" y="165" width="0.6799%" height="15" fill="rgb(208,68,35)"/><text x="12.7782%" y="175.50"></text></g><g><title>is_copy_raw (295,693 samples, 0.67%)</title><rect x="12.5377%" y="149" width="0.6704%" height="15" fill="rgb(232,128,0)"/><text x="12.7877%" y="159.50"></text></g><g><title>evaluate_obligation (287,443 samples, 0.65%)</title><rect x="12.5564%" y="133" width="0.6517%" height="15" fill="rgb(207,160,47)"/><text x="12.8064%" y="143.50"></text></g><g><title>predicates_of (181,523 samples, 0.41%)</title><rect x="12.7966%" y="117" width="0.4116%" height="15" fill="rgb(228,23,34)"/><text x="13.0466%" y="127.50"></text></g><g><title>predicates_defined_on (160,333 samples, 0.36%)</title><rect x="12.8446%" y="101" width="0.3635%" height="15" fill="rgb(218,30,26)"/><text x="13.0946%" y="111.50"></text></g><g><title>thir_body (80,690 samples, 0.18%)</title><rect x="13.2839%" y="165" width="0.1830%" height="15" fill="rgb(220,122,19)"/><text x="13.5339%" y="175.50"></text></g><g><title>mir_const (899,329 samples, 2.04%)</title><rect x="11.4292%" y="213" width="2.0391%" height="15" fill="rgb(250,228,42)"/><text x="11.6792%" y="223.50">m..</text></g><g><title>unsafety_check_result (759,977 samples, 1.72%)</title><rect x="11.7452%" y="197" width="1.7231%" height="15" fill="rgb(240,193,28)"/><text x="11.9952%" y="207.50"></text></g><g><title>mir_built (733,837 samples, 1.66%)</title><rect x="11.8045%" y="181" width="1.6639%" height="15" fill="rgb(216,20,37)"/><text x="12.0545%" y="191.50"></text></g><g><title>mir_promoted (965,340 samples, 2.19%)</title><rect x="11.2834%" y="229" width="2.1888%" height="15" fill="rgb(206,188,39)"/><text x="11.5334%" y="239.50">m..</text></g><g><title>type_op_normalize_fn_sig (64,291 samples, 0.15%)</title><rect x="13.4721%" y="229" width="0.1458%" height="15" fill="rgb(217,207,13)"/><text x="13.7221%" y="239.50"></text></g><g><title>MIR_borrow_checking (1,694,728 samples, 3.84%)</title><rect x="9.9306%" y="261" width="3.8425%" height="15" fill="rgb(231,73,38)"/><text x="10.1806%" y="271.50">MIR_..</text></g><g><title>mir_borrowck (1,690,028 samples, 3.83%)</title><rect x="9.9413%" y="245" width="3.8319%" height="15" fill="rgb(225,20,46)"/><text x="10.1913%" y="255.50">mir_..</text></g><g><title>type_op_prove_predicate (68,482 samples, 0.16%)</title><rect x="13.6179%" y="229" width="0.1553%" height="15" fill="rgb(210,31,41)"/><text x="13.8679%" y="239.50"></text></g><g><title>hir_module_items (119,031 samples, 0.27%)</title><rect x="13.7873%" y="261" width="0.2699%" height="15" fill="rgb(221,200,47)"/><text x="14.0373%" y="271.50"></text></g><g><title>get_lang_items (82,961 samples, 0.19%)</title><rect x="14.4970%" y="213" width="0.1881%" height="15" fill="rgb(226,26,5)"/><text x="14.7470%" y="223.50"></text></g><g><title>item_attrs (45,840 samples, 0.10%)</title><rect x="14.8281%" y="181" width="0.1039%" height="15" fill="rgb(249,33,26)"/><text x="15.0781%" y="191.50"></text></g><g><title>codegen_fn_attrs (68,580 samples, 0.16%)</title><rect x="14.8095%" y="197" width="0.1555%" height="15" fill="rgb(235,183,28)"/><text x="15.0595%" y="207.50"></text></g><g><title>should_inherit_track_caller (125,781 samples, 0.29%)</title><rect x="14.6851%" y="213" width="0.2852%" height="15" fill="rgb(221,5,38)"/><text x="14.9351%" y="223.50"></text></g><g><title>codegen_fn_attrs (326,783 samples, 0.74%)</title><rect x="14.3202%" y="229" width="0.7409%" height="15" fill="rgb(247,18,42)"/><text x="14.5702%" y="239.50"></text></g><g><title>check_mod_attrs (406,674 samples, 0.92%)</title><rect x="14.1396%" y="245" width="0.9221%" height="15" fill="rgb(241,131,45)"/><text x="14.3896%" y="255.50"></text></g><g><title>lookup_deprecation_entry (68,251 samples, 0.15%)</title><rect x="15.3242%" y="229" width="0.1547%" height="15" fill="rgb(249,31,29)"/><text x="15.5742%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (172,711 samples, 0.39%)</title><rect x="15.1964%" y="245" width="0.3916%" height="15" fill="rgb(225,111,53)"/><text x="15.4464%" y="255.50"></text></g><g><title>misc_checking_1 (709,327 samples, 1.61%)</title><rect x="14.0588%" y="261" width="1.6083%" height="15" fill="rgb(238,160,17)"/><text x="14.3088%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (86,070 samples, 0.20%)</title><rect x="15.6734%" y="245" width="0.1952%" height="15" fill="rgb(214,148,48)"/><text x="15.9234%" y="255.50"></text></g><g><title>check_mod_liveness (63,680 samples, 0.14%)</title><rect x="15.7241%" y="229" width="0.1444%" height="15" fill="rgb(232,36,49)"/><text x="15.9741%" y="239.50"></text></g><g><title>misc_checking_2 (190,542 samples, 0.43%)</title><rect x="15.6671%" y="261" width="0.4320%" height="15" fill="rgb(209,103,24)"/><text x="15.9171%" y="271.50"></text></g><g><title>match_checking (101,712 samples, 0.23%)</title><rect x="15.8685%" y="245" width="0.2306%" height="15" fill="rgb(229,88,8)"/><text x="16.1185%" y="255.50"></text></g><g><title>check_match (96,392 samples, 0.22%)</title><rect x="15.8806%" y="229" width="0.2186%" height="15" fill="rgb(213,181,19)"/><text x="16.1306%" y="239.50"></text></g><g><title>check_private_in_public (51,251 samples, 0.12%)</title><rect x="16.1282%" y="245" width="0.1162%" height="15" fill="rgb(254,191,54)"/><text x="16.3782%" y="255.50"></text></g><g><title>death_checking (155,981 samples, 0.35%)</title><rect x="16.2444%" y="245" width="0.3537%" height="15" fill="rgb(241,83,37)"/><text x="16.4944%" y="255.50"></text></g><g><title>lint_levels (62,270 samples, 0.14%)</title><rect x="16.4569%" y="229" width="0.1412%" height="15" fill="rgb(233,36,39)"/><text x="16.7069%" y="239.50"></text></g><g><title>crate_lints (159,522 samples, 0.36%)</title><rect x="16.6041%" y="229" width="0.3617%" height="15" fill="rgb(226,3,54)"/><text x="16.8541%" y="239.50"></text></g><g><title>param_env (60,711 samples, 0.14%)</title><rect x="16.8281%" y="213" width="0.1377%" height="15" fill="rgb(245,192,40)"/><text x="17.0781%" y="223.50"></text></g><g><title>lint_checking (220,603 samples, 0.50%)</title><rect x="16.5981%" y="245" width="0.5002%" height="15" fill="rgb(238,167,29)"/><text x="16.8481%" y="255.50"></text></g><g><title>module_lints (58,451 samples, 0.13%)</title><rect x="16.9657%" y="229" width="0.1325%" height="15" fill="rgb(232,182,51)"/><text x="17.2157%" y="239.50"></text></g><g><title>lint_mod (54,721 samples, 0.12%)</title><rect x="16.9742%" y="213" width="0.1241%" height="15" fill="rgb(231,60,39)"/><text x="17.2242%" y="223.50"></text></g><g><title>privacy_access_levels (108,851 samples, 0.25%)</title><rect x="17.0983%" y="245" width="0.2468%" height="15" fill="rgb(208,69,12)"/><text x="17.3483%" y="255.50"></text></g><g><title>privacy_checking_modules (116,711 samples, 0.26%)</title><rect x="17.3451%" y="245" width="0.2646%" height="15" fill="rgb(235,93,37)"/><text x="17.5951%" y="255.50"></text></g><g><title>check_mod_privacy (114,331 samples, 0.26%)</title><rect x="17.3505%" y="229" width="0.2592%" height="15" fill="rgb(213,116,39)"/><text x="17.6005%" y="239.50"></text></g><g><title>misc_checking_3 (681,567 samples, 1.55%)</title><rect x="16.0991%" y="261" width="1.5454%" height="15" fill="rgb(222,207,29)"/><text x="16.3491%" y="271.50"></text></g><g><title>impl_parent (433,193 samples, 0.98%)</title><rect x="19.2349%" y="197" width="0.9822%" height="15" fill="rgb(206,96,30)"/><text x="19.4849%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (305,592 samples, 0.69%)</title><rect x="19.5243%" y="181" width="0.6929%" height="15" fill="rgb(218,138,4)"/><text x="19.7743%" y="191.50"></text></g><g><title>impl_trait_ref (1,568,326 samples, 3.56%)</title><rect x="20.2171%" y="197" width="3.5560%" height="15" fill="rgb(250,191,14)"/><text x="20.4671%" y="207.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,443,814 samples, 3.27%)</title><rect x="20.4995%" y="181" width="3.2736%" height="15" fill="rgb(239,60,40)"/><text x="20.7495%" y="191.50">met..</text></g><g><title>coherent_trait (2,819,338 samples, 6.39%)</title><rect x="17.7634%" y="229" width="6.3924%" height="15" fill="rgb(206,27,48)"/><text x="18.0134%" y="239.50">coherent..</text></g><g><title>specialization_graph_of (2,811,148 samples, 6.37%)</title><rect x="17.7819%" y="213" width="6.3739%" height="15" fill="rgb(225,35,8)"/><text x="18.0319%" y="223.50">speciali..</text></g><g><title>trait_impls_of (168,792 samples, 0.38%)</title><rect x="23.7731%" y="197" width="0.3827%" height="15" fill="rgb(250,213,24)"/><text x="24.0231%" y="207.50"></text></g><g><title>implementations_of_trait (47,440 samples, 0.11%)</title><rect x="24.0482%" y="181" width="0.1076%" height="15" fill="rgb(247,123,22)"/><text x="24.2982%" y="191.50"></text></g><g><title>orphan_check_crate (44,841 samples, 0.10%)</title><rect x="24.1718%" y="229" width="0.1017%" height="15" fill="rgb(231,138,38)"/><text x="24.4218%" y="239.50"></text></g><g><title>coherence_checking (2,899,489 samples, 6.57%)</title><rect x="17.7214%" y="245" width="6.5742%" height="15" fill="rgb(231,145,46)"/><text x="17.9714%" y="255.50">coherence..</text></g><g><title>adt_def (53,951 samples, 0.12%)</title><rect x="26.7113%" y="165" width="0.1223%" height="15" fill="rgb(251,118,11)"/><text x="26.9613%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (52,021 samples, 0.12%)</title><rect x="26.7157%" y="149" width="0.1180%" height="15" fill="rgb(217,147,25)"/><text x="26.9657%" y="159.50"></text></g><g><title>evaluate_obligation (93,341 samples, 0.21%)</title><rect x="26.6263%" y="197" width="0.2116%" height="15" fill="rgb(247,81,37)"/><text x="26.8763%" y="207.50"></text></g><g><title>adt_sized_constraint (62,011 samples, 0.14%)</title><rect x="26.6973%" y="181" width="0.1406%" height="15" fill="rgb(209,12,38)"/><text x="26.9473%" y="191.50"></text></g><g><title>method_autoderef_steps (113,241 samples, 0.26%)</title><rect x="26.8975%" y="197" width="0.2568%" height="15" fill="rgb(227,1,9)"/><text x="27.1475%" y="207.50"></text></g><g><title>evaluate_obligation (95,651 samples, 0.22%)</title><rect x="26.9374%" y="181" width="0.2169%" height="15" fill="rgb(248,47,43)"/><text x="27.1874%" y="191.50"></text></g><g><title>trait_impls_of (67,861 samples, 0.15%)</title><rect x="27.0004%" y="165" width="0.1539%" height="15" fill="rgb(221,10,30)"/><text x="27.2504%" y="175.50"></text></g><g><title>item_bodies_checking (1,247,413 samples, 2.83%)</title><rect x="24.3593%" y="245" width="2.8283%" height="15" fill="rgb(210,229,1)"/><text x="24.6093%" y="255.50">it..</text></g><g><title>typeck_item_bodies (1,243,773 samples, 2.82%)</title><rect x="24.3676%" y="229" width="2.8201%" height="15" fill="rgb(222,148,37)"/><text x="24.6176%" y="239.50">ty..</text></g><g><title>typeck (1,239,082 samples, 2.81%)</title><rect x="24.3782%" y="213" width="2.8094%" height="15" fill="rgb(234,67,33)"/><text x="24.6282%" y="223.50">ty..</text></g><g><title>impl_parent (103,541 samples, 0.23%)</title><rect x="28.5289%" y="165" width="0.2348%" height="15" fill="rgb(247,98,35)"/><text x="28.7789%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (56,690 samples, 0.13%)</title><rect x="28.6352%" y="149" width="0.1285%" height="15" fill="rgb(247,138,52)"/><text x="28.8852%" y="159.50"></text></g><g><title>impl_trait_ref (427,944 samples, 0.97%)</title><rect x="28.7637%" y="165" width="0.9703%" height="15" fill="rgb(213,79,30)"/><text x="29.0137%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (379,573 samples, 0.86%)</title><rect x="28.8734%" y="149" width="0.8606%" height="15" fill="rgb(246,177,23)"/><text x="29.1234%" y="159.50"></text></g><g><title>adt_destructor (837,349 samples, 1.90%)</title><rect x="28.0173%" y="213" width="1.8986%" height="15" fill="rgb(230,62,27)"/><text x="28.2673%" y="223.50">a..</text></g><g><title>coherent_trait (824,399 samples, 1.87%)</title><rect x="28.0467%" y="197" width="1.8692%" height="15" fill="rgb(216,154,8)"/><text x="28.2967%" y="207.50">c..</text></g><g><title>specialization_graph_of (821,199 samples, 1.86%)</title><rect x="28.0539%" y="181" width="1.8619%" height="15" fill="rgb(244,35,45)"/><text x="28.3039%" y="191.50">s..</text></g><g><title>trait_impls_of (80,221 samples, 0.18%)</title><rect x="29.7340%" y="165" width="0.1819%" height="15" fill="rgb(251,115,12)"/><text x="29.9840%" y="175.50"></text></g><g><title>explicit_item_bounds (67,530 samples, 0.15%)</title><rect x="29.9159%" y="213" width="0.1531%" height="15" fill="rgb(240,54,50)"/><text x="30.1659%" y="223.50"></text></g><g><title>needs_drop_raw (357,583 samples, 0.81%)</title><rect x="32.8003%" y="117" width="0.8108%" height="15" fill="rgb(233,84,52)"/><text x="33.0503%" y="127.50"></text></g><g><title>is_copy_raw (349,833 samples, 0.79%)</title><rect x="32.8178%" y="101" width="0.7932%" height="15" fill="rgb(207,117,47)"/><text x="33.0678%" y="111.50"></text></g><g><title>evaluate_obligation (339,443 samples, 0.77%)</title><rect x="32.8414%" y="85" width="0.7696%" height="15" fill="rgb(249,43,39)"/><text x="33.0914%" y="95.50"></text></g><g><title>trait_impls_of (311,803 samples, 0.71%)</title><rect x="32.9041%" y="69" width="0.7070%" height="15" fill="rgb(209,38,44)"/><text x="33.1541%" y="79.50"></text></g><g><title>implementations_of_trait (68,091 samples, 0.15%)</title><rect x="33.4566%" y="53" width="0.1544%" height="15" fill="rgb(236,212,23)"/><text x="33.7066%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (56,241 samples, 0.13%)</title><rect x="33.4835%" y="37" width="0.1275%" height="15" fill="rgb(242,79,21)"/><text x="33.7335%" y="47.50"></text></g><g><title>thir_body (87,931 samples, 0.20%)</title><rect x="33.6144%" y="117" width="0.1994%" height="15" fill="rgb(211,96,35)"/><text x="33.8644%" y="127.50"></text></g><g><title>mir_const (1,435,355 samples, 3.25%)</title><rect x="32.1115%" y="165" width="3.2545%" height="15" fill="rgb(253,215,40)"/><text x="32.3615%" y="175.50">mir..</text></g><g><title>unsafety_check_result (1,351,774 samples, 3.06%)</title><rect x="32.3010%" y="149" width="3.0650%" height="15" fill="rgb(211,81,21)"/><text x="32.5510%" y="159.50">uns..</text></g><g><title>mir_built (1,289,883 samples, 2.92%)</title><rect x="32.4413%" y="133" width="2.9246%" height="15" fill="rgb(208,190,38)"/><text x="32.6913%" y="143.50">mi..</text></g><g><title>typeck (674,887 samples, 1.53%)</title><rect x="33.8358%" y="117" width="1.5302%" height="15" fill="rgb(235,213,38)"/><text x="34.0858%" y="127.50"></text></g><g><title>mir_promoted (1,560,446 samples, 3.54%)</title><rect x="31.8525%" y="181" width="3.5381%" height="15" fill="rgb(237,122,38)"/><text x="32.1025%" y="191.50">mir..</text></g><g><title>item_types_checking (3,653,077 samples, 8.28%)</title><rect x="27.1876%" y="245" width="8.2828%" height="15" fill="rgb(244,218,35)"/><text x="27.4376%" y="255.50">item_types_c..</text></g><g><title>check_mod_item_types (3,648,447 samples, 8.27%)</title><rect x="27.1981%" y="229" width="8.2723%" height="15" fill="rgb(240,68,47)"/><text x="27.4481%" y="239.50">check_mod_it..</text></g><g><title>type_of (2,349,014 samples, 5.33%)</title><rect x="30.1444%" y="213" width="5.3260%" height="15" fill="rgb(210,16,53)"/><text x="30.3944%" y="223.50">type_of</text></g><g><title>mir_borrowck (2,343,104 samples, 5.31%)</title><rect x="30.1578%" y="197" width="5.3126%" height="15" fill="rgb(235,124,12)"/><text x="30.4078%" y="207.50">mir_bor..</text></g><g><title>fn_sig (78,212 samples, 0.18%)</title><rect x="35.6858%" y="213" width="0.1773%" height="15" fill="rgb(224,169,11)"/><text x="35.9358%" y="223.50"></text></g><g><title>generics_of (72,101 samples, 0.16%)</title><rect x="35.8631%" y="213" width="0.1635%" height="15" fill="rgb(250,166,2)"/><text x="36.1131%" y="223.50"></text></g><g><title>associated_item (75,090 samples, 0.17%)</title><rect x="36.9640%" y="117" width="0.1703%" height="15" fill="rgb(242,216,29)"/><text x="37.2140%" y="127.50"></text></g><g><title>associated_items (131,771 samples, 0.30%)</title><rect x="36.8437%" y="133" width="0.2988%" height="15" fill="rgb(230,116,27)"/><text x="37.0937%" y="143.50"></text></g><g><title>late_bound_vars_map (278,934 samples, 0.63%)</title><rect x="36.5291%" y="165" width="0.6324%" height="15" fill="rgb(228,99,48)"/><text x="36.7791%" y="175.50"></text></g><g><title>resolve_lifetimes (262,983 samples, 0.60%)</title><rect x="36.5652%" y="149" width="0.5963%" height="15" fill="rgb(253,11,6)"/><text x="36.8152%" y="159.50"></text></g><g><title>explicit_predicates_of (482,294 samples, 1.09%)</title><rect x="36.0906%" y="181" width="1.0935%" height="15" fill="rgb(247,143,39)"/><text x="36.3406%" y="191.50"></text></g><g><title>predicates_of (548,835 samples, 1.24%)</title><rect x="36.0333%" y="213" width="1.2444%" height="15" fill="rgb(236,97,10)"/><text x="36.2833%" y="223.50"></text></g><g><title>predicates_defined_on (539,895 samples, 1.22%)</title><rect x="36.0536%" y="197" width="1.2241%" height="15" fill="rgb(233,208,19)"/><text x="36.3036%" y="207.50"></text></g><g><title>type_collecting (888,379 samples, 2.01%)</title><rect x="35.4723%" y="245" width="2.0143%" height="15" fill="rgb(216,164,2)"/><text x="35.7223%" y="255.50">t..</text></g><g><title>collect_mod_item_types (875,729 samples, 1.99%)</title><rect x="35.5009%" y="229" width="1.9856%" height="15" fill="rgb(220,129,5)"/><text x="35.7509%" y="239.50">c..</text></g><g><title>type_of (92,101 samples, 0.21%)</title><rect x="37.2777%" y="213" width="0.2088%" height="15" fill="rgb(242,17,10)"/><text x="37.5277%" y="223.50"></text></g><g><title>adt_def (48,220 samples, 0.11%)</title><rect x="37.3772%" y="197" width="0.1093%" height="15" fill="rgb(242,107,0)"/><text x="37.6272%" y="207.50"></text></g><g><title>evaluate_obligation (200,252 samples, 0.45%)</title><rect x="37.9836%" y="213" width="0.4540%" height="15" fill="rgb(251,28,31)"/><text x="38.2336%" y="223.50"></text></g><g><title>implied_outlives_bounds (48,620 samples, 0.11%)</title><rect x="38.4376%" y="213" width="0.1102%" height="15" fill="rgb(233,223,10)"/><text x="38.6876%" y="223.50"></text></g><g><title>check_impl_item_well_formed (532,516 samples, 1.21%)</title><rect x="37.5532%" y="229" width="1.2074%" height="15" fill="rgb(215,21,27)"/><text x="37.8032%" y="239.50"></text></g><g><title>implied_outlives_bounds (116,471 samples, 0.26%)</title><rect x="39.9917%" y="213" width="0.2641%" height="15" fill="rgb(232,23,21)"/><text x="40.2417%" y="223.50"></text></g><g><title>param_env (288,063 samples, 0.65%)</title><rect x="40.2558%" y="213" width="0.6531%" height="15" fill="rgb(244,5,23)"/><text x="40.5058%" y="223.50"></text></g><g><title>predicates_of (58,600 samples, 0.13%)</title><rect x="40.9089%" y="213" width="0.1329%" height="15" fill="rgb(226,81,46)"/><text x="41.1589%" y="223.50"></text></g><g><title>analysis (13,958,852 samples, 31.65%)</title><rect x="9.5553%" y="277" width="31.6497%" height="15" fill="rgb(247,70,30)"/><text x="9.8053%" y="287.50">analysis</text></g><g><title>type_check_crate (10,391,155 samples, 23.56%)</title><rect x="17.6445%" y="261" width="23.5604%" height="15" fill="rgb(212,68,19)"/><text x="17.8945%" y="271.50">type_check_crate</text></g><g><title>wf_checking (1,639,117 samples, 3.72%)</title><rect x="37.4885%" y="245" width="3.7165%" height="15" fill="rgb(240,187,13)"/><text x="37.7385%" y="255.50">wf_c..</text></g><g><title>check_item_well_formed (1,078,041 samples, 2.44%)</title><rect x="38.7606%" y="229" width="2.4443%" height="15" fill="rgb(223,113,26)"/><text x="39.0106%" y="239.50">ch..</text></g><g><title>variances_of (49,770 samples, 0.11%)</title><rect x="41.0921%" y="213" width="0.1128%" height="15" fill="rgb(206,192,2)"/><text x="41.3421%" y="223.50"></text></g><g><title>crate_variances (44,980 samples, 0.10%)</title><rect x="41.1029%" y="197" width="0.1020%" height="15" fill="rgb(241,108,4)"/><text x="41.3529%" y="207.50"></text></g><g><title>codegen_module (531,206 samples, 1.20%)</title><rect x="42.9162%" y="261" width="1.2044%" height="15" fill="rgb(247,173,49)"/><text x="43.1662%" y="271.50"></text></g><g><title>native_libraries (49,400 samples, 0.11%)</title><rect x="44.2563%" y="261" width="0.1120%" height="15" fill="rgb(224,114,35)"/><text x="44.5063%" y="271.50"></text></g><g><title>codegen_crate (1,418,354 samples, 3.22%)</title><rect x="41.2328%" y="277" width="3.2159%" height="15" fill="rgb(245,159,27)"/><text x="41.4828%" y="287.50">cod..</text></g><g><title>LLVM_module_codegen (2,786,919 samples, 6.32%)</title><rect x="44.4873%" y="261" width="6.3189%" height="15" fill="rgb(245,172,44)"/><text x="44.7373%" y="271.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (2,708,687 samples, 6.14%)</title><rect x="44.6647%" y="245" width="6.1416%" height="15" fill="rgb(236,23,11)"/><text x="44.9147%" y="255.50">LLVM_mod..</text></g><g><title>codegen_module_optimize (3,063,271 samples, 6.95%)</title><rect x="44.4487%" y="277" width="6.9455%" height="15" fill="rgb(205,117,38)"/><text x="44.6987%" y="287.50">codegen_m..</text></g><g><title>LLVM_module_optimize (259,322 samples, 0.59%)</title><rect x="50.8062%" y="261" width="0.5880%" height="15" fill="rgb(237,72,25)"/><text x="51.0562%" y="271.50"></text></g><g><title>AST_validation (79,731 samples, 0.18%)</title><rect x="51.9814%" y="261" width="0.1808%" height="15" fill="rgb(244,70,9)"/><text x="52.2314%" y="271.50"></text></g><g><title>crate_injection (109,811 samples, 0.25%)</title><rect x="52.2078%" y="261" width="0.2490%" height="15" fill="rgb(217,125,39)"/><text x="52.4578%" y="271.50"></text></g><g><title>metadata_load_macro (53,460 samples, 0.12%)</title><rect x="71.8302%" y="229" width="0.1212%" height="15" fill="rgb(235,36,10)"/><text x="72.0802%" y="239.50"></text></g><g><title>macro_expand_crate (11,286,174 samples, 25.59%)</title><rect x="52.4568%" y="261" width="25.5898%" height="15" fill="rgb(251,123,47)"/><text x="52.7068%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (11,261,374 samples, 25.53%)</title><rect x="52.5131%" y="245" width="25.5335%" height="15" fill="rgb(221,13,13)"/><text x="52.7631%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,688,227 samples, 6.10%)</title><rect x="71.9514%" y="229" width="6.0952%" height="15" fill="rgb(238,131,9)"/><text x="72.2014%" y="239.50">metadata..</text></g><g><title>metadata_register_crate (976,990 samples, 2.22%)</title><rect x="75.8314%" y="213" width="2.2152%" height="15" fill="rgb(211,50,8)"/><text x="76.0814%" y="223.50">m..</text></g><g><title>metadata_register_crate (83,751 samples, 0.19%)</title><rect x="77.8567%" y="197" width="0.1899%" height="15" fill="rgb(245,182,24)"/><text x="78.1067%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (120,802 samples, 0.27%)</title><rect x="78.0578%" y="261" width="0.2739%" height="15" fill="rgb(242,14,37)"/><text x="78.3078%" y="271.50"></text></g><g><title>finalize_macro_resolutions (356,564 samples, 0.81%)</title><rect x="78.3794%" y="245" width="0.8085%" height="15" fill="rgb(246,228,12)"/><text x="78.6294%" y="255.50"></text></g><g><title>late_resolve_crate (465,715 samples, 1.06%)</title><rect x="79.1878%" y="245" width="1.0559%" height="15" fill="rgb(213,55,15)"/><text x="79.4378%" y="255.50"></text></g><g><title>configure_and_expand (12,769,609 samples, 28.95%)</title><rect x="51.3942%" y="277" width="28.9532%" height="15" fill="rgb(209,9,3)"/><text x="51.6442%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (889,009 samples, 2.02%)</title><rect x="78.3317%" y="261" width="2.0157%" height="15" fill="rgb(230,59,30)"/><text x="78.5817%" y="271.50">r..</text></g><g><title>drop_ast (55,721 samples, 0.13%)</title><rect x="80.3474%" y="277" width="0.1263%" height="15" fill="rgb(209,121,21)"/><text x="80.5974%" y="287.50"></text></g><g><title>early_lint_checks (111,681 samples, 0.25%)</title><rect x="80.5054%" y="277" width="0.2532%" height="15" fill="rgb(220,109,13)"/><text x="80.7554%" y="287.50"></text></g><g><title>free_global_ctxt (2,249,493 samples, 5.10%)</title><rect x="80.7587%" y="277" width="5.1004%" height="15" fill="rgb(232,18,1)"/><text x="81.0087%" y="287.50">free_g..</text></g><g><title>crate_hash (154,243 samples, 0.35%)</title><rect x="86.8947%" y="261" width="0.3497%" height="15" fill="rgb(215,41,42)"/><text x="87.1447%" y="271.50"></text></g><g><title>collect_and_partition_mono_items (88,531 samples, 0.20%)</title><rect x="87.4316%" y="245" width="0.2007%" height="15" fill="rgb(224,123,36)"/><text x="87.6816%" y="255.50"></text></g><g><title>exported_symbols (171,932 samples, 0.39%)</title><rect x="87.3678%" y="261" width="0.3898%" height="15" fill="rgb(240,125,3)"/><text x="87.6178%" y="271.50"></text></g><g><title>reachable_non_generics (55,271 samples, 0.13%)</title><rect x="87.6323%" y="245" width="0.1253%" height="15" fill="rgb(205,98,50)"/><text x="87.8823%" y="255.50"></text></g><g><title>layout_of (104,460 samples, 0.24%)</title><rect x="88.8108%" y="245" width="0.2368%" height="15" fill="rgb(205,185,37)"/><text x="89.0608%" y="255.50"></text></g><g><title>optimized_mir (972,409 samples, 2.20%)</title><rect x="87.9080%" y="261" width="2.2048%" height="15" fill="rgb(238,207,15)"/><text x="88.1580%" y="271.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (469,755 samples, 1.07%)</title><rect x="89.0477%" y="245" width="1.0651%" height="15" fill="rgb(213,199,42)"/><text x="89.2977%" y="255.50"></text></g><g><title>generate_crate_metadata (1,901,699 samples, 4.31%)</title><rect x="85.8591%" y="277" width="4.3118%" height="15" fill="rgb(235,201,11)"/><text x="86.1091%" y="287.50">gener..</text></g><g><title>hir_lowering (570,126 samples, 1.29%)</title><rect x="90.1709%" y="277" width="1.2927%" height="15" fill="rgb(207,46,11)"/><text x="90.4209%" y="287.50"></text></g><g><title>finish_ongoing_codegen (640,207 samples, 1.45%)</title><rect x="91.4894%" y="261" width="1.4516%" height="15" fill="rgb(241,35,35)"/><text x="91.7394%" y="271.50"></text></g><g><title>link_crate (527,165 samples, 1.20%)</title><rect x="92.9409%" y="261" width="1.1953%" height="15" fill="rgb(243,32,47)"/><text x="93.1909%" y="271.50"></text></g><g><title>link_binary (518,785 samples, 1.18%)</title><rect x="92.9599%" y="245" width="1.1763%" height="15" fill="rgb(247,202,23)"/><text x="93.2099%" y="255.50"></text></g><g><title>link_rlib (334,053 samples, 0.76%)</title><rect x="93.3788%" y="229" width="0.7574%" height="15" fill="rgb(219,102,11)"/><text x="93.6288%" y="239.50"></text></g><g><title>link (1,185,762 samples, 2.69%)</title><rect x="91.4636%" y="277" width="2.6885%" height="15" fill="rgb(243,110,44)"/><text x="91.7136%" y="287.50">li..</text></g><g><title>parse_crate (939,430 samples, 2.13%)</title><rect x="94.1521%" y="277" width="2.1300%" height="15" fill="rgb(222,74,54)"/><text x="94.4021%" y="287.50">p..</text></g><g><title>prepare_outputs (357,024 samples, 0.81%)</title><rect x="96.3048%" y="277" width="0.8095%" height="15" fill="rgb(216,99,12)"/><text x="96.5548%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (554,946 samples, 1.26%)</title><rect x="97.1143%" y="277" width="1.2583%" height="15" fill="rgb(226,22,26)"/><text x="97.3643%" y="287.50"></text></g><g><title>setup_global_ctxt (155,551 samples, 0.35%)</title><rect x="98.3750%" y="277" width="0.3527%" height="15" fill="rgb(217,163,10)"/><text x="98.6250%" y="287.50"></text></g><g><title>all (44,104,258 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (44,104,258 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (561,136 samples, 1.27%)</title><rect x="98.7277%" y="277" width="1.2723%" height="15" fill="rgb(220,39,43)"/><text x="98.9777%" y="287.50"></text></g></svg></svg>