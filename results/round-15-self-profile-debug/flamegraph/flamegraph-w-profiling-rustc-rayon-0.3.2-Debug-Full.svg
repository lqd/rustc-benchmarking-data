<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (104,085,719 samples, 3.03%)</title><rect x="0.1460%" y="197" width="3.0302%" height="15" fill="rgb(227,0,7)"/><text x="0.3960%" y="207.50">LLV..</text></g><g><title>is_sized_raw (33,249,430 samples, 0.97%)</title><rect x="10.5921%" y="149" width="0.9680%" height="15" fill="rgb(217,0,24)"/><text x="10.8421%" y="159.50"></text></g><g><title>evaluate_obligation (28,293,289 samples, 0.82%)</title><rect x="10.7364%" y="133" width="0.8237%" height="15" fill="rgb(221,193,54)"/><text x="10.9864%" y="143.50"></text></g><g><title>is_copy_raw (24,520,905 samples, 0.71%)</title><rect x="14.8056%" y="69" width="0.7139%" height="15" fill="rgb(248,212,6)"/><text x="15.0556%" y="79.50"></text></g><g><title>evaluate_obligation (17,154,664 samples, 0.50%)</title><rect x="15.0200%" y="53" width="0.4994%" height="15" fill="rgb(208,68,35)"/><text x="15.2700%" y="63.50"></text></g><g><title>needs_drop_raw (31,036,082 samples, 0.90%)</title><rect x="14.6326%" y="85" width="0.9035%" height="15" fill="rgb(232,128,0)"/><text x="14.8826%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (32,702,701 samples, 0.95%)</title><rect x="15.7030%" y="69" width="0.9521%" height="15" fill="rgb(207,160,47)"/><text x="15.9530%" y="79.50"></text></g><g><title>resolve_instance (42,563,641 samples, 1.24%)</title><rect x="15.5362%" y="85" width="1.2391%" height="15" fill="rgb(228,23,34)"/><text x="15.7862%" y="95.50"></text></g><g><title>thir_body (19,146,278 samples, 0.56%)</title><rect x="16.7945%" y="85" width="0.5574%" height="15" fill="rgb(218,30,26)"/><text x="17.0445%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,674,518 samples, 0.14%)</title><rect x="17.3619%" y="85" width="0.1361%" height="15" fill="rgb(220,122,19)"/><text x="17.6119%" y="95.50"></text></g><g><title>mir_const (188,892,351 samples, 5.50%)</title><rect x="11.9995%" y="133" width="5.4992%" height="15" fill="rgb(250,228,42)"/><text x="12.2495%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (171,735,355 samples, 5.00%)</title><rect x="12.4990%" y="117" width="4.9997%" height="15" fill="rgb(240,193,28)"/><text x="12.7490%" y="127.50">unsafe..</text></g><g><title>mir_built (158,686,229 samples, 4.62%)</title><rect x="12.8789%" y="101" width="4.6198%" height="15" fill="rgb(216,20,37)"/><text x="13.1289%" y="111.50">mir_b..</text></g><g><title>mir_promoted (205,279,656 samples, 5.98%)</title><rect x="11.5601%" y="149" width="5.9762%" height="15" fill="rgb(206,188,39)"/><text x="11.8101%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (7,272,679 samples, 0.21%)</title><rect x="17.5363%" y="149" width="0.2117%" height="15" fill="rgb(217,207,13)"/><text x="17.7863%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (16,891,087 samples, 0.49%)</title><rect x="17.7480%" y="149" width="0.4917%" height="15" fill="rgb(231,73,38)"/><text x="17.9980%" y="159.50"></text></g><g><title>normalize_projection_ty (6,436,374 samples, 0.19%)</title><rect x="18.0524%" y="133" width="0.1874%" height="15" fill="rgb(225,20,46)"/><text x="18.3024%" y="143.50"></text></g><g><title>type_op_normalize_predicate (24,644,149 samples, 0.72%)</title><rect x="18.2398%" y="149" width="0.7175%" height="15" fill="rgb(210,31,41)"/><text x="18.4898%" y="159.50"></text></g><g><title>normalize_projection_ty (15,133,742 samples, 0.44%)</title><rect x="18.5167%" y="133" width="0.4406%" height="15" fill="rgb(221,200,47)"/><text x="18.7667%" y="143.50"></text></g><g><title>type_op_normalize_ty (60,634,813 samples, 1.77%)</title><rect x="18.9572%" y="149" width="1.7652%" height="15" fill="rgb(226,26,5)"/><text x="19.2072%" y="159.50"></text></g><g><title>normalize_projection_ty (45,414,688 samples, 1.32%)</title><rect x="19.4003%" y="133" width="1.3221%" height="15" fill="rgb(249,33,26)"/><text x="19.6503%" y="143.50"></text></g><g><title>type_op_prove_predicate (144,838,871 samples, 4.22%)</title><rect x="20.7225%" y="149" width="4.2166%" height="15" fill="rgb(235,183,28)"/><text x="20.9725%" y="159.50">type_..</text></g><g><title>MIR_borrow_checking (742,986,430 samples, 21.63%)</title><rect x="3.3099%" y="181" width="21.6303%" height="15" fill="rgb(221,5,38)"/><text x="3.5599%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (739,851,411 samples, 21.54%)</title><rect x="3.4012%" y="165" width="21.5390%" height="15" fill="rgb(247,18,42)"/><text x="3.6512%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (4,091,973 samples, 0.12%)</title><rect x="24.9783%" y="181" width="0.1191%" height="15" fill="rgb(241,131,45)"/><text x="25.2283%" y="191.50"></text></g><g><title>codegen_fn_attrs (4,899,690 samples, 0.14%)</title><rect x="25.2117%" y="149" width="0.1426%" height="15" fill="rgb(249,31,29)"/><text x="25.4617%" y="159.50"></text></g><g><title>check_mod_attrs (8,611,123 samples, 0.25%)</title><rect x="25.1036%" y="165" width="0.2507%" height="15" fill="rgb(225,111,53)"/><text x="25.3536%" y="175.50"></text></g><g><title>lookup_deprecation_entry (3,529,026 samples, 0.10%)</title><rect x="25.6906%" y="149" width="0.1027%" height="15" fill="rgb(238,160,17)"/><text x="25.9406%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (10,168,462 samples, 0.30%)</title><rect x="25.5057%" y="165" width="0.2960%" height="15" fill="rgb(214,148,48)"/><text x="25.7557%" y="175.50"></text></g><g><title>misc_checking_1 (24,909,544 samples, 0.73%)</title><rect x="25.0974%" y="181" width="0.7252%" height="15" fill="rgb(232,36,49)"/><text x="25.3474%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (10,050,062 samples, 0.29%)</title><rect x="25.8227%" y="165" width="0.2926%" height="15" fill="rgb(209,103,24)"/><text x="26.0727%" y="175.50"></text></g><g><title>check_mod_liveness (8,382,563 samples, 0.24%)</title><rect x="25.8712%" y="149" width="0.2440%" height="15" fill="rgb(229,88,8)"/><text x="26.1212%" y="159.50"></text></g><g><title>misc_checking_2 (19,241,175 samples, 0.56%)</title><rect x="25.8226%" y="181" width="0.5602%" height="15" fill="rgb(213,181,19)"/><text x="26.0726%" y="191.50"></text></g><g><title>match_checking (9,187,183 samples, 0.27%)</title><rect x="26.1153%" y="165" width="0.2675%" height="15" fill="rgb(254,191,54)"/><text x="26.3653%" y="175.50"></text></g><g><title>check_match (8,168,669 samples, 0.24%)</title><rect x="26.1449%" y="149" width="0.2378%" height="15" fill="rgb(241,83,37)"/><text x="26.3949%" y="159.50"></text></g><g><title>check_private_in_public (7,538,927 samples, 0.22%)</title><rect x="26.3834%" y="165" width="0.2195%" height="15" fill="rgb(233,36,39)"/><text x="26.6334%" y="175.50"></text></g><g><title>death_checking (9,448,076 samples, 0.28%)</title><rect x="26.6029%" y="165" width="0.2751%" height="15" fill="rgb(226,3,54)"/><text x="26.8529%" y="175.50"></text></g><g><title>crate_lints (13,682,369 samples, 0.40%)</title><rect x="26.8781%" y="149" width="0.3983%" height="15" fill="rgb(245,192,40)"/><text x="27.1281%" y="159.50"></text></g><g><title>lint_checking (23,047,044 samples, 0.67%)</title><rect x="26.8780%" y="165" width="0.6710%" height="15" fill="rgb(238,167,29)"/><text x="27.1280%" y="175.50"></text></g><g><title>module_lints (9,360,845 samples, 0.27%)</title><rect x="27.2764%" y="149" width="0.2725%" height="15" fill="rgb(232,182,51)"/><text x="27.5264%" y="159.50"></text></g><g><title>lint_mod (9,288,024 samples, 0.27%)</title><rect x="27.2785%" y="133" width="0.2704%" height="15" fill="rgb(231,60,39)"/><text x="27.5285%" y="143.50"></text></g><g><title>privacy_access_levels (12,691,149 samples, 0.37%)</title><rect x="27.5489%" y="165" width="0.3695%" height="15" fill="rgb(208,69,12)"/><text x="27.7989%" y="175.50"></text></g><g><title>privacy_checking_modules (26,696,622 samples, 0.78%)</title><rect x="27.9184%" y="165" width="0.7772%" height="15" fill="rgb(235,93,37)"/><text x="28.1684%" y="175.50"></text></g><g><title>check_mod_privacy (26,609,560 samples, 0.77%)</title><rect x="27.9209%" y="149" width="0.7747%" height="15" fill="rgb(213,116,39)"/><text x="28.1709%" y="159.50"></text></g><g><title>misc_checking_3 (79,655,450 samples, 2.32%)</title><rect x="26.3827%" y="181" width="2.3190%" height="15" fill="rgb(222,207,29)"/><text x="26.6327%" y="191.50">m..</text></g><g><title>impl_trait_ref (6,320,331 samples, 0.18%)</title><rect x="29.4072%" y="117" width="0.1840%" height="15" fill="rgb(206,96,30)"/><text x="29.6572%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,170,473 samples, 0.15%)</title><rect x="29.4407%" y="101" width="0.1505%" height="15" fill="rgb(218,138,4)"/><text x="29.6907%" y="111.50"></text></g><g><title>coherent_trait (30,289,109 samples, 0.88%)</title><rect x="28.7456%" y="149" width="0.8818%" height="15" fill="rgb(250,191,14)"/><text x="28.9956%" y="159.50"></text></g><g><title>specialization_graph_of (29,436,670 samples, 0.86%)</title><rect x="28.7704%" y="133" width="0.8570%" height="15" fill="rgb(239,60,40)"/><text x="29.0204%" y="143.50"></text></g><g><title>coherence_checking (31,220,748 samples, 0.91%)</title><rect x="28.7444%" y="165" width="0.9089%" height="15" fill="rgb(206,27,48)"/><text x="28.9944%" y="175.50"></text></g><g><title>dropck_outlives (52,654,199 samples, 1.53%)</title><rect x="43.0857%" y="117" width="1.5329%" height="15" fill="rgb(225,35,8)"/><text x="43.3357%" y="127.50"></text></g><g><title>normalize_projection_ty (32,466,327 samples, 0.95%)</title><rect x="43.6735%" y="101" width="0.9452%" height="15" fill="rgb(250,213,24)"/><text x="43.9235%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,716,899 samples, 0.11%)</title><rect x="44.6187%" y="117" width="0.1082%" height="15" fill="rgb(247,123,22)"/><text x="44.8687%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,711,239 samples, 0.11%)</title><rect x="44.6188%" y="101" width="0.1080%" height="15" fill="rgb(231,138,38)"/><text x="44.8688%" y="111.50"></text></g><g><title>evaluate_obligation (50,227,424 samples, 1.46%)</title><rect x="44.7269%" y="117" width="1.4623%" height="15" fill="rgb(231,145,46)"/><text x="44.9769%" y="127.50"></text></g><g><title>evaluate_obligation (8,794,847 samples, 0.26%)</title><rect x="46.5994%" y="101" width="0.2560%" height="15" fill="rgb(251,118,11)"/><text x="46.8494%" y="111.50"></text></g><g><title>method_autoderef_steps (18,805,196 samples, 0.55%)</title><rect x="46.3085%" y="117" width="0.5475%" height="15" fill="rgb(217,147,25)"/><text x="46.5585%" y="127.50"></text></g><g><title>evaluate_obligation (4,955,630 samples, 0.14%)</title><rect x="47.8732%" y="101" width="0.1443%" height="15" fill="rgb(247,81,37)"/><text x="48.1232%" y="111.50"></text></g><g><title>typeck (38,190,918 samples, 1.11%)</title><rect x="46.9617%" y="117" width="1.1118%" height="15" fill="rgb(209,12,38)"/><text x="47.2117%" y="127.50"></text></g><g><title>item_bodies_checking (632,045,461 samples, 18.40%)</title><rect x="29.6957%" y="165" width="18.4005%" height="15" fill="rgb(227,1,9)"/><text x="29.9457%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (632,041,191 samples, 18.40%)</title><rect x="29.6958%" y="149" width="18.4004%" height="15" fill="rgb(248,47,43)"/><text x="29.9458%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (629,205,918 samples, 18.32%)</title><rect x="29.7784%" y="133" width="18.3178%" height="15" fill="rgb(221,10,30)"/><text x="30.0284%" y="143.50">typeck</text></g><g><title>mir_borrowck (5,208,212 samples, 0.15%)</title><rect x="52.5394%" y="101" width="0.1516%" height="15" fill="rgb(210,229,1)"/><text x="52.7894%" y="111.50"></text></g><g><title>mir_built (10,850,872 samples, 0.32%)</title><rect x="52.7060%" y="53" width="0.3159%" height="15" fill="rgb(222,148,37)"/><text x="52.9560%" y="63.50"></text></g><g><title>typeck (10,094,312 samples, 0.29%)</title><rect x="52.7280%" y="37" width="0.2939%" height="15" fill="rgb(234,67,33)"/><text x="52.9780%" y="47.50"></text></g><g><title>mir_const (13,091,376 samples, 0.38%)</title><rect x="52.6971%" y="85" width="0.3811%" height="15" fill="rgb(247,98,35)"/><text x="52.9471%" y="95.50"></text></g><g><title>unsafety_check_result (12,876,704 samples, 0.37%)</title><rect x="52.7033%" y="69" width="0.3749%" height="15" fill="rgb(247,138,52)"/><text x="52.9533%" y="79.50"></text></g><g><title>mir_promoted (13,326,778 samples, 0.39%)</title><rect x="52.6910%" y="101" width="0.3880%" height="15" fill="rgb(213,79,30)"/><text x="52.9410%" y="111.50"></text></g><g><title>type_of (22,052,645 samples, 0.64%)</title><rect x="52.4485%" y="133" width="0.6420%" height="15" fill="rgb(246,177,23)"/><text x="52.6985%" y="143.50"></text></g><g><title>mir_borrowck (21,959,252 samples, 0.64%)</title><rect x="52.4513%" y="117" width="0.6393%" height="15" fill="rgb(230,62,27)"/><text x="52.7013%" y="127.50"></text></g><g><title>item_types_checking (173,367,684 samples, 5.05%)</title><rect x="48.0962%" y="165" width="5.0472%" height="15" fill="rgb(216,154,8)"/><text x="48.3462%" y="175.50">item_t..</text></g><g><title>check_mod_item_types (173,269,002 samples, 5.04%)</title><rect x="48.0991%" y="149" width="5.0443%" height="15" fill="rgb(244,35,45)"/><text x="48.3491%" y="159.50">check_..</text></g><g><title>fn_sig (7,301,662 samples, 0.21%)</title><rect x="53.3377%" y="133" width="0.2126%" height="15" fill="rgb(251,115,12)"/><text x="53.5877%" y="143.50"></text></g><g><title>resolve_lifetimes (4,883,216 samples, 0.14%)</title><rect x="53.6637%" y="101" width="0.1422%" height="15" fill="rgb(240,54,50)"/><text x="53.9137%" y="111.50"></text></g><g><title>is_late_bound_map (5,206,951 samples, 0.15%)</title><rect x="53.6544%" y="117" width="0.1516%" height="15" fill="rgb(233,84,52)"/><text x="53.9044%" y="127.50"></text></g><g><title>generics_of (10,613,712 samples, 0.31%)</title><rect x="53.5503%" y="133" width="0.3090%" height="15" fill="rgb(207,117,47)"/><text x="53.8003%" y="143.50"></text></g><g><title>late_bound_vars_map (5,505,296 samples, 0.16%)</title><rect x="54.3360%" y="85" width="0.1603%" height="15" fill="rgb(249,43,39)"/><text x="54.5860%" y="95.50"></text></g><g><title>resolve_lifetimes (5,044,639 samples, 0.15%)</title><rect x="54.3494%" y="69" width="0.1469%" height="15" fill="rgb(209,38,44)"/><text x="54.5994%" y="79.50"></text></g><g><title>explicit_predicates_of (19,971,510 samples, 0.58%)</title><rect x="54.0044%" y="101" width="0.5814%" height="15" fill="rgb(236,212,23)"/><text x="54.2544%" y="111.50"></text></g><g><title>predicates_of (28,054,628 samples, 0.82%)</title><rect x="53.8946%" y="133" width="0.8167%" height="15" fill="rgb(242,79,21)"/><text x="54.1446%" y="143.50"></text></g><g><title>predicates_defined_on (26,461,050 samples, 0.77%)</title><rect x="53.9410%" y="117" width="0.7704%" height="15" fill="rgb(211,96,35)"/><text x="54.1910%" y="127.50"></text></g><g><title>inferred_outlives_of (4,311,303 samples, 0.13%)</title><rect x="54.5858%" y="101" width="0.1255%" height="15" fill="rgb(253,215,40)"/><text x="54.8358%" y="111.50"></text></g><g><title>inferred_outlives_crate (3,810,198 samples, 0.11%)</title><rect x="54.6004%" y="85" width="0.1109%" height="15" fill="rgb(211,81,21)"/><text x="54.8504%" y="95.50"></text></g><g><title>type_collecting (61,612,066 samples, 1.79%)</title><rect x="53.1442%" y="165" width="1.7937%" height="15" fill="rgb(208,190,38)"/><text x="53.3942%" y="175.50">t..</text></g><g><title>collect_mod_item_types (61,513,156 samples, 1.79%)</title><rect x="53.1471%" y="149" width="1.7908%" height="15" fill="rgb(235,213,38)"/><text x="53.3971%" y="159.50">c..</text></g><g><title>type_of (7,726,321 samples, 0.22%)</title><rect x="54.7129%" y="133" width="0.2249%" height="15" fill="rgb(237,122,38)"/><text x="54.9629%" y="143.50"></text></g><g><title>evaluate_obligation (10,658,869 samples, 0.31%)</title><rect x="58.2798%" y="133" width="0.3103%" height="15" fill="rgb(244,218,35)"/><text x="58.5298%" y="143.50"></text></g><g><title>implied_outlives_bounds (23,757,134 samples, 0.69%)</title><rect x="58.6168%" y="133" width="0.6916%" height="15" fill="rgb(240,68,47)"/><text x="58.8668%" y="143.50"></text></g><g><title>param_env (33,612,408 samples, 0.98%)</title><rect x="59.3085%" y="133" width="0.9785%" height="15" fill="rgb(210,16,53)"/><text x="59.5585%" y="143.50"></text></g><g><title>region_scope_tree (6,672,501 samples, 0.19%)</title><rect x="60.2938%" y="133" width="0.1943%" height="15" fill="rgb(235,124,12)"/><text x="60.5438%" y="143.50"></text></g><g><title>check_impl_item_well_formed (184,504,113 samples, 5.37%)</title><rect x="55.1185%" y="149" width="5.3714%" height="15" fill="rgb(224,169,11)"/><text x="55.3685%" y="159.50">check_i..</text></g><g><title>implied_outlives_bounds (4,429,396 samples, 0.13%)</title><rect x="62.8161%" y="133" width="0.1290%" height="15" fill="rgb(250,166,2)"/><text x="63.0661%" y="143.50"></text></g><g><title>param_env (24,220,794 samples, 0.71%)</title><rect x="62.9458%" y="133" width="0.7051%" height="15" fill="rgb(242,216,29)"/><text x="63.1958%" y="143.50"></text></g><g><title>check_item_well_formed (113,524,872 samples, 3.31%)</title><rect x="60.4899%" y="149" width="3.3050%" height="15" fill="rgb(230,116,27)"/><text x="60.7399%" y="159.50">che..</text></g><g><title>analysis (2,095,020,106 samples, 60.99%)</title><rect x="3.1762%" y="197" width="60.9915%" height="15" fill="rgb(228,99,48)"/><text x="3.4262%" y="207.50">analysis</text></g><g><title>type_check_crate (1,218,236,294 samples, 35.47%)</title><rect x="28.7017%" y="181" width="35.4661%" height="15" fill="rgb(253,11,6)"/><text x="28.9517%" y="191.50">type_check_crate</text></g><g><title>wf_checking (316,831,303 samples, 9.22%)</title><rect x="54.9440%" y="165" width="9.2238%" height="15" fill="rgb(247,143,39)"/><text x="55.1940%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (12,807,305 samples, 0.37%)</title><rect x="63.7949%" y="149" width="0.3729%" height="15" fill="rgb(236,97,10)"/><text x="64.0449%" y="159.50"></text></g><g><title>param_env (4,016,326 samples, 0.12%)</title><rect x="66.4829%" y="149" width="0.1169%" height="15" fill="rgb(233,208,19)"/><text x="66.7329%" y="159.50"></text></g><g><title>fn_abi_of_instance (11,260,041 samples, 0.33%)</title><rect x="66.2975%" y="165" width="0.3278%" height="15" fill="rgb(216,164,2)"/><text x="66.5475%" y="175.50"></text></g><g><title>codegen_module (85,107,895 samples, 2.48%)</title><rect x="64.2267%" y="181" width="2.4777%" height="15" fill="rgb(220,129,5)"/><text x="64.4767%" y="191.50">co..</text></g><g><title>codegen_crate (87,238,598 samples, 2.54%)</title><rect x="64.1680%" y="197" width="2.5397%" height="15" fill="rgb(242,17,10)"/><text x="64.4180%" y="207.50">co..</text></g><g><title>LLVM_module_codegen (491,920,656 samples, 14.32%)</title><rect x="66.7154%" y="181" width="14.3211%" height="15" fill="rgb(242,107,0)"/><text x="66.9654%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (472,371,208 samples, 13.75%)</title><rect x="67.2845%" y="165" width="13.7520%" height="15" fill="rgb(251,28,31)"/><text x="67.5345%" y="175.50">LLVM_module_codegen_e..</text></g><g><title>codegen_module_optimize (519,146,901 samples, 15.11%)</title><rect x="66.7078%" y="197" width="15.1137%" height="15" fill="rgb(233,223,10)"/><text x="66.9578%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (26,964,844 samples, 0.79%)</title><rect x="81.0365%" y="181" width="0.7850%" height="15" fill="rgb(215,21,27)"/><text x="81.2865%" y="191.50"></text></g><g><title>macro_expand_crate (146,753,003 samples, 4.27%)</title><rect x="82.0014%" y="181" width="4.2724%" height="15" fill="rgb(232,23,21)"/><text x="82.2514%" y="191.50">macro..</text></g><g><title>expand_crate (146,719,363 samples, 4.27%)</title><rect x="82.0024%" y="165" width="4.2714%" height="15" fill="rgb(244,5,23)"/><text x="82.2524%" y="175.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (3,793,952 samples, 0.11%)</title><rect x="86.1633%" y="149" width="0.1105%" height="15" fill="rgb(226,81,46)"/><text x="86.4133%" y="159.50"></text></g><g><title>late_resolve_crate (30,187,288 samples, 0.88%)</title><rect x="86.3374%" y="165" width="0.8788%" height="15" fill="rgb(247,70,30)"/><text x="86.5874%" y="175.50"></text></g><g><title>configure_and_expand (189,876,651 samples, 5.53%)</title><rect x="81.8215%" y="197" width="5.5278%" height="15" fill="rgb(212,68,19)"/><text x="82.0715%" y="207.50">configu..</text></g><g><title>resolve_crate (36,848,744 samples, 1.07%)</title><rect x="86.2766%" y="181" width="1.0728%" height="15" fill="rgb(240,187,13)"/><text x="86.5266%" y="191.50"></text></g><g><title>drop_ast (4,966,381 samples, 0.14%)</title><rect x="87.3493%" y="197" width="0.1446%" height="15" fill="rgb(223,113,26)"/><text x="87.5993%" y="207.50"></text></g><g><title>early_lint_checks (7,116,882 samples, 0.21%)</title><rect x="87.4948%" y="197" width="0.2072%" height="15" fill="rgb(206,192,2)"/><text x="87.7448%" y="207.50"></text></g><g><title>free_global_ctxt (28,704,882 samples, 0.84%)</title><rect x="87.7020%" y="197" width="0.8357%" height="15" fill="rgb(241,108,4)"/><text x="87.9520%" y="207.50"></text></g><g><title>optimized_mir (9,685,675 samples, 0.28%)</title><rect x="89.9114%" y="117" width="0.2820%" height="15" fill="rgb(247,173,49)"/><text x="90.1614%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,689,697 samples, 0.11%)</title><rect x="90.0859%" y="101" width="0.1074%" height="15" fill="rgb(224,114,35)"/><text x="90.3359%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,515,790 samples, 0.13%)</title><rect x="90.2340%" y="101" width="0.1315%" height="15" fill="rgb(245,159,27)"/><text x="90.4840%" y="111.50"></text></g><g><title>resolve_instance (7,566,336 samples, 0.22%)</title><rect x="90.1934%" y="117" width="0.2203%" height="15" fill="rgb(245,172,44)"/><text x="90.4434%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (25,257,057 samples, 0.74%)</title><rect x="89.7595%" y="133" width="0.7353%" height="15" fill="rgb(236,23,11)"/><text x="90.0095%" y="143.50"></text></g><g><title>monomorphization_collector (25,754,232 samples, 0.75%)</title><rect x="89.7593%" y="149" width="0.7498%" height="15" fill="rgb(205,117,38)"/><text x="90.0093%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (29,739,983 samples, 0.87%)</title><rect x="89.7577%" y="165" width="0.8658%" height="15" fill="rgb(237,72,25)"/><text x="90.0077%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,931,229 samples, 0.11%)</title><rect x="90.5091%" y="149" width="0.1144%" height="15" fill="rgb(244,70,9)"/><text x="90.7591%" y="159.50"></text></g><g><title>exported_symbols (33,973,126 samples, 0.99%)</title><rect x="89.7537%" y="181" width="0.9890%" height="15" fill="rgb(217,125,39)"/><text x="90.0037%" y="191.50"></text></g><g><title>reachable_non_generics (4,093,762 samples, 0.12%)</title><rect x="90.6235%" y="165" width="0.1192%" height="15" fill="rgb(235,36,10)"/><text x="90.8735%" y="175.50"></text></g><g><title>reachable_set (3,769,709 samples, 0.11%)</title><rect x="90.6330%" y="149" width="0.1097%" height="15" fill="rgb(251,123,47)"/><text x="90.8830%" y="159.50"></text></g><g><title>is_sized_raw (8,603,686 samples, 0.25%)</title><rect x="92.8691%" y="149" width="0.2505%" height="15" fill="rgb(221,13,13)"/><text x="93.1191%" y="159.50"></text></g><g><title>evaluate_obligation (5,871,397 samples, 0.17%)</title><rect x="92.9486%" y="133" width="0.1709%" height="15" fill="rgb(238,131,9)"/><text x="93.1986%" y="143.50"></text></g><g><title>layout_of (5,356,768 samples, 0.16%)</title><rect x="93.1196%" y="149" width="0.1559%" height="15" fill="rgb(211,50,8)"/><text x="93.3696%" y="159.50"></text></g><g><title>layout_of (27,103,258 samples, 0.79%)</title><rect x="92.6717%" y="165" width="0.7890%" height="15" fill="rgb(245,182,24)"/><text x="92.9217%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (6,111,403 samples, 0.18%)</title><rect x="93.2828%" y="149" width="0.1779%" height="15" fill="rgb(242,14,37)"/><text x="93.5328%" y="159.50"></text></g><g><title>is_copy_raw (19,241,582 samples, 0.56%)</title><rect x="96.0077%" y="133" width="0.5602%" height="15" fill="rgb(246,228,12)"/><text x="96.2577%" y="143.50"></text></g><g><title>evaluate_obligation (12,320,962 samples, 0.36%)</title><rect x="96.2092%" y="117" width="0.3587%" height="15" fill="rgb(213,55,15)"/><text x="96.4592%" y="127.50"></text></g><g><title>needs_drop_raw (22,975,921 samples, 0.67%)</title><rect x="95.9124%" y="149" width="0.6689%" height="15" fill="rgb(209,9,3)"/><text x="96.1624%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (133,886,234 samples, 3.90%)</title><rect x="93.4608%" y="165" width="3.8978%" height="15" fill="rgb(230,59,30)"/><text x="93.7108%" y="175.50">mir_..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (25,141,009 samples, 0.73%)</title><rect x="96.6266%" y="149" width="0.7319%" height="15" fill="rgb(209,121,21)"/><text x="96.8766%" y="159.50"></text></g><g><title>normalize_projection_ty (20,184,805 samples, 0.59%)</title><rect x="96.7709%" y="133" width="0.5876%" height="15" fill="rgb(220,109,13)"/><text x="97.0209%" y="143.50"></text></g><g><title>optimized_mir (225,959,242 samples, 6.58%)</title><rect x="90.8074%" y="181" width="6.5783%" height="15" fill="rgb(232,18,1)"/><text x="91.0574%" y="191.50">optimized..</text></g><g><title>generate_crate_metadata (305,708,181 samples, 8.90%)</title><rect x="88.5377%" y="197" width="8.9000%" height="15" fill="rgb(215,41,42)"/><text x="88.7877%" y="207.50">generate_crat..</text></g><g><title>hir_lowering (66,599,778 samples, 1.94%)</title><rect x="97.4376%" y="197" width="1.9389%" height="15" fill="rgb(224,123,36)"/><text x="97.6876%" y="207.50">h..</text></g><g><title>link_crate (9,686,819 samples, 0.28%)</title><rect x="99.3774%" y="181" width="0.2820%" height="15" fill="rgb(240,125,3)"/><text x="99.6274%" y="191.50"></text></g><g><title>link_binary (9,612,868 samples, 0.28%)</title><rect x="99.3796%" y="165" width="0.2799%" height="15" fill="rgb(205,98,50)"/><text x="99.6296%" y="175.50"></text></g><g><title>link_rlib (8,452,666 samples, 0.25%)</title><rect x="99.4133%" y="149" width="0.2461%" height="15" fill="rgb(205,185,37)"/><text x="99.6633%" y="159.50"></text></g><g><title>link (9,729,939 samples, 0.28%)</title><rect x="99.3765%" y="197" width="0.2833%" height="15" fill="rgb(238,207,15)"/><text x="99.6265%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (8,312,744 samples, 0.24%)</title><rect x="99.6859%" y="197" width="0.2420%" height="15" fill="rgb(213,199,42)"/><text x="99.9359%" y="207.50"></text></g><g><title>all (3,434,935,138 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (3,434,935,138 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>