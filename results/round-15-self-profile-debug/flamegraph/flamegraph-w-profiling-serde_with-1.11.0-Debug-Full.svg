<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (72,549,166 samples, 2.89%)</title><rect x="0.0469%" y="181" width="2.8850%" height="15" fill="rgb(227,0,7)"/><text x="0.2969%" y="191.50">LL..</text></g><g><title>implied_outlives_bounds (4,889,047 samples, 0.19%)</title><rect x="12.9808%" y="133" width="0.1944%" height="15" fill="rgb(217,0,24)"/><text x="13.2308%" y="143.50"></text></g><g><title>is_sized_raw (4,139,523 samples, 0.16%)</title><rect x="13.2160%" y="133" width="0.1646%" height="15" fill="rgb(221,193,54)"/><text x="13.4660%" y="143.50"></text></g><g><title>is_copy_raw (48,963,763 samples, 1.95%)</title><rect x="16.7376%" y="53" width="1.9471%" height="15" fill="rgb(248,212,6)"/><text x="16.9876%" y="63.50">i..</text></g><g><title>evaluate_obligation (39,451,231 samples, 1.57%)</title><rect x="17.1159%" y="37" width="1.5688%" height="15" fill="rgb(208,68,35)"/><text x="17.3659%" y="47.50"></text></g><g><title>needs_drop_raw (56,207,637 samples, 2.24%)</title><rect x="16.4784%" y="69" width="2.2352%" height="15" fill="rgb(232,128,0)"/><text x="16.7284%" y="79.50">n..</text></g><g><title>codegen_fulfill_obligation (11,153,869 samples, 0.44%)</title><rect x="18.8249%" y="53" width="0.4435%" height="15" fill="rgb(207,160,47)"/><text x="19.0749%" y="63.50"></text></g><g><title>resolve_instance (15,975,739 samples, 0.64%)</title><rect x="18.7150%" y="69" width="0.6353%" height="15" fill="rgb(228,23,34)"/><text x="18.9650%" y="79.50"></text></g><g><title>thir_body (14,054,322 samples, 0.56%)</title><rect x="19.3645%" y="69" width="0.5589%" height="15" fill="rgb(218,30,26)"/><text x="19.6145%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,119,014 samples, 0.16%)</title><rect x="19.9318%" y="69" width="0.1638%" height="15" fill="rgb(220,122,19)"/><text x="20.1818%" y="79.50"></text></g><g><title>mir_const (157,258,474 samples, 6.25%)</title><rect x="13.8449%" y="117" width="6.2536%" height="15" fill="rgb(250,228,42)"/><text x="14.0949%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (144,150,218 samples, 5.73%)</title><rect x="14.3662%" y="101" width="5.7323%" height="15" fill="rgb(240,193,28)"/><text x="14.6162%" y="111.50">unsafet..</text></g><g><title>mir_built (135,708,651 samples, 5.40%)</title><rect x="14.7019%" y="85" width="5.3966%" height="15" fill="rgb(216,20,37)"/><text x="14.9519%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (170,122,769 samples, 6.77%)</title><rect x="13.4057%" y="133" width="6.7652%" height="15" fill="rgb(206,188,39)"/><text x="13.6557%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (16,244,923 samples, 0.65%)</title><rect x="20.1715%" y="133" width="0.6460%" height="15" fill="rgb(217,207,13)"/><text x="20.4215%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (32,908,747 samples, 1.31%)</title><rect x="20.8175%" y="133" width="1.3087%" height="15" fill="rgb(231,73,38)"/><text x="21.0675%" y="143.50"></text></g><g><title>normalize_projection_ty (18,058,516 samples, 0.72%)</title><rect x="21.4080%" y="117" width="0.7181%" height="15" fill="rgb(225,20,46)"/><text x="21.6580%" y="127.50"></text></g><g><title>type_op_normalize_predicate (29,834,515 samples, 1.19%)</title><rect x="22.1262%" y="133" width="1.1864%" height="15" fill="rgb(210,31,41)"/><text x="22.3762%" y="143.50"></text></g><g><title>normalize_projection_ty (15,597,238 samples, 0.62%)</title><rect x="22.6923%" y="117" width="0.6202%" height="15" fill="rgb(221,200,47)"/><text x="22.9423%" y="127.50"></text></g><g><title>type_op_normalize_ty (18,899,351 samples, 0.75%)</title><rect x="23.3126%" y="133" width="0.7516%" height="15" fill="rgb(226,26,5)"/><text x="23.5626%" y="143.50"></text></g><g><title>normalize_projection_ty (8,311,083 samples, 0.33%)</title><rect x="23.7336%" y="117" width="0.3305%" height="15" fill="rgb(249,33,26)"/><text x="23.9836%" y="127.50"></text></g><g><title>type_op_prove_predicate (143,200,166 samples, 5.69%)</title><rect x="24.0641%" y="133" width="5.6945%" height="15" fill="rgb(235,183,28)"/><text x="24.3141%" y="143.50">type_op..</text></g><g><title>MIR_borrow_checking (671,228,257 samples, 26.69%)</title><rect x="3.0676%" y="165" width="26.6923%" height="15" fill="rgb(221,5,38)"/><text x="3.3176%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (669,060,573 samples, 26.61%)</title><rect x="3.1538%" y="149" width="26.6061%" height="15" fill="rgb(247,18,42)"/><text x="3.4038%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (2,738,619 samples, 0.11%)</title><rect x="29.8139%" y="165" width="0.1089%" height="15" fill="rgb(241,131,45)"/><text x="30.0639%" y="175.50"></text></g><g><title>codegen_fn_attrs (3,251,151 samples, 0.13%)</title><rect x="30.0504%" y="133" width="0.1293%" height="15" fill="rgb(249,31,29)"/><text x="30.3004%" y="143.50"></text></g><g><title>check_mod_attrs (6,368,763 samples, 0.25%)</title><rect x="29.9264%" y="149" width="0.2533%" height="15" fill="rgb(225,111,53)"/><text x="30.1764%" y="159.50"></text></g><g><title>lint_levels (3,557,057 samples, 0.14%)</title><rect x="30.4001%" y="133" width="0.1415%" height="15" fill="rgb(238,160,17)"/><text x="30.6501%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (8,450,769 samples, 0.34%)</title><rect x="30.3055%" y="149" width="0.3361%" height="15" fill="rgb(214,148,48)"/><text x="30.5555%" y="159.50"></text></g><g><title>misc_checking_1 (18,564,117 samples, 0.74%)</title><rect x="29.9228%" y="165" width="0.7382%" height="15" fill="rgb(232,36,49)"/><text x="30.1728%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (8,859,273 samples, 0.35%)</title><rect x="30.6612%" y="149" width="0.3523%" height="15" fill="rgb(209,103,24)"/><text x="30.9112%" y="159.50"></text></g><g><title>check_mod_liveness (7,693,971 samples, 0.31%)</title><rect x="30.7075%" y="133" width="0.3060%" height="15" fill="rgb(229,88,8)"/><text x="30.9575%" y="143.50"></text></g><g><title>misc_checking_2 (19,224,803 samples, 0.76%)</title><rect x="30.6611%" y="165" width="0.7645%" height="15" fill="rgb(213,181,19)"/><text x="30.9111%" y="175.50"></text></g><g><title>match_checking (10,362,230 samples, 0.41%)</title><rect x="31.0135%" y="149" width="0.4121%" height="15" fill="rgb(254,191,54)"/><text x="31.2635%" y="159.50"></text></g><g><title>check_match (9,722,876 samples, 0.39%)</title><rect x="31.0389%" y="133" width="0.3866%" height="15" fill="rgb(241,83,37)"/><text x="31.2889%" y="143.50"></text></g><g><title>check_private_in_public (4,198,145 samples, 0.17%)</title><rect x="31.4265%" y="149" width="0.1669%" height="15" fill="rgb(233,36,39)"/><text x="31.6765%" y="159.50"></text></g><g><title>death_checking (6,354,137 samples, 0.25%)</title><rect x="31.5934%" y="149" width="0.2527%" height="15" fill="rgb(226,3,54)"/><text x="31.8434%" y="159.50"></text></g><g><title>crate_lints (11,901,056 samples, 0.47%)</title><rect x="31.8463%" y="133" width="0.4733%" height="15" fill="rgb(245,192,40)"/><text x="32.0963%" y="143.50"></text></g><g><title>lint_checking (20,119,673 samples, 0.80%)</title><rect x="31.8461%" y="149" width="0.8001%" height="15" fill="rgb(238,167,29)"/><text x="32.0961%" y="159.50"></text></g><g><title>module_lints (8,214,697 samples, 0.33%)</title><rect x="32.3195%" y="133" width="0.3267%" height="15" fill="rgb(232,182,51)"/><text x="32.5695%" y="143.50"></text></g><g><title>lint_mod (8,188,737 samples, 0.33%)</title><rect x="32.3205%" y="117" width="0.3256%" height="15" fill="rgb(231,60,39)"/><text x="32.5705%" y="127.50"></text></g><g><title>privacy_access_levels (7,603,289 samples, 0.30%)</title><rect x="32.6462%" y="149" width="0.3024%" height="15" fill="rgb(208,69,12)"/><text x="32.8962%" y="159.50"></text></g><g><title>privacy_checking_modules (21,196,533 samples, 0.84%)</title><rect x="32.9485%" y="149" width="0.8429%" height="15" fill="rgb(235,93,37)"/><text x="33.1985%" y="159.50"></text></g><g><title>check_mod_privacy (21,166,393 samples, 0.84%)</title><rect x="32.9497%" y="133" width="0.8417%" height="15" fill="rgb(213,116,39)"/><text x="33.1997%" y="143.50"></text></g><g><title>misc_checking_3 (59,672,909 samples, 2.37%)</title><rect x="31.4256%" y="165" width="2.3730%" height="15" fill="rgb(222,207,29)"/><text x="31.6756%" y="175.50">mi..</text></g><g><title>impl_parent (3,692,459 samples, 0.15%)</title><rect x="34.1743%" y="101" width="0.1468%" height="15" fill="rgb(206,96,30)"/><text x="34.4243%" y="111.50"></text></g><g><title>impl_trait_ref (7,717,354 samples, 0.31%)</title><rect x="34.3212%" y="101" width="0.3069%" height="15" fill="rgb(218,138,4)"/><text x="34.5712%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,072,110 samples, 0.24%)</title><rect x="34.3866%" y="85" width="0.2415%" height="15" fill="rgb(250,191,14)"/><text x="34.6366%" y="95.50"></text></g><g><title>coherent_trait (20,430,484 samples, 0.81%)</title><rect x="33.8688%" y="133" width="0.8124%" height="15" fill="rgb(239,60,40)"/><text x="34.1188%" y="143.50"></text></g><g><title>specialization_graph_of (19,545,004 samples, 0.78%)</title><rect x="33.9040%" y="117" width="0.7772%" height="15" fill="rgb(206,27,48)"/><text x="34.1540%" y="127.50"></text></g><g><title>coherence_checking (21,030,401 samples, 0.84%)</title><rect x="33.8673%" y="149" width="0.8363%" height="15" fill="rgb(225,35,8)"/><text x="34.1173%" y="159.50"></text></g><g><title>dropck_outlives (15,606,349 samples, 0.62%)</title><rect x="50.6740%" y="101" width="0.6206%" height="15" fill="rgb(250,213,24)"/><text x="50.9240%" y="111.50"></text></g><g><title>evaluate_obligation (20,181,480 samples, 0.80%)</title><rect x="51.2946%" y="101" width="0.8025%" height="15" fill="rgb(247,123,22)"/><text x="51.5446%" y="111.50"></text></g><g><title>evaluate_obligation (3,437,486 samples, 0.14%)</title><rect x="52.3598%" y="85" width="0.1367%" height="15" fill="rgb(231,138,38)"/><text x="52.6098%" y="95.50"></text></g><g><title>method_autoderef_steps (7,643,209 samples, 0.30%)</title><rect x="52.1930%" y="101" width="0.3039%" height="15" fill="rgb(231,145,46)"/><text x="52.4430%" y="111.50"></text></g><g><title>evaluate_obligation (7,351,095 samples, 0.29%)</title><rect x="55.7662%" y="85" width="0.2923%" height="15" fill="rgb(251,118,11)"/><text x="56.0162%" y="95.50"></text></g><g><title>method_autoderef_steps (2,701,323 samples, 0.11%)</title><rect x="56.1485%" y="85" width="0.1074%" height="15" fill="rgb(217,147,25)"/><text x="56.3985%" y="95.50"></text></g><g><title>typeck (90,890,198 samples, 3.61%)</title><rect x="52.6720%" y="101" width="3.6144%" height="15" fill="rgb(247,81,37)"/><text x="52.9220%" y="111.50">type..</text></g><g><title>item_bodies_checking (542,798,971 samples, 21.59%)</title><rect x="34.7323%" y="149" width="21.5851%" height="15" fill="rgb(209,12,38)"/><text x="34.9823%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (542,795,080 samples, 21.58%)</title><rect x="34.7325%" y="133" width="21.5850%" height="15" fill="rgb(227,1,9)"/><text x="34.9825%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (541,146,840 samples, 21.52%)</title><rect x="34.7980%" y="117" width="21.5194%" height="15" fill="rgb(248,47,43)"/><text x="35.0480%" y="127.50">typeck</text></g><g><title>item_types_checking (33,588,524 samples, 1.34%)</title><rect x="56.3174%" y="149" width="1.3357%" height="15" fill="rgb(221,10,30)"/><text x="56.5674%" y="159.50"></text></g><g><title>check_mod_item_types (33,555,714 samples, 1.33%)</title><rect x="56.3187%" y="133" width="1.3344%" height="15" fill="rgb(210,229,1)"/><text x="56.5687%" y="143.50"></text></g><g><title>fn_sig (6,744,999 samples, 0.27%)</title><rect x="57.8270%" y="117" width="0.2682%" height="15" fill="rgb(222,148,37)"/><text x="58.0770%" y="127.50"></text></g><g><title>is_late_bound_map (5,357,537 samples, 0.21%)</title><rect x="58.1749%" y="101" width="0.2130%" height="15" fill="rgb(234,67,33)"/><text x="58.4249%" y="111.50"></text></g><g><title>resolve_lifetimes (5,073,853 samples, 0.20%)</title><rect x="58.1862%" y="85" width="0.2018%" height="15" fill="rgb(247,98,35)"/><text x="58.4362%" y="95.50"></text></g><g><title>generics_of (8,256,607 samples, 0.33%)</title><rect x="58.0952%" y="117" width="0.3283%" height="15" fill="rgb(247,138,52)"/><text x="58.3452%" y="127.50"></text></g><g><title>late_bound_vars_map (2,702,879 samples, 0.11%)</title><rect x="58.7625%" y="69" width="0.1075%" height="15" fill="rgb(213,79,30)"/><text x="59.0125%" y="79.50"></text></g><g><title>explicit_predicates_of (8,801,697 samples, 0.35%)</title><rect x="58.5413%" y="85" width="0.3500%" height="15" fill="rgb(246,177,23)"/><text x="58.7913%" y="95.50"></text></g><g><title>predicates_of (12,561,367 samples, 0.50%)</title><rect x="58.4597%" y="117" width="0.4995%" height="15" fill="rgb(230,62,27)"/><text x="58.7097%" y="127.50"></text></g><g><title>predicates_defined_on (11,769,840 samples, 0.47%)</title><rect x="58.4912%" y="101" width="0.4680%" height="15" fill="rgb(216,154,8)"/><text x="58.7412%" y="111.50"></text></g><g><title>type_collecting (35,112,660 samples, 1.40%)</title><rect x="57.6538%" y="149" width="1.3963%" height="15" fill="rgb(244,35,45)"/><text x="57.9038%" y="159.50"></text></g><g><title>collect_mod_item_types (35,072,190 samples, 1.39%)</title><rect x="57.6554%" y="133" width="1.3947%" height="15" fill="rgb(251,115,12)"/><text x="57.9054%" y="143.50"></text></g><g><title>evaluate_obligation (4,378,066 samples, 0.17%)</title><rect x="61.7343%" y="117" width="0.1741%" height="15" fill="rgb(240,54,50)"/><text x="61.9843%" y="127.50"></text></g><g><title>implied_outlives_bounds (8,696,432 samples, 0.35%)</title><rect x="61.9180%" y="117" width="0.3458%" height="15" fill="rgb(233,84,52)"/><text x="62.1680%" y="127.50"></text></g><g><title>param_env (7,253,632 samples, 0.29%)</title><rect x="62.2669%" y="117" width="0.2885%" height="15" fill="rgb(207,117,47)"/><text x="62.5169%" y="127.50"></text></g><g><title>region_scope_tree (4,928,472 samples, 0.20%)</title><rect x="62.5609%" y="117" width="0.1960%" height="15" fill="rgb(249,43,39)"/><text x="62.8109%" y="127.50"></text></g><g><title>check_impl_item_well_formed (89,681,629 samples, 3.57%)</title><rect x="59.1960%" y="133" width="3.5663%" height="15" fill="rgb(209,38,44)"/><text x="59.4460%" y="143.50">chec..</text></g><g><title>implied_outlives_bounds (3,276,659 samples, 0.13%)</title><rect x="64.8115%" y="117" width="0.1303%" height="15" fill="rgb(236,212,23)"/><text x="65.0615%" y="127.50"></text></g><g><title>param_env (5,547,736 samples, 0.22%)</title><rect x="64.9517%" y="117" width="0.2206%" height="15" fill="rgb(242,79,21)"/><text x="65.2017%" y="127.50"></text></g><g><title>check_item_well_formed (63,016,381 samples, 2.51%)</title><rect x="62.7623%" y="133" width="2.5059%" height="15" fill="rgb(211,96,35)"/><text x="63.0123%" y="143.50">ch..</text></g><g><title>analysis (1,568,299,637 samples, 62.37%)</title><rect x="2.9319%" y="181" width="62.3655%" height="15" fill="rgb(253,215,40)"/><text x="3.1819%" y="191.50">analysis</text></g><g><title>type_check_crate (792,099,082 samples, 31.50%)</title><rect x="33.7985%" y="165" width="31.4989%" height="15" fill="rgb(211,81,21)"/><text x="34.0485%" y="175.50">type_check_crate</text></g><g><title>wf_checking (156,959,637 samples, 6.24%)</title><rect x="59.0557%" y="149" width="6.2417%" height="15" fill="rgb(208,190,38)"/><text x="59.3057%" y="159.50">wf_check..</text></g><g><title>param_env (4,019,144 samples, 0.16%)</title><rect x="67.3653%" y="133" width="0.1598%" height="15" fill="rgb(235,213,38)"/><text x="67.6153%" y="143.50"></text></g><g><title>fn_abi_of_instance (9,801,145 samples, 0.39%)</title><rect x="67.1805%" y="149" width="0.3898%" height="15" fill="rgb(237,122,38)"/><text x="67.4305%" y="159.50"></text></g><g><title>codegen_module (57,842,881 samples, 2.30%)</title><rect x="65.3759%" y="165" width="2.3002%" height="15" fill="rgb(244,218,35)"/><text x="65.6259%" y="175.50">c..</text></g><g><title>codegen_crate (59,897,782 samples, 2.38%)</title><rect x="65.2978%" y="181" width="2.3819%" height="15" fill="rgb(240,68,47)"/><text x="65.5478%" y="191.50">co..</text></g><g><title>LLVM_module_codegen (276,276,308 samples, 10.99%)</title><rect x="67.6892%" y="165" width="10.9865%" height="15" fill="rgb(210,16,53)"/><text x="67.9392%" y="175.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (256,946,120 samples, 10.22%)</title><rect x="68.4579%" y="149" width="10.2178%" height="15" fill="rgb(235,124,12)"/><text x="68.7079%" y="159.50">LLVM_module_cod..</text></g><g><title>codegen_module_optimize (291,577,608 samples, 11.59%)</title><rect x="67.6797%" y="181" width="11.5950%" height="15" fill="rgb(224,169,11)"/><text x="67.9297%" y="191.50">codegen_module_op..</text></g><g><title>LLVM_module_optimize (15,063,107 samples, 0.60%)</title><rect x="78.6757%" y="165" width="0.5990%" height="15" fill="rgb(250,166,2)"/><text x="78.9257%" y="175.50"></text></g><g><title>metadata_register_crate (12,408,870 samples, 0.49%)</title><rect x="84.6346%" y="133" width="0.4935%" height="15" fill="rgb(242,216,29)"/><text x="84.8846%" y="143.50"></text></g><g><title>metadata_register_crate (4,823,159 samples, 0.19%)</title><rect x="84.9363%" y="117" width="0.1918%" height="15" fill="rgb(230,116,27)"/><text x="85.1863%" y="127.50"></text></g><g><title>macro_expand_crate (144,587,927 samples, 5.75%)</title><rect x="79.4561%" y="165" width="5.7497%" height="15" fill="rgb(228,99,48)"/><text x="79.7061%" y="175.50">macro_e..</text></g><g><title>expand_crate (144,569,626 samples, 5.75%)</title><rect x="79.4569%" y="149" width="5.7490%" height="15" fill="rgb(253,11,6)"/><text x="79.7069%" y="159.50">expand_..</text></g><g><title>late_resolve_crate (22,399,027 samples, 0.89%)</title><rect x="85.2623%" y="149" width="0.8907%" height="15" fill="rgb(247,143,39)"/><text x="85.5123%" y="159.50"></text></g><g><title>configure_and_expand (176,423,222 samples, 7.02%)</title><rect x="79.2747%" y="181" width="7.0157%" height="15" fill="rgb(236,97,10)"/><text x="79.5247%" y="191.50">configure..</text></g><g><title>resolve_crate (27,048,425 samples, 1.08%)</title><rect x="85.2148%" y="165" width="1.0756%" height="15" fill="rgb(233,208,19)"/><text x="85.4648%" y="175.50"></text></g><g><title>drop_ast (4,909,752 samples, 0.20%)</title><rect x="86.2904%" y="181" width="0.1952%" height="15" fill="rgb(216,164,2)"/><text x="86.5404%" y="191.50"></text></g><g><title>early_lint_checks (5,979,923 samples, 0.24%)</title><rect x="86.4868%" y="181" width="0.2378%" height="15" fill="rgb(220,129,5)"/><text x="86.7368%" y="191.50"></text></g><g><title>free_global_ctxt (16,598,826 samples, 0.66%)</title><rect x="86.7246%" y="181" width="0.6601%" height="15" fill="rgb(242,17,10)"/><text x="86.9746%" y="191.50"></text></g><g><title>optimized_mir (6,435,002 samples, 0.26%)</title><rect x="88.7624%" y="101" width="0.2559%" height="15" fill="rgb(242,107,0)"/><text x="89.0124%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,750,175 samples, 0.11%)</title><rect x="89.0607%" y="85" width="0.1094%" height="15" fill="rgb(251,28,31)"/><text x="89.3107%" y="95.50"></text></g><g><title>resolve_instance (5,511,422 samples, 0.22%)</title><rect x="89.0183%" y="101" width="0.2192%" height="15" fill="rgb(233,223,10)"/><text x="89.2683%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (17,716,897 samples, 0.70%)</title><rect x="88.5996%" y="117" width="0.7045%" height="15" fill="rgb(215,21,27)"/><text x="88.8496%" y="127.50"></text></g><g><title>monomorphization_collector (17,971,750 samples, 0.71%)</title><rect x="88.5994%" y="133" width="0.7147%" height="15" fill="rgb(232,23,21)"/><text x="88.8494%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (20,607,737 samples, 0.82%)</title><rect x="88.5976%" y="149" width="0.8195%" height="15" fill="rgb(244,5,23)"/><text x="88.8476%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (2,591,347 samples, 0.10%)</title><rect x="89.3140%" y="133" width="0.1030%" height="15" fill="rgb(226,81,46)"/><text x="89.5640%" y="143.50"></text></g><g><title>exported_symbols (23,004,962 samples, 0.91%)</title><rect x="88.5944%" y="165" width="0.9148%" height="15" fill="rgb(247,70,30)"/><text x="88.8444%" y="175.50"></text></g><g><title>layout_of (5,646,542 samples, 0.22%)</title><rect x="91.6255%" y="133" width="0.2245%" height="15" fill="rgb(212,68,19)"/><text x="91.8755%" y="143.50"></text></g><g><title>layout_of (16,227,523 samples, 0.65%)</title><rect x="91.3491%" y="149" width="0.6453%" height="15" fill="rgb(240,187,13)"/><text x="91.5991%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,471,183 samples, 0.14%)</title><rect x="91.8564%" y="133" width="0.1380%" height="15" fill="rgb(223,113,26)"/><text x="92.1064%" y="143.50"></text></g><g><title>is_copy_raw (41,082,282 samples, 1.63%)</title><rect x="95.1610%" y="117" width="1.6337%" height="15" fill="rgb(206,192,2)"/><text x="95.4110%" y="127.50"></text></g><g><title>evaluate_obligation (33,367,659 samples, 1.33%)</title><rect x="95.4678%" y="101" width="1.3269%" height="15" fill="rgb(241,108,4)"/><text x="95.7178%" y="111.50"></text></g><g><title>needs_drop_raw (44,807,743 samples, 1.78%)</title><rect x="95.0331%" y="133" width="1.7818%" height="15" fill="rgb(247,173,49)"/><text x="95.2831%" y="143.50">n..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,708,663 samples, 0.23%)</title><rect x="96.8563%" y="133" width="0.2270%" height="15" fill="rgb(224,114,35)"/><text x="97.1063%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (127,975,004 samples, 5.09%)</title><rect x="91.9944%" y="149" width="5.0891%" height="15" fill="rgb(245,159,27)"/><text x="92.2444%" y="159.50">mir_dr..</text></g><g><title>optimized_mir (189,467,471 samples, 7.53%)</title><rect x="89.5880%" y="165" width="7.5344%" height="15" fill="rgb(245,172,44)"/><text x="89.8380%" y="175.50">optimized_..</text></g><g><title>generate_crate_metadata (246,059,998 samples, 9.78%)</title><rect x="87.3847%" y="181" width="9.7849%" height="15" fill="rgb(236,23,11)"/><text x="87.6347%" y="191.50">generate_crate..</text></g><g><title>hir_lowering (51,951,459 samples, 2.07%)</title><rect x="97.1696%" y="181" width="2.0659%" height="15" fill="rgb(205,117,38)"/><text x="97.4196%" y="191.50">h..</text></g><g><title>link_crate (7,357,218 samples, 0.29%)</title><rect x="99.2366%" y="165" width="0.2926%" height="15" fill="rgb(237,72,25)"/><text x="99.4866%" y="175.50"></text></g><g><title>link_binary (7,250,787 samples, 0.29%)</title><rect x="99.2408%" y="149" width="0.2883%" height="15" fill="rgb(244,70,9)"/><text x="99.4908%" y="159.50"></text></g><g><title>link_rlib (6,211,136 samples, 0.25%)</title><rect x="99.2822%" y="133" width="0.2470%" height="15" fill="rgb(217,125,39)"/><text x="99.5322%" y="143.50"></text></g><g><title>link (7,397,138 samples, 0.29%)</title><rect x="99.2355%" y="181" width="0.2942%" height="15" fill="rgb(235,36,10)"/><text x="99.4855%" y="191.50"></text></g><g><title>parse_crate (4,170,574 samples, 0.17%)</title><rect x="99.5297%" y="181" width="0.1658%" height="15" fill="rgb(251,123,47)"/><text x="99.7797%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (5,322,976 samples, 0.21%)</title><rect x="99.7060%" y="181" width="0.2117%" height="15" fill="rgb(221,13,13)"/><text x="99.9560%" y="191.50"></text></g><g><title>all (2,514,692,010 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,514,692,010 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>