<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (68,614,537 samples, 10.74%)</title><rect x="0.1289%" y="261" width="10.7379%" height="15" fill="rgb(227,0,7)"/><text x="0.3789%" y="271.50">LLVM_passes</text></g><g><title>is_copy_raw (702,828 samples, 0.11%)</title><rect x="13.9244%" y="133" width="0.1100%" height="15" fill="rgb(217,0,24)"/><text x="14.1744%" y="143.50"></text></g><g><title>needs_drop_raw (1,202,852 samples, 0.19%)</title><rect x="13.8497%" y="149" width="0.1882%" height="15" fill="rgb(221,193,54)"/><text x="14.0997%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (1,031,709 samples, 0.16%)</title><rect x="14.0921%" y="133" width="0.1615%" height="15" fill="rgb(248,212,6)"/><text x="14.3421%" y="143.50"></text></g><g><title>impl_parent (715,077 samples, 0.11%)</title><rect x="14.5033%" y="117" width="0.1119%" height="15" fill="rgb(208,68,35)"/><text x="14.7533%" y="127.50"></text></g><g><title>specialization_graph_of (3,069,732 samples, 0.48%)</title><rect x="14.2735%" y="133" width="0.4804%" height="15" fill="rgb(232,128,0)"/><text x="14.5235%" y="143.50"></text></g><g><title>impl_trait_ref (886,367 samples, 0.14%)</title><rect x="14.6152%" y="117" width="0.1387%" height="15" fill="rgb(207,160,47)"/><text x="14.8652%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (689,425 samples, 0.11%)</title><rect x="14.6461%" y="101" width="0.1079%" height="15" fill="rgb(228,23,34)"/><text x="14.8961%" y="111.50"></text></g><g><title>resolve_instance (4,662,242 samples, 0.73%)</title><rect x="14.0380%" y="149" width="0.7296%" height="15" fill="rgb(218,30,26)"/><text x="14.2880%" y="159.50"></text></g><g><title>thir_body (1,271,353 samples, 0.20%)</title><rect x="14.7709%" y="149" width="0.1990%" height="15" fill="rgb(220,122,19)"/><text x="15.0209%" y="159.50"></text></g><g><title>mir_const (12,403,146 samples, 1.94%)</title><rect x="13.0324%" y="197" width="1.9410%" height="15" fill="rgb(250,228,42)"/><text x="13.2824%" y="207.50">m..</text></g><g><title>unsafety_check_result (11,317,385 samples, 1.77%)</title><rect x="13.2023%" y="181" width="1.7711%" height="15" fill="rgb(240,193,28)"/><text x="13.4523%" y="191.50">u..</text></g><g><title>mir_built (10,535,646 samples, 1.65%)</title><rect x="13.3247%" y="165" width="1.6488%" height="15" fill="rgb(216,20,37)"/><text x="13.5747%" y="175.50"></text></g><g><title>mir_promoted (13,326,960 samples, 2.09%)</title><rect x="12.9158%" y="213" width="2.0856%" height="15" fill="rgb(206,188,39)"/><text x="13.1658%" y="223.50">m..</text></g><g><title>type_op_normalize_fn_sig (1,669,377 samples, 0.26%)</title><rect x="15.0233%" y="213" width="0.2613%" height="15" fill="rgb(217,207,13)"/><text x="15.2733%" y="223.50"></text></g><g><title>normalize_projection_ty (1,299,905 samples, 0.20%)</title><rect x="15.0811%" y="197" width="0.2034%" height="15" fill="rgb(231,73,38)"/><text x="15.3311%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,228,814 samples, 0.35%)</title><rect x="15.3371%" y="213" width="0.3488%" height="15" fill="rgb(225,20,46)"/><text x="15.5871%" y="223.50"></text></g><g><title>MIR_borrow_checking (30,499,550 samples, 4.77%)</title><rect x="10.9134%" y="245" width="4.7731%" height="15" fill="rgb(210,31,41)"/><text x="11.1634%" y="255.50">MIR_bo..</text></g><g><title>mir_borrowck (30,381,749 samples, 4.75%)</title><rect x="10.9319%" y="229" width="4.7546%" height="15" fill="rgb(221,200,47)"/><text x="11.1819%" y="239.50">mir_bo..</text></g><g><title>misc_checking_1 (1,167,142 samples, 0.18%)</title><rect x="15.7369%" y="245" width="0.1827%" height="15" fill="rgb(226,26,5)"/><text x="15.9869%" y="255.50"></text></g><g><title>misc_checking_2 (1,032,591 samples, 0.16%)</title><rect x="15.9196%" y="245" width="0.1616%" height="15" fill="rgb(249,33,26)"/><text x="16.1696%" y="255.50"></text></g><g><title>crate_lints (1,138,121 samples, 0.18%)</title><rect x="16.1696%" y="213" width="0.1781%" height="15" fill="rgb(235,183,28)"/><text x="16.4196%" y="223.50"></text></g><g><title>lint_checking (1,650,177 samples, 0.26%)</title><rect x="16.1693%" y="229" width="0.2582%" height="15" fill="rgb(221,5,38)"/><text x="16.4193%" y="239.50"></text></g><g><title>privacy_checking_modules (867,158 samples, 0.14%)</title><rect x="16.4635%" y="229" width="0.1357%" height="15" fill="rgb(247,18,42)"/><text x="16.7135%" y="239.50"></text></g><g><title>check_mod_privacy (863,948 samples, 0.14%)</title><rect x="16.4640%" y="213" width="0.1352%" height="15" fill="rgb(241,131,45)"/><text x="16.7140%" y="223.50"></text></g><g><title>misc_checking_3 (3,324,714 samples, 0.52%)</title><rect x="16.0811%" y="245" width="0.5203%" height="15" fill="rgb(249,31,29)"/><text x="16.3311%" y="255.50"></text></g><g><title>impl_trait_ref (672,835 samples, 0.11%)</title><rect x="17.2698%" y="53" width="0.1053%" height="15" fill="rgb(225,111,53)"/><text x="17.5198%" y="63.50"></text></g><g><title>predicates_of (852,839 samples, 0.13%)</title><rect x="17.3801%" y="53" width="0.1335%" height="15" fill="rgb(238,160,17)"/><text x="17.6301%" y="63.50"></text></g><g><title>specializes (1,974,627 samples, 0.31%)</title><rect x="17.5136%" y="53" width="0.3090%" height="15" fill="rgb(214,148,48)"/><text x="17.7636%" y="63.50"></text></g><g><title>param_env (1,176,670 samples, 0.18%)</title><rect x="17.6384%" y="37" width="0.1841%" height="15" fill="rgb(232,36,49)"/><text x="17.8884%" y="47.50"></text></g><g><title>evaluate_obligation (6,124,321 samples, 0.96%)</title><rect x="16.8737%" y="69" width="0.9584%" height="15" fill="rgb(209,103,24)"/><text x="17.1237%" y="79.50"></text></g><g><title>eval_to_const_value_raw (6,945,571 samples, 1.09%)</title><rect x="16.7611%" y="133" width="1.0870%" height="15" fill="rgb(229,88,8)"/><text x="17.0111%" y="143.50"></text></g><g><title>eval_to_const_value_raw (6,944,621 samples, 1.09%)</title><rect x="16.7613%" y="117" width="1.0868%" height="15" fill="rgb(213,181,19)"/><text x="17.0113%" y="127.50"></text></g><g><title>eval_to_allocation_raw (6,943,491 samples, 1.09%)</title><rect x="16.7614%" y="101" width="1.0866%" height="15" fill="rgb(254,191,54)"/><text x="17.0114%" y="111.50"></text></g><g><title>typeck (6,503,406 samples, 1.02%)</title><rect x="16.8303%" y="85" width="1.0178%" height="15" fill="rgb(241,83,37)"/><text x="17.0803%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,954,561 samples, 1.09%)</title><rect x="16.7601%" y="149" width="1.0884%" height="15" fill="rgb(233,36,39)"/><text x="17.0101%" y="159.50"></text></g><g><title>eval_to_const_value_raw (7,982,301 samples, 1.25%)</title><rect x="16.6352%" y="197" width="1.2492%" height="15" fill="rgb(226,3,54)"/><text x="16.8852%" y="207.50"></text></g><g><title>eval_to_const_value_raw (7,972,681 samples, 1.25%)</title><rect x="16.6368%" y="181" width="1.2477%" height="15" fill="rgb(245,192,40)"/><text x="16.8868%" y="191.50"></text></g><g><title>eval_to_allocation_raw (7,970,701 samples, 1.25%)</title><rect x="16.6371%" y="165" width="1.2474%" height="15" fill="rgb(238,167,29)"/><text x="16.8871%" y="175.50"></text></g><g><title>impl_parent (708,698 samples, 0.11%)</title><rect x="18.0854%" y="181" width="0.1109%" height="15" fill="rgb(232,182,51)"/><text x="18.3354%" y="191.50"></text></g><g><title>impl_trait_ref (1,445,582 samples, 0.23%)</title><rect x="18.1963%" y="181" width="0.2262%" height="15" fill="rgb(231,60,39)"/><text x="18.4463%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,141,680 samples, 0.18%)</title><rect x="18.2438%" y="165" width="0.1787%" height="15" fill="rgb(208,69,12)"/><text x="18.4938%" y="175.50"></text></g><g><title>coherent_trait (11,784,510 samples, 1.84%)</title><rect x="16.6174%" y="213" width="1.8442%" height="15" fill="rgb(235,93,37)"/><text x="16.8674%" y="223.50">c..</text></g><g><title>specialization_graph_of (3,521,876 samples, 0.55%)</title><rect x="17.9104%" y="197" width="0.5512%" height="15" fill="rgb(213,116,39)"/><text x="18.1604%" y="207.50"></text></g><g><title>coherence_checking (11,863,370 samples, 1.86%)</title><rect x="16.6139%" y="229" width="1.8566%" height="15" fill="rgb(222,207,29)"/><text x="16.8639%" y="239.50">c..</text></g><g><title>mir_for_ctfe (830,478 samples, 0.13%)</title><rect x="21.1928%" y="149" width="0.1300%" height="15" fill="rgb(206,96,30)"/><text x="21.4428%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (762,818 samples, 0.12%)</title><rect x="21.2033%" y="133" width="0.1194%" height="15" fill="rgb(218,138,4)"/><text x="21.4533%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,277,242 samples, 0.20%)</title><rect x="21.1251%" y="181" width="0.1999%" height="15" fill="rgb(250,191,14)"/><text x="21.3751%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,254,862 samples, 0.20%)</title><rect x="21.1286%" y="165" width="0.1964%" height="15" fill="rgb(239,60,40)"/><text x="21.3786%" y="175.50"></text></g><g><title>evaluate_obligation (4,291,999 samples, 0.67%)</title><rect x="21.3249%" y="181" width="0.6717%" height="15" fill="rgb(206,27,48)"/><text x="21.5749%" y="191.50"></text></g><g><title>evaluate_obligation (1,950,951 samples, 0.31%)</title><rect x="24.4015%" y="165" width="0.3053%" height="15" fill="rgb(225,35,8)"/><text x="24.6515%" y="175.50"></text></g><g><title>typeck (16,588,099 samples, 2.60%)</title><rect x="22.1901%" y="181" width="2.5960%" height="15" fill="rgb(250,213,24)"/><text x="22.4401%" y="191.50">ty..</text></g><g><title>item_bodies_checking (40,376,171 samples, 6.32%)</title><rect x="18.4754%" y="229" width="6.3187%" height="15" fill="rgb(247,123,22)"/><text x="18.7254%" y="239.50">item_bod..</text></g><g><title>typeck_item_bodies (40,372,770 samples, 6.32%)</title><rect x="18.4759%" y="213" width="6.3182%" height="15" fill="rgb(231,138,38)"/><text x="18.7259%" y="223.50">typeck_i..</text></g><g><title>typeck (40,287,118 samples, 6.30%)</title><rect x="18.4893%" y="197" width="6.3048%" height="15" fill="rgb(231,145,46)"/><text x="18.7393%" y="207.50">typeck</text></g><g><title>mir_for_ctfe (877,343 samples, 0.14%)</title><rect x="25.1303%" y="133" width="0.1373%" height="15" fill="rgb(251,118,11)"/><text x="25.3803%" y="143.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (867,922 samples, 0.14%)</title><rect x="25.1317%" y="117" width="0.1358%" height="15" fill="rgb(217,147,25)"/><text x="25.3817%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,632,978 samples, 0.26%)</title><rect x="25.0167%" y="181" width="0.2556%" height="15" fill="rgb(247,81,37)"/><text x="25.2667%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,611,308 samples, 0.25%)</title><rect x="25.0200%" y="165" width="0.2522%" height="15" fill="rgb(209,12,38)"/><text x="25.2700%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,574,968 samples, 0.25%)</title><rect x="25.0257%" y="149" width="0.2465%" height="15" fill="rgb(227,1,9)"/><text x="25.2757%" y="159.50"></text></g><g><title>evaluate_obligation (2,063,211 samples, 0.32%)</title><rect x="24.9711%" y="197" width="0.3229%" height="15" fill="rgb(248,47,43)"/><text x="25.2211%" y="207.50"></text></g><g><title>item_types_checking (3,775,368 samples, 0.59%)</title><rect x="24.7941%" y="229" width="0.5908%" height="15" fill="rgb(221,10,30)"/><text x="25.0441%" y="239.50"></text></g><g><title>check_mod_item_types (3,770,038 samples, 0.59%)</title><rect x="24.7949%" y="213" width="0.5900%" height="15" fill="rgb(210,229,1)"/><text x="25.0449%" y="223.50"></text></g><g><title>type_collecting (1,817,218 samples, 0.28%)</title><rect x="25.3853%" y="229" width="0.2844%" height="15" fill="rgb(222,148,37)"/><text x="25.6353%" y="239.50"></text></g><g><title>collect_mod_item_types (1,804,858 samples, 0.28%)</title><rect x="25.3872%" y="213" width="0.2825%" height="15" fill="rgb(234,67,33)"/><text x="25.6372%" y="223.50"></text></g><g><title>check_impl_item_well_formed (3,217,358 samples, 0.50%)</title><rect x="25.6985%" y="213" width="0.5035%" height="15" fill="rgb(247,98,35)"/><text x="25.9485%" y="223.50"></text></g><g><title>mir_for_ctfe (658,288 samples, 0.10%)</title><rect x="26.4350%" y="149" width="0.1030%" height="15" fill="rgb(247,138,52)"/><text x="26.6850%" y="159.50"></text></g><g><title>eval_to_const_value_raw (753,848 samples, 0.12%)</title><rect x="26.5395%" y="133" width="0.1180%" height="15" fill="rgb(213,79,30)"/><text x="26.7895%" y="143.50"></text></g><g><title>eval_to_const_value_raw (752,688 samples, 0.12%)</title><rect x="26.5397%" y="117" width="0.1178%" height="15" fill="rgb(246,177,23)"/><text x="26.7897%" y="127.50"></text></g><g><title>eval_to_allocation_raw (750,828 samples, 0.12%)</title><rect x="26.5400%" y="101" width="0.1175%" height="15" fill="rgb(230,62,27)"/><text x="26.7900%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (765,898 samples, 0.12%)</title><rect x="26.5383%" y="149" width="0.1199%" height="15" fill="rgb(216,154,8)"/><text x="26.7883%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,017,580 samples, 0.32%)</title><rect x="26.3863%" y="197" width="0.3157%" height="15" fill="rgb(244,35,45)"/><text x="26.6363%" y="207.50"></text></g><g><title>eval_to_const_value_raw (2,008,420 samples, 0.31%)</title><rect x="26.3877%" y="181" width="0.3143%" height="15" fill="rgb(251,115,12)"/><text x="26.6377%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,995,580 samples, 0.31%)</title><rect x="26.3897%" y="165" width="0.3123%" height="15" fill="rgb(240,54,50)"/><text x="26.6397%" y="175.50"></text></g><g><title>analysis (102,024,407 samples, 15.97%)</title><rect x="10.8668%" y="261" width="15.9664%" height="15" fill="rgb(233,84,52)"/><text x="11.1168%" y="271.50">analysis</text></g><g><title>type_check_crate (65,380,394 samples, 10.23%)</title><rect x="16.6015%" y="245" width="10.2318%" height="15" fill="rgb(207,117,47)"/><text x="16.8515%" y="255.50">type_check_crate</text></g><g><title>wf_checking (7,426,096 samples, 1.16%)</title><rect x="25.6711%" y="229" width="1.1622%" height="15" fill="rgb(249,43,39)"/><text x="25.9211%" y="239.50"></text></g><g><title>check_item_well_formed (4,033,606 samples, 0.63%)</title><rect x="26.2020%" y="213" width="0.6312%" height="15" fill="rgb(209,38,44)"/><text x="26.4520%" y="223.50"></text></g><g><title>compute_debuginfo_type_name (985,780 samples, 0.15%)</title><rect x="34.9323%" y="229" width="0.1543%" height="15" fill="rgb(236,212,23)"/><text x="35.1823%" y="239.50"></text></g><g><title>const_caller_location (1,540,786 samples, 0.24%)</title><rect x="35.0866%" y="229" width="0.2411%" height="15" fill="rgb(242,79,21)"/><text x="35.3366%" y="239.50"></text></g><g><title>layout_of (742,806 samples, 0.12%)</title><rect x="35.8624%" y="213" width="0.1162%" height="15" fill="rgb(211,96,35)"/><text x="36.1124%" y="223.50"></text></g><g><title>predicates_of (961,838 samples, 0.15%)</title><rect x="36.2657%" y="197" width="0.1505%" height="15" fill="rgb(253,215,40)"/><text x="36.5157%" y="207.50"></text></g><g><title>predicates_defined_on (711,934 samples, 0.11%)</title><rect x="36.3048%" y="181" width="0.1114%" height="15" fill="rgb(211,81,21)"/><text x="36.5548%" y="191.50"></text></g><g><title>param_env (2,811,037 samples, 0.44%)</title><rect x="35.9786%" y="213" width="0.4399%" height="15" fill="rgb(208,190,38)"/><text x="36.2286%" y="223.50"></text></g><g><title>normalize_projection_ty (1,439,480 samples, 0.23%)</title><rect x="36.5250%" y="197" width="0.2253%" height="15" fill="rgb(235,213,38)"/><text x="36.7750%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,147,035 samples, 0.34%)</title><rect x="36.4185%" y="213" width="0.3360%" height="15" fill="rgb(237,122,38)"/><text x="36.6685%" y="223.50"></text></g><g><title>fn_abi_of_instance (9,127,444 samples, 1.43%)</title><rect x="35.3285%" y="229" width="1.4284%" height="15" fill="rgb(244,218,35)"/><text x="35.5785%" y="239.50"></text></g><g><title>layout_of (1,192,304 samples, 0.19%)</title><rect x="36.8155%" y="229" width="0.1866%" height="15" fill="rgb(240,68,47)"/><text x="37.0655%" y="239.50"></text></g><g><title>codegen_module (63,205,231 samples, 9.89%)</title><rect x="27.2010%" y="245" width="9.8914%" height="15" fill="rgb(210,16,53)"/><text x="27.4510%" y="255.50">codegen_module</text></g><g><title>codegen_crate (65,572,296 samples, 10.26%)</title><rect x="26.8348%" y="261" width="10.2618%" height="15" fill="rgb(235,124,12)"/><text x="27.0848%" y="271.50">codegen_crate</text></g><g><title>LLVM_module_codegen (306,152,783 samples, 47.91%)</title><rect x="37.1325%" y="245" width="47.9118%" height="15" fill="rgb(224,169,11)"/><text x="37.3825%" y="255.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (290,447,906 samples, 45.45%)</title><rect x="39.5903%" y="229" width="45.4540%" height="15" fill="rgb(250,166,2)"/><text x="39.8403%" y="239.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (324,642,848 samples, 50.81%)</title><rect x="37.0966%" y="261" width="50.8054%" height="15" fill="rgb(242,216,29)"/><text x="37.3466%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (18,260,752 samples, 2.86%)</title><rect x="85.0443%" y="245" width="2.8577%" height="15" fill="rgb(230,116,27)"/><text x="85.2943%" y="255.50">LL..</text></g><g><title>macro_expand_crate (23,793,462 samples, 3.72%)</title><rect x="88.0164%" y="245" width="3.7236%" height="15" fill="rgb(228,99,48)"/><text x="88.2664%" y="255.50">macr..</text></g><g><title>expand_crate (23,767,982 samples, 3.72%)</title><rect x="88.0204%" y="229" width="3.7196%" height="15" fill="rgb(253,11,6)"/><text x="88.2704%" y="239.50">expa..</text></g><g><title>pre_AST_expansion_lint_checks (655,426 samples, 0.10%)</title><rect x="91.6374%" y="213" width="0.1026%" height="15" fill="rgb(247,143,39)"/><text x="91.8874%" y="223.50"></text></g><g><title>late_resolve_crate (3,552,146 samples, 0.56%)</title><rect x="91.8100%" y="229" width="0.5559%" height="15" fill="rgb(236,97,10)"/><text x="92.0600%" y="239.50"></text></g><g><title>configure_and_expand (28,713,592 samples, 4.49%)</title><rect x="87.9020%" y="261" width="4.4936%" height="15" fill="rgb(233,208,19)"/><text x="88.1520%" y="271.50">confi..</text></g><g><title>resolve_crate (4,106,172 samples, 0.64%)</title><rect x="91.7530%" y="245" width="0.6426%" height="15" fill="rgb(216,164,2)"/><text x="92.0030%" y="255.50"></text></g><g><title>free_global_ctxt (7,336,704 samples, 1.15%)</title><rect x="92.4854%" y="261" width="1.1482%" height="15" fill="rgb(220,129,5)"/><text x="92.7354%" y="271.50"></text></g><g><title>item_attrs (861,761 samples, 0.13%)</title><rect x="94.2472%" y="165" width="0.1349%" height="15" fill="rgb(242,17,10)"/><text x="94.4972%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (825,948 samples, 0.13%)</title><rect x="94.2528%" y="149" width="0.1293%" height="15" fill="rgb(242,107,0)"/><text x="94.5028%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,369,724 samples, 0.21%)</title><rect x="94.2118%" y="181" width="0.2144%" height="15" fill="rgb(251,28,31)"/><text x="94.4618%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,357,032 samples, 0.21%)</title><rect x="94.7983%" y="165" width="0.2124%" height="15" fill="rgb(233,223,10)"/><text x="95.0483%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,027,631 samples, 0.32%)</title><rect x="95.0107%" y="165" width="0.3173%" height="15" fill="rgb(215,21,27)"/><text x="95.2607%" y="175.50"></text></g><g><title>optimized_mir (5,655,610 samples, 0.89%)</title><rect x="94.4734%" y="181" width="0.8851%" height="15" fill="rgb(232,23,21)"/><text x="94.7234%" y="191.50"></text></g><g><title>evaluate_obligation (828,010 samples, 0.13%)</title><rect x="96.0252%" y="149" width="0.1296%" height="15" fill="rgb(244,5,23)"/><text x="96.2752%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (4,374,635 samples, 0.68%)</title><rect x="95.5562%" y="165" width="0.6846%" height="15" fill="rgb(226,81,46)"/><text x="95.8062%" y="175.50"></text></g><g><title>specialization_graph_of (2,002,981 samples, 0.31%)</title><rect x="96.3513%" y="165" width="0.3135%" height="15" fill="rgb(247,70,30)"/><text x="96.6013%" y="175.50"></text></g><g><title>impl_trait_ref (695,868 samples, 0.11%)</title><rect x="96.5559%" y="149" width="0.1089%" height="15" fill="rgb(212,68,19)"/><text x="96.8059%" y="159.50"></text></g><g><title>resolve_instance (8,589,159 samples, 1.34%)</title><rect x="95.3585%" y="181" width="1.3442%" height="15" fill="rgb(240,187,13)"/><text x="95.6085%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (19,454,988 samples, 3.04%)</title><rect x="93.8753%" y="197" width="3.0446%" height="15" fill="rgb(223,113,26)"/><text x="94.1253%" y="207.50">mon..</text></g><g><title>monomorphization_collector (19,504,048 samples, 3.05%)</title><rect x="93.8748%" y="213" width="3.0523%" height="15" fill="rgb(206,192,2)"/><text x="94.1248%" y="223.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,039,510 samples, 0.32%)</title><rect x="96.9279%" y="197" width="0.3192%" height="15" fill="rgb(241,108,4)"/><text x="97.1779%" y="207.50"></text></g><g><title>symbol_name (1,848,620 samples, 0.29%)</title><rect x="96.9577%" y="181" width="0.2893%" height="15" fill="rgb(247,173,49)"/><text x="97.2077%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (22,403,177 samples, 3.51%)</title><rect x="93.8664%" y="229" width="3.5060%" height="15" fill="rgb(224,114,35)"/><text x="94.1164%" y="239.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,845,379 samples, 0.45%)</title><rect x="96.9271%" y="213" width="0.4453%" height="15" fill="rgb(245,159,27)"/><text x="97.1771%" y="223.50"></text></g><g><title>cgu_partitioning (801,169 samples, 0.13%)</title><rect x="97.2470%" y="197" width="0.1254%" height="15" fill="rgb(245,172,44)"/><text x="97.4970%" y="207.50"></text></g><g><title>exported_symbols (22,620,600 samples, 3.54%)</title><rect x="93.8516%" y="245" width="3.5400%" height="15" fill="rgb(236,23,11)"/><text x="94.1016%" y="255.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,788,626 samples, 0.28%)</title><rect x="97.7849%" y="229" width="0.2799%" height="15" fill="rgb(205,117,38)"/><text x="98.0349%" y="239.50"></text></g><g><title>optimized_mir (4,274,963 samples, 0.67%)</title><rect x="97.4006%" y="245" width="0.6690%" height="15" fill="rgb(237,72,25)"/><text x="97.6506%" y="255.50"></text></g><g><title>generate_crate_metadata (28,398,538 samples, 4.44%)</title><rect x="93.6335%" y="261" width="4.4443%" height="15" fill="rgb(244,70,9)"/><text x="93.8835%" y="271.50">gener..</text></g><g><title>hir_lowering (3,753,868 samples, 0.59%)</title><rect x="98.0778%" y="261" width="0.5875%" height="15" fill="rgb(217,125,39)"/><text x="98.3278%" y="271.50"></text></g><g><title>finish_ongoing_codegen (3,409,985 samples, 0.53%)</title><rect x="98.6677%" y="245" width="0.5336%" height="15" fill="rgb(235,36,10)"/><text x="98.9177%" y="255.50"></text></g><g><title>link_crate (2,461,305 samples, 0.39%)</title><rect x="99.2013%" y="245" width="0.3852%" height="15" fill="rgb(251,123,47)"/><text x="99.4513%" y="255.50"></text></g><g><title>link_binary (2,441,475 samples, 0.38%)</title><rect x="99.2044%" y="229" width="0.3821%" height="15" fill="rgb(221,13,13)"/><text x="99.4544%" y="239.50"></text></g><g><title>link_rlib (1,749,358 samples, 0.27%)</title><rect x="99.3128%" y="213" width="0.2738%" height="15" fill="rgb(238,131,9)"/><text x="99.5628%" y="223.50"></text></g><g><title>link (5,898,901 samples, 0.92%)</title><rect x="98.6653%" y="261" width="0.9232%" height="15" fill="rgb(211,50,8)"/><text x="98.9153%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (1,474,985 samples, 0.23%)</title><rect x="99.6949%" y="261" width="0.2308%" height="15" fill="rgb(245,182,24)"/><text x="99.9449%" y="271.50"></text></g><g><title>all (638,992,933 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (638,992,933 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="287.50">rustc</text></g></svg></svg>