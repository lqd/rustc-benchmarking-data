<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (60,732,668 samples, 15.41%)</title><rect x="0.1243%" y="213" width="15.4085%" height="15" fill="rgb(227,0,7)"/><text x="0.3743%" y="223.50">LLVM_passes</text></g><g><title>needs_drop_raw (440,011 samples, 0.11%)</title><rect x="17.3065%" y="101" width="0.1116%" height="15" fill="rgb(217,0,24)"/><text x="17.5565%" y="111.50"></text></g><g><title>specialization_graph_of (919,698 samples, 0.23%)</title><rect x="17.4781%" y="85" width="0.2333%" height="15" fill="rgb(221,193,54)"/><text x="17.7281%" y="95.50"></text></g><g><title>impl_trait_ref (432,744 samples, 0.11%)</title><rect x="17.6016%" y="69" width="0.1098%" height="15" fill="rgb(248,212,6)"/><text x="17.8516%" y="79.50"></text></g><g><title>resolve_instance (1,188,891 samples, 0.30%)</title><rect x="17.4182%" y="101" width="0.3016%" height="15" fill="rgb(208,68,35)"/><text x="17.6682%" y="111.50"></text></g><g><title>mir_const (3,739,700 samples, 0.95%)</title><rect x="16.8712%" y="149" width="0.9488%" height="15" fill="rgb(232,128,0)"/><text x="17.1212%" y="159.50"></text></g><g><title>unsafety_check_result (3,321,133 samples, 0.84%)</title><rect x="16.9774%" y="133" width="0.8426%" height="15" fill="rgb(207,160,47)"/><text x="17.2274%" y="143.50"></text></g><g><title>mir_built (2,983,151 samples, 0.76%)</title><rect x="17.0632%" y="117" width="0.7569%" height="15" fill="rgb(228,23,34)"/><text x="17.3132%" y="127.50"></text></g><g><title>mir_promoted (4,162,532 samples, 1.06%)</title><rect x="16.7918%" y="165" width="1.0561%" height="15" fill="rgb(218,30,26)"/><text x="17.0418%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (662,846 samples, 0.17%)</title><rect x="17.8798%" y="165" width="0.1682%" height="15" fill="rgb(220,122,19)"/><text x="18.1298%" y="175.50"></text></g><g><title>normalize_projection_ty (418,224 samples, 0.11%)</title><rect x="17.9418%" y="149" width="0.1061%" height="15" fill="rgb(250,228,42)"/><text x="18.1918%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,067,248 samples, 0.52%)</title><rect x="18.1147%" y="165" width="0.5245%" height="15" fill="rgb(240,193,28)"/><text x="18.3647%" y="175.50"></text></g><g><title>MIR_borrow_checking (12,072,743 samples, 3.06%)</title><rect x="15.5773%" y="197" width="3.0630%" height="15" fill="rgb(216,20,37)"/><text x="15.8273%" y="207.50">MIR..</text></g><g><title>mir_borrowck (12,041,683 samples, 3.06%)</title><rect x="15.5852%" y="181" width="3.0551%" height="15" fill="rgb(206,188,39)"/><text x="15.8352%" y="191.50">mir..</text></g><g><title>misc_checking_1 (840,008 samples, 0.21%)</title><rect x="18.7135%" y="197" width="0.2131%" height="15" fill="rgb(217,207,13)"/><text x="18.9635%" y="207.50"></text></g><g><title>misc_checking_2 (459,635 samples, 0.12%)</title><rect x="18.9267%" y="197" width="0.1166%" height="15" fill="rgb(231,73,38)"/><text x="19.1767%" y="207.50"></text></g><g><title>crate_lints (2,155,712 samples, 0.55%)</title><rect x="19.1289%" y="165" width="0.5469%" height="15" fill="rgb(225,20,46)"/><text x="19.3789%" y="175.50"></text></g><g><title>type_of (1,049,156 samples, 0.27%)</title><rect x="19.4097%" y="149" width="0.2662%" height="15" fill="rgb(210,31,41)"/><text x="19.6597%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (803,105 samples, 0.20%)</title><rect x="19.4721%" y="133" width="0.2038%" height="15" fill="rgb(221,200,47)"/><text x="19.7221%" y="143.50"></text></g><g><title>lint_checking (2,419,344 samples, 0.61%)</title><rect x="19.1285%" y="181" width="0.6138%" height="15" fill="rgb(226,26,5)"/><text x="19.3785%" y="191.50"></text></g><g><title>privacy_checking_modules (472,475 samples, 0.12%)</title><rect x="19.7822%" y="181" width="0.1199%" height="15" fill="rgb(249,33,26)"/><text x="20.0322%" y="191.50"></text></g><g><title>check_mod_privacy (468,145 samples, 0.12%)</title><rect x="19.7833%" y="165" width="0.1188%" height="15" fill="rgb(235,183,28)"/><text x="20.0333%" y="175.50"></text></g><g><title>misc_checking_3 (3,396,895 samples, 0.86%)</title><rect x="19.0433%" y="197" width="0.8618%" height="15" fill="rgb(221,5,38)"/><text x="19.2933%" y="207.50"></text></g><g><title>impl_parent (811,578 samples, 0.21%)</title><rect x="20.1816%" y="133" width="0.2059%" height="15" fill="rgb(247,18,42)"/><text x="20.4316%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (553,265 samples, 0.14%)</title><rect x="20.2472%" y="117" width="0.1404%" height="15" fill="rgb(241,131,45)"/><text x="20.4972%" y="127.50"></text></g><g><title>impl_trait_ref (2,784,350 samples, 0.71%)</title><rect x="20.3876%" y="133" width="0.7064%" height="15" fill="rgb(249,31,29)"/><text x="20.6376%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,523,996 samples, 0.64%)</title><rect x="20.4536%" y="117" width="0.6404%" height="15" fill="rgb(225,111,53)"/><text x="20.7036%" y="127.50"></text></g><g><title>coherent_trait (4,816,529 samples, 1.22%)</title><rect x="19.9205%" y="165" width="1.2220%" height="15" fill="rgb(238,160,17)"/><text x="20.1705%" y="175.50"></text></g><g><title>specialization_graph_of (4,811,479 samples, 1.22%)</title><rect x="19.9218%" y="149" width="1.2207%" height="15" fill="rgb(214,148,48)"/><text x="20.1718%" y="159.50"></text></g><g><title>coherence_checking (4,859,900 samples, 1.23%)</title><rect x="19.9178%" y="181" width="1.2330%" height="15" fill="rgb(232,36,49)"/><text x="20.1678%" y="191.50"></text></g><g><title>trait_impls_of (418,325 samples, 0.11%)</title><rect x="23.9699%" y="117" width="0.1061%" height="15" fill="rgb(209,103,24)"/><text x="24.2199%" y="127.50"></text></g><g><title>evaluate_obligation (3,031,060 samples, 0.77%)</title><rect x="23.3096%" y="133" width="0.7690%" height="15" fill="rgb(229,88,8)"/><text x="23.5596%" y="143.50"></text></g><g><title>evaluate_obligation (598,458 samples, 0.15%)</title><rect x="25.2733%" y="117" width="0.1518%" height="15" fill="rgb(213,181,19)"/><text x="25.5233%" y="127.50"></text></g><g><title>typeck (4,604,926 samples, 1.17%)</title><rect x="24.4310%" y="133" width="1.1683%" height="15" fill="rgb(254,191,54)"/><text x="24.6810%" y="143.50"></text></g><g><title>item_bodies_checking (17,538,538 samples, 4.45%)</title><rect x="21.1557%" y="181" width="4.4497%" height="15" fill="rgb(241,83,37)"/><text x="21.4057%" y="191.50">item_..</text></g><g><title>typeck_item_bodies (17,534,758 samples, 4.45%)</title><rect x="21.1566%" y="165" width="4.4488%" height="15" fill="rgb(233,36,39)"/><text x="21.4066%" y="175.50">typec..</text></g><g><title>typeck (17,510,437 samples, 4.44%)</title><rect x="21.1628%" y="149" width="4.4426%" height="15" fill="rgb(226,3,54)"/><text x="21.4128%" y="159.50">typeck</text></g><g><title>mir_borrowck (1,942,520 samples, 0.49%)</title><rect x="25.8929%" y="117" width="0.4928%" height="15" fill="rgb(245,192,40)"/><text x="26.1429%" y="127.50"></text></g><g><title>dropck_outlives (438,456 samples, 0.11%)</title><rect x="27.2076%" y="37" width="0.1112%" height="15" fill="rgb(238,167,29)"/><text x="27.4576%" y="47.50"></text></g><g><title>evaluate_obligation (397,512 samples, 0.10%)</title><rect x="27.3189%" y="37" width="0.1009%" height="15" fill="rgb(232,182,51)"/><text x="27.5689%" y="47.50"></text></g><g><title>mir_built (4,713,057 samples, 1.20%)</title><rect x="26.4326%" y="69" width="1.1958%" height="15" fill="rgb(231,60,39)"/><text x="26.6826%" y="79.50"></text></g><g><title>typeck (4,512,116 samples, 1.14%)</title><rect x="26.4836%" y="53" width="1.1448%" height="15" fill="rgb(208,69,12)"/><text x="26.7336%" y="63.50"></text></g><g><title>mir_built (672,847 samples, 0.17%)</title><rect x="27.6592%" y="53" width="0.1707%" height="15" fill="rgb(235,93,37)"/><text x="27.9092%" y="63.50"></text></g><g><title>mir_const (5,603,996 samples, 1.42%)</title><rect x="26.4084%" y="101" width="1.4218%" height="15" fill="rgb(213,116,39)"/><text x="26.6584%" y="111.50"></text></g><g><title>unsafety_check_result (5,534,226 samples, 1.40%)</title><rect x="26.4261%" y="85" width="1.4041%" height="15" fill="rgb(222,207,29)"/><text x="26.6761%" y="95.50"></text></g><g><title>unsafety_check_result (795,289 samples, 0.20%)</title><rect x="27.6284%" y="69" width="0.2018%" height="15" fill="rgb(206,96,30)"/><text x="27.8784%" y="79.50"></text></g><g><title>mir_promoted (5,701,437 samples, 1.45%)</title><rect x="26.3858%" y="117" width="1.4465%" height="15" fill="rgb(218,138,4)"/><text x="26.6358%" y="127.50"></text></g><g><title>item_types_checking (8,871,311 samples, 2.25%)</title><rect x="25.6054%" y="181" width="2.2507%" height="15" fill="rgb(250,191,14)"/><text x="25.8554%" y="191.50">i..</text></g><g><title>check_mod_item_types (8,865,731 samples, 2.25%)</title><rect x="25.6068%" y="165" width="2.2493%" height="15" fill="rgb(239,60,40)"/><text x="25.8568%" y="175.50">c..</text></g><g><title>type_of (8,442,655 samples, 2.14%)</title><rect x="25.7141%" y="149" width="2.1420%" height="15" fill="rgb(206,27,48)"/><text x="25.9641%" y="159.50">t..</text></g><g><title>mir_borrowck (8,433,655 samples, 2.14%)</title><rect x="25.7164%" y="133" width="2.1397%" height="15" fill="rgb(225,35,8)"/><text x="25.9664%" y="143.50">m..</text></g><g><title>predicates_of (429,293 samples, 0.11%)</title><rect x="28.0209%" y="149" width="0.1089%" height="15" fill="rgb(250,213,24)"/><text x="28.2709%" y="159.50"></text></g><g><title>predicates_defined_on (414,193 samples, 0.11%)</title><rect x="28.0247%" y="133" width="0.1051%" height="15" fill="rgb(247,123,22)"/><text x="28.2747%" y="143.50"></text></g><g><title>type_collecting (1,158,812 samples, 0.29%)</title><rect x="27.8568%" y="181" width="0.2940%" height="15" fill="rgb(231,138,38)"/><text x="28.1068%" y="191.50"></text></g><g><title>collect_mod_item_types (1,143,842 samples, 0.29%)</title><rect x="27.8606%" y="165" width="0.2902%" height="15" fill="rgb(231,145,46)"/><text x="28.1106%" y="175.50"></text></g><g><title>trait_impls_of (461,246 samples, 0.12%)</title><rect x="28.8138%" y="149" width="0.1170%" height="15" fill="rgb(251,118,11)"/><text x="29.0638%" y="159.50"></text></g><g><title>check_item_well_formed (2,724,269 samples, 0.69%)</title><rect x="28.2524%" y="165" width="0.6912%" height="15" fill="rgb(217,147,25)"/><text x="28.5024%" y="175.50"></text></g><g><title>analysis (52,999,329 samples, 13.45%)</title><rect x="15.5328%" y="213" width="13.4465%" height="15" fill="rgb(247,81,37)"/><text x="15.7828%" y="223.50">analysis</text></g><g><title>type_check_crate (35,765,884 samples, 9.07%)</title><rect x="19.9051%" y="197" width="9.0742%" height="15" fill="rgb(209,12,38)"/><text x="20.1551%" y="207.50">type_check_cr..</text></g><g><title>wf_checking (3,263,273 samples, 0.83%)</title><rect x="28.1514%" y="181" width="0.8279%" height="15" fill="rgb(227,1,9)"/><text x="28.4014%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (815,155 samples, 0.21%)</title><rect x="39.8203%" y="181" width="0.2068%" height="15" fill="rgb(248,47,43)"/><text x="40.0703%" y="191.50"></text></g><g><title>const_caller_location (614,927 samples, 0.16%)</title><rect x="40.0271%" y="181" width="0.1560%" height="15" fill="rgb(221,10,30)"/><text x="40.2771%" y="191.50"></text></g><g><title>item_attrs (586,175 samples, 0.15%)</title><rect x="40.8072%" y="149" width="0.1487%" height="15" fill="rgb(210,229,1)"/><text x="41.0572%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (563,955 samples, 0.14%)</title><rect x="40.8129%" y="133" width="0.1431%" height="15" fill="rgb(222,148,37)"/><text x="41.0629%" y="143.50"></text></g><g><title>codegen_fn_attrs (847,038 samples, 0.21%)</title><rect x="40.7596%" y="165" width="0.2149%" height="15" fill="rgb(234,67,33)"/><text x="41.0096%" y="175.50"></text></g><g><title>layout_of (952,089 samples, 0.24%)</title><rect x="41.0007%" y="165" width="0.2416%" height="15" fill="rgb(247,98,35)"/><text x="41.2507%" y="175.50"></text></g><g><title>explicit_predicates_of (425,172 samples, 0.11%)</title><rect x="42.0958%" y="117" width="0.1079%" height="15" fill="rgb(247,138,52)"/><text x="42.3458%" y="127.50"></text></g><g><title>predicates_of (1,390,661 samples, 0.35%)</title><rect x="41.8809%" y="149" width="0.3528%" height="15" fill="rgb(213,79,30)"/><text x="42.1309%" y="159.50"></text></g><g><title>predicates_defined_on (792,074 samples, 0.20%)</title><rect x="42.0327%" y="133" width="0.2010%" height="15" fill="rgb(246,177,23)"/><text x="42.2827%" y="143.50"></text></g><g><title>param_env (3,924,223 samples, 1.00%)</title><rect x="41.2423%" y="165" width="0.9956%" height="15" fill="rgb(230,62,27)"/><text x="41.4923%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (748,468 samples, 0.19%)</title><rect x="42.2379%" y="165" width="0.1899%" height="15" fill="rgb(216,154,8)"/><text x="42.4879%" y="175.50"></text></g><g><title>normalize_projection_ty (570,166 samples, 0.14%)</title><rect x="42.2831%" y="149" width="0.1447%" height="15" fill="rgb(244,35,45)"/><text x="42.5331%" y="159.50"></text></g><g><title>fn_abi_of_instance (8,856,731 samples, 2.25%)</title><rect x="40.1909%" y="181" width="2.2470%" height="15" fill="rgb(251,115,12)"/><text x="40.4409%" y="191.50">f..</text></g><g><title>layout_of (1,160,885 samples, 0.29%)</title><rect x="42.5490%" y="181" width="0.2945%" height="15" fill="rgb(240,54,50)"/><text x="42.7990%" y="191.50"></text></g><g><title>symbol_name (891,229 samples, 0.23%)</title><rect x="42.8485%" y="181" width="0.2261%" height="15" fill="rgb(233,84,52)"/><text x="43.0985%" y="191.50"></text></g><g><title>codegen_module (53,280,160 samples, 13.52%)</title><rect x="29.5878%" y="197" width="13.5177%" height="15" fill="rgb(207,117,47)"/><text x="29.8378%" y="207.50">codegen_module</text></g><g><title>codegen_crate (55,755,277 samples, 14.15%)</title><rect x="28.9809%" y="213" width="14.1457%" height="15" fill="rgb(249,43,39)"/><text x="29.2309%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (158,380,742 samples, 40.18%)</title><rect x="43.1684%" y="197" width="40.1829%" height="15" fill="rgb(209,38,44)"/><text x="43.4184%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (151,157,880 samples, 38.35%)</title><rect x="45.0009%" y="181" width="38.3504%" height="15" fill="rgb(236,212,23)"/><text x="45.2509%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (169,299,501 samples, 42.95%)</title><rect x="43.1266%" y="213" width="42.9531%" height="15" fill="rgb(242,79,21)"/><text x="43.3766%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,753,969 samples, 2.73%)</title><rect x="83.3513%" y="197" width="2.7284%" height="15" fill="rgb(211,96,35)"/><text x="83.6013%" y="207.50">LL..</text></g><g><title>metadata_register_crate (1,388,704 samples, 0.35%)</title><rect x="88.3747%" y="165" width="0.3523%" height="15" fill="rgb(253,215,40)"/><text x="88.6247%" y="175.50"></text></g><g><title>metadata_register_crate (487,026 samples, 0.12%)</title><rect x="88.6035%" y="149" width="0.1236%" height="15" fill="rgb(211,81,21)"/><text x="88.8535%" y="159.50"></text></g><g><title>macro_expand_crate (10,269,405 samples, 2.61%)</title><rect x="86.1627%" y="197" width="2.6055%" height="15" fill="rgb(208,190,38)"/><text x="86.4127%" y="207.50">ma..</text></g><g><title>expand_crate (10,252,825 samples, 2.60%)</title><rect x="86.1669%" y="181" width="2.6013%" height="15" fill="rgb(235,213,38)"/><text x="86.4169%" y="191.50">ex..</text></g><g><title>late_resolve_crate (935,569 samples, 0.24%)</title><rect x="88.8392%" y="181" width="0.2374%" height="15" fill="rgb(237,122,38)"/><text x="89.0892%" y="191.50"></text></g><g><title>configure_and_expand (11,886,751 samples, 3.02%)</title><rect x="86.0797%" y="213" width="3.0158%" height="15" fill="rgb(244,218,35)"/><text x="86.3297%" y="223.50">con..</text></g><g><title>resolve_crate (1,223,782 samples, 0.31%)</title><rect x="88.7850%" y="197" width="0.3105%" height="15" fill="rgb(240,68,47)"/><text x="89.0350%" y="207.50"></text></g><g><title>free_global_ctxt (4,373,485 samples, 1.11%)</title><rect x="89.1696%" y="213" width="1.1096%" height="15" fill="rgb(210,16,53)"/><text x="89.4196%" y="223.50"></text></g><g><title>item_attrs (1,133,624 samples, 0.29%)</title><rect x="91.1455%" y="117" width="0.2876%" height="15" fill="rgb(235,124,12)"/><text x="91.3955%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,096,503 samples, 0.28%)</title><rect x="91.1549%" y="101" width="0.2782%" height="15" fill="rgb(224,169,11)"/><text x="91.4049%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,746,439 samples, 0.44%)</title><rect x="91.0880%" y="133" width="0.4431%" height="15" fill="rgb(250,166,2)"/><text x="91.3380%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,706,858 samples, 0.43%)</title><rect x="91.8816%" y="117" width="0.4330%" height="15" fill="rgb(242,216,29)"/><text x="92.1316%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (522,445 samples, 0.13%)</title><rect x="92.3146%" y="117" width="0.1325%" height="15" fill="rgb(230,116,27)"/><text x="92.5646%" y="127.50"></text></g><g><title>optimized_mir (3,326,402 samples, 0.84%)</title><rect x="91.6832%" y="133" width="0.8439%" height="15" fill="rgb(228,99,48)"/><text x="91.9332%" y="143.50"></text></g><g><title>evaluate_obligation (613,149 samples, 0.16%)</title><rect x="93.3703%" y="101" width="0.1556%" height="15" fill="rgb(253,11,6)"/><text x="93.6203%" y="111.50"></text></g><g><title>trait_impls_of (402,016 samples, 0.10%)</title><rect x="93.6486%" y="101" width="0.1020%" height="15" fill="rgb(247,143,39)"/><text x="93.8986%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,108,924 samples, 1.04%)</title><rect x="92.7084%" y="117" width="1.0425%" height="15" fill="rgb(236,97,10)"/><text x="92.9584%" y="127.50"></text></g><g><title>impl_parent (948,805 samples, 0.24%)</title><rect x="94.3342%" y="101" width="0.2407%" height="15" fill="rgb(233,208,19)"/><text x="94.5842%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (579,372 samples, 0.15%)</title><rect x="94.4280%" y="85" width="0.1470%" height="15" fill="rgb(216,164,2)"/><text x="94.6780%" y="95.50"></text></g><g><title>specialization_graph_of (4,337,224 samples, 1.10%)</title><rect x="93.9182%" y="117" width="1.1004%" height="15" fill="rgb(220,129,5)"/><text x="94.1682%" y="127.50"></text></g><g><title>impl_trait_ref (1,748,685 samples, 0.44%)</title><rect x="94.5750%" y="101" width="0.4437%" height="15" fill="rgb(242,17,10)"/><text x="94.8250%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,388,282 samples, 0.35%)</title><rect x="94.6664%" y="85" width="0.3522%" height="15" fill="rgb(242,107,0)"/><text x="94.9164%" y="95.50"></text></g><g><title>resolve_instance (10,143,063 samples, 2.57%)</title><rect x="92.5272%" y="133" width="2.5734%" height="15" fill="rgb(251,28,31)"/><text x="92.7772%" y="143.50">re..</text></g><g><title>eval_to_const_value_raw (759,847 samples, 0.19%)</title><rect x="95.2073%" y="117" width="0.1928%" height="15" fill="rgb(233,223,10)"/><text x="95.4573%" y="127.50"></text></g><g><title>eval_to_const_value_raw (736,617 samples, 0.19%)</title><rect x="95.2132%" y="101" width="0.1869%" height="15" fill="rgb(215,21,27)"/><text x="95.4632%" y="111.50"></text></g><g><title>eval_to_allocation_raw (714,547 samples, 0.18%)</title><rect x="95.2188%" y="85" width="0.1813%" height="15" fill="rgb(232,23,21)"/><text x="95.4688%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (893,557 samples, 0.23%)</title><rect x="95.1792%" y="133" width="0.2267%" height="15" fill="rgb(244,5,23)"/><text x="95.4292%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (19,416,988 samples, 4.93%)</title><rect x="90.5775%" y="149" width="4.9263%" height="15" fill="rgb(226,81,46)"/><text x="90.8275%" y="159.50">monomo..</text></g><g><title>monomorphization_collector (19,446,118 samples, 4.93%)</title><rect x="90.5767%" y="165" width="4.9337%" height="15" fill="rgb(247,70,30)"/><text x="90.8267%" y="175.50">monomo..</text></g><g><title>assert_symbols_are_distinct (1,311,003 samples, 0.33%)</title><rect x="95.5115%" y="149" width="0.3326%" height="15" fill="rgb(212,68,19)"/><text x="95.7615%" y="159.50"></text></g><g><title>symbol_name (1,204,303 samples, 0.31%)</title><rect x="95.5386%" y="133" width="0.3055%" height="15" fill="rgb(240,187,13)"/><text x="95.7886%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (21,369,467 samples, 5.42%)</title><rect x="90.5667%" y="181" width="5.4217%" height="15" fill="rgb(223,113,26)"/><text x="90.8167%" y="191.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (1,883,819 samples, 0.48%)</title><rect x="95.5104%" y="165" width="0.4779%" height="15" fill="rgb(206,192,2)"/><text x="95.7604%" y="175.50"></text></g><g><title>cgu_partitioning (568,416 samples, 0.14%)</title><rect x="95.8441%" y="149" width="0.1442%" height="15" fill="rgb(241,108,4)"/><text x="96.0941%" y="159.50"></text></g><g><title>exported_symbols (21,488,629 samples, 5.45%)</title><rect x="90.5504%" y="197" width="5.4519%" height="15" fill="rgb(247,173,49)"/><text x="90.8004%" y="207.50">exporte..</text></g><g><title>layout_of (549,827 samples, 0.14%)</title><rect x="96.2823%" y="181" width="0.1395%" height="15" fill="rgb(224,114,35)"/><text x="96.5323%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,700,125 samples, 0.43%)</title><rect x="96.4218%" y="181" width="0.4313%" height="15" fill="rgb(245,159,27)"/><text x="96.6718%" y="191.50"></text></g><g><title>specialization_graph_of (436,625 samples, 0.11%)</title><rect x="96.8753%" y="165" width="0.1108%" height="15" fill="rgb(245,172,44)"/><text x="97.1253%" y="175.50"></text></g><g><title>optimized_mir (3,808,586 samples, 0.97%)</title><rect x="96.0210%" y="197" width="0.9663%" height="15" fill="rgb(236,23,11)"/><text x="96.2710%" y="207.50"></text></g><g><title>resolve_instance (514,526 samples, 0.13%)</title><rect x="96.8568%" y="181" width="0.1305%" height="15" fill="rgb(205,117,38)"/><text x="97.1068%" y="191.50"></text></g><g><title>generate_crate_metadata (26,524,100 samples, 6.73%)</title><rect x="90.2792%" y="213" width="6.7294%" height="15" fill="rgb(237,72,25)"/><text x="90.5292%" y="223.50">generate_..</text></g><g><title>hir_lowering (1,637,787 samples, 0.42%)</title><rect x="97.0086%" y="213" width="0.4155%" height="15" fill="rgb(244,70,9)"/><text x="97.2586%" y="223.50"></text></g><g><title>finish_ongoing_codegen (6,224,774 samples, 1.58%)</title><rect x="97.4279%" y="197" width="1.5793%" height="15" fill="rgb(217,125,39)"/><text x="97.6779%" y="207.50"></text></g><g><title>link_crate (1,986,670 samples, 0.50%)</title><rect x="99.0072%" y="197" width="0.5040%" height="15" fill="rgb(235,36,10)"/><text x="99.2572%" y="207.50"></text></g><g><title>link_binary (1,946,630 samples, 0.49%)</title><rect x="99.0174%" y="181" width="0.4939%" height="15" fill="rgb(251,123,47)"/><text x="99.2674%" y="191.50"></text></g><g><title>link_rlib (1,314,113 samples, 0.33%)</title><rect x="99.1778%" y="165" width="0.3334%" height="15" fill="rgb(221,13,13)"/><text x="99.4278%" y="175.50"></text></g><g><title>link (8,239,264 samples, 2.09%)</title><rect x="97.4241%" y="213" width="2.0904%" height="15" fill="rgb(238,131,9)"/><text x="97.6741%" y="223.50">l..</text></g><g><title>self_profile_alloc_query_strings (1,068,991 samples, 0.27%)</title><rect x="99.6205%" y="213" width="0.2712%" height="15" fill="rgb(211,50,8)"/><text x="99.8705%" y="223.50"></text></g><g><title>all (394,149,729 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (394,149,729 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>