<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,230,245 samples, 7.86%)</title><rect x="0.4051%" y="261" width="7.8588%" height="15" fill="rgb(227,0,7)"/><text x="0.6551%" y="271.50">LLVM_passes</text></g><g><title>is_copy_raw (203,351 samples, 0.10%)</title><rect x="12.7648%" y="149" width="0.1049%" height="15" fill="rgb(217,0,24)"/><text x="13.0148%" y="159.50"></text></g><g><title>is_copy_raw (369,713 samples, 0.19%)</title><rect x="12.8903%" y="133" width="0.1908%" height="15" fill="rgb(221,193,54)"/><text x="13.1403%" y="143.50"></text></g><g><title>evaluate_obligation (305,383 samples, 0.16%)</title><rect x="12.9235%" y="117" width="0.1576%" height="15" fill="rgb(248,212,6)"/><text x="13.1735%" y="127.50"></text></g><g><title>needs_drop_raw (411,553 samples, 0.21%)</title><rect x="12.8708%" y="149" width="0.2124%" height="15" fill="rgb(208,68,35)"/><text x="13.1208%" y="159.50"></text></g><g><title>specialization_graph_of (359,873 samples, 0.19%)</title><rect x="13.2217%" y="133" width="0.1857%" height="15" fill="rgb(232,128,0)"/><text x="13.4717%" y="143.50"></text></g><g><title>resolve_instance (665,119 samples, 0.34%)</title><rect x="13.0832%" y="149" width="0.3432%" height="15" fill="rgb(207,160,47)"/><text x="13.3332%" y="159.50"></text></g><g><title>thir_body (676,016 samples, 0.35%)</title><rect x="13.4316%" y="149" width="0.3488%" height="15" fill="rgb(228,23,34)"/><text x="13.6816%" y="159.50"></text></g><g><title>mir_const (4,463,598 samples, 2.30%)</title><rect x="11.4803%" y="197" width="2.3032%" height="15" fill="rgb(218,30,26)"/><text x="11.7303%" y="207.50">m..</text></g><g><title>unsafety_check_result (3,901,881 samples, 2.01%)</title><rect x="11.7702%" y="181" width="2.0134%" height="15" fill="rgb(220,122,19)"/><text x="12.0202%" y="191.50">u..</text></g><g><title>mir_built (3,490,127 samples, 1.80%)</title><rect x="11.9826%" y="165" width="1.8009%" height="15" fill="rgb(250,228,42)"/><text x="12.2326%" y="175.50">m..</text></g><g><title>mir_promoted (4,934,272 samples, 2.55%)</title><rect x="11.2833%" y="213" width="2.5461%" height="15" fill="rgb(240,193,28)"/><text x="11.5333%" y="223.50">mi..</text></g><g><title>type_op_normalize_fn_sig (234,353 samples, 0.12%)</title><rect x="13.8950%" y="213" width="0.1209%" height="15" fill="rgb(216,20,37)"/><text x="14.1450%" y="223.50"></text></g><g><title>type_op_prove_predicate (588,867 samples, 0.30%)</title><rect x="14.0323%" y="213" width="0.3039%" height="15" fill="rgb(206,188,39)"/><text x="14.2823%" y="223.50"></text></g><g><title>MIR_borrow_checking (11,359,965 samples, 5.86%)</title><rect x="8.4763%" y="245" width="5.8617%" height="15" fill="rgb(217,207,13)"/><text x="8.7263%" y="255.50">MIR_bor..</text></g><g><title>mir_borrowck (11,298,855 samples, 5.83%)</title><rect x="8.5078%" y="229" width="5.8302%" height="15" fill="rgb(231,73,38)"/><text x="8.7578%" y="239.50">mir_bor..</text></g><g><title>hir_module_items (243,063 samples, 0.13%)</title><rect x="14.3872%" y="245" width="0.1254%" height="15" fill="rgb(225,20,46)"/><text x="14.6372%" y="255.50"></text></g><g><title>should_inherit_track_caller (315,034 samples, 0.16%)</title><rect x="14.8321%" y="197" width="0.1626%" height="15" fill="rgb(210,31,41)"/><text x="15.0821%" y="207.50"></text></g><g><title>codegen_fn_attrs (571,578 samples, 0.29%)</title><rect x="14.7174%" y="213" width="0.2949%" height="15" fill="rgb(221,200,47)"/><text x="14.9674%" y="223.50"></text></g><g><title>check_mod_attrs (933,909 samples, 0.48%)</title><rect x="14.5306%" y="229" width="0.4819%" height="15" fill="rgb(226,26,5)"/><text x="14.7806%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (502,165 samples, 0.26%)</title><rect x="15.1417%" y="229" width="0.2591%" height="15" fill="rgb(249,33,26)"/><text x="15.3917%" y="239.50"></text></g><g><title>misc_checking_1 (1,788,568 samples, 0.92%)</title><rect x="14.5128%" y="245" width="0.9229%" height="15" fill="rgb(235,183,28)"/><text x="14.7628%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (282,333 samples, 0.15%)</title><rect x="15.4364%" y="229" width="0.1457%" height="15" fill="rgb(221,5,38)"/><text x="15.6864%" y="239.50"></text></g><g><title>check_mod_liveness (220,752 samples, 0.11%)</title><rect x="15.4682%" y="213" width="0.1139%" height="15" fill="rgb(247,18,42)"/><text x="15.7182%" y="223.50"></text></g><g><title>misc_checking_2 (550,306 samples, 0.28%)</title><rect x="15.4357%" y="245" width="0.2840%" height="15" fill="rgb(241,131,45)"/><text x="15.6857%" y="255.50"></text></g><g><title>match_checking (266,563 samples, 0.14%)</title><rect x="15.5821%" y="229" width="0.1375%" height="15" fill="rgb(249,31,29)"/><text x="15.8321%" y="239.50"></text></g><g><title>check_match (247,412 samples, 0.13%)</title><rect x="15.5920%" y="213" width="0.1277%" height="15" fill="rgb(225,111,53)"/><text x="15.8420%" y="223.50"></text></g><g><title>death_checking (306,413 samples, 0.16%)</title><rect x="15.7847%" y="229" width="0.1581%" height="15" fill="rgb(238,160,17)"/><text x="16.0347%" y="239.50"></text></g><g><title>crate_lints (959,810 samples, 0.50%)</title><rect x="15.9436%" y="213" width="0.4953%" height="15" fill="rgb(214,148,48)"/><text x="16.1936%" y="223.50"></text></g><g><title>type_of (328,754 samples, 0.17%)</title><rect x="16.2692%" y="197" width="0.1696%" height="15" fill="rgb(232,36,49)"/><text x="16.5192%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (251,273 samples, 0.13%)</title><rect x="16.3092%" y="181" width="0.1297%" height="15" fill="rgb(209,103,24)"/><text x="16.5592%" y="191.50"></text></g><g><title>lint_checking (1,206,543 samples, 0.62%)</title><rect x="15.9428%" y="229" width="0.6226%" height="15" fill="rgb(229,88,8)"/><text x="16.1928%" y="239.50"></text></g><g><title>module_lints (245,233 samples, 0.13%)</title><rect x="16.4388%" y="213" width="0.1265%" height="15" fill="rgb(213,181,19)"/><text x="16.6888%" y="223.50"></text></g><g><title>lint_mod (242,533 samples, 0.13%)</title><rect x="16.4402%" y="197" width="0.1251%" height="15" fill="rgb(254,191,54)"/><text x="16.6902%" y="207.50"></text></g><g><title>privacy_checking_modules (368,663 samples, 0.19%)</title><rect x="16.6297%" y="229" width="0.1902%" height="15" fill="rgb(241,83,37)"/><text x="16.8797%" y="239.50"></text></g><g><title>check_mod_privacy (366,503 samples, 0.19%)</title><rect x="16.6308%" y="213" width="0.1891%" height="15" fill="rgb(233,36,39)"/><text x="16.8808%" y="223.50"></text></g><g><title>misc_checking_3 (2,143,131 samples, 1.11%)</title><rect x="15.7197%" y="245" width="1.1059%" height="15" fill="rgb(226,3,54)"/><text x="15.9697%" y="255.50"></text></g><g><title>impl_parent (758,469 samples, 0.39%)</title><rect x="17.5240%" y="181" width="0.3914%" height="15" fill="rgb(245,192,40)"/><text x="17.7740%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (435,823 samples, 0.22%)</title><rect x="17.6905%" y="165" width="0.2249%" height="15" fill="rgb(238,167,29)"/><text x="17.9405%" y="175.50"></text></g><g><title>impl_trait_ref (1,552,773 samples, 0.80%)</title><rect x="17.9153%" y="181" width="0.8012%" height="15" fill="rgb(232,182,51)"/><text x="18.1653%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,222,561 samples, 0.63%)</title><rect x="18.0857%" y="165" width="0.6308%" height="15" fill="rgb(231,60,39)"/><text x="18.3357%" y="175.50"></text></g><g><title>trait_impls_of (266,911 samples, 0.14%)</title><rect x="18.7239%" y="181" width="0.1377%" height="15" fill="rgb(208,69,12)"/><text x="18.9739%" y="191.50"></text></g><g><title>coherent_trait (3,876,210 samples, 2.00%)</title><rect x="16.8619%" y="213" width="2.0001%" height="15" fill="rgb(235,93,37)"/><text x="17.1119%" y="223.50">c..</text></g><g><title>specialization_graph_of (3,862,550 samples, 1.99%)</title><rect x="16.8689%" y="197" width="1.9931%" height="15" fill="rgb(213,116,39)"/><text x="17.1189%" y="207.50">s..</text></g><g><title>coherence_checking (3,922,900 samples, 2.02%)</title><rect x="16.8531%" y="229" width="2.0242%" height="15" fill="rgb(222,207,29)"/><text x="17.1031%" y="239.50">c..</text></g><g><title>associated_item (487,193 samples, 0.25%)</title><rect x="26.1335%" y="165" width="0.2514%" height="15" fill="rgb(206,96,30)"/><text x="26.3835%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (400,622 samples, 0.21%)</title><rect x="26.1782%" y="149" width="0.2067%" height="15" fill="rgb(218,138,4)"/><text x="26.4282%" y="159.50"></text></g><g><title>associated_items (668,465 samples, 0.34%)</title><rect x="26.0527%" y="181" width="0.3449%" height="15" fill="rgb(250,191,14)"/><text x="26.3027%" y="191.50"></text></g><g><title>mir_borrowck (218,142 samples, 0.11%)</title><rect x="26.7268%" y="101" width="0.1126%" height="15" fill="rgb(239,60,40)"/><text x="26.9768%" y="111.50"></text></g><g><title>mir_for_ctfe (311,763 samples, 0.16%)</title><rect x="26.6789%" y="133" width="0.1609%" height="15" fill="rgb(206,27,48)"/><text x="26.9289%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (285,483 samples, 0.15%)</title><rect x="26.6924%" y="117" width="0.1473%" height="15" fill="rgb(225,35,8)"/><text x="26.9424%" y="127.50"></text></g><g><title>eval_to_const_value_raw (655,536 samples, 0.34%)</title><rect x="26.5045%" y="181" width="0.3383%" height="15" fill="rgb(250,213,24)"/><text x="26.7545%" y="191.50"></text></g><g><title>eval_to_const_value_raw (485,875 samples, 0.25%)</title><rect x="26.5920%" y="165" width="0.2507%" height="15" fill="rgb(247,123,22)"/><text x="26.8420%" y="175.50"></text></g><g><title>eval_to_allocation_raw (480,465 samples, 0.25%)</title><rect x="26.5948%" y="149" width="0.2479%" height="15" fill="rgb(231,138,38)"/><text x="26.8448%" y="159.50"></text></g><g><title>generics_of (1,211,468 samples, 0.63%)</title><rect x="29.7499%" y="165" width="0.6251%" height="15" fill="rgb(231,145,46)"/><text x="29.9999%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (896,525 samples, 0.46%)</title><rect x="29.9124%" y="149" width="0.4626%" height="15" fill="rgb(251,118,11)"/><text x="30.1624%" y="159.50"></text></g><g><title>impl_trait_ref (1,781,105 samples, 0.92%)</title><rect x="30.5006%" y="165" width="0.9190%" height="15" fill="rgb(217,147,25)"/><text x="30.7506%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,225,379 samples, 0.63%)</title><rect x="30.7873%" y="149" width="0.6323%" height="15" fill="rgb(247,81,37)"/><text x="31.0373%" y="159.50"></text></g><g><title>opt_def_kind (204,402 samples, 0.11%)</title><rect x="31.5887%" y="149" width="0.1055%" height="15" fill="rgb(209,12,38)"/><text x="31.8387%" y="159.50"></text></g><g><title>predicates_of (1,288,247 samples, 0.66%)</title><rect x="31.4565%" y="165" width="0.6647%" height="15" fill="rgb(227,1,9)"/><text x="31.7065%" y="175.50"></text></g><g><title>predicates_defined_on (827,643 samples, 0.43%)</title><rect x="31.6942%" y="149" width="0.4271%" height="15" fill="rgb(248,47,43)"/><text x="31.9442%" y="159.50"></text></g><g><title>specializes (3,179,112 samples, 1.64%)</title><rect x="32.1212%" y="165" width="1.6404%" height="15" fill="rgb(221,10,30)"/><text x="32.3712%" y="175.50"></text></g><g><title>param_env (1,829,178 samples, 0.94%)</title><rect x="32.8178%" y="149" width="0.9439%" height="15" fill="rgb(210,229,1)"/><text x="33.0678%" y="159.50"></text></g><g><title>def_span (771,567 samples, 0.40%)</title><rect x="33.3635%" y="133" width="0.3981%" height="15" fill="rgb(222,148,37)"/><text x="33.6135%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (678,417 samples, 0.35%)</title><rect x="33.4116%" y="117" width="0.3501%" height="15" fill="rgb(234,67,33)"/><text x="33.6616%" y="127.50"></text></g><g><title>trait_impls_of (354,354 samples, 0.18%)</title><rect x="33.7711%" y="165" width="0.1828%" height="15" fill="rgb(247,98,35)"/><text x="34.0211%" y="175.50"></text></g><g><title>evaluate_obligation (13,815,130 samples, 7.13%)</title><rect x="26.8427%" y="181" width="7.1286%" height="15" fill="rgb(247,138,52)"/><text x="27.0927%" y="191.50">evaluate_o..</text></g><g><title>generics_of (371,494 samples, 0.19%)</title><rect x="34.0413%" y="181" width="0.1917%" height="15" fill="rgb(213,79,30)"/><text x="34.2913%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (286,143 samples, 0.15%)</title><rect x="34.0853%" y="165" width="0.1476%" height="15" fill="rgb(246,177,23)"/><text x="34.3353%" y="175.50"></text></g><g><title>predicates_of (306,192 samples, 0.16%)</title><rect x="34.6152%" y="181" width="0.1580%" height="15" fill="rgb(230,62,27)"/><text x="34.8652%" y="191.50"></text></g><g><title>predicates_defined_on (199,281 samples, 0.10%)</title><rect x="34.6704%" y="165" width="0.1028%" height="15" fill="rgb(216,154,8)"/><text x="34.9204%" y="175.50"></text></g><g><title>item_bodies_checking (31,119,706 samples, 16.06%)</title><rect x="18.8865%" y="229" width="16.0577%" height="15" fill="rgb(244,35,45)"/><text x="19.1365%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,116,126 samples, 16.06%)</title><rect x="18.8883%" y="213" width="16.0559%" height="15" fill="rgb(251,115,12)"/><text x="19.1383%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (31,073,106 samples, 16.03%)</title><rect x="18.9105%" y="197" width="16.0337%" height="15" fill="rgb(240,54,50)"/><text x="19.1605%" y="207.50">typeck</text></g><g><title>item_types_checking (549,466 samples, 0.28%)</title><rect x="34.9442%" y="229" width="0.2835%" height="15" fill="rgb(233,84,52)"/><text x="35.1942%" y="239.50"></text></g><g><title>check_mod_item_types (546,486 samples, 0.28%)</title><rect x="34.9457%" y="213" width="0.2820%" height="15" fill="rgb(207,117,47)"/><text x="35.1957%" y="223.50"></text></g><g><title>mir_const_qualif (468,795 samples, 0.24%)</title><rect x="35.6093%" y="149" width="0.2419%" height="15" fill="rgb(249,43,39)"/><text x="35.8593%" y="159.50"></text></g><g><title>mir_const (392,464 samples, 0.20%)</title><rect x="35.6487%" y="133" width="0.2025%" height="15" fill="rgb(209,38,44)"/><text x="35.8987%" y="143.50"></text></g><g><title>unsafety_check_result (284,654 samples, 0.15%)</title><rect x="35.7043%" y="117" width="0.1469%" height="15" fill="rgb(236,212,23)"/><text x="35.9543%" y="127.50"></text></g><g><title>mir_built (247,943 samples, 0.13%)</title><rect x="35.7232%" y="101" width="0.1279%" height="15" fill="rgb(242,79,21)"/><text x="35.9732%" y="111.50"></text></g><g><title>mir_borrowck (1,021,581 samples, 0.53%)</title><rect x="36.0702%" y="117" width="0.5271%" height="15" fill="rgb(211,96,35)"/><text x="36.3202%" y="127.50"></text></g><g><title>mir_for_ctfe (1,449,855 samples, 0.75%)</title><rect x="35.8512%" y="149" width="0.7481%" height="15" fill="rgb(253,215,40)"/><text x="36.1012%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,336,374 samples, 0.69%)</title><rect x="35.9097%" y="133" width="0.6896%" height="15" fill="rgb(211,81,21)"/><text x="36.1597%" y="143.50"></text></g><g><title>eval_to_const_value_raw (317,593 samples, 0.16%)</title><rect x="36.6080%" y="133" width="0.1639%" height="15" fill="rgb(208,190,38)"/><text x="36.8580%" y="143.50"></text></g><g><title>eval_to_const_value_raw (315,023 samples, 0.16%)</title><rect x="36.6094%" y="117" width="0.1626%" height="15" fill="rgb(235,213,38)"/><text x="36.8594%" y="127.50"></text></g><g><title>eval_to_allocation_raw (308,623 samples, 0.16%)</title><rect x="36.6127%" y="101" width="0.1592%" height="15" fill="rgb(237,122,38)"/><text x="36.8627%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (339,343 samples, 0.18%)</title><rect x="36.6004%" y="149" width="0.1751%" height="15" fill="rgb(244,218,35)"/><text x="36.8504%" y="159.50"></text></g><g><title>evaluate_obligation (379,694 samples, 0.20%)</title><rect x="37.2899%" y="133" width="0.1959%" height="15" fill="rgb(240,68,47)"/><text x="37.5399%" y="143.50"></text></g><g><title>eval_to_const_value_raw (4,137,862 samples, 2.14%)</title><rect x="35.4282%" y="197" width="2.1351%" height="15" fill="rgb(210,16,53)"/><text x="35.6782%" y="207.50">e..</text></g><g><title>eval_to_const_value_raw (4,110,322 samples, 2.12%)</title><rect x="35.4424%" y="181" width="2.1209%" height="15" fill="rgb(235,124,12)"/><text x="35.6924%" y="191.50">e..</text></g><g><title>eval_to_allocation_raw (4,093,082 samples, 2.11%)</title><rect x="35.4513%" y="165" width="2.1120%" height="15" fill="rgb(224,169,11)"/><text x="35.7013%" y="175.50">e..</text></g><g><title>typeck (1,526,806 samples, 0.79%)</title><rect x="36.7755%" y="149" width="0.7878%" height="15" fill="rgb(250,166,2)"/><text x="37.0255%" y="159.50"></text></g><g><title>fn_sig (322,043 samples, 0.17%)</title><rect x="37.5633%" y="197" width="0.1662%" height="15" fill="rgb(242,216,29)"/><text x="37.8133%" y="207.50"></text></g><g><title>named_region_map (434,376 samples, 0.22%)</title><rect x="37.8045%" y="181" width="0.2241%" height="15" fill="rgb(230,116,27)"/><text x="38.0545%" y="191.50"></text></g><g><title>resolve_lifetimes (419,686 samples, 0.22%)</title><rect x="37.8121%" y="165" width="0.2166%" height="15" fill="rgb(228,99,48)"/><text x="38.0621%" y="175.50"></text></g><g><title>lint_levels (307,443 samples, 0.16%)</title><rect x="37.8700%" y="149" width="0.1586%" height="15" fill="rgb(253,11,6)"/><text x="38.1200%" y="159.50"></text></g><g><title>generics_of (599,148 samples, 0.31%)</title><rect x="37.7295%" y="197" width="0.3092%" height="15" fill="rgb(247,143,39)"/><text x="37.9795%" y="207.50"></text></g><g><title>param_env (262,763 samples, 0.14%)</title><rect x="38.0824%" y="197" width="0.1356%" height="15" fill="rgb(236,97,10)"/><text x="38.3324%" y="207.50"></text></g><g><title>late_bound_vars_map (247,842 samples, 0.13%)</title><rect x="38.5089%" y="149" width="0.1279%" height="15" fill="rgb(233,208,19)"/><text x="38.7589%" y="159.50"></text></g><g><title>resolve_lifetimes (230,782 samples, 0.12%)</title><rect x="38.5177%" y="133" width="0.1191%" height="15" fill="rgb(216,164,2)"/><text x="38.7677%" y="143.50"></text></g><g><title>explicit_predicates_of (718,348 samples, 0.37%)</title><rect x="38.2942%" y="165" width="0.3707%" height="15" fill="rgb(220,129,5)"/><text x="38.5442%" y="175.50"></text></g><g><title>predicates_of (972,369 samples, 0.50%)</title><rect x="38.2180%" y="197" width="0.5017%" height="15" fill="rgb(242,17,10)"/><text x="38.4680%" y="207.50"></text></g><g><title>predicates_defined_on (920,189 samples, 0.47%)</title><rect x="38.2449%" y="181" width="0.4748%" height="15" fill="rgb(242,107,0)"/><text x="38.4949%" y="191.50"></text></g><g><title>type_collecting (6,918,861 samples, 3.57%)</title><rect x="35.2284%" y="229" width="3.5701%" height="15" fill="rgb(251,28,31)"/><text x="35.4784%" y="239.50">type..</text></g><g><title>collect_mod_item_types (6,906,331 samples, 3.56%)</title><rect x="35.2348%" y="213" width="3.5637%" height="15" fill="rgb(233,223,10)"/><text x="35.4848%" y="223.50">coll..</text></g><g><title>evaluate_obligation (208,781 samples, 0.11%)</title><rect x="39.4478%" y="197" width="0.1077%" height="15" fill="rgb(215,21,27)"/><text x="39.6978%" y="207.50"></text></g><g><title>region_scope_tree (237,173 samples, 0.12%)</title><rect x="39.7120%" y="197" width="0.1224%" height="15" fill="rgb(232,23,21)"/><text x="39.9620%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,909,576 samples, 0.99%)</title><rect x="38.8502%" y="213" width="0.9853%" height="15" fill="rgb(244,5,23)"/><text x="39.1002%" y="223.50"></text></g><g><title>eval_to_const_value_raw (305,974 samples, 0.16%)</title><rect x="40.3162%" y="69" width="0.1579%" height="15" fill="rgb(226,81,46)"/><text x="40.5662%" y="79.50"></text></g><g><title>eval_to_const_value_raw (303,544 samples, 0.16%)</title><rect x="40.3175%" y="53" width="0.1566%" height="15" fill="rgb(247,70,30)"/><text x="40.5675%" y="63.50"></text></g><g><title>eval_to_allocation_raw (288,583 samples, 0.15%)</title><rect x="40.3252%" y="37" width="0.1489%" height="15" fill="rgb(212,68,19)"/><text x="40.5752%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (320,444 samples, 0.17%)</title><rect x="40.3112%" y="85" width="0.1653%" height="15" fill="rgb(240,187,13)"/><text x="40.5612%" y="95.50"></text></g><g><title>eval_to_const_value_raw (757,158 samples, 0.39%)</title><rect x="40.2159%" y="133" width="0.3907%" height="15" fill="rgb(223,113,26)"/><text x="40.4659%" y="143.50"></text></g><g><title>eval_to_const_value_raw (756,578 samples, 0.39%)</title><rect x="40.2162%" y="117" width="0.3904%" height="15" fill="rgb(206,192,2)"/><text x="40.4662%" y="127.50"></text></g><g><title>eval_to_allocation_raw (755,558 samples, 0.39%)</title><rect x="40.2167%" y="101" width="0.3899%" height="15" fill="rgb(241,108,4)"/><text x="40.4667%" y="111.50"></text></g><g><title>typeck (252,113 samples, 0.13%)</title><rect x="40.4765%" y="85" width="0.1301%" height="15" fill="rgb(247,173,49)"/><text x="40.7265%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (763,948 samples, 0.39%)</title><rect x="40.2137%" y="149" width="0.3942%" height="15" fill="rgb(224,114,35)"/><text x="40.4637%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,003,750 samples, 0.52%)</title><rect x="40.1142%" y="197" width="0.5179%" height="15" fill="rgb(245,159,27)"/><text x="40.3642%" y="207.50"></text></g><g><title>eval_to_const_value_raw (1,003,140 samples, 0.52%)</title><rect x="40.1145%" y="181" width="0.5176%" height="15" fill="rgb(245,172,44)"/><text x="40.3645%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,001,910 samples, 0.52%)</title><rect x="40.1151%" y="165" width="0.5170%" height="15" fill="rgb(236,23,11)"/><text x="40.3651%" y="175.50"></text></g><g><title>analysis (63,253,932 samples, 32.64%)</title><rect x="8.2639%" y="261" width="32.6389%" height="15" fill="rgb(205,117,38)"/><text x="8.5139%" y="271.50">analysis</text></g><g><title>type_check_crate (46,661,574 samples, 24.08%)</title><rect x="16.8255%" y="245" width="24.0773%" height="15" fill="rgb(237,72,25)"/><text x="17.0755%" y="255.50">type_check_crate</text></g><g><title>wf_checking (4,073,251 samples, 2.10%)</title><rect x="38.8010%" y="229" width="2.1018%" height="15" fill="rgb(244,70,9)"/><text x="39.0510%" y="239.50">w..</text></g><g><title>check_item_well_formed (2,068,393 samples, 1.07%)</title><rect x="39.8355%" y="213" width="1.0673%" height="15" fill="rgb(217,125,39)"/><text x="40.0855%" y="223.50"></text></g><g><title>const_caller_location (227,182 samples, 0.12%)</title><rect x="46.1146%" y="229" width="0.1172%" height="15" fill="rgb(235,36,10)"/><text x="46.3646%" y="239.50"></text></g><g><title>layout_of (282,743 samples, 0.15%)</title><rect x="46.5375%" y="213" width="0.1459%" height="15" fill="rgb(251,123,47)"/><text x="46.7875%" y="223.50"></text></g><g><title>param_env (537,329 samples, 0.28%)</title><rect x="46.6834%" y="213" width="0.2773%" height="15" fill="rgb(221,13,13)"/><text x="46.9334%" y="223.50"></text></g><g><title>fn_abi_of_instance (1,324,589 samples, 0.68%)</title><rect x="46.2782%" y="229" width="0.6835%" height="15" fill="rgb(238,131,9)"/><text x="46.5282%" y="239.50"></text></g><g><title>codegen_module (10,569,575 samples, 5.45%)</title><rect x="41.6694%" y="245" width="5.4539%" height="15" fill="rgb(211,50,8)"/><text x="41.9194%" y="255.50">codegen..</text></g><g><title>codegen_crate (12,068,693 samples, 6.23%)</title><rect x="40.9088%" y="261" width="6.2274%" height="15" fill="rgb(245,182,24)"/><text x="41.1588%" y="271.50">codegen_..</text></g><g><title>LLVM_module_codegen (58,714,067 samples, 30.30%)</title><rect x="47.2174%" y="245" width="30.2963%" height="15" fill="rgb(242,14,37)"/><text x="47.4674%" y="255.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (55,097,562 samples, 28.43%)</title><rect x="49.0835%" y="229" width="28.4302%" height="15" fill="rgb(246,228,12)"/><text x="49.3335%" y="239.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (62,880,871 samples, 32.45%)</title><rect x="47.1362%" y="261" width="32.4464%" height="15" fill="rgb(213,55,15)"/><text x="47.3862%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,009,404 samples, 2.07%)</title><rect x="77.5137%" y="245" width="2.0688%" height="15" fill="rgb(209,9,3)"/><text x="77.7637%" y="255.50">L..</text></g><g><title>AST_validation (226,322 samples, 0.12%)</title><rect x="79.6972%" y="245" width="0.1168%" height="15" fill="rgb(230,59,30)"/><text x="79.9472%" y="255.50"></text></g><g><title>metadata_load_macro (283,870 samples, 0.15%)</title><rect x="85.1840%" y="213" width="0.1465%" height="15" fill="rgb(209,121,21)"/><text x="85.4340%" y="223.50"></text></g><g><title>metadata_register_crate (226,681 samples, 0.12%)</title><rect x="85.3305%" y="213" width="0.1170%" height="15" fill="rgb(220,109,13)"/><text x="85.5805%" y="223.50"></text></g><g><title>macro_expand_crate (10,792,269 samples, 5.57%)</title><rect x="79.9078%" y="245" width="5.5688%" height="15" fill="rgb(232,18,1)"/><text x="80.1578%" y="255.50">macro_e..</text></g><g><title>expand_crate (10,762,709 samples, 5.55%)</title><rect x="79.9231%" y="229" width="5.5535%" height="15" fill="rgb(215,41,42)"/><text x="80.1731%" y="239.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (336,203 samples, 0.17%)</title><rect x="85.4790%" y="245" width="0.1735%" height="15" fill="rgb(224,123,36)"/><text x="85.7290%" y="255.50"></text></g><g><title>finalize_macro_resolutions (256,592 samples, 0.13%)</title><rect x="85.6966%" y="229" width="0.1324%" height="15" fill="rgb(240,125,3)"/><text x="85.9466%" y="239.50"></text></g><g><title>late_resolve_crate (3,183,333 samples, 1.64%)</title><rect x="85.8290%" y="229" width="1.6426%" height="15" fill="rgb(205,98,50)"/><text x="86.0790%" y="239.50"></text></g><g><title>configure_and_expand (15,441,026 samples, 7.97%)</title><rect x="79.5826%" y="261" width="7.9675%" height="15" fill="rgb(205,185,37)"/><text x="79.8326%" y="271.50">configure_a..</text></g><g><title>resolve_crate (3,677,677 samples, 1.90%)</title><rect x="85.6525%" y="245" width="1.8977%" height="15" fill="rgb(238,207,15)"/><text x="85.9025%" y="255.50">r..</text></g><g><title>drop_ast (230,032 samples, 0.12%)</title><rect x="87.5501%" y="261" width="0.1187%" height="15" fill="rgb(213,199,42)"/><text x="87.8001%" y="271.50"></text></g><g><title>early_lint_checks (638,387 samples, 0.33%)</title><rect x="87.6774%" y="261" width="0.3294%" height="15" fill="rgb(235,201,11)"/><text x="87.9274%" y="271.50"></text></g><g><title>free_global_ctxt (2,745,478 samples, 1.42%)</title><rect x="88.0068%" y="261" width="1.4167%" height="15" fill="rgb(207,46,11)"/><text x="88.2568%" y="271.50"></text></g><g><title>item_attrs (313,232 samples, 0.16%)</title><rect x="90.0612%" y="165" width="0.1616%" height="15" fill="rgb(241,35,35)"/><text x="90.3112%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (309,062 samples, 0.16%)</title><rect x="90.0633%" y="149" width="0.1595%" height="15" fill="rgb(243,32,47)"/><text x="90.3133%" y="159.50"></text></g><g><title>codegen_fn_attrs (390,263 samples, 0.20%)</title><rect x="90.0451%" y="181" width="0.2014%" height="15" fill="rgb(247,202,23)"/><text x="90.2951%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (200,132 samples, 0.10%)</title><rect x="90.5506%" y="165" width="0.1033%" height="15" fill="rgb(219,102,11)"/><text x="90.8006%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (427,265 samples, 0.22%)</title><rect x="90.6539%" y="165" width="0.2205%" height="15" fill="rgb(243,110,44)"/><text x="90.9039%" y="175.50"></text></g><g><title>optimized_mir (1,257,002 samples, 0.65%)</title><rect x="90.3037%" y="181" width="0.6486%" height="15" fill="rgb(222,74,54)"/><text x="90.5537%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (225,452 samples, 0.12%)</title><rect x="91.1111%" y="165" width="0.1163%" height="15" fill="rgb(216,99,12)"/><text x="91.3611%" y="175.50"></text></g><g><title>resolve_instance (833,729 samples, 0.43%)</title><rect x="90.9523%" y="181" width="0.4302%" height="15" fill="rgb(226,22,26)"/><text x="91.2023%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (2,884,069 samples, 1.49%)</title><rect x="89.9435%" y="197" width="1.4882%" height="15" fill="rgb(217,163,10)"/><text x="90.1935%" y="207.50"></text></g><g><title>monomorphization_collector (2,911,189 samples, 1.50%)</title><rect x="89.9422%" y="213" width="1.5022%" height="15" fill="rgb(213,25,53)"/><text x="90.1922%" y="223.50"></text></g><g><title>assert_symbols_are_distinct (246,282 samples, 0.13%)</title><rect x="91.4461%" y="197" width="0.1271%" height="15" fill="rgb(252,105,26)"/><text x="91.6961%" y="207.50"></text></g><g><title>symbol_name (231,112 samples, 0.12%)</title><rect x="91.4539%" y="181" width="0.1193%" height="15" fill="rgb(220,39,43)"/><text x="91.7039%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (3,313,163 samples, 1.71%)</title><rect x="89.9234%" y="229" width="1.7096%" height="15" fill="rgb(229,68,48)"/><text x="90.1734%" y="239.50"></text></g><g><title>partition_and_assert_distinct_symbols (365,533 samples, 0.19%)</title><rect x="91.4444%" y="213" width="0.1886%" height="15" fill="rgb(252,8,32)"/><text x="91.6944%" y="223.50"></text></g><g><title>exported_symbols (3,409,855 samples, 1.76%)</title><rect x="89.9102%" y="245" width="1.7595%" height="15" fill="rgb(223,20,43)"/><text x="90.1602%" y="255.50"></text></g><g><title>layout_of (399,765 samples, 0.21%)</title><rect x="92.4483%" y="229" width="0.2063%" height="15" fill="rgb(229,81,49)"/><text x="92.6983%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,464,237 samples, 0.76%)</title><rect x="92.6546%" y="229" width="0.7555%" height="15" fill="rgb(236,28,36)"/><text x="92.9046%" y="239.50"></text></g><g><title>optimized_mir (3,368,786 samples, 1.74%)</title><rect x="91.6831%" y="245" width="1.7383%" height="15" fill="rgb(249,185,26)"/><text x="91.9331%" y="255.50"></text></g><g><title>generate_crate_metadata (7,810,599 samples, 4.03%)</title><rect x="89.4234%" y="261" width="4.0303%" height="15" fill="rgb(249,174,33)"/><text x="89.6734%" y="271.50">gene..</text></g><g><title>hir_lowering (3,419,625 samples, 1.76%)</title><rect x="93.4537%" y="261" width="1.7645%" height="15" fill="rgb(233,201,37)"/><text x="93.7037%" y="271.50"></text></g><g><title>link_binary_remove_temps (217,982 samples, 0.11%)</title><rect x="95.4801%" y="213" width="0.1125%" height="15" fill="rgb(221,78,26)"/><text x="95.7301%" y="223.50"></text></g><g><title>link_crate (1,423,424 samples, 0.73%)</title><rect x="95.3095%" y="245" width="0.7345%" height="15" fill="rgb(250,127,30)"/><text x="95.5595%" y="255.50"></text></g><g><title>link_binary (1,386,333 samples, 0.72%)</title><rect x="95.3286%" y="229" width="0.7153%" height="15" fill="rgb(230,49,44)"/><text x="95.5786%" y="239.50"></text></g><g><title>link_rlib (874,839 samples, 0.45%)</title><rect x="95.5926%" y="213" width="0.4514%" height="15" fill="rgb(229,67,23)"/><text x="95.8426%" y="223.50"></text></g><g><title>link (1,608,996 samples, 0.83%)</title><rect x="95.2182%" y="261" width="0.8302%" height="15" fill="rgb(249,83,47)"/><text x="95.4682%" y="271.50"></text></g><g><title>parse_crate (4,358,435 samples, 2.25%)</title><rect x="96.0484%" y="261" width="2.2489%" height="15" fill="rgb(215,43,3)"/><text x="96.2984%" y="271.50">p..</text></g><g><title>prepare_outputs (357,614 samples, 0.18%)</title><rect x="98.3018%" y="261" width="0.1845%" height="15" fill="rgb(238,154,13)"/><text x="98.5518%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (2,464,895 samples, 1.27%)</title><rect x="98.4864%" y="261" width="1.2719%" height="15" fill="rgb(219,56,2)"/><text x="98.7364%" y="271.50"></text></g><g><title>all (193,799,262 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (193,799,262 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (314,603 samples, 0.16%)</title><rect x="99.8377%" y="261" width="0.1623%" height="15" fill="rgb(250,79,13)"/><text x="100.0877%" y="271.50"></text></g></svg></svg>