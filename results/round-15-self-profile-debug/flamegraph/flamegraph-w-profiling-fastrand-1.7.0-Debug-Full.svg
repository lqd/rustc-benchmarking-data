<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (48,988,094 samples, 9.97%)</title><rect x="0.1754%" y="197" width="9.9674%" height="15" fill="rgb(227,0,7)"/><text x="0.4254%" y="207.50">LLVM_passes</text></g><g><title>item_attrs (1,059,078 samples, 0.22%)</title><rect x="15.3597%" y="85" width="0.2155%" height="15" fill="rgb(217,0,24)"/><text x="15.6097%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,034,808 samples, 0.21%)</title><rect x="15.3647%" y="69" width="0.2105%" height="15" fill="rgb(221,193,54)"/><text x="15.6147%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,297,240 samples, 0.26%)</title><rect x="15.3192%" y="101" width="0.2639%" height="15" fill="rgb(248,212,6)"/><text x="15.5692%" y="111.50"></text></g><g><title>needs_drop_raw (1,915,636 samples, 0.39%)</title><rect x="16.5075%" y="85" width="0.3898%" height="15" fill="rgb(208,68,35)"/><text x="16.7575%" y="95.50"></text></g><g><title>is_copy_raw (1,533,433 samples, 0.31%)</title><rect x="16.5853%" y="69" width="0.3120%" height="15" fill="rgb(232,128,0)"/><text x="16.8353%" y="79.50"></text></g><g><title>evaluate_obligation (1,239,298 samples, 0.25%)</title><rect x="16.6452%" y="53" width="0.2522%" height="15" fill="rgb(207,160,47)"/><text x="16.8952%" y="63.50"></text></g><g><title>impl_parent (498,325 samples, 0.10%)</title><rect x="17.1410%" y="53" width="0.1014%" height="15" fill="rgb(228,23,34)"/><text x="17.3910%" y="63.50"></text></g><g><title>specialization_graph_of (2,294,143 samples, 0.47%)</title><rect x="16.9777%" y="69" width="0.4668%" height="15" fill="rgb(218,30,26)"/><text x="17.2277%" y="79.50"></text></g><g><title>impl_trait_ref (992,928 samples, 0.20%)</title><rect x="17.2424%" y="53" width="0.2020%" height="15" fill="rgb(220,122,19)"/><text x="17.4924%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (790,347 samples, 0.16%)</title><rect x="17.2836%" y="37" width="0.1608%" height="15" fill="rgb(250,228,42)"/><text x="17.5336%" y="47.50"></text></g><g><title>resolve_instance (2,772,228 samples, 0.56%)</title><rect x="16.8973%" y="85" width="0.5641%" height="15" fill="rgb(240,193,28)"/><text x="17.1473%" y="95.50"></text></g><g><title>thir_body (1,899,633 samples, 0.39%)</title><rect x="17.4777%" y="85" width="0.3865%" height="15" fill="rgb(216,20,37)"/><text x="17.7277%" y="95.50"></text></g><g><title>mir_const (14,824,575 samples, 3.02%)</title><rect x="14.8572%" y="133" width="3.0163%" height="15" fill="rgb(206,188,39)"/><text x="15.1072%" y="143.50">mir..</text></g><g><title>unsafety_check_result (13,295,810 samples, 2.71%)</title><rect x="15.1683%" y="117" width="2.7052%" height="15" fill="rgb(217,207,13)"/><text x="15.4183%" y="127.50">un..</text></g><g><title>mir_built (11,256,991 samples, 2.29%)</title><rect x="15.5831%" y="101" width="2.2904%" height="15" fill="rgb(231,73,38)"/><text x="15.8331%" y="111.50">m..</text></g><g><title>mir_const_qualif (491,875 samples, 0.10%)</title><rect x="17.8735%" y="133" width="0.1001%" height="15" fill="rgb(225,20,46)"/><text x="18.1235%" y="143.50"></text></g><g><title>mir_promoted (16,795,141 samples, 3.42%)</title><rect x="14.5566%" y="149" width="3.4172%" height="15" fill="rgb(210,31,41)"/><text x="14.8066%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (1,026,850 samples, 0.21%)</title><rect x="17.9739%" y="149" width="0.2089%" height="15" fill="rgb(221,200,47)"/><text x="18.2239%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,015,455 samples, 1.02%)</title><rect x="18.2691%" y="149" width="1.0205%" height="15" fill="rgb(226,26,5)"/><text x="18.5191%" y="159.50"></text></g><g><title>MIR_borrow_checking (44,414,908 samples, 9.04%)</title><rect x="10.2536%" y="181" width="9.0369%" height="15" fill="rgb(249,33,26)"/><text x="10.5036%" y="191.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (44,207,658 samples, 8.99%)</title><rect x="10.2957%" y="165" width="8.9948%" height="15" fill="rgb(235,183,28)"/><text x="10.5457%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (556,905 samples, 0.11%)</title><rect x="19.4126%" y="165" width="0.1133%" height="15" fill="rgb(221,5,38)"/><text x="19.6626%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (527,376 samples, 0.11%)</title><rect x="19.5619%" y="165" width="0.1073%" height="15" fill="rgb(247,18,42)"/><text x="19.8119%" y="175.50"></text></g><g><title>misc_checking_1 (1,317,213 samples, 0.27%)</title><rect x="19.4100%" y="181" width="0.2680%" height="15" fill="rgb(241,131,45)"/><text x="19.6600%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (630,766 samples, 0.13%)</title><rect x="19.6783%" y="165" width="0.1283%" height="15" fill="rgb(249,31,29)"/><text x="19.9283%" y="175.50"></text></g><g><title>check_mod_liveness (531,315 samples, 0.11%)</title><rect x="19.6985%" y="149" width="0.1081%" height="15" fill="rgb(225,111,53)"/><text x="19.9485%" y="159.50"></text></g><g><title>misc_checking_2 (1,620,956 samples, 0.33%)</title><rect x="19.6780%" y="181" width="0.3298%" height="15" fill="rgb(238,160,17)"/><text x="19.9280%" y="191.50"></text></g><g><title>match_checking (988,710 samples, 0.20%)</title><rect x="19.8066%" y="165" width="0.2012%" height="15" fill="rgb(214,148,48)"/><text x="20.0566%" y="175.50"></text></g><g><title>check_match (941,509 samples, 0.19%)</title><rect x="19.8162%" y="149" width="0.1916%" height="15" fill="rgb(232,36,49)"/><text x="20.0662%" y="159.50"></text></g><g><title>death_checking (596,966 samples, 0.12%)</title><rect x="20.0433%" y="165" width="0.1215%" height="15" fill="rgb(209,103,24)"/><text x="20.2933%" y="175.50"></text></g><g><title>crate_lints (2,715,987 samples, 0.55%)</title><rect x="20.1650%" y="149" width="0.5526%" height="15" fill="rgb(229,88,8)"/><text x="20.4150%" y="159.50"></text></g><g><title>type_of (1,103,192 samples, 0.22%)</title><rect x="20.4932%" y="133" width="0.2245%" height="15" fill="rgb(213,181,19)"/><text x="20.7432%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (867,849 samples, 0.18%)</title><rect x="20.5411%" y="117" width="0.1766%" height="15" fill="rgb(254,191,54)"/><text x="20.7911%" y="127.50"></text></g><g><title>lint_checking (3,234,313 samples, 0.66%)</title><rect x="20.1647%" y="165" width="0.6581%" height="15" fill="rgb(241,83,37)"/><text x="20.4147%" y="175.50"></text></g><g><title>module_lints (516,956 samples, 0.11%)</title><rect x="20.7176%" y="149" width="0.1052%" height="15" fill="rgb(233,36,39)"/><text x="20.9676%" y="159.50"></text></g><g><title>lint_mod (514,736 samples, 0.10%)</title><rect x="20.7181%" y="133" width="0.1047%" height="15" fill="rgb(226,3,54)"/><text x="20.9681%" y="143.50"></text></g><g><title>privacy_checking_modules (873,448 samples, 0.18%)</title><rect x="20.8679%" y="165" width="0.1777%" height="15" fill="rgb(245,192,40)"/><text x="21.1179%" y="175.50"></text></g><g><title>check_mod_privacy (871,858 samples, 0.18%)</title><rect x="20.8682%" y="149" width="0.1774%" height="15" fill="rgb(238,167,29)"/><text x="21.1182%" y="159.50"></text></g><g><title>misc_checking_3 (5,115,821 samples, 1.04%)</title><rect x="20.0078%" y="181" width="1.0409%" height="15" fill="rgb(232,182,51)"/><text x="20.2578%" y="191.50"></text></g><g><title>impl_parent (1,981,917 samples, 0.40%)</title><rect x="21.6877%" y="117" width="0.4033%" height="15" fill="rgb(231,60,39)"/><text x="21.9377%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,208,131 samples, 0.25%)</title><rect x="21.8452%" y="101" width="0.2458%" height="15" fill="rgb(208,69,12)"/><text x="22.0952%" y="111.50"></text></g><g><title>impl_trait_ref (4,759,418 samples, 0.97%)</title><rect x="22.0910%" y="117" width="0.9684%" height="15" fill="rgb(235,93,37)"/><text x="22.3410%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,737,297 samples, 0.76%)</title><rect x="22.2989%" y="101" width="0.7604%" height="15" fill="rgb(213,116,39)"/><text x="22.5489%" y="111.50"></text></g><g><title>coherent_trait (10,422,145 samples, 2.12%)</title><rect x="21.0660%" y="149" width="2.1206%" height="15" fill="rgb(222,207,29)"/><text x="21.3160%" y="159.50">c..</text></g><g><title>specialization_graph_of (10,410,125 samples, 2.12%)</title><rect x="21.0684%" y="133" width="2.1181%" height="15" fill="rgb(206,96,30)"/><text x="21.3184%" y="143.50">s..</text></g><g><title>trait_impls_of (623,366 samples, 0.13%)</title><rect x="23.0597%" y="117" width="0.1268%" height="15" fill="rgb(218,138,4)"/><text x="23.3097%" y="127.50"></text></g><g><title>coherence_checking (10,484,246 samples, 2.13%)</title><rect x="21.0632%" y="165" width="2.1332%" height="15" fill="rgb(250,191,14)"/><text x="21.3132%" y="175.50">c..</text></g><g><title>associated_item (581,387 samples, 0.12%)</title><rect x="25.1997%" y="101" width="0.1183%" height="15" fill="rgb(239,60,40)"/><text x="25.4497%" y="111.50"></text></g><g><title>associated_items (1,044,831 samples, 0.21%)</title><rect x="25.1108%" y="117" width="0.2126%" height="15" fill="rgb(206,27,48)"/><text x="25.3608%" y="127.50"></text></g><g><title>generics_of (882,738 samples, 0.18%)</title><rect x="26.4519%" y="101" width="0.1796%" height="15" fill="rgb(225,35,8)"/><text x="26.7019%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (624,296 samples, 0.13%)</title><rect x="26.5045%" y="85" width="0.1270%" height="15" fill="rgb(250,213,24)"/><text x="26.7545%" y="95.50"></text></g><g><title>impl_trait_ref (1,399,219 samples, 0.28%)</title><rect x="26.6917%" y="101" width="0.2847%" height="15" fill="rgb(247,123,22)"/><text x="26.9417%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,143,696 samples, 0.23%)</title><rect x="26.7437%" y="85" width="0.2327%" height="15" fill="rgb(231,138,38)"/><text x="26.9937%" y="95.50"></text></g><g><title>predicates_of (1,090,533 samples, 0.22%)</title><rect x="26.9902%" y="101" width="0.2219%" height="15" fill="rgb(231,145,46)"/><text x="27.2402%" y="111.50"></text></g><g><title>predicates_defined_on (628,714 samples, 0.13%)</title><rect x="27.0842%" y="85" width="0.1279%" height="15" fill="rgb(251,118,11)"/><text x="27.3342%" y="95.50"></text></g><g><title>specializes (3,123,103 samples, 0.64%)</title><rect x="27.2121%" y="101" width="0.6354%" height="15" fill="rgb(217,147,25)"/><text x="27.4621%" y="111.50"></text></g><g><title>param_env (1,751,667 samples, 0.36%)</title><rect x="27.4911%" y="85" width="0.3564%" height="15" fill="rgb(247,81,37)"/><text x="27.7411%" y="95.50"></text></g><g><title>def_span (728,038 samples, 0.15%)</title><rect x="27.6994%" y="69" width="0.1481%" height="15" fill="rgb(209,12,38)"/><text x="27.9494%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (635,817 samples, 0.13%)</title><rect x="27.7182%" y="53" width="0.1294%" height="15" fill="rgb(227,1,9)"/><text x="27.9682%" y="63.50"></text></g><g><title>trait_impls_of (863,473 samples, 0.18%)</title><rect x="27.8513%" y="101" width="0.1757%" height="15" fill="rgb(248,47,43)"/><text x="28.1013%" y="111.50"></text></g><g><title>evaluate_obligation (12,904,040 samples, 2.63%)</title><rect x="25.4079%" y="117" width="2.6255%" height="15" fill="rgb(221,10,30)"/><text x="25.6579%" y="127.50">ev..</text></g><g><title>associated_item (1,046,130 samples, 0.21%)</title><rect x="33.9945%" y="85" width="0.2129%" height="15" fill="rgb(210,229,1)"/><text x="34.2445%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (629,627 samples, 0.13%)</title><rect x="34.0793%" y="69" width="0.1281%" height="15" fill="rgb(222,148,37)"/><text x="34.3293%" y="79.50"></text></g><g><title>associated_items (1,377,855 samples, 0.28%)</title><rect x="33.9337%" y="101" width="0.2803%" height="15" fill="rgb(234,67,33)"/><text x="34.1837%" y="111.50"></text></g><g><title>evaluate_obligation (3,384,380 samples, 0.69%)</title><rect x="34.2903%" y="101" width="0.6886%" height="15" fill="rgb(247,98,35)"/><text x="34.5403%" y="111.50"></text></g><g><title>is_copy_raw (936,822 samples, 0.19%)</title><rect x="35.0468%" y="101" width="0.1906%" height="15" fill="rgb(247,138,52)"/><text x="35.2968%" y="111.50"></text></g><g><title>evaluate_obligation (741,770 samples, 0.15%)</title><rect x="35.0865%" y="85" width="0.1509%" height="15" fill="rgb(213,79,30)"/><text x="35.3365%" y="95.50"></text></g><g><title>method_autoderef_steps (611,479 samples, 0.12%)</title><rect x="35.2616%" y="101" width="0.1244%" height="15" fill="rgb(246,177,23)"/><text x="35.5116%" y="111.50"></text></g><g><title>typeck (35,407,096 samples, 7.20%)</title><rect x="28.3255%" y="117" width="7.2042%" height="15" fill="rgb(230,62,27)"/><text x="28.5755%" y="127.50">typeck</text></g><g><title>item_bodies_checking (60,637,372 samples, 12.34%)</title><rect x="23.1988%" y="165" width="12.3377%" height="15" fill="rgb(216,154,8)"/><text x="23.4488%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (60,635,392 samples, 12.34%)</title><rect x="23.1992%" y="149" width="12.3373%" height="15" fill="rgb(244,35,45)"/><text x="23.4492%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (60,544,781 samples, 12.32%)</title><rect x="23.2177%" y="133" width="12.3188%" height="15" fill="rgb(251,115,12)"/><text x="23.4677%" y="143.50">typeck</text></g><g><title>item_types_checking (1,419,184 samples, 0.29%)</title><rect x="35.5365%" y="165" width="0.2888%" height="15" fill="rgb(240,54,50)"/><text x="35.7865%" y="175.50"></text></g><g><title>check_mod_item_types (1,417,504 samples, 0.29%)</title><rect x="35.5368%" y="149" width="0.2884%" height="15" fill="rgb(233,84,52)"/><text x="35.7868%" y="159.50"></text></g><g><title>typeck (762,018 samples, 0.16%)</title><rect x="35.6702%" y="133" width="0.1550%" height="15" fill="rgb(207,117,47)"/><text x="35.9202%" y="143.50"></text></g><g><title>type_collecting (1,152,932 samples, 0.23%)</title><rect x="35.8256%" y="165" width="0.2346%" height="15" fill="rgb(249,43,39)"/><text x="36.0756%" y="175.50"></text></g><g><title>collect_mod_item_types (1,147,961 samples, 0.23%)</title><rect x="35.8266%" y="149" width="0.2336%" height="15" fill="rgb(209,38,44)"/><text x="36.0766%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,230,363 samples, 0.45%)</title><rect x="36.0928%" y="149" width="0.4538%" height="15" fill="rgb(236,212,23)"/><text x="36.3428%" y="159.50"></text></g><g><title>analysis (131,122,242 samples, 26.68%)</title><rect x="10.1429%" y="197" width="26.6790%" height="15" fill="rgb(242,79,21)"/><text x="10.3929%" y="207.50">analysis</text></g><g><title>type_check_crate (77,522,142 samples, 15.77%)</title><rect x="21.0487%" y="181" width="15.7731%" height="15" fill="rgb(211,96,35)"/><text x="21.2987%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,734,667 samples, 0.76%)</title><rect x="36.0619%" y="165" width="0.7599%" height="15" fill="rgb(253,215,40)"/><text x="36.3119%" y="175.50"></text></g><g><title>check_item_well_formed (1,352,414 samples, 0.28%)</title><rect x="36.5466%" y="149" width="0.2752%" height="15" fill="rgb(211,81,21)"/><text x="36.7966%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (561,323 samples, 0.11%)</title><rect x="43.9500%" y="165" width="0.1142%" height="15" fill="rgb(208,190,38)"/><text x="44.2000%" y="175.50"></text></g><g><title>const_caller_location (581,012 samples, 0.12%)</title><rect x="44.0642%" y="165" width="0.1182%" height="15" fill="rgb(235,213,38)"/><text x="44.3142%" y="175.50"></text></g><g><title>codegen_fn_attrs (627,747 samples, 0.13%)</title><rect x="44.5494%" y="149" width="0.1277%" height="15" fill="rgb(237,122,38)"/><text x="44.7994%" y="159.50"></text></g><g><title>layout_of (1,238,072 samples, 0.25%)</title><rect x="44.6890%" y="149" width="0.2519%" height="15" fill="rgb(244,218,35)"/><text x="44.9390%" y="159.50"></text></g><g><title>predicates_of (822,309 samples, 0.17%)</title><rect x="45.2745%" y="133" width="0.1673%" height="15" fill="rgb(240,68,47)"/><text x="45.5245%" y="143.50"></text></g><g><title>predicates_defined_on (599,957 samples, 0.12%)</title><rect x="45.3197%" y="117" width="0.1221%" height="15" fill="rgb(210,16,53)"/><text x="45.5697%" y="127.50"></text></g><g><title>param_env (2,467,093 samples, 0.50%)</title><rect x="44.9409%" y="149" width="0.5020%" height="15" fill="rgb(235,124,12)"/><text x="45.1909%" y="159.50"></text></g><g><title>fn_abi_of_instance (6,611,454 samples, 1.35%)</title><rect x="44.1868%" y="165" width="1.3452%" height="15" fill="rgb(224,169,11)"/><text x="44.4368%" y="175.50"></text></g><g><title>layout_of (952,710 samples, 0.19%)</title><rect x="45.5983%" y="165" width="0.1938%" height="15" fill="rgb(250,166,2)"/><text x="45.8483%" y="175.50"></text></g><g><title>codegen_module (42,751,099 samples, 8.70%)</title><rect x="37.1836%" y="181" width="8.6984%" height="15" fill="rgb(242,216,29)"/><text x="37.4336%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (44,590,790 samples, 9.07%)</title><rect x="36.8240%" y="197" width="9.0727%" height="15" fill="rgb(230,116,27)"/><text x="37.0740%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (168,355,580 samples, 34.25%)</title><rect x="45.9295%" y="181" width="34.2547%" height="15" fill="rgb(228,99,48)"/><text x="46.1795%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (157,805,851 samples, 32.11%)</title><rect x="48.0760%" y="165" width="32.1082%" height="15" fill="rgb(253,11,6)"/><text x="48.3260%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (180,309,089 samples, 36.69%)</title><rect x="45.8967%" y="197" width="36.6868%" height="15" fill="rgb(247,143,39)"/><text x="46.1467%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,792,058 samples, 2.40%)</title><rect x="80.1842%" y="181" width="2.3993%" height="15" fill="rgb(236,97,10)"/><text x="80.4342%" y="191.50">LL..</text></g><g><title>metadata_load_macro (633,596 samples, 0.13%)</title><rect x="87.3647%" y="149" width="0.1289%" height="15" fill="rgb(233,208,19)"/><text x="87.6147%" y="159.50"></text></g><g><title>macro_expand_crate (26,059,704 samples, 5.30%)</title><rect x="82.7331%" y="181" width="5.3023%" height="15" fill="rgb(216,164,2)"/><text x="82.9831%" y="191.50">macro_..</text></g><g><title>expand_crate (26,034,723 samples, 5.30%)</title><rect x="82.7382%" y="165" width="5.2972%" height="15" fill="rgb(220,129,5)"/><text x="82.9882%" y="175.50">expand..</text></g><g><title>metadata_register_crate (2,662,706 samples, 0.54%)</title><rect x="87.4936%" y="149" width="0.5418%" height="15" fill="rgb(242,17,10)"/><text x="87.7436%" y="159.50"></text></g><g><title>metadata_register_crate (965,841 samples, 0.20%)</title><rect x="87.8389%" y="133" width="0.1965%" height="15" fill="rgb(242,107,0)"/><text x="88.0889%" y="143.50"></text></g><g><title>late_resolve_crate (4,905,029 samples, 1.00%)</title><rect x="88.1722%" y="165" width="0.9980%" height="15" fill="rgb(251,28,31)"/><text x="88.4222%" y="175.50"></text></g><g><title>configure_and_expand (32,625,059 samples, 6.64%)</title><rect x="82.5835%" y="197" width="6.6381%" height="15" fill="rgb(233,223,10)"/><text x="82.8335%" y="207.50">configure..</text></g><g><title>resolve_crate (5,501,035 samples, 1.12%)</title><rect x="88.1023%" y="181" width="1.1193%" height="15" fill="rgb(215,21,27)"/><text x="88.3523%" y="191.50"></text></g><g><title>early_lint_checks (683,347 samples, 0.14%)</title><rect x="89.3008%" y="197" width="0.1390%" height="15" fill="rgb(232,23,21)"/><text x="89.5508%" y="207.50"></text></g><g><title>free_global_ctxt (7,418,444 samples, 1.51%)</title><rect x="89.4398%" y="197" width="1.5094%" height="15" fill="rgb(244,5,23)"/><text x="89.6898%" y="207.50"></text></g><g><title>item_attrs (777,826 samples, 0.16%)</title><rect x="91.7113%" y="101" width="0.1583%" height="15" fill="rgb(226,81,46)"/><text x="91.9613%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (750,006 samples, 0.15%)</title><rect x="91.7170%" y="85" width="0.1526%" height="15" fill="rgb(247,70,30)"/><text x="91.9670%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,144,279 samples, 0.23%)</title><rect x="91.6739%" y="117" width="0.2328%" height="15" fill="rgb(212,68,19)"/><text x="91.9239%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,366,656 samples, 0.28%)</title><rect x="92.1543%" y="101" width="0.2781%" height="15" fill="rgb(240,187,13)"/><text x="92.4043%" y="111.50"></text></g><g><title>optimized_mir (2,332,485 samples, 0.47%)</title><rect x="92.0571%" y="117" width="0.4746%" height="15" fill="rgb(223,113,26)"/><text x="92.3071%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (945,631 samples, 0.19%)</title><rect x="92.6480%" y="101" width="0.1924%" height="15" fill="rgb(206,192,2)"/><text x="92.8980%" y="111.50"></text></g><g><title>specialization_graph_of (1,447,206 samples, 0.29%)</title><rect x="92.9705%" y="101" width="0.2945%" height="15" fill="rgb(241,108,4)"/><text x="93.2205%" y="111.50"></text></g><g><title>impl_trait_ref (562,115 samples, 0.11%)</title><rect x="93.1506%" y="85" width="0.1144%" height="15" fill="rgb(247,173,49)"/><text x="93.4006%" y="95.50"></text></g><g><title>resolve_instance (3,901,992 samples, 0.79%)</title><rect x="92.5316%" y="117" width="0.7939%" height="15" fill="rgb(224,114,35)"/><text x="92.7816%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (9,951,121 samples, 2.02%)</title><rect x="91.4258%" y="133" width="2.0247%" height="15" fill="rgb(245,159,27)"/><text x="91.6758%" y="143.50">m..</text></g><g><title>monomorphization_collector (9,993,601 samples, 2.03%)</title><rect x="91.4252%" y="149" width="2.0334%" height="15" fill="rgb(245,172,44)"/><text x="91.6752%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (1,121,721 samples, 0.23%)</title><rect x="93.4593%" y="133" width="0.2282%" height="15" fill="rgb(236,23,11)"/><text x="93.7093%" y="143.50"></text></g><g><title>symbol_name (1,019,500 samples, 0.21%)</title><rect x="93.4801%" y="117" width="0.2074%" height="15" fill="rgb(205,117,38)"/><text x="93.7301%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (11,763,169 samples, 2.39%)</title><rect x="91.4182%" y="165" width="2.3934%" height="15" fill="rgb(237,72,25)"/><text x="91.6682%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,735,087 samples, 0.35%)</title><rect x="93.4586%" y="149" width="0.3530%" height="15" fill="rgb(244,70,9)"/><text x="93.7086%" y="159.50"></text></g><g><title>cgu_partitioning (610,036 samples, 0.12%)</title><rect x="93.6875%" y="133" width="0.1241%" height="15" fill="rgb(217,125,39)"/><text x="93.9375%" y="143.50"></text></g><g><title>exported_symbols (11,937,341 samples, 2.43%)</title><rect x="91.4093%" y="181" width="2.4288%" height="15" fill="rgb(235,36,10)"/><text x="91.6593%" y="191.50">ex..</text></g><g><title>layout_of (1,305,933 samples, 0.27%)</title><rect x="94.9182%" y="165" width="0.2657%" height="15" fill="rgb(251,123,47)"/><text x="95.1682%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,241,606 samples, 1.07%)</title><rect x="95.1839%" y="165" width="1.0665%" height="15" fill="rgb(221,13,13)"/><text x="95.4339%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (573,255 samples, 0.12%)</title><rect x="96.2662%" y="149" width="0.1166%" height="15" fill="rgb(238,131,9)"/><text x="96.5162%" y="159.50"></text></g><g><title>resolve_instance (659,648 samples, 0.13%)</title><rect x="96.2523%" y="165" width="0.1342%" height="15" fill="rgb(211,50,8)"/><text x="96.5023%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,186,575 samples, 0.24%)</title><rect x="96.4103%" y="149" width="0.2414%" height="15" fill="rgb(245,182,24)"/><text x="96.6603%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,141,955 samples, 0.23%)</title><rect x="96.4194%" y="133" width="0.2323%" height="15" fill="rgb(242,14,37)"/><text x="96.6694%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,098,165 samples, 0.22%)</title><rect x="96.4283%" y="117" width="0.2234%" height="15" fill="rgb(246,228,12)"/><text x="96.6783%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (523,610 samples, 0.11%)</title><rect x="96.5452%" y="101" width="0.1065%" height="15" fill="rgb(213,55,15)"/><text x="96.7952%" y="111.50"></text></g><g><title>optimized_mir (13,844,630 samples, 2.82%)</title><rect x="93.8474%" y="181" width="2.8169%" height="15" fill="rgb(209,9,3)"/><text x="94.0974%" y="191.50">op..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,365,456 samples, 0.28%)</title><rect x="96.3865%" y="165" width="0.2778%" height="15" fill="rgb(230,59,30)"/><text x="96.6365%" y="175.50"></text></g><g><title>generate_crate_metadata (28,571,448 samples, 5.81%)</title><rect x="90.9492%" y="197" width="5.8133%" height="15" fill="rgb(209,121,21)"/><text x="91.1992%" y="207.50">generat..</text></g><g><title>hir_lowering (6,983,951 samples, 1.42%)</title><rect x="96.7625%" y="197" width="1.4210%" height="15" fill="rgb(220,109,13)"/><text x="97.0125%" y="207.50"></text></g><g><title>link_crate (1,917,799 samples, 0.39%)</title><rect x="98.1873%" y="181" width="0.3902%" height="15" fill="rgb(232,18,1)"/><text x="98.4373%" y="191.50"></text></g><g><title>link_binary (1,900,969 samples, 0.39%)</title><rect x="98.1907%" y="165" width="0.3868%" height="15" fill="rgb(215,41,42)"/><text x="98.4407%" y="175.50"></text></g><g><title>link_rlib (1,279,952 samples, 0.26%)</title><rect x="98.3170%" y="149" width="0.2604%" height="15" fill="rgb(224,123,36)"/><text x="98.5670%" y="159.50"></text></g><g><title>link (1,945,360 samples, 0.40%)</title><rect x="98.1835%" y="197" width="0.3958%" height="15" fill="rgb(240,125,3)"/><text x="98.4335%" y="207.50"></text></g><g><title>parse_crate (4,614,107 samples, 0.94%)</title><rect x="98.5793%" y="197" width="0.9388%" height="15" fill="rgb(205,98,50)"/><text x="98.8293%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,490,675 samples, 0.30%)</title><rect x="99.5951%" y="197" width="0.3033%" height="15" fill="rgb(205,185,37)"/><text x="99.8451%" y="207.50"></text></g><g><title>all (491,481,868 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (491,481,868 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>