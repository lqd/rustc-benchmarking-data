<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (750,965,423 samples, 9.76%)</title><rect x="0.1233%" y="197" width="9.7564%" height="15" fill="rgb(227,0,7)"/><text x="0.3733%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (33,136,057 samples, 0.43%)</title><rect x="17.1017%" y="69" width="0.4305%" height="15" fill="rgb(217,0,24)"/><text x="17.3517%" y="79.50"></text></g><g><title>evaluate_obligation (26,644,425 samples, 0.35%)</title><rect x="17.1861%" y="53" width="0.3462%" height="15" fill="rgb(221,193,54)"/><text x="17.4361%" y="63.50"></text></g><g><title>needs_drop_raw (41,735,027 samples, 0.54%)</title><rect x="16.9966%" y="85" width="0.5422%" height="15" fill="rgb(248,212,6)"/><text x="17.2466%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (11,221,749 samples, 0.15%)</title><rect x="17.6000%" y="69" width="0.1458%" height="15" fill="rgb(208,68,35)"/><text x="17.8500%" y="79.50"></text></g><g><title>resolve_instance (18,804,324 samples, 0.24%)</title><rect x="17.5393%" y="85" width="0.2443%" height="15" fill="rgb(232,128,0)"/><text x="17.7893%" y="95.50"></text></g><g><title>thir_body (25,916,360 samples, 0.34%)</title><rect x="17.7931%" y="85" width="0.3367%" height="15" fill="rgb(207,160,47)"/><text x="18.0431%" y="95.50"></text></g><g><title>mir_const (198,117,937 samples, 2.57%)</title><rect x="15.5871%" y="133" width="2.5739%" height="15" fill="rgb(228,23,34)"/><text x="15.8371%" y="143.50">mi..</text></g><g><title>unsafety_check_result (176,264,752 samples, 2.29%)</title><rect x="15.8710%" y="117" width="2.2900%" height="15" fill="rgb(218,30,26)"/><text x="16.1210%" y="127.50">u..</text></g><g><title>mir_built (160,574,220 samples, 2.09%)</title><rect x="16.0748%" y="101" width="2.0862%" height="15" fill="rgb(220,122,19)"/><text x="16.3248%" y="111.50">m..</text></g><g><title>mir_promoted (222,361,704 samples, 2.89%)</title><rect x="15.3313%" y="149" width="2.8889%" height="15" fill="rgb(250,228,42)"/><text x="15.5813%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (25,305,056 samples, 0.33%)</title><rect x="18.2202%" y="149" width="0.3288%" height="15" fill="rgb(240,193,28)"/><text x="18.4702%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (23,595,847 samples, 0.31%)</title><rect x="18.5490%" y="149" width="0.3066%" height="15" fill="rgb(216,20,37)"/><text x="18.7990%" y="159.50"></text></g><g><title>normalize_projection_ty (12,421,841 samples, 0.16%)</title><rect x="18.6941%" y="133" width="0.1614%" height="15" fill="rgb(206,188,39)"/><text x="18.9441%" y="143.50"></text></g><g><title>type_op_normalize_predicate (18,606,012 samples, 0.24%)</title><rect x="18.8556%" y="149" width="0.2417%" height="15" fill="rgb(217,207,13)"/><text x="19.1056%" y="159.50"></text></g><g><title>normalize_projection_ty (10,552,274 samples, 0.14%)</title><rect x="18.9602%" y="133" width="0.1371%" height="15" fill="rgb(231,73,38)"/><text x="19.2102%" y="143.50"></text></g><g><title>type_op_normalize_ty (13,017,017 samples, 0.17%)</title><rect x="19.0973%" y="149" width="0.1691%" height="15" fill="rgb(225,20,46)"/><text x="19.3473%" y="159.50"></text></g><g><title>type_op_prove_predicate (118,446,478 samples, 1.54%)</title><rect x="19.2664%" y="149" width="1.5388%" height="15" fill="rgb(210,31,41)"/><text x="19.5164%" y="159.50"></text></g><g><title>MIR_borrow_checking (835,183,016 samples, 10.85%)</title><rect x="9.9553%" y="181" width="10.8506%" height="15" fill="rgb(221,200,47)"/><text x="10.2053%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (832,060,017 samples, 10.81%)</title><rect x="9.9959%" y="165" width="10.8100%" height="15" fill="rgb(226,26,5)"/><text x="10.2459%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (10,468,476 samples, 0.14%)</title><rect x="20.8954%" y="165" width="0.1360%" height="15" fill="rgb(249,33,26)"/><text x="21.1454%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (13,739,041 samples, 0.18%)</title><rect x="21.1025%" y="165" width="0.1785%" height="15" fill="rgb(235,183,28)"/><text x="21.3525%" y="175.50"></text></g><g><title>misc_checking_1 (31,003,651 samples, 0.40%)</title><rect x="20.8931%" y="181" width="0.4028%" height="15" fill="rgb(221,5,38)"/><text x="21.1431%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (16,113,111 samples, 0.21%)</title><rect x="21.2959%" y="165" width="0.2093%" height="15" fill="rgb(247,18,42)"/><text x="21.5459%" y="175.50"></text></g><g><title>check_mod_liveness (13,942,757 samples, 0.18%)</title><rect x="21.3241%" y="149" width="0.1811%" height="15" fill="rgb(241,131,45)"/><text x="21.5741%" y="159.50"></text></g><g><title>misc_checking_2 (32,826,138 samples, 0.43%)</title><rect x="21.2959%" y="181" width="0.4265%" height="15" fill="rgb(249,31,29)"/><text x="21.5459%" y="191.50"></text></g><g><title>match_checking (16,710,417 samples, 0.22%)</title><rect x="21.5053%" y="165" width="0.2171%" height="15" fill="rgb(225,111,53)"/><text x="21.7553%" y="175.50"></text></g><g><title>check_match (15,670,606 samples, 0.20%)</title><rect x="21.5188%" y="149" width="0.2036%" height="15" fill="rgb(238,160,17)"/><text x="21.7688%" y="159.50"></text></g><g><title>check_private_in_public (8,509,615 samples, 0.11%)</title><rect x="21.7226%" y="165" width="0.1106%" height="15" fill="rgb(214,148,48)"/><text x="21.9726%" y="175.50"></text></g><g><title>death_checking (12,688,687 samples, 0.16%)</title><rect x="21.8332%" y="165" width="0.1648%" height="15" fill="rgb(232,36,49)"/><text x="22.0832%" y="175.50"></text></g><g><title>param_env (9,050,144 samples, 0.12%)</title><rect x="22.2792%" y="133" width="0.1176%" height="15" fill="rgb(209,103,24)"/><text x="22.5292%" y="143.50"></text></g><g><title>crate_lints (34,384,504 samples, 0.45%)</title><rect x="21.9981%" y="149" width="0.4467%" height="15" fill="rgb(229,88,8)"/><text x="22.2481%" y="159.50"></text></g><g><title>lint_checking (51,605,286 samples, 0.67%)</title><rect x="21.9980%" y="165" width="0.6704%" height="15" fill="rgb(213,181,19)"/><text x="22.2480%" y="175.50"></text></g><g><title>module_lints (17,217,552 samples, 0.22%)</title><rect x="22.4448%" y="149" width="0.2237%" height="15" fill="rgb(254,191,54)"/><text x="22.6948%" y="159.50"></text></g><g><title>lint_mod (17,146,221 samples, 0.22%)</title><rect x="22.4457%" y="133" width="0.2228%" height="15" fill="rgb(241,83,37)"/><text x="22.6957%" y="143.50"></text></g><g><title>privacy_access_levels (14,313,922 samples, 0.19%)</title><rect x="22.6685%" y="165" width="0.1860%" height="15" fill="rgb(233,36,39)"/><text x="22.9185%" y="175.50"></text></g><g><title>privacy_checking_modules (33,039,930 samples, 0.43%)</title><rect x="22.8544%" y="165" width="0.4292%" height="15" fill="rgb(226,3,54)"/><text x="23.1044%" y="175.50"></text></g><g><title>check_mod_privacy (32,976,090 samples, 0.43%)</title><rect x="22.8553%" y="149" width="0.4284%" height="15" fill="rgb(245,192,40)"/><text x="23.1053%" y="159.50"></text></g><g><title>misc_checking_3 (120,494,184 samples, 1.57%)</title><rect x="21.7224%" y="181" width="1.5654%" height="15" fill="rgb(238,167,29)"/><text x="21.9724%" y="191.50"></text></g><g><title>impl_trait_ref (15,032,894 samples, 0.20%)</title><rect x="23.5967%" y="117" width="0.1953%" height="15" fill="rgb(232,182,51)"/><text x="23.8467%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (12,265,446 samples, 0.16%)</title><rect x="23.6327%" y="101" width="0.1594%" height="15" fill="rgb(231,60,39)"/><text x="23.8827%" y="111.50"></text></g><g><title>coherent_trait (42,376,273 samples, 0.55%)</title><rect x="23.3112%" y="149" width="0.5505%" height="15" fill="rgb(208,69,12)"/><text x="23.5612%" y="159.50"></text></g><g><title>specialization_graph_of (41,182,362 samples, 0.54%)</title><rect x="23.3267%" y="133" width="0.5350%" height="15" fill="rgb(235,93,37)"/><text x="23.5767%" y="143.50"></text></g><g><title>coherence_checking (43,733,167 samples, 0.57%)</title><rect x="23.3104%" y="165" width="0.5682%" height="15" fill="rgb(213,116,39)"/><text x="23.5604%" y="175.50"></text></g><g><title>dropck_outlives (21,088,529 samples, 0.27%)</title><rect x="30.8876%" y="117" width="0.2740%" height="15" fill="rgb(222,207,29)"/><text x="31.1376%" y="127.50"></text></g><g><title>evaluate_obligation (42,964,446 samples, 0.56%)</title><rect x="31.1616%" y="117" width="0.5582%" height="15" fill="rgb(206,96,30)"/><text x="31.4116%" y="127.50"></text></g><g><title>evaluate_obligation (12,411,350 samples, 0.16%)</title><rect x="31.9362%" y="101" width="0.1612%" height="15" fill="rgb(218,138,4)"/><text x="32.1862%" y="111.50"></text></g><g><title>method_autoderef_steps (25,347,333 samples, 0.33%)</title><rect x="31.7690%" y="117" width="0.3293%" height="15" fill="rgb(250,191,14)"/><text x="32.0190%" y="127.50"></text></g><g><title>dropck_outlives (9,984,882 samples, 0.13%)</title><rect x="35.0921%" y="101" width="0.1297%" height="15" fill="rgb(239,60,40)"/><text x="35.3421%" y="111.50"></text></g><g><title>evaluate_obligation (25,430,141 samples, 0.33%)</title><rect x="35.2220%" y="101" width="0.3304%" height="15" fill="rgb(206,27,48)"/><text x="35.4720%" y="111.50"></text></g><g><title>method_autoderef_steps (8,853,868 samples, 0.12%)</title><rect x="35.6579%" y="101" width="0.1150%" height="15" fill="rgb(225,35,8)"/><text x="35.9079%" y="111.50"></text></g><g><title>typeck (282,202,334 samples, 3.67%)</title><rect x="32.1501%" y="117" width="3.6663%" height="15" fill="rgb(250,213,24)"/><text x="32.4001%" y="127.50">type..</text></g><g><title>item_bodies_checking (918,268,218 samples, 11.93%)</title><rect x="23.8938%" y="165" width="11.9300%" height="15" fill="rgb(247,123,22)"/><text x="24.1438%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (918,265,498 samples, 11.93%)</title><rect x="23.8938%" y="149" width="11.9299%" height="15" fill="rgb(231,138,38)"/><text x="24.1438%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (914,441,811 samples, 11.88%)</title><rect x="23.9435%" y="133" width="11.8803%" height="15" fill="rgb(231,145,46)"/><text x="24.1935%" y="143.50">typeck</text></g><g><title>mir_borrowck (14,214,532 samples, 0.18%)</title><rect x="36.5534%" y="101" width="0.1847%" height="15" fill="rgb(251,118,11)"/><text x="36.8034%" y="111.50"></text></g><g><title>mir_built (44,586,679 samples, 0.58%)</title><rect x="36.7549%" y="53" width="0.5793%" height="15" fill="rgb(217,147,25)"/><text x="37.0049%" y="63.50"></text></g><g><title>typeck (40,209,496 samples, 0.52%)</title><rect x="36.8117%" y="37" width="0.5224%" height="15" fill="rgb(247,81,37)"/><text x="37.0617%" y="47.50"></text></g><g><title>mir_const (48,793,363 samples, 0.63%)</title><rect x="36.7433%" y="85" width="0.6339%" height="15" fill="rgb(209,12,38)"/><text x="36.9933%" y="95.50"></text></g><g><title>unsafety_check_result (48,212,436 samples, 0.63%)</title><rect x="36.7508%" y="69" width="0.6264%" height="15" fill="rgb(227,1,9)"/><text x="37.0008%" y="79.50"></text></g><g><title>mir_promoted (49,242,165 samples, 0.64%)</title><rect x="36.7381%" y="101" width="0.6397%" height="15" fill="rgb(248,47,43)"/><text x="36.9881%" y="111.50"></text></g><g><title>type_of (74,264,234 samples, 0.96%)</title><rect x="36.4433%" y="133" width="0.9648%" height="15" fill="rgb(221,10,30)"/><text x="36.6933%" y="143.50"></text></g><g><title>mir_borrowck (73,974,901 samples, 0.96%)</title><rect x="36.4470%" y="117" width="0.9611%" height="15" fill="rgb(210,229,1)"/><text x="36.6970%" y="127.50"></text></g><g><title>item_types_checking (127,744,568 samples, 1.66%)</title><rect x="35.8238%" y="165" width="1.6596%" height="15" fill="rgb(222,148,37)"/><text x="36.0738%" y="175.50"></text></g><g><title>check_mod_item_types (127,652,018 samples, 1.66%)</title><rect x="35.8250%" y="149" width="1.6584%" height="15" fill="rgb(234,67,33)"/><text x="36.0750%" y="159.50"></text></g><g><title>explicit_predicates_of (10,223,236 samples, 0.13%)</title><rect x="37.8089%" y="101" width="0.1328%" height="15" fill="rgb(247,98,35)"/><text x="38.0589%" y="111.50"></text></g><g><title>predicates_of (23,591,430 samples, 0.31%)</title><rect x="37.7564%" y="133" width="0.3065%" height="15" fill="rgb(247,138,52)"/><text x="38.0064%" y="143.50"></text></g><g><title>predicates_defined_on (22,145,976 samples, 0.29%)</title><rect x="37.7752%" y="117" width="0.2877%" height="15" fill="rgb(213,79,30)"/><text x="38.0252%" y="127.50"></text></g><g><title>inferred_outlives_of (9,328,302 samples, 0.12%)</title><rect x="37.9417%" y="101" width="0.1212%" height="15" fill="rgb(246,177,23)"/><text x="38.1917%" y="111.50"></text></g><g><title>inferred_outlives_crate (8,838,409 samples, 0.11%)</title><rect x="37.9480%" y="85" width="0.1148%" height="15" fill="rgb(230,62,27)"/><text x="38.1980%" y="95.50"></text></g><g><title>type_collecting (47,760,408 samples, 0.62%)</title><rect x="37.4844%" y="165" width="0.6205%" height="15" fill="rgb(216,154,8)"/><text x="37.7344%" y="175.50"></text></g><g><title>collect_mod_item_types (47,687,868 samples, 0.62%)</title><rect x="37.4854%" y="149" width="0.6196%" height="15" fill="rgb(244,35,45)"/><text x="37.7354%" y="159.50"></text></g><g><title>evaluate_obligation (10,374,609 samples, 0.13%)</title><rect x="38.9225%" y="133" width="0.1348%" height="15" fill="rgb(251,115,12)"/><text x="39.1725%" y="143.50"></text></g><g><title>param_env (9,578,260 samples, 0.12%)</title><rect x="39.1585%" y="133" width="0.1244%" height="15" fill="rgb(240,54,50)"/><text x="39.4085%" y="143.50"></text></g><g><title>region_scope_tree (8,262,852 samples, 0.11%)</title><rect x="39.2866%" y="133" width="0.1073%" height="15" fill="rgb(233,84,52)"/><text x="39.5366%" y="143.50"></text></g><g><title>check_impl_item_well_formed (94,827,862 samples, 1.23%)</title><rect x="38.1735%" y="149" width="1.2320%" height="15" fill="rgb(207,117,47)"/><text x="38.4235%" y="159.50"></text></g><g><title>evaluate_obligation (10,679,119 samples, 0.14%)</title><rect x="40.0425%" y="133" width="0.1387%" height="15" fill="rgb(249,43,39)"/><text x="40.2925%" y="143.50"></text></g><g><title>param_env (8,206,321 samples, 0.11%)</title><rect x="40.2346%" y="133" width="0.1066%" height="15" fill="rgb(209,38,44)"/><text x="40.4846%" y="143.50"></text></g><g><title>check_item_well_formed (75,477,584 samples, 0.98%)</title><rect x="39.4055%" y="149" width="0.9806%" height="15" fill="rgb(236,212,23)"/><text x="39.6555%" y="159.50"></text></g><g><title>analysis (2,349,458,525 samples, 30.52%)</title><rect x="9.8797%" y="197" width="30.5238%" height="15" fill="rgb(242,79,21)"/><text x="10.1297%" y="207.50">analysis</text></g><g><title>type_check_crate (1,317,417,930 samples, 17.12%)</title><rect x="23.2878%" y="181" width="17.1157%" height="15" fill="rgb(211,96,35)"/><text x="23.5378%" y="191.50">type_check_crate</text></g><g><title>wf_checking (176,784,398 samples, 2.30%)</title><rect x="38.1067%" y="165" width="2.2968%" height="15" fill="rgb(253,215,40)"/><text x="38.3567%" y="175.50">w..</text></g><g><title>layout_of (13,741,655 samples, 0.18%)</title><rect x="47.6318%" y="149" width="0.1785%" height="15" fill="rgb(211,81,21)"/><text x="47.8818%" y="159.50"></text></g><g><title>predicates_of (8,165,556 samples, 0.11%)</title><rect x="48.0244%" y="133" width="0.1061%" height="15" fill="rgb(208,190,38)"/><text x="48.2744%" y="143.50"></text></g><g><title>param_env (24,681,334 samples, 0.32%)</title><rect x="47.8103%" y="149" width="0.3207%" height="15" fill="rgb(235,213,38)"/><text x="48.0603%" y="159.50"></text></g><g><title>normalize_projection_ty (9,096,888 samples, 0.12%)</title><rect x="48.1741%" y="133" width="0.1182%" height="15" fill="rgb(237,122,38)"/><text x="48.4241%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (12,427,187 samples, 0.16%)</title><rect x="48.1309%" y="149" width="0.1615%" height="15" fill="rgb(244,218,35)"/><text x="48.3809%" y="159.50"></text></g><g><title>fn_abi_of_instance (103,313,682 samples, 1.34%)</title><rect x="46.9554%" y="165" width="1.3422%" height="15" fill="rgb(240,68,47)"/><text x="47.2054%" y="175.50"></text></g><g><title>layout_of (20,382,141 samples, 0.26%)</title><rect x="48.3252%" y="165" width="0.2648%" height="15" fill="rgb(210,16,53)"/><text x="48.5752%" y="175.50"></text></g><g><title>symbol_name (10,361,190 samples, 0.13%)</title><rect x="48.5904%" y="165" width="0.1346%" height="15" fill="rgb(235,124,12)"/><text x="48.8404%" y="175.50"></text></g><g><title>codegen_module (637,688,098 samples, 8.28%)</title><rect x="40.4826%" y="181" width="8.2847%" height="15" fill="rgb(224,169,11)"/><text x="40.7326%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (644,120,145 samples, 8.37%)</title><rect x="40.4036%" y="197" width="8.3683%" height="15" fill="rgb(250,166,2)"/><text x="40.6536%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,244,517,587 samples, 29.16%)</title><rect x="48.7749%" y="181" width="29.1604%" height="15" fill="rgb(242,216,29)"/><text x="49.0249%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,184,991,419 samples, 28.39%)</title><rect x="49.5483%" y="165" width="28.3870%" height="15" fill="rgb(230,116,27)"/><text x="49.7983%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,457,205,007 samples, 31.92%)</title><rect x="48.7718%" y="197" width="31.9236%" height="15" fill="rgb(228,99,48)"/><text x="49.0218%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (212,451,467 samples, 2.76%)</title><rect x="77.9353%" y="181" width="2.7601%" height="15" fill="rgb(253,11,6)"/><text x="78.1853%" y="191.50">LL..</text></g><g><title>metadata_register_crate (28,051,890 samples, 0.36%)</title><rect x="86.0664%" y="149" width="0.3644%" height="15" fill="rgb(247,143,39)"/><text x="86.3164%" y="159.50"></text></g><g><title>metadata_register_crate (17,004,890 samples, 0.22%)</title><rect x="86.2099%" y="133" width="0.2209%" height="15" fill="rgb(236,97,10)"/><text x="86.4599%" y="143.50"></text></g><g><title>metadata_register_crate (9,692,501 samples, 0.13%)</title><rect x="86.3049%" y="117" width="0.1259%" height="15" fill="rgb(233,208,19)"/><text x="86.5549%" y="127.50"></text></g><g><title>macro_expand_crate (436,224,475 samples, 5.67%)</title><rect x="80.8139%" y="181" width="5.6674%" height="15" fill="rgb(216,164,2)"/><text x="81.0639%" y="191.50">macro_e..</text></g><g><title>expand_crate (436,211,315 samples, 5.67%)</title><rect x="80.8141%" y="165" width="5.6672%" height="15" fill="rgb(220,129,5)"/><text x="81.0641%" y="175.50">expand_..</text></g><g><title>late_resolve_crate (33,975,941 samples, 0.44%)</title><rect x="86.5415%" y="165" width="0.4414%" height="15" fill="rgb(242,17,10)"/><text x="86.7915%" y="175.50"></text></g><g><title>configure_and_expand (490,081,822 samples, 6.37%)</title><rect x="80.6954%" y="197" width="6.3671%" height="15" fill="rgb(242,107,0)"/><text x="80.9454%" y="207.50">configur..</text></g><g><title>resolve_crate (44,678,008 samples, 0.58%)</title><rect x="86.4820%" y="181" width="0.5804%" height="15" fill="rgb(251,28,31)"/><text x="86.7320%" y="191.50"></text></g><g><title>drop_ast (8,169,621 samples, 0.11%)</title><rect x="87.0625%" y="197" width="0.1061%" height="15" fill="rgb(233,223,10)"/><text x="87.3125%" y="207.50"></text></g><g><title>early_lint_checks (11,812,509 samples, 0.15%)</title><rect x="87.1692%" y="197" width="0.1535%" height="15" fill="rgb(215,21,27)"/><text x="87.4192%" y="207.50"></text></g><g><title>free_global_ctxt (36,147,261 samples, 0.47%)</title><rect x="87.3227%" y="197" width="0.4696%" height="15" fill="rgb(232,23,21)"/><text x="87.5727%" y="207.50"></text></g><g><title>codegen_fn_attrs (9,996,501 samples, 0.13%)</title><rect x="89.3012%" y="117" width="0.1299%" height="15" fill="rgb(244,5,23)"/><text x="89.5512%" y="127.50"></text></g><g><title>mir_shims (15,416,314 samples, 0.20%)</title><rect x="89.5250%" y="117" width="0.2003%" height="15" fill="rgb(226,81,46)"/><text x="89.7750%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (18,479,608 samples, 0.24%)</title><rect x="90.0811%" y="101" width="0.2401%" height="15" fill="rgb(247,70,30)"/><text x="90.3311%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (27,218,432 samples, 0.35%)</title><rect x="90.3211%" y="101" width="0.3536%" height="15" fill="rgb(212,68,19)"/><text x="90.5711%" y="111.50"></text></g><g><title>optimized_mir (77,277,650 samples, 1.00%)</title><rect x="89.7253%" y="117" width="1.0040%" height="15" fill="rgb(240,187,13)"/><text x="89.9753%" y="127.50"></text></g><g><title>evaluate_obligation (13,816,287 samples, 0.18%)</title><rect x="91.9100%" y="85" width="0.1795%" height="15" fill="rgb(223,113,26)"/><text x="92.1600%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (91,903,131 samples, 1.19%)</title><rect x="90.9793%" y="101" width="1.1940%" height="15" fill="rgb(206,192,2)"/><text x="91.2293%" y="111.50"></text></g><g><title>needs_drop_raw (7,766,053 samples, 0.10%)</title><rect x="92.2225%" y="101" width="0.1009%" height="15" fill="rgb(241,108,4)"/><text x="92.4725%" y="111.50"></text></g><g><title>resolve_instance (129,457,377 samples, 1.68%)</title><rect x="90.7293%" y="117" width="1.6819%" height="15" fill="rgb(247,173,49)"/><text x="90.9793%" y="127.50"></text></g><g><title>normalize_projection_ty (12,512,523 samples, 0.16%)</title><rect x="92.4492%" y="101" width="0.1626%" height="15" fill="rgb(224,114,35)"/><text x="92.6992%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (15,494,178 samples, 0.20%)</title><rect x="92.4112%" y="117" width="0.2013%" height="15" fill="rgb(245,159,27)"/><text x="92.6612%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,950,542 samples, 0.12%)</title><rect x="92.6481%" y="101" width="0.1163%" height="15" fill="rgb(245,172,44)"/><text x="92.8981%" y="111.50"></text></g><g><title>eval_to_const_value_raw (8,652,461 samples, 0.11%)</title><rect x="92.6519%" y="85" width="0.1124%" height="15" fill="rgb(236,23,11)"/><text x="92.9019%" y="95.50"></text></g><g><title>eval_to_allocation_raw (8,170,786 samples, 0.11%)</title><rect x="92.6582%" y="69" width="0.1062%" height="15" fill="rgb(205,117,38)"/><text x="92.9082%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (12,019,559 samples, 0.16%)</title><rect x="92.6125%" y="117" width="0.1562%" height="15" fill="rgb(237,72,25)"/><text x="92.8625%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (32,195,710 samples, 0.42%)</title><rect x="92.7714%" y="117" width="0.4183%" height="15" fill="rgb(244,70,9)"/><text x="93.0214%" y="127.50"></text></g><g><title>upstream_monomorphizations (31,881,988 samples, 0.41%)</title><rect x="92.7754%" y="101" width="0.4142%" height="15" fill="rgb(217,125,39)"/><text x="93.0254%" y="111.50"></text></g><g><title>exported_symbols (28,784,751 samples, 0.37%)</title><rect x="92.8157%" y="85" width="0.3740%" height="15" fill="rgb(235,36,10)"/><text x="93.0657%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (28,746,151 samples, 0.37%)</title><rect x="92.8162%" y="69" width="0.3735%" height="15" fill="rgb(251,123,47)"/><text x="93.0662%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (368,503,196 samples, 4.79%)</title><rect x="88.5090%" y="133" width="4.7875%" height="15" fill="rgb(221,13,13)"/><text x="88.7590%" y="143.50">monomo..</text></g><g><title>vtable_entries (8,230,425 samples, 0.11%)</title><rect x="93.1896%" y="117" width="0.1069%" height="15" fill="rgb(238,131,9)"/><text x="93.4396%" y="127.50"></text></g><g><title>monomorphization_collector (369,689,618 samples, 4.80%)</title><rect x="88.5090%" y="149" width="4.8029%" height="15" fill="rgb(211,50,8)"/><text x="88.7590%" y="159.50">monomo..</text></g><g><title>assert_symbols_are_distinct (40,790,189 samples, 0.53%)</title><rect x="93.3120%" y="133" width="0.5299%" height="15" fill="rgb(245,182,24)"/><text x="93.5620%" y="143.50"></text></g><g><title>symbol_name (35,765,698 samples, 0.46%)</title><rect x="93.3773%" y="117" width="0.4647%" height="15" fill="rgb(242,14,37)"/><text x="93.6273%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (426,852,250 samples, 5.55%)</title><rect x="88.5063%" y="165" width="5.5456%" height="15" fill="rgb(246,228,12)"/><text x="88.7563%" y="175.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (56,952,551 samples, 0.74%)</title><rect x="93.3119%" y="149" width="0.7399%" height="15" fill="rgb(213,55,15)"/><text x="93.5619%" y="159.50"></text></g><g><title>cgu_partitioning (16,156,332 samples, 0.21%)</title><rect x="93.8419%" y="133" width="0.2099%" height="15" fill="rgb(209,9,3)"/><text x="94.0919%" y="143.50"></text></g><g><title>exported_symbols (433,474,017 samples, 5.63%)</title><rect x="88.4772%" y="181" width="5.6316%" height="15" fill="rgb(230,59,30)"/><text x="88.7272%" y="191.50">exporte..</text></g><g><title>layout_of (10,296,938 samples, 0.13%)</title><rect x="95.2808%" y="149" width="0.1338%" height="15" fill="rgb(209,121,21)"/><text x="95.5308%" y="159.50"></text></g><g><title>layout_of (24,804,142 samples, 0.32%)</title><rect x="95.1129%" y="165" width="0.3223%" height="15" fill="rgb(220,109,13)"/><text x="95.3629%" y="175.50"></text></g><g><title>is_copy_raw (19,230,762 samples, 0.25%)</title><rect x="96.7402%" y="133" width="0.2498%" height="15" fill="rgb(232,18,1)"/><text x="96.9902%" y="143.50"></text></g><g><title>evaluate_obligation (13,901,768 samples, 0.18%)</title><rect x="96.8095%" y="117" width="0.1806%" height="15" fill="rgb(215,41,42)"/><text x="97.0595%" y="127.50"></text></g><g><title>needs_drop_raw (22,731,647 samples, 0.30%)</title><rect x="96.6967%" y="149" width="0.2953%" height="15" fill="rgb(224,123,36)"/><text x="96.9467%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (124,556,889 samples, 1.62%)</title><rect x="95.4352%" y="165" width="1.6182%" height="15" fill="rgb(240,125,3)"/><text x="95.6852%" y="175.50"></text></g><g><title>optimized_mir (228,525,343 samples, 2.97%)</title><rect x="94.1471%" y="181" width="2.9690%" height="15" fill="rgb(205,98,50)"/><text x="94.3971%" y="191.50">opt..</text></g><g><title>generate_crate_metadata (723,040,895 samples, 9.39%)</title><rect x="87.7923%" y="197" width="9.3936%" height="15" fill="rgb(205,185,37)"/><text x="88.0423%" y="207.50">generate_crat..</text></g><g><title>hir_lowering (80,530,456 samples, 1.05%)</title><rect x="97.1860%" y="197" width="1.0462%" height="15" fill="rgb(238,207,15)"/><text x="97.4360%" y="207.50"></text></g><g><title>finish_ongoing_codegen (102,413,494 samples, 1.33%)</title><rect x="98.2325%" y="181" width="1.3305%" height="15" fill="rgb(213,199,42)"/><text x="98.4825%" y="191.50"></text></g><g><title>link_crate (17,768,108 samples, 0.23%)</title><rect x="99.5630%" y="181" width="0.2308%" height="15" fill="rgb(235,201,11)"/><text x="99.8130%" y="191.50"></text></g><g><title>link_binary (17,392,944 samples, 0.23%)</title><rect x="99.5679%" y="165" width="0.2260%" height="15" fill="rgb(207,46,11)"/><text x="99.8179%" y="175.50"></text></g><g><title>link_rlib (15,447,875 samples, 0.20%)</title><rect x="99.5932%" y="149" width="0.2007%" height="15" fill="rgb(241,35,35)"/><text x="99.8432%" y="159.50"></text></g><g><title>link (120,212,473 samples, 1.56%)</title><rect x="98.2322%" y="197" width="1.5618%" height="15" fill="rgb(243,32,47)"/><text x="98.4822%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (11,532,365 samples, 0.15%)</title><rect x="99.8017%" y="197" width="0.1498%" height="15" fill="rgb(247,202,23)"/><text x="100.0517%" y="207.50"></text></g><g><title>all (7,697,146,870 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (7,697,146,870 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>