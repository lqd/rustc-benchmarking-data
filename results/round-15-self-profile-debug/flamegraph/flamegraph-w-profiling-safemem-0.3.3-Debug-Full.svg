<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,914,361 samples, 7.47%)</title><rect x="0.9086%" y="245" width="7.4674%" height="15" fill="rgb(227,0,7)"/><text x="1.1586%" y="255.50">LLVM_passes</text></g><g><title>param_env (82,771 samples, 0.10%)</title><rect x="12.3974%" y="165" width="0.1045%" height="15" fill="rgb(217,0,24)"/><text x="12.6474%" y="175.50"></text></g><g><title>item_attrs (140,370 samples, 0.18%)</title><rect x="12.7236%" y="133" width="0.1772%" height="15" fill="rgb(221,193,54)"/><text x="12.9736%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (136,090 samples, 0.17%)</title><rect x="12.7290%" y="117" width="0.1718%" height="15" fill="rgb(248,212,6)"/><text x="12.9790%" y="127.50"></text></g><g><title>codegen_fn_attrs (188,100 samples, 0.24%)</title><rect x="12.6689%" y="149" width="0.2375%" height="15" fill="rgb(208,68,35)"/><text x="12.9189%" y="159.50"></text></g><g><title>is_copy_raw (117,612 samples, 0.15%)</title><rect x="13.5546%" y="133" width="0.1485%" height="15" fill="rgb(232,128,0)"/><text x="13.8046%" y="143.50"></text></g><g><title>evaluate_obligation (102,562 samples, 0.13%)</title><rect x="13.5736%" y="117" width="0.1295%" height="15" fill="rgb(207,160,47)"/><text x="13.8236%" y="127.50"></text></g><g><title>explicit_predicates_of (83,171 samples, 0.11%)</title><rect x="13.8612%" y="53" width="0.1050%" height="15" fill="rgb(228,23,34)"/><text x="14.1112%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (81,651 samples, 0.10%)</title><rect x="13.8631%" y="37" width="0.1031%" height="15" fill="rgb(218,30,26)"/><text x="14.1131%" y="47.50"></text></g><g><title>needs_drop_raw (210,732 samples, 0.27%)</title><rect x="13.7031%" y="133" width="0.2661%" height="15" fill="rgb(220,122,19)"/><text x="13.9531%" y="143.50"></text></g><g><title>is_copy_raw (203,212 samples, 0.26%)</title><rect x="13.7126%" y="117" width="0.2566%" height="15" fill="rgb(250,228,42)"/><text x="13.9626%" y="127.50"></text></g><g><title>evaluate_obligation (192,452 samples, 0.24%)</title><rect x="13.7262%" y="101" width="0.2430%" height="15" fill="rgb(240,193,28)"/><text x="13.9762%" y="111.50"></text></g><g><title>predicates_of (96,612 samples, 0.12%)</title><rect x="13.8472%" y="85" width="0.1220%" height="15" fill="rgb(216,20,37)"/><text x="14.0972%" y="95.50"></text></g><g><title>predicates_defined_on (89,841 samples, 0.11%)</title><rect x="13.8558%" y="69" width="0.1134%" height="15" fill="rgb(206,188,39)"/><text x="14.1058%" y="79.50"></text></g><g><title>thir_body (251,162 samples, 0.32%)</title><rect x="13.9993%" y="133" width="0.3171%" height="15" fill="rgb(217,207,13)"/><text x="14.2493%" y="143.50"></text></g><g><title>mir_const (1,710,037 samples, 2.16%)</title><rect x="12.1592%" y="181" width="2.1591%" height="15" fill="rgb(231,73,38)"/><text x="12.4092%" y="191.50">m..</text></g><g><title>unsafety_check_result (1,438,664 samples, 1.82%)</title><rect x="12.5019%" y="165" width="1.8164%" height="15" fill="rgb(225,20,46)"/><text x="12.7519%" y="175.50">u..</text></g><g><title>mir_built (1,118,271 samples, 1.41%)</title><rect x="12.9064%" y="149" width="1.4119%" height="15" fill="rgb(210,31,41)"/><text x="13.1564%" y="159.50"></text></g><g><title>mir_promoted (1,941,419 samples, 2.45%)</title><rect x="11.8775%" y="197" width="2.4512%" height="15" fill="rgb(221,200,47)"/><text x="12.1275%" y="207.50">mi..</text></g><g><title>type_op_ascribe_user_type (81,631 samples, 0.10%)</title><rect x="14.3287%" y="197" width="0.1031%" height="15" fill="rgb(226,26,5)"/><text x="14.5787%" y="207.50"></text></g><g><title>type_op_prove_predicate (422,584 samples, 0.53%)</title><rect x="14.4318%" y="197" width="0.5336%" height="15" fill="rgb(249,33,26)"/><text x="14.6818%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,065,681 samples, 6.40%)</title><rect x="8.5804%" y="229" width="6.3959%" height="15" fill="rgb(235,183,28)"/><text x="8.8304%" y="239.50">MIR_borr..</text></g><g><title>mir_borrowck (5,058,691 samples, 6.39%)</title><rect x="8.5892%" y="213" width="6.3871%" height="15" fill="rgb(221,5,38)"/><text x="8.8392%" y="223.50">mir_borr..</text></g><g><title>hir_module_items (109,151 samples, 0.14%)</title><rect x="14.9804%" y="229" width="0.1378%" height="15" fill="rgb(247,18,42)"/><text x="15.2304%" y="239.50"></text></g><g><title>codegen_fn_attrs (175,672 samples, 0.22%)</title><rect x="15.2572%" y="197" width="0.2218%" height="15" fill="rgb(241,131,45)"/><text x="15.5072%" y="207.50"></text></g><g><title>check_mod_attrs (261,802 samples, 0.33%)</title><rect x="15.1487%" y="213" width="0.3305%" height="15" fill="rgb(249,31,29)"/><text x="15.3987%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (225,072 samples, 0.28%)</title><rect x="15.5736%" y="213" width="0.2842%" height="15" fill="rgb(225,111,53)"/><text x="15.8236%" y="223.50"></text></g><g><title>misc_checking_1 (614,846 samples, 0.78%)</title><rect x="15.1187%" y="229" width="0.7763%" height="15" fill="rgb(238,160,17)"/><text x="15.3687%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (181,112 samples, 0.23%)</title><rect x="15.8978%" y="213" width="0.2287%" height="15" fill="rgb(214,148,48)"/><text x="16.1478%" y="223.50"></text></g><g><title>check_mod_liveness (142,321 samples, 0.18%)</title><rect x="15.9468%" y="197" width="0.1797%" height="15" fill="rgb(232,36,49)"/><text x="16.1968%" y="207.50"></text></g><g><title>misc_checking_2 (318,144 samples, 0.40%)</title><rect x="15.8950%" y="229" width="0.4017%" height="15" fill="rgb(209,103,24)"/><text x="16.1450%" y="239.50"></text></g><g><title>match_checking (134,852 samples, 0.17%)</title><rect x="16.1265%" y="213" width="0.1703%" height="15" fill="rgb(229,88,8)"/><text x="16.3765%" y="223.50"></text></g><g><title>check_match (129,332 samples, 0.16%)</title><rect x="16.1334%" y="197" width="0.1633%" height="15" fill="rgb(213,181,19)"/><text x="16.3834%" y="207.50"></text></g><g><title>crate_lints (92,611 samples, 0.12%)</title><rect x="16.4030%" y="197" width="0.1169%" height="15" fill="rgb(254,191,54)"/><text x="16.6530%" y="207.50"></text></g><g><title>lint_checking (150,002 samples, 0.19%)</title><rect x="16.4017%" y="213" width="0.1894%" height="15" fill="rgb(241,83,37)"/><text x="16.6517%" y="223.50"></text></g><g><title>privacy_checking_modules (117,841 samples, 0.15%)</title><rect x="16.6350%" y="213" width="0.1488%" height="15" fill="rgb(233,36,39)"/><text x="16.8850%" y="223.50"></text></g><g><title>check_mod_privacy (116,821 samples, 0.15%)</title><rect x="16.6362%" y="197" width="0.1475%" height="15" fill="rgb(226,3,54)"/><text x="16.8862%" y="207.50"></text></g><g><title>misc_checking_3 (393,794 samples, 0.50%)</title><rect x="16.2967%" y="229" width="0.4972%" height="15" fill="rgb(245,192,40)"/><text x="16.5467%" y="239.50"></text></g><g><title>adt_sized_constraint (87,861 samples, 0.11%)</title><rect x="31.2506%" y="165" width="0.1109%" height="15" fill="rgb(238,167,29)"/><text x="31.5006%" y="175.50"></text></g><g><title>associated_item (702,915 samples, 0.89%)</title><rect x="31.7278%" y="149" width="0.8875%" height="15" fill="rgb(232,182,51)"/><text x="31.9778%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (514,104 samples, 0.65%)</title><rect x="31.9661%" y="133" width="0.6491%" height="15" fill="rgb(231,60,39)"/><text x="32.2161%" y="143.50"></text></g><g><title>associated_items (1,047,880 samples, 1.32%)</title><rect x="31.3649%" y="165" width="1.3230%" height="15" fill="rgb(208,69,12)"/><text x="31.6149%" y="175.50"></text></g><g><title>impl_parent (170,401 samples, 0.22%)</title><rect x="33.2686%" y="53" width="0.2151%" height="15" fill="rgb(235,93,37)"/><text x="33.5186%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (119,781 samples, 0.15%)</title><rect x="33.3326%" y="37" width="0.1512%" height="15" fill="rgb(213,116,39)"/><text x="33.5826%" y="47.50"></text></g><g><title>impl_trait_ref (656,239 samples, 0.83%)</title><rect x="33.4838%" y="53" width="0.8286%" height="15" fill="rgb(222,207,29)"/><text x="33.7338%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (608,839 samples, 0.77%)</title><rect x="33.5436%" y="37" width="0.7687%" height="15" fill="rgb(206,96,30)"/><text x="33.7936%" y="47.50"></text></g><g><title>coherent_trait (1,151,692 samples, 1.45%)</title><rect x="32.9552%" y="85" width="1.4541%" height="15" fill="rgb(218,138,4)"/><text x="33.2052%" y="95.50"></text></g><g><title>specialization_graph_of (1,141,472 samples, 1.44%)</title><rect x="32.9681%" y="69" width="1.4412%" height="15" fill="rgb(250,191,14)"/><text x="33.2181%" y="79.50"></text></g><g><title>adt_destructor (1,161,972 samples, 1.47%)</title><rect x="32.9442%" y="117" width="1.4671%" height="15" fill="rgb(239,60,40)"/><text x="33.1942%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,160,352 samples, 1.47%)</title><rect x="32.9463%" y="101" width="1.4651%" height="15" fill="rgb(206,27,48)"/><text x="33.1963%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,188,872 samples, 1.50%)</title><rect x="32.9127%" y="133" width="1.5011%" height="15" fill="rgb(225,35,8)"/><text x="33.1627%" y="143.50"></text></g><g><title>dropck_outlives (1,300,142 samples, 1.64%)</title><rect x="32.7970%" y="165" width="1.6416%" height="15" fill="rgb(250,213,24)"/><text x="33.0470%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,227,482 samples, 1.55%)</title><rect x="32.8887%" y="149" width="1.5498%" height="15" fill="rgb(247,123,22)"/><text x="33.1387%" y="159.50"></text></g><g><title>predicates_of (94,230 samples, 0.12%)</title><rect x="35.4395%" y="149" width="0.1190%" height="15" fill="rgb(231,138,38)"/><text x="35.6895%" y="159.50"></text></g><g><title>trait_impls_of (722,747 samples, 0.91%)</title><rect x="35.6604%" y="149" width="0.9125%" height="15" fill="rgb(231,145,46)"/><text x="35.9104%" y="159.50"></text></g><g><title>implementations_of_trait (192,754 samples, 0.24%)</title><rect x="36.3295%" y="133" width="0.2434%" height="15" fill="rgb(251,118,11)"/><text x="36.5795%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (132,703 samples, 0.17%)</title><rect x="36.4053%" y="117" width="0.1675%" height="15" fill="rgb(217,147,25)"/><text x="36.6553%" y="127.50"></text></g><g><title>evaluate_obligation (1,692,447 samples, 2.14%)</title><rect x="34.4385%" y="165" width="2.1369%" height="15" fill="rgb(247,81,37)"/><text x="34.6885%" y="175.50">e..</text></g><g><title>fn_sig (186,573 samples, 0.24%)</title><rect x="36.6010%" y="165" width="0.2356%" height="15" fill="rgb(209,12,38)"/><text x="36.8510%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (166,293 samples, 0.21%)</title><rect x="36.6266%" y="149" width="0.2100%" height="15" fill="rgb(227,1,9)"/><text x="36.8766%" y="159.50"></text></g><g><title>generics_of (112,523 samples, 0.14%)</title><rect x="36.8365%" y="165" width="0.1421%" height="15" fill="rgb(248,47,43)"/><text x="37.0865%" y="175.50"></text></g><g><title>associated_item (134,712 samples, 0.17%)</title><rect x="36.9861%" y="133" width="0.1701%" height="15" fill="rgb(221,10,30)"/><text x="37.2361%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (133,482 samples, 0.17%)</title><rect x="36.9877%" y="117" width="0.1685%" height="15" fill="rgb(210,229,1)"/><text x="37.2377%" y="127.50"></text></g><g><title>impl_item_implementor_ids (149,522 samples, 0.19%)</title><rect x="36.9786%" y="165" width="0.1888%" height="15" fill="rgb(222,148,37)"/><text x="37.2286%" y="175.50"></text></g><g><title>associated_items (146,582 samples, 0.19%)</title><rect x="36.9823%" y="149" width="0.1851%" height="15" fill="rgb(234,67,33)"/><text x="37.2323%" y="159.50"></text></g><g><title>item_attrs (184,572 samples, 0.23%)</title><rect x="37.2935%" y="165" width="0.2330%" height="15" fill="rgb(247,98,35)"/><text x="37.5435%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (178,651 samples, 0.23%)</title><rect x="37.3010%" y="149" width="0.2256%" height="15" fill="rgb(247,138,52)"/><text x="37.5510%" y="159.50"></text></g><g><title>evaluate_obligation (211,501 samples, 0.27%)</title><rect x="37.8217%" y="149" width="0.2670%" height="15" fill="rgb(213,79,30)"/><text x="38.0717%" y="159.50"></text></g><g><title>method_autoderef_steps (383,083 samples, 0.48%)</title><rect x="37.6368%" y="165" width="0.4837%" height="15" fill="rgb(246,177,23)"/><text x="37.8868%" y="175.50"></text></g><g><title>explicit_predicates_of (130,271 samples, 0.16%)</title><rect x="38.4245%" y="133" width="0.1645%" height="15" fill="rgb(230,62,27)"/><text x="38.6745%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (99,740 samples, 0.13%)</title><rect x="38.4631%" y="117" width="0.1259%" height="15" fill="rgb(216,154,8)"/><text x="38.7131%" y="127.50"></text></g><g><title>predicates_of (407,758 samples, 0.51%)</title><rect x="38.1494%" y="165" width="0.5148%" height="15" fill="rgb(244,35,45)"/><text x="38.3994%" y="175.50"></text></g><g><title>predicates_defined_on (287,844 samples, 0.36%)</title><rect x="38.3008%" y="149" width="0.3634%" height="15" fill="rgb(251,115,12)"/><text x="38.5508%" y="159.50"></text></g><g><title>type_of (92,711 samples, 0.12%)</title><rect x="38.7431%" y="165" width="0.1171%" height="15" fill="rgb(240,54,50)"/><text x="38.9931%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (79,331 samples, 0.10%)</title><rect x="38.7600%" y="149" width="0.1002%" height="15" fill="rgb(233,84,52)"/><text x="39.0100%" y="159.50"></text></g><g><title>item_bodies_checking (17,442,628 samples, 22.02%)</title><rect x="16.8801%" y="213" width="22.0230%" height="15" fill="rgb(207,117,47)"/><text x="17.1301%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,438,908 samples, 22.02%)</title><rect x="16.8848%" y="197" width="22.0183%" height="15" fill="rgb(249,43,39)"/><text x="17.1348%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (17,426,398 samples, 22.00%)</title><rect x="16.9006%" y="181" width="22.0025%" height="15" fill="rgb(209,38,44)"/><text x="17.1506%" y="191.50">typeck</text></g><g><title>fn_sig (92,251 samples, 0.12%)</title><rect x="38.9893%" y="181" width="0.1165%" height="15" fill="rgb(236,212,23)"/><text x="39.2393%" y="191.50"></text></g><g><title>named_region_map (115,811 samples, 0.15%)</title><rect x="39.1591%" y="165" width="0.1462%" height="15" fill="rgb(242,79,21)"/><text x="39.4091%" y="175.50"></text></g><g><title>resolve_lifetimes (108,621 samples, 0.14%)</title><rect x="39.1682%" y="149" width="0.1371%" height="15" fill="rgb(211,96,35)"/><text x="39.4182%" y="159.50"></text></g><g><title>generics_of (170,891 samples, 0.22%)</title><rect x="39.1057%" y="181" width="0.2158%" height="15" fill="rgb(253,215,40)"/><text x="39.3557%" y="191.50"></text></g><g><title>explicit_predicates_of (106,591 samples, 0.13%)</title><rect x="39.3400%" y="149" width="0.1346%" height="15" fill="rgb(211,81,21)"/><text x="39.5900%" y="159.50"></text></g><g><title>predicates_of (128,412 samples, 0.16%)</title><rect x="39.3215%" y="181" width="0.1621%" height="15" fill="rgb(208,190,38)"/><text x="39.5715%" y="191.50"></text></g><g><title>predicates_defined_on (123,871 samples, 0.16%)</title><rect x="39.3272%" y="165" width="0.1564%" height="15" fill="rgb(235,213,38)"/><text x="39.5772%" y="175.50"></text></g><g><title>type_collecting (475,785 samples, 0.60%)</title><rect x="38.9112%" y="213" width="0.6007%" height="15" fill="rgb(237,122,38)"/><text x="39.1612%" y="223.50"></text></g><g><title>collect_mod_item_types (465,875 samples, 0.59%)</title><rect x="38.9237%" y="197" width="0.5882%" height="15" fill="rgb(244,218,35)"/><text x="39.1737%" y="207.50"></text></g><g><title>evaluate_obligation (188,822 samples, 0.24%)</title><rect x="40.2756%" y="181" width="0.2384%" height="15" fill="rgb(240,68,47)"/><text x="40.5256%" y="191.50"></text></g><g><title>implied_outlives_bounds (177,714 samples, 0.22%)</title><rect x="40.5140%" y="181" width="0.2244%" height="15" fill="rgb(210,16,53)"/><text x="40.7640%" y="191.50"></text></g><g><title>param_env (270,372 samples, 0.34%)</title><rect x="40.7401%" y="181" width="0.3414%" height="15" fill="rgb(235,124,12)"/><text x="40.9901%" y="191.50"></text></g><g><title>region_scope_tree (103,411 samples, 0.13%)</title><rect x="41.1626%" y="181" width="0.1306%" height="15" fill="rgb(224,169,11)"/><text x="41.4126%" y="191.50"></text></g><g><title>analysis (26,741,862 samples, 33.76%)</title><rect x="8.3761%" y="245" width="33.7641%" height="15" fill="rgb(250,166,2)"/><text x="8.6261%" y="255.50">analysis</text></g><g><title>type_check_crate (20,074,735 samples, 25.35%)</title><rect x="16.7939%" y="229" width="25.3462%" height="15" fill="rgb(242,216,29)"/><text x="17.0439%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,080,421 samples, 2.63%)</title><rect x="39.5134%" y="213" width="2.6267%" height="15" fill="rgb(230,116,27)"/><text x="39.7634%" y="223.50">wf..</text></g><g><title>check_item_well_formed (2,037,141 samples, 2.57%)</title><rect x="39.5681%" y="197" width="2.5721%" height="15" fill="rgb(228,99,48)"/><text x="39.8181%" y="207.50">ch..</text></g><g><title>trait_impls_of (670,837 samples, 0.85%)</title><rect x="41.2932%" y="181" width="0.8470%" height="15" fill="rgb(253,11,6)"/><text x="41.5432%" y="191.50"></text></g><g><title>implementations_of_trait (133,952 samples, 0.17%)</title><rect x="41.9710%" y="165" width="0.1691%" height="15" fill="rgb(247,143,39)"/><text x="42.2210%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (114,442 samples, 0.14%)</title><rect x="41.9957%" y="149" width="0.1445%" height="15" fill="rgb(236,97,10)"/><text x="42.2457%" y="159.50"></text></g><g><title>codegen_module (1,103,662 samples, 1.39%)</title><rect x="42.9220%" y="229" width="1.3935%" height="15" fill="rgb(233,208,19)"/><text x="43.1720%" y="239.50"></text></g><g><title>codegen_crate (1,777,648 samples, 2.24%)</title><rect x="42.1533%" y="245" width="2.2444%" height="15" fill="rgb(216,164,2)"/><text x="42.4033%" y="255.50">c..</text></g><g><title>LLVM_module_codegen (14,592,209 samples, 18.42%)</title><rect x="44.4528%" y="229" width="18.4240%" height="15" fill="rgb(220,129,5)"/><text x="44.7028%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (14,260,786 samples, 18.01%)</title><rect x="44.8713%" y="213" width="18.0056%" height="15" fill="rgb(242,17,10)"/><text x="45.1213%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (15,256,806 samples, 19.26%)</title><rect x="44.3978%" y="245" width="19.2631%" height="15" fill="rgb(242,107,0)"/><text x="44.6478%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (621,006 samples, 0.78%)</title><rect x="62.8769%" y="229" width="0.7841%" height="15" fill="rgb(251,28,31)"/><text x="63.1269%" y="239.50"></text></g><g><title>metadata_load_macro (248,263 samples, 0.31%)</title><rect x="78.1409%" y="197" width="0.3135%" height="15" fill="rgb(233,223,10)"/><text x="78.3909%" y="207.50"></text></g><g><title>macro_expand_crate (14,072,484 samples, 17.77%)</title><rect x="64.1267%" y="229" width="17.7678%" height="15" fill="rgb(215,21,27)"/><text x="64.3767%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (14,057,664 samples, 17.75%)</title><rect x="64.1454%" y="213" width="17.7491%" height="15" fill="rgb(232,23,21)"/><text x="64.3954%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,724,748 samples, 3.44%)</title><rect x="78.4543%" y="197" width="3.4402%" height="15" fill="rgb(244,5,23)"/><text x="78.7043%" y="207.50">met..</text></g><g><title>metadata_register_crate (1,008,870 samples, 1.27%)</title><rect x="80.6208%" y="181" width="1.2738%" height="15" fill="rgb(226,81,46)"/><text x="80.8708%" y="191.50"></text></g><g><title>metadata_register_crate (85,780 samples, 0.11%)</title><rect x="81.7863%" y="165" width="0.1083%" height="15" fill="rgb(247,70,30)"/><text x="82.0363%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (108,921 samples, 0.14%)</title><rect x="81.9000%" y="229" width="0.1375%" height="15" fill="rgb(212,68,19)"/><text x="82.1500%" y="239.50"></text></g><g><title>finalize_macro_resolutions (321,833 samples, 0.41%)</title><rect x="82.0729%" y="213" width="0.4063%" height="15" fill="rgb(240,187,13)"/><text x="82.3229%" y="223.50"></text></g><g><title>late_resolve_crate (1,851,019 samples, 2.34%)</title><rect x="82.4792%" y="213" width="2.3371%" height="15" fill="rgb(223,113,26)"/><text x="82.7292%" y="223.50">l..</text></g><g><title>configure_and_expand (16,800,171 samples, 21.21%)</title><rect x="63.6609%" y="245" width="21.2118%" height="15" fill="rgb(206,192,2)"/><text x="63.9109%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,245,562 samples, 2.84%)</title><rect x="82.0375%" y="229" width="2.8352%" height="15" fill="rgb(241,108,4)"/><text x="82.2875%" y="239.50">re..</text></g><g><title>early_lint_checks (164,662 samples, 0.21%)</title><rect x="84.9715%" y="245" width="0.2079%" height="15" fill="rgb(247,173,49)"/><text x="85.2215%" y="255.50"></text></g><g><title>free_global_ctxt (2,999,431 samples, 3.79%)</title><rect x="85.1794%" y="245" width="3.7871%" height="15" fill="rgb(224,114,35)"/><text x="85.4294%" y="255.50">free..</text></g><g><title>optimized_mir (127,031 samples, 0.16%)</title><rect x="89.5520%" y="165" width="0.1604%" height="15" fill="rgb(245,159,27)"/><text x="89.8020%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (372,794 samples, 0.47%)</title><rect x="89.4505%" y="181" width="0.4707%" height="15" fill="rgb(245,172,44)"/><text x="89.7005%" y="191.50"></text></g><g><title>upstream_monomorphizations_for (154,322 samples, 0.19%)</title><rect x="89.7263%" y="165" width="0.1948%" height="15" fill="rgb(236,23,11)"/><text x="89.9763%" y="175.50"></text></g><g><title>upstream_monomorphizations (152,122 samples, 0.19%)</title><rect x="89.7291%" y="149" width="0.1921%" height="15" fill="rgb(205,117,38)"/><text x="89.9791%" y="159.50"></text></g><g><title>exported_symbols (110,342 samples, 0.14%)</title><rect x="89.7819%" y="133" width="0.1393%" height="15" fill="rgb(237,72,25)"/><text x="90.0319%" y="143.50"></text></g><g><title>metadata_decode_entry_exported_symbols (106,422 samples, 0.13%)</title><rect x="89.7868%" y="117" width="0.1344%" height="15" fill="rgb(244,70,9)"/><text x="90.0368%" y="127.50"></text></g><g><title>monomorphization_collector (387,864 samples, 0.49%)</title><rect x="89.4476%" y="197" width="0.4897%" height="15" fill="rgb(217,125,39)"/><text x="89.6976%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (476,425 samples, 0.60%)</title><rect x="89.4301%" y="213" width="0.6015%" height="15" fill="rgb(235,36,10)"/><text x="89.6801%" y="223.50"></text></g><g><title>exported_symbols (508,735 samples, 0.64%)</title><rect x="89.4198%" y="229" width="0.6423%" height="15" fill="rgb(251,123,47)"/><text x="89.6698%" y="239.50"></text></g><g><title>layout_of (202,612 samples, 0.26%)</title><rect x="90.5221%" y="213" width="0.2558%" height="15" fill="rgb(221,13,13)"/><text x="90.7721%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (328,084 samples, 0.41%)</title><rect x="90.7779%" y="213" width="0.4142%" height="15" fill="rgb(238,131,9)"/><text x="91.0279%" y="223.50"></text></g><g><title>impl_parent (124,500 samples, 0.16%)</title><rect x="91.4038%" y="181" width="0.1572%" height="15" fill="rgb(211,50,8)"/><text x="91.6538%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (93,690 samples, 0.12%)</title><rect x="91.4427%" y="165" width="0.1183%" height="15" fill="rgb(245,182,24)"/><text x="91.6927%" y="175.50"></text></g><g><title>specialization_graph_of (694,547 samples, 0.88%)</title><rect x="91.2462%" y="197" width="0.8769%" height="15" fill="rgb(242,14,37)"/><text x="91.4962%" y="207.50"></text></g><g><title>impl_trait_ref (445,266 samples, 0.56%)</title><rect x="91.5610%" y="181" width="0.5622%" height="15" fill="rgb(246,228,12)"/><text x="91.8110%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (407,065 samples, 0.51%)</title><rect x="91.6092%" y="165" width="0.5140%" height="15" fill="rgb(213,55,15)"/><text x="91.8592%" y="175.50"></text></g><g><title>optimized_mir (1,609,437 samples, 2.03%)</title><rect x="90.0932%" y="229" width="2.0321%" height="15" fill="rgb(209,9,3)"/><text x="90.3432%" y="239.50">o..</text></g><g><title>resolve_instance (739,087 samples, 0.93%)</title><rect x="91.1921%" y="213" width="0.9332%" height="15" fill="rgb(230,59,30)"/><text x="91.4421%" y="223.50"></text></g><g><title>generate_crate_metadata (2,567,566 samples, 3.24%)</title><rect x="88.9665%" y="245" width="3.2418%" height="15" fill="rgb(209,121,21)"/><text x="89.2165%" y="255.50">gen..</text></g><g><title>hir_lowering (1,071,471 samples, 1.35%)</title><rect x="92.2083%" y="245" width="1.3528%" height="15" fill="rgb(220,109,13)"/><text x="92.4583%" y="255.50"></text></g><g><title>finish_ongoing_codegen (1,442,205 samples, 1.82%)</title><rect x="93.5764%" y="229" width="1.8209%" height="15" fill="rgb(232,18,1)"/><text x="93.8264%" y="239.50">f..</text></g><g><title>link_crate (734,517 samples, 0.93%)</title><rect x="95.3973%" y="229" width="0.9274%" height="15" fill="rgb(215,41,42)"/><text x="95.6473%" y="239.50"></text></g><g><title>link_binary (724,777 samples, 0.92%)</title><rect x="95.4096%" y="213" width="0.9151%" height="15" fill="rgb(224,123,36)"/><text x="95.6596%" y="223.50"></text></g><g><title>link_rlib (423,534 samples, 0.53%)</title><rect x="95.7900%" y="197" width="0.5348%" height="15" fill="rgb(240,125,3)"/><text x="96.0400%" y="207.50"></text></g><g><title>link (2,195,762 samples, 2.77%)</title><rect x="93.5611%" y="245" width="2.7724%" height="15" fill="rgb(205,98,50)"/><text x="93.8111%" y="255.50">li..</text></g><g><title>parse_crate (1,318,764 samples, 1.67%)</title><rect x="96.3334%" y="245" width="1.6651%" height="15" fill="rgb(205,185,37)"/><text x="96.5834%" y="255.50"></text></g><g><title>prepare_outputs (356,543 samples, 0.45%)</title><rect x="98.0092%" y="245" width="0.4502%" height="15" fill="rgb(238,207,15)"/><text x="98.2592%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (765,488 samples, 0.97%)</title><rect x="98.4594%" y="245" width="0.9665%" height="15" fill="rgb(213,199,42)"/><text x="98.7094%" y="255.50"></text></g><g><title>setup_global_ctxt (115,701 samples, 0.15%)</title><rect x="99.4276%" y="245" width="0.1461%" height="15" fill="rgb(235,201,11)"/><text x="99.6776%" y="255.50"></text></g><g><title>all (79,202,048 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (79,202,048 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (337,624 samples, 0.43%)</title><rect x="99.5737%" y="245" width="0.4263%" height="15" fill="rgb(243,32,47)"/><text x="99.8237%" y="255.50"></text></g></svg></svg>