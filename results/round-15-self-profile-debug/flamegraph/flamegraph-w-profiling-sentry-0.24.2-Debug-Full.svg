<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (672,020,371 samples, 19.19%)</title><rect x="0.0197%" y="165" width="19.1903%" height="15" fill="rgb(227,0,7)"/><text x="0.2697%" y="175.50">LLVM_passes</text></g><g><title>specialization_graph_of (7,486,537 samples, 0.21%)</title><rect x="19.9835%" y="37" width="0.2138%" height="15" fill="rgb(217,0,24)"/><text x="20.2335%" y="47.50"></text></g><g><title>resolve_instance (8,314,639 samples, 0.24%)</title><rect x="19.9635%" y="53" width="0.2374%" height="15" fill="rgb(221,193,54)"/><text x="20.2135%" y="63.50"></text></g><g><title>mir_const (18,401,571 samples, 0.53%)</title><rect x="19.7153%" y="101" width="0.5255%" height="15" fill="rgb(248,212,6)"/><text x="19.9653%" y="111.50"></text></g><g><title>unsafety_check_result (16,548,263 samples, 0.47%)</title><rect x="19.7682%" y="85" width="0.4726%" height="15" fill="rgb(208,68,35)"/><text x="20.0182%" y="95.50"></text></g><g><title>mir_built (15,224,719 samples, 0.43%)</title><rect x="19.8060%" y="69" width="0.4348%" height="15" fill="rgb(232,128,0)"/><text x="20.0560%" y="79.50"></text></g><g><title>mir_promoted (19,520,674 samples, 0.56%)</title><rect x="19.6845%" y="117" width="0.5574%" height="15" fill="rgb(207,160,47)"/><text x="19.9345%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,990,729 samples, 0.11%)</title><rect x="20.3029%" y="117" width="0.1140%" height="15" fill="rgb(228,23,34)"/><text x="20.5529%" y="127.50"></text></g><g><title>MIR_borrow_checking (42,014,164 samples, 1.20%)</title><rect x="19.2175%" y="149" width="1.1998%" height="15" fill="rgb(218,30,26)"/><text x="19.4675%" y="159.50"></text></g><g><title>mir_borrowck (41,888,762 samples, 1.20%)</title><rect x="19.2211%" y="133" width="1.1962%" height="15" fill="rgb(220,122,19)"/><text x="19.4711%" y="143.50"></text></g><g><title>crate_lints (4,995,773 samples, 0.14%)</title><rect x="20.5211%" y="117" width="0.1427%" height="15" fill="rgb(250,228,42)"/><text x="20.7711%" y="127.50"></text></g><g><title>lint_checking (5,663,531 samples, 0.16%)</title><rect x="20.5210%" y="133" width="0.1617%" height="15" fill="rgb(240,193,28)"/><text x="20.7710%" y="143.50"></text></g><g><title>misc_checking_3 (8,209,577 samples, 0.23%)</title><rect x="20.5037%" y="149" width="0.2344%" height="15" fill="rgb(216,20,37)"/><text x="20.7537%" y="159.50"></text></g><g><title>impl_parent (4,488,110 samples, 0.13%)</title><rect x="20.9046%" y="85" width="0.1282%" height="15" fill="rgb(206,188,39)"/><text x="21.1546%" y="95.50"></text></g><g><title>impl_trait_ref (10,493,613 samples, 0.30%)</title><rect x="21.0328%" y="85" width="0.2997%" height="15" fill="rgb(217,207,13)"/><text x="21.2828%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,716,750 samples, 0.25%)</title><rect x="21.0835%" y="69" width="0.2489%" height="15" fill="rgb(231,73,38)"/><text x="21.3335%" y="79.50"></text></g><g><title>coherent_trait (22,242,835 samples, 0.64%)</title><rect x="20.7411%" y="117" width="0.6352%" height="15" fill="rgb(225,20,46)"/><text x="20.9911%" y="127.50"></text></g><g><title>specialization_graph_of (22,222,505 samples, 0.63%)</title><rect x="20.7417%" y="101" width="0.6346%" height="15" fill="rgb(210,31,41)"/><text x="20.9917%" y="111.50"></text></g><g><title>coherence_checking (22,307,926 samples, 0.64%)</title><rect x="20.7405%" y="133" width="0.6370%" height="15" fill="rgb(221,200,47)"/><text x="20.9905%" y="143.50"></text></g><g><title>adt_dtorck_constraint (4,873,815 samples, 0.14%)</title><rect x="22.4409%" y="53" width="0.1392%" height="15" fill="rgb(226,26,5)"/><text x="22.6909%" y="63.50"></text></g><g><title>dropck_outlives (7,660,034 samples, 0.22%)</title><rect x="22.3996%" y="69" width="0.2187%" height="15" fill="rgb(249,33,26)"/><text x="22.6496%" y="79.50"></text></g><g><title>evaluate_obligation (10,123,279 samples, 0.29%)</title><rect x="22.6184%" y="69" width="0.2891%" height="15" fill="rgb(235,183,28)"/><text x="22.8684%" y="79.50"></text></g><g><title>typeck (49,921,647 samples, 1.43%)</title><rect x="21.6436%" y="85" width="1.4256%" height="15" fill="rgb(221,5,38)"/><text x="21.8936%" y="95.50"></text></g><g><title>item_bodies_checking (59,246,116 samples, 1.69%)</title><rect x="21.3781%" y="133" width="1.6918%" height="15" fill="rgb(247,18,42)"/><text x="21.6281%" y="143.50"></text></g><g><title>typeck_item_bodies (59,242,326 samples, 1.69%)</title><rect x="21.3782%" y="117" width="1.6917%" height="15" fill="rgb(241,131,45)"/><text x="21.6282%" y="127.50"></text></g><g><title>typeck (59,183,566 samples, 1.69%)</title><rect x="21.3799%" y="101" width="1.6901%" height="15" fill="rgb(249,31,29)"/><text x="21.6299%" y="111.50"></text></g><g><title>analysis (144,147,184 samples, 4.12%)</title><rect x="19.2100%" y="165" width="4.1163%" height="15" fill="rgb(225,111,53)"/><text x="19.4600%" y="175.50">anal..</text></g><g><title>type_check_crate (90,635,967 samples, 2.59%)</title><rect x="20.7381%" y="149" width="2.5882%" height="15" fill="rgb(238,160,17)"/><text x="20.9881%" y="159.50">ty..</text></g><g><title>wf_checking (6,897,384 samples, 0.20%)</title><rect x="23.1293%" y="133" width="0.1970%" height="15" fill="rgb(214,148,48)"/><text x="23.3793%" y="143.50"></text></g><g><title>check_item_well_formed (4,500,067 samples, 0.13%)</title><rect x="23.1978%" y="117" width="0.1285%" height="15" fill="rgb(232,36,49)"/><text x="23.4478%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (22,831,074 samples, 0.65%)</title><rect x="37.7202%" y="133" width="0.6520%" height="15" fill="rgb(209,103,24)"/><text x="37.9702%" y="143.50"></text></g><g><title>const_caller_location (4,176,922 samples, 0.12%)</title><rect x="38.3722%" y="133" width="0.1193%" height="15" fill="rgb(229,88,8)"/><text x="38.6222%" y="143.50"></text></g><g><title>layout_of (5,996,107 samples, 0.17%)</title><rect x="39.1334%" y="117" width="0.1712%" height="15" fill="rgb(213,181,19)"/><text x="39.3834%" y="127.50"></text></g><g><title>predicates_of (5,122,602 samples, 0.15%)</title><rect x="39.5894%" y="101" width="0.1463%" height="15" fill="rgb(254,191,54)"/><text x="39.8394%" y="111.50"></text></g><g><title>predicates_defined_on (3,732,944 samples, 0.11%)</title><rect x="39.6291%" y="85" width="0.1066%" height="15" fill="rgb(241,83,37)"/><text x="39.8791%" y="95.50"></text></g><g><title>param_env (15,172,810 samples, 0.43%)</title><rect x="39.3046%" y="117" width="0.4333%" height="15" fill="rgb(233,36,39)"/><text x="39.5546%" y="127.50"></text></g><g><title>normalize_projection_ty (3,827,975 samples, 0.11%)</title><rect x="39.7895%" y="101" width="0.1093%" height="15" fill="rgb(226,3,54)"/><text x="40.0395%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,641,873 samples, 0.16%)</title><rect x="39.7379%" y="117" width="0.1611%" height="15" fill="rgb(245,192,40)"/><text x="39.9879%" y="127.50"></text></g><g><title>fn_abi_of_instance (49,346,503 samples, 1.41%)</title><rect x="38.4957%" y="133" width="1.4091%" height="15" fill="rgb(238,167,29)"/><text x="38.7457%" y="143.50"></text></g><g><title>layout_of (4,134,532 samples, 0.12%)</title><rect x="40.3547%" y="53" width="0.1181%" height="15" fill="rgb(232,182,51)"/><text x="40.6047%" y="63.50"></text></g><g><title>layout_of (5,310,706 samples, 0.15%)</title><rect x="40.3271%" y="69" width="0.1517%" height="15" fill="rgb(231,60,39)"/><text x="40.5771%" y="79.50"></text></g><g><title>layout_of (6,975,611 samples, 0.20%)</title><rect x="40.3005%" y="85" width="0.1992%" height="15" fill="rgb(208,69,12)"/><text x="40.5505%" y="95.50"></text></g><g><title>layout_of (8,786,885 samples, 0.25%)</title><rect x="40.2664%" y="101" width="0.2509%" height="15" fill="rgb(235,93,37)"/><text x="40.5164%" y="111.50"></text></g><g><title>layout_of (11,524,753 samples, 0.33%)</title><rect x="40.2172%" y="117" width="0.3291%" height="15" fill="rgb(213,116,39)"/><text x="40.4672%" y="127.50"></text></g><g><title>layout_of (21,183,490 samples, 0.60%)</title><rect x="39.9720%" y="133" width="0.6049%" height="15" fill="rgb(222,207,29)"/><text x="40.2220%" y="143.50"></text></g><g><title>symbol_name (6,189,327 samples, 0.18%)</title><rect x="40.5779%" y="133" width="0.1767%" height="15" fill="rgb(206,96,30)"/><text x="40.8279%" y="143.50"></text></g><g><title>codegen_module (608,326,210 samples, 17.37%)</title><rect x="23.4322%" y="149" width="17.3714%" height="15" fill="rgb(218,138,4)"/><text x="23.6822%" y="159.50">codegen_module</text></g><g><title>codegen_crate (612,336,101 samples, 17.49%)</title><rect x="23.3265%" y="165" width="17.4859%" height="15" fill="rgb(250,191,14)"/><text x="23.5765%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,677,534,768 samples, 47.90%)</title><rect x="40.8197%" y="149" width="47.9039%" height="15" fill="rgb(239,60,40)"/><text x="41.0697%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,561,263,180 samples, 44.58%)</title><rect x="44.1400%" y="133" width="44.5836%" height="15" fill="rgb(206,27,48)"/><text x="44.3900%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,732,062,895 samples, 49.46%)</title><rect x="40.8125%" y="165" width="49.4610%" height="15" fill="rgb(225,35,8)"/><text x="41.0625%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (54,273,945 samples, 1.55%)</title><rect x="88.7236%" y="149" width="1.5499%" height="15" fill="rgb(250,213,24)"/><text x="88.9736%" y="159.50"></text></g><g><title>metadata_register_crate (22,908,443 samples, 0.65%)</title><rect x="90.8874%" y="117" width="0.6542%" height="15" fill="rgb(247,123,22)"/><text x="91.1374%" y="127.50"></text></g><g><title>metadata_register_crate (19,214,584 samples, 0.55%)</title><rect x="90.9929%" y="101" width="0.5487%" height="15" fill="rgb(231,138,38)"/><text x="91.2429%" y="111.50"></text></g><g><title>metadata_register_crate (14,787,449 samples, 0.42%)</title><rect x="91.1193%" y="85" width="0.4223%" height="15" fill="rgb(231,145,46)"/><text x="91.3693%" y="95.50"></text></g><g><title>metadata_register_crate (11,222,030 samples, 0.32%)</title><rect x="91.2211%" y="69" width="0.3205%" height="15" fill="rgb(251,118,11)"/><text x="91.4711%" y="79.50"></text></g><g><title>macro_expand_crate (44,238,517 samples, 1.26%)</title><rect x="90.2879%" y="149" width="1.2633%" height="15" fill="rgb(217,147,25)"/><text x="90.5379%" y="159.50"></text></g><g><title>expand_crate (44,225,247 samples, 1.26%)</title><rect x="90.2883%" y="133" width="1.2629%" height="15" fill="rgb(247,81,37)"/><text x="90.5383%" y="143.50"></text></g><g><title>configure_and_expand (48,037,838 samples, 1.37%)</title><rect x="90.2735%" y="165" width="1.3718%" height="15" fill="rgb(209,12,38)"/><text x="90.5235%" y="175.50"></text></g><g><title>free_global_ctxt (14,876,247 samples, 0.42%)</title><rect x="91.6600%" y="165" width="0.4248%" height="15" fill="rgb(227,1,9)"/><text x="91.9100%" y="175.50"></text></g><g><title>codegen_fn_attrs (5,039,479 samples, 0.14%)</title><rect x="92.7670%" y="85" width="0.1439%" height="15" fill="rgb(248,47,43)"/><text x="93.0170%" y="95.50"></text></g><g><title>mir_shims (4,127,391 samples, 0.12%)</title><rect x="92.9760%" y="85" width="0.1179%" height="15" fill="rgb(221,10,30)"/><text x="93.2260%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (14,127,536 samples, 0.40%)</title><rect x="93.1679%" y="69" width="0.4034%" height="15" fill="rgb(210,229,1)"/><text x="93.4179%" y="79.50"></text></g><g><title>optimized_mir (18,994,150 samples, 0.54%)</title><rect x="93.0940%" y="85" width="0.5424%" height="15" fill="rgb(222,148,37)"/><text x="93.3440%" y="95.50"></text></g><g><title>evaluate_obligation (3,515,827 samples, 0.10%)</title><rect x="94.2298%" y="53" width="0.1004%" height="15" fill="rgb(234,67,33)"/><text x="94.4798%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (21,497,745 samples, 0.61%)</title><rect x="93.8354%" y="69" width="0.6139%" height="15" fill="rgb(247,98,35)"/><text x="94.0854%" y="79.50"></text></g><g><title>needs_drop_raw (4,396,441 samples, 0.13%)</title><rect x="94.5215%" y="69" width="0.1255%" height="15" fill="rgb(247,138,52)"/><text x="94.7715%" y="79.50"></text></g><g><title>specialization_graph_of (6,473,019 samples, 0.18%)</title><rect x="94.6471%" y="69" width="0.1848%" height="15" fill="rgb(213,79,30)"/><text x="94.8971%" y="79.50"></text></g><g><title>resolve_instance (43,393,297 samples, 1.24%)</title><rect x="93.6364%" y="85" width="1.2391%" height="15" fill="rgb(246,177,23)"/><text x="93.8864%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,492,142 samples, 0.13%)</title><rect x="94.8755%" y="85" width="0.1283%" height="15" fill="rgb(230,62,27)"/><text x="95.1255%" y="95.50"></text></g><g><title>eval_to_const_value_raw (6,249,937 samples, 0.18%)</title><rect x="95.0675%" y="69" width="0.1785%" height="15" fill="rgb(216,154,8)"/><text x="95.3175%" y="79.50"></text></g><g><title>eval_to_const_value_raw (6,034,486 samples, 0.17%)</title><rect x="95.0736%" y="53" width="0.1723%" height="15" fill="rgb(244,35,45)"/><text x="95.3236%" y="63.50"></text></g><g><title>eval_to_allocation_raw (5,699,192 samples, 0.16%)</title><rect x="95.0832%" y="37" width="0.1627%" height="15" fill="rgb(251,115,12)"/><text x="95.3332%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,754,760 samples, 0.25%)</title><rect x="95.0038%" y="85" width="0.2500%" height="15" fill="rgb(240,54,50)"/><text x="95.2538%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (26,538,999 samples, 0.76%)</title><rect x="95.2556%" y="85" width="0.7579%" height="15" fill="rgb(233,84,52)"/><text x="95.5056%" y="95.50"></text></g><g><title>upstream_monomorphizations (26,399,759 samples, 0.75%)</title><rect x="95.2596%" y="69" width="0.7539%" height="15" fill="rgb(207,117,47)"/><text x="95.5096%" y="79.50"></text></g><g><title>exported_symbols (23,012,446 samples, 0.66%)</title><rect x="95.3563%" y="53" width="0.6571%" height="15" fill="rgb(249,43,39)"/><text x="95.6063%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (22,978,876 samples, 0.66%)</title><rect x="95.3573%" y="37" width="0.6562%" height="15" fill="rgb(209,38,44)"/><text x="95.6073%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (136,338,211 samples, 3.89%)</title><rect x="92.1750%" y="101" width="3.8933%" height="15" fill="rgb(236,212,23)"/><text x="92.4250%" y="111.50">mono..</text></g><g><title>monomorphization_collector (136,379,801 samples, 3.89%)</title><rect x="92.1749%" y="117" width="3.8945%" height="15" fill="rgb(242,79,21)"/><text x="92.4249%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (11,837,265 samples, 0.34%)</title><rect x="96.0695%" y="101" width="0.3380%" height="15" fill="rgb(211,96,35)"/><text x="96.3195%" y="111.50"></text></g><g><title>symbol_name (10,577,492 samples, 0.30%)</title><rect x="96.1055%" y="85" width="0.3021%" height="15" fill="rgb(253,215,40)"/><text x="96.3555%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (153,326,121 samples, 4.38%)</title><rect x="92.1728%" y="133" width="4.3784%" height="15" fill="rgb(211,81,21)"/><text x="92.4228%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (16,871,479 samples, 0.48%)</title><rect x="96.0694%" y="117" width="0.4818%" height="15" fill="rgb(208,190,38)"/><text x="96.3194%" y="127.50"></text></g><g><title>cgu_partitioning (5,028,934 samples, 0.14%)</title><rect x="96.4076%" y="101" width="0.1436%" height="15" fill="rgb(235,213,38)"/><text x="96.6576%" y="111.50"></text></g><g><title>exported_symbols (153,962,307 samples, 4.40%)</title><rect x="92.1567%" y="149" width="4.3966%" height="15" fill="rgb(237,122,38)"/><text x="92.4067%" y="159.50">expor..</text></g><g><title>layout_of (3,672,112 samples, 0.10%)</title><rect x="96.7199%" y="37" width="0.1049%" height="15" fill="rgb(244,218,35)"/><text x="96.9699%" y="47.50"></text></g><g><title>layout_of (4,192,988 samples, 0.12%)</title><rect x="96.7094%" y="53" width="0.1197%" height="15" fill="rgb(240,68,47)"/><text x="96.9594%" y="63.50"></text></g><g><title>layout_of (4,798,203 samples, 0.14%)</title><rect x="96.6997%" y="69" width="0.1370%" height="15" fill="rgb(210,16,53)"/><text x="96.9497%" y="79.50"></text></g><g><title>layout_of (5,291,646 samples, 0.15%)</title><rect x="96.6897%" y="85" width="0.1511%" height="15" fill="rgb(235,124,12)"/><text x="96.9397%" y="95.50"></text></g><g><title>layout_of (5,852,863 samples, 0.17%)</title><rect x="96.6802%" y="101" width="0.1671%" height="15" fill="rgb(224,169,11)"/><text x="96.9302%" y="111.50"></text></g><g><title>layout_of (6,134,463 samples, 0.18%)</title><rect x="96.6731%" y="117" width="0.1752%" height="15" fill="rgb(250,166,2)"/><text x="96.9231%" y="127.50"></text></g><g><title>layout_of (6,768,318 samples, 0.19%)</title><rect x="96.6567%" y="133" width="0.1933%" height="15" fill="rgb(242,216,29)"/><text x="96.9067%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,434,507 samples, 0.13%)</title><rect x="96.8500%" y="133" width="0.1266%" height="15" fill="rgb(230,116,27)"/><text x="97.1000%" y="143.50"></text></g><g><title>optimized_mir (15,880,829 samples, 0.45%)</title><rect x="96.5575%" y="149" width="0.4535%" height="15" fill="rgb(228,99,48)"/><text x="96.8075%" y="159.50"></text></g><g><title>generate_crate_metadata (172,913,747 samples, 4.94%)</title><rect x="92.0848%" y="165" width="4.9377%" height="15" fill="rgb(253,11,6)"/><text x="92.3348%" y="175.50">genera..</text></g><g><title>finish_ongoing_codegen (86,797,987 samples, 2.48%)</title><rect x="97.0871%" y="149" width="2.4786%" height="15" fill="rgb(247,143,39)"/><text x="97.3371%" y="159.50">fi..</text></g><g><title>link_crate (10,451,471 samples, 0.30%)</title><rect x="99.5657%" y="149" width="0.2985%" height="15" fill="rgb(236,97,10)"/><text x="99.8157%" y="159.50"></text></g><g><title>link_binary (10,346,930 samples, 0.30%)</title><rect x="99.5687%" y="133" width="0.2955%" height="15" fill="rgb(233,208,19)"/><text x="99.8187%" y="143.50"></text></g><g><title>link_rlib (8,471,770 samples, 0.24%)</title><rect x="99.6222%" y="117" width="0.2419%" height="15" fill="rgb(216,164,2)"/><text x="99.8722%" y="127.50"></text></g><g><title>link (97,277,248 samples, 2.78%)</title><rect x="97.0866%" y="165" width="2.7779%" height="15" fill="rgb(220,129,5)"/><text x="97.3366%" y="175.50">li..</text></g><g><title>all (3,501,877,757 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,501,877,757 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>