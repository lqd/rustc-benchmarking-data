<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (196,746,969 samples, 16.99%)</title><rect x="0.0629%" y="181" width="16.9922%" height="15" fill="rgb(227,0,7)"/><text x="0.3129%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,739,900 samples, 0.15%)</title><rect x="20.4321%" y="53" width="0.1503%" height="15" fill="rgb(217,0,24)"/><text x="20.6821%" y="63.50"></text></g><g><title>evaluate_obligation (1,400,746 samples, 0.12%)</title><rect x="20.4614%" y="37" width="0.1210%" height="15" fill="rgb(221,193,54)"/><text x="20.7114%" y="47.50"></text></g><g><title>needs_drop_raw (2,882,093 samples, 0.25%)</title><rect x="20.3401%" y="69" width="0.2489%" height="15" fill="rgb(248,212,6)"/><text x="20.5901%" y="79.50"></text></g><g><title>resolve_instance (2,615,122 samples, 0.23%)</title><rect x="20.5890%" y="69" width="0.2259%" height="15" fill="rgb(208,68,35)"/><text x="20.8390%" y="79.50"></text></g><g><title>thir_body (2,105,865 samples, 0.18%)</title><rect x="20.8211%" y="69" width="0.1819%" height="15" fill="rgb(232,128,0)"/><text x="21.0711%" y="79.50"></text></g><g><title>mir_const (17,212,921 samples, 1.49%)</title><rect x="19.5209%" y="117" width="1.4866%" height="15" fill="rgb(207,160,47)"/><text x="19.7709%" y="127.50"></text></g><g><title>unsafety_check_result (15,208,783 samples, 1.31%)</title><rect x="19.6940%" y="101" width="1.3135%" height="15" fill="rgb(228,23,34)"/><text x="19.9440%" y="111.50"></text></g><g><title>mir_built (13,669,986 samples, 1.18%)</title><rect x="19.8269%" y="85" width="1.1806%" height="15" fill="rgb(218,30,26)"/><text x="20.0769%" y="95.50"></text></g><g><title>mir_promoted (19,944,318 samples, 1.72%)</title><rect x="19.3785%" y="133" width="1.7225%" height="15" fill="rgb(220,122,19)"/><text x="19.6285%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,330,473 samples, 0.11%)</title><rect x="21.1013%" y="133" width="0.1149%" height="15" fill="rgb(250,228,42)"/><text x="21.3513%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,598,925 samples, 0.48%)</title><rect x="21.3369%" y="133" width="0.4836%" height="15" fill="rgb(240,193,28)"/><text x="21.5869%" y="143.50"></text></g><g><title>MIR_borrow_checking (54,746,258 samples, 4.73%)</title><rect x="17.0940%" y="165" width="4.7282%" height="15" fill="rgb(216,20,37)"/><text x="17.3440%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (54,447,985 samples, 4.70%)</title><rect x="17.1198%" y="149" width="4.7025%" height="15" fill="rgb(206,188,39)"/><text x="17.3698%" y="159.50">mir_b..</text></g><g><title>misc_checking_1 (2,273,054 samples, 0.20%)</title><rect x="21.8688%" y="165" width="0.1963%" height="15" fill="rgb(217,207,13)"/><text x="22.1188%" y="175.50"></text></g><g><title>misc_checking_2 (2,199,503 samples, 0.19%)</title><rect x="22.0652%" y="165" width="0.1900%" height="15" fill="rgb(231,73,38)"/><text x="22.3152%" y="175.50"></text></g><g><title>crate_lints (4,105,963 samples, 0.35%)</title><rect x="22.3738%" y="133" width="0.3546%" height="15" fill="rgb(225,20,46)"/><text x="22.6238%" y="143.50"></text></g><g><title>type_of (1,274,956 samples, 0.11%)</title><rect x="22.6184%" y="117" width="0.1101%" height="15" fill="rgb(210,31,41)"/><text x="22.8684%" y="127.50"></text></g><g><title>lint_checking (5,089,314 samples, 0.44%)</title><rect x="22.3737%" y="149" width="0.4395%" height="15" fill="rgb(221,200,47)"/><text x="22.6237%" y="159.50"></text></g><g><title>privacy_checking_modules (1,742,559 samples, 0.15%)</title><rect x="22.8610%" y="149" width="0.1505%" height="15" fill="rgb(226,26,5)"/><text x="23.1110%" y="159.50"></text></g><g><title>check_mod_privacy (1,731,219 samples, 0.15%)</title><rect x="22.8620%" y="133" width="0.1495%" height="15" fill="rgb(249,33,26)"/><text x="23.1120%" y="143.50"></text></g><g><title>misc_checking_3 (8,778,173 samples, 0.76%)</title><rect x="22.2551%" y="165" width="0.7581%" height="15" fill="rgb(235,183,28)"/><text x="22.5051%" y="175.50"></text></g><g><title>impl_parent (3,576,021 samples, 0.31%)</title><rect x="23.5435%" y="101" width="0.3088%" height="15" fill="rgb(221,5,38)"/><text x="23.7935%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,901,588 samples, 0.16%)</title><rect x="23.6882%" y="85" width="0.1642%" height="15" fill="rgb(247,18,42)"/><text x="23.9382%" y="95.50"></text></g><g><title>impl_trait_ref (6,897,958 samples, 0.60%)</title><rect x="23.8524%" y="101" width="0.5957%" height="15" fill="rgb(241,131,45)"/><text x="24.1024%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,354,350 samples, 0.46%)</title><rect x="23.9857%" y="85" width="0.4624%" height="15" fill="rgb(249,31,29)"/><text x="24.2357%" y="95.50"></text></g><g><title>trait_impls_of (1,202,573 samples, 0.10%)</title><rect x="24.4538%" y="101" width="0.1039%" height="15" fill="rgb(225,111,53)"/><text x="24.7038%" y="111.50"></text></g><g><title>coherent_trait (17,716,868 samples, 1.53%)</title><rect x="23.0277%" y="133" width="1.5301%" height="15" fill="rgb(238,160,17)"/><text x="23.2777%" y="143.50"></text></g><g><title>specialization_graph_of (16,960,530 samples, 1.46%)</title><rect x="23.0930%" y="117" width="1.4648%" height="15" fill="rgb(214,148,48)"/><text x="23.3430%" y="127.50"></text></g><g><title>coherence_checking (17,899,459 samples, 1.55%)</title><rect x="23.0257%" y="149" width="1.5459%" height="15" fill="rgb(232,36,49)"/><text x="23.2757%" y="159.50"></text></g><g><title>dropck_outlives (1,852,050 samples, 0.16%)</title><rect x="27.4736%" y="101" width="0.1600%" height="15" fill="rgb(209,103,24)"/><text x="27.7236%" y="111.50"></text></g><g><title>evaluate_obligation (3,016,360 samples, 0.26%)</title><rect x="27.6335%" y="101" width="0.2605%" height="15" fill="rgb(229,88,8)"/><text x="27.8835%" y="111.50"></text></g><g><title>dropck_outlives (1,264,815 samples, 0.11%)</title><rect x="29.0487%" y="85" width="0.1092%" height="15" fill="rgb(213,181,19)"/><text x="29.2987%" y="95.50"></text></g><g><title>typeck (15,020,330 samples, 1.30%)</title><rect x="28.1003%" y="101" width="1.2972%" height="15" fill="rgb(254,191,54)"/><text x="28.3503%" y="111.50"></text></g><g><title>item_bodies_checking (55,919,161 samples, 4.83%)</title><rect x="24.5769%" y="149" width="4.8295%" height="15" fill="rgb(241,83,37)"/><text x="24.8269%" y="159.50">item_b..</text></g><g><title>typeck_item_bodies (55,916,871 samples, 4.83%)</title><rect x="24.5771%" y="133" width="4.8293%" height="15" fill="rgb(233,36,39)"/><text x="24.8271%" y="143.50">typeck..</text></g><g><title>typeck (55,730,251 samples, 4.81%)</title><rect x="24.5932%" y="117" width="4.8132%" height="15" fill="rgb(226,3,54)"/><text x="24.8432%" y="127.50">typeck</text></g><g><title>item_types_checking (3,004,881 samples, 0.26%)</title><rect x="29.4064%" y="149" width="0.2595%" height="15" fill="rgb(245,192,40)"/><text x="29.6564%" y="159.50"></text></g><g><title>check_mod_item_types (2,991,991 samples, 0.26%)</title><rect x="29.4075%" y="133" width="0.2584%" height="15" fill="rgb(238,167,29)"/><text x="29.6575%" y="143.50"></text></g><g><title>predicates_of (1,438,295 samples, 0.12%)</title><rect x="29.8830%" y="117" width="0.1242%" height="15" fill="rgb(232,182,51)"/><text x="30.1330%" y="127.50"></text></g><g><title>predicates_defined_on (1,325,034 samples, 0.11%)</title><rect x="29.8927%" y="101" width="0.1144%" height="15" fill="rgb(231,60,39)"/><text x="30.1427%" y="111.50"></text></g><g><title>type_collecting (4,340,926 samples, 0.37%)</title><rect x="29.6665%" y="149" width="0.3749%" height="15" fill="rgb(208,69,12)"/><text x="29.9165%" y="159.50"></text></g><g><title>collect_mod_item_types (4,314,566 samples, 0.37%)</title><rect x="29.6688%" y="133" width="0.3726%" height="15" fill="rgb(235,93,37)"/><text x="29.9188%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,534,048 samples, 0.56%)</title><rect x="30.0789%" y="133" width="0.5643%" height="15" fill="rgb(213,116,39)"/><text x="30.3289%" y="143.50"></text></g><g><title>check_item_well_formed (5,611,350 samples, 0.48%)</title><rect x="30.6432%" y="133" width="0.4846%" height="15" fill="rgb(222,207,29)"/><text x="30.8932%" y="143.50"></text></g><g><title>analysis (164,225,646 samples, 14.18%)</title><rect x="17.0552%" y="181" width="14.1835%" height="15" fill="rgb(206,96,30)"/><text x="17.3052%" y="191.50">analysis</text></g><g><title>type_check_crate (95,239,397 samples, 8.23%)</title><rect x="23.0133%" y="165" width="8.2254%" height="15" fill="rgb(218,138,4)"/><text x="23.2633%" y="175.50">type_check_..</text></g><g><title>wf_checking (13,851,597 samples, 1.20%)</title><rect x="30.0424%" y="149" width="1.1963%" height="15" fill="rgb(250,191,14)"/><text x="30.2924%" y="159.50"></text></g><g><title>check_trait_item_well_formed (1,283,714 samples, 0.11%)</title><rect x="31.1278%" y="133" width="0.1109%" height="15" fill="rgb(239,60,40)"/><text x="31.3778%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (5,635,773 samples, 0.49%)</title><rect x="43.9534%" y="149" width="0.4867%" height="15" fill="rgb(206,27,48)"/><text x="44.2034%" y="159.50"></text></g><g><title>const_caller_location (1,309,683 samples, 0.11%)</title><rect x="44.4402%" y="149" width="0.1131%" height="15" fill="rgb(225,35,8)"/><text x="44.6902%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,253,944 samples, 0.11%)</title><rect x="45.1482%" y="133" width="0.1083%" height="15" fill="rgb(250,213,24)"/><text x="45.3982%" y="143.50"></text></g><g><title>layout_of (2,380,996 samples, 0.21%)</title><rect x="45.2782%" y="133" width="0.2056%" height="15" fill="rgb(247,123,22)"/><text x="45.5282%" y="143.50"></text></g><g><title>predicates_of (2,126,364 samples, 0.18%)</title><rect x="45.8648%" y="117" width="0.1836%" height="15" fill="rgb(231,138,38)"/><text x="46.1148%" y="127.50"></text></g><g><title>predicates_defined_on (1,485,670 samples, 0.13%)</title><rect x="45.9202%" y="101" width="0.1283%" height="15" fill="rgb(231,145,46)"/><text x="46.1702%" y="111.50"></text></g><g><title>param_env (6,560,404 samples, 0.57%)</title><rect x="45.4839%" y="133" width="0.5666%" height="15" fill="rgb(251,118,11)"/><text x="45.7339%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,301,492 samples, 0.11%)</title><rect x="46.0505%" y="133" width="0.1124%" height="15" fill="rgb(217,147,25)"/><text x="46.3005%" y="143.50"></text></g><g><title>fn_abi_of_instance (18,663,011 samples, 1.61%)</title><rect x="44.5577%" y="149" width="1.6118%" height="15" fill="rgb(247,81,37)"/><text x="44.8077%" y="159.50"></text></g><g><title>layout_of (1,759,598 samples, 0.15%)</title><rect x="46.4607%" y="133" width="0.1520%" height="15" fill="rgb(209,12,38)"/><text x="46.7107%" y="143.50"></text></g><g><title>layout_of (4,461,939 samples, 0.39%)</title><rect x="46.2475%" y="149" width="0.3854%" height="15" fill="rgb(227,1,9)"/><text x="46.4975%" y="159.50"></text></g><g><title>symbol_name (2,157,488 samples, 0.19%)</title><rect x="46.6345%" y="149" width="0.1863%" height="15" fill="rgb(248,47,43)"/><text x="46.8845%" y="159.50"></text></g><g><title>codegen_module (176,667,636 samples, 15.26%)</title><rect x="31.5880%" y="165" width="15.2581%" height="15" fill="rgb(221,10,30)"/><text x="31.8380%" y="175.50">codegen_module</text></g><g><title>codegen_crate (180,838,171 samples, 15.62%)</title><rect x="31.2393%" y="181" width="15.6183%" height="15" fill="rgb(210,229,1)"/><text x="31.4893%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (435,398,170 samples, 37.60%)</title><rect x="46.8725%" y="165" width="37.6036%" height="15" fill="rgb(222,148,37)"/><text x="47.1225%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (413,520,278 samples, 35.71%)</title><rect x="48.7620%" y="149" width="35.7141%" height="15" fill="rgb(234,67,33)"/><text x="49.0120%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (456,044,728 samples, 39.39%)</title><rect x="46.8576%" y="181" width="39.3868%" height="15" fill="rgb(247,98,35)"/><text x="47.1076%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (20,474,406 samples, 1.77%)</title><rect x="84.4760%" y="165" width="1.7683%" height="15" fill="rgb(247,138,52)"/><text x="84.7260%" y="175.50"></text></g><g><title>metadata_register_crate (15,596,995 samples, 1.35%)</title><rect x="89.4791%" y="133" width="1.3470%" height="15" fill="rgb(213,79,30)"/><text x="89.7291%" y="143.50"></text></g><g><title>metadata_register_crate (13,271,781 samples, 1.15%)</title><rect x="89.6799%" y="117" width="1.1462%" height="15" fill="rgb(246,177,23)"/><text x="89.9299%" y="127.50"></text></g><g><title>metadata_register_crate (10,501,963 samples, 0.91%)</title><rect x="89.9192%" y="101" width="0.9070%" height="15" fill="rgb(230,62,27)"/><text x="90.1692%" y="111.50"></text></g><g><title>macro_expand_crate (53,311,963 samples, 4.60%)</title><rect x="86.2955%" y="165" width="4.6043%" height="15" fill="rgb(216,154,8)"/><text x="86.5455%" y="175.50">macro..</text></g><g><title>expand_crate (53,301,403 samples, 4.60%)</title><rect x="86.2964%" y="149" width="4.6034%" height="15" fill="rgb(244,35,45)"/><text x="86.5464%" y="159.50">expan..</text></g><g><title>late_resolve_crate (2,682,428 samples, 0.23%)</title><rect x="90.9381%" y="149" width="0.2317%" height="15" fill="rgb(251,115,12)"/><text x="91.1881%" y="159.50"></text></g><g><title>configure_and_expand (57,268,365 samples, 4.95%)</title><rect x="86.2443%" y="181" width="4.9460%" height="15" fill="rgb(240,54,50)"/><text x="86.4943%" y="191.50">config..</text></g><g><title>resolve_crate (3,295,195 samples, 0.28%)</title><rect x="90.9058%" y="165" width="0.2846%" height="15" fill="rgb(233,84,52)"/><text x="91.1558%" y="175.50"></text></g><g><title>free_global_ctxt (9,628,241 samples, 0.83%)</title><rect x="91.2824%" y="181" width="0.8316%" height="15" fill="rgb(207,117,47)"/><text x="91.5324%" y="191.50"></text></g><g><title>item_attrs (1,382,134 samples, 0.12%)</title><rect x="92.8027%" y="85" width="0.1194%" height="15" fill="rgb(249,43,39)"/><text x="93.0527%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,320,053 samples, 0.11%)</title><rect x="92.8081%" y="69" width="0.1140%" height="15" fill="rgb(209,38,44)"/><text x="93.0581%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,260,429 samples, 0.20%)</title><rect x="92.7695%" y="101" width="0.1952%" height="15" fill="rgb(236,212,23)"/><text x="93.0195%" y="111.50"></text></g><g><title>mir_shims (1,567,260 samples, 0.14%)</title><rect x="93.0217%" y="101" width="0.1354%" height="15" fill="rgb(242,79,21)"/><text x="93.2717%" y="111.50"></text></g><g><title>layout_of (1,353,140 samples, 0.12%)</title><rect x="93.5168%" y="85" width="0.1169%" height="15" fill="rgb(211,96,35)"/><text x="93.7668%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,866,315 samples, 0.25%)</title><rect x="93.6336%" y="85" width="0.2476%" height="15" fill="rgb(253,215,40)"/><text x="93.8836%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,781,419 samples, 0.41%)</title><rect x="93.8812%" y="85" width="0.4130%" height="15" fill="rgb(211,81,21)"/><text x="94.1312%" y="95.50"></text></g><g><title>optimized_mir (13,532,170 samples, 1.17%)</title><rect x="93.1571%" y="101" width="1.1687%" height="15" fill="rgb(208,190,38)"/><text x="93.4071%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,839,749 samples, 0.42%)</title><rect x="94.4752%" y="85" width="0.4180%" height="15" fill="rgb(235,213,38)"/><text x="94.7252%" y="95.50"></text></g><g><title>specialization_graph_of (1,370,424 samples, 0.12%)</title><rect x="95.0126%" y="85" width="0.1184%" height="15" fill="rgb(237,122,38)"/><text x="95.2626%" y="95.50"></text></g><g><title>resolve_instance (9,821,073 samples, 0.85%)</title><rect x="94.3258%" y="101" width="0.8482%" height="15" fill="rgb(244,218,35)"/><text x="94.5758%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,627,326 samples, 0.14%)</title><rect x="95.2163%" y="85" width="0.1405%" height="15" fill="rgb(240,68,47)"/><text x="95.4663%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,571,286 samples, 0.14%)</title><rect x="95.2211%" y="69" width="0.1357%" height="15" fill="rgb(210,16,53)"/><text x="95.4711%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,502,726 samples, 0.13%)</title><rect x="95.2271%" y="53" width="0.1298%" height="15" fill="rgb(235,124,12)"/><text x="95.4771%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,923,338 samples, 0.17%)</title><rect x="95.1983%" y="101" width="0.1661%" height="15" fill="rgb(224,169,11)"/><text x="95.4483%" y="111.50"></text></g><g><title>upstream_drop_glue_for (4,428,326 samples, 0.38%)</title><rect x="95.3644%" y="101" width="0.3825%" height="15" fill="rgb(250,166,2)"/><text x="95.6144%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (4,408,946 samples, 0.38%)</title><rect x="95.3661%" y="85" width="0.3808%" height="15" fill="rgb(242,216,29)"/><text x="95.6161%" y="95.50"></text></g><g><title>upstream_monomorphizations (4,405,706 samples, 0.38%)</title><rect x="95.3664%" y="69" width="0.3805%" height="15" fill="rgb(230,116,27)"/><text x="95.6164%" y="79.50"></text></g><g><title>exported_symbols (3,950,230 samples, 0.34%)</title><rect x="95.4057%" y="53" width="0.3412%" height="15" fill="rgb(228,99,48)"/><text x="95.6557%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,939,550 samples, 0.34%)</title><rect x="95.4066%" y="37" width="0.3402%" height="15" fill="rgb(253,11,6)"/><text x="95.6566%" y="47.50"></text></g><g><title>resolve_instance (1,172,021 samples, 0.10%)</title><rect x="95.7946%" y="85" width="0.1012%" height="15" fill="rgb(247,143,39)"/><text x="96.0446%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (40,640,369 samples, 3.51%)</title><rect x="92.3859%" y="117" width="3.5099%" height="15" fill="rgb(236,97,10)"/><text x="92.6359%" y="127.50">mon..</text></g><g><title>vtable_entries (1,686,586 samples, 0.15%)</title><rect x="95.7502%" y="101" width="0.1457%" height="15" fill="rgb(233,208,19)"/><text x="96.0002%" y="111.50"></text></g><g><title>monomorphization_collector (40,781,750 samples, 3.52%)</title><rect x="92.3856%" y="133" width="3.5222%" height="15" fill="rgb(216,164,2)"/><text x="92.6356%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,704,389 samples, 0.32%)</title><rect x="95.9082%" y="117" width="0.3199%" height="15" fill="rgb(220,129,5)"/><text x="96.1582%" y="127.50"></text></g><g><title>symbol_name (3,328,333 samples, 0.29%)</title><rect x="95.9407%" y="101" width="0.2875%" height="15" fill="rgb(242,17,10)"/><text x="96.1907%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (46,288,099 samples, 4.00%)</title><rect x="92.3820%" y="149" width="3.9977%" height="15" fill="rgb(242,107,0)"/><text x="92.6320%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,464,678 samples, 0.47%)</title><rect x="95.9078%" y="133" width="0.4720%" height="15" fill="rgb(251,28,31)"/><text x="96.1578%" y="143.50"></text></g><g><title>cgu_partitioning (1,755,759 samples, 0.15%)</title><rect x="96.2281%" y="117" width="0.1516%" height="15" fill="rgb(233,223,10)"/><text x="96.4781%" y="127.50"></text></g><g><title>exported_symbols (46,642,672 samples, 4.03%)</title><rect x="92.3687%" y="165" width="4.0283%" height="15" fill="rgb(215,21,27)"/><text x="92.6187%" y="175.50">expo..</text></g><g><title>layout_of (1,169,614 samples, 0.10%)</title><rect x="96.7733%" y="117" width="0.1010%" height="15" fill="rgb(232,23,21)"/><text x="97.0233%" y="127.50"></text></g><g><title>layout_of (1,397,845 samples, 0.12%)</title><rect x="96.7556%" y="133" width="0.1207%" height="15" fill="rgb(244,5,23)"/><text x="97.0056%" y="143.50"></text></g><g><title>layout_of (2,563,181 samples, 0.22%)</title><rect x="96.6642%" y="149" width="0.2214%" height="15" fill="rgb(226,81,46)"/><text x="96.9142%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,245,710 samples, 0.37%)</title><rect x="96.8856%" y="149" width="0.3667%" height="15" fill="rgb(247,70,30)"/><text x="97.1356%" y="159.50"></text></g><g><title>optimized_mir (9,942,165 samples, 0.86%)</title><rect x="96.4100%" y="165" width="0.8587%" height="15" fill="rgb(212,68,19)"/><text x="96.6600%" y="175.50"></text></g><g><title>generate_crate_metadata (59,802,941 samples, 5.16%)</title><rect x="92.1139%" y="181" width="5.1649%" height="15" fill="rgb(240,187,13)"/><text x="92.3639%" y="191.50">genera..</text></g><g><title>hir_lowering (5,342,016 samples, 0.46%)</title><rect x="97.2789%" y="181" width="0.4614%" height="15" fill="rgb(223,113,26)"/><text x="97.5289%" y="191.50"></text></g><g><title>finish_ongoing_codegen (15,446,563 samples, 1.33%)</title><rect x="97.7428%" y="165" width="1.3341%" height="15" fill="rgb(206,192,2)"/><text x="97.9928%" y="175.50"></text></g><g><title>link_crate (6,805,662 samples, 0.59%)</title><rect x="99.0769%" y="165" width="0.5878%" height="15" fill="rgb(241,108,4)"/><text x="99.3269%" y="175.50"></text></g><g><title>link_binary (6,688,540 samples, 0.58%)</title><rect x="99.0870%" y="149" width="0.5777%" height="15" fill="rgb(247,173,49)"/><text x="99.3370%" y="159.50"></text></g><g><title>link_rlib (5,433,737 samples, 0.47%)</title><rect x="99.1954%" y="133" width="0.4693%" height="15" fill="rgb(224,114,35)"/><text x="99.4454%" y="143.50"></text></g><g><title>link (22,294,876 samples, 1.93%)</title><rect x="97.7402%" y="181" width="1.9255%" height="15" fill="rgb(245,159,27)"/><text x="97.9902%" y="191.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,586,778 samples, 0.22%)</title><rect x="99.7269%" y="181" width="0.2234%" height="15" fill="rgb(245,172,44)"/><text x="99.9769%" y="191.50"></text></g><g><title>all (1,157,863,213 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,157,863,213 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>