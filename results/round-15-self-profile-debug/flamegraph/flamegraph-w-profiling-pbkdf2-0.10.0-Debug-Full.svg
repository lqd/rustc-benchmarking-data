<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (35,504,000 samples, 10.88%)</title><rect x="0.2708%" y="197" width="10.8845%" height="15" fill="rgb(227,0,7)"/><text x="0.5208%" y="207.50">LLVM_passes</text></g><g><title>adt_drop_tys (368,795 samples, 0.11%)</title><rect x="14.4588%" y="69" width="0.1131%" height="15" fill="rgb(217,0,24)"/><text x="14.7088%" y="79.50"></text></g><g><title>is_copy_raw (1,073,149 samples, 0.33%)</title><rect x="14.5719%" y="69" width="0.3290%" height="15" fill="rgb(221,193,54)"/><text x="14.8219%" y="79.50"></text></g><g><title>evaluate_obligation (915,207 samples, 0.28%)</title><rect x="14.6203%" y="53" width="0.2806%" height="15" fill="rgb(248,212,6)"/><text x="14.8703%" y="63.50"></text></g><g><title>needs_drop_raw (1,559,296 samples, 0.48%)</title><rect x="14.4286%" y="85" width="0.4780%" height="15" fill="rgb(208,68,35)"/><text x="14.6786%" y="95.50"></text></g><g><title>specialization_graph_of (588,766 samples, 0.18%)</title><rect x="15.0426%" y="69" width="0.1805%" height="15" fill="rgb(232,128,0)"/><text x="15.2926%" y="79.50"></text></g><g><title>resolve_instance (1,064,832 samples, 0.33%)</title><rect x="14.9141%" y="85" width="0.3264%" height="15" fill="rgb(207,160,47)"/><text x="15.1641%" y="95.50"></text></g><g><title>thir_body (589,614 samples, 0.18%)</title><rect x="15.2456%" y="85" width="0.1808%" height="15" fill="rgb(228,23,34)"/><text x="15.4956%" y="95.50"></text></g><g><title>mir_const (6,395,093 samples, 1.96%)</title><rect x="13.4742%" y="133" width="1.9605%" height="15" fill="rgb(218,30,26)"/><text x="13.7242%" y="143.50">m..</text></g><g><title>unsafety_check_result (5,660,975 samples, 1.74%)</title><rect x="13.6993%" y="117" width="1.7355%" height="15" fill="rgb(220,122,19)"/><text x="13.9493%" y="127.50"></text></g><g><title>mir_built (5,124,119 samples, 1.57%)</title><rect x="13.8639%" y="101" width="1.5709%" height="15" fill="rgb(250,228,42)"/><text x="14.1139%" y="111.50"></text></g><g><title>mir_promoted (6,860,798 samples, 2.10%)</title><rect x="13.3453%" y="149" width="2.1033%" height="15" fill="rgb(240,193,28)"/><text x="13.5953%" y="159.50">m..</text></g><g><title>type_op_ascribe_user_type (354,482 samples, 0.11%)</title><rect x="15.4488%" y="149" width="0.1087%" height="15" fill="rgb(216,20,37)"/><text x="15.6988%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (778,639 samples, 0.24%)</title><rect x="15.5574%" y="149" width="0.2387%" height="15" fill="rgb(206,188,39)"/><text x="15.8074%" y="159.50"></text></g><g><title>normalize_projection_ty (532,407 samples, 0.16%)</title><rect x="15.6329%" y="133" width="0.1632%" height="15" fill="rgb(217,207,13)"/><text x="15.8829%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,807,186 samples, 0.55%)</title><rect x="15.8963%" y="149" width="0.5540%" height="15" fill="rgb(231,73,38)"/><text x="16.1463%" y="159.50"></text></g><g><title>MIR_borrow_checking (16,905,772 samples, 5.18%)</title><rect x="11.2720%" y="181" width="5.1828%" height="15" fill="rgb(225,20,46)"/><text x="11.5220%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (16,839,810 samples, 5.16%)</title><rect x="11.2923%" y="165" width="5.1626%" height="15" fill="rgb(210,31,41)"/><text x="11.5423%" y="175.50">mir_bo..</text></g><g><title>should_inherit_track_caller (369,653 samples, 0.11%)</title><rect x="16.7347%" y="133" width="0.1133%" height="15" fill="rgb(221,200,47)"/><text x="16.9847%" y="143.50"></text></g><g><title>codegen_fn_attrs (622,876 samples, 0.19%)</title><rect x="16.6649%" y="149" width="0.1910%" height="15" fill="rgb(226,26,5)"/><text x="16.9149%" y="159.50"></text></g><g><title>check_mod_attrs (955,421 samples, 0.29%)</title><rect x="16.5630%" y="165" width="0.2929%" height="15" fill="rgb(249,33,26)"/><text x="16.8130%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (608,505 samples, 0.19%)</title><rect x="16.9345%" y="165" width="0.1865%" height="15" fill="rgb(235,183,28)"/><text x="17.1845%" y="175.50"></text></g><g><title>misc_checking_1 (1,937,840 samples, 0.59%)</title><rect x="16.5543%" y="181" width="0.5941%" height="15" fill="rgb(221,5,38)"/><text x="16.8043%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (404,674 samples, 0.12%)</title><rect x="17.1491%" y="165" width="0.1241%" height="15" fill="rgb(247,18,42)"/><text x="17.3991%" y="175.50"></text></g><g><title>check_mod_liveness (340,714 samples, 0.10%)</title><rect x="17.1687%" y="149" width="0.1045%" height="15" fill="rgb(241,131,45)"/><text x="17.4187%" y="159.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (449,115 samples, 0.14%)</title><rect x="17.8216%" y="69" width="0.1377%" height="15" fill="rgb(249,31,29)"/><text x="18.0716%" y="79.50"></text></g><g><title>mir_borrowck (527,826 samples, 0.16%)</title><rect x="17.9949%" y="53" width="0.1618%" height="15" fill="rgb(225,111,53)"/><text x="18.2449%" y="63.50"></text></g><g><title>mir_for_ctfe (1,129,393 samples, 0.35%)</title><rect x="17.8108%" y="85" width="0.3462%" height="15" fill="rgb(238,160,17)"/><text x="18.0608%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (644,878 samples, 0.20%)</title><rect x="17.9593%" y="69" width="0.1977%" height="15" fill="rgb(214,148,48)"/><text x="18.2093%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,475,965 samples, 0.76%)</title><rect x="17.4149%" y="133" width="0.7591%" height="15" fill="rgb(232,36,49)"/><text x="17.6649%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,474,015 samples, 0.76%)</title><rect x="17.4155%" y="117" width="0.7585%" height="15" fill="rgb(209,103,24)"/><text x="17.6655%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,470,155 samples, 0.76%)</title><rect x="17.4167%" y="101" width="0.7573%" height="15" fill="rgb(229,88,8)"/><text x="17.6667%" y="111.50"></text></g><g><title>mir_const_qualif (414,114 samples, 0.13%)</title><rect x="18.1848%" y="133" width="0.1270%" height="15" fill="rgb(213,181,19)"/><text x="18.4348%" y="143.50"></text></g><g><title>misc_checking_2 (3,837,949 samples, 1.18%)</title><rect x="17.1484%" y="181" width="1.1766%" height="15" fill="rgb(254,191,54)"/><text x="17.3984%" y="191.50"></text></g><g><title>match_checking (3,431,065 samples, 1.05%)</title><rect x="17.2731%" y="165" width="1.0519%" height="15" fill="rgb(241,83,37)"/><text x="17.5231%" y="175.50"></text></g><g><title>check_match (3,408,224 samples, 1.04%)</title><rect x="17.2801%" y="149" width="1.0449%" height="15" fill="rgb(233,36,39)"/><text x="17.5301%" y="159.50"></text></g><g><title>death_checking (442,185 samples, 0.14%)</title><rect x="18.3702%" y="165" width="0.1356%" height="15" fill="rgb(226,3,54)"/><text x="18.6202%" y="175.50"></text></g><g><title>crate_lints (1,177,352 samples, 0.36%)</title><rect x="18.5062%" y="149" width="0.3609%" height="15" fill="rgb(245,192,40)"/><text x="18.7562%" y="159.50"></text></g><g><title>type_of (446,776 samples, 0.14%)</title><rect x="18.7302%" y="133" width="0.1370%" height="15" fill="rgb(238,167,29)"/><text x="18.9802%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (337,896 samples, 0.10%)</title><rect x="18.7635%" y="117" width="0.1036%" height="15" fill="rgb(232,182,51)"/><text x="19.0135%" y="127.50"></text></g><g><title>lint_checking (1,456,315 samples, 0.45%)</title><rect x="18.5058%" y="165" width="0.4465%" height="15" fill="rgb(231,60,39)"/><text x="18.7558%" y="175.50"></text></g><g><title>privacy_checking_modules (546,505 samples, 0.17%)</title><rect x="19.0025%" y="165" width="0.1675%" height="15" fill="rgb(208,69,12)"/><text x="19.2525%" y="175.50"></text></g><g><title>check_mod_privacy (544,275 samples, 0.17%)</title><rect x="19.0032%" y="149" width="0.1669%" height="15" fill="rgb(235,93,37)"/><text x="19.2532%" y="159.50"></text></g><g><title>misc_checking_3 (2,769,658 samples, 0.85%)</title><rect x="18.3250%" y="181" width="0.8491%" height="15" fill="rgb(213,116,39)"/><text x="18.5750%" y="191.50"></text></g><g><title>impl_parent (1,682,622 samples, 0.52%)</title><rect x="20.3497%" y="117" width="0.5158%" height="15" fill="rgb(222,207,29)"/><text x="20.5997%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (925,205 samples, 0.28%)</title><rect x="20.5819%" y="101" width="0.2836%" height="15" fill="rgb(206,96,30)"/><text x="20.8319%" y="111.50"></text></g><g><title>impl_trait_ref (3,537,490 samples, 1.08%)</title><rect x="20.8659%" y="117" width="1.0845%" height="15" fill="rgb(218,138,4)"/><text x="21.1159%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,777,405 samples, 0.85%)</title><rect x="21.0989%" y="101" width="0.8515%" height="15" fill="rgb(250,191,14)"/><text x="21.3489%" y="111.50"></text></g><g><title>trait_impls_of (813,085 samples, 0.25%)</title><rect x="21.9771%" y="117" width="0.2493%" height="15" fill="rgb(239,60,40)"/><text x="22.2271%" y="127.50"></text></g><g><title>coherent_trait (9,867,380 samples, 3.03%)</title><rect x="19.2018%" y="149" width="3.0250%" height="15" fill="rgb(206,27,48)"/><text x="19.4518%" y="159.50">coh..</text></g><g><title>specialization_graph_of (9,530,307 samples, 2.92%)</title><rect x="19.3051%" y="133" width="2.9217%" height="15" fill="rgb(225,35,8)"/><text x="19.5551%" y="143.50">sp..</text></g><g><title>coherence_checking (9,993,841 samples, 3.06%)</title><rect x="19.1941%" y="165" width="3.0638%" height="15" fill="rgb(250,213,24)"/><text x="19.4441%" y="175.50">coh..</text></g><g><title>evaluate_obligation (920,178 samples, 0.28%)</title><rect x="24.7846%" y="117" width="0.2821%" height="15" fill="rgb(247,123,22)"/><text x="25.0346%" y="127.50"></text></g><g><title>adt_def (386,293 samples, 0.12%)</title><rect x="27.6697%" y="85" width="0.1184%" height="15" fill="rgb(231,138,38)"/><text x="27.9197%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (384,183 samples, 0.12%)</title><rect x="27.6703%" y="69" width="0.1178%" height="15" fill="rgb(231,145,46)"/><text x="27.9203%" y="79.50"></text></g><g><title>item_attrs (360,653 samples, 0.11%)</title><rect x="27.6775%" y="53" width="0.1106%" height="15" fill="rgb(251,118,11)"/><text x="27.9275%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (358,353 samples, 0.11%)</title><rect x="27.6782%" y="37" width="0.1099%" height="15" fill="rgb(217,147,25)"/><text x="27.9282%" y="47.50"></text></g><g><title>adt_sized_constraint (409,304 samples, 0.13%)</title><rect x="27.6658%" y="101" width="0.1255%" height="15" fill="rgb(247,81,37)"/><text x="27.9158%" y="111.50"></text></g><g><title>associated_item (506,094 samples, 0.16%)</title><rect x="27.8444%" y="85" width="0.1552%" height="15" fill="rgb(209,12,38)"/><text x="28.0944%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (405,003 samples, 0.12%)</title><rect x="27.8754%" y="69" width="0.1242%" height="15" fill="rgb(227,1,9)"/><text x="28.1254%" y="79.50"></text></g><g><title>associated_items (695,237 samples, 0.21%)</title><rect x="27.7986%" y="101" width="0.2131%" height="15" fill="rgb(248,47,43)"/><text x="28.0486%" y="111.50"></text></g><g><title>dropck_outlives (427,546 samples, 0.13%)</title><rect x="28.0241%" y="101" width="0.1311%" height="15" fill="rgb(221,10,30)"/><text x="28.2741%" y="111.50"></text></g><g><title>evaluate_obligation (43,820,702 samples, 13.43%)</title><rect x="28.1552%" y="101" width="13.4341%" height="15" fill="rgb(210,229,1)"/><text x="28.4052%" y="111.50">evaluate_obligation</text></g><g><title>predicates_of (448,954 samples, 0.14%)</title><rect x="41.8857%" y="101" width="0.1376%" height="15" fill="rgb(222,148,37)"/><text x="42.1357%" y="111.50"></text></g><g><title>typeck (54,696,256 samples, 16.77%)</title><rect x="25.3355%" y="117" width="16.7682%" height="15" fill="rgb(234,67,33)"/><text x="25.5855%" y="127.50">typeck</text></g><g><title>item_bodies_checking (64,705,017 samples, 19.84%)</title><rect x="22.2734%" y="165" width="19.8366%" height="15" fill="rgb(247,98,35)"/><text x="22.5234%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (64,702,077 samples, 19.84%)</title><rect x="22.2743%" y="149" width="19.8357%" height="15" fill="rgb(247,138,52)"/><text x="22.5243%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (64,658,857 samples, 19.82%)</title><rect x="22.2876%" y="133" width="19.8225%" height="15" fill="rgb(213,79,30)"/><text x="22.5376%" y="143.50">typeck</text></g><g><title>item_types_checking (1,775,938 samples, 0.54%)</title><rect x="42.1101%" y="165" width="0.5444%" height="15" fill="rgb(246,177,23)"/><text x="42.3601%" y="175.50"></text></g><g><title>check_mod_item_types (1,773,418 samples, 0.54%)</title><rect x="42.1108%" y="149" width="0.5437%" height="15" fill="rgb(230,62,27)"/><text x="42.3608%" y="159.50"></text></g><g><title>typeck (552,426 samples, 0.17%)</title><rect x="42.4852%" y="133" width="0.1694%" height="15" fill="rgb(216,154,8)"/><text x="42.7352%" y="143.50"></text></g><g><title>named_region_map (359,526 samples, 0.11%)</title><rect x="42.9726%" y="117" width="0.1102%" height="15" fill="rgb(244,35,45)"/><text x="43.2226%" y="127.50"></text></g><g><title>generics_of (733,870 samples, 0.22%)</title><rect x="42.8644%" y="133" width="0.2250%" height="15" fill="rgb(251,115,12)"/><text x="43.1144%" y="143.50"></text></g><g><title>predicates_of (520,273 samples, 0.16%)</title><rect x="43.1371%" y="133" width="0.1595%" height="15" fill="rgb(240,54,50)"/><text x="43.3871%" y="143.50"></text></g><g><title>predicates_defined_on (459,213 samples, 0.14%)</title><rect x="43.1558%" y="117" width="0.1408%" height="15" fill="rgb(233,84,52)"/><text x="43.4058%" y="127.50"></text></g><g><title>type_collecting (2,539,855 samples, 0.78%)</title><rect x="42.6554%" y="165" width="0.7786%" height="15" fill="rgb(207,117,47)"/><text x="42.9054%" y="175.50"></text></g><g><title>collect_mod_item_types (2,522,495 samples, 0.77%)</title><rect x="42.6608%" y="149" width="0.7733%" height="15" fill="rgb(249,43,39)"/><text x="42.9108%" y="159.50"></text></g><g><title>type_of (448,544 samples, 0.14%)</title><rect x="43.2966%" y="133" width="0.1375%" height="15" fill="rgb(209,38,44)"/><text x="43.5466%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,748,427 samples, 0.54%)</title><rect x="43.4727%" y="149" width="0.5360%" height="15" fill="rgb(236,212,23)"/><text x="43.7227%" y="159.50"></text></g><g><title>analysis (109,136,258 samples, 33.46%)</title><rect x="11.1553%" y="197" width="33.4579%" height="15" fill="rgb(242,79,21)"/><text x="11.4053%" y="207.50">analysis</text></g><g><title>type_check_crate (82,979,732 samples, 25.44%)</title><rect x="19.1741%" y="181" width="25.4391%" height="15" fill="rgb(211,96,35)"/><text x="19.4241%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,843,220 samples, 1.18%)</title><rect x="43.4350%" y="165" width="1.1782%" height="15" fill="rgb(253,215,40)"/><text x="43.6850%" y="175.50"></text></g><g><title>check_item_well_formed (1,971,650 samples, 0.60%)</title><rect x="44.0088%" y="149" width="0.6044%" height="15" fill="rgb(211,81,21)"/><text x="44.2588%" y="159.50"></text></g><g><title>param_env (673,168 samples, 0.21%)</title><rect x="50.0848%" y="149" width="0.2064%" height="15" fill="rgb(208,190,38)"/><text x="50.3348%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (655,876 samples, 0.20%)</title><rect x="50.2912%" y="149" width="0.2011%" height="15" fill="rgb(235,213,38)"/><text x="50.5412%" y="159.50"></text></g><g><title>normalize_projection_ty (537,905 samples, 0.16%)</title><rect x="50.3274%" y="133" width="0.1649%" height="15" fill="rgb(237,122,38)"/><text x="50.5774%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,459,624 samples, 0.75%)</title><rect x="49.7473%" y="165" width="0.7540%" height="15" fill="rgb(244,218,35)"/><text x="49.9973%" y="175.50"></text></g><g><title>layout_of (407,233 samples, 0.12%)</title><rect x="50.5483%" y="165" width="0.1248%" height="15" fill="rgb(240,68,47)"/><text x="50.7983%" y="175.50"></text></g><g><title>symbol_name (483,062 samples, 0.15%)</title><rect x="50.6731%" y="165" width="0.1481%" height="15" fill="rgb(210,16,53)"/><text x="50.9231%" y="175.50"></text></g><g><title>codegen_module (18,858,082 samples, 5.78%)</title><rect x="45.0511%" y="181" width="5.7813%" height="15" fill="rgb(235,124,12)"/><text x="45.3011%" y="191.50">codegen..</text></g><g><title>codegen_crate (20,326,936 samples, 6.23%)</title><rect x="44.6164%" y="197" width="6.2316%" height="15" fill="rgb(224,169,11)"/><text x="44.8664%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (96,793,156 samples, 29.67%)</title><rect x="50.8982%" y="181" width="29.6739%" height="15" fill="rgb(250,166,2)"/><text x="51.1482%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (92,468,199 samples, 28.35%)</title><rect x="52.2241%" y="165" width="28.3480%" height="15" fill="rgb(242,216,29)"/><text x="52.4741%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (100,669,745 samples, 30.86%)</title><rect x="50.8480%" y="197" width="30.8624%" height="15" fill="rgb(230,116,27)"/><text x="51.0980%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,712,778 samples, 1.14%)</title><rect x="80.5721%" y="181" width="1.1382%" height="15" fill="rgb(228,99,48)"/><text x="80.8221%" y="191.50"></text></g><g><title>metadata_register_crate (1,248,812 samples, 0.38%)</title><rect x="87.2227%" y="149" width="0.3828%" height="15" fill="rgb(253,11,6)"/><text x="87.4727%" y="159.50"></text></g><g><title>metadata_register_crate (455,444 samples, 0.14%)</title><rect x="87.4659%" y="133" width="0.1396%" height="15" fill="rgb(247,143,39)"/><text x="87.7159%" y="143.50"></text></g><g><title>macro_expand_crate (18,758,760 samples, 5.75%)</title><rect x="81.8813%" y="181" width="5.7509%" height="15" fill="rgb(236,97,10)"/><text x="82.1313%" y="191.50">macro_e..</text></g><g><title>expand_crate (18,743,420 samples, 5.75%)</title><rect x="81.8860%" y="165" width="5.7462%" height="15" fill="rgb(233,208,19)"/><text x="82.1360%" y="175.50">expand_..</text></g><g><title>late_resolve_crate (2,149,701 samples, 0.66%)</title><rect x="87.7625%" y="165" width="0.6590%" height="15" fill="rgb(216,164,2)"/><text x="88.0125%" y="175.50"></text></g><g><title>configure_and_expand (22,033,454 samples, 6.75%)</title><rect x="81.7104%" y="197" width="6.7548%" height="15" fill="rgb(220,129,5)"/><text x="81.9604%" y="207.50">configure..</text></g><g><title>resolve_crate (2,633,787 samples, 0.81%)</title><rect x="87.6577%" y="181" width="0.8074%" height="15" fill="rgb(242,17,10)"/><text x="87.9077%" y="191.50"></text></g><g><title>early_lint_checks (439,834 samples, 0.13%)</title><rect x="88.5338%" y="197" width="0.1348%" height="15" fill="rgb(242,107,0)"/><text x="88.7838%" y="207.50"></text></g><g><title>free_global_ctxt (3,789,029 samples, 1.16%)</title><rect x="88.6687%" y="197" width="1.1616%" height="15" fill="rgb(251,28,31)"/><text x="88.9187%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (531,848 samples, 0.16%)</title><rect x="90.8129%" y="101" width="0.1630%" height="15" fill="rgb(233,223,10)"/><text x="91.0629%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (808,731 samples, 0.25%)</title><rect x="90.9759%" y="101" width="0.2479%" height="15" fill="rgb(215,21,27)"/><text x="91.2259%" y="111.50"></text></g><g><title>optimized_mir (2,429,528 samples, 0.74%)</title><rect x="90.4809%" y="117" width="0.7448%" height="15" fill="rgb(232,23,21)"/><text x="90.7309%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,077,632 samples, 0.33%)</title><rect x="91.3051%" y="101" width="0.3304%" height="15" fill="rgb(244,5,23)"/><text x="91.5551%" y="111.50"></text></g><g><title>resolve_instance (1,824,358 samples, 0.56%)</title><rect x="91.2258%" y="117" width="0.5593%" height="15" fill="rgb(226,81,46)"/><text x="91.4758%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (368,823 samples, 0.11%)</title><rect x="91.8114%" y="117" width="0.1131%" height="15" fill="rgb(247,70,30)"/><text x="92.0614%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (6,246,793 samples, 1.92%)</title><rect x="90.1708%" y="133" width="1.9151%" height="15" fill="rgb(212,68,19)"/><text x="90.4208%" y="143.50">m..</text></g><g><title>vtable_entries (339,503 samples, 0.10%)</title><rect x="91.9818%" y="117" width="0.1041%" height="15" fill="rgb(240,187,13)"/><text x="92.2318%" y="127.50"></text></g><g><title>monomorphization_collector (6,288,713 samples, 1.93%)</title><rect x="90.1700%" y="149" width="1.9279%" height="15" fill="rgb(223,113,26)"/><text x="90.4200%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (465,204 samples, 0.14%)</title><rect x="92.0990%" y="133" width="0.1426%" height="15" fill="rgb(206,192,2)"/><text x="92.3490%" y="143.50"></text></g><g><title>symbol_name (423,164 samples, 0.13%)</title><rect x="92.1119%" y="117" width="0.1297%" height="15" fill="rgb(241,108,4)"/><text x="92.3619%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (7,003,530 samples, 2.15%)</title><rect x="90.1622%" y="165" width="2.1471%" height="15" fill="rgb(247,173,49)"/><text x="90.4122%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (689,177 samples, 0.21%)</title><rect x="92.0979%" y="149" width="0.2113%" height="15" fill="rgb(224,114,35)"/><text x="92.3479%" y="159.50"></text></g><g><title>exported_symbols (7,133,853 samples, 2.19%)</title><rect x="90.1505%" y="181" width="2.1870%" height="15" fill="rgb(245,159,27)"/><text x="90.4005%" y="191.50">e..</text></g><g><title>layout_of (742,647 samples, 0.23%)</title><rect x="92.7128%" y="165" width="0.2277%" height="15" fill="rgb(245,172,44)"/><text x="92.9628%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,404,014 samples, 0.43%)</title><rect x="92.9405%" y="165" width="0.4304%" height="15" fill="rgb(236,23,11)"/><text x="93.1905%" y="175.50"></text></g><g><title>optimized_mir (3,309,453 samples, 1.01%)</title><rect x="92.3574%" y="181" width="1.0146%" height="15" fill="rgb(205,117,38)"/><text x="92.6074%" y="191.50"></text></g><g><title>generate_crate_metadata (11,583,707 samples, 3.55%)</title><rect x="89.8303%" y="197" width="3.5512%" height="15" fill="rgb(237,72,25)"/><text x="90.0803%" y="207.50">gene..</text></g><g><title>hir_lowering (3,618,597 samples, 1.11%)</title><rect x="93.3815%" y="197" width="1.1094%" height="15" fill="rgb(244,70,9)"/><text x="93.6315%" y="207.50"></text></g><g><title>finish_ongoing_codegen (13,469,386 samples, 4.13%)</title><rect x="94.4953%" y="181" width="4.1293%" height="15" fill="rgb(217,125,39)"/><text x="94.7453%" y="191.50">fini..</text></g><g><title>link_crate (1,390,904 samples, 0.43%)</title><rect x="98.6246%" y="181" width="0.4264%" height="15" fill="rgb(235,36,10)"/><text x="98.8746%" y="191.50"></text></g><g><title>link_binary (1,376,764 samples, 0.42%)</title><rect x="98.6290%" y="165" width="0.4221%" height="15" fill="rgb(251,123,47)"/><text x="98.8790%" y="175.50"></text></g><g><title>link_rlib (905,340 samples, 0.28%)</title><rect x="98.7735%" y="149" width="0.2776%" height="15" fill="rgb(221,13,13)"/><text x="99.0235%" y="159.50"></text></g><g><title>link (14,885,140 samples, 4.56%)</title><rect x="94.4909%" y="197" width="4.5633%" height="15" fill="rgb(238,131,9)"/><text x="94.7409%" y="207.50">link</text></g><g><title>parse_crate (1,205,572 samples, 0.37%)</title><rect x="99.0542%" y="197" width="0.3696%" height="15" fill="rgb(211,50,8)"/><text x="99.3042%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,066,771 samples, 0.33%)</title><rect x="99.5222%" y="197" width="0.3270%" height="15" fill="rgb(245,182,24)"/><text x="99.7722%" y="207.50"></text></g><g><title>all (326,189,443 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (326,189,443 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (344,484 samples, 0.11%)</title><rect x="99.8944%" y="197" width="0.1056%" height="15" fill="rgb(213,55,15)"/><text x="100.1444%" y="207.50"></text></g></svg></svg>