<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,069,143 samples, 14.14%)</title><rect x="1.5205%" y="229" width="14.1378%" height="15" fill="rgb(227,0,7)"/><text x="1.7705%" y="239.50">LLVM_passes</text></g><g><title>mir_const (174,202 samples, 0.80%)</title><rect x="17.3976%" y="165" width="0.8024%" height="15" fill="rgb(217,0,24)"/><text x="17.6476%" y="175.50"></text></g><g><title>unsafety_check_result (103,011 samples, 0.47%)</title><rect x="17.7256%" y="149" width="0.4745%" height="15" fill="rgb(221,193,54)"/><text x="17.9756%" y="159.50"></text></g><g><title>mir_built (66,431 samples, 0.31%)</title><rect x="17.8941%" y="133" width="0.3060%" height="15" fill="rgb(248,212,6)"/><text x="18.1441%" y="143.50"></text></g><g><title>mir_promoted (214,072 samples, 0.99%)</title><rect x="17.2322%" y="181" width="0.9861%" height="15" fill="rgb(208,68,35)"/><text x="17.4822%" y="191.50"></text></g><g><title>MIR_borrow_checking (504,715 samples, 2.32%)</title><rect x="15.9396%" y="213" width="2.3249%" height="15" fill="rgb(232,128,0)"/><text x="16.1896%" y="223.50">M..</text></g><g><title>mir_borrowck (502,875 samples, 2.32%)</title><rect x="15.9481%" y="197" width="2.3165%" height="15" fill="rgb(207,160,47)"/><text x="16.1981%" y="207.50">m..</text></g><g><title>hir_module_items (49,801 samples, 0.23%)</title><rect x="18.2738%" y="213" width="0.2294%" height="15" fill="rgb(228,23,34)"/><text x="18.5238%" y="223.50"></text></g><g><title>get_lang_items (38,110 samples, 0.18%)</title><rect x="18.8796%" y="165" width="0.1756%" height="15" fill="rgb(218,30,26)"/><text x="19.1296%" y="175.50"></text></g><g><title>should_inherit_track_caller (25,130 samples, 0.12%)</title><rect x="19.0551%" y="165" width="0.1158%" height="15" fill="rgb(220,122,19)"/><text x="19.3051%" y="175.50"></text></g><g><title>codegen_fn_attrs (116,871 samples, 0.54%)</title><rect x="18.6961%" y="181" width="0.5384%" height="15" fill="rgb(250,228,42)"/><text x="18.9461%" y="191.50"></text></g><g><title>check_mod_attrs (146,231 samples, 0.67%)</title><rect x="18.5617%" y="197" width="0.6736%" height="15" fill="rgb(240,193,28)"/><text x="18.8117%" y="207.50"></text></g><g><title>lookup_deprecation_entry (25,591 samples, 0.12%)</title><rect x="19.4135%" y="181" width="0.1179%" height="15" fill="rgb(216,20,37)"/><text x="19.6635%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (67,891 samples, 0.31%)</title><rect x="19.3164%" y="197" width="0.3127%" height="15" fill="rgb(206,188,39)"/><text x="19.5664%" y="207.50"></text></g><g><title>misc_checking_1 (259,073 samples, 1.19%)</title><rect x="18.5046%" y="213" width="1.1934%" height="15" fill="rgb(217,207,13)"/><text x="18.7546%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (31,901 samples, 0.15%)</title><rect x="19.7032%" y="197" width="0.1469%" height="15" fill="rgb(231,73,38)"/><text x="19.9532%" y="207.50"></text></g><g><title>check_mod_liveness (25,821 samples, 0.12%)</title><rect x="19.7312%" y="181" width="0.1189%" height="15" fill="rgb(225,20,46)"/><text x="19.9812%" y="191.50"></text></g><g><title>misc_checking_2 (75,961 samples, 0.35%)</title><rect x="19.6980%" y="213" width="0.3499%" height="15" fill="rgb(210,31,41)"/><text x="19.9480%" y="223.50"></text></g><g><title>match_checking (42,930 samples, 0.20%)</title><rect x="19.8501%" y="197" width="0.1978%" height="15" fill="rgb(221,200,47)"/><text x="20.1001%" y="207.50"></text></g><g><title>check_match (41,400 samples, 0.19%)</title><rect x="19.8572%" y="181" width="0.1907%" height="15" fill="rgb(226,26,5)"/><text x="20.1072%" y="191.50"></text></g><g><title>death_checking (47,930 samples, 0.22%)</title><rect x="20.1506%" y="197" width="0.2208%" height="15" fill="rgb(249,33,26)"/><text x="20.4006%" y="207.50"></text></g><g><title>crate_lints (57,581 samples, 0.27%)</title><rect x="20.3772%" y="181" width="0.2652%" height="15" fill="rgb(235,183,28)"/><text x="20.6272%" y="191.50"></text></g><g><title>param_env (38,481 samples, 0.18%)</title><rect x="20.4651%" y="165" width="0.1773%" height="15" fill="rgb(221,5,38)"/><text x="20.7151%" y="175.50"></text></g><g><title>lint_checking (72,181 samples, 0.33%)</title><rect x="20.3714%" y="197" width="0.3325%" height="15" fill="rgb(247,18,42)"/><text x="20.6214%" y="207.50"></text></g><g><title>privacy_access_levels (27,110 samples, 0.12%)</title><rect x="20.7039%" y="197" width="0.1249%" height="15" fill="rgb(241,131,45)"/><text x="20.9539%" y="207.50"></text></g><g><title>misc_checking_3 (200,652 samples, 0.92%)</title><rect x="20.0479%" y="213" width="0.9243%" height="15" fill="rgb(249,31,29)"/><text x="20.2979%" y="223.50"></text></g><g><title>coherent_trait (42,240 samples, 0.19%)</title><rect x="21.0596%" y="181" width="0.1946%" height="15" fill="rgb(225,111,53)"/><text x="21.3096%" y="191.50"></text></g><g><title>specialization_graph_of (35,530 samples, 0.16%)</title><rect x="21.0906%" y="165" width="0.1637%" height="15" fill="rgb(238,160,17)"/><text x="21.3406%" y="175.50"></text></g><g><title>coherence_checking (65,940 samples, 0.30%)</title><rect x="21.0254%" y="197" width="0.3037%" height="15" fill="rgb(214,148,48)"/><text x="21.2754%" y="207.50"></text></g><g><title>impl_parent (104,500 samples, 0.48%)</title><rect x="22.7852%" y="53" width="0.4814%" height="15" fill="rgb(232,36,49)"/><text x="23.0352%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (82,860 samples, 0.38%)</title><rect x="22.8849%" y="37" width="0.3817%" height="15" fill="rgb(209,103,24)"/><text x="23.1349%" y="47.50"></text></g><g><title>impl_trait_ref (443,434 samples, 2.04%)</title><rect x="23.2666%" y="53" width="2.0426%" height="15" fill="rgb(229,88,8)"/><text x="23.5166%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (422,434 samples, 1.95%)</title><rect x="23.3633%" y="37" width="1.9459%" height="15" fill="rgb(213,181,19)"/><text x="23.6133%" y="47.50">m..</text></g><g><title>adt_destructor (667,977 samples, 3.08%)</title><rect x="22.3547%" y="117" width="3.0770%" height="15" fill="rgb(254,191,54)"/><text x="22.6047%" y="127.50">adt..</text></g><g><title>metadata_decode_entry_adt_destructor (667,337 samples, 3.07%)</title><rect x="22.3577%" y="101" width="3.0740%" height="15" fill="rgb(241,83,37)"/><text x="22.6077%" y="111.50">met..</text></g><g><title>coherent_trait (665,127 samples, 3.06%)</title><rect x="22.3678%" y="85" width="3.0639%" height="15" fill="rgb(233,36,39)"/><text x="22.6178%" y="95.50">coh..</text></g><g><title>specialization_graph_of (662,987 samples, 3.05%)</title><rect x="22.3777%" y="69" width="3.0540%" height="15" fill="rgb(226,3,54)"/><text x="22.6277%" y="79.50">spe..</text></g><g><title>trait_impls_of (26,591 samples, 0.12%)</title><rect x="25.3092%" y="53" width="0.1225%" height="15" fill="rgb(245,192,40)"/><text x="25.5592%" y="63.50"></text></g><g><title>dropck_outlives (691,477 samples, 3.19%)</title><rect x="22.2529%" y="149" width="3.1852%" height="15" fill="rgb(238,167,29)"/><text x="22.5029%" y="159.50">dro..</text></g><g><title>adt_dtorck_constraint (673,527 samples, 3.10%)</title><rect x="22.3355%" y="133" width="3.1026%" height="15" fill="rgb(232,182,51)"/><text x="22.5855%" y="143.50">adt..</text></g><g><title>evaluate_obligation (26,550 samples, 0.12%)</title><rect x="25.4381%" y="149" width="0.1223%" height="15" fill="rgb(231,60,39)"/><text x="25.6881%" y="159.50"></text></g><g><title>item_bodies_checking (979,121 samples, 4.51%)</title><rect x="21.3471%" y="197" width="4.5102%" height="15" fill="rgb(208,69,12)"/><text x="21.5971%" y="207.50">item_..</text></g><g><title>typeck_item_bodies (977,781 samples, 4.50%)</title><rect x="21.3533%" y="181" width="4.5041%" height="15" fill="rgb(235,93,37)"/><text x="21.6033%" y="191.50">typec..</text></g><g><title>typeck (975,571 samples, 4.49%)</title><rect x="21.3635%" y="165" width="4.4939%" height="15" fill="rgb(213,116,39)"/><text x="21.6135%" y="175.50">typeck</text></g><g><title>fn_sig (27,331 samples, 0.13%)</title><rect x="26.1118%" y="165" width="0.1259%" height="15" fill="rgb(222,207,29)"/><text x="26.3618%" y="175.50"></text></g><g><title>generics_of (36,690 samples, 0.17%)</title><rect x="26.2377%" y="165" width="0.1690%" height="15" fill="rgb(206,96,30)"/><text x="26.4877%" y="175.50"></text></g><g><title>explicit_predicates_of (36,701 samples, 0.17%)</title><rect x="26.4456%" y="133" width="0.1691%" height="15" fill="rgb(218,138,4)"/><text x="26.6956%" y="143.50"></text></g><g><title>predicates_of (47,691 samples, 0.22%)</title><rect x="26.4138%" y="165" width="0.2197%" height="15" fill="rgb(250,191,14)"/><text x="26.6638%" y="175.50"></text></g><g><title>predicates_defined_on (45,051 samples, 0.21%)</title><rect x="26.4260%" y="149" width="0.2075%" height="15" fill="rgb(239,60,40)"/><text x="26.6760%" y="159.50"></text></g><g><title>super_predicates_of (82,211 samples, 0.38%)</title><rect x="26.6335%" y="165" width="0.3787%" height="15" fill="rgb(206,27,48)"/><text x="26.8835%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (76,090 samples, 0.35%)</title><rect x="26.6617%" y="149" width="0.3505%" height="15" fill="rgb(225,35,8)"/><text x="26.9117%" y="159.50"></text></g><g><title>type_collecting (247,313 samples, 1.14%)</title><rect x="25.9339%" y="197" width="1.1392%" height="15" fill="rgb(250,213,24)"/><text x="26.1839%" y="207.50"></text></g><g><title>collect_mod_item_types (241,513 samples, 1.11%)</title><rect x="25.9607%" y="181" width="1.1125%" height="15" fill="rgb(247,123,22)"/><text x="26.2107%" y="191.50"></text></g><g><title>param_env (109,411 samples, 0.50%)</title><rect x="28.1070%" y="165" width="0.5040%" height="15" fill="rgb(231,138,38)"/><text x="28.3570%" y="175.50"></text></g><g><title>predicates_of (27,140 samples, 0.13%)</title><rect x="28.6110%" y="165" width="0.1250%" height="15" fill="rgb(231,145,46)"/><text x="28.8610%" y="175.50"></text></g><g><title>check_item_well_formed (373,014 samples, 1.72%)</title><rect x="27.1149%" y="181" width="1.7183%" height="15" fill="rgb(251,118,11)"/><text x="27.3649%" y="191.50"></text></g><g><title>evaluate_obligation (88,151 samples, 0.41%)</title><rect x="29.2383%" y="165" width="0.4061%" height="15" fill="rgb(217,147,25)"/><text x="29.4883%" y="175.50"></text></g><g><title>implied_outlives_bounds (37,480 samples, 0.17%)</title><rect x="29.6444%" y="165" width="0.1726%" height="15" fill="rgb(247,81,37)"/><text x="29.8944%" y="175.50"></text></g><g><title>analysis (3,095,813 samples, 14.26%)</title><rect x="15.6583%" y="229" width="14.2606%" height="15" fill="rgb(209,12,38)"/><text x="15.9083%" y="239.50">analysis</text></g><g><title>type_check_crate (1,942,241 samples, 8.95%)</title><rect x="20.9722%" y="213" width="8.9468%" height="15" fill="rgb(227,1,9)"/><text x="21.2222%" y="223.50">type_check_cr..</text></g><g><title>wf_checking (617,477 samples, 2.84%)</title><rect x="27.0746%" y="197" width="2.8444%" height="15" fill="rgb(248,47,43)"/><text x="27.3246%" y="207.50">wf..</text></g><g><title>check_trait_item_well_formed (235,702 samples, 1.09%)</title><rect x="28.8332%" y="181" width="1.0857%" height="15" fill="rgb(221,10,30)"/><text x="29.0832%" y="191.50"></text></g><g><title>codegen_module (455,385 samples, 2.10%)</title><rect x="32.8346%" y="213" width="2.0977%" height="15" fill="rgb(210,229,1)"/><text x="33.0846%" y="223.50">c..</text></g><g><title>native_libraries (23,720 samples, 0.11%)</title><rect x="35.0842%" y="213" width="0.1093%" height="15" fill="rgb(222,148,37)"/><text x="35.3342%" y="223.50"></text></g><g><title>codegen_crate (1,154,963 samples, 5.32%)</title><rect x="29.9430%" y="229" width="5.3202%" height="15" fill="rgb(234,67,33)"/><text x="30.1930%" y="239.50">codegen..</text></g><g><title>LLVM_module_codegen (2,638,758 samples, 12.16%)</title><rect x="35.3288%" y="213" width="12.1552%" height="15" fill="rgb(247,98,35)"/><text x="35.5788%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,539,668 samples, 11.70%)</title><rect x="35.7853%" y="197" width="11.6988%" height="15" fill="rgb(247,138,52)"/><text x="36.0353%" y="207.50">LLVM_module_codeg..</text></g><g><title>codegen_module_optimize (2,902,021 samples, 13.37%)</title><rect x="35.2632%" y="229" width="13.3679%" height="15" fill="rgb(213,79,30)"/><text x="35.5132%" y="239.50">codegen_module_optim..</text></g><g><title>LLVM_module_optimize (249,023 samples, 1.15%)</title><rect x="47.4841%" y="213" width="1.1471%" height="15" fill="rgb(246,177,23)"/><text x="47.7341%" y="223.50"></text></g><g><title>AST_validation (39,080 samples, 0.18%)</title><rect x="49.0565%" y="213" width="0.1800%" height="15" fill="rgb(230,62,27)"/><text x="49.3065%" y="223.50"></text></g><g><title>crate_injection (43,660 samples, 0.20%)</title><rect x="49.2802%" y="213" width="0.2011%" height="15" fill="rgb(216,154,8)"/><text x="49.5302%" y="223.50"></text></g><g><title>macro_expand_crate (5,187,045 samples, 23.89%)</title><rect x="49.4813%" y="213" width="23.8937%" height="15" fill="rgb(244,35,45)"/><text x="49.7313%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (5,177,285 samples, 23.85%)</title><rect x="49.5263%" y="197" width="23.8488%" height="15" fill="rgb(251,115,12)"/><text x="49.7763%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (1,322,293 samples, 6.09%)</title><rect x="67.2840%" y="181" width="6.0910%" height="15" fill="rgb(240,54,50)"/><text x="67.5340%" y="191.50">metadata..</text></g><g><title>metadata_register_crate (464,834 samples, 2.14%)</title><rect x="71.2338%" y="165" width="2.1412%" height="15" fill="rgb(233,84,52)"/><text x="71.4838%" y="175.50">m..</text></g><g><title>metadata_register_crate (37,930 samples, 0.17%)</title><rect x="73.2003%" y="149" width="0.1747%" height="15" fill="rgb(207,117,47)"/><text x="73.4503%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (50,051 samples, 0.23%)</title><rect x="73.3861%" y="213" width="0.2306%" height="15" fill="rgb(249,43,39)"/><text x="73.6361%" y="223.50"></text></g><g><title>finalize_macro_resolutions (144,341 samples, 0.66%)</title><rect x="73.6782%" y="197" width="0.6649%" height="15" fill="rgb(209,38,44)"/><text x="73.9282%" y="207.50"></text></g><g><title>late_resolve_crate (161,952 samples, 0.75%)</title><rect x="74.3431%" y="197" width="0.7460%" height="15" fill="rgb(236,212,23)"/><text x="74.5931%" y="207.50"></text></g><g><title>configure_and_expand (5,762,071 samples, 26.54%)</title><rect x="48.6312%" y="229" width="26.5425%" height="15" fill="rgb(242,79,21)"/><text x="48.8812%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (338,013 samples, 1.56%)</title><rect x="73.6167%" y="213" width="1.5570%" height="15" fill="rgb(211,96,35)"/><text x="73.8667%" y="223.50"></text></g><g><title>early_lint_checks (41,841 samples, 0.19%)</title><rect x="75.2966%" y="229" width="0.1927%" height="15" fill="rgb(253,215,40)"/><text x="75.5466%" y="239.50"></text></g><g><title>free_global_ctxt (2,187,703 samples, 10.08%)</title><rect x="75.4893%" y="229" width="10.0775%" height="15" fill="rgb(211,81,21)"/><text x="75.7393%" y="239.50">free_global_ctxt</text></g><g><title>crate_hash (60,301 samples, 0.28%)</title><rect x="86.3194%" y="213" width="0.2778%" height="15" fill="rgb(208,190,38)"/><text x="86.5694%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (40,740 samples, 0.19%)</title><rect x="86.7314%" y="197" width="0.1877%" height="15" fill="rgb(235,213,38)"/><text x="86.9814%" y="207.50"></text></g><g><title>exported_symbols (60,960 samples, 0.28%)</title><rect x="86.6974%" y="213" width="0.2808%" height="15" fill="rgb(237,122,38)"/><text x="86.9474%" y="223.50"></text></g><g><title>layout_of (26,680 samples, 0.12%)</title><rect x="87.4282%" y="197" width="0.1229%" height="15" fill="rgb(244,218,35)"/><text x="87.6782%" y="207.50"></text></g><g><title>optimized_mir (183,982 samples, 0.85%)</title><rect x="87.0910%" y="213" width="0.8475%" height="15" fill="rgb(240,68,47)"/><text x="87.3410%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (84,101 samples, 0.39%)</title><rect x="87.5511%" y="197" width="0.3874%" height="15" fill="rgb(210,16,53)"/><text x="87.8011%" y="207.50"></text></g><g><title>generate_crate_metadata (533,486 samples, 2.46%)</title><rect x="85.5668%" y="229" width="2.4575%" height="15" fill="rgb(235,124,12)"/><text x="85.8168%" y="239.50">ge..</text></g><g><title>hir_lowering (175,381 samples, 0.81%)</title><rect x="88.0243%" y="229" width="0.8079%" height="15" fill="rgb(224,169,11)"/><text x="88.2743%" y="239.50"></text></g><g><title>finish_ongoing_codegen (364,154 samples, 1.68%)</title><rect x="88.8989%" y="213" width="1.6774%" height="15" fill="rgb(250,166,2)"/><text x="89.1489%" y="223.50"></text></g><g><title>join_worker_thread (37,260 samples, 0.17%)</title><rect x="90.4047%" y="197" width="0.1716%" height="15" fill="rgb(242,216,29)"/><text x="90.6547%" y="207.50"></text></g><g><title>link_crate (740,358 samples, 3.41%)</title><rect x="90.5764%" y="213" width="3.4104%" height="15" fill="rgb(230,116,27)"/><text x="90.8264%" y="223.50">lin..</text></g><g><title>link_binary (728,698 samples, 3.36%)</title><rect x="90.6301%" y="197" width="3.3567%" height="15" fill="rgb(228,99,48)"/><text x="90.8801%" y="207.50">lin..</text></g><g><title>link_rlib (475,095 samples, 2.19%)</title><rect x="91.7983%" y="181" width="2.1885%" height="15" fill="rgb(253,11,6)"/><text x="92.0483%" y="191.50">l..</text></g><g><title>link (1,126,652 samples, 5.19%)</title><rect x="88.8322%" y="229" width="5.1898%" height="15" fill="rgb(247,143,39)"/><text x="89.0822%" y="239.50">link</text></g><g><title>parse_crate (210,522 samples, 0.97%)</title><rect x="94.0220%" y="229" width="0.9698%" height="15" fill="rgb(236,97,10)"/><text x="94.2720%" y="239.50"></text></g><g><title>prepare_outputs (200,392 samples, 0.92%)</title><rect x="95.0132%" y="229" width="0.9231%" height="15" fill="rgb(233,208,19)"/><text x="95.2632%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (521,066 samples, 2.40%)</title><rect x="95.9363%" y="229" width="2.4003%" height="15" fill="rgb(216,164,2)"/><text x="96.1863%" y="239.50">se..</text></g><g><title>setup_global_ctxt (62,051 samples, 0.29%)</title><rect x="98.3421%" y="229" width="0.2858%" height="15" fill="rgb(220,129,5)"/><text x="98.5921%" y="239.50"></text></g><g><title>all (21,708,811 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (21,708,811 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (297,863 samples, 1.37%)</title><rect x="98.6279%" y="229" width="1.3721%" height="15" fill="rgb(251,28,31)"/><text x="98.8779%" y="239.50"></text></g></svg></svg>