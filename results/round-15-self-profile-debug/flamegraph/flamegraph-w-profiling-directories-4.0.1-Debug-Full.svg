<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (64,306,008 samples, 13.86%)</title><rect x="0.1202%" y="197" width="13.8597%" height="15" fill="rgb(227,0,7)"/><text x="0.3702%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (711,629 samples, 0.15%)</title><rect x="17.4695%" y="69" width="0.1534%" height="15" fill="rgb(217,0,24)"/><text x="17.7195%" y="79.50"></text></g><g><title>evaluate_obligation (588,996 samples, 0.13%)</title><rect x="17.4960%" y="53" width="0.1269%" height="15" fill="rgb(221,193,54)"/><text x="17.7460%" y="63.50"></text></g><g><title>needs_drop_raw (1,257,005 samples, 0.27%)</title><rect x="17.3619%" y="85" width="0.2709%" height="15" fill="rgb(248,212,6)"/><text x="17.6119%" y="95.50"></text></g><g><title>specialization_graph_of (1,636,547 samples, 0.35%)</title><rect x="17.6738%" y="69" width="0.3527%" height="15" fill="rgb(208,68,35)"/><text x="17.9238%" y="79.50"></text></g><g><title>impl_trait_ref (742,335 samples, 0.16%)</title><rect x="17.8665%" y="53" width="0.1600%" height="15" fill="rgb(232,128,0)"/><text x="18.1165%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (607,124 samples, 0.13%)</title><rect x="17.8957%" y="37" width="0.1309%" height="15" fill="rgb(207,160,47)"/><text x="18.1457%" y="47.50"></text></g><g><title>resolve_instance (1,862,077 samples, 0.40%)</title><rect x="17.6328%" y="85" width="0.4013%" height="15" fill="rgb(228,23,34)"/><text x="17.8828%" y="95.50"></text></g><g><title>thir_body (807,826 samples, 0.17%)</title><rect x="18.0425%" y="85" width="0.1741%" height="15" fill="rgb(218,30,26)"/><text x="18.2925%" y="95.50"></text></g><g><title>mir_const (7,666,095 samples, 1.65%)</title><rect x="16.5702%" y="133" width="1.6522%" height="15" fill="rgb(220,122,19)"/><text x="16.8202%" y="143.50"></text></g><g><title>unsafety_check_result (6,770,727 samples, 1.46%)</title><rect x="16.7632%" y="117" width="1.4593%" height="15" fill="rgb(250,228,42)"/><text x="17.0132%" y="127.50"></text></g><g><title>mir_built (6,174,699 samples, 1.33%)</title><rect x="16.8916%" y="101" width="1.3308%" height="15" fill="rgb(240,193,28)"/><text x="17.1416%" y="111.50"></text></g><g><title>mir_promoted (8,394,503 samples, 1.81%)</title><rect x="16.4215%" y="149" width="1.8092%" height="15" fill="rgb(216,20,37)"/><text x="16.6715%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (1,480,368 samples, 0.32%)</title><rect x="18.2653%" y="149" width="0.3191%" height="15" fill="rgb(206,188,39)"/><text x="18.5153%" y="159.50"></text></g><g><title>MIR_borrow_checking (21,035,153 samples, 4.53%)</title><rect x="14.0525%" y="181" width="4.5336%" height="15" fill="rgb(217,207,13)"/><text x="14.3025%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (20,915,413 samples, 4.51%)</title><rect x="14.0783%" y="165" width="4.5078%" height="15" fill="rgb(231,73,38)"/><text x="14.3283%" y="175.50">mir_b..</text></g><g><title>check_mod_attrs (658,867 samples, 0.14%)</title><rect x="18.6319%" y="165" width="0.1420%" height="15" fill="rgb(225,20,46)"/><text x="18.8819%" y="175.50"></text></g><g><title>misc_checking_1 (1,232,113 samples, 0.27%)</title><rect x="18.6282%" y="181" width="0.2656%" height="15" fill="rgb(210,31,41)"/><text x="18.8782%" y="191.50"></text></g><g><title>misc_checking_2 (694,757 samples, 0.15%)</title><rect x="18.8938%" y="181" width="0.1497%" height="15" fill="rgb(221,200,47)"/><text x="19.1438%" y="191.50"></text></g><g><title>crate_lints (1,727,207 samples, 0.37%)</title><rect x="19.1092%" y="149" width="0.3723%" height="15" fill="rgb(226,26,5)"/><text x="19.3592%" y="159.50"></text></g><g><title>type_of (1,040,540 samples, 0.22%)</title><rect x="19.2572%" y="133" width="0.2243%" height="15" fill="rgb(249,33,26)"/><text x="19.5072%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (806,478 samples, 0.17%)</title><rect x="19.3076%" y="117" width="0.1738%" height="15" fill="rgb(235,183,28)"/><text x="19.5576%" y="127.50"></text></g><g><title>lint_checking (2,001,280 samples, 0.43%)</title><rect x="19.1089%" y="165" width="0.4313%" height="15" fill="rgb(221,5,38)"/><text x="19.3589%" y="175.50"></text></g><g><title>privacy_checking_modules (497,535 samples, 0.11%)</title><rect x="19.5675%" y="165" width="0.1072%" height="15" fill="rgb(247,18,42)"/><text x="19.8175%" y="175.50"></text></g><g><title>check_mod_privacy (495,555 samples, 0.11%)</title><rect x="19.5679%" y="149" width="0.1068%" height="15" fill="rgb(241,131,45)"/><text x="19.8179%" y="159.50"></text></g><g><title>misc_checking_3 (2,942,910 samples, 0.63%)</title><rect x="19.0435%" y="181" width="0.6343%" height="15" fill="rgb(249,31,29)"/><text x="19.2935%" y="191.50"></text></g><g><title>impl_parent (2,176,084 samples, 0.47%)</title><rect x="20.5768%" y="117" width="0.4690%" height="15" fill="rgb(225,111,53)"/><text x="20.8268%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,245,735 samples, 0.27%)</title><rect x="20.7773%" y="101" width="0.2685%" height="15" fill="rgb(238,160,17)"/><text x="21.0273%" y="111.50"></text></g><g><title>impl_trait_ref (6,731,331 samples, 1.45%)</title><rect x="21.0458%" y="117" width="1.4508%" height="15" fill="rgb(214,148,48)"/><text x="21.2958%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,768,502 samples, 1.24%)</title><rect x="21.2533%" y="101" width="1.2433%" height="15" fill="rgb(232,36,49)"/><text x="21.5033%" y="111.50"></text></g><g><title>coherent_trait (13,720,218 samples, 2.96%)</title><rect x="19.6922%" y="149" width="2.9571%" height="15" fill="rgb(209,103,24)"/><text x="19.9422%" y="159.50">coh..</text></g><g><title>specialization_graph_of (13,710,478 samples, 2.95%)</title><rect x="19.6943%" y="133" width="2.9550%" height="15" fill="rgb(229,88,8)"/><text x="19.9443%" y="143.50">spe..</text></g><g><title>trait_impls_of (706,278 samples, 0.15%)</title><rect x="22.4970%" y="117" width="0.1522%" height="15" fill="rgb(213,181,19)"/><text x="22.7470%" y="127.50"></text></g><g><title>coherence_checking (13,782,308 samples, 2.97%)</title><rect x="19.6891%" y="165" width="2.9705%" height="15" fill="rgb(254,191,54)"/><text x="19.9391%" y="175.50">coh..</text></g><g><title>dropck_outlives (547,425 samples, 0.12%)</title><rect x="24.7060%" y="117" width="0.1180%" height="15" fill="rgb(241,83,37)"/><text x="24.9560%" y="127.50"></text></g><g><title>evaluate_obligation (472,614 samples, 0.10%)</title><rect x="24.8239%" y="117" width="0.1019%" height="15" fill="rgb(233,36,39)"/><text x="25.0739%" y="127.50"></text></g><g><title>evaluate_obligation (905,013 samples, 0.20%)</title><rect x="27.5442%" y="101" width="0.1951%" height="15" fill="rgb(226,3,54)"/><text x="27.7942%" y="111.50"></text></g><g><title>typeck (13,420,165 samples, 2.89%)</title><rect x="25.0579%" y="117" width="2.8924%" height="15" fill="rgb(245,192,40)"/><text x="25.3079%" y="127.50">ty..</text></g><g><title>item_bodies_checking (24,552,857 samples, 5.29%)</title><rect x="22.6643%" y="165" width="5.2918%" height="15" fill="rgb(238,167,29)"/><text x="22.9143%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (24,550,117 samples, 5.29%)</title><rect x="22.6649%" y="149" width="5.2912%" height="15" fill="rgb(232,182,51)"/><text x="22.9149%" y="159.50">typeck..</text></g><g><title>typeck (24,492,667 samples, 5.28%)</title><rect x="22.6773%" y="133" width="5.2788%" height="15" fill="rgb(231,60,39)"/><text x="22.9273%" y="143.50">typeck</text></g><g><title>adt_destructor (638,797 samples, 0.14%)</title><rect x="28.0497%" y="133" width="0.1377%" height="15" fill="rgb(208,69,12)"/><text x="28.2997%" y="143.50"></text></g><g><title>coherent_trait (631,497 samples, 0.14%)</title><rect x="28.0512%" y="117" width="0.1361%" height="15" fill="rgb(235,93,37)"/><text x="28.3012%" y="127.50"></text></g><g><title>specialization_graph_of (628,326 samples, 0.14%)</title><rect x="28.0519%" y="101" width="0.1354%" height="15" fill="rgb(213,116,39)"/><text x="28.3019%" y="111.50"></text></g><g><title>item_types_checking (1,172,802 samples, 0.25%)</title><rect x="27.9561%" y="165" width="0.2528%" height="15" fill="rgb(222,207,29)"/><text x="28.2061%" y="175.50"></text></g><g><title>check_mod_item_types (1,167,672 samples, 0.25%)</title><rect x="27.9572%" y="149" width="0.2517%" height="15" fill="rgb(206,96,30)"/><text x="28.2072%" y="159.50"></text></g><g><title>predicates_of (478,433 samples, 0.10%)</title><rect x="28.4665%" y="133" width="0.1031%" height="15" fill="rgb(218,138,4)"/><text x="28.7165%" y="143.50"></text></g><g><title>type_collecting (1,766,147 samples, 0.38%)</title><rect x="28.2091%" y="165" width="0.3807%" height="15" fill="rgb(250,191,14)"/><text x="28.4591%" y="175.50"></text></g><g><title>collect_mod_item_types (1,757,587 samples, 0.38%)</title><rect x="28.2110%" y="149" width="0.3788%" height="15" fill="rgb(239,60,40)"/><text x="28.4610%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,664,707 samples, 0.57%)</title><rect x="28.6279%" y="149" width="0.5743%" height="15" fill="rgb(206,27,48)"/><text x="28.8779%" y="159.50"></text></g><g><title>evaluate_obligation (547,406 samples, 0.12%)</title><rect x="29.3584%" y="133" width="0.1180%" height="15" fill="rgb(225,35,8)"/><text x="29.6084%" y="143.50"></text></g><g><title>analysis (72,458,010 samples, 15.62%)</title><rect x="13.9798%" y="197" width="15.6166%" height="15" fill="rgb(250,213,24)"/><text x="14.2298%" y="207.50">analysis</text></g><g><title>type_check_crate (46,020,682 samples, 9.92%)</title><rect x="19.6778%" y="181" width="9.9187%" height="15" fill="rgb(247,123,22)"/><text x="19.9278%" y="191.50">type_check_cra..</text></g><g><title>wf_checking (4,665,997 samples, 1.01%)</title><rect x="28.5908%" y="165" width="1.0056%" height="15" fill="rgb(231,138,38)"/><text x="28.8408%" y="175.50"></text></g><g><title>check_item_well_formed (1,829,359 samples, 0.39%)</title><rect x="29.2022%" y="149" width="0.3943%" height="15" fill="rgb(231,145,46)"/><text x="29.4522%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (635,557 samples, 0.14%)</title><rect x="40.0650%" y="165" width="0.1370%" height="15" fill="rgb(251,118,11)"/><text x="40.3150%" y="175.50"></text></g><g><title>item_attrs (756,459 samples, 0.16%)</title><rect x="40.8280%" y="133" width="0.1630%" height="15" fill="rgb(217,147,25)"/><text x="41.0780%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (730,369 samples, 0.16%)</title><rect x="40.8336%" y="117" width="0.1574%" height="15" fill="rgb(247,81,37)"/><text x="41.0836%" y="127.50"></text></g><g><title>codegen_fn_attrs (998,681 samples, 0.22%)</title><rect x="40.7914%" y="149" width="0.2152%" height="15" fill="rgb(209,12,38)"/><text x="41.0414%" y="159.50"></text></g><g><title>layout_of (738,608 samples, 0.16%)</title><rect x="41.2338%" y="133" width="0.1592%" height="15" fill="rgb(227,1,9)"/><text x="41.4838%" y="143.50"></text></g><g><title>layout_of (1,843,570 samples, 0.40%)</title><rect x="41.0382%" y="149" width="0.3973%" height="15" fill="rgb(248,47,43)"/><text x="41.2882%" y="159.50"></text></g><g><title>predicates_of (1,165,302 samples, 0.25%)</title><rect x="41.8501%" y="133" width="0.2512%" height="15" fill="rgb(221,10,30)"/><text x="42.1001%" y="143.50"></text></g><g><title>predicates_defined_on (860,077 samples, 0.19%)</title><rect x="41.9159%" y="117" width="0.1854%" height="15" fill="rgb(210,229,1)"/><text x="42.1659%" y="127.50"></text></g><g><title>param_env (3,093,711 samples, 0.67%)</title><rect x="41.4355%" y="149" width="0.6668%" height="15" fill="rgb(222,148,37)"/><text x="41.6855%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (490,495 samples, 0.11%)</title><rect x="42.1023%" y="149" width="0.1057%" height="15" fill="rgb(234,67,33)"/><text x="42.3523%" y="159.50"></text></g><g><title>fn_abi_of_instance (8,893,503 samples, 1.92%)</title><rect x="40.2955%" y="165" width="1.9168%" height="15" fill="rgb(247,98,35)"/><text x="40.5455%" y="175.50">f..</text></g><g><title>layout_of (791,735 samples, 0.17%)</title><rect x="42.2949%" y="165" width="0.1706%" height="15" fill="rgb(247,138,52)"/><text x="42.5449%" y="175.50"></text></g><g><title>symbol_name (750,465 samples, 0.16%)</title><rect x="42.4695%" y="165" width="0.1617%" height="15" fill="rgb(213,79,30)"/><text x="42.7195%" y="175.50"></text></g><g><title>codegen_module (57,881,814 samples, 12.48%)</title><rect x="30.1732%" y="181" width="12.4751%" height="15" fill="rgb(246,177,23)"/><text x="30.4232%" y="191.50">codegen_module</text></g><g><title>codegen_crate (60,631,441 samples, 13.07%)</title><rect x="29.5981%" y="197" width="13.0677%" height="15" fill="rgb(230,62,27)"/><text x="29.8481%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (203,383,878 samples, 43.83%)</title><rect x="42.7027%" y="181" width="43.8347%" height="15" fill="rgb(216,154,8)"/><text x="42.9527%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (193,016,733 samples, 41.60%)</title><rect x="44.9371%" y="165" width="41.6003%" height="15" fill="rgb(244,35,45)"/><text x="45.1871%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (212,636,283 samples, 45.83%)</title><rect x="42.6658%" y="197" width="45.8288%" height="15" fill="rgb(251,115,12)"/><text x="42.9158%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,081,532 samples, 1.96%)</title><rect x="86.5373%" y="181" width="1.9573%" height="15" fill="rgb(240,54,50)"/><text x="86.7873%" y="191.50">L..</text></g><g><title>metadata_register_crate (2,169,182 samples, 0.47%)</title><rect x="90.8204%" y="149" width="0.4675%" height="15" fill="rgb(233,84,52)"/><text x="91.0704%" y="159.50"></text></g><g><title>metadata_register_crate (785,055 samples, 0.17%)</title><rect x="91.1187%" y="133" width="0.1692%" height="15" fill="rgb(207,117,47)"/><text x="91.3687%" y="143.50"></text></g><g><title>macro_expand_crate (12,631,557 samples, 2.72%)</title><rect x="88.5816%" y="181" width="2.7224%" height="15" fill="rgb(249,43,39)"/><text x="88.8316%" y="191.50">ma..</text></g><g><title>expand_crate (12,613,907 samples, 2.72%)</title><rect x="88.5854%" y="165" width="2.7186%" height="15" fill="rgb(209,38,44)"/><text x="88.8354%" y="175.50">ex..</text></g><g><title>late_resolve_crate (2,172,952 samples, 0.47%)</title><rect x="91.3637%" y="165" width="0.4683%" height="15" fill="rgb(236,212,23)"/><text x="91.6137%" y="175.50"></text></g><g><title>configure_and_expand (15,588,657 samples, 3.36%)</title><rect x="88.4946%" y="197" width="3.3598%" height="15" fill="rgb(242,79,21)"/><text x="88.7446%" y="207.50">con..</text></g><g><title>resolve_crate (2,403,734 samples, 0.52%)</title><rect x="91.3364%" y="181" width="0.5181%" height="15" fill="rgb(211,96,35)"/><text x="91.5864%" y="191.50"></text></g><g><title>free_global_ctxt (8,391,545 samples, 1.81%)</title><rect x="91.9840%" y="197" width="1.8086%" height="15" fill="rgb(253,215,40)"/><text x="92.2340%" y="207.50">f..</text></g><g><title>item_attrs (483,436 samples, 0.10%)</title><rect x="94.2774%" y="101" width="0.1042%" height="15" fill="rgb(211,81,21)"/><text x="94.5274%" y="111.50"></text></g><g><title>codegen_fn_attrs (470,224 samples, 0.10%)</title><rect x="94.3978%" y="85" width="0.1013%" height="15" fill="rgb(208,190,38)"/><text x="94.6478%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,201,252 samples, 0.26%)</title><rect x="94.2481%" y="117" width="0.2589%" height="15" fill="rgb(235,213,38)"/><text x="94.4981%" y="127.50"></text></g><g><title>should_inherit_track_caller (582,086 samples, 0.13%)</title><rect x="94.3816%" y="101" width="0.1255%" height="15" fill="rgb(237,122,38)"/><text x="94.6316%" y="111.50"></text></g><g><title>layout_of (575,546 samples, 0.12%)</title><rect x="95.0169%" y="101" width="0.1240%" height="15" fill="rgb(244,218,35)"/><text x="95.2669%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (941,950 samples, 0.20%)</title><rect x="95.1410%" y="101" width="0.2030%" height="15" fill="rgb(240,68,47)"/><text x="95.3910%" y="111.50"></text></g><g><title>optimized_mir (5,616,360 samples, 1.21%)</title><rect x="94.6238%" y="117" width="1.2105%" height="15" fill="rgb(210,16,53)"/><text x="94.8738%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,274,632 samples, 0.49%)</title><rect x="95.3440%" y="101" width="0.4902%" height="15" fill="rgb(235,124,12)"/><text x="95.5940%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,861,859 samples, 0.40%)</title><rect x="95.9686%" y="101" width="0.4013%" height="15" fill="rgb(224,169,11)"/><text x="96.2186%" y="111.50"></text></g><g><title>specialization_graph_of (776,238 samples, 0.17%)</title><rect x="96.5275%" y="101" width="0.1673%" height="15" fill="rgb(250,166,2)"/><text x="96.7775%" y="111.50"></text></g><g><title>resolve_instance (4,195,704 samples, 0.90%)</title><rect x="95.8342%" y="117" width="0.9043%" height="15" fill="rgb(242,216,29)"/><text x="96.0842%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (13,449,836 samples, 2.90%)</title><rect x="93.9778%" y="133" width="2.8988%" height="15" fill="rgb(230,116,27)"/><text x="94.2278%" y="143.50">mo..</text></g><g><title>monomorphization_collector (13,518,507 samples, 2.91%)</title><rect x="93.9774%" y="149" width="2.9136%" height="15" fill="rgb(228,99,48)"/><text x="94.2274%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,507,795 samples, 0.32%)</title><rect x="96.8916%" y="133" width="0.3250%" height="15" fill="rgb(253,11,6)"/><text x="97.1416%" y="143.50"></text></g><g><title>symbol_name (1,417,945 samples, 0.31%)</title><rect x="96.9110%" y="117" width="0.3056%" height="15" fill="rgb(247,143,39)"/><text x="97.1610%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (15,583,087 samples, 3.36%)</title><rect x="93.9710%" y="165" width="3.3586%" height="15" fill="rgb(236,97,10)"/><text x="94.2210%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,034,850 samples, 0.44%)</title><rect x="96.8910%" y="149" width="0.4386%" height="15" fill="rgb(233,208,19)"/><text x="97.1410%" y="159.50"></text></g><g><title>cgu_partitioning (524,015 samples, 0.11%)</title><rect x="97.2166%" y="133" width="0.1129%" height="15" fill="rgb(216,164,2)"/><text x="97.4666%" y="143.50"></text></g><g><title>exported_symbols (15,662,748 samples, 3.38%)</title><rect x="93.9612%" y="181" width="3.3757%" height="15" fill="rgb(220,129,5)"/><text x="94.2112%" y="191.50">exp..</text></g><g><title>optimized_mir (2,193,314 samples, 0.47%)</title><rect x="97.3464%" y="181" width="0.4727%" height="15" fill="rgb(242,17,10)"/><text x="97.5964%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (979,778 samples, 0.21%)</title><rect x="97.6079%" y="165" width="0.2112%" height="15" fill="rgb(242,107,0)"/><text x="97.8579%" y="175.50"></text></g><g><title>generate_crate_metadata (18,710,848 samples, 4.03%)</title><rect x="93.7926%" y="197" width="4.0327%" height="15" fill="rgb(251,28,31)"/><text x="94.0426%" y="207.50">gene..</text></g><g><title>hir_lowering (2,869,199 samples, 0.62%)</title><rect x="97.8253%" y="197" width="0.6184%" height="15" fill="rgb(233,223,10)"/><text x="98.0753%" y="207.50"></text></g><g><title>link_crate (1,676,167 samples, 0.36%)</title><rect x="98.5039%" y="181" width="0.3613%" height="15" fill="rgb(215,21,27)"/><text x="98.7539%" y="191.50"></text></g><g><title>link_binary (1,656,697 samples, 0.36%)</title><rect x="98.5081%" y="165" width="0.3571%" height="15" fill="rgb(232,23,21)"/><text x="98.7581%" y="175.50"></text></g><g><title>link_rlib (1,120,442 samples, 0.24%)</title><rect x="98.6236%" y="149" width="0.2415%" height="15" fill="rgb(244,5,23)"/><text x="98.8736%" y="159.50"></text></g><g><title>link (1,965,500 samples, 0.42%)</title><rect x="98.4436%" y="197" width="0.4236%" height="15" fill="rgb(226,81,46)"/><text x="98.6936%" y="207.50"></text></g><g><title>parse_crate (2,104,371 samples, 0.45%)</title><rect x="98.8673%" y="197" width="0.4535%" height="15" fill="rgb(247,70,30)"/><text x="99.1173%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,437,064 samples, 0.53%)</title><rect x="99.3799%" y="197" width="0.5253%" height="15" fill="rgb(212,68,19)"/><text x="99.6299%" y="207.50"></text></g><g><title>all (463,979,565 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (463,979,565 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>