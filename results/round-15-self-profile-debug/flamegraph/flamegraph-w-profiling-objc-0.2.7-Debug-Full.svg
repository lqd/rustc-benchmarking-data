<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (99,237,457 samples, 11.59%)</title><rect x="0.1038%" y="181" width="11.5905%" height="15" fill="rgb(227,0,7)"/><text x="0.3538%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,092,327 samples, 0.13%)</title><rect x="15.9454%" y="69" width="0.1276%" height="15" fill="rgb(217,0,24)"/><text x="16.1954%" y="79.50"></text></g><g><title>needs_drop_raw (2,142,178 samples, 0.25%)</title><rect x="16.0730%" y="69" width="0.2502%" height="15" fill="rgb(221,193,54)"/><text x="16.3230%" y="79.50"></text></g><g><title>is_copy_raw (1,565,768 samples, 0.18%)</title><rect x="16.1403%" y="53" width="0.1829%" height="15" fill="rgb(248,212,6)"/><text x="16.3903%" y="63.50"></text></g><g><title>evaluate_obligation (1,178,697 samples, 0.14%)</title><rect x="16.1855%" y="37" width="0.1377%" height="15" fill="rgb(208,68,35)"/><text x="16.4355%" y="47.50"></text></g><g><title>specialization_graph_of (942,299 samples, 0.11%)</title><rect x="16.4445%" y="53" width="0.1101%" height="15" fill="rgb(232,128,0)"/><text x="16.6945%" y="63.50"></text></g><g><title>resolve_instance (2,118,892 samples, 0.25%)</title><rect x="16.3232%" y="69" width="0.2475%" height="15" fill="rgb(207,160,47)"/><text x="16.5732%" y="79.50"></text></g><g><title>thir_body (2,179,139 samples, 0.25%)</title><rect x="16.5783%" y="69" width="0.2545%" height="15" fill="rgb(228,23,34)"/><text x="16.8283%" y="79.50"></text></g><g><title>mir_const (17,255,094 samples, 2.02%)</title><rect x="14.8243%" y="117" width="2.0153%" height="15" fill="rgb(218,30,26)"/><text x="15.0743%" y="127.50">m..</text></g><g><title>unsafety_check_result (15,069,827 samples, 1.76%)</title><rect x="15.0796%" y="101" width="1.7601%" height="15" fill="rgb(220,122,19)"/><text x="15.3296%" y="111.50"></text></g><g><title>mir_built (13,517,122 samples, 1.58%)</title><rect x="15.2609%" y="85" width="1.5787%" height="15" fill="rgb(250,228,42)"/><text x="15.5109%" y="95.50"></text></g><g><title>mir_promoted (19,653,689 samples, 2.30%)</title><rect x="14.6148%" y="133" width="2.2955%" height="15" fill="rgb(240,193,28)"/><text x="14.8648%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (950,411 samples, 0.11%)</title><rect x="16.9104%" y="133" width="0.1110%" height="15" fill="rgb(216,20,37)"/><text x="17.1604%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,665,667 samples, 0.54%)</title><rect x="17.1821%" y="133" width="0.5449%" height="15" fill="rgb(206,188,39)"/><text x="17.4321%" y="143.50"></text></g><g><title>MIR_borrow_checking (51,015,927 samples, 5.96%)</title><rect x="11.7704%" y="165" width="5.9585%" height="15" fill="rgb(217,207,13)"/><text x="12.0204%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (50,678,856 samples, 5.92%)</title><rect x="11.8097%" y="149" width="5.9191%" height="15" fill="rgb(231,73,38)"/><text x="12.0597%" y="159.50">mir_borr..</text></g><g><title>check_mod_attrs (1,061,191 samples, 0.12%)</title><rect x="17.8297%" y="149" width="0.1239%" height="15" fill="rgb(225,20,46)"/><text x="18.0797%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,251,392 samples, 0.15%)</title><rect x="18.0106%" y="149" width="0.1462%" height="15" fill="rgb(210,31,41)"/><text x="18.2606%" y="159.50"></text></g><g><title>misc_checking_1 (2,966,821 samples, 0.35%)</title><rect x="17.8259%" y="165" width="0.3465%" height="15" fill="rgb(221,200,47)"/><text x="18.0759%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,251,013 samples, 0.15%)</title><rect x="18.1726%" y="149" width="0.1461%" height="15" fill="rgb(226,26,5)"/><text x="18.4226%" y="159.50"></text></g><g><title>check_mod_liveness (919,091 samples, 0.11%)</title><rect x="18.2114%" y="133" width="0.1073%" height="15" fill="rgb(249,33,26)"/><text x="18.4614%" y="143.50"></text></g><g><title>misc_checking_2 (2,123,152 samples, 0.25%)</title><rect x="18.1724%" y="165" width="0.2480%" height="15" fill="rgb(235,183,28)"/><text x="18.4224%" y="175.50"></text></g><g><title>match_checking (870,409 samples, 0.10%)</title><rect x="18.3187%" y="149" width="0.1017%" height="15" fill="rgb(221,5,38)"/><text x="18.5687%" y="159.50"></text></g><g><title>death_checking (1,409,275 samples, 0.16%)</title><rect x="18.4918%" y="149" width="0.1646%" height="15" fill="rgb(247,18,42)"/><text x="18.7418%" y="159.50"></text></g><g><title>param_env (939,942 samples, 0.11%)</title><rect x="19.1050%" y="117" width="0.1098%" height="15" fill="rgb(241,131,45)"/><text x="19.3550%" y="127.50"></text></g><g><title>crate_lints (6,001,280 samples, 0.70%)</title><rect x="18.6568%" y="133" width="0.7009%" height="15" fill="rgb(249,31,29)"/><text x="18.9068%" y="143.50"></text></g><g><title>type_of (1,153,041 samples, 0.13%)</title><rect x="19.2230%" y="117" width="0.1347%" height="15" fill="rgb(225,111,53)"/><text x="19.4730%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (910,408 samples, 0.11%)</title><rect x="19.2514%" y="101" width="0.1063%" height="15" fill="rgb(238,160,17)"/><text x="19.5014%" y="111.50"></text></g><g><title>lint_checking (7,285,063 samples, 0.85%)</title><rect x="18.6564%" y="149" width="0.8509%" height="15" fill="rgb(214,148,48)"/><text x="18.9064%" y="159.50"></text></g><g><title>module_lints (1,280,983 samples, 0.15%)</title><rect x="19.3577%" y="133" width="0.1496%" height="15" fill="rgb(232,36,49)"/><text x="19.6077%" y="143.50"></text></g><g><title>lint_mod (1,268,053 samples, 0.15%)</title><rect x="19.3592%" y="117" width="0.1481%" height="15" fill="rgb(209,103,24)"/><text x="19.6092%" y="127.50"></text></g><g><title>privacy_access_levels (918,920 samples, 0.11%)</title><rect x="19.5073%" y="149" width="0.1073%" height="15" fill="rgb(229,88,8)"/><text x="19.7573%" y="159.50"></text></g><g><title>privacy_checking_modules (2,084,012 samples, 0.24%)</title><rect x="19.6146%" y="149" width="0.2434%" height="15" fill="rgb(213,181,19)"/><text x="19.8646%" y="159.50"></text></g><g><title>check_mod_privacy (2,076,161 samples, 0.24%)</title><rect x="19.6155%" y="133" width="0.2425%" height="15" fill="rgb(254,191,54)"/><text x="19.8655%" y="143.50"></text></g><g><title>misc_checking_3 (12,328,876 samples, 1.44%)</title><rect x="18.4204%" y="165" width="1.4400%" height="15" fill="rgb(241,83,37)"/><text x="18.6704%" y="175.50"></text></g><g><title>impl_parent (2,571,755 samples, 0.30%)</title><rect x="20.4708%" y="101" width="0.3004%" height="15" fill="rgb(233,36,39)"/><text x="20.7208%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,496,815 samples, 0.17%)</title><rect x="20.5963%" y="85" width="0.1748%" height="15" fill="rgb(226,3,54)"/><text x="20.8463%" y="95.50"></text></g><g><title>impl_trait_ref (5,479,881 samples, 0.64%)</title><rect x="20.7711%" y="101" width="0.6400%" height="15" fill="rgb(245,192,40)"/><text x="21.0211%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,367,473 samples, 0.51%)</title><rect x="20.9011%" y="85" width="0.5101%" height="15" fill="rgb(238,167,29)"/><text x="21.1511%" y="95.50"></text></g><g><title>coherent_trait (13,869,141 samples, 1.62%)</title><rect x="19.8846%" y="133" width="1.6199%" height="15" fill="rgb(232,182,51)"/><text x="20.1346%" y="143.50"></text></g><g><title>specialization_graph_of (13,254,285 samples, 1.55%)</title><rect x="19.9564%" y="117" width="1.5480%" height="15" fill="rgb(231,60,39)"/><text x="20.2064%" y="127.50"></text></g><g><title>coherence_checking (14,028,573 samples, 1.64%)</title><rect x="19.8812%" y="149" width="1.6385%" height="15" fill="rgb(208,69,12)"/><text x="20.1312%" y="159.50"></text></g><g><title>associated_items (1,109,862 samples, 0.13%)</title><rect x="26.2095%" y="101" width="0.1296%" height="15" fill="rgb(235,93,37)"/><text x="26.4595%" y="111.50"></text></g><g><title>evaluate_obligation (3,318,467 samples, 0.39%)</title><rect x="26.4748%" y="101" width="0.3876%" height="15" fill="rgb(213,116,39)"/><text x="26.7248%" y="111.50"></text></g><g><title>typeck (3,677,907 samples, 0.43%)</title><rect x="27.1775%" y="101" width="0.4296%" height="15" fill="rgb(222,207,29)"/><text x="27.4275%" y="111.50"></text></g><g><title>item_bodies_checking (52,081,189 samples, 6.08%)</title><rect x="21.5357%" y="149" width="6.0829%" height="15" fill="rgb(206,96,30)"/><text x="21.7857%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (52,076,968 samples, 6.08%)</title><rect x="21.5362%" y="133" width="6.0824%" height="15" fill="rgb(218,138,4)"/><text x="21.7862%" y="143.50">typeck_i..</text></g><g><title>typeck (51,840,116 samples, 6.05%)</title><rect x="21.5639%" y="117" width="6.0547%" height="15" fill="rgb(250,191,14)"/><text x="21.8139%" y="127.50">typeck</text></g><g><title>item_types_checking (8,064,231 samples, 0.94%)</title><rect x="27.6186%" y="149" width="0.9419%" height="15" fill="rgb(239,60,40)"/><text x="27.8686%" y="159.50"></text></g><g><title>check_mod_item_types (8,054,221 samples, 0.94%)</title><rect x="27.6198%" y="133" width="0.9407%" height="15" fill="rgb(206,27,48)"/><text x="27.8698%" y="143.50"></text></g><g><title>generics_of (917,231 samples, 0.11%)</title><rect x="28.7435%" y="117" width="0.1071%" height="15" fill="rgb(225,35,8)"/><text x="28.9935%" y="127.50"></text></g><g><title>explicit_predicates_of (993,280 samples, 0.12%)</title><rect x="28.9309%" y="85" width="0.1160%" height="15" fill="rgb(250,213,24)"/><text x="29.1809%" y="95.50"></text></g><g><title>predicates_of (1,812,251 samples, 0.21%)</title><rect x="28.8762%" y="117" width="0.2117%" height="15" fill="rgb(247,123,22)"/><text x="29.1262%" y="127.50"></text></g><g><title>predicates_defined_on (1,633,709 samples, 0.19%)</title><rect x="28.8970%" y="101" width="0.1908%" height="15" fill="rgb(231,138,38)"/><text x="29.1470%" y="111.50"></text></g><g><title>type_collecting (5,353,204 samples, 0.63%)</title><rect x="28.5612%" y="149" width="0.6252%" height="15" fill="rgb(231,145,46)"/><text x="28.8112%" y="159.50"></text></g><g><title>collect_mod_item_types (5,334,644 samples, 0.62%)</title><rect x="28.5634%" y="133" width="0.6231%" height="15" fill="rgb(251,118,11)"/><text x="28.8134%" y="143.50"></text></g><g><title>mir_borrowck (1,156,110 samples, 0.14%)</title><rect x="30.1927%" y="37" width="0.1350%" height="15" fill="rgb(217,147,25)"/><text x="30.4427%" y="47.50"></text></g><g><title>mir_for_ctfe (1,820,049 samples, 0.21%)</title><rect x="30.1157%" y="69" width="0.2126%" height="15" fill="rgb(247,81,37)"/><text x="30.3657%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,652,527 samples, 0.19%)</title><rect x="30.1352%" y="53" width="0.1930%" height="15" fill="rgb(209,12,38)"/><text x="30.3852%" y="63.50"></text></g><g><title>evaluate_obligation (1,492,836 samples, 0.17%)</title><rect x="30.6124%" y="53" width="0.1744%" height="15" fill="rgb(227,1,9)"/><text x="30.8624%" y="63.50"></text></g><g><title>eval_to_const_value_raw (6,750,477 samples, 0.79%)</title><rect x="30.0202%" y="117" width="0.7884%" height="15" fill="rgb(248,47,43)"/><text x="30.2702%" y="127.50"></text></g><g><title>eval_to_const_value_raw (6,740,477 samples, 0.79%)</title><rect x="30.0214%" y="101" width="0.7873%" height="15" fill="rgb(221,10,30)"/><text x="30.2714%" y="111.50"></text></g><g><title>eval_to_allocation_raw (6,717,627 samples, 0.78%)</title><rect x="30.0240%" y="85" width="0.7846%" height="15" fill="rgb(210,229,1)"/><text x="30.2740%" y="95.50"></text></g><g><title>typeck (4,110,660 samples, 0.48%)</title><rect x="30.3285%" y="69" width="0.4801%" height="15" fill="rgb(222,148,37)"/><text x="30.5785%" y="79.50"></text></g><g><title>param_env (1,570,428 samples, 0.18%)</title><rect x="30.9685%" y="117" width="0.1834%" height="15" fill="rgb(234,67,33)"/><text x="31.2185%" y="127.50"></text></g><g><title>check_impl_item_well_formed (17,007,615 samples, 1.99%)</title><rect x="29.2591%" y="133" width="1.9864%" height="15" fill="rgb(247,98,35)"/><text x="29.5091%" y="143.50">c..</text></g><g><title>eval_to_const_value_raw (1,184,952 samples, 0.14%)</title><rect x="32.1168%" y="117" width="0.1384%" height="15" fill="rgb(247,138,52)"/><text x="32.3668%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,174,792 samples, 0.14%)</title><rect x="32.1180%" y="101" width="0.1372%" height="15" fill="rgb(213,79,30)"/><text x="32.3680%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,172,702 samples, 0.14%)</title><rect x="32.1183%" y="85" width="0.1370%" height="15" fill="rgb(246,177,23)"/><text x="32.3683%" y="95.50"></text></g><g><title>param_env (951,773 samples, 0.11%)</title><rect x="32.3810%" y="117" width="0.1112%" height="15" fill="rgb(230,62,27)"/><text x="32.6310%" y="127.50"></text></g><g><title>check_item_well_formed (11,186,862 samples, 1.31%)</title><rect x="31.2456%" y="133" width="1.3066%" height="15" fill="rgb(216,154,8)"/><text x="31.4956%" y="143.50"></text></g><g><title>analysis (179,140,409 samples, 20.92%)</title><rect x="11.6944%" y="181" width="20.9229%" height="15" fill="rgb(244,35,45)"/><text x="11.9444%" y="191.50">analysis</text></g><g><title>type_check_crate (109,223,538 samples, 12.76%)</title><rect x="19.8604%" y="165" width="12.7569%" height="15" fill="rgb(251,115,12)"/><text x="20.1104%" y="175.50">type_check_crate</text></g><g><title>wf_checking (29,358,318 samples, 3.43%)</title><rect x="29.1883%" y="149" width="3.4289%" height="15" fill="rgb(240,54,50)"/><text x="29.4383%" y="159.50">wf_..</text></g><g><title>compute_debuginfo_type_name (1,158,037 samples, 0.14%)</title><rect x="40.8899%" y="149" width="0.1353%" height="15" fill="rgb(233,84,52)"/><text x="41.1399%" y="159.50"></text></g><g><title>const_caller_location (1,330,872 samples, 0.16%)</title><rect x="41.0251%" y="149" width="0.1554%" height="15" fill="rgb(207,117,47)"/><text x="41.2751%" y="159.50"></text></g><g><title>layout_of (1,283,004 samples, 0.15%)</title><rect x="41.7185%" y="133" width="0.1498%" height="15" fill="rgb(249,43,39)"/><text x="41.9685%" y="143.50"></text></g><g><title>predicates_of (1,402,504 samples, 0.16%)</title><rect x="42.2353%" y="117" width="0.1638%" height="15" fill="rgb(209,38,44)"/><text x="42.4853%" y="127.50"></text></g><g><title>predicates_defined_on (1,066,929 samples, 0.12%)</title><rect x="42.2745%" y="101" width="0.1246%" height="15" fill="rgb(236,212,23)"/><text x="42.5245%" y="111.50"></text></g><g><title>param_env (4,564,462 samples, 0.53%)</title><rect x="41.8684%" y="133" width="0.5331%" height="15" fill="rgb(242,79,21)"/><text x="42.1184%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,146,960 samples, 0.13%)</title><rect x="42.4015%" y="133" width="0.1340%" height="15" fill="rgb(211,96,35)"/><text x="42.6515%" y="143.50"></text></g><g><title>normalize_projection_ty (911,610 samples, 0.11%)</title><rect x="42.4290%" y="117" width="0.1065%" height="15" fill="rgb(253,215,40)"/><text x="42.6790%" y="127.50"></text></g><g><title>fn_abi_of_instance (11,549,036 samples, 1.35%)</title><rect x="41.1896%" y="149" width="1.3489%" height="15" fill="rgb(211,81,21)"/><text x="41.4396%" y="159.50"></text></g><g><title>layout_of (1,849,242 samples, 0.22%)</title><rect x="42.6193%" y="149" width="0.2160%" height="15" fill="rgb(208,190,38)"/><text x="42.8693%" y="159.50"></text></g><g><title>codegen_module (84,880,052 samples, 9.91%)</title><rect x="33.0026%" y="165" width="9.9136%" height="15" fill="rgb(235,213,38)"/><text x="33.2526%" y="175.50">codegen_module</text></g><g><title>codegen_crate (88,256,586 samples, 10.31%)</title><rect x="32.6183%" y="181" width="10.3080%" height="15" fill="rgb(237,122,38)"/><text x="32.8683%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (331,146,530 samples, 38.68%)</title><rect x="42.9517%" y="165" width="38.6766%" height="15" fill="rgb(244,218,35)"/><text x="43.2017%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (316,806,525 samples, 37.00%)</title><rect x="44.6265%" y="149" width="37.0017%" height="15" fill="rgb(240,68,47)"/><text x="44.8765%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (350,264,334 samples, 40.91%)</title><rect x="42.9263%" y="181" width="40.9095%" height="15" fill="rgb(210,16,53)"/><text x="43.1763%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (18,900,442 samples, 2.21%)</title><rect x="81.6283%" y="165" width="2.2075%" height="15" fill="rgb(235,124,12)"/><text x="81.8783%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,362,795 samples, 0.28%)</title><rect x="89.4308%" y="133" width="0.2760%" height="15" fill="rgb(224,169,11)"/><text x="89.6808%" y="143.50"></text></g><g><title>macro_expand_crate (50,404,372 samples, 5.89%)</title><rect x="83.9238%" y="165" width="5.8870%" height="15" fill="rgb(250,166,2)"/><text x="84.1738%" y="175.50">macro_e..</text></g><g><title>expand_crate (50,386,302 samples, 5.88%)</title><rect x="83.9259%" y="149" width="5.8849%" height="15" fill="rgb(242,216,29)"/><text x="84.1759%" y="159.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (891,020 samples, 0.10%)</title><rect x="89.7068%" y="133" width="0.1041%" height="15" fill="rgb(230,116,27)"/><text x="89.9568%" y="143.50"></text></g><g><title>late_resolve_crate (4,812,829 samples, 0.56%)</title><rect x="89.8510%" y="149" width="0.5621%" height="15" fill="rgb(228,99,48)"/><text x="90.1010%" y="159.50"></text></g><g><title>configure_and_expand (56,563,424 samples, 6.61%)</title><rect x="83.8357%" y="181" width="6.6064%" height="15" fill="rgb(253,11,6)"/><text x="84.0857%" y="191.50">configure..</text></g><g><title>resolve_crate (5,311,604 samples, 0.62%)</title><rect x="89.8218%" y="165" width="0.6204%" height="15" fill="rgb(247,143,39)"/><text x="90.0718%" y="175.50"></text></g><g><title>free_global_ctxt (7,646,917 samples, 0.89%)</title><rect x="90.5921%" y="181" width="0.8931%" height="15" fill="rgb(236,97,10)"/><text x="90.8421%" y="191.50"></text></g><g><title>item_attrs (1,061,242 samples, 0.12%)</title><rect x="92.5139%" y="85" width="0.1239%" height="15" fill="rgb(233,208,19)"/><text x="92.7639%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,002,721 samples, 0.12%)</title><rect x="92.5207%" y="69" width="0.1171%" height="15" fill="rgb(216,164,2)"/><text x="92.7707%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,956,211 samples, 0.23%)</title><rect x="92.4714%" y="101" width="0.2285%" height="15" fill="rgb(220,129,5)"/><text x="92.7214%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,521,012 samples, 0.29%)</title><rect x="93.3381%" y="85" width="0.2944%" height="15" fill="rgb(242,17,10)"/><text x="93.5881%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,823,490 samples, 0.45%)</title><rect x="93.6325%" y="85" width="0.4466%" height="15" fill="rgb(242,107,0)"/><text x="93.8825%" y="95.50"></text></g><g><title>optimized_mir (11,345,982 samples, 1.33%)</title><rect x="92.8076%" y="101" width="1.3252%" height="15" fill="rgb(251,28,31)"/><text x="93.0576%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,877,752 samples, 0.45%)</title><rect x="94.2728%" y="85" width="0.4529%" height="15" fill="rgb(233,223,10)"/><text x="94.5228%" y="95.50"></text></g><g><title>specialization_graph_of (2,328,685 samples, 0.27%)</title><rect x="94.8647%" y="85" width="0.2720%" height="15" fill="rgb(215,21,27)"/><text x="95.1147%" y="95.50"></text></g><g><title>impl_trait_ref (944,171 samples, 0.11%)</title><rect x="95.0264%" y="69" width="0.1103%" height="15" fill="rgb(232,23,21)"/><text x="95.2764%" y="79.50"></text></g><g><title>resolve_instance (9,026,653 samples, 1.05%)</title><rect x="94.1328%" y="101" width="1.0543%" height="15" fill="rgb(244,5,23)"/><text x="94.3828%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (28,081,805 samples, 3.28%)</title><rect x="92.0806%" y="117" width="3.2798%" height="15" fill="rgb(226,81,46)"/><text x="92.3306%" y="127.50">mon..</text></g><g><title>monomorphization_collector (28,249,617 samples, 3.30%)</title><rect x="92.0801%" y="133" width="3.2994%" height="15" fill="rgb(247,70,30)"/><text x="92.3301%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,563,257 samples, 0.30%)</title><rect x="95.3801%" y="117" width="0.2994%" height="15" fill="rgb(212,68,19)"/><text x="95.6301%" y="127.50"></text></g><g><title>symbol_name (2,310,325 samples, 0.27%)</title><rect x="95.4096%" y="101" width="0.2698%" height="15" fill="rgb(240,187,13)"/><text x="95.6596%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (32,165,027 samples, 3.76%)</title><rect x="92.0748%" y="149" width="3.7567%" height="15" fill="rgb(223,113,26)"/><text x="92.3248%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (3,870,270 samples, 0.45%)</title><rect x="95.3795%" y="133" width="0.4520%" height="15" fill="rgb(206,192,2)"/><text x="95.6295%" y="143.50"></text></g><g><title>cgu_partitioning (1,302,403 samples, 0.15%)</title><rect x="95.6794%" y="117" width="0.1521%" height="15" fill="rgb(241,108,4)"/><text x="95.9294%" y="127.50"></text></g><g><title>exported_symbols (32,705,072 samples, 3.82%)</title><rect x="92.0596%" y="165" width="3.8198%" height="15" fill="rgb(247,173,49)"/><text x="92.3096%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,494,023 samples, 0.64%)</title><rect x="96.4476%" y="149" width="0.6417%" height="15" fill="rgb(224,114,35)"/><text x="96.6976%" y="159.50"></text></g><g><title>optimized_mir (10,251,977 samples, 1.20%)</title><rect x="95.9195%" y="165" width="1.1974%" height="15" fill="rgb(245,159,27)"/><text x="96.1695%" y="175.50"></text></g><g><title>generate_crate_metadata (48,506,002 samples, 5.67%)</title><rect x="91.4852%" y="181" width="5.6653%" height="15" fill="rgb(245,172,44)"/><text x="91.7352%" y="191.50">generat..</text></g><g><title>hir_lowering (9,142,873 samples, 1.07%)</title><rect x="97.1505%" y="181" width="1.0679%" height="15" fill="rgb(236,23,11)"/><text x="97.4005%" y="191.50"></text></g><g><title>finish_ongoing_codegen (8,992,131 samples, 1.05%)</title><rect x="98.2268%" y="165" width="1.0502%" height="15" fill="rgb(205,117,38)"/><text x="98.4768%" y="175.50"></text></g><g><title>link_crate (2,925,190 samples, 0.34%)</title><rect x="99.2771%" y="165" width="0.3417%" height="15" fill="rgb(237,72,25)"/><text x="99.5271%" y="175.50"></text></g><g><title>link_binary (2,852,159 samples, 0.33%)</title><rect x="99.2856%" y="149" width="0.3331%" height="15" fill="rgb(244,70,9)"/><text x="99.5356%" y="159.50"></text></g><g><title>link_rlib (2,236,743 samples, 0.26%)</title><rect x="99.3575%" y="133" width="0.2612%" height="15" fill="rgb(217,125,39)"/><text x="99.6075%" y="143.50"></text></g><g><title>link (12,002,322 samples, 1.40%)</title><rect x="98.2184%" y="181" width="1.4018%" height="15" fill="rgb(235,36,10)"/><text x="98.4684%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,970,421 samples, 0.23%)</title><rect x="99.6994%" y="181" width="0.2301%" height="15" fill="rgb(251,123,47)"/><text x="99.9494%" y="191.50"></text></g><g><title>all (856,194,099 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (856,194,099 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>