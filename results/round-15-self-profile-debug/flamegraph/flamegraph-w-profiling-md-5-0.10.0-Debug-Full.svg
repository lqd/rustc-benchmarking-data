<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,889,999 samples, 4.10%)</title><rect x="0.6405%" y="645" width="4.0976%" height="15" fill="rgb(227,0,7)"/><text x="0.8905%" y="655.50">LLVM..</text></g><g><title>param_env (254,481 samples, 0.21%)</title><rect x="10.2084%" y="565" width="0.2132%" height="15" fill="rgb(217,0,24)"/><text x="10.4584%" y="575.50"></text></g><g><title>item_attrs (185,232 samples, 0.16%)</title><rect x="10.6152%" y="533" width="0.1552%" height="15" fill="rgb(221,193,54)"/><text x="10.8652%" y="543.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,892 samples, 0.15%)</title><rect x="10.6197%" y="517" width="0.1507%" height="15" fill="rgb(248,212,6)"/><text x="10.8697%" y="527.50"></text></g><g><title>codegen_fn_attrs (251,722 samples, 0.21%)</title><rect x="10.5688%" y="549" width="0.2109%" height="15" fill="rgb(208,68,35)"/><text x="10.8188%" y="559.50"></text></g><g><title>adt_drop_tys (170,453 samples, 0.14%)</title><rect x="12.0216%" y="517" width="0.1428%" height="15" fill="rgb(232,128,0)"/><text x="12.2716%" y="527.50"></text></g><g><title>needs_drop_raw (415,446 samples, 0.35%)</title><rect x="11.9896%" y="533" width="0.3481%" height="15" fill="rgb(207,160,47)"/><text x="12.2396%" y="543.50"></text></g><g><title>is_copy_raw (206,733 samples, 0.17%)</title><rect x="12.1644%" y="517" width="0.1732%" height="15" fill="rgb(228,23,34)"/><text x="12.4144%" y="527.50"></text></g><g><title>evaluate_obligation (184,232 samples, 0.15%)</title><rect x="12.1833%" y="501" width="0.1544%" height="15" fill="rgb(218,30,26)"/><text x="12.4333%" y="511.50"></text></g><g><title>codegen_fulfill_obligation (246,561 samples, 0.21%)</title><rect x="12.4279%" y="517" width="0.2066%" height="15" fill="rgb(220,122,19)"/><text x="12.6779%" y="527.50"></text></g><g><title>impl_parent (185,151 samples, 0.16%)</title><rect x="13.0801%" y="501" width="0.1551%" height="15" fill="rgb(250,228,42)"/><text x="13.3301%" y="511.50"></text></g><g><title>metadata_decode_entry_impl_parent (121,871 samples, 0.10%)</title><rect x="13.1331%" y="485" width="0.1021%" height="15" fill="rgb(240,193,28)"/><text x="13.3831%" y="495.50"></text></g><g><title>specialization_graph_of (1,113,762 samples, 0.93%)</title><rect x="12.6671%" y="517" width="0.9333%" height="15" fill="rgb(216,20,37)"/><text x="12.9171%" y="527.50"></text></g><g><title>impl_trait_ref (435,747 samples, 0.37%)</title><rect x="13.2352%" y="501" width="0.3651%" height="15" fill="rgb(206,188,39)"/><text x="13.4852%" y="511.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (372,955 samples, 0.31%)</title><rect x="13.2879%" y="485" width="0.3125%" height="15" fill="rgb(217,207,13)"/><text x="13.5379%" y="495.50"></text></g><g><title>resolve_instance (1,583,447 samples, 1.33%)</title><rect x="12.3377%" y="533" width="1.3269%" height="15" fill="rgb(231,73,38)"/><text x="12.5877%" y="543.50"></text></g><g><title>thir_body (712,298 samples, 0.60%)</title><rect x="13.6710%" y="533" width="0.5969%" height="15" fill="rgb(225,20,46)"/><text x="13.9210%" y="543.50"></text></g><g><title>mir_const (5,196,123 samples, 4.35%)</title><rect x="9.9178%" y="581" width="4.3541%" height="15" fill="rgb(210,31,41)"/><text x="10.1678%" y="591.50">mir_c..</text></g><g><title>unsafety_check_result (4,594,858 samples, 3.85%)</title><rect x="10.4216%" y="565" width="3.8503%" height="15" fill="rgb(221,200,47)"/><text x="10.6716%" y="575.50">unsa..</text></g><g><title>mir_built (4,167,502 samples, 3.49%)</title><rect x="10.7798%" y="549" width="3.4922%" height="15" fill="rgb(226,26,5)"/><text x="11.0298%" y="559.50">mir..</text></g><g><title>mir_promoted (5,798,018 samples, 4.86%)</title><rect x="9.6334%" y="597" width="4.8585%" height="15" fill="rgb(249,33,26)"/><text x="9.8834%" y="607.50">mir_pr..</text></g><g><title>mir_const_qualif (262,511 samples, 0.22%)</title><rect x="14.2719%" y="581" width="0.2200%" height="15" fill="rgb(235,183,28)"/><text x="14.5219%" y="591.50"></text></g><g><title>mir_const (220,441 samples, 0.18%)</title><rect x="14.3072%" y="565" width="0.1847%" height="15" fill="rgb(221,5,38)"/><text x="14.5572%" y="575.50"></text></g><g><title>unsafety_check_result (174,911 samples, 0.15%)</title><rect x="14.3453%" y="549" width="0.1466%" height="15" fill="rgb(247,18,42)"/><text x="14.5953%" y="559.50"></text></g><g><title>mir_built (160,170 samples, 0.13%)</title><rect x="14.3577%" y="533" width="0.1342%" height="15" fill="rgb(241,131,45)"/><text x="14.6077%" y="543.50"></text></g><g><title>type_op_normalize_fn_sig (460,232 samples, 0.39%)</title><rect x="14.5114%" y="597" width="0.3857%" height="15" fill="rgb(249,31,29)"/><text x="14.7614%" y="607.50"></text></g><g><title>normalize_projection_ty (305,121 samples, 0.26%)</title><rect x="14.6414%" y="581" width="0.2557%" height="15" fill="rgb(225,111,53)"/><text x="14.8914%" y="591.50"></text></g><g><title>type_op_normalize_predicate (186,452 samples, 0.16%)</title><rect x="14.8970%" y="597" width="0.1562%" height="15" fill="rgb(238,160,17)"/><text x="15.1470%" y="607.50"></text></g><g><title>normalize_projection_ty (178,872 samples, 0.15%)</title><rect x="14.9034%" y="581" width="0.1499%" height="15" fill="rgb(214,148,48)"/><text x="15.1534%" y="591.50"></text></g><g><title>type_op_prove_predicate (1,160,591 samples, 0.97%)</title><rect x="15.0980%" y="597" width="0.9725%" height="15" fill="rgb(232,36,49)"/><text x="15.3480%" y="607.50"></text></g><g><title>MIR_borrow_checking (13,174,593 samples, 11.04%)</title><rect x="5.0320%" y="629" width="11.0397%" height="15" fill="rgb(209,103,24)"/><text x="5.2820%" y="639.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (13,134,702 samples, 11.01%)</title><rect x="5.0654%" y="613" width="11.0063%" height="15" fill="rgb(229,88,8)"/><text x="5.3154%" y="623.50">mir_borrowck</text></g><g><title>MIR_effect_checking (137,872 samples, 0.12%)</title><rect x="16.0717%" y="629" width="0.1155%" height="15" fill="rgb(213,181,19)"/><text x="16.3217%" y="639.50"></text></g><g><title>hir_module_items (174,482 samples, 0.15%)</title><rect x="16.1872%" y="629" width="0.1462%" height="15" fill="rgb(254,191,54)"/><text x="16.4372%" y="639.50"></text></g><g><title>codegen_fn_attrs (134,211 samples, 0.11%)</title><rect x="16.7914%" y="565" width="0.1125%" height="15" fill="rgb(241,83,37)"/><text x="17.0414%" y="575.50"></text></g><g><title>should_inherit_track_caller (210,353 samples, 0.18%)</title><rect x="16.7313%" y="581" width="0.1763%" height="15" fill="rgb(233,36,39)"/><text x="16.9813%" y="591.50"></text></g><g><title>codegen_fn_attrs (405,005 samples, 0.34%)</title><rect x="16.5980%" y="597" width="0.3394%" height="15" fill="rgb(226,3,54)"/><text x="16.8480%" y="607.50"></text></g><g><title>check_mod_attrs (691,747 samples, 0.58%)</title><rect x="16.3579%" y="613" width="0.5797%" height="15" fill="rgb(245,192,40)"/><text x="16.6079%" y="623.50"></text></g><g><title>check_mod_unstable_api_usage (278,613 samples, 0.23%)</title><rect x="17.0855%" y="613" width="0.2335%" height="15" fill="rgb(238,167,29)"/><text x="17.3355%" y="623.50"></text></g><g><title>misc_checking_1 (1,256,312 samples, 1.05%)</title><rect x="16.3338%" y="629" width="1.0527%" height="15" fill="rgb(232,182,51)"/><text x="16.5838%" y="639.50"></text></g><g><title>liveness_and_intrinsic_checking (259,053 samples, 0.22%)</title><rect x="17.3877%" y="613" width="0.2171%" height="15" fill="rgb(231,60,39)"/><text x="17.6377%" y="623.50"></text></g><g><title>check_mod_liveness (203,262 samples, 0.17%)</title><rect x="17.4345%" y="597" width="0.1703%" height="15" fill="rgb(208,69,12)"/><text x="17.6845%" y="607.50"></text></g><g><title>misc_checking_2 (437,505 samples, 0.37%)</title><rect x="17.3866%" y="629" width="0.3666%" height="15" fill="rgb(235,93,37)"/><text x="17.6366%" y="639.50"></text></g><g><title>match_checking (177,082 samples, 0.15%)</title><rect x="17.6048%" y="613" width="0.1484%" height="15" fill="rgb(213,116,39)"/><text x="17.8548%" y="623.50"></text></g><g><title>check_match (164,602 samples, 0.14%)</title><rect x="17.6153%" y="597" width="0.1379%" height="15" fill="rgb(222,207,29)"/><text x="17.8653%" y="607.50"></text></g><g><title>death_checking (182,482 samples, 0.15%)</title><rect x="17.8351%" y="613" width="0.1529%" height="15" fill="rgb(206,96,30)"/><text x="18.0851%" y="623.50"></text></g><g><title>param_env (168,671 samples, 0.14%)</title><rect x="18.5836%" y="581" width="0.1413%" height="15" fill="rgb(218,138,4)"/><text x="18.8336%" y="591.50"></text></g><g><title>crate_lints (2,000,270 samples, 1.68%)</title><rect x="17.9892%" y="597" width="1.6761%" height="15" fill="rgb(250,191,14)"/><text x="18.2392%" y="607.50"></text></g><g><title>type_of (1,118,712 samples, 0.94%)</title><rect x="18.7279%" y="581" width="0.9374%" height="15" fill="rgb(239,60,40)"/><text x="18.9779%" y="591.50"></text></g><g><title>metadata_decode_entry_type_of (881,700 samples, 0.74%)</title><rect x="18.9265%" y="565" width="0.7388%" height="15" fill="rgb(206,27,48)"/><text x="19.1765%" y="575.50"></text></g><g><title>lint_checking (2,295,553 samples, 1.92%)</title><rect x="17.9880%" y="613" width="1.9236%" height="15" fill="rgb(225,35,8)"/><text x="18.2380%" y="623.50">l..</text></g><g><title>module_lints (293,863 samples, 0.25%)</title><rect x="19.6653%" y="597" width="0.2462%" height="15" fill="rgb(250,213,24)"/><text x="19.9153%" y="607.50"></text></g><g><title>lint_mod (290,913 samples, 0.24%)</title><rect x="19.6678%" y="581" width="0.2438%" height="15" fill="rgb(247,123,22)"/><text x="19.9178%" y="591.50"></text></g><g><title>privacy_checking_modules (360,483 samples, 0.30%)</title><rect x="20.0034%" y="613" width="0.3021%" height="15" fill="rgb(231,138,38)"/><text x="20.2534%" y="623.50"></text></g><g><title>check_mod_privacy (357,823 samples, 0.30%)</title><rect x="20.0056%" y="597" width="0.2998%" height="15" fill="rgb(231,145,46)"/><text x="20.2556%" y="607.50"></text></g><g><title>misc_checking_3 (3,056,350 samples, 2.56%)</title><rect x="17.7532%" y="629" width="2.5611%" height="15" fill="rgb(251,118,11)"/><text x="18.0032%" y="639.50">mi..</text></g><g><title>impl_parent (2,523,278 samples, 2.11%)</title><rect x="24.0713%" y="565" width="2.1144%" height="15" fill="rgb(217,147,25)"/><text x="24.3213%" y="575.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,401,288 samples, 1.17%)</title><rect x="25.0115%" y="549" width="1.1742%" height="15" fill="rgb(247,81,37)"/><text x="25.2615%" y="559.50"></text></g><g><title>impl_trait_ref (8,256,195 samples, 6.92%)</title><rect x="26.1857%" y="565" width="6.9183%" height="15" fill="rgb(209,12,38)"/><text x="26.4357%" y="575.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,753,770 samples, 5.66%)</title><rect x="27.4447%" y="549" width="5.6593%" height="15" fill="rgb(227,1,9)"/><text x="27.6947%" y="559.50">metadat..</text></g><g><title>coherent_trait (16,253,525 samples, 13.62%)</title><rect x="20.3838%" y="597" width="13.6197%" height="15" fill="rgb(248,47,43)"/><text x="20.6338%" y="607.50">coherent_trait</text></g><g><title>specialization_graph_of (16,226,065 samples, 13.60%)</title><rect x="20.4068%" y="581" width="13.5967%" height="15" fill="rgb(221,10,30)"/><text x="20.6568%" y="591.50">specialization_graph_..</text></g><g><title>trait_impls_of (1,070,499 samples, 0.90%)</title><rect x="33.1064%" y="565" width="0.8970%" height="15" fill="rgb(210,229,1)"/><text x="33.3564%" y="575.50"></text></g><g><title>implementations_of_trait (331,423 samples, 0.28%)</title><rect x="33.7258%" y="549" width="0.2777%" height="15" fill="rgb(222,148,37)"/><text x="33.9758%" y="559.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (196,421 samples, 0.16%)</title><rect x="33.8389%" y="533" width="0.1646%" height="15" fill="rgb(234,67,33)"/><text x="34.0889%" y="543.50"></text></g><g><title>coherence_checking (16,349,266 samples, 13.70%)</title><rect x="20.3554%" y="613" width="13.6999%" height="15" fill="rgb(247,98,35)"/><text x="20.6054%" y="623.50">coherence_checking</text></g><g><title>associated_item (462,195 samples, 0.39%)</title><rect x="49.6369%" y="549" width="0.3873%" height="15" fill="rgb(247,138,52)"/><text x="49.8869%" y="559.50"></text></g><g><title>metadata_decode_entry_associated_item (371,133 samples, 0.31%)</title><rect x="49.7132%" y="533" width="0.3110%" height="15" fill="rgb(213,79,30)"/><text x="49.9632%" y="543.50"></text></g><g><title>associated_items (621,205 samples, 0.52%)</title><rect x="49.5221%" y="565" width="0.5205%" height="15" fill="rgb(246,177,23)"/><text x="49.7721%" y="575.50"></text></g><g><title>dropck_outlives (172,213 samples, 0.14%)</title><rect x="50.0648%" y="565" width="0.1443%" height="15" fill="rgb(230,62,27)"/><text x="50.3148%" y="575.50"></text></g><g><title>mir_borrowck (143,051 samples, 0.12%)</title><rect x="50.4710%" y="485" width="0.1199%" height="15" fill="rgb(216,154,8)"/><text x="50.7210%" y="495.50"></text></g><g><title>mir_for_ctfe (216,432 samples, 0.18%)</title><rect x="50.4098%" y="517" width="0.1814%" height="15" fill="rgb(244,35,45)"/><text x="50.6598%" y="527.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (186,751 samples, 0.16%)</title><rect x="50.4347%" y="501" width="0.1565%" height="15" fill="rgb(251,115,12)"/><text x="50.6847%" y="511.50"></text></g><g><title>eval_to_const_value_raw (461,575 samples, 0.39%)</title><rect x="50.2091%" y="565" width="0.3868%" height="15" fill="rgb(240,54,50)"/><text x="50.4591%" y="575.50"></text></g><g><title>eval_to_const_value_raw (457,575 samples, 0.38%)</title><rect x="50.2125%" y="549" width="0.3834%" height="15" fill="rgb(233,84,52)"/><text x="50.4625%" y="559.50"></text></g><g><title>eval_to_allocation_raw (451,445 samples, 0.38%)</title><rect x="50.2176%" y="533" width="0.3783%" height="15" fill="rgb(207,117,47)"/><text x="50.4676%" y="543.50"></text></g><g><title>predicates_of (144,451 samples, 0.12%)</title><rect x="51.1821%" y="549" width="0.1210%" height="15" fill="rgb(249,43,39)"/><text x="51.4321%" y="559.50"></text></g><g><title>specializes (165,723 samples, 0.14%)</title><rect x="51.3031%" y="549" width="0.1389%" height="15" fill="rgb(209,38,44)"/><text x="51.5531%" y="559.50"></text></g><g><title>param_env (142,812 samples, 0.12%)</title><rect x="51.3223%" y="533" width="0.1197%" height="15" fill="rgb(236,212,23)"/><text x="51.5723%" y="543.50"></text></g><g><title>trait_impls_of (431,676 samples, 0.36%)</title><rect x="51.4509%" y="549" width="0.3617%" height="15" fill="rgb(242,79,21)"/><text x="51.7009%" y="559.50"></text></g><g><title>implementations_of_trait (175,574 samples, 0.15%)</title><rect x="51.6655%" y="533" width="0.1471%" height="15" fill="rgb(211,96,35)"/><text x="51.9155%" y="543.50"></text></g><g><title>evaluate_obligation (1,460,544 samples, 1.22%)</title><rect x="50.5959%" y="565" width="1.2239%" height="15" fill="rgb(253,215,40)"/><text x="50.8459%" y="575.50"></text></g><g><title>generics_of (150,921 samples, 0.13%)</title><rect x="51.8868%" y="565" width="0.1265%" height="15" fill="rgb(211,81,21)"/><text x="52.1368%" y="575.50"></text></g><g><title>metadata_decode_entry_generics_of (126,581 samples, 0.11%)</title><rect x="51.9072%" y="549" width="0.1061%" height="15" fill="rgb(208,190,38)"/><text x="52.1572%" y="559.50"></text></g><g><title>impl_trait_ref (231,411 samples, 0.19%)</title><rect x="52.1170%" y="565" width="0.1939%" height="15" fill="rgb(235,213,38)"/><text x="52.3670%" y="575.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (210,031 samples, 0.18%)</title><rect x="52.1349%" y="549" width="0.1760%" height="15" fill="rgb(237,122,38)"/><text x="52.3849%" y="559.50"></text></g><g><title>method_autoderef_steps (144,321 samples, 0.12%)</title><rect x="52.4218%" y="565" width="0.1209%" height="15" fill="rgb(244,218,35)"/><text x="52.6718%" y="575.50"></text></g><g><title>predicates_of (219,561 samples, 0.18%)</title><rect x="52.6318%" y="565" width="0.1840%" height="15" fill="rgb(240,68,47)"/><text x="52.8818%" y="575.50"></text></g><g><title>predicates_defined_on (149,071 samples, 0.12%)</title><rect x="52.6908%" y="549" width="0.1249%" height="15" fill="rgb(210,16,53)"/><text x="52.9408%" y="559.50"></text></g><g><title>evaluate_obligation (139,321 samples, 0.12%)</title><rect x="54.6126%" y="549" width="0.1167%" height="15" fill="rgb(235,124,12)"/><text x="54.8626%" y="559.50"></text></g><g><title>lint_levels (123,331 samples, 0.10%)</title><rect x="54.8840%" y="549" width="0.1033%" height="15" fill="rgb(224,169,11)"/><text x="55.1340%" y="559.50"></text></g><g><title>typeck (2,763,219 samples, 2.32%)</title><rect x="52.8848%" y="565" width="2.3155%" height="15" fill="rgb(250,166,2)"/><text x="53.1348%" y="575.50">t..</text></g><g><title>item_bodies_checking (25,229,147 samples, 21.14%)</title><rect x="34.0833%" y="613" width="21.1409%" height="15" fill="rgb(242,216,29)"/><text x="34.3333%" y="623.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,226,207 samples, 21.14%)</title><rect x="34.0857%" y="597" width="21.1384%" height="15" fill="rgb(230,116,27)"/><text x="34.3357%" y="607.50">typeck_item_bodies</text></g><g><title>typeck (25,197,897 samples, 21.11%)</title><rect x="34.1095%" y="581" width="21.1147%" height="15" fill="rgb(228,99,48)"/><text x="34.3595%" y="591.50">typeck</text></g><g><title>impl_trait_ref (157,222 samples, 0.13%)</title><rect x="55.6445%" y="533" width="0.1317%" height="15" fill="rgb(253,11,6)"/><text x="55.8945%" y="543.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (137,822 samples, 0.12%)</title><rect x="55.6608%" y="517" width="0.1155%" height="15" fill="rgb(247,143,39)"/><text x="55.9108%" y="527.50"></text></g><g><title>adt_destructor (328,384 samples, 0.28%)</title><rect x="55.5244%" y="581" width="0.2752%" height="15" fill="rgb(236,97,10)"/><text x="55.7744%" y="591.50"></text></g><g><title>coherent_trait (325,424 samples, 0.27%)</title><rect x="55.5268%" y="565" width="0.2727%" height="15" fill="rgb(233,208,19)"/><text x="55.7768%" y="575.50"></text></g><g><title>specialization_graph_of (323,414 samples, 0.27%)</title><rect x="55.5285%" y="549" width="0.2710%" height="15" fill="rgb(216,164,2)"/><text x="55.7785%" y="559.50"></text></g><g><title>evaluate_obligation (169,191 samples, 0.14%)</title><rect x="55.8074%" y="581" width="0.1418%" height="15" fill="rgb(220,129,5)"/><text x="56.0574%" y="591.50"></text></g><g><title>item_types_checking (1,002,720 samples, 0.84%)</title><rect x="55.2242%" y="613" width="0.8402%" height="15" fill="rgb(242,17,10)"/><text x="55.4742%" y="623.50"></text></g><g><title>check_mod_item_types (999,750 samples, 0.84%)</title><rect x="55.2266%" y="597" width="0.8377%" height="15" fill="rgb(242,107,0)"/><text x="55.4766%" y="607.50"></text></g><g><title>fn_sig (253,303 samples, 0.21%)</title><rect x="56.2545%" y="581" width="0.2123%" height="15" fill="rgb(251,28,31)"/><text x="56.5045%" y="591.50"></text></g><g><title>named_region_map (259,301 samples, 0.22%)</title><rect x="56.5346%" y="565" width="0.2173%" height="15" fill="rgb(233,223,10)"/><text x="56.7846%" y="575.50"></text></g><g><title>resolve_lifetimes (235,811 samples, 0.20%)</title><rect x="56.5542%" y="549" width="0.1976%" height="15" fill="rgb(215,21,27)"/><text x="56.8042%" y="559.50"></text></g><g><title>generics_of (353,652 samples, 0.30%)</title><rect x="56.4668%" y="581" width="0.2963%" height="15" fill="rgb(232,23,21)"/><text x="56.7168%" y="591.50"></text></g><g><title>predicates_of (295,184 samples, 0.25%)</title><rect x="56.8146%" y="581" width="0.2474%" height="15" fill="rgb(244,5,23)"/><text x="57.0646%" y="591.50"></text></g><g><title>predicates_defined_on (264,324 samples, 0.22%)</title><rect x="56.8405%" y="565" width="0.2215%" height="15" fill="rgb(226,81,46)"/><text x="57.0905%" y="575.50"></text></g><g><title>inferred_outlives_of (137,181 samples, 0.11%)</title><rect x="56.9470%" y="549" width="0.1150%" height="15" fill="rgb(247,70,30)"/><text x="57.1970%" y="559.50"></text></g><g><title>type_collecting (1,347,094 samples, 1.13%)</title><rect x="56.0661%" y="613" width="1.1288%" height="15" fill="rgb(212,68,19)"/><text x="56.3161%" y="623.50"></text></g><g><title>collect_mod_item_types (1,335,584 samples, 1.12%)</title><rect x="56.0757%" y="597" width="1.1192%" height="15" fill="rgb(240,187,13)"/><text x="56.3257%" y="607.50"></text></g><g><title>type_of (158,591 samples, 0.13%)</title><rect x="57.0620%" y="581" width="0.1329%" height="15" fill="rgb(223,113,26)"/><text x="57.3120%" y="591.50"></text></g><g><title>adt_sized_constraint (127,430 samples, 0.11%)</title><rect x="57.9869%" y="565" width="0.1068%" height="15" fill="rgb(206,192,2)"/><text x="58.2369%" y="575.50"></text></g><g><title>evaluate_obligation (584,427 samples, 0.49%)</title><rect x="57.7109%" y="581" width="0.4897%" height="15" fill="rgb(241,108,4)"/><text x="57.9609%" y="591.50"></text></g><g><title>implied_outlives_bounds (224,622 samples, 0.19%)</title><rect x="58.2105%" y="581" width="0.1882%" height="15" fill="rgb(247,173,49)"/><text x="58.4605%" y="591.50"></text></g><g><title>check_impl_item_well_formed (1,519,777 samples, 1.27%)</title><rect x="57.2569%" y="597" width="1.2735%" height="15" fill="rgb(224,114,35)"/><text x="57.5069%" y="607.50"></text></g><g><title>mir_const_qualif (156,482 samples, 0.13%)</title><rect x="59.4676%" y="533" width="0.1311%" height="15" fill="rgb(245,159,27)"/><text x="59.7176%" y="543.50"></text></g><g><title>mir_const (132,132 samples, 0.11%)</title><rect x="59.4880%" y="517" width="0.1107%" height="15" fill="rgb(245,172,44)"/><text x="59.7380%" y="527.50"></text></g><g><title>mir_borrowck (351,334 samples, 0.29%)</title><rect x="59.7110%" y="501" width="0.2944%" height="15" fill="rgb(236,23,11)"/><text x="59.9610%" y="511.50"></text></g><g><title>mir_for_ctfe (485,725 samples, 0.41%)</title><rect x="59.5987%" y="533" width="0.4070%" height="15" fill="rgb(205,117,38)"/><text x="59.8487%" y="543.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (445,415 samples, 0.37%)</title><rect x="59.6325%" y="517" width="0.3732%" height="15" fill="rgb(237,72,25)"/><text x="59.8825%" y="527.50"></text></g><g><title>eval_to_const_value_raw (127,021 samples, 0.11%)</title><rect x="60.2769%" y="69" width="0.1064%" height="15" fill="rgb(244,70,9)"/><text x="60.5269%" y="79.50"></text></g><g><title>eval_to_const_value_raw (126,511 samples, 0.11%)</title><rect x="60.2773%" y="53" width="0.1060%" height="15" fill="rgb(217,125,39)"/><text x="60.5273%" y="63.50"></text></g><g><title>eval_to_allocation_raw (125,381 samples, 0.11%)</title><rect x="60.2783%" y="37" width="0.1051%" height="15" fill="rgb(235,36,10)"/><text x="60.5283%" y="47.50"></text></g><g><title>eval_to_const_value_raw (162,132 samples, 0.14%)</title><rect x="60.2650%" y="133" width="0.1359%" height="15" fill="rgb(251,123,47)"/><text x="60.5150%" y="143.50"></text></g><g><title>eval_to_const_value_raw (161,702 samples, 0.14%)</title><rect x="60.2653%" y="117" width="0.1355%" height="15" fill="rgb(221,13,13)"/><text x="60.5153%" y="127.50"></text></g><g><title>eval_to_allocation_raw (160,702 samples, 0.13%)</title><rect x="60.2662%" y="101" width="0.1347%" height="15" fill="rgb(238,131,9)"/><text x="60.5162%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (150,872 samples, 0.13%)</title><rect x="60.2744%" y="85" width="0.1264%" height="15" fill="rgb(211,50,8)"/><text x="60.5244%" y="95.50"></text></g><g><title>eval_to_const_value_raw (195,102 samples, 0.16%)</title><rect x="60.2567%" y="197" width="0.1635%" height="15" fill="rgb(245,182,24)"/><text x="60.5067%" y="207.50"></text></g><g><title>eval_to_const_value_raw (194,612 samples, 0.16%)</title><rect x="60.2571%" y="181" width="0.1631%" height="15" fill="rgb(242,14,37)"/><text x="60.5071%" y="191.50"></text></g><g><title>eval_to_allocation_raw (193,922 samples, 0.16%)</title><rect x="60.2577%" y="165" width="0.1625%" height="15" fill="rgb(246,228,12)"/><text x="60.5077%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (187,842 samples, 0.16%)</title><rect x="60.2628%" y="149" width="0.1574%" height="15" fill="rgb(213,55,15)"/><text x="60.5128%" y="159.50"></text></g><g><title>eval_to_const_value_raw (223,132 samples, 0.19%)</title><rect x="60.2481%" y="261" width="0.1870%" height="15" fill="rgb(209,9,3)"/><text x="60.4981%" y="271.50"></text></g><g><title>eval_to_const_value_raw (222,602 samples, 0.19%)</title><rect x="60.2486%" y="245" width="0.1865%" height="15" fill="rgb(230,59,30)"/><text x="60.4986%" y="255.50"></text></g><g><title>eval_to_allocation_raw (221,832 samples, 0.19%)</title><rect x="60.2492%" y="229" width="0.1859%" height="15" fill="rgb(209,121,21)"/><text x="60.4992%" y="239.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (215,622 samples, 0.18%)</title><rect x="60.2544%" y="213" width="0.1807%" height="15" fill="rgb(220,109,13)"/><text x="60.5044%" y="223.50"></text></g><g><title>eval_to_const_value_raw (264,813 samples, 0.22%)</title><rect x="60.2363%" y="325" width="0.2219%" height="15" fill="rgb(232,18,1)"/><text x="60.4863%" y="335.50"></text></g><g><title>eval_to_const_value_raw (260,343 samples, 0.22%)</title><rect x="60.2401%" y="309" width="0.2182%" height="15" fill="rgb(215,41,42)"/><text x="60.4901%" y="319.50"></text></g><g><title>eval_to_allocation_raw (259,153 samples, 0.22%)</title><rect x="60.2411%" y="293" width="0.2172%" height="15" fill="rgb(224,123,36)"/><text x="60.4911%" y="303.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (252,762 samples, 0.21%)</title><rect x="60.2464%" y="277" width="0.2118%" height="15" fill="rgb(240,125,3)"/><text x="60.4964%" y="287.50"></text></g><g><title>eval_to_const_value_raw (351,114 samples, 0.29%)</title><rect x="60.1782%" y="389" width="0.2942%" height="15" fill="rgb(205,98,50)"/><text x="60.4282%" y="399.50"></text></g><g><title>eval_to_const_value_raw (348,854 samples, 0.29%)</title><rect x="60.1801%" y="373" width="0.2923%" height="15" fill="rgb(205,185,37)"/><text x="60.4301%" y="383.50"></text></g><g><title>eval_to_allocation_raw (343,984 samples, 0.29%)</title><rect x="60.1842%" y="357" width="0.2882%" height="15" fill="rgb(238,207,15)"/><text x="60.4342%" y="367.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (283,883 samples, 0.24%)</title><rect x="60.2346%" y="341" width="0.2379%" height="15" fill="rgb(213,199,42)"/><text x="60.4846%" y="351.50"></text></g><g><title>eval_to_const_value_raw (447,554 samples, 0.38%)</title><rect x="60.1397%" y="453" width="0.3750%" height="15" fill="rgb(235,201,11)"/><text x="60.3897%" y="463.50"></text></g><g><title>eval_to_const_value_raw (446,914 samples, 0.37%)</title><rect x="60.1402%" y="437" width="0.3745%" height="15" fill="rgb(207,46,11)"/><text x="60.3902%" y="447.50"></text></g><g><title>eval_to_allocation_raw (446,144 samples, 0.37%)</title><rect x="60.1409%" y="421" width="0.3738%" height="15" fill="rgb(241,35,35)"/><text x="60.3909%" y="431.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (409,014 samples, 0.34%)</title><rect x="60.1720%" y="405" width="0.3427%" height="15" fill="rgb(243,32,47)"/><text x="60.4220%" y="415.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (605,826 samples, 0.51%)</title><rect x="60.1364%" y="469" width="0.5077%" height="15" fill="rgb(247,202,23)"/><text x="60.3864%" y="479.50"></text></g><g><title>resolve_instance (154,302 samples, 0.13%)</title><rect x="60.5147%" y="453" width="0.1293%" height="15" fill="rgb(219,102,11)"/><text x="60.7647%" y="463.50"></text></g><g><title>evaluate_obligation (376,173 samples, 0.32%)</title><rect x="60.7705%" y="453" width="0.3152%" height="15" fill="rgb(243,110,44)"/><text x="61.0205%" y="463.50"></text></g><g><title>trait_impls_of (134,181 samples, 0.11%)</title><rect x="60.9733%" y="437" width="0.1124%" height="15" fill="rgb(222,74,54)"/><text x="61.2233%" y="447.50"></text></g><g><title>eval_to_const_value_raw (1,312,443 samples, 1.10%)</title><rect x="60.0103%" y="517" width="1.0998%" height="15" fill="rgb(216,99,12)"/><text x="60.2603%" y="527.50"></text></g><g><title>eval_to_const_value_raw (1,311,543 samples, 1.10%)</title><rect x="60.0111%" y="501" width="1.0990%" height="15" fill="rgb(226,22,26)"/><text x="60.2611%" y="511.50"></text></g><g><title>eval_to_allocation_raw (1,310,723 samples, 1.10%)</title><rect x="60.0118%" y="485" width="1.0983%" height="15" fill="rgb(217,163,10)"/><text x="60.2618%" y="495.50"></text></g><g><title>typeck (556,196 samples, 0.47%)</title><rect x="60.6440%" y="469" width="0.4661%" height="15" fill="rgb(213,25,53)"/><text x="60.8940%" y="479.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,321,383 samples, 1.11%)</title><rect x="60.0059%" y="533" width="1.1073%" height="15" fill="rgb(252,105,26)"/><text x="60.2559%" y="543.50"></text></g><g><title>eval_to_const_value_raw (2,171,191 samples, 1.82%)</title><rect x="59.3750%" y="581" width="1.8194%" height="15" fill="rgb(220,39,43)"/><text x="59.6250%" y="591.50">e..</text></g><g><title>eval_to_const_value_raw (2,161,311 samples, 1.81%)</title><rect x="59.3833%" y="565" width="1.8111%" height="15" fill="rgb(229,68,48)"/><text x="59.6333%" y="575.50">e..</text></g><g><title>eval_to_allocation_raw (2,158,991 samples, 1.81%)</title><rect x="59.3853%" y="549" width="1.8091%" height="15" fill="rgb(252,8,32)"/><text x="59.6353%" y="559.50">e..</text></g><g><title>evaluate_obligation (674,726 samples, 0.57%)</title><rect x="61.1944%" y="581" width="0.5654%" height="15" fill="rgb(223,20,43)"/><text x="61.4444%" y="591.50"></text></g><g><title>param_env (201,024 samples, 0.17%)</title><rect x="61.8784%" y="581" width="0.1684%" height="15" fill="rgb(229,81,49)"/><text x="62.1284%" y="591.50"></text></g><g><title>region_scope_tree (144,221 samples, 0.12%)</title><rect x="62.1405%" y="581" width="0.1209%" height="15" fill="rgb(236,28,36)"/><text x="62.3905%" y="591.50"></text></g><g><title>analysis (68,747,627 samples, 57.61%)</title><rect x="4.7381%" y="645" width="57.6074%" height="15" fill="rgb(249,185,26)"/><text x="4.9881%" y="655.50">analysis</text></g><g><title>type_check_crate (50,159,279 samples, 42.03%)</title><rect x="20.3143%" y="629" width="42.0312%" height="15" fill="rgb(249,174,33)"/><text x="20.5643%" y="639.50">type_check_crate</text></g><g><title>wf_checking (6,144,562 samples, 5.15%)</title><rect x="57.1966%" y="613" width="5.1489%" height="15" fill="rgb(233,201,37)"/><text x="57.4466%" y="623.50">wf_che..</text></g><g><title>check_item_well_formed (4,552,773 samples, 3.82%)</title><rect x="58.5304%" y="597" width="3.8150%" height="15" fill="rgb(221,78,26)"/><text x="58.7804%" y="607.50">chec..</text></g><g><title>codegen_module (1,079,310 samples, 0.90%)</title><rect x="62.8404%" y="629" width="0.9044%" height="15" fill="rgb(250,127,30)"/><text x="63.0904%" y="639.50"></text></g><g><title>codegen_crate (1,836,848 samples, 1.54%)</title><rect x="62.3539%" y="645" width="1.5392%" height="15" fill="rgb(230,49,44)"/><text x="62.6039%" y="655.50"></text></g><g><title>LLVM_module_codegen (4,512,756 samples, 3.78%)</title><rect x="63.9033%" y="629" width="3.7815%" height="15" fill="rgb(229,67,23)"/><text x="64.1533%" y="639.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (4,409,505 samples, 3.69%)</title><rect x="63.9898%" y="613" width="3.6950%" height="15" fill="rgb(249,83,47)"/><text x="64.2398%" y="623.50">LLVM..</text></g><g><title>codegen_module_optimize (4,786,398 samples, 4.01%)</title><rect x="63.8931%" y="645" width="4.0108%" height="15" fill="rgb(215,43,3)"/><text x="64.1431%" y="655.50">code..</text></g><g><title>LLVM_module_optimize (261,382 samples, 0.22%)</title><rect x="67.6848%" y="629" width="0.2190%" height="15" fill="rgb(238,154,13)"/><text x="67.9348%" y="639.50"></text></g><g><title>AST_validation (156,602 samples, 0.13%)</title><rect x="68.0632%" y="629" width="0.1312%" height="15" fill="rgb(219,56,2)"/><text x="68.3132%" y="639.50"></text></g><g><title>metadata_register_crate (2,660,247 samples, 2.23%)</title><rect x="82.2219%" y="597" width="2.2292%" height="15" fill="rgb(233,0,4)"/><text x="82.4719%" y="607.50">m..</text></g><g><title>metadata_register_crate (1,755,977 samples, 1.47%)</title><rect x="82.9797%" y="581" width="1.4714%" height="15" fill="rgb(235,30,7)"/><text x="83.2297%" y="591.50"></text></g><g><title>metadata_register_crate (681,618 samples, 0.57%)</title><rect x="83.8799%" y="565" width="0.5712%" height="15" fill="rgb(250,79,13)"/><text x="84.1299%" y="575.50"></text></g><g><title>macro_expand_crate (19,451,857 samples, 16.30%)</title><rect x="68.3280%" y="629" width="16.2998%" height="15" fill="rgb(211,146,34)"/><text x="68.5780%" y="639.50">macro_expand_crate</text></g><g><title>expand_crate (19,437,827 samples, 16.29%)</title><rect x="68.3398%" y="613" width="16.2880%" height="15" fill="rgb(228,22,38)"/><text x="68.5898%" y="623.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (210,822 samples, 0.18%)</title><rect x="84.4511%" y="597" width="0.1767%" height="15" fill="rgb(235,168,5)"/><text x="84.7011%" y="607.50"></text></g><g><title>pre_AST_expansion_lint_checks (134,191 samples, 0.11%)</title><rect x="84.6315%" y="629" width="0.1124%" height="15" fill="rgb(221,155,16)"/><text x="84.8815%" y="639.50"></text></g><g><title>late_resolve_crate (1,550,965 samples, 1.30%)</title><rect x="84.8910%" y="613" width="1.2996%" height="15" fill="rgb(215,215,53)"/><text x="85.1410%" y="623.50"></text></g><g><title>configure_and_expand (21,955,953 samples, 18.40%)</title><rect x="67.9038%" y="645" width="18.3981%" height="15" fill="rgb(223,4,10)"/><text x="68.1538%" y="655.50">configure_and_expand</text></g><g><title>resolve_crate (1,859,299 samples, 1.56%)</title><rect x="84.7439%" y="629" width="1.5580%" height="15" fill="rgb(234,103,6)"/><text x="84.9939%" y="639.50"></text></g><g><title>drop_ast (204,262 samples, 0.17%)</title><rect x="86.3019%" y="645" width="0.1712%" height="15" fill="rgb(227,97,0)"/><text x="86.5519%" y="655.50"></text></g><g><title>early_lint_checks (517,715 samples, 0.43%)</title><rect x="86.4877%" y="645" width="0.4338%" height="15" fill="rgb(234,150,53)"/><text x="86.7377%" y="655.50"></text></g><g><title>free_global_ctxt (3,309,774 samples, 2.77%)</title><rect x="86.9215%" y="645" width="2.7734%" height="15" fill="rgb(228,201,54)"/><text x="87.1715%" y="655.50">fr..</text></g><g><title>optimized_mir (178,352 samples, 0.15%)</title><rect x="90.4906%" y="565" width="0.1495%" height="15" fill="rgb(222,22,37)"/><text x="90.7406%" y="575.50"></text></g><g><title>monomorphization_collector_graph_walk (255,483 samples, 0.21%)</title><rect x="90.4277%" y="581" width="0.2141%" height="15" fill="rgb(237,53,32)"/><text x="90.6777%" y="591.50"></text></g><g><title>monomorphization_collector (279,503 samples, 0.23%)</title><rect x="90.4253%" y="597" width="0.2342%" height="15" fill="rgb(233,25,53)"/><text x="90.6753%" y="607.50"></text></g><g><title>collect_and_partition_mono_items (403,644 samples, 0.34%)</title><rect x="90.4082%" y="613" width="0.3382%" height="15" fill="rgb(210,40,34)"/><text x="90.6582%" y="623.50"></text></g><g><title>exported_symbols (501,375 samples, 0.42%)</title><rect x="90.3935%" y="629" width="0.4201%" height="15" fill="rgb(241,220,44)"/><text x="90.6435%" y="639.50"></text></g><g><title>eval_to_allocation_raw (135,592 samples, 0.11%)</title><rect x="92.2923%" y="613" width="0.1136%" height="15" fill="rgb(235,28,35)"/><text x="92.5423%" y="623.50"></text></g><g><title>eval_to_allocation_raw (133,942 samples, 0.11%)</title><rect x="92.2937%" y="597" width="0.1122%" height="15" fill="rgb(210,56,17)"/><text x="92.5437%" y="607.50"></text></g><g><title>is_sized_raw (304,385 samples, 0.26%)</title><rect x="92.5478%" y="597" width="0.2551%" height="15" fill="rgb(224,130,29)"/><text x="92.7978%" y="607.50"></text></g><g><title>evaluate_obligation (288,773 samples, 0.24%)</title><rect x="92.5609%" y="581" width="0.2420%" height="15" fill="rgb(235,212,8)"/><text x="92.8109%" y="591.50"></text></g><g><title>layout_of (584,368 samples, 0.49%)</title><rect x="92.4060%" y="613" width="0.4897%" height="15" fill="rgb(223,33,50)"/><text x="92.6560%" y="623.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,604,284 samples, 1.34%)</title><rect x="92.8956%" y="613" width="1.3443%" height="15" fill="rgb(219,149,13)"/><text x="93.1456%" y="623.50"></text></g><g><title>optimized_mir (4,044,981 samples, 3.39%)</title><rect x="90.8684%" y="629" width="3.3895%" height="15" fill="rgb(250,156,29)"/><text x="91.1184%" y="639.50">opt..</text></g><g><title>generate_crate_metadata (5,467,796 samples, 4.58%)</title><rect x="89.6949%" y="645" width="4.5818%" height="15" fill="rgb(216,193,19)"/><text x="89.9449%" y="655.50">gener..</text></g><g><title>hir_lowering (2,510,986 samples, 2.10%)</title><rect x="94.2767%" y="645" width="2.1041%" height="15" fill="rgb(216,135,14)"/><text x="94.5267%" y="655.50">h..</text></g><g><title>finish_ongoing_codegen (993,330 samples, 0.83%)</title><rect x="96.3933%" y="629" width="0.8324%" height="15" fill="rgb(241,47,5)"/><text x="96.6433%" y="639.50"></text></g><g><title>link_crate (706,348 samples, 0.59%)</title><rect x="97.2256%" y="629" width="0.5919%" height="15" fill="rgb(233,42,35)"/><text x="97.4756%" y="639.50"></text></g><g><title>link_binary (681,847 samples, 0.57%)</title><rect x="97.2462%" y="613" width="0.5714%" height="15" fill="rgb(231,13,6)"/><text x="97.4962%" y="623.50"></text></g><g><title>link_rlib (441,395 samples, 0.37%)</title><rect x="97.4477%" y="597" width="0.3699%" height="15" fill="rgb(207,181,40)"/><text x="97.6977%" y="607.50"></text></g><g><title>link (1,722,688 samples, 1.44%)</title><rect x="96.3808%" y="645" width="1.4435%" height="15" fill="rgb(254,173,49)"/><text x="96.6308%" y="655.50"></text></g><g><title>parse_crate (1,198,302 samples, 1.00%)</title><rect x="97.8243%" y="645" width="1.0041%" height="15" fill="rgb(221,1,38)"/><text x="98.0743%" y="655.50"></text></g><g><title>prepare_outputs (314,283 samples, 0.26%)</title><rect x="98.8422%" y="645" width="0.2634%" height="15" fill="rgb(206,124,46)"/><text x="99.0922%" y="655.50"></text></g><g><title>self_profile_alloc_query_strings (593,496 samples, 0.50%)</title><rect x="99.1055%" y="645" width="0.4973%" height="15" fill="rgb(249,21,11)"/><text x="99.3555%" y="655.50"></text></g><g><title>setup_global_ctxt (124,611 samples, 0.10%)</title><rect x="99.6036%" y="645" width="0.1044%" height="15" fill="rgb(222,201,40)"/><text x="99.8536%" y="655.50"></text></g><g><title>all (119,338,289 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(235,61,29)"/><text x="0.2500%" y="687.50"></text></g><g><title>rustc (119,338,289 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(219,207,3)"/><text x="0.2500%" y="671.50">rustc</text></g><g><title>write_crate_metadata (348,394 samples, 0.29%)</title><rect x="99.7081%" y="645" width="0.2919%" height="15" fill="rgb(222,56,46)"/><text x="99.9581%" y="655.50"></text></g></svg></svg>