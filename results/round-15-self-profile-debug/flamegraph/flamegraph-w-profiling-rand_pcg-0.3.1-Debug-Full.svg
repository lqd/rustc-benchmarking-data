<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (25,826,142 samples, 9.43%)</title><rect x="0.2755%" y="181" width="9.4279%" height="15" fill="rgb(227,0,7)"/><text x="0.5255%" y="191.50">LLVM_passes</text></g><g><title>specialization_graph_of (479,475 samples, 0.18%)</title><rect x="13.2010%" y="53" width="0.1750%" height="15" fill="rgb(217,0,24)"/><text x="13.4510%" y="63.50"></text></g><g><title>resolve_instance (712,986 samples, 0.26%)</title><rect x="13.1349%" y="69" width="0.2603%" height="15" fill="rgb(221,193,54)"/><text x="13.3849%" y="79.50"></text></g><g><title>thir_body (570,576 samples, 0.21%)</title><rect x="13.4006%" y="69" width="0.2083%" height="15" fill="rgb(248,212,6)"/><text x="13.6506%" y="79.50"></text></g><g><title>mir_const (3,974,249 samples, 1.45%)</title><rect x="12.1609%" y="117" width="1.4508%" height="15" fill="rgb(208,68,35)"/><text x="12.4109%" y="127.50"></text></g><g><title>unsafety_check_result (3,386,662 samples, 1.24%)</title><rect x="12.3754%" y="101" width="1.2363%" height="15" fill="rgb(232,128,0)"/><text x="12.6254%" y="111.50"></text></g><g><title>mir_built (2,920,045 samples, 1.07%)</title><rect x="12.5458%" y="85" width="1.0660%" height="15" fill="rgb(207,160,47)"/><text x="12.7958%" y="95.50"></text></g><g><title>mir_promoted (4,895,921 samples, 1.79%)</title><rect x="11.9842%" y="133" width="1.7873%" height="15" fill="rgb(228,23,34)"/><text x="12.2342%" y="143.50">m..</text></g><g><title>mir_const_qualif (437,497 samples, 0.16%)</title><rect x="13.6117%" y="117" width="0.1597%" height="15" fill="rgb(218,30,26)"/><text x="13.8617%" y="127.50"></text></g><g><title>mir_const (345,446 samples, 0.13%)</title><rect x="13.6453%" y="101" width="0.1261%" height="15" fill="rgb(220,122,19)"/><text x="13.8953%" y="111.50"></text></g><g><title>type_op_prove_predicate (495,347 samples, 0.18%)</title><rect x="13.8431%" y="133" width="0.1808%" height="15" fill="rgb(250,228,42)"/><text x="14.0931%" y="143.50"></text></g><g><title>MIR_borrow_checking (11,430,466 samples, 4.17%)</title><rect x="9.8538%" y="165" width="4.1727%" height="15" fill="rgb(240,193,28)"/><text x="10.1038%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (11,338,795 samples, 4.14%)</title><rect x="9.8872%" y="149" width="4.1393%" height="15" fill="rgb(216,20,37)"/><text x="10.1372%" y="159.50">mir_b..</text></g><g><title>hir_module_items (278,573 samples, 0.10%)</title><rect x="14.1158%" y="165" width="0.1017%" height="15" fill="rgb(206,188,39)"/><text x="14.3658%" y="175.50"></text></g><g><title>should_inherit_track_caller (355,456 samples, 0.13%)</title><rect x="14.4386%" y="117" width="0.1298%" height="15" fill="rgb(217,207,13)"/><text x="14.6886%" y="127.50"></text></g><g><title>codegen_fn_attrs (615,439 samples, 0.22%)</title><rect x="14.3573%" y="133" width="0.2247%" height="15" fill="rgb(231,73,38)"/><text x="14.6073%" y="143.50"></text></g><g><title>check_mod_attrs (958,421 samples, 0.35%)</title><rect x="14.2322%" y="149" width="0.3499%" height="15" fill="rgb(225,20,46)"/><text x="14.4822%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (445,164 samples, 0.16%)</title><rect x="14.6934%" y="149" width="0.1625%" height="15" fill="rgb(210,31,41)"/><text x="14.9434%" y="159.50"></text></g><g><title>misc_checking_1 (1,833,929 samples, 0.67%)</title><rect x="14.2176%" y="165" width="0.6695%" height="15" fill="rgb(221,200,47)"/><text x="14.4676%" y="175.50"></text></g><g><title>misc_checking_2 (529,215 samples, 0.19%)</title><rect x="14.8871%" y="165" width="0.1932%" height="15" fill="rgb(226,26,5)"/><text x="15.1371%" y="175.50"></text></g><g><title>match_checking (290,643 samples, 0.11%)</title><rect x="14.9742%" y="149" width="0.1061%" height="15" fill="rgb(249,33,26)"/><text x="15.2242%" y="159.50"></text></g><g><title>death_checking (292,023 samples, 0.11%)</title><rect x="15.1295%" y="149" width="0.1066%" height="15" fill="rgb(235,183,28)"/><text x="15.3795%" y="159.50"></text></g><g><title>crate_lints (1,045,271 samples, 0.38%)</title><rect x="15.2367%" y="133" width="0.3816%" height="15" fill="rgb(221,5,38)"/><text x="15.4867%" y="143.50"></text></g><g><title>type_of (322,813 samples, 0.12%)</title><rect x="15.5004%" y="117" width="0.1178%" height="15" fill="rgb(247,18,42)"/><text x="15.7504%" y="127.50"></text></g><g><title>lint_checking (1,275,903 samples, 0.47%)</title><rect x="15.2362%" y="149" width="0.4658%" height="15" fill="rgb(241,131,45)"/><text x="15.4862%" y="159.50"></text></g><g><title>privacy_checking_modules (362,044 samples, 0.13%)</title><rect x="15.7532%" y="149" width="0.1322%" height="15" fill="rgb(249,31,29)"/><text x="16.0032%" y="159.50"></text></g><g><title>check_mod_privacy (359,624 samples, 0.13%)</title><rect x="15.7541%" y="133" width="0.1313%" height="15" fill="rgb(225,111,53)"/><text x="16.0041%" y="143.50"></text></g><g><title>misc_checking_3 (2,216,793 samples, 0.81%)</title><rect x="15.0803%" y="165" width="0.8092%" height="15" fill="rgb(238,160,17)"/><text x="15.3303%" y="175.50"></text></g><g><title>impl_parent (1,086,218 samples, 0.40%)</title><rect x="16.6280%" y="101" width="0.3965%" height="15" fill="rgb(214,148,48)"/><text x="16.8780%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (597,103 samples, 0.22%)</title><rect x="16.8065%" y="85" width="0.2180%" height="15" fill="rgb(232,36,49)"/><text x="17.0565%" y="95.50"></text></g><g><title>impl_trait_ref (2,376,103 samples, 0.87%)</title><rect x="17.0245%" y="101" width="0.8674%" height="15" fill="rgb(209,103,24)"/><text x="17.2745%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,872,167 samples, 0.68%)</title><rect x="17.2085%" y="85" width="0.6834%" height="15" fill="rgb(229,88,8)"/><text x="17.4585%" y="95.50"></text></g><g><title>coherent_trait (5,849,949 samples, 2.14%)</title><rect x="15.9144%" y="133" width="2.1355%" height="15" fill="rgb(213,181,19)"/><text x="16.1644%" y="143.50">c..</text></g><g><title>specialization_graph_of (5,824,289 samples, 2.13%)</title><rect x="15.9238%" y="117" width="2.1262%" height="15" fill="rgb(254,191,54)"/><text x="16.1738%" y="127.50">s..</text></g><g><title>trait_impls_of (430,656 samples, 0.16%)</title><rect x="17.8927%" y="101" width="0.1572%" height="15" fill="rgb(241,83,37)"/><text x="18.1427%" y="111.50"></text></g><g><title>coherence_checking (5,944,800 samples, 2.17%)</title><rect x="15.9067%" y="149" width="2.1702%" height="15" fill="rgb(233,36,39)"/><text x="16.1567%" y="159.50">c..</text></g><g><title>associated_item (425,004 samples, 0.16%)</title><rect x="21.5114%" y="85" width="0.1551%" height="15" fill="rgb(226,3,54)"/><text x="21.7614%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (340,674 samples, 0.12%)</title><rect x="21.5422%" y="69" width="0.1244%" height="15" fill="rgb(245,192,40)"/><text x="21.7922%" y="79.50"></text></g><g><title>associated_items (583,445 samples, 0.21%)</title><rect x="21.4586%" y="101" width="0.2130%" height="15" fill="rgb(238,167,29)"/><text x="21.7086%" y="111.50"></text></g><g><title>predicates_of (590,557 samples, 0.22%)</title><rect x="22.4094%" y="85" width="0.2156%" height="15" fill="rgb(232,182,51)"/><text x="22.6594%" y="95.50"></text></g><g><title>specializes (922,642 samples, 0.34%)</title><rect x="22.6250%" y="85" width="0.3368%" height="15" fill="rgb(231,60,39)"/><text x="22.8750%" y="95.50"></text></g><g><title>param_env (570,888 samples, 0.21%)</title><rect x="22.7534%" y="69" width="0.2084%" height="15" fill="rgb(208,69,12)"/><text x="23.0034%" y="79.50"></text></g><g><title>trait_impls_of (330,204 samples, 0.12%)</title><rect x="22.9656%" y="85" width="0.1205%" height="15" fill="rgb(235,93,37)"/><text x="23.2156%" y="95.50"></text></g><g><title>evaluate_obligation (3,566,918 samples, 1.30%)</title><rect x="21.7857%" y="101" width="1.3021%" height="15" fill="rgb(213,116,39)"/><text x="22.0357%" y="111.50"></text></g><g><title>item_bodies_checking (14,563,848 samples, 5.32%)</title><rect x="18.0989%" y="149" width="5.3166%" height="15" fill="rgb(222,207,29)"/><text x="18.3489%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (14,560,708 samples, 5.32%)</title><rect x="18.1001%" y="133" width="5.3154%" height="15" fill="rgb(206,96,30)"/><text x="18.3501%" y="143.50">typeck_..</text></g><g><title>typeck (14,499,838 samples, 5.29%)</title><rect x="18.1223%" y="117" width="5.2932%" height="15" fill="rgb(218,138,4)"/><text x="18.3723%" y="127.50">typeck</text></g><g><title>mir_for_ctfe (873,612 samples, 0.32%)</title><rect x="24.1827%" y="53" width="0.3189%" height="15" fill="rgb(250,191,14)"/><text x="24.4327%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (865,412 samples, 0.32%)</title><rect x="24.1857%" y="37" width="0.3159%" height="15" fill="rgb(239,60,40)"/><text x="24.4357%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,892,417 samples, 0.69%)</title><rect x="23.8216%" y="101" width="0.6908%" height="15" fill="rgb(206,27,48)"/><text x="24.0716%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,844,327 samples, 0.67%)</title><rect x="23.8391%" y="85" width="0.6733%" height="15" fill="rgb(225,35,8)"/><text x="24.0891%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,803,347 samples, 0.66%)</title><rect x="23.8541%" y="69" width="0.6583%" height="15" fill="rgb(250,213,24)"/><text x="24.1041%" y="79.50"></text></g><g><title>evaluate_obligation (2,554,456 samples, 0.93%)</title><rect x="23.6675%" y="117" width="0.9325%" height="15" fill="rgb(247,123,22)"/><text x="23.9175%" y="127.50"></text></g><g><title>item_types_checking (3,499,676 samples, 1.28%)</title><rect x="23.4155%" y="149" width="1.2776%" height="15" fill="rgb(231,138,38)"/><text x="23.6655%" y="159.50"></text></g><g><title>check_mod_item_types (3,496,606 samples, 1.28%)</title><rect x="23.4167%" y="133" width="1.2764%" height="15" fill="rgb(231,145,46)"/><text x="23.6667%" y="143.50"></text></g><g><title>fn_sig (634,365 samples, 0.23%)</title><rect x="24.8415%" y="117" width="0.2316%" height="15" fill="rgb(251,118,11)"/><text x="25.0915%" y="127.50"></text></g><g><title>named_region_map (660,547 samples, 0.24%)</title><rect x="25.1354%" y="101" width="0.2411%" height="15" fill="rgb(217,147,25)"/><text x="25.3854%" y="111.50"></text></g><g><title>resolve_lifetimes (627,356 samples, 0.23%)</title><rect x="25.1475%" y="85" width="0.2290%" height="15" fill="rgb(247,81,37)"/><text x="25.3975%" y="95.50"></text></g><g><title>generics_of (859,050 samples, 0.31%)</title><rect x="25.0731%" y="117" width="0.3136%" height="15" fill="rgb(209,12,38)"/><text x="25.3231%" y="127.50"></text></g><g><title>predicates_of (484,673 samples, 0.18%)</title><rect x="25.4262%" y="117" width="0.1769%" height="15" fill="rgb(227,1,9)"/><text x="25.6762%" y="127.50"></text></g><g><title>predicates_defined_on (407,262 samples, 0.15%)</title><rect x="25.4544%" y="101" width="0.1487%" height="15" fill="rgb(248,47,43)"/><text x="25.7044%" y="111.50"></text></g><g><title>type_collecting (2,750,468 samples, 1.00%)</title><rect x="24.6937%" y="149" width="1.0041%" height="15" fill="rgb(221,10,30)"/><text x="24.9437%" y="159.50"></text></g><g><title>collect_mod_item_types (2,727,908 samples, 1.00%)</title><rect x="24.7019%" y="133" width="0.9958%" height="15" fill="rgb(210,229,1)"/><text x="24.9519%" y="143.50"></text></g><g><title>evaluate_obligation (315,703 samples, 0.12%)</title><rect x="26.1149%" y="117" width="0.1152%" height="15" fill="rgb(222,148,37)"/><text x="26.3649%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,812,208 samples, 0.66%)</title><rect x="25.7411%" y="133" width="0.6616%" height="15" fill="rgb(234,67,33)"/><text x="25.9911%" y="143.50"></text></g><g><title>analysis (46,976,328 samples, 17.15%)</title><rect x="9.7034%" y="181" width="17.1489%" height="15" fill="rgb(247,98,35)"/><text x="9.9534%" y="191.50">analysis</text></g><g><title>type_check_crate (30,030,476 samples, 10.96%)</title><rect x="15.8896%" y="165" width="10.9627%" height="15" fill="rgb(247,138,52)"/><text x="16.1396%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,158,072 samples, 1.15%)</title><rect x="25.6994%" y="149" width="1.1529%" height="15" fill="rgb(213,79,30)"/><text x="25.9494%" y="159.50"></text></g><g><title>check_item_well_formed (1,231,590 samples, 0.45%)</title><rect x="26.4027%" y="133" width="0.4496%" height="15" fill="rgb(246,177,23)"/><text x="26.6527%" y="143.50"></text></g><g><title>const_caller_location (314,003 samples, 0.11%)</title><rect x="33.3385%" y="149" width="0.1146%" height="15" fill="rgb(230,62,27)"/><text x="33.5885%" y="159.50"></text></g><g><title>codegen_fn_attrs (338,683 samples, 0.12%)</title><rect x="33.8052%" y="133" width="0.1236%" height="15" fill="rgb(216,154,8)"/><text x="34.0552%" y="143.50"></text></g><g><title>layout_of (401,186 samples, 0.15%)</title><rect x="33.9408%" y="133" width="0.1465%" height="15" fill="rgb(244,35,45)"/><text x="34.1908%" y="143.50"></text></g><g><title>predicates_of (471,373 samples, 0.17%)</title><rect x="34.3884%" y="117" width="0.1721%" height="15" fill="rgb(251,115,12)"/><text x="34.6384%" y="127.50"></text></g><g><title>predicates_defined_on (340,352 samples, 0.12%)</title><rect x="34.4363%" y="101" width="0.1242%" height="15" fill="rgb(240,54,50)"/><text x="34.6863%" y="111.50"></text></g><g><title>param_env (1,305,991 samples, 0.48%)</title><rect x="34.0872%" y="133" width="0.4768%" height="15" fill="rgb(233,84,52)"/><text x="34.3372%" y="143.50"></text></g><g><title>normalize_projection_ty (510,086 samples, 0.19%)</title><rect x="34.6442%" y="117" width="0.1862%" height="15" fill="rgb(207,117,47)"/><text x="34.8942%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (738,607 samples, 0.27%)</title><rect x="34.5640%" y="133" width="0.2696%" height="15" fill="rgb(249,43,39)"/><text x="34.8140%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,787,069 samples, 1.38%)</title><rect x="33.4537%" y="149" width="1.3825%" height="15" fill="rgb(209,38,44)"/><text x="33.7037%" y="159.50"></text></g><g><title>layout_of (525,664 samples, 0.19%)</title><rect x="34.9097%" y="149" width="0.1919%" height="15" fill="rgb(236,212,23)"/><text x="35.1597%" y="159.50"></text></g><g><title>codegen_module (21,194,785 samples, 7.74%)</title><rect x="27.4450%" y="165" width="7.7372%" height="15" fill="rgb(242,79,21)"/><text x="27.6950%" y="175.50">codegen_mod..</text></g><g><title>codegen_crate (22,833,182 samples, 8.34%)</title><rect x="26.8560%" y="181" width="8.3353%" height="15" fill="rgb(211,96,35)"/><text x="27.1060%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (125,369,836 samples, 45.77%)</title><rect x="35.2743%" y="165" width="45.7667%" height="15" fill="rgb(253,215,40)"/><text x="35.5243%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (118,351,884 samples, 43.20%)</title><rect x="37.8363%" y="149" width="43.2048%" height="15" fill="rgb(211,81,21)"/><text x="38.0863%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (133,449,545 samples, 48.72%)</title><rect x="35.1914%" y="181" width="48.7162%" height="15" fill="rgb(208,190,38)"/><text x="35.4414%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,852,459 samples, 2.87%)</title><rect x="81.0410%" y="165" width="2.8666%" height="15" fill="rgb(235,213,38)"/><text x="81.2910%" y="175.50">LL..</text></g><g><title>metadata_load_macro (381,283 samples, 0.14%)</title><rect x="88.9135%" y="133" width="0.1392%" height="15" fill="rgb(237,122,38)"/><text x="89.1635%" y="143.50"></text></g><g><title>macro_expand_crate (13,884,701 samples, 5.07%)</title><rect x="84.1366%" y="165" width="5.0687%" height="15" fill="rgb(244,218,35)"/><text x="84.3866%" y="175.50">macro_..</text></g><g><title>expand_crate (13,857,890 samples, 5.06%)</title><rect x="84.1464%" y="149" width="5.0589%" height="15" fill="rgb(240,68,47)"/><text x="84.3964%" y="159.50">expand..</text></g><g><title>finalize_macro_resolutions (277,483 samples, 0.10%)</title><rect x="89.2768%" y="149" width="0.1013%" height="15" fill="rgb(210,16,53)"/><text x="89.5268%" y="159.50"></text></g><g><title>late_resolve_crate (2,081,871 samples, 0.76%)</title><rect x="89.3781%" y="149" width="0.7600%" height="15" fill="rgb(235,124,12)"/><text x="89.6281%" y="159.50"></text></g><g><title>configure_and_expand (17,226,954 samples, 6.29%)</title><rect x="83.9076%" y="181" width="6.2888%" height="15" fill="rgb(224,169,11)"/><text x="84.1576%" y="191.50">configur..</text></g><g><title>resolve_crate (2,610,116 samples, 0.95%)</title><rect x="89.2435%" y="165" width="0.9528%" height="15" fill="rgb(250,166,2)"/><text x="89.4935%" y="175.50"></text></g><g><title>early_lint_checks (485,635 samples, 0.18%)</title><rect x="90.2872%" y="181" width="0.1773%" height="15" fill="rgb(242,216,29)"/><text x="90.5372%" y="191.50"></text></g><g><title>free_global_ctxt (2,974,580 samples, 1.09%)</title><rect x="90.4645%" y="181" width="1.0859%" height="15" fill="rgb(230,116,27)"/><text x="90.7145%" y="191.50"></text></g><g><title>item_attrs (412,024 samples, 0.15%)</title><rect x="92.2403%" y="85" width="0.1504%" height="15" fill="rgb(228,99,48)"/><text x="92.4903%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (397,574 samples, 0.15%)</title><rect x="92.2456%" y="69" width="0.1451%" height="15" fill="rgb(253,11,6)"/><text x="92.4956%" y="79.50"></text></g><g><title>codegen_fn_attrs (900,899 samples, 0.33%)</title><rect x="92.1186%" y="101" width="0.3289%" height="15" fill="rgb(247,143,39)"/><text x="92.3686%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (620,627 samples, 0.23%)</title><rect x="92.7824%" y="85" width="0.2266%" height="15" fill="rgb(236,97,10)"/><text x="93.0324%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (395,993 samples, 0.14%)</title><rect x="93.0090%" y="85" width="0.1446%" height="15" fill="rgb(233,208,19)"/><text x="93.2590%" y="95.50"></text></g><g><title>optimized_mir (1,974,071 samples, 0.72%)</title><rect x="92.5177%" y="101" width="0.7206%" height="15" fill="rgb(216,164,2)"/><text x="92.7677%" y="111.50"></text></g><g><title>evaluate_obligation (287,003 samples, 0.10%)</title><rect x="93.5421%" y="69" width="0.1048%" height="15" fill="rgb(220,129,5)"/><text x="93.7921%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,173,871 samples, 0.43%)</title><rect x="93.3434%" y="85" width="0.4285%" height="15" fill="rgb(242,17,10)"/><text x="93.5934%" y="95.50"></text></g><g><title>specialization_graph_of (1,046,281 samples, 0.38%)</title><rect x="93.9031%" y="85" width="0.3819%" height="15" fill="rgb(242,107,0)"/><text x="94.1531%" y="95.50"></text></g><g><title>impl_trait_ref (384,583 samples, 0.14%)</title><rect x="94.1446%" y="69" width="0.1404%" height="15" fill="rgb(251,28,31)"/><text x="94.3946%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (291,822 samples, 0.11%)</title><rect x="94.1785%" y="53" width="0.1065%" height="15" fill="rgb(233,223,10)"/><text x="94.4285%" y="63.50"></text></g><g><title>resolve_instance (3,008,491 samples, 1.10%)</title><rect x="93.2384%" y="101" width="1.0983%" height="15" fill="rgb(215,21,27)"/><text x="93.4884%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (7,342,475 samples, 2.68%)</title><rect x="91.9157%" y="117" width="2.6804%" height="15" fill="rgb(232,23,21)"/><text x="92.1657%" y="127.50">mo..</text></g><g><title>vtable_entries (448,574 samples, 0.16%)</title><rect x="94.4323%" y="101" width="0.1638%" height="15" fill="rgb(244,5,23)"/><text x="94.6823%" y="111.50"></text></g><g><title>monomorphization_collector (7,383,945 samples, 2.70%)</title><rect x="91.9147%" y="133" width="2.6955%" height="15" fill="rgb(226,81,46)"/><text x="92.1647%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (584,046 samples, 0.21%)</title><rect x="94.6118%" y="117" width="0.2132%" height="15" fill="rgb(247,70,30)"/><text x="94.8618%" y="127.50"></text></g><g><title>symbol_name (543,556 samples, 0.20%)</title><rect x="94.6265%" y="101" width="0.1984%" height="15" fill="rgb(212,68,19)"/><text x="94.8765%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (8,312,694 samples, 3.03%)</title><rect x="91.9018%" y="149" width="3.0346%" height="15" fill="rgb(240,187,13)"/><text x="92.1518%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (893,469 samples, 0.33%)</title><rect x="94.6102%" y="133" width="0.3262%" height="15" fill="rgb(223,113,26)"/><text x="94.8602%" y="143.50"></text></g><g><title>cgu_partitioning (305,093 samples, 0.11%)</title><rect x="94.8250%" y="117" width="0.1114%" height="15" fill="rgb(206,192,2)"/><text x="95.0750%" y="127.50"></text></g><g><title>exported_symbols (8,434,835 samples, 3.08%)</title><rect x="91.8882%" y="165" width="3.0792%" height="15" fill="rgb(241,108,4)"/><text x="92.1382%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,187,633 samples, 0.43%)</title><rect x="95.5336%" y="149" width="0.4335%" height="15" fill="rgb(247,173,49)"/><text x="95.7836%" y="159.50"></text></g><g><title>optimized_mir (2,712,132 samples, 0.99%)</title><rect x="94.9873%" y="165" width="0.9901%" height="15" fill="rgb(224,114,35)"/><text x="95.2373%" y="175.50"></text></g><g><title>generate_crate_metadata (12,165,294 samples, 4.44%)</title><rect x="91.5503%" y="181" width="4.4410%" height="15" fill="rgb(245,159,27)"/><text x="91.8003%" y="191.50">gener..</text></g><g><title>hir_lowering (3,530,256 samples, 1.29%)</title><rect x="95.9913%" y="181" width="1.2887%" height="15" fill="rgb(245,172,44)"/><text x="96.2413%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,102,481 samples, 1.13%)</title><rect x="97.2875%" y="165" width="1.1326%" height="15" fill="rgb(236,23,11)"/><text x="97.5375%" y="175.50"></text></g><g><title>link_binary_remove_temps (296,483 samples, 0.11%)</title><rect x="98.5372%" y="133" width="0.1082%" height="15" fill="rgb(205,117,38)"/><text x="98.7872%" y="143.50"></text></g><g><title>link_crate (1,726,137 samples, 0.63%)</title><rect x="98.4201%" y="165" width="0.6301%" height="15" fill="rgb(237,72,25)"/><text x="98.6701%" y="175.50"></text></g><g><title>link_binary (1,708,817 samples, 0.62%)</title><rect x="98.4264%" y="149" width="0.6238%" height="15" fill="rgb(244,70,9)"/><text x="98.6764%" y="159.50"></text></g><g><title>link_rlib (1,108,752 samples, 0.40%)</title><rect x="98.6455%" y="133" width="0.4048%" height="15" fill="rgb(217,125,39)"/><text x="98.8955%" y="143.50"></text></g><g><title>link (4,859,219 samples, 1.77%)</title><rect x="97.2801%" y="181" width="1.7739%" height="15" fill="rgb(235,36,10)"/><text x="97.5301%" y="191.50">l..</text></g><g><title>parse_crate (448,264 samples, 0.16%)</title><rect x="99.0539%" y="181" width="0.1636%" height="15" fill="rgb(251,123,47)"/><text x="99.3039%" y="191.50"></text></g><g><title>prepare_outputs (343,074 samples, 0.13%)</title><rect x="99.2212%" y="181" width="0.1252%" height="15" fill="rgb(221,13,13)"/><text x="99.4712%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,303,414 samples, 0.48%)</title><rect x="99.3464%" y="181" width="0.4758%" height="15" fill="rgb(238,131,9)"/><text x="99.5964%" y="191.50"></text></g><g><title>all (273,932,492 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (273,932,492 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (333,263 samples, 0.12%)</title><rect x="99.8783%" y="181" width="0.1217%" height="15" fill="rgb(242,14,37)"/><text x="100.1283%" y="191.50"></text></g></svg></svg>