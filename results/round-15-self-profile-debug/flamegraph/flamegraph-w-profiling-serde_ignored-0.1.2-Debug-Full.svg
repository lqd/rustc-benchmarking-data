<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,789,865 samples, 5.01%)</title><rect x="0.2059%" y="197" width="5.0090%" height="15" fill="rgb(227,0,7)"/><text x="0.4559%" y="207.50">LLVM_p..</text></g><g><title>implied_outlives_bounds (594,204 samples, 0.23%)</title><rect x="14.9128%" y="149" width="0.2327%" height="15" fill="rgb(217,0,24)"/><text x="15.1628%" y="159.50"></text></g><g><title>is_sized_raw (399,473 samples, 0.16%)</title><rect x="15.1930%" y="149" width="0.1565%" height="15" fill="rgb(221,193,54)"/><text x="15.4430%" y="159.50"></text></g><g><title>evaluate_obligation (258,163 samples, 0.10%)</title><rect x="15.2484%" y="133" width="0.1011%" height="15" fill="rgb(248,212,6)"/><text x="15.4984%" y="143.50"></text></g><g><title>param_env (907,759 samples, 0.36%)</title><rect x="16.4412%" y="117" width="0.3555%" height="15" fill="rgb(208,68,35)"/><text x="16.6912%" y="127.50"></text></g><g><title>is_copy_raw (909,465 samples, 0.36%)</title><rect x="18.9873%" y="85" width="0.3562%" height="15" fill="rgb(232,128,0)"/><text x="19.2373%" y="95.50"></text></g><g><title>evaluate_obligation (708,764 samples, 0.28%)</title><rect x="19.0659%" y="69" width="0.2776%" height="15" fill="rgb(207,160,47)"/><text x="19.3159%" y="79.50"></text></g><g><title>is_copy_raw (1,151,793 samples, 0.45%)</title><rect x="19.4614%" y="69" width="0.4511%" height="15" fill="rgb(228,23,34)"/><text x="19.7114%" y="79.50"></text></g><g><title>evaluate_obligation (815,340 samples, 0.32%)</title><rect x="19.5931%" y="53" width="0.3193%" height="15" fill="rgb(218,30,26)"/><text x="19.8431%" y="63.50"></text></g><g><title>needs_drop_raw (1,463,385 samples, 0.57%)</title><rect x="19.3435%" y="85" width="0.5731%" height="15" fill="rgb(220,122,19)"/><text x="19.5935%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (554,574 samples, 0.22%)</title><rect x="20.0498%" y="69" width="0.2172%" height="15" fill="rgb(250,228,42)"/><text x="20.2998%" y="79.50"></text></g><g><title>impl_parent (691,241 samples, 0.27%)</title><rect x="20.7233%" y="53" width="0.2707%" height="15" fill="rgb(240,193,28)"/><text x="20.9733%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (468,194 samples, 0.18%)</title><rect x="20.8106%" y="37" width="0.1834%" height="15" fill="rgb(216,20,37)"/><text x="21.0606%" y="47.50"></text></g><g><title>specialization_graph_of (3,905,561 samples, 1.53%)</title><rect x="20.2852%" y="69" width="1.5296%" height="15" fill="rgb(206,188,39)"/><text x="20.5352%" y="79.50"></text></g><g><title>impl_trait_ref (2,095,747 samples, 0.82%)</title><rect x="20.9940%" y="53" width="0.8208%" height="15" fill="rgb(217,207,13)"/><text x="21.2440%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,873,095 samples, 0.73%)</title><rect x="21.0812%" y="37" width="0.7336%" height="15" fill="rgb(231,73,38)"/><text x="21.3312%" y="47.50"></text></g><g><title>resolve_instance (4,988,951 samples, 1.95%)</title><rect x="19.9167%" y="85" width="1.9539%" height="15" fill="rgb(225,20,46)"/><text x="20.1667%" y="95.50">r..</text></g><g><title>thir_body (1,378,491 samples, 0.54%)</title><rect x="21.8934%" y="85" width="0.5399%" height="15" fill="rgb(210,31,41)"/><text x="22.1434%" y="95.50"></text></g><g><title>mir_const (16,849,824 samples, 6.60%)</title><rect x="15.8848%" y="133" width="6.5991%" height="15" fill="rgb(221,200,47)"/><text x="16.1348%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (14,521,415 samples, 5.69%)</title><rect x="16.7967%" y="117" width="5.6872%" height="15" fill="rgb(226,26,5)"/><text x="17.0467%" y="127.50">unsafet..</text></g><g><title>mir_built (13,537,412 samples, 5.30%)</title><rect x="17.1821%" y="101" width="5.3018%" height="15" fill="rgb(249,33,26)"/><text x="17.4321%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (18,297,628 samples, 7.17%)</title><rect x="15.3495%" y="149" width="7.1661%" height="15" fill="rgb(235,183,28)"/><text x="15.5995%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (1,009,632 samples, 0.40%)</title><rect x="22.5156%" y="149" width="0.3954%" height="15" fill="rgb(221,5,38)"/><text x="22.7656%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,496,799 samples, 0.98%)</title><rect x="22.9110%" y="149" width="0.9778%" height="15" fill="rgb(247,18,42)"/><text x="23.1610%" y="159.50"></text></g><g><title>normalize_projection_ty (1,175,801 samples, 0.46%)</title><rect x="23.4283%" y="133" width="0.4605%" height="15" fill="rgb(241,131,45)"/><text x="23.6783%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,760,875 samples, 0.69%)</title><rect x="23.9774%" y="149" width="0.6896%" height="15" fill="rgb(249,31,29)"/><text x="24.2274%" y="159.50"></text></g><g><title>normalize_projection_ty (950,920 samples, 0.37%)</title><rect x="24.2946%" y="133" width="0.3724%" height="15" fill="rgb(225,111,53)"/><text x="24.5446%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,652,462 samples, 2.21%)</title><rect x="24.6670%" y="149" width="2.2137%" height="15" fill="rgb(238,160,17)"/><text x="24.9170%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (54,952,711 samples, 21.52%)</title><rect x="5.3656%" y="181" width="21.5218%" height="15" fill="rgb(214,148,48)"/><text x="5.6156%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,705,051 samples, 21.42%)</title><rect x="5.4626%" y="165" width="21.4248%" height="15" fill="rgb(232,36,49)"/><text x="5.7126%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (288,342 samples, 0.11%)</title><rect x="27.2579%" y="117" width="0.1129%" height="15" fill="rgb(209,103,24)"/><text x="27.5079%" y="127.50"></text></g><g><title>should_inherit_track_caller (473,724 samples, 0.19%)</title><rect x="27.1905%" y="133" width="0.1855%" height="15" fill="rgb(229,88,8)"/><text x="27.4405%" y="143.50"></text></g><g><title>codegen_fn_attrs (717,157 samples, 0.28%)</title><rect x="27.1025%" y="149" width="0.2809%" height="15" fill="rgb(213,181,19)"/><text x="27.3525%" y="159.50"></text></g><g><title>check_mod_attrs (974,690 samples, 0.38%)</title><rect x="27.0017%" y="165" width="0.3817%" height="15" fill="rgb(254,191,54)"/><text x="27.2517%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (378,274 samples, 0.15%)</title><rect x="27.4879%" y="165" width="0.1481%" height="15" fill="rgb(241,83,37)"/><text x="27.7379%" y="175.50"></text></g><g><title>misc_checking_1 (1,672,018 samples, 0.65%)</title><rect x="26.9936%" y="181" width="0.6548%" height="15" fill="rgb(233,36,39)"/><text x="27.2436%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (580,246 samples, 0.23%)</title><rect x="27.6490%" y="165" width="0.2272%" height="15" fill="rgb(226,3,54)"/><text x="27.8990%" y="175.50"></text></g><g><title>check_mod_liveness (484,645 samples, 0.19%)</title><rect x="27.6865%" y="149" width="0.1898%" height="15" fill="rgb(245,192,40)"/><text x="27.9365%" y="159.50"></text></g><g><title>misc_checking_2 (1,245,023 samples, 0.49%)</title><rect x="27.6484%" y="181" width="0.4876%" height="15" fill="rgb(238,167,29)"/><text x="27.8984%" y="191.50"></text></g><g><title>match_checking (663,317 samples, 0.26%)</title><rect x="27.8763%" y="165" width="0.2598%" height="15" fill="rgb(232,182,51)"/><text x="28.1263%" y="175.50"></text></g><g><title>check_match (613,086 samples, 0.24%)</title><rect x="27.8959%" y="149" width="0.2401%" height="15" fill="rgb(231,60,39)"/><text x="28.1459%" y="159.50"></text></g><g><title>check_private_in_public (285,643 samples, 0.11%)</title><rect x="28.1400%" y="165" width="0.1119%" height="15" fill="rgb(208,69,12)"/><text x="28.3900%" y="175.50"></text></g><g><title>death_checking (335,194 samples, 0.13%)</title><rect x="28.2519%" y="165" width="0.1313%" height="15" fill="rgb(235,93,37)"/><text x="28.5019%" y="175.50"></text></g><g><title>crate_lints (2,593,687 samples, 1.02%)</title><rect x="28.3840%" y="149" width="1.0158%" height="15" fill="rgb(213,116,39)"/><text x="28.6340%" y="159.50"></text></g><g><title>type_of (1,800,148 samples, 0.71%)</title><rect x="28.6948%" y="133" width="0.7050%" height="15" fill="rgb(222,207,29)"/><text x="28.9448%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,554,445 samples, 0.61%)</title><rect x="28.7910%" y="117" width="0.6088%" height="15" fill="rgb(206,96,30)"/><text x="29.0410%" y="127.50"></text></g><g><title>lint_checking (3,136,233 samples, 1.23%)</title><rect x="28.3832%" y="165" width="1.2283%" height="15" fill="rgb(218,138,4)"/><text x="28.6332%" y="175.50"></text></g><g><title>module_lints (540,446 samples, 0.21%)</title><rect x="29.3998%" y="149" width="0.2117%" height="15" fill="rgb(250,191,14)"/><text x="29.6498%" y="159.50"></text></g><g><title>lint_mod (536,776 samples, 0.21%)</title><rect x="29.4012%" y="133" width="0.2102%" height="15" fill="rgb(239,60,40)"/><text x="29.6512%" y="143.50"></text></g><g><title>privacy_access_levels (284,673 samples, 0.11%)</title><rect x="29.6115%" y="165" width="0.1115%" height="15" fill="rgb(206,27,48)"/><text x="29.8615%" y="175.50"></text></g><g><title>privacy_checking_modules (1,932,480 samples, 0.76%)</title><rect x="29.7229%" y="165" width="0.7568%" height="15" fill="rgb(225,35,8)"/><text x="29.9729%" y="175.50"></text></g><g><title>check_mod_privacy (1,930,310 samples, 0.76%)</title><rect x="29.7238%" y="149" width="0.7560%" height="15" fill="rgb(250,213,24)"/><text x="29.9738%" y="159.50"></text></g><g><title>misc_checking_3 (5,997,343 samples, 2.35%)</title><rect x="28.1360%" y="181" width="2.3488%" height="15" fill="rgb(247,123,22)"/><text x="28.3860%" y="191.50">m..</text></g><g><title>impl_parent (273,974 samples, 0.11%)</title><rect x="30.6716%" y="117" width="0.1073%" height="15" fill="rgb(231,138,38)"/><text x="30.9216%" y="127.50"></text></g><g><title>impl_trait_ref (947,720 samples, 0.37%)</title><rect x="30.7789%" y="117" width="0.3712%" height="15" fill="rgb(231,145,46)"/><text x="31.0289%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (858,199 samples, 0.34%)</title><rect x="30.8140%" y="101" width="0.3361%" height="15" fill="rgb(251,118,11)"/><text x="31.0640%" y="111.50"></text></g><g><title>coherent_trait (1,766,959 samples, 0.69%)</title><rect x="30.5211%" y="149" width="0.6920%" height="15" fill="rgb(217,147,25)"/><text x="30.7711%" y="159.50"></text></g><g><title>specialization_graph_of (1,756,089 samples, 0.69%)</title><rect x="30.5254%" y="133" width="0.6878%" height="15" fill="rgb(247,81,37)"/><text x="30.7754%" y="143.50"></text></g><g><title>coherence_checking (1,830,569 samples, 0.72%)</title><rect x="30.5154%" y="165" width="0.7169%" height="15" fill="rgb(209,12,38)"/><text x="30.7654%" y="175.50"></text></g><g><title>associated_item (850,589 samples, 0.33%)</title><rect x="47.7457%" y="101" width="0.3331%" height="15" fill="rgb(227,1,9)"/><text x="47.9957%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (670,528 samples, 0.26%)</title><rect x="47.8162%" y="85" width="0.2626%" height="15" fill="rgb(248,47,43)"/><text x="48.0662%" y="95.50"></text></g><g><title>associated_items (1,166,650 samples, 0.46%)</title><rect x="47.6347%" y="117" width="0.4569%" height="15" fill="rgb(221,10,30)"/><text x="47.8847%" y="127.50"></text></g><g><title>dropck_outlives (1,479,655 samples, 0.58%)</title><rect x="48.1426%" y="117" width="0.5795%" height="15" fill="rgb(210,229,1)"/><text x="48.3926%" y="127.50"></text></g><g><title>normalize_projection_ty (547,668 samples, 0.21%)</title><rect x="48.5076%" y="101" width="0.2145%" height="15" fill="rgb(222,148,37)"/><text x="48.7576%" y="111.50"></text></g><g><title>evaluate_obligation (1,576,829 samples, 0.62%)</title><rect x="48.7221%" y="117" width="0.6176%" height="15" fill="rgb(234,67,33)"/><text x="48.9721%" y="127.50"></text></g><g><title>trait_impls_of (303,333 samples, 0.12%)</title><rect x="49.2208%" y="101" width="0.1188%" height="15" fill="rgb(247,98,35)"/><text x="49.4708%" y="111.50"></text></g><g><title>evaluate_obligation (306,425 samples, 0.12%)</title><rect x="49.5888%" y="101" width="0.1200%" height="15" fill="rgb(247,138,52)"/><text x="49.8388%" y="111.50"></text></g><g><title>method_autoderef_steps (644,510 samples, 0.25%)</title><rect x="49.4653%" y="117" width="0.2524%" height="15" fill="rgb(213,79,30)"/><text x="49.7153%" y="127.50"></text></g><g><title>associated_item (308,693 samples, 0.12%)</title><rect x="50.3807%" y="85" width="0.1209%" height="15" fill="rgb(246,177,23)"/><text x="50.6307%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (276,193 samples, 0.11%)</title><rect x="50.3934%" y="69" width="0.1082%" height="15" fill="rgb(230,62,27)"/><text x="50.6434%" y="79.50"></text></g><g><title>associated_items (372,594 samples, 0.15%)</title><rect x="50.3595%" y="101" width="0.1459%" height="15" fill="rgb(216,154,8)"/><text x="50.6095%" y="111.50"></text></g><g><title>typeck (2,475,395 samples, 0.97%)</title><rect x="49.8475%" y="117" width="0.9695%" height="15" fill="rgb(244,35,45)"/><text x="50.0975%" y="127.50"></text></g><g><title>item_bodies_checking (50,029,388 samples, 19.59%)</title><rect x="31.2518%" y="165" width="19.5936%" height="15" fill="rgb(251,115,12)"/><text x="31.5018%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,026,138 samples, 19.59%)</title><rect x="31.2531%" y="149" width="19.5923%" height="15" fill="rgb(240,54,50)"/><text x="31.5031%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (49,838,335 samples, 19.52%)</title><rect x="31.3267%" y="133" width="19.5188%" height="15" fill="rgb(233,84,52)"/><text x="31.5767%" y="143.50">typeck</text></g><g><title>adt_destructor (387,604 samples, 0.15%)</title><rect x="54.3733%" y="133" width="0.1518%" height="15" fill="rgb(207,117,47)"/><text x="54.6233%" y="143.50"></text></g><g><title>coherent_trait (380,554 samples, 0.15%)</title><rect x="54.3760%" y="117" width="0.1490%" height="15" fill="rgb(249,43,39)"/><text x="54.6260%" y="127.50"></text></g><g><title>specialization_graph_of (378,994 samples, 0.15%)</title><rect x="54.3766%" y="101" width="0.1484%" height="15" fill="rgb(209,38,44)"/><text x="54.6266%" y="111.50"></text></g><g><title>implied_outlives_bounds (298,903 samples, 0.12%)</title><rect x="54.6445%" y="133" width="0.1171%" height="15" fill="rgb(236,212,23)"/><text x="54.8945%" y="143.50"></text></g><g><title>item_types_checking (10,442,111 samples, 4.09%)</title><rect x="50.8454%" y="165" width="4.0896%" height="15" fill="rgb(242,79,21)"/><text x="51.0954%" y="175.50">item..</text></g><g><title>check_mod_item_types (10,440,061 samples, 4.09%)</title><rect x="50.8462%" y="149" width="4.0888%" height="15" fill="rgb(211,96,35)"/><text x="51.0962%" y="159.50">chec..</text></g><g><title>fn_sig (1,188,074 samples, 0.47%)</title><rect x="55.1000%" y="133" width="0.4653%" height="15" fill="rgb(253,215,40)"/><text x="55.3500%" y="143.50"></text></g><g><title>type_param_predicates (334,105 samples, 0.13%)</title><rect x="55.4345%" y="117" width="0.1308%" height="15" fill="rgb(211,81,21)"/><text x="55.6845%" y="127.50"></text></g><g><title>is_late_bound_map (898,361 samples, 0.35%)</title><rect x="55.6558%" y="117" width="0.3518%" height="15" fill="rgb(208,190,38)"/><text x="55.9058%" y="127.50"></text></g><g><title>resolve_lifetimes (859,861 samples, 0.34%)</title><rect x="55.6709%" y="101" width="0.3368%" height="15" fill="rgb(235,213,38)"/><text x="55.9209%" y="111.50"></text></g><g><title>generics_of (1,155,664 samples, 0.45%)</title><rect x="55.5653%" y="133" width="0.4526%" height="15" fill="rgb(237,122,38)"/><text x="55.8153%" y="143.50"></text></g><g><title>explicit_predicates_of (876,626 samples, 0.34%)</title><rect x="56.1151%" y="101" width="0.3433%" height="15" fill="rgb(244,218,35)"/><text x="56.3651%" y="111.50"></text></g><g><title>predicates_of (1,347,369 samples, 0.53%)</title><rect x="56.0299%" y="133" width="0.5277%" height="15" fill="rgb(240,68,47)"/><text x="56.2799%" y="143.50"></text></g><g><title>predicates_defined_on (1,263,179 samples, 0.49%)</title><rect x="56.0629%" y="117" width="0.4947%" height="15" fill="rgb(210,16,53)"/><text x="56.3129%" y="127.50"></text></g><g><title>type_collecting (4,441,717 samples, 1.74%)</title><rect x="54.9354%" y="165" width="1.7396%" height="15" fill="rgb(235,124,12)"/><text x="55.1854%" y="175.50"></text></g><g><title>collect_mod_item_types (4,434,327 samples, 1.74%)</title><rect x="54.9383%" y="149" width="1.7367%" height="15" fill="rgb(224,169,11)"/><text x="55.1883%" y="159.50"></text></g><g><title>type_of (299,795 samples, 0.12%)</title><rect x="56.5576%" y="133" width="0.1174%" height="15" fill="rgb(250,166,2)"/><text x="56.8076%" y="143.50"></text></g><g><title>evaluate_obligation (428,268 samples, 0.17%)</title><rect x="60.7107%" y="133" width="0.1677%" height="15" fill="rgb(242,216,29)"/><text x="60.9607%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,104,460 samples, 0.43%)</title><rect x="60.8859%" y="133" width="0.4326%" height="15" fill="rgb(230,116,27)"/><text x="61.1359%" y="143.50"></text></g><g><title>param_env (1,447,079 samples, 0.57%)</title><rect x="61.3384%" y="133" width="0.5667%" height="15" fill="rgb(228,99,48)"/><text x="61.5884%" y="143.50"></text></g><g><title>region_scope_tree (546,408 samples, 0.21%)</title><rect x="61.9381%" y="133" width="0.2140%" height="15" fill="rgb(253,11,6)"/><text x="62.1881%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,639,403 samples, 5.34%)</title><rect x="56.8211%" y="149" width="5.3418%" height="15" fill="rgb(247,143,39)"/><text x="57.0711%" y="159.50">check_i..</text></g><g><title>implied_outlives_bounds (256,023 samples, 0.10%)</title><rect x="62.9404%" y="133" width="0.1003%" height="15" fill="rgb(236,97,10)"/><text x="63.1904%" y="143.50"></text></g><g><title>param_env (325,394 samples, 0.13%)</title><rect x="63.0503%" y="133" width="0.1274%" height="15" fill="rgb(233,208,19)"/><text x="63.3003%" y="143.50"></text></g><g><title>analysis (148,323,186 samples, 58.09%)</title><rect x="5.2149%" y="197" width="58.0895%" height="15" fill="rgb(216,164,2)"/><text x="5.4649%" y="207.50">analysis</text></g><g><title>type_check_crate (83,799,985 samples, 32.82%)</title><rect x="30.4849%" y="181" width="32.8195%" height="15" fill="rgb(220,129,5)"/><text x="30.7349%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,917,758 samples, 6.63%)</title><rect x="56.6787%" y="165" width="6.6257%" height="15" fill="rgb(242,17,10)"/><text x="56.9287%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (2,914,641 samples, 1.14%)</title><rect x="62.1629%" y="149" width="1.1415%" height="15" fill="rgb(242,107,0)"/><text x="62.4129%" y="159.50"></text></g><g><title>fn_abi_of_instance (554,435 samples, 0.22%)</title><rect x="65.2384%" y="165" width="0.2171%" height="15" fill="rgb(251,28,31)"/><text x="65.4884%" y="175.50"></text></g><g><title>codegen_module (4,516,577 samples, 1.77%)</title><rect x="63.7883%" y="181" width="1.7689%" height="15" fill="rgb(233,223,10)"/><text x="64.0383%" y="191.50"></text></g><g><title>codegen_crate (5,816,361 samples, 2.28%)</title><rect x="63.3070%" y="197" width="2.2779%" height="15" fill="rgb(215,21,27)"/><text x="63.5570%" y="207.50">c..</text></g><g><title>LLVM_module_codegen (34,267,622 samples, 13.42%)</title><rect x="65.6133%" y="181" width="13.4206%" height="15" fill="rgb(232,23,21)"/><text x="65.8633%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (33,410,525 samples, 13.08%)</title><rect x="65.9490%" y="165" width="13.0849%" height="15" fill="rgb(244,5,23)"/><text x="66.1990%" y="175.50">LLVM_module_codegen_..</text></g><g><title>codegen_module_optimize (35,595,567 samples, 13.94%)</title><rect x="65.5849%" y="197" width="13.9407%" height="15" fill="rgb(226,81,46)"/><text x="65.8349%" y="207.50">codegen_module_optimi..</text></g><g><title>LLVM_module_optimize (1,255,394 samples, 0.49%)</title><rect x="79.0340%" y="181" width="0.4917%" height="15" fill="rgb(247,70,30)"/><text x="79.2840%" y="191.50"></text></g><g><title>macro_expand_crate (7,256,857 samples, 2.84%)</title><rect x="79.6874%" y="181" width="2.8421%" height="15" fill="rgb(212,68,19)"/><text x="79.9374%" y="191.50">ma..</text></g><g><title>expand_crate (7,241,616 samples, 2.84%)</title><rect x="79.6934%" y="165" width="2.8361%" height="15" fill="rgb(240,187,13)"/><text x="79.9434%" y="175.50">ex..</text></g><g><title>metadata_register_crate (1,338,344 samples, 0.52%)</title><rect x="82.0054%" y="149" width="0.5242%" height="15" fill="rgb(223,113,26)"/><text x="82.2554%" y="159.50"></text></g><g><title>metadata_register_crate (454,777 samples, 0.18%)</title><rect x="82.3514%" y="133" width="0.1781%" height="15" fill="rgb(206,192,2)"/><text x="82.6014%" y="143.50"></text></g><g><title>late_resolve_crate (2,053,952 samples, 0.80%)</title><rect x="82.6698%" y="165" width="0.8044%" height="15" fill="rgb(241,108,4)"/><text x="82.9198%" y="175.50"></text></g><g><title>configure_and_expand (10,189,468 samples, 3.99%)</title><rect x="79.5256%" y="197" width="3.9906%" height="15" fill="rgb(247,173,49)"/><text x="79.7756%" y="207.50">conf..</text></g><g><title>resolve_crate (2,282,284 samples, 0.89%)</title><rect x="82.6224%" y="181" width="0.8938%" height="15" fill="rgb(224,114,35)"/><text x="82.8724%" y="191.50"></text></g><g><title>early_lint_checks (386,074 samples, 0.15%)</title><rect x="83.6136%" y="197" width="0.1512%" height="15" fill="rgb(245,159,27)"/><text x="83.8636%" y="207.50"></text></g><g><title>free_global_ctxt (4,960,092 samples, 1.94%)</title><rect x="83.7648%" y="197" width="1.9426%" height="15" fill="rgb(245,172,44)"/><text x="84.0148%" y="207.50">f..</text></g><g><title>optimized_mir (1,134,742 samples, 0.44%)</title><rect x="86.9236%" y="117" width="0.4444%" height="15" fill="rgb(236,23,11)"/><text x="87.1736%" y="127.50"></text></g><g><title>resolve_instance (282,914 samples, 0.11%)</title><rect x="87.3680%" y="117" width="0.1108%" height="15" fill="rgb(205,117,38)"/><text x="87.6180%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,993,071 samples, 0.78%)</title><rect x="86.8242%" y="133" width="0.7806%" height="15" fill="rgb(237,72,25)"/><text x="87.0742%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (263,233 samples, 0.10%)</title><rect x="87.5017%" y="117" width="0.1031%" height="15" fill="rgb(244,70,9)"/><text x="87.7517%" y="127.50"></text></g><g><title>upstream_monomorphizations (259,573 samples, 0.10%)</title><rect x="87.5031%" y="101" width="0.1017%" height="15" fill="rgb(217,125,39)"/><text x="87.7531%" y="111.50"></text></g><g><title>monomorphization_collector (2,019,511 samples, 0.79%)</title><rect x="86.8228%" y="149" width="0.7909%" height="15" fill="rgb(235,36,10)"/><text x="87.0728%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,257,904 samples, 0.88%)</title><rect x="86.8099%" y="165" width="0.8843%" height="15" fill="rgb(251,123,47)"/><text x="87.0599%" y="175.50"></text></g><g><title>exported_symbols (2,456,776 samples, 0.96%)</title><rect x="86.7995%" y="181" width="0.9622%" height="15" fill="rgb(221,13,13)"/><text x="87.0495%" y="191.50"></text></g><g><title>is_sized_raw (263,103 samples, 0.10%)</title><rect x="90.0146%" y="149" width="0.1030%" height="15" fill="rgb(238,131,9)"/><text x="90.2646%" y="159.50"></text></g><g><title>layout_of (1,408,843 samples, 0.55%)</title><rect x="89.8654%" y="165" width="0.5518%" height="15" fill="rgb(211,50,8)"/><text x="90.1154%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (674,675 samples, 0.26%)</title><rect x="90.1529%" y="149" width="0.2642%" height="15" fill="rgb(245,182,24)"/><text x="90.4029%" y="159.50"></text></g><g><title>normalize_projection_ty (456,742 samples, 0.18%)</title><rect x="90.2383%" y="133" width="0.1789%" height="15" fill="rgb(242,14,37)"/><text x="90.4883%" y="143.50"></text></g><g><title>is_copy_raw (899,812 samples, 0.35%)</title><rect x="93.3527%" y="133" width="0.3524%" height="15" fill="rgb(246,228,12)"/><text x="93.6027%" y="143.50"></text></g><g><title>evaluate_obligation (615,068 samples, 0.24%)</title><rect x="93.4642%" y="117" width="0.2409%" height="15" fill="rgb(213,55,15)"/><text x="93.7142%" y="127.50"></text></g><g><title>needs_drop_raw (1,062,082 samples, 0.42%)</title><rect x="93.2940%" y="149" width="0.4160%" height="15" fill="rgb(209,9,3)"/><text x="93.5440%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,597,062 samples, 3.37%)</title><rect x="90.4172%" y="165" width="3.3670%" height="15" fill="rgb(230,59,30)"/><text x="90.6672%" y="175.50">mir..</text></g><g><title>optimized_mir (15,213,191 samples, 5.96%)</title><rect x="87.8341%" y="181" width="5.9581%" height="15" fill="rgb(209,121,21)"/><text x="88.0841%" y="191.50">optimize..</text></g><g><title>generate_crate_metadata (20,765,980 samples, 8.13%)</title><rect x="85.7074%" y="197" width="8.1328%" height="15" fill="rgb(220,109,13)"/><text x="85.9574%" y="207.50">generate_cr..</text></g><g><title>hir_lowering (4,219,874 samples, 1.65%)</title><rect x="93.8402%" y="197" width="1.6527%" height="15" fill="rgb(232,18,1)"/><text x="94.0902%" y="207.50"></text></g><g><title>finish_ongoing_codegen (3,658,059 samples, 1.43%)</title><rect x="95.4994%" y="181" width="1.4326%" height="15" fill="rgb(215,41,42)"/><text x="95.7494%" y="191.50"></text></g><g><title>link_crate (1,221,343 samples, 0.48%)</title><rect x="96.9320%" y="181" width="0.4783%" height="15" fill="rgb(224,123,36)"/><text x="97.1820%" y="191.50"></text></g><g><title>link_binary (1,207,423 samples, 0.47%)</title><rect x="96.9375%" y="165" width="0.4729%" height="15" fill="rgb(240,125,3)"/><text x="97.1875%" y="175.50"></text></g><g><title>link_rlib (852,769 samples, 0.33%)</title><rect x="97.0764%" y="149" width="0.3340%" height="15" fill="rgb(205,98,50)"/><text x="97.3264%" y="159.50"></text></g><g><title>link (4,905,772 samples, 1.92%)</title><rect x="95.4929%" y="197" width="1.9213%" height="15" fill="rgb(205,185,37)"/><text x="95.7429%" y="207.50">l..</text></g><g><title>parse_crate (4,700,699 samples, 1.84%)</title><rect x="97.4142%" y="197" width="1.8410%" height="15" fill="rgb(238,207,15)"/><text x="97.6642%" y="207.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,216,183 samples, 0.48%)</title><rect x="99.3316%" y="197" width="0.4763%" height="15" fill="rgb(213,199,42)"/><text x="99.5816%" y="207.50"></text></g><g><title>all (255,335,647 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (255,335,647 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (409,334 samples, 0.16%)</title><rect x="99.8397%" y="197" width="0.1603%" height="15" fill="rgb(241,35,35)"/><text x="100.0897%" y="207.50"></text></g></svg></svg>