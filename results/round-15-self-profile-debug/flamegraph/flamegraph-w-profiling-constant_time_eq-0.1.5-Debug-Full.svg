<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,536,646 samples, 10.71%)</title><rect x="0.4130%" y="197" width="10.7113%" height="15" fill="rgb(227,0,7)"/><text x="0.6630%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (194,503 samples, 0.13%)</title><rect x="15.9430%" y="85" width="0.1341%" height="15" fill="rgb(217,0,24)"/><text x="16.1930%" y="95.50"></text></g><g><title>evaluate_obligation (179,123 samples, 0.12%)</title><rect x="15.9537%" y="69" width="0.1235%" height="15" fill="rgb(221,193,54)"/><text x="16.2037%" y="79.50"></text></g><g><title>needs_drop_raw (178,522 samples, 0.12%)</title><rect x="16.0842%" y="85" width="0.1231%" height="15" fill="rgb(248,212,6)"/><text x="16.3342%" y="95.50"></text></g><g><title>is_copy_raw (167,032 samples, 0.12%)</title><rect x="16.0921%" y="69" width="0.1152%" height="15" fill="rgb(208,68,35)"/><text x="16.3421%" y="79.50"></text></g><g><title>evaluate_obligation (154,042 samples, 0.11%)</title><rect x="16.1011%" y="53" width="0.1062%" height="15" fill="rgb(232,128,0)"/><text x="16.3511%" y="63.50"></text></g><g><title>specialization_graph_of (852,458 samples, 0.59%)</title><rect x="16.2940%" y="69" width="0.5877%" height="15" fill="rgb(207,160,47)"/><text x="16.5440%" y="79.50"></text></g><g><title>impl_trait_ref (466,626 samples, 0.32%)</title><rect x="16.5600%" y="53" width="0.3217%" height="15" fill="rgb(228,23,34)"/><text x="16.8100%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (409,394 samples, 0.28%)</title><rect x="16.5995%" y="37" width="0.2822%" height="15" fill="rgb(218,30,26)"/><text x="16.8495%" y="47.50"></text></g><g><title>resolve_instance (1,002,250 samples, 0.69%)</title><rect x="16.2073%" y="85" width="0.6910%" height="15" fill="rgb(220,122,19)"/><text x="16.4573%" y="95.50"></text></g><g><title>thir_body (389,784 samples, 0.27%)</title><rect x="16.9029%" y="85" width="0.2687%" height="15" fill="rgb(250,228,42)"/><text x="17.1529%" y="95.50"></text></g><g><title>mir_const (3,468,906 samples, 2.39%)</title><rect x="14.7831%" y="133" width="2.3915%" height="15" fill="rgb(240,193,28)"/><text x="15.0331%" y="143.50">mi..</text></g><g><title>unsafety_check_result (3,068,111 samples, 2.12%)</title><rect x="15.0595%" y="117" width="2.1152%" height="15" fill="rgb(216,20,37)"/><text x="15.3095%" y="127.50">u..</text></g><g><title>mir_built (2,818,239 samples, 1.94%)</title><rect x="15.2317%" y="101" width="1.9430%" height="15" fill="rgb(206,188,39)"/><text x="15.4817%" y="111.50">m..</text></g><g><title>mir_promoted (4,499,915 samples, 3.10%)</title><rect x="14.4721%" y="149" width="3.1023%" height="15" fill="rgb(217,207,13)"/><text x="14.7221%" y="159.50">mir..</text></g><g><title>mir_const_qualif (579,914 samples, 0.40%)</title><rect x="17.1747%" y="133" width="0.3998%" height="15" fill="rgb(231,73,38)"/><text x="17.4247%" y="143.50"></text></g><g><title>mir_const (447,582 samples, 0.31%)</title><rect x="17.2659%" y="117" width="0.3086%" height="15" fill="rgb(225,20,46)"/><text x="17.5159%" y="127.50"></text></g><g><title>unsafety_check_result (298,581 samples, 0.21%)</title><rect x="17.3686%" y="101" width="0.2058%" height="15" fill="rgb(210,31,41)"/><text x="17.6186%" y="111.50"></text></g><g><title>mir_built (255,940 samples, 0.18%)</title><rect x="17.3980%" y="85" width="0.1765%" height="15" fill="rgb(221,200,47)"/><text x="17.6480%" y="95.50"></text></g><g><title>type_op_normalize_fn_sig (179,381 samples, 0.12%)</title><rect x="17.5783%" y="149" width="0.1237%" height="15" fill="rgb(226,26,5)"/><text x="17.8283%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,691,817 samples, 6.68%)</title><rect x="11.2456%" y="181" width="6.6818%" height="15" fill="rgb(249,33,26)"/><text x="11.4956%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (9,621,027 samples, 6.63%)</title><rect x="11.2944%" y="165" width="6.6330%" height="15" fill="rgb(235,183,28)"/><text x="11.5444%" y="175.50">mir_borro..</text></g><g><title>type_op_prove_predicate (326,884 samples, 0.23%)</title><rect x="17.7020%" y="149" width="0.2254%" height="15" fill="rgb(221,5,38)"/><text x="17.9520%" y="159.50"></text></g><g><title>MIR_effect_checking (400,314 samples, 0.28%)</title><rect x="17.9273%" y="181" width="0.2760%" height="15" fill="rgb(247,18,42)"/><text x="18.1773%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (342,013 samples, 0.24%)</title><rect x="17.9675%" y="165" width="0.2358%" height="15" fill="rgb(241,131,45)"/><text x="18.2175%" y="175.50"></text></g><g><title>codegen_fn_attrs (200,432 samples, 0.14%)</title><rect x="18.3626%" y="149" width="0.1382%" height="15" fill="rgb(249,31,29)"/><text x="18.6126%" y="159.50"></text></g><g><title>check_mod_attrs (292,243 samples, 0.20%)</title><rect x="18.2994%" y="165" width="0.2015%" height="15" fill="rgb(225,111,53)"/><text x="18.5494%" y="175.50"></text></g><g><title>misc_checking_1 (526,975 samples, 0.36%)</title><rect x="18.2828%" y="181" width="0.3633%" height="15" fill="rgb(238,160,17)"/><text x="18.5328%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (197,722 samples, 0.14%)</title><rect x="18.6478%" y="165" width="0.1363%" height="15" fill="rgb(214,148,48)"/><text x="18.8978%" y="175.50"></text></g><g><title>check_mod_liveness (157,012 samples, 0.11%)</title><rect x="18.6759%" y="149" width="0.1082%" height="15" fill="rgb(232,36,49)"/><text x="18.9259%" y="159.50"></text></g><g><title>misc_checking_2 (463,874 samples, 0.32%)</title><rect x="18.6461%" y="181" width="0.3198%" height="15" fill="rgb(209,103,24)"/><text x="18.8961%" y="191.50"></text></g><g><title>match_checking (263,682 samples, 0.18%)</title><rect x="18.7841%" y="165" width="0.1818%" height="15" fill="rgb(229,88,8)"/><text x="19.0341%" y="175.50"></text></g><g><title>check_match (242,492 samples, 0.17%)</title><rect x="18.7987%" y="149" width="0.1672%" height="15" fill="rgb(213,181,19)"/><text x="19.0487%" y="159.50"></text></g><g><title>death_checking (166,491 samples, 0.11%)</title><rect x="19.0034%" y="165" width="0.1148%" height="15" fill="rgb(254,191,54)"/><text x="19.2534%" y="175.50"></text></g><g><title>crate_lints (186,572 samples, 0.13%)</title><rect x="19.1200%" y="149" width="0.1286%" height="15" fill="rgb(241,83,37)"/><text x="19.3700%" y="159.50"></text></g><g><title>lint_checking (327,014 samples, 0.23%)</title><rect x="19.1182%" y="165" width="0.2255%" height="15" fill="rgb(233,36,39)"/><text x="19.3682%" y="175.50"></text></g><g><title>privacy_checking_modules (167,901 samples, 0.12%)</title><rect x="19.3864%" y="165" width="0.1158%" height="15" fill="rgb(226,3,54)"/><text x="19.6364%" y="175.50"></text></g><g><title>check_mod_privacy (165,691 samples, 0.11%)</title><rect x="19.3879%" y="149" width="0.1142%" height="15" fill="rgb(245,192,40)"/><text x="19.6379%" y="159.50"></text></g><g><title>misc_checking_3 (791,828 samples, 0.55%)</title><rect x="18.9659%" y="181" width="0.5459%" height="15" fill="rgb(238,167,29)"/><text x="19.2159%" y="191.50"></text></g><g><title>associated_item (439,883 samples, 0.30%)</title><rect x="25.8553%" y="101" width="0.3033%" height="15" fill="rgb(232,182,51)"/><text x="26.1053%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (376,152 samples, 0.26%)</title><rect x="25.8992%" y="85" width="0.2593%" height="15" fill="rgb(231,60,39)"/><text x="26.1492%" y="95.50"></text></g><g><title>associated_items (550,054 samples, 0.38%)</title><rect x="25.7875%" y="117" width="0.3792%" height="15" fill="rgb(208,69,12)"/><text x="26.0375%" y="127.50"></text></g><g><title>adt_destructor (179,852 samples, 0.12%)</title><rect x="26.2426%" y="85" width="0.1240%" height="15" fill="rgb(235,93,37)"/><text x="26.4926%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (176,732 samples, 0.12%)</title><rect x="26.2447%" y="69" width="0.1218%" height="15" fill="rgb(213,116,39)"/><text x="26.4947%" y="79.50"></text></g><g><title>coherent_trait (169,462 samples, 0.12%)</title><rect x="26.2498%" y="53" width="0.1168%" height="15" fill="rgb(222,207,29)"/><text x="26.4998%" y="63.50"></text></g><g><title>specialization_graph_of (162,772 samples, 0.11%)</title><rect x="26.2544%" y="37" width="0.1122%" height="15" fill="rgb(206,96,30)"/><text x="26.5044%" y="47.50"></text></g><g><title>dropck_outlives (265,893 samples, 0.18%)</title><rect x="26.1875%" y="117" width="0.1833%" height="15" fill="rgb(218,138,4)"/><text x="26.4375%" y="127.50"></text></g><g><title>adt_dtorck_constraint (222,343 samples, 0.15%)</title><rect x="26.2176%" y="101" width="0.1533%" height="15" fill="rgb(250,191,14)"/><text x="26.4676%" y="111.50"></text></g><g><title>generics_of (328,985 samples, 0.23%)</title><rect x="27.4628%" y="101" width="0.2268%" height="15" fill="rgb(239,60,40)"/><text x="27.7128%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (255,164 samples, 0.18%)</title><rect x="27.5136%" y="85" width="0.1759%" height="15" fill="rgb(206,27,48)"/><text x="27.7636%" y="95.50"></text></g><g><title>impl_trait_ref (490,284 samples, 0.34%)</title><rect x="27.7451%" y="101" width="0.3380%" height="15" fill="rgb(225,35,8)"/><text x="27.9951%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (414,394 samples, 0.29%)</title><rect x="27.7974%" y="85" width="0.2857%" height="15" fill="rgb(250,213,24)"/><text x="28.0474%" y="95.50"></text></g><g><title>predicates_of (304,212 samples, 0.21%)</title><rect x="28.1010%" y="101" width="0.2097%" height="15" fill="rgb(247,123,22)"/><text x="28.3510%" y="111.50"></text></g><g><title>predicates_defined_on (190,220 samples, 0.13%)</title><rect x="28.1796%" y="85" width="0.1311%" height="15" fill="rgb(231,138,38)"/><text x="28.4296%" y="95.50"></text></g><g><title>specializes (592,757 samples, 0.41%)</title><rect x="28.3108%" y="101" width="0.4087%" height="15" fill="rgb(231,145,46)"/><text x="28.5608%" y="111.50"></text></g><g><title>param_env (414,895 samples, 0.29%)</title><rect x="28.4334%" y="85" width="0.2860%" height="15" fill="rgb(251,118,11)"/><text x="28.6834%" y="95.50"></text></g><g><title>def_span (255,472 samples, 0.18%)</title><rect x="28.5433%" y="69" width="0.1761%" height="15" fill="rgb(217,147,25)"/><text x="28.7933%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (241,362 samples, 0.17%)</title><rect x="28.5530%" y="53" width="0.1664%" height="15" fill="rgb(247,81,37)"/><text x="28.8030%" y="63.50"></text></g><g><title>trait_impls_of (336,403 samples, 0.23%)</title><rect x="28.7300%" y="101" width="0.2319%" height="15" fill="rgb(209,12,38)"/><text x="28.9800%" y="111.50"></text></g><g><title>evaluate_obligation (3,765,267 samples, 2.60%)</title><rect x="26.3708%" y="117" width="2.5959%" height="15" fill="rgb(227,1,9)"/><text x="26.6208%" y="127.50">ev..</text></g><g><title>generics_of (145,970 samples, 0.10%)</title><rect x="29.0506%" y="117" width="0.1006%" height="15" fill="rgb(248,47,43)"/><text x="29.3006%" y="127.50"></text></g><g><title>associated_item (186,221 samples, 0.13%)</title><rect x="29.1912%" y="85" width="0.1284%" height="15" fill="rgb(221,10,30)"/><text x="29.4412%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (169,531 samples, 0.12%)</title><rect x="29.2028%" y="69" width="0.1169%" height="15" fill="rgb(210,229,1)"/><text x="29.4528%" y="79.50"></text></g><g><title>impl_item_implementor_ids (255,842 samples, 0.18%)</title><rect x="29.1513%" y="117" width="0.1764%" height="15" fill="rgb(222,148,37)"/><text x="29.4013%" y="127.50"></text></g><g><title>associated_items (232,802 samples, 0.16%)</title><rect x="29.1672%" y="101" width="0.1605%" height="15" fill="rgb(234,67,33)"/><text x="29.4172%" y="111.50"></text></g><g><title>impl_trait_ref (181,922 samples, 0.13%)</title><rect x="29.3373%" y="117" width="0.1254%" height="15" fill="rgb(247,98,35)"/><text x="29.5873%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (156,891 samples, 0.11%)</title><rect x="29.3546%" y="101" width="0.1082%" height="15" fill="rgb(247,138,52)"/><text x="29.6046%" y="111.50"></text></g><g><title>param_env (275,151 samples, 0.19%)</title><rect x="29.6178%" y="117" width="0.1897%" height="15" fill="rgb(213,79,30)"/><text x="29.8678%" y="127.50"></text></g><g><title>predicates_of (315,683 samples, 0.22%)</title><rect x="29.8089%" y="117" width="0.2176%" height="15" fill="rgb(246,177,23)"/><text x="30.0589%" y="127.50"></text></g><g><title>predicates_defined_on (201,562 samples, 0.14%)</title><rect x="29.8876%" y="101" width="0.1390%" height="15" fill="rgb(230,62,27)"/><text x="30.1376%" y="111.50"></text></g><g><title>specializes (168,282 samples, 0.12%)</title><rect x="30.0641%" y="117" width="0.1160%" height="15" fill="rgb(216,154,8)"/><text x="30.3141%" y="127.50"></text></g><g><title>item_bodies_checking (15,573,066 samples, 10.74%)</title><rect x="19.5595%" y="165" width="10.7364%" height="15" fill="rgb(244,35,45)"/><text x="19.8095%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (15,569,626 samples, 10.73%)</title><rect x="19.5618%" y="149" width="10.7341%" height="15" fill="rgb(251,115,12)"/><text x="19.8118%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (15,519,186 samples, 10.70%)</title><rect x="19.5966%" y="133" width="10.6993%" height="15" fill="rgb(240,54,50)"/><text x="19.8466%" y="143.50">typeck</text></g><g><title>fn_sig (201,112 samples, 0.14%)</title><rect x="30.3655%" y="133" width="0.1387%" height="15" fill="rgb(233,84,52)"/><text x="30.6155%" y="143.50"></text></g><g><title>generics_of (192,761 samples, 0.13%)</title><rect x="30.5041%" y="133" width="0.1329%" height="15" fill="rgb(207,117,47)"/><text x="30.7541%" y="143.50"></text></g><g><title>type_collecting (571,416 samples, 0.39%)</title><rect x="30.3001%" y="165" width="0.3939%" height="15" fill="rgb(249,43,39)"/><text x="30.5501%" y="175.50"></text></g><g><title>collect_mod_item_types (552,606 samples, 0.38%)</title><rect x="30.3130%" y="149" width="0.3810%" height="15" fill="rgb(209,38,44)"/><text x="30.5630%" y="159.50"></text></g><g><title>param_env (220,582 samples, 0.15%)</title><rect x="31.3140%" y="133" width="0.1521%" height="15" fill="rgb(236,212,23)"/><text x="31.5640%" y="143.50"></text></g><g><title>analysis (29,627,797 samples, 20.43%)</title><rect x="11.1243%" y="197" width="20.4261%" height="15" fill="rgb(242,79,21)"/><text x="11.3743%" y="207.50">analysis</text></g><g><title>type_check_crate (17,461,826 samples, 12.04%)</title><rect x="19.5118%" y="181" width="12.0386%" height="15" fill="rgb(211,96,35)"/><text x="19.7618%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,237,942 samples, 0.85%)</title><rect x="30.6969%" y="165" width="0.8535%" height="15" fill="rgb(253,215,40)"/><text x="30.9469%" y="175.50"></text></g><g><title>check_item_well_formed (1,193,071 samples, 0.82%)</title><rect x="30.7278%" y="149" width="0.8225%" height="15" fill="rgb(211,81,21)"/><text x="30.9778%" y="159.50"></text></g><g><title>const_caller_location (155,781 samples, 0.11%)</title><rect x="37.5536%" y="165" width="0.1074%" height="15" fill="rgb(208,190,38)"/><text x="37.8036%" y="175.50"></text></g><g><title>layout_of (323,023 samples, 0.22%)</title><rect x="37.9304%" y="149" width="0.2227%" height="15" fill="rgb(235,213,38)"/><text x="38.1804%" y="159.50"></text></g><g><title>predicates_of (206,832 samples, 0.14%)</title><rect x="38.3956%" y="133" width="0.1426%" height="15" fill="rgb(237,122,38)"/><text x="38.6456%" y="143.50"></text></g><g><title>predicates_defined_on (153,372 samples, 0.11%)</title><rect x="38.4325%" y="117" width="0.1057%" height="15" fill="rgb(244,218,35)"/><text x="38.6825%" y="127.50"></text></g><g><title>param_env (565,096 samples, 0.39%)</title><rect x="38.1531%" y="149" width="0.3896%" height="15" fill="rgb(240,68,47)"/><text x="38.4031%" y="159.50"></text></g><g><title>fn_abi_of_instance (1,408,325 samples, 0.97%)</title><rect x="37.6610%" y="165" width="0.9709%" height="15" fill="rgb(210,16,53)"/><text x="37.9110%" y="175.50"></text></g><g><title>layout_of (240,593 samples, 0.17%)</title><rect x="38.7019%" y="165" width="0.1659%" height="15" fill="rgb(235,124,12)"/><text x="38.9519%" y="175.50"></text></g><g><title>codegen_module (9,118,231 samples, 6.29%)</title><rect x="32.5972%" y="181" width="6.2863%" height="15" fill="rgb(224,169,11)"/><text x="32.8472%" y="191.50">codegen_..</text></g><g><title>codegen_crate (10,645,837 samples, 7.34%)</title><rect x="31.5575%" y="197" width="7.3395%" height="15" fill="rgb(250,166,2)"/><text x="31.8075%" y="207.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (57,639,527 samples, 39.74%)</title><rect x="38.9850%" y="181" width="39.7380%" height="15" fill="rgb(242,216,29)"/><text x="39.2350%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (54,800,120 samples, 37.78%)</title><rect x="40.9425%" y="165" width="37.7804%" height="15" fill="rgb(230,116,27)"/><text x="41.1925%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (61,168,781 samples, 42.17%)</title><rect x="38.8970%" y="197" width="42.1711%" height="15" fill="rgb(228,99,48)"/><text x="39.1470%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,401,654 samples, 2.35%)</title><rect x="78.7229%" y="181" width="2.3452%" height="15" fill="rgb(253,11,6)"/><text x="78.9729%" y="191.50">L..</text></g><g><title>macro_expand_crate (7,266,823 samples, 5.01%)</title><rect x="81.3352%" y="181" width="5.0099%" height="15" fill="rgb(247,143,39)"/><text x="81.5852%" y="191.50">macro_..</text></g><g><title>expand_crate (7,245,032 samples, 4.99%)</title><rect x="81.3503%" y="165" width="4.9949%" height="15" fill="rgb(236,97,10)"/><text x="81.6003%" y="175.50">expand..</text></g><g><title>metadata_register_crate (196,352 samples, 0.14%)</title><rect x="86.2098%" y="149" width="0.1354%" height="15" fill="rgb(233,208,19)"/><text x="86.4598%" y="159.50"></text></g><g><title>finalize_macro_resolutions (271,073 samples, 0.19%)</title><rect x="86.4211%" y="165" width="0.1869%" height="15" fill="rgb(216,164,2)"/><text x="86.6711%" y="175.50"></text></g><g><title>late_resolve_crate (557,525 samples, 0.38%)</title><rect x="86.6080%" y="165" width="0.3844%" height="15" fill="rgb(220,129,5)"/><text x="86.8580%" y="175.50"></text></g><g><title>configure_and_expand (8,640,737 samples, 5.96%)</title><rect x="81.0681%" y="197" width="5.9571%" height="15" fill="rgb(242,17,10)"/><text x="81.3181%" y="207.50">configur..</text></g><g><title>resolve_crate (898,419 samples, 0.62%)</title><rect x="86.4058%" y="181" width="0.6194%" height="15" fill="rgb(242,107,0)"/><text x="86.6558%" y="191.50"></text></g><g><title>free_global_ctxt (1,374,494 samples, 0.95%)</title><rect x="87.1560%" y="197" width="0.9476%" height="15" fill="rgb(251,28,31)"/><text x="87.4060%" y="207.50"></text></g><g><title>item_attrs (258,412 samples, 0.18%)</title><rect x="88.7696%" y="101" width="0.1782%" height="15" fill="rgb(233,223,10)"/><text x="89.0196%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (249,322 samples, 0.17%)</title><rect x="88.7758%" y="85" width="0.1719%" height="15" fill="rgb(215,21,27)"/><text x="89.0258%" y="95.50"></text></g><g><title>codegen_fn_attrs (443,895 samples, 0.31%)</title><rect x="88.7250%" y="117" width="0.3060%" height="15" fill="rgb(232,23,21)"/><text x="88.9750%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (289,203 samples, 0.20%)</title><rect x="89.5550%" y="101" width="0.1994%" height="15" fill="rgb(244,5,23)"/><text x="89.8050%" y="111.50"></text></g><g><title>optimized_mir (1,349,963 samples, 0.93%)</title><rect x="89.1465%" y="117" width="0.9307%" height="15" fill="rgb(226,81,46)"/><text x="89.3965%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (468,204 samples, 0.32%)</title><rect x="89.7544%" y="101" width="0.3228%" height="15" fill="rgb(247,70,30)"/><text x="90.0044%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (655,298 samples, 0.45%)</title><rect x="90.1876%" y="101" width="0.4518%" height="15" fill="rgb(212,68,19)"/><text x="90.4376%" y="111.50"></text></g><g><title>trait_impls_of (183,012 samples, 0.13%)</title><rect x="90.5132%" y="85" width="0.1262%" height="15" fill="rgb(240,187,13)"/><text x="90.7632%" y="95.50"></text></g><g><title>impl_parent (329,585 samples, 0.23%)</title><rect x="91.1577%" y="85" width="0.2272%" height="15" fill="rgb(223,113,26)"/><text x="91.4077%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (177,373 samples, 0.12%)</title><rect x="91.2627%" y="69" width="0.1223%" height="15" fill="rgb(206,192,2)"/><text x="91.5127%" y="79.50"></text></g><g><title>specialization_graph_of (1,858,019 samples, 1.28%)</title><rect x="90.7474%" y="101" width="1.2810%" height="15" fill="rgb(241,108,4)"/><text x="90.9974%" y="111.50"></text></g><g><title>impl_trait_ref (933,286 samples, 0.64%)</title><rect x="91.3850%" y="85" width="0.6434%" height="15" fill="rgb(247,173,49)"/><text x="91.6350%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (794,396 samples, 0.55%)</title><rect x="91.4807%" y="69" width="0.5477%" height="15" fill="rgb(224,114,35)"/><text x="91.7307%" y="79.50"></text></g><g><title>resolve_instance (2,895,971 samples, 2.00%)</title><rect x="90.0772%" y="117" width="1.9965%" height="15" fill="rgb(245,159,27)"/><text x="90.3272%" y="127.50">r..</text></g><g><title>monomorphization_collector_graph_walk (5,193,322 samples, 3.58%)</title><rect x="88.5360%" y="133" width="3.5804%" height="15" fill="rgb(245,172,44)"/><text x="88.7860%" y="143.50">mono..</text></g><g><title>monomorphization_collector (5,220,593 samples, 3.60%)</title><rect x="88.5336%" y="149" width="3.5992%" height="15" fill="rgb(236,23,11)"/><text x="88.7836%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (230,982 samples, 0.16%)</title><rect x="92.1347%" y="133" width="0.1592%" height="15" fill="rgb(205,117,38)"/><text x="92.3847%" y="143.50"></text></g><g><title>symbol_name (215,462 samples, 0.15%)</title><rect x="92.1454%" y="117" width="0.1485%" height="15" fill="rgb(237,72,25)"/><text x="92.3954%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (5,611,827 samples, 3.87%)</title><rect x="88.5039%" y="165" width="3.8689%" height="15" fill="rgb(244,70,9)"/><text x="88.7539%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (348,133 samples, 0.24%)</title><rect x="92.1328%" y="149" width="0.2400%" height="15" fill="rgb(217,125,39)"/><text x="92.3828%" y="159.50"></text></g><g><title>exported_symbols (5,665,937 samples, 3.91%)</title><rect x="88.4863%" y="181" width="3.9062%" height="15" fill="rgb(235,36,10)"/><text x="88.7363%" y="191.50">expo..</text></g><g><title>optimized_mir (881,448 samples, 0.61%)</title><rect x="92.4745%" y="181" width="0.6077%" height="15" fill="rgb(251,123,47)"/><text x="92.7245%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (316,703 samples, 0.22%)</title><rect x="92.8638%" y="165" width="0.2183%" height="15" fill="rgb(221,13,13)"/><text x="93.1138%" y="175.50"></text></g><g><title>generate_crate_metadata (7,269,274 samples, 5.01%)</title><rect x="88.1036%" y="197" width="5.0116%" height="15" fill="rgb(238,131,9)"/><text x="88.3536%" y="207.50">genera..</text></g><g><title>hir_lowering (829,388 samples, 0.57%)</title><rect x="93.1152%" y="197" width="0.5718%" height="15" fill="rgb(211,50,8)"/><text x="93.3652%" y="207.50"></text></g><g><title>finish_ongoing_codegen (5,843,568 samples, 4.03%)</title><rect x="93.7002%" y="181" width="4.0287%" height="15" fill="rgb(245,182,24)"/><text x="93.9502%" y="191.50">fini..</text></g><g><title>link_binary_remove_temps (162,521 samples, 0.11%)</title><rect x="97.9032%" y="149" width="0.1120%" height="15" fill="rgb(242,14,37)"/><text x="98.1532%" y="159.50"></text></g><g><title>link_crate (995,320 samples, 0.69%)</title><rect x="97.7289%" y="181" width="0.6862%" height="15" fill="rgb(246,228,12)"/><text x="97.9789%" y="191.50"></text></g><g><title>link_binary (983,840 samples, 0.68%)</title><rect x="97.7368%" y="165" width="0.6783%" height="15" fill="rgb(213,55,15)"/><text x="97.9868%" y="175.50"></text></g><g><title>link_rlib (580,015 samples, 0.40%)</title><rect x="98.0152%" y="149" width="0.3999%" height="15" fill="rgb(209,9,3)"/><text x="98.2652%" y="159.50"></text></g><g><title>link (6,865,088 samples, 4.73%)</title><rect x="93.6870%" y="197" width="4.7329%" height="15" fill="rgb(230,59,30)"/><text x="93.9370%" y="207.50">link</text></g><g><title>parse_crate (1,007,670 samples, 0.69%)</title><rect x="98.4200%" y="197" width="0.6947%" height="15" fill="rgb(209,121,21)"/><text x="98.6700%" y="207.50"></text></g><g><title>prepare_outputs (361,514 samples, 0.25%)</title><rect x="99.1211%" y="197" width="0.2492%" height="15" fill="rgb(220,109,13)"/><text x="99.3711%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (464,535 samples, 0.32%)</title><rect x="99.3703%" y="197" width="0.3203%" height="15" fill="rgb(232,18,1)"/><text x="99.6203%" y="207.50"></text></g><g><title>all (145,048,934 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (145,048,934 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (319,013 samples, 0.22%)</title><rect x="99.7801%" y="197" width="0.2199%" height="15" fill="rgb(240,125,3)"/><text x="100.0301%" y="207.50"></text></g></svg></svg>