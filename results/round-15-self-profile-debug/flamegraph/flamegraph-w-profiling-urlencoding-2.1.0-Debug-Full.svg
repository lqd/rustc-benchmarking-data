<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (66,501,480 samples, 13.15%)</title><rect x="0.1281%" y="165" width="13.1473%" height="15" fill="rgb(227,0,7)"/><text x="0.3781%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (585,595 samples, 0.12%)</title><rect x="15.2827%" y="37" width="0.1158%" height="15" fill="rgb(217,0,24)"/><text x="15.5327%" y="47.50"></text></g><g><title>needs_drop_raw (946,390 samples, 0.19%)</title><rect x="15.2125%" y="53" width="0.1871%" height="15" fill="rgb(221,193,54)"/><text x="15.4625%" y="63.50"></text></g><g><title>specialization_graph_of (793,669 samples, 0.16%)</title><rect x="15.4842%" y="37" width="0.1569%" height="15" fill="rgb(248,212,6)"/><text x="15.7342%" y="47.50"></text></g><g><title>resolve_instance (1,262,333 samples, 0.25%)</title><rect x="15.4048%" y="53" width="0.2496%" height="15" fill="rgb(208,68,35)"/><text x="15.6548%" y="63.50"></text></g><g><title>mir_const (5,601,853 samples, 1.11%)</title><rect x="14.6438%" y="101" width="1.1075%" height="15" fill="rgb(232,128,0)"/><text x="14.8938%" y="111.50"></text></g><g><title>unsafety_check_result (4,922,346 samples, 0.97%)</title><rect x="14.7781%" y="85" width="0.9731%" height="15" fill="rgb(207,160,47)"/><text x="15.0281%" y="95.50"></text></g><g><title>mir_built (4,351,307 samples, 0.86%)</title><rect x="14.8910%" y="69" width="0.8603%" height="15" fill="rgb(228,23,34)"/><text x="15.1410%" y="79.50"></text></g><g><title>mir_promoted (6,085,306 samples, 1.20%)</title><rect x="14.5524%" y="117" width="1.2031%" height="15" fill="rgb(218,30,26)"/><text x="14.8024%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,566,733 samples, 0.31%)</title><rect x="15.8850%" y="117" width="0.3097%" height="15" fill="rgb(220,122,19)"/><text x="16.1350%" y="127.50"></text></g><g><title>MIR_borrow_checking (14,480,984 samples, 2.86%)</title><rect x="13.3324%" y="149" width="2.8629%" height="15" fill="rgb(250,228,42)"/><text x="13.5824%" y="159.50">MI..</text></g><g><title>mir_borrowck (14,430,384 samples, 2.85%)</title><rect x="13.3424%" y="133" width="2.8529%" height="15" fill="rgb(240,193,28)"/><text x="13.5924%" y="143.50">mi..</text></g><g><title>check_mod_attrs (708,118 samples, 0.14%)</title><rect x="16.2402%" y="133" width="0.1400%" height="15" fill="rgb(216,20,37)"/><text x="16.4902%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (547,167 samples, 0.11%)</title><rect x="16.4174%" y="133" width="0.1082%" height="15" fill="rgb(206,188,39)"/><text x="16.6674%" y="143.50"></text></g><g><title>misc_checking_1 (1,530,037 samples, 0.30%)</title><rect x="16.2335%" y="149" width="0.3025%" height="15" fill="rgb(217,207,13)"/><text x="16.4835%" y="159.50"></text></g><g><title>misc_checking_2 (681,928 samples, 0.13%)</title><rect x="16.5360%" y="149" width="0.1348%" height="15" fill="rgb(231,73,38)"/><text x="16.7860%" y="159.50"></text></g><g><title>death_checking (695,978 samples, 0.14%)</title><rect x="16.6892%" y="133" width="0.1376%" height="15" fill="rgb(225,20,46)"/><text x="16.9392%" y="143.50"></text></g><g><title>item_attrs (528,136 samples, 0.10%)</title><rect x="16.7224%" y="117" width="0.1044%" height="15" fill="rgb(210,31,41)"/><text x="16.9724%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (525,736 samples, 0.10%)</title><rect x="16.7229%" y="101" width="0.1039%" height="15" fill="rgb(221,200,47)"/><text x="16.9729%" y="111.50"></text></g><g><title>crate_lints (1,707,828 samples, 0.34%)</title><rect x="16.8271%" y="117" width="0.3376%" height="15" fill="rgb(226,26,5)"/><text x="17.0771%" y="127.50"></text></g><g><title>type_of (1,059,520 samples, 0.21%)</title><rect x="16.9553%" y="101" width="0.2095%" height="15" fill="rgb(249,33,26)"/><text x="17.2053%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (824,469 samples, 0.16%)</title><rect x="17.0017%" y="85" width="0.1630%" height="15" fill="rgb(235,183,28)"/><text x="17.2517%" y="95.50"></text></g><g><title>lint_checking (1,902,590 samples, 0.38%)</title><rect x="16.8268%" y="133" width="0.3761%" height="15" fill="rgb(221,5,38)"/><text x="17.0768%" y="143.50"></text></g><g><title>misc_checking_3 (3,216,425 samples, 0.64%)</title><rect x="16.6708%" y="149" width="0.6359%" height="15" fill="rgb(247,18,42)"/><text x="16.9208%" y="159.50"></text></g><g><title>impl_parent (4,170,005 samples, 0.82%)</title><rect x="18.9373%" y="85" width="0.8244%" height="15" fill="rgb(241,131,45)"/><text x="19.1873%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,189,278 samples, 0.43%)</title><rect x="19.3289%" y="69" width="0.4328%" height="15" fill="rgb(249,31,29)"/><text x="19.5789%" y="79.50"></text></g><g><title>impl_trait_ref (9,433,463 samples, 1.86%)</title><rect x="19.7617%" y="85" width="1.8650%" height="15" fill="rgb(225,111,53)"/><text x="20.0117%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,546,281 samples, 1.49%)</title><rect x="20.1348%" y="69" width="1.4919%" height="15" fill="rgb(238,160,17)"/><text x="20.3848%" y="79.50"></text></g><g><title>coherent_trait (23,494,991 samples, 4.64%)</title><rect x="17.3206%" y="117" width="4.6450%" height="15" fill="rgb(214,148,48)"/><text x="17.5706%" y="127.50">coher..</text></g><g><title>specialization_graph_of (22,944,045 samples, 4.54%)</title><rect x="17.4295%" y="101" width="4.5360%" height="15" fill="rgb(232,36,49)"/><text x="17.6795%" y="111.50">speci..</text></g><g><title>trait_impls_of (1,712,130 samples, 0.34%)</title><rect x="21.6271%" y="85" width="0.3385%" height="15" fill="rgb(209,103,24)"/><text x="21.8771%" y="95.50"></text></g><g><title>coherence_checking (23,591,902 samples, 4.66%)</title><rect x="17.3153%" y="133" width="4.6641%" height="15" fill="rgb(229,88,8)"/><text x="17.5653%" y="143.50">coher..</text></g><g><title>evaluate_obligation (683,998 samples, 0.14%)</title><rect x="23.0080%" y="85" width="0.1352%" height="15" fill="rgb(213,181,19)"/><text x="23.2580%" y="95.50"></text></g><g><title>impl_trait_ref (774,358 samples, 0.15%)</title><rect x="25.4639%" y="53" width="0.1531%" height="15" fill="rgb(254,191,54)"/><text x="25.7139%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (678,017 samples, 0.13%)</title><rect x="25.4829%" y="37" width="0.1340%" height="15" fill="rgb(241,83,37)"/><text x="25.7329%" y="47.50"></text></g><g><title>evaluate_obligation (4,405,837 samples, 0.87%)</title><rect x="24.9571%" y="69" width="0.8710%" height="15" fill="rgb(233,36,39)"/><text x="25.2071%" y="79.50"></text></g><g><title>typeck (14,421,363 samples, 2.85%)</title><rect x="23.2984%" y="85" width="2.8511%" height="15" fill="rgb(226,3,54)"/><text x="23.5484%" y="95.50">ty..</text></g><g><title>item_bodies_checking (21,071,855 samples, 4.17%)</title><rect x="21.9867%" y="133" width="4.1659%" height="15" fill="rgb(245,192,40)"/><text x="22.2367%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (21,068,515 samples, 4.17%)</title><rect x="21.9873%" y="117" width="4.1652%" height="15" fill="rgb(238,167,29)"/><text x="22.2373%" y="127.50">typec..</text></g><g><title>typeck (21,035,235 samples, 4.16%)</title><rect x="21.9939%" y="101" width="4.1587%" height="15" fill="rgb(232,182,51)"/><text x="22.2439%" y="111.50">typeck</text></g><g><title>explicit_predicates_of (909,380 samples, 0.18%)</title><rect x="26.4430%" y="69" width="0.1798%" height="15" fill="rgb(231,60,39)"/><text x="26.6930%" y="79.50"></text></g><g><title>predicates_of (1,056,811 samples, 0.21%)</title><rect x="26.4228%" y="101" width="0.2089%" height="15" fill="rgb(208,69,12)"/><text x="26.6728%" y="111.50"></text></g><g><title>predicates_defined_on (1,019,631 samples, 0.20%)</title><rect x="26.4301%" y="85" width="0.2016%" height="15" fill="rgb(235,93,37)"/><text x="26.6801%" y="95.50"></text></g><g><title>type_collecting (2,172,193 samples, 0.43%)</title><rect x="26.2282%" y="133" width="0.4294%" height="15" fill="rgb(213,116,39)"/><text x="26.4782%" y="143.50"></text></g><g><title>collect_mod_item_types (2,154,903 samples, 0.43%)</title><rect x="26.2316%" y="117" width="0.4260%" height="15" fill="rgb(222,207,29)"/><text x="26.4816%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,580,187 samples, 0.31%)</title><rect x="26.6750%" y="117" width="0.3124%" height="15" fill="rgb(206,96,30)"/><text x="26.9250%" y="127.50"></text></g><g><title>analysis (71,203,131 samples, 14.08%)</title><rect x="13.2754%" y="165" width="14.0769%" height="15" fill="rgb(218,138,4)"/><text x="13.5254%" y="175.50">analysis</text></g><g><title>type_check_crate (50,812,203 samples, 10.05%)</title><rect x="17.3067%" y="149" width="10.0456%" height="15" fill="rgb(250,191,14)"/><text x="17.5567%" y="159.50">type_check_crate</text></g><g><title>wf_checking (3,511,168 samples, 0.69%)</title><rect x="26.6581%" y="133" width="0.6942%" height="15" fill="rgb(239,60,40)"/><text x="26.9081%" y="143.50"></text></g><g><title>check_item_well_formed (1,845,490 samples, 0.36%)</title><rect x="26.9874%" y="117" width="0.3649%" height="15" fill="rgb(206,27,48)"/><text x="27.2374%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (625,260 samples, 0.12%)</title><rect x="35.6973%" y="133" width="0.1236%" height="15" fill="rgb(225,35,8)"/><text x="35.9473%" y="143.50"></text></g><g><title>const_caller_location (775,087 samples, 0.15%)</title><rect x="35.8209%" y="133" width="0.1532%" height="15" fill="rgb(250,213,24)"/><text x="36.0709%" y="143.50"></text></g><g><title>layout_of (963,091 samples, 0.19%)</title><rect x="36.4953%" y="117" width="0.1904%" height="15" fill="rgb(247,123,22)"/><text x="36.7453%" y="127.50"></text></g><g><title>predicates_of (1,201,250 samples, 0.24%)</title><rect x="37.1493%" y="101" width="0.2375%" height="15" fill="rgb(231,138,38)"/><text x="37.3993%" y="111.50"></text></g><g><title>predicates_defined_on (959,033 samples, 0.19%)</title><rect x="37.1972%" y="85" width="0.1896%" height="15" fill="rgb(231,145,46)"/><text x="37.4472%" y="95.50"></text></g><g><title>param_env (3,554,775 samples, 0.70%)</title><rect x="36.6857%" y="117" width="0.7028%" height="15" fill="rgb(251,118,11)"/><text x="36.9357%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (857,349 samples, 0.17%)</title><rect x="37.3885%" y="117" width="0.1695%" height="15" fill="rgb(217,147,25)"/><text x="37.6385%" y="127.50"></text></g><g><title>normalize_projection_ty (655,876 samples, 0.13%)</title><rect x="37.4284%" y="101" width="0.1297%" height="15" fill="rgb(247,81,37)"/><text x="37.6784%" y="111.50"></text></g><g><title>fn_abi_of_instance (8,012,184 samples, 1.58%)</title><rect x="35.9767%" y="133" width="1.5840%" height="15" fill="rgb(209,12,38)"/><text x="36.2267%" y="143.50"></text></g><g><title>layout_of (927,460 samples, 0.18%)</title><rect x="37.6434%" y="133" width="0.1834%" height="15" fill="rgb(227,1,9)"/><text x="37.8934%" y="143.50"></text></g><g><title>codegen_module (51,417,501 samples, 10.17%)</title><rect x="27.7330%" y="149" width="10.1652%" height="15" fill="rgb(248,47,43)"/><text x="27.9830%" y="159.50">codegen_module</text></g><g><title>codegen_crate (53,420,661 samples, 10.56%)</title><rect x="27.3540%" y="165" width="10.5613%" height="15" fill="rgb(221,10,30)"/><text x="27.6040%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (232,243,021 samples, 45.91%)</title><rect x="37.9629%" y="149" width="45.9145%" height="15" fill="rgb(210,229,1)"/><text x="38.2129%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (220,403,862 samples, 43.57%)</title><rect x="40.3035%" y="133" width="43.5739%" height="15" fill="rgb(222,148,37)"/><text x="40.5535%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (246,950,308 samples, 48.82%)</title><rect x="37.9153%" y="165" width="48.8221%" height="15" fill="rgb(234,67,33)"/><text x="38.1653%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (14,466,556 samples, 2.86%)</title><rect x="83.8774%" y="149" width="2.8600%" height="15" fill="rgb(247,98,35)"/><text x="84.1274%" y="159.50">LL..</text></g><g><title>metadata_register_crate (2,296,464 samples, 0.45%)</title><rect x="89.3380%" y="117" width="0.4540%" height="15" fill="rgb(247,138,52)"/><text x="89.5880%" y="127.50"></text></g><g><title>metadata_register_crate (859,310 samples, 0.17%)</title><rect x="89.6222%" y="101" width="0.1699%" height="15" fill="rgb(213,79,30)"/><text x="89.8722%" y="111.50"></text></g><g><title>macro_expand_crate (15,101,802 samples, 2.99%)</title><rect x="86.8374%" y="149" width="2.9856%" height="15" fill="rgb(246,177,23)"/><text x="87.0874%" y="159.50">mac..</text></g><g><title>expand_crate (15,078,152 samples, 2.98%)</title><rect x="86.8421%" y="133" width="2.9810%" height="15" fill="rgb(230,62,27)"/><text x="87.0921%" y="143.50">exp..</text></g><g><title>late_resolve_crate (2,708,788 samples, 0.54%)</title><rect x="89.9081%" y="133" width="0.5355%" height="15" fill="rgb(216,154,8)"/><text x="90.1581%" y="143.50"></text></g><g><title>configure_and_expand (18,856,122 samples, 3.73%)</title><rect x="86.7374%" y="165" width="3.7279%" height="15" fill="rgb(244,35,45)"/><text x="86.9874%" y="175.50">conf..</text></g><g><title>resolve_crate (3,156,163 samples, 0.62%)</title><rect x="89.8413%" y="149" width="0.6240%" height="15" fill="rgb(251,115,12)"/><text x="90.0913%" y="159.50"></text></g><g><title>free_global_ctxt (5,638,960 samples, 1.11%)</title><rect x="90.5690%" y="165" width="1.1148%" height="15" fill="rgb(240,54,50)"/><text x="90.8190%" y="175.50"></text></g><g><title>item_attrs (861,439 samples, 0.17%)</title><rect x="92.2220%" y="69" width="0.1703%" height="15" fill="rgb(233,84,52)"/><text x="92.4720%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (821,809 samples, 0.16%)</title><rect x="92.2298%" y="53" width="0.1625%" height="15" fill="rgb(207,117,47)"/><text x="92.4798%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,491,500 samples, 0.29%)</title><rect x="92.1733%" y="85" width="0.2949%" height="15" fill="rgb(249,43,39)"/><text x="92.4233%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,731,377 samples, 0.34%)</title><rect x="92.6999%" y="69" width="0.3423%" height="15" fill="rgb(209,38,44)"/><text x="92.9499%" y="79.50"></text></g><g><title>optimized_mir (3,023,622 samples, 0.60%)</title><rect x="92.5769%" y="85" width="0.5978%" height="15" fill="rgb(236,212,23)"/><text x="92.8269%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (670,418 samples, 0.13%)</title><rect x="93.0421%" y="69" width="0.1325%" height="15" fill="rgb(242,79,21)"/><text x="93.2921%" y="79.50"></text></g><g><title>evaluate_obligation (538,274 samples, 0.11%)</title><rect x="93.6323%" y="53" width="0.1064%" height="15" fill="rgb(211,96,35)"/><text x="93.8823%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (2,368,203 samples, 0.47%)</title><rect x="93.3147%" y="69" width="0.4682%" height="15" fill="rgb(253,215,40)"/><text x="93.5647%" y="79.50"></text></g><g><title>impl_parent (541,556 samples, 0.11%)</title><rect x="94.1948%" y="53" width="0.1071%" height="15" fill="rgb(211,81,21)"/><text x="94.4448%" y="63.50"></text></g><g><title>specialization_graph_of (3,263,737 samples, 0.65%)</title><rect x="93.8934%" y="69" width="0.6452%" height="15" fill="rgb(208,190,38)"/><text x="94.1434%" y="79.50"></text></g><g><title>impl_trait_ref (1,197,613 samples, 0.24%)</title><rect x="94.3019%" y="53" width="0.2368%" height="15" fill="rgb(235,213,38)"/><text x="94.5519%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,000,799 samples, 0.20%)</title><rect x="94.3408%" y="37" width="0.1979%" height="15" fill="rgb(237,122,38)"/><text x="94.5908%" y="47.50"></text></g><g><title>resolve_instance (7,189,426 samples, 1.42%)</title><rect x="93.1747%" y="85" width="1.4214%" height="15" fill="rgb(244,218,35)"/><text x="93.4247%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (14,643,347 samples, 2.89%)</title><rect x="91.8754%" y="101" width="2.8950%" height="15" fill="rgb(240,68,47)"/><text x="92.1254%" y="111.50">mo..</text></g><g><title>monomorphization_collector (14,667,177 samples, 2.90%)</title><rect x="91.8748%" y="117" width="2.8997%" height="15" fill="rgb(210,16,53)"/><text x="92.1248%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,383,035 samples, 0.27%)</title><rect x="94.7754%" y="101" width="0.2734%" height="15" fill="rgb(235,124,12)"/><text x="95.0254%" y="111.50"></text></g><g><title>symbol_name (1,278,131 samples, 0.25%)</title><rect x="94.7962%" y="85" width="0.2527%" height="15" fill="rgb(224,169,11)"/><text x="95.0462%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (16,757,509 samples, 3.31%)</title><rect x="91.8657%" y="133" width="3.3130%" height="15" fill="rgb(250,166,2)"/><text x="92.1157%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,044,382 samples, 0.40%)</title><rect x="94.7745%" y="117" width="0.4042%" height="15" fill="rgb(242,216,29)"/><text x="95.0245%" y="127.50"></text></g><g><title>cgu_partitioning (656,637 samples, 0.13%)</title><rect x="95.0488%" y="101" width="0.1298%" height="15" fill="rgb(230,116,27)"/><text x="95.2988%" y="111.50"></text></g><g><title>exported_symbols (16,875,870 samples, 3.34%)</title><rect x="91.8531%" y="149" width="3.3364%" height="15" fill="rgb(228,99,48)"/><text x="92.1031%" y="159.50">exp..</text></g><g><title>layout_of (625,467 samples, 0.12%)</title><rect x="95.4627%" y="133" width="0.1237%" height="15" fill="rgb(253,11,6)"/><text x="95.7127%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,658,697 samples, 0.33%)</title><rect x="95.5863%" y="133" width="0.3279%" height="15" fill="rgb(247,143,39)"/><text x="95.8363%" y="143.50"></text></g><g><title>optimized_mir (3,618,549 samples, 0.72%)</title><rect x="95.2010%" y="149" width="0.7154%" height="15" fill="rgb(236,97,10)"/><text x="95.4510%" y="159.50"></text></g><g><title>generate_crate_metadata (21,458,229 samples, 4.24%)</title><rect x="91.6838%" y="165" width="4.2423%" height="15" fill="rgb(233,208,19)"/><text x="91.9338%" y="175.50">gener..</text></g><g><title>hir_lowering (2,811,399 samples, 0.56%)</title><rect x="95.9261%" y="165" width="0.5558%" height="15" fill="rgb(216,164,2)"/><text x="96.1761%" y="175.50"></text></g><g><title>finish_ongoing_codegen (12,794,266 samples, 2.53%)</title><rect x="96.4853%" y="149" width="2.5294%" height="15" fill="rgb(220,129,5)"/><text x="96.7353%" y="159.50">fi..</text></g><g><title>link_crate (1,954,781 samples, 0.39%)</title><rect x="99.0147%" y="149" width="0.3865%" height="15" fill="rgb(242,17,10)"/><text x="99.2647%" y="159.50"></text></g><g><title>link_binary (1,925,810 samples, 0.38%)</title><rect x="99.0204%" y="133" width="0.3807%" height="15" fill="rgb(242,107,0)"/><text x="99.2704%" y="143.50"></text></g><g><title>link_rlib (1,262,914 samples, 0.25%)</title><rect x="99.1515%" y="117" width="0.2497%" height="15" fill="rgb(251,28,31)"/><text x="99.4015%" y="127.50"></text></g><g><title>link (14,777,018 samples, 2.92%)</title><rect x="96.4819%" y="165" width="2.9214%" height="15" fill="rgb(233,223,10)"/><text x="96.7319%" y="175.50">li..</text></g><g><title>parse_crate (1,086,971 samples, 0.21%)</title><rect x="99.4034%" y="165" width="0.2149%" height="15" fill="rgb(215,21,27)"/><text x="99.6534%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,161,272 samples, 0.23%)</title><rect x="99.6847%" y="165" width="0.2296%" height="15" fill="rgb(232,23,21)"/><text x="99.9347%" y="175.50"></text></g><g><title>all (505,816,653 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (505,816,653 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>