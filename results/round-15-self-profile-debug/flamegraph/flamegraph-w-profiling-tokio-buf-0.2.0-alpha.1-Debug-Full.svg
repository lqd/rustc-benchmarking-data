<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,233,053 samples, 13.08%)</title><rect x="0.4504%" y="181" width="13.0838%" height="15" fill="rgb(227,0,7)"/><text x="0.7004%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (259,474 samples, 0.24%)</title><rect x="15.5018%" y="69" width="0.2385%" height="15" fill="rgb(217,0,24)"/><text x="15.7518%" y="79.50"></text></g><g><title>evaluate_obligation (252,134 samples, 0.23%)</title><rect x="15.5086%" y="53" width="0.2318%" height="15" fill="rgb(221,193,54)"/><text x="15.7586%" y="63.50"></text></g><g><title>trait_impls_of (184,661 samples, 0.17%)</title><rect x="15.5706%" y="37" width="0.1698%" height="15" fill="rgb(248,212,6)"/><text x="15.8206%" y="47.50"></text></g><g><title>resolve_instance (169,592 samples, 0.16%)</title><rect x="15.8280%" y="69" width="0.1559%" height="15" fill="rgb(208,68,35)"/><text x="16.0780%" y="79.50"></text></g><g><title>mir_const (1,227,123 samples, 1.13%)</title><rect x="14.9603%" y="117" width="1.1280%" height="15" fill="rgb(232,128,0)"/><text x="15.2103%" y="127.50"></text></g><g><title>unsafety_check_result (1,043,580 samples, 0.96%)</title><rect x="15.1290%" y="101" width="0.9593%" height="15" fill="rgb(207,160,47)"/><text x="15.3790%" y="111.50"></text></g><g><title>mir_built (937,290 samples, 0.86%)</title><rect x="15.2267%" y="85" width="0.8616%" height="15" fill="rgb(228,23,34)"/><text x="15.4767%" y="95.50"></text></g><g><title>mir_promoted (1,383,595 samples, 1.27%)</title><rect x="14.8254%" y="133" width="1.2719%" height="15" fill="rgb(218,30,26)"/><text x="15.0754%" y="143.50"></text></g><g><title>type_op_prove_predicate (215,682 samples, 0.20%)</title><rect x="16.1596%" y="133" width="0.1983%" height="15" fill="rgb(220,122,19)"/><text x="16.4096%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,975,262 samples, 2.74%)</title><rect x="13.6248%" y="165" width="2.7350%" height="15" fill="rgb(250,228,42)"/><text x="13.8748%" y="175.50">MI..</text></g><g><title>mir_borrowck (2,960,472 samples, 2.72%)</title><rect x="13.6384%" y="149" width="2.7214%" height="15" fill="rgb(240,193,28)"/><text x="13.8884%" y="159.50">mi..</text></g><g><title>codegen_fn_attrs (213,672 samples, 0.20%)</title><rect x="16.5263%" y="133" width="0.1964%" height="15" fill="rgb(216,20,37)"/><text x="16.7763%" y="143.50"></text></g><g><title>check_mod_attrs (285,393 samples, 0.26%)</title><rect x="16.4607%" y="149" width="0.2623%" height="15" fill="rgb(206,188,39)"/><text x="16.7107%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (186,952 samples, 0.17%)</title><rect x="16.7673%" y="149" width="0.1719%" height="15" fill="rgb(217,207,13)"/><text x="17.0173%" y="159.50"></text></g><g><title>misc_checking_1 (565,396 samples, 0.52%)</title><rect x="16.4401%" y="165" width="0.5197%" height="15" fill="rgb(231,73,38)"/><text x="16.6901%" y="175.50"></text></g><g><title>misc_checking_2 (171,462 samples, 0.16%)</title><rect x="16.9598%" y="165" width="0.1576%" height="15" fill="rgb(225,20,46)"/><text x="17.2098%" y="175.50"></text></g><g><title>death_checking (157,022 samples, 0.14%)</title><rect x="17.1651%" y="149" width="0.1443%" height="15" fill="rgb(210,31,41)"/><text x="17.4151%" y="159.50"></text></g><g><title>crate_lints (1,561,786 samples, 1.44%)</title><rect x="17.3109%" y="133" width="1.4357%" height="15" fill="rgb(221,200,47)"/><text x="17.5609%" y="143.50"></text></g><g><title>type_of (1,021,600 samples, 0.94%)</title><rect x="17.8075%" y="117" width="0.9391%" height="15" fill="rgb(226,26,5)"/><text x="18.0575%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (788,778 samples, 0.73%)</title><rect x="18.0215%" y="101" width="0.7251%" height="15" fill="rgb(249,33,26)"/><text x="18.2715%" y="111.50"></text></g><g><title>lint_checking (1,638,877 samples, 1.51%)</title><rect x="17.3094%" y="149" width="1.5065%" height="15" fill="rgb(235,183,28)"/><text x="17.5594%" y="159.50"></text></g><g><title>misc_checking_3 (2,018,781 samples, 1.86%)</title><rect x="17.1174%" y="165" width="1.8558%" height="15" fill="rgb(221,5,38)"/><text x="17.3674%" y="175.50">m..</text></g><g><title>impl_parent (1,517,883 samples, 1.40%)</title><rect x="21.1605%" y="101" width="1.3953%" height="15" fill="rgb(247,18,42)"/><text x="21.4105%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (977,160 samples, 0.90%)</title><rect x="21.6575%" y="85" width="0.8983%" height="15" fill="rgb(241,131,45)"/><text x="21.9075%" y="95.50"></text></g><g><title>impl_trait_ref (4,073,731 samples, 3.74%)</title><rect x="22.5558%" y="101" width="3.7448%" height="15" fill="rgb(249,31,29)"/><text x="22.8058%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,527,983 samples, 3.24%)</title><rect x="23.0575%" y="85" width="3.2431%" height="15" fill="rgb(225,111,53)"/><text x="23.3075%" y="95.50">met..</text></g><g><title>coherent_trait (8,395,721 samples, 7.72%)</title><rect x="19.0045%" y="133" width="7.7178%" height="15" fill="rgb(238,160,17)"/><text x="19.2545%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (8,386,851 samples, 7.71%)</title><rect x="19.0127%" y="117" width="7.7096%" height="15" fill="rgb(214,148,48)"/><text x="19.2627%" y="127.50">specializat..</text></g><g><title>trait_impls_of (456,237 samples, 0.42%)</title><rect x="26.3029%" y="101" width="0.4194%" height="15" fill="rgb(232,36,49)"/><text x="26.5529%" y="111.50"></text></g><g><title>coherence_checking (8,440,832 samples, 7.76%)</title><rect x="18.9923%" y="149" width="7.7593%" height="15" fill="rgb(209,103,24)"/><text x="19.2423%" y="159.50">coherence_c..</text></g><g><title>associated_items (113,492 samples, 0.10%)</title><rect x="28.5886%" y="101" width="0.1043%" height="15" fill="rgb(229,88,8)"/><text x="28.8386%" y="111.50"></text></g><g><title>evaluate_obligation (486,106 samples, 0.45%)</title><rect x="28.7639%" y="101" width="0.4469%" height="15" fill="rgb(213,181,19)"/><text x="29.0139%" y="111.50"></text></g><g><title>trait_impls_of (166,110 samples, 0.15%)</title><rect x="29.0581%" y="85" width="0.1527%" height="15" fill="rgb(254,191,54)"/><text x="29.3081%" y="95.50"></text></g><g><title>object_safety_violations (155,052 samples, 0.14%)</title><rect x="29.4505%" y="101" width="0.1425%" height="15" fill="rgb(241,83,37)"/><text x="29.7005%" y="111.50"></text></g><g><title>predicates_of (150,921 samples, 0.14%)</title><rect x="29.6052%" y="101" width="0.1387%" height="15" fill="rgb(233,36,39)"/><text x="29.8552%" y="111.50"></text></g><g><title>predicates_defined_on (123,761 samples, 0.11%)</title><rect x="29.6301%" y="85" width="0.1138%" height="15" fill="rgb(226,3,54)"/><text x="29.8801%" y="95.50"></text></g><g><title>trait_impls_of (117,552 samples, 0.11%)</title><rect x="29.7482%" y="101" width="0.1081%" height="15" fill="rgb(245,192,40)"/><text x="29.9982%" y="111.50"></text></g><g><title>item_bodies_checking (3,414,437 samples, 3.14%)</title><rect x="26.7637%" y="149" width="3.1387%" height="15" fill="rgb(238,167,29)"/><text x="27.0137%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (3,412,437 samples, 3.14%)</title><rect x="26.7655%" y="133" width="3.1369%" height="15" fill="rgb(232,182,51)"/><text x="27.0155%" y="143.50">typ..</text></g><g><title>typeck (3,400,607 samples, 3.13%)</title><rect x="26.7764%" y="117" width="3.1260%" height="15" fill="rgb(231,60,39)"/><text x="27.0264%" y="127.50">typ..</text></g><g><title>impl_trait_ref (137,092 samples, 0.13%)</title><rect x="30.1344%" y="69" width="0.1260%" height="15" fill="rgb(208,69,12)"/><text x="30.3844%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (117,962 samples, 0.11%)</title><rect x="30.1520%" y="53" width="0.1084%" height="15" fill="rgb(235,93,37)"/><text x="30.4020%" y="63.50"></text></g><g><title>adt_destructor (306,423 samples, 0.28%)</title><rect x="30.0106%" y="117" width="0.2817%" height="15" fill="rgb(213,116,39)"/><text x="30.2606%" y="127.50"></text></g><g><title>coherent_trait (303,393 samples, 0.28%)</title><rect x="30.0133%" y="101" width="0.2789%" height="15" fill="rgb(222,207,29)"/><text x="30.2633%" y="111.50"></text></g><g><title>specialization_graph_of (301,503 samples, 0.28%)</title><rect x="30.0151%" y="85" width="0.2772%" height="15" fill="rgb(206,96,30)"/><text x="30.2651%" y="95.50"></text></g><g><title>item_types_checking (458,495 samples, 0.42%)</title><rect x="29.9024%" y="149" width="0.4215%" height="15" fill="rgb(218,138,4)"/><text x="30.1524%" y="159.50"></text></g><g><title>check_mod_item_types (456,325 samples, 0.42%)</title><rect x="29.9044%" y="133" width="0.4195%" height="15" fill="rgb(250,191,14)"/><text x="30.1544%" y="143.50"></text></g><g><title>fn_sig (192,753 samples, 0.18%)</title><rect x="30.3952%" y="117" width="0.1772%" height="15" fill="rgb(239,60,40)"/><text x="30.6452%" y="127.50"></text></g><g><title>item_bounds (157,462 samples, 0.14%)</title><rect x="30.6531%" y="117" width="0.1447%" height="15" fill="rgb(206,27,48)"/><text x="30.9031%" y="127.50"></text></g><g><title>predicates_of (122,591 samples, 0.11%)</title><rect x="30.7978%" y="117" width="0.1127%" height="15" fill="rgb(225,35,8)"/><text x="31.0478%" y="127.50"></text></g><g><title>predicates_defined_on (111,900 samples, 0.10%)</title><rect x="30.8077%" y="101" width="0.1029%" height="15" fill="rgb(250,213,24)"/><text x="31.0577%" y="111.50"></text></g><g><title>type_collecting (674,257 samples, 0.62%)</title><rect x="30.3249%" y="149" width="0.6198%" height="15" fill="rgb(247,123,22)"/><text x="30.5749%" y="159.50"></text></g><g><title>collect_mod_item_types (666,097 samples, 0.61%)</title><rect x="30.3324%" y="133" width="0.6123%" height="15" fill="rgb(231,138,38)"/><text x="30.5824%" y="143.50"></text></g><g><title>evaluate_obligation (185,973 samples, 0.17%)</title><rect x="31.2089%" y="117" width="0.1710%" height="15" fill="rgb(231,145,46)"/><text x="31.4589%" y="127.50"></text></g><g><title>check_impl_item_well_formed (552,857 samples, 0.51%)</title><rect x="30.9819%" y="133" width="0.5082%" height="15" fill="rgb(251,118,11)"/><text x="31.2319%" y="143.50"></text></g><g><title>check_item_well_formed (480,004 samples, 0.44%)</title><rect x="31.4901%" y="133" width="0.4412%" height="15" fill="rgb(217,147,25)"/><text x="31.7401%" y="143.50"></text></g><g><title>analysis (20,382,749 samples, 18.74%)</title><rect x="13.5342%" y="181" width="18.7369%" height="15" fill="rgb(247,81,37)"/><text x="13.7842%" y="191.50">analysis</text></g><g><title>type_check_crate (14,466,026 samples, 13.30%)</title><rect x="18.9732%" y="165" width="13.2980%" height="15" fill="rgb(209,12,38)"/><text x="19.2232%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,441,745 samples, 1.33%)</title><rect x="30.9458%" y="149" width="1.3253%" height="15" fill="rgb(227,1,9)"/><text x="31.1958%" y="159.50"></text></g><g><title>check_trait_item_well_formed (369,644 samples, 0.34%)</title><rect x="31.9313%" y="133" width="0.3398%" height="15" fill="rgb(248,47,43)"/><text x="32.1813%" y="143.50"></text></g><g><title>codegen_fn_attrs (150,422 samples, 0.14%)</title><rect x="37.5040%" y="133" width="0.1383%" height="15" fill="rgb(221,10,30)"/><text x="37.7540%" y="143.50"></text></g><g><title>layout_of (121,662 samples, 0.11%)</title><rect x="37.6589%" y="133" width="0.1118%" height="15" fill="rgb(210,229,1)"/><text x="37.9089%" y="143.50"></text></g><g><title>param_env (306,945 samples, 0.28%)</title><rect x="37.7708%" y="133" width="0.2822%" height="15" fill="rgb(222,148,37)"/><text x="38.0208%" y="143.50"></text></g><g><title>fn_abi_of_instance (849,050 samples, 0.78%)</title><rect x="37.2809%" y="149" width="0.7805%" height="15" fill="rgb(234,67,33)"/><text x="37.5309%" y="159.50"></text></g><g><title>layout_of (126,820 samples, 0.12%)</title><rect x="38.0891%" y="149" width="0.1166%" height="15" fill="rgb(247,98,35)"/><text x="38.3391%" y="159.50"></text></g><g><title>symbol_name (158,860 samples, 0.15%)</title><rect x="38.2057%" y="149" width="0.1460%" height="15" fill="rgb(247,138,52)"/><text x="38.4557%" y="159.50"></text></g><g><title>codegen_module (5,374,828 samples, 4.94%)</title><rect x="33.4196%" y="165" width="4.9408%" height="15" fill="rgb(213,79,30)"/><text x="33.6696%" y="175.50">codege..</text></g><g><title>codegen_crate (6,683,292 samples, 6.14%)</title><rect x="32.2782%" y="181" width="6.1436%" height="15" fill="rgb(246,177,23)"/><text x="32.5282%" y="191.50">codegen_..</text></g><g><title>LLVM_module_codegen (39,031,798 samples, 35.88%)</title><rect x="38.4923%" y="165" width="35.8801%" height="15" fill="rgb(230,62,27)"/><text x="38.7423%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (36,124,148 samples, 33.21%)</title><rect x="41.1651%" y="149" width="33.2073%" height="15" fill="rgb(216,154,8)"/><text x="41.4151%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (40,443,564 samples, 37.18%)</title><rect x="38.4218%" y="181" width="37.1779%" height="15" fill="rgb(244,35,45)"/><text x="38.6718%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,335,145 samples, 1.23%)</title><rect x="74.3724%" y="165" width="1.2273%" height="15" fill="rgb(251,115,12)"/><text x="74.6224%" y="175.50"></text></g><g><title>metadata_register_crate (2,214,894 samples, 2.04%)</title><rect x="82.1440%" y="133" width="2.0361%" height="15" fill="rgb(240,54,50)"/><text x="82.3940%" y="143.50">m..</text></g><g><title>metadata_register_crate (818,520 samples, 0.75%)</title><rect x="83.4276%" y="117" width="0.7524%" height="15" fill="rgb(233,84,52)"/><text x="83.6776%" y="127.50"></text></g><g><title>macro_expand_crate (9,037,297 samples, 8.31%)</title><rect x="75.8927%" y="165" width="8.3076%" height="15" fill="rgb(207,117,47)"/><text x="76.1427%" y="175.50">macro_expand..</text></g><g><title>expand_crate (9,020,747 samples, 8.29%)</title><rect x="75.9079%" y="149" width="8.2924%" height="15" fill="rgb(249,43,39)"/><text x="76.1579%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (673,597 samples, 0.62%)</title><rect x="84.3555%" y="149" width="0.6192%" height="15" fill="rgb(209,38,44)"/><text x="84.6055%" y="159.50"></text></g><g><title>configure_and_expand (10,228,150 samples, 9.40%)</title><rect x="75.5997%" y="181" width="9.4023%" height="15" fill="rgb(236,212,23)"/><text x="75.8497%" y="191.50">configure_and..</text></g><g><title>resolve_crate (781,428 samples, 0.72%)</title><rect x="84.2837%" y="165" width="0.7183%" height="15" fill="rgb(242,79,21)"/><text x="84.5337%" y="175.50"></text></g><g><title>free_global_ctxt (3,705,420 samples, 3.41%)</title><rect x="85.1228%" y="181" width="3.4062%" height="15" fill="rgb(211,96,35)"/><text x="85.3728%" y="191.50">fre..</text></g><g><title>is_reachable_non_generic (116,182 samples, 0.11%)</title><rect x="89.1769%" y="101" width="0.1068%" height="15" fill="rgb(253,215,40)"/><text x="89.4269%" y="111.50"></text></g><g><title>reachable_non_generics (110,652 samples, 0.10%)</title><rect x="89.1819%" y="85" width="0.1017%" height="15" fill="rgb(211,81,21)"/><text x="89.4319%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (109,422 samples, 0.10%)</title><rect x="89.1831%" y="69" width="0.1006%" height="15" fill="rgb(208,190,38)"/><text x="89.4331%" y="79.50"></text></g><g><title>eval_to_allocation_raw (131,792 samples, 0.12%)</title><rect x="89.5382%" y="85" width="0.1212%" height="15" fill="rgb(235,213,38)"/><text x="89.7882%" y="95.50"></text></g><g><title>eval_to_allocation_raw (124,202 samples, 0.11%)</title><rect x="89.5451%" y="69" width="0.1142%" height="15" fill="rgb(237,122,38)"/><text x="89.7951%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (207,433 samples, 0.19%)</title><rect x="89.8186%" y="85" width="0.1907%" height="15" fill="rgb(244,218,35)"/><text x="90.0686%" y="95.50"></text></g><g><title>optimized_mir (764,068 samples, 0.70%)</title><rect x="89.3106%" y="101" width="0.7024%" height="15" fill="rgb(240,68,47)"/><text x="89.5606%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (203,983 samples, 0.19%)</title><rect x="90.0877%" y="85" width="0.1875%" height="15" fill="rgb(210,16,53)"/><text x="90.3377%" y="95.50"></text></g><g><title>impl_parent (112,271 samples, 0.10%)</title><rect x="90.5170%" y="69" width="0.1032%" height="15" fill="rgb(235,124,12)"/><text x="90.7670%" y="79.50"></text></g><g><title>specialization_graph_of (438,465 samples, 0.40%)</title><rect x="90.3384%" y="85" width="0.4031%" height="15" fill="rgb(224,169,11)"/><text x="90.5884%" y="95.50"></text></g><g><title>impl_trait_ref (131,842 samples, 0.12%)</title><rect x="90.6202%" y="69" width="0.1212%" height="15" fill="rgb(250,166,2)"/><text x="90.8702%" y="79.50"></text></g><g><title>resolve_instance (814,320 samples, 0.75%)</title><rect x="90.0130%" y="101" width="0.7486%" height="15" fill="rgb(242,216,29)"/><text x="90.2630%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (355,004 samples, 0.33%)</title><rect x="90.7669%" y="101" width="0.3263%" height="15" fill="rgb(230,116,27)"/><text x="91.0169%" y="111.50"></text></g><g><title>upstream_monomorphizations (350,344 samples, 0.32%)</title><rect x="90.7711%" y="85" width="0.3221%" height="15" fill="rgb(228,99,48)"/><text x="91.0211%" y="95.50"></text></g><g><title>exported_symbols (259,282 samples, 0.24%)</title><rect x="90.8548%" y="69" width="0.2383%" height="15" fill="rgb(253,11,6)"/><text x="91.1048%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (254,402 samples, 0.23%)</title><rect x="90.8593%" y="53" width="0.2339%" height="15" fill="rgb(247,143,39)"/><text x="91.1093%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (2,448,157 samples, 2.25%)</title><rect x="88.9607%" y="117" width="2.2505%" height="15" fill="rgb(236,97,10)"/><text x="89.2107%" y="127.50">m..</text></g><g><title>vtable_entries (128,391 samples, 0.12%)</title><rect x="91.0932%" y="101" width="0.1180%" height="15" fill="rgb(233,208,19)"/><text x="91.3432%" y="111.50"></text></g><g><title>monomorphization_collector (2,472,017 samples, 2.27%)</title><rect x="88.9587%" y="133" width="2.2724%" height="15" fill="rgb(216,164,2)"/><text x="89.2087%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (153,501 samples, 0.14%)</title><rect x="91.2353%" y="117" width="0.1411%" height="15" fill="rgb(220,129,5)"/><text x="91.4853%" y="127.50"></text></g><g><title>symbol_name (142,151 samples, 0.13%)</title><rect x="91.2458%" y="101" width="0.1307%" height="15" fill="rgb(242,17,10)"/><text x="91.4958%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (2,750,449 samples, 2.53%)</title><rect x="88.9272%" y="149" width="2.5284%" height="15" fill="rgb(242,107,0)"/><text x="89.1772%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (244,192 samples, 0.22%)</title><rect x="91.2311%" y="133" width="0.2245%" height="15" fill="rgb(251,28,31)"/><text x="91.4811%" y="143.50"></text></g><g><title>exported_symbols (2,803,080 samples, 2.58%)</title><rect x="88.9036%" y="165" width="2.5767%" height="15" fill="rgb(233,223,10)"/><text x="89.1536%" y="175.50">ex..</text></g><g><title>optimized_mir (407,204 samples, 0.37%)</title><rect x="91.5130%" y="165" width="0.3743%" height="15" fill="rgb(215,21,27)"/><text x="91.7630%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (153,331 samples, 0.14%)</title><rect x="91.7464%" y="149" width="0.1410%" height="15" fill="rgb(232,23,21)"/><text x="91.9964%" y="159.50"></text></g><g><title>generate_crate_metadata (3,665,010 samples, 3.37%)</title><rect x="88.5291%" y="181" width="3.3691%" height="15" fill="rgb(244,5,23)"/><text x="88.7791%" y="191.50">gen..</text></g><g><title>hir_lowering (483,035 samples, 0.44%)</title><rect x="91.8981%" y="181" width="0.4440%" height="15" fill="rgb(226,81,46)"/><text x="92.1481%" y="191.50"></text></g><g><title>finish_ongoing_codegen (5,677,751 samples, 5.22%)</title><rect x="92.3560%" y="165" width="5.2193%" height="15" fill="rgb(247,70,30)"/><text x="92.6060%" y="175.50">finish..</text></g><g><title>link_crate (862,769 samples, 0.79%)</title><rect x="97.5753%" y="165" width="0.7931%" height="15" fill="rgb(212,68,19)"/><text x="97.8253%" y="175.50"></text></g><g><title>link_binary (850,789 samples, 0.78%)</title><rect x="97.5863%" y="149" width="0.7821%" height="15" fill="rgb(240,187,13)"/><text x="97.8363%" y="159.50"></text></g><g><title>link_rlib (515,535 samples, 0.47%)</title><rect x="97.8945%" y="133" width="0.4739%" height="15" fill="rgb(223,113,26)"/><text x="98.1445%" y="143.50"></text></g><g><title>link (6,564,530 samples, 6.03%)</title><rect x="92.3422%" y="181" width="6.0345%" height="15" fill="rgb(206,192,2)"/><text x="92.5922%" y="191.50">link</text></g><g><title>parse_crate (535,116 samples, 0.49%)</title><rect x="98.3766%" y="181" width="0.4919%" height="15" fill="rgb(241,108,4)"/><text x="98.6266%" y="191.50"></text></g><g><title>prepare_outputs (173,741 samples, 0.16%)</title><rect x="98.8753%" y="181" width="0.1597%" height="15" fill="rgb(247,173,49)"/><text x="99.1253%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (681,227 samples, 0.63%)</title><rect x="99.0350%" y="181" width="0.6262%" height="15" fill="rgb(224,114,35)"/><text x="99.2850%" y="191.50"></text></g><g><title>all (108,783,859 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (108,783,859 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (286,963 samples, 0.26%)</title><rect x="99.7362%" y="181" width="0.2638%" height="15" fill="rgb(236,23,11)"/><text x="99.9862%" y="191.50"></text></g></svg></svg>