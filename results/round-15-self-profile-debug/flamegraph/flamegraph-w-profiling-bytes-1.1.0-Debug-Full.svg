<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (115,447,778 samples, 8.90%)</title><rect x="0.0827%" y="245" width="8.9022%" height="15" fill="rgb(227,0,7)"/><text x="0.3327%" y="255.50">LLVM_passes</text></g><g><title>is_copy_raw (1,818,685 samples, 0.14%)</title><rect x="16.1344%" y="117" width="0.1402%" height="15" fill="rgb(217,0,24)"/><text x="16.3844%" y="127.50"></text></g><g><title>evaluate_obligation (1,458,654 samples, 0.11%)</title><rect x="16.1621%" y="101" width="0.1125%" height="15" fill="rgb(221,193,54)"/><text x="16.4121%" y="111.50"></text></g><g><title>needs_drop_raw (2,210,759 samples, 0.17%)</title><rect x="16.1043%" y="133" width="0.1705%" height="15" fill="rgb(248,212,6)"/><text x="16.3543%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,344,216 samples, 0.10%)</title><rect x="16.3568%" y="117" width="0.1037%" height="15" fill="rgb(208,68,35)"/><text x="16.6068%" y="127.50"></text></g><g><title>resolve_instance (2,972,575 samples, 0.23%)</title><rect x="16.2748%" y="133" width="0.2292%" height="15" fill="rgb(232,128,0)"/><text x="16.5248%" y="143.50"></text></g><g><title>thir_body (6,771,940 samples, 0.52%)</title><rect x="16.5158%" y="133" width="0.5222%" height="15" fill="rgb(207,160,47)"/><text x="16.7658%" y="143.50"></text></g><g><title>mir_const (36,818,539 samples, 2.84%)</title><rect x="14.2088%" y="181" width="2.8391%" height="15" fill="rgb(228,23,34)"/><text x="14.4588%" y="191.50">mi..</text></g><g><title>unsafety_check_result (31,332,141 samples, 2.42%)</title><rect x="14.6318%" y="165" width="2.4160%" height="15" fill="rgb(218,30,26)"/><text x="14.8818%" y="175.50">un..</text></g><g><title>mir_built (27,463,174 samples, 2.12%)</title><rect x="14.9302%" y="149" width="2.1177%" height="15" fill="rgb(220,122,19)"/><text x="15.1802%" y="159.50">m..</text></g><g><title>mir_const_qualif (1,339,116 samples, 0.10%)</title><rect x="17.0479%" y="181" width="0.1033%" height="15" fill="rgb(250,228,42)"/><text x="17.2979%" y="191.50"></text></g><g><title>mir_promoted (42,638,744 samples, 3.29%)</title><rect x="13.8633%" y="197" width="3.2879%" height="15" fill="rgb(240,193,28)"/><text x="14.1133%" y="207.50">mir..</text></g><g><title>type_op_normalize_fn_sig (1,415,937 samples, 0.11%)</title><rect x="17.2441%" y="197" width="0.1092%" height="15" fill="rgb(216,20,37)"/><text x="17.4941%" y="207.50"></text></g><g><title>type_op_prove_predicate (6,946,076 samples, 0.54%)</title><rect x="17.3858%" y="197" width="0.5356%" height="15" fill="rgb(206,188,39)"/><text x="17.6358%" y="207.50"></text></g><g><title>MIR_borrow_checking (114,823,693 samples, 8.85%)</title><rect x="9.0685%" y="229" width="8.8541%" height="15" fill="rgb(217,207,13)"/><text x="9.3185%" y="239.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (113,925,466 samples, 8.78%)</title><rect x="9.1377%" y="213" width="8.7848%" height="15" fill="rgb(231,73,38)"/><text x="9.3877%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (1,467,953 samples, 0.11%)</title><rect x="18.1217%" y="197" width="0.1132%" height="15" fill="rgb(225,20,46)"/><text x="18.3717%" y="207.50"></text></g><g><title>check_mod_attrs (2,418,273 samples, 0.19%)</title><rect x="18.0485%" y="213" width="0.1865%" height="15" fill="rgb(210,31,41)"/><text x="18.2985%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (1,726,460 samples, 0.13%)</title><rect x="18.3078%" y="213" width="0.1331%" height="15" fill="rgb(221,200,47)"/><text x="18.5578%" y="223.50"></text></g><g><title>misc_checking_1 (5,288,363 samples, 0.41%)</title><rect x="18.0446%" y="229" width="0.4078%" height="15" fill="rgb(226,26,5)"/><text x="18.2946%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (2,106,361 samples, 0.16%)</title><rect x="18.4526%" y="213" width="0.1624%" height="15" fill="rgb(249,33,26)"/><text x="18.7026%" y="223.50"></text></g><g><title>check_mod_liveness (1,696,298 samples, 0.13%)</title><rect x="18.4842%" y="197" width="0.1308%" height="15" fill="rgb(235,183,28)"/><text x="18.7342%" y="207.50"></text></g><g><title>misc_checking_2 (4,421,854 samples, 0.34%)</title><rect x="18.4524%" y="229" width="0.3410%" height="15" fill="rgb(221,5,38)"/><text x="18.7024%" y="239.50"></text></g><g><title>match_checking (2,313,623 samples, 0.18%)</title><rect x="18.6150%" y="213" width="0.1784%" height="15" fill="rgb(247,18,42)"/><text x="18.8650%" y="223.50"></text></g><g><title>check_match (2,086,281 samples, 0.16%)</title><rect x="18.6325%" y="197" width="0.1609%" height="15" fill="rgb(241,131,45)"/><text x="18.8825%" y="207.50"></text></g><g><title>death_checking (1,673,537 samples, 0.13%)</title><rect x="18.8866%" y="213" width="0.1290%" height="15" fill="rgb(249,31,29)"/><text x="19.1366%" y="223.50"></text></g><g><title>crate_lints (5,208,022 samples, 0.40%)</title><rect x="19.0158%" y="197" width="0.4016%" height="15" fill="rgb(225,111,53)"/><text x="19.2658%" y="207.50"></text></g><g><title>lint_checking (7,285,733 samples, 0.56%)</title><rect x="19.0156%" y="213" width="0.5618%" height="15" fill="rgb(238,160,17)"/><text x="19.2656%" y="223.50"></text></g><g><title>module_lints (2,074,741 samples, 0.16%)</title><rect x="19.4174%" y="197" width="0.1600%" height="15" fill="rgb(214,148,48)"/><text x="19.6674%" y="207.50"></text></g><g><title>lint_mod (2,058,700 samples, 0.16%)</title><rect x="19.4187%" y="181" width="0.1587%" height="15" fill="rgb(232,36,49)"/><text x="19.6687%" y="191.50"></text></g><g><title>privacy_checking_modules (3,445,395 samples, 0.27%)</title><rect x="19.6763%" y="213" width="0.2657%" height="15" fill="rgb(209,103,24)"/><text x="19.9263%" y="223.50"></text></g><g><title>check_mod_privacy (3,432,585 samples, 0.26%)</title><rect x="19.6773%" y="197" width="0.2647%" height="15" fill="rgb(229,88,8)"/><text x="19.9273%" y="207.50"></text></g><g><title>misc_checking_3 (14,934,790 samples, 1.15%)</title><rect x="18.7934%" y="229" width="1.1516%" height="15" fill="rgb(213,181,19)"/><text x="19.0434%" y="239.50"></text></g><g><title>impl_parent (2,782,841 samples, 0.21%)</title><rect x="20.3853%" y="165" width="0.2146%" height="15" fill="rgb(254,191,54)"/><text x="20.6353%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,641,221 samples, 0.13%)</title><rect x="20.4733%" y="149" width="0.1266%" height="15" fill="rgb(241,83,37)"/><text x="20.7233%" y="159.50"></text></g><g><title>impl_trait_ref (6,357,050 samples, 0.49%)</title><rect x="20.5998%" y="165" width="0.4902%" height="15" fill="rgb(233,36,39)"/><text x="20.8498%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,260,046 samples, 0.41%)</title><rect x="20.6844%" y="149" width="0.4056%" height="15" fill="rgb(226,3,54)"/><text x="20.9344%" y="159.50"></text></g><g><title>coherent_trait (15,598,197 samples, 1.20%)</title><rect x="19.9953%" y="197" width="1.2028%" height="15" fill="rgb(245,192,40)"/><text x="20.2453%" y="207.50"></text></g><g><title>specialization_graph_of (15,547,766 samples, 1.20%)</title><rect x="19.9992%" y="181" width="1.1989%" height="15" fill="rgb(238,167,29)"/><text x="20.2492%" y="191.50"></text></g><g><title>coherence_checking (15,803,239 samples, 1.22%)</title><rect x="19.9925%" y="213" width="1.2186%" height="15" fill="rgb(232,182,51)"/><text x="20.2425%" y="223.50"></text></g><g><title>associated_items (1,557,802 samples, 0.12%)</title><rect x="28.4056%" y="165" width="0.1201%" height="15" fill="rgb(231,60,39)"/><text x="28.6556%" y="175.50"></text></g><g><title>specializes (2,233,082 samples, 0.17%)</title><rect x="29.6010%" y="149" width="0.1722%" height="15" fill="rgb(208,69,12)"/><text x="29.8510%" y="159.50"></text></g><g><title>param_env (1,301,041 samples, 0.10%)</title><rect x="29.6729%" y="133" width="0.1003%" height="15" fill="rgb(235,93,37)"/><text x="29.9229%" y="143.50"></text></g><g><title>evaluate_obligation (14,610,395 samples, 1.13%)</title><rect x="28.6877%" y="165" width="1.1266%" height="15" fill="rgb(213,116,39)"/><text x="28.9377%" y="175.50"></text></g><g><title>method_autoderef_steps (1,367,432 samples, 0.11%)</title><rect x="29.9955%" y="165" width="0.1054%" height="15" fill="rgb(222,207,29)"/><text x="30.2455%" y="175.50"></text></g><g><title>mir_for_ctfe (1,361,076 samples, 0.10%)</title><rect x="31.5941%" y="117" width="0.1050%" height="15" fill="rgb(206,96,30)"/><text x="31.8441%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,820,649 samples, 0.22%)</title><rect x="31.5473%" y="133" width="0.2175%" height="15" fill="rgb(218,138,4)"/><text x="31.7973%" y="143.50"></text></g><g><title>mir_for_ctfe (1,737,196 samples, 0.13%)</title><rect x="31.8510%" y="101" width="0.1340%" height="15" fill="rgb(250,191,14)"/><text x="32.1010%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,483,785 samples, 0.11%)</title><rect x="31.8705%" y="85" width="0.1144%" height="15" fill="rgb(239,60,40)"/><text x="32.1205%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,065,959 samples, 0.16%)</title><rect x="31.9934%" y="85" width="0.1593%" height="15" fill="rgb(206,27,48)"/><text x="32.2434%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,049,199 samples, 0.16%)</title><rect x="31.9947%" y="69" width="0.1580%" height="15" fill="rgb(225,35,8)"/><text x="32.2447%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,016,799 samples, 0.16%)</title><rect x="31.9972%" y="53" width="0.1555%" height="15" fill="rgb(250,213,24)"/><text x="32.2472%" y="63.50"></text></g><g><title>mir_for_ctfe (1,337,755 samples, 0.10%)</title><rect x="32.0496%" y="37" width="0.1032%" height="15" fill="rgb(247,123,22)"/><text x="32.2996%" y="47.50"></text></g><g><title>eval_to_const_value_raw (7,938,348 samples, 0.61%)</title><rect x="31.5420%" y="149" width="0.6121%" height="15" fill="rgb(231,138,38)"/><text x="31.7920%" y="159.50"></text></g><g><title>eval_to_const_value_raw (5,049,998 samples, 0.39%)</title><rect x="31.7648%" y="133" width="0.3894%" height="15" fill="rgb(231,145,46)"/><text x="32.0148%" y="143.50"></text></g><g><title>eval_to_allocation_raw (5,004,658 samples, 0.39%)</title><rect x="31.7683%" y="117" width="0.3859%" height="15" fill="rgb(251,118,11)"/><text x="32.0183%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,160,939 samples, 0.17%)</title><rect x="31.9875%" y="101" width="0.1666%" height="15" fill="rgb(217,147,25)"/><text x="32.2375%" y="111.50"></text></g><g><title>typeck (26,867,289 samples, 2.07%)</title><rect x="30.2485%" y="165" width="2.0717%" height="15" fill="rgb(247,81,37)"/><text x="30.4985%" y="175.50">t..</text></g><g><title>item_bodies_checking (144,171,867 samples, 11.12%)</title><rect x="21.2218%" y="213" width="11.1171%" height="15" fill="rgb(209,12,38)"/><text x="21.4718%" y="223.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (144,167,837 samples, 11.12%)</title><rect x="21.2221%" y="197" width="11.1168%" height="15" fill="rgb(227,1,9)"/><text x="21.4721%" y="207.50">typeck_item_bodi..</text></g><g><title>typeck (143,546,120 samples, 11.07%)</title><rect x="21.2700%" y="181" width="11.0689%" height="15" fill="rgb(248,47,43)"/><text x="21.5200%" y="191.50">typeck</text></g><g><title>typeck (1,811,577 samples, 0.14%)</title><rect x="32.8020%" y="181" width="0.1397%" height="15" fill="rgb(221,10,30)"/><text x="33.0520%" y="191.50"></text></g><g><title>item_types_checking (7,822,538 samples, 0.60%)</title><rect x="32.3389%" y="213" width="0.6032%" height="15" fill="rgb(210,229,1)"/><text x="32.5889%" y="223.50"></text></g><g><title>check_mod_item_types (7,804,337 samples, 0.60%)</title><rect x="32.3403%" y="197" width="0.6018%" height="15" fill="rgb(222,148,37)"/><text x="32.5903%" y="207.50"></text></g><g><title>fn_sig (1,416,861 samples, 0.11%)</title><rect x="33.0331%" y="181" width="0.1093%" height="15" fill="rgb(234,67,33)"/><text x="33.2831%" y="191.50"></text></g><g><title>generics_of (2,071,927 samples, 0.16%)</title><rect x="33.1423%" y="181" width="0.1598%" height="15" fill="rgb(247,98,35)"/><text x="33.3923%" y="191.50"></text></g><g><title>predicates_of (1,933,547 samples, 0.15%)</title><rect x="33.3244%" y="181" width="0.1491%" height="15" fill="rgb(247,138,52)"/><text x="33.5744%" y="191.50"></text></g><g><title>predicates_defined_on (1,693,854 samples, 0.13%)</title><rect x="33.3429%" y="165" width="0.1306%" height="15" fill="rgb(213,79,30)"/><text x="33.5929%" y="175.50"></text></g><g><title>type_collecting (7,304,873 samples, 0.56%)</title><rect x="32.9430%" y="213" width="0.5633%" height="15" fill="rgb(246,177,23)"/><text x="33.1930%" y="223.50"></text></g><g><title>collect_mod_item_types (7,277,023 samples, 0.56%)</title><rect x="32.9451%" y="197" width="0.5611%" height="15" fill="rgb(230,62,27)"/><text x="33.1951%" y="207.50"></text></g><g><title>evaluate_obligation (1,557,683 samples, 0.12%)</title><rect x="34.3772%" y="181" width="0.1201%" height="15" fill="rgb(216,154,8)"/><text x="34.6272%" y="191.50"></text></g><g><title>param_env (1,631,445 samples, 0.13%)</title><rect x="34.5666%" y="181" width="0.1258%" height="15" fill="rgb(244,35,45)"/><text x="34.8166%" y="191.50"></text></g><g><title>region_scope_tree (1,664,513 samples, 0.13%)</title><rect x="34.6968%" y="181" width="0.1284%" height="15" fill="rgb(251,115,12)"/><text x="34.9468%" y="191.50"></text></g><g><title>check_impl_item_well_formed (16,054,286 samples, 1.24%)</title><rect x="33.5894%" y="197" width="1.2380%" height="15" fill="rgb(240,54,50)"/><text x="33.8394%" y="207.50"></text></g><g><title>evaluate_obligation (1,639,477 samples, 0.13%)</title><rect x="35.3354%" y="117" width="0.1264%" height="15" fill="rgb(233,84,52)"/><text x="35.5854%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,536,436 samples, 0.27%)</title><rect x="35.1965%" y="181" width="0.2727%" height="15" fill="rgb(207,117,47)"/><text x="35.4465%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,519,555 samples, 0.27%)</title><rect x="35.1978%" y="165" width="0.2714%" height="15" fill="rgb(249,43,39)"/><text x="35.4478%" y="175.50"></text></g><g><title>eval_to_allocation_raw (3,514,815 samples, 0.27%)</title><rect x="35.1981%" y="149" width="0.2710%" height="15" fill="rgb(209,38,44)"/><text x="35.4481%" y="159.50"></text></g><g><title>typeck (1,964,499 samples, 0.15%)</title><rect x="35.3177%" y="133" width="0.1515%" height="15" fill="rgb(236,212,23)"/><text x="35.5677%" y="143.50"></text></g><g><title>check_item_well_formed (12,304,573 samples, 0.95%)</title><rect x="34.8274%" y="197" width="0.9488%" height="15" fill="rgb(242,79,21)"/><text x="35.0774%" y="207.50"></text></g><g><title>analysis (351,011,272 samples, 27.07%)</title><rect x="8.9850%" y="245" width="27.0666%" height="15" fill="rgb(211,96,35)"/><text x="9.2350%" y="255.50">analysis</text></g><g><title>type_check_crate (208,876,815 samples, 16.11%)</title><rect x="19.9450%" y="229" width="16.1066%" height="15" fill="rgb(253,215,40)"/><text x="20.1950%" y="239.50">type_check_crate</text></g><g><title>wf_checking (32,963,821 samples, 2.54%)</title><rect x="33.5097%" y="213" width="2.5419%" height="15" fill="rgb(211,81,21)"/><text x="33.7597%" y="223.50">wf..</text></g><g><title>check_trait_item_well_formed (3,571,175 samples, 0.28%)</title><rect x="35.7762%" y="197" width="0.2754%" height="15" fill="rgb(208,190,38)"/><text x="36.0262%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (1,434,217 samples, 0.11%)</title><rect x="43.3101%" y="213" width="0.1106%" height="15" fill="rgb(235,213,38)"/><text x="43.5601%" y="223.50"></text></g><g><title>const_caller_location (2,148,817 samples, 0.17%)</title><rect x="43.4207%" y="213" width="0.1657%" height="15" fill="rgb(237,122,38)"/><text x="43.6707%" y="223.50"></text></g><g><title>layout_of (1,573,655 samples, 0.12%)</title><rect x="44.0134%" y="197" width="0.1213%" height="15" fill="rgb(244,218,35)"/><text x="44.2634%" y="207.50"></text></g><g><title>predicates_of (1,713,234 samples, 0.13%)</title><rect x="44.4020%" y="181" width="0.1321%" height="15" fill="rgb(240,68,47)"/><text x="44.6520%" y="191.50"></text></g><g><title>param_env (5,183,495 samples, 0.40%)</title><rect x="44.1348%" y="197" width="0.3997%" height="15" fill="rgb(210,16,53)"/><text x="44.3848%" y="207.50"></text></g><g><title>fn_abi_of_instance (13,295,517 samples, 1.03%)</title><rect x="43.5890%" y="213" width="1.0252%" height="15" fill="rgb(235,124,12)"/><text x="43.8390%" y="223.50"></text></g><g><title>layout_of (1,400,406 samples, 0.11%)</title><rect x="44.6890%" y="213" width="0.1080%" height="15" fill="rgb(224,169,11)"/><text x="44.9390%" y="223.50"></text></g><g><title>codegen_module (111,612,557 samples, 8.61%)</title><rect x="36.2305%" y="229" width="8.6065%" height="15" fill="rgb(250,166,2)"/><text x="36.4805%" y="239.50">codegen_modu..</text></g><g><title>codegen_crate (114,006,264 samples, 8.79%)</title><rect x="36.0522%" y="245" width="8.7911%" height="15" fill="rgb(242,216,29)"/><text x="36.3022%" y="255.50">codegen_crate</text></g><g><title>LLVM_module_codegen (523,099,963 samples, 40.34%)</title><rect x="44.8624%" y="229" width="40.3364%" height="15" fill="rgb(230,116,27)"/><text x="45.1124%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (500,794,347 samples, 38.62%)</title><rect x="46.5824%" y="213" width="38.6164%" height="15" fill="rgb(228,99,48)"/><text x="46.8324%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (556,282,403 samples, 42.90%)</title><rect x="44.8433%" y="245" width="42.8951%" height="15" fill="rgb(253,11,6)"/><text x="45.0933%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,934,470 samples, 2.54%)</title><rect x="85.1988%" y="229" width="2.5396%" height="15" fill="rgb(247,143,39)"/><text x="85.4488%" y="239.50">LL..</text></g><g><title>macro_expand_crate (43,024,211 samples, 3.32%)</title><rect x="87.8100%" y="229" width="3.3176%" height="15" fill="rgb(236,97,10)"/><text x="88.0600%" y="239.50">mac..</text></g><g><title>expand_crate (43,011,791 samples, 3.32%)</title><rect x="87.8110%" y="213" width="3.3167%" height="15" fill="rgb(233,208,19)"/><text x="88.0610%" y="223.50">exp..</text></g><g><title>late_resolve_crate (6,700,147 samples, 0.52%)</title><rect x="91.1645%" y="213" width="0.5167%" height="15" fill="rgb(216,164,2)"/><text x="91.4145%" y="223.50"></text></g><g><title>configure_and_expand (51,631,338 samples, 3.98%)</title><rect x="87.7384%" y="245" width="3.9813%" height="15" fill="rgb(220,129,5)"/><text x="87.9884%" y="255.50">conf..</text></g><g><title>resolve_crate (7,575,086 samples, 0.58%)</title><rect x="91.1356%" y="229" width="0.5841%" height="15" fill="rgb(242,17,10)"/><text x="91.3856%" y="239.50"></text></g><g><title>early_lint_checks (1,621,696 samples, 0.13%)</title><rect x="91.7806%" y="245" width="0.1250%" height="15" fill="rgb(242,107,0)"/><text x="92.0306%" y="255.50"></text></g><g><title>free_global_ctxt (10,539,665 samples, 0.81%)</title><rect x="91.9056%" y="245" width="0.8127%" height="15" fill="rgb(251,28,31)"/><text x="92.1556%" y="255.50"></text></g><g><title>codegen_fn_attrs (1,861,188 samples, 0.14%)</title><rect x="93.5818%" y="165" width="0.1435%" height="15" fill="rgb(233,223,10)"/><text x="93.8318%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,083,696 samples, 0.24%)</title><rect x="94.3297%" y="149" width="0.2378%" height="15" fill="rgb(215,21,27)"/><text x="94.5797%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,384,872 samples, 0.49%)</title><rect x="94.5675%" y="149" width="0.4923%" height="15" fill="rgb(232,23,21)"/><text x="94.8175%" y="159.50"></text></g><g><title>optimized_mir (17,695,586 samples, 1.36%)</title><rect x="93.8049%" y="165" width="1.3645%" height="15" fill="rgb(244,5,23)"/><text x="94.0549%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (3,449,977 samples, 0.27%)</title><rect x="95.2739%" y="149" width="0.2660%" height="15" fill="rgb(226,81,46)"/><text x="95.5239%" y="159.50"></text></g><g><title>resolve_instance (6,611,440 samples, 0.51%)</title><rect x="95.1694%" y="165" width="0.5098%" height="15" fill="rgb(247,70,30)"/><text x="95.4194%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (32,146,902 samples, 2.48%)</title><rect x="93.2849%" y="181" width="2.4789%" height="15" fill="rgb(212,68,19)"/><text x="93.5349%" y="191.50">mo..</text></g><g><title>monomorphization_collector (32,387,944 samples, 2.50%)</title><rect x="93.2846%" y="197" width="2.4974%" height="15" fill="rgb(240,187,13)"/><text x="93.5346%" y="207.50">mo..</text></g><g><title>assert_symbols_are_distinct (3,105,632 samples, 0.24%)</title><rect x="95.7826%" y="181" width="0.2395%" height="15" fill="rgb(223,113,26)"/><text x="96.0326%" y="191.50"></text></g><g><title>symbol_name (2,791,430 samples, 0.22%)</title><rect x="95.8069%" y="165" width="0.2152%" height="15" fill="rgb(206,192,2)"/><text x="96.0569%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (37,084,122 samples, 2.86%)</title><rect x="93.2810%" y="213" width="2.8596%" height="15" fill="rgb(241,108,4)"/><text x="93.5310%" y="223.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (4,649,768 samples, 0.36%)</title><rect x="95.7820%" y="197" width="0.3585%" height="15" fill="rgb(247,173,49)"/><text x="96.0320%" y="207.50"></text></g><g><title>cgu_partitioning (1,536,016 samples, 0.12%)</title><rect x="96.0221%" y="181" width="0.1184%" height="15" fill="rgb(224,114,35)"/><text x="96.2721%" y="191.50"></text></g><g><title>exported_symbols (37,816,600 samples, 2.92%)</title><rect x="93.2699%" y="229" width="2.9161%" height="15" fill="rgb(245,159,27)"/><text x="93.5199%" y="239.50">ex..</text></g><g><title>layout_of (1,785,794 samples, 0.14%)</title><rect x="97.1353%" y="213" width="0.1377%" height="15" fill="rgb(245,172,44)"/><text x="97.3853%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,241,433 samples, 0.87%)</title><rect x="97.2730%" y="213" width="0.8668%" height="15" fill="rgb(236,23,11)"/><text x="97.5230%" y="223.50"></text></g><g><title>optimized_mir (26,233,470 samples, 2.02%)</title><rect x="96.2248%" y="229" width="2.0229%" height="15" fill="rgb(205,117,38)"/><text x="96.4748%" y="239.50">o..</text></g><g><title>generate_crate_metadata (72,132,934 samples, 5.56%)</title><rect x="92.7183%" y="245" width="5.5622%" height="15" fill="rgb(237,72,25)"/><text x="92.9683%" y="255.50">generat..</text></g><g><title>hir_lowering (13,502,606 samples, 1.04%)</title><rect x="98.2805%" y="245" width="1.0412%" height="15" fill="rgb(244,70,9)"/><text x="98.5305%" y="255.50"></text></g><g><title>link_crate (3,502,105 samples, 0.27%)</title><rect x="99.3291%" y="229" width="0.2700%" height="15" fill="rgb(217,125,39)"/><text x="99.5791%" y="239.50"></text></g><g><title>link_binary (3,398,504 samples, 0.26%)</title><rect x="99.3371%" y="213" width="0.2621%" height="15" fill="rgb(235,36,10)"/><text x="99.5871%" y="223.50"></text></g><g><title>link_rlib (2,683,997 samples, 0.21%)</title><rect x="99.3922%" y="197" width="0.2070%" height="15" fill="rgb(251,123,47)"/><text x="99.6422%" y="207.50"></text></g><g><title>link (3,610,546 samples, 0.28%)</title><rect x="99.3217%" y="245" width="0.2784%" height="15" fill="rgb(221,13,13)"/><text x="99.5717%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (3,638,557 samples, 0.28%)</title><rect x="99.6636%" y="245" width="0.2806%" height="15" fill="rgb(238,131,9)"/><text x="99.9136%" y="255.50"></text></g><g><title>all (1,296,842,233 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (1,296,842,233 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>