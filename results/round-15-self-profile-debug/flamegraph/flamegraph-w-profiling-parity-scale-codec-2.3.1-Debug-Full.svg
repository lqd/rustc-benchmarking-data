<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (105,152,038 samples, 6.83%)</title><rect x="0.0724%" y="181" width="6.8317%" height="15" fill="rgb(227,0,7)"/><text x="0.3224%" y="191.50">LLVM_pass..</text></g><g><title>is_copy_raw (8,769,313 samples, 0.57%)</title><rect x="15.5553%" y="53" width="0.5697%" height="15" fill="rgb(217,0,24)"/><text x="15.8053%" y="63.50"></text></g><g><title>evaluate_obligation (7,237,098 samples, 0.47%)</title><rect x="15.6549%" y="37" width="0.4702%" height="15" fill="rgb(221,193,54)"/><text x="15.9049%" y="47.50"></text></g><g><title>needs_drop_raw (10,769,047 samples, 0.70%)</title><rect x="15.4338%" y="69" width="0.6997%" height="15" fill="rgb(248,212,6)"/><text x="15.6838%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,836,282 samples, 0.18%)</title><rect x="16.2292%" y="53" width="0.1843%" height="15" fill="rgb(208,68,35)"/><text x="16.4792%" y="63.50"></text></g><g><title>specialization_graph_of (2,572,077 samples, 0.17%)</title><rect x="16.4269%" y="53" width="0.1671%" height="15" fill="rgb(232,128,0)"/><text x="16.6769%" y="63.50"></text></g><g><title>resolve_instance (7,326,055 samples, 0.48%)</title><rect x="16.1358%" y="69" width="0.4760%" height="15" fill="rgb(207,160,47)"/><text x="16.3858%" y="79.50"></text></g><g><title>thir_body (7,683,024 samples, 0.50%)</title><rect x="16.6230%" y="69" width="0.4992%" height="15" fill="rgb(228,23,34)"/><text x="16.8730%" y="79.50"></text></g><g><title>mir_const (60,131,309 samples, 3.91%)</title><rect x="13.2272%" y="117" width="3.9067%" height="15" fill="rgb(218,30,26)"/><text x="13.4772%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (53,533,352 samples, 3.48%)</title><rect x="13.6558%" y="101" width="3.4780%" height="15" fill="rgb(220,122,19)"/><text x="13.9058%" y="111.50">uns..</text></g><g><title>mir_built (48,995,286 samples, 3.18%)</title><rect x="13.9507%" y="85" width="3.1832%" height="15" fill="rgb(250,228,42)"/><text x="14.2007%" y="95.50">mir..</text></g><g><title>mir_promoted (67,379,557 samples, 4.38%)</title><rect x="12.8491%" y="133" width="4.3776%" height="15" fill="rgb(240,193,28)"/><text x="13.0991%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (5,491,898 samples, 0.36%)</title><rect x="17.2271%" y="133" width="0.3568%" height="15" fill="rgb(216,20,37)"/><text x="17.4771%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,091,176 samples, 0.20%)</title><rect x="17.5839%" y="133" width="0.2008%" height="15" fill="rgb(206,188,39)"/><text x="17.8339%" y="143.50"></text></g><g><title>normalize_projection_ty (2,022,703 samples, 0.13%)</title><rect x="17.6533%" y="117" width="0.1314%" height="15" fill="rgb(217,207,13)"/><text x="17.9033%" y="127.50"></text></g><g><title>type_op_prove_predicate (15,962,367 samples, 1.04%)</title><rect x="17.8817%" y="133" width="1.0371%" height="15" fill="rgb(231,73,38)"/><text x="18.1317%" y="143.50"></text></g><g><title>MIR_borrow_checking (183,375,692 samples, 11.91%)</title><rect x="7.0064%" y="165" width="11.9138%" height="15" fill="rgb(225,20,46)"/><text x="7.2564%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (182,528,123 samples, 11.86%)</title><rect x="7.0615%" y="149" width="11.8588%" height="15" fill="rgb(210,31,41)"/><text x="7.3115%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,269,752 samples, 0.15%)</title><rect x="19.0503%" y="149" width="0.1475%" height="15" fill="rgb(221,200,47)"/><text x="19.3003%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,054,971 samples, 0.13%)</title><rect x="19.2668%" y="149" width="0.1335%" height="15" fill="rgb(226,26,5)"/><text x="19.5168%" y="159.50"></text></g><g><title>misc_checking_1 (5,630,707 samples, 0.37%)</title><rect x="19.0475%" y="165" width="0.3658%" height="15" fill="rgb(249,33,26)"/><text x="19.2975%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,033,961 samples, 0.26%)</title><rect x="19.4135%" y="149" width="0.2621%" height="15" fill="rgb(235,183,28)"/><text x="19.6635%" y="159.50"></text></g><g><title>check_mod_liveness (3,190,561 samples, 0.21%)</title><rect x="19.4683%" y="133" width="0.2073%" height="15" fill="rgb(221,5,38)"/><text x="19.7183%" y="143.50"></text></g><g><title>misc_checking_2 (8,679,368 samples, 0.56%)</title><rect x="19.4133%" y="165" width="0.5639%" height="15" fill="rgb(247,18,42)"/><text x="19.6633%" y="175.50"></text></g><g><title>match_checking (4,642,807 samples, 0.30%)</title><rect x="19.6756%" y="149" width="0.3016%" height="15" fill="rgb(241,131,45)"/><text x="19.9256%" y="159.50"></text></g><g><title>check_match (4,414,195 samples, 0.29%)</title><rect x="19.6904%" y="133" width="0.2868%" height="15" fill="rgb(249,31,29)"/><text x="19.9404%" y="143.50"></text></g><g><title>death_checking (2,312,553 samples, 0.15%)</title><rect x="20.0564%" y="149" width="0.1502%" height="15" fill="rgb(225,111,53)"/><text x="20.3064%" y="159.50"></text></g><g><title>crate_lints (4,996,881 samples, 0.32%)</title><rect x="20.2068%" y="133" width="0.3246%" height="15" fill="rgb(238,160,17)"/><text x="20.4568%" y="143.50"></text></g><g><title>lint_checking (8,069,022 samples, 0.52%)</title><rect x="20.2066%" y="149" width="0.5242%" height="15" fill="rgb(214,148,48)"/><text x="20.4566%" y="159.50"></text></g><g><title>module_lints (3,069,541 samples, 0.20%)</title><rect x="20.5314%" y="133" width="0.1994%" height="15" fill="rgb(232,36,49)"/><text x="20.7814%" y="143.50"></text></g><g><title>lint_mod (3,056,101 samples, 0.20%)</title><rect x="20.5323%" y="117" width="0.1986%" height="15" fill="rgb(209,103,24)"/><text x="20.7823%" y="127.50"></text></g><g><title>privacy_access_levels (2,717,657 samples, 0.18%)</title><rect x="20.7309%" y="149" width="0.1766%" height="15" fill="rgb(229,88,8)"/><text x="20.9809%" y="159.50"></text></g><g><title>privacy_checking_modules (6,437,105 samples, 0.42%)</title><rect x="20.9074%" y="149" width="0.4182%" height="15" fill="rgb(213,181,19)"/><text x="21.1574%" y="159.50"></text></g><g><title>check_mod_privacy (6,426,325 samples, 0.42%)</title><rect x="20.9081%" y="133" width="0.4175%" height="15" fill="rgb(254,191,54)"/><text x="21.1581%" y="143.50"></text></g><g><title>misc_checking_3 (20,805,261 samples, 1.35%)</title><rect x="19.9772%" y="165" width="1.3517%" height="15" fill="rgb(241,83,37)"/><text x="20.2272%" y="175.50"></text></g><g><title>impl_parent (3,165,678 samples, 0.21%)</title><rect x="21.8942%" y="101" width="0.2057%" height="15" fill="rgb(233,36,39)"/><text x="22.1442%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,704,472 samples, 0.11%)</title><rect x="21.9891%" y="85" width="0.1107%" height="15" fill="rgb(226,3,54)"/><text x="22.2391%" y="95.50"></text></g><g><title>impl_trait_ref (5,935,362 samples, 0.39%)</title><rect x="22.1000%" y="101" width="0.3856%" height="15" fill="rgb(245,192,40)"/><text x="22.3500%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,722,862 samples, 0.31%)</title><rect x="22.1788%" y="85" width="0.3068%" height="15" fill="rgb(238,167,29)"/><text x="22.4288%" y="95.50"></text></g><g><title>coherent_trait (18,561,548 samples, 1.21%)</title><rect x="21.3551%" y="133" width="1.2059%" height="15" fill="rgb(232,182,51)"/><text x="21.6051%" y="143.50"></text></g><g><title>specialization_graph_of (17,907,530 samples, 1.16%)</title><rect x="21.3975%" y="117" width="1.1634%" height="15" fill="rgb(231,60,39)"/><text x="21.6475%" y="127.50"></text></g><g><title>coherence_checking (18,838,491 samples, 1.22%)</title><rect x="21.3527%" y="149" width="1.2239%" height="15" fill="rgb(208,69,12)"/><text x="21.6027%" y="159.50"></text></g><g><title>associated_item (1,921,461 samples, 0.12%)</title><rect x="32.8855%" y="85" width="0.1248%" height="15" fill="rgb(235,93,37)"/><text x="33.1355%" y="95.50"></text></g><g><title>associated_items (2,978,694 samples, 0.19%)</title><rect x="32.8230%" y="101" width="0.1935%" height="15" fill="rgb(213,116,39)"/><text x="33.0730%" y="111.50"></text></g><g><title>dropck_outlives (3,254,055 samples, 0.21%)</title><rect x="33.0288%" y="101" width="0.2114%" height="15" fill="rgb(222,207,29)"/><text x="33.2788%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,267,562 samples, 0.15%)</title><rect x="33.2440%" y="85" width="0.1473%" height="15" fill="rgb(206,96,30)"/><text x="33.4940%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,017,180 samples, 0.20%)</title><rect x="33.2403%" y="101" width="0.1960%" height="15" fill="rgb(218,138,4)"/><text x="33.4903%" y="111.50"></text></g><g><title>impl_trait_ref (2,024,638 samples, 0.13%)</title><rect x="34.4765%" y="85" width="0.1315%" height="15" fill="rgb(250,191,14)"/><text x="34.7265%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,747,386 samples, 0.11%)</title><rect x="34.4945%" y="69" width="0.1135%" height="15" fill="rgb(239,60,40)"/><text x="34.7445%" y="79.50"></text></g><g><title>predicates_of (1,698,975 samples, 0.11%)</title><rect x="34.6136%" y="85" width="0.1104%" height="15" fill="rgb(206,27,48)"/><text x="34.8636%" y="95.50"></text></g><g><title>specializes (3,811,392 samples, 0.25%)</title><rect x="34.7240%" y="85" width="0.2476%" height="15" fill="rgb(225,35,8)"/><text x="34.9740%" y="95.50"></text></g><g><title>param_env (1,863,344 samples, 0.12%)</title><rect x="34.8505%" y="69" width="0.1211%" height="15" fill="rgb(250,213,24)"/><text x="35.1005%" y="79.50"></text></g><g><title>evaluate_obligation (24,479,137 samples, 1.59%)</title><rect x="33.4364%" y="101" width="1.5904%" height="15" fill="rgb(247,123,22)"/><text x="33.6864%" y="111.50"></text></g><g><title>method_autoderef_steps (4,385,146 samples, 0.28%)</title><rect x="35.1990%" y="101" width="0.2849%" height="15" fill="rgb(231,138,38)"/><text x="35.4490%" y="111.50"></text></g><g><title>evaluate_obligation (4,520,472 samples, 0.29%)</title><rect x="37.5672%" y="85" width="0.2937%" height="15" fill="rgb(231,145,46)"/><text x="37.8172%" y="95.50"></text></g><g><title>typeck (37,160,014 samples, 2.41%)</title><rect x="35.6141%" y="101" width="2.4143%" height="15" fill="rgb(251,118,11)"/><text x="35.8641%" y="111.50">ty..</text></g><g><title>item_bodies_checking (238,045,997 samples, 15.47%)</title><rect x="22.5939%" y="149" width="15.4657%" height="15" fill="rgb(217,147,25)"/><text x="22.8439%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (238,042,437 samples, 15.47%)</title><rect x="22.5941%" y="133" width="15.4655%" height="15" fill="rgb(247,81,37)"/><text x="22.8441%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (237,465,563 samples, 15.43%)</title><rect x="22.6316%" y="117" width="15.4280%" height="15" fill="rgb(209,12,38)"/><text x="22.8816%" y="127.50">typeck</text></g><g><title>item_types_checking (10,630,138 samples, 0.69%)</title><rect x="38.0597%" y="149" width="0.6906%" height="15" fill="rgb(227,1,9)"/><text x="38.3097%" y="159.50"></text></g><g><title>check_mod_item_types (10,616,488 samples, 0.69%)</title><rect x="38.0605%" y="133" width="0.6897%" height="15" fill="rgb(248,47,43)"/><text x="38.3105%" y="143.50"></text></g><g><title>typeck (2,110,341 samples, 0.14%)</title><rect x="38.6132%" y="117" width="0.1371%" height="15" fill="rgb(221,10,30)"/><text x="38.8632%" y="127.50"></text></g><g><title>generics_of (3,461,196 samples, 0.22%)</title><rect x="38.9470%" y="117" width="0.2249%" height="15" fill="rgb(210,229,1)"/><text x="39.1970%" y="127.50"></text></g><g><title>explicit_predicates_of (4,291,186 samples, 0.28%)</title><rect x="39.2539%" y="85" width="0.2788%" height="15" fill="rgb(222,148,37)"/><text x="39.5039%" y="95.50"></text></g><g><title>predicates_of (5,521,769 samples, 0.36%)</title><rect x="39.2017%" y="117" width="0.3587%" height="15" fill="rgb(234,67,33)"/><text x="39.4517%" y="127.50"></text></g><g><title>predicates_defined_on (5,208,884 samples, 0.34%)</title><rect x="39.2220%" y="101" width="0.3384%" height="15" fill="rgb(247,98,35)"/><text x="39.4720%" y="111.50"></text></g><g><title>type_collecting (13,502,817 samples, 0.88%)</title><rect x="38.7507%" y="149" width="0.8773%" height="15" fill="rgb(247,138,52)"/><text x="39.0007%" y="159.50"></text></g><g><title>collect_mod_item_types (13,474,187 samples, 0.88%)</title><rect x="38.7526%" y="133" width="0.8754%" height="15" fill="rgb(213,79,30)"/><text x="39.0026%" y="143.50"></text></g><g><title>evaluate_obligation (4,927,918 samples, 0.32%)</title><rect x="41.1966%" y="117" width="0.3202%" height="15" fill="rgb(246,177,23)"/><text x="41.4466%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,687,766 samples, 0.17%)</title><rect x="41.5169%" y="117" width="0.1746%" height="15" fill="rgb(230,62,27)"/><text x="41.7669%" y="127.50"></text></g><g><title>param_env (2,703,174 samples, 0.18%)</title><rect x="41.7227%" y="117" width="0.1756%" height="15" fill="rgb(216,154,8)"/><text x="41.9727%" y="127.50"></text></g><g><title>region_scope_tree (2,345,103 samples, 0.15%)</title><rect x="41.9008%" y="117" width="0.1524%" height="15" fill="rgb(244,35,45)"/><text x="42.1508%" y="127.50"></text></g><g><title>check_impl_item_well_formed (35,602,507 samples, 2.31%)</title><rect x="39.7426%" y="133" width="2.3131%" height="15" fill="rgb(251,115,12)"/><text x="39.9926%" y="143.50">c..</text></g><g><title>evaluate_obligation (2,376,169 samples, 0.15%)</title><rect x="44.8759%" y="117" width="0.1544%" height="15" fill="rgb(240,54,50)"/><text x="45.1259%" y="127.50"></text></g><g><title>param_env (2,789,193 samples, 0.18%)</title><rect x="45.1317%" y="117" width="0.1812%" height="15" fill="rgb(233,84,52)"/><text x="45.3817%" y="127.50"></text></g><g><title>check_item_well_formed (51,345,815 samples, 3.34%)</title><rect x="42.0557%" y="133" width="3.3359%" height="15" fill="rgb(207,117,47)"/><text x="42.3057%" y="143.50">che..</text></g><g><title>analysis (595,688,608 samples, 38.70%)</title><rect x="6.9041%" y="181" width="38.7016%" height="15" fill="rgb(249,43,39)"/><text x="7.1541%" y="191.50">analysis</text></g><g><title>type_check_crate (373,664,264 samples, 24.28%)</title><rect x="21.3289%" y="165" width="24.2768%" height="15" fill="rgb(209,38,44)"/><text x="21.5789%" y="175.50">type_check_crate</text></g><g><title>wf_checking (91,972,244 samples, 5.98%)</title><rect x="39.6303%" y="149" width="5.9754%" height="15" fill="rgb(236,212,23)"/><text x="39.8803%" y="159.50">wf_check..</text></g><g><title>check_trait_item_well_formed (3,295,783 samples, 0.21%)</title><rect x="45.3916%" y="133" width="0.2141%" height="15" fill="rgb(242,79,21)"/><text x="45.6416%" y="143.50"></text></g><g><title>predicates_of (1,563,148 samples, 0.10%)</title><rect x="50.9445%" y="117" width="0.1016%" height="15" fill="rgb(211,96,35)"/><text x="51.1945%" y="127.50"></text></g><g><title>param_env (4,501,209 samples, 0.29%)</title><rect x="50.7542%" y="133" width="0.2924%" height="15" fill="rgb(253,215,40)"/><text x="51.0042%" y="143.50"></text></g><g><title>fn_abi_of_instance (11,790,843 samples, 0.77%)</title><rect x="50.3535%" y="149" width="0.7660%" height="15" fill="rgb(211,81,21)"/><text x="50.6035%" y="159.50"></text></g><g><title>layout_of (2,216,204 samples, 0.14%)</title><rect x="51.1551%" y="149" width="0.1440%" height="15" fill="rgb(208,190,38)"/><text x="51.4051%" y="159.50"></text></g><g><title>codegen_module (86,577,175 samples, 5.62%)</title><rect x="45.7471%" y="165" width="5.6249%" height="15" fill="rgb(235,213,38)"/><text x="45.9971%" y="175.50">codegen..</text></g><g><title>codegen_crate (88,831,732 samples, 5.77%)</title><rect x="45.6064%" y="181" width="5.7714%" height="15" fill="rgb(237,122,38)"/><text x="45.8564%" y="191.50">codegen..</text></g><g><title>LLVM_module_codegen (454,540,615 samples, 29.53%)</title><rect x="51.3937%" y="165" width="29.5313%" height="15" fill="rgb(244,218,35)"/><text x="51.6437%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (434,944,795 samples, 28.26%)</title><rect x="52.6668%" y="149" width="28.2582%" height="15" fill="rgb(240,68,47)"/><text x="52.9168%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (479,000,592 samples, 31.12%)</title><rect x="51.3778%" y="181" width="31.1205%" height="15" fill="rgb(210,16,53)"/><text x="51.6278%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (24,215,095 samples, 1.57%)</title><rect x="80.9250%" y="165" width="1.5732%" height="15" fill="rgb(235,124,12)"/><text x="81.1750%" y="175.50"></text></g><g><title>metadata_register_crate (2,732,200 samples, 0.18%)</title><rect x="86.8390%" y="133" width="0.1775%" height="15" fill="rgb(224,169,11)"/><text x="87.0890%" y="143.50"></text></g><g><title>macro_expand_crate (70,099,311 samples, 4.55%)</title><rect x="82.5811%" y="165" width="4.5543%" height="15" fill="rgb(250,166,2)"/><text x="82.8311%" y="175.50">macro..</text></g><g><title>expand_crate (70,083,751 samples, 4.55%)</title><rect x="82.5821%" y="149" width="4.5533%" height="15" fill="rgb(242,216,29)"/><text x="82.8321%" y="159.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (1,830,290 samples, 0.12%)</title><rect x="87.0165%" y="133" width="0.1189%" height="15" fill="rgb(230,116,27)"/><text x="87.2665%" y="143.50"></text></g><g><title>late_resolve_crate (14,991,952 samples, 0.97%)</title><rect x="87.1654%" y="149" width="0.9740%" height="15" fill="rgb(228,99,48)"/><text x="87.4154%" y="159.50"></text></g><g><title>metadata_register_crate (4,935,880 samples, 0.32%)</title><rect x="87.8187%" y="133" width="0.3207%" height="15" fill="rgb(253,11,6)"/><text x="88.0687%" y="143.50"></text></g><g><title>metadata_register_crate (4,530,336 samples, 0.29%)</title><rect x="87.8450%" y="117" width="0.2943%" height="15" fill="rgb(247,143,39)"/><text x="88.0950%" y="127.50"></text></g><g><title>configure_and_expand (87,818,252 samples, 5.71%)</title><rect x="82.4983%" y="181" width="5.7055%" height="15" fill="rgb(236,97,10)"/><text x="82.7483%" y="191.50">configu..</text></g><g><title>resolve_crate (16,348,256 samples, 1.06%)</title><rect x="87.1416%" y="165" width="1.0621%" height="15" fill="rgb(233,208,19)"/><text x="87.3916%" y="175.50"></text></g><g><title>early_lint_checks (2,325,224 samples, 0.15%)</title><rect x="88.2955%" y="181" width="0.1511%" height="15" fill="rgb(216,164,2)"/><text x="88.5455%" y="191.50"></text></g><g><title>free_global_ctxt (13,545,948 samples, 0.88%)</title><rect x="88.4465%" y="181" width="0.8801%" height="15" fill="rgb(220,129,5)"/><text x="88.6965%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,966,673 samples, 0.13%)</title><rect x="90.4190%" y="101" width="0.1278%" height="15" fill="rgb(242,17,10)"/><text x="90.6690%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,530,393 samples, 0.16%)</title><rect x="90.8210%" y="85" width="0.1644%" height="15" fill="rgb(242,107,0)"/><text x="91.0710%" y="95.50"></text></g><g><title>optimized_mir (8,306,148 samples, 0.54%)</title><rect x="90.6127%" y="101" width="0.5396%" height="15" fill="rgb(251,28,31)"/><text x="90.8627%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,569,370 samples, 0.17%)</title><rect x="90.9854%" y="85" width="0.1669%" height="15" fill="rgb(233,223,10)"/><text x="91.2354%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,922,032 samples, 0.25%)</title><rect x="91.2382%" y="85" width="0.2548%" height="15" fill="rgb(215,21,27)"/><text x="91.4882%" y="95.50"></text></g><g><title>is_copy_raw (1,708,339 samples, 0.11%)</title><rect x="91.5345%" y="69" width="0.1110%" height="15" fill="rgb(232,23,21)"/><text x="91.7845%" y="79.50"></text></g><g><title>needs_drop_raw (1,805,309 samples, 0.12%)</title><rect x="91.5282%" y="85" width="0.1173%" height="15" fill="rgb(244,5,23)"/><text x="91.7782%" y="95.50"></text></g><g><title>specialization_graph_of (2,060,033 samples, 0.13%)</title><rect x="91.6455%" y="85" width="0.1338%" height="15" fill="rgb(226,81,46)"/><text x="91.8955%" y="95.50"></text></g><g><title>impl_trait_ref (1,678,618 samples, 0.11%)</title><rect x="91.6703%" y="69" width="0.1091%" height="15" fill="rgb(247,70,30)"/><text x="91.9203%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,634,438 samples, 0.11%)</title><rect x="91.6732%" y="53" width="0.1062%" height="15" fill="rgb(212,68,19)"/><text x="91.9232%" y="63.50"></text></g><g><title>resolve_instance (10,048,917 samples, 0.65%)</title><rect x="91.1523%" y="101" width="0.6529%" height="15" fill="rgb(240,187,13)"/><text x="91.4023%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (27,204,546 samples, 1.77%)</title><rect x="90.2195%" y="117" width="1.7675%" height="15" fill="rgb(223,113,26)"/><text x="90.4695%" y="127.50"></text></g><g><title>monomorphization_collector (27,379,748 samples, 1.78%)</title><rect x="90.2191%" y="133" width="1.7789%" height="15" fill="rgb(206,192,2)"/><text x="90.4691%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (2,711,648 samples, 0.18%)</title><rect x="91.9983%" y="117" width="0.1762%" height="15" fill="rgb(241,108,4)"/><text x="92.2483%" y="127.50"></text></g><g><title>symbol_name (2,444,883 samples, 0.16%)</title><rect x="92.0156%" y="101" width="0.1588%" height="15" fill="rgb(247,173,49)"/><text x="92.2656%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (31,439,359 samples, 2.04%)</title><rect x="90.2163%" y="149" width="2.0426%" height="15" fill="rgb(224,114,35)"/><text x="90.4663%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (4,016,901 samples, 0.26%)</title><rect x="91.9980%" y="133" width="0.2610%" height="15" fill="rgb(245,159,27)"/><text x="92.2480%" y="143.50"></text></g><g><title>exported_symbols (32,356,218 samples, 2.10%)</title><rect x="90.2085%" y="165" width="2.1022%" height="15" fill="rgb(245,172,44)"/><text x="90.4585%" y="175.50">e..</text></g><g><title>is_sized_raw (3,805,350 samples, 0.25%)</title><rect x="94.0281%" y="133" width="0.2472%" height="15" fill="rgb(236,23,11)"/><text x="94.2781%" y="143.50"></text></g><g><title>evaluate_obligation (3,133,843 samples, 0.20%)</title><rect x="94.0717%" y="117" width="0.2036%" height="15" fill="rgb(205,117,38)"/><text x="94.3217%" y="127.50"></text></g><g><title>layout_of (7,575,672 samples, 0.49%)</title><rect x="93.8562%" y="149" width="0.4922%" height="15" fill="rgb(237,72,25)"/><text x="94.1062%" y="159.50"></text></g><g><title>is_copy_raw (5,991,947 samples, 0.39%)</title><rect x="96.8471%" y="117" width="0.3893%" height="15" fill="rgb(244,70,9)"/><text x="97.0971%" y="127.50"></text></g><g><title>evaluate_obligation (4,941,126 samples, 0.32%)</title><rect x="96.9153%" y="101" width="0.3210%" height="15" fill="rgb(217,125,39)"/><text x="97.1653%" y="111.50"></text></g><g><title>needs_drop_raw (6,611,212 samples, 0.43%)</title><rect x="96.8086%" y="133" width="0.4295%" height="15" fill="rgb(235,36,10)"/><text x="97.0586%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (44,866,542 samples, 2.91%)</title><rect x="94.3483%" y="149" width="2.9150%" height="15" fill="rgb(251,123,47)"/><text x="94.5983%" y="159.50">mi..</text></g><g><title>optimized_mir (75,265,373 samples, 4.89%)</title><rect x="92.3826%" y="165" width="4.8900%" height="15" fill="rgb(221,13,13)"/><text x="92.6326%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (122,773,027 samples, 7.98%)</title><rect x="89.3266%" y="181" width="7.9765%" height="15" fill="rgb(238,131,9)"/><text x="89.5766%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (20,946,163 samples, 1.36%)</title><rect x="97.3031%" y="181" width="1.3609%" height="15" fill="rgb(211,50,8)"/><text x="97.5531%" y="191.50"></text></g><g><title>finish_ongoing_codegen (9,456,896 samples, 0.61%)</title><rect x="98.6653%" y="165" width="0.6144%" height="15" fill="rgb(245,182,24)"/><text x="98.9153%" y="175.50"></text></g><g><title>link_crate (4,792,799 samples, 0.31%)</title><rect x="99.2797%" y="165" width="0.3114%" height="15" fill="rgb(242,14,37)"/><text x="99.5297%" y="175.50"></text></g><g><title>link_binary (4,660,468 samples, 0.30%)</title><rect x="99.2883%" y="149" width="0.3028%" height="15" fill="rgb(246,228,12)"/><text x="99.5383%" y="159.50"></text></g><g><title>link_rlib (3,841,669 samples, 0.25%)</title><rect x="99.3415%" y="133" width="0.2496%" height="15" fill="rgb(213,55,15)"/><text x="99.5915%" y="143.50"></text></g><g><title>link (14,280,955 samples, 0.93%)</title><rect x="98.6640%" y="181" width="0.9278%" height="15" fill="rgb(209,9,3)"/><text x="98.9140%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,952,130 samples, 0.26%)</title><rect x="99.6738%" y="181" width="0.2568%" height="15" fill="rgb(230,59,30)"/><text x="99.9238%" y="191.50"></text></g><g><title>all (1,539,182,446 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,539,182,446 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>