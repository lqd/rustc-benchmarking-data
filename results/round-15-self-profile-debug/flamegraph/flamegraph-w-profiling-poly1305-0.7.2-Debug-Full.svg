<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (135,861,260 samples, 11.92%)</title><rect x="0.0894%" y="229" width="11.9189%" height="15" fill="rgb(227,0,7)"/><text x="0.3394%" y="239.50">LLVM_passes</text></g><g><title>mir_borrowck_const_arg (2,029,561 samples, 0.18%)</title><rect x="14.4198%" y="181" width="0.1781%" height="15" fill="rgb(217,0,24)"/><text x="14.6698%" y="191.50"></text></g><g><title>resolve_instance (1,506,756 samples, 0.13%)</title><rect x="15.7337%" y="117" width="0.1322%" height="15" fill="rgb(221,193,54)"/><text x="15.9837%" y="127.50"></text></g><g><title>thir_body (3,450,803 samples, 0.30%)</title><rect x="15.8687%" y="117" width="0.3027%" height="15" fill="rgb(248,212,6)"/><text x="16.1187%" y="127.50"></text></g><g><title>mir_const (16,350,696 samples, 1.43%)</title><rect x="14.7388%" y="165" width="1.4344%" height="15" fill="rgb(208,68,35)"/><text x="14.9888%" y="175.50"></text></g><g><title>unsafety_check_result (14,471,980 samples, 1.27%)</title><rect x="14.9036%" y="149" width="1.2696%" height="15" fill="rgb(232,128,0)"/><text x="15.1536%" y="159.50"></text></g><g><title>mir_built (12,983,646 samples, 1.14%)</title><rect x="15.0341%" y="133" width="1.1390%" height="15" fill="rgb(207,160,47)"/><text x="15.2841%" y="143.50"></text></g><g><title>mir_promoted (18,668,485 samples, 1.64%)</title><rect x="14.5978%" y="181" width="1.6378%" height="15" fill="rgb(228,23,34)"/><text x="14.8478%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,855,237 samples, 0.16%)</title><rect x="16.3612%" y="181" width="0.1628%" height="15" fill="rgb(218,30,26)"/><text x="16.6112%" y="191.50"></text></g><g><title>MIR_borrow_checking (50,878,326 samples, 4.46%)</title><rect x="12.0618%" y="213" width="4.4635%" height="15" fill="rgb(220,122,19)"/><text x="12.3118%" y="223.50">MIR_b..</text></g><g><title>mir_borrowck (50,610,354 samples, 4.44%)</title><rect x="12.0853%" y="197" width="4.4400%" height="15" fill="rgb(250,228,42)"/><text x="12.3353%" y="207.50">mir_b..</text></g><g><title>check_mod_attrs (1,309,724 samples, 0.11%)</title><rect x="16.6293%" y="197" width="0.1149%" height="15" fill="rgb(240,193,28)"/><text x="16.8793%" y="207.50"></text></g><g><title>misc_checking_1 (2,733,458 samples, 0.24%)</title><rect x="16.6266%" y="213" width="0.2398%" height="15" fill="rgb(216,20,37)"/><text x="16.8766%" y="223.50"></text></g><g><title>misc_checking_2 (2,114,152 samples, 0.19%)</title><rect x="16.8664%" y="213" width="0.1855%" height="15" fill="rgb(206,188,39)"/><text x="17.1164%" y="223.50"></text></g><g><title>crate_lints (2,243,402 samples, 0.20%)</title><rect x="17.1553%" y="181" width="0.1968%" height="15" fill="rgb(217,207,13)"/><text x="17.4053%" y="191.50"></text></g><g><title>lint_checking (3,520,905 samples, 0.31%)</title><rect x="17.1551%" y="197" width="0.3089%" height="15" fill="rgb(231,73,38)"/><text x="17.4051%" y="207.50"></text></g><g><title>module_lints (1,275,803 samples, 0.11%)</title><rect x="17.3521%" y="181" width="0.1119%" height="15" fill="rgb(225,20,46)"/><text x="17.6021%" y="191.50"></text></g><g><title>lint_mod (1,269,843 samples, 0.11%)</title><rect x="17.3526%" y="165" width="0.1114%" height="15" fill="rgb(210,31,41)"/><text x="17.6026%" y="175.50"></text></g><g><title>privacy_checking_modules (1,905,880 samples, 0.17%)</title><rect x="17.4951%" y="197" width="0.1672%" height="15" fill="rgb(221,200,47)"/><text x="17.7451%" y="207.50"></text></g><g><title>check_mod_privacy (1,901,639 samples, 0.17%)</title><rect x="17.4955%" y="181" width="0.1668%" height="15" fill="rgb(226,26,5)"/><text x="17.7455%" y="191.50"></text></g><g><title>misc_checking_3 (6,972,711 samples, 0.61%)</title><rect x="17.0519%" y="213" width="0.6117%" height="15" fill="rgb(249,33,26)"/><text x="17.3019%" y="223.50"></text></g><g><title>impl_trait_ref (1,951,819 samples, 0.17%)</title><rect x="17.9129%" y="149" width="0.1712%" height="15" fill="rgb(235,183,28)"/><text x="18.1629%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,570,465 samples, 0.14%)</title><rect x="17.9463%" y="133" width="0.1378%" height="15" fill="rgb(221,5,38)"/><text x="18.1963%" y="143.50"></text></g><g><title>coherent_trait (4,975,950 samples, 0.44%)</title><rect x="17.6761%" y="181" width="0.4365%" height="15" fill="rgb(247,18,42)"/><text x="17.9261%" y="191.50"></text></g><g><title>specialization_graph_of (4,772,908 samples, 0.42%)</title><rect x="17.6939%" y="165" width="0.4187%" height="15" fill="rgb(241,131,45)"/><text x="17.9439%" y="175.50"></text></g><g><title>coherence_checking (5,122,432 samples, 0.45%)</title><rect x="17.6748%" y="197" width="0.4494%" height="15" fill="rgb(249,31,29)"/><text x="17.9248%" y="207.50"></text></g><g><title>eval_to_const_value_raw (1,599,846 samples, 0.14%)</title><rect x="24.0649%" y="133" width="0.1404%" height="15" fill="rgb(225,111,53)"/><text x="24.3149%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,571,226 samples, 0.14%)</title><rect x="24.0674%" y="117" width="0.1378%" height="15" fill="rgb(238,160,17)"/><text x="24.3174%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,529,954 samples, 0.13%)</title><rect x="24.0710%" y="101" width="0.1342%" height="15" fill="rgb(214,148,48)"/><text x="24.3210%" y="111.50"></text></g><g><title>specializes (1,254,455 samples, 0.11%)</title><rect x="24.3192%" y="133" width="0.1101%" height="15" fill="rgb(232,36,49)"/><text x="24.5692%" y="143.50"></text></g><g><title>evaluate_obligation (7,926,206 samples, 0.70%)</title><rect x="23.7726%" y="149" width="0.6954%" height="15" fill="rgb(209,103,24)"/><text x="24.0226%" y="159.50"></text></g><g><title>mir_borrowck_const_arg (1,514,665 samples, 0.13%)</title><rect x="25.6024%" y="37" width="0.1329%" height="15" fill="rgb(229,88,8)"/><text x="25.8524%" y="47.50"></text></g><g><title>mir_for_ctfe_of_const_arg (2,311,590 samples, 0.20%)</title><rect x="25.5332%" y="69" width="0.2028%" height="15" fill="rgb(213,181,19)"/><text x="25.7832%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,120,738 samples, 0.19%)</title><rect x="25.5499%" y="53" width="0.1860%" height="15" fill="rgb(254,191,54)"/><text x="25.7999%" y="63.50"></text></g><g><title>evaluate_obligation (1,176,012 samples, 0.10%)</title><rect x="25.8308%" y="53" width="0.1032%" height="15" fill="rgb(241,83,37)"/><text x="26.0808%" y="63.50"></text></g><g><title>eval_to_const_value_raw (6,959,899 samples, 0.61%)</title><rect x="25.3528%" y="117" width="0.6106%" height="15" fill="rgb(233,36,39)"/><text x="25.6028%" y="127.50"></text></g><g><title>eval_to_const_value_raw (6,937,979 samples, 0.61%)</title><rect x="25.3548%" y="101" width="0.6087%" height="15" fill="rgb(226,3,54)"/><text x="25.6048%" y="111.50"></text></g><g><title>eval_to_allocation_raw (6,890,248 samples, 0.60%)</title><rect x="25.3590%" y="85" width="0.6045%" height="15" fill="rgb(245,192,40)"/><text x="25.6090%" y="95.50"></text></g><g><title>typeck_const_arg (2,587,175 samples, 0.23%)</title><rect x="25.7365%" y="69" width="0.2270%" height="15" fill="rgb(238,167,29)"/><text x="25.9865%" y="79.50"></text></g><g><title>specializes (1,688,716 samples, 0.15%)</title><rect x="26.2904%" y="101" width="0.1481%" height="15" fill="rgb(232,182,51)"/><text x="26.5404%" y="111.50"></text></g><g><title>evaluate_obligation (5,459,235 samples, 0.48%)</title><rect x="25.9634%" y="117" width="0.4789%" height="15" fill="rgb(231,60,39)"/><text x="26.2134%" y="127.50"></text></g><g><title>opt_const_param_of (23,042,571 samples, 2.02%)</title><rect x="24.5828%" y="149" width="2.0215%" height="15" fill="rgb(208,69,12)"/><text x="24.8328%" y="159.50">o..</text></g><g><title>typeck (22,941,041 samples, 2.01%)</title><rect x="24.5917%" y="133" width="2.0126%" height="15" fill="rgb(235,93,37)"/><text x="24.8417%" y="143.50">t..</text></g><g><title>typeck (4,052,441 samples, 0.36%)</title><rect x="26.6928%" y="149" width="0.3555%" height="15" fill="rgb(213,116,39)"/><text x="26.9428%" y="159.50"></text></g><g><title>item_bodies_checking (102,633,052 samples, 9.00%)</title><rect x="18.1279%" y="197" width="9.0039%" height="15" fill="rgb(222,207,29)"/><text x="18.3779%" y="207.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (102,630,092 samples, 9.00%)</title><rect x="18.1282%" y="181" width="9.0036%" height="15" fill="rgb(206,96,30)"/><text x="18.3782%" y="191.50">typeck_item_b..</text></g><g><title>typeck (102,472,891 samples, 8.99%)</title><rect x="18.1419%" y="165" width="8.9898%" height="15" fill="rgb(218,138,4)"/><text x="18.3919%" y="175.50">typeck</text></g><g><title>item_types_checking (2,471,026 samples, 0.22%)</title><rect x="27.1318%" y="197" width="0.2168%" height="15" fill="rgb(250,191,14)"/><text x="27.3818%" y="207.50"></text></g><g><title>check_mod_item_types (2,464,695 samples, 0.22%)</title><rect x="27.1323%" y="181" width="0.2162%" height="15" fill="rgb(239,60,40)"/><text x="27.3823%" y="191.50"></text></g><g><title>type_collecting (2,139,052 samples, 0.19%)</title><rect x="27.3488%" y="197" width="0.1877%" height="15" fill="rgb(206,27,48)"/><text x="27.5988%" y="207.50"></text></g><g><title>collect_mod_item_types (2,133,052 samples, 0.19%)</title><rect x="27.3494%" y="181" width="0.1871%" height="15" fill="rgb(225,35,8)"/><text x="27.5994%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,699,971 samples, 0.32%)</title><rect x="27.5630%" y="181" width="0.3246%" height="15" fill="rgb(250,213,24)"/><text x="27.8130%" y="191.50"></text></g><g><title>analysis (183,914,709 samples, 16.13%)</title><rect x="12.0083%" y="229" width="16.1346%" height="15" fill="rgb(247,123,22)"/><text x="12.2583%" y="239.50">analysis</text></g><g><title>type_check_crate (119,451,833 samples, 10.48%)</title><rect x="17.6636%" y="213" width="10.4793%" height="15" fill="rgb(231,138,38)"/><text x="17.9136%" y="223.50">type_check_crate</text></g><g><title>wf_checking (6,895,929 samples, 0.60%)</title><rect x="27.5379%" y="197" width="0.6050%" height="15" fill="rgb(231,145,46)"/><text x="27.7879%" y="207.50"></text></g><g><title>check_item_well_formed (2,910,228 samples, 0.26%)</title><rect x="27.8876%" y="181" width="0.2553%" height="15" fill="rgb(251,118,11)"/><text x="28.1376%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (1,964,366 samples, 0.17%)</title><rect x="36.6686%" y="197" width="0.1723%" height="15" fill="rgb(217,147,25)"/><text x="36.9186%" y="207.50"></text></g><g><title>const_caller_location (2,984,705 samples, 0.26%)</title><rect x="36.8410%" y="197" width="0.2618%" height="15" fill="rgb(247,81,37)"/><text x="37.0910%" y="207.50"></text></g><g><title>layout_of (1,934,559 samples, 0.17%)</title><rect x="37.5872%" y="181" width="0.1697%" height="15" fill="rgb(209,12,38)"/><text x="37.8372%" y="191.50"></text></g><g><title>predicates_of (1,654,675 samples, 0.15%)</title><rect x="38.0757%" y="165" width="0.1452%" height="15" fill="rgb(227,1,9)"/><text x="38.3257%" y="175.50"></text></g><g><title>predicates_defined_on (1,224,221 samples, 0.11%)</title><rect x="38.1134%" y="149" width="0.1074%" height="15" fill="rgb(248,47,43)"/><text x="38.3634%" y="159.50"></text></g><g><title>param_env (5,307,870 samples, 0.47%)</title><rect x="37.7570%" y="181" width="0.4657%" height="15" fill="rgb(221,10,30)"/><text x="38.0070%" y="191.50"></text></g><g><title>normalize_projection_ty (1,249,204 samples, 0.11%)</title><rect x="38.2962%" y="165" width="0.1096%" height="15" fill="rgb(210,229,1)"/><text x="38.5462%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,120,811 samples, 0.19%)</title><rect x="38.2226%" y="181" width="0.1861%" height="15" fill="rgb(222,148,37)"/><text x="38.4726%" y="191.50"></text></g><g><title>fn_abi_of_instance (14,640,774 samples, 1.28%)</title><rect x="37.1265%" y="197" width="1.2844%" height="15" fill="rgb(234,67,33)"/><text x="37.3765%" y="207.50"></text></g><g><title>layout_of (1,202,952 samples, 0.11%)</title><rect x="38.4786%" y="197" width="0.1055%" height="15" fill="rgb(247,98,35)"/><text x="38.7286%" y="207.50"></text></g><g><title>codegen_module (117,133,307 samples, 10.28%)</title><rect x="28.3653%" y="213" width="10.2759%" height="15" fill="rgb(247,138,52)"/><text x="28.6153%" y="223.50">codegen_module</text></g><g><title>codegen_crate (119,699,376 samples, 10.50%)</title><rect x="28.1438%" y="229" width="10.5011%" height="15" fill="rgb(213,79,30)"/><text x="28.3938%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (506,269,875 samples, 44.41%)</title><rect x="38.6647%" y="213" width="44.4144%" height="15" fill="rgb(246,177,23)"/><text x="38.9147%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (488,083,072 samples, 42.82%)</title><rect x="40.2602%" y="197" width="42.8189%" height="15" fill="rgb(230,62,27)"/><text x="40.5102%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (550,329,364 samples, 48.28%)</title><rect x="38.6449%" y="229" width="48.2797%" height="15" fill="rgb(216,154,8)"/><text x="38.8949%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (43,833,948 samples, 3.85%)</title><rect x="83.0790%" y="213" width="3.8455%" height="15" fill="rgb(244,35,45)"/><text x="83.3290%" y="223.50">LLVM..</text></g><g><title>macro_expand_crate (51,800,926 samples, 4.54%)</title><rect x="86.9852%" y="213" width="4.5444%" height="15" fill="rgb(251,115,12)"/><text x="87.2352%" y="223.50">macro..</text></g><g><title>expand_crate (51,783,926 samples, 4.54%)</title><rect x="86.9866%" y="197" width="4.5429%" height="15" fill="rgb(240,54,50)"/><text x="87.2366%" y="207.50">expan..</text></g><g><title>late_resolve_crate (3,785,489 samples, 0.33%)</title><rect x="91.5802%" y="197" width="0.3321%" height="15" fill="rgb(233,84,52)"/><text x="91.8302%" y="207.50"></text></g><g><title>configure_and_expand (57,098,239 samples, 5.01%)</title><rect x="86.9245%" y="229" width="5.0092%" height="15" fill="rgb(207,117,47)"/><text x="87.1745%" y="239.50">config..</text></g><g><title>resolve_crate (4,485,595 samples, 0.39%)</title><rect x="91.5402%" y="213" width="0.3935%" height="15" fill="rgb(249,43,39)"/><text x="91.7902%" y="223.50"></text></g><g><title>free_global_ctxt (6,310,435 samples, 0.55%)</title><rect x="92.0548%" y="229" width="0.5536%" height="15" fill="rgb(209,38,44)"/><text x="92.3048%" y="239.50"></text></g><g><title>codegen_fn_attrs (1,797,773 samples, 0.16%)</title><rect x="93.2063%" y="149" width="0.1577%" height="15" fill="rgb(236,212,23)"/><text x="93.4563%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,123,035 samples, 0.19%)</title><rect x="93.9165%" y="133" width="0.1863%" height="15" fill="rgb(242,79,21)"/><text x="94.1665%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,310,488 samples, 0.47%)</title><rect x="94.1028%" y="133" width="0.4659%" height="15" fill="rgb(211,96,35)"/><text x="94.3528%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,368,316 samples, 0.12%)</title><rect x="94.5893%" y="117" width="0.1200%" height="15" fill="rgb(253,215,40)"/><text x="94.8393%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,315,376 samples, 0.12%)</title><rect x="94.5939%" y="101" width="0.1154%" height="15" fill="rgb(211,81,21)"/><text x="94.8439%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,254,195 samples, 0.11%)</title><rect x="94.5993%" y="85" width="0.1100%" height="15" fill="rgb(208,190,38)"/><text x="94.8493%" y="95.50"></text></g><g><title>optimized_mir (14,750,985 samples, 1.29%)</title><rect x="93.4163%" y="149" width="1.2941%" height="15" fill="rgb(235,213,38)"/><text x="93.6663%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,505,457 samples, 0.13%)</title><rect x="94.5783%" y="133" width="0.1321%" height="15" fill="rgb(237,122,38)"/><text x="94.8283%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (5,223,259 samples, 0.46%)</title><rect x="94.8094%" y="133" width="0.4582%" height="15" fill="rgb(244,218,35)"/><text x="95.0594%" y="143.50"></text></g><g><title>specialization_graph_of (1,142,663 samples, 0.10%)</title><rect x="95.3436%" y="133" width="0.1002%" height="15" fill="rgb(240,68,47)"/><text x="95.5936%" y="143.50"></text></g><g><title>resolve_instance (8,711,473 samples, 0.76%)</title><rect x="94.7104%" y="149" width="0.7642%" height="15" fill="rgb(210,16,53)"/><text x="94.9604%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,628,092 samples, 0.14%)</title><rect x="95.5718%" y="133" width="0.1428%" height="15" fill="rgb(235,124,12)"/><text x="95.8218%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,584,842 samples, 0.14%)</title><rect x="95.5756%" y="117" width="0.1390%" height="15" fill="rgb(224,169,11)"/><text x="95.8256%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,494,551 samples, 0.13%)</title><rect x="95.5835%" y="101" width="0.1311%" height="15" fill="rgb(250,166,2)"/><text x="95.8335%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,106,820 samples, 0.18%)</title><rect x="95.5473%" y="149" width="0.1848%" height="15" fill="rgb(242,216,29)"/><text x="95.7973%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (32,758,483 samples, 2.87%)</title><rect x="92.8881%" y="165" width="2.8739%" height="15" fill="rgb(230,116,27)"/><text x="93.1381%" y="175.50">mo..</text></g><g><title>monomorphization_collector (32,835,874 samples, 2.88%)</title><rect x="92.8879%" y="181" width="2.8806%" height="15" fill="rgb(228,99,48)"/><text x="93.1379%" y="191.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,355,734 samples, 0.21%)</title><rect x="95.7688%" y="165" width="0.2067%" height="15" fill="rgb(253,11,6)"/><text x="96.0188%" y="175.50"></text></g><g><title>symbol_name (2,144,108 samples, 0.19%)</title><rect x="95.7874%" y="149" width="0.1881%" height="15" fill="rgb(247,143,39)"/><text x="96.0374%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (36,368,350 samples, 3.19%)</title><rect x="92.8841%" y="197" width="3.1905%" height="15" fill="rgb(236,97,10)"/><text x="93.1341%" y="207.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,490,086 samples, 0.31%)</title><rect x="95.7685%" y="181" width="0.3062%" height="15" fill="rgb(233,208,19)"/><text x="96.0185%" y="191.50"></text></g><g><title>exported_symbols (36,576,472 samples, 3.21%)</title><rect x="92.8767%" y="213" width="3.2088%" height="15" fill="rgb(216,164,2)"/><text x="93.1267%" y="223.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,408,427 samples, 0.21%)</title><rect x="96.3742%" y="197" width="0.2113%" height="15" fill="rgb(220,129,5)"/><text x="96.6242%" y="207.50"></text></g><g><title>optimized_mir (5,446,177 samples, 0.48%)</title><rect x="96.1094%" y="213" width="0.4778%" height="15" fill="rgb(242,17,10)"/><text x="96.3594%" y="223.50"></text></g><g><title>generate_crate_metadata (45,463,642 samples, 3.99%)</title><rect x="92.6085%" y="229" width="3.9885%" height="15" fill="rgb(242,107,0)"/><text x="92.8585%" y="239.50">gene..</text></g><g><title>hir_lowering (6,938,970 samples, 0.61%)</title><rect x="96.5969%" y="229" width="0.6087%" height="15" fill="rgb(251,28,31)"/><text x="96.8469%" y="239.50"></text></g><g><title>finish_ongoing_codegen (23,837,772 samples, 2.09%)</title><rect x="97.2079%" y="213" width="2.0913%" height="15" fill="rgb(233,223,10)"/><text x="97.4579%" y="223.50">f..</text></g><g><title>link_crate (3,156,442 samples, 0.28%)</title><rect x="99.2992%" y="213" width="0.2769%" height="15" fill="rgb(215,21,27)"/><text x="99.5492%" y="223.50"></text></g><g><title>link_binary (3,122,162 samples, 0.27%)</title><rect x="99.3022%" y="197" width="0.2739%" height="15" fill="rgb(232,23,21)"/><text x="99.5522%" y="207.50"></text></g><g><title>link_rlib (2,383,184 samples, 0.21%)</title><rect x="99.3670%" y="181" width="0.2091%" height="15" fill="rgb(244,5,23)"/><text x="99.6170%" y="191.50"></text></g><g><title>link (27,031,414 samples, 2.37%)</title><rect x="97.2057%" y="229" width="2.3714%" height="15" fill="rgb(226,81,46)"/><text x="97.4557%" y="239.50">li..</text></g><g><title>parse_crate (1,203,082 samples, 0.11%)</title><rect x="99.5771%" y="229" width="0.1055%" height="15" fill="rgb(247,70,30)"/><text x="99.8271%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (2,698,267 samples, 0.24%)</title><rect x="99.7028%" y="229" width="0.2367%" height="15" fill="rgb(212,68,19)"/><text x="99.9528%" y="239.50"></text></g><g><title>all (1,139,878,392 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (1,139,878,392 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>