<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (35,136,176 samples, 16.77%)</title><rect x="0.4041%" y="181" width="16.7694%" height="15" fill="rgb(227,0,7)"/><text x="0.6541%" y="191.50">LLVM_passes</text></g><g><title>thir_body (370,625 samples, 0.18%)</title><rect x="20.2599%" y="69" width="0.1769%" height="15" fill="rgb(217,0,24)"/><text x="20.5099%" y="79.50"></text></g><g><title>mir_const (2,272,206 samples, 1.08%)</title><rect x="19.3549%" y="117" width="1.0845%" height="15" fill="rgb(221,193,54)"/><text x="19.6049%" y="127.50"></text></g><g><title>unsafety_check_result (1,879,862 samples, 0.90%)</title><rect x="19.5422%" y="101" width="0.8972%" height="15" fill="rgb(248,212,6)"/><text x="19.7922%" y="111.50"></text></g><g><title>mir_built (1,562,329 samples, 0.75%)</title><rect x="19.6938%" y="85" width="0.7457%" height="15" fill="rgb(208,68,35)"/><text x="19.9438%" y="95.50"></text></g><g><title>mir_promoted (3,042,613 samples, 1.45%)</title><rect x="19.2082%" y="133" width="1.4521%" height="15" fill="rgb(232,128,0)"/><text x="19.4582%" y="143.50"></text></g><g><title>mir_const_qualif (462,835 samples, 0.22%)</title><rect x="20.4394%" y="117" width="0.2209%" height="15" fill="rgb(207,160,47)"/><text x="20.6894%" y="127.50"></text></g><g><title>mir_const (364,005 samples, 0.17%)</title><rect x="20.4866%" y="101" width="0.1737%" height="15" fill="rgb(228,23,34)"/><text x="20.7366%" y="111.50"></text></g><g><title>unsafety_check_result (258,443 samples, 0.12%)</title><rect x="20.5370%" y="85" width="0.1233%" height="15" fill="rgb(218,30,26)"/><text x="20.7870%" y="95.50"></text></g><g><title>MIR_borrow_checking (7,355,044 samples, 3.51%)</title><rect x="17.3280%" y="165" width="3.5103%" height="15" fill="rgb(220,122,19)"/><text x="17.5780%" y="175.50">MIR..</text></g><g><title>mir_borrowck (7,300,484 samples, 3.48%)</title><rect x="17.3540%" y="149" width="3.4843%" height="15" fill="rgb(250,228,42)"/><text x="17.6040%" y="159.50">mir..</text></g><g><title>MIR_effect_checking (211,152 samples, 0.10%)</title><rect x="20.8383%" y="165" width="0.1008%" height="15" fill="rgb(240,193,28)"/><text x="21.0883%" y="175.50"></text></g><g><title>hir_module_items (210,722 samples, 0.10%)</title><rect x="20.9391%" y="165" width="0.1006%" height="15" fill="rgb(216,20,37)"/><text x="21.1891%" y="175.50"></text></g><g><title>codegen_fn_attrs (253,592 samples, 0.12%)</title><rect x="21.2552%" y="101" width="0.1210%" height="15" fill="rgb(206,188,39)"/><text x="21.5052%" y="111.50"></text></g><g><title>codegen_fn_attrs (455,743 samples, 0.22%)</title><rect x="21.1616%" y="133" width="0.2175%" height="15" fill="rgb(217,207,13)"/><text x="21.4116%" y="143.50"></text></g><g><title>should_inherit_track_caller (378,623 samples, 0.18%)</title><rect x="21.1984%" y="117" width="0.1807%" height="15" fill="rgb(231,73,38)"/><text x="21.4484%" y="127.50"></text></g><g><title>check_mod_attrs (682,197 samples, 0.33%)</title><rect x="21.0537%" y="149" width="0.3256%" height="15" fill="rgb(225,20,46)"/><text x="21.3037%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (446,605 samples, 0.21%)</title><rect x="21.4712%" y="149" width="0.2132%" height="15" fill="rgb(210,31,41)"/><text x="21.7212%" y="159.50"></text></g><g><title>misc_checking_1 (1,412,744 samples, 0.67%)</title><rect x="21.0399%" y="165" width="0.6743%" height="15" fill="rgb(221,200,47)"/><text x="21.2899%" y="175.50"></text></g><g><title>misc_checking_2 (377,574 samples, 0.18%)</title><rect x="21.7141%" y="165" width="0.1802%" height="15" fill="rgb(226,26,5)"/><text x="21.9641%" y="175.50"></text></g><g><title>match_checking (229,392 samples, 0.11%)</title><rect x="21.7848%" y="149" width="0.1095%" height="15" fill="rgb(249,33,26)"/><text x="22.0348%" y="159.50"></text></g><g><title>check_match (215,782 samples, 0.10%)</title><rect x="21.7913%" y="133" width="0.1030%" height="15" fill="rgb(235,183,28)"/><text x="22.0413%" y="143.50"></text></g><g><title>death_checking (224,902 samples, 0.11%)</title><rect x="21.9322%" y="149" width="0.1073%" height="15" fill="rgb(221,5,38)"/><text x="22.1822%" y="159.50"></text></g><g><title>eval_to_const_value_raw (353,284 samples, 0.17%)</title><rect x="22.1682%" y="117" width="0.1686%" height="15" fill="rgb(247,18,42)"/><text x="22.4182%" y="127.50"></text></g><g><title>eval_to_const_value_raw (341,854 samples, 0.16%)</title><rect x="22.1737%" y="101" width="0.1632%" height="15" fill="rgb(241,131,45)"/><text x="22.4237%" y="111.50"></text></g><g><title>eval_to_allocation_raw (331,504 samples, 0.16%)</title><rect x="22.1786%" y="85" width="0.1582%" height="15" fill="rgb(249,31,29)"/><text x="22.4286%" y="95.50"></text></g><g><title>crate_lints (968,470 samples, 0.46%)</title><rect x="22.0403%" y="133" width="0.4622%" height="15" fill="rgb(225,111,53)"/><text x="22.2903%" y="143.50"></text></g><g><title>type_of (312,534 samples, 0.15%)</title><rect x="22.3533%" y="117" width="0.1492%" height="15" fill="rgb(238,160,17)"/><text x="22.6033%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (235,142 samples, 0.11%)</title><rect x="22.3903%" y="101" width="0.1122%" height="15" fill="rgb(214,148,48)"/><text x="22.6403%" y="111.50"></text></g><g><title>lint_checking (1,101,162 samples, 0.53%)</title><rect x="22.0396%" y="149" width="0.5256%" height="15" fill="rgb(232,36,49)"/><text x="22.2896%" y="159.50"></text></g><g><title>privacy_checking_modules (223,412 samples, 0.11%)</title><rect x="22.6098%" y="149" width="0.1066%" height="15" fill="rgb(209,103,24)"/><text x="22.8598%" y="159.50"></text></g><g><title>check_mod_privacy (221,382 samples, 0.11%)</title><rect x="22.6108%" y="133" width="0.1057%" height="15" fill="rgb(229,88,8)"/><text x="22.8608%" y="143.50"></text></g><g><title>misc_checking_3 (1,731,908 samples, 0.83%)</title><rect x="21.8943%" y="165" width="0.8266%" height="15" fill="rgb(213,181,19)"/><text x="22.1443%" y="175.50"></text></g><g><title>is_copy_raw (258,723 samples, 0.12%)</title><rect x="22.8326%" y="117" width="0.1235%" height="15" fill="rgb(254,191,54)"/><text x="23.0826%" y="127.50"></text></g><g><title>evaluate_obligation (221,541 samples, 0.11%)</title><rect x="22.8504%" y="101" width="0.1057%" height="15" fill="rgb(241,83,37)"/><text x="23.1004%" y="111.50"></text></g><g><title>param_env (218,112 samples, 0.10%)</title><rect x="22.9561%" y="117" width="0.1041%" height="15" fill="rgb(233,36,39)"/><text x="23.2061%" y="127.50"></text></g><g><title>impl_parent (1,254,097 samples, 0.60%)</title><rect x="24.1530%" y="101" width="0.5985%" height="15" fill="rgb(226,3,54)"/><text x="24.4030%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (660,816 samples, 0.32%)</title><rect x="24.4362%" y="85" width="0.3154%" height="15" fill="rgb(245,192,40)"/><text x="24.6862%" y="95.50"></text></g><g><title>impl_trait_ref (2,888,608 samples, 1.38%)</title><rect x="24.7516%" y="101" width="1.3786%" height="15" fill="rgb(238,167,29)"/><text x="25.0016%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,243,773 samples, 1.07%)</title><rect x="25.0593%" y="85" width="1.0709%" height="15" fill="rgb(232,182,51)"/><text x="25.3093%" y="95.50"></text></g><g><title>coherent_trait (7,584,967 samples, 3.62%)</title><rect x="22.7538%" y="133" width="3.6201%" height="15" fill="rgb(231,60,39)"/><text x="23.0038%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (6,942,941 samples, 3.31%)</title><rect x="23.0602%" y="117" width="3.3137%" height="15" fill="rgb(208,69,12)"/><text x="23.3102%" y="127.50">spe..</text></g><g><title>trait_impls_of (507,375 samples, 0.24%)</title><rect x="26.1317%" y="101" width="0.2422%" height="15" fill="rgb(235,93,37)"/><text x="26.3817%" y="111.50"></text></g><g><title>coherence_checking (7,698,428 samples, 3.67%)</title><rect x="22.7423%" y="149" width="3.6742%" height="15" fill="rgb(213,116,39)"/><text x="22.9923%" y="159.50">cohe..</text></g><g><title>associated_item (506,903 samples, 0.24%)</title><rect x="30.0375%" y="85" width="0.2419%" height="15" fill="rgb(222,207,29)"/><text x="30.2875%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (395,642 samples, 0.19%)</title><rect x="30.0906%" y="69" width="0.1888%" height="15" fill="rgb(206,96,30)"/><text x="30.3406%" y="79.50"></text></g><g><title>associated_items (714,586 samples, 0.34%)</title><rect x="29.9477%" y="101" width="0.3411%" height="15" fill="rgb(218,138,4)"/><text x="30.1977%" y="111.50"></text></g><g><title>predicates_of (904,333 samples, 0.43%)</title><rect x="31.5548%" y="85" width="0.4316%" height="15" fill="rgb(250,191,14)"/><text x="31.8048%" y="95.50"></text></g><g><title>predicates_defined_on (683,907 samples, 0.33%)</title><rect x="31.6600%" y="69" width="0.3264%" height="15" fill="rgb(239,60,40)"/><text x="31.9100%" y="79.50"></text></g><g><title>specializes (1,534,294 samples, 0.73%)</title><rect x="31.9864%" y="85" width="0.7323%" height="15" fill="rgb(206,27,48)"/><text x="32.2364%" y="95.50"></text></g><g><title>param_env (951,957 samples, 0.45%)</title><rect x="32.2644%" y="69" width="0.4543%" height="15" fill="rgb(225,35,8)"/><text x="32.5144%" y="79.50"></text></g><g><title>def_span (414,260 samples, 0.20%)</title><rect x="32.5210%" y="53" width="0.1977%" height="15" fill="rgb(250,213,24)"/><text x="32.7710%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (371,620 samples, 0.18%)</title><rect x="32.5414%" y="37" width="0.1774%" height="15" fill="rgb(247,123,22)"/><text x="32.7914%" y="47.50"></text></g><g><title>trait_impls_of (468,453 samples, 0.22%)</title><rect x="32.7271%" y="85" width="0.2236%" height="15" fill="rgb(231,138,38)"/><text x="32.9771%" y="95.50"></text></g><g><title>evaluate_obligation (5,445,136 samples, 2.60%)</title><rect x="30.3573%" y="101" width="2.5988%" height="15" fill="rgb(231,145,46)"/><text x="30.6073%" y="111.50">ev..</text></g><g><title>predicates_of (227,253 samples, 0.11%)</title><rect x="33.2493%" y="101" width="0.1085%" height="15" fill="rgb(251,118,11)"/><text x="33.4993%" y="111.50"></text></g><g><title>item_bodies_checking (14,592,037 samples, 6.96%)</title><rect x="26.4398%" y="149" width="6.9643%" height="15" fill="rgb(217,147,25)"/><text x="26.6898%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (14,588,517 samples, 6.96%)</title><rect x="26.4415%" y="133" width="6.9627%" height="15" fill="rgb(247,81,37)"/><text x="26.6915%" y="143.50">typeck_it..</text></g><g><title>typeck (14,546,267 samples, 6.94%)</title><rect x="26.4616%" y="117" width="6.9425%" height="15" fill="rgb(209,12,38)"/><text x="26.7116%" y="127.50">typeck</text></g><g><title>generics_of (527,484 samples, 0.25%)</title><rect x="35.1199%" y="85" width="0.2518%" height="15" fill="rgb(227,1,9)"/><text x="35.3699%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (389,621 samples, 0.19%)</title><rect x="35.1857%" y="69" width="0.1860%" height="15" fill="rgb(248,47,43)"/><text x="35.4357%" y="79.50"></text></g><g><title>impl_trait_ref (766,735 samples, 0.37%)</title><rect x="35.4266%" y="85" width="0.3659%" height="15" fill="rgb(221,10,30)"/><text x="35.6766%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (625,255 samples, 0.30%)</title><rect x="35.4941%" y="69" width="0.2984%" height="15" fill="rgb(210,229,1)"/><text x="35.7441%" y="79.50"></text></g><g><title>predicates_of (326,114 samples, 0.16%)</title><rect x="35.8070%" y="85" width="0.1556%" height="15" fill="rgb(222,148,37)"/><text x="36.0570%" y="95.50"></text></g><g><title>specializes (1,191,873 samples, 0.57%)</title><rect x="35.9626%" y="85" width="0.5688%" height="15" fill="rgb(234,67,33)"/><text x="36.2126%" y="95.50"></text></g><g><title>param_env (810,807 samples, 0.39%)</title><rect x="36.1445%" y="69" width="0.3870%" height="15" fill="rgb(247,98,35)"/><text x="36.3945%" y="79.50"></text></g><g><title>def_span (487,654 samples, 0.23%)</title><rect x="36.2987%" y="53" width="0.2327%" height="15" fill="rgb(247,138,52)"/><text x="36.5487%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (458,384 samples, 0.22%)</title><rect x="36.3127%" y="37" width="0.2188%" height="15" fill="rgb(213,79,30)"/><text x="36.5627%" y="47.50"></text></g><g><title>trait_impls_of (258,674 samples, 0.12%)</title><rect x="36.5359%" y="85" width="0.1235%" height="15" fill="rgb(246,177,23)"/><text x="36.7859%" y="95.50"></text></g><g><title>evaluate_obligation (4,995,281 samples, 2.38%)</title><rect x="34.2859%" y="101" width="2.3841%" height="15" fill="rgb(230,62,27)"/><text x="34.5359%" y="111.50">ev..</text></g><g><title>item_types_checking (7,033,402 samples, 3.36%)</title><rect x="33.4041%" y="149" width="3.3568%" height="15" fill="rgb(216,154,8)"/><text x="33.6541%" y="159.50">ite..</text></g><g><title>check_mod_item_types (7,029,082 samples, 3.35%)</title><rect x="33.4062%" y="133" width="3.3548%" height="15" fill="rgb(244,35,45)"/><text x="33.6562%" y="143.50">che..</text></g><g><title>typeck (6,401,706 samples, 3.06%)</title><rect x="33.7056%" y="117" width="3.0553%" height="15" fill="rgb(251,115,12)"/><text x="33.9556%" y="127.50">typ..</text></g><g><title>fn_sig (364,693 samples, 0.17%)</title><rect x="36.8933%" y="117" width="0.1741%" height="15" fill="rgb(240,54,50)"/><text x="37.1433%" y="127.50"></text></g><g><title>generics_of (327,442 samples, 0.16%)</title><rect x="37.0673%" y="117" width="0.1563%" height="15" fill="rgb(233,84,52)"/><text x="37.3173%" y="127.50"></text></g><g><title>predicates_of (315,935 samples, 0.15%)</title><rect x="37.2553%" y="117" width="0.1508%" height="15" fill="rgb(207,117,47)"/><text x="37.5053%" y="127.50"></text></g><g><title>predicates_defined_on (266,364 samples, 0.13%)</title><rect x="37.2790%" y="101" width="0.1271%" height="15" fill="rgb(249,43,39)"/><text x="37.5290%" y="111.50"></text></g><g><title>type_collecting (1,485,745 samples, 0.71%)</title><rect x="36.7615%" y="149" width="0.7091%" height="15" fill="rgb(209,38,44)"/><text x="37.0115%" y="159.50"></text></g><g><title>collect_mod_item_types (1,465,465 samples, 0.70%)</title><rect x="36.7712%" y="133" width="0.6994%" height="15" fill="rgb(236,212,23)"/><text x="37.0212%" y="143.50"></text></g><g><title>evaluate_obligation (406,934 samples, 0.19%)</title><rect x="38.2562%" y="117" width="0.1942%" height="15" fill="rgb(242,79,21)"/><text x="38.5062%" y="127.50"></text></g><g><title>param_env (226,680 samples, 0.11%)</title><rect x="38.5332%" y="117" width="0.1082%" height="15" fill="rgb(211,96,35)"/><text x="38.7832%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,799,181 samples, 1.34%)</title><rect x="37.5460%" y="133" width="1.3360%" height="15" fill="rgb(253,215,40)"/><text x="37.7960%" y="143.50"></text></g><g><title>region_scope_tree (424,544 samples, 0.20%)</title><rect x="38.6793%" y="117" width="0.2026%" height="15" fill="rgb(211,81,21)"/><text x="38.9293%" y="127.50"></text></g><g><title>evaluate_obligation (239,693 samples, 0.11%)</title><rect x="39.2110%" y="117" width="0.1144%" height="15" fill="rgb(208,190,38)"/><text x="39.4610%" y="127.50"></text></g><g><title>analysis (46,784,245 samples, 22.33%)</title><rect x="17.1736%" y="181" width="22.3287%" height="15" fill="rgb(235,213,38)"/><text x="17.4236%" y="191.50">analysis</text></g><g><title>type_check_crate (35,161,137 samples, 16.78%)</title><rect x="22.7209%" y="165" width="16.7814%" height="15" fill="rgb(237,122,38)"/><text x="22.9709%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,253,713 samples, 2.03%)</title><rect x="37.4721%" y="149" width="2.0302%" height="15" fill="rgb(244,218,35)"/><text x="37.7221%" y="159.50">w..</text></g><g><title>check_item_well_formed (1,299,692 samples, 0.62%)</title><rect x="38.8820%" y="133" width="0.6203%" height="15" fill="rgb(240,68,47)"/><text x="39.1320%" y="143.50"></text></g><g><title>param_env (278,403 samples, 0.13%)</title><rect x="42.7484%" y="133" width="0.1329%" height="15" fill="rgb(210,16,53)"/><text x="42.9984%" y="143.50"></text></g><g><title>fn_abi_of_instance (845,719 samples, 0.40%)</title><rect x="42.4838%" y="149" width="0.4036%" height="15" fill="rgb(235,124,12)"/><text x="42.7338%" y="159.50"></text></g><g><title>codegen_module (6,552,917 samples, 3.13%)</title><rect x="39.8631%" y="165" width="3.1275%" height="15" fill="rgb(224,169,11)"/><text x="40.1131%" y="175.50">cod..</text></g><g><title>codegen_crate (7,310,634 samples, 3.49%)</title><rect x="39.5088%" y="181" width="3.4891%" height="15" fill="rgb(250,166,2)"/><text x="39.7588%" y="191.50">cod..</text></g><g><title>LLVM_module_codegen (55,630,472 samples, 26.55%)</title><rect x="43.0623%" y="165" width="26.5508%" height="15" fill="rgb(242,216,29)"/><text x="43.3123%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (50,941,486 samples, 24.31%)</title><rect x="45.3002%" y="149" width="24.3128%" height="15" fill="rgb(230,116,27)"/><text x="45.5502%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (59,685,854 samples, 28.49%)</title><rect x="42.9979%" y="181" width="28.4863%" height="15" fill="rgb(228,99,48)"/><text x="43.2479%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,920,581 samples, 1.87%)</title><rect x="69.6130%" y="165" width="1.8712%" height="15" fill="rgb(253,11,6)"/><text x="69.8630%" y="175.50">L..</text></g><g><title>metadata_load_macro (351,934 samples, 0.17%)</title><rect x="75.9645%" y="133" width="0.1680%" height="15" fill="rgb(247,143,39)"/><text x="76.2145%" y="143.50"></text></g><g><title>macro_expand_crate (9,390,805 samples, 4.48%)</title><rect x="71.7453%" y="165" width="4.4819%" height="15" fill="rgb(236,97,10)"/><text x="71.9953%" y="175.50">macro..</text></g><g><title>expand_crate (9,373,645 samples, 4.47%)</title><rect x="71.7535%" y="149" width="4.4738%" height="15" fill="rgb(233,208,19)"/><text x="72.0035%" y="159.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (342,723 samples, 0.16%)</title><rect x="76.2297%" y="165" width="0.1636%" height="15" fill="rgb(216,164,2)"/><text x="76.4797%" y="175.50"></text></g><g><title>finalize_macro_resolutions (311,524 samples, 0.15%)</title><rect x="76.4155%" y="149" width="0.1487%" height="15" fill="rgb(220,129,5)"/><text x="76.6655%" y="159.50"></text></g><g><title>late_resolve_crate (1,777,998 samples, 0.85%)</title><rect x="76.5641%" y="149" width="0.8486%" height="15" fill="rgb(242,17,10)"/><text x="76.8141%" y="159.50"></text></g><g><title>configure_and_expand (12,529,597 samples, 5.98%)</title><rect x="71.4842%" y="181" width="5.9800%" height="15" fill="rgb(242,107,0)"/><text x="71.7342%" y="191.50">configur..</text></g><g><title>resolve_crate (2,243,923 samples, 1.07%)</title><rect x="76.3932%" y="165" width="1.0710%" height="15" fill="rgb(251,28,31)"/><text x="76.6432%" y="175.50"></text></g><g><title>early_lint_checks (361,134 samples, 0.17%)</title><rect x="77.5598%" y="181" width="0.1724%" height="15" fill="rgb(233,223,10)"/><text x="77.8098%" y="191.50"></text></g><g><title>free_global_ctxt (3,209,292 samples, 1.53%)</title><rect x="77.7322%" y="181" width="1.5317%" height="15" fill="rgb(215,21,27)"/><text x="77.9822%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (840,519 samples, 0.40%)</title><rect x="80.4320%" y="85" width="0.4012%" height="15" fill="rgb(232,23,21)"/><text x="80.6820%" y="95.50"></text></g><g><title>optimized_mir (2,216,841 samples, 1.06%)</title><rect x="79.7844%" y="101" width="1.0580%" height="15" fill="rgb(244,5,23)"/><text x="80.0344%" y="111.50"></text></g><g><title>specialization_graph_of (713,349 samples, 0.34%)</title><rect x="81.0105%" y="85" width="0.3405%" height="15" fill="rgb(226,81,46)"/><text x="81.2605%" y="95.50"></text></g><g><title>impl_trait_ref (237,523 samples, 0.11%)</title><rect x="81.2376%" y="69" width="0.1134%" height="15" fill="rgb(247,70,30)"/><text x="81.4876%" y="79.50"></text></g><g><title>resolve_instance (1,095,141 samples, 0.52%)</title><rect x="80.8425%" y="101" width="0.5227%" height="15" fill="rgb(212,68,19)"/><text x="81.0925%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (3,991,921 samples, 1.91%)</title><rect x="79.5538%" y="117" width="1.9052%" height="15" fill="rgb(240,187,13)"/><text x="79.8038%" y="127.50">m..</text></g><g><title>monomorphization_collector (4,034,701 samples, 1.93%)</title><rect x="79.5527%" y="133" width="1.9256%" height="15" fill="rgb(223,113,26)"/><text x="79.8027%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (223,223 samples, 0.11%)</title><rect x="81.4800%" y="117" width="0.1065%" height="15" fill="rgb(206,192,2)"/><text x="81.7300%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (4,418,805 samples, 2.11%)</title><rect x="79.5362%" y="149" width="2.1090%" height="15" fill="rgb(241,108,4)"/><text x="79.7862%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (349,504 samples, 0.17%)</title><rect x="81.4784%" y="133" width="0.1668%" height="15" fill="rgb(247,173,49)"/><text x="81.7284%" y="143.50"></text></g><g><title>exported_symbols (4,480,796 samples, 2.14%)</title><rect x="79.5228%" y="165" width="2.1385%" height="15" fill="rgb(224,114,35)"/><text x="79.7728%" y="175.50">e..</text></g><g><title>optimized_mir (449,764 samples, 0.21%)</title><rect x="81.6979%" y="165" width="0.2147%" height="15" fill="rgb(245,159,27)"/><text x="81.9479%" y="175.50"></text></g><g><title>generate_crate_metadata (5,570,787 samples, 2.66%)</title><rect x="79.2639%" y="181" width="2.6588%" height="15" fill="rgb(245,172,44)"/><text x="79.5139%" y="191.50">ge..</text></g><g><title>hir_lowering (2,268,303 samples, 1.08%)</title><rect x="81.9227%" y="181" width="1.0826%" height="15" fill="rgb(236,23,11)"/><text x="82.1727%" y="191.50"></text></g><g><title>finish_ongoing_codegen (27,696,921 samples, 13.22%)</title><rect x="83.0117%" y="165" width="13.2189%" height="15" fill="rgb(205,117,38)"/><text x="83.2617%" y="175.50">finish_ongoing_codeg..</text></g><g><title>link_crate (1,020,571 samples, 0.49%)</title><rect x="96.2306%" y="165" width="0.4871%" height="15" fill="rgb(237,72,25)"/><text x="96.4806%" y="175.50"></text></g><g><title>link_binary (1,012,921 samples, 0.48%)</title><rect x="96.2343%" y="149" width="0.4834%" height="15" fill="rgb(244,70,9)"/><text x="96.4843%" y="159.50"></text></g><g><title>link_rlib (704,127 samples, 0.34%)</title><rect x="96.3817%" y="133" width="0.3361%" height="15" fill="rgb(217,125,39)"/><text x="96.6317%" y="143.50"></text></g><g><title>link (28,740,512 samples, 13.72%)</title><rect x="83.0053%" y="181" width="13.7170%" height="15" fill="rgb(235,36,10)"/><text x="83.2553%" y="191.50">link</text></g><g><title>parse_crate (4,453,325 samples, 2.13%)</title><rect x="96.7222%" y="181" width="2.1254%" height="15" fill="rgb(251,123,47)"/><text x="96.9722%" y="191.50">p..</text></g><g><title>prepare_outputs (365,374 samples, 0.17%)</title><rect x="98.8530%" y="181" width="0.1744%" height="15" fill="rgb(221,13,13)"/><text x="99.1030%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,569,546 samples, 0.75%)</title><rect x="99.0274%" y="181" width="0.7491%" height="15" fill="rgb(238,131,9)"/><text x="99.2774%" y="191.50"></text></g><g><title>all (209,525,004 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (209,525,004 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (292,363 samples, 0.14%)</title><rect x="99.8605%" y="181" width="0.1395%" height="15" fill="rgb(242,14,37)"/><text x="100.1105%" y="191.50"></text></g></svg></svg>