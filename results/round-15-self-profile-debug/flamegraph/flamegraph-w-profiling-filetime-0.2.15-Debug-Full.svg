<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (45,595,691 samples, 11.41%)</title><rect x="0.1875%" y="181" width="11.4074%" height="15" fill="rgb(227,0,7)"/><text x="0.4375%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,010,499 samples, 0.25%)</title><rect x="14.6105%" y="69" width="0.2528%" height="15" fill="rgb(217,0,24)"/><text x="14.8605%" y="79.50"></text></g><g><title>is_copy_raw (702,016 samples, 0.18%)</title><rect x="14.6877%" y="53" width="0.1756%" height="15" fill="rgb(221,193,54)"/><text x="14.9377%" y="63.50"></text></g><g><title>evaluate_obligation (600,896 samples, 0.15%)</title><rect x="14.7130%" y="37" width="0.1503%" height="15" fill="rgb(248,212,6)"/><text x="14.9630%" y="47.50"></text></g><g><title>resolve_instance (733,411 samples, 0.18%)</title><rect x="14.8720%" y="69" width="0.1835%" height="15" fill="rgb(208,68,35)"/><text x="15.1220%" y="79.50"></text></g><g><title>thir_body (790,050 samples, 0.20%)</title><rect x="15.0616%" y="69" width="0.1977%" height="15" fill="rgb(232,128,0)"/><text x="15.3116%" y="79.50"></text></g><g><title>mir_const (6,261,893 samples, 1.57%)</title><rect x="13.6973%" y="117" width="1.5666%" height="15" fill="rgb(207,160,47)"/><text x="13.9473%" y="127.50"></text></g><g><title>unsafety_check_result (5,380,553 samples, 1.35%)</title><rect x="13.9178%" y="101" width="1.3461%" height="15" fill="rgb(228,23,34)"/><text x="14.1678%" y="111.50"></text></g><g><title>mir_built (4,745,670 samples, 1.19%)</title><rect x="14.0766%" y="85" width="1.1873%" height="15" fill="rgb(218,30,26)"/><text x="14.3266%" y="95.50"></text></g><g><title>mir_promoted (7,257,976 samples, 1.82%)</title><rect x="13.5280%" y="133" width="1.8158%" height="15" fill="rgb(220,122,19)"/><text x="13.7780%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (1,053,458 samples, 0.26%)</title><rect x="15.4382%" y="133" width="0.2636%" height="15" fill="rgb(250,228,42)"/><text x="15.6882%" y="143.50"></text></g><g><title>MIR_borrow_checking (16,194,743 samples, 4.05%)</title><rect x="11.6513%" y="165" width="4.0517%" height="15" fill="rgb(240,193,28)"/><text x="11.9013%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (16,105,772 samples, 4.03%)</title><rect x="11.6735%" y="149" width="4.0294%" height="15" fill="rgb(216,20,37)"/><text x="11.9235%" y="159.50">mir_..</text></g><g><title>check_mod_attrs (472,733 samples, 0.12%)</title><rect x="15.7781%" y="149" width="0.1183%" height="15" fill="rgb(206,188,39)"/><text x="16.0281%" y="159.50"></text></g><g><title>misc_checking_1 (1,052,100 samples, 0.26%)</title><rect x="15.7735%" y="165" width="0.2632%" height="15" fill="rgb(217,207,13)"/><text x="16.0235%" y="175.50"></text></g><g><title>misc_checking_2 (777,298 samples, 0.19%)</title><rect x="16.0367%" y="165" width="0.1945%" height="15" fill="rgb(231,73,38)"/><text x="16.2867%" y="175.50"></text></g><g><title>match_checking (439,105 samples, 0.11%)</title><rect x="16.1213%" y="149" width="0.1099%" height="15" fill="rgb(225,20,46)"/><text x="16.3713%" y="159.50"></text></g><g><title>check_match (415,244 samples, 0.10%)</title><rect x="16.1273%" y="133" width="0.1039%" height="15" fill="rgb(210,31,41)"/><text x="16.3773%" y="143.50"></text></g><g><title>death_checking (561,525 samples, 0.14%)</title><rect x="16.2684%" y="149" width="0.1405%" height="15" fill="rgb(221,200,47)"/><text x="16.5184%" y="159.50"></text></g><g><title>crate_lints (2,422,674 samples, 0.61%)</title><rect x="16.4093%" y="133" width="0.6061%" height="15" fill="rgb(226,26,5)"/><text x="16.6593%" y="143.50"></text></g><g><title>type_of (1,310,264 samples, 0.33%)</title><rect x="16.6877%" y="117" width="0.3278%" height="15" fill="rgb(249,33,26)"/><text x="16.9377%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (861,000 samples, 0.22%)</title><rect x="16.8001%" y="101" width="0.2154%" height="15" fill="rgb(235,183,28)"/><text x="17.0501%" y="111.50"></text></g><g><title>lint_checking (2,711,077 samples, 0.68%)</title><rect x="16.4089%" y="149" width="0.6783%" height="15" fill="rgb(221,5,38)"/><text x="16.6589%" y="159.50"></text></g><g><title>privacy_checking_modules (552,146 samples, 0.14%)</title><rect x="17.1251%" y="149" width="0.1381%" height="15" fill="rgb(247,18,42)"/><text x="17.3751%" y="159.50"></text></g><g><title>check_mod_privacy (548,496 samples, 0.14%)</title><rect x="17.1260%" y="133" width="0.1372%" height="15" fill="rgb(241,131,45)"/><text x="17.3760%" y="143.50"></text></g><g><title>misc_checking_3 (4,138,512 samples, 1.04%)</title><rect x="16.2312%" y="165" width="1.0354%" height="15" fill="rgb(249,31,29)"/><text x="16.4812%" y="175.50"></text></g><g><title>impl_parent (3,098,278 samples, 0.78%)</title><rect x="18.6253%" y="101" width="0.7751%" height="15" fill="rgb(225,111,53)"/><text x="18.8753%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,693,580 samples, 0.42%)</title><rect x="18.9768%" y="85" width="0.4237%" height="15" fill="rgb(238,160,17)"/><text x="19.2268%" y="95.50"></text></g><g><title>impl_trait_ref (6,042,878 samples, 1.51%)</title><rect x="19.4005%" y="101" width="1.5118%" height="15" fill="rgb(214,148,48)"/><text x="19.6505%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,535,935 samples, 1.13%)</title><rect x="19.7775%" y="85" width="1.1348%" height="15" fill="rgb(232,36,49)"/><text x="20.0275%" y="95.50"></text></g><g><title>trait_impls_of (1,016,450 samples, 0.25%)</title><rect x="20.9195%" y="101" width="0.2543%" height="15" fill="rgb(209,103,24)"/><text x="21.1695%" y="111.50"></text></g><g><title>coherent_trait (15,533,276 samples, 3.89%)</title><rect x="17.2879%" y="133" width="3.8862%" height="15" fill="rgb(229,88,8)"/><text x="17.5379%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (15,025,120 samples, 3.76%)</title><rect x="17.4150%" y="117" width="3.7591%" height="15" fill="rgb(213,181,19)"/><text x="17.6650%" y="127.50">spec..</text></g><g><title>coherence_checking (15,612,078 samples, 3.91%)</title><rect x="17.2808%" y="149" width="3.9059%" height="15" fill="rgb(254,191,54)"/><text x="17.5308%" y="159.50">cohe..</text></g><g><title>evaluate_obligation (944,079 samples, 0.24%)</title><rect x="23.5288%" y="101" width="0.2362%" height="15" fill="rgb(241,83,37)"/><text x="23.7788%" y="111.50"></text></g><g><title>associated_items (544,875 samples, 0.14%)</title><rect x="24.9109%" y="85" width="0.1363%" height="15" fill="rgb(233,36,39)"/><text x="25.1609%" y="95.50"></text></g><g><title>generics_of (432,633 samples, 0.11%)</title><rect x="25.6047%" y="69" width="0.1082%" height="15" fill="rgb(226,3,54)"/><text x="25.8547%" y="79.50"></text></g><g><title>impl_trait_ref (947,739 samples, 0.24%)</title><rect x="25.7232%" y="69" width="0.2371%" height="15" fill="rgb(245,192,40)"/><text x="25.9732%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (619,307 samples, 0.15%)</title><rect x="25.8054%" y="53" width="0.1549%" height="15" fill="rgb(238,167,29)"/><text x="26.0554%" y="63.50"></text></g><g><title>evaluate_obligation (4,138,089 samples, 1.04%)</title><rect x="25.1249%" y="85" width="1.0353%" height="15" fill="rgb(232,182,51)"/><text x="25.3749%" y="95.50"></text></g><g><title>typeck (9,473,137 samples, 2.37%)</title><rect x="23.9950%" y="101" width="2.3700%" height="15" fill="rgb(231,60,39)"/><text x="24.2450%" y="111.50">ty..</text></g><g><title>item_bodies_checking (20,732,499 samples, 5.19%)</title><rect x="21.1914%" y="149" width="5.1870%" height="15" fill="rgb(208,69,12)"/><text x="21.4414%" y="159.50">item_b..</text></g><g><title>typeck_item_bodies (20,729,469 samples, 5.19%)</title><rect x="21.1922%" y="133" width="5.1862%" height="15" fill="rgb(235,93,37)"/><text x="21.4422%" y="143.50">typeck..</text></g><g><title>typeck (20,669,909 samples, 5.17%)</title><rect x="21.2071%" y="117" width="5.1713%" height="15" fill="rgb(213,116,39)"/><text x="21.4571%" y="127.50">typeck</text></g><g><title>item_types_checking (819,979 samples, 0.21%)</title><rect x="26.3784%" y="149" width="0.2051%" height="15" fill="rgb(222,207,29)"/><text x="26.6284%" y="159.50"></text></g><g><title>check_mod_item_types (814,909 samples, 0.20%)</title><rect x="26.3797%" y="133" width="0.2039%" height="15" fill="rgb(206,96,30)"/><text x="26.6297%" y="143.50"></text></g><g><title>type_collecting (1,294,943 samples, 0.32%)</title><rect x="26.5842%" y="149" width="0.3240%" height="15" fill="rgb(218,138,4)"/><text x="26.8342%" y="159.50"></text></g><g><title>collect_mod_item_types (1,285,773 samples, 0.32%)</title><rect x="26.5865%" y="133" width="0.3217%" height="15" fill="rgb(250,191,14)"/><text x="26.8365%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,062,482 samples, 0.27%)</title><rect x="26.9378%" y="133" width="0.2658%" height="15" fill="rgb(239,60,40)"/><text x="27.1878%" y="143.50"></text></g><g><title>evaluate_obligation (458,966 samples, 0.11%)</title><rect x="27.4235%" y="117" width="0.1148%" height="15" fill="rgb(206,27,48)"/><text x="27.6735%" y="127.50"></text></g><g><title>analysis (64,331,429 samples, 16.09%)</title><rect x="11.5949%" y="181" width="16.0948%" height="15" fill="rgb(225,35,8)"/><text x="11.8449%" y="191.50">analysis</text></g><g><title>type_check_crate (41,661,710 samples, 10.42%)</title><rect x="17.2666%" y="165" width="10.4232%" height="15" fill="rgb(250,213,24)"/><text x="17.5166%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,119,601 samples, 0.78%)</title><rect x="26.9092%" y="149" width="0.7805%" height="15" fill="rgb(247,123,22)"/><text x="27.1592%" y="159.50"></text></g><g><title>check_item_well_formed (1,942,979 samples, 0.49%)</title><rect x="27.2036%" y="133" width="0.4861%" height="15" fill="rgb(231,138,38)"/><text x="27.4536%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (560,366 samples, 0.14%)</title><rect x="35.8047%" y="149" width="0.1402%" height="15" fill="rgb(231,145,46)"/><text x="36.0547%" y="159.50"></text></g><g><title>codegen_fn_attrs (568,265 samples, 0.14%)</title><rect x="36.4369%" y="133" width="0.1422%" height="15" fill="rgb(251,118,11)"/><text x="36.6869%" y="143.50"></text></g><g><title>layout_of (1,082,930 samples, 0.27%)</title><rect x="36.5969%" y="133" width="0.2709%" height="15" fill="rgb(217,147,25)"/><text x="36.8469%" y="143.50"></text></g><g><title>predicates_of (536,788 samples, 0.13%)</title><rect x="37.1420%" y="117" width="0.1343%" height="15" fill="rgb(247,81,37)"/><text x="37.3920%" y="127.50"></text></g><g><title>param_env (1,635,977 samples, 0.41%)</title><rect x="36.8679%" y="133" width="0.4093%" height="15" fill="rgb(209,12,38)"/><text x="37.1179%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,178,804 samples, 1.30%)</title><rect x="36.0493%" y="149" width="1.2957%" height="15" fill="rgb(227,1,9)"/><text x="36.2993%" y="159.50"></text></g><g><title>generics_of (432,393 samples, 0.11%)</title><rect x="37.3545%" y="149" width="0.1082%" height="15" fill="rgb(248,47,43)"/><text x="37.6045%" y="159.50"></text></g><g><title>layout_of (543,457 samples, 0.14%)</title><rect x="37.4911%" y="149" width="0.1360%" height="15" fill="rgb(221,10,30)"/><text x="37.7411%" y="159.50"></text></g><g><title>symbol_name (461,762 samples, 0.12%)</title><rect x="37.6324%" y="149" width="0.1155%" height="15" fill="rgb(210,229,1)"/><text x="37.8824%" y="159.50"></text></g><g><title>codegen_module (37,579,128 samples, 9.40%)</title><rect x="28.3540%" y="165" width="9.4018%" height="15" fill="rgb(222,148,37)"/><text x="28.6040%" y="175.50">codegen_module</text></g><g><title>codegen_crate (40,298,226 samples, 10.08%)</title><rect x="27.6929%" y="181" width="10.0820%" height="15" fill="rgb(234,67,33)"/><text x="27.9429%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (174,175,838 samples, 43.58%)</title><rect x="37.8259%" y="165" width="43.5763%" height="15" fill="rgb(247,98,35)"/><text x="38.0759%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (167,119,546 samples, 41.81%)</title><rect x="39.5913%" y="149" width="41.8109%" height="15" fill="rgb(247,138,52)"/><text x="39.8413%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (181,022,095 samples, 45.29%)</title><rect x="37.7749%" y="181" width="45.2891%" height="15" fill="rgb(213,79,30)"/><text x="38.0249%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,642,566 samples, 1.66%)</title><rect x="81.4022%" y="165" width="1.6619%" height="15" fill="rgb(246,177,23)"/><text x="81.6522%" y="175.50"></text></g><g><title>metadata_register_crate (2,688,857 samples, 0.67%)</title><rect x="89.7612%" y="133" width="0.6727%" height="15" fill="rgb(230,62,27)"/><text x="90.0112%" y="143.50"></text></g><g><title>metadata_register_crate (978,141 samples, 0.24%)</title><rect x="90.1892%" y="117" width="0.2447%" height="15" fill="rgb(216,154,8)"/><text x="90.4392%" y="127.50"></text></g><g><title>macro_expand_crate (29,211,975 samples, 7.31%)</title><rect x="83.1902%" y="165" width="7.3084%" height="15" fill="rgb(244,35,45)"/><text x="83.4402%" y="175.50">macro_expa..</text></g><g><title>expand_crate (29,191,085 samples, 7.30%)</title><rect x="83.1954%" y="149" width="7.3032%" height="15" fill="rgb(251,115,12)"/><text x="83.4454%" y="159.50">expand_cra..</text></g><g><title>late_resolve_crate (1,439,355 samples, 0.36%)</title><rect x="90.6529%" y="149" width="0.3601%" height="15" fill="rgb(240,54,50)"/><text x="90.9029%" y="159.50"></text></g><g><title>configure_and_expand (31,849,082 samples, 7.97%)</title><rect x="83.0640%" y="181" width="7.9682%" height="15" fill="rgb(233,84,52)"/><text x="83.3140%" y="191.50">configure_a..</text></g><g><title>resolve_crate (1,746,947 samples, 0.44%)</title><rect x="90.5952%" y="165" width="0.4371%" height="15" fill="rgb(207,117,47)"/><text x="90.8452%" y="175.50"></text></g><g><title>free_global_ctxt (5,518,516 samples, 1.38%)</title><rect x="91.1385%" y="181" width="1.3807%" height="15" fill="rgb(249,43,39)"/><text x="91.3885%" y="191.50"></text></g><g><title>layout_of (503,805 samples, 0.13%)</title><rect x="93.6456%" y="85" width="0.1260%" height="15" fill="rgb(209,38,44)"/><text x="93.8956%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (558,291 samples, 0.14%)</title><rect x="93.7716%" y="85" width="0.1397%" height="15" fill="rgb(236,212,23)"/><text x="94.0216%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,760,186 samples, 0.44%)</title><rect x="93.9113%" y="85" width="0.4404%" height="15" fill="rgb(242,79,21)"/><text x="94.1613%" y="95.50"></text></g><g><title>optimized_mir (4,972,882 samples, 1.24%)</title><rect x="93.2120%" y="101" width="1.2441%" height="15" fill="rgb(211,96,35)"/><text x="93.4620%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (836,437 samples, 0.21%)</title><rect x="94.5446%" y="85" width="0.2093%" height="15" fill="rgb(253,215,40)"/><text x="94.7946%" y="95.50"></text></g><g><title>specialization_graph_of (460,676 samples, 0.12%)</title><rect x="94.8446%" y="85" width="0.1153%" height="15" fill="rgb(211,81,21)"/><text x="95.0946%" y="95.50"></text></g><g><title>resolve_instance (2,132,927 samples, 0.53%)</title><rect x="94.4561%" y="101" width="0.5336%" height="15" fill="rgb(208,190,38)"/><text x="94.7061%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (9,357,534 samples, 2.34%)</title><rect x="92.7707%" y="117" width="2.3411%" height="15" fill="rgb(235,213,38)"/><text x="93.0207%" y="127.50">m..</text></g><g><title>monomorphization_collector (9,408,675 samples, 2.35%)</title><rect x="92.7701%" y="133" width="2.3539%" height="15" fill="rgb(237,122,38)"/><text x="93.0201%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (741,328 samples, 0.19%)</title><rect x="95.1267%" y="117" width="0.1855%" height="15" fill="rgb(244,218,35)"/><text x="95.3767%" y="127.50"></text></g><g><title>symbol_name (666,626 samples, 0.17%)</title><rect x="95.1454%" y="101" width="0.1668%" height="15" fill="rgb(240,68,47)"/><text x="95.3954%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (10,567,627 samples, 2.64%)</title><rect x="92.7636%" y="149" width="2.6439%" height="15" fill="rgb(210,16,53)"/><text x="93.0136%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,133,032 samples, 0.28%)</title><rect x="95.1240%" y="133" width="0.2835%" height="15" fill="rgb(235,124,12)"/><text x="95.3740%" y="143.50"></text></g><g><title>exported_symbols (10,653,758 samples, 2.67%)</title><rect x="92.7534%" y="165" width="2.6654%" height="15" fill="rgb(224,169,11)"/><text x="93.0034%" y="175.50">ex..</text></g><g><title>layout_of (441,434 samples, 0.11%)</title><rect x="95.6542%" y="149" width="0.1104%" height="15" fill="rgb(250,166,2)"/><text x="95.9042%" y="159.50"></text></g><g><title>optimized_mir (2,354,913 samples, 0.59%)</title><rect x="95.4306%" y="165" width="0.5892%" height="15" fill="rgb(242,216,29)"/><text x="95.6806%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,019,663 samples, 0.26%)</title><rect x="95.7647%" y="149" width="0.2551%" height="15" fill="rgb(230,116,27)"/><text x="96.0147%" y="159.50"></text></g><g><title>generate_crate_metadata (14,022,302 samples, 3.51%)</title><rect x="92.5192%" y="181" width="3.5082%" height="15" fill="rgb(228,99,48)"/><text x="92.7692%" y="191.50">gen..</text></g><g><title>hir_lowering (1,881,719 samples, 0.47%)</title><rect x="96.0274%" y="181" width="0.4708%" height="15" fill="rgb(253,11,6)"/><text x="96.2774%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,739,108 samples, 0.94%)</title><rect x="96.5346%" y="165" width="0.9355%" height="15" fill="rgb(247,143,39)"/><text x="96.7846%" y="175.50"></text></g><g><title>link_crate (1,735,218 samples, 0.43%)</title><rect x="97.4701%" y="165" width="0.4341%" height="15" fill="rgb(236,97,10)"/><text x="97.7201%" y="175.50"></text></g><g><title>link_binary (1,715,747 samples, 0.43%)</title><rect x="97.4750%" y="149" width="0.4293%" height="15" fill="rgb(233,208,19)"/><text x="97.7250%" y="159.50"></text></g><g><title>link_rlib (1,136,041 samples, 0.28%)</title><rect x="97.6200%" y="133" width="0.2842%" height="15" fill="rgb(216,164,2)"/><text x="97.8700%" y="143.50"></text></g><g><title>link (5,629,997 samples, 1.41%)</title><rect x="96.4981%" y="181" width="1.4085%" height="15" fill="rgb(220,129,5)"/><text x="96.7481%" y="191.50"></text></g><g><title>parse_crate (6,191,143 samples, 1.55%)</title><rect x="97.9067%" y="181" width="1.5489%" height="15" fill="rgb(242,17,10)"/><text x="98.1567%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,544,325 samples, 0.39%)</title><rect x="99.5109%" y="181" width="0.3864%" height="15" fill="rgb(242,107,0)"/><text x="99.7609%" y="191.50"></text></g><g><title>all (399,703,272 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (399,703,272 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>