<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (376,051,012 samples, 14.93%)</title><rect x="0.0471%" y="181" width="14.9292%" height="15" fill="rgb(227,0,7)"/><text x="0.2971%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,229,784 samples, 0.13%)</title><rect x="18.9968%" y="69" width="0.1282%" height="15" fill="rgb(217,0,24)"/><text x="19.2468%" y="79.50"></text></g><g><title>resolve_instance (3,202,767 samples, 0.13%)</title><rect x="19.1250%" y="69" width="0.1271%" height="15" fill="rgb(221,193,54)"/><text x="19.3750%" y="79.50"></text></g><g><title>thir_body (6,512,154 samples, 0.26%)</title><rect x="19.2577%" y="69" width="0.2585%" height="15" fill="rgb(248,212,6)"/><text x="19.5077%" y="79.50"></text></g><g><title>mir_const (38,280,730 samples, 1.52%)</title><rect x="18.0009%" y="117" width="1.5197%" height="15" fill="rgb(208,68,35)"/><text x="18.2509%" y="127.50"></text></g><g><title>unsafety_check_result (32,801,231 samples, 1.30%)</title><rect x="18.2184%" y="101" width="1.3022%" height="15" fill="rgb(232,128,0)"/><text x="18.4684%" y="111.50"></text></g><g><title>mir_built (28,976,426 samples, 1.15%)</title><rect x="18.3703%" y="85" width="1.1504%" height="15" fill="rgb(207,160,47)"/><text x="18.6203%" y="95.50"></text></g><g><title>mir_promoted (44,725,579 samples, 1.78%)</title><rect x="17.8117%" y="133" width="1.7756%" height="15" fill="rgb(228,23,34)"/><text x="18.0617%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (8,421,989 samples, 0.33%)</title><rect x="19.7351%" y="133" width="0.3344%" height="15" fill="rgb(218,30,26)"/><text x="19.9851%" y="143.50"></text></g><g><title>MIR_borrow_checking (127,071,282 samples, 5.04%)</title><rect x="15.0253%" y="165" width="5.0447%" height="15" fill="rgb(220,122,19)"/><text x="15.2753%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (126,371,606 samples, 5.02%)</title><rect x="15.0531%" y="149" width="5.0169%" height="15" fill="rgb(250,228,42)"/><text x="15.3031%" y="159.50">mir_bo..</text></g><g><title>misc_checking_1 (5,551,099 samples, 0.22%)</title><rect x="20.1440%" y="165" width="0.2204%" height="15" fill="rgb(240,193,28)"/><text x="20.3940%" y="175.50"></text></g><g><title>misc_checking_2 (5,288,387 samples, 0.21%)</title><rect x="20.3644%" y="165" width="0.2099%" height="15" fill="rgb(216,20,37)"/><text x="20.6144%" y="175.50"></text></g><g><title>match_checking (2,861,021 samples, 0.11%)</title><rect x="20.4608%" y="149" width="0.1136%" height="15" fill="rgb(206,188,39)"/><text x="20.7108%" y="159.50"></text></g><g><title>check_match (2,686,058 samples, 0.11%)</title><rect x="20.4677%" y="133" width="0.1066%" height="15" fill="rgb(217,207,13)"/><text x="20.7177%" y="143.50"></text></g><g><title>death_checking (2,626,568 samples, 0.10%)</title><rect x="20.6209%" y="149" width="0.1043%" height="15" fill="rgb(231,73,38)"/><text x="20.8709%" y="159.50"></text></g><g><title>crate_lints (8,024,656 samples, 0.32%)</title><rect x="20.7253%" y="133" width="0.3186%" height="15" fill="rgb(225,20,46)"/><text x="20.9753%" y="143.50"></text></g><g><title>lint_checking (10,813,006 samples, 0.43%)</title><rect x="20.7251%" y="149" width="0.4293%" height="15" fill="rgb(210,31,41)"/><text x="20.9751%" y="159.50"></text></g><g><title>module_lints (2,784,800 samples, 0.11%)</title><rect x="21.0439%" y="133" width="0.1106%" height="15" fill="rgb(221,200,47)"/><text x="21.2939%" y="143.50"></text></g><g><title>lint_mod (2,759,500 samples, 0.11%)</title><rect x="21.0449%" y="117" width="0.1096%" height="15" fill="rgb(226,26,5)"/><text x="21.2949%" y="127.50"></text></g><g><title>privacy_checking_modules (4,910,543 samples, 0.19%)</title><rect x="21.2081%" y="149" width="0.1949%" height="15" fill="rgb(249,33,26)"/><text x="21.4581%" y="159.50"></text></g><g><title>check_mod_privacy (4,894,703 samples, 0.19%)</title><rect x="21.2088%" y="133" width="0.1943%" height="15" fill="rgb(235,183,28)"/><text x="21.4588%" y="143.50"></text></g><g><title>misc_checking_3 (20,915,265 samples, 0.83%)</title><rect x="20.5744%" y="165" width="0.8303%" height="15" fill="rgb(221,5,38)"/><text x="20.8244%" y="175.50"></text></g><g><title>impl_parent (3,962,257 samples, 0.16%)</title><rect x="21.6650%" y="101" width="0.1573%" height="15" fill="rgb(247,18,42)"/><text x="21.9150%" y="111.50"></text></g><g><title>impl_trait_ref (7,240,305 samples, 0.29%)</title><rect x="21.8223%" y="101" width="0.2874%" height="15" fill="rgb(241,131,45)"/><text x="22.0723%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,802,828 samples, 0.23%)</title><rect x="21.8793%" y="85" width="0.2304%" height="15" fill="rgb(249,31,29)"/><text x="22.1293%" y="95.50"></text></g><g><title>coherent_trait (18,954,013 samples, 0.75%)</title><rect x="21.4212%" y="133" width="0.7525%" height="15" fill="rgb(225,111,53)"/><text x="21.6712%" y="143.50"></text></g><g><title>specialization_graph_of (18,396,657 samples, 0.73%)</title><rect x="21.4433%" y="117" width="0.7303%" height="15" fill="rgb(238,160,17)"/><text x="21.6933%" y="127.50"></text></g><g><title>coherence_checking (19,271,537 samples, 0.77%)</title><rect x="21.4197%" y="149" width="0.7651%" height="15" fill="rgb(214,148,48)"/><text x="21.6697%" y="159.50"></text></g><g><title>evaluate_obligation (9,385,055 samples, 0.37%)</title><rect x="26.2030%" y="101" width="0.3726%" height="15" fill="rgb(232,36,49)"/><text x="26.4530%" y="111.50"></text></g><g><title>evaluate_obligation (2,907,678 samples, 0.12%)</title><rect x="27.6365%" y="85" width="0.1154%" height="15" fill="rgb(209,103,24)"/><text x="27.8865%" y="95.50"></text></g><g><title>typeck (28,117,740 samples, 1.12%)</title><rect x="26.7571%" y="101" width="1.1163%" height="15" fill="rgb(229,88,8)"/><text x="27.0071%" y="111.50"></text></g><g><title>item_bodies_checking (143,245,106 samples, 5.69%)</title><rect x="22.1934%" y="149" width="5.6868%" height="15" fill="rgb(213,181,19)"/><text x="22.4434%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (143,241,056 samples, 5.69%)</title><rect x="22.1936%" y="133" width="5.6867%" height="15" fill="rgb(254,191,54)"/><text x="22.4436%" y="143.50">typeck_..</text></g><g><title>typeck (142,779,265 samples, 5.67%)</title><rect x="22.2119%" y="117" width="5.6683%" height="15" fill="rgb(241,83,37)"/><text x="22.4619%" y="127.50">typeck</text></g><g><title>item_types_checking (9,822,315 samples, 0.39%)</title><rect x="27.8802%" y="149" width="0.3899%" height="15" fill="rgb(233,36,39)"/><text x="28.1302%" y="159.50"></text></g><g><title>check_mod_item_types (9,798,635 samples, 0.39%)</title><rect x="27.8812%" y="133" width="0.3890%" height="15" fill="rgb(226,3,54)"/><text x="28.1312%" y="143.50"></text></g><g><title>typeck (5,523,189 samples, 0.22%)</title><rect x="28.0509%" y="117" width="0.2193%" height="15" fill="rgb(245,192,40)"/><text x="28.3009%" y="127.50"></text></g><g><title>evaluate_obligation (5,979,473 samples, 0.24%)</title><rect x="28.4895%" y="53" width="0.2374%" height="15" fill="rgb(238,167,29)"/><text x="28.7395%" y="63.50"></text></g><g><title>eval_to_const_value_raw (10,150,570 samples, 0.40%)</title><rect x="28.3329%" y="117" width="0.4030%" height="15" fill="rgb(232,182,51)"/><text x="28.5829%" y="127.50"></text></g><g><title>eval_to_const_value_raw (10,121,609 samples, 0.40%)</title><rect x="28.3340%" y="101" width="0.4018%" height="15" fill="rgb(231,60,39)"/><text x="28.5840%" y="111.50"></text></g><g><title>eval_to_allocation_raw (10,090,139 samples, 0.40%)</title><rect x="28.3353%" y="85" width="0.4006%" height="15" fill="rgb(208,69,12)"/><text x="28.5853%" y="95.50"></text></g><g><title>typeck (7,135,917 samples, 0.28%)</title><rect x="28.4525%" y="69" width="0.2833%" height="15" fill="rgb(235,93,37)"/><text x="28.7025%" y="79.50"></text></g><g><title>predicates_of (2,735,449 samples, 0.11%)</title><rect x="28.8819%" y="117" width="0.1086%" height="15" fill="rgb(213,116,39)"/><text x="29.1319%" y="127.50"></text></g><g><title>type_collecting (18,431,208 samples, 0.73%)</title><rect x="28.2710%" y="149" width="0.7317%" height="15" fill="rgb(222,207,29)"/><text x="28.5210%" y="159.50"></text></g><g><title>collect_mod_item_types (18,394,088 samples, 0.73%)</title><rect x="28.2725%" y="133" width="0.7302%" height="15" fill="rgb(206,96,30)"/><text x="28.5225%" y="143.50"></text></g><g><title>check_impl_item_well_formed (14,044,159 samples, 0.56%)</title><rect x="29.0421%" y="133" width="0.5576%" height="15" fill="rgb(218,138,4)"/><text x="29.2921%" y="143.50"></text></g><g><title>analysis (376,627,058 samples, 14.95%)</title><rect x="14.9763%" y="181" width="14.9521%" height="15" fill="rgb(250,191,14)"/><text x="15.2263%" y="191.50">analysis</text></g><g><title>type_check_crate (214,703,313 samples, 8.52%)</title><rect x="21.4047%" y="165" width="8.5237%" height="15" fill="rgb(239,60,40)"/><text x="21.6547%" y="175.50">type_check_c..</text></g><g><title>wf_checking (23,284,500 samples, 0.92%)</title><rect x="29.0040%" y="149" width="0.9244%" height="15" fill="rgb(206,27,48)"/><text x="29.2540%" y="159.50"></text></g><g><title>check_item_well_formed (8,280,782 samples, 0.33%)</title><rect x="29.5997%" y="133" width="0.3287%" height="15" fill="rgb(225,35,8)"/><text x="29.8497%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (10,067,824 samples, 0.40%)</title><rect x="41.8092%" y="149" width="0.3997%" height="15" fill="rgb(250,213,24)"/><text x="42.0592%" y="159.50"></text></g><g><title>const_caller_location (4,275,852 samples, 0.17%)</title><rect x="42.2089%" y="149" width="0.1698%" height="15" fill="rgb(247,123,22)"/><text x="42.4589%" y="159.50"></text></g><g><title>layout_of (4,560,761 samples, 0.18%)</title><rect x="43.0482%" y="133" width="0.1811%" height="15" fill="rgb(231,138,38)"/><text x="43.2982%" y="143.50"></text></g><g><title>predicates_of (3,361,480 samples, 0.13%)</title><rect x="43.5024%" y="117" width="0.1335%" height="15" fill="rgb(231,145,46)"/><text x="43.7524%" y="127.50"></text></g><g><title>param_env (10,249,275 samples, 0.41%)</title><rect x="43.2292%" y="133" width="0.4069%" height="15" fill="rgb(251,118,11)"/><text x="43.4792%" y="143.50"></text></g><g><title>fn_abi_of_instance (33,827,648 samples, 1.34%)</title><rect x="42.3835%" y="149" width="1.3430%" height="15" fill="rgb(217,147,25)"/><text x="42.6335%" y="159.50"></text></g><g><title>layout_of (6,356,682 samples, 0.25%)</title><rect x="43.7927%" y="149" width="0.2524%" height="15" fill="rgb(247,81,37)"/><text x="44.0427%" y="159.50"></text></g><g><title>symbol_name (2,679,247 samples, 0.11%)</title><rect x="44.0464%" y="149" width="0.1064%" height="15" fill="rgb(209,12,38)"/><text x="44.2964%" y="159.50"></text></g><g><title>codegen_module (353,793,392 samples, 14.05%)</title><rect x="30.1275%" y="165" width="14.0456%" height="15" fill="rgb(227,1,9)"/><text x="30.3775%" y="175.50">codegen_module</text></g><g><title>codegen_crate (358,928,769 samples, 14.25%)</title><rect x="29.9287%" y="181" width="14.2495%" height="15" fill="rgb(248,47,43)"/><text x="30.1787%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,075,424,150 samples, 42.69%)</title><rect x="44.1896%" y="165" width="42.6943%" height="15" fill="rgb(221,10,30)"/><text x="44.4396%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,013,965,989 samples, 40.25%)</title><rect x="46.6294%" y="149" width="40.2544%" height="15" fill="rgb(210,229,1)"/><text x="46.8794%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,144,494,199 samples, 45.44%)</title><rect x="44.1781%" y="181" width="45.4364%" height="15" fill="rgb(222,148,37)"/><text x="44.4281%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (68,782,268 samples, 2.73%)</title><rect x="86.8839%" y="165" width="2.7307%" height="15" fill="rgb(234,67,33)"/><text x="87.1339%" y="175.50">LL..</text></g><g><title>macro_expand_crate (44,081,113 samples, 1.75%)</title><rect x="89.6543%" y="165" width="1.7500%" height="15" fill="rgb(247,98,35)"/><text x="89.9043%" y="175.50"></text></g><g><title>expand_crate (44,059,893 samples, 1.75%)</title><rect x="89.6552%" y="149" width="1.7492%" height="15" fill="rgb(247,138,52)"/><text x="89.9052%" y="159.50"></text></g><g><title>late_resolve_crate (7,446,799 samples, 0.30%)</title><rect x="91.4466%" y="149" width="0.2956%" height="15" fill="rgb(213,79,30)"/><text x="91.6966%" y="159.50"></text></g><g><title>configure_and_expand (54,179,652 samples, 2.15%)</title><rect x="89.6145%" y="181" width="2.1509%" height="15" fill="rgb(246,177,23)"/><text x="89.8645%" y="191.50">c..</text></g><g><title>resolve_crate (9,023,307 samples, 0.36%)</title><rect x="91.4072%" y="165" width="0.3582%" height="15" fill="rgb(230,62,27)"/><text x="91.6572%" y="175.50"></text></g><g><title>free_global_ctxt (15,883,420 samples, 0.63%)</title><rect x="91.8926%" y="181" width="0.6306%" height="15" fill="rgb(216,154,8)"/><text x="92.1426%" y="191.50"></text></g><g><title>item_attrs (2,539,146 samples, 0.10%)</title><rect x="93.4058%" y="85" width="0.1008%" height="15" fill="rgb(244,35,45)"/><text x="93.6558%" y="95.50"></text></g><g><title>codegen_fn_attrs (4,915,905 samples, 0.20%)</title><rect x="93.3761%" y="101" width="0.1952%" height="15" fill="rgb(251,115,12)"/><text x="93.6261%" y="111.50"></text></g><g><title>mir_shims (4,133,363 samples, 0.16%)</title><rect x="93.6383%" y="101" width="0.1641%" height="15" fill="rgb(240,54,50)"/><text x="93.8883%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,883,407 samples, 0.27%)</title><rect x="94.5022%" y="85" width="0.2733%" height="15" fill="rgb(233,84,52)"/><text x="94.7522%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (16,793,198 samples, 0.67%)</title><rect x="94.7755%" y="85" width="0.6667%" height="15" fill="rgb(207,117,47)"/><text x="95.0255%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,539,663 samples, 0.14%)</title><rect x="95.4644%" y="69" width="0.1405%" height="15" fill="rgb(249,43,39)"/><text x="95.7144%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,463,401 samples, 0.14%)</title><rect x="95.4675%" y="53" width="0.1375%" height="15" fill="rgb(209,38,44)"/><text x="95.7175%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,296,040 samples, 0.13%)</title><rect x="95.4741%" y="37" width="0.1309%" height="15" fill="rgb(236,212,23)"/><text x="95.7241%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,975,916 samples, 0.16%)</title><rect x="95.4491%" y="85" width="0.1578%" height="15" fill="rgb(242,79,21)"/><text x="95.6991%" y="95.50"></text></g><g><title>optimized_mir (45,515,759 samples, 1.81%)</title><rect x="93.8025%" y="101" width="1.8070%" height="15" fill="rgb(211,96,35)"/><text x="94.0525%" y="111.50">o..</text></g><g><title>codegen_fulfill_obligation (9,580,938 samples, 0.38%)</title><rect x="95.7909%" y="85" width="0.3804%" height="15" fill="rgb(253,215,40)"/><text x="96.0409%" y="95.50"></text></g><g><title>specialization_graph_of (4,280,983 samples, 0.17%)</title><rect x="96.2890%" y="85" width="0.1700%" height="15" fill="rgb(211,81,21)"/><text x="96.5390%" y="95.50"></text></g><g><title>resolve_instance (22,343,250 samples, 0.89%)</title><rect x="95.6094%" y="101" width="0.8870%" height="15" fill="rgb(208,190,38)"/><text x="95.8594%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,210,768 samples, 0.13%)</title><rect x="96.5301%" y="85" width="0.1275%" height="15" fill="rgb(235,213,38)"/><text x="96.7801%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,083,498 samples, 0.12%)</title><rect x="96.5351%" y="69" width="0.1224%" height="15" fill="rgb(237,122,38)"/><text x="96.7851%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,915,827 samples, 0.12%)</title><rect x="96.5418%" y="53" width="0.1158%" height="15" fill="rgb(244,218,35)"/><text x="96.7918%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,800,475 samples, 0.15%)</title><rect x="96.5125%" y="101" width="0.1509%" height="15" fill="rgb(240,68,47)"/><text x="96.7625%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (102,352,407 samples, 4.06%)</title><rect x="92.7778%" y="117" width="4.0634%" height="15" fill="rgb(210,16,53)"/><text x="93.0278%" y="127.50">mono..</text></g><g><title>vtable_entries (3,012,052 samples, 0.12%)</title><rect x="96.7216%" y="101" width="0.1196%" height="15" fill="rgb(235,124,12)"/><text x="96.9716%" y="111.50"></text></g><g><title>monomorphization_collector (102,618,820 samples, 4.07%)</title><rect x="92.7776%" y="133" width="4.0740%" height="15" fill="rgb(224,169,11)"/><text x="93.0276%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (9,786,455 samples, 0.39%)</title><rect x="96.8518%" y="117" width="0.3885%" height="15" fill="rgb(250,166,2)"/><text x="97.1018%" y="127.50"></text></g><g><title>symbol_name (8,375,636 samples, 0.33%)</title><rect x="96.9078%" y="101" width="0.3325%" height="15" fill="rgb(242,216,29)"/><text x="97.1578%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (116,845,363 samples, 4.64%)</title><rect x="92.7745%" y="149" width="4.6388%" height="15" fill="rgb(230,116,27)"/><text x="93.0245%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (14,147,032 samples, 0.56%)</title><rect x="96.8516%" y="133" width="0.5616%" height="15" fill="rgb(228,99,48)"/><text x="97.1016%" y="143.50"></text></g><g><title>cgu_partitioning (4,354,527 samples, 0.17%)</title><rect x="97.2403%" y="117" width="0.1729%" height="15" fill="rgb(253,11,6)"/><text x="97.4903%" y="127.50"></text></g><g><title>exported_symbols (117,599,800 samples, 4.67%)</title><rect x="92.7567%" y="165" width="4.6687%" height="15" fill="rgb(247,143,39)"/><text x="93.0067%" y="175.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,608,062 samples, 0.22%)</title><rect x="97.6947%" y="149" width="0.2226%" height="15" fill="rgb(236,97,10)"/><text x="97.9447%" y="159.50"></text></g><g><title>optimized_mir (12,543,056 samples, 0.50%)</title><rect x="97.4377%" y="165" width="0.4980%" height="15" fill="rgb(233,208,19)"/><text x="97.6877%" y="175.50"></text></g><g><title>generate_crate_metadata (136,663,855 samples, 5.43%)</title><rect x="92.5232%" y="181" width="5.4256%" height="15" fill="rgb(216,164,2)"/><text x="92.7732%" y="191.50">generat..</text></g><g><title>hir_lowering (15,056,662 samples, 0.60%)</title><rect x="97.9487%" y="181" width="0.5977%" height="15" fill="rgb(220,129,5)"/><text x="98.1987%" y="191.50"></text></g><g><title>finish_ongoing_codegen (23,134,148 samples, 0.92%)</title><rect x="98.5473%" y="165" width="0.9184%" height="15" fill="rgb(242,17,10)"/><text x="98.7973%" y="175.50"></text></g><g><title>link_crate (7,590,201 samples, 0.30%)</title><rect x="99.4657%" y="165" width="0.3013%" height="15" fill="rgb(242,107,0)"/><text x="99.7157%" y="175.50"></text></g><g><title>link_binary (7,086,366 samples, 0.28%)</title><rect x="99.4857%" y="149" width="0.2813%" height="15" fill="rgb(251,28,31)"/><text x="99.7357%" y="159.50"></text></g><g><title>link_rlib (5,776,112 samples, 0.23%)</title><rect x="99.5378%" y="133" width="0.2293%" height="15" fill="rgb(233,223,10)"/><text x="99.7878%" y="143.50"></text></g><g><title>link (30,761,890 samples, 1.22%)</title><rect x="98.5465%" y="181" width="1.2212%" height="15" fill="rgb(215,21,27)"/><text x="98.7965%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,619,440 samples, 0.18%)</title><rect x="99.7891%" y="181" width="0.1834%" height="15" fill="rgb(232,23,21)"/><text x="100.0391%" y="191.50"></text></g><g><title>all (2,518,893,335 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,518,893,335 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>