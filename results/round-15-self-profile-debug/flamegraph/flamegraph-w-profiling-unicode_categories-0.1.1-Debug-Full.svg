<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,360,402 samples, 4.57%)</title><rect x="0.2679%" y="229" width="4.5663%" height="15" fill="rgb(227,0,7)"/><text x="0.5179%" y="239.50">LLVM_..</text></g><g><title>thir_body (289,252 samples, 0.11%)</title><rect x="10.6286%" y="117" width="0.1069%" height="15" fill="rgb(217,0,24)"/><text x="10.8786%" y="127.50"></text></g><g><title>mir_const (1,909,639 samples, 0.71%)</title><rect x="10.0329%" y="165" width="0.7055%" height="15" fill="rgb(221,193,54)"/><text x="10.2829%" y="175.50"></text></g><g><title>unsafety_check_result (1,524,874 samples, 0.56%)</title><rect x="10.1751%" y="149" width="0.5633%" height="15" fill="rgb(248,212,6)"/><text x="10.4251%" y="159.50"></text></g><g><title>mir_built (1,353,482 samples, 0.50%)</title><rect x="10.2384%" y="133" width="0.5000%" height="15" fill="rgb(208,68,35)"/><text x="10.4884%" y="143.50"></text></g><g><title>thir_body (23,757,399 samples, 8.78%)</title><rect x="13.5898%" y="101" width="8.7766%" height="15" fill="rgb(232,128,0)"/><text x="13.8398%" y="111.50">thir_body</text></g><g><title>lit_to_const (5,464,660 samples, 2.02%)</title><rect x="20.3476%" y="85" width="2.0188%" height="15" fill="rgb(207,160,47)"/><text x="20.5976%" y="95.50">l..</text></g><g><title>mir_promoted (36,009,546 samples, 13.30%)</title><rect x="9.0662%" y="181" width="13.3029%" height="15" fill="rgb(228,23,34)"/><text x="9.3162%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (31,482,966 samples, 11.63%)</title><rect x="10.7384%" y="165" width="11.6307%" height="15" fill="rgb(218,30,26)"/><text x="10.9884%" y="175.50">mir_const_qualif</text></g><g><title>mir_const (31,102,112 samples, 11.49%)</title><rect x="10.8791%" y="149" width="11.4900%" height="15" fill="rgb(220,122,19)"/><text x="11.1291%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (30,565,008 samples, 11.29%)</title><rect x="11.0775%" y="133" width="11.2916%" height="15" fill="rgb(250,228,42)"/><text x="11.3275%" y="143.50">unsafety_check_re..</text></g><g><title>mir_built (30,320,715 samples, 11.20%)</title><rect x="11.1678%" y="117" width="11.2013%" height="15" fill="rgb(240,193,28)"/><text x="11.4178%" y="127.50">mir_built</text></g><g><title>MIR_borrow_checking (47,339,476 samples, 17.49%)</title><rect x="5.2464%" y="213" width="17.4885%" height="15" fill="rgb(216,20,37)"/><text x="5.4964%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,224,115 samples, 17.45%)</title><rect x="5.2890%" y="197" width="17.4459%" height="15" fill="rgb(206,188,39)"/><text x="5.5390%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (990,259 samples, 0.37%)</title><rect x="22.3691%" y="181" width="0.3658%" height="15" fill="rgb(217,207,13)"/><text x="22.6191%" y="191.50"></text></g><g><title>MIR_effect_checking (415,625 samples, 0.15%)</title><rect x="22.7349%" y="213" width="0.1535%" height="15" fill="rgb(231,73,38)"/><text x="22.9849%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (372,284 samples, 0.14%)</title><rect x="22.7509%" y="197" width="0.1375%" height="15" fill="rgb(225,20,46)"/><text x="23.0009%" y="207.50"></text></g><g><title>hir_module_items (279,443 samples, 0.10%)</title><rect x="22.8885%" y="213" width="0.1032%" height="15" fill="rgb(210,31,41)"/><text x="23.1385%" y="223.50"></text></g><g><title>codegen_fn_attrs (272,472 samples, 0.10%)</title><rect x="23.5370%" y="181" width="0.1007%" height="15" fill="rgb(221,200,47)"/><text x="23.7870%" y="191.50"></text></g><g><title>check_mod_attrs (1,722,228 samples, 0.64%)</title><rect x="23.0015%" y="197" width="0.6362%" height="15" fill="rgb(226,26,5)"/><text x="23.2515%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (307,183 samples, 0.11%)</title><rect x="23.7744%" y="197" width="0.1135%" height="15" fill="rgb(249,33,26)"/><text x="24.0244%" y="207.50"></text></g><g><title>misc_checking_1 (2,456,027 samples, 0.91%)</title><rect x="22.9918%" y="213" width="0.9073%" height="15" fill="rgb(235,183,28)"/><text x="23.2418%" y="223.50"></text></g><g><title>check_mod_intrinsics (292,633 samples, 0.11%)</title><rect x="23.9015%" y="181" width="0.1081%" height="15" fill="rgb(221,5,38)"/><text x="24.1515%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (857,559 samples, 0.32%)</title><rect x="23.8997%" y="197" width="0.3168%" height="15" fill="rgb(247,18,42)"/><text x="24.1497%" y="207.50"></text></g><g><title>check_mod_liveness (559,906 samples, 0.21%)</title><rect x="24.0096%" y="181" width="0.2068%" height="15" fill="rgb(241,131,45)"/><text x="24.2596%" y="191.50"></text></g><g><title>misc_checking_2 (1,292,474 samples, 0.48%)</title><rect x="23.8992%" y="213" width="0.4775%" height="15" fill="rgb(249,31,29)"/><text x="24.1492%" y="223.50"></text></g><g><title>match_checking (433,585 samples, 0.16%)</title><rect x="24.2165%" y="197" width="0.1602%" height="15" fill="rgb(225,111,53)"/><text x="24.4665%" y="207.50"></text></g><g><title>check_match (411,125 samples, 0.15%)</title><rect x="24.2248%" y="181" width="0.1519%" height="15" fill="rgb(238,160,17)"/><text x="24.4748%" y="191.50"></text></g><g><title>death_checking (1,281,524 samples, 0.47%)</title><rect x="24.4429%" y="197" width="0.4734%" height="15" fill="rgb(214,148,48)"/><text x="24.6929%" y="207.50"></text></g><g><title>lint_levels (905,980 samples, 0.33%)</title><rect x="24.5816%" y="181" width="0.3347%" height="15" fill="rgb(232,36,49)"/><text x="24.8316%" y="191.50"></text></g><g><title>eval_to_const_value_raw (17,639,167 samples, 6.52%)</title><rect x="28.1737%" y="117" width="6.5164%" height="15" fill="rgb(209,103,24)"/><text x="28.4237%" y="127.50">eval_to_c..</text></g><g><title>eval_to_const_value_raw (17,618,067 samples, 6.51%)</title><rect x="28.1815%" y="101" width="6.5086%" height="15" fill="rgb(229,88,8)"/><text x="28.4315%" y="111.50">eval_to_c..</text></g><g><title>eval_to_allocation_raw (17,580,096 samples, 6.49%)</title><rect x="28.1955%" y="85" width="6.4946%" height="15" fill="rgb(213,181,19)"/><text x="28.4455%" y="95.50">eval_to_a..</text></g><g><title>promoted_mir (483,081 samples, 0.18%)</title><rect x="34.5116%" y="69" width="0.1785%" height="15" fill="rgb(254,191,54)"/><text x="34.7616%" y="79.50"></text></g><g><title>eval_to_allocation_raw (24,597,240 samples, 9.09%)</title><rect x="25.6135%" y="165" width="9.0869%" height="15" fill="rgb(241,83,37)"/><text x="25.8635%" y="175.50">eval_to_alloc..</text></g><g><title>eval_to_allocation_raw (24,571,880 samples, 9.08%)</title><rect x="25.6229%" y="149" width="9.0775%" height="15" fill="rgb(233,36,39)"/><text x="25.8729%" y="159.50">eval_to_alloc..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (17,766,638 samples, 6.56%)</title><rect x="28.1369%" y="133" width="6.5635%" height="15" fill="rgb(226,3,54)"/><text x="28.3869%" y="143.50">try_norma..</text></g><g><title>crate_lints (26,518,424 samples, 9.80%)</title><rect x="24.9172%" y="181" width="9.7966%" height="15" fill="rgb(245,192,40)"/><text x="25.1672%" y="191.50">crate_lints</text></g><g><title>lint_checking (29,771,398 samples, 11.00%)</title><rect x="24.9163%" y="197" width="10.9984%" height="15" fill="rgb(238,167,29)"/><text x="25.1663%" y="207.50">lint_checking</text></g><g><title>module_lints (3,250,584 samples, 1.20%)</title><rect x="34.7138%" y="181" width="1.2009%" height="15" fill="rgb(232,182,51)"/><text x="34.9638%" y="191.50"></text></g><g><title>lint_mod (3,245,843 samples, 1.20%)</title><rect x="34.7156%" y="165" width="1.1991%" height="15" fill="rgb(231,60,39)"/><text x="34.9656%" y="175.50"></text></g><g><title>privacy_access_levels (329,783 samples, 0.12%)</title><rect x="35.9147%" y="197" width="0.1218%" height="15" fill="rgb(208,69,12)"/><text x="36.1647%" y="207.50"></text></g><g><title>privacy_checking_modules (1,360,214 samples, 0.50%)</title><rect x="36.0365%" y="197" width="0.5025%" height="15" fill="rgb(235,93,37)"/><text x="36.2865%" y="207.50"></text></g><g><title>check_mod_privacy (1,358,134 samples, 0.50%)</title><rect x="36.0373%" y="181" width="0.5017%" height="15" fill="rgb(213,116,39)"/><text x="36.2873%" y="191.50"></text></g><g><title>misc_checking_3 (32,931,321 samples, 12.17%)</title><rect x="24.3766%" y="213" width="12.1657%" height="15" fill="rgb(222,207,29)"/><text x="24.6266%" y="223.50">misc_checking_3</text></g><g><title>impl_trait_ref (306,313 samples, 0.11%)</title><rect x="37.8118%" y="53" width="0.1132%" height="15" fill="rgb(206,96,30)"/><text x="38.0618%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (285,253 samples, 0.11%)</title><rect x="37.8196%" y="37" width="0.1054%" height="15" fill="rgb(218,138,4)"/><text x="38.0696%" y="47.50"></text></g><g><title>coherent_trait (504,945 samples, 0.19%)</title><rect x="37.7476%" y="85" width="0.1865%" height="15" fill="rgb(250,191,14)"/><text x="37.9976%" y="95.50"></text></g><g><title>specialization_graph_of (502,025 samples, 0.19%)</title><rect x="37.7487%" y="69" width="0.1855%" height="15" fill="rgb(239,60,40)"/><text x="37.9987%" y="79.50"></text></g><g><title>adt_destructor (510,475 samples, 0.19%)</title><rect x="37.7458%" y="117" width="0.1886%" height="15" fill="rgb(206,27,48)"/><text x="37.9958%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (509,775 samples, 0.19%)</title><rect x="37.7461%" y="101" width="0.1883%" height="15" fill="rgb(225,35,8)"/><text x="37.9961%" y="111.50"></text></g><g><title>dropck_outlives (578,576 samples, 0.21%)</title><rect x="37.7228%" y="149" width="0.2137%" height="15" fill="rgb(250,213,24)"/><text x="37.9728%" y="159.50"></text></g><g><title>adt_dtorck_constraint (565,786 samples, 0.21%)</title><rect x="37.7276%" y="133" width="0.2090%" height="15" fill="rgb(247,123,22)"/><text x="37.9776%" y="143.50"></text></g><g><title>item_bodies_checking (3,910,552 samples, 1.44%)</title><rect x="36.5998%" y="197" width="1.4447%" height="15" fill="rgb(231,138,38)"/><text x="36.8498%" y="207.50"></text></g><g><title>typeck_item_bodies (3,907,942 samples, 1.44%)</title><rect x="36.6008%" y="181" width="1.4437%" height="15" fill="rgb(231,145,46)"/><text x="36.8508%" y="191.50"></text></g><g><title>typeck (3,872,132 samples, 1.43%)</title><rect x="36.6140%" y="165" width="1.4305%" height="15" fill="rgb(251,118,11)"/><text x="36.8640%" y="175.50"></text></g><g><title>item_types_checking (9,387,950 samples, 3.47%)</title><rect x="38.0445%" y="197" width="3.4682%" height="15" fill="rgb(217,147,25)"/><text x="38.2945%" y="207.50">ite..</text></g><g><title>check_mod_item_types (9,385,050 samples, 3.47%)</title><rect x="38.0455%" y="181" width="3.4671%" height="15" fill="rgb(247,81,37)"/><text x="38.2955%" y="191.50">che..</text></g><g><title>typeck (9,117,008 samples, 3.37%)</title><rect x="38.1446%" y="165" width="3.3681%" height="15" fill="rgb(209,12,38)"/><text x="38.3946%" y="175.50">typ..</text></g><g><title>type_collecting (1,249,093 samples, 0.46%)</title><rect x="41.5128%" y="197" width="0.4614%" height="15" fill="rgb(227,1,9)"/><text x="41.7628%" y="207.50"></text></g><g><title>collect_mod_item_types (1,233,573 samples, 0.46%)</title><rect x="41.5185%" y="181" width="0.4557%" height="15" fill="rgb(248,47,43)"/><text x="41.7685%" y="191.50"></text></g><g><title>type_of (364,413 samples, 0.13%)</title><rect x="41.8396%" y="165" width="0.1346%" height="15" fill="rgb(221,10,30)"/><text x="42.0896%" y="175.50"></text></g><g><title>named_region_map (316,743 samples, 0.12%)</title><rect x="41.8572%" y="149" width="0.1170%" height="15" fill="rgb(210,229,1)"/><text x="42.1072%" y="159.50"></text></g><g><title>resolve_lifetimes (306,073 samples, 0.11%)</title><rect x="41.8612%" y="133" width="0.1131%" height="15" fill="rgb(222,148,37)"/><text x="42.1112%" y="143.50"></text></g><g><title>check_impl_item_well_formed (350,754 samples, 0.13%)</title><rect x="42.0444%" y="181" width="0.1296%" height="15" fill="rgb(234,67,33)"/><text x="42.2944%" y="191.50"></text></g><g><title>region_scope_tree (1,512,308 samples, 0.56%)</title><rect x="42.5346%" y="165" width="0.5587%" height="15" fill="rgb(247,98,35)"/><text x="42.7846%" y="175.50"></text></g><g><title>check_item_well_formed (2,728,391 samples, 1.01%)</title><rect x="42.1740%" y="181" width="1.0079%" height="15" fill="rgb(247,138,52)"/><text x="42.4240%" y="191.50"></text></g><g><title>analysis (104,625,148 samples, 38.65%)</title><rect x="4.8342%" y="229" width="38.6514%" height="15" fill="rgb(213,79,30)"/><text x="5.0842%" y="239.50">analysis</text></g><g><title>type_check_crate (18,794,600 samples, 6.94%)</title><rect x="36.5424%" y="213" width="6.9432%" height="15" fill="rgb(246,177,23)"/><text x="36.7924%" y="223.50">type_chec..</text></g><g><title>wf_checking (4,086,644 samples, 1.51%)</title><rect x="41.9759%" y="197" width="1.5097%" height="15" fill="rgb(230,62,27)"/><text x="42.2259%" y="207.50"></text></g><g><title>check_trait_item_well_formed (822,129 samples, 0.30%)</title><rect x="43.1819%" y="181" width="0.3037%" height="15" fill="rgb(216,154,8)"/><text x="43.4319%" y="191.50"></text></g><g><title>layout_of (412,604 samples, 0.15%)</title><rect x="45.8154%" y="181" width="0.1524%" height="15" fill="rgb(244,35,45)"/><text x="46.0654%" y="191.50"></text></g><g><title>fn_abi_of_instance (999,971 samples, 0.37%)</title><rect x="45.7307%" y="197" width="0.3694%" height="15" fill="rgb(251,115,12)"/><text x="45.9807%" y="207.50"></text></g><g><title>codegen_module (6,251,677 samples, 2.31%)</title><rect x="43.9089%" y="213" width="2.3095%" height="15" fill="rgb(240,54,50)"/><text x="44.1589%" y="223.50">c..</text></g><g><title>codegen_crate (7,450,709 samples, 2.75%)</title><rect x="43.4898%" y="229" width="2.7525%" height="15" fill="rgb(233,84,52)"/><text x="43.7398%" y="239.50">co..</text></g><g><title>LLVM_module_codegen (36,813,121 samples, 13.60%)</title><rect x="46.2800%" y="213" width="13.5998%" height="15" fill="rgb(207,117,47)"/><text x="46.5300%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (35,346,944 samples, 13.06%)</title><rect x="46.8217%" y="197" width="13.0581%" height="15" fill="rgb(249,43,39)"/><text x="47.0717%" y="207.50">LLVM_module_codegen_..</text></g><g><title>codegen_module_optimize (38,816,494 samples, 14.34%)</title><rect x="46.2423%" y="229" width="14.3399%" height="15" fill="rgb(209,38,44)"/><text x="46.4923%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,901,143 samples, 0.70%)</title><rect x="59.8798%" y="213" width="0.7023%" height="15" fill="rgb(236,212,23)"/><text x="60.1298%" y="223.50"></text></g><g><title>metadata_register_crate (1,493,306 samples, 0.55%)</title><rect x="85.5154%" y="181" width="0.5517%" height="15" fill="rgb(242,79,21)"/><text x="85.7654%" y="191.50"></text></g><g><title>metadata_register_crate (701,718 samples, 0.26%)</title><rect x="85.8079%" y="165" width="0.2592%" height="15" fill="rgb(211,96,35)"/><text x="86.0579%" y="175.50"></text></g><g><title>macro_expand_crate (69,425,862 samples, 25.65%)</title><rect x="60.8575%" y="213" width="25.6478%" height="15" fill="rgb(253,215,40)"/><text x="61.1075%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (69,405,272 samples, 25.64%)</title><rect x="60.8651%" y="197" width="25.6402%" height="15" fill="rgb(211,81,21)"/><text x="61.1151%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,186,333 samples, 0.44%)</title><rect x="86.0671%" y="181" width="0.4383%" height="15" fill="rgb(208,190,38)"/><text x="86.3171%" y="191.50"></text></g><g><title>late_resolve_crate (643,286 samples, 0.24%)</title><rect x="86.6469%" y="197" width="0.2376%" height="15" fill="rgb(235,213,38)"/><text x="86.8969%" y="207.50"></text></g><g><title>configure_and_expand (71,470,014 samples, 26.40%)</title><rect x="60.5821%" y="229" width="26.4030%" height="15" fill="rgb(237,122,38)"/><text x="60.8321%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,138,142 samples, 0.42%)</title><rect x="86.5647%" y="213" width="0.4205%" height="15" fill="rgb(244,218,35)"/><text x="86.8147%" y="223.50"></text></g><g><title>drop_ast (748,948 samples, 0.28%)</title><rect x="86.9851%" y="229" width="0.2767%" height="15" fill="rgb(240,68,47)"/><text x="87.2351%" y="239.50"></text></g><g><title>early_lint_checks (3,066,753 samples, 1.13%)</title><rect x="87.2675%" y="229" width="1.1329%" height="15" fill="rgb(210,16,53)"/><text x="87.5175%" y="239.50"></text></g><g><title>free_global_ctxt (3,550,498 samples, 1.31%)</title><rect x="88.4005%" y="229" width="1.3117%" height="15" fill="rgb(235,124,12)"/><text x="88.6505%" y="239.50"></text></g><g><title>optimized_mir (306,123 samples, 0.11%)</title><rect x="91.2058%" y="149" width="0.1131%" height="15" fill="rgb(224,169,11)"/><text x="91.4558%" y="159.50"></text></g><g><title>impl_parent (518,106 samples, 0.19%)</title><rect x="91.7223%" y="117" width="0.1914%" height="15" fill="rgb(250,166,2)"/><text x="91.9723%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (362,094 samples, 0.13%)</title><rect x="91.7800%" y="101" width="0.1338%" height="15" fill="rgb(242,216,29)"/><text x="92.0300%" y="111.50"></text></g><g><title>specialization_graph_of (2,633,217 samples, 0.97%)</title><rect x="91.4870%" y="133" width="0.9728%" height="15" fill="rgb(230,116,27)"/><text x="91.7370%" y="143.50"></text></g><g><title>impl_trait_ref (1,478,155 samples, 0.55%)</title><rect x="91.9137%" y="117" width="0.5461%" height="15" fill="rgb(228,99,48)"/><text x="92.1637%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,318,844 samples, 0.49%)</title><rect x="91.9726%" y="101" width="0.4872%" height="15" fill="rgb(253,11,6)"/><text x="92.2226%" y="111.50"></text></g><g><title>resolve_instance (3,133,764 samples, 1.16%)</title><rect x="91.3189%" y="149" width="1.1577%" height="15" fill="rgb(247,143,39)"/><text x="91.5689%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (278,983 samples, 0.10%)</title><rect x="92.4766%" y="149" width="0.1031%" height="15" fill="rgb(236,97,10)"/><text x="92.7266%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (4,274,086 samples, 1.58%)</title><rect x="91.0631%" y="165" width="1.5790%" height="15" fill="rgb(233,208,19)"/><text x="91.3131%" y="175.50"></text></g><g><title>monomorphization_collector (4,326,166 samples, 1.60%)</title><rect x="91.0616%" y="181" width="1.5982%" height="15" fill="rgb(216,164,2)"/><text x="91.3116%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (4,686,630 samples, 1.73%)</title><rect x="91.0509%" y="197" width="1.7314%" height="15" fill="rgb(220,129,5)"/><text x="91.3009%" y="207.50"></text></g><g><title>partition_and_assert_distinct_symbols (331,554 samples, 0.12%)</title><rect x="92.6598%" y="181" width="0.1225%" height="15" fill="rgb(242,17,10)"/><text x="92.9098%" y="191.50"></text></g><g><title>exported_symbols (4,777,151 samples, 1.76%)</title><rect x="91.0389%" y="213" width="1.7648%" height="15" fill="rgb(242,107,0)"/><text x="91.2889%" y="223.50"></text></g><g><title>optimized_mir (2,368,863 samples, 0.88%)</title><rect x="92.8102%" y="213" width="0.8751%" height="15" fill="rgb(251,28,31)"/><text x="93.0602%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,054,602 samples, 0.39%)</title><rect x="93.2958%" y="197" width="0.3896%" height="15" fill="rgb(233,223,10)"/><text x="93.5458%" y="207.50"></text></g><g><title>generate_crate_metadata (10,825,756 samples, 4.00%)</title><rect x="89.7121%" y="229" width="3.9993%" height="15" fill="rgb(215,21,27)"/><text x="89.9621%" y="239.50">gene..</text></g><g><title>hir_lowering (6,768,891 samples, 2.50%)</title><rect x="93.7115%" y="229" width="2.5006%" height="15" fill="rgb(232,23,21)"/><text x="93.9615%" y="239.50">hi..</text></g><g><title>finish_ongoing_codegen (3,170,524 samples, 1.17%)</title><rect x="96.2171%" y="213" width="1.1713%" height="15" fill="rgb(244,5,23)"/><text x="96.4671%" y="223.50"></text></g><g><title>link_crate (1,878,090 samples, 0.69%)</title><rect x="97.3884%" y="213" width="0.6938%" height="15" fill="rgb(226,81,46)"/><text x="97.6384%" y="223.50"></text></g><g><title>link_binary (1,858,800 samples, 0.69%)</title><rect x="97.3955%" y="197" width="0.6867%" height="15" fill="rgb(247,70,30)"/><text x="97.6455%" y="207.50"></text></g><g><title>link_rlib (1,445,925 samples, 0.53%)</title><rect x="97.5481%" y="181" width="0.5342%" height="15" fill="rgb(212,68,19)"/><text x="97.7981%" y="191.50"></text></g><g><title>link (5,070,794 samples, 1.87%)</title><rect x="96.2121%" y="229" width="1.8733%" height="15" fill="rgb(240,187,13)"/><text x="96.4621%" y="239.50">l..</text></g><g><title>parse_crate (2,653,959 samples, 0.98%)</title><rect x="98.0854%" y="229" width="0.9804%" height="15" fill="rgb(223,113,26)"/><text x="98.3354%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,667,388 samples, 0.62%)</title><rect x="99.1410%" y="229" width="0.6160%" height="15" fill="rgb(206,192,2)"/><text x="99.3910%" y="239.50"></text></g><g><title>all (270,688,982 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (270,688,982 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (578,847 samples, 0.21%)</title><rect x="99.7862%" y="229" width="0.2138%" height="15" fill="rgb(224,114,35)"/><text x="100.0362%" y="239.50"></text></g></svg></svg>