<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (69,333,865 samples, 2.71%)</title><rect x="0.0554%" y="181" width="2.7105%" height="15" fill="rgb(227,0,7)"/><text x="0.3054%" y="191.50">LL..</text></g><g><title>is_late_bound_map (2,770,622 samples, 0.11%)</title><rect x="6.6628%" y="133" width="0.1083%" height="15" fill="rgb(217,0,24)"/><text x="6.9128%" y="143.50"></text></g><g><title>is_late_bound_map (7,963,212 samples, 0.31%)</title><rect x="8.2499%" y="117" width="0.3113%" height="15" fill="rgb(221,193,54)"/><text x="8.4999%" y="127.50"></text></g><g><title>is_late_bound_map (7,173,083 samples, 0.28%)</title><rect x="8.2807%" y="101" width="0.2804%" height="15" fill="rgb(248,212,6)"/><text x="8.5307%" y="111.50"></text></g><g><title>resolve_lifetimes (5,988,488 samples, 0.23%)</title><rect x="8.3271%" y="85" width="0.2341%" height="15" fill="rgb(208,68,35)"/><text x="8.5771%" y="95.50"></text></g><g><title>mir_promoted (24,826,054 samples, 0.97%)</title><rect x="8.5612%" y="117" width="0.9705%" height="15" fill="rgb(232,128,0)"/><text x="8.8112%" y="127.50"></text></g><g><title>mir_const_qualif_const_arg (20,930,615 samples, 0.82%)</title><rect x="8.7134%" y="101" width="0.8182%" height="15" fill="rgb(207,160,47)"/><text x="8.9634%" y="111.50"></text></g><g><title>mir_const (17,827,559 samples, 0.70%)</title><rect x="8.8348%" y="85" width="0.6969%" height="15" fill="rgb(228,23,34)"/><text x="9.0848%" y="95.50"></text></g><g><title>unsafety_check_result_for_const_arg (12,404,605 samples, 0.48%)</title><rect x="9.0468%" y="69" width="0.4849%" height="15" fill="rgb(218,30,26)"/><text x="9.2968%" y="79.50"></text></g><g><title>mir_built (10,809,793 samples, 0.42%)</title><rect x="9.1091%" y="53" width="0.4226%" height="15" fill="rgb(220,122,19)"/><text x="9.3591%" y="63.50"></text></g><g><title>mir_borrowck_const_arg (70,752,978 samples, 2.77%)</title><rect x="6.7734%" y="133" width="2.7660%" height="15" fill="rgb(250,228,42)"/><text x="7.0234%" y="143.50">mi..</text></g><g><title>thir_body (2,925,576 samples, 0.11%)</title><rect x="10.4711%" y="69" width="0.1144%" height="15" fill="rgb(240,193,28)"/><text x="10.7211%" y="79.50"></text></g><g><title>mir_const (17,718,596 samples, 0.69%)</title><rect x="9.8968%" y="117" width="0.6927%" height="15" fill="rgb(216,20,37)"/><text x="10.1468%" y="127.50"></text></g><g><title>unsafety_check_result (15,074,802 samples, 0.59%)</title><rect x="10.0002%" y="101" width="0.5893%" height="15" fill="rgb(206,188,39)"/><text x="10.2502%" y="111.50"></text></g><g><title>mir_built (13,283,768 samples, 0.52%)</title><rect x="10.0702%" y="85" width="0.5193%" height="15" fill="rgb(217,207,13)"/><text x="10.3202%" y="95.50"></text></g><g><title>thir_body (3,148,294 samples, 0.12%)</title><rect x="11.8499%" y="53" width="0.1231%" height="15" fill="rgb(231,73,38)"/><text x="12.0999%" y="63.50"></text></g><g><title>mir_promoted (62,671,475 samples, 2.45%)</title><rect x="9.5393%" y="133" width="2.4500%" height="15" fill="rgb(225,20,46)"/><text x="9.7893%" y="143.50">mi..</text></g><g><title>mir_const_qualif (35,808,721 samples, 1.40%)</title><rect x="10.5895%" y="117" width="1.3999%" height="15" fill="rgb(210,31,41)"/><text x="10.8395%" y="127.50"></text></g><g><title>mir_const (30,176,971 samples, 1.18%)</title><rect x="10.8097%" y="101" width="1.1797%" height="15" fill="rgb(221,200,47)"/><text x="11.0597%" y="111.50"></text></g><g><title>unsafety_check_result (21,391,730 samples, 0.84%)</title><rect x="11.1531%" y="85" width="0.8363%" height="15" fill="rgb(226,26,5)"/><text x="11.4031%" y="95.50"></text></g><g><title>mir_built (18,662,650 samples, 0.73%)</title><rect x="11.2598%" y="69" width="0.7296%" height="15" fill="rgb(249,33,26)"/><text x="11.5098%" y="79.50"></text></g><g><title>type_op_prove_predicate (2,887,841 samples, 0.11%)</title><rect x="12.0826%" y="133" width="0.1129%" height="15" fill="rgb(235,183,28)"/><text x="12.3326%" y="143.50"></text></g><g><title>MIR_borrow_checking (239,669,274 samples, 9.37%)</title><rect x="2.8262%" y="165" width="9.3695%" height="15" fill="rgb(221,5,38)"/><text x="3.0762%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (235,309,486 samples, 9.20%)</title><rect x="2.9967%" y="149" width="9.1990%" height="15" fill="rgb(247,18,42)"/><text x="3.2467%" y="159.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (9,924,372 samples, 0.39%)</title><rect x="12.9995%" y="133" width="0.3880%" height="15" fill="rgb(241,131,45)"/><text x="13.2495%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (26,791,638 samples, 1.05%)</title><rect x="12.3469%" y="149" width="1.0474%" height="15" fill="rgb(249,31,29)"/><text x="12.5969%" y="159.50"></text></g><g><title>MIR_effect_checking (30,988,340 samples, 1.21%)</title><rect x="12.1957%" y="165" width="1.2114%" height="15" fill="rgb(225,111,53)"/><text x="12.4457%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (3,437,324 samples, 0.13%)</title><rect x="13.6591%" y="149" width="0.1344%" height="15" fill="rgb(238,160,17)"/><text x="13.9091%" y="159.50"></text></g><g><title>misc_checking_1 (7,928,229 samples, 0.31%)</title><rect x="13.4974%" y="165" width="0.3099%" height="15" fill="rgb(214,148,48)"/><text x="13.7474%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,385,654 samples, 0.13%)</title><rect x="13.8074%" y="149" width="0.1324%" height="15" fill="rgb(232,36,49)"/><text x="14.0574%" y="159.50"></text></g><g><title>check_mod_liveness (2,572,546 samples, 0.10%)</title><rect x="13.8392%" y="133" width="0.1006%" height="15" fill="rgb(209,103,24)"/><text x="14.0892%" y="143.50"></text></g><g><title>misc_checking_2 (6,223,412 samples, 0.24%)</title><rect x="13.8073%" y="165" width="0.2433%" height="15" fill="rgb(229,88,8)"/><text x="14.0573%" y="175.50"></text></g><g><title>match_checking (2,836,068 samples, 0.11%)</title><rect x="13.9398%" y="149" width="0.1109%" height="15" fill="rgb(213,181,19)"/><text x="14.1898%" y="159.50"></text></g><g><title>death_checking (3,609,886 samples, 0.14%)</title><rect x="14.1301%" y="149" width="0.1411%" height="15" fill="rgb(254,191,54)"/><text x="14.3801%" y="159.50"></text></g><g><title>crate_lints (4,367,644 samples, 0.17%)</title><rect x="14.2714%" y="133" width="0.1707%" height="15" fill="rgb(241,83,37)"/><text x="14.5214%" y="143.50"></text></g><g><title>lint_checking (6,869,909 samples, 0.27%)</title><rect x="14.2712%" y="149" width="0.2686%" height="15" fill="rgb(233,36,39)"/><text x="14.5212%" y="159.50"></text></g><g><title>privacy_access_levels (4,284,653 samples, 0.17%)</title><rect x="14.5398%" y="149" width="0.1675%" height="15" fill="rgb(226,3,54)"/><text x="14.7898%" y="159.50"></text></g><g><title>privacy_checking_modules (5,984,530 samples, 0.23%)</title><rect x="14.7073%" y="149" width="0.2340%" height="15" fill="rgb(245,192,40)"/><text x="14.9573%" y="159.50"></text></g><g><title>check_mod_privacy (5,977,740 samples, 0.23%)</title><rect x="14.7076%" y="133" width="0.2337%" height="15" fill="rgb(238,167,29)"/><text x="14.9576%" y="143.50"></text></g><g><title>misc_checking_3 (22,842,459 samples, 0.89%)</title><rect x="14.0506%" y="165" width="0.8930%" height="15" fill="rgb(232,182,51)"/><text x="14.3006%" y="175.50"></text></g><g><title>impl_parent (3,580,763 samples, 0.14%)</title><rect x="32.6643%" y="101" width="0.1400%" height="15" fill="rgb(231,60,39)"/><text x="32.9143%" y="111.50"></text></g><g><title>impl_trait_ref (6,681,319 samples, 0.26%)</title><rect x="32.8043%" y="101" width="0.2612%" height="15" fill="rgb(208,69,12)"/><text x="33.0543%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,360,180 samples, 0.21%)</title><rect x="32.8559%" y="85" width="0.2095%" height="15" fill="rgb(235,93,37)"/><text x="33.1059%" y="95.50"></text></g><g><title>coherent_trait (463,595,668 samples, 18.12%)</title><rect x="15.0003%" y="133" width="18.1235%" height="15" fill="rgb(213,116,39)"/><text x="15.2503%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (462,567,328 samples, 18.08%)</title><rect x="15.0405%" y="117" width="18.0833%" height="15" fill="rgb(222,207,29)"/><text x="15.2905%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (464,276,804 samples, 18.15%)</title><rect x="14.9987%" y="149" width="18.1502%" height="15" fill="rgb(206,96,30)"/><text x="15.2487%" y="159.50">coherence_checking</text></g><g><title>specializes (3,010,967 samples, 0.12%)</title><rect x="37.0099%" y="85" width="0.1177%" height="15" fill="rgb(218,138,4)"/><text x="37.2599%" y="95.50"></text></g><g><title>evaluate_obligation (15,433,326 samples, 0.60%)</title><rect x="36.5394%" y="101" width="0.6033%" height="15" fill="rgb(250,191,14)"/><text x="36.7894%" y="111.50"></text></g><g><title>param_env (7,202,929 samples, 0.28%)</title><rect x="37.2489%" y="101" width="0.2816%" height="15" fill="rgb(239,60,40)"/><text x="37.4989%" y="111.50"></text></g><g><title>predicates_of (3,768,788 samples, 0.15%)</title><rect x="37.3832%" y="85" width="0.1473%" height="15" fill="rgb(206,27,48)"/><text x="37.6332%" y="95.50"></text></g><g><title>predicates_defined_on (3,182,360 samples, 0.12%)</title><rect x="37.4061%" y="69" width="0.1244%" height="15" fill="rgb(225,35,8)"/><text x="37.6561%" y="79.50"></text></g><g><title>typeck (3,983,099 samples, 0.16%)</title><rect x="37.6090%" y="101" width="0.1557%" height="15" fill="rgb(250,213,24)"/><text x="37.8590%" y="111.50"></text></g><g><title>param_env (7,441,468 samples, 0.29%)</title><rect x="38.3154%" y="85" width="0.2909%" height="15" fill="rgb(247,123,22)"/><text x="38.5654%" y="95.50"></text></g><g><title>predicates_of (3,618,438 samples, 0.14%)</title><rect x="38.4649%" y="69" width="0.1415%" height="15" fill="rgb(231,138,38)"/><text x="38.7149%" y="79.50"></text></g><g><title>predicates_defined_on (3,056,673 samples, 0.12%)</title><rect x="38.4869%" y="53" width="0.1195%" height="15" fill="rgb(231,145,46)"/><text x="38.7369%" y="63.50"></text></g><g><title>typeck_const_arg (23,300,897 samples, 0.91%)</title><rect x="37.7647%" y="101" width="0.9109%" height="15" fill="rgb(251,118,11)"/><text x="38.0147%" y="111.50"></text></g><g><title>item_bodies_checking (140,829,203 samples, 5.51%)</title><rect x="33.1825%" y="149" width="5.5055%" height="15" fill="rgb(217,147,25)"/><text x="33.4325%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (140,824,633 samples, 5.51%)</title><rect x="33.1827%" y="133" width="5.5053%" height="15" fill="rgb(247,81,37)"/><text x="33.4327%" y="143.50">typeck_..</text></g><g><title>typeck (137,838,068 samples, 5.39%)</title><rect x="33.2994%" y="117" width="5.3886%" height="15" fill="rgb(209,12,38)"/><text x="33.5494%" y="127.50">typeck</text></g><g><title>evaluate_obligation (3,538,005 samples, 0.14%)</title><rect x="56.5156%" y="117" width="0.1383%" height="15" fill="rgb(227,1,9)"/><text x="56.7656%" y="127.50"></text></g><g><title>item_types_checking (461,946,661 samples, 18.06%)</title><rect x="38.6880%" y="149" width="18.0591%" height="15" fill="rgb(248,47,43)"/><text x="38.9380%" y="159.50">item_types_checking</text></g><g><title>check_mod_item_types (461,935,671 samples, 18.06%)</title><rect x="38.6884%" y="133" width="18.0586%" height="15" fill="rgb(221,10,30)"/><text x="38.9384%" y="143.50">check_mod_item_types</text></g><g><title>generics_of (3,305,444 samples, 0.13%)</title><rect x="56.9289%" y="117" width="0.1292%" height="15" fill="rgb(210,229,1)"/><text x="57.1789%" y="127.50"></text></g><g><title>predicates_of (4,982,274 samples, 0.19%)</title><rect x="57.0823%" y="117" width="0.1948%" height="15" fill="rgb(222,148,37)"/><text x="57.3323%" y="127.50"></text></g><g><title>predicates_defined_on (3,953,907 samples, 0.15%)</title><rect x="57.1225%" y="101" width="0.1546%" height="15" fill="rgb(234,67,33)"/><text x="57.3725%" y="111.50"></text></g><g><title>type_collecting (16,692,258 samples, 0.65%)</title><rect x="56.7472%" y="149" width="0.6526%" height="15" fill="rgb(247,98,35)"/><text x="56.9972%" y="159.50"></text></g><g><title>collect_mod_item_types (16,684,558 samples, 0.65%)</title><rect x="56.7475%" y="133" width="0.6523%" height="15" fill="rgb(247,138,52)"/><text x="56.9975%" y="143.50"></text></g><g><title>type_of (3,132,926 samples, 0.12%)</title><rect x="57.2772%" y="117" width="0.1225%" height="15" fill="rgb(213,79,30)"/><text x="57.5272%" y="127.50"></text></g><g><title>param_env (8,158,732 samples, 0.32%)</title><rect x="58.2110%" y="117" width="0.3190%" height="15" fill="rgb(246,177,23)"/><text x="58.4610%" y="127.50"></text></g><g><title>region_scope_tree (3,326,594 samples, 0.13%)</title><rect x="58.5326%" y="117" width="0.1300%" height="15" fill="rgb(230,62,27)"/><text x="58.7826%" y="127.50"></text></g><g><title>check_impl_item_well_formed (28,808,736 samples, 1.13%)</title><rect x="57.5370%" y="133" width="1.1262%" height="15" fill="rgb(216,154,8)"/><text x="57.7870%" y="143.50"></text></g><g><title>evaluate_obligation (427,744,104 samples, 16.72%)</title><rect x="59.2747%" y="117" width="16.7220%" height="15" fill="rgb(244,35,45)"/><text x="59.5247%" y="127.50">evaluate_obligation</text></g><g><title>param_env (4,199,144 samples, 0.16%)</title><rect x="76.1002%" y="117" width="0.1642%" height="15" fill="rgb(251,115,12)"/><text x="76.3502%" y="127.50"></text></g><g><title>check_item_well_formed (451,013,575 samples, 17.63%)</title><rect x="58.6632%" y="133" width="17.6316%" height="15" fill="rgb(240,54,50)"/><text x="58.9132%" y="143.50">check_item_well_formed</text></g><g><title>analysis (1,881,278,272 samples, 73.55%)</title><rect x="2.7659%" y="181" width="73.5455%" height="15" fill="rgb(233,84,52)"/><text x="3.0159%" y="191.50">analysis</text></g><g><title>type_check_crate (1,569,774,829 samples, 61.37%)</title><rect x="14.9436%" y="165" width="61.3678%" height="15" fill="rgb(207,117,47)"/><text x="15.1936%" y="175.50">type_check_crate</text></g><g><title>wf_checking (483,523,768 samples, 18.90%)</title><rect x="57.4089%" y="149" width="18.9026%" height="15" fill="rgb(249,43,39)"/><text x="57.6589%" y="159.50">wf_checking</text></g><g><title>fn_abi_of_instance (6,125,674 samples, 0.24%)</title><rect x="77.7867%" y="149" width="0.2395%" height="15" fill="rgb(209,38,44)"/><text x="78.0367%" y="159.50"></text></g><g><title>codegen_module (43,071,410 samples, 1.68%)</title><rect x="76.4029%" y="165" width="1.6838%" height="15" fill="rgb(236,212,23)"/><text x="76.6529%" y="175.50"></text></g><g><title>codegen_crate (45,485,726 samples, 1.78%)</title><rect x="76.3118%" y="181" width="1.7782%" height="15" fill="rgb(242,79,21)"/><text x="76.5618%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (311,713,177 samples, 12.19%)</title><rect x="78.1070%" y="165" width="12.1859%" height="15" fill="rgb(211,96,35)"/><text x="78.3570%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (297,543,694 samples, 11.63%)</title><rect x="78.6609%" y="149" width="11.6320%" height="15" fill="rgb(253,215,40)"/><text x="78.9109%" y="159.50">LLVM_module_codeg..</text></g><g><title>codegen_module_optimize (332,584,796 samples, 13.00%)</title><rect x="78.0900%" y="181" width="13.0019%" height="15" fill="rgb(211,81,21)"/><text x="78.3400%" y="191.50">codegen_module_optim..</text></g><g><title>LLVM_module_optimize (20,438,545 samples, 0.80%)</title><rect x="90.2929%" y="165" width="0.7990%" height="15" fill="rgb(208,190,38)"/><text x="90.5429%" y="175.50"></text></g><g><title>macro_expand_crate (66,308,425 samples, 2.59%)</title><rect x="91.1384%" y="165" width="2.5922%" height="15" fill="rgb(235,213,38)"/><text x="91.3884%" y="175.50">ma..</text></g><g><title>expand_crate (66,290,845 samples, 2.59%)</title><rect x="91.1390%" y="149" width="2.5915%" height="15" fill="rgb(237,122,38)"/><text x="91.3890%" y="159.50">ex..</text></g><g><title>late_resolve_crate (7,195,992 samples, 0.28%)</title><rect x="93.7634%" y="149" width="0.2813%" height="15" fill="rgb(244,218,35)"/><text x="94.0134%" y="159.50"></text></g><g><title>configure_and_expand (76,054,343 samples, 2.97%)</title><rect x="91.0919%" y="181" width="2.9732%" height="15" fill="rgb(240,68,47)"/><text x="91.3419%" y="191.50">con..</text></g><g><title>resolve_crate (8,457,295 samples, 0.33%)</title><rect x="93.7345%" y="165" width="0.3306%" height="15" fill="rgb(210,16,53)"/><text x="93.9845%" y="175.50"></text></g><g><title>free_global_ctxt (13,230,193 samples, 0.52%)</title><rect x="94.1790%" y="181" width="0.5172%" height="15" fill="rgb(235,124,12)"/><text x="94.4290%" y="191.50"></text></g><g><title>layout_of (4,117,435 samples, 0.16%)</title><rect x="95.9024%" y="85" width="0.1610%" height="15" fill="rgb(224,169,11)"/><text x="96.1524%" y="95.50"></text></g><g><title>layout_of (3,274,376 samples, 0.13%)</title><rect x="95.9354%" y="69" width="0.1280%" height="15" fill="rgb(250,166,2)"/><text x="96.1854%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,244,706 samples, 0.13%)</title><rect x="95.9366%" y="53" width="0.1268%" height="15" fill="rgb(242,216,29)"/><text x="96.1866%" y="63.50"></text></g><g><title>normalize_projection_ty (3,209,806 samples, 0.13%)</title><rect x="95.9379%" y="37" width="0.1255%" height="15" fill="rgb(230,116,27)"/><text x="96.1879%" y="47.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,785,225 samples, 0.11%)</title><rect x="96.0634%" y="85" width="0.1089%" height="15" fill="rgb(228,99,48)"/><text x="96.3134%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,886,448 samples, 0.11%)</title><rect x="96.1723%" y="85" width="0.1128%" height="15" fill="rgb(253,11,6)"/><text x="96.4223%" y="95.50"></text></g><g><title>optimized_mir (13,390,371 samples, 0.52%)</title><rect x="95.7948%" y="101" width="0.5235%" height="15" fill="rgb(247,143,39)"/><text x="96.0448%" y="111.50"></text></g><g><title>resolve_instance (4,150,381 samples, 0.16%)</title><rect x="96.3183%" y="101" width="0.1623%" height="15" fill="rgb(236,97,10)"/><text x="96.5683%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (21,924,160 samples, 0.86%)</title><rect x="95.6535%" y="117" width="0.8571%" height="15" fill="rgb(233,208,19)"/><text x="95.9035%" y="127.50"></text></g><g><title>monomorphization_collector (22,126,782 samples, 0.87%)</title><rect x="95.6532%" y="133" width="0.8650%" height="15" fill="rgb(216,164,2)"/><text x="95.9032%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (24,442,326 samples, 0.96%)</title><rect x="95.6518%" y="149" width="0.9555%" height="15" fill="rgb(220,129,5)"/><text x="95.9018%" y="159.50"></text></g><g><title>exported_symbols (28,044,442 samples, 1.10%)</title><rect x="95.6487%" y="165" width="1.0964%" height="15" fill="rgb(242,17,10)"/><text x="95.8987%" y="175.50"></text></g><g><title>reachable_non_generics (3,522,735 samples, 0.14%)</title><rect x="96.6074%" y="149" width="0.1377%" height="15" fill="rgb(242,107,0)"/><text x="96.8574%" y="159.50"></text></g><g><title>reachable_set (3,374,894 samples, 0.13%)</title><rect x="96.6131%" y="133" width="0.1319%" height="15" fill="rgb(251,28,31)"/><text x="96.8631%" y="143.50"></text></g><g><title>mir_for_ctfe (14,570,155 samples, 0.57%)</title><rect x="96.7620%" y="165" width="0.5696%" height="15" fill="rgb(233,223,10)"/><text x="97.0120%" y="175.50"></text></g><g><title>mir_for_ctfe_of_const_arg (3,409,218 samples, 0.13%)</title><rect x="97.1984%" y="149" width="0.1333%" height="15" fill="rgb(215,21,27)"/><text x="97.4484%" y="159.50"></text></g><g><title>layout_of (3,254,982 samples, 0.13%)</title><rect x="97.6279%" y="149" width="0.1272%" height="15" fill="rgb(232,23,21)"/><text x="97.8779%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,696,240 samples, 0.26%)</title><rect x="97.7552%" y="149" width="0.2618%" height="15" fill="rgb(244,5,23)"/><text x="98.0052%" y="159.50"></text></g><g><title>optimized_mir (17,595,231 samples, 0.69%)</title><rect x="97.3608%" y="165" width="0.6879%" height="15" fill="rgb(226,81,46)"/><text x="97.6108%" y="175.50"></text></g><g><title>generate_crate_metadata (87,743,941 samples, 3.43%)</title><rect x="94.6962%" y="181" width="3.4302%" height="15" fill="rgb(247,70,30)"/><text x="94.9462%" y="191.50">gen..</text></g><g><title>hir_lowering (22,276,793 samples, 0.87%)</title><rect x="98.1264%" y="181" width="0.8709%" height="15" fill="rgb(212,68,19)"/><text x="98.3764%" y="191.50"></text></g><g><title>finish_ongoing_codegen (6,434,835 samples, 0.25%)</title><rect x="98.9982%" y="165" width="0.2516%" height="15" fill="rgb(240,187,13)"/><text x="99.2482%" y="175.50"></text></g><g><title>link_crate (8,532,205 samples, 0.33%)</title><rect x="99.2497%" y="165" width="0.3336%" height="15" fill="rgb(223,113,26)"/><text x="99.4997%" y="175.50"></text></g><g><title>link_binary (8,309,723 samples, 0.32%)</title><rect x="99.2584%" y="149" width="0.3249%" height="15" fill="rgb(206,192,2)"/><text x="99.5084%" y="159.50"></text></g><g><title>link_rlib (6,991,730 samples, 0.27%)</title><rect x="99.3100%" y="133" width="0.2733%" height="15" fill="rgb(241,108,4)"/><text x="99.5600%" y="143.50"></text></g><g><title>link (15,006,351 samples, 0.59%)</title><rect x="98.9973%" y="181" width="0.5866%" height="15" fill="rgb(247,173,49)"/><text x="99.2473%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (8,520,465 samples, 0.33%)</title><rect x="99.6080%" y="181" width="0.3331%" height="15" fill="rgb(224,114,35)"/><text x="99.8580%" y="191.50"></text></g><g><title>all (2,557,977,408 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,557,977,408 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>