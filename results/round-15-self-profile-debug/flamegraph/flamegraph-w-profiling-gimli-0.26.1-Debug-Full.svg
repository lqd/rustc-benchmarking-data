<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (739,321,283 samples, 8.62%)</title><rect x="0.0194%" y="181" width="8.6224%" height="15" fill="rgb(227,0,7)"/><text x="0.2694%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (29,660,793 samples, 0.35%)</title><rect x="19.4847%" y="53" width="0.3459%" height="15" fill="rgb(217,0,24)"/><text x="19.7347%" y="63.50"></text></g><g><title>evaluate_obligation (24,756,127 samples, 0.29%)</title><rect x="19.5419%" y="37" width="0.2887%" height="15" fill="rgb(221,193,54)"/><text x="19.7919%" y="47.50"></text></g><g><title>needs_drop_raw (36,683,076 samples, 0.43%)</title><rect x="19.4038%" y="69" width="0.4278%" height="15" fill="rgb(248,212,6)"/><text x="19.6538%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (9,768,170 samples, 0.11%)</title><rect x="19.8981%" y="53" width="0.1139%" height="15" fill="rgb(208,68,35)"/><text x="20.1481%" y="63.50"></text></g><g><title>resolve_instance (19,288,774 samples, 0.22%)</title><rect x="19.8320%" y="69" width="0.2250%" height="15" fill="rgb(232,128,0)"/><text x="20.0820%" y="79.50"></text></g><g><title>thir_body (69,061,357 samples, 0.81%)</title><rect x="20.0689%" y="69" width="0.8054%" height="15" fill="rgb(207,160,47)"/><text x="20.3189%" y="79.50"></text></g><g><title>mir_const (354,416,679 samples, 4.13%)</title><rect x="16.7548%" y="117" width="4.1334%" height="15" fill="rgb(228,23,34)"/><text x="17.0048%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (314,698,414 samples, 3.67%)</title><rect x="17.2180%" y="101" width="3.6702%" height="15" fill="rgb(218,30,26)"/><text x="17.4680%" y="111.50">unsa..</text></g><g><title>mir_built (288,247,619 samples, 3.36%)</title><rect x="17.5265%" y="85" width="3.3617%" height="15" fill="rgb(220,122,19)"/><text x="17.7765%" y="95.50">mir..</text></g><g><title>mir_promoted (397,071,872 samples, 4.63%)</title><rect x="16.3368%" y="133" width="4.6309%" height="15" fill="rgb(250,228,42)"/><text x="16.5868%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (11,947,373 samples, 0.14%)</title><rect x="20.9682%" y="133" width="0.1393%" height="15" fill="rgb(240,193,28)"/><text x="21.2182%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (17,435,303 samples, 0.20%)</title><rect x="21.1076%" y="133" width="0.2033%" height="15" fill="rgb(216,20,37)"/><text x="21.3576%" y="143.50"></text></g><g><title>normalize_projection_ty (10,215,886 samples, 0.12%)</title><rect x="21.1918%" y="117" width="0.1191%" height="15" fill="rgb(206,188,39)"/><text x="21.4418%" y="127.50"></text></g><g><title>type_op_prove_predicate (79,860,840 samples, 0.93%)</title><rect x="21.4494%" y="133" width="0.9314%" height="15" fill="rgb(217,207,13)"/><text x="21.6994%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,165,475,125 samples, 13.59%)</title><rect x="8.7889%" y="165" width="13.5925%" height="15" fill="rgb(231,73,38)"/><text x="9.0389%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,155,412,852 samples, 13.48%)</title><rect x="8.9063%" y="149" width="13.4752%" height="15" fill="rgb(225,20,46)"/><text x="9.1563%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (8,947,890 samples, 0.10%)</title><rect x="22.4335%" y="165" width="0.1044%" height="15" fill="rgb(210,31,41)"/><text x="22.6835%" y="175.50"></text></g><g><title>check_mod_attrs (20,444,262 samples, 0.24%)</title><rect x="22.5395%" y="149" width="0.2384%" height="15" fill="rgb(221,200,47)"/><text x="22.7895%" y="159.50"></text></g><g><title>lint_levels (14,596,177 samples, 0.17%)</title><rect x="22.9720%" y="133" width="0.1702%" height="15" fill="rgb(226,26,5)"/><text x="23.2220%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (28,577,118 samples, 0.33%)</title><rect x="22.9106%" y="149" width="0.3333%" height="15" fill="rgb(249,33,26)"/><text x="23.1606%" y="159.50"></text></g><g><title>misc_checking_1 (62,244,398 samples, 0.73%)</title><rect x="22.5378%" y="165" width="0.7259%" height="15" fill="rgb(235,183,28)"/><text x="22.7878%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (23,465,967 samples, 0.27%)</title><rect x="23.2638%" y="149" width="0.2737%" height="15" fill="rgb(221,5,38)"/><text x="23.5138%" y="159.50"></text></g><g><title>check_mod_liveness (18,221,632 samples, 0.21%)</title><rect x="23.3250%" y="133" width="0.2125%" height="15" fill="rgb(247,18,42)"/><text x="23.5750%" y="143.50"></text></g><g><title>mir_borrowck (56,649,255 samples, 0.66%)</title><rect x="25.0105%" y="37" width="0.6607%" height="15" fill="rgb(241,131,45)"/><text x="25.2605%" y="47.50"></text></g><g><title>mir_for_ctfe (93,045,061 samples, 1.09%)</title><rect x="24.5906%" y="69" width="1.0852%" height="15" fill="rgb(249,31,29)"/><text x="24.8406%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (81,158,313 samples, 0.95%)</title><rect x="24.7292%" y="53" width="0.9465%" height="15" fill="rgb(225,111,53)"/><text x="24.9792%" y="63.50"></text></g><g><title>eval_to_const_value_raw (113,759,779 samples, 1.33%)</title><rect x="24.3498%" y="117" width="1.3267%" height="15" fill="rgb(238,160,17)"/><text x="24.5998%" y="127.50"></text></g><g><title>eval_to_const_value_raw (112,631,147 samples, 1.31%)</title><rect x="24.3629%" y="101" width="1.3136%" height="15" fill="rgb(214,148,48)"/><text x="24.6129%" y="111.50"></text></g><g><title>eval_to_allocation_raw (110,409,230 samples, 1.29%)</title><rect x="24.3889%" y="85" width="1.2877%" height="15" fill="rgb(232,36,49)"/><text x="24.6389%" y="95.50"></text></g><g><title>mir_const (24,404,718 samples, 0.28%)</title><rect x="25.7973%" y="101" width="0.2846%" height="15" fill="rgb(209,103,24)"/><text x="26.0473%" y="111.50"></text></g><g><title>unsafety_check_result (18,418,035 samples, 0.21%)</title><rect x="25.8671%" y="85" width="0.2148%" height="15" fill="rgb(229,88,8)"/><text x="26.1171%" y="95.50"></text></g><g><title>mir_built (15,845,659 samples, 0.18%)</title><rect x="25.8971%" y="69" width="0.1848%" height="15" fill="rgb(213,181,19)"/><text x="26.1471%" y="79.50"></text></g><g><title>mir_const_qualif (33,988,915 samples, 0.40%)</title><rect x="25.6867%" y="117" width="0.3964%" height="15" fill="rgb(254,191,54)"/><text x="25.9367%" y="127.50"></text></g><g><title>misc_checking_2 (245,710,760 samples, 2.87%)</title><rect x="23.2638%" y="165" width="2.8656%" height="15" fill="rgb(241,83,37)"/><text x="23.5138%" y="175.50">mi..</text></g><g><title>match_checking (222,241,203 samples, 2.59%)</title><rect x="23.5375%" y="149" width="2.5919%" height="15" fill="rgb(233,36,39)"/><text x="23.7875%" y="159.50">ma..</text></g><g><title>check_match (219,671,315 samples, 2.56%)</title><rect x="23.5674%" y="133" width="2.5619%" height="15" fill="rgb(226,3,54)"/><text x="23.8174%" y="143.50">ch..</text></g><g><title>check_private_in_public (18,341,686 samples, 0.21%)</title><rect x="26.1297%" y="149" width="0.2139%" height="15" fill="rgb(245,192,40)"/><text x="26.3797%" y="159.50"></text></g><g><title>death_checking (26,368,526 samples, 0.31%)</title><rect x="26.3436%" y="149" width="0.3075%" height="15" fill="rgb(238,167,29)"/><text x="26.5936%" y="159.50"></text></g><g><title>crate_lints (34,337,626 samples, 0.40%)</title><rect x="26.6512%" y="133" width="0.4005%" height="15" fill="rgb(232,182,51)"/><text x="26.9012%" y="143.50"></text></g><g><title>lint_checking (66,416,280 samples, 0.77%)</title><rect x="26.6511%" y="149" width="0.7746%" height="15" fill="rgb(231,60,39)"/><text x="26.9011%" y="159.50"></text></g><g><title>module_lints (32,074,994 samples, 0.37%)</title><rect x="27.0517%" y="133" width="0.3741%" height="15" fill="rgb(208,69,12)"/><text x="27.3017%" y="143.50"></text></g><g><title>lint_mod (32,021,674 samples, 0.37%)</title><rect x="27.0523%" y="117" width="0.3735%" height="15" fill="rgb(235,93,37)"/><text x="27.3023%" y="127.50"></text></g><g><title>privacy_access_levels (31,094,603 samples, 0.36%)</title><rect x="27.4257%" y="149" width="0.3626%" height="15" fill="rgb(213,116,39)"/><text x="27.6757%" y="159.50"></text></g><g><title>privacy_checking_modules (53,842,564 samples, 0.63%)</title><rect x="27.7884%" y="149" width="0.6279%" height="15" fill="rgb(222,207,29)"/><text x="28.0384%" y="159.50"></text></g><g><title>check_mod_privacy (53,786,024 samples, 0.63%)</title><rect x="27.7890%" y="133" width="0.6273%" height="15" fill="rgb(206,96,30)"/><text x="28.0390%" y="143.50"></text></g><g><title>misc_checking_3 (196,690,915 samples, 2.29%)</title><rect x="26.1294%" y="165" width="2.2939%" height="15" fill="rgb(218,138,4)"/><text x="26.3794%" y="175.50">m..</text></g><g><title>coherent_trait (23,389,276 samples, 0.27%)</title><rect x="28.4571%" y="133" width="0.2728%" height="15" fill="rgb(250,191,14)"/><text x="28.7071%" y="143.50"></text></g><g><title>specialization_graph_of (20,180,255 samples, 0.24%)</title><rect x="28.4945%" y="117" width="0.2354%" height="15" fill="rgb(239,60,40)"/><text x="28.7445%" y="127.50"></text></g><g><title>coherence_checking (25,179,164 samples, 0.29%)</title><rect x="28.4566%" y="149" width="0.2937%" height="15" fill="rgb(206,27,48)"/><text x="28.7066%" y="159.50"></text></g><g><title>dropck_outlives (9,618,704 samples, 0.11%)</title><rect x="43.1011%" y="101" width="0.1122%" height="15" fill="rgb(225,35,8)"/><text x="43.3511%" y="111.50"></text></g><g><title>evaluate_obligation (70,145,537 samples, 0.82%)</title><rect x="43.2256%" y="101" width="0.8181%" height="15" fill="rgb(250,213,24)"/><text x="43.4756%" y="111.50"></text></g><g><title>method_autoderef_steps (8,887,325 samples, 0.10%)</title><rect x="44.1060%" y="101" width="0.1036%" height="15" fill="rgb(247,123,22)"/><text x="44.3560%" y="111.50"></text></g><g><title>typeck (168,282,265 samples, 1.96%)</title><rect x="44.2682%" y="101" width="1.9626%" height="15" fill="rgb(231,138,38)"/><text x="44.5182%" y="111.50">t..</text></g><g><title>item_bodies_checking (1,497,357,366 samples, 17.46%)</title><rect x="28.7811%" y="149" width="17.4631%" height="15" fill="rgb(231,145,46)"/><text x="29.0311%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,497,353,316 samples, 17.46%)</title><rect x="28.7811%" y="133" width="17.4631%" height="15" fill="rgb(251,118,11)"/><text x="29.0311%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,491,330,443 samples, 17.39%)</title><rect x="28.8514%" y="117" width="17.3929%" height="15" fill="rgb(217,147,25)"/><text x="29.1014%" y="127.50">typeck</text></g><g><title>item_types_checking (73,651,403 samples, 0.86%)</title><rect x="46.2442%" y="149" width="0.8590%" height="15" fill="rgb(247,81,37)"/><text x="46.4942%" y="159.50"></text></g><g><title>check_mod_item_types (73,585,913 samples, 0.86%)</title><rect x="46.2450%" y="133" width="0.8582%" height="15" fill="rgb(209,12,38)"/><text x="46.4950%" y="143.50"></text></g><g><title>typeck (31,315,938 samples, 0.37%)</title><rect x="46.7380%" y="117" width="0.3652%" height="15" fill="rgb(227,1,9)"/><text x="46.9880%" y="127.50"></text></g><g><title>fn_sig (8,952,633 samples, 0.10%)</title><rect x="47.3061%" y="117" width="0.1044%" height="15" fill="rgb(248,47,43)"/><text x="47.5561%" y="127.50"></text></g><g><title>generics_of (15,047,522 samples, 0.18%)</title><rect x="47.4105%" y="117" width="0.1755%" height="15" fill="rgb(221,10,30)"/><text x="47.6605%" y="127.50"></text></g><g><title>explicit_predicates_of (16,523,067 samples, 0.19%)</title><rect x="47.7076%" y="85" width="0.1927%" height="15" fill="rgb(210,229,1)"/><text x="47.9576%" y="95.50"></text></g><g><title>predicates_of (32,749,777 samples, 0.38%)</title><rect x="47.6064%" y="117" width="0.3819%" height="15" fill="rgb(222,148,37)"/><text x="47.8564%" y="127.50"></text></g><g><title>predicates_defined_on (29,724,805 samples, 0.35%)</title><rect x="47.6417%" y="101" width="0.3467%" height="15" fill="rgb(234,67,33)"/><text x="47.8917%" y="111.50"></text></g><g><title>type_collecting (79,842,375 samples, 0.93%)</title><rect x="47.1038%" y="149" width="0.9312%" height="15" fill="rgb(247,98,35)"/><text x="47.3538%" y="159.50"></text></g><g><title>collect_mod_item_types (79,772,414 samples, 0.93%)</title><rect x="47.1046%" y="133" width="0.9304%" height="15" fill="rgb(247,138,52)"/><text x="47.3546%" y="143.50"></text></g><g><title>evaluate_obligation (15,316,072 samples, 0.18%)</title><rect x="49.2609%" y="117" width="0.1786%" height="15" fill="rgb(213,79,30)"/><text x="49.5109%" y="127.50"></text></g><g><title>implied_outlives_bounds (9,399,497 samples, 0.11%)</title><rect x="49.4414%" y="117" width="0.1096%" height="15" fill="rgb(246,177,23)"/><text x="49.6914%" y="127.50"></text></g><g><title>param_env (16,674,609 samples, 0.19%)</title><rect x="49.5553%" y="117" width="0.1945%" height="15" fill="rgb(230,62,27)"/><text x="49.8053%" y="127.50"></text></g><g><title>region_scope_tree (23,464,916 samples, 0.27%)</title><rect x="49.7510%" y="117" width="0.2737%" height="15" fill="rgb(216,154,8)"/><text x="50.0010%" y="127.50"></text></g><g><title>check_impl_item_well_formed (158,908,204 samples, 1.85%)</title><rect x="48.1726%" y="133" width="1.8533%" height="15" fill="rgb(244,35,45)"/><text x="48.4226%" y="143.50">c..</text></g><g><title>param_env (15,113,126 samples, 0.18%)</title><rect x="51.0373%" y="117" width="0.1763%" height="15" fill="rgb(251,115,12)"/><text x="51.2873%" y="127.50"></text></g><g><title>check_item_well_formed (108,739,461 samples, 1.27%)</title><rect x="50.0259%" y="133" width="1.2682%" height="15" fill="rgb(240,54,50)"/><text x="50.2759%" y="143.50"></text></g><g><title>analysis (3,665,642,454 samples, 42.75%)</title><rect x="8.6418%" y="181" width="42.7511%" height="15" fill="rgb(233,84,52)"/><text x="8.8918%" y="191.50">analysis</text></g><g><title>type_check_crate (1,969,500,081 samples, 22.97%)</title><rect x="28.4233%" y="165" width="22.9696%" height="15" fill="rgb(207,117,47)"/><text x="28.6733%" y="175.50">type_check_crate</text></g><g><title>wf_checking (287,516,913 samples, 3.35%)</title><rect x="48.0397%" y="149" width="3.3532%" height="15" fill="rgb(249,43,39)"/><text x="48.2897%" y="159.50">wf_..</text></g><g><title>compute_debuginfo_type_name (12,450,449 samples, 0.15%)</title><rect x="57.9499%" y="149" width="0.1452%" height="15" fill="rgb(209,38,44)"/><text x="58.1999%" y="159.50"></text></g><g><title>const_caller_location (20,409,228 samples, 0.24%)</title><rect x="58.0951%" y="149" width="0.2380%" height="15" fill="rgb(236,212,23)"/><text x="58.3451%" y="159.50"></text></g><g><title>param_env (15,864,171 samples, 0.19%)</title><rect x="58.9016%" y="133" width="0.1850%" height="15" fill="rgb(242,79,21)"/><text x="59.1516%" y="143.50"></text></g><g><title>fn_abi_of_instance (70,954,757 samples, 0.83%)</title><rect x="58.3353%" y="149" width="0.8275%" height="15" fill="rgb(211,96,35)"/><text x="58.5853%" y="159.50"></text></g><g><title>layout_of (9,630,931 samples, 0.11%)</title><rect x="59.2000%" y="149" width="0.1123%" height="15" fill="rgb(253,215,40)"/><text x="59.4500%" y="159.50"></text></g><g><title>codegen_module (677,511,447 samples, 7.90%)</title><rect x="51.4494%" y="165" width="7.9016%" height="15" fill="rgb(211,81,21)"/><text x="51.6994%" y="175.50">codegen_mod..</text></g><g><title>codegen_crate (682,449,179 samples, 7.96%)</title><rect x="51.3930%" y="181" width="7.9592%" height="15" fill="rgb(208,190,38)"/><text x="51.6430%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (1,992,601,163 samples, 23.24%)</title><rect x="59.3557%" y="165" width="23.2390%" height="15" fill="rgb(235,213,38)"/><text x="59.6057%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,855,831,284 samples, 21.64%)</title><rect x="60.9508%" y="149" width="21.6439%" height="15" fill="rgb(237,122,38)"/><text x="61.2008%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,125,654,898 samples, 24.79%)</title><rect x="59.3522%" y="181" width="24.7908%" height="15" fill="rgb(244,218,35)"/><text x="59.6022%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (132,751,313 samples, 1.55%)</title><rect x="82.5947%" y="165" width="1.5482%" height="15" fill="rgb(240,68,47)"/><text x="82.8447%" y="175.50"></text></g><g><title>macro_expand_crate (328,114,662 samples, 3.83%)</title><rect x="84.3149%" y="165" width="3.8267%" height="15" fill="rgb(210,16,53)"/><text x="84.5649%" y="175.50">macr..</text></g><g><title>expand_crate (328,095,432 samples, 3.83%)</title><rect x="84.3151%" y="149" width="3.8265%" height="15" fill="rgb(235,124,12)"/><text x="84.5651%" y="159.50">expa..</text></g><g><title>late_resolve_crate (72,304,759 samples, 0.84%)</title><rect x="88.1997%" y="149" width="0.8433%" height="15" fill="rgb(224,169,11)"/><text x="88.4497%" y="159.50"></text></g><g><title>configure_and_expand (431,212,443 samples, 5.03%)</title><rect x="84.1429%" y="181" width="5.0291%" height="15" fill="rgb(250,166,2)"/><text x="84.3929%" y="191.50">config..</text></g><g><title>resolve_crate (88,201,559 samples, 1.03%)</title><rect x="88.1434%" y="165" width="1.0287%" height="15" fill="rgb(242,216,29)"/><text x="88.3934%" y="175.50"></text></g><g><title>drop_ast (19,598,597 samples, 0.23%)</title><rect x="89.1720%" y="181" width="0.2286%" height="15" fill="rgb(230,116,27)"/><text x="89.4220%" y="191.50"></text></g><g><title>early_lint_checks (21,108,452 samples, 0.25%)</title><rect x="89.4010%" y="181" width="0.2462%" height="15" fill="rgb(228,99,48)"/><text x="89.6510%" y="191.50"></text></g><g><title>free_global_ctxt (66,477,822 samples, 0.78%)</title><rect x="89.6471%" y="181" width="0.7753%" height="15" fill="rgb(253,11,6)"/><text x="89.8971%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,817,113 samples, 0.10%)</title><rect x="92.1672%" y="85" width="0.1028%" height="15" fill="rgb(247,143,39)"/><text x="92.4172%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (32,270,543 samples, 0.38%)</title><rect x="92.2700%" y="85" width="0.3764%" height="15" fill="rgb(236,97,10)"/><text x="92.5200%" y="95.50"></text></g><g><title>optimized_mir (81,170,713 samples, 0.95%)</title><rect x="91.7706%" y="101" width="0.9467%" height="15" fill="rgb(233,208,19)"/><text x="92.0206%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (15,861,539 samples, 0.18%)</title><rect x="92.8022%" y="85" width="0.1850%" height="15" fill="rgb(216,164,2)"/><text x="93.0522%" y="95.50"></text></g><g><title>resolve_instance (29,440,108 samples, 0.34%)</title><rect x="92.7172%" y="101" width="0.3433%" height="15" fill="rgb(220,129,5)"/><text x="92.9672%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (157,697,212 samples, 1.84%)</title><rect x="91.3612%" y="117" width="1.8392%" height="15" fill="rgb(242,17,10)"/><text x="91.6112%" y="127.50">m..</text></g><g><title>monomorphization_collector (159,265,638 samples, 1.86%)</title><rect x="91.3611%" y="133" width="1.8575%" height="15" fill="rgb(242,107,0)"/><text x="91.6111%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (17,245,394 samples, 0.20%)</title><rect x="93.2188%" y="117" width="0.2011%" height="15" fill="rgb(251,28,31)"/><text x="93.4688%" y="127.50"></text></g><g><title>symbol_name (15,029,024 samples, 0.18%)</title><rect x="93.2446%" y="101" width="0.1753%" height="15" fill="rgb(233,223,10)"/><text x="93.4946%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (184,272,981 samples, 2.15%)</title><rect x="91.3595%" y="149" width="2.1491%" height="15" fill="rgb(215,21,27)"/><text x="91.6095%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (24,872,921 samples, 0.29%)</title><rect x="93.2186%" y="133" width="0.2901%" height="15" fill="rgb(232,23,21)"/><text x="93.4686%" y="143.50"></text></g><g><title>exported_symbols (195,162,430 samples, 2.28%)</title><rect x="91.3481%" y="165" width="2.2761%" height="15" fill="rgb(244,5,23)"/><text x="91.5981%" y="175.50">e..</text></g><g><title>reachable_non_generics (9,910,680 samples, 0.12%)</title><rect x="93.5086%" y="149" width="0.1156%" height="15" fill="rgb(226,81,46)"/><text x="93.7586%" y="159.50"></text></g><g><title>reachable_set (8,937,690 samples, 0.10%)</title><rect x="93.5200%" y="133" width="0.1042%" height="15" fill="rgb(247,70,30)"/><text x="93.7700%" y="143.50"></text></g><g><title>layout_of (17,784,687 samples, 0.21%)</title><rect x="95.1534%" y="149" width="0.2074%" height="15" fill="rgb(212,68,19)"/><text x="95.4034%" y="159.50"></text></g><g><title>is_copy_raw (12,795,409 samples, 0.15%)</title><rect x="97.2568%" y="117" width="0.1492%" height="15" fill="rgb(240,187,13)"/><text x="97.5068%" y="127.50"></text></g><g><title>evaluate_obligation (10,590,554 samples, 0.12%)</title><rect x="97.2825%" y="101" width="0.1235%" height="15" fill="rgb(223,113,26)"/><text x="97.5325%" y="111.50"></text></g><g><title>needs_drop_raw (15,374,072 samples, 0.18%)</title><rect x="97.2324%" y="133" width="0.1793%" height="15" fill="rgb(206,192,2)"/><text x="97.4824%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (177,121,005 samples, 2.07%)</title><rect x="95.3608%" y="149" width="2.0657%" height="15" fill="rgb(241,108,4)"/><text x="95.6108%" y="159.50">m..</text></g><g><title>optimized_mir (324,538,352 samples, 3.78%)</title><rect x="93.6743%" y="165" width="3.7850%" height="15" fill="rgb(247,173,49)"/><text x="93.9243%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (607,868,986 samples, 7.09%)</title><rect x="90.4225%" y="181" width="7.0894%" height="15" fill="rgb(224,114,35)"/><text x="90.6725%" y="191.50">generate_c..</text></g><g><title>hir_lowering (162,215,448 samples, 1.89%)</title><rect x="97.5118%" y="181" width="1.8919%" height="15" fill="rgb(245,159,27)"/><text x="97.7618%" y="191.50">h..</text></g><g><title>link_crate (23,846,131 samples, 0.28%)</title><rect x="99.4586%" y="165" width="0.2781%" height="15" fill="rgb(245,172,44)"/><text x="99.7086%" y="175.50"></text></g><g><title>link_binary (23,397,866 samples, 0.27%)</title><rect x="99.4638%" y="149" width="0.2729%" height="15" fill="rgb(236,23,11)"/><text x="99.7138%" y="159.50"></text></g><g><title>link_rlib (20,743,889 samples, 0.24%)</title><rect x="99.4948%" y="133" width="0.2419%" height="15" fill="rgb(205,117,38)"/><text x="99.7448%" y="143.50"></text></g><g><title>link (28,567,758 samples, 0.33%)</title><rect x="99.4037%" y="181" width="0.3332%" height="15" fill="rgb(237,72,25)"/><text x="99.6537%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (16,452,695 samples, 0.19%)</title><rect x="99.7454%" y="181" width="0.1919%" height="15" fill="rgb(244,70,9)"/><text x="99.9954%" y="191.50"></text></g><g><title>all (8,574,383,376 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (8,574,383,376 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>