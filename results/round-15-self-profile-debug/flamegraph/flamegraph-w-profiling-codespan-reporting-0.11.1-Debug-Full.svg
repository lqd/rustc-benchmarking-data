<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (182,190,829 samples, 11.58%)</title><rect x="0.0523%" y="229" width="11.5796%" height="15" fill="rgb(227,0,7)"/><text x="0.3023%" y="239.50">LLVM_passes</text></g><g><title>is_copy_raw (3,494,180 samples, 0.22%)</title><rect x="17.5014%" y="101" width="0.2221%" height="15" fill="rgb(217,0,24)"/><text x="17.7514%" y="111.50"></text></g><g><title>evaluate_obligation (2,845,853 samples, 0.18%)</title><rect x="17.5426%" y="85" width="0.1809%" height="15" fill="rgb(221,193,54)"/><text x="17.7926%" y="95.50"></text></g><g><title>needs_drop_raw (4,971,363 samples, 0.32%)</title><rect x="17.4275%" y="117" width="0.3160%" height="15" fill="rgb(248,212,6)"/><text x="17.6775%" y="127.50"></text></g><g><title>resolve_instance (2,892,378 samples, 0.18%)</title><rect x="17.7454%" y="117" width="0.1838%" height="15" fill="rgb(208,68,35)"/><text x="17.9954%" y="127.50"></text></g><g><title>thir_body (4,604,028 samples, 0.29%)</title><rect x="17.9353%" y="117" width="0.2926%" height="15" fill="rgb(232,128,0)"/><text x="18.1853%" y="127.50"></text></g><g><title>mir_const (33,008,959 samples, 2.10%)</title><rect x="16.1410%" y="165" width="2.0980%" height="15" fill="rgb(207,160,47)"/><text x="16.3910%" y="175.50">m..</text></g><g><title>unsafety_check_result (29,306,893 samples, 1.86%)</title><rect x="16.3763%" y="149" width="1.8627%" height="15" fill="rgb(228,23,34)"/><text x="16.6263%" y="159.50">u..</text></g><g><title>mir_built (26,610,976 samples, 1.69%)</title><rect x="16.5477%" y="133" width="1.6913%" height="15" fill="rgb(218,30,26)"/><text x="16.7977%" y="143.50"></text></g><g><title>mir_promoted (36,579,110 samples, 2.32%)</title><rect x="15.9330%" y="181" width="2.3249%" height="15" fill="rgb(220,122,19)"/><text x="16.1830%" y="191.50">m..</text></g><g><title>type_op_normalize_fn_sig (4,231,738 samples, 0.27%)</title><rect x="18.3218%" y="181" width="0.2690%" height="15" fill="rgb(250,228,42)"/><text x="18.5718%" y="191.50"></text></g><g><title>normalize_projection_ty (2,743,232 samples, 0.17%)</title><rect x="18.4164%" y="165" width="0.1744%" height="15" fill="rgb(240,193,28)"/><text x="18.6664%" y="175.50"></text></g><g><title>type_op_normalize_predicate (2,552,595 samples, 0.16%)</title><rect x="18.5908%" y="181" width="0.1622%" height="15" fill="rgb(216,20,37)"/><text x="18.8408%" y="191.50"></text></g><g><title>type_op_prove_predicate (13,038,378 samples, 0.83%)</title><rect x="18.7691%" y="181" width="0.8287%" height="15" fill="rgb(206,188,39)"/><text x="19.0191%" y="191.50"></text></g><g><title>MIR_borrow_checking (124,480,650 samples, 7.91%)</title><rect x="11.6872%" y="213" width="7.9117%" height="15" fill="rgb(217,207,13)"/><text x="11.9372%" y="223.50">MIR_borrow_..</text></g><g><title>mir_borrowck (124,169,857 samples, 7.89%)</title><rect x="11.7070%" y="197" width="7.8919%" height="15" fill="rgb(231,73,38)"/><text x="11.9570%" y="207.50">mir_borrowck</text></g><g><title>misc_checking_1 (3,037,221 samples, 0.19%)</title><rect x="19.6425%" y="213" width="0.1930%" height="15" fill="rgb(225,20,46)"/><text x="19.8925%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (1,866,879 samples, 0.12%)</title><rect x="19.8357%" y="197" width="0.1187%" height="15" fill="rgb(210,31,41)"/><text x="20.0857%" y="207.50"></text></g><g><title>misc_checking_2 (4,954,870 samples, 0.31%)</title><rect x="19.8356%" y="213" width="0.3149%" height="15" fill="rgb(221,200,47)"/><text x="20.0856%" y="223.50"></text></g><g><title>match_checking (3,086,091 samples, 0.20%)</title><rect x="19.9543%" y="197" width="0.1961%" height="15" fill="rgb(226,26,5)"/><text x="20.2043%" y="207.50"></text></g><g><title>check_match (2,998,401 samples, 0.19%)</title><rect x="19.9599%" y="181" width="0.1906%" height="15" fill="rgb(249,33,26)"/><text x="20.2099%" y="191.50"></text></g><g><title>crate_lints (3,612,946 samples, 0.23%)</title><rect x="20.2814%" y="181" width="0.2296%" height="15" fill="rgb(235,183,28)"/><text x="20.5314%" y="191.50"></text></g><g><title>lint_checking (5,712,937 samples, 0.36%)</title><rect x="20.2813%" y="197" width="0.3631%" height="15" fill="rgb(221,5,38)"/><text x="20.5313%" y="207.50"></text></g><g><title>module_lints (2,098,511 samples, 0.13%)</title><rect x="20.5110%" y="181" width="0.1334%" height="15" fill="rgb(247,18,42)"/><text x="20.7610%" y="191.50"></text></g><g><title>lint_mod (2,090,091 samples, 0.13%)</title><rect x="20.5115%" y="165" width="0.1328%" height="15" fill="rgb(241,131,45)"/><text x="20.7615%" y="175.50"></text></g><g><title>privacy_checking_modules (3,676,497 samples, 0.23%)</title><rect x="20.6977%" y="197" width="0.2337%" height="15" fill="rgb(249,31,29)"/><text x="20.9477%" y="207.50"></text></g><g><title>check_mod_privacy (3,670,257 samples, 0.23%)</title><rect x="20.6981%" y="181" width="0.2333%" height="15" fill="rgb(225,111,53)"/><text x="20.9481%" y="191.50"></text></g><g><title>misc_checking_3 (12,327,194 samples, 0.78%)</title><rect x="20.1505%" y="213" width="0.7835%" height="15" fill="rgb(238,160,17)"/><text x="20.4005%" y="223.50"></text></g><g><title>impl_parent (3,034,790 samples, 0.19%)</title><rect x="21.2796%" y="149" width="0.1929%" height="15" fill="rgb(214,148,48)"/><text x="21.5296%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,647,309 samples, 0.10%)</title><rect x="21.3678%" y="133" width="0.1047%" height="15" fill="rgb(232,36,49)"/><text x="21.6178%" y="143.50"></text></g><g><title>impl_trait_ref (5,953,360 samples, 0.38%)</title><rect x="21.4725%" y="149" width="0.3784%" height="15" fill="rgb(209,103,24)"/><text x="21.7225%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,535,888 samples, 0.29%)</title><rect x="21.5626%" y="133" width="0.2883%" height="15" fill="rgb(229,88,8)"/><text x="21.8126%" y="143.50"></text></g><g><title>coherent_trait (15,358,835 samples, 0.98%)</title><rect x="20.9455%" y="181" width="0.9762%" height="15" fill="rgb(213,181,19)"/><text x="21.1955%" y="191.50"></text></g><g><title>specialization_graph_of (14,845,250 samples, 0.94%)</title><rect x="20.9782%" y="165" width="0.9435%" height="15" fill="rgb(254,191,54)"/><text x="21.2282%" y="175.50"></text></g><g><title>coherence_checking (15,468,226 samples, 0.98%)</title><rect x="20.9439%" y="197" width="0.9831%" height="15" fill="rgb(241,83,37)"/><text x="21.1939%" y="207.50"></text></g><g><title>evaluate_obligation (2,524,062 samples, 0.16%)</title><rect x="25.7730%" y="149" width="0.1604%" height="15" fill="rgb(233,36,39)"/><text x="26.0230%" y="159.50"></text></g><g><title>evaluate_obligation (8,135,005 samples, 0.52%)</title><rect x="30.1541%" y="133" width="0.5170%" height="15" fill="rgb(226,3,54)"/><text x="30.4041%" y="143.50"></text></g><g><title>method_autoderef_steps (1,652,227 samples, 0.11%)</title><rect x="30.8304%" y="133" width="0.1050%" height="15" fill="rgb(245,192,40)"/><text x="31.0804%" y="143.50"></text></g><g><title>typeck (77,518,718 samples, 4.93%)</title><rect x="26.0623%" y="149" width="4.9269%" height="15" fill="rgb(238,167,29)"/><text x="26.3123%" y="159.50">typeck</text></g><g><title>item_bodies_checking (142,619,142 samples, 9.06%)</title><rect x="21.9307%" y="197" width="9.0645%" height="15" fill="rgb(232,182,51)"/><text x="22.1807%" y="207.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (142,615,362 samples, 9.06%)</title><rect x="21.9309%" y="181" width="9.0643%" height="15" fill="rgb(231,60,39)"/><text x="22.1809%" y="191.50">typeck_item_b..</text></g><g><title>typeck (142,417,321 samples, 9.05%)</title><rect x="21.9435%" y="165" width="9.0517%" height="15" fill="rgb(208,69,12)"/><text x="22.1935%" y="175.50">typeck</text></g><g><title>evaluate_obligation (2,780,658 samples, 0.18%)</title><rect x="31.9531%" y="53" width="0.1767%" height="15" fill="rgb(235,93,37)"/><text x="32.2031%" y="63.50"></text></g><g><title>mir_built (11,318,523 samples, 0.72%)</title><rect x="31.4794%" y="85" width="0.7194%" height="15" fill="rgb(213,116,39)"/><text x="31.7294%" y="95.50"></text></g><g><title>typeck (9,335,014 samples, 0.59%)</title><rect x="31.6055%" y="69" width="0.5933%" height="15" fill="rgb(222,207,29)"/><text x="31.8555%" y="79.50"></text></g><g><title>mir_const (12,167,472 samples, 0.77%)</title><rect x="31.4571%" y="117" width="0.7733%" height="15" fill="rgb(206,96,30)"/><text x="31.7071%" y="127.50"></text></g><g><title>unsafety_check_result (11,970,570 samples, 0.76%)</title><rect x="31.4696%" y="101" width="0.7608%" height="15" fill="rgb(218,138,4)"/><text x="31.7196%" y="111.50"></text></g><g><title>mir_promoted (12,255,113 samples, 0.78%)</title><rect x="31.4520%" y="133" width="0.7789%" height="15" fill="rgb(250,191,14)"/><text x="31.7020%" y="143.50"></text></g><g><title>type_of (18,233,512 samples, 1.16%)</title><rect x="31.2167%" y="165" width="1.1589%" height="15" fill="rgb(239,60,40)"/><text x="31.4667%" y="175.50"></text></g><g><title>mir_borrowck (18,185,022 samples, 1.16%)</title><rect x="31.2198%" y="149" width="1.1558%" height="15" fill="rgb(206,27,48)"/><text x="31.4698%" y="159.50"></text></g><g><title>item_types_checking (21,785,449 samples, 1.38%)</title><rect x="30.9952%" y="197" width="1.3846%" height="15" fill="rgb(225,35,8)"/><text x="31.2452%" y="207.50"></text></g><g><title>check_mod_item_types (21,773,599 samples, 1.38%)</title><rect x="30.9960%" y="181" width="1.3839%" height="15" fill="rgb(250,213,24)"/><text x="31.2460%" y="191.50"></text></g><g><title>predicates_of (2,535,656 samples, 0.16%)</title><rect x="32.5508%" y="165" width="0.1612%" height="15" fill="rgb(247,123,22)"/><text x="32.8008%" y="175.50"></text></g><g><title>predicates_defined_on (2,408,755 samples, 0.15%)</title><rect x="32.5589%" y="149" width="0.1531%" height="15" fill="rgb(231,138,38)"/><text x="32.8089%" y="159.50"></text></g><g><title>type_collecting (5,441,654 samples, 0.35%)</title><rect x="32.3801%" y="197" width="0.3459%" height="15" fill="rgb(231,145,46)"/><text x="32.6301%" y="207.50"></text></g><g><title>collect_mod_item_types (5,425,264 samples, 0.34%)</title><rect x="32.3811%" y="181" width="0.3448%" height="15" fill="rgb(251,118,11)"/><text x="32.6311%" y="191.50"></text></g><g><title>check_impl_item_well_formed (9,043,844 samples, 0.57%)</title><rect x="32.7581%" y="181" width="0.5748%" height="15" fill="rgb(217,147,25)"/><text x="33.0081%" y="191.50"></text></g><g><title>check_item_well_formed (4,775,495 samples, 0.30%)</title><rect x="33.3329%" y="181" width="0.3035%" height="15" fill="rgb(247,81,37)"/><text x="33.5829%" y="191.50"></text></g><g><title>analysis (346,870,033 samples, 22.05%)</title><rect x="11.6319%" y="229" width="22.0462%" height="15" fill="rgb(209,12,38)"/><text x="11.8819%" y="239.50">analysis</text></g><g><title>type_check_crate (200,512,693 samples, 12.74%)</title><rect x="20.9340%" y="213" width="12.7441%" height="15" fill="rgb(227,1,9)"/><text x="21.1840%" y="223.50">type_check_crate</text></g><g><title>wf_checking (14,965,800 samples, 0.95%)</title><rect x="32.7269%" y="197" width="0.9512%" height="15" fill="rgb(248,47,43)"/><text x="32.9769%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (3,974,253 samples, 0.25%)</title><rect x="42.3351%" y="197" width="0.2526%" height="15" fill="rgb(221,10,30)"/><text x="42.5851%" y="207.50"></text></g><g><title>const_caller_location (2,615,718 samples, 0.17%)</title><rect x="42.5877%" y="197" width="0.1662%" height="15" fill="rgb(210,229,1)"/><text x="42.8377%" y="207.50"></text></g><g><title>layout_of (2,667,705 samples, 0.17%)</title><rect x="43.2403%" y="181" width="0.1696%" height="15" fill="rgb(222,148,37)"/><text x="43.4903%" y="191.50"></text></g><g><title>predicates_of (1,837,535 samples, 0.12%)</title><rect x="43.7455%" y="165" width="0.1168%" height="15" fill="rgb(234,67,33)"/><text x="43.9955%" y="175.50"></text></g><g><title>param_env (7,131,205 samples, 0.45%)</title><rect x="43.4098%" y="181" width="0.4532%" height="15" fill="rgb(247,98,35)"/><text x="43.6598%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,744,683 samples, 0.17%)</title><rect x="43.8631%" y="181" width="0.1744%" height="15" fill="rgb(247,138,52)"/><text x="44.1131%" y="191.50"></text></g><g><title>fn_abi_of_instance (20,170,022 samples, 1.28%)</title><rect x="42.7609%" y="197" width="1.2820%" height="15" fill="rgb(213,79,30)"/><text x="43.0109%" y="207.50"></text></g><g><title>layout_of (3,236,478 samples, 0.21%)</title><rect x="44.0944%" y="197" width="0.2057%" height="15" fill="rgb(246,177,23)"/><text x="44.3444%" y="207.50"></text></g><g><title>codegen_module (167,234,969 samples, 10.63%)</title><rect x="33.8342%" y="213" width="10.6290%" height="15" fill="rgb(230,62,27)"/><text x="34.0842%" y="223.50">codegen_module</text></g><g><title>codegen_crate (169,770,065 samples, 10.79%)</title><rect x="33.6786%" y="229" width="10.7902%" height="15" fill="rgb(216,154,8)"/><text x="33.9286%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (640,699,093 samples, 40.72%)</title><rect x="44.4833%" y="213" width="40.7212%" height="15" fill="rgb(244,35,45)"/><text x="44.7333%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (621,127,293 samples, 39.48%)</title><rect x="45.7272%" y="197" width="39.4773%" height="15" fill="rgb(251,115,12)"/><text x="45.9772%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (664,237,647 samples, 42.22%)</title><rect x="44.4687%" y="229" width="42.2173%" height="15" fill="rgb(240,54,50)"/><text x="44.7187%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (23,309,874 samples, 1.48%)</title><rect x="85.2045%" y="213" width="1.4815%" height="15" fill="rgb(233,84,52)"/><text x="85.4545%" y="223.50"></text></g><g><title>metadata_register_crate (2,344,883 samples, 0.15%)</title><rect x="89.4369%" y="181" width="0.1490%" height="15" fill="rgb(207,117,47)"/><text x="89.6869%" y="191.50"></text></g><g><title>macro_expand_crate (45,545,518 samples, 2.89%)</title><rect x="86.7464%" y="213" width="2.8948%" height="15" fill="rgb(249,43,39)"/><text x="86.9964%" y="223.50">ma..</text></g><g><title>expand_crate (45,523,228 samples, 2.89%)</title><rect x="86.7478%" y="197" width="2.8933%" height="15" fill="rgb(209,38,44)"/><text x="86.9978%" y="207.50">ex..</text></g><g><title>late_resolve_crate (4,337,004 samples, 0.28%)</title><rect x="89.6831%" y="197" width="0.2756%" height="15" fill="rgb(236,212,23)"/><text x="89.9331%" y="207.50"></text></g><g><title>configure_and_expand (51,813,820 samples, 3.29%)</title><rect x="86.6860%" y="229" width="3.2932%" height="15" fill="rgb(242,79,21)"/><text x="86.9360%" y="239.50">con..</text></g><g><title>resolve_crate (5,226,873 samples, 0.33%)</title><rect x="89.6470%" y="213" width="0.3322%" height="15" fill="rgb(211,96,35)"/><text x="89.8970%" y="223.50"></text></g><g><title>free_global_ctxt (8,099,661 samples, 0.51%)</title><rect x="90.0795%" y="229" width="0.5148%" height="15" fill="rgb(253,215,40)"/><text x="90.3295%" y="239.50"></text></g><g><title>codegen_fn_attrs (1,991,536 samples, 0.13%)</title><rect x="91.2915%" y="149" width="0.1266%" height="15" fill="rgb(211,81,21)"/><text x="91.5415%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,958,420 samples, 0.19%)</title><rect x="92.0005%" y="133" width="0.1880%" height="15" fill="rgb(208,190,38)"/><text x="92.2505%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,844,817 samples, 0.88%)</title><rect x="92.1885%" y="133" width="0.8799%" height="15" fill="rgb(235,213,38)"/><text x="92.4385%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,371,142 samples, 0.15%)</title><rect x="93.0960%" y="117" width="0.1507%" height="15" fill="rgb(237,122,38)"/><text x="93.3460%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,305,002 samples, 0.15%)</title><rect x="93.1002%" y="101" width="0.1465%" height="15" fill="rgb(244,218,35)"/><text x="93.3502%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,200,150 samples, 0.14%)</title><rect x="93.1069%" y="85" width="0.1398%" height="15" fill="rgb(240,68,47)"/><text x="93.3569%" y="95.50"></text></g><g><title>optimized_mir (27,923,349 samples, 1.77%)</title><rect x="91.4731%" y="149" width="1.7747%" height="15" fill="rgb(210,16,53)"/><text x="91.7231%" y="159.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,620,773 samples, 0.17%)</title><rect x="93.0813%" y="133" width="0.1666%" height="15" fill="rgb(235,124,12)"/><text x="93.3313%" y="143.50"></text></g><g><title>evaluate_obligation (3,004,743 samples, 0.19%)</title><rect x="93.9896%" y="117" width="0.1910%" height="15" fill="rgb(224,169,11)"/><text x="94.2396%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (12,828,377 samples, 0.82%)</title><rect x="93.4044%" y="133" width="0.8153%" height="15" fill="rgb(250,166,2)"/><text x="93.6544%" y="143.50"></text></g><g><title>specialization_graph_of (1,851,009 samples, 0.12%)</title><rect x="94.3479%" y="133" width="0.1176%" height="15" fill="rgb(242,216,29)"/><text x="94.5979%" y="143.50"></text></g><g><title>resolve_instance (19,584,339 samples, 1.24%)</title><rect x="93.2479%" y="149" width="1.2447%" height="15" fill="rgb(230,116,27)"/><text x="93.4979%" y="159.50"></text></g><g><title>normalize_projection_ty (3,412,773 samples, 0.22%)</title><rect x="94.5654%" y="133" width="0.2169%" height="15" fill="rgb(228,99,48)"/><text x="94.8154%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,604,012 samples, 0.29%)</title><rect x="94.4926%" y="149" width="0.2926%" height="15" fill="rgb(253,11,6)"/><text x="94.7426%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,345,564 samples, 0.21%)</title><rect x="94.9577%" y="69" width="0.2126%" height="15" fill="rgb(247,143,39)"/><text x="95.2077%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,343,404 samples, 0.21%)</title><rect x="94.9578%" y="53" width="0.2125%" height="15" fill="rgb(236,97,10)"/><text x="95.2078%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,340,324 samples, 0.21%)</title><rect x="94.9580%" y="37" width="0.2123%" height="15" fill="rgb(233,208,19)"/><text x="95.2080%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,026,175 samples, 0.32%)</title><rect x="94.8512%" y="133" width="0.3195%" height="15" fill="rgb(216,164,2)"/><text x="95.1012%" y="143.50"></text></g><g><title>eval_to_const_value_raw (4,998,614 samples, 0.32%)</title><rect x="94.8530%" y="117" width="0.3177%" height="15" fill="rgb(220,129,5)"/><text x="95.1030%" y="127.50"></text></g><g><title>eval_to_allocation_raw (4,942,544 samples, 0.31%)</title><rect x="94.8566%" y="101" width="0.3141%" height="15" fill="rgb(242,17,10)"/><text x="95.1066%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,358,424 samples, 0.21%)</title><rect x="94.9572%" y="85" width="0.2135%" height="15" fill="rgb(242,107,0)"/><text x="95.2072%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,110,741 samples, 0.39%)</title><rect x="94.7852%" y="149" width="0.3884%" height="15" fill="rgb(251,28,31)"/><text x="95.0352%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (69,166,134 samples, 4.40%)</title><rect x="90.8678%" y="165" width="4.3960%" height="15" fill="rgb(233,223,10)"/><text x="91.1178%" y="175.50">monom..</text></g><g><title>monomorphization_collector (69,273,135 samples, 4.40%)</title><rect x="90.8675%" y="181" width="4.4028%" height="15" fill="rgb(215,21,27)"/><text x="91.1175%" y="191.50">monom..</text></g><g><title>assert_symbols_are_distinct (4,035,810 samples, 0.26%)</title><rect x="95.2711%" y="165" width="0.2565%" height="15" fill="rgb(232,23,21)"/><text x="95.5211%" y="175.50"></text></g><g><title>symbol_name (3,636,907 samples, 0.23%)</title><rect x="95.2965%" y="149" width="0.2312%" height="15" fill="rgb(244,5,23)"/><text x="95.5465%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (75,033,684 samples, 4.77%)</title><rect x="90.8638%" y="197" width="4.7690%" height="15" fill="rgb(226,81,46)"/><text x="91.1138%" y="207.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (5,703,207 samples, 0.36%)</title><rect x="95.2703%" y="181" width="0.3625%" height="15" fill="rgb(247,70,30)"/><text x="95.5203%" y="191.50"></text></g><g><title>cgu_partitioning (1,654,737 samples, 0.11%)</title><rect x="95.5276%" y="165" width="0.1052%" height="15" fill="rgb(212,68,19)"/><text x="95.7776%" y="175.50"></text></g><g><title>exported_symbols (75,458,307 samples, 4.80%)</title><rect x="90.8534%" y="213" width="4.7959%" height="15" fill="rgb(240,187,13)"/><text x="91.1034%" y="223.50">export..</text></g><g><title>layout_of (2,531,634 samples, 0.16%)</title><rect x="96.0470%" y="197" width="0.1609%" height="15" fill="rgb(223,113,26)"/><text x="96.2970%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,120,562 samples, 0.64%)</title><rect x="96.2079%" y="197" width="0.6432%" height="15" fill="rgb(206,192,2)"/><text x="96.4579%" y="207.50"></text></g><g><title>optimized_mir (18,698,668 samples, 1.19%)</title><rect x="95.6669%" y="213" width="1.1884%" height="15" fill="rgb(241,108,4)"/><text x="95.9169%" y="223.50"></text></g><g><title>generate_crate_metadata (98,844,983 samples, 6.28%)</title><rect x="90.5943%" y="229" width="6.2823%" height="15" fill="rgb(247,173,49)"/><text x="90.8443%" y="239.50">generate..</text></g><g><title>hir_lowering (9,383,104 samples, 0.60%)</title><rect x="96.8767%" y="229" width="0.5964%" height="15" fill="rgb(224,114,35)"/><text x="97.1267%" y="239.50"></text></g><g><title>finish_ongoing_codegen (32,743,939 samples, 2.08%)</title><rect x="97.4742%" y="213" width="2.0811%" height="15" fill="rgb(245,159,27)"/><text x="97.7242%" y="223.50">f..</text></g><g><title>link_crate (3,615,536 samples, 0.23%)</title><rect x="99.5554%" y="213" width="0.2298%" height="15" fill="rgb(245,172,44)"/><text x="99.8054%" y="223.50"></text></g><g><title>link_binary (3,535,575 samples, 0.22%)</title><rect x="99.5605%" y="197" width="0.2247%" height="15" fill="rgb(236,23,11)"/><text x="99.8105%" y="207.50"></text></g><g><title>link_rlib (2,771,898 samples, 0.18%)</title><rect x="99.6090%" y="181" width="0.1762%" height="15" fill="rgb(205,117,38)"/><text x="99.8590%" y="191.50"></text></g><g><title>link (36,388,686 samples, 2.31%)</title><rect x="97.4730%" y="229" width="2.3128%" height="15" fill="rgb(237,72,25)"/><text x="97.7230%" y="239.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,319,153 samples, 0.15%)</title><rect x="99.8137%" y="229" width="0.1474%" height="15" fill="rgb(244,70,9)"/><text x="100.0637%" y="239.50"></text></g><g><title>all (1,573,378,525 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (1,573,378,525 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>