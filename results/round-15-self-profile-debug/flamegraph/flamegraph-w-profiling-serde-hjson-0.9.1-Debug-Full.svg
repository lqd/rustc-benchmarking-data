<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (291,243,986 samples, 11.68%)</title><rect x="0.0647%" y="181" width="11.6821%" height="15" fill="rgb(227,0,7)"/><text x="0.3147%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (4,106,444 samples, 0.16%)</title><rect x="16.8161%" y="53" width="0.1647%" height="15" fill="rgb(217,0,24)"/><text x="17.0661%" y="63.50"></text></g><g><title>evaluate_obligation (3,375,226 samples, 0.14%)</title><rect x="16.8454%" y="37" width="0.1354%" height="15" fill="rgb(221,193,54)"/><text x="17.0954%" y="47.50"></text></g><g><title>needs_drop_raw (5,591,651 samples, 0.22%)</title><rect x="16.7588%" y="69" width="0.2243%" height="15" fill="rgb(248,212,6)"/><text x="17.0088%" y="79.50"></text></g><g><title>thir_body (7,809,968 samples, 0.31%)</title><rect x="17.0698%" y="69" width="0.3133%" height="15" fill="rgb(208,68,35)"/><text x="17.3198%" y="79.50"></text></g><g><title>mir_const (49,214,786 samples, 1.97%)</title><rect x="15.4142%" y="117" width="1.9741%" height="15" fill="rgb(232,128,0)"/><text x="15.6642%" y="127.50">m..</text></g><g><title>unsafety_check_result (41,835,318 samples, 1.68%)</title><rect x="15.7102%" y="101" width="1.6781%" height="15" fill="rgb(207,160,47)"/><text x="15.9602%" y="111.50"></text></g><g><title>mir_built (37,450,471 samples, 1.50%)</title><rect x="15.8861%" y="85" width="1.5022%" height="15" fill="rgb(228,23,34)"/><text x="16.1361%" y="95.50"></text></g><g><title>mir_promoted (56,738,563 samples, 2.28%)</title><rect x="15.1662%" y="133" width="2.2758%" height="15" fill="rgb(218,30,26)"/><text x="15.4162%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (3,315,865 samples, 0.13%)</title><rect x="17.5141%" y="133" width="0.1330%" height="15" fill="rgb(220,122,19)"/><text x="17.7641%" y="143.50"></text></g><g><title>type_op_prove_predicate (10,200,670 samples, 0.41%)</title><rect x="17.6685%" y="133" width="0.4092%" height="15" fill="rgb(250,228,42)"/><text x="17.9185%" y="143.50"></text></g><g><title>MIR_borrow_checking (156,255,180 samples, 6.27%)</title><rect x="11.8108%" y="165" width="6.2675%" height="15" fill="rgb(240,193,28)"/><text x="12.0608%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (155,268,900 samples, 6.23%)</title><rect x="11.8503%" y="149" width="6.2280%" height="15" fill="rgb(216,20,37)"/><text x="12.1003%" y="159.50">mir_borr..</text></g><g><title>check_mod_attrs (2,985,662 samples, 0.12%)</title><rect x="18.1428%" y="149" width="0.1198%" height="15" fill="rgb(206,188,39)"/><text x="18.3928%" y="159.50"></text></g><g><title>misc_checking_1 (6,583,750 samples, 0.26%)</title><rect x="18.1414%" y="165" width="0.2641%" height="15" fill="rgb(217,207,13)"/><text x="18.3914%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,335,045 samples, 0.13%)</title><rect x="18.4056%" y="149" width="0.1338%" height="15" fill="rgb(231,73,38)"/><text x="18.6556%" y="159.50"></text></g><g><title>check_mod_liveness (2,815,899 samples, 0.11%)</title><rect x="18.4264%" y="133" width="0.1129%" height="15" fill="rgb(225,20,46)"/><text x="18.6764%" y="143.50"></text></g><g><title>misc_checking_2 (8,231,257 samples, 0.33%)</title><rect x="18.4055%" y="165" width="0.3302%" height="15" fill="rgb(210,31,41)"/><text x="18.6555%" y="175.50"></text></g><g><title>match_checking (4,893,792 samples, 0.20%)</title><rect x="18.5393%" y="149" width="0.1963%" height="15" fill="rgb(221,200,47)"/><text x="18.7893%" y="159.50"></text></g><g><title>check_match (4,369,926 samples, 0.18%)</title><rect x="18.5603%" y="133" width="0.1753%" height="15" fill="rgb(226,26,5)"/><text x="18.8103%" y="143.50"></text></g><g><title>crate_lints (6,354,088 samples, 0.25%)</title><rect x="18.8567%" y="133" width="0.2549%" height="15" fill="rgb(249,33,26)"/><text x="19.1067%" y="143.50"></text></g><g><title>lint_checking (9,384,370 samples, 0.38%)</title><rect x="18.8566%" y="149" width="0.3764%" height="15" fill="rgb(235,183,28)"/><text x="19.1066%" y="159.50"></text></g><g><title>module_lints (3,026,552 samples, 0.12%)</title><rect x="19.1116%" y="133" width="0.1214%" height="15" fill="rgb(221,5,38)"/><text x="19.3616%" y="143.50"></text></g><g><title>lint_mod (3,016,232 samples, 0.12%)</title><rect x="19.1120%" y="117" width="0.1210%" height="15" fill="rgb(247,18,42)"/><text x="19.3620%" y="127.50"></text></g><g><title>privacy_checking_modules (6,641,719 samples, 0.27%)</title><rect x="19.2934%" y="149" width="0.2664%" height="15" fill="rgb(241,131,45)"/><text x="19.5434%" y="159.50"></text></g><g><title>check_mod_privacy (6,634,278 samples, 0.27%)</title><rect x="19.2937%" y="133" width="0.2661%" height="15" fill="rgb(249,31,29)"/><text x="19.5437%" y="143.50"></text></g><g><title>misc_checking_3 (20,583,037 samples, 0.83%)</title><rect x="18.7356%" y="165" width="0.8256%" height="15" fill="rgb(225,111,53)"/><text x="18.9856%" y="175.50"></text></g><g><title>impl_parent (3,254,073 samples, 0.13%)</title><rect x="19.7620%" y="101" width="0.1305%" height="15" fill="rgb(238,160,17)"/><text x="20.0120%" y="111.50"></text></g><g><title>impl_trait_ref (7,210,348 samples, 0.29%)</title><rect x="19.8925%" y="101" width="0.2892%" height="15" fill="rgb(214,148,48)"/><text x="20.1425%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,721,225 samples, 0.23%)</title><rect x="19.9522%" y="85" width="0.2295%" height="15" fill="rgb(232,36,49)"/><text x="20.2022%" y="95.50"></text></g><g><title>coherent_trait (16,463,904 samples, 0.66%)</title><rect x="19.5768%" y="133" width="0.6604%" height="15" fill="rgb(209,103,24)"/><text x="19.8268%" y="143.50"></text></g><g><title>specialization_graph_of (16,428,414 samples, 0.66%)</title><rect x="19.5782%" y="117" width="0.6590%" height="15" fill="rgb(229,88,8)"/><text x="19.8282%" y="127.50"></text></g><g><title>coherence_checking (16,698,006 samples, 0.67%)</title><rect x="19.5754%" y="149" width="0.6698%" height="15" fill="rgb(213,181,19)"/><text x="19.8254%" y="159.50"></text></g><g><title>evaluate_obligation (13,245,792 samples, 0.53%)</title><rect x="26.3224%" y="101" width="0.5313%" height="15" fill="rgb(254,191,54)"/><text x="26.5724%" y="111.50"></text></g><g><title>typeck (13,633,554 samples, 0.55%)</title><rect x="27.0807%" y="101" width="0.5469%" height="15" fill="rgb(241,83,37)"/><text x="27.3307%" y="111.50"></text></g><g><title>item_bodies_checking (184,205,816 samples, 7.39%)</title><rect x="20.2512%" y="149" width="7.3887%" height="15" fill="rgb(233,36,39)"/><text x="20.5012%" y="159.50">item_bodie..</text></g><g><title>typeck_item_bodies (184,202,036 samples, 7.39%)</title><rect x="20.2514%" y="133" width="7.3885%" height="15" fill="rgb(226,3,54)"/><text x="20.5014%" y="143.50">typeck_ite..</text></g><g><title>typeck (183,462,173 samples, 7.36%)</title><rect x="20.2811%" y="117" width="7.3588%" height="15" fill="rgb(245,192,40)"/><text x="20.5311%" y="127.50">typeck</text></g><g><title>dropck_outlives (2,527,136 samples, 0.10%)</title><rect x="28.3479%" y="101" width="0.1014%" height="15" fill="rgb(238,167,29)"/><text x="28.5979%" y="111.50"></text></g><g><title>item_types_checking (20,377,515 samples, 0.82%)</title><rect x="27.6399%" y="149" width="0.8174%" height="15" fill="rgb(232,182,51)"/><text x="27.8899%" y="159.50"></text></g><g><title>check_mod_item_types (20,365,734 samples, 0.82%)</title><rect x="27.6404%" y="133" width="0.8169%" height="15" fill="rgb(231,60,39)"/><text x="27.8904%" y="143.50"></text></g><g><title>typeck (3,784,551 samples, 0.15%)</title><rect x="28.3055%" y="117" width="0.1518%" height="15" fill="rgb(208,69,12)"/><text x="28.5555%" y="127.50"></text></g><g><title>fn_sig (3,140,734 samples, 0.13%)</title><rect x="28.5166%" y="117" width="0.1260%" height="15" fill="rgb(235,93,37)"/><text x="28.7666%" y="127.50"></text></g><g><title>generics_of (2,536,569 samples, 0.10%)</title><rect x="28.6426%" y="117" width="0.1017%" height="15" fill="rgb(213,116,39)"/><text x="28.8926%" y="127.50"></text></g><g><title>predicates_of (3,867,429 samples, 0.16%)</title><rect x="28.7483%" y="117" width="0.1551%" height="15" fill="rgb(222,207,29)"/><text x="28.9983%" y="127.50"></text></g><g><title>predicates_defined_on (3,565,334 samples, 0.14%)</title><rect x="28.7604%" y="101" width="0.1430%" height="15" fill="rgb(206,96,30)"/><text x="29.0104%" y="111.50"></text></g><g><title>type_collecting (11,552,842 samples, 0.46%)</title><rect x="28.4575%" y="149" width="0.4634%" height="15" fill="rgb(218,138,4)"/><text x="28.7075%" y="159.50"></text></g><g><title>collect_mod_item_types (11,535,082 samples, 0.46%)</title><rect x="28.4582%" y="133" width="0.4627%" height="15" fill="rgb(250,191,14)"/><text x="28.7082%" y="143.50"></text></g><g><title>param_env (3,057,365 samples, 0.12%)</title><rect x="29.9649%" y="117" width="0.1226%" height="15" fill="rgb(239,60,40)"/><text x="30.2149%" y="127.50"></text></g><g><title>region_scope_tree (2,699,183 samples, 0.11%)</title><rect x="30.0911%" y="117" width="0.1083%" height="15" fill="rgb(206,27,48)"/><text x="30.3411%" y="127.50"></text></g><g><title>check_impl_item_well_formed (30,625,580 samples, 1.23%)</title><rect x="28.9734%" y="133" width="1.2284%" height="15" fill="rgb(225,35,8)"/><text x="29.2234%" y="143.50"></text></g><g><title>evaluate_obligation (3,006,910 samples, 0.12%)</title><rect x="30.3430%" y="117" width="0.1206%" height="15" fill="rgb(250,213,24)"/><text x="30.5930%" y="127.50"></text></g><g><title>check_item_well_formed (8,419,711 samples, 0.34%)</title><rect x="30.2018%" y="133" width="0.3377%" height="15" fill="rgb(247,123,22)"/><text x="30.4518%" y="143.50"></text></g><g><title>analysis (468,898,422 samples, 18.81%)</title><rect x="11.7468%" y="181" width="18.8080%" height="15" fill="rgb(231,138,38)"/><text x="11.9968%" y="191.50">analysis</text></g><g><title>type_check_crate (274,078,525 samples, 10.99%)</title><rect x="19.5612%" y="165" width="10.9936%" height="15" fill="rgb(231,145,46)"/><text x="19.8112%" y="175.50">type_check_crate</text></g><g><title>wf_checking (40,697,190 samples, 1.63%)</title><rect x="28.9224%" y="149" width="1.6324%" height="15" fill="rgb(251,118,11)"/><text x="29.1724%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (5,771,635 samples, 0.23%)</title><rect x="39.8213%" y="149" width="0.2315%" height="15" fill="rgb(217,147,25)"/><text x="40.0713%" y="159.50"></text></g><g><title>const_caller_location (2,771,902 samples, 0.11%)</title><rect x="40.0528%" y="149" width="0.1112%" height="15" fill="rgb(247,81,37)"/><text x="40.3028%" y="159.50"></text></g><g><title>codegen_fn_attrs (3,038,031 samples, 0.12%)</title><rect x="40.6383%" y="133" width="0.1219%" height="15" fill="rgb(209,12,38)"/><text x="40.8883%" y="143.50"></text></g><g><title>layout_of (3,369,058 samples, 0.14%)</title><rect x="40.7763%" y="133" width="0.1351%" height="15" fill="rgb(227,1,9)"/><text x="41.0263%" y="143.50"></text></g><g><title>predicates_of (3,310,313 samples, 0.13%)</title><rect x="41.2060%" y="117" width="0.1328%" height="15" fill="rgb(248,47,43)"/><text x="41.4560%" y="127.50"></text></g><g><title>param_env (10,688,352 samples, 0.43%)</title><rect x="40.9114%" y="133" width="0.4287%" height="15" fill="rgb(221,10,30)"/><text x="41.1614%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,751,382 samples, 0.15%)</title><rect x="41.3402%" y="133" width="0.1505%" height="15" fill="rgb(210,229,1)"/><text x="41.5902%" y="143.50"></text></g><g><title>normalize_projection_ty (2,833,536 samples, 0.11%)</title><rect x="41.3770%" y="117" width="0.1137%" height="15" fill="rgb(222,148,37)"/><text x="41.6270%" y="127.50"></text></g><g><title>fn_abi_of_instance (33,063,708 samples, 1.33%)</title><rect x="40.1692%" y="149" width="1.3262%" height="15" fill="rgb(234,67,33)"/><text x="40.4192%" y="159.50"></text></g><g><title>layout_of (6,034,598 samples, 0.24%)</title><rect x="41.5520%" y="149" width="0.2421%" height="15" fill="rgb(247,98,35)"/><text x="41.8020%" y="159.50"></text></g><g><title>symbol_name (3,116,900 samples, 0.13%)</title><rect x="41.7967%" y="149" width="0.1250%" height="15" fill="rgb(247,138,52)"/><text x="42.0467%" y="159.50"></text></g><g><title>codegen_module (281,483,140 samples, 11.29%)</title><rect x="30.6595%" y="165" width="11.2906%" height="15" fill="rgb(213,79,30)"/><text x="30.9095%" y="175.50">codegen_module</text></g><g><title>codegen_crate (284,182,182 samples, 11.40%)</title><rect x="30.5551%" y="181" width="11.3988%" height="15" fill="rgb(246,177,23)"/><text x="30.8051%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,096,902,004 samples, 44.00%)</title><rect x="41.9649%" y="165" width="43.9978%" height="15" fill="rgb(230,62,27)"/><text x="42.2149%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,035,502,947 samples, 41.54%)</title><rect x="44.4277%" y="149" width="41.5350%" height="15" fill="rgb(216,154,8)"/><text x="44.6777%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,148,055,435 samples, 46.05%)</title><rect x="41.9540%" y="181" width="46.0496%" height="15" fill="rgb(244,35,45)"/><text x="42.2040%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (50,879,658 samples, 2.04%)</title><rect x="85.9628%" y="165" width="2.0408%" height="15" fill="rgb(251,115,12)"/><text x="86.2128%" y="175.50">L..</text></g><g><title>macro_expand_crate (67,996,018 samples, 2.73%)</title><rect x="88.0550%" y="165" width="2.7274%" height="15" fill="rgb(240,54,50)"/><text x="88.3050%" y="175.50">ma..</text></g><g><title>expand_crate (67,982,808 samples, 2.73%)</title><rect x="88.0555%" y="149" width="2.7269%" height="15" fill="rgb(233,84,52)"/><text x="88.3055%" y="159.50">ex..</text></g><g><title>late_resolve_crate (10,440,890 samples, 0.42%)</title><rect x="90.8049%" y="149" width="0.4188%" height="15" fill="rgb(207,117,47)"/><text x="91.0549%" y="159.50"></text></g><g><title>configure_and_expand (81,157,328 samples, 3.26%)</title><rect x="88.0036%" y="181" width="3.2553%" height="15" fill="rgb(249,43,39)"/><text x="88.2536%" y="191.50">con..</text></g><g><title>resolve_crate (11,799,355 samples, 0.47%)</title><rect x="90.7856%" y="165" width="0.4733%" height="15" fill="rgb(209,38,44)"/><text x="91.0356%" y="175.50"></text></g><g><title>early_lint_checks (3,273,824 samples, 0.13%)</title><rect x="91.3207%" y="181" width="0.1313%" height="15" fill="rgb(236,212,23)"/><text x="91.5707%" y="191.50"></text></g><g><title>free_global_ctxt (14,052,978 samples, 0.56%)</title><rect x="91.4520%" y="181" width="0.5637%" height="15" fill="rgb(242,79,21)"/><text x="91.7020%" y="191.50"></text></g><g><title>codegen_fn_attrs (4,105,460 samples, 0.16%)</title><rect x="92.8369%" y="101" width="0.1647%" height="15" fill="rgb(211,96,35)"/><text x="93.0869%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,056,629 samples, 0.24%)</title><rect x="93.3283%" y="85" width="0.2429%" height="15" fill="rgb(253,215,40)"/><text x="93.5783%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,766,421 samples, 0.19%)</title><rect x="93.5712%" y="85" width="0.1912%" height="15" fill="rgb(211,81,21)"/><text x="93.8212%" y="95.50"></text></g><g><title>optimized_mir (16,771,867 samples, 0.67%)</title><rect x="93.1124%" y="101" width="0.6727%" height="15" fill="rgb(208,190,38)"/><text x="93.3624%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (10,477,363 samples, 0.42%)</title><rect x="93.9234%" y="85" width="0.4203%" height="15" fill="rgb(235,213,38)"/><text x="94.1734%" y="95.50"></text></g><g><title>specialization_graph_of (4,284,542 samples, 0.17%)</title><rect x="94.4731%" y="85" width="0.1719%" height="15" fill="rgb(237,122,38)"/><text x="94.7231%" y="95.50"></text></g><g><title>resolve_instance (22,347,539 samples, 0.90%)</title><rect x="93.7852%" y="101" width="0.8964%" height="15" fill="rgb(244,218,35)"/><text x="94.0352%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,793,781 samples, 0.11%)</title><rect x="94.7658%" y="85" width="0.1121%" height="15" fill="rgb(240,68,47)"/><text x="95.0158%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,724,291 samples, 0.11%)</title><rect x="94.7685%" y="69" width="0.1093%" height="15" fill="rgb(210,16,53)"/><text x="95.0185%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,602,030 samples, 0.10%)</title><rect x="94.7735%" y="53" width="0.1044%" height="15" fill="rgb(235,124,12)"/><text x="95.0235%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,607,768 samples, 0.14%)</title><rect x="94.7465%" y="101" width="0.1447%" height="15" fill="rgb(224,169,11)"/><text x="94.9965%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (4,194,914 samples, 0.17%)</title><rect x="94.8921%" y="101" width="0.1683%" height="15" fill="rgb(250,166,2)"/><text x="95.1421%" y="111.50"></text></g><g><title>upstream_monomorphizations (4,105,043 samples, 0.16%)</title><rect x="94.8957%" y="85" width="0.1647%" height="15" fill="rgb(242,216,29)"/><text x="95.1457%" y="95.50"></text></g><g><title>exported_symbols (3,485,967 samples, 0.14%)</title><rect x="94.9205%" y="69" width="0.1398%" height="15" fill="rgb(230,116,27)"/><text x="95.1705%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,479,177 samples, 0.14%)</title><rect x="94.9208%" y="53" width="0.1396%" height="15" fill="rgb(228,99,48)"/><text x="95.1708%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (67,316,341 samples, 2.70%)</title><rect x="92.4289%" y="117" width="2.7001%" height="15" fill="rgb(253,11,6)"/><text x="92.6789%" y="127.50">mo..</text></g><g><title>monomorphization_collector (67,516,663 samples, 2.71%)</title><rect x="92.4287%" y="133" width="2.7082%" height="15" fill="rgb(247,143,39)"/><text x="92.6787%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (6,848,912 samples, 0.27%)</title><rect x="95.1375%" y="117" width="0.2747%" height="15" fill="rgb(236,97,10)"/><text x="95.3875%" y="127.50"></text></g><g><title>symbol_name (6,166,515 samples, 0.25%)</title><rect x="95.1648%" y="101" width="0.2473%" height="15" fill="rgb(233,208,19)"/><text x="95.4148%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (77,537,488 samples, 3.11%)</title><rect x="92.4259%" y="149" width="3.1101%" height="15" fill="rgb(216,164,2)"/><text x="92.6759%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (9,951,545 samples, 0.40%)</title><rect x="95.1368%" y="133" width="0.3992%" height="15" fill="rgb(220,129,5)"/><text x="95.3868%" y="143.50"></text></g><g><title>cgu_partitioning (3,087,303 samples, 0.12%)</title><rect x="95.4122%" y="117" width="0.1238%" height="15" fill="rgb(242,17,10)"/><text x="95.6622%" y="127.50"></text></g><g><title>exported_symbols (78,702,411 samples, 3.16%)</title><rect x="92.4136%" y="165" width="3.1568%" height="15" fill="rgb(242,107,0)"/><text x="92.6636%" y="175.50">exp..</text></g><g><title>layout_of (2,877,969 samples, 0.12%)</title><rect x="96.4363%" y="149" width="0.1154%" height="15" fill="rgb(251,28,31)"/><text x="96.6863%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (31,946,914 samples, 1.28%)</title><rect x="96.5517%" y="149" width="1.2814%" height="15" fill="rgb(233,223,10)"/><text x="96.8017%" y="159.50"></text></g><g><title>optimized_mir (56,308,863 samples, 2.26%)</title><rect x="95.5883%" y="165" width="2.2586%" height="15" fill="rgb(215,21,27)"/><text x="95.8383%" y="175.50">o..</text></g><g><title>generate_crate_metadata (146,200,765 samples, 5.86%)</title><rect x="92.0157%" y="181" width="5.8643%" height="15" fill="rgb(232,23,21)"/><text x="92.2657%" y="191.50">generat..</text></g><g><title>hir_lowering (20,007,292 samples, 0.80%)</title><rect x="97.8799%" y="181" width="0.8025%" height="15" fill="rgb(244,5,23)"/><text x="98.1299%" y="191.50"></text></g><g><title>finish_ongoing_codegen (19,505,817 samples, 0.78%)</title><rect x="98.6832%" y="165" width="0.7824%" height="15" fill="rgb(226,81,46)"/><text x="98.9332%" y="175.50"></text></g><g><title>link_crate (5,949,192 samples, 0.24%)</title><rect x="99.4656%" y="165" width="0.2386%" height="15" fill="rgb(247,70,30)"/><text x="99.7156%" y="175.50"></text></g><g><title>link_binary (5,868,242 samples, 0.24%)</title><rect x="99.4688%" y="149" width="0.2354%" height="15" fill="rgb(212,68,19)"/><text x="99.7188%" y="159.50"></text></g><g><title>link_rlib (4,872,601 samples, 0.20%)</title><rect x="99.5088%" y="133" width="0.1954%" height="15" fill="rgb(240,187,13)"/><text x="99.7588%" y="143.50"></text></g><g><title>link (25,484,510 samples, 1.02%)</title><rect x="98.6824%" y="181" width="1.0222%" height="15" fill="rgb(223,113,26)"/><text x="98.9324%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (5,774,811 samples, 0.23%)</title><rect x="99.7294%" y="181" width="0.2316%" height="15" fill="rgb(206,192,2)"/><text x="99.9794%" y="191.50"></text></g><g><title>all (2,493,082,591 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,493,082,591 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>