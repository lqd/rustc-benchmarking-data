<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,189,112 samples, 10.70%)</title><rect x="1.0472%" y="229" width="10.6968%" height="15" fill="rgb(227,0,7)"/><text x="1.2972%" y="239.50">LLVM_passes</text></g><g><title>has_structural_eq_impls (154,402 samples, 0.39%)</title><rect x="20.2404%" y="149" width="0.3943%" height="15" fill="rgb(217,0,24)"/><text x="20.4904%" y="159.50"></text></g><g><title>evaluate_obligation (141,392 samples, 0.36%)</title><rect x="20.2736%" y="133" width="0.3610%" height="15" fill="rgb(221,193,54)"/><text x="20.5236%" y="143.50"></text></g><g><title>trait_impls_of (129,382 samples, 0.33%)</title><rect x="20.3043%" y="117" width="0.3304%" height="15" fill="rgb(248,212,6)"/><text x="20.5543%" y="127.50"></text></g><g><title>is_freeze_raw (83,581 samples, 0.21%)</title><rect x="20.6346%" y="149" width="0.2134%" height="15" fill="rgb(208,68,35)"/><text x="20.8846%" y="159.50"></text></g><g><title>evaluate_obligation (79,551 samples, 0.20%)</title><rect x="20.6449%" y="133" width="0.2031%" height="15" fill="rgb(232,128,0)"/><text x="20.8949%" y="143.50"></text></g><g><title>thir_body (834,268 samples, 2.13%)</title><rect x="22.9458%" y="101" width="2.1303%" height="15" fill="rgb(207,160,47)"/><text x="23.1958%" y="111.50">t..</text></g><g><title>lit_to_const (116,822 samples, 0.30%)</title><rect x="24.7778%" y="85" width="0.2983%" height="15" fill="rgb(228,23,34)"/><text x="25.0278%" y="95.50"></text></g><g><title>mir_promoted (3,076,501 samples, 7.86%)</title><rect x="17.2329%" y="181" width="7.8558%" height="15" fill="rgb(218,30,26)"/><text x="17.4829%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (2,478,035 samples, 6.33%)</title><rect x="18.7611%" y="165" width="6.3276%" height="15" fill="rgb(220,122,19)"/><text x="19.0111%" y="175.50">mir_cons..</text></g><g><title>mir_const (1,660,717 samples, 4.24%)</title><rect x="20.8481%" y="149" width="4.2406%" height="15" fill="rgb(250,228,42)"/><text x="21.0981%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (1,559,746 samples, 3.98%)</title><rect x="21.1059%" y="133" width="3.9828%" height="15" fill="rgb(240,193,28)"/><text x="21.3559%" y="143.50">unsa..</text></g><g><title>mir_built (1,491,175 samples, 3.81%)</title><rect x="21.2810%" y="117" width="3.8077%" height="15" fill="rgb(216,20,37)"/><text x="21.5310%" y="127.50">mir_..</text></g><g><title>MIR_borrow_checking (5,181,062 samples, 13.23%)</title><rect x="12.0494%" y="213" width="13.2297%" height="15" fill="rgb(206,188,39)"/><text x="12.2994%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (5,178,382 samples, 13.22%)</title><rect x="12.0563%" y="197" width="13.2228%" height="15" fill="rgb(217,207,13)"/><text x="12.3063%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (74,590 samples, 0.19%)</title><rect x="25.0887%" y="181" width="0.1905%" height="15" fill="rgb(231,73,38)"/><text x="25.3387%" y="191.50"></text></g><g><title>MIR_effect_checking (113,111 samples, 0.29%)</title><rect x="25.2791%" y="213" width="0.2888%" height="15" fill="rgb(225,20,46)"/><text x="25.5291%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (102,441 samples, 0.26%)</title><rect x="25.3064%" y="197" width="0.2616%" height="15" fill="rgb(210,31,41)"/><text x="25.5564%" y="207.50"></text></g><g><title>hir_module_items (74,931 samples, 0.19%)</title><rect x="25.5680%" y="213" width="0.1913%" height="15" fill="rgb(221,200,47)"/><text x="25.8180%" y="223.50"></text></g><g><title>check_mod_attrs (99,591 samples, 0.25%)</title><rect x="25.8158%" y="197" width="0.2543%" height="15" fill="rgb(226,26,5)"/><text x="26.0658%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (68,321 samples, 0.17%)</title><rect x="26.1531%" y="197" width="0.1745%" height="15" fill="rgb(249,33,26)"/><text x="26.4031%" y="207.50"></text></g><g><title>misc_checking_1 (239,913 samples, 0.61%)</title><rect x="25.7609%" y="213" width="0.6126%" height="15" fill="rgb(235,183,28)"/><text x="26.0109%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (58,661 samples, 0.15%)</title><rect x="26.3762%" y="197" width="0.1498%" height="15" fill="rgb(221,5,38)"/><text x="26.6262%" y="207.50"></text></g><g><title>misc_checking_2 (89,301 samples, 0.23%)</title><rect x="26.3736%" y="213" width="0.2280%" height="15" fill="rgb(247,18,42)"/><text x="26.6236%" y="223.50"></text></g><g><title>death_checking (43,150 samples, 0.11%)</title><rect x="26.6781%" y="197" width="0.1102%" height="15" fill="rgb(241,131,45)"/><text x="26.9281%" y="207.50"></text></g><g><title>layout_of (46,080 samples, 0.12%)</title><rect x="30.3982%" y="69" width="0.1177%" height="15" fill="rgb(249,31,29)"/><text x="30.6482%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,242,082 samples, 3.17%)</title><rect x="27.8148%" y="117" width="3.1716%" height="15" fill="rgb(225,111,53)"/><text x="28.0648%" y="127.50">eva..</text></g><g><title>eval_to_const_value_raw (1,240,022 samples, 3.17%)</title><rect x="27.8201%" y="101" width="3.1664%" height="15" fill="rgb(238,160,17)"/><text x="28.0701%" y="111.50">eva..</text></g><g><title>eval_to_allocation_raw (1,236,142 samples, 3.16%)</title><rect x="27.8300%" y="85" width="3.1565%" height="15" fill="rgb(214,148,48)"/><text x="28.0800%" y="95.50">eva..</text></g><g><title>promoted_mir (184,292 samples, 0.47%)</title><rect x="30.5158%" y="69" width="0.4706%" height="15" fill="rgb(232,36,49)"/><text x="30.7658%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,527,585 samples, 3.90%)</title><rect x="27.0944%" y="165" width="3.9006%" height="15" fill="rgb(209,103,24)"/><text x="27.3444%" y="175.50">eval..</text></g><g><title>eval_to_allocation_raw (1,521,025 samples, 3.88%)</title><rect x="27.1112%" y="149" width="3.8839%" height="15" fill="rgb(229,88,8)"/><text x="27.3612%" y="159.50">eval..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,257,432 samples, 3.21%)</title><rect x="27.7843%" y="133" width="3.2108%" height="15" fill="rgb(213,181,19)"/><text x="28.0343%" y="143.50">try..</text></g><g><title>crate_lints (1,674,217 samples, 4.28%)</title><rect x="26.7931%" y="181" width="4.2751%" height="15" fill="rgb(254,191,54)"/><text x="27.0431%" y="191.50">crate..</text></g><g><title>lint_checking (1,835,199 samples, 4.69%)</title><rect x="26.7883%" y="197" width="4.6861%" height="15" fill="rgb(241,83,37)"/><text x="27.0383%" y="207.50">lint_..</text></g><g><title>module_lints (159,112 samples, 0.41%)</title><rect x="31.0681%" y="181" width="0.4063%" height="15" fill="rgb(233,36,39)"/><text x="31.3181%" y="191.50"></text></g><g><title>lint_mod (157,362 samples, 0.40%)</title><rect x="31.0726%" y="165" width="0.4018%" height="15" fill="rgb(226,3,54)"/><text x="31.3226%" y="175.50"></text></g><g><title>privacy_checking_modules (118,311 samples, 0.30%)</title><rect x="31.5660%" y="197" width="0.3021%" height="15" fill="rgb(245,192,40)"/><text x="31.8160%" y="207.50"></text></g><g><title>check_mod_privacy (117,331 samples, 0.30%)</title><rect x="31.5685%" y="181" width="0.2996%" height="15" fill="rgb(238,167,29)"/><text x="31.8185%" y="191.50"></text></g><g><title>misc_checking_3 (2,085,041 samples, 5.32%)</title><rect x="26.6016%" y="213" width="5.3241%" height="15" fill="rgb(232,182,51)"/><text x="26.8516%" y="223.50">misc_ch..</text></g><g><title>impl_parent (112,270 samples, 0.29%)</title><rect x="41.3566%" y="53" width="0.2867%" height="15" fill="rgb(231,60,39)"/><text x="41.6066%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (88,780 samples, 0.23%)</title><rect x="41.4166%" y="37" width="0.2267%" height="15" fill="rgb(208,69,12)"/><text x="41.6666%" y="47.50"></text></g><g><title>impl_trait_ref (370,513 samples, 0.95%)</title><rect x="41.6433%" y="53" width="0.9461%" height="15" fill="rgb(235,93,37)"/><text x="41.8933%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (348,373 samples, 0.89%)</title><rect x="41.6998%" y="37" width="0.8896%" height="15" fill="rgb(213,116,39)"/><text x="41.9498%" y="47.50"></text></g><g><title>adt_destructor (617,527 samples, 1.58%)</title><rect x="41.1079%" y="117" width="1.5768%" height="15" fill="rgb(222,207,29)"/><text x="41.3579%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (617,067 samples, 1.58%)</title><rect x="41.1091%" y="101" width="1.5757%" height="15" fill="rgb(206,96,30)"/><text x="41.3591%" y="111.50"></text></g><g><title>coherent_trait (612,117 samples, 1.56%)</title><rect x="41.1217%" y="85" width="1.5630%" height="15" fill="rgb(218,138,4)"/><text x="41.3717%" y="95.50"></text></g><g><title>specialization_graph_of (608,716 samples, 1.55%)</title><rect x="41.1304%" y="69" width="1.5543%" height="15" fill="rgb(250,191,14)"/><text x="41.3804%" y="79.50"></text></g><g><title>dropck_outlives (680,657 samples, 1.74%)</title><rect x="40.9492%" y="149" width="1.7380%" height="15" fill="rgb(239,60,40)"/><text x="41.1992%" y="159.50"></text></g><g><title>adt_dtorck_constraint (628,357 samples, 1.60%)</title><rect x="41.0828%" y="133" width="1.6045%" height="15" fill="rgb(206,27,48)"/><text x="41.3328%" y="143.50"></text></g><g><title>item_types_checking (4,270,443 samples, 10.90%)</title><rect x="32.0131%" y="197" width="10.9045%" height="15" fill="rgb(225,35,8)"/><text x="32.2631%" y="207.50">item_types_check..</text></g><g><title>check_mod_item_types (4,268,543 samples, 10.90%)</title><rect x="32.0180%" y="181" width="10.8996%" height="15" fill="rgb(250,213,24)"/><text x="32.2680%" y="191.50">check_mod_item_t..</text></g><g><title>typeck (4,232,643 samples, 10.81%)</title><rect x="32.1097%" y="165" width="10.8079%" height="15" fill="rgb(247,123,22)"/><text x="32.3597%" y="175.50">typeck</text></g><g><title>named_region_map (120,311 samples, 0.31%)</title><rect x="43.3495%" y="149" width="0.3072%" height="15" fill="rgb(231,138,38)"/><text x="43.5995%" y="159.50"></text></g><g><title>resolve_lifetimes (112,111 samples, 0.29%)</title><rect x="43.3704%" y="133" width="0.2863%" height="15" fill="rgb(231,145,46)"/><text x="43.6204%" y="143.50"></text></g><g><title>lint_levels (59,230 samples, 0.15%)</title><rect x="43.5055%" y="117" width="0.1512%" height="15" fill="rgb(251,118,11)"/><text x="43.7555%" y="127.50"></text></g><g><title>type_collecting (295,623 samples, 0.75%)</title><rect x="42.9191%" y="197" width="0.7549%" height="15" fill="rgb(217,147,25)"/><text x="43.1691%" y="207.50"></text></g><g><title>collect_mod_item_types (283,833 samples, 0.72%)</title><rect x="42.9492%" y="181" width="0.7248%" height="15" fill="rgb(247,81,37)"/><text x="43.1992%" y="191.50"></text></g><g><title>type_of (192,332 samples, 0.49%)</title><rect x="43.1829%" y="165" width="0.4911%" height="15" fill="rgb(209,12,38)"/><text x="43.4329%" y="175.50"></text></g><g><title>trait_impls_of (39,660 samples, 0.10%)</title><rect x="44.7421%" y="149" width="0.1013%" height="15" fill="rgb(227,1,9)"/><text x="44.9921%" y="159.50"></text></g><g><title>evaluate_obligation (201,762 samples, 0.52%)</title><rect x="44.3451%" y="165" width="0.5152%" height="15" fill="rgb(248,47,43)"/><text x="44.5951%" y="175.50"></text></g><g><title>get_lang_items (40,171 samples, 0.10%)</title><rect x="44.8603%" y="165" width="0.1026%" height="15" fill="rgb(221,10,30)"/><text x="45.1103%" y="175.50"></text></g><g><title>param_env (136,612 samples, 0.35%)</title><rect x="44.9635%" y="165" width="0.3488%" height="15" fill="rgb(210,229,1)"/><text x="45.2135%" y="175.50"></text></g><g><title>region_scope_tree (86,961 samples, 0.22%)</title><rect x="45.3246%" y="165" width="0.2221%" height="15" fill="rgb(222,148,37)"/><text x="45.5746%" y="175.50"></text></g><g><title>analysis (13,238,304 samples, 33.80%)</title><rect x="11.7440%" y="229" width="33.8036%" height="15" fill="rgb(234,67,33)"/><text x="11.9940%" y="239.50">analysis</text></g><g><title>type_check_crate (5,334,674 samples, 13.62%)</title><rect x="31.9257%" y="213" width="13.6219%" height="15" fill="rgb(247,98,35)"/><text x="32.1757%" y="223.50">type_check_crate</text></g><g><title>wf_checking (733,318 samples, 1.87%)</title><rect x="43.6751%" y="197" width="1.8725%" height="15" fill="rgb(247,138,52)"/><text x="43.9251%" y="207.50">w..</text></g><g><title>check_item_well_formed (712,348 samples, 1.82%)</title><rect x="43.7286%" y="181" width="1.8190%" height="15" fill="rgb(213,79,30)"/><text x="43.9786%" y="191.50">c..</text></g><g><title>codegen_module (822,419 samples, 2.10%)</title><rect x="47.2130%" y="213" width="2.1000%" height="15" fill="rgb(246,177,23)"/><text x="47.4630%" y="223.50">c..</text></g><g><title>codegen_crate (1,546,806 samples, 3.95%)</title><rect x="45.5631%" y="229" width="3.9497%" height="15" fill="rgb(230,62,27)"/><text x="45.8131%" y="239.50">code..</text></g><g><title>LLVM_module_codegen (3,715,267 samples, 9.49%)</title><rect x="49.5406%" y="213" width="9.4868%" height="15" fill="rgb(216,154,8)"/><text x="49.7906%" y="223.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (3,628,227 samples, 9.26%)</title><rect x="49.7629%" y="197" width="9.2646%" height="15" fill="rgb(244,35,45)"/><text x="50.0129%" y="207.50">LLVM_module_c..</text></g><g><title>codegen_module_optimize (3,934,049 samples, 10.05%)</title><rect x="49.5128%" y="229" width="10.0455%" height="15" fill="rgb(251,115,12)"/><text x="49.7628%" y="239.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (207,882 samples, 0.53%)</title><rect x="59.0274%" y="213" width="0.5308%" height="15" fill="rgb(240,54,50)"/><text x="59.2774%" y="223.50"></text></g><g><title>AST_validation (55,300 samples, 0.14%)</title><rect x="59.9012%" y="213" width="0.1412%" height="15" fill="rgb(233,84,52)"/><text x="60.1512%" y="223.50"></text></g><g><title>crate_injection (53,150 samples, 0.14%)</title><rect x="60.0822%" y="213" width="0.1357%" height="15" fill="rgb(207,117,47)"/><text x="60.3322%" y="223.50"></text></g><g><title>macro_expand_crate (5,153,792 samples, 13.16%)</title><rect x="60.2179%" y="213" width="13.1601%" height="15" fill="rgb(249,43,39)"/><text x="60.4679%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (5,139,572 samples, 13.12%)</title><rect x="60.2542%" y="197" width="13.1237%" height="15" fill="rgb(209,38,44)"/><text x="60.5042%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (1,301,933 samples, 3.32%)</title><rect x="70.0535%" y="181" width="3.3244%" height="15" fill="rgb(236,212,23)"/><text x="70.3035%" y="191.50">met..</text></g><g><title>metadata_register_crate (473,614 samples, 1.21%)</title><rect x="72.1686%" y="165" width="1.2094%" height="15" fill="rgb(242,79,21)"/><text x="72.4186%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (126,651 samples, 0.32%)</title><rect x="73.3850%" y="213" width="0.3234%" height="15" fill="rgb(211,96,35)"/><text x="73.6350%" y="223.50"></text></g><g><title>finalize_macro_resolutions (175,201 samples, 0.45%)</title><rect x="73.7383%" y="197" width="0.4474%" height="15" fill="rgb(253,215,40)"/><text x="73.9883%" y="207.50"></text></g><g><title>late_resolve_crate (416,755 samples, 1.06%)</title><rect x="74.1857%" y="197" width="1.0642%" height="15" fill="rgb(211,81,21)"/><text x="74.4357%" y="207.50"></text></g><g><title>metadata_register_crate (258,622 samples, 0.66%)</title><rect x="74.5894%" y="181" width="0.6604%" height="15" fill="rgb(208,190,38)"/><text x="74.8394%" y="191.50"></text></g><g><title>metadata_register_crate (163,651 samples, 0.42%)</title><rect x="74.8320%" y="165" width="0.4179%" height="15" fill="rgb(235,213,38)"/><text x="75.0820%" y="175.50"></text></g><g><title>configure_and_expand (6,179,752 samples, 15.78%)</title><rect x="59.5583%" y="229" width="15.7798%" height="15" fill="rgb(237,122,38)"/><text x="59.8083%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (638,227 samples, 1.63%)</title><rect x="73.7084%" y="213" width="1.6297%" height="15" fill="rgb(244,218,35)"/><text x="73.9584%" y="223.50"></text></g><g><title>drop_ast (56,711 samples, 0.14%)</title><rect x="75.3381%" y="229" width="0.1448%" height="15" fill="rgb(240,68,47)"/><text x="75.5881%" y="239.50"></text></g><g><title>early_lint_checks (159,111 samples, 0.41%)</title><rect x="75.5563%" y="229" width="0.4063%" height="15" fill="rgb(210,16,53)"/><text x="75.8063%" y="239.50"></text></g><g><title>free_global_ctxt (2,415,294 samples, 6.17%)</title><rect x="75.9626%" y="229" width="6.1674%" height="15" fill="rgb(235,124,12)"/><text x="76.2126%" y="239.50">free_glo..</text></g><g><title>crate_hash (67,441 samples, 0.17%)</title><rect x="83.1783%" y="213" width="0.1722%" height="15" fill="rgb(224,169,11)"/><text x="83.4283%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (42,470 samples, 0.11%)</title><rect x="83.5109%" y="165" width="0.1084%" height="15" fill="rgb(250,166,2)"/><text x="83.7609%" y="175.50"></text></g><g><title>monomorphization_collector (55,790 samples, 0.14%)</title><rect x="83.5041%" y="181" width="0.1425%" height="15" fill="rgb(242,216,29)"/><text x="83.7541%" y="191.50"></text></g><g><title>assert_symbols_are_distinct (46,130 samples, 0.12%)</title><rect x="83.6530%" y="165" width="0.1178%" height="15" fill="rgb(230,116,27)"/><text x="83.9030%" y="175.50"></text></g><g><title>symbol_name (41,180 samples, 0.11%)</title><rect x="83.6656%" y="149" width="0.1052%" height="15" fill="rgb(228,99,48)"/><text x="83.9156%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (153,711 samples, 0.39%)</title><rect x="83.4478%" y="197" width="0.3925%" height="15" fill="rgb(253,11,6)"/><text x="83.6978%" y="207.50"></text></g><g><title>partition_and_assert_distinct_symbols (75,901 samples, 0.19%)</title><rect x="83.6465%" y="181" width="0.1938%" height="15" fill="rgb(247,143,39)"/><text x="83.8965%" y="191.50"></text></g><g><title>exported_symbols (197,562 samples, 0.50%)</title><rect x="83.4137%" y="213" width="0.5045%" height="15" fill="rgb(236,97,10)"/><text x="83.6637%" y="223.50"></text></g><g><title>generate_crate_metadata (719,467 samples, 1.84%)</title><rect x="82.1299%" y="229" width="1.8371%" height="15" fill="rgb(233,208,19)"/><text x="82.3799%" y="239.50">g..</text></g><g><title>hir_lowering (569,056 samples, 1.45%)</title><rect x="83.9671%" y="229" width="1.4531%" height="15" fill="rgb(216,164,2)"/><text x="84.2171%" y="239.50"></text></g><g><title>finish_ongoing_codegen (1,399,975 samples, 3.57%)</title><rect x="85.4874%" y="213" width="3.5748%" height="15" fill="rgb(220,129,5)"/><text x="85.7374%" y="223.50">fini..</text></g><g><title>join_worker_thread (104,372 samples, 0.27%)</title><rect x="88.7957%" y="197" width="0.2665%" height="15" fill="rgb(242,17,10)"/><text x="89.0457%" y="207.50"></text></g><g><title>link_binary_remove_temps (43,950 samples, 0.11%)</title><rect x="90.1107%" y="181" width="0.1122%" height="15" fill="rgb(242,107,0)"/><text x="90.3607%" y="191.50"></text></g><g><title>link_crate (1,230,973 samples, 3.14%)</title><rect x="89.0622%" y="213" width="3.1433%" height="15" fill="rgb(251,28,31)"/><text x="89.3122%" y="223.50">lin..</text></g><g><title>link_binary (1,198,232 samples, 3.06%)</title><rect x="89.1458%" y="197" width="3.0597%" height="15" fill="rgb(233,223,10)"/><text x="89.3958%" y="207.50">lin..</text></g><g><title>link_rlib (776,398 samples, 1.98%)</title><rect x="90.2229%" y="181" width="1.9825%" height="15" fill="rgb(215,21,27)"/><text x="90.4729%" y="191.50">l..</text></g><g><title>link (2,667,448 samples, 6.81%)</title><rect x="85.4201%" y="229" width="6.8113%" height="15" fill="rgb(232,23,21)"/><text x="85.6701%" y="239.50">link</text></g><g><title>parse_crate (1,970,889 samples, 5.03%)</title><rect x="92.2314%" y="229" width="5.0326%" height="15" fill="rgb(244,5,23)"/><text x="92.4814%" y="239.50">parse_..</text></g><g><title>prepare_outputs (169,892 samples, 0.43%)</title><rect x="97.2791%" y="229" width="0.4338%" height="15" fill="rgb(226,81,46)"/><text x="97.5291%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (489,845 samples, 1.25%)</title><rect x="97.7130%" y="229" width="1.2508%" height="15" fill="rgb(247,70,30)"/><text x="97.9630%" y="239.50"></text></g><g><title>setup_global_ctxt (81,801 samples, 0.21%)</title><rect x="98.9665%" y="229" width="0.2089%" height="15" fill="rgb(212,68,19)"/><text x="99.2165%" y="239.50"></text></g><g><title>all (39,162,383 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (39,162,383 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (322,923 samples, 0.82%)</title><rect x="99.1754%" y="229" width="0.8246%" height="15" fill="rgb(206,192,2)"/><text x="99.4254%" y="239.50"></text></g></svg></svg>