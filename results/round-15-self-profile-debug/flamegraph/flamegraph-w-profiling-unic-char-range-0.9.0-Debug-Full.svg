<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (20,192,965 samples, 10.75%)</title><rect x="0.3895%" y="149" width="10.7530%" height="15" fill="rgb(227,0,7)"/><text x="0.6395%" y="159.50">LLVM_passes</text></g><g><title>thir_body (402,424 samples, 0.21%)</title><rect x="14.4568%" y="37" width="0.2143%" height="15" fill="rgb(217,0,24)"/><text x="14.7068%" y="47.50"></text></g><g><title>mir_const (2,266,893 samples, 1.21%)</title><rect x="13.4679%" y="85" width="1.2071%" height="15" fill="rgb(221,193,54)"/><text x="13.7179%" y="95.50"></text></g><g><title>unsafety_check_result (1,876,259 samples, 1.00%)</title><rect x="13.6759%" y="69" width="0.9991%" height="15" fill="rgb(248,212,6)"/><text x="13.9259%" y="79.50"></text></g><g><title>mir_built (1,697,308 samples, 0.90%)</title><rect x="13.7712%" y="53" width="0.9038%" height="15" fill="rgb(208,68,35)"/><text x="14.0212%" y="63.50"></text></g><g><title>mir_const (187,992 samples, 0.10%)</title><rect x="14.7764%" y="69" width="0.1001%" height="15" fill="rgb(232,128,0)"/><text x="15.0264%" y="79.50"></text></g><g><title>mir_const_qualif (387,604 samples, 0.21%)</title><rect x="14.6751%" y="85" width="0.2064%" height="15" fill="rgb(207,160,47)"/><text x="14.9251%" y="95.50"></text></g><g><title>mir_promoted (2,997,884 samples, 1.60%)</title><rect x="13.2852%" y="101" width="1.5964%" height="15" fill="rgb(228,23,34)"/><text x="13.5352%" y="111.50"></text></g><g><title>type_op_prove_predicate (245,172 samples, 0.13%)</title><rect x="14.9542%" y="101" width="0.1306%" height="15" fill="rgb(218,30,26)"/><text x="15.2042%" y="111.50"></text></g><g><title>MIR_borrow_checking (7,155,057 samples, 3.81%)</title><rect x="11.2758%" y="133" width="3.8102%" height="15" fill="rgb(220,122,19)"/><text x="11.5258%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (7,092,437 samples, 3.78%)</title><rect x="11.3092%" y="117" width="3.7768%" height="15" fill="rgb(250,228,42)"/><text x="11.5592%" y="127.50">mir_..</text></g><g><title>hir_module_items (194,462 samples, 0.10%)</title><rect x="15.1624%" y="133" width="0.1036%" height="15" fill="rgb(240,193,28)"/><text x="15.4124%" y="143.50"></text></g><g><title>codegen_fn_attrs (345,564 samples, 0.18%)</title><rect x="15.5068%" y="69" width="0.1840%" height="15" fill="rgb(216,20,37)"/><text x="15.7568%" y="79.50"></text></g><g><title>codegen_fn_attrs (537,416 samples, 0.29%)</title><rect x="15.4084%" y="101" width="0.2862%" height="15" fill="rgb(206,188,39)"/><text x="15.6584%" y="111.50"></text></g><g><title>should_inherit_track_caller (473,346 samples, 0.25%)</title><rect x="15.4425%" y="85" width="0.2521%" height="15" fill="rgb(217,207,13)"/><text x="15.6925%" y="95.50"></text></g><g><title>check_mod_attrs (759,238 samples, 0.40%)</title><rect x="15.2903%" y="117" width="0.4043%" height="15" fill="rgb(231,73,38)"/><text x="15.5403%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (462,975 samples, 0.25%)</title><rect x="15.8033%" y="117" width="0.2465%" height="15" fill="rgb(225,20,46)"/><text x="16.0533%" y="127.50"></text></g><g><title>misc_checking_1 (1,534,347 samples, 0.82%)</title><rect x="15.2662%" y="133" width="0.8171%" height="15" fill="rgb(210,31,41)"/><text x="15.5162%" y="143.50"></text></g><g><title>misc_checking_2 (308,753 samples, 0.16%)</title><rect x="16.0832%" y="133" width="0.1644%" height="15" fill="rgb(221,200,47)"/><text x="16.3332%" y="143.50"></text></g><g><title>death_checking (247,833 samples, 0.13%)</title><rect x="16.2973%" y="117" width="0.1320%" height="15" fill="rgb(226,26,5)"/><text x="16.5473%" y="127.50"></text></g><g><title>eval_to_const_value_raw (219,132 samples, 0.12%)</title><rect x="16.5792%" y="85" width="0.1167%" height="15" fill="rgb(249,33,26)"/><text x="16.8292%" y="95.50"></text></g><g><title>eval_to_const_value_raw (214,632 samples, 0.11%)</title><rect x="16.5816%" y="69" width="0.1143%" height="15" fill="rgb(235,183,28)"/><text x="16.8316%" y="79.50"></text></g><g><title>eval_to_allocation_raw (204,652 samples, 0.11%)</title><rect x="16.5869%" y="53" width="0.1090%" height="15" fill="rgb(221,5,38)"/><text x="16.8369%" y="63.50"></text></g><g><title>crate_lints (951,370 samples, 0.51%)</title><rect x="16.4300%" y="101" width="0.5066%" height="15" fill="rgb(247,18,42)"/><text x="16.6800%" y="111.50"></text></g><g><title>type_of (294,394 samples, 0.16%)</title><rect x="16.7798%" y="85" width="0.1568%" height="15" fill="rgb(241,131,45)"/><text x="17.0298%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (216,512 samples, 0.12%)</title><rect x="16.8213%" y="69" width="0.1153%" height="15" fill="rgb(249,31,29)"/><text x="17.0713%" y="79.50"></text></g><g><title>lint_checking (1,084,222 samples, 0.58%)</title><rect x="16.4293%" y="117" width="0.5774%" height="15" fill="rgb(225,111,53)"/><text x="16.6793%" y="127.50"></text></g><g><title>privacy_checking_modules (225,662 samples, 0.12%)</title><rect x="17.0582%" y="117" width="0.1202%" height="15" fill="rgb(238,160,17)"/><text x="17.3082%" y="127.50"></text></g><g><title>check_mod_privacy (222,632 samples, 0.12%)</title><rect x="17.0598%" y="101" width="0.1186%" height="15" fill="rgb(214,148,48)"/><text x="17.3098%" y="111.50"></text></g><g><title>misc_checking_3 (1,760,239 samples, 0.94%)</title><rect x="16.2476%" y="133" width="0.9373%" height="15" fill="rgb(232,36,49)"/><text x="16.4976%" y="143.50"></text></g><g><title>impl_parent (1,624,952 samples, 0.87%)</title><rect x="19.5320%" y="69" width="0.8653%" height="15" fill="rgb(209,103,24)"/><text x="19.7820%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (766,396 samples, 0.41%)</title><rect x="19.9892%" y="53" width="0.4081%" height="15" fill="rgb(229,88,8)"/><text x="20.2392%" y="63.50"></text></g><g><title>impl_trait_ref (3,719,944 samples, 1.98%)</title><rect x="20.3973%" y="69" width="1.9809%" height="15" fill="rgb(213,181,19)"/><text x="20.6473%" y="79.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,845,882 samples, 1.52%)</title><rect x="20.8627%" y="53" width="1.5155%" height="15" fill="rgb(254,191,54)"/><text x="21.1127%" y="63.50"></text></g><g><title>trait_impls_of (682,297 samples, 0.36%)</title><rect x="22.4424%" y="69" width="0.3633%" height="15" fill="rgb(241,83,37)"/><text x="22.6924%" y="79.50"></text></g><g><title>coherent_trait (10,060,038 samples, 5.36%)</title><rect x="17.4500%" y="101" width="5.3571%" height="15" fill="rgb(233,36,39)"/><text x="17.7000%" y="111.50">coheren..</text></g><g><title>specialization_graph_of (9,791,275 samples, 5.21%)</title><rect x="17.5931%" y="85" width="5.2140%" height="15" fill="rgb(226,3,54)"/><text x="17.8431%" y="95.50">specia..</text></g><g><title>coherence_checking (10,162,269 samples, 5.41%)</title><rect x="17.4336%" y="117" width="5.4115%" height="15" fill="rgb(245,192,40)"/><text x="17.6836%" y="127.50">coheren..</text></g><g><title>specializes (269,612 samples, 0.14%)</title><rect x="28.4427%" y="53" width="0.1436%" height="15" fill="rgb(238,167,29)"/><text x="28.6927%" y="63.50"></text></g><g><title>param_env (230,251 samples, 0.12%)</title><rect x="28.4636%" y="37" width="0.1226%" height="15" fill="rgb(232,182,51)"/><text x="28.7136%" y="47.50"></text></g><g><title>trait_impls_of (241,791 samples, 0.13%)</title><rect x="28.5891%" y="53" width="0.1288%" height="15" fill="rgb(231,60,39)"/><text x="28.8391%" y="63.50"></text></g><g><title>evaluate_obligation (1,636,640 samples, 0.87%)</title><rect x="27.8473%" y="69" width="0.8715%" height="15" fill="rgb(208,69,12)"/><text x="28.0973%" y="79.50"></text></g><g><title>item_bodies_checking (11,822,836 samples, 6.30%)</title><rect x="22.8676%" y="117" width="6.2958%" height="15" fill="rgb(235,93,37)"/><text x="23.1176%" y="127.50">item_bod..</text></g><g><title>typeck_item_bodies (11,820,306 samples, 6.29%)</title><rect x="22.8689%" y="101" width="6.2945%" height="15" fill="rgb(213,116,39)"/><text x="23.1189%" y="111.50">typeck_i..</text></g><g><title>typeck (11,752,616 samples, 6.26%)</title><rect x="22.9050%" y="85" width="6.2584%" height="15" fill="rgb(222,207,29)"/><text x="23.1550%" y="95.50">typeck</text></g><g><title>item_types_checking (2,067,602 samples, 1.10%)</title><rect x="29.1634%" y="117" width="1.1010%" height="15" fill="rgb(206,96,30)"/><text x="29.4134%" y="127.50"></text></g><g><title>check_mod_item_types (2,049,752 samples, 1.09%)</title><rect x="29.1729%" y="101" width="1.0915%" height="15" fill="rgb(218,138,4)"/><text x="29.4229%" y="111.50"></text></g><g><title>typeck (637,487 samples, 0.34%)</title><rect x="29.9249%" y="85" width="0.3395%" height="15" fill="rgb(250,191,14)"/><text x="30.1749%" y="95.50"></text></g><g><title>fn_sig (540,617 samples, 0.29%)</title><rect x="30.4248%" y="85" width="0.2879%" height="15" fill="rgb(239,60,40)"/><text x="30.6748%" y="95.50"></text></g><g><title>named_region_map (403,153 samples, 0.21%)</title><rect x="30.7671%" y="69" width="0.2147%" height="15" fill="rgb(206,27,48)"/><text x="31.0171%" y="79.50"></text></g><g><title>resolve_lifetimes (383,103 samples, 0.20%)</title><rect x="30.7778%" y="53" width="0.2040%" height="15" fill="rgb(225,35,8)"/><text x="31.0278%" y="63.50"></text></g><g><title>generics_of (527,185 samples, 0.28%)</title><rect x="30.7127%" y="85" width="0.2807%" height="15" fill="rgb(250,213,24)"/><text x="30.9627%" y="95.50"></text></g><g><title>predicates_of (319,683 samples, 0.17%)</title><rect x="31.0515%" y="85" width="0.1702%" height="15" fill="rgb(247,123,22)"/><text x="31.3015%" y="95.50"></text></g><g><title>predicates_defined_on (262,522 samples, 0.14%)</title><rect x="31.0819%" y="69" width="0.1398%" height="15" fill="rgb(231,138,38)"/><text x="31.3319%" y="79.50"></text></g><g><title>type_collecting (1,983,641 samples, 1.06%)</title><rect x="30.2653%" y="117" width="1.0563%" height="15" fill="rgb(231,145,46)"/><text x="30.5153%" y="127.50"></text></g><g><title>collect_mod_item_types (1,961,211 samples, 1.04%)</title><rect x="30.2772%" y="101" width="1.0444%" height="15" fill="rgb(251,118,11)"/><text x="30.5272%" y="111.50"></text></g><g><title>evaluate_obligation (278,592 samples, 0.15%)</title><rect x="32.1331%" y="85" width="0.1484%" height="15" fill="rgb(217,147,25)"/><text x="32.3831%" y="95.50"></text></g><g><title>param_env (271,375 samples, 0.14%)</title><rect x="32.3476%" y="85" width="0.1445%" height="15" fill="rgb(247,81,37)"/><text x="32.5976%" y="95.50"></text></g><g><title>check_impl_item_well_formed (2,366,415 samples, 1.26%)</title><rect x="31.4167%" y="101" width="1.2601%" height="15" fill="rgb(209,12,38)"/><text x="31.6667%" y="111.50"></text></g><g><title>region_scope_tree (301,954 samples, 0.16%)</title><rect x="32.5160%" y="85" width="0.1608%" height="15" fill="rgb(227,1,9)"/><text x="32.7660%" y="95.50"></text></g><g><title>evaluate_obligation (413,821 samples, 0.22%)</title><rect x="33.1498%" y="85" width="0.2204%" height="15" fill="rgb(248,47,43)"/><text x="33.3998%" y="95.50"></text></g><g><title>param_env (205,693 samples, 0.11%)</title><rect x="33.4016%" y="85" width="0.1095%" height="15" fill="rgb(221,10,30)"/><text x="33.6516%" y="95.50"></text></g><g><title>analysis (42,278,852 samples, 22.51%)</title><rect x="11.1425%" y="149" width="22.5140%" height="15" fill="rgb(210,229,1)"/><text x="11.3925%" y="159.50">analysis</text></g><g><title>type_check_crate (30,931,741 samples, 16.47%)</title><rect x="17.1850%" y="133" width="16.4715%" height="15" fill="rgb(222,148,37)"/><text x="17.4350%" y="143.50">type_check_crate</text></g><g><title>wf_checking (4,382,086 samples, 2.33%)</title><rect x="31.3230%" y="117" width="2.3335%" height="15" fill="rgb(234,67,33)"/><text x="31.5730%" y="127.50">w..</text></g><g><title>check_item_well_formed (1,839,808 samples, 0.98%)</title><rect x="32.6768%" y="101" width="0.9797%" height="15" fill="rgb(247,98,35)"/><text x="32.9268%" y="111.50"></text></g><g><title>codegen_fn_attrs (273,902 samples, 0.15%)</title><rect x="40.2483%" y="101" width="0.1459%" height="15" fill="rgb(247,138,52)"/><text x="40.4983%" y="111.50"></text></g><g><title>param_env (473,504 samples, 0.25%)</title><rect x="40.4779%" y="101" width="0.2521%" height="15" fill="rgb(213,79,30)"/><text x="40.7279%" y="111.50"></text></g><g><title>fn_abi_of_instance (1,393,363 samples, 0.74%)</title><rect x="40.0005%" y="117" width="0.7420%" height="15" fill="rgb(246,177,23)"/><text x="40.2505%" y="127.50"></text></g><g><title>layout_of (301,544 samples, 0.16%)</title><rect x="40.9668%" y="101" width="0.1606%" height="15" fill="rgb(230,62,27)"/><text x="41.2168%" y="111.50"></text></g><g><title>layout_of (728,668 samples, 0.39%)</title><rect x="40.7739%" y="117" width="0.3880%" height="15" fill="rgb(216,154,8)"/><text x="41.0239%" y="127.50"></text></g><g><title>codegen_module (12,960,758 samples, 6.90%)</title><rect x="34.3685%" y="133" width="6.9018%" height="15" fill="rgb(244,35,45)"/><text x="34.6185%" y="143.50">codegen_m..</text></g><g><title>codegen_crate (14,308,133 samples, 7.62%)</title><rect x="33.6603%" y="149" width="7.6193%" height="15" fill="rgb(251,115,12)"/><text x="33.9103%" y="159.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (72,794,058 samples, 38.76%)</title><rect x="41.3525%" y="133" width="38.7638%" height="15" fill="rgb(240,54,50)"/><text x="41.6025%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (68,887,057 samples, 36.68%)</title><rect x="43.4330%" y="117" width="36.6832%" height="15" fill="rgb(233,84,52)"/><text x="43.6830%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (75,921,083 samples, 40.43%)</title><rect x="41.2796%" y="149" width="40.4289%" height="15" fill="rgb(207,117,47)"/><text x="41.5296%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,990,182 samples, 1.59%)</title><rect x="80.1162%" y="133" width="1.5923%" height="15" fill="rgb(249,43,39)"/><text x="80.3662%" y="143.50"></text></g><g><title>metadata_load_macro (385,164 samples, 0.21%)</title><rect x="87.6292%" y="101" width="0.2051%" height="15" fill="rgb(209,38,44)"/><text x="87.8792%" y="111.50"></text></g><g><title>macro_expand_crate (11,462,993 samples, 6.10%)</title><rect x="81.9272%" y="133" width="6.1042%" height="15" fill="rgb(236,212,23)"/><text x="82.1772%" y="143.50">macro_ex..</text></g><g><title>expand_crate (11,450,843 samples, 6.10%)</title><rect x="81.9337%" y="117" width="6.0977%" height="15" fill="rgb(242,79,21)"/><text x="82.1837%" y="127.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (199,624 samples, 0.11%)</title><rect x="87.9251%" y="101" width="0.1063%" height="15" fill="rgb(211,96,35)"/><text x="88.1751%" y="111.50"></text></g><g><title>late_resolve_crate (1,846,500 samples, 0.98%)</title><rect x="88.2067%" y="117" width="0.9833%" height="15" fill="rgb(253,215,40)"/><text x="88.4567%" y="127.50"></text></g><g><title>configure_and_expand (14,150,702 samples, 7.54%)</title><rect x="81.7085%" y="149" width="7.5354%" height="15" fill="rgb(211,81,21)"/><text x="81.9585%" y="159.50">configure_..</text></g><g><title>resolve_crate (2,208,874 samples, 1.18%)</title><rect x="88.0677%" y="133" width="1.1763%" height="15" fill="rgb(208,190,38)"/><text x="88.3177%" y="143.50"></text></g><g><title>early_lint_checks (326,943 samples, 0.17%)</title><rect x="89.3291%" y="149" width="0.1741%" height="15" fill="rgb(235,213,38)"/><text x="89.5791%" y="159.50"></text></g><g><title>free_global_ctxt (2,119,063 samples, 1.13%)</title><rect x="89.5032%" y="149" width="1.1284%" height="15" fill="rgb(237,122,38)"/><text x="89.7532%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (193,022 samples, 0.10%)</title><rect x="91.8060%" y="53" width="0.1028%" height="15" fill="rgb(244,218,35)"/><text x="92.0560%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (748,176 samples, 0.40%)</title><rect x="91.9088%" y="53" width="0.3984%" height="15" fill="rgb(240,68,47)"/><text x="92.1588%" y="63.50"></text></g><g><title>optimized_mir (2,009,131 samples, 1.07%)</title><rect x="91.2653%" y="69" width="1.0699%" height="15" fill="rgb(210,16,53)"/><text x="91.5153%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (337,125 samples, 0.18%)</title><rect x="92.4064%" y="53" width="0.1795%" height="15" fill="rgb(235,124,12)"/><text x="92.6564%" y="63.50"></text></g><g><title>specialization_graph_of (514,594 samples, 0.27%)</title><rect x="92.6600%" y="53" width="0.2740%" height="15" fill="rgb(224,169,11)"/><text x="92.9100%" y="63.50"></text></g><g><title>resolve_instance (1,166,707 samples, 0.62%)</title><rect x="92.3352%" y="69" width="0.6213%" height="15" fill="rgb(250,166,2)"/><text x="92.5852%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (3,981,553 samples, 2.12%)</title><rect x="90.9732%" y="85" width="2.1202%" height="15" fill="rgb(242,216,29)"/><text x="91.2232%" y="95.50">m..</text></g><g><title>monomorphization_collector (4,028,793 samples, 2.15%)</title><rect x="90.9720%" y="101" width="2.1454%" height="15" fill="rgb(230,116,27)"/><text x="91.2220%" y="111.50">m..</text></g><g><title>assert_symbols_are_distinct (302,664 samples, 0.16%)</title><rect x="93.1189%" y="85" width="0.1612%" height="15" fill="rgb(228,99,48)"/><text x="93.3689%" y="95.50"></text></g><g><title>symbol_name (275,283 samples, 0.15%)</title><rect x="93.1335%" y="69" width="0.1466%" height="15" fill="rgb(253,11,6)"/><text x="93.3835%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (4,514,548 samples, 2.40%)</title><rect x="90.9561%" y="117" width="2.4041%" height="15" fill="rgb(247,143,39)"/><text x="91.2061%" y="127.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (455,885 samples, 0.24%)</title><rect x="93.1174%" y="101" width="0.2428%" height="15" fill="rgb(236,97,10)"/><text x="93.3674%" y="111.50"></text></g><g><title>exported_symbols (4,605,029 samples, 2.45%)</title><rect x="90.9446%" y="133" width="2.4522%" height="15" fill="rgb(233,208,19)"/><text x="91.1946%" y="143.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (347,525 samples, 0.19%)</title><rect x="93.6648%" y="117" width="0.1851%" height="15" fill="rgb(216,164,2)"/><text x="93.9148%" y="127.50"></text></g><g><title>optimized_mir (889,230 samples, 0.47%)</title><rect x="93.4101%" y="133" width="0.4735%" height="15" fill="rgb(220,129,5)"/><text x="93.6601%" y="143.50"></text></g><g><title>generate_crate_metadata (6,125,255 samples, 3.26%)</title><rect x="90.6317%" y="149" width="3.2618%" height="15" fill="rgb(242,17,10)"/><text x="90.8817%" y="159.50">gen..</text></g><g><title>hir_lowering (2,399,325 samples, 1.28%)</title><rect x="93.8934%" y="149" width="1.2777%" height="15" fill="rgb(242,107,0)"/><text x="94.1434%" y="159.50"></text></g><g><title>finish_ongoing_codegen (5,893,142 samples, 3.14%)</title><rect x="95.1783%" y="133" width="3.1382%" height="15" fill="rgb(251,28,31)"/><text x="95.4283%" y="143.50">fin..</text></g><g><title>link_binary_remove_temps (218,823 samples, 0.12%)</title><rect x="98.4846%" y="101" width="0.1165%" height="15" fill="rgb(233,223,10)"/><text x="98.7346%" y="111.50"></text></g><g><title>link_crate (1,356,205 samples, 0.72%)</title><rect x="98.3164%" y="133" width="0.7222%" height="15" fill="rgb(215,21,27)"/><text x="98.5664%" y="143.50"></text></g><g><title>link_binary (1,340,475 samples, 0.71%)</title><rect x="98.3248%" y="117" width="0.7138%" height="15" fill="rgb(232,23,21)"/><text x="98.5748%" y="127.50"></text></g><g><title>link_rlib (821,559 samples, 0.44%)</title><rect x="98.6011%" y="101" width="0.4375%" height="15" fill="rgb(244,5,23)"/><text x="98.8511%" y="111.50"></text></g><g><title>link (7,270,897 samples, 3.87%)</title><rect x="95.1711%" y="149" width="3.8718%" height="15" fill="rgb(226,81,46)"/><text x="95.4211%" y="159.50">link</text></g><g><title>parse_crate (341,054 samples, 0.18%)</title><rect x="99.0429%" y="149" width="0.1816%" height="15" fill="rgb(247,70,30)"/><text x="99.2929%" y="159.50"></text></g><g><title>prepare_outputs (297,513 samples, 0.16%)</title><rect x="99.2284%" y="149" width="0.1584%" height="15" fill="rgb(212,68,19)"/><text x="99.4784%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (709,138 samples, 0.38%)</title><rect x="99.3868%" y="149" width="0.3776%" height="15" fill="rgb(240,187,13)"/><text x="99.6368%" y="159.50"></text></g><g><title>all (187,788,958 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (187,788,958 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (346,564 samples, 0.18%)</title><rect x="99.8155%" y="149" width="0.1845%" height="15" fill="rgb(241,108,4)"/><text x="100.0655%" y="159.50"></text></g></svg></svg>