<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (87,410,209 samples, 12.66%)</title><rect x="0.0931%" y="197" width="12.6571%" height="15" fill="rgb(227,0,7)"/><text x="0.3431%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (840,657 samples, 0.12%)</title><rect x="18.0413%" y="85" width="0.1217%" height="15" fill="rgb(217,0,24)"/><text x="18.2913%" y="95.50"></text></g><g><title>resolve_instance (938,738 samples, 0.14%)</title><rect x="18.1670%" y="85" width="0.1359%" height="15" fill="rgb(221,193,54)"/><text x="18.4170%" y="95.50"></text></g><g><title>thir_body (2,787,943 samples, 0.40%)</title><rect x="18.3100%" y="85" width="0.4037%" height="15" fill="rgb(248,212,6)"/><text x="18.5600%" y="95.50"></text></g><g><title>mir_const (14,448,007 samples, 2.09%)</title><rect x="16.6268%" y="133" width="2.0921%" height="15" fill="rgb(208,68,35)"/><text x="16.8768%" y="143.50">m..</text></g><g><title>unsafety_check_result (12,480,628 samples, 1.81%)</title><rect x="16.9117%" y="117" width="1.8072%" height="15" fill="rgb(232,128,0)"/><text x="17.1617%" y="127.50">u..</text></g><g><title>mir_built (11,300,633 samples, 1.64%)</title><rect x="17.0825%" y="101" width="1.6363%" height="15" fill="rgb(207,160,47)"/><text x="17.3325%" y="111.50"></text></g><g><title>mir_promoted (16,405,545 samples, 2.38%)</title><rect x="16.3787%" y="149" width="2.3755%" height="15" fill="rgb(228,23,34)"/><text x="16.6287%" y="159.50">mi..</text></g><g><title>type_op_prove_predicate (1,918,517 samples, 0.28%)</title><rect x="18.8648%" y="149" width="0.2778%" height="15" fill="rgb(218,30,26)"/><text x="19.1148%" y="159.50"></text></g><g><title>MIR_borrow_checking (43,592,418 samples, 6.31%)</title><rect x="12.8315%" y="181" width="6.3122%" height="15" fill="rgb(220,122,19)"/><text x="13.0815%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (43,326,376 samples, 6.27%)</title><rect x="12.8701%" y="165" width="6.2737%" height="15" fill="rgb(250,228,42)"/><text x="13.1201%" y="175.50">mir_borr..</text></g><g><title>check_mod_attrs (953,450 samples, 0.14%)</title><rect x="19.2135%" y="165" width="0.1381%" height="15" fill="rgb(240,193,28)"/><text x="19.4635%" y="175.50"></text></g><g><title>misc_checking_1 (1,868,539 samples, 0.27%)</title><rect x="19.2109%" y="181" width="0.2706%" height="15" fill="rgb(216,20,37)"/><text x="19.4609%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (815,528 samples, 0.12%)</title><rect x="19.4817%" y="165" width="0.1181%" height="15" fill="rgb(206,188,39)"/><text x="19.7317%" y="175.50"></text></g><g><title>misc_checking_2 (2,116,442 samples, 0.31%)</title><rect x="19.4815%" y="181" width="0.3065%" height="15" fill="rgb(217,207,13)"/><text x="19.7315%" y="191.50"></text></g><g><title>match_checking (1,299,534 samples, 0.19%)</title><rect x="19.5998%" y="165" width="0.1882%" height="15" fill="rgb(231,73,38)"/><text x="19.8498%" y="175.50"></text></g><g><title>check_match (1,233,454 samples, 0.18%)</title><rect x="19.6094%" y="149" width="0.1786%" height="15" fill="rgb(225,20,46)"/><text x="19.8594%" y="159.50"></text></g><g><title>death_checking (868,219 samples, 0.13%)</title><rect x="19.8428%" y="165" width="0.1257%" height="15" fill="rgb(210,31,41)"/><text x="20.0928%" y="175.50"></text></g><g><title>crate_lints (1,667,547 samples, 0.24%)</title><rect x="19.9688%" y="149" width="0.2415%" height="15" fill="rgb(221,200,47)"/><text x="20.2188%" y="159.50"></text></g><g><title>lint_checking (2,655,646 samples, 0.38%)</title><rect x="19.9686%" y="165" width="0.3845%" height="15" fill="rgb(226,26,5)"/><text x="20.2186%" y="175.50"></text></g><g><title>module_lints (986,729 samples, 0.14%)</title><rect x="20.2102%" y="149" width="0.1429%" height="15" fill="rgb(249,33,26)"/><text x="20.4602%" y="159.50"></text></g><g><title>lint_mod (981,809 samples, 0.14%)</title><rect x="20.2109%" y="133" width="0.1422%" height="15" fill="rgb(235,183,28)"/><text x="20.4609%" y="143.50"></text></g><g><title>privacy_checking_modules (1,421,885 samples, 0.21%)</title><rect x="20.4221%" y="165" width="0.2059%" height="15" fill="rgb(221,5,38)"/><text x="20.6721%" y="175.50"></text></g><g><title>check_mod_privacy (1,418,945 samples, 0.21%)</title><rect x="20.4225%" y="149" width="0.2055%" height="15" fill="rgb(247,18,42)"/><text x="20.6725%" y="159.50"></text></g><g><title>misc_checking_3 (5,818,359 samples, 0.84%)</title><rect x="19.7880%" y="181" width="0.8425%" height="15" fill="rgb(241,131,45)"/><text x="20.0380%" y="191.50"></text></g><g><title>impl_parent (805,981 samples, 0.12%)</title><rect x="20.8722%" y="117" width="0.1167%" height="15" fill="rgb(249,31,29)"/><text x="21.1222%" y="127.50"></text></g><g><title>impl_trait_ref (1,829,798 samples, 0.26%)</title><rect x="20.9889%" y="117" width="0.2650%" height="15" fill="rgb(225,111,53)"/><text x="21.2389%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,188,812 samples, 0.17%)</title><rect x="21.0817%" y="101" width="0.1721%" height="15" fill="rgb(238,160,17)"/><text x="21.3317%" y="111.50"></text></g><g><title>coherent_trait (4,476,146 samples, 0.65%)</title><rect x="20.6483%" y="149" width="0.6482%" height="15" fill="rgb(214,148,48)"/><text x="20.8983%" y="159.50"></text></g><g><title>specialization_graph_of (4,343,043 samples, 0.63%)</title><rect x="20.6676%" y="133" width="0.6289%" height="15" fill="rgb(232,36,49)"/><text x="20.9176%" y="143.50"></text></g><g><title>coherence_checking (4,562,746 samples, 0.66%)</title><rect x="20.6455%" y="165" width="0.6607%" height="15" fill="rgb(209,103,24)"/><text x="20.8955%" y="175.50"></text></g><g><title>associated_items (727,486 samples, 0.11%)</title><rect x="27.2722%" y="117" width="0.1053%" height="15" fill="rgb(229,88,8)"/><text x="27.5222%" y="127.50"></text></g><g><title>evaluate_obligation (3,487,609 samples, 0.51%)</title><rect x="27.4906%" y="117" width="0.5050%" height="15" fill="rgb(213,181,19)"/><text x="27.7406%" y="127.50"></text></g><g><title>typeck (4,501,595 samples, 0.65%)</title><rect x="28.2607%" y="117" width="0.6518%" height="15" fill="rgb(254,191,54)"/><text x="28.5107%" y="127.50"></text></g><g><title>item_bodies_checking (52,565,788 samples, 7.61%)</title><rect x="21.3139%" y="165" width="7.6116%" height="15" fill="rgb(241,83,37)"/><text x="21.5639%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (52,563,288 samples, 7.61%)</title><rect x="21.3142%" y="149" width="7.6112%" height="15" fill="rgb(233,36,39)"/><text x="21.5642%" y="159.50">typeck_ite..</text></g><g><title>typeck (52,383,986 samples, 7.59%)</title><rect x="21.3402%" y="133" width="7.5853%" height="15" fill="rgb(226,3,54)"/><text x="21.5902%" y="143.50">typeck</text></g><g><title>item_types_checking (1,299,893 samples, 0.19%)</title><rect x="28.9255%" y="165" width="0.1882%" height="15" fill="rgb(245,192,40)"/><text x="29.1755%" y="175.50"></text></g><g><title>check_mod_item_types (1,296,013 samples, 0.19%)</title><rect x="28.9261%" y="149" width="0.1877%" height="15" fill="rgb(238,167,29)"/><text x="29.1761%" y="159.50"></text></g><g><title>mir_borrowck (797,778 samples, 0.12%)</title><rect x="29.3583%" y="53" width="0.1155%" height="15" fill="rgb(232,182,51)"/><text x="29.6083%" y="63.50"></text></g><g><title>mir_for_ctfe (1,203,830 samples, 0.17%)</title><rect x="29.3002%" y="85" width="0.1743%" height="15" fill="rgb(231,60,39)"/><text x="29.5502%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,102,770 samples, 0.16%)</title><rect x="29.3149%" y="69" width="0.1597%" height="15" fill="rgb(208,69,12)"/><text x="29.5649%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,439,002 samples, 0.35%)</title><rect x="29.1970%" y="133" width="0.3532%" height="15" fill="rgb(235,93,37)"/><text x="29.4470%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,421,562 samples, 0.35%)</title><rect x="29.1996%" y="117" width="0.3506%" height="15" fill="rgb(213,116,39)"/><text x="29.4496%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,394,592 samples, 0.35%)</title><rect x="29.2035%" y="101" width="0.3467%" height="15" fill="rgb(222,207,29)"/><text x="29.4535%" y="111.50"></text></g><g><title>named_region_map (728,299 samples, 0.11%)</title><rect x="29.6702%" y="117" width="0.1055%" height="15" fill="rgb(206,96,30)"/><text x="29.9202%" y="127.50"></text></g><g><title>generics_of (960,173 samples, 0.14%)</title><rect x="29.6401%" y="133" width="0.1390%" height="15" fill="rgb(218,138,4)"/><text x="29.8901%" y="143.50"></text></g><g><title>predicates_of (716,242 samples, 0.10%)</title><rect x="29.8231%" y="133" width="0.1037%" height="15" fill="rgb(250,191,14)"/><text x="30.0731%" y="143.50"></text></g><g><title>type_collecting (5,738,717 samples, 0.83%)</title><rect x="29.1139%" y="165" width="0.8310%" height="15" fill="rgb(239,60,40)"/><text x="29.3639%" y="175.50"></text></g><g><title>collect_mod_item_types (5,731,477 samples, 0.83%)</title><rect x="29.1150%" y="149" width="0.8299%" height="15" fill="rgb(206,27,48)"/><text x="29.3650%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,047,919 samples, 0.73%)</title><rect x="29.9959%" y="149" width="0.7309%" height="15" fill="rgb(225,35,8)"/><text x="30.2459%" y="159.50"></text></g><g><title>region_scope_tree (940,650 samples, 0.14%)</title><rect x="30.5907%" y="133" width="0.1362%" height="15" fill="rgb(250,213,24)"/><text x="30.8407%" y="143.50"></text></g><g><title>eval_to_const_value_raw (904,569 samples, 0.13%)</title><rect x="31.0165%" y="69" width="0.1310%" height="15" fill="rgb(247,123,22)"/><text x="31.2665%" y="79.50"></text></g><g><title>eval_to_const_value_raw (902,659 samples, 0.13%)</title><rect x="31.0168%" y="53" width="0.1307%" height="15" fill="rgb(231,138,38)"/><text x="31.2668%" y="63.50"></text></g><g><title>eval_to_allocation_raw (899,839 samples, 0.13%)</title><rect x="31.0172%" y="37" width="0.1303%" height="15" fill="rgb(231,145,46)"/><text x="31.2672%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (918,619 samples, 0.13%)</title><rect x="31.0152%" y="85" width="0.1330%" height="15" fill="rgb(251,118,11)"/><text x="31.2652%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,507,076 samples, 0.22%)</title><rect x="30.9479%" y="133" width="0.2182%" height="15" fill="rgb(217,147,25)"/><text x="31.1979%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,504,696 samples, 0.22%)</title><rect x="30.9482%" y="117" width="0.2179%" height="15" fill="rgb(247,81,37)"/><text x="31.1982%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,501,156 samples, 0.22%)</title><rect x="30.9487%" y="101" width="0.2174%" height="15" fill="rgb(209,12,38)"/><text x="31.1987%" y="111.50"></text></g><g><title>analysis (128,456,552 samples, 18.60%)</title><rect x="12.7502%" y="197" width="18.6007%" height="15" fill="rgb(227,1,9)"/><text x="13.0002%" y="207.50">analysis</text></g><g><title>type_check_crate (74,035,584 samples, 10.72%)</title><rect x="20.6305%" y="181" width="10.7205%" height="15" fill="rgb(248,47,43)"/><text x="20.8805%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,697,308 samples, 1.40%)</title><rect x="29.9468%" y="165" width="1.4042%" height="15" fill="rgb(221,10,30)"/><text x="30.1968%" y="175.50"></text></g><g><title>check_item_well_formed (4,309,827 samples, 0.62%)</title><rect x="30.7269%" y="149" width="0.6241%" height="15" fill="rgb(210,229,1)"/><text x="30.9769%" y="159.50"></text></g><g><title>const_caller_location (1,953,907 samples, 0.28%)</title><rect x="38.3507%" y="165" width="0.2829%" height="15" fill="rgb(222,148,37)"/><text x="38.6007%" y="175.50"></text></g><g><title>codegen_fn_attrs (740,390 samples, 0.11%)</title><rect x="38.9640%" y="149" width="0.1072%" height="15" fill="rgb(234,67,33)"/><text x="39.2140%" y="159.50"></text></g><g><title>predicates_of (872,038 samples, 0.13%)</title><rect x="39.4732%" y="133" width="0.1263%" height="15" fill="rgb(247,98,35)"/><text x="39.7232%" y="143.50"></text></g><g><title>param_env (2,907,158 samples, 0.42%)</title><rect x="39.1813%" y="149" width="0.4210%" height="15" fill="rgb(247,138,52)"/><text x="39.4313%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (815,919 samples, 0.12%)</title><rect x="39.6023%" y="149" width="0.1181%" height="15" fill="rgb(213,79,30)"/><text x="39.8523%" y="159.50"></text></g><g><title>fn_abi_of_instance (7,540,179 samples, 1.09%)</title><rect x="38.6348%" y="165" width="1.0918%" height="15" fill="rgb(246,177,23)"/><text x="38.8848%" y="175.50"></text></g><g><title>layout_of (969,648 samples, 0.14%)</title><rect x="39.7830%" y="165" width="0.1404%" height="15" fill="rgb(230,62,27)"/><text x="40.0330%" y="175.50"></text></g><g><title>symbol_name (722,527 samples, 0.10%)</title><rect x="39.9234%" y="165" width="0.1046%" height="15" fill="rgb(216,154,8)"/><text x="40.1734%" y="175.50"></text></g><g><title>codegen_module (58,100,892 samples, 8.41%)</title><rect x="31.6302%" y="181" width="8.4131%" height="15" fill="rgb(244,35,45)"/><text x="31.8802%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (60,048,094 samples, 8.70%)</title><rect x="31.3520%" y="197" width="8.6951%" height="15" fill="rgb(251,115,12)"/><text x="31.6020%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (274,316,718 samples, 39.72%)</title><rect x="40.0778%" y="181" width="39.7215%" height="15" fill="rgb(240,54,50)"/><text x="40.3278%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (261,253,727 samples, 37.83%)</title><rect x="41.9693%" y="165" width="37.8299%" height="15" fill="rgb(233,84,52)"/><text x="42.2193%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (297,429,791 samples, 43.07%)</title><rect x="40.0470%" y="197" width="43.0683%" height="15" fill="rgb(207,117,47)"/><text x="40.2970%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (22,900,503 samples, 3.32%)</title><rect x="79.7993%" y="181" width="3.3160%" height="15" fill="rgb(249,43,39)"/><text x="80.0493%" y="191.50">LLV..</text></g><g><title>macro_expand_crate (27,166,623 samples, 3.93%)</title><rect x="83.1919%" y="181" width="3.9338%" height="15" fill="rgb(209,38,44)"/><text x="83.4419%" y="191.50">macr..</text></g><g><title>expand_crate (27,157,643 samples, 3.93%)</title><rect x="83.1932%" y="165" width="3.9325%" height="15" fill="rgb(236,212,23)"/><text x="83.4432%" y="175.50">expa..</text></g><g><title>pre_AST_expansion_lint_checks (928,919 samples, 0.13%)</title><rect x="86.9912%" y="149" width="0.1345%" height="15" fill="rgb(242,79,21)"/><text x="87.2412%" y="159.50"></text></g><g><title>late_resolve_crate (3,159,182 samples, 0.46%)</title><rect x="87.1822%" y="165" width="0.4575%" height="15" fill="rgb(211,96,35)"/><text x="87.4322%" y="175.50"></text></g><g><title>configure_and_expand (31,457,936 samples, 4.56%)</title><rect x="83.1153%" y="197" width="4.5552%" height="15" fill="rgb(253,215,40)"/><text x="83.3653%" y="207.50">confi..</text></g><g><title>resolve_crate (3,672,817 samples, 0.53%)</title><rect x="87.1386%" y="181" width="0.5318%" height="15" fill="rgb(211,81,21)"/><text x="87.3886%" y="191.50"></text></g><g><title>early_lint_checks (804,768 samples, 0.12%)</title><rect x="87.7366%" y="197" width="0.1165%" height="15" fill="rgb(208,190,38)"/><text x="87.9866%" y="207.50"></text></g><g><title>free_global_ctxt (5,585,447 samples, 0.81%)</title><rect x="87.8531%" y="197" width="0.8088%" height="15" fill="rgb(235,213,38)"/><text x="88.1031%" y="207.50"></text></g><g><title>codegen_fn_attrs (1,089,452 samples, 0.16%)</title><rect x="89.2782%" y="117" width="0.1578%" height="15" fill="rgb(237,122,38)"/><text x="89.5282%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,380,193 samples, 0.20%)</title><rect x="90.2716%" y="101" width="0.1999%" height="15" fill="rgb(244,218,35)"/><text x="90.5216%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,631,786 samples, 0.67%)</title><rect x="90.4715%" y="101" width="0.6707%" height="15" fill="rgb(240,68,47)"/><text x="90.7215%" y="111.50"></text></g><g><title>optimized_mir (11,644,648 samples, 1.69%)</title><rect x="89.5159%" y="117" width="1.6862%" height="15" fill="rgb(210,16,53)"/><text x="89.7659%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,946,470 samples, 0.28%)</title><rect x="91.3057%" y="101" width="0.2819%" height="15" fill="rgb(235,124,12)"/><text x="91.5557%" y="111.50"></text></g><g><title>specialization_graph_of (1,611,914 samples, 0.23%)</title><rect x="91.6670%" y="101" width="0.2334%" height="15" fill="rgb(224,169,11)"/><text x="91.9170%" y="111.50"></text></g><g><title>resolve_instance (5,045,610 samples, 0.73%)</title><rect x="91.2020%" y="117" width="0.7306%" height="15" fill="rgb(250,166,2)"/><text x="91.4520%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (21,519,207 samples, 3.12%)</title><rect x="89.0146%" y="133" width="3.1160%" height="15" fill="rgb(242,216,29)"/><text x="89.2646%" y="143.50">mon..</text></g><g><title>monomorphization_collector (21,644,938 samples, 3.13%)</title><rect x="89.0142%" y="149" width="3.1342%" height="15" fill="rgb(230,116,27)"/><text x="89.2642%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,360,284 samples, 0.20%)</title><rect x="92.1490%" y="133" width="0.1970%" height="15" fill="rgb(228,99,48)"/><text x="92.3990%" y="143.50"></text></g><g><title>symbol_name (1,237,254 samples, 0.18%)</title><rect x="92.1668%" y="117" width="0.1792%" height="15" fill="rgb(253,11,6)"/><text x="92.4168%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (23,769,629 samples, 3.44%)</title><rect x="89.0083%" y="165" width="3.4419%" height="15" fill="rgb(247,143,39)"/><text x="89.2583%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,083,641 samples, 0.30%)</title><rect x="92.1484%" y="149" width="0.3017%" height="15" fill="rgb(236,97,10)"/><text x="92.3984%" y="159.50"></text></g><g><title>cgu_partitioning (719,367 samples, 0.10%)</title><rect x="92.3460%" y="133" width="0.1042%" height="15" fill="rgb(233,208,19)"/><text x="92.5960%" y="143.50"></text></g><g><title>exported_symbols (23,958,581 samples, 3.47%)</title><rect x="88.9995%" y="181" width="3.4692%" height="15" fill="rgb(216,164,2)"/><text x="89.2495%" y="191.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,103,749 samples, 0.45%)</title><rect x="92.9981%" y="165" width="0.4494%" height="15" fill="rgb(220,129,5)"/><text x="93.2481%" y="175.50"></text></g><g><title>optimized_mir (6,771,647 samples, 0.98%)</title><rect x="92.4786%" y="181" width="0.9805%" height="15" fill="rgb(242,17,10)"/><text x="92.7286%" y="191.50"></text></g><g><title>generate_crate_metadata (33,222,964 samples, 4.81%)</title><rect x="88.6619%" y="197" width="4.8107%" height="15" fill="rgb(242,107,0)"/><text x="88.9119%" y="207.50">genera..</text></g><g><title>hir_lowering (5,626,747 samples, 0.81%)</title><rect x="93.4726%" y="197" width="0.8148%" height="15" fill="rgb(251,28,31)"/><text x="93.7226%" y="207.50"></text></g><g><title>finish_ongoing_codegen (33,440,606 samples, 4.84%)</title><rect x="94.2898%" y="181" width="4.8423%" height="15" fill="rgb(233,223,10)"/><text x="94.5398%" y="191.50">finish..</text></g><g><title>link_crate (2,151,031 samples, 0.31%)</title><rect x="99.1320%" y="181" width="0.3115%" height="15" fill="rgb(215,21,27)"/><text x="99.3820%" y="191.50"></text></g><g><title>link_binary (2,130,021 samples, 0.31%)</title><rect x="99.1351%" y="165" width="0.3084%" height="15" fill="rgb(232,23,21)"/><text x="99.3851%" y="175.50"></text></g><g><title>link_rlib (1,543,895 samples, 0.22%)</title><rect x="99.2199%" y="149" width="0.2236%" height="15" fill="rgb(244,5,23)"/><text x="99.4699%" y="159.50"></text></g><g><title>link (35,617,057 samples, 5.16%)</title><rect x="94.2874%" y="197" width="5.1574%" height="15" fill="rgb(226,81,46)"/><text x="94.5374%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (2,552,646 samples, 0.37%)</title><rect x="99.5573%" y="197" width="0.3696%" height="15" fill="rgb(247,70,30)"/><text x="99.8073%" y="207.50"></text></g><g><title>all (690,600,315 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (690,600,315 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>