<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (185,712,559 samples, 15.72%)</title><rect x="0.0746%" y="149" width="15.7192%" height="15" fill="rgb(227,0,7)"/><text x="0.3246%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,493,859 samples, 0.13%)</title><rect x="17.5441%" y="37" width="0.1264%" height="15" fill="rgb(217,0,24)"/><text x="17.7941%" y="47.50"></text></g><g><title>resolve_instance (1,698,028 samples, 0.14%)</title><rect x="17.6731%" y="37" width="0.1437%" height="15" fill="rgb(221,193,54)"/><text x="17.9231%" y="47.50"></text></g><g><title>thir_body (1,182,202 samples, 0.10%)</title><rect x="17.8183%" y="37" width="0.1001%" height="15" fill="rgb(248,212,6)"/><text x="18.0683%" y="47.50"></text></g><g><title>mir_const (9,511,325 samples, 0.81%)</title><rect x="17.1148%" y="85" width="0.8051%" height="15" fill="rgb(208,68,35)"/><text x="17.3648%" y="95.50"></text></g><g><title>unsafety_check_result (8,495,389 samples, 0.72%)</title><rect x="17.2007%" y="69" width="0.7191%" height="15" fill="rgb(232,128,0)"/><text x="17.4507%" y="79.50"></text></g><g><title>mir_built (7,693,188 samples, 0.65%)</title><rect x="17.2686%" y="53" width="0.6512%" height="15" fill="rgb(207,160,47)"/><text x="17.5186%" y="63.50"></text></g><g><title>mir_promoted (10,403,728 samples, 0.88%)</title><rect x="17.0419%" y="101" width="0.8806%" height="15" fill="rgb(228,23,34)"/><text x="17.2919%" y="111.50"></text></g><g><title>type_op_prove_predicate (2,413,287 samples, 0.20%)</title><rect x="18.0224%" y="101" width="0.2043%" height="15" fill="rgb(218,30,26)"/><text x="18.2724%" y="111.50"></text></g><g><title>MIR_borrow_checking (28,082,706 samples, 2.38%)</title><rect x="15.8510%" y="133" width="2.3770%" height="15" fill="rgb(220,122,19)"/><text x="16.1010%" y="143.50">MI..</text></g><g><title>mir_borrowck (27,997,944 samples, 2.37%)</title><rect x="15.8582%" y="117" width="2.3698%" height="15" fill="rgb(250,228,42)"/><text x="16.1082%" y="127.50">mi..</text></g><g><title>check_mod_attrs (1,287,763 samples, 0.11%)</title><rect x="18.2593%" y="117" width="0.1090%" height="15" fill="rgb(240,193,28)"/><text x="18.5093%" y="127.50"></text></g><g><title>misc_checking_1 (2,604,436 samples, 0.22%)</title><rect x="18.2566%" y="133" width="0.2204%" height="15" fill="rgb(216,20,37)"/><text x="18.5066%" y="143.50"></text></g><g><title>misc_checking_2 (1,203,372 samples, 0.10%)</title><rect x="18.4771%" y="133" width="0.1019%" height="15" fill="rgb(206,188,39)"/><text x="18.7271%" y="143.50"></text></g><g><title>crate_lints (2,181,072 samples, 0.18%)</title><rect x="18.6345%" y="101" width="0.1846%" height="15" fill="rgb(217,207,13)"/><text x="18.8845%" y="111.50"></text></g><g><title>lint_checking (2,855,749 samples, 0.24%)</title><rect x="18.6344%" y="117" width="0.2417%" height="15" fill="rgb(231,73,38)"/><text x="18.8844%" y="127.50"></text></g><g><title>misc_checking_3 (4,675,058 samples, 0.40%)</title><rect x="18.5789%" y="133" width="0.3957%" height="15" fill="rgb(225,20,46)"/><text x="18.8289%" y="143.50"></text></g><g><title>impl_parent (3,125,319 samples, 0.26%)</title><rect x="19.4349%" y="69" width="0.2645%" height="15" fill="rgb(210,31,41)"/><text x="19.6849%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,616,195 samples, 0.14%)</title><rect x="19.5626%" y="53" width="0.1368%" height="15" fill="rgb(221,200,47)"/><text x="19.8126%" y="63.50"></text></g><g><title>impl_trait_ref (6,310,111 samples, 0.53%)</title><rect x="19.6994%" y="69" width="0.5341%" height="15" fill="rgb(226,26,5)"/><text x="19.9494%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,055,116 samples, 0.43%)</title><rect x="19.8056%" y="53" width="0.4279%" height="15" fill="rgb(249,33,26)"/><text x="20.0556%" y="63.50"></text></g><g><title>coherent_trait (15,989,362 samples, 1.35%)</title><rect x="18.9802%" y="101" width="1.3534%" height="15" fill="rgb(235,183,28)"/><text x="19.2302%" y="111.50"></text></g><g><title>specialization_graph_of (15,589,378 samples, 1.32%)</title><rect x="19.0141%" y="85" width="1.3195%" height="15" fill="rgb(221,5,38)"/><text x="19.2641%" y="95.50"></text></g><g><title>coherence_checking (16,070,624 samples, 1.36%)</title><rect x="18.9784%" y="117" width="1.3603%" height="15" fill="rgb(247,18,42)"/><text x="19.2284%" y="127.50"></text></g><g><title>evaluate_obligation (1,462,747 samples, 0.12%)</title><rect x="22.1269%" y="69" width="0.1238%" height="15" fill="rgb(241,131,45)"/><text x="22.3769%" y="79.50"></text></g><g><title>evaluate_obligation (1,423,822 samples, 0.12%)</title><rect x="23.1436%" y="53" width="0.1205%" height="15" fill="rgb(249,31,29)"/><text x="23.3936%" y="63.50"></text></g><g><title>typeck (12,530,038 samples, 1.06%)</title><rect x="22.3282%" y="69" width="1.0606%" height="15" fill="rgb(225,111,53)"/><text x="22.5782%" y="79.50"></text></g><g><title>item_bodies_checking (36,041,376 samples, 3.05%)</title><rect x="20.3424%" y="117" width="3.0506%" height="15" fill="rgb(238,160,17)"/><text x="20.5924%" y="127.50">ite..</text></g><g><title>typeck_item_bodies (36,039,156 samples, 3.05%)</title><rect x="20.3426%" y="101" width="3.0504%" height="15" fill="rgb(214,148,48)"/><text x="20.5926%" y="111.50">typ..</text></g><g><title>typeck (35,981,756 samples, 3.05%)</title><rect x="20.3474%" y="85" width="3.0456%" height="15" fill="rgb(232,36,49)"/><text x="20.5974%" y="95.50">typ..</text></g><g><title>generics_of (1,265,994 samples, 0.11%)</title><rect x="23.5784%" y="85" width="0.1072%" height="15" fill="rgb(209,103,24)"/><text x="23.8284%" y="95.50"></text></g><g><title>type_collecting (3,752,559 samples, 0.32%)</title><rect x="23.4701%" y="117" width="0.3176%" height="15" fill="rgb(229,88,8)"/><text x="23.7201%" y="127.50"></text></g><g><title>collect_mod_item_types (3,741,689 samples, 0.32%)</title><rect x="23.4710%" y="101" width="0.3167%" height="15" fill="rgb(213,181,19)"/><text x="23.7210%" y="111.50"></text></g><g><title>check_impl_item_well_formed (2,825,930 samples, 0.24%)</title><rect x="23.8006%" y="101" width="0.2392%" height="15" fill="rgb(254,191,54)"/><text x="24.0506%" y="111.50"></text></g><g><title>analysis (99,252,630 samples, 8.40%)</title><rect x="15.7938%" y="149" width="8.4010%" height="15" fill="rgb(241,83,37)"/><text x="16.0438%" y="159.50">analysis</text></g><g><title>type_check_crate (61,672,938 samples, 5.22%)</title><rect x="18.9746%" y="133" width="5.2202%" height="15" fill="rgb(233,36,39)"/><text x="19.2246%" y="143.50">type_c..</text></g><g><title>wf_checking (4,805,648 samples, 0.41%)</title><rect x="23.7880%" y="117" width="0.4068%" height="15" fill="rgb(226,3,54)"/><text x="24.0380%" y="127.50"></text></g><g><title>check_item_well_formed (1,830,627 samples, 0.15%)</title><rect x="24.0398%" y="101" width="0.1549%" height="15" fill="rgb(245,192,40)"/><text x="24.2898%" y="111.50"></text></g><g><title>compute_debuginfo_type_name (4,030,455 samples, 0.34%)</title><rect x="35.8205%" y="117" width="0.3411%" height="15" fill="rgb(238,167,29)"/><text x="36.0705%" y="127.50"></text></g><g><title>const_caller_location (2,139,939 samples, 0.18%)</title><rect x="36.1616%" y="117" width="0.1811%" height="15" fill="rgb(232,182,51)"/><text x="36.4116%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,186,067 samples, 0.10%)</title><rect x="36.9676%" y="101" width="0.1004%" height="15" fill="rgb(231,60,39)"/><text x="37.2176%" y="111.50"></text></g><g><title>layout_of (3,496,158 samples, 0.30%)</title><rect x="37.0921%" y="101" width="0.2959%" height="15" fill="rgb(208,69,12)"/><text x="37.3421%" y="111.50"></text></g><g><title>predicates_of (2,987,350 samples, 0.25%)</title><rect x="37.8266%" y="85" width="0.2529%" height="15" fill="rgb(235,93,37)"/><text x="38.0766%" y="95.50"></text></g><g><title>predicates_defined_on (2,226,261 samples, 0.19%)</title><rect x="37.8910%" y="69" width="0.1884%" height="15" fill="rgb(213,116,39)"/><text x="38.1410%" y="79.50"></text></g><g><title>param_env (8,184,980 samples, 0.69%)</title><rect x="37.3880%" y="101" width="0.6928%" height="15" fill="rgb(222,207,29)"/><text x="37.6380%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,579,768 samples, 0.13%)</title><rect x="38.0808%" y="101" width="0.1337%" height="15" fill="rgb(206,96,30)"/><text x="38.3308%" y="111.50"></text></g><g><title>fn_abi_of_instance (22,056,598 samples, 1.87%)</title><rect x="36.3527%" y="117" width="1.8669%" height="15" fill="rgb(218,138,4)"/><text x="36.6027%" y="127.50">f..</text></g><g><title>layout_of (1,738,085 samples, 0.15%)</title><rect x="38.5460%" y="69" width="0.1471%" height="15" fill="rgb(250,191,14)"/><text x="38.7960%" y="79.50"></text></g><g><title>layout_of (1,953,917 samples, 0.17%)</title><rect x="38.5364%" y="85" width="0.1654%" height="15" fill="rgb(239,60,40)"/><text x="38.7864%" y="95.50"></text></g><g><title>layout_of (2,615,065 samples, 0.22%)</title><rect x="38.5113%" y="101" width="0.2213%" height="15" fill="rgb(206,27,48)"/><text x="38.7613%" y="111.50"></text></g><g><title>layout_of (5,133,187 samples, 0.43%)</title><rect x="38.3139%" y="117" width="0.4345%" height="15" fill="rgb(225,35,8)"/><text x="38.5639%" y="127.50"></text></g><g><title>symbol_name (1,583,543 samples, 0.13%)</title><rect x="38.7501%" y="117" width="0.1340%" height="15" fill="rgb(250,213,24)"/><text x="39.0001%" y="127.50"></text></g><g><title>codegen_module (171,112,405 samples, 14.48%)</title><rect x="24.4397%" y="133" width="14.4834%" height="15" fill="rgb(247,123,22)"/><text x="24.6897%" y="143.50">codegen_module</text></g><g><title>codegen_crate (174,071,571 samples, 14.73%)</title><rect x="24.1956%" y="149" width="14.7339%" height="15" fill="rgb(231,138,38)"/><text x="24.4456%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (567,176,552 samples, 48.01%)</title><rect x="38.9445%" y="133" width="48.0073%" height="15" fill="rgb(231,145,46)"/><text x="39.1945%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (542,190,488 samples, 45.89%)</title><rect x="41.0593%" y="117" width="45.8924%" height="15" fill="rgb(251,118,11)"/><text x="41.3093%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (599,339,871 samples, 50.73%)</title><rect x="38.9295%" y="149" width="50.7297%" height="15" fill="rgb(217,147,25)"/><text x="39.1795%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (31,986,348 samples, 2.71%)</title><rect x="86.9517%" y="133" width="2.7074%" height="15" fill="rgb(247,81,37)"/><text x="87.2017%" y="143.50">LL..</text></g><g><title>macro_expand_crate (20,320,827 samples, 1.72%)</title><rect x="89.7119%" y="133" width="1.7200%" height="15" fill="rgb(209,12,38)"/><text x="89.9619%" y="143.50"></text></g><g><title>expand_crate (20,297,077 samples, 1.72%)</title><rect x="89.7139%" y="117" width="1.7180%" height="15" fill="rgb(227,1,9)"/><text x="89.9639%" y="127.50"></text></g><g><title>metadata_register_crate (2,716,548 samples, 0.23%)</title><rect x="91.2019%" y="101" width="0.2299%" height="15" fill="rgb(248,47,43)"/><text x="91.4519%" y="111.50"></text></g><g><title>late_resolve_crate (4,789,339 samples, 0.41%)</title><rect x="91.4973%" y="117" width="0.4054%" height="15" fill="rgb(221,10,30)"/><text x="91.7473%" y="127.50"></text></g><g><title>configure_and_expand (26,749,232 samples, 2.26%)</title><rect x="89.6592%" y="149" width="2.2641%" height="15" fill="rgb(210,229,1)"/><text x="89.9092%" y="159.50">c..</text></g><g><title>resolve_crate (5,580,236 samples, 0.47%)</title><rect x="91.4510%" y="133" width="0.4723%" height="15" fill="rgb(222,148,37)"/><text x="91.7010%" y="143.50"></text></g><g><title>free_global_ctxt (6,853,870 samples, 0.58%)</title><rect x="92.0308%" y="149" width="0.5801%" height="15" fill="rgb(234,67,33)"/><text x="92.2808%" y="159.50"></text></g><g><title>item_attrs (2,006,699 samples, 0.17%)</title><rect x="93.1957%" y="53" width="0.1699%" height="15" fill="rgb(247,98,35)"/><text x="93.4457%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,686,756 samples, 0.14%)</title><rect x="93.2228%" y="37" width="0.1428%" height="15" fill="rgb(247,138,52)"/><text x="93.4728%" y="47.50"></text></g><g><title>codegen_fn_attrs (3,507,691 samples, 0.30%)</title><rect x="93.1427%" y="69" width="0.2969%" height="15" fill="rgb(213,79,30)"/><text x="93.3927%" y="79.50"></text></g><g><title>mir_shims (1,734,557 samples, 0.15%)</title><rect x="93.4962%" y="69" width="0.1468%" height="15" fill="rgb(246,177,23)"/><text x="93.7462%" y="79.50"></text></g><g><title>layout_of (1,187,549 samples, 0.10%)</title><rect x="93.8374%" y="53" width="0.1005%" height="15" fill="rgb(230,62,27)"/><text x="94.0874%" y="63.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,629,601 samples, 0.39%)</title><rect x="93.9379%" y="53" width="0.3919%" height="15" fill="rgb(216,154,8)"/><text x="94.1879%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,126,287 samples, 0.26%)</title><rect x="94.3298%" y="53" width="0.2646%" height="15" fill="rgb(244,35,45)"/><text x="94.5798%" y="63.50"></text></g><g><title>optimized_mir (12,020,478 samples, 1.02%)</title><rect x="93.6430%" y="69" width="1.0174%" height="15" fill="rgb(251,115,12)"/><text x="93.8930%" y="79.50"></text></g><g><title>evaluate_obligation (1,228,644 samples, 0.10%)</title><rect x="95.1317%" y="37" width="0.1040%" height="15" fill="rgb(240,54,50)"/><text x="95.3817%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (5,459,026 samples, 0.46%)</title><rect x="94.8345%" y="53" width="0.4621%" height="15" fill="rgb(233,84,52)"/><text x="95.0845%" y="63.50"></text></g><g><title>specialization_graph_of (2,176,790 samples, 0.18%)</title><rect x="95.4634%" y="53" width="0.1842%" height="15" fill="rgb(207,117,47)"/><text x="95.7134%" y="63.50"></text></g><g><title>resolve_instance (12,553,561 samples, 1.06%)</title><rect x="94.6605%" y="69" width="1.0626%" height="15" fill="rgb(249,43,39)"/><text x="94.9105%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (38,206,039 samples, 3.23%)</title><rect x="92.7318%" y="85" width="3.2339%" height="15" fill="rgb(209,38,44)"/><text x="92.9818%" y="95.50">mon..</text></g><g><title>vtable_entries (1,257,821 samples, 0.11%)</title><rect x="95.8592%" y="69" width="0.1065%" height="15" fill="rgb(236,212,23)"/><text x="96.1092%" y="79.50"></text></g><g><title>monomorphization_collector (38,251,620 samples, 3.24%)</title><rect x="92.7316%" y="101" width="3.2377%" height="15" fill="rgb(242,79,21)"/><text x="92.9816%" y="111.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,491,725 samples, 0.38%)</title><rect x="95.9703%" y="85" width="0.3802%" height="15" fill="rgb(211,96,35)"/><text x="96.2203%" y="95.50"></text></g><g><title>symbol_name (4,066,382 samples, 0.34%)</title><rect x="96.0063%" y="69" width="0.3442%" height="15" fill="rgb(253,215,40)"/><text x="96.2563%" y="79.50"></text></g><g><title>cgu_partitioning_place_roots (1,255,043 samples, 0.11%)</title><rect x="96.4195%" y="69" width="0.1062%" height="15" fill="rgb(211,81,21)"/><text x="96.6695%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (45,039,088 samples, 3.81%)</title><rect x="92.7272%" y="117" width="3.8122%" height="15" fill="rgb(208,190,38)"/><text x="92.9772%" y="127.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (6,735,138 samples, 0.57%)</title><rect x="95.9693%" y="101" width="0.5701%" height="15" fill="rgb(235,213,38)"/><text x="96.2193%" y="111.50"></text></g><g><title>cgu_partitioning (2,232,503 samples, 0.19%)</title><rect x="96.3504%" y="85" width="0.1890%" height="15" fill="rgb(237,122,38)"/><text x="96.6004%" y="95.50"></text></g><g><title>exported_symbols (45,285,061 samples, 3.83%)</title><rect x="92.7132%" y="133" width="3.8330%" height="15" fill="rgb(244,218,35)"/><text x="92.9632%" y="143.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,508,024 samples, 0.13%)</title><rect x="96.6956%" y="117" width="0.1276%" height="15" fill="rgb(240,68,47)"/><text x="96.9456%" y="127.50"></text></g><g><title>optimized_mir (3,216,692 samples, 0.27%)</title><rect x="96.5527%" y="133" width="0.2723%" height="15" fill="rgb(210,16,53)"/><text x="96.8027%" y="143.50"></text></g><g><title>generate_crate_metadata (49,861,217 samples, 4.22%)</title><rect x="92.6110%" y="149" width="4.2204%" height="15" fill="rgb(235,124,12)"/><text x="92.8610%" y="159.50">gener..</text></g><g><title>hir_lowering (6,712,759 samples, 0.57%)</title><rect x="96.8314%" y="149" width="0.5682%" height="15" fill="rgb(224,169,11)"/><text x="97.0814%" y="159.50"></text></g><g><title>finish_ongoing_codegen (21,173,375 samples, 1.79%)</title><rect x="97.4008%" y="133" width="1.7922%" height="15" fill="rgb(250,166,2)"/><text x="97.6508%" y="143.50">f..</text></g><g><title>link_crate (3,379,664 samples, 0.29%)</title><rect x="99.1929%" y="133" width="0.2861%" height="15" fill="rgb(242,216,29)"/><text x="99.4429%" y="143.50"></text></g><g><title>link_binary (3,335,224 samples, 0.28%)</title><rect x="99.1967%" y="117" width="0.2823%" height="15" fill="rgb(230,116,27)"/><text x="99.4467%" y="127.50"></text></g><g><title>link_rlib (2,598,287 samples, 0.22%)</title><rect x="99.2591%" y="101" width="0.2199%" height="15" fill="rgb(228,99,48)"/><text x="99.5091%" y="111.50"></text></g><g><title>link (24,577,820 samples, 2.08%)</title><rect x="97.3995%" y="149" width="2.0803%" height="15" fill="rgb(253,11,6)"/><text x="97.6495%" y="159.50">l..</text></g><g><title>parse_crate (3,294,074 samples, 0.28%)</title><rect x="99.4799%" y="149" width="0.2788%" height="15" fill="rgb(247,143,39)"/><text x="99.7299%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (2,061,561 samples, 0.17%)</title><rect x="99.7888%" y="149" width="0.1745%" height="15" fill="rgb(236,97,10)"/><text x="100.0388%" y="159.50"></text></g><g><title>all (1,181,438,284 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,181,438,284 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>