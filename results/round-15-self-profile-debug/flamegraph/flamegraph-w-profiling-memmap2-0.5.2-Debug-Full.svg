<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (33,298,888 samples, 10.57%)</title><rect x="0.2261%" y="181" width="10.5719%" height="15" fill="rgb(227,0,7)"/><text x="0.4761%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (670,357 samples, 0.21%)</title><rect x="15.3832%" y="69" width="0.2128%" height="15" fill="rgb(217,0,24)"/><text x="15.6332%" y="79.50"></text></g><g><title>is_copy_raw (472,996 samples, 0.15%)</title><rect x="15.4459%" y="53" width="0.1502%" height="15" fill="rgb(221,193,54)"/><text x="15.6959%" y="63.50"></text></g><g><title>evaluate_obligation (396,885 samples, 0.13%)</title><rect x="15.4700%" y="37" width="0.1260%" height="15" fill="rgb(248,212,6)"/><text x="15.7200%" y="47.50"></text></g><g><title>specialization_graph_of (482,215 samples, 0.15%)</title><rect x="15.7004%" y="53" width="0.1531%" height="15" fill="rgb(208,68,35)"/><text x="15.9504%" y="63.50"></text></g><g><title>resolve_instance (889,908 samples, 0.28%)</title><rect x="15.5960%" y="69" width="0.2825%" height="15" fill="rgb(232,128,0)"/><text x="15.8460%" y="79.50"></text></g><g><title>thir_body (949,428 samples, 0.30%)</title><rect x="15.8878%" y="69" width="0.3014%" height="15" fill="rgb(207,160,47)"/><text x="16.1378%" y="79.50"></text></g><g><title>mir_const (6,751,294 samples, 2.14%)</title><rect x="14.0517%" y="117" width="2.1434%" height="15" fill="rgb(228,23,34)"/><text x="14.3017%" y="127.50">m..</text></g><g><title>unsafety_check_result (5,723,716 samples, 1.82%)</title><rect x="14.3780%" y="101" width="1.8172%" height="15" fill="rgb(218,30,26)"/><text x="14.6280%" y="111.50">u..</text></g><g><title>mir_built (5,072,419 samples, 1.61%)</title><rect x="14.5848%" y="85" width="1.6104%" height="15" fill="rgb(220,122,19)"/><text x="14.8348%" y="95.50"></text></g><g><title>mir_promoted (8,067,356 samples, 2.56%)</title><rect x="13.8119%" y="133" width="2.5613%" height="15" fill="rgb(250,228,42)"/><text x="14.0619%" y="143.50">mi..</text></g><g><title>mir_const_qualif (560,566 samples, 0.18%)</title><rect x="16.1952%" y="117" width="0.1780%" height="15" fill="rgb(240,193,28)"/><text x="16.4452%" y="127.50"></text></g><g><title>type_op_prove_predicate (900,184 samples, 0.29%)</title><rect x="16.5059%" y="133" width="0.2858%" height="15" fill="rgb(216,20,37)"/><text x="16.7559%" y="143.50"></text></g><g><title>MIR_borrow_checking (18,642,309 samples, 5.92%)</title><rect x="10.8747%" y="165" width="5.9186%" height="15" fill="rgb(206,188,39)"/><text x="11.1247%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (18,518,138 samples, 5.88%)</title><rect x="10.9141%" y="149" width="5.8792%" height="15" fill="rgb(217,207,13)"/><text x="11.1641%" y="159.50">mir_bor..</text></g><g><title>codegen_fn_attrs (363,723 samples, 0.12%)</title><rect x="16.9680%" y="133" width="0.1155%" height="15" fill="rgb(231,73,38)"/><text x="17.2180%" y="143.50"></text></g><g><title>check_mod_attrs (573,635 samples, 0.18%)</title><rect x="16.9015%" y="149" width="0.1821%" height="15" fill="rgb(225,20,46)"/><text x="17.1515%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (453,045 samples, 0.14%)</title><rect x="17.1352%" y="149" width="0.1438%" height="15" fill="rgb(210,31,41)"/><text x="17.3852%" y="159.50"></text></g><g><title>misc_checking_1 (1,250,613 samples, 0.40%)</title><rect x="16.8952%" y="165" width="0.3970%" height="15" fill="rgb(221,200,47)"/><text x="17.1452%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (368,874 samples, 0.12%)</title><rect x="17.2927%" y="149" width="0.1171%" height="15" fill="rgb(226,26,5)"/><text x="17.5427%" y="159.50"></text></g><g><title>misc_checking_2 (864,499 samples, 0.27%)</title><rect x="17.2922%" y="165" width="0.2745%" height="15" fill="rgb(249,33,26)"/><text x="17.5422%" y="175.50"></text></g><g><title>match_checking (494,095 samples, 0.16%)</title><rect x="17.4098%" y="149" width="0.1569%" height="15" fill="rgb(235,183,28)"/><text x="17.6598%" y="159.50"></text></g><g><title>check_match (462,174 samples, 0.15%)</title><rect x="17.4199%" y="133" width="0.1467%" height="15" fill="rgb(221,5,38)"/><text x="17.6699%" y="143.50"></text></g><g><title>death_checking (325,414 samples, 0.10%)</title><rect x="17.6218%" y="149" width="0.1033%" height="15" fill="rgb(247,18,42)"/><text x="17.8718%" y="159.50"></text></g><g><title>crate_lints (2,316,884 samples, 0.74%)</title><rect x="17.7256%" y="133" width="0.7356%" height="15" fill="rgb(241,131,45)"/><text x="17.9756%" y="143.50"></text></g><g><title>type_of (1,072,911 samples, 0.34%)</title><rect x="18.1206%" y="117" width="0.3406%" height="15" fill="rgb(249,31,29)"/><text x="18.3706%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (842,570 samples, 0.27%)</title><rect x="18.1937%" y="101" width="0.2675%" height="15" fill="rgb(225,111,53)"/><text x="18.4437%" y="111.50"></text></g><g><title>lint_checking (2,652,577 samples, 0.84%)</title><rect x="17.7251%" y="149" width="0.8422%" height="15" fill="rgb(238,160,17)"/><text x="17.9751%" y="159.50"></text></g><g><title>module_lints (334,013 samples, 0.11%)</title><rect x="18.4612%" y="133" width="0.1060%" height="15" fill="rgb(214,148,48)"/><text x="18.7112%" y="143.50"></text></g><g><title>lint_mod (330,753 samples, 0.11%)</title><rect x="18.4622%" y="117" width="0.1050%" height="15" fill="rgb(232,36,49)"/><text x="18.7122%" y="127.50"></text></g><g><title>privacy_checking_modules (551,466 samples, 0.18%)</title><rect x="18.6230%" y="149" width="0.1751%" height="15" fill="rgb(209,103,24)"/><text x="18.8730%" y="159.50"></text></g><g><title>check_mod_privacy (549,036 samples, 0.17%)</title><rect x="18.6238%" y="133" width="0.1743%" height="15" fill="rgb(229,88,8)"/><text x="18.8738%" y="143.50"></text></g><g><title>misc_checking_3 (3,892,910 samples, 1.24%)</title><rect x="17.5667%" y="165" width="1.2359%" height="15" fill="rgb(213,181,19)"/><text x="17.8167%" y="175.50"></text></g><g><title>impl_parent (1,611,099 samples, 0.51%)</title><rect x="19.6257%" y="101" width="0.5115%" height="15" fill="rgb(254,191,54)"/><text x="19.8757%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,031,253 samples, 0.33%)</title><rect x="19.8098%" y="85" width="0.3274%" height="15" fill="rgb(241,83,37)"/><text x="20.0598%" y="95.50"></text></g><g><title>impl_trait_ref (4,207,754 samples, 1.34%)</title><rect x="20.1372%" y="101" width="1.3359%" height="15" fill="rgb(233,36,39)"/><text x="20.3872%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,607,672 samples, 1.15%)</title><rect x="20.3277%" y="85" width="1.1454%" height="15" fill="rgb(226,3,54)"/><text x="20.5777%" y="95.50"></text></g><g><title>coherent_trait (8,847,279 samples, 2.81%)</title><rect x="18.8294%" y="133" width="2.8089%" height="15" fill="rgb(245,192,40)"/><text x="19.0794%" y="143.50">co..</text></g><g><title>specialization_graph_of (8,831,039 samples, 2.80%)</title><rect x="18.8345%" y="117" width="2.8037%" height="15" fill="rgb(238,167,29)"/><text x="19.0845%" y="127.50">sp..</text></g><g><title>trait_impls_of (518,494 samples, 0.16%)</title><rect x="21.4736%" y="101" width="0.1646%" height="15" fill="rgb(232,182,51)"/><text x="21.7236%" y="111.50"></text></g><g><title>coherence_checking (8,914,691 samples, 2.83%)</title><rect x="18.8242%" y="149" width="2.8303%" height="15" fill="rgb(231,60,39)"/><text x="19.0742%" y="159.50">co..</text></g><g><title>associated_item (442,273 samples, 0.14%)</title><rect x="25.3690%" y="85" width="0.1404%" height="15" fill="rgb(208,69,12)"/><text x="25.6190%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (363,422 samples, 0.12%)</title><rect x="25.3940%" y="69" width="0.1154%" height="15" fill="rgb(235,93,37)"/><text x="25.6440%" y="79.50"></text></g><g><title>associated_items (587,243 samples, 0.19%)</title><rect x="25.3288%" y="101" width="0.1864%" height="15" fill="rgb(213,116,39)"/><text x="25.5788%" y="111.50"></text></g><g><title>trait_impls_of (517,316 samples, 0.16%)</title><rect x="26.0563%" y="85" width="0.1642%" height="15" fill="rgb(222,207,29)"/><text x="26.3063%" y="95.50"></text></g><g><title>evaluate_obligation (1,905,989 samples, 0.61%)</title><rect x="25.6182%" y="101" width="0.6051%" height="15" fill="rgb(206,96,30)"/><text x="25.8682%" y="111.50"></text></g><g><title>evaluate_obligation (642,507 samples, 0.20%)</title><rect x="28.1028%" y="85" width="0.2040%" height="15" fill="rgb(218,138,4)"/><text x="28.3528%" y="95.50"></text></g><g><title>is_copy_raw (397,343 samples, 0.13%)</title><rect x="28.3341%" y="85" width="0.1262%" height="15" fill="rgb(250,191,14)"/><text x="28.5841%" y="95.50"></text></g><g><title>evaluate_obligation (363,023 samples, 0.12%)</title><rect x="28.3450%" y="69" width="0.1153%" height="15" fill="rgb(239,60,40)"/><text x="28.5950%" y="79.50"></text></g><g><title>typeck (6,225,142 samples, 1.98%)</title><rect x="26.5755%" y="101" width="1.9764%" height="15" fill="rgb(206,27,48)"/><text x="26.8255%" y="111.50">t..</text></g><g><title>item_bodies_checking (21,746,231 samples, 6.90%)</title><rect x="21.6634%" y="149" width="6.9041%" height="15" fill="rgb(225,35,8)"/><text x="21.9134%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (21,743,271 samples, 6.90%)</title><rect x="21.6644%" y="133" width="6.9031%" height="15" fill="rgb(250,213,24)"/><text x="21.9144%" y="143.50">typeck_it..</text></g><g><title>typeck (21,666,010 samples, 6.88%)</title><rect x="21.6889%" y="117" width="6.8786%" height="15" fill="rgb(247,123,22)"/><text x="21.9389%" y="127.50">typeck</text></g><g><title>item_types_checking (946,970 samples, 0.30%)</title><rect x="28.5675%" y="149" width="0.3006%" height="15" fill="rgb(231,138,38)"/><text x="28.8175%" y="159.50"></text></g><g><title>check_mod_item_types (943,790 samples, 0.30%)</title><rect x="28.5685%" y="133" width="0.2996%" height="15" fill="rgb(231,145,46)"/><text x="28.8185%" y="143.50"></text></g><g><title>typeck (357,845 samples, 0.11%)</title><rect x="28.7546%" y="117" width="0.1136%" height="15" fill="rgb(251,118,11)"/><text x="29.0046%" y="127.50"></text></g><g><title>predicates_of (413,583 samples, 0.13%)</title><rect x="29.1301%" y="117" width="0.1313%" height="15" fill="rgb(217,147,25)"/><text x="29.3801%" y="127.50"></text></g><g><title>predicates_defined_on (374,102 samples, 0.12%)</title><rect x="29.1427%" y="101" width="0.1188%" height="15" fill="rgb(247,81,37)"/><text x="29.3927%" y="111.50"></text></g><g><title>type_collecting (1,363,293 samples, 0.43%)</title><rect x="28.8689%" y="149" width="0.4328%" height="15" fill="rgb(209,12,38)"/><text x="29.1189%" y="159.50"></text></g><g><title>collect_mod_item_types (1,356,093 samples, 0.43%)</title><rect x="28.8712%" y="133" width="0.4305%" height="15" fill="rgb(227,1,9)"/><text x="29.1212%" y="143.50"></text></g><g><title>evaluate_obligation (424,806 samples, 0.13%)</title><rect x="29.8429%" y="117" width="0.1349%" height="15" fill="rgb(248,47,43)"/><text x="30.0929%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,706,597 samples, 0.86%)</title><rect x="29.3530%" y="133" width="0.8593%" height="15" fill="rgb(221,10,30)"/><text x="29.6030%" y="143.50"></text></g><g><title>check_item_well_formed (1,410,533 samples, 0.45%)</title><rect x="30.2123%" y="133" width="0.4478%" height="15" fill="rgb(210,229,1)"/><text x="30.4623%" y="143.50"></text></g><g><title>analysis (62,644,486 samples, 19.89%)</title><rect x="10.7980%" y="181" width="19.8886%" height="15" fill="rgb(222,148,37)"/><text x="11.0480%" y="191.50">analysis</text></g><g><title>type_check_crate (37,431,799 samples, 11.88%)</title><rect x="18.8026%" y="165" width="11.8840%" height="15" fill="rgb(234,67,33)"/><text x="19.0526%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,356,863 samples, 1.38%)</title><rect x="29.3034%" y="149" width="1.3832%" height="15" fill="rgb(247,98,35)"/><text x="29.5534%" y="159.50"></text></g><g><title>const_caller_location (357,373 samples, 0.11%)</title><rect x="37.0326%" y="149" width="0.1135%" height="15" fill="rgb(247,138,52)"/><text x="37.2826%" y="159.50"></text></g><g><title>codegen_fn_attrs (347,433 samples, 0.11%)</title><rect x="37.4344%" y="133" width="0.1103%" height="15" fill="rgb(213,79,30)"/><text x="37.6844%" y="143.50"></text></g><g><title>layout_of (900,290 samples, 0.29%)</title><rect x="37.5591%" y="133" width="0.2858%" height="15" fill="rgb(246,177,23)"/><text x="37.8091%" y="143.50"></text></g><g><title>predicates_of (387,585 samples, 0.12%)</title><rect x="38.0491%" y="117" width="0.1231%" height="15" fill="rgb(230,62,27)"/><text x="38.2991%" y="127.50"></text></g><g><title>param_env (1,036,448 samples, 0.33%)</title><rect x="37.8449%" y="133" width="0.3291%" height="15" fill="rgb(216,154,8)"/><text x="38.0949%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (319,284 samples, 0.10%)</title><rect x="38.1740%" y="133" width="0.1014%" height="15" fill="rgb(244,35,45)"/><text x="38.4240%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,574,415 samples, 1.13%)</title><rect x="37.1467%" y="149" width="1.1348%" height="15" fill="rgb(251,115,12)"/><text x="37.3967%" y="159.50"></text></g><g><title>layout_of (319,833 samples, 0.10%)</title><rect x="38.4587%" y="133" width="0.1015%" height="15" fill="rgb(240,54,50)"/><text x="38.7087%" y="143.50"></text></g><g><title>layout_of (763,807 samples, 0.24%)</title><rect x="38.3480%" y="149" width="0.2425%" height="15" fill="rgb(233,84,52)"/><text x="38.5980%" y="159.50"></text></g><g><title>symbol_name (338,975 samples, 0.11%)</title><rect x="38.5993%" y="149" width="0.1076%" height="15" fill="rgb(207,117,47)"/><text x="38.8493%" y="159.50"></text></g><g><title>codegen_module (23,654,731 samples, 7.51%)</title><rect x="31.2067%" y="165" width="7.5100%" height="15" fill="rgb(249,43,39)"/><text x="31.4567%" y="175.50">codegen_mo..</text></g><g><title>codegen_crate (25,353,157 samples, 8.05%)</title><rect x="30.6909%" y="181" width="8.0492%" height="15" fill="rgb(209,38,44)"/><text x="30.9409%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (120,159,250 samples, 38.15%)</title><rect x="38.7920%" y="165" width="38.1487%" height="15" fill="rgb(236,212,23)"/><text x="39.0420%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (115,705,791 samples, 36.73%)</title><rect x="40.2059%" y="149" width="36.7348%" height="15" fill="rgb(242,79,21)"/><text x="40.4559%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (125,852,104 samples, 39.96%)</title><rect x="38.7401%" y="181" width="39.9561%" height="15" fill="rgb(211,96,35)"/><text x="38.9901%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,529,274 samples, 1.76%)</title><rect x="76.9407%" y="165" width="1.7555%" height="15" fill="rgb(253,215,40)"/><text x="77.1907%" y="175.50"></text></g><g><title>metadata_register_crate (2,644,267 samples, 0.84%)</title><rect x="85.1917%" y="133" width="0.8395%" height="15" fill="rgb(211,81,21)"/><text x="85.4417%" y="143.50"></text></g><g><title>metadata_register_crate (963,082 samples, 0.31%)</title><rect x="85.7254%" y="117" width="0.3058%" height="15" fill="rgb(208,190,38)"/><text x="85.9754%" y="127.50"></text></g><g><title>macro_expand_crate (22,739,160 samples, 7.22%)</title><rect x="78.8517%" y="165" width="7.2193%" height="15" fill="rgb(235,213,38)"/><text x="79.1017%" y="175.50">macro_expa..</text></g><g><title>expand_crate (22,720,330 samples, 7.21%)</title><rect x="78.8576%" y="149" width="7.2133%" height="15" fill="rgb(237,122,38)"/><text x="79.1076%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (447,884 samples, 0.14%)</title><rect x="86.0736%" y="165" width="0.1422%" height="15" fill="rgb(244,218,35)"/><text x="86.3236%" y="175.50"></text></g><g><title>late_resolve_crate (1,524,456 samples, 0.48%)</title><rect x="86.2479%" y="149" width="0.4840%" height="15" fill="rgb(240,68,47)"/><text x="86.4979%" y="159.50"></text></g><g><title>configure_and_expand (25,394,927 samples, 8.06%)</title><rect x="78.6962%" y="181" width="8.0625%" height="15" fill="rgb(210,16,53)"/><text x="78.9462%" y="191.50">configure_a..</text></g><g><title>resolve_crate (1,709,898 samples, 0.54%)</title><rect x="86.2158%" y="165" width="0.5429%" height="15" fill="rgb(235,124,12)"/><text x="86.4658%" y="175.50"></text></g><g><title>free_global_ctxt (4,148,292 samples, 1.32%)</title><rect x="86.9163%" y="181" width="1.3170%" height="15" fill="rgb(224,169,11)"/><text x="87.1663%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (412,993 samples, 0.13%)</title><rect x="89.6392%" y="85" width="0.1311%" height="15" fill="rgb(250,166,2)"/><text x="89.8892%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,876,868 samples, 0.60%)</title><rect x="89.7703%" y="85" width="0.5959%" height="15" fill="rgb(242,216,29)"/><text x="90.0203%" y="95.50"></text></g><g><title>optimized_mir (4,554,064 samples, 1.45%)</title><rect x="88.9858%" y="101" width="1.4458%" height="15" fill="rgb(230,116,27)"/><text x="89.2358%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (481,276 samples, 0.15%)</title><rect x="90.5028%" y="85" width="0.1528%" height="15" fill="rgb(228,99,48)"/><text x="90.7528%" y="95.50"></text></g><g><title>impl_parent (323,536 samples, 0.10%)</title><rect x="90.9924%" y="69" width="0.1027%" height="15" fill="rgb(253,11,6)"/><text x="91.2424%" y="79.50"></text></g><g><title>specialization_graph_of (1,767,278 samples, 0.56%)</title><rect x="90.7046%" y="85" width="0.5611%" height="15" fill="rgb(247,143,39)"/><text x="90.9546%" y="95.50"></text></g><g><title>impl_trait_ref (537,033 samples, 0.17%)</title><rect x="91.0951%" y="69" width="0.1705%" height="15" fill="rgb(236,97,10)"/><text x="91.3451%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (397,013 samples, 0.13%)</title><rect x="91.1396%" y="53" width="0.1260%" height="15" fill="rgb(233,208,19)"/><text x="91.3896%" y="63.50"></text></g><g><title>resolve_instance (2,708,998 samples, 0.86%)</title><rect x="90.4316%" y="101" width="0.8601%" height="15" fill="rgb(216,164,2)"/><text x="90.6816%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (9,149,902 samples, 2.90%)</title><rect x="88.6035%" y="117" width="2.9050%" height="15" fill="rgb(220,129,5)"/><text x="88.8535%" y="127.50">mo..</text></g><g><title>monomorphization_collector (9,214,763 samples, 2.93%)</title><rect x="88.6026%" y="133" width="2.9255%" height="15" fill="rgb(242,17,10)"/><text x="88.8526%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (548,485 samples, 0.17%)</title><rect x="91.5318%" y="117" width="0.1741%" height="15" fill="rgb(242,107,0)"/><text x="91.7818%" y="127.50"></text></g><g><title>symbol_name (495,605 samples, 0.16%)</title><rect x="91.5486%" y="101" width="0.1573%" height="15" fill="rgb(251,28,31)"/><text x="91.7986%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (10,104,712 samples, 3.21%)</title><rect x="88.5923%" y="149" width="3.2081%" height="15" fill="rgb(233,223,10)"/><text x="88.8423%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (857,458 samples, 0.27%)</title><rect x="91.5282%" y="133" width="0.2722%" height="15" fill="rgb(215,21,27)"/><text x="91.7782%" y="143.50"></text></g><g><title>exported_symbols (10,229,564 samples, 3.25%)</title><rect x="88.5799%" y="165" width="3.2477%" height="15" fill="rgb(232,23,21)"/><text x="88.8299%" y="175.50">exp..</text></g><g><title>layout_of (317,913 samples, 0.10%)</title><rect x="92.2773%" y="149" width="0.1009%" height="15" fill="rgb(244,5,23)"/><text x="92.5273%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,834,579 samples, 0.58%)</title><rect x="92.3782%" y="149" width="0.5825%" height="15" fill="rgb(226,81,46)"/><text x="92.6282%" y="159.50"></text></g><g><title>optimized_mir (3,535,105 samples, 1.12%)</title><rect x="91.8408%" y="165" width="1.1223%" height="15" fill="rgb(247,70,30)"/><text x="92.0908%" y="175.50"></text></g><g><title>generate_crate_metadata (14,937,221 samples, 4.74%)</title><rect x="88.2334%" y="181" width="4.7423%" height="15" fill="rgb(212,68,19)"/><text x="88.4834%" y="191.50">genera..</text></g><g><title>hir_lowering (2,107,532 samples, 0.67%)</title><rect x="92.9757%" y="181" width="0.6691%" height="15" fill="rgb(240,187,13)"/><text x="93.2257%" y="191.50"></text></g><g><title>finish_ongoing_codegen (7,243,083 samples, 2.30%)</title><rect x="93.6500%" y="165" width="2.2996%" height="15" fill="rgb(223,113,26)"/><text x="93.9000%" y="175.50">f..</text></g><g><title>link_crate (1,717,498 samples, 0.55%)</title><rect x="95.9495%" y="165" width="0.5453%" height="15" fill="rgb(206,192,2)"/><text x="96.1995%" y="175.50"></text></g><g><title>link_binary (1,698,648 samples, 0.54%)</title><rect x="95.9555%" y="149" width="0.5393%" height="15" fill="rgb(241,108,4)"/><text x="96.2055%" y="159.50"></text></g><g><title>link_rlib (1,128,682 samples, 0.36%)</title><rect x="96.1365%" y="133" width="0.3583%" height="15" fill="rgb(247,173,49)"/><text x="96.3865%" y="143.50"></text></g><g><title>link (8,987,161 samples, 2.85%)</title><rect x="93.6448%" y="181" width="2.8533%" height="15" fill="rgb(224,114,35)"/><text x="93.8948%" y="191.50">li..</text></g><g><title>parse_crate (9,112,523 samples, 2.89%)</title><rect x="96.4981%" y="181" width="2.8931%" height="15" fill="rgb(245,159,27)"/><text x="96.7481%" y="191.50">pa..</text></g><g><title>self_profile_alloc_query_strings (1,302,013 samples, 0.41%)</title><rect x="99.4569%" y="181" width="0.4134%" height="15" fill="rgb(245,172,44)"/><text x="99.7069%" y="191.50"></text></g><g><title>all (314,976,212 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (314,976,212 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (318,333 samples, 0.10%)</title><rect x="99.8989%" y="181" width="0.1011%" height="15" fill="rgb(237,72,25)"/><text x="100.1489%" y="191.50"></text></g></svg></svg>