<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (13,287,005 samples, 11.55%)</title><rect x="0.5555%" y="181" width="11.5520%" height="15" fill="rgb(227,0,7)"/><text x="0.8055%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (282,444 samples, 0.25%)</title><rect x="13.9713%" y="69" width="0.2456%" height="15" fill="rgb(217,0,24)"/><text x="14.2213%" y="79.50"></text></g><g><title>is_copy_raw (226,754 samples, 0.20%)</title><rect x="14.0198%" y="53" width="0.1971%" height="15" fill="rgb(221,193,54)"/><text x="14.2698%" y="63.50"></text></g><g><title>evaluate_obligation (208,553 samples, 0.18%)</title><rect x="14.0356%" y="37" width="0.1813%" height="15" fill="rgb(248,212,6)"/><text x="14.2856%" y="47.50"></text></g><g><title>mir_const (1,041,889 samples, 0.91%)</title><rect x="13.4805%" y="117" width="0.9058%" height="15" fill="rgb(208,68,35)"/><text x="13.7305%" y="127.50"></text></g><g><title>unsafety_check_result (847,778 samples, 0.74%)</title><rect x="13.6492%" y="101" width="0.7371%" height="15" fill="rgb(232,128,0)"/><text x="13.8992%" y="111.50"></text></g><g><title>mir_built (748,987 samples, 0.65%)</title><rect x="13.7351%" y="85" width="0.6512%" height="15" fill="rgb(207,160,47)"/><text x="13.9851%" y="95.50"></text></g><g><title>mir_promoted (1,208,610 samples, 1.05%)</title><rect x="13.3439%" y="133" width="1.0508%" height="15" fill="rgb(228,23,34)"/><text x="13.5939%" y="143.50"></text></g><g><title>type_op_prove_predicate (188,173 samples, 0.16%)</title><rect x="14.5041%" y="133" width="0.1636%" height="15" fill="rgb(218,30,26)"/><text x="14.7541%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,787,808 samples, 2.42%)</title><rect x="12.2462%" y="165" width="2.4238%" height="15" fill="rgb(220,122,19)"/><text x="12.4962%" y="175.50">MI..</text></g><g><title>mir_borrowck (2,773,177 samples, 2.41%)</title><rect x="12.2590%" y="149" width="2.4111%" height="15" fill="rgb(250,228,42)"/><text x="12.5090%" y="159.50">mi..</text></g><g><title>hir_module_items (138,311 samples, 0.12%)</title><rect x="14.6735%" y="165" width="0.1203%" height="15" fill="rgb(240,193,28)"/><text x="14.9235%" y="175.50"></text></g><g><title>codegen_fn_attrs (272,103 samples, 0.24%)</title><rect x="15.0596%" y="101" width="0.2366%" height="15" fill="rgb(216,20,37)"/><text x="15.3096%" y="111.50"></text></g><g><title>codegen_fn_attrs (414,174 samples, 0.36%)</title><rect x="14.9395%" y="133" width="0.3601%" height="15" fill="rgb(206,188,39)"/><text x="15.1895%" y="143.50"></text></g><g><title>should_inherit_track_caller (367,314 samples, 0.32%)</title><rect x="14.9802%" y="117" width="0.3194%" height="15" fill="rgb(217,207,13)"/><text x="15.2302%" y="127.50"></text></g><g><title>check_mod_attrs (554,045 samples, 0.48%)</title><rect x="14.8183%" y="149" width="0.4817%" height="15" fill="rgb(231,73,38)"/><text x="15.0683%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (314,753 samples, 0.27%)</title><rect x="15.3623%" y="149" width="0.2737%" height="15" fill="rgb(225,20,46)"/><text x="15.6123%" y="159.50"></text></g><g><title>misc_checking_1 (1,009,230 samples, 0.88%)</title><rect x="14.7940%" y="165" width="0.8774%" height="15" fill="rgb(210,31,41)"/><text x="15.0440%" y="175.50"></text></g><g><title>misc_checking_2 (200,142 samples, 0.17%)</title><rect x="15.6715%" y="165" width="0.1740%" height="15" fill="rgb(221,200,47)"/><text x="15.9215%" y="175.50"></text></g><g><title>death_checking (145,121 samples, 0.13%)</title><rect x="15.8883%" y="149" width="0.1262%" height="15" fill="rgb(226,26,5)"/><text x="16.1383%" y="159.50"></text></g><g><title>crate_lints (1,579,176 samples, 1.37%)</title><rect x="16.0157%" y="133" width="1.3730%" height="15" fill="rgb(249,33,26)"/><text x="16.2657%" y="143.50"></text></g><g><title>type_of (1,037,890 samples, 0.90%)</title><rect x="16.4863%" y="117" width="0.9024%" height="15" fill="rgb(235,183,28)"/><text x="16.7363%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (803,188 samples, 0.70%)</title><rect x="16.6904%" y="101" width="0.6983%" height="15" fill="rgb(221,5,38)"/><text x="16.9404%" y="111.50"></text></g><g><title>lint_checking (1,625,486 samples, 1.41%)</title><rect x="16.0145%" y="149" width="1.4132%" height="15" fill="rgb(247,18,42)"/><text x="16.2645%" y="159.50"></text></g><g><title>misc_checking_3 (1,990,030 samples, 1.73%)</title><rect x="15.8455%" y="165" width="1.7302%" height="15" fill="rgb(241,131,45)"/><text x="16.0955%" y="175.50"></text></g><g><title>impl_parent (117,771 samples, 0.10%)</title><rect x="18.2457%" y="69" width="0.1024%" height="15" fill="rgb(249,31,29)"/><text x="18.4957%" y="79.50"></text></g><g><title>impl_trait_ref (442,054 samples, 0.38%)</title><rect x="18.3480%" y="69" width="0.3843%" height="15" fill="rgb(225,111,53)"/><text x="18.5980%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (394,544 samples, 0.34%)</title><rect x="18.3893%" y="53" width="0.3430%" height="15" fill="rgb(238,160,17)"/><text x="18.6393%" y="63.50"></text></g><g><title>adt_destructor (1,292,373 samples, 1.12%)</title><rect x="17.6638%" y="117" width="1.1236%" height="15" fill="rgb(214,148,48)"/><text x="17.9138%" y="127.50"></text></g><g><title>coherent_trait (1,278,103 samples, 1.11%)</title><rect x="17.6763%" y="101" width="1.1112%" height="15" fill="rgb(232,36,49)"/><text x="17.9263%" y="111.50"></text></g><g><title>specialization_graph_of (1,275,493 samples, 1.11%)</title><rect x="17.6785%" y="85" width="1.1089%" height="15" fill="rgb(209,103,24)"/><text x="17.9285%" y="95.50"></text></g><g><title>param_env (181,642 samples, 0.16%)</title><rect x="18.7875%" y="117" width="0.1579%" height="15" fill="rgb(229,88,8)"/><text x="19.0375%" y="127.50"></text></g><g><title>impl_parent (3,941,619 samples, 3.43%)</title><rect x="25.2189%" y="101" width="3.4269%" height="15" fill="rgb(213,181,19)"/><text x="25.4689%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (2,184,663 samples, 1.90%)</title><rect x="26.7464%" y="85" width="1.8994%" height="15" fill="rgb(254,191,54)"/><text x="26.9964%" y="95.50">m..</text></g><g><title>impl_trait_ref (10,276,138 samples, 8.93%)</title><rect x="28.6458%" y="101" width="8.9343%" height="15" fill="rgb(241,83,37)"/><text x="28.8958%" y="111.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (8,481,269 samples, 7.37%)</title><rect x="30.2063%" y="85" width="7.3738%" height="15" fill="rgb(233,36,39)"/><text x="30.4563%" y="95.50">metadata_d..</text></g><g><title>coherent_trait (24,538,289 samples, 21.33%)</title><rect x="17.6292%" y="133" width="21.3342%" height="15" fill="rgb(226,3,54)"/><text x="17.8792%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (23,024,413 samples, 20.02%)</title><rect x="18.9454%" y="117" width="20.0180%" height="15" fill="rgb(245,192,40)"/><text x="19.1954%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,587,386 samples, 1.38%)</title><rect x="37.5832%" y="101" width="1.3801%" height="15" fill="rgb(238,167,29)"/><text x="37.8332%" y="111.50"></text></g><g><title>implementations_of_trait (374,813 samples, 0.33%)</title><rect x="38.6375%" y="85" width="0.3259%" height="15" fill="rgb(232,182,51)"/><text x="38.8875%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (307,513 samples, 0.27%)</title><rect x="38.6960%" y="69" width="0.2674%" height="15" fill="rgb(231,60,39)"/><text x="38.9460%" y="79.50"></text></g><g><title>coherence_checking (24,623,241 samples, 21.41%)</title><rect x="17.6042%" y="149" width="21.4080%" height="15" fill="rgb(208,69,12)"/><text x="17.8542%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (191,352 samples, 0.17%)</title><rect x="41.4295%" y="101" width="0.1664%" height="15" fill="rgb(235,93,37)"/><text x="41.6795%" y="111.50"></text></g><g><title>adt_dtorck_constraint (120,841 samples, 0.11%)</title><rect x="41.4908%" y="85" width="0.1051%" height="15" fill="rgb(213,116,39)"/><text x="41.7408%" y="95.50"></text></g><g><title>evaluate_obligation (470,323 samples, 0.41%)</title><rect x="41.5958%" y="101" width="0.4089%" height="15" fill="rgb(222,207,29)"/><text x="41.8458%" y="111.50"></text></g><g><title>trait_impls_of (176,861 samples, 0.15%)</title><rect x="41.8510%" y="85" width="0.1538%" height="15" fill="rgb(206,96,30)"/><text x="42.1010%" y="95.50"></text></g><g><title>predicates_of (150,011 samples, 0.13%)</title><rect x="42.3017%" y="101" width="0.1304%" height="15" fill="rgb(218,138,4)"/><text x="42.5517%" y="111.50"></text></g><g><title>item_bodies_checking (4,030,610 samples, 3.50%)</title><rect x="39.0420%" y="149" width="3.5043%" height="15" fill="rgb(250,191,14)"/><text x="39.2920%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (4,028,110 samples, 3.50%)</title><rect x="39.0442%" y="133" width="3.5021%" height="15" fill="rgb(239,60,40)"/><text x="39.2942%" y="143.50">typ..</text></g><g><title>typeck (4,012,530 samples, 3.49%)</title><rect x="39.0578%" y="117" width="3.4886%" height="15" fill="rgb(206,27,48)"/><text x="39.3078%" y="127.50">typ..</text></g><g><title>item_types_checking (384,174 samples, 0.33%)</title><rect x="42.5463%" y="149" width="0.3340%" height="15" fill="rgb(225,35,8)"/><text x="42.7963%" y="159.50"></text></g><g><title>check_mod_item_types (380,744 samples, 0.33%)</title><rect x="42.5493%" y="133" width="0.3310%" height="15" fill="rgb(250,213,24)"/><text x="42.7993%" y="143.50"></text></g><g><title>fn_sig (197,953 samples, 0.17%)</title><rect x="42.9975%" y="117" width="0.1721%" height="15" fill="rgb(247,123,22)"/><text x="43.2475%" y="127.50"></text></g><g><title>named_region_map (139,591 samples, 0.12%)</title><rect x="43.2150%" y="101" width="0.1214%" height="15" fill="rgb(231,138,38)"/><text x="43.4650%" y="111.50"></text></g><g><title>resolve_lifetimes (120,850 samples, 0.11%)</title><rect x="43.2313%" y="85" width="0.1051%" height="15" fill="rgb(231,145,46)"/><text x="43.4813%" y="95.50"></text></g><g><title>generics_of (203,103 samples, 0.18%)</title><rect x="43.1697%" y="117" width="0.1766%" height="15" fill="rgb(251,118,11)"/><text x="43.4197%" y="127.50"></text></g><g><title>predicates_of (161,990 samples, 0.14%)</title><rect x="43.4004%" y="117" width="0.1408%" height="15" fill="rgb(217,147,25)"/><text x="43.6504%" y="127.50"></text></g><g><title>predicates_defined_on (143,630 samples, 0.12%)</title><rect x="43.4164%" y="101" width="0.1249%" height="15" fill="rgb(247,81,37)"/><text x="43.6664%" y="111.50"></text></g><g><title>type_collecting (852,319 samples, 0.74%)</title><rect x="42.8816%" y="149" width="0.7410%" height="15" fill="rgb(209,12,38)"/><text x="43.1316%" y="159.50"></text></g><g><title>collect_mod_item_types (840,989 samples, 0.73%)</title><rect x="42.8915%" y="133" width="0.7312%" height="15" fill="rgb(227,1,9)"/><text x="43.1415%" y="143.50"></text></g><g><title>adt_def (122,061 samples, 0.11%)</title><rect x="44.3894%" y="69" width="0.1061%" height="15" fill="rgb(248,47,43)"/><text x="44.6394%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (121,301 samples, 0.11%)</title><rect x="44.3901%" y="53" width="0.1055%" height="15" fill="rgb(221,10,30)"/><text x="44.6401%" y="63.50"></text></g><g><title>adt_sized_constraint (132,691 samples, 0.12%)</title><rect x="44.3875%" y="85" width="0.1154%" height="15" fill="rgb(210,229,1)"/><text x="44.6375%" y="95.50"></text></g><g><title>adt_sized_constraint (204,492 samples, 0.18%)</title><rect x="44.3297%" y="101" width="0.1778%" height="15" fill="rgb(222,148,37)"/><text x="44.5797%" y="111.50"></text></g><g><title>evaluate_obligation (517,376 samples, 0.45%)</title><rect x="44.1475%" y="117" width="0.4498%" height="15" fill="rgb(234,67,33)"/><text x="44.3975%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,362,744 samples, 1.18%)</title><rect x="43.6783%" y="133" width="1.1848%" height="15" fill="rgb(247,98,35)"/><text x="43.9283%" y="143.50"></text></g><g><title>analysis (38,501,031 samples, 33.47%)</title><rect x="12.1075%" y="181" width="33.4737%" height="15" fill="rgb(247,138,52)"/><text x="12.3575%" y="191.50">analysis</text></g><g><title>type_check_crate (32,211,648 samples, 28.01%)</title><rect x="17.5757%" y="165" width="28.0055%" height="15" fill="rgb(213,79,30)"/><text x="17.8257%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,251,923 samples, 1.96%)</title><rect x="43.6233%" y="149" width="1.9579%" height="15" fill="rgb(246,177,23)"/><text x="43.8733%" y="159.50">w..</text></g><g><title>check_item_well_formed (825,939 samples, 0.72%)</title><rect x="44.8631%" y="133" width="0.7181%" height="15" fill="rgb(230,62,27)"/><text x="45.1131%" y="143.50"></text></g><g><title>const_caller_location (133,911 samples, 0.12%)</title><rect x="49.2514%" y="149" width="0.1164%" height="15" fill="rgb(216,154,8)"/><text x="49.5014%" y="159.50"></text></g><g><title>param_env (152,222 samples, 0.13%)</title><rect x="49.6000%" y="133" width="0.1323%" height="15" fill="rgb(244,35,45)"/><text x="49.8500%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (118,071 samples, 0.10%)</title><rect x="49.7324%" y="133" width="0.1027%" height="15" fill="rgb(251,115,12)"/><text x="49.9824%" y="143.50"></text></g><g><title>fn_abi_of_instance (504,865 samples, 0.44%)</title><rect x="49.4004%" y="149" width="0.4389%" height="15" fill="rgb(240,54,50)"/><text x="49.6504%" y="159.50"></text></g><g><title>layout_of (185,971 samples, 0.16%)</title><rect x="49.8473%" y="149" width="0.1617%" height="15" fill="rgb(233,84,52)"/><text x="50.0973%" y="159.50"></text></g><g><title>codegen_module (3,884,310 samples, 3.38%)</title><rect x="46.7667%" y="165" width="3.3771%" height="15" fill="rgb(207,117,47)"/><text x="47.0167%" y="175.50">cod..</text></g><g><title>symbol_name (155,092 samples, 0.13%)</title><rect x="50.0090%" y="149" width="0.1348%" height="15" fill="rgb(249,43,39)"/><text x="50.2590%" y="159.50"></text></g><g><title>codegen_crate (5,392,704 samples, 4.69%)</title><rect x="45.5905%" y="181" width="4.6885%" height="15" fill="rgb(209,38,44)"/><text x="45.8405%" y="191.50">codeg..</text></g><g><title>LLVM_module_codegen (25,046,185 samples, 21.78%)</title><rect x="50.3219%" y="165" width="21.7757%" height="15" fill="rgb(236,212,23)"/><text x="50.5719%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (24,287,736 samples, 21.12%)</title><rect x="50.9813%" y="149" width="21.1163%" height="15" fill="rgb(242,79,21)"/><text x="51.2313%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (26,566,859 samples, 23.10%)</title><rect x="50.2790%" y="181" width="23.0978%" height="15" fill="rgb(211,96,35)"/><text x="50.5290%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,471,354 samples, 1.28%)</title><rect x="72.0976%" y="165" width="1.2792%" height="15" fill="rgb(253,215,40)"/><text x="72.3476%" y="175.50"></text></g><g><title>metadata_load_macro (248,194 samples, 0.22%)</title><rect x="81.0243%" y="133" width="0.2158%" height="15" fill="rgb(211,81,21)"/><text x="81.2743%" y="143.50"></text></g><g><title>macro_expand_crate (11,442,476 samples, 9.95%)</title><rect x="73.7809%" y="165" width="9.9484%" height="15" fill="rgb(208,190,38)"/><text x="74.0309%" y="175.50">macro_expand_c..</text></g><g><title>expand_crate (11,417,976 samples, 9.93%)</title><rect x="73.8022%" y="149" width="9.9271%" height="15" fill="rgb(235,213,38)"/><text x="74.0522%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,863,039 samples, 2.49%)</title><rect x="81.2401%" y="133" width="2.4892%" height="15" fill="rgb(237,122,38)"/><text x="81.4901%" y="143.50">me..</text></g><g><title>metadata_register_crate (2,534,276 samples, 2.20%)</title><rect x="81.5259%" y="117" width="2.2034%" height="15" fill="rgb(244,218,35)"/><text x="81.7759%" y="127.50">m..</text></g><g><title>metadata_register_crate (2,020,440 samples, 1.76%)</title><rect x="81.9727%" y="101" width="1.7566%" height="15" fill="rgb(240,68,47)"/><text x="82.2227%" y="111.50"></text></g><g><title>metadata_register_crate (790,549 samples, 0.69%)</title><rect x="83.0420%" y="85" width="0.6873%" height="15" fill="rgb(210,16,53)"/><text x="83.2920%" y="95.50"></text></g><g><title>pre_AST_expansion_lint_checks (133,022 samples, 0.12%)</title><rect x="83.7333%" y="165" width="0.1157%" height="15" fill="rgb(235,124,12)"/><text x="83.9833%" y="175.50"></text></g><g><title>finalize_macro_resolutions (225,392 samples, 0.20%)</title><rect x="83.9065%" y="149" width="0.1960%" height="15" fill="rgb(224,169,11)"/><text x="84.1565%" y="159.50"></text></g><g><title>late_resolve_crate (1,040,301 samples, 0.90%)</title><rect x="84.1024%" y="149" width="0.9045%" height="15" fill="rgb(250,166,2)"/><text x="84.3524%" y="159.50"></text></g><g><title>configure_and_expand (13,434,367 samples, 11.68%)</title><rect x="73.3768%" y="181" width="11.6801%" height="15" fill="rgb(242,216,29)"/><text x="73.6268%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (1,389,494 samples, 1.21%)</title><rect x="83.8489%" y="165" width="1.2081%" height="15" fill="rgb(230,116,27)"/><text x="84.0989%" y="175.50"></text></g><g><title>early_lint_checks (155,821 samples, 0.14%)</title><rect x="85.1245%" y="181" width="0.1355%" height="15" fill="rgb(228,99,48)"/><text x="85.3745%" y="191.50"></text></g><g><title>free_global_ctxt (3,057,361 samples, 2.66%)</title><rect x="85.2599%" y="181" width="2.6581%" height="15" fill="rgb(253,11,6)"/><text x="85.5099%" y="191.50">fr..</text></g><g><title>layout_of (239,841 samples, 0.21%)</title><rect x="88.7808%" y="85" width="0.2085%" height="15" fill="rgb(247,143,39)"/><text x="89.0308%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (164,851 samples, 0.14%)</title><rect x="88.9894%" y="85" width="0.1433%" height="15" fill="rgb(236,97,10)"/><text x="89.2394%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (240,202 samples, 0.21%)</title><rect x="89.1327%" y="85" width="0.2088%" height="15" fill="rgb(233,208,19)"/><text x="89.3827%" y="95.50"></text></g><g><title>specialization_graph_of (601,706 samples, 0.52%)</title><rect x="89.3674%" y="69" width="0.5231%" height="15" fill="rgb(216,164,2)"/><text x="89.6174%" y="79.50"></text></g><g><title>impl_trait_ref (127,031 samples, 0.11%)</title><rect x="89.7801%" y="53" width="0.1104%" height="15" fill="rgb(220,129,5)"/><text x="90.0301%" y="63.50"></text></g><g><title>resolve_instance (633,486 samples, 0.55%)</title><rect x="89.3415%" y="85" width="0.5508%" height="15" fill="rgb(242,17,10)"/><text x="89.5915%" y="95.50"></text></g><g><title>optimized_mir (1,714,057 samples, 1.49%)</title><rect x="88.5057%" y="101" width="1.4902%" height="15" fill="rgb(242,107,0)"/><text x="88.7557%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (119,202 samples, 0.10%)</title><rect x="89.8923%" y="85" width="0.1036%" height="15" fill="rgb(251,28,31)"/><text x="90.1423%" y="95.50"></text></g><g><title>resolve_instance (178,461 samples, 0.16%)</title><rect x="89.9959%" y="101" width="0.1552%" height="15" fill="rgb(233,223,10)"/><text x="90.2459%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (2,491,746 samples, 2.17%)</title><rect x="88.2912%" y="117" width="2.1664%" height="15" fill="rgb(215,21,27)"/><text x="88.5412%" y="127.50">m..</text></g><g><title>upstream_monomorphizations_for (291,093 samples, 0.25%)</title><rect x="90.2045%" y="101" width="0.2531%" height="15" fill="rgb(232,23,21)"/><text x="90.4545%" y="111.50"></text></g><g><title>upstream_monomorphizations (285,313 samples, 0.25%)</title><rect x="90.2096%" y="85" width="0.2481%" height="15" fill="rgb(244,5,23)"/><text x="90.4596%" y="95.50"></text></g><g><title>exported_symbols (209,773 samples, 0.18%)</title><rect x="90.2752%" y="69" width="0.1824%" height="15" fill="rgb(226,81,46)"/><text x="90.5252%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (205,353 samples, 0.18%)</title><rect x="90.2791%" y="53" width="0.1785%" height="15" fill="rgb(247,70,30)"/><text x="90.5291%" y="63.50"></text></g><g><title>monomorphization_collector (2,515,346 samples, 2.19%)</title><rect x="88.2893%" y="133" width="2.1869%" height="15" fill="rgb(212,68,19)"/><text x="88.5393%" y="143.50">m..</text></g><g><title>collect_and_partition_mono_items (2,708,108 samples, 2.35%)</title><rect x="88.2646%" y="149" width="2.3545%" height="15" fill="rgb(240,187,13)"/><text x="88.5146%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (164,362 samples, 0.14%)</title><rect x="90.4762%" y="133" width="0.1429%" height="15" fill="rgb(223,113,26)"/><text x="90.7262%" y="143.50"></text></g><g><title>exported_symbols (2,754,798 samples, 2.40%)</title><rect x="88.2448%" y="165" width="2.3951%" height="15" fill="rgb(206,192,2)"/><text x="88.4948%" y="175.50">ex..</text></g><g><title>optimized_mir (207,142 samples, 0.18%)</title><rect x="90.6703%" y="165" width="0.1801%" height="15" fill="rgb(241,108,4)"/><text x="90.9203%" y="175.50"></text></g><g><title>generate_crate_metadata (3,383,815 samples, 2.94%)</title><rect x="87.9181%" y="181" width="2.9420%" height="15" fill="rgb(247,173,49)"/><text x="88.1681%" y="191.50">ge..</text></g><g><title>hir_lowering (910,310 samples, 0.79%)</title><rect x="90.8600%" y="181" width="0.7914%" height="15" fill="rgb(224,114,35)"/><text x="91.1100%" y="191.50"></text></g><g><title>finish_ongoing_codegen (6,535,356 samples, 5.68%)</title><rect x="91.6639%" y="165" width="5.6820%" height="15" fill="rgb(245,159,27)"/><text x="91.9139%" y="175.50">finish_..</text></g><g><title>link_crate (706,877 samples, 0.61%)</title><rect x="97.3459%" y="165" width="0.6146%" height="15" fill="rgb(245,172,44)"/><text x="97.5959%" y="175.50"></text></g><g><title>link_binary (694,637 samples, 0.60%)</title><rect x="97.3566%" y="149" width="0.6039%" height="15" fill="rgb(236,23,11)"/><text x="97.6066%" y="159.50"></text></g><g><title>link_rlib (413,624 samples, 0.36%)</title><rect x="97.6009%" y="133" width="0.3596%" height="15" fill="rgb(205,117,38)"/><text x="97.8509%" y="143.50"></text></g><g><title>link (7,264,364 samples, 6.32%)</title><rect x="91.6515%" y="181" width="6.3158%" height="15" fill="rgb(237,72,25)"/><text x="91.9015%" y="191.50">link</text></g><g><title>parse_crate (1,050,181 samples, 0.91%)</title><rect x="97.9673%" y="181" width="0.9131%" height="15" fill="rgb(244,70,9)"/><text x="98.2173%" y="191.50"></text></g><g><title>prepare_outputs (318,183 samples, 0.28%)</title><rect x="98.8888%" y="181" width="0.2766%" height="15" fill="rgb(217,125,39)"/><text x="99.1388%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (565,576 samples, 0.49%)</title><rect x="99.1654%" y="181" width="0.4917%" height="15" fill="rgb(235,36,10)"/><text x="99.4154%" y="191.50"></text></g><g><title>setup_global_ctxt (141,312 samples, 0.12%)</title><rect x="99.6579%" y="181" width="0.1229%" height="15" fill="rgb(251,123,47)"/><text x="99.9079%" y="191.50"></text></g><g><title>all (115,018,818 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (115,018,818 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (252,173 samples, 0.22%)</title><rect x="99.7808%" y="181" width="0.2192%" height="15" fill="rgb(211,50,8)"/><text x="100.0308%" y="191.50"></text></g></svg></svg>