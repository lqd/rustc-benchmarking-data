<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (57,736,856 samples, 5.57%)</title><rect x="0.0819%" y="181" width="5.5664%" height="15" fill="rgb(227,0,7)"/><text x="0.3319%" y="191.50">LLVM_pa..</text></g><g><title>needs_drop_raw (2,559,544 samples, 0.25%)</title><rect x="16.2869%" y="69" width="0.2468%" height="15" fill="rgb(217,0,24)"/><text x="16.5369%" y="79.50"></text></g><g><title>is_copy_raw (2,096,586 samples, 0.20%)</title><rect x="16.3316%" y="53" width="0.2021%" height="15" fill="rgb(221,193,54)"/><text x="16.5816%" y="63.50"></text></g><g><title>evaluate_obligation (1,736,134 samples, 0.17%)</title><rect x="16.3663%" y="37" width="0.1674%" height="15" fill="rgb(248,212,6)"/><text x="16.6163%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (2,780,735 samples, 0.27%)</title><rect x="16.6750%" y="53" width="0.2681%" height="15" fill="rgb(208,68,35)"/><text x="16.9250%" y="63.50"></text></g><g><title>resolve_instance (5,802,929 samples, 0.56%)</title><rect x="16.5337%" y="69" width="0.5595%" height="15" fill="rgb(232,128,0)"/><text x="16.7837%" y="79.50"></text></g><g><title>thir_body (7,265,494 samples, 0.70%)</title><rect x="17.1124%" y="69" width="0.7005%" height="15" fill="rgb(207,160,47)"/><text x="17.3624%" y="79.50"></text></g><g><title>mir_const (44,273,788 samples, 4.27%)</title><rect x="13.5573%" y="117" width="4.2684%" height="15" fill="rgb(228,23,34)"/><text x="13.8073%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (37,946,785 samples, 3.66%)</title><rect x="14.1673%" y="101" width="3.6584%" height="15" fill="rgb(218,30,26)"/><text x="14.4173%" y="111.50">unsa..</text></g><g><title>mir_built (34,132,034 samples, 3.29%)</title><rect x="14.5350%" y="85" width="3.2906%" height="15" fill="rgb(220,122,19)"/><text x="14.7850%" y="95.50">mir..</text></g><g><title>mir_promoted (50,627,439 samples, 4.88%)</title><rect x="12.9992%" y="133" width="4.8810%" height="15" fill="rgb(250,228,42)"/><text x="13.2492%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (1,342,415 samples, 0.13%)</title><rect x="17.8801%" y="133" width="0.1294%" height="15" fill="rgb(240,193,28)"/><text x="18.1301%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,911,218 samples, 0.28%)</title><rect x="18.0096%" y="133" width="0.2807%" height="15" fill="rgb(216,20,37)"/><text x="18.2596%" y="143.50"></text></g><g><title>normalize_projection_ty (1,628,433 samples, 0.16%)</title><rect x="18.1332%" y="117" width="0.1570%" height="15" fill="rgb(206,188,39)"/><text x="18.3832%" y="127.50"></text></g><g><title>type_op_normalize_ty (4,699,407 samples, 0.45%)</title><rect x="18.3162%" y="133" width="0.4531%" height="15" fill="rgb(217,207,13)"/><text x="18.5662%" y="143.50"></text></g><g><title>normalize_projection_ty (3,179,700 samples, 0.31%)</title><rect x="18.4627%" y="117" width="0.3066%" height="15" fill="rgb(231,73,38)"/><text x="18.7127%" y="127.50"></text></g><g><title>type_op_prove_predicate (7,368,486 samples, 0.71%)</title><rect x="18.7693%" y="133" width="0.7104%" height="15" fill="rgb(225,20,46)"/><text x="19.0193%" y="143.50"></text></g><g><title>MIR_borrow_checking (141,845,879 samples, 13.68%)</title><rect x="5.8053%" y="165" width="13.6753%" height="15" fill="rgb(210,31,41)"/><text x="6.0553%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (140,864,031 samples, 13.58%)</title><rect x="5.9000%" y="149" width="13.5806%" height="15" fill="rgb(221,200,47)"/><text x="6.1500%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,378,994 samples, 0.13%)</title><rect x="19.5298%" y="165" width="0.1329%" height="15" fill="rgb(226,26,5)"/><text x="19.7798%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,794,971 samples, 0.17%)</title><rect x="19.7864%" y="133" width="0.1731%" height="15" fill="rgb(249,33,26)"/><text x="20.0364%" y="143.50"></text></g><g><title>check_mod_attrs (3,041,250 samples, 0.29%)</title><rect x="19.6662%" y="149" width="0.2932%" height="15" fill="rgb(235,183,28)"/><text x="19.9162%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,675,737 samples, 0.16%)</title><rect x="20.0751%" y="149" width="0.1616%" height="15" fill="rgb(221,5,38)"/><text x="20.3251%" y="159.50"></text></g><g><title>misc_checking_1 (6,136,662 samples, 0.59%)</title><rect x="19.6628%" y="165" width="0.5916%" height="15" fill="rgb(247,18,42)"/><text x="19.9128%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,460,475 samples, 0.24%)</title><rect x="20.2546%" y="149" width="0.2372%" height="15" fill="rgb(241,131,45)"/><text x="20.5046%" y="159.50"></text></g><g><title>check_mod_liveness (1,982,821 samples, 0.19%)</title><rect x="20.3006%" y="133" width="0.1912%" height="15" fill="rgb(249,31,29)"/><text x="20.5506%" y="143.50"></text></g><g><title>misc_checking_2 (4,907,250 samples, 0.47%)</title><rect x="20.2544%" y="165" width="0.4731%" height="15" fill="rgb(225,111,53)"/><text x="20.5044%" y="175.50"></text></g><g><title>match_checking (2,445,165 samples, 0.24%)</title><rect x="20.4918%" y="149" width="0.2357%" height="15" fill="rgb(238,160,17)"/><text x="20.7418%" y="159.50"></text></g><g><title>check_match (2,229,234 samples, 0.21%)</title><rect x="20.5126%" y="133" width="0.2149%" height="15" fill="rgb(214,148,48)"/><text x="20.7626%" y="143.50"></text></g><g><title>check_private_in_public (1,390,714 samples, 0.13%)</title><rect x="20.7288%" y="149" width="0.1341%" height="15" fill="rgb(232,36,49)"/><text x="20.9788%" y="159.50"></text></g><g><title>death_checking (2,050,921 samples, 0.20%)</title><rect x="20.8629%" y="149" width="0.1977%" height="15" fill="rgb(209,103,24)"/><text x="21.1129%" y="159.50"></text></g><g><title>crate_lints (4,983,791 samples, 0.48%)</title><rect x="21.0609%" y="133" width="0.4805%" height="15" fill="rgb(229,88,8)"/><text x="21.3109%" y="143.50"></text></g><g><title>type_of (1,440,041 samples, 0.14%)</title><rect x="21.4025%" y="117" width="0.1388%" height="15" fill="rgb(213,181,19)"/><text x="21.6525%" y="127.50"></text></g><g><title>lint_checking (7,125,183 samples, 0.69%)</title><rect x="21.0606%" y="149" width="0.6869%" height="15" fill="rgb(254,191,54)"/><text x="21.3106%" y="159.50"></text></g><g><title>module_lints (2,138,752 samples, 0.21%)</title><rect x="21.5414%" y="133" width="0.2062%" height="15" fill="rgb(241,83,37)"/><text x="21.7914%" y="143.50"></text></g><g><title>lint_mod (2,131,572 samples, 0.21%)</title><rect x="21.5421%" y="117" width="0.2055%" height="15" fill="rgb(233,36,39)"/><text x="21.7921%" y="127.50"></text></g><g><title>privacy_access_levels (2,503,256 samples, 0.24%)</title><rect x="21.7476%" y="149" width="0.2413%" height="15" fill="rgb(226,3,54)"/><text x="21.9976%" y="159.50"></text></g><g><title>privacy_checking_modules (6,168,062 samples, 0.59%)</title><rect x="21.9889%" y="149" width="0.5947%" height="15" fill="rgb(245,192,40)"/><text x="22.2389%" y="159.50"></text></g><g><title>check_mod_privacy (6,162,302 samples, 0.59%)</title><rect x="21.9895%" y="133" width="0.5941%" height="15" fill="rgb(238,167,29)"/><text x="22.2395%" y="143.50"></text></g><g><title>misc_checking_3 (19,298,766 samples, 1.86%)</title><rect x="20.7275%" y="165" width="1.8606%" height="15" fill="rgb(232,182,51)"/><text x="20.9775%" y="175.50">m..</text></g><g><title>impl_parent (3,770,186 samples, 0.36%)</title><rect x="26.0161%" y="101" width="0.3635%" height="15" fill="rgb(231,60,39)"/><text x="26.2661%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,165,347 samples, 0.21%)</title><rect x="26.1708%" y="85" width="0.2088%" height="15" fill="rgb(208,69,12)"/><text x="26.4208%" y="95.50"></text></g><g><title>impl_trait_ref (7,759,234 samples, 0.75%)</title><rect x="26.3799%" y="101" width="0.7481%" height="15" fill="rgb(235,93,37)"/><text x="26.6299%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,920,242 samples, 0.57%)</title><rect x="26.5572%" y="85" width="0.5708%" height="15" fill="rgb(213,116,39)"/><text x="26.8072%" y="95.50"></text></g><g><title>item_attrs (1,930,593 samples, 0.19%)</title><rect x="27.1279%" y="101" width="0.1861%" height="15" fill="rgb(222,207,29)"/><text x="27.3779%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,746,300 samples, 0.17%)</title><rect x="27.1457%" y="85" width="0.1684%" height="15" fill="rgb(206,96,30)"/><text x="27.3957%" y="95.50"></text></g><g><title>predicates_of (2,170,103 samples, 0.21%)</title><rect x="27.3141%" y="101" width="0.2092%" height="15" fill="rgb(218,138,4)"/><text x="27.5641%" y="111.50"></text></g><g><title>predicates_defined_on (1,197,540 samples, 0.12%)</title><rect x="27.4079%" y="85" width="0.1155%" height="15" fill="rgb(250,191,14)"/><text x="27.6579%" y="95.50"></text></g><g><title>trait_impls_of (1,532,562 samples, 0.15%)</title><rect x="27.5236%" y="101" width="0.1478%" height="15" fill="rgb(239,60,40)"/><text x="27.7736%" y="111.50"></text></g><g><title>coherent_trait (57,629,563 samples, 5.56%)</title><rect x="22.6278%" y="133" width="5.5560%" height="15" fill="rgb(206,27,48)"/><text x="22.8778%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (57,098,367 samples, 5.50%)</title><rect x="22.6790%" y="117" width="5.5048%" height="15" fill="rgb(225,35,8)"/><text x="22.9290%" y="127.50">special..</text></g><g><title>visible_parent_map (4,844,679 samples, 0.47%)</title><rect x="27.7167%" y="101" width="0.4671%" height="15" fill="rgb(250,213,24)"/><text x="27.9667%" y="111.50"></text></g><g><title>module_children (4,373,393 samples, 0.42%)</title><rect x="27.7622%" y="85" width="0.4216%" height="15" fill="rgb(247,123,22)"/><text x="28.0122%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,265,263 samples, 0.41%)</title><rect x="27.7726%" y="69" width="0.4112%" height="15" fill="rgb(231,138,38)"/><text x="28.0226%" y="79.50"></text></g><g><title>coherence_checking (58,092,899 samples, 5.60%)</title><rect x="22.6235%" y="149" width="5.6007%" height="15" fill="rgb(231,145,46)"/><text x="22.8735%" y="159.50">coheren..</text></g><g><title>associated_item (1,578,895 samples, 0.15%)</title><rect x="42.3204%" y="85" width="0.1522%" height="15" fill="rgb(251,118,11)"/><text x="42.5704%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,243,984 samples, 0.12%)</title><rect x="42.3527%" y="69" width="0.1199%" height="15" fill="rgb(217,147,25)"/><text x="42.6027%" y="79.50"></text></g><g><title>associated_items (2,227,355 samples, 0.21%)</title><rect x="42.2635%" y="101" width="0.2147%" height="15" fill="rgb(247,81,37)"/><text x="42.5135%" y="111.50"></text></g><g><title>specializes (2,467,779 samples, 0.24%)</title><rect x="43.8744%" y="85" width="0.2379%" height="15" fill="rgb(209,12,38)"/><text x="44.1244%" y="95.50"></text></g><g><title>param_env (1,528,458 samples, 0.15%)</title><rect x="43.9650%" y="69" width="0.1474%" height="15" fill="rgb(227,1,9)"/><text x="44.2150%" y="79.50"></text></g><g><title>evaluate_obligation (16,421,671 samples, 1.58%)</title><rect x="42.5865%" y="101" width="1.5832%" height="15" fill="rgb(248,47,43)"/><text x="42.8365%" y="111.50"></text></g><g><title>method_autoderef_steps (1,272,512 samples, 0.12%)</title><rect x="44.2827%" y="101" width="0.1227%" height="15" fill="rgb(221,10,30)"/><text x="44.5327%" y="111.50"></text></g><g><title>typeck (2,581,717 samples, 0.25%)</title><rect x="44.5283%" y="101" width="0.2489%" height="15" fill="rgb(210,229,1)"/><text x="44.7783%" y="111.50"></text></g><g><title>item_bodies_checking (171,557,411 samples, 16.54%)</title><rect x="28.2628%" y="149" width="16.5397%" height="15" fill="rgb(222,148,37)"/><text x="28.5128%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (171,552,911 samples, 16.54%)</title><rect x="28.2632%" y="133" width="16.5393%" height="15" fill="rgb(234,67,33)"/><text x="28.5132%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (170,837,673 samples, 16.47%)</title><rect x="28.3322%" y="117" width="16.4704%" height="15" fill="rgb(247,98,35)"/><text x="28.5822%" y="127.50">typeck</text></g><g><title>item_types_checking (36,770,663 samples, 3.55%)</title><rect x="44.8025%" y="149" width="3.5450%" height="15" fill="rgb(247,138,52)"/><text x="45.0525%" y="159.50">item..</text></g><g><title>check_mod_item_types (36,762,693 samples, 3.54%)</title><rect x="44.8033%" y="133" width="3.5443%" height="15" fill="rgb(213,79,30)"/><text x="45.0533%" y="143.50">chec..</text></g><g><title>fn_sig (1,887,654 samples, 0.18%)</title><rect x="48.5718%" y="117" width="0.1820%" height="15" fill="rgb(246,177,23)"/><text x="48.8218%" y="127.50"></text></g><g><title>is_late_bound_map (3,249,090 samples, 0.31%)</title><rect x="48.8515%" y="101" width="0.3132%" height="15" fill="rgb(230,62,27)"/><text x="49.1015%" y="111.50"></text></g><g><title>resolve_lifetimes (2,740,954 samples, 0.26%)</title><rect x="48.9005%" y="85" width="0.2643%" height="15" fill="rgb(216,154,8)"/><text x="49.1505%" y="95.50"></text></g><g><title>generics_of (4,621,833 samples, 0.45%)</title><rect x="48.7537%" y="117" width="0.4456%" height="15" fill="rgb(244,35,45)"/><text x="49.0037%" y="127.50"></text></g><g><title>late_bound_vars_map (1,560,668 samples, 0.15%)</title><rect x="49.5254%" y="69" width="0.1505%" height="15" fill="rgb(251,115,12)"/><text x="49.7754%" y="79.50"></text></g><g><title>resolve_lifetimes (1,500,645 samples, 0.14%)</title><rect x="49.5312%" y="53" width="0.1447%" height="15" fill="rgb(240,54,50)"/><text x="49.7812%" y="63.50"></text></g><g><title>explicit_predicates_of (3,011,473 samples, 0.29%)</title><rect x="49.3954%" y="85" width="0.2903%" height="15" fill="rgb(233,84,52)"/><text x="49.6454%" y="95.50"></text></g><g><title>predicates_of (4,395,075 samples, 0.42%)</title><rect x="49.2817%" y="117" width="0.4237%" height="15" fill="rgb(207,117,47)"/><text x="49.5317%" y="127.50"></text></g><g><title>predicates_defined_on (3,939,333 samples, 0.38%)</title><rect x="49.3256%" y="101" width="0.3798%" height="15" fill="rgb(249,43,39)"/><text x="49.5756%" y="111.50"></text></g><g><title>type_collecting (15,135,963 samples, 1.46%)</title><rect x="48.3480%" y="149" width="1.4592%" height="15" fill="rgb(209,38,44)"/><text x="48.5980%" y="159.50"></text></g><g><title>collect_mod_item_types (15,120,263 samples, 1.46%)</title><rect x="48.3495%" y="133" width="1.4577%" height="15" fill="rgb(236,212,23)"/><text x="48.5995%" y="143.50"></text></g><g><title>type_of (1,056,286 samples, 0.10%)</title><rect x="49.7054%" y="117" width="0.1018%" height="15" fill="rgb(242,79,21)"/><text x="49.9554%" y="127.50"></text></g><g><title>param_env (6,515,062 samples, 0.63%)</title><rect x="52.0417%" y="117" width="0.6281%" height="15" fill="rgb(211,96,35)"/><text x="52.2917%" y="127.50"></text></g><g><title>region_scope_tree (2,342,803 samples, 0.23%)</title><rect x="52.6743%" y="117" width="0.2259%" height="15" fill="rgb(253,215,40)"/><text x="52.9243%" y="127.50"></text></g><g><title>check_impl_item_well_formed (30,314,306 samples, 2.92%)</title><rect x="49.9839%" y="133" width="2.9226%" height="15" fill="rgb(211,81,21)"/><text x="50.2339%" y="143.50">ch..</text></g><g><title>param_env (3,434,817 samples, 0.33%)</title><rect x="56.2917%" y="117" width="0.3311%" height="15" fill="rgb(208,190,38)"/><text x="56.5417%" y="127.50"></text></g><g><title>analysis (530,122,669 samples, 51.11%)</title><rect x="5.6483%" y="181" width="51.1088%" height="15" fill="rgb(235,213,38)"/><text x="5.8983%" y="191.50">analysis</text></g><g><title>type_check_crate (354,415,686 samples, 34.17%)</title><rect x="22.5881%" y="165" width="34.1690%" height="15" fill="rgb(237,122,38)"/><text x="22.8381%" y="175.50">type_check_crate</text></g><g><title>wf_checking (72,045,692 samples, 6.95%)</title><rect x="49.8112%" y="149" width="6.9459%" height="15" fill="rgb(244,218,35)"/><text x="50.0612%" y="159.50">wf_checki..</text></g><g><title>check_item_well_formed (39,940,786 samples, 3.85%)</title><rect x="52.9065%" y="133" width="3.8507%" height="15" fill="rgb(240,68,47)"/><text x="53.1565%" y="143.50">chec..</text></g><g><title>predicates_of (1,245,393 samples, 0.12%)</title><rect x="61.0188%" y="117" width="0.1201%" height="15" fill="rgb(210,16,53)"/><text x="61.2688%" y="127.50"></text></g><g><title>param_env (2,880,497 samples, 0.28%)</title><rect x="60.8625%" y="133" width="0.2777%" height="15" fill="rgb(235,124,12)"/><text x="61.1125%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,002,587 samples, 0.68%)</title><rect x="60.5223%" y="149" width="0.6751%" height="15" fill="rgb(224,169,11)"/><text x="60.7723%" y="159.50"></text></g><g><title>codegen_module (45,364,870 samples, 4.37%)</title><rect x="56.9929%" y="165" width="4.3736%" height="15" fill="rgb(250,166,2)"/><text x="57.2429%" y="175.50">codeg..</text></g><g><title>codegen_crate (47,878,776 samples, 4.62%)</title><rect x="56.7583%" y="181" width="4.6160%" height="15" fill="rgb(242,216,29)"/><text x="57.0083%" y="191.50">codeg..</text></g><g><title>LLVM_module_codegen (192,765,206 samples, 18.58%)</title><rect x="61.3961%" y="165" width="18.5844%" height="15" fill="rgb(230,116,27)"/><text x="61.6461%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (180,175,379 samples, 17.37%)</title><rect x="62.6099%" y="149" width="17.3706%" height="15" fill="rgb(228,99,48)"/><text x="62.8599%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (204,578,587 samples, 19.72%)</title><rect x="61.3743%" y="181" width="19.7233%" height="15" fill="rgb(253,11,6)"/><text x="61.6243%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,586,998 samples, 1.12%)</title><rect x="79.9805%" y="165" width="1.1171%" height="15" fill="rgb(247,143,39)"/><text x="80.2305%" y="175.50"></text></g><g><title>metadata_register_crate (1,037,600 samples, 0.10%)</title><rect x="84.5849%" y="133" width="0.1000%" height="15" fill="rgb(236,97,10)"/><text x="84.8349%" y="143.50"></text></g><g><title>macro_expand_crate (35,975,025 samples, 3.47%)</title><rect x="81.2308%" y="165" width="3.4683%" height="15" fill="rgb(233,208,19)"/><text x="81.4808%" y="175.50">mac..</text></g><g><title>expand_crate (35,959,285 samples, 3.47%)</title><rect x="81.2323%" y="149" width="3.4668%" height="15" fill="rgb(216,164,2)"/><text x="81.4823%" y="159.50">exp..</text></g><g><title>pre_AST_expansion_lint_checks (1,325,413 samples, 0.13%)</title><rect x="84.6995%" y="165" width="0.1278%" height="15" fill="rgb(220,129,5)"/><text x="84.9495%" y="175.50"></text></g><g><title>late_resolve_crate (10,900,951 samples, 1.05%)</title><rect x="84.8810%" y="149" width="1.0510%" height="15" fill="rgb(242,17,10)"/><text x="85.1310%" y="159.50"></text></g><g><title>configure_and_expand (51,118,109 samples, 4.93%)</title><rect x="81.0976%" y="181" width="4.9283%" height="15" fill="rgb(242,107,0)"/><text x="81.3476%" y="191.50">config..</text></g><g><title>resolve_crate (12,431,927 samples, 1.20%)</title><rect x="84.8273%" y="165" width="1.1986%" height="15" fill="rgb(251,28,31)"/><text x="85.0773%" y="175.50"></text></g><g><title>drop_ast (2,223,152 samples, 0.21%)</title><rect x="86.0258%" y="181" width="0.2143%" height="15" fill="rgb(233,223,10)"/><text x="86.2758%" y="191.50"></text></g><g><title>early_lint_checks (2,275,464 samples, 0.22%)</title><rect x="86.2424%" y="181" width="0.2194%" height="15" fill="rgb(215,21,27)"/><text x="86.4924%" y="191.50"></text></g><g><title>free_global_ctxt (11,537,087 samples, 1.11%)</title><rect x="86.4617%" y="181" width="1.1123%" height="15" fill="rgb(232,23,21)"/><text x="86.7117%" y="191.50"></text></g><g><title>item_attrs (1,264,524 samples, 0.12%)</title><rect x="88.8121%" y="85" width="0.1219%" height="15" fill="rgb(244,5,23)"/><text x="89.0621%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,239,613 samples, 0.12%)</title><rect x="88.8145%" y="69" width="0.1195%" height="15" fill="rgb(226,81,46)"/><text x="89.0645%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,657,979 samples, 0.16%)</title><rect x="88.7969%" y="101" width="0.1598%" height="15" fill="rgb(247,70,30)"/><text x="89.0469%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,261,961 samples, 0.12%)</title><rect x="89.2144%" y="85" width="0.1217%" height="15" fill="rgb(212,68,19)"/><text x="89.4644%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,736,407 samples, 0.17%)</title><rect x="89.3361%" y="85" width="0.1674%" height="15" fill="rgb(240,187,13)"/><text x="89.5861%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,263,302 samples, 0.31%)</title><rect x="89.5359%" y="69" width="0.3146%" height="15" fill="rgb(223,113,26)"/><text x="89.7859%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,214,182 samples, 0.31%)</title><rect x="89.5406%" y="53" width="0.3099%" height="15" fill="rgb(206,192,2)"/><text x="89.7906%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,135,930 samples, 0.30%)</title><rect x="89.5481%" y="37" width="0.3023%" height="15" fill="rgb(241,108,4)"/><text x="89.7981%" y="47.50"></text></g><g><title>optimized_mir (8,806,380 samples, 0.85%)</title><rect x="89.0022%" y="101" width="0.8490%" height="15" fill="rgb(247,173,49)"/><text x="89.2522%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,417,655 samples, 0.33%)</title><rect x="89.5217%" y="85" width="0.3295%" height="15" fill="rgb(224,114,35)"/><text x="89.7717%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,423,334 samples, 0.14%)</title><rect x="89.8943%" y="85" width="0.1372%" height="15" fill="rgb(245,159,27)"/><text x="90.1443%" y="95.50"></text></g><g><title>resolve_instance (3,205,001 samples, 0.31%)</title><rect x="89.8512%" y="101" width="0.3090%" height="15" fill="rgb(245,172,44)"/><text x="90.1012%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (17,393,917 samples, 1.68%)</title><rect x="88.6203%" y="117" width="1.6769%" height="15" fill="rgb(236,23,11)"/><text x="88.8703%" y="127.50"></text></g><g><title>monomorphization_collector (17,571,759 samples, 1.69%)</title><rect x="88.6198%" y="133" width="1.6941%" height="15" fill="rgb(205,117,38)"/><text x="88.8698%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (19,119,004 samples, 1.84%)</title><rect x="88.6166%" y="149" width="1.8433%" height="15" fill="rgb(237,72,25)"/><text x="88.8666%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,513,205 samples, 0.15%)</title><rect x="90.3139%" y="133" width="0.1459%" height="15" fill="rgb(244,70,9)"/><text x="90.5639%" y="143.50"></text></g><g><title>exported_symbols (20,388,487 samples, 1.97%)</title><rect x="88.6111%" y="165" width="1.9656%" height="15" fill="rgb(217,125,39)"/><text x="88.8611%" y="175.50">e..</text></g><g><title>reachable_non_generics (1,212,922 samples, 0.12%)</title><rect x="90.4598%" y="149" width="0.1169%" height="15" fill="rgb(235,36,10)"/><text x="90.7098%" y="159.50"></text></g><g><title>reachable_set (1,063,151 samples, 0.10%)</title><rect x="90.4743%" y="133" width="0.1025%" height="15" fill="rgb(251,123,47)"/><text x="90.7243%" y="143.50"></text></g><g><title>layout_of (1,460,091 samples, 0.14%)</title><rect x="92.4653%" y="149" width="0.1408%" height="15" fill="rgb(221,13,13)"/><text x="92.7153%" y="159.50"></text></g><g><title>needs_drop_raw (1,282,223 samples, 0.12%)</title><rect x="94.6281%" y="133" width="0.1236%" height="15" fill="rgb(238,131,9)"/><text x="94.8781%" y="143.50"></text></g><g><title>is_copy_raw (1,185,332 samples, 0.11%)</title><rect x="94.6375%" y="117" width="0.1143%" height="15" fill="rgb(211,50,8)"/><text x="94.8875%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (22,452,627 samples, 2.16%)</title><rect x="92.6061%" y="149" width="2.1646%" height="15" fill="rgb(245,182,24)"/><text x="92.8561%" y="159.50">m..</text></g><g><title>optimized_mir (42,868,984 samples, 4.13%)</title><rect x="90.6392%" y="165" width="4.1330%" height="15" fill="rgb(242,14,37)"/><text x="90.8892%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (75,621,178 samples, 7.29%)</title><rect x="87.5740%" y="181" width="7.2906%" height="15" fill="rgb(246,228,12)"/><text x="87.8240%" y="191.50">generate_c..</text></g><g><title>hir_lowering (23,289,326 samples, 2.25%)</title><rect x="94.8646%" y="181" width="2.2453%" height="15" fill="rgb(213,55,15)"/><text x="95.1146%" y="191.50">h..</text></g><g><title>link_crate (3,522,205 samples, 0.34%)</title><rect x="97.1352%" y="165" width="0.3396%" height="15" fill="rgb(209,9,3)"/><text x="97.3852%" y="175.50"></text></g><g><title>link_binary (3,486,325 samples, 0.34%)</title><rect x="97.1387%" y="149" width="0.3361%" height="15" fill="rgb(230,59,30)"/><text x="97.3887%" y="159.50"></text></g><g><title>link_rlib (2,697,777 samples, 0.26%)</title><rect x="97.2147%" y="133" width="0.2601%" height="15" fill="rgb(209,121,21)"/><text x="97.4647%" y="143.50"></text></g><g><title>link (3,795,308 samples, 0.37%)</title><rect x="97.1099%" y="181" width="0.3659%" height="15" fill="rgb(220,109,13)"/><text x="97.3599%" y="191.50"></text></g><g><title>parse_crate (21,101,314 samples, 2.03%)</title><rect x="97.4758%" y="181" width="2.0344%" height="15" fill="rgb(232,18,1)"/><text x="97.7258%" y="191.50">p..</text></g><g><title>self_profile_alloc_query_strings (3,833,109 samples, 0.37%)</title><rect x="99.5378%" y="181" width="0.3695%" height="15" fill="rgb(215,41,42)"/><text x="99.7878%" y="191.50"></text></g><g><title>all (1,037,243,166 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,037,243,166 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>