<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,605,158 samples, 10.56%)</title><rect x="0.3350%" y="197" width="10.5581%" height="15" fill="rgb(227,0,7)"/><text x="0.5850%" y="207.50">LLVM_passes</text></g><g><title>param_env (156,552 samples, 0.11%)</title><rect x="17.4140%" y="117" width="0.1059%" height="15" fill="rgb(217,0,24)"/><text x="17.6640%" y="127.50"></text></g><g><title>codegen_fn_attrs (176,763 samples, 0.12%)</title><rect x="17.6690%" y="101" width="0.1196%" height="15" fill="rgb(221,193,54)"/><text x="17.9190%" y="111.50"></text></g><g><title>adt_drop_tys (255,853 samples, 0.17%)</title><rect x="19.0457%" y="69" width="0.1731%" height="15" fill="rgb(248,212,6)"/><text x="19.2957%" y="79.50"></text></g><g><title>is_copy_raw (900,568 samples, 0.61%)</title><rect x="19.2188%" y="69" width="0.6093%" height="15" fill="rgb(208,68,35)"/><text x="19.4688%" y="79.50"></text></g><g><title>evaluate_obligation (800,908 samples, 0.54%)</title><rect x="19.2862%" y="53" width="0.5419%" height="15" fill="rgb(232,128,0)"/><text x="19.5362%" y="63.50"></text></g><g><title>needs_drop_raw (1,248,704 samples, 0.84%)</title><rect x="18.9877%" y="85" width="0.8448%" height="15" fill="rgb(207,160,47)"/><text x="19.2377%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (164,831 samples, 0.11%)</title><rect x="19.9217%" y="69" width="0.1115%" height="15" fill="rgb(228,23,34)"/><text x="20.1717%" y="79.50"></text></g><g><title>impl_parent (518,756 samples, 0.35%)</title><rect x="20.6963%" y="53" width="0.3510%" height="15" fill="rgb(218,30,26)"/><text x="20.9463%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (333,734 samples, 0.23%)</title><rect x="20.8215%" y="37" width="0.2258%" height="15" fill="rgb(220,122,19)"/><text x="21.0715%" y="47.50"></text></g><g><title>specialization_graph_of (2,995,011 samples, 2.03%)</title><rect x="20.0829%" y="69" width="2.0264%" height="15" fill="rgb(250,228,42)"/><text x="20.3329%" y="79.50">s..</text></g><g><title>impl_trait_ref (1,569,684 samples, 1.06%)</title><rect x="21.0473%" y="53" width="1.0620%" height="15" fill="rgb(240,193,28)"/><text x="21.2973%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,390,794 samples, 0.94%)</title><rect x="21.1683%" y="37" width="0.9410%" height="15" fill="rgb(216,20,37)"/><text x="21.4183%" y="47.50"></text></g><g><title>resolve_instance (3,408,204 samples, 2.31%)</title><rect x="19.8325%" y="85" width="2.3059%" height="15" fill="rgb(206,188,39)"/><text x="20.0825%" y="95.50">r..</text></g><g><title>thir_body (608,686 samples, 0.41%)</title><rect x="22.1439%" y="85" width="0.4118%" height="15" fill="rgb(217,207,13)"/><text x="22.3939%" y="95.50"></text></g><g><title>mir_const (8,017,813 samples, 5.42%)</title><rect x="17.1341%" y="133" width="5.4247%" height="15" fill="rgb(231,73,38)"/><text x="17.3841%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (7,447,698 samples, 5.04%)</title><rect x="17.5199%" y="117" width="5.0390%" height="15" fill="rgb(225,20,46)"/><text x="17.7699%" y="127.50">unsafe..</text></g><g><title>mir_built (7,050,512 samples, 4.77%)</title><rect x="17.7886%" y="101" width="4.7702%" height="15" fill="rgb(210,31,41)"/><text x="18.0386%" y="111.50">mir_bu..</text></g><g><title>mir_const_qualif (199,053 samples, 0.13%)</title><rect x="22.5588%" y="133" width="0.1347%" height="15" fill="rgb(221,200,47)"/><text x="22.8088%" y="143.50"></text></g><g><title>mir_promoted (8,722,921 samples, 5.90%)</title><rect x="16.7920%" y="149" width="5.9017%" height="15" fill="rgb(226,26,5)"/><text x="17.0420%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (475,362 samples, 0.32%)</title><rect x="22.6937%" y="149" width="0.3216%" height="15" fill="rgb(249,33,26)"/><text x="22.9437%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (283,472 samples, 0.19%)</title><rect x="23.0153%" y="149" width="0.1918%" height="15" fill="rgb(235,183,28)"/><text x="23.2653%" y="159.50"></text></g><g><title>normalize_projection_ty (184,832 samples, 0.13%)</title><rect x="23.0821%" y="133" width="0.1251%" height="15" fill="rgb(221,5,38)"/><text x="23.3321%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,031,689 samples, 1.37%)</title><rect x="23.2800%" y="149" width="1.3746%" height="15" fill="rgb(247,18,42)"/><text x="23.5300%" y="159.50"></text></g><g><title>MIR_borrow_checking (20,160,565 samples, 13.64%)</title><rect x="11.0229%" y="181" width="13.6402%" height="15" fill="rgb(241,131,45)"/><text x="11.2729%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,130,205 samples, 13.62%)</title><rect x="11.0434%" y="165" width="13.6197%" height="15" fill="rgb(249,31,29)"/><text x="11.2934%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (212,641 samples, 0.14%)</title><rect x="24.9356%" y="149" width="0.1439%" height="15" fill="rgb(225,111,53)"/><text x="25.1856%" y="159.50"></text></g><g><title>check_mod_attrs (365,084 samples, 0.25%)</title><rect x="24.8326%" y="165" width="0.2470%" height="15" fill="rgb(238,160,17)"/><text x="25.0826%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (235,602 samples, 0.16%)</title><rect x="25.1410%" y="165" width="0.1594%" height="15" fill="rgb(214,148,48)"/><text x="25.3910%" y="175.50"></text></g><g><title>misc_checking_1 (740,158 samples, 0.50%)</title><rect x="24.8200%" y="181" width="0.5008%" height="15" fill="rgb(232,36,49)"/><text x="25.0700%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (342,103 samples, 0.23%)</title><rect x="25.3218%" y="165" width="0.2315%" height="15" fill="rgb(209,103,24)"/><text x="25.5718%" y="175.50"></text></g><g><title>check_mod_liveness (283,052 samples, 0.19%)</title><rect x="25.3617%" y="149" width="0.1915%" height="15" fill="rgb(229,88,8)"/><text x="25.6117%" y="159.50"></text></g><g><title>misc_checking_2 (690,897 samples, 0.47%)</title><rect x="25.3208%" y="181" width="0.4674%" height="15" fill="rgb(213,181,19)"/><text x="25.5708%" y="191.50"></text></g><g><title>match_checking (347,324 samples, 0.23%)</title><rect x="25.5533%" y="165" width="0.2350%" height="15" fill="rgb(254,191,54)"/><text x="25.8033%" y="175.50"></text></g><g><title>check_match (337,864 samples, 0.23%)</title><rect x="25.5597%" y="149" width="0.2286%" height="15" fill="rgb(241,83,37)"/><text x="25.8097%" y="159.50"></text></g><g><title>death_checking (194,982 samples, 0.13%)</title><rect x="25.8604%" y="165" width="0.1319%" height="15" fill="rgb(233,36,39)"/><text x="26.1104%" y="175.50"></text></g><g><title>crate_lints (2,747,948 samples, 1.86%)</title><rect x="25.9934%" y="149" width="1.8592%" height="15" fill="rgb(226,3,54)"/><text x="26.2434%" y="159.50">c..</text></g><g><title>type_of (1,945,900 samples, 1.32%)</title><rect x="26.5361%" y="133" width="1.3166%" height="15" fill="rgb(245,192,40)"/><text x="26.7861%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,706,740 samples, 1.15%)</title><rect x="26.6979%" y="117" width="1.1547%" height="15" fill="rgb(238,167,29)"/><text x="26.9479%" y="127.50"></text></g><g><title>lint_checking (3,005,791 samples, 2.03%)</title><rect x="25.9923%" y="165" width="2.0337%" height="15" fill="rgb(232,182,51)"/><text x="26.2423%" y="175.50">l..</text></g><g><title>module_lints (256,123 samples, 0.17%)</title><rect x="27.8527%" y="149" width="0.1733%" height="15" fill="rgb(231,60,39)"/><text x="28.1027%" y="159.50"></text></g><g><title>lint_mod (252,643 samples, 0.17%)</title><rect x="27.8550%" y="133" width="0.1709%" height="15" fill="rgb(208,69,12)"/><text x="28.1050%" y="143.50"></text></g><g><title>privacy_checking_modules (457,175 samples, 0.31%)</title><rect x="28.0892%" y="165" width="0.3093%" height="15" fill="rgb(235,93,37)"/><text x="28.3392%" y="175.50"></text></g><g><title>check_mod_privacy (455,025 samples, 0.31%)</title><rect x="28.0907%" y="149" width="0.3079%" height="15" fill="rgb(213,116,39)"/><text x="28.3407%" y="159.50"></text></g><g><title>misc_checking_3 (3,870,160 samples, 2.62%)</title><rect x="25.7882%" y="181" width="2.6185%" height="15" fill="rgb(222,207,29)"/><text x="26.0382%" y="191.50">mi..</text></g><g><title>impl_parent (362,532 samples, 0.25%)</title><rect x="28.6877%" y="117" width="0.2453%" height="15" fill="rgb(206,96,30)"/><text x="28.9377%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (282,972 samples, 0.19%)</title><rect x="28.7416%" y="101" width="0.1915%" height="15" fill="rgb(218,138,4)"/><text x="28.9916%" y="111.50"></text></g><g><title>impl_trait_ref (936,459 samples, 0.63%)</title><rect x="28.9330%" y="117" width="0.6336%" height="15" fill="rgb(250,191,14)"/><text x="29.1830%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (854,907 samples, 0.58%)</title><rect x="28.9882%" y="101" width="0.5784%" height="15" fill="rgb(239,60,40)"/><text x="29.2382%" y="111.50"></text></g><g><title>coherent_trait (1,783,098 samples, 1.21%)</title><rect x="28.4393%" y="149" width="1.2064%" height="15" fill="rgb(206,27,48)"/><text x="28.6893%" y="159.50"></text></g><g><title>specialization_graph_of (1,776,448 samples, 1.20%)</title><rect x="28.4438%" y="133" width="1.2019%" height="15" fill="rgb(225,35,8)"/><text x="28.6938%" y="143.50"></text></g><g><title>coherence_checking (1,829,849 samples, 1.24%)</title><rect x="28.4315%" y="165" width="1.2380%" height="15" fill="rgb(250,213,24)"/><text x="28.6815%" y="175.50"></text></g><g><title>associated_item (488,124 samples, 0.33%)</title><rect x="41.9170%" y="101" width="0.3303%" height="15" fill="rgb(247,123,22)"/><text x="42.1670%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (412,533 samples, 0.28%)</title><rect x="41.9681%" y="85" width="0.2791%" height="15" fill="rgb(231,138,38)"/><text x="42.2181%" y="95.50"></text></g><g><title>associated_items (637,876 samples, 0.43%)</title><rect x="41.8347%" y="117" width="0.4316%" height="15" fill="rgb(231,145,46)"/><text x="42.0847%" y="127.50"></text></g><g><title>adt_dtorck_constraint (164,511 samples, 0.11%)</title><rect x="42.5735%" y="85" width="0.1113%" height="15" fill="rgb(251,118,11)"/><text x="42.8235%" y="95.50"></text></g><g><title>adt_dtorck_constraint (328,893 samples, 0.22%)</title><rect x="42.4852%" y="101" width="0.2225%" height="15" fill="rgb(217,147,25)"/><text x="42.7352%" y="111.50"></text></g><g><title>dropck_outlives (652,377 samples, 0.44%)</title><rect x="42.3110%" y="117" width="0.4414%" height="15" fill="rgb(247,81,37)"/><text x="42.5610%" y="127.50"></text></g><g><title>adt_def (172,013 samples, 0.12%)</title><rect x="43.4927%" y="85" width="0.1164%" height="15" fill="rgb(209,12,38)"/><text x="43.7427%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (168,613 samples, 0.11%)</title><rect x="43.4950%" y="69" width="0.1141%" height="15" fill="rgb(227,1,9)"/><text x="43.7450%" y="79.50"></text></g><g><title>adt_sized_constraint (270,984 samples, 0.18%)</title><rect x="43.4804%" y="101" width="0.1833%" height="15" fill="rgb(248,47,43)"/><text x="43.7304%" y="111.50"></text></g><g><title>evaluate_obligation (2,287,905 samples, 1.55%)</title><rect x="42.7524%" y="117" width="1.5479%" height="15" fill="rgb(221,10,30)"/><text x="43.0024%" y="127.50"></text></g><g><title>trait_impls_of (584,594 samples, 0.40%)</title><rect x="43.9048%" y="101" width="0.3955%" height="15" fill="rgb(210,229,1)"/><text x="44.1548%" y="111.50"></text></g><g><title>implementations_of_trait (186,491 samples, 0.13%)</title><rect x="44.1741%" y="85" width="0.1262%" height="15" fill="rgb(222,148,37)"/><text x="44.4241%" y="95.50"></text></g><g><title>evaluate_obligation (213,102 samples, 0.14%)</title><rect x="44.8039%" y="101" width="0.1442%" height="15" fill="rgb(234,67,33)"/><text x="45.0539%" y="111.50"></text></g><g><title>method_autoderef_steps (376,903 samples, 0.26%)</title><rect x="44.7023%" y="117" width="0.2550%" height="15" fill="rgb(247,98,35)"/><text x="44.9523%" y="127.50"></text></g><g><title>explicit_predicates_of (174,324 samples, 0.12%)</title><rect x="45.1094%" y="85" width="0.1179%" height="15" fill="rgb(247,138,52)"/><text x="45.3594%" y="95.50"></text></g><g><title>predicates_of (424,907 samples, 0.29%)</title><rect x="44.9727%" y="117" width="0.2875%" height="15" fill="rgb(213,79,30)"/><text x="45.2227%" y="127.50"></text></g><g><title>predicates_defined_on (303,156 samples, 0.21%)</title><rect x="45.0550%" y="101" width="0.2051%" height="15" fill="rgb(246,177,23)"/><text x="45.3050%" y="111.50"></text></g><g><title>item_bodies_checking (23,200,125 samples, 15.70%)</title><rect x="29.6797%" y="165" width="15.6967%" height="15" fill="rgb(230,62,27)"/><text x="29.9297%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,197,335 samples, 15.69%)</title><rect x="29.6816%" y="149" width="15.6948%" height="15" fill="rgb(216,154,8)"/><text x="29.9316%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,176,715 samples, 15.68%)</title><rect x="29.6955%" y="133" width="15.6809%" height="15" fill="rgb(244,35,45)"/><text x="29.9455%" y="143.50">typeck</text></g><g><title>impl_trait_ref (178,442 samples, 0.12%)</title><rect x="45.5447%" y="85" width="0.1207%" height="15" fill="rgb(251,115,12)"/><text x="45.7947%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (158,212 samples, 0.11%)</title><rect x="45.5584%" y="69" width="0.1070%" height="15" fill="rgb(240,54,50)"/><text x="45.8084%" y="79.50"></text></g><g><title>adt_destructor (353,173 samples, 0.24%)</title><rect x="45.4501%" y="133" width="0.2389%" height="15" fill="rgb(233,84,52)"/><text x="45.7001%" y="143.50"></text></g><g><title>coherent_trait (349,403 samples, 0.24%)</title><rect x="45.4527%" y="117" width="0.2364%" height="15" fill="rgb(207,117,47)"/><text x="45.7027%" y="127.50"></text></g><g><title>specialization_graph_of (347,883 samples, 0.24%)</title><rect x="45.4537%" y="101" width="0.2354%" height="15" fill="rgb(249,43,39)"/><text x="45.7037%" y="111.50"></text></g><g><title>item_types_checking (594,977 samples, 0.40%)</title><rect x="45.3764%" y="165" width="0.4025%" height="15" fill="rgb(209,38,44)"/><text x="45.6264%" y="175.50"></text></g><g><title>check_mod_item_types (592,517 samples, 0.40%)</title><rect x="45.3781%" y="149" width="0.4009%" height="15" fill="rgb(236,212,23)"/><text x="45.6281%" y="159.50"></text></g><g><title>is_late_bound_map (298,484 samples, 0.20%)</title><rect x="45.9366%" y="117" width="0.2019%" height="15" fill="rgb(242,79,21)"/><text x="46.1866%" y="127.50"></text></g><g><title>resolve_lifetimes (279,654 samples, 0.19%)</title><rect x="45.9494%" y="101" width="0.1892%" height="15" fill="rgb(211,96,35)"/><text x="46.1994%" y="111.50"></text></g><g><title>generics_of (410,195 samples, 0.28%)</title><rect x="45.8982%" y="133" width="0.2775%" height="15" fill="rgb(253,215,40)"/><text x="46.1482%" y="143.50"></text></g><g><title>predicates_of (303,693 samples, 0.21%)</title><rect x="46.1873%" y="133" width="0.2055%" height="15" fill="rgb(211,81,21)"/><text x="46.4373%" y="143.50"></text></g><g><title>predicates_defined_on (291,882 samples, 0.20%)</title><rect x="46.1952%" y="117" width="0.1975%" height="15" fill="rgb(208,190,38)"/><text x="46.4452%" y="127.50"></text></g><g><title>inferred_outlives_of (157,941 samples, 0.11%)</title><rect x="46.2859%" y="101" width="0.1069%" height="15" fill="rgb(235,213,38)"/><text x="46.5359%" y="111.50"></text></g><g><title>inferred_outlives_crate (150,001 samples, 0.10%)</title><rect x="46.2912%" y="85" width="0.1015%" height="15" fill="rgb(237,122,38)"/><text x="46.5412%" y="95.50"></text></g><g><title>type_collecting (975,170 samples, 0.66%)</title><rect x="45.7801%" y="165" width="0.6598%" height="15" fill="rgb(244,218,35)"/><text x="46.0301%" y="175.50"></text></g><g><title>collect_mod_item_types (967,860 samples, 0.65%)</title><rect x="45.7850%" y="149" width="0.6548%" height="15" fill="rgb(240,68,47)"/><text x="46.0350%" y="159.50"></text></g><g><title>evaluate_obligation (177,380 samples, 0.12%)</title><rect x="46.7407%" y="133" width="0.1200%" height="15" fill="rgb(210,16,53)"/><text x="46.9907%" y="143.50"></text></g><g><title>check_impl_item_well_formed (800,066 samples, 0.54%)</title><rect x="46.4831%" y="149" width="0.5413%" height="15" fill="rgb(235,124,12)"/><text x="46.7331%" y="159.50"></text></g><g><title>param_env (154,362 samples, 0.10%)</title><rect x="47.5355%" y="133" width="0.1044%" height="15" fill="rgb(224,169,11)"/><text x="47.7855%" y="143.50"></text></g><g><title>trait_impls_of (182,331 samples, 0.12%)</title><rect x="47.7332%" y="133" width="0.1234%" height="15" fill="rgb(250,166,2)"/><text x="47.9832%" y="143.50"></text></g><g><title>analysis (54,671,376 samples, 36.99%)</title><rect x="10.8931%" y="197" width="36.9895%" height="15" fill="rgb(242,216,29)"/><text x="11.1431%" y="207.50">analysis</text></g><g><title>type_check_crate (28,785,842 samples, 19.48%)</title><rect x="28.4067%" y="181" width="19.4759%" height="15" fill="rgb(230,116,27)"/><text x="28.6567%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,130,991 samples, 1.44%)</title><rect x="46.4408%" y="165" width="1.4418%" height="15" fill="rgb(228,99,48)"/><text x="46.6908%" y="175.50"></text></g><g><title>check_item_well_formed (1,268,463 samples, 0.86%)</title><rect x="47.0244%" y="149" width="0.8582%" height="15" fill="rgb(253,11,6)"/><text x="47.2744%" y="159.50"></text></g><g><title>adt_sized_constraint (170,264 samples, 0.12%)</title><rect x="53.2465%" y="133" width="0.1152%" height="15" fill="rgb(247,143,39)"/><text x="53.4965%" y="143.50"></text></g><g><title>eval_to_const_value_raw (222,542 samples, 0.15%)</title><rect x="53.3648%" y="133" width="0.1506%" height="15" fill="rgb(236,97,10)"/><text x="53.6148%" y="143.50"></text></g><g><title>eval_to_const_value_raw (205,452 samples, 0.14%)</title><rect x="53.3763%" y="117" width="0.1390%" height="15" fill="rgb(233,208,19)"/><text x="53.6263%" y="127.50"></text></g><g><title>eval_to_allocation_raw (177,332 samples, 0.12%)</title><rect x="53.3954%" y="101" width="0.1200%" height="15" fill="rgb(216,164,2)"/><text x="53.6454%" y="111.50"></text></g><g><title>layout_of (790,349 samples, 0.53%)</title><rect x="53.1804%" y="149" width="0.5347%" height="15" fill="rgb(220,129,5)"/><text x="53.4304%" y="159.50"></text></g><g><title>param_env (409,894 samples, 0.28%)</title><rect x="53.7151%" y="149" width="0.2773%" height="15" fill="rgb(242,17,10)"/><text x="53.9651%" y="159.50"></text></g><g><title>fn_abi_of_instance (1,651,677 samples, 1.12%)</title><rect x="52.8767%" y="165" width="1.1175%" height="15" fill="rgb(242,107,0)"/><text x="53.1267%" y="175.50"></text></g><g><title>symbol_name (255,212 samples, 0.17%)</title><rect x="54.1070%" y="165" width="0.1727%" height="15" fill="rgb(251,28,31)"/><text x="54.3570%" y="175.50"></text></g><g><title>codegen_module (8,209,103 samples, 5.55%)</title><rect x="48.7268%" y="181" width="5.5541%" height="15" fill="rgb(233,223,10)"/><text x="48.9768%" y="191.50">codegen..</text></g><g><title>codegen_crate (9,525,147 samples, 6.44%)</title><rect x="47.8870%" y="197" width="6.4445%" height="15" fill="rgb(215,21,27)"/><text x="48.1370%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (33,058,696 samples, 22.37%)</title><rect x="54.3854%" y="181" width="22.3668%" height="15" fill="rgb(232,23,21)"/><text x="54.6354%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (31,430,070 samples, 21.26%)</title><rect x="55.4873%" y="165" width="21.2649%" height="15" fill="rgb(244,5,23)"/><text x="55.7373%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (34,773,494 samples, 23.53%)</title><rect x="54.3315%" y="197" width="23.5270%" height="15" fill="rgb(226,81,46)"/><text x="54.5815%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,635,107 samples, 1.11%)</title><rect x="76.7523%" y="181" width="1.1063%" height="15" fill="rgb(247,70,30)"/><text x="77.0023%" y="191.50"></text></g><g><title>metadata_load_macro (156,184 samples, 0.11%)</title><rect x="83.6618%" y="149" width="0.1057%" height="15" fill="rgb(212,68,19)"/><text x="83.9118%" y="159.50"></text></g><g><title>metadata_register_crate (1,268,632 samples, 0.86%)</title><rect x="83.7674%" y="149" width="0.8583%" height="15" fill="rgb(240,187,13)"/><text x="84.0174%" y="159.50"></text></g><g><title>metadata_register_crate (461,672 samples, 0.31%)</title><rect x="84.3134%" y="133" width="0.3124%" height="15" fill="rgb(223,113,26)"/><text x="84.5634%" y="143.50"></text></g><g><title>macro_expand_crate (9,800,159 samples, 6.63%)</title><rect x="78.0415%" y="181" width="6.6306%" height="15" fill="rgb(206,192,2)"/><text x="78.2915%" y="191.50">macro_exp..</text></g><g><title>expand_crate (9,790,079 samples, 6.62%)</title><rect x="78.0483%" y="165" width="6.6238%" height="15" fill="rgb(241,108,4)"/><text x="78.2983%" y="175.50">expand_cr..</text></g><g><title>late_resolve_crate (750,307 samples, 0.51%)</title><rect x="84.7821%" y="165" width="0.5076%" height="15" fill="rgb(247,173,49)"/><text x="85.0321%" y="175.50"></text></g><g><title>configure_and_expand (11,036,951 samples, 7.47%)</title><rect x="77.8585%" y="197" width="7.4674%" height="15" fill="rgb(224,114,35)"/><text x="78.1085%" y="207.50">configure_..</text></g><g><title>resolve_crate (884,379 samples, 0.60%)</title><rect x="84.7276%" y="181" width="0.5984%" height="15" fill="rgb(245,159,27)"/><text x="84.9776%" y="191.50"></text></g><g><title>early_lint_checks (208,782 samples, 0.14%)</title><rect x="85.4061%" y="197" width="0.1413%" height="15" fill="rgb(245,172,44)"/><text x="85.6561%" y="207.50"></text></g><g><title>free_global_ctxt (4,011,671 samples, 2.71%)</title><rect x="85.5473%" y="197" width="2.7142%" height="15" fill="rgb(236,23,11)"/><text x="85.7973%" y="207.50">fr..</text></g><g><title>codegen_fn_attrs (174,962 samples, 0.12%)</title><rect x="89.0541%" y="117" width="0.1184%" height="15" fill="rgb(205,117,38)"/><text x="89.3041%" y="127.50"></text></g><g><title>is_reachable_non_generic (152,491 samples, 0.10%)</title><rect x="89.1976%" y="117" width="0.1032%" height="15" fill="rgb(237,72,25)"/><text x="89.4476%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (216,974 samples, 0.15%)</title><rect x="89.5726%" y="101" width="0.1468%" height="15" fill="rgb(244,70,9)"/><text x="89.8226%" y="111.50"></text></g><g><title>eval_to_const_value_raw (168,351 samples, 0.11%)</title><rect x="89.7298%" y="85" width="0.1139%" height="15" fill="rgb(217,125,39)"/><text x="89.9798%" y="95.50"></text></g><g><title>eval_to_const_value_raw (164,981 samples, 0.11%)</title><rect x="89.7321%" y="69" width="0.1116%" height="15" fill="rgb(235,36,10)"/><text x="89.9821%" y="79.50"></text></g><g><title>eval_to_allocation_raw (158,041 samples, 0.11%)</title><rect x="89.7368%" y="53" width="0.1069%" height="15" fill="rgb(251,123,47)"/><text x="89.9868%" y="63.50"></text></g><g><title>optimized_mir (803,419 samples, 0.54%)</title><rect x="89.3007%" y="117" width="0.5436%" height="15" fill="rgb(221,13,13)"/><text x="89.5507%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (184,582 samples, 0.12%)</title><rect x="89.7194%" y="101" width="0.1249%" height="15" fill="rgb(238,131,9)"/><text x="89.9694%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (151,262 samples, 0.10%)</title><rect x="89.8846%" y="101" width="0.1023%" height="15" fill="rgb(211,50,8)"/><text x="90.1346%" y="111.50"></text></g><g><title>impl_parent (164,162 samples, 0.11%)</title><rect x="90.3042%" y="85" width="0.1111%" height="15" fill="rgb(245,182,24)"/><text x="90.5542%" y="95.50"></text></g><g><title>specialization_graph_of (899,939 samples, 0.61%)</title><rect x="90.0402%" y="101" width="0.6089%" height="15" fill="rgb(242,14,37)"/><text x="90.2902%" y="111.50"></text></g><g><title>impl_trait_ref (345,603 samples, 0.23%)</title><rect x="90.4153%" y="85" width="0.2338%" height="15" fill="rgb(246,228,12)"/><text x="90.6653%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (263,332 samples, 0.18%)</title><rect x="90.4709%" y="69" width="0.1782%" height="15" fill="rgb(213,55,15)"/><text x="90.7209%" y="79.50"></text></g><g><title>resolve_instance (1,217,511 samples, 0.82%)</title><rect x="89.8443%" y="117" width="0.8237%" height="15" fill="rgb(209,9,3)"/><text x="90.0943%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (3,116,391 samples, 2.11%)</title><rect x="88.9462%" y="133" width="2.1085%" height="15" fill="rgb(230,59,30)"/><text x="89.1962%" y="143.50">m..</text></g><g><title>upstream_monomorphizations_for (508,505 samples, 0.34%)</title><rect x="90.7107%" y="117" width="0.3440%" height="15" fill="rgb(209,121,21)"/><text x="90.9607%" y="127.50"></text></g><g><title>upstream_monomorphizations (504,345 samples, 0.34%)</title><rect x="90.7135%" y="101" width="0.3412%" height="15" fill="rgb(220,109,13)"/><text x="90.9635%" y="111.50"></text></g><g><title>exported_symbols (396,084 samples, 0.27%)</title><rect x="90.7867%" y="85" width="0.2680%" height="15" fill="rgb(232,18,1)"/><text x="91.0367%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (391,944 samples, 0.27%)</title><rect x="90.7895%" y="69" width="0.2652%" height="15" fill="rgb(215,41,42)"/><text x="91.0395%" y="79.50"></text></g><g><title>monomorphization_collector (3,140,731 samples, 2.12%)</title><rect x="88.9441%" y="149" width="2.1250%" height="15" fill="rgb(224,123,36)"/><text x="89.1941%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (202,352 samples, 0.14%)</title><rect x="91.0715%" y="133" width="0.1369%" height="15" fill="rgb(240,125,3)"/><text x="91.3215%" y="143.50"></text></g><g><title>symbol_name (190,792 samples, 0.13%)</title><rect x="91.0793%" y="117" width="0.1291%" height="15" fill="rgb(205,98,50)"/><text x="91.3293%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (3,457,004 samples, 2.34%)</title><rect x="88.9271%" y="165" width="2.3389%" height="15" fill="rgb(205,185,37)"/><text x="89.1771%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (291,183 samples, 0.20%)</title><rect x="91.0691%" y="149" width="0.1970%" height="15" fill="rgb(238,207,15)"/><text x="91.3191%" y="159.50"></text></g><g><title>exported_symbols (3,546,456 samples, 2.40%)</title><rect x="88.9093%" y="181" width="2.3995%" height="15" fill="rgb(213,199,42)"/><text x="89.1593%" y="191.50">ex..</text></g><g><title>layout_of (304,321 samples, 0.21%)</title><rect x="92.4630%" y="149" width="0.2059%" height="15" fill="rgb(235,201,11)"/><text x="92.7130%" y="159.50"></text></g><g><title>layout_of (726,498 samples, 0.49%)</title><rect x="92.2219%" y="165" width="0.4915%" height="15" fill="rgb(207,46,11)"/><text x="92.4719%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,783,856 samples, 1.21%)</title><rect x="92.7134%" y="165" width="1.2069%" height="15" fill="rgb(241,35,35)"/><text x="92.9634%" y="175.50"></text></g><g><title>optimized_mir (3,998,080 samples, 2.71%)</title><rect x="91.3301%" y="181" width="2.7050%" height="15" fill="rgb(243,32,47)"/><text x="91.5801%" y="191.50">op..</text></g><g><title>resolve_instance (169,671 samples, 0.11%)</title><rect x="93.9204%" y="165" width="0.1148%" height="15" fill="rgb(247,202,23)"/><text x="94.1704%" y="175.50"></text></g><g><title>promoted_mir (295,263 samples, 0.20%)</title><rect x="94.0352%" y="181" width="0.1998%" height="15" fill="rgb(219,102,11)"/><text x="94.2852%" y="191.50"></text></g><g><title>generate_crate_metadata (8,839,179 samples, 5.98%)</title><rect x="88.2615%" y="197" width="5.9804%" height="15" fill="rgb(243,110,44)"/><text x="88.5115%" y="207.50">generate..</text></g><g><title>hir_lowering (1,535,496 samples, 1.04%)</title><rect x="94.2419%" y="197" width="1.0389%" height="15" fill="rgb(222,74,54)"/><text x="94.4919%" y="207.50"></text></g><g><title>finish_ongoing_codegen (3,278,713 samples, 2.22%)</title><rect x="95.2910%" y="181" width="2.2183%" height="15" fill="rgb(216,99,12)"/><text x="95.5410%" y="191.50">f..</text></g><g><title>link_crate (1,050,731 samples, 0.71%)</title><rect x="97.5093%" y="181" width="0.7109%" height="15" fill="rgb(226,22,26)"/><text x="97.7593%" y="191.50"></text></g><g><title>link_binary (1,025,260 samples, 0.69%)</title><rect x="97.5265%" y="165" width="0.6937%" height="15" fill="rgb(217,163,10)"/><text x="97.7765%" y="175.50"></text></g><g><title>link_rlib (637,227 samples, 0.43%)</title><rect x="97.7890%" y="149" width="0.4311%" height="15" fill="rgb(213,25,53)"/><text x="98.0390%" y="159.50"></text></g><g><title>link (4,353,984 samples, 2.95%)</title><rect x="95.2808%" y="197" width="2.9458%" height="15" fill="rgb(252,105,26)"/><text x="95.5308%" y="207.50">li..</text></g><g><title>parse_crate (670,016 samples, 0.45%)</title><rect x="98.2266%" y="197" width="0.4533%" height="15" fill="rgb(220,39,43)"/><text x="98.4766%" y="207.50"></text></g><g><title>prepare_outputs (180,062 samples, 0.12%)</title><rect x="98.6838%" y="197" width="0.1218%" height="15" fill="rgb(229,68,48)"/><text x="98.9338%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,342,654 samples, 0.91%)</title><rect x="98.8056%" y="197" width="0.9084%" height="15" fill="rgb(252,8,32)"/><text x="99.0556%" y="207.50"></text></g><g><title>all (147,802,361 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (147,802,361 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (324,833 samples, 0.22%)</title><rect x="99.7802%" y="197" width="0.2198%" height="15" fill="rgb(236,28,36)"/><text x="100.0302%" y="207.50"></text></g></svg></svg>