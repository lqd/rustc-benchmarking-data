<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,472,895 samples, 3.44%)</title><rect x="0.3060%" y="181" width="3.4447%" height="15" fill="rgb(227,0,7)"/><text x="0.5560%" y="191.50">LLV..</text></g><g><title>needs_drop_raw (463,594 samples, 0.25%)</title><rect x="15.0397%" y="69" width="0.2467%" height="15" fill="rgb(217,0,24)"/><text x="15.2897%" y="79.50"></text></g><g><title>is_copy_raw (406,714 samples, 0.22%)</title><rect x="15.0700%" y="53" width="0.2164%" height="15" fill="rgb(221,193,54)"/><text x="15.3200%" y="63.50"></text></g><g><title>evaluate_obligation (370,764 samples, 0.20%)</title><rect x="15.0891%" y="37" width="0.1973%" height="15" fill="rgb(248,212,6)"/><text x="15.3391%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,022,007 samples, 0.54%)</title><rect x="15.4773%" y="53" width="0.5439%" height="15" fill="rgb(208,68,35)"/><text x="15.7273%" y="63.50"></text></g><g><title>resolve_instance (1,605,395 samples, 0.85%)</title><rect x="15.2998%" y="69" width="0.8544%" height="15" fill="rgb(232,128,0)"/><text x="15.5498%" y="79.50"></text></g><g><title>thir_body (866,491 samples, 0.46%)</title><rect x="16.1691%" y="69" width="0.4611%" height="15" fill="rgb(207,160,47)"/><text x="16.4191%" y="79.50"></text></g><g><title>mir_const (6,728,132 samples, 3.58%)</title><rect x="13.0598%" y="117" width="3.5805%" height="15" fill="rgb(228,23,34)"/><text x="13.3098%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (5,887,771 samples, 3.13%)</title><rect x="13.5070%" y="101" width="3.1333%" height="15" fill="rgb(218,30,26)"/><text x="13.7570%" y="111.50">uns..</text></g><g><title>mir_built (5,283,133 samples, 2.81%)</title><rect x="13.8288%" y="85" width="2.8116%" height="15" fill="rgb(220,122,19)"/><text x="14.0788%" y="95.50">mi..</text></g><g><title>thir_body (219,013 samples, 0.12%)</title><rect x="18.2238%" y="53" width="0.1166%" height="15" fill="rgb(250,228,42)"/><text x="18.4738%" y="63.50"></text></g><g><title>mir_const (2,431,315 samples, 1.29%)</title><rect x="17.0624%" y="101" width="1.2939%" height="15" fill="rgb(240,193,28)"/><text x="17.3124%" y="111.50"></text></g><g><title>unsafety_check_result (1,663,667 samples, 0.89%)</title><rect x="17.4709%" y="85" width="0.8854%" height="15" fill="rgb(216,20,37)"/><text x="17.7209%" y="95.50"></text></g><g><title>mir_built (1,382,245 samples, 0.74%)</title><rect x="17.6207%" y="69" width="0.7356%" height="15" fill="rgb(206,188,39)"/><text x="17.8707%" y="79.50"></text></g><g><title>mir_promoted (11,156,497 samples, 5.94%)</title><rect x="12.4297%" y="133" width="5.9372%" height="15" fill="rgb(217,207,13)"/><text x="12.6797%" y="143.50">mir_prom..</text></g><g><title>mir_const_qualif (3,244,329 samples, 1.73%)</title><rect x="16.6403%" y="117" width="1.7266%" height="15" fill="rgb(231,73,38)"/><text x="16.8903%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (1,365,877 samples, 0.73%)</title><rect x="18.4073%" y="133" width="0.7269%" height="15" fill="rgb(225,20,46)"/><text x="18.6573%" y="143.50"></text></g><g><title>normalize_projection_ty (1,031,575 samples, 0.55%)</title><rect x="18.5852%" y="117" width="0.5490%" height="15" fill="rgb(210,31,41)"/><text x="18.8352%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,575,778 samples, 0.84%)</title><rect x="19.1655%" y="133" width="0.8386%" height="15" fill="rgb(221,200,47)"/><text x="19.4155%" y="143.50"></text></g><g><title>normalize_projection_ty (952,202 samples, 0.51%)</title><rect x="19.4974%" y="117" width="0.5067%" height="15" fill="rgb(226,26,5)"/><text x="19.7474%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,333,530 samples, 0.71%)</title><rect x="20.0041%" y="133" width="0.7097%" height="15" fill="rgb(249,33,26)"/><text x="20.2541%" y="143.50"></text></g><g><title>evaluate_obligation (523,162 samples, 0.28%)</title><rect x="20.4354%" y="117" width="0.2784%" height="15" fill="rgb(235,183,28)"/><text x="20.6854%" y="127.50"></text></g><g><title>MIR_borrow_checking (31,605,576 samples, 16.82%)</title><rect x="3.9018%" y="165" width="16.8197%" height="15" fill="rgb(221,5,38)"/><text x="4.1518%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,254,734 samples, 16.63%)</title><rect x="4.0885%" y="149" width="16.6330%" height="15" fill="rgb(247,18,42)"/><text x="4.3385%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,432,265 samples, 0.76%)</title><rect x="20.7215%" y="165" width="0.7622%" height="15" fill="rgb(241,131,45)"/><text x="20.9715%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,272,694 samples, 0.68%)</title><rect x="20.8064%" y="149" width="0.6773%" height="15" fill="rgb(249,31,29)"/><text x="21.0564%" y="159.50"></text></g><g><title>hir_module_items (210,092 samples, 0.11%)</title><rect x="21.4837%" y="165" width="0.1118%" height="15" fill="rgb(225,111,53)"/><text x="21.7337%" y="175.50"></text></g><g><title>codegen_fn_attrs (254,133 samples, 0.14%)</title><rect x="21.8255%" y="101" width="0.1352%" height="15" fill="rgb(238,160,17)"/><text x="22.0755%" y="111.50"></text></g><g><title>codegen_fn_attrs (461,205 samples, 0.25%)</title><rect x="21.7198%" y="133" width="0.2454%" height="15" fill="rgb(214,148,48)"/><text x="21.9698%" y="143.50"></text></g><g><title>should_inherit_track_caller (397,355 samples, 0.21%)</title><rect x="21.7538%" y="117" width="0.2115%" height="15" fill="rgb(232,36,49)"/><text x="22.0038%" y="127.50"></text></g><g><title>check_mod_attrs (676,547 samples, 0.36%)</title><rect x="21.6053%" y="149" width="0.3600%" height="15" fill="rgb(209,103,24)"/><text x="21.8553%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (381,584 samples, 0.20%)</title><rect x="22.0836%" y="149" width="0.2031%" height="15" fill="rgb(229,88,8)"/><text x="22.3336%" y="159.50"></text></g><g><title>misc_checking_1 (1,353,844 samples, 0.72%)</title><rect x="21.5957%" y="165" width="0.7205%" height="15" fill="rgb(213,181,19)"/><text x="21.8457%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (320,624 samples, 0.17%)</title><rect x="22.3171%" y="149" width="0.1706%" height="15" fill="rgb(254,191,54)"/><text x="22.5671%" y="159.50"></text></g><g><title>check_mod_liveness (244,792 samples, 0.13%)</title><rect x="22.3575%" y="133" width="0.1303%" height="15" fill="rgb(241,83,37)"/><text x="22.6075%" y="143.50"></text></g><g><title>misc_checking_2 (706,497 samples, 0.38%)</title><rect x="22.3162%" y="165" width="0.3760%" height="15" fill="rgb(233,36,39)"/><text x="22.5662%" y="175.50"></text></g><g><title>match_checking (384,183 samples, 0.20%)</title><rect x="22.4877%" y="149" width="0.2045%" height="15" fill="rgb(226,3,54)"/><text x="22.7377%" y="159.50"></text></g><g><title>check_match (313,932 samples, 0.17%)</title><rect x="22.5251%" y="133" width="0.1671%" height="15" fill="rgb(245,192,40)"/><text x="22.7751%" y="143.50"></text></g><g><title>check_private_in_public (259,282 samples, 0.14%)</title><rect x="22.6979%" y="149" width="0.1380%" height="15" fill="rgb(238,167,29)"/><text x="22.9479%" y="159.50"></text></g><g><title>death_checking (475,655 samples, 0.25%)</title><rect x="22.8359%" y="149" width="0.2531%" height="15" fill="rgb(232,182,51)"/><text x="23.0859%" y="159.50"></text></g><g><title>crate_lints (2,125,881 samples, 1.13%)</title><rect x="23.0899%" y="133" width="1.1313%" height="15" fill="rgb(231,60,39)"/><text x="23.3399%" y="143.50"></text></g><g><title>type_of (1,331,060 samples, 0.71%)</title><rect x="23.5129%" y="117" width="0.7084%" height="15" fill="rgb(208,69,12)"/><text x="23.7629%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (865,447 samples, 0.46%)</title><rect x="23.7606%" y="101" width="0.4606%" height="15" fill="rgb(235,93,37)"/><text x="24.0106%" y="111.50"></text></g><g><title>lint_checking (2,433,915 samples, 1.30%)</title><rect x="23.0890%" y="149" width="1.2953%" height="15" fill="rgb(213,116,39)"/><text x="23.3390%" y="159.50"></text></g><g><title>module_lints (306,434 samples, 0.16%)</title><rect x="24.2212%" y="133" width="0.1631%" height="15" fill="rgb(222,207,29)"/><text x="24.4712%" y="143.50"></text></g><g><title>lint_mod (303,704 samples, 0.16%)</title><rect x="24.2227%" y="117" width="0.1616%" height="15" fill="rgb(206,96,30)"/><text x="24.4727%" y="127.50"></text></g><g><title>privacy_access_levels (399,784 samples, 0.21%)</title><rect x="24.3843%" y="149" width="0.2128%" height="15" fill="rgb(218,138,4)"/><text x="24.6343%" y="159.50"></text></g><g><title>privacy_checking_modules (1,070,240 samples, 0.57%)</title><rect x="24.5970%" y="149" width="0.5696%" height="15" fill="rgb(250,191,14)"/><text x="24.8470%" y="159.50"></text></g><g><title>check_mod_privacy (1,068,690 samples, 0.57%)</title><rect x="24.5979%" y="133" width="0.5687%" height="15" fill="rgb(239,60,40)"/><text x="24.8479%" y="143.50"></text></g><g><title>misc_checking_3 (4,662,156 samples, 2.48%)</title><rect x="22.6922%" y="165" width="2.4811%" height="15" fill="rgb(206,27,48)"/><text x="22.9422%" y="175.50">mi..</text></g><g><title>impl_parent (2,708,927 samples, 1.44%)</title><rect x="29.8656%" y="101" width="1.4416%" height="15" fill="rgb(225,35,8)"/><text x="30.1156%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,613,326 samples, 0.86%)</title><rect x="30.4487%" y="85" width="0.8586%" height="15" fill="rgb(250,213,24)"/><text x="30.6987%" y="95.50"></text></g><g><title>impl_trait_ref (5,764,536 samples, 3.07%)</title><rect x="31.3078%" y="101" width="3.0677%" height="15" fill="rgb(247,123,22)"/><text x="31.5578%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,518,670 samples, 2.40%)</title><rect x="31.9708%" y="85" width="2.4047%" height="15" fill="rgb(231,138,38)"/><text x="32.2208%" y="95.50">me..</text></g><g><title>trait_impls_of (969,760 samples, 0.52%)</title><rect x="34.4332%" y="101" width="0.5161%" height="15" fill="rgb(231,145,46)"/><text x="34.6832%" y="111.50"></text></g><g><title>implementations_of_trait (288,472 samples, 0.15%)</title><rect x="34.7958%" y="85" width="0.1535%" height="15" fill="rgb(251,118,11)"/><text x="35.0458%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (223,752 samples, 0.12%)</title><rect x="34.8302%" y="69" width="0.1191%" height="15" fill="rgb(217,147,25)"/><text x="35.0802%" y="79.50"></text></g><g><title>coherent_trait (18,246,723 samples, 9.71%)</title><rect x="25.2399%" y="133" width="9.7105%" height="15" fill="rgb(247,81,37)"/><text x="25.4899%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (18,213,383 samples, 9.69%)</title><rect x="25.2577%" y="117" width="9.6927%" height="15" fill="rgb(209,12,38)"/><text x="25.5077%" y="127.50">specialization..</text></g><g><title>coherence_checking (18,345,484 samples, 9.76%)</title><rect x="25.2269%" y="149" width="9.7630%" height="15" fill="rgb(227,1,9)"/><text x="25.4769%" y="159.50">coherence_chec..</text></g><g><title>associated_item (215,703 samples, 0.11%)</title><rect x="46.6896%" y="85" width="0.1148%" height="15" fill="rgb(248,47,43)"/><text x="46.9396%" y="95.50"></text></g><g><title>associated_items (298,963 samples, 0.16%)</title><rect x="46.6497%" y="101" width="0.1591%" height="15" fill="rgb(221,10,30)"/><text x="46.8997%" y="111.50"></text></g><g><title>specializes (203,352 samples, 0.11%)</title><rect x="48.1375%" y="85" width="0.1082%" height="15" fill="rgb(210,229,1)"/><text x="48.3875%" y="95.50"></text></g><g><title>evaluate_obligation (2,570,744 samples, 1.37%)</title><rect x="46.9221%" y="101" width="1.3681%" height="15" fill="rgb(222,148,37)"/><text x="47.1721%" y="111.50"></text></g><g><title>explicit_predicates_of (325,766 samples, 0.17%)</title><rect x="48.9901%" y="53" width="0.1734%" height="15" fill="rgb(234,67,33)"/><text x="49.2401%" y="63.50"></text></g><g><title>param_env (1,235,430 samples, 0.66%)</title><rect x="48.5204%" y="101" width="0.6575%" height="15" fill="rgb(247,98,35)"/><text x="48.7704%" y="111.50"></text></g><g><title>predicates_of (594,528 samples, 0.32%)</title><rect x="48.8615%" y="85" width="0.3164%" height="15" fill="rgb(247,138,52)"/><text x="49.1115%" y="95.50"></text></g><g><title>predicates_defined_on (504,017 samples, 0.27%)</title><rect x="48.9097%" y="69" width="0.2682%" height="15" fill="rgb(213,79,30)"/><text x="49.1597%" y="79.50"></text></g><g><title>region_scope_tree (244,872 samples, 0.13%)</title><rect x="49.2558%" y="101" width="0.1303%" height="15" fill="rgb(246,177,23)"/><text x="49.5058%" y="111.50"></text></g><g><title>typeck (1,402,004 samples, 0.75%)</title><rect x="49.4580%" y="101" width="0.7461%" height="15" fill="rgb(230,62,27)"/><text x="49.7080%" y="111.50"></text></g><g><title>item_bodies_checking (28,594,558 samples, 15.22%)</title><rect x="35.0245%" y="149" width="15.2173%" height="15" fill="rgb(216,154,8)"/><text x="35.2745%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,591,388 samples, 15.22%)</title><rect x="35.0262%" y="133" width="15.2156%" height="15" fill="rgb(244,35,45)"/><text x="35.2762%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (28,363,158 samples, 15.09%)</title><rect x="35.1476%" y="117" width="15.0942%" height="15" fill="rgb(251,115,12)"/><text x="35.3976%" y="127.50">typeck</text></g><g><title>adt_destructor (327,084 samples, 0.17%)</title><rect x="54.2688%" y="117" width="0.1741%" height="15" fill="rgb(240,54,50)"/><text x="54.5188%" y="127.50"></text></g><g><title>coherent_trait (324,354 samples, 0.17%)</title><rect x="54.2703%" y="101" width="0.1726%" height="15" fill="rgb(233,84,52)"/><text x="54.5203%" y="111.50"></text></g><g><title>specialization_graph_of (322,904 samples, 0.17%)</title><rect x="54.2711%" y="85" width="0.1718%" height="15" fill="rgb(207,117,47)"/><text x="54.5211%" y="95.50"></text></g><g><title>item_types_checking (8,074,331 samples, 4.30%)</title><rect x="50.2418%" y="149" width="4.2970%" height="15" fill="rgb(249,43,39)"/><text x="50.4918%" y="159.50">item_..</text></g><g><title>check_mod_item_types (8,071,921 samples, 4.30%)</title><rect x="50.2431%" y="133" width="4.2957%" height="15" fill="rgb(209,38,44)"/><text x="50.4931%" y="143.50">check..</text></g><g><title>late_bound_vars_map (255,601 samples, 0.14%)</title><rect x="55.0598%" y="101" width="0.1360%" height="15" fill="rgb(236,212,23)"/><text x="55.3098%" y="111.50"></text></g><g><title>resolve_lifetimes (220,221 samples, 0.12%)</title><rect x="55.0786%" y="85" width="0.1172%" height="15" fill="rgb(242,79,21)"/><text x="55.3286%" y="95.50"></text></g><g><title>fn_sig (904,678 samples, 0.48%)</title><rect x="54.7677%" y="117" width="0.4814%" height="15" fill="rgb(211,96,35)"/><text x="55.0177%" y="127.50"></text></g><g><title>is_late_bound_map (324,884 samples, 0.17%)</title><rect x="55.3529%" y="101" width="0.1729%" height="15" fill="rgb(253,215,40)"/><text x="55.6029%" y="111.50"></text></g><g><title>resolve_lifetimes (291,654 samples, 0.16%)</title><rect x="55.3706%" y="85" width="0.1552%" height="15" fill="rgb(211,81,21)"/><text x="55.6206%" y="95.50"></text></g><g><title>generics_of (632,135 samples, 0.34%)</title><rect x="55.2491%" y="117" width="0.3364%" height="15" fill="rgb(208,190,38)"/><text x="55.4991%" y="127.50"></text></g><g><title>impl_trait_ref (347,464 samples, 0.18%)</title><rect x="55.5855%" y="117" width="0.1849%" height="15" fill="rgb(235,213,38)"/><text x="55.8355%" y="127.50"></text></g><g><title>explicit_predicates_of (247,171 samples, 0.13%)</title><rect x="55.9059%" y="85" width="0.1315%" height="15" fill="rgb(237,122,38)"/><text x="56.1559%" y="95.50"></text></g><g><title>predicates_of (592,045 samples, 0.32%)</title><rect x="55.7704%" y="117" width="0.3151%" height="15" fill="rgb(244,218,35)"/><text x="56.0204%" y="127.50"></text></g><g><title>predicates_defined_on (488,402 samples, 0.26%)</title><rect x="55.8256%" y="101" width="0.2599%" height="15" fill="rgb(240,68,47)"/><text x="56.0756%" y="111.50"></text></g><g><title>type_collecting (3,067,791 samples, 1.63%)</title><rect x="54.5394%" y="149" width="1.6326%" height="15" fill="rgb(210,16,53)"/><text x="54.7894%" y="159.50"></text></g><g><title>collect_mod_item_types (3,055,511 samples, 1.63%)</title><rect x="54.5460%" y="133" width="1.6261%" height="15" fill="rgb(235,124,12)"/><text x="54.7960%" y="143.50"></text></g><g><title>evaluate_obligation (206,942 samples, 0.11%)</title><rect x="58.1267%" y="117" width="0.1101%" height="15" fill="rgb(224,169,11)"/><text x="58.3767%" y="127.50"></text></g><g><title>param_env (656,938 samples, 0.35%)</title><rect x="58.3751%" y="117" width="0.3496%" height="15" fill="rgb(250,166,2)"/><text x="58.6251%" y="127.50"></text></g><g><title>region_scope_tree (430,113 samples, 0.23%)</title><rect x="58.7486%" y="117" width="0.2289%" height="15" fill="rgb(242,216,29)"/><text x="58.9986%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,900,077 samples, 2.61%)</title><rect x="56.3766%" y="133" width="2.6077%" height="15" fill="rgb(230,116,27)"/><text x="56.6266%" y="143.50">ch..</text></g><g><title>evaluate_obligation (2,158,922 samples, 1.15%)</title><rect x="61.7382%" y="117" width="1.1489%" height="15" fill="rgb(228,99,48)"/><text x="61.9882%" y="127.50"></text></g><g><title>implied_outlives_bounds (371,563 samples, 0.20%)</title><rect x="62.9083%" y="117" width="0.1977%" height="15" fill="rgb(253,11,6)"/><text x="63.1583%" y="127.50"></text></g><g><title>param_env (368,443 samples, 0.20%)</title><rect x="63.1060%" y="117" width="0.1961%" height="15" fill="rgb(247,143,39)"/><text x="63.3560%" y="127.50"></text></g><g><title>analysis (112,151,905 samples, 59.68%)</title><rect x="3.7507%" y="181" width="59.6845%" height="15" fill="rgb(236,97,10)"/><text x="4.0007%" y="191.50">analysis</text></g><g><title>type_check_crate (71,897,192 samples, 38.26%)</title><rect x="25.1733%" y="165" width="38.2620%" height="15" fill="rgb(233,208,19)"/><text x="25.4233%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,633,907 samples, 7.26%)</title><rect x="56.1796%" y="149" width="7.2556%" height="15" fill="rgb(216,164,2)"/><text x="56.4296%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (8,363,597 samples, 4.45%)</title><rect x="58.9843%" y="133" width="4.4509%" height="15" fill="rgb(220,129,5)"/><text x="59.2343%" y="143.50">check..</text></g><g><title>item_attrs (485,935 samples, 0.26%)</title><rect x="66.7895%" y="117" width="0.2586%" height="15" fill="rgb(242,17,10)"/><text x="67.0395%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (482,955 samples, 0.26%)</title><rect x="66.7911%" y="101" width="0.2570%" height="15" fill="rgb(242,107,0)"/><text x="67.0411%" y="111.50"></text></g><g><title>codegen_fn_attrs (523,736 samples, 0.28%)</title><rect x="66.7744%" y="133" width="0.2787%" height="15" fill="rgb(251,28,31)"/><text x="67.0244%" y="143.50"></text></g><g><title>param_env (336,882 samples, 0.18%)</title><rect x="67.1383%" y="133" width="0.1793%" height="15" fill="rgb(233,223,10)"/><text x="67.3883%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,373,124 samples, 0.73%)</title><rect x="66.6322%" y="149" width="0.7307%" height="15" fill="rgb(215,21,27)"/><text x="66.8822%" y="159.50"></text></g><g><title>codegen_module (6,207,164 samples, 3.30%)</title><rect x="64.1882%" y="165" width="3.3033%" height="15" fill="rgb(232,23,21)"/><text x="64.4382%" y="175.50">cod..</text></g><g><title>codegen_crate (7,759,368 samples, 4.13%)</title><rect x="63.4409%" y="181" width="4.1293%" height="15" fill="rgb(244,5,23)"/><text x="63.6909%" y="191.50">code..</text></g><g><title>LLVM_module_codegen (17,259,384 samples, 9.19%)</title><rect x="67.6141%" y="165" width="9.1850%" height="15" fill="rgb(226,81,46)"/><text x="67.8641%" y="175.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (15,967,030 samples, 8.50%)</title><rect x="68.3018%" y="149" width="8.4973%" height="15" fill="rgb(247,70,30)"/><text x="68.5518%" y="159.50">LLVM_module_..</text></g><g><title>codegen_module_optimize (18,743,280 samples, 9.97%)</title><rect x="67.5702%" y="181" width="9.9747%" height="15" fill="rgb(212,68,19)"/><text x="67.8202%" y="191.50">codegen_module..</text></g><g><title>LLVM_module_optimize (1,401,464 samples, 0.75%)</title><rect x="76.7991%" y="165" width="0.7458%" height="15" fill="rgb(240,187,13)"/><text x="77.0491%" y="175.50"></text></g><g><title>macro_expand_crate (13,103,061 samples, 6.97%)</title><rect x="77.7623%" y="165" width="6.9731%" height="15" fill="rgb(223,113,26)"/><text x="78.0123%" y="175.50">macro_exp..</text></g><g><title>expand_crate (13,085,971 samples, 6.96%)</title><rect x="77.7714%" y="149" width="6.9640%" height="15" fill="rgb(206,192,2)"/><text x="78.0214%" y="159.50">expand_cr..</text></g><g><title>metadata_register_crate (1,831,458 samples, 0.97%)</title><rect x="83.7608%" y="133" width="0.9747%" height="15" fill="rgb(241,108,4)"/><text x="84.0108%" y="143.50"></text></g><g><title>metadata_register_crate (1,407,734 samples, 0.75%)</title><rect x="83.9863%" y="117" width="0.7492%" height="15" fill="rgb(247,173,49)"/><text x="84.2363%" y="127.50"></text></g><g><title>metadata_register_crate (593,605 samples, 0.32%)</title><rect x="84.4195%" y="101" width="0.3159%" height="15" fill="rgb(224,114,35)"/><text x="84.6695%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (192,202 samples, 0.10%)</title><rect x="84.7395%" y="165" width="0.1023%" height="15" fill="rgb(245,159,27)"/><text x="84.9895%" y="175.50"></text></g><g><title>late_resolve_crate (1,761,708 samples, 0.94%)</title><rect x="84.9607%" y="149" width="0.9375%" height="15" fill="rgb(245,172,44)"/><text x="85.2107%" y="159.50"></text></g><g><title>configure_and_expand (15,773,298 samples, 8.39%)</title><rect x="77.5449%" y="181" width="8.3942%" height="15" fill="rgb(236,23,11)"/><text x="77.7949%" y="191.50">configure_an..</text></g><g><title>resolve_crate (2,061,881 samples, 1.10%)</title><rect x="84.8418%" y="165" width="1.0973%" height="15" fill="rgb(205,117,38)"/><text x="85.0918%" y="175.50"></text></g><g><title>early_lint_checks (247,362 samples, 0.13%)</title><rect x="86.0407%" y="181" width="0.1316%" height="15" fill="rgb(237,72,25)"/><text x="86.2907%" y="191.50"></text></g><g><title>free_global_ctxt (4,773,798 samples, 2.54%)</title><rect x="86.1723%" y="181" width="2.5405%" height="15" fill="rgb(244,70,9)"/><text x="86.4223%" y="191.50">fr..</text></g><g><title>optimized_mir (660,613 samples, 0.35%)</title><rect x="90.1313%" y="101" width="0.3516%" height="15" fill="rgb(217,125,39)"/><text x="90.3813%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (233,533 samples, 0.12%)</title><rect x="90.3586%" y="85" width="0.1243%" height="15" fill="rgb(235,36,10)"/><text x="90.6086%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (201,092 samples, 0.11%)</title><rect x="90.5202%" y="85" width="0.1070%" height="15" fill="rgb(251,123,47)"/><text x="90.7702%" y="95.50"></text></g><g><title>resolve_instance (367,965 samples, 0.20%)</title><rect x="90.4828%" y="101" width="0.1958%" height="15" fill="rgb(221,13,13)"/><text x="90.7328%" y="111.50"></text></g><g><title>eval_to_const_value_raw (209,642 samples, 0.11%)</title><rect x="90.6847%" y="85" width="0.1116%" height="15" fill="rgb(238,131,9)"/><text x="90.9347%" y="95.50"></text></g><g><title>eval_to_const_value_raw (207,462 samples, 0.11%)</title><rect x="90.6858%" y="69" width="0.1104%" height="15" fill="rgb(211,50,8)"/><text x="90.9358%" y="79.50"></text></g><g><title>eval_to_allocation_raw (203,612 samples, 0.11%)</title><rect x="90.6879%" y="53" width="0.1084%" height="15" fill="rgb(245,182,24)"/><text x="90.9379%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (227,132 samples, 0.12%)</title><rect x="90.6787%" y="101" width="0.1209%" height="15" fill="rgb(242,14,37)"/><text x="90.9287%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,862,278 samples, 0.99%)</title><rect x="89.9195%" y="117" width="0.9911%" height="15" fill="rgb(246,228,12)"/><text x="90.1695%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (208,652 samples, 0.11%)</title><rect x="90.7995%" y="101" width="0.1110%" height="15" fill="rgb(213,55,15)"/><text x="91.0495%" y="111.50"></text></g><g><title>upstream_monomorphizations (204,032 samples, 0.11%)</title><rect x="90.8020%" y="85" width="0.1086%" height="15" fill="rgb(209,9,3)"/><text x="91.0520%" y="95.50"></text></g><g><title>monomorphization_collector (1,923,959 samples, 1.02%)</title><rect x="89.9178%" y="133" width="1.0239%" height="15" fill="rgb(230,59,30)"/><text x="90.1678%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (193,642 samples, 0.10%)</title><rect x="90.9490%" y="117" width="0.1031%" height="15" fill="rgb(209,121,21)"/><text x="91.1990%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (2,259,293 samples, 1.20%)</title><rect x="89.9033%" y="149" width="1.2023%" height="15" fill="rgb(220,109,13)"/><text x="90.1533%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (307,964 samples, 0.16%)</title><rect x="90.9417%" y="133" width="0.1639%" height="15" fill="rgb(232,18,1)"/><text x="91.1917%" y="143.50"></text></g><g><title>exported_symbols (2,483,345 samples, 1.32%)</title><rect x="89.8891%" y="165" width="1.3216%" height="15" fill="rgb(215,41,42)"/><text x="90.1391%" y="175.50"></text></g><g><title>reachable_non_generics (197,532 samples, 0.11%)</title><rect x="91.1056%" y="149" width="0.1051%" height="15" fill="rgb(224,123,36)"/><text x="91.3556%" y="159.50"></text></g><g><title>mir_for_ctfe (403,312 samples, 0.21%)</title><rect x="91.2268%" y="165" width="0.2146%" height="15" fill="rgb(240,125,3)"/><text x="91.4768%" y="175.50"></text></g><g><title>layout_of (287,054 samples, 0.15%)</title><rect x="93.0429%" y="133" width="0.1528%" height="15" fill="rgb(205,98,50)"/><text x="93.2929%" y="143.50"></text></g><g><title>layout_of (669,747 samples, 0.36%)</title><rect x="92.8467%" y="149" width="0.3564%" height="15" fill="rgb(205,185,37)"/><text x="93.0967%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,631,045 samples, 1.40%)</title><rect x="93.2032%" y="149" width="1.4002%" height="15" fill="rgb(238,207,15)"/><text x="93.4532%" y="159.50"></text></g><g><title>optimized_mir (5,877,761 samples, 3.13%)</title><rect x="91.4793%" y="165" width="3.1280%" height="15" fill="rgb(213,199,42)"/><text x="91.7293%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (11,190,203 samples, 5.96%)</title><rect x="88.7128%" y="181" width="5.9552%" height="15" fill="rgb(235,201,11)"/><text x="88.9628%" y="191.50">generate..</text></g><g><title>hir_lowering (3,239,583 samples, 1.72%)</title><rect x="94.6680%" y="181" width="1.7240%" height="15" fill="rgb(207,46,11)"/><text x="94.9180%" y="191.50"></text></g><g><title>link_crate (1,094,081 samples, 0.58%)</title><rect x="96.4054%" y="165" width="0.5822%" height="15" fill="rgb(241,35,35)"/><text x="96.6554%" y="175.50"></text></g><g><title>link_binary (1,059,001 samples, 0.56%)</title><rect x="96.4240%" y="149" width="0.5636%" height="15" fill="rgb(243,32,47)"/><text x="96.6740%" y="159.50"></text></g><g><title>link_rlib (700,507 samples, 0.37%)</title><rect x="96.6148%" y="133" width="0.3728%" height="15" fill="rgb(247,202,23)"/><text x="96.8648%" y="143.50"></text></g><g><title>link (1,127,481 samples, 0.60%)</title><rect x="96.3920%" y="181" width="0.6000%" height="15" fill="rgb(219,102,11)"/><text x="96.6420%" y="191.50"></text></g><g><title>parse_crate (2,598,736 samples, 1.38%)</title><rect x="96.9920%" y="181" width="1.3830%" height="15" fill="rgb(243,110,44)"/><text x="97.2420%" y="191.50"></text></g><g><title>prepare_outputs (197,862 samples, 0.11%)</title><rect x="98.3798%" y="181" width="0.1053%" height="15" fill="rgb(222,74,54)"/><text x="98.6298%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,366,444 samples, 1.26%)</title><rect x="98.4851%" y="181" width="1.2594%" height="15" fill="rgb(216,99,12)"/><text x="98.7351%" y="191.50"></text></g><g><title>all (187,907,797 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (187,907,797 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (387,674 samples, 0.21%)</title><rect x="99.7937%" y="181" width="0.2063%" height="15" fill="rgb(213,25,53)"/><text x="100.0437%" y="191.50"></text></g></svg></svg>