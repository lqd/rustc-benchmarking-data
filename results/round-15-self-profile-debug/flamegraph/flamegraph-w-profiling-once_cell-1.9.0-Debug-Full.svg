<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (34,473,030 samples, 9.44%)</title><rect x="0.2802%" y="197" width="9.4387%" height="15" fill="rgb(227,0,7)"/><text x="0.5302%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (459,796 samples, 0.13%)</title><rect x="14.4760%" y="101" width="0.1259%" height="15" fill="rgb(217,0,24)"/><text x="14.7260%" y="111.50"></text></g><g><title>needs_drop_raw (1,492,276 samples, 0.41%)</title><rect x="15.5937%" y="85" width="0.4086%" height="15" fill="rgb(221,193,54)"/><text x="15.8437%" y="95.50"></text></g><g><title>is_copy_raw (1,208,635 samples, 0.33%)</title><rect x="15.6713%" y="69" width="0.3309%" height="15" fill="rgb(248,212,6)"/><text x="15.9213%" y="79.50"></text></g><g><title>evaluate_obligation (1,013,070 samples, 0.28%)</title><rect x="15.7249%" y="53" width="0.2774%" height="15" fill="rgb(208,68,35)"/><text x="15.9749%" y="63.50"></text></g><g><title>resolve_instance (500,695 samples, 0.14%)</title><rect x="16.0023%" y="85" width="0.1371%" height="15" fill="rgb(232,128,0)"/><text x="16.2523%" y="95.50"></text></g><g><title>thir_body (1,300,241 samples, 0.36%)</title><rect x="16.1538%" y="85" width="0.3560%" height="15" fill="rgb(207,160,47)"/><text x="16.4038%" y="95.50"></text></g><g><title>mir_const (9,404,521 samples, 2.57%)</title><rect x="13.9432%" y="133" width="2.5750%" height="15" fill="rgb(228,23,34)"/><text x="14.1932%" y="143.50">mi..</text></g><g><title>unsafety_check_result (7,999,863 samples, 2.19%)</title><rect x="14.3278%" y="117" width="2.1904%" height="15" fill="rgb(218,30,26)"/><text x="14.5778%" y="127.50">u..</text></g><g><title>mir_built (6,998,870 samples, 1.92%)</title><rect x="14.6019%" y="101" width="1.9163%" height="15" fill="rgb(220,122,19)"/><text x="14.8519%" y="111.50">m..</text></g><g><title>mir_const (638,748 samples, 0.17%)</title><rect x="16.7346%" y="117" width="0.1749%" height="15" fill="rgb(250,228,42)"/><text x="16.9846%" y="127.50"></text></g><g><title>unsafety_check_result (511,498 samples, 0.14%)</title><rect x="16.7695%" y="101" width="0.1400%" height="15" fill="rgb(240,193,28)"/><text x="17.0195%" y="111.50"></text></g><g><title>mir_built (451,627 samples, 0.12%)</title><rect x="16.7859%" y="85" width="0.1237%" height="15" fill="rgb(216,20,37)"/><text x="17.0359%" y="95.50"></text></g><g><title>mir_const_qualif (1,525,278 samples, 0.42%)</title><rect x="16.5181%" y="133" width="0.4176%" height="15" fill="rgb(206,188,39)"/><text x="16.7681%" y="143.50"></text></g><g><title>mir_promoted (11,977,139 samples, 3.28%)</title><rect x="13.6565%" y="149" width="3.2793%" height="15" fill="rgb(217,207,13)"/><text x="13.9065%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (634,723 samples, 0.17%)</title><rect x="16.9358%" y="149" width="0.1738%" height="15" fill="rgb(231,73,38)"/><text x="17.1858%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,000,313 samples, 0.82%)</title><rect x="17.1994%" y="149" width="0.8215%" height="15" fill="rgb(225,20,46)"/><text x="17.4494%" y="159.50"></text></g><g><title>MIR_borrow_checking (30,010,694 samples, 8.22%)</title><rect x="9.8056%" y="181" width="8.2169%" height="15" fill="rgb(210,31,41)"/><text x="10.0556%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (29,834,271 samples, 8.17%)</title><rect x="9.8540%" y="165" width="8.1686%" height="15" fill="rgb(221,200,47)"/><text x="10.1040%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (509,075 samples, 0.14%)</title><rect x="18.0226%" y="181" width="0.1394%" height="15" fill="rgb(226,26,5)"/><text x="18.2726%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (422,575 samples, 0.12%)</title><rect x="18.0462%" y="165" width="0.1157%" height="15" fill="rgb(249,33,26)"/><text x="18.2962%" y="175.50"></text></g><g><title>codegen_fn_attrs (416,904 samples, 0.11%)</title><rect x="18.2991%" y="149" width="0.1141%" height="15" fill="rgb(235,183,28)"/><text x="18.5491%" y="159.50"></text></g><g><title>check_mod_attrs (682,009 samples, 0.19%)</title><rect x="18.2265%" y="165" width="0.1867%" height="15" fill="rgb(221,5,38)"/><text x="18.4765%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (514,515 samples, 0.14%)</title><rect x="18.4817%" y="165" width="0.1409%" height="15" fill="rgb(247,18,42)"/><text x="18.7317%" y="175.50"></text></g><g><title>misc_checking_1 (1,532,915 samples, 0.42%)</title><rect x="18.2206%" y="181" width="0.4197%" height="15" fill="rgb(241,131,45)"/><text x="18.4706%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (590,146 samples, 0.16%)</title><rect x="18.6408%" y="165" width="0.1616%" height="15" fill="rgb(249,31,29)"/><text x="18.8908%" y="175.50"></text></g><g><title>check_mod_liveness (471,214 samples, 0.13%)</title><rect x="18.6733%" y="149" width="0.1290%" height="15" fill="rgb(225,111,53)"/><text x="18.9233%" y="159.50"></text></g><g><title>mir_borrowck (378,204 samples, 0.10%)</title><rect x="19.0532%" y="53" width="0.1036%" height="15" fill="rgb(238,160,17)"/><text x="19.3032%" y="63.50"></text></g><g><title>eval_to_const_value_raw (679,057 samples, 0.19%)</title><rect x="18.9710%" y="133" width="0.1859%" height="15" fill="rgb(214,148,48)"/><text x="19.2210%" y="143.50"></text></g><g><title>eval_to_const_value_raw (671,227 samples, 0.18%)</title><rect x="18.9732%" y="117" width="0.1838%" height="15" fill="rgb(232,36,49)"/><text x="19.2232%" y="127.50"></text></g><g><title>eval_to_allocation_raw (664,537 samples, 0.18%)</title><rect x="18.9750%" y="101" width="0.1819%" height="15" fill="rgb(209,103,24)"/><text x="19.2250%" y="111.50"></text></g><g><title>mir_for_ctfe (529,065 samples, 0.14%)</title><rect x="19.0121%" y="85" width="0.1449%" height="15" fill="rgb(229,88,8)"/><text x="19.2621%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (483,175 samples, 0.13%)</title><rect x="19.0246%" y="69" width="0.1323%" height="15" fill="rgb(213,181,19)"/><text x="19.2746%" y="79.50"></text></g><g><title>misc_checking_2 (2,217,973 samples, 0.61%)</title><rect x="18.6403%" y="181" width="0.6073%" height="15" fill="rgb(254,191,54)"/><text x="18.8903%" y="191.50"></text></g><g><title>match_checking (1,626,037 samples, 0.45%)</title><rect x="18.8023%" y="165" width="0.4452%" height="15" fill="rgb(241,83,37)"/><text x="19.0523%" y="175.50"></text></g><g><title>check_match (1,580,117 samples, 0.43%)</title><rect x="18.8149%" y="149" width="0.4326%" height="15" fill="rgb(233,36,39)"/><text x="19.0649%" y="159.50"></text></g><g><title>death_checking (538,126 samples, 0.15%)</title><rect x="19.3272%" y="165" width="0.1473%" height="15" fill="rgb(226,3,54)"/><text x="19.5772%" y="175.50"></text></g><g><title>param_env (366,803 samples, 0.10%)</title><rect x="19.7303%" y="133" width="0.1004%" height="15" fill="rgb(245,192,40)"/><text x="19.9803%" y="143.50"></text></g><g><title>crate_lints (2,399,565 samples, 0.66%)</title><rect x="19.4750%" y="149" width="0.6570%" height="15" fill="rgb(238,167,29)"/><text x="19.7250%" y="159.50"></text></g><g><title>type_of (1,089,392 samples, 0.30%)</title><rect x="19.8337%" y="133" width="0.2983%" height="15" fill="rgb(232,182,51)"/><text x="20.0837%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (859,639 samples, 0.24%)</title><rect x="19.8966%" y="117" width="0.2354%" height="15" fill="rgb(231,60,39)"/><text x="20.1466%" y="127.50"></text></g><g><title>lint_checking (2,871,910 samples, 0.79%)</title><rect x="19.4746%" y="165" width="0.7863%" height="15" fill="rgb(208,69,12)"/><text x="19.7246%" y="175.50"></text></g><g><title>module_lints (470,795 samples, 0.13%)</title><rect x="20.1320%" y="149" width="0.1289%" height="15" fill="rgb(235,93,37)"/><text x="20.3820%" y="159.50"></text></g><g><title>lint_mod (464,305 samples, 0.13%)</title><rect x="20.1338%" y="133" width="0.1271%" height="15" fill="rgb(213,116,39)"/><text x="20.3838%" y="143.50"></text></g><g><title>privacy_checking_modules (983,210 samples, 0.27%)</title><rect x="20.3519%" y="165" width="0.2692%" height="15" fill="rgb(222,207,29)"/><text x="20.6019%" y="175.50"></text></g><g><title>check_mod_privacy (978,340 samples, 0.27%)</title><rect x="20.3532%" y="149" width="0.2679%" height="15" fill="rgb(206,96,30)"/><text x="20.6032%" y="159.50"></text></g><g><title>misc_checking_3 (5,041,302 samples, 1.38%)</title><rect x="19.2475%" y="181" width="1.3803%" height="15" fill="rgb(218,138,4)"/><text x="19.4975%" y="191.50"></text></g><g><title>impl_parent (2,147,110 samples, 0.59%)</title><rect x="21.6354%" y="117" width="0.5879%" height="15" fill="rgb(250,191,14)"/><text x="21.8854%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,306,807 samples, 0.36%)</title><rect x="21.8655%" y="101" width="0.3578%" height="15" fill="rgb(239,60,40)"/><text x="22.1155%" y="111.50"></text></g><g><title>impl_trait_ref (5,272,310 samples, 1.44%)</title><rect x="22.2237%" y="117" width="1.4436%" height="15" fill="rgb(206,27,48)"/><text x="22.4737%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,217,318 samples, 1.15%)</title><rect x="22.5126%" y="101" width="1.1547%" height="15" fill="rgb(225,35,8)"/><text x="22.7626%" y="111.50"></text></g><g><title>trait_impls_of (716,766 samples, 0.20%)</title><rect x="23.6776%" y="117" width="0.1963%" height="15" fill="rgb(250,213,24)"/><text x="23.9276%" y="127.50"></text></g><g><title>coherent_trait (11,748,349 samples, 3.22%)</title><rect x="20.6576%" y="149" width="3.2167%" height="15" fill="rgb(247,123,22)"/><text x="20.9076%" y="159.50">coh..</text></g><g><title>specialization_graph_of (11,726,498 samples, 3.21%)</title><rect x="20.6636%" y="133" width="3.2107%" height="15" fill="rgb(231,138,38)"/><text x="20.9136%" y="143.50">spe..</text></g><g><title>coherence_checking (11,833,230 samples, 3.24%)</title><rect x="20.6523%" y="165" width="3.2399%" height="15" fill="rgb(231,145,46)"/><text x="20.9023%" y="175.50">coh..</text></g><g><title>associated_item (390,939 samples, 0.11%)</title><rect x="29.0435%" y="101" width="0.1070%" height="15" fill="rgb(251,118,11)"/><text x="29.2935%" y="111.50"></text></g><g><title>associated_items (586,960 samples, 0.16%)</title><rect x="28.9993%" y="117" width="0.1607%" height="15" fill="rgb(217,147,25)"/><text x="29.2493%" y="127.50"></text></g><g><title>adt_def (480,475 samples, 0.13%)</title><rect x="29.2858%" y="85" width="0.1316%" height="15" fill="rgb(247,81,37)"/><text x="29.5358%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (478,025 samples, 0.13%)</title><rect x="29.2865%" y="69" width="0.1309%" height="15" fill="rgb(209,12,38)"/><text x="29.5365%" y="79.50"></text></g><g><title>item_attrs (447,085 samples, 0.12%)</title><rect x="29.2949%" y="53" width="0.1224%" height="15" fill="rgb(227,1,9)"/><text x="29.5449%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (444,505 samples, 0.12%)</title><rect x="29.2956%" y="37" width="0.1217%" height="15" fill="rgb(248,47,43)"/><text x="29.5456%" y="47.50"></text></g><g><title>dropck_outlives (1,091,672 samples, 0.30%)</title><rect x="29.1801%" y="117" width="0.2989%" height="15" fill="rgb(221,10,30)"/><text x="29.4301%" y="127.50"></text></g><g><title>adt_dtorck_constraint (766,040 samples, 0.21%)</title><rect x="29.2692%" y="101" width="0.2097%" height="15" fill="rgb(210,229,1)"/><text x="29.5192%" y="111.50"></text></g><g><title>evaluate_obligation (1,232,286 samples, 0.34%)</title><rect x="29.4791%" y="117" width="0.3374%" height="15" fill="rgb(222,148,37)"/><text x="29.7291%" y="127.50"></text></g><g><title>method_autoderef_steps (499,152 samples, 0.14%)</title><rect x="30.0339%" y="117" width="0.1367%" height="15" fill="rgb(234,67,33)"/><text x="30.2839%" y="127.50"></text></g><g><title>predicates_of (370,413 samples, 0.10%)</title><rect x="30.2139%" y="117" width="0.1014%" height="15" fill="rgb(247,98,35)"/><text x="30.4639%" y="127.50"></text></g><g><title>evaluate_obligation (433,377 samples, 0.12%)</title><rect x="32.1363%" y="101" width="0.1187%" height="15" fill="rgb(247,138,52)"/><text x="32.3863%" y="111.50"></text></g><g><title>is_copy_raw (584,057 samples, 0.16%)</title><rect x="32.2836%" y="101" width="0.1599%" height="15" fill="rgb(213,79,30)"/><text x="32.5336%" y="111.50"></text></g><g><title>evaluate_obligation (483,847 samples, 0.13%)</title><rect x="32.3111%" y="85" width="0.1325%" height="15" fill="rgb(246,177,23)"/><text x="32.5611%" y="95.50"></text></g><g><title>typeck (8,004,090 samples, 2.19%)</title><rect x="30.3402%" y="117" width="2.1915%" height="15" fill="rgb(230,62,27)"/><text x="30.5902%" y="127.50">t..</text></g><g><title>item_bodies_checking (31,582,011 samples, 8.65%)</title><rect x="23.9051%" y="165" width="8.6471%" height="15" fill="rgb(216,154,8)"/><text x="24.1551%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (31,579,001 samples, 8.65%)</title><rect x="23.9059%" y="149" width="8.6463%" height="15" fill="rgb(244,35,45)"/><text x="24.1559%" y="159.50">typeck_item_..</text></g><g><title>typeck (31,471,368 samples, 8.62%)</title><rect x="23.9354%" y="133" width="8.6168%" height="15" fill="rgb(251,115,12)"/><text x="24.1854%" y="143.50">typeck</text></g><g><title>item_types_checking (1,015,620 samples, 0.28%)</title><rect x="32.5522%" y="165" width="0.2781%" height="15" fill="rgb(240,54,50)"/><text x="32.8022%" y="175.50"></text></g><g><title>check_mod_item_types (1,009,260 samples, 0.28%)</title><rect x="32.5539%" y="149" width="0.2763%" height="15" fill="rgb(233,84,52)"/><text x="32.8039%" y="159.50"></text></g><g><title>fn_sig (697,596 samples, 0.19%)</title><rect x="32.9295%" y="133" width="0.1910%" height="15" fill="rgb(207,117,47)"/><text x="33.1795%" y="143.50"></text></g><g><title>explicit_predicates_of (704,345 samples, 0.19%)</title><rect x="33.2668%" y="101" width="0.1928%" height="15" fill="rgb(249,43,39)"/><text x="33.5168%" y="111.50"></text></g><g><title>predicates_of (1,151,999 samples, 0.32%)</title><rect x="33.2209%" y="133" width="0.3154%" height="15" fill="rgb(209,38,44)"/><text x="33.4709%" y="143.50"></text></g><g><title>predicates_defined_on (1,088,719 samples, 0.30%)</title><rect x="33.2382%" y="117" width="0.2981%" height="15" fill="rgb(236,212,23)"/><text x="33.4882%" y="127.50"></text></g><g><title>type_collecting (2,707,887 samples, 0.74%)</title><rect x="32.8313%" y="165" width="0.7414%" height="15" fill="rgb(242,79,21)"/><text x="33.0813%" y="175.50"></text></g><g><title>collect_mod_item_types (2,692,727 samples, 0.74%)</title><rect x="32.8355%" y="149" width="0.7373%" height="15" fill="rgb(211,96,35)"/><text x="33.0855%" y="159.50"></text></g><g><title>evaluate_obligation (799,033 samples, 0.22%)</title><rect x="34.3535%" y="133" width="0.2188%" height="15" fill="rgb(253,215,40)"/><text x="34.6035%" y="143.50"></text></g><g><title>implied_outlives_bounds (397,143 samples, 0.11%)</title><rect x="34.5723%" y="133" width="0.1087%" height="15" fill="rgb(211,81,21)"/><text x="34.8223%" y="143.50"></text></g><g><title>param_env (424,363 samples, 0.12%)</title><rect x="34.6811%" y="133" width="0.1162%" height="15" fill="rgb(208,190,38)"/><text x="34.9311%" y="143.50"></text></g><g><title>region_scope_tree (438,304 samples, 0.12%)</title><rect x="34.8063%" y="133" width="0.1200%" height="15" fill="rgb(235,213,38)"/><text x="35.0563%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,687,360 samples, 1.28%)</title><rect x="33.6465%" y="149" width="1.2834%" height="15" fill="rgb(237,122,38)"/><text x="33.8965%" y="159.50"></text></g><g><title>param_env (422,704 samples, 0.12%)</title><rect x="35.7191%" y="133" width="0.1157%" height="15" fill="rgb(244,218,35)"/><text x="35.9691%" y="143.50"></text></g><g><title>analysis (95,666,032 samples, 26.19%)</title><rect x="9.7189%" y="197" width="26.1933%" height="15" fill="rgb(240,68,47)"/><text x="9.9689%" y="207.50">analysis</text></g><g><title>type_check_crate (55,823,267 samples, 15.28%)</title><rect x="20.6279%" y="181" width="15.2844%" height="15" fill="rgb(210,16,53)"/><text x="20.8779%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,536,777 samples, 2.34%)</title><rect x="33.5749%" y="165" width="2.3374%" height="15" fill="rgb(235,124,12)"/><text x="33.8249%" y="175.50">w..</text></g><g><title>check_item_well_formed (3,587,703 samples, 0.98%)</title><rect x="34.9299%" y="149" width="0.9823%" height="15" fill="rgb(224,169,11)"/><text x="35.1799%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (436,115 samples, 0.12%)</title><rect x="42.4448%" y="165" width="0.1194%" height="15" fill="rgb(250,166,2)"/><text x="42.6948%" y="175.50"></text></g><g><title>eval_to_const_value_raw (542,385 samples, 0.15%)</title><rect x="43.2782%" y="133" width="0.1485%" height="15" fill="rgb(242,216,29)"/><text x="43.5282%" y="143.50"></text></g><g><title>eval_to_const_value_raw (516,205 samples, 0.14%)</title><rect x="43.2853%" y="117" width="0.1413%" height="15" fill="rgb(230,116,27)"/><text x="43.5353%" y="127.50"></text></g><g><title>eval_to_allocation_raw (467,275 samples, 0.13%)</title><rect x="43.2987%" y="101" width="0.1279%" height="15" fill="rgb(228,99,48)"/><text x="43.5487%" y="111.50"></text></g><g><title>param_env (433,674 samples, 0.12%)</title><rect x="43.5458%" y="133" width="0.1187%" height="15" fill="rgb(253,11,6)"/><text x="43.7958%" y="143.50"></text></g><g><title>layout_of (2,016,000 samples, 0.55%)</title><rect x="43.1164%" y="149" width="0.5520%" height="15" fill="rgb(247,143,39)"/><text x="43.3664%" y="159.50"></text></g><g><title>predicates_of (530,096 samples, 0.15%)</title><rect x="43.9335%" y="133" width="0.1451%" height="15" fill="rgb(236,97,10)"/><text x="44.1835%" y="143.50"></text></g><g><title>predicates_defined_on (375,972 samples, 0.10%)</title><rect x="43.9757%" y="117" width="0.1029%" height="15" fill="rgb(233,208,19)"/><text x="44.2257%" y="127.50"></text></g><g><title>param_env (1,502,528 samples, 0.41%)</title><rect x="43.6684%" y="149" width="0.4114%" height="15" fill="rgb(216,164,2)"/><text x="43.9184%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,447,620 samples, 1.49%)</title><rect x="42.6443%" y="165" width="1.4916%" height="15" fill="rgb(220,129,5)"/><text x="42.8943%" y="175.50"></text></g><g><title>layout_of (498,785 samples, 0.14%)</title><rect x="44.1761%" y="165" width="0.1366%" height="15" fill="rgb(242,17,10)"/><text x="44.4261%" y="175.50"></text></g><g><title>codegen_module (28,781,921 samples, 7.88%)</title><rect x="36.5396%" y="181" width="7.8805%" height="15" fill="rgb(242,107,0)"/><text x="36.7896%" y="191.50">codegen_mod..</text></g><g><title>codegen_crate (31,134,476 samples, 8.52%)</title><rect x="35.9156%" y="197" width="8.5246%" height="15" fill="rgb(251,28,31)"/><text x="36.1656%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (119,732,525 samples, 32.78%)</title><rect x="44.4933%" y="181" width="32.7827%" height="15" fill="rgb(233,223,10)"/><text x="44.7433%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (112,370,499 samples, 30.77%)</title><rect x="46.5091%" y="165" width="30.7670%" height="15" fill="rgb(215,21,27)"/><text x="46.7591%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (125,976,910 samples, 34.49%)</title><rect x="44.4402%" y="197" width="34.4924%" height="15" fill="rgb(232,23,21)"/><text x="44.6902%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,050,373 samples, 1.66%)</title><rect x="77.2760%" y="181" width="1.6566%" height="15" fill="rgb(244,5,23)"/><text x="77.5260%" y="191.50"></text></g><g><title>metadata_load_macro (482,054 samples, 0.13%)</title><rect x="85.0728%" y="149" width="0.1320%" height="15" fill="rgb(226,81,46)"/><text x="85.3228%" y="159.50"></text></g><g><title>metadata_register_crate (2,650,587 samples, 0.73%)</title><rect x="85.2048%" y="149" width="0.7257%" height="15" fill="rgb(247,70,30)"/><text x="85.4548%" y="159.50"></text></g><g><title>metadata_register_crate (955,131 samples, 0.26%)</title><rect x="85.6690%" y="133" width="0.2615%" height="15" fill="rgb(212,68,19)"/><text x="85.9190%" y="143.50"></text></g><g><title>macro_expand_crate (24,962,004 samples, 6.83%)</title><rect x="79.1691%" y="181" width="6.8346%" height="15" fill="rgb(240,187,13)"/><text x="79.4191%" y="191.50">macro_exp..</text></g><g><title>expand_crate (24,943,124 samples, 6.83%)</title><rect x="79.1743%" y="165" width="6.8294%" height="15" fill="rgb(223,113,26)"/><text x="79.4243%" y="175.50">expand_cr..</text></g><g><title>late_resolve_crate (4,331,564 samples, 1.19%)</title><rect x="86.1639%" y="165" width="1.1860%" height="15" fill="rgb(206,192,2)"/><text x="86.4139%" y="175.50"></text></g><g><title>configure_and_expand (31,046,506 samples, 8.50%)</title><rect x="78.9326%" y="197" width="8.5005%" height="15" fill="rgb(241,108,4)"/><text x="79.1826%" y="207.50">configure_an..</text></g><g><title>resolve_crate (4,934,991 samples, 1.35%)</title><rect x="86.0820%" y="181" width="1.3512%" height="15" fill="rgb(247,173,49)"/><text x="86.3320%" y="191.50"></text></g><g><title>drop_ast (406,115 samples, 0.11%)</title><rect x="87.4332%" y="197" width="0.1112%" height="15" fill="rgb(224,114,35)"/><text x="87.6832%" y="207.50"></text></g><g><title>early_lint_checks (760,417 samples, 0.21%)</title><rect x="87.5486%" y="197" width="0.2082%" height="15" fill="rgb(245,159,27)"/><text x="87.7986%" y="207.50"></text></g><g><title>free_global_ctxt (6,462,156 samples, 1.77%)</title><rect x="87.7569%" y="197" width="1.7693%" height="15" fill="rgb(245,172,44)"/><text x="88.0069%" y="207.50"></text></g><g><title>item_attrs (444,954 samples, 0.12%)</title><rect x="90.4282%" y="101" width="0.1218%" height="15" fill="rgb(236,23,11)"/><text x="90.6782%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (431,404 samples, 0.12%)</title><rect x="90.4319%" y="85" width="0.1181%" height="15" fill="rgb(205,117,38)"/><text x="90.6819%" y="95.50"></text></g><g><title>codegen_fn_attrs (618,074 samples, 0.17%)</title><rect x="90.4055%" y="117" width="0.1692%" height="15" fill="rgb(237,72,25)"/><text x="90.6555%" y="127.50"></text></g><g><title>mir_shims (383,603 samples, 0.11%)</title><rect x="90.6364%" y="117" width="0.1050%" height="15" fill="rgb(244,70,9)"/><text x="90.8864%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (739,091 samples, 0.20%)</title><rect x="90.9237%" y="101" width="0.2024%" height="15" fill="rgb(217,125,39)"/><text x="91.1737%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (588,526 samples, 0.16%)</title><rect x="91.1261%" y="101" width="0.1611%" height="15" fill="rgb(235,36,10)"/><text x="91.3761%" y="111.50"></text></g><g><title>optimized_mir (2,058,425 samples, 0.56%)</title><rect x="90.7415%" y="117" width="0.5636%" height="15" fill="rgb(251,123,47)"/><text x="90.9915%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (417,695 samples, 0.11%)</title><rect x="91.3829%" y="101" width="0.1144%" height="15" fill="rgb(221,13,13)"/><text x="91.6329%" y="111.50"></text></g><g><title>specialization_graph_of (502,934 samples, 0.14%)</title><rect x="91.5851%" y="101" width="0.1377%" height="15" fill="rgb(238,131,9)"/><text x="91.8351%" y="111.50"></text></g><g><title>resolve_instance (1,691,236 samples, 0.46%)</title><rect x="91.3051%" y="117" width="0.4631%" height="15" fill="rgb(211,50,8)"/><text x="91.5551%" y="127.50"></text></g><g><title>eval_to_const_value_raw (466,362 samples, 0.13%)</title><rect x="91.7845%" y="101" width="0.1277%" height="15" fill="rgb(245,182,24)"/><text x="92.0345%" y="111.50"></text></g><g><title>eval_to_const_value_raw (442,932 samples, 0.12%)</title><rect x="91.7909%" y="85" width="0.1213%" height="15" fill="rgb(242,14,37)"/><text x="92.0409%" y="95.50"></text></g><g><title>eval_to_allocation_raw (409,722 samples, 0.11%)</title><rect x="91.8000%" y="69" width="0.1122%" height="15" fill="rgb(246,228,12)"/><text x="92.0500%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (543,504 samples, 0.15%)</title><rect x="91.7681%" y="117" width="0.1488%" height="15" fill="rgb(213,55,15)"/><text x="92.0181%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (6,553,596 samples, 1.79%)</title><rect x="90.2158%" y="133" width="1.7944%" height="15" fill="rgb(209,9,3)"/><text x="90.4658%" y="143.50">m..</text></g><g><title>monomorphization_collector (6,594,866 samples, 1.81%)</title><rect x="90.2149%" y="149" width="1.8057%" height="15" fill="rgb(230,59,30)"/><text x="90.4649%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (561,235 samples, 0.15%)</title><rect x="92.0236%" y="133" width="0.1537%" height="15" fill="rgb(209,121,21)"/><text x="92.2736%" y="143.50"></text></g><g><title>symbol_name (500,725 samples, 0.14%)</title><rect x="92.0402%" y="117" width="0.1371%" height="15" fill="rgb(220,109,13)"/><text x="92.2902%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (7,747,928 samples, 2.12%)</title><rect x="90.1401%" y="165" width="2.1214%" height="15" fill="rgb(232,18,1)"/><text x="90.3901%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (880,089 samples, 0.24%)</title><rect x="92.0206%" y="149" width="0.2410%" height="15" fill="rgb(215,41,42)"/><text x="92.2706%" y="159.50"></text></g><g><title>exported_symbols (7,936,310 samples, 2.17%)</title><rect x="90.1299%" y="181" width="2.1730%" height="15" fill="rgb(224,123,36)"/><text x="90.3799%" y="191.50">e..</text></g><g><title>layout_of (886,272 samples, 0.24%)</title><rect x="93.3482%" y="165" width="0.2427%" height="15" fill="rgb(240,125,3)"/><text x="93.5982%" y="175.50"></text></g><g><title>needs_drop_raw (754,565 samples, 0.21%)</title><rect x="94.7459%" y="149" width="0.2066%" height="15" fill="rgb(205,98,50)"/><text x="94.9959%" y="159.50"></text></g><g><title>is_copy_raw (666,524 samples, 0.18%)</title><rect x="94.7700%" y="133" width="0.1825%" height="15" fill="rgb(205,185,37)"/><text x="95.0200%" y="143.50"></text></g><g><title>evaluate_obligation (555,484 samples, 0.15%)</title><rect x="94.8004%" y="117" width="0.1521%" height="15" fill="rgb(238,207,15)"/><text x="95.0504%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,009,708 samples, 1.37%)</title><rect x="93.5909%" y="165" width="1.3717%" height="15" fill="rgb(213,199,42)"/><text x="93.8409%" y="175.50"></text></g><g><title>optimized_mir (9,650,939 samples, 2.64%)</title><rect x="92.3301%" y="181" width="2.6424%" height="15" fill="rgb(235,201,11)"/><text x="92.5801%" y="191.50">op..</text></g><g><title>generate_crate_metadata (20,025,453 samples, 5.48%)</title><rect x="89.5262%" y="197" width="5.4830%" height="15" fill="rgb(207,46,11)"/><text x="89.7762%" y="207.50">generat..</text></g><g><title>hir_lowering (7,289,314 samples, 2.00%)</title><rect x="95.0091%" y="197" width="1.9958%" height="15" fill="rgb(241,35,35)"/><text x="95.2591%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (835,128 samples, 0.23%)</title><rect x="97.0205%" y="181" width="0.2287%" height="15" fill="rgb(243,32,47)"/><text x="97.2705%" y="191.50"></text></g><g><title>link_crate (2,167,682 samples, 0.59%)</title><rect x="97.2491%" y="181" width="0.5935%" height="15" fill="rgb(247,202,23)"/><text x="97.4991%" y="191.50"></text></g><g><title>link_binary (2,118,312 samples, 0.58%)</title><rect x="97.2627%" y="165" width="0.5800%" height="15" fill="rgb(219,102,11)"/><text x="97.5127%" y="175.50"></text></g><g><title>link_rlib (1,448,585 samples, 0.40%)</title><rect x="97.4460%" y="149" width="0.3966%" height="15" fill="rgb(243,110,44)"/><text x="97.6960%" y="159.50"></text></g><g><title>link (3,071,361 samples, 0.84%)</title><rect x="97.0050%" y="197" width="0.8409%" height="15" fill="rgb(222,74,54)"/><text x="97.2550%" y="207.50"></text></g><g><title>parse_crate (5,866,229 samples, 1.61%)</title><rect x="97.8459%" y="197" width="1.6062%" height="15" fill="rgb(216,99,12)"/><text x="98.0959%" y="207.50"></text></g><g><title>prepare_outputs (397,854 samples, 0.11%)</title><rect x="99.4543%" y="197" width="0.1089%" height="15" fill="rgb(226,22,26)"/><text x="99.7043%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,081,901 samples, 0.30%)</title><rect x="99.5633%" y="197" width="0.2962%" height="15" fill="rgb(217,163,10)"/><text x="99.8133%" y="207.50"></text></g><g><title>all (365,230,728 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (365,230,728 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (400,374 samples, 0.11%)</title><rect x="99.8904%" y="197" width="0.1096%" height="15" fill="rgb(220,39,43)"/><text x="100.1404%" y="207.50"></text></g></svg></svg>