<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (191,208,444 samples, 13.55%)</title><rect x="0.0399%" y="149" width="13.5496%" height="15" fill="rgb(227,0,7)"/><text x="0.2899%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,643,396 samples, 0.12%)</title><rect x="14.9151%" y="37" width="0.1165%" height="15" fill="rgb(217,0,24)"/><text x="15.1651%" y="47.50"></text></g><g><title>mir_const (8,628,377 samples, 0.61%)</title><rect x="14.5915%" y="85" width="0.6114%" height="15" fill="rgb(221,193,54)"/><text x="14.8415%" y="95.50"></text></g><g><title>unsafety_check_result (7,560,224 samples, 0.54%)</title><rect x="14.6672%" y="69" width="0.5357%" height="15" fill="rgb(248,212,6)"/><text x="14.9172%" y="79.50"></text></g><g><title>mir_built (6,683,517 samples, 0.47%)</title><rect x="14.7293%" y="53" width="0.4736%" height="15" fill="rgb(208,68,35)"/><text x="14.9793%" y="63.50"></text></g><g><title>mir_promoted (9,486,257 samples, 0.67%)</title><rect x="14.5330%" y="101" width="0.6722%" height="15" fill="rgb(232,128,0)"/><text x="14.7830%" y="111.50"></text></g><g><title>type_op_prove_predicate (3,130,877 samples, 0.22%)</title><rect x="15.2840%" y="101" width="0.2219%" height="15" fill="rgb(207,160,47)"/><text x="15.5340%" y="111.50"></text></g><g><title>MIR_borrow_checking (26,834,923 samples, 1.90%)</title><rect x="13.6055%" y="133" width="1.9016%" height="15" fill="rgb(228,23,34)"/><text x="13.8555%" y="143.50">M..</text></g><g><title>mir_borrowck (26,744,363 samples, 1.90%)</title><rect x="13.6119%" y="117" width="1.8952%" height="15" fill="rgb(218,30,26)"/><text x="13.8619%" y="127.50">m..</text></g><g><title>crate_lints (1,844,159 samples, 0.13%)</title><rect x="15.6761%" y="101" width="0.1307%" height="15" fill="rgb(220,122,19)"/><text x="15.9261%" y="111.50"></text></g><g><title>lint_checking (2,339,494 samples, 0.17%)</title><rect x="15.6760%" y="117" width="0.1658%" height="15" fill="rgb(250,228,42)"/><text x="15.9260%" y="127.50"></text></g><g><title>misc_checking_3 (3,639,047 samples, 0.26%)</title><rect x="15.6470%" y="133" width="0.2579%" height="15" fill="rgb(240,193,28)"/><text x="15.8970%" y="143.50"></text></g><g><title>impl_parent (1,621,966 samples, 0.11%)</title><rect x="16.0851%" y="69" width="0.1149%" height="15" fill="rgb(216,20,37)"/><text x="16.3351%" y="79.50"></text></g><g><title>impl_trait_ref (4,207,734 samples, 0.30%)</title><rect x="16.2000%" y="69" width="0.2982%" height="15" fill="rgb(206,188,39)"/><text x="16.4500%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,608,567 samples, 0.26%)</title><rect x="16.2425%" y="53" width="0.2557%" height="15" fill="rgb(217,207,13)"/><text x="16.4925%" y="63.50"></text></g><g><title>coherent_trait (8,819,199 samples, 0.62%)</title><rect x="15.9093%" y="101" width="0.6250%" height="15" fill="rgb(231,73,38)"/><text x="16.1593%" y="111.50"></text></g><g><title>specialization_graph_of (8,808,549 samples, 0.62%)</title><rect x="15.9101%" y="85" width="0.6242%" height="15" fill="rgb(225,20,46)"/><text x="16.1601%" y="95.50"></text></g><g><title>coherence_checking (8,860,500 samples, 0.63%)</title><rect x="15.9084%" y="117" width="0.6279%" height="15" fill="rgb(210,31,41)"/><text x="16.1584%" y="127.50"></text></g><g><title>evaluate_obligation (2,285,573 samples, 0.16%)</title><rect x="18.5824%" y="53" width="0.1620%" height="15" fill="rgb(221,200,47)"/><text x="18.8324%" y="63.50"></text></g><g><title>typeck (17,185,945 samples, 1.22%)</title><rect x="17.6822%" y="69" width="1.2178%" height="15" fill="rgb(226,26,5)"/><text x="17.9322%" y="79.50"></text></g><g><title>item_bodies_checking (33,384,789 samples, 2.37%)</title><rect x="16.5376%" y="117" width="2.3657%" height="15" fill="rgb(249,33,26)"/><text x="16.7876%" y="127.50">it..</text></g><g><title>typeck_item_bodies (33,382,059 samples, 2.37%)</title><rect x="16.5378%" y="101" width="2.3655%" height="15" fill="rgb(235,183,28)"/><text x="16.7878%" y="111.50">ty..</text></g><g><title>typeck (33,327,629 samples, 2.36%)</title><rect x="16.5417%" y="85" width="2.3617%" height="15" fill="rgb(221,5,38)"/><text x="16.7917%" y="95.50">ty..</text></g><g><title>type_collecting (1,483,036 samples, 0.11%)</title><rect x="18.9493%" y="117" width="0.1051%" height="15" fill="rgb(247,18,42)"/><text x="19.1993%" y="127.50"></text></g><g><title>collect_mod_item_types (1,477,076 samples, 0.10%)</title><rect x="18.9497%" y="101" width="0.1047%" height="15" fill="rgb(241,131,45)"/><text x="19.1997%" y="111.50"></text></g><g><title>check_impl_item_well_formed (3,462,805 samples, 0.25%)</title><rect x="19.0627%" y="101" width="0.2454%" height="15" fill="rgb(249,31,29)"/><text x="19.3127%" y="111.50"></text></g><g><title>analysis (81,464,347 samples, 5.77%)</title><rect x="13.5894%" y="149" width="5.7728%" height="15" fill="rgb(225,111,53)"/><text x="13.8394%" y="159.50">analysis</text></g><g><title>type_check_crate (48,788,796 samples, 3.46%)</title><rect x="15.9049%" y="133" width="3.4573%" height="15" fill="rgb(238,160,17)"/><text x="16.1549%" y="143.50">typ..</text></g><g><title>wf_checking (4,340,183 samples, 0.31%)</title><rect x="19.0547%" y="117" width="0.3076%" height="15" fill="rgb(214,148,48)"/><text x="19.3047%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (5,042,704 samples, 0.36%)</title><rect x="29.0114%" y="117" width="0.3573%" height="15" fill="rgb(232,36,49)"/><text x="29.2614%" y="127.50"></text></g><g><title>layout_of (2,612,544 samples, 0.19%)</title><rect x="30.0564%" y="101" width="0.1851%" height="15" fill="rgb(209,103,24)"/><text x="30.3064%" y="111.50"></text></g><g><title>predicates_of (2,922,555 samples, 0.21%)</title><rect x="30.5990%" y="85" width="0.2071%" height="15" fill="rgb(229,88,8)"/><text x="30.8490%" y="95.50"></text></g><g><title>predicates_defined_on (2,254,228 samples, 0.16%)</title><rect x="30.6463%" y="69" width="0.1597%" height="15" fill="rgb(213,181,19)"/><text x="30.8963%" y="79.50"></text></g><g><title>param_env (7,997,084 samples, 0.57%)</title><rect x="30.2415%" y="101" width="0.5667%" height="15" fill="rgb(254,191,54)"/><text x="30.4915%" y="111.50"></text></g><g><title>fn_abi_of_instance (20,498,064 samples, 1.45%)</title><rect x="29.4541%" y="117" width="1.4525%" height="15" fill="rgb(241,83,37)"/><text x="29.7041%" y="127.50"></text></g><g><title>layout_of (3,860,190 samples, 0.27%)</title><rect x="30.9843%" y="117" width="0.2735%" height="15" fill="rgb(233,36,39)"/><text x="31.2343%" y="127.50"></text></g><g><title>symbol_name (1,616,807 samples, 0.11%)</title><rect x="31.2593%" y="117" width="0.1146%" height="15" fill="rgb(226,3,54)"/><text x="31.5093%" y="127.50"></text></g><g><title>codegen_module (167,282,533 samples, 11.85%)</title><rect x="19.5572%" y="133" width="11.8541%" height="15" fill="rgb(245,192,40)"/><text x="19.8072%" y="143.50">codegen_module</text></g><g><title>codegen_crate (170,111,819 samples, 12.05%)</title><rect x="19.3631%" y="149" width="12.0546%" height="15" fill="rgb(238,167,29)"/><text x="19.6131%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (594,531,589 samples, 42.13%)</title><rect x="31.4312%" y="133" width="42.1302%" height="15" fill="rgb(232,182,51)"/><text x="31.6812%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (571,511,637 samples, 40.50%)</title><rect x="33.0624%" y="117" width="40.4989%" height="15" fill="rgb(231,60,39)"/><text x="33.3124%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (625,077,210 samples, 44.29%)</title><rect x="31.4177%" y="149" width="44.2947%" height="15" fill="rgb(208,69,12)"/><text x="31.6677%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (30,355,150 samples, 2.15%)</title><rect x="73.5614%" y="133" width="2.1511%" height="15" fill="rgb(235,93,37)"/><text x="73.8114%" y="143.50">L..</text></g><g><title>macro_expand_crate (36,781,484 samples, 2.61%)</title><rect x="75.7437%" y="133" width="2.6064%" height="15" fill="rgb(213,116,39)"/><text x="75.9937%" y="143.50">ma..</text></g><g><title>expand_crate (36,758,063 samples, 2.60%)</title><rect x="75.7454%" y="117" width="2.6048%" height="15" fill="rgb(222,207,29)"/><text x="75.9954%" y="127.50">ex..</text></g><g><title>metadata_register_crate (9,635,208 samples, 0.68%)</title><rect x="77.6674%" y="101" width="0.6828%" height="15" fill="rgb(206,96,30)"/><text x="77.9174%" y="111.50"></text></g><g><title>metadata_register_crate (6,780,368 samples, 0.48%)</title><rect x="77.8697%" y="85" width="0.4805%" height="15" fill="rgb(218,138,4)"/><text x="78.1197%" y="95.50"></text></g><g><title>late_resolve_crate (2,170,752 samples, 0.15%)</title><rect x="78.3827%" y="117" width="0.1538%" height="15" fill="rgb(250,191,14)"/><text x="78.6327%" y="127.50"></text></g><g><title>configure_and_expand (39,923,316 samples, 2.83%)</title><rect x="75.7124%" y="149" width="2.8291%" height="15" fill="rgb(239,60,40)"/><text x="75.9624%" y="159.50">co..</text></g><g><title>resolve_crate (2,440,375 samples, 0.17%)</title><rect x="78.3685%" y="133" width="0.1729%" height="15" fill="rgb(206,27,48)"/><text x="78.6185%" y="143.50"></text></g><g><title>free_global_ctxt (8,938,901 samples, 0.63%)</title><rect x="78.5712%" y="149" width="0.6334%" height="15" fill="rgb(225,35,8)"/><text x="78.8212%" y="159.50"></text></g><g><title>item_attrs (1,776,930 samples, 0.13%)</title><rect x="79.7924%" y="53" width="0.1259%" height="15" fill="rgb(250,213,24)"/><text x="80.0424%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,688,049 samples, 0.12%)</title><rect x="79.7987%" y="37" width="0.1196%" height="15" fill="rgb(247,123,22)"/><text x="80.0487%" y="47.50"></text></g><g><title>codegen_fn_attrs (3,224,645 samples, 0.23%)</title><rect x="79.7388%" y="69" width="0.2285%" height="15" fill="rgb(231,138,38)"/><text x="79.9888%" y="79.50"></text></g><g><title>mir_shims (3,068,061 samples, 0.22%)</title><rect x="80.0152%" y="69" width="0.2174%" height="15" fill="rgb(231,145,46)"/><text x="80.2652%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,567,201 samples, 0.25%)</title><rect x="80.4598%" y="53" width="0.2528%" height="15" fill="rgb(251,118,11)"/><text x="80.7098%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,280,224 samples, 0.23%)</title><rect x="80.7126%" y="53" width="0.2324%" height="15" fill="rgb(217,147,25)"/><text x="80.9626%" y="63.50"></text></g><g><title>optimized_mir (10,847,953 samples, 0.77%)</title><rect x="80.2326%" y="69" width="0.7687%" height="15" fill="rgb(247,81,37)"/><text x="80.4826%" y="79.50"></text></g><g><title>evaluate_obligation (1,700,235 samples, 0.12%)</title><rect x="81.5678%" y="37" width="0.1205%" height="15" fill="rgb(209,12,38)"/><text x="81.8178%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (8,301,836 samples, 0.59%)</title><rect x="81.1667%" y="53" width="0.5883%" height="15" fill="rgb(227,1,9)"/><text x="81.4167%" y="63.50"></text></g><g><title>specialization_graph_of (3,962,873 samples, 0.28%)</title><rect x="81.9024%" y="53" width="0.2808%" height="15" fill="rgb(248,47,43)"/><text x="82.1524%" y="63.50"></text></g><g><title>impl_trait_ref (1,718,041 samples, 0.12%)</title><rect x="82.0614%" y="37" width="0.1217%" height="15" fill="rgb(221,10,30)"/><text x="82.3114%" y="47.50"></text></g><g><title>resolve_instance (17,353,690 samples, 1.23%)</title><rect x="81.0013%" y="69" width="1.2297%" height="15" fill="rgb(210,229,1)"/><text x="81.2513%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,642,009 samples, 0.12%)</title><rect x="82.2310%" y="69" width="0.1164%" height="15" fill="rgb(222,148,37)"/><text x="82.4810%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,803,769 samples, 0.13%)</title><rect x="82.3474%" y="69" width="0.1278%" height="15" fill="rgb(234,67,33)"/><text x="82.5974%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (46,038,137 samples, 3.26%)</title><rect x="79.3166%" y="85" width="3.2624%" height="15" fill="rgb(247,98,35)"/><text x="79.5666%" y="95.50">mon..</text></g><g><title>monomorphization_collector (46,076,398 samples, 3.27%)</title><rect x="79.3164%" y="101" width="3.2651%" height="15" fill="rgb(247,138,52)"/><text x="79.5664%" y="111.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,376,404 samples, 0.38%)</title><rect x="82.5818%" y="85" width="0.3810%" height="15" fill="rgb(213,79,30)"/><text x="82.8318%" y="95.50"></text></g><g><title>symbol_name (4,825,002 samples, 0.34%)</title><rect x="82.6209%" y="69" width="0.3419%" height="15" fill="rgb(246,177,23)"/><text x="82.8709%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (53,705,266 samples, 3.81%)</title><rect x="79.3127%" y="117" width="3.8057%" height="15" fill="rgb(230,62,27)"/><text x="79.5627%" y="127.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (7,576,406 samples, 0.54%)</title><rect x="82.5815%" y="101" width="0.5369%" height="15" fill="rgb(216,154,8)"/><text x="82.8315%" y="111.50"></text></g><g><title>cgu_partitioning (2,196,262 samples, 0.16%)</title><rect x="82.9628%" y="85" width="0.1556%" height="15" fill="rgb(244,35,45)"/><text x="83.2128%" y="95.50"></text></g><g><title>exported_symbols (53,982,818 samples, 3.83%)</title><rect x="79.2964%" y="133" width="3.8254%" height="15" fill="rgb(251,115,12)"/><text x="79.5464%" y="143.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,902,913 samples, 0.13%)</title><rect x="83.2423%" y="117" width="0.1348%" height="15" fill="rgb(240,54,50)"/><text x="83.4923%" y="127.50"></text></g><g><title>optimized_mir (3,600,838 samples, 0.26%)</title><rect x="83.1265%" y="133" width="0.2552%" height="15" fill="rgb(233,84,52)"/><text x="83.3765%" y="143.50"></text></g><g><title>generate_crate_metadata (59,001,410 samples, 4.18%)</title><rect x="79.2046%" y="149" width="4.1810%" height="15" fill="rgb(207,117,47)"/><text x="79.4546%" y="159.50">gener..</text></g><g><title>hir_lowering (2,040,631 samples, 0.14%)</title><rect x="83.3856%" y="149" width="0.1446%" height="15" fill="rgb(249,43,39)"/><text x="83.6356%" y="159.50"></text></g><g><title>finish_ongoing_codegen (22,907,563 samples, 1.62%)</title><rect x="83.5312%" y="133" width="1.6233%" height="15" fill="rgb(209,38,44)"/><text x="83.7812%" y="143.50"></text></g><g><title>link_binary_remove_temps (199,919,342 samples, 14.17%)</title><rect x="85.1808%" y="101" width="14.1668%" height="15" fill="rgb(236,212,23)"/><text x="85.4308%" y="111.50">link_binary_remove_tem..</text></g><g><title>link_crate (203,388,107 samples, 14.41%)</title><rect x="85.1545%" y="133" width="14.4126%" height="15" fill="rgb(242,79,21)"/><text x="85.4045%" y="143.50">link_crate</text></g><g><title>link_binary (203,333,687 samples, 14.41%)</title><rect x="85.1584%" y="117" width="14.4088%" height="15" fill="rgb(211,96,35)"/><text x="85.4084%" y="127.50">link_binary</text></g><g><title>link_rlib (3,097,871 samples, 0.22%)</title><rect x="99.3476%" y="101" width="0.2195%" height="15" fill="rgb(253,215,40)"/><text x="99.5976%" y="111.50"></text></g><g><title>link (226,320,040 samples, 16.04%)</title><rect x="83.5303%" y="149" width="16.0377%" height="15" fill="rgb(211,81,21)"/><text x="83.7803%" y="159.50">link</text></g><g><title>parse_crate (3,847,580 samples, 0.27%)</title><rect x="99.5679%" y="149" width="0.2727%" height="15" fill="rgb(208,190,38)"/><text x="99.8179%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,590,486 samples, 0.11%)</title><rect x="99.8557%" y="149" width="0.1127%" height="15" fill="rgb(235,213,38)"/><text x="100.1057%" y="159.50"></text></g><g><title>all (1,411,178,031 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,411,178,031 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>