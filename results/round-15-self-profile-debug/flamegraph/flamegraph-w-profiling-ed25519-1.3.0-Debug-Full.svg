<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (32,532,338 samples, 13.31%)</title><rect x="0.1603%" y="197" width="13.3094%" height="15" fill="rgb(227,0,7)"/><text x="0.4103%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (734,568 samples, 0.30%)</title><rect x="15.9672%" y="85" width="0.3005%" height="15" fill="rgb(217,0,24)"/><text x="16.2172%" y="95.50"></text></g><g><title>is_copy_raw (474,825 samples, 0.19%)</title><rect x="16.0735%" y="69" width="0.1943%" height="15" fill="rgb(221,193,54)"/><text x="16.3235%" y="79.50"></text></g><g><title>evaluate_obligation (417,372 samples, 0.17%)</title><rect x="16.0970%" y="53" width="0.1708%" height="15" fill="rgb(248,212,6)"/><text x="16.3470%" y="63.50"></text></g><g><title>impl_parent (428,163 samples, 0.18%)</title><rect x="16.4969%" y="53" width="0.1752%" height="15" fill="rgb(208,68,35)"/><text x="16.7469%" y="63.50"></text></g><g><title>specialization_graph_of (1,141,412 samples, 0.47%)</title><rect x="16.3782%" y="69" width="0.4670%" height="15" fill="rgb(232,128,0)"/><text x="16.6282%" y="79.50"></text></g><g><title>impl_trait_ref (423,216 samples, 0.17%)</title><rect x="16.6720%" y="53" width="0.1731%" height="15" fill="rgb(207,160,47)"/><text x="16.9220%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (362,935 samples, 0.15%)</title><rect x="16.6967%" y="37" width="0.1485%" height="15" fill="rgb(228,23,34)"/><text x="16.9467%" y="47.50"></text></g><g><title>resolve_instance (1,442,833 samples, 0.59%)</title><rect x="16.2677%" y="85" width="0.5903%" height="15" fill="rgb(218,30,26)"/><text x="16.5177%" y="95.50"></text></g><g><title>thir_body (337,953 samples, 0.14%)</title><rect x="16.8612%" y="85" width="0.1383%" height="15" fill="rgb(220,122,19)"/><text x="17.1112%" y="95.50"></text></g><g><title>mir_const (4,246,532 samples, 1.74%)</title><rect x="15.2645%" y="133" width="1.7373%" height="15" fill="rgb(250,228,42)"/><text x="15.5145%" y="143.50"></text></g><g><title>unsafety_check_result (3,845,068 samples, 1.57%)</title><rect x="15.4288%" y="117" width="1.5731%" height="15" fill="rgb(240,193,28)"/><text x="15.6788%" y="127.50"></text></g><g><title>mir_built (3,493,214 samples, 1.43%)</title><rect x="15.5727%" y="101" width="1.4291%" height="15" fill="rgb(216,20,37)"/><text x="15.8227%" y="111.50"></text></g><g><title>mir_promoted (4,565,605 samples, 1.87%)</title><rect x="15.1476%" y="149" width="1.8678%" height="15" fill="rgb(206,188,39)"/><text x="15.3976%" y="159.50">m..</text></g><g><title>type_op_normalize_fn_sig (424,936 samples, 0.17%)</title><rect x="17.0654%" y="149" width="0.1738%" height="15" fill="rgb(217,207,13)"/><text x="17.3154%" y="159.50"></text></g><g><title>normalize_projection_ty (294,993 samples, 0.12%)</title><rect x="17.1185%" y="133" width="0.1207%" height="15" fill="rgb(231,73,38)"/><text x="17.3685%" y="143.50"></text></g><g><title>type_op_prove_predicate (881,229 samples, 0.36%)</title><rect x="17.2842%" y="149" width="0.3605%" height="15" fill="rgb(225,20,46)"/><text x="17.5342%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,089,832 samples, 4.13%)</title><rect x="13.5206%" y="181" width="4.1279%" height="15" fill="rgb(210,31,41)"/><text x="13.7706%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (10,048,522 samples, 4.11%)</title><rect x="13.5375%" y="165" width="4.1110%" height="15" fill="rgb(221,200,47)"/><text x="13.7875%" y="175.50">mir_..</text></g><g><title>check_mod_attrs (336,443 samples, 0.14%)</title><rect x="17.7096%" y="165" width="0.1376%" height="15" fill="rgb(226,26,5)"/><text x="17.9596%" y="175.50"></text></g><g><title>misc_checking_1 (637,926 samples, 0.26%)</title><rect x="17.7047%" y="181" width="0.2610%" height="15" fill="rgb(249,33,26)"/><text x="17.9547%" y="191.50"></text></g><g><title>misc_checking_2 (427,754 samples, 0.17%)</title><rect x="17.9657%" y="181" width="0.1750%" height="15" fill="rgb(235,183,28)"/><text x="18.2157%" y="191.50"></text></g><g><title>crate_lints (1,887,919 samples, 0.77%)</title><rect x="18.2649%" y="149" width="0.7724%" height="15" fill="rgb(221,5,38)"/><text x="18.5149%" y="159.50"></text></g><g><title>type_of (1,034,552 samples, 0.42%)</title><rect x="18.6140%" y="133" width="0.4232%" height="15" fill="rgb(247,18,42)"/><text x="18.8640%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (802,200 samples, 0.33%)</title><rect x="18.7091%" y="117" width="0.3282%" height="15" fill="rgb(241,131,45)"/><text x="18.9591%" y="127.50"></text></g><g><title>lint_checking (2,026,950 samples, 0.83%)</title><rect x="18.2644%" y="165" width="0.8293%" height="15" fill="rgb(249,31,29)"/><text x="18.5144%" y="175.50"></text></g><g><title>privacy_checking_modules (290,253 samples, 0.12%)</title><rect x="19.1303%" y="165" width="0.1187%" height="15" fill="rgb(225,111,53)"/><text x="19.3803%" y="175.50"></text></g><g><title>check_mod_privacy (288,903 samples, 0.12%)</title><rect x="19.1308%" y="149" width="0.1182%" height="15" fill="rgb(238,160,17)"/><text x="19.3808%" y="159.50"></text></g><g><title>misc_checking_3 (2,718,557 samples, 1.11%)</title><rect x="18.1407%" y="181" width="1.1122%" height="15" fill="rgb(214,148,48)"/><text x="18.3907%" y="191.50"></text></g><g><title>adt_destructor (300,203 samples, 0.12%)</title><rect x="19.2908%" y="133" width="0.1228%" height="15" fill="rgb(232,36,49)"/><text x="19.5408%" y="143.50"></text></g><g><title>coherent_trait (297,813 samples, 0.12%)</title><rect x="19.2918%" y="117" width="0.1218%" height="15" fill="rgb(209,103,24)"/><text x="19.5418%" y="127.50"></text></g><g><title>specialization_graph_of (296,473 samples, 0.12%)</title><rect x="19.2923%" y="101" width="0.1213%" height="15" fill="rgb(229,88,8)"/><text x="19.5423%" y="111.50"></text></g><g><title>mir_borrowck (365,545 samples, 0.15%)</title><rect x="21.4901%" y="37" width="0.1495%" height="15" fill="rgb(213,181,19)"/><text x="21.7401%" y="47.50"></text></g><g><title>mir_for_ctfe (512,796 samples, 0.21%)</title><rect x="21.4303%" y="69" width="0.2098%" height="15" fill="rgb(254,191,54)"/><text x="21.6803%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (472,725 samples, 0.19%)</title><rect x="21.4467%" y="53" width="0.1934%" height="15" fill="rgb(241,83,37)"/><text x="21.6967%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,428,865 samples, 0.58%)</title><rect x="21.3066%" y="117" width="0.5846%" height="15" fill="rgb(233,36,39)"/><text x="21.5566%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,420,475 samples, 0.58%)</title><rect x="21.3100%" y="101" width="0.5811%" height="15" fill="rgb(226,3,54)"/><text x="21.5600%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,415,245 samples, 0.58%)</title><rect x="21.3122%" y="85" width="0.5790%" height="15" fill="rgb(245,192,40)"/><text x="21.5622%" y="95.50"></text></g><g><title>typeck (396,265 samples, 0.16%)</title><rect x="21.7291%" y="69" width="0.1621%" height="15" fill="rgb(238,167,29)"/><text x="21.9791%" y="79.50"></text></g><g><title>impl_parent (2,873,840 samples, 1.18%)</title><rect x="21.8930%" y="117" width="1.1757%" height="15" fill="rgb(232,182,51)"/><text x="22.1430%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,597,506 samples, 0.65%)</title><rect x="22.4152%" y="101" width="0.6536%" height="15" fill="rgb(231,60,39)"/><text x="22.6652%" y="111.50"></text></g><g><title>impl_trait_ref (5,819,622 samples, 2.38%)</title><rect x="23.0692%" y="117" width="2.3809%" height="15" fill="rgb(208,69,12)"/><text x="23.3192%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,545,888 samples, 1.86%)</title><rect x="23.5903%" y="101" width="1.8598%" height="15" fill="rgb(235,93,37)"/><text x="23.8403%" y="111.50">m..</text></g><g><title>trait_impls_of (1,003,310 samples, 0.41%)</title><rect x="25.4959%" y="117" width="0.4105%" height="15" fill="rgb(213,116,39)"/><text x="25.7459%" y="127.50"></text></g><g><title>implementations_of_trait (293,012 samples, 0.12%)</title><rect x="25.7865%" y="101" width="0.1199%" height="15" fill="rgb(222,207,29)"/><text x="26.0365%" y="111.50"></text></g><g><title>coherent_trait (16,208,842 samples, 6.63%)</title><rect x="19.2756%" y="149" width="6.6312%" height="15" fill="rgb(206,96,30)"/><text x="19.5256%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (15,597,176 samples, 6.38%)</title><rect x="19.5259%" y="133" width="6.3810%" height="15" fill="rgb(218,138,4)"/><text x="19.7759%" y="143.50">speciali..</text></g><g><title>coherence_checking (16,276,724 samples, 6.66%)</title><rect x="19.2681%" y="165" width="6.6590%" height="15" fill="rgb(250,191,14)"/><text x="19.5181%" y="175.50">coherence..</text></g><g><title>eval_to_const_value_raw (259,673 samples, 0.11%)</title><rect x="27.8012%" y="117" width="0.1062%" height="15" fill="rgb(239,60,40)"/><text x="28.0512%" y="127.50"></text></g><g><title>eval_to_const_value_raw (258,103 samples, 0.11%)</title><rect x="27.8018%" y="101" width="0.1056%" height="15" fill="rgb(206,27,48)"/><text x="28.0518%" y="111.50"></text></g><g><title>eval_to_allocation_raw (254,373 samples, 0.10%)</title><rect x="27.8034%" y="85" width="0.1041%" height="15" fill="rgb(225,35,8)"/><text x="28.0534%" y="95.50"></text></g><g><title>evaluate_obligation (536,355 samples, 0.22%)</title><rect x="27.9074%" y="117" width="0.2194%" height="15" fill="rgb(250,213,24)"/><text x="28.1574%" y="127.50"></text></g><g><title>associated_item (683,546 samples, 0.28%)</title><rect x="30.0975%" y="85" width="0.2796%" height="15" fill="rgb(247,123,22)"/><text x="30.3475%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (593,266 samples, 0.24%)</title><rect x="30.1344%" y="69" width="0.2427%" height="15" fill="rgb(231,138,38)"/><text x="30.3844%" y="79.50"></text></g><g><title>associated_items (857,217 samples, 0.35%)</title><rect x="30.0392%" y="101" width="0.3507%" height="15" fill="rgb(231,145,46)"/><text x="30.2892%" y="111.50"></text></g><g><title>dropck_outlives (273,954 samples, 0.11%)</title><rect x="30.4037%" y="101" width="0.1121%" height="15" fill="rgb(251,118,11)"/><text x="30.6537%" y="111.50"></text></g><g><title>evaluate_obligation (1,040,810 samples, 0.43%)</title><rect x="30.5922%" y="101" width="0.4258%" height="15" fill="rgb(217,147,25)"/><text x="30.8422%" y="111.50"></text></g><g><title>typeck (7,505,376 samples, 3.07%)</title><rect x="28.3738%" y="117" width="3.0705%" height="15" fill="rgb(247,81,37)"/><text x="28.6238%" y="127.50">typ..</text></g><g><title>item_bodies_checking (13,489,046 samples, 5.52%)</title><rect x="25.9348%" y="165" width="5.5185%" height="15" fill="rgb(209,12,38)"/><text x="26.1848%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (13,486,906 samples, 5.52%)</title><rect x="25.9356%" y="149" width="5.5177%" height="15" fill="rgb(227,1,9)"/><text x="26.1856%" y="159.50">typeck_..</text></g><g><title>typeck (13,456,826 samples, 5.51%)</title><rect x="25.9479%" y="133" width="5.5054%" height="15" fill="rgb(248,47,43)"/><text x="26.1979%" y="143.50">typeck</text></g><g><title>item_types_checking (617,646 samples, 0.25%)</title><rect x="31.4533%" y="165" width="0.2527%" height="15" fill="rgb(221,10,30)"/><text x="31.7033%" y="175.50"></text></g><g><title>check_mod_item_types (615,316 samples, 0.25%)</title><rect x="31.4542%" y="149" width="0.2517%" height="15" fill="rgb(210,229,1)"/><text x="31.7042%" y="159.50"></text></g><g><title>type_collecting (671,667 samples, 0.27%)</title><rect x="31.7064%" y="165" width="0.2748%" height="15" fill="rgb(222,148,37)"/><text x="31.9564%" y="175.50"></text></g><g><title>collect_mod_item_types (664,237 samples, 0.27%)</title><rect x="31.7095%" y="149" width="0.2717%" height="15" fill="rgb(234,67,33)"/><text x="31.9595%" y="159.50"></text></g><g><title>mir_borrowck (252,163 samples, 0.10%)</title><rect x="32.3935%" y="53" width="0.1032%" height="15" fill="rgb(247,98,35)"/><text x="32.6435%" y="63.50"></text></g><g><title>mir_for_ctfe (397,165 samples, 0.16%)</title><rect x="32.3349%" y="85" width="0.1625%" height="15" fill="rgb(247,138,52)"/><text x="32.5849%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (363,604 samples, 0.15%)</title><rect x="32.3486%" y="69" width="0.1488%" height="15" fill="rgb(213,79,30)"/><text x="32.5986%" y="79.50"></text></g><g><title>eval_to_const_value_raw (872,370 samples, 0.36%)</title><rect x="32.2461%" y="133" width="0.3569%" height="15" fill="rgb(246,177,23)"/><text x="32.4961%" y="143.50"></text></g><g><title>eval_to_const_value_raw (862,160 samples, 0.35%)</title><rect x="32.2503%" y="117" width="0.3527%" height="15" fill="rgb(230,62,27)"/><text x="32.5003%" y="127.50"></text></g><g><title>eval_to_allocation_raw (851,750 samples, 0.35%)</title><rect x="32.2545%" y="101" width="0.3485%" height="15" fill="rgb(216,154,8)"/><text x="32.5045%" y="111.50"></text></g><g><title>typeck (257,142 samples, 0.11%)</title><rect x="32.4978%" y="85" width="0.1052%" height="15" fill="rgb(244,35,45)"/><text x="32.7478%" y="95.50"></text></g><g><title>check_impl_item_well_formed (1,901,566 samples, 0.78%)</title><rect x="32.0113%" y="149" width="0.7780%" height="15" fill="rgb(251,115,12)"/><text x="32.2613%" y="159.50"></text></g><g><title>analysis (48,047,064 samples, 19.66%)</title><rect x="13.4697%" y="197" width="19.6567%" height="15" fill="rgb(240,54,50)"/><text x="13.7197%" y="207.50">analysis</text></g><g><title>type_check_crate (33,911,112 samples, 13.87%)</title><rect x="19.2529%" y="181" width="13.8735%" height="15" fill="rgb(233,84,52)"/><text x="19.5029%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,795,518 samples, 1.14%)</title><rect x="31.9827%" y="165" width="1.1437%" height="15" fill="rgb(207,117,47)"/><text x="32.2327%" y="175.50"></text></g><g><title>check_item_well_formed (824,062 samples, 0.34%)</title><rect x="32.7892%" y="149" width="0.3371%" height="15" fill="rgb(249,43,39)"/><text x="33.0392%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (431,334 samples, 0.18%)</title><rect x="43.7982%" y="165" width="0.1765%" height="15" fill="rgb(209,38,44)"/><text x="44.0482%" y="175.50"></text></g><g><title>const_caller_location (414,887 samples, 0.17%)</title><rect x="43.9747%" y="165" width="0.1697%" height="15" fill="rgb(236,212,23)"/><text x="44.2247%" y="175.50"></text></g><g><title>codegen_fn_attrs (310,503 samples, 0.13%)</title><rect x="44.6873%" y="149" width="0.1270%" height="15" fill="rgb(242,79,21)"/><text x="44.9373%" y="159.50"></text></g><g><title>layout_of (1,037,742 samples, 0.42%)</title><rect x="44.8407%" y="149" width="0.4246%" height="15" fill="rgb(211,96,35)"/><text x="45.0907%" y="159.50"></text></g><g><title>def_span (307,852 samples, 0.13%)</title><rect x="45.6967%" y="133" width="0.1259%" height="15" fill="rgb(253,215,40)"/><text x="45.9467%" y="143.50"></text></g><g><title>predicates_of (532,687 samples, 0.22%)</title><rect x="45.8227%" y="133" width="0.2179%" height="15" fill="rgb(211,81,21)"/><text x="46.0727%" y="143.50"></text></g><g><title>predicates_defined_on (394,055 samples, 0.16%)</title><rect x="45.8794%" y="117" width="0.1612%" height="15" fill="rgb(208,190,38)"/><text x="46.1294%" y="127.50"></text></g><g><title>param_env (1,900,036 samples, 0.78%)</title><rect x="45.2652%" y="149" width="0.7773%" height="15" fill="rgb(235,213,38)"/><text x="45.5152%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (970,721 samples, 0.40%)</title><rect x="46.0426%" y="149" width="0.3971%" height="15" fill="rgb(237,122,38)"/><text x="46.2926%" y="159.50"></text></g><g><title>normalize_projection_ty (799,629 samples, 0.33%)</title><rect x="46.1126%" y="133" width="0.3271%" height="15" fill="rgb(244,218,35)"/><text x="46.3626%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,609,809 samples, 2.30%)</title><rect x="44.1497%" y="165" width="2.2950%" height="15" fill="rgb(240,68,47)"/><text x="44.3997%" y="175.50">f..</text></g><g><title>layout_of (485,986 samples, 0.20%)</title><rect x="46.5343%" y="165" width="0.1988%" height="15" fill="rgb(210,16,53)"/><text x="46.7843%" y="175.50"></text></g><g><title>symbol_name (264,923 samples, 0.11%)</title><rect x="46.7407%" y="165" width="0.1084%" height="15" fill="rgb(235,124,12)"/><text x="46.9907%" y="175.50"></text></g><g><title>codegen_module (31,328,687 samples, 12.82%)</title><rect x="34.0578%" y="181" width="12.8170%" height="15" fill="rgb(224,169,11)"/><text x="34.3078%" y="191.50">codegen_module</text></g><g><title>codegen_crate (33,746,960 samples, 13.81%)</title><rect x="33.1288%" y="197" width="13.8063%" height="15" fill="rgb(250,166,2)"/><text x="33.3788%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (94,869,396 samples, 38.81%)</title><rect x="46.9891%" y="181" width="38.8123%" height="15" fill="rgb(242,216,29)"/><text x="47.2391%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (89,236,760 samples, 36.51%)</title><rect x="49.2935%" y="165" width="36.5079%" height="15" fill="rgb(230,116,27)"/><text x="49.5435%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (100,395,683 samples, 41.07%)</title><rect x="46.9351%" y="197" width="41.0731%" height="15" fill="rgb(228,99,48)"/><text x="47.1851%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,394,175 samples, 2.21%)</title><rect x="85.8014%" y="181" width="2.2068%" height="15" fill="rgb(253,11,6)"/><text x="86.0514%" y="191.50">L..</text></g><g><title>macro_expand_crate (5,560,836 samples, 2.28%)</title><rect x="88.1000%" y="181" width="2.2750%" height="15" fill="rgb(247,143,39)"/><text x="88.3500%" y="191.50">m..</text></g><g><title>expand_crate (5,553,366 samples, 2.27%)</title><rect x="88.1031%" y="165" width="2.2720%" height="15" fill="rgb(236,97,10)"/><text x="88.3531%" y="175.50">e..</text></g><g><title>metadata_register_crate (1,308,672 samples, 0.54%)</title><rect x="89.8396%" y="149" width="0.5354%" height="15" fill="rgb(233,208,19)"/><text x="90.0896%" y="159.50"></text></g><g><title>metadata_register_crate (1,035,781 samples, 0.42%)</title><rect x="89.9513%" y="133" width="0.4238%" height="15" fill="rgb(216,164,2)"/><text x="90.2013%" y="143.50"></text></g><g><title>metadata_register_crate (460,084 samples, 0.19%)</title><rect x="90.1868%" y="117" width="0.1882%" height="15" fill="rgb(220,129,5)"/><text x="90.4368%" y="127.50"></text></g><g><title>late_resolve_crate (814,948 samples, 0.33%)</title><rect x="90.4721%" y="165" width="0.3334%" height="15" fill="rgb(242,17,10)"/><text x="90.7221%" y="175.50"></text></g><g><title>configure_and_expand (6,879,789 samples, 2.81%)</title><rect x="88.0082%" y="197" width="2.8146%" height="15" fill="rgb(242,107,0)"/><text x="88.2582%" y="207.50">co..</text></g><g><title>resolve_crate (995,110 samples, 0.41%)</title><rect x="90.4157%" y="181" width="0.4071%" height="15" fill="rgb(251,28,31)"/><text x="90.6657%" y="191.50"></text></g><g><title>free_global_ctxt (4,031,670 samples, 1.65%)</title><rect x="90.9125%" y="197" width="1.6494%" height="15" fill="rgb(233,223,10)"/><text x="91.1625%" y="207.50"></text></g><g><title>item_attrs (809,850 samples, 0.33%)</title><rect x="93.2300%" y="101" width="0.3313%" height="15" fill="rgb(215,21,27)"/><text x="93.4800%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (788,849 samples, 0.32%)</title><rect x="93.2386%" y="85" width="0.3227%" height="15" fill="rgb(232,23,21)"/><text x="93.4886%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,095,501 samples, 0.45%)</title><rect x="93.1805%" y="117" width="0.4482%" height="15" fill="rgb(244,5,23)"/><text x="93.4305%" y="127.50"></text></g><g><title>layout_of (375,002 samples, 0.15%)</title><rect x="94.1926%" y="101" width="0.1534%" height="15" fill="rgb(226,81,46)"/><text x="94.4426%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (817,588 samples, 0.33%)</title><rect x="94.3460%" y="101" width="0.3345%" height="15" fill="rgb(247,70,30)"/><text x="94.5960%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,231,741 samples, 0.50%)</title><rect x="94.6805%" y="101" width="0.5039%" height="15" fill="rgb(212,68,19)"/><text x="94.9305%" y="111.50"></text></g><g><title>eval_to_const_value_raw (345,822 samples, 0.14%)</title><rect x="95.2702%" y="85" width="0.1415%" height="15" fill="rgb(240,187,13)"/><text x="95.5202%" y="95.50"></text></g><g><title>eval_to_const_value_raw (335,802 samples, 0.14%)</title><rect x="95.2743%" y="69" width="0.1374%" height="15" fill="rgb(223,113,26)"/><text x="95.5243%" y="79.50"></text></g><g><title>eval_to_allocation_raw (325,922 samples, 0.13%)</title><rect x="95.2784%" y="53" width="0.1333%" height="15" fill="rgb(206,192,2)"/><text x="95.5284%" y="63.50"></text></g><g><title>optimized_mir (3,970,810 samples, 1.62%)</title><rect x="93.7900%" y="117" width="1.6245%" height="15" fill="rgb(241,108,4)"/><text x="94.0400%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (381,782 samples, 0.16%)</title><rect x="95.2583%" y="101" width="0.1562%" height="15" fill="rgb(247,173,49)"/><text x="95.5083%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,334,584 samples, 0.55%)</title><rect x="95.5773%" y="101" width="0.5460%" height="15" fill="rgb(224,114,35)"/><text x="95.8273%" y="111.50"></text></g><g><title>resolve_instance (2,429,056 samples, 0.99%)</title><rect x="95.4145%" y="117" width="0.9938%" height="15" fill="rgb(245,159,27)"/><text x="95.6645%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (9,385,185 samples, 3.84%)</title><rect x="92.8301%" y="133" width="3.8396%" height="15" fill="rgb(245,172,44)"/><text x="93.0801%" y="143.50">mono..</text></g><g><title>vtable_entries (246,962 samples, 0.10%)</title><rect x="96.5687%" y="117" width="0.1010%" height="15" fill="rgb(236,23,11)"/><text x="96.8187%" y="127.50"></text></g><g><title>monomorphization_collector (9,418,735 samples, 3.85%)</title><rect x="92.8292%" y="149" width="3.8533%" height="15" fill="rgb(205,117,38)"/><text x="93.0792%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (887,359 samples, 0.36%)</title><rect x="96.6863%" y="133" width="0.3630%" height="15" fill="rgb(237,72,25)"/><text x="96.9363%" y="143.50"></text></g><g><title>symbol_name (818,069 samples, 0.33%)</title><rect x="96.7146%" y="117" width="0.3347%" height="15" fill="rgb(244,70,9)"/><text x="96.9646%" y="127.50"></text></g><g><title>cgu_partitioning_place_roots (245,843 samples, 0.10%)</title><rect x="97.1189%" y="117" width="0.1006%" height="15" fill="rgb(217,125,39)"/><text x="97.3689%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (10,781,099 samples, 4.41%)</title><rect x="92.8188%" y="165" width="4.4107%" height="15" fill="rgb(235,36,10)"/><text x="93.0688%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,336,934 samples, 0.55%)</title><rect x="96.6825%" y="149" width="0.5470%" height="15" fill="rgb(251,123,47)"/><text x="96.9325%" y="159.50"></text></g><g><title>cgu_partitioning (440,345 samples, 0.18%)</title><rect x="97.0493%" y="133" width="0.1802%" height="15" fill="rgb(221,13,13)"/><text x="97.2993%" y="143.50"></text></g><g><title>exported_symbols (10,871,980 samples, 4.45%)</title><rect x="92.8009%" y="181" width="4.4479%" height="15" fill="rgb(238,131,9)"/><text x="93.0509%" y="191.50">expor..</text></g><g><title>optimized_mir (558,207 samples, 0.23%)</title><rect x="97.2575%" y="181" width="0.2284%" height="15" fill="rgb(211,50,8)"/><text x="97.5075%" y="191.50"></text></g><g><title>generate_crate_metadata (12,052,882 samples, 4.93%)</title><rect x="92.5619%" y="197" width="4.9310%" height="15" fill="rgb(245,182,24)"/><text x="92.8119%" y="207.50">genera..</text></g><g><title>hir_lowering (950,520 samples, 0.39%)</title><rect x="97.4929%" y="197" width="0.3889%" height="15" fill="rgb(242,14,37)"/><text x="97.7429%" y="207.50"></text></g><g><title>link_binary_remove_temps (263,482 samples, 0.11%)</title><rect x="98.0096%" y="149" width="0.1078%" height="15" fill="rgb(246,228,12)"/><text x="98.2596%" y="159.50"></text></g><g><title>link_crate (1,484,895 samples, 0.61%)</title><rect x="97.8891%" y="181" width="0.6075%" height="15" fill="rgb(213,55,15)"/><text x="98.1391%" y="191.50"></text></g><g><title>link_binary (1,469,505 samples, 0.60%)</title><rect x="97.8954%" y="165" width="0.6012%" height="15" fill="rgb(209,9,3)"/><text x="98.1454%" y="175.50"></text></g><g><title>link_rlib (926,849 samples, 0.38%)</title><rect x="98.1174%" y="149" width="0.3792%" height="15" fill="rgb(230,59,30)"/><text x="98.3674%" y="159.50"></text></g><g><title>link (1,508,985 samples, 0.62%)</title><rect x="97.8818%" y="197" width="0.6173%" height="15" fill="rgb(209,121,21)"/><text x="98.1318%" y="207.50"></text></g><g><title>parse_crate (1,319,224 samples, 0.54%)</title><rect x="98.4991%" y="197" width="0.5397%" height="15" fill="rgb(220,109,13)"/><text x="98.7491%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,737,298 samples, 0.71%)</title><rect x="99.1185%" y="197" width="0.7108%" height="15" fill="rgb(232,18,1)"/><text x="99.3685%" y="207.50"></text></g><g><title>all (244,431,474 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (244,431,474 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (347,843 samples, 0.14%)</title><rect x="99.8577%" y="197" width="0.1423%" height="15" fill="rgb(240,125,3)"/><text x="100.1077%" y="207.50"></text></g></svg></svg>