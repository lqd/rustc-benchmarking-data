<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (125,471,876 samples, 6.99%)</title><rect x="0.1138%" y="181" width="6.9886%" height="15" fill="rgb(227,0,7)"/><text x="0.3638%" y="191.50">LLVM_pass..</text></g><g><title>implied_outlives_bounds (2,076,912 samples, 0.12%)</title><rect x="13.7282%" y="133" width="0.1157%" height="15" fill="rgb(217,0,24)"/><text x="13.9782%" y="143.50"></text></g><g><title>is_copy_raw (9,473,118 samples, 0.53%)</title><rect x="16.5387%" y="53" width="0.5276%" height="15" fill="rgb(221,193,54)"/><text x="16.7887%" y="63.50"></text></g><g><title>evaluate_obligation (7,444,028 samples, 0.41%)</title><rect x="16.6517%" y="37" width="0.4146%" height="15" fill="rgb(248,212,6)"/><text x="16.9017%" y="47.50"></text></g><g><title>needs_drop_raw (11,508,260 samples, 0.64%)</title><rect x="16.4255%" y="69" width="0.6410%" height="15" fill="rgb(208,68,35)"/><text x="16.6755%" y="79.50"></text></g><g><title>thir_body (9,366,756 samples, 0.52%)</title><rect x="17.1512%" y="69" width="0.5217%" height="15" fill="rgb(232,128,0)"/><text x="17.4012%" y="79.50"></text></g><g><title>mir_const (61,648,670 samples, 3.43%)</title><rect x="14.2885%" y="117" width="3.4337%" height="15" fill="rgb(207,160,47)"/><text x="14.5385%" y="127.50">mir..</text></g><g><title>unsafety_check_result (55,424,861 samples, 3.09%)</title><rect x="14.6352%" y="101" width="3.0871%" height="15" fill="rgb(228,23,34)"/><text x="14.8852%" y="111.50">uns..</text></g><g><title>mir_built (50,650,388 samples, 2.82%)</title><rect x="14.9011%" y="85" width="2.8211%" height="15" fill="rgb(218,30,26)"/><text x="15.1511%" y="95.50">mi..</text></g><g><title>mir_promoted (70,828,690 samples, 3.95%)</title><rect x="13.9014%" y="133" width="3.9450%" height="15" fill="rgb(220,122,19)"/><text x="14.1514%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (2,230,992 samples, 0.12%)</title><rect x="17.7222%" y="117" width="0.1243%" height="15" fill="rgb(250,228,42)"/><text x="17.9722%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (4,643,168 samples, 0.26%)</title><rect x="17.8465%" y="133" width="0.2586%" height="15" fill="rgb(240,193,28)"/><text x="18.0965%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,416,359 samples, 0.19%)</title><rect x="18.1051%" y="133" width="0.1903%" height="15" fill="rgb(216,20,37)"/><text x="18.3551%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,721,020 samples, 0.21%)</title><rect x="18.2995%" y="133" width="0.2073%" height="15" fill="rgb(206,188,39)"/><text x="18.5495%" y="143.50"></text></g><g><title>type_op_prove_predicate (11,607,540 samples, 0.65%)</title><rect x="18.5068%" y="133" width="0.6465%" height="15" fill="rgb(217,207,13)"/><text x="18.7568%" y="143.50"></text></g><g><title>MIR_borrow_checking (214,087,718 samples, 11.92%)</title><rect x="7.2296%" y="165" width="11.9243%" height="15" fill="rgb(231,73,38)"/><text x="7.4796%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (213,328,756 samples, 11.88%)</title><rect x="7.2719%" y="149" width="11.8820%" height="15" fill="rgb(225,20,46)"/><text x="7.5219%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,582,766 samples, 0.14%)</title><rect x="19.2853%" y="149" width="0.1439%" height="15" fill="rgb(210,31,41)"/><text x="19.5353%" y="159.50"></text></g><g><title>misc_checking_1 (5,648,887 samples, 0.31%)</title><rect x="19.2843%" y="165" width="0.3146%" height="15" fill="rgb(221,200,47)"/><text x="19.5343%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,455,995 samples, 0.19%)</title><rect x="19.5991%" y="149" width="0.1925%" height="15" fill="rgb(226,26,5)"/><text x="19.8491%" y="159.50"></text></g><g><title>check_mod_liveness (2,774,789 samples, 0.15%)</title><rect x="19.6371%" y="133" width="0.1546%" height="15" fill="rgb(249,33,26)"/><text x="19.8871%" y="143.50"></text></g><g><title>misc_checking_2 (11,549,577 samples, 0.64%)</title><rect x="19.5990%" y="165" width="0.6433%" height="15" fill="rgb(235,183,28)"/><text x="19.8490%" y="175.50"></text></g><g><title>match_checking (8,090,822 samples, 0.45%)</title><rect x="19.7916%" y="149" width="0.4506%" height="15" fill="rgb(221,5,38)"/><text x="20.0416%" y="159.50"></text></g><g><title>check_match (7,871,981 samples, 0.44%)</title><rect x="19.8038%" y="133" width="0.4385%" height="15" fill="rgb(247,18,42)"/><text x="20.0538%" y="143.50"></text></g><g><title>death_checking (2,410,664 samples, 0.13%)</title><rect x="20.3147%" y="149" width="0.1343%" height="15" fill="rgb(241,131,45)"/><text x="20.5647%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,831,880 samples, 0.16%)</title><rect x="20.6584%" y="117" width="0.1577%" height="15" fill="rgb(249,31,29)"/><text x="20.9084%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,783,920 samples, 0.16%)</title><rect x="20.6611%" y="101" width="0.1551%" height="15" fill="rgb(225,111,53)"/><text x="20.9111%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,715,770 samples, 0.15%)</title><rect x="20.6649%" y="85" width="0.1513%" height="15" fill="rgb(238,160,17)"/><text x="20.9149%" y="95.50"></text></g><g><title>crate_lints (8,553,068 samples, 0.48%)</title><rect x="20.4492%" y="133" width="0.4764%" height="15" fill="rgb(214,148,48)"/><text x="20.6992%" y="143.50"></text></g><g><title>lint_checking (13,029,623 samples, 0.73%)</title><rect x="20.4490%" y="149" width="0.7257%" height="15" fill="rgb(232,36,49)"/><text x="20.6990%" y="159.50"></text></g><g><title>module_lints (4,473,045 samples, 0.25%)</title><rect x="20.9256%" y="133" width="0.2491%" height="15" fill="rgb(209,103,24)"/><text x="21.1756%" y="143.50"></text></g><g><title>lint_mod (4,466,645 samples, 0.25%)</title><rect x="20.9259%" y="117" width="0.2488%" height="15" fill="rgb(229,88,8)"/><text x="21.1759%" y="127.50"></text></g><g><title>privacy_checking_modules (8,549,767 samples, 0.48%)</title><rect x="21.2718%" y="149" width="0.4762%" height="15" fill="rgb(213,181,19)"/><text x="21.5218%" y="159.50"></text></g><g><title>check_mod_privacy (8,545,567 samples, 0.48%)</title><rect x="21.2721%" y="133" width="0.4760%" height="15" fill="rgb(254,191,54)"/><text x="21.5221%" y="143.50"></text></g><g><title>misc_checking_3 (27,067,625 samples, 1.51%)</title><rect x="20.2423%" y="165" width="1.5076%" height="15" fill="rgb(241,83,37)"/><text x="20.4923%" y="175.50"></text></g><g><title>impl_parent (2,744,001 samples, 0.15%)</title><rect x="22.0653%" y="101" width="0.1528%" height="15" fill="rgb(233,36,39)"/><text x="22.3153%" y="111.50"></text></g><g><title>impl_trait_ref (5,803,706 samples, 0.32%)</title><rect x="22.2182%" y="101" width="0.3233%" height="15" fill="rgb(226,3,54)"/><text x="22.4682%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,674,220 samples, 0.26%)</title><rect x="22.2811%" y="85" width="0.2603%" height="15" fill="rgb(245,192,40)"/><text x="22.5311%" y="95.50"></text></g><g><title>coherent_trait (14,840,071 samples, 0.83%)</title><rect x="21.7675%" y="133" width="0.8266%" height="15" fill="rgb(238,167,29)"/><text x="22.0175%" y="143.50"></text></g><g><title>specialization_graph_of (14,137,173 samples, 0.79%)</title><rect x="21.8066%" y="117" width="0.7874%" height="15" fill="rgb(232,182,51)"/><text x="22.0566%" y="127.50"></text></g><g><title>coherence_checking (15,071,154 samples, 0.84%)</title><rect x="21.7658%" y="149" width="0.8394%" height="15" fill="rgb(231,60,39)"/><text x="22.0158%" y="159.50"></text></g><g><title>dropck_outlives (3,585,704 samples, 0.20%)</title><rect x="34.8867%" y="101" width="0.1997%" height="15" fill="rgb(208,69,12)"/><text x="35.1367%" y="111.50"></text></g><g><title>evaluate_obligation (5,512,126 samples, 0.31%)</title><rect x="35.0864%" y="101" width="0.3070%" height="15" fill="rgb(235,93,37)"/><text x="35.3364%" y="111.50"></text></g><g><title>item_bodies_checking (231,720,486 samples, 12.91%)</title><rect x="22.6140%" y="149" width="12.9064%" height="15" fill="rgb(213,116,39)"/><text x="22.8640%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (231,716,776 samples, 12.91%)</title><rect x="22.6142%" y="133" width="12.9062%" height="15" fill="rgb(222,207,29)"/><text x="22.8642%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (231,244,934 samples, 12.88%)</title><rect x="22.6405%" y="117" width="12.8799%" height="15" fill="rgb(206,96,30)"/><text x="22.8905%" y="127.50">typeck</text></g><g><title>item_types_checking (12,960,512 samples, 0.72%)</title><rect x="35.5204%" y="149" width="0.7219%" height="15" fill="rgb(218,138,4)"/><text x="35.7704%" y="159.50"></text></g><g><title>check_mod_item_types (12,956,242 samples, 0.72%)</title><rect x="35.5206%" y="133" width="0.7216%" height="15" fill="rgb(250,191,14)"/><text x="35.7706%" y="143.50"></text></g><g><title>typeck (2,517,293 samples, 0.14%)</title><rect x="36.1021%" y="117" width="0.1402%" height="15" fill="rgb(239,60,40)"/><text x="36.3521%" y="127.50"></text></g><g><title>fn_sig (2,311,490 samples, 0.13%)</title><rect x="36.3451%" y="117" width="0.1287%" height="15" fill="rgb(206,27,48)"/><text x="36.5951%" y="127.50"></text></g><g><title>is_late_bound_map (3,451,687 samples, 0.19%)</title><rect x="36.5149%" y="101" width="0.1923%" height="15" fill="rgb(225,35,8)"/><text x="36.7649%" y="111.50"></text></g><g><title>resolve_lifetimes (3,347,985 samples, 0.19%)</title><rect x="36.5207%" y="85" width="0.1865%" height="15" fill="rgb(250,213,24)"/><text x="36.7707%" y="95.50"></text></g><g><title>generics_of (5,079,977 samples, 0.28%)</title><rect x="36.4739%" y="117" width="0.2829%" height="15" fill="rgb(247,123,22)"/><text x="36.7239%" y="127.50"></text></g><g><title>predicates_of (3,407,717 samples, 0.19%)</title><rect x="36.7704%" y="117" width="0.1898%" height="15" fill="rgb(231,138,38)"/><text x="37.0204%" y="127.50"></text></g><g><title>predicates_defined_on (3,034,652 samples, 0.17%)</title><rect x="36.7911%" y="101" width="0.1690%" height="15" fill="rgb(231,145,46)"/><text x="37.0411%" y="111.50"></text></g><g><title>type_collecting (13,406,037 samples, 0.75%)</title><rect x="36.2424%" y="149" width="0.7467%" height="15" fill="rgb(251,118,11)"/><text x="36.4924%" y="159.50"></text></g><g><title>collect_mod_item_types (13,395,357 samples, 0.75%)</title><rect x="36.2430%" y="133" width="0.7461%" height="15" fill="rgb(217,147,25)"/><text x="36.4930%" y="143.50"></text></g><g><title>evaluate_obligation (2,363,230 samples, 0.13%)</title><rect x="37.8593%" y="117" width="0.1316%" height="15" fill="rgb(247,81,37)"/><text x="38.1093%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,229,404 samples, 0.12%)</title><rect x="37.9987%" y="117" width="0.1242%" height="15" fill="rgb(209,12,38)"/><text x="38.2487%" y="127.50"></text></g><g><title>param_env (2,019,108 samples, 0.11%)</title><rect x="38.1266%" y="117" width="0.1125%" height="15" fill="rgb(227,1,9)"/><text x="38.3766%" y="127.50"></text></g><g><title>region_scope_tree (3,641,003 samples, 0.20%)</title><rect x="38.2432%" y="117" width="0.2028%" height="15" fill="rgb(248,47,43)"/><text x="38.4932%" y="127.50"></text></g><g><title>check_impl_item_well_formed (24,944,727 samples, 1.39%)</title><rect x="37.0637%" y="133" width="1.3894%" height="15" fill="rgb(221,10,30)"/><text x="37.3137%" y="143.50"></text></g><g><title>analysis (572,975,387 samples, 31.91%)</title><rect x="7.1024%" y="181" width="31.9137%" height="15" fill="rgb(210,229,1)"/><text x="7.3524%" y="191.50">analysis</text></g><g><title>type_check_crate (309,995,313 samples, 17.27%)</title><rect x="21.7499%" y="165" width="17.2662%" height="15" fill="rgb(222,148,37)"/><text x="21.9999%" y="175.50">type_check_crate</text></g><g><title>wf_checking (36,354,219 samples, 2.02%)</title><rect x="36.9912%" y="149" width="2.0249%" height="15" fill="rgb(234,67,33)"/><text x="37.2412%" y="159.50">w..</text></g><g><title>check_item_well_formed (10,107,164 samples, 0.56%)</title><rect x="38.4531%" y="133" width="0.5630%" height="15" fill="rgb(247,98,35)"/><text x="38.7031%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,786,321 samples, 0.38%)</title><rect x="43.2986%" y="149" width="0.3780%" height="15" fill="rgb(247,138,52)"/><text x="43.5486%" y="159.50"></text></g><g><title>codegen_module (83,693,620 samples, 4.66%)</title><rect x="39.1494%" y="165" width="4.6616%" height="15" fill="rgb(213,79,30)"/><text x="39.3994%" y="175.50">codeg..</text></g><g><title>codegen_crate (86,167,956 samples, 4.80%)</title><rect x="39.0167%" y="181" width="4.7994%" height="15" fill="rgb(246,177,23)"/><text x="39.2667%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (420,840,329 samples, 23.44%)</title><rect x="43.8307%" y="165" width="23.4400%" height="15" fill="rgb(230,62,27)"/><text x="44.0807%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (399,381,540 samples, 22.24%)</title><rect x="45.0259%" y="149" width="22.2448%" height="15" fill="rgb(216,154,8)"/><text x="45.2759%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (450,063,796 samples, 25.07%)</title><rect x="43.8161%" y="181" width="25.0677%" height="15" fill="rgb(244,35,45)"/><text x="44.0661%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,961,374 samples, 1.61%)</title><rect x="67.2708%" y="165" width="1.6131%" height="15" fill="rgb(251,115,12)"/><text x="67.5208%" y="175.50"></text></g><g><title>metadata_register_crate (9,655,878 samples, 0.54%)</title><rect x="84.7195%" y="133" width="0.5378%" height="15" fill="rgb(240,54,50)"/><text x="84.9695%" y="143.50"></text></g><g><title>metadata_register_crate (7,798,749 samples, 0.43%)</title><rect x="84.8230%" y="117" width="0.4344%" height="15" fill="rgb(233,84,52)"/><text x="85.0730%" y="127.50"></text></g><g><title>metadata_register_crate (5,903,549 samples, 0.33%)</title><rect x="84.9285%" y="101" width="0.3288%" height="15" fill="rgb(207,117,47)"/><text x="85.1785%" y="111.50"></text></g><g><title>macro_expand_crate (291,747,657 samples, 16.25%)</title><rect x="69.0083%" y="165" width="16.2498%" height="15" fill="rgb(249,43,39)"/><text x="69.2583%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (291,727,147 samples, 16.25%)</title><rect x="69.0094%" y="149" width="16.2487%" height="15" fill="rgb(209,38,44)"/><text x="69.2594%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (20,107,045 samples, 1.12%)</title><rect x="85.3197%" y="149" width="1.1199%" height="15" fill="rgb(236,212,23)"/><text x="85.5697%" y="159.50"></text></g><g><title>configure_and_expand (316,662,800 samples, 17.64%)</title><rect x="68.8839%" y="181" width="17.6375%" height="15" fill="rgb(242,79,21)"/><text x="69.1339%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (22,559,479 samples, 1.26%)</title><rect x="85.2649%" y="165" width="1.2565%" height="15" fill="rgb(211,96,35)"/><text x="85.5149%" y="175.50"></text></g><g><title>drop_ast (2,245,503 samples, 0.13%)</title><rect x="86.5214%" y="181" width="0.1251%" height="15" fill="rgb(253,215,40)"/><text x="86.7714%" y="191.50"></text></g><g><title>early_lint_checks (5,452,925 samples, 0.30%)</title><rect x="86.6480%" y="181" width="0.3037%" height="15" fill="rgb(211,81,21)"/><text x="86.8980%" y="191.50"></text></g><g><title>free_global_ctxt (13,035,222 samples, 0.73%)</title><rect x="86.9517%" y="181" width="0.7260%" height="15" fill="rgb(208,190,38)"/><text x="87.2017%" y="191.50"></text></g><g><title>optimized_mir (7,223,393 samples, 0.40%)</title><rect x="89.5349%" y="101" width="0.4023%" height="15" fill="rgb(235,213,38)"/><text x="89.7849%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,126,000 samples, 0.17%)</title><rect x="89.7631%" y="85" width="0.1741%" height="15" fill="rgb(237,122,38)"/><text x="90.0131%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,323,410 samples, 0.13%)</title><rect x="89.9929%" y="85" width="0.1294%" height="15" fill="rgb(244,218,35)"/><text x="90.2429%" y="95.50"></text></g><g><title>specialization_graph_of (2,232,522 samples, 0.12%)</title><rect x="90.1456%" y="85" width="0.1243%" height="15" fill="rgb(240,68,47)"/><text x="90.3956%" y="95.50"></text></g><g><title>resolve_instance (6,120,067 samples, 0.34%)</title><rect x="89.9372%" y="101" width="0.3409%" height="15" fill="rgb(210,16,53)"/><text x="90.1872%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (22,160,095 samples, 1.23%)</title><rect x="89.2430%" y="117" width="1.2343%" height="15" fill="rgb(235,124,12)"/><text x="89.4930%" y="127.50"></text></g><g><title>monomorphization_collector (22,385,807 samples, 1.25%)</title><rect x="89.2427%" y="133" width="1.2468%" height="15" fill="rgb(224,169,11)"/><text x="89.4927%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (2,764,908 samples, 0.15%)</title><rect x="90.4901%" y="117" width="0.1540%" height="15" fill="rgb(250,166,2)"/><text x="90.7401%" y="127.50"></text></g><g><title>symbol_name (2,429,222 samples, 0.14%)</title><rect x="90.5088%" y="101" width="0.1353%" height="15" fill="rgb(242,216,29)"/><text x="90.7588%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (26,344,478 samples, 1.47%)</title><rect x="89.2396%" y="149" width="1.4673%" height="15" fill="rgb(230,116,27)"/><text x="89.4896%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,903,020 samples, 0.22%)</title><rect x="90.4895%" y="133" width="0.2174%" height="15" fill="rgb(228,99,48)"/><text x="90.7395%" y="143.50"></text></g><g><title>exported_symbols (27,427,589 samples, 1.53%)</title><rect x="89.2292%" y="165" width="1.5277%" height="15" fill="rgb(253,11,6)"/><text x="89.4792%" y="175.50"></text></g><g><title>layout_of (4,297,810 samples, 0.24%)</title><rect x="92.1582%" y="149" width="0.2394%" height="15" fill="rgb(247,143,39)"/><text x="92.4082%" y="159.50"></text></g><g><title>is_copy_raw (5,922,579 samples, 0.33%)</title><rect x="95.2873%" y="117" width="0.3299%" height="15" fill="rgb(236,97,10)"/><text x="95.5373%" y="127.50"></text></g><g><title>evaluate_obligation (4,926,688 samples, 0.27%)</title><rect x="95.3427%" y="101" width="0.2744%" height="15" fill="rgb(233,208,19)"/><text x="95.5927%" y="111.50"></text></g><g><title>needs_drop_raw (6,561,713 samples, 0.37%)</title><rect x="95.2537%" y="133" width="0.3655%" height="15" fill="rgb(216,164,2)"/><text x="95.5037%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (58,928,227 samples, 3.28%)</title><rect x="92.3976%" y="149" width="3.2822%" height="15" fill="rgb(220,129,5)"/><text x="92.6476%" y="159.50">mir..</text></g><g><title>optimized_mir (87,927,382 samples, 4.90%)</title><rect x="90.7837%" y="165" width="4.8974%" height="15" fill="rgb(242,17,10)"/><text x="91.0337%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (145,224,667 samples, 8.09%)</title><rect x="87.6777%" y="181" width="8.0888%" height="15" fill="rgb(242,107,0)"/><text x="87.9277%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (26,189,807 samples, 1.46%)</title><rect x="95.7665%" y="181" width="1.4587%" height="15" fill="rgb(251,28,31)"/><text x="96.0165%" y="191.50"></text></g><g><title>finish_ongoing_codegen (34,143,718 samples, 1.90%)</title><rect x="97.2263%" y="165" width="1.9017%" height="15" fill="rgb(233,223,10)"/><text x="97.4763%" y="175.50">f..</text></g><g><title>link_crate (9,083,922 samples, 0.51%)</title><rect x="99.1280%" y="165" width="0.5060%" height="15" fill="rgb(215,21,27)"/><text x="99.3780%" y="175.50"></text></g><g><title>link_binary (8,868,050 samples, 0.49%)</title><rect x="99.1400%" y="149" width="0.4939%" height="15" fill="rgb(232,23,21)"/><text x="99.3900%" y="159.50"></text></g><g><title>link_rlib (7,873,709 samples, 0.44%)</title><rect x="99.1954%" y="133" width="0.4386%" height="15" fill="rgb(244,5,23)"/><text x="99.4454%" y="143.50"></text></g><g><title>link (43,260,020 samples, 2.41%)</title><rect x="97.2252%" y="181" width="2.4095%" height="15" fill="rgb(226,81,46)"/><text x="97.4752%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (2,556,115 samples, 0.14%)</title><rect x="99.7479%" y="181" width="0.1424%" height="15" fill="rgb(247,70,30)"/><text x="99.9979%" y="191.50"></text></g><g><title>all (1,795,390,127 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,795,390,127 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,844,769 samples, 0.10%)</title><rect x="99.8972%" y="181" width="0.1028%" height="15" fill="rgb(223,113,26)"/><text x="100.1472%" y="191.50"></text></g></svg></svg>