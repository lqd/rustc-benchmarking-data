<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,425,975 samples, 4.96%)</title><rect x="1.0196%" y="245" width="4.9562%" height="15" fill="rgb(227,0,7)"/><text x="1.2696%" y="255.50">LLVM_p..</text></g><g><title>param_env (221,571 samples, 0.32%)</title><rect x="13.7325%" y="165" width="0.3205%" height="15" fill="rgb(217,0,24)"/><text x="13.9825%" y="175.50"></text></g><g><title>item_attrs (241,703 samples, 0.35%)</title><rect x="14.3685%" y="133" width="0.3497%" height="15" fill="rgb(221,193,54)"/><text x="14.6185%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (233,723 samples, 0.34%)</title><rect x="14.3800%" y="117" width="0.3381%" height="15" fill="rgb(248,212,6)"/><text x="14.6300%" y="127.50"></text></g><g><title>codegen_fn_attrs (310,864 samples, 0.45%)</title><rect x="14.2855%" y="149" width="0.4497%" height="15" fill="rgb(208,68,35)"/><text x="14.5355%" y="159.50"></text></g><g><title>is_copy_raw (293,675 samples, 0.42%)</title><rect x="16.1512%" y="101" width="0.4248%" height="15" fill="rgb(232,128,0)"/><text x="16.4012%" y="111.50"></text></g><g><title>evaluate_obligation (257,675 samples, 0.37%)</title><rect x="16.2032%" y="85" width="0.3728%" height="15" fill="rgb(207,160,47)"/><text x="16.4532%" y="95.50"></text></g><g><title>param_env (115,170 samples, 0.17%)</title><rect x="16.5760%" y="101" width="0.1666%" height="15" fill="rgb(228,23,34)"/><text x="16.8260%" y="111.50"></text></g><g><title>adt_drop_tys (492,156 samples, 0.71%)</title><rect x="16.0336%" y="117" width="0.7120%" height="15" fill="rgb(218,30,26)"/><text x="16.2836%" y="127.50"></text></g><g><title>needs_drop_raw (757,550 samples, 1.10%)</title><rect x="15.9514%" y="133" width="1.0959%" height="15" fill="rgb(220,122,19)"/><text x="16.2014%" y="143.50"></text></g><g><title>is_copy_raw (208,563 samples, 0.30%)</title><rect x="16.7456%" y="117" width="0.3017%" height="15" fill="rgb(250,228,42)"/><text x="16.9956%" y="127.50"></text></g><g><title>evaluate_obligation (169,483 samples, 0.25%)</title><rect x="16.8021%" y="101" width="0.2452%" height="15" fill="rgb(240,193,28)"/><text x="17.0521%" y="111.50"></text></g><g><title>impl_parent (476,353 samples, 0.69%)</title><rect x="18.3024%" y="101" width="0.6891%" height="15" fill="rgb(216,20,37)"/><text x="18.5524%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (260,511 samples, 0.38%)</title><rect x="18.6147%" y="85" width="0.3769%" height="15" fill="rgb(206,188,39)"/><text x="18.8647%" y="95.50"></text></g><g><title>specialization_graph_of (2,661,978 samples, 3.85%)</title><rect x="17.2334%" y="117" width="3.8510%" height="15" fill="rgb(217,207,13)"/><text x="17.4834%" y="127.50">spec..</text></g><g><title>impl_trait_ref (1,446,628 samples, 2.09%)</title><rect x="18.9916%" y="101" width="2.0928%" height="15" fill="rgb(231,73,38)"/><text x="19.2416%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,236,337 samples, 1.79%)</title><rect x="19.2958%" y="85" width="1.7886%" height="15" fill="rgb(225,20,46)"/><text x="19.5458%" y="95.50">m..</text></g><g><title>resolve_instance (2,802,029 samples, 4.05%)</title><rect x="17.0473%" y="133" width="4.0536%" height="15" fill="rgb(210,31,41)"/><text x="17.2973%" y="143.50">reso..</text></g><g><title>thir_body (199,562 samples, 0.29%)</title><rect x="21.1055%" y="133" width="0.2887%" height="15" fill="rgb(221,200,47)"/><text x="21.3555%" y="143.50"></text></g><g><title>mir_const (5,649,247 samples, 8.17%)</title><rect x="13.2261%" y="181" width="8.1726%" height="15" fill="rgb(226,26,5)"/><text x="13.4761%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (5,077,682 samples, 7.35%)</title><rect x="14.0530%" y="165" width="7.3457%" height="15" fill="rgb(249,33,26)"/><text x="14.3030%" y="175.50">unsafety_c..</text></g><g><title>mir_built (4,606,097 samples, 6.66%)</title><rect x="14.7352%" y="149" width="6.6635%" height="15" fill="rgb(235,183,28)"/><text x="14.9852%" y="159.50">mir_built</text></g><g><title>mir_promoted (5,957,520 samples, 8.62%)</title><rect x="12.7958%" y="197" width="8.6185%" height="15" fill="rgb(221,5,38)"/><text x="13.0458%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (164,812 samples, 0.24%)</title><rect x="21.4143%" y="197" width="0.2384%" height="15" fill="rgb(247,18,42)"/><text x="21.6643%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (234,032 samples, 0.34%)</title><rect x="21.6527%" y="197" width="0.3386%" height="15" fill="rgb(241,131,45)"/><text x="21.9027%" y="207.50"></text></g><g><title>normalize_projection_ty (143,660 samples, 0.21%)</title><rect x="21.7835%" y="181" width="0.2078%" height="15" fill="rgb(249,31,29)"/><text x="22.0335%" y="191.50"></text></g><g><title>type_op_normalize_predicate (371,903 samples, 0.54%)</title><rect x="21.9913%" y="197" width="0.5380%" height="15" fill="rgb(225,111,53)"/><text x="22.2413%" y="207.50"></text></g><g><title>normalize_projection_ty (218,522 samples, 0.32%)</title><rect x="22.2132%" y="181" width="0.3161%" height="15" fill="rgb(238,160,17)"/><text x="22.4632%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,190,242 samples, 1.72%)</title><rect x="22.5293%" y="197" width="1.7219%" height="15" fill="rgb(214,148,48)"/><text x="22.7793%" y="207.50"></text></g><g><title>MIR_borrow_checking (12,472,326 samples, 18.04%)</title><rect x="6.2307%" y="229" width="18.0433%" height="15" fill="rgb(232,36,49)"/><text x="6.4807%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,462,896 samples, 18.03%)</title><rect x="6.2444%" y="213" width="18.0296%" height="15" fill="rgb(209,103,24)"/><text x="6.4944%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (128,281 samples, 0.19%)</title><rect x="24.2831%" y="229" width="0.1856%" height="15" fill="rgb(229,88,8)"/><text x="24.5331%" y="239.50"></text></g><g><title>get_lang_items (86,461 samples, 0.13%)</title><rect x="24.7274%" y="181" width="0.1251%" height="15" fill="rgb(213,181,19)"/><text x="24.9774%" y="191.50"></text></g><g><title>codegen_fn_attrs (206,932 samples, 0.30%)</title><rect x="24.6269%" y="197" width="0.2994%" height="15" fill="rgb(254,191,54)"/><text x="24.8769%" y="207.50"></text></g><g><title>check_mod_attrs (294,703 samples, 0.43%)</title><rect x="24.5001%" y="213" width="0.4263%" height="15" fill="rgb(241,83,37)"/><text x="24.7501%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (239,332 samples, 0.35%)</title><rect x="25.0247%" y="213" width="0.3462%" height="15" fill="rgb(233,36,39)"/><text x="25.2747%" y="223.50"></text></g><g><title>misc_checking_1 (668,457 samples, 0.97%)</title><rect x="24.4703%" y="229" width="0.9670%" height="15" fill="rgb(226,3,54)"/><text x="24.7203%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (222,873 samples, 0.32%)</title><rect x="25.4413%" y="213" width="0.3224%" height="15" fill="rgb(245,192,40)"/><text x="25.6913%" y="223.50"></text></g><g><title>check_mod_liveness (188,752 samples, 0.27%)</title><rect x="25.4907%" y="197" width="0.2731%" height="15" fill="rgb(238,167,29)"/><text x="25.7407%" y="207.50"></text></g><g><title>misc_checking_2 (549,026 samples, 0.79%)</title><rect x="25.4373%" y="229" width="0.7943%" height="15" fill="rgb(232,182,51)"/><text x="25.6873%" y="239.50"></text></g><g><title>match_checking (323,373 samples, 0.47%)</title><rect x="25.7638%" y="213" width="0.4678%" height="15" fill="rgb(231,60,39)"/><text x="26.0138%" y="223.50"></text></g><g><title>check_match (318,213 samples, 0.46%)</title><rect x="25.7712%" y="197" width="0.4603%" height="15" fill="rgb(208,69,12)"/><text x="26.0212%" y="207.50"></text></g><g><title>death_checking (84,831 samples, 0.12%)</title><rect x="26.3110%" y="213" width="0.1227%" height="15" fill="rgb(235,93,37)"/><text x="26.5610%" y="223.50"></text></g><g><title>crate_lints (192,162 samples, 0.28%)</title><rect x="26.4372%" y="197" width="0.2780%" height="15" fill="rgb(213,116,39)"/><text x="26.6872%" y="207.50"></text></g><g><title>lint_checking (301,753 samples, 0.44%)</title><rect x="26.4337%" y="213" width="0.4365%" height="15" fill="rgb(222,207,29)"/><text x="26.6837%" y="223.50"></text></g><g><title>module_lints (107,201 samples, 0.16%)</title><rect x="26.7152%" y="197" width="0.1551%" height="15" fill="rgb(206,96,30)"/><text x="26.9652%" y="207.50"></text></g><g><title>lint_mod (103,041 samples, 0.15%)</title><rect x="26.7212%" y="181" width="0.1491%" height="15" fill="rgb(218,138,4)"/><text x="26.9712%" y="191.50"></text></g><g><title>privacy_access_levels (96,370 samples, 0.14%)</title><rect x="26.8703%" y="213" width="0.1394%" height="15" fill="rgb(250,191,14)"/><text x="27.1203%" y="223.50"></text></g><g><title>privacy_checking_modules (232,652 samples, 0.34%)</title><rect x="27.0097%" y="213" width="0.3366%" height="15" fill="rgb(239,60,40)"/><text x="27.2597%" y="223.50"></text></g><g><title>check_mod_privacy (230,262 samples, 0.33%)</title><rect x="27.0131%" y="197" width="0.3331%" height="15" fill="rgb(206,27,48)"/><text x="27.2631%" y="207.50"></text></g><g><title>misc_checking_3 (792,938 samples, 1.15%)</title><rect x="26.2316%" y="229" width="1.1471%" height="15" fill="rgb(225,35,8)"/><text x="26.4816%" y="239.50"></text></g><g><title>adt_def (160,921 samples, 0.23%)</title><rect x="39.1732%" y="133" width="0.2328%" height="15" fill="rgb(250,213,24)"/><text x="39.4232%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (153,231 samples, 0.22%)</title><rect x="39.1843%" y="117" width="0.2217%" height="15" fill="rgb(247,123,22)"/><text x="39.4343%" y="127.50"></text></g><g><title>item_attrs (112,071 samples, 0.16%)</title><rect x="39.2439%" y="101" width="0.1621%" height="15" fill="rgb(231,138,38)"/><text x="39.4939%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,131 samples, 0.16%)</title><rect x="39.2496%" y="85" width="0.1564%" height="15" fill="rgb(231,145,46)"/><text x="39.4996%" y="95.50"></text></g><g><title>adt_def (112,460 samples, 0.16%)</title><rect x="39.4131%" y="117" width="0.1627%" height="15" fill="rgb(251,118,11)"/><text x="39.6631%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (110,800 samples, 0.16%)</title><rect x="39.4155%" y="101" width="0.1603%" height="15" fill="rgb(217,147,25)"/><text x="39.6655%" y="111.50"></text></g><g><title>item_attrs (96,860 samples, 0.14%)</title><rect x="39.4357%" y="85" width="0.1401%" height="15" fill="rgb(247,81,37)"/><text x="39.6857%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,010 samples, 0.14%)</title><rect x="39.4384%" y="69" width="0.1374%" height="15" fill="rgb(209,12,38)"/><text x="39.6884%" y="79.50"></text></g><g><title>adt_sized_constraint (177,921 samples, 0.26%)</title><rect x="39.4060%" y="133" width="0.2574%" height="15" fill="rgb(227,1,9)"/><text x="39.6560%" y="143.50"></text></g><g><title>adt_sized_constraint (379,982 samples, 0.55%)</title><rect x="39.1420%" y="149" width="0.5497%" height="15" fill="rgb(248,47,43)"/><text x="39.3920%" y="159.50"></text></g><g><title>associated_item (787,338 samples, 1.14%)</title><rect x="40.1153%" y="133" width="1.1390%" height="15" fill="rgb(221,10,30)"/><text x="40.3653%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (607,135 samples, 0.88%)</title><rect x="40.3760%" y="117" width="0.8783%" height="15" fill="rgb(210,229,1)"/><text x="40.6260%" y="127.50"></text></g><g><title>associated_items (1,123,571 samples, 1.63%)</title><rect x="39.7050%" y="149" width="1.6254%" height="15" fill="rgb(222,148,37)"/><text x="39.9550%" y="159.50"></text></g><g><title>impl_parent (142,721 samples, 0.21%)</title><rect x="42.0553%" y="53" width="0.2065%" height="15" fill="rgb(234,67,33)"/><text x="42.3053%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (93,230 samples, 0.13%)</title><rect x="42.1269%" y="37" width="0.1349%" height="15" fill="rgb(247,98,35)"/><text x="42.3769%" y="47.50"></text></g><g><title>impl_trait_ref (573,505 samples, 0.83%)</title><rect x="42.2618%" y="53" width="0.8297%" height="15" fill="rgb(247,138,52)"/><text x="42.5118%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (526,295 samples, 0.76%)</title><rect x="42.3301%" y="37" width="0.7614%" height="15" fill="rgb(213,79,30)"/><text x="42.5801%" y="47.50"></text></g><g><title>coherent_trait (1,017,960 samples, 1.47%)</title><rect x="41.7207%" y="85" width="1.4726%" height="15" fill="rgb(246,177,23)"/><text x="41.9707%" y="95.50"></text></g><g><title>specialization_graph_of (1,010,500 samples, 1.46%)</title><rect x="41.7315%" y="69" width="1.4619%" height="15" fill="rgb(230,62,27)"/><text x="41.9815%" y="79.50"></text></g><g><title>trait_impls_of (70,461 samples, 0.10%)</title><rect x="43.0915%" y="53" width="0.1019%" height="15" fill="rgb(216,154,8)"/><text x="43.3415%" y="63.50"></text></g><g><title>adt_destructor (1,052,470 samples, 1.52%)</title><rect x="41.6952%" y="117" width="1.5226%" height="15" fill="rgb(244,35,45)"/><text x="41.9452%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,047,300 samples, 1.52%)</title><rect x="41.7027%" y="101" width="1.5151%" height="15" fill="rgb(251,115,12)"/><text x="41.9527%" y="111.50"></text></g><g><title>adt_dtorck_constraint (78,871 samples, 0.11%)</title><rect x="43.4399%" y="53" width="0.1141%" height="15" fill="rgb(240,54,50)"/><text x="43.6899%" y="63.50"></text></g><g><title>adt_dtorck_constraint (152,331 samples, 0.22%)</title><rect x="43.3620%" y="69" width="0.2204%" height="15" fill="rgb(233,84,52)"/><text x="43.6120%" y="79.50"></text></g><g><title>adt_dtorck_constraint (172,462 samples, 0.25%)</title><rect x="43.3430%" y="85" width="0.2495%" height="15" fill="rgb(207,117,47)"/><text x="43.5930%" y="95.50"></text></g><g><title>adt_dtorck_constraint (180,432 samples, 0.26%)</title><rect x="43.3335%" y="101" width="0.2610%" height="15" fill="rgb(249,43,39)"/><text x="43.5835%" y="111.50"></text></g><g><title>adt_dtorck_constraint (267,593 samples, 0.39%)</title><rect x="43.2178%" y="117" width="0.3871%" height="15" fill="rgb(209,38,44)"/><text x="43.4678%" y="127.50"></text></g><g><title>dropck_outlives (1,546,714 samples, 2.24%)</title><rect x="41.4146%" y="149" width="2.2376%" height="15" fill="rgb(236,212,23)"/><text x="41.6646%" y="159.50">d..</text></g><g><title>adt_dtorck_constraint (1,404,994 samples, 2.03%)</title><rect x="41.6196%" y="133" width="2.0326%" height="15" fill="rgb(242,79,21)"/><text x="41.8696%" y="143.50">a..</text></g><g><title>adt_sized_constraint (71,060 samples, 0.10%)</title><rect x="45.2212%" y="133" width="0.1028%" height="15" fill="rgb(211,96,35)"/><text x="45.4712%" y="143.50"></text></g><g><title>impl_trait_ref (164,382 samples, 0.24%)</title><rect x="45.4555%" y="133" width="0.2378%" height="15" fill="rgb(253,215,40)"/><text x="45.7055%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (140,682 samples, 0.20%)</title><rect x="45.4898%" y="117" width="0.2035%" height="15" fill="rgb(211,81,21)"/><text x="45.7398%" y="127.50"></text></g><g><title>explicit_predicates_of (93,840 samples, 0.14%)</title><rect x="45.8569%" y="101" width="0.1358%" height="15" fill="rgb(208,190,38)"/><text x="46.1069%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (80,630 samples, 0.12%)</title><rect x="45.8760%" y="85" width="0.1166%" height="15" fill="rgb(235,213,38)"/><text x="46.1260%" y="95.50"></text></g><g><title>predicates_of (221,723 samples, 0.32%)</title><rect x="45.7100%" y="133" width="0.3208%" height="15" fill="rgb(237,122,38)"/><text x="45.9600%" y="143.50"></text></g><g><title>predicates_defined_on (157,283 samples, 0.23%)</title><rect x="45.8032%" y="117" width="0.2275%" height="15" fill="rgb(244,218,35)"/><text x="46.0532%" y="127.50"></text></g><g><title>specializes (212,491 samples, 0.31%)</title><rect x="46.0308%" y="133" width="0.3074%" height="15" fill="rgb(240,68,47)"/><text x="46.2808%" y="143.50"></text></g><g><title>param_env (129,301 samples, 0.19%)</title><rect x="46.1511%" y="117" width="0.1871%" height="15" fill="rgb(210,16,53)"/><text x="46.4011%" y="127.50"></text></g><g><title>evaluate_obligation (2,886,373 samples, 4.18%)</title><rect x="43.6522%" y="149" width="4.1756%" height="15" fill="rgb(235,124,12)"/><text x="43.9022%" y="159.50">evalu..</text></g><g><title>trait_impls_of (1,023,642 samples, 1.48%)</title><rect x="46.3469%" y="133" width="1.4809%" height="15" fill="rgb(224,169,11)"/><text x="46.5969%" y="143.50"></text></g><g><title>implementations_of_trait (300,954 samples, 0.44%)</title><rect x="47.3924%" y="117" width="0.4354%" height="15" fill="rgb(250,166,2)"/><text x="47.6424%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (213,963 samples, 0.31%)</title><rect x="47.5183%" y="101" width="0.3095%" height="15" fill="rgb(242,216,29)"/><text x="47.7683%" y="111.50"></text></g><g><title>fn_sig (206,582 samples, 0.30%)</title><rect x="47.8587%" y="149" width="0.2989%" height="15" fill="rgb(230,116,27)"/><text x="48.1087%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (178,902 samples, 0.26%)</title><rect x="47.8988%" y="133" width="0.2588%" height="15" fill="rgb(228,99,48)"/><text x="48.1488%" y="143.50"></text></g><g><title>generics_of (185,670 samples, 0.27%)</title><rect x="48.1576%" y="149" width="0.2686%" height="15" fill="rgb(253,11,6)"/><text x="48.4076%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (144,230 samples, 0.21%)</title><rect x="48.2175%" y="133" width="0.2087%" height="15" fill="rgb(247,143,39)"/><text x="48.4675%" y="143.50"></text></g><g><title>impl_item_implementor_ids (122,530 samples, 0.18%)</title><rect x="48.4262%" y="149" width="0.1773%" height="15" fill="rgb(236,97,10)"/><text x="48.6762%" y="159.50"></text></g><g><title>associated_items (102,820 samples, 0.15%)</title><rect x="48.4547%" y="133" width="0.1487%" height="15" fill="rgb(233,208,19)"/><text x="48.7047%" y="143.50"></text></g><g><title>impl_trait_ref (217,064 samples, 0.31%)</title><rect x="48.6130%" y="149" width="0.3140%" height="15" fill="rgb(216,164,2)"/><text x="48.8630%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (202,704 samples, 0.29%)</title><rect x="48.6337%" y="133" width="0.2932%" height="15" fill="rgb(220,129,5)"/><text x="48.8837%" y="143.50"></text></g><g><title>item_attrs (101,990 samples, 0.15%)</title><rect x="49.0577%" y="149" width="0.1475%" height="15" fill="rgb(242,17,10)"/><text x="49.3077%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,980 samples, 0.14%)</title><rect x="49.0649%" y="133" width="0.1403%" height="15" fill="rgb(242,107,0)"/><text x="49.3149%" y="143.50"></text></g><g><title>evaluate_obligation (299,915 samples, 0.43%)</title><rect x="49.6713%" y="133" width="0.4339%" height="15" fill="rgb(251,28,31)"/><text x="49.9213%" y="143.50"></text></g><g><title>method_autoderef_steps (594,938 samples, 0.86%)</title><rect x="49.2985%" y="149" width="0.8607%" height="15" fill="rgb(233,223,10)"/><text x="49.5485%" y="159.50"></text></g><g><title>explicit_predicates_of (154,863 samples, 0.22%)</title><rect x="50.5776%" y="117" width="0.2240%" height="15" fill="rgb(215,21,27)"/><text x="50.8276%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (122,222 samples, 0.18%)</title><rect x="50.6248%" y="101" width="0.1768%" height="15" fill="rgb(232,23,21)"/><text x="50.8748%" y="111.50"></text></g><g><title>predicates_of (488,776 samples, 0.71%)</title><rect x="50.2104%" y="149" width="0.7071%" height="15" fill="rgb(244,5,23)"/><text x="50.4604%" y="159.50"></text></g><g><title>predicates_defined_on (354,454 samples, 0.51%)</title><rect x="50.4047%" y="133" width="0.5128%" height="15" fill="rgb(226,81,46)"/><text x="50.6547%" y="143.50"></text></g><g><title>inferred_outlives_of (80,091 samples, 0.12%)</title><rect x="50.8017%" y="117" width="0.1159%" height="15" fill="rgb(247,70,30)"/><text x="51.0517%" y="127.50"></text></g><g><title>trait_impls_of (110,630 samples, 0.16%)</title><rect x="50.9736%" y="149" width="0.1600%" height="15" fill="rgb(212,68,19)"/><text x="51.2236%" y="159.50"></text></g><g><title>type_of (100,522 samples, 0.15%)</title><rect x="51.1337%" y="149" width="0.1454%" height="15" fill="rgb(240,187,13)"/><text x="51.3837%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (83,292 samples, 0.12%)</title><rect x="51.1586%" y="133" width="0.1205%" height="15" fill="rgb(223,113,26)"/><text x="51.4086%" y="143.50"></text></g><g><title>item_bodies_checking (16,520,779 samples, 23.90%)</title><rect x="27.4821%" y="213" width="23.9000%" height="15" fill="rgb(206,192,2)"/><text x="27.7321%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,516,648 samples, 23.89%)</title><rect x="27.4881%" y="197" width="23.8940%" height="15" fill="rgb(241,108,4)"/><text x="27.7381%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (16,511,858 samples, 23.89%)</title><rect x="27.4950%" y="181" width="23.8871%" height="15" fill="rgb(247,173,49)"/><text x="27.7450%" y="191.50">typeck</text></g><g><title>typeck (16,503,878 samples, 23.88%)</title><rect x="27.5066%" y="165" width="23.8756%" height="15" fill="rgb(224,114,35)"/><text x="27.7566%" y="175.50">typeck</text></g><g><title>fn_sig (89,581 samples, 0.13%)</title><rect x="51.4949%" y="181" width="0.1296%" height="15" fill="rgb(245,159,27)"/><text x="51.7449%" y="191.50"></text></g><g><title>late_bound_vars_map (147,341 samples, 0.21%)</title><rect x="51.9272%" y="133" width="0.2132%" height="15" fill="rgb(245,172,44)"/><text x="52.1772%" y="143.50"></text></g><g><title>resolve_lifetimes (141,691 samples, 0.20%)</title><rect x="51.9354%" y="117" width="0.2050%" height="15" fill="rgb(236,23,11)"/><text x="52.1854%" y="127.50"></text></g><g><title>explicit_predicates_of (304,183 samples, 0.44%)</title><rect x="51.7369%" y="149" width="0.4401%" height="15" fill="rgb(205,117,38)"/><text x="51.9869%" y="159.50"></text></g><g><title>predicates_of (326,253 samples, 0.47%)</title><rect x="51.7185%" y="181" width="0.4720%" height="15" fill="rgb(237,72,25)"/><text x="51.9685%" y="191.50"></text></g><g><title>predicates_defined_on (322,393 samples, 0.47%)</title><rect x="51.7241%" y="165" width="0.4664%" height="15" fill="rgb(244,70,9)"/><text x="51.9741%" y="175.50"></text></g><g><title>type_collecting (574,806 samples, 0.83%)</title><rect x="51.3920%" y="213" width="0.8316%" height="15" fill="rgb(217,125,39)"/><text x="51.6420%" y="223.50"></text></g><g><title>collect_mod_item_types (563,125 samples, 0.81%)</title><rect x="51.4089%" y="197" width="0.8147%" height="15" fill="rgb(235,36,10)"/><text x="51.6589%" y="207.50"></text></g><g><title>adt_def (112,831 samples, 0.16%)</title><rect x="53.2013%" y="101" width="0.1632%" height="15" fill="rgb(251,123,47)"/><text x="53.4513%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (112,251 samples, 0.16%)</title><rect x="53.2022%" y="85" width="0.1624%" height="15" fill="rgb(221,13,13)"/><text x="53.4522%" y="95.50"></text></g><g><title>item_attrs (106,941 samples, 0.15%)</title><rect x="53.2099%" y="69" width="0.1547%" height="15" fill="rgb(238,131,9)"/><text x="53.4599%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,351 samples, 0.15%)</title><rect x="53.2107%" y="53" width="0.1539%" height="15" fill="rgb(211,50,8)"/><text x="53.4607%" y="63.50"></text></g><g><title>adt_sized_constraint (125,241 samples, 0.18%)</title><rect x="53.1962%" y="117" width="0.1812%" height="15" fill="rgb(245,182,24)"/><text x="53.4462%" y="127.50"></text></g><g><title>adt_sized_constraint (169,611 samples, 0.25%)</title><rect x="53.1489%" y="133" width="0.2454%" height="15" fill="rgb(242,14,37)"/><text x="53.3989%" y="143.50"></text></g><g><title>adt_sized_constraint (217,142 samples, 0.31%)</title><rect x="53.0947%" y="149" width="0.3141%" height="15" fill="rgb(246,228,12)"/><text x="53.3447%" y="159.50"></text></g><g><title>evaluate_obligation (361,714 samples, 0.52%)</title><rect x="52.8932%" y="181" width="0.5233%" height="15" fill="rgb(213,55,15)"/><text x="53.1432%" y="191.50"></text></g><g><title>adt_sized_constraint (285,852 samples, 0.41%)</title><rect x="53.0030%" y="165" width="0.4135%" height="15" fill="rgb(209,9,3)"/><text x="53.2530%" y="175.50"></text></g><g><title>implied_outlives_bounds (78,771 samples, 0.11%)</title><rect x="53.4165%" y="181" width="0.1140%" height="15" fill="rgb(230,59,30)"/><text x="53.6665%" y="191.50"></text></g><g><title>param_env (305,903 samples, 0.44%)</title><rect x="53.5305%" y="181" width="0.4425%" height="15" fill="rgb(209,121,21)"/><text x="53.7805%" y="191.50"></text></g><g><title>predicates_of (85,430 samples, 0.12%)</title><rect x="53.9730%" y="181" width="0.1236%" height="15" fill="rgb(220,109,13)"/><text x="54.2230%" y="191.50"></text></g><g><title>region_scope_tree (86,461 samples, 0.13%)</title><rect x="54.0966%" y="181" width="0.1251%" height="15" fill="rgb(232,18,1)"/><text x="54.3466%" y="191.50"></text></g><g><title>analysis (33,419,499 samples, 48.35%)</title><rect x="5.9758%" y="245" width="48.3468%" height="15" fill="rgb(215,41,42)"/><text x="6.2258%" y="255.50">analysis</text></g><g><title>type_check_crate (18,624,869 samples, 26.94%)</title><rect x="27.3787%" y="229" width="26.9439%" height="15" fill="rgb(224,123,36)"/><text x="27.6287%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,449,874 samples, 2.10%)</title><rect x="52.2251%" y="213" width="2.0975%" height="15" fill="rgb(240,125,3)"/><text x="52.4751%" y="223.50">w..</text></g><g><title>check_item_well_formed (1,421,474 samples, 2.06%)</title><rect x="52.2662%" y="197" width="2.0564%" height="15" fill="rgb(205,98,50)"/><text x="52.5162%" y="207.50">c..</text></g><g><title>trait_impls_of (69,761 samples, 0.10%)</title><rect x="54.2217%" y="181" width="0.1009%" height="15" fill="rgb(205,185,37)"/><text x="54.4717%" y="191.50"></text></g><g><title>codegen_module (406,044 samples, 0.59%)</title><rect x="55.6051%" y="229" width="0.5874%" height="15" fill="rgb(238,207,15)"/><text x="55.8551%" y="239.50"></text></g><g><title>codegen_crate (1,395,964 samples, 2.02%)</title><rect x="54.3412%" y="245" width="2.0195%" height="15" fill="rgb(213,199,42)"/><text x="54.5912%" y="255.50">c..</text></g><g><title>LLVM_module_codegen (2,977,800 samples, 4.31%)</title><rect x="56.3878%" y="229" width="4.3079%" height="15" fill="rgb(235,201,11)"/><text x="56.6378%" y="239.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,888,889 samples, 4.18%)</title><rect x="56.5165%" y="213" width="4.1793%" height="15" fill="rgb(207,46,11)"/><text x="56.7665%" y="223.50">LLVM_..</text></g><g><title>codegen_module_optimize (3,246,473 samples, 4.70%)</title><rect x="56.3607%" y="245" width="4.6966%" height="15" fill="rgb(241,35,35)"/><text x="56.6107%" y="255.50">codeg..</text></g><g><title>LLVM_module_optimize (249,923 samples, 0.36%)</title><rect x="60.6957%" y="229" width="0.3616%" height="15" fill="rgb(243,32,47)"/><text x="60.9457%" y="239.50"></text></g><g><title>crate_injection (85,231 samples, 0.12%)</title><rect x="61.5587%" y="229" width="0.1233%" height="15" fill="rgb(247,202,23)"/><text x="61.8087%" y="239.50"></text></g><g><title>metadata_load_macro (115,792 samples, 0.17%)</title><rect x="75.2852%" y="197" width="0.1675%" height="15" fill="rgb(219,102,11)"/><text x="75.5352%" y="207.50"></text></g><g><title>macro_expand_crate (12,065,592 samples, 17.45%)</title><rect x="61.6820%" y="229" width="17.4549%" height="15" fill="rgb(243,110,44)"/><text x="61.9320%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,039,572 samples, 17.42%)</title><rect x="61.7197%" y="213" width="17.4172%" height="15" fill="rgb(222,74,54)"/><text x="61.9697%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,546,667 samples, 3.68%)</title><rect x="75.4527%" y="197" width="3.6842%" height="15" fill="rgb(216,99,12)"/><text x="75.7027%" y="207.50">meta..</text></g><g><title>metadata_register_crate (937,650 samples, 1.36%)</title><rect x="77.7804%" y="181" width="1.3565%" height="15" fill="rgb(226,22,26)"/><text x="78.0304%" y="191.50"></text></g><g><title>metadata_register_crate (77,881 samples, 0.11%)</title><rect x="79.0242%" y="165" width="0.1127%" height="15" fill="rgb(217,163,10)"/><text x="79.2742%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (179,752 samples, 0.26%)</title><rect x="79.1433%" y="229" width="0.2600%" height="15" fill="rgb(213,25,53)"/><text x="79.3933%" y="239.50"></text></g><g><title>finalize_imports (295,533 samples, 0.43%)</title><rect x="79.4169%" y="213" width="0.4275%" height="15" fill="rgb(252,105,26)"/><text x="79.6669%" y="223.50"></text></g><g><title>late_resolve_crate (1,100,172 samples, 1.59%)</title><rect x="79.8615%" y="213" width="1.5916%" height="15" fill="rgb(220,39,43)"/><text x="80.1115%" y="223.50"></text></g><g><title>configure_and_expand (14,138,474 samples, 20.45%)</title><rect x="61.0573%" y="245" width="20.4536%" height="15" fill="rgb(229,68,48)"/><text x="61.3073%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,456,855 samples, 2.11%)</title><rect x="79.4033%" y="229" width="2.1076%" height="15" fill="rgb(252,8,32)"/><text x="79.6533%" y="239.50">r..</text></g><g><title>early_lint_checks (141,062 samples, 0.20%)</title><rect x="81.6028%" y="245" width="0.2041%" height="15" fill="rgb(223,20,43)"/><text x="81.8528%" y="255.50"></text></g><g><title>free_global_ctxt (2,298,143 samples, 3.32%)</title><rect x="81.8068%" y="245" width="3.3246%" height="15" fill="rgb(229,81,49)"/><text x="82.0568%" y="255.50">fre..</text></g><g><title>crate_hash (112,662 samples, 0.16%)</title><rect x="85.7563%" y="229" width="0.1630%" height="15" fill="rgb(236,28,36)"/><text x="86.0063%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (74,010 samples, 0.11%)</title><rect x="86.0118%" y="213" width="0.1071%" height="15" fill="rgb(249,185,26)"/><text x="86.2618%" y="223.50"></text></g><g><title>exported_symbols (116,851 samples, 0.17%)</title><rect x="85.9943%" y="229" width="0.1690%" height="15" fill="rgb(249,174,33)"/><text x="86.2443%" y="239.50"></text></g><g><title>is_sized_raw (78,581 samples, 0.11%)</title><rect x="87.6198%" y="197" width="0.1137%" height="15" fill="rgb(233,201,37)"/><text x="87.8698%" y="207.50"></text></g><g><title>eval_to_const_value_raw (183,302 samples, 0.27%)</title><rect x="87.8918%" y="181" width="0.2652%" height="15" fill="rgb(221,78,26)"/><text x="88.1418%" y="191.50"></text></g><g><title>eval_to_const_value_raw (175,022 samples, 0.25%)</title><rect x="87.9038%" y="165" width="0.2532%" height="15" fill="rgb(250,127,30)"/><text x="88.1538%" y="175.50"></text></g><g><title>eval_to_allocation_raw (160,652 samples, 0.23%)</title><rect x="87.9246%" y="149" width="0.2324%" height="15" fill="rgb(230,49,44)"/><text x="88.1746%" y="159.50"></text></g><g><title>layout_of (323,924 samples, 0.47%)</title><rect x="88.1760%" y="181" width="0.4686%" height="15" fill="rgb(229,67,23)"/><text x="88.4260%" y="191.50"></text></g><g><title>layout_of (142,552 samples, 0.21%)</title><rect x="88.4384%" y="165" width="0.2062%" height="15" fill="rgb(249,83,47)"/><text x="88.6884%" y="175.50"></text></g><g><title>layout_of (126,252 samples, 0.18%)</title><rect x="88.4620%" y="149" width="0.1826%" height="15" fill="rgb(215,43,3)"/><text x="88.7120%" y="159.50"></text></g><g><title>layout_of (745,098 samples, 1.08%)</title><rect x="87.7335%" y="197" width="1.0779%" height="15" fill="rgb(238,154,13)"/><text x="87.9835%" y="207.50"></text></g><g><title>param_env (115,261 samples, 0.17%)</title><rect x="88.6446%" y="181" width="0.1667%" height="15" fill="rgb(219,56,2)"/><text x="88.8946%" y="191.50"></text></g><g><title>layout_of (1,092,213 samples, 1.58%)</title><rect x="87.2852%" y="213" width="1.5801%" height="15" fill="rgb(233,0,4)"/><text x="87.5352%" y="223.50"></text></g><g><title>optimized_mir (2,912,939 samples, 4.21%)</title><rect x="86.2519%" y="229" width="4.2140%" height="15" fill="rgb(235,30,7)"/><text x="86.5019%" y="239.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,106,511 samples, 1.60%)</title><rect x="88.8652%" y="213" width="1.6007%" height="15" fill="rgb(250,79,13)"/><text x="89.1152%" y="223.50"></text></g><g><title>generate_crate_metadata (3,782,328 samples, 5.47%)</title><rect x="85.1315%" y="245" width="5.4718%" height="15" fill="rgb(211,146,34)"/><text x="85.3815%" y="255.50">generat..</text></g><g><title>hir_lowering (691,507 samples, 1.00%)</title><rect x="90.6032%" y="245" width="1.0004%" height="15" fill="rgb(228,22,38)"/><text x="90.8532%" y="255.50"></text></g><g><title>finish_ongoing_codegen (861,369 samples, 1.25%)</title><rect x="91.6215%" y="229" width="1.2461%" height="15" fill="rgb(235,168,5)"/><text x="91.8715%" y="239.50"></text></g><g><title>link_crate (572,936 samples, 0.83%)</title><rect x="92.8676%" y="229" width="0.8288%" height="15" fill="rgb(221,155,16)"/><text x="93.1176%" y="239.50"></text></g><g><title>link_binary (554,086 samples, 0.80%)</title><rect x="92.8949%" y="213" width="0.8016%" height="15" fill="rgb(215,215,53)"/><text x="93.1449%" y="223.50"></text></g><g><title>link_rlib (333,763 samples, 0.48%)</title><rect x="93.2136%" y="197" width="0.4828%" height="15" fill="rgb(223,4,10)"/><text x="93.4636%" y="207.50"></text></g><g><title>link (1,454,065 samples, 2.10%)</title><rect x="91.6036%" y="245" width="2.1035%" height="15" fill="rgb(234,103,6)"/><text x="91.8536%" y="255.50">l..</text></g><g><title>parse_crate (2,514,225 samples, 3.64%)</title><rect x="93.7072%" y="245" width="3.6372%" height="15" fill="rgb(227,97,0)"/><text x="93.9572%" y="255.50">pars..</text></g><g><title>prepare_outputs (337,694 samples, 0.49%)</title><rect x="97.3596%" y="245" width="0.4885%" height="15" fill="rgb(234,150,53)"/><text x="97.6096%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (547,316 samples, 0.79%)</title><rect x="97.8481%" y="245" width="0.7918%" height="15" fill="rgb(228,201,54)"/><text x="98.0981%" y="255.50"></text></g><g><title>setup_global_ctxt (566,185 samples, 0.82%)</title><rect x="98.6413%" y="245" width="0.8191%" height="15" fill="rgb(222,22,37)"/><text x="98.8913%" y="255.50"></text></g><g><title>all (69,124,572 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (69,124,572 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (372,994 samples, 0.54%)</title><rect x="99.4604%" y="245" width="0.5396%" height="15" fill="rgb(210,40,34)"/><text x="99.7104%" y="255.50"></text></g></svg></svg>