<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (318,511,962 samples, 13.23%)</title><rect x="0.0788%" y="181" width="13.2345%" height="15" fill="rgb(227,0,7)"/><text x="0.3288%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (3,082,295 samples, 0.13%)</title><rect x="18.5454%" y="53" width="0.1281%" height="15" fill="rgb(217,0,24)"/><text x="18.7954%" y="63.50"></text></g><g><title>evaluate_obligation (2,561,779 samples, 0.11%)</title><rect x="18.5670%" y="37" width="0.1064%" height="15" fill="rgb(221,193,54)"/><text x="18.8170%" y="47.50"></text></g><g><title>needs_drop_raw (4,229,875 samples, 0.18%)</title><rect x="18.4984%" y="69" width="0.1758%" height="15" fill="rgb(248,212,6)"/><text x="18.7484%" y="79.50"></text></g><g><title>resolve_instance (2,901,791 samples, 0.12%)</title><rect x="18.6755%" y="69" width="0.1206%" height="15" fill="rgb(208,68,35)"/><text x="18.9255%" y="79.50"></text></g><g><title>thir_body (8,077,316 samples, 0.34%)</title><rect x="18.8049%" y="69" width="0.3356%" height="15" fill="rgb(232,128,0)"/><text x="19.0549%" y="79.50"></text></g><g><title>mir_const (49,409,405 samples, 2.05%)</title><rect x="17.0936%" y="117" width="2.0530%" height="15" fill="rgb(207,160,47)"/><text x="17.3436%" y="127.50">m..</text></g><g><title>unsafety_check_result (42,095,019 samples, 1.75%)</title><rect x="17.3975%" y="101" width="1.7491%" height="15" fill="rgb(228,23,34)"/><text x="17.6475%" y="111.50"></text></g><g><title>mir_built (37,611,045 samples, 1.56%)</title><rect x="17.5838%" y="85" width="1.5628%" height="15" fill="rgb(218,30,26)"/><text x="17.8338%" y="95.50"></text></g><g><title>mir_promoted (57,755,415 samples, 2.40%)</title><rect x="16.8343%" y="133" width="2.3998%" height="15" fill="rgb(220,122,19)"/><text x="17.0843%" y="143.50">mi..</text></g><g><title>type_op_prove_predicate (9,575,884 samples, 0.40%)</title><rect x="19.4185%" y="133" width="0.3979%" height="15" fill="rgb(250,228,42)"/><text x="19.6685%" y="143.50"></text></g><g><title>MIR_borrow_checking (154,672,746 samples, 6.43%)</title><rect x="13.3905%" y="165" width="6.4268%" height="15" fill="rgb(240,193,28)"/><text x="13.6405%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (153,609,269 samples, 6.38%)</title><rect x="13.4347%" y="149" width="6.3826%" height="15" fill="rgb(216,20,37)"/><text x="13.6847%" y="159.50">mir_borr..</text></g><g><title>check_mod_attrs (3,259,396 samples, 0.14%)</title><rect x="19.9245%" y="149" width="0.1354%" height="15" fill="rgb(206,188,39)"/><text x="20.1745%" y="159.50"></text></g><g><title>misc_checking_1 (7,036,341 samples, 0.29%)</title><rect x="19.9216%" y="165" width="0.2924%" height="15" fill="rgb(217,207,13)"/><text x="20.1716%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,688,647 samples, 0.11%)</title><rect x="20.2141%" y="149" width="0.1117%" height="15" fill="rgb(231,73,38)"/><text x="20.4641%" y="159.50"></text></g><g><title>misc_checking_2 (9,389,065 samples, 0.39%)</title><rect x="20.2140%" y="165" width="0.3901%" height="15" fill="rgb(225,20,46)"/><text x="20.4640%" y="175.50"></text></g><g><title>match_checking (6,697,988 samples, 0.28%)</title><rect x="20.3258%" y="149" width="0.2783%" height="15" fill="rgb(210,31,41)"/><text x="20.5758%" y="159.50"></text></g><g><title>check_match (6,359,675 samples, 0.26%)</title><rect x="20.3398%" y="133" width="0.2643%" height="15" fill="rgb(221,200,47)"/><text x="20.5898%" y="143.50"></text></g><g><title>death_checking (3,063,951 samples, 0.13%)</title><rect x="20.6688%" y="149" width="0.1273%" height="15" fill="rgb(226,26,5)"/><text x="20.9188%" y="159.50"></text></g><g><title>crate_lints (7,025,461 samples, 0.29%)</title><rect x="20.7962%" y="133" width="0.2919%" height="15" fill="rgb(249,33,26)"/><text x="21.0462%" y="143.50"></text></g><g><title>lint_checking (10,596,456 samples, 0.44%)</title><rect x="20.7961%" y="149" width="0.4403%" height="15" fill="rgb(235,183,28)"/><text x="21.0461%" y="159.50"></text></g><g><title>module_lints (3,568,395 samples, 0.15%)</title><rect x="21.0882%" y="133" width="0.1483%" height="15" fill="rgb(221,5,38)"/><text x="21.3382%" y="143.50"></text></g><g><title>lint_mod (3,544,385 samples, 0.15%)</title><rect x="21.0892%" y="117" width="0.1473%" height="15" fill="rgb(247,18,42)"/><text x="21.3392%" y="127.50"></text></g><g><title>privacy_access_levels (2,505,845 samples, 0.10%)</title><rect x="21.2364%" y="149" width="0.1041%" height="15" fill="rgb(241,131,45)"/><text x="21.4864%" y="159.50"></text></g><g><title>privacy_checking_modules (6,569,807 samples, 0.27%)</title><rect x="21.3405%" y="149" width="0.2730%" height="15" fill="rgb(249,31,29)"/><text x="21.5905%" y="159.50"></text></g><g><title>check_mod_privacy (6,549,997 samples, 0.27%)</title><rect x="21.3414%" y="133" width="0.2722%" height="15" fill="rgb(225,111,53)"/><text x="21.5914%" y="143.50"></text></g><g><title>misc_checking_3 (24,371,735 samples, 1.01%)</title><rect x="20.6041%" y="165" width="1.0127%" height="15" fill="rgb(238,160,17)"/><text x="20.8541%" y="175.50"></text></g><g><title>impl_parent (4,007,061 samples, 0.17%)</title><rect x="21.9838%" y="101" width="0.1665%" height="15" fill="rgb(214,148,48)"/><text x="22.2338%" y="111.50"></text></g><g><title>impl_trait_ref (8,128,631 samples, 0.34%)</title><rect x="22.1503%" y="101" width="0.3378%" height="15" fill="rgb(232,36,49)"/><text x="22.4003%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,387,210 samples, 0.27%)</title><rect x="22.2227%" y="85" width="0.2654%" height="15" fill="rgb(209,103,24)"/><text x="22.4727%" y="95.50"></text></g><g><title>coherent_trait (22,494,307 samples, 0.93%)</title><rect x="21.6384%" y="133" width="0.9347%" height="15" fill="rgb(229,88,8)"/><text x="21.8884%" y="143.50"></text></g><g><title>specialization_graph_of (21,427,023 samples, 0.89%)</title><rect x="21.6827%" y="117" width="0.8903%" height="15" fill="rgb(213,181,19)"/><text x="21.9327%" y="127.50"></text></g><g><title>coherence_checking (23,089,542 samples, 0.96%)</title><rect x="21.6369%" y="149" width="0.9594%" height="15" fill="rgb(254,191,54)"/><text x="21.8869%" y="159.50"></text></g><g><title>specializes (2,543,702 samples, 0.11%)</title><rect x="28.4067%" y="85" width="0.1057%" height="15" fill="rgb(241,83,37)"/><text x="28.6567%" y="95.50"></text></g><g><title>evaluate_obligation (13,559,039 samples, 0.56%)</title><rect x="27.9712%" y="101" width="0.5634%" height="15" fill="rgb(233,36,39)"/><text x="28.2212%" y="111.50"></text></g><g><title>evaluate_obligation (4,588,796 samples, 0.19%)</title><rect x="29.8281%" y="85" width="0.1907%" height="15" fill="rgb(226,3,54)"/><text x="30.0781%" y="95.50"></text></g><g><title>typeck (34,459,586 samples, 1.43%)</title><rect x="28.7096%" y="101" width="1.4318%" height="15" fill="rgb(245,192,40)"/><text x="28.9596%" y="111.50"></text></g><g><title>item_bodies_checking (181,515,305 samples, 7.54%)</title><rect x="22.6095%" y="149" width="7.5421%" height="15" fill="rgb(238,167,29)"/><text x="22.8595%" y="159.50">item_bodie..</text></g><g><title>typeck_item_bodies (181,512,765 samples, 7.54%)</title><rect x="22.6096%" y="133" width="7.5420%" height="15" fill="rgb(232,182,51)"/><text x="22.8596%" y="143.50">typeck_ite..</text></g><g><title>typeck (180,803,230 samples, 7.51%)</title><rect x="22.6391%" y="117" width="7.5125%" height="15" fill="rgb(231,60,39)"/><text x="22.8891%" y="127.50">typeck</text></g><g><title>item_types_checking (13,263,763 samples, 0.55%)</title><rect x="30.1516%" y="149" width="0.5511%" height="15" fill="rgb(208,69,12)"/><text x="30.4016%" y="159.50"></text></g><g><title>check_mod_item_types (13,237,823 samples, 0.55%)</title><rect x="30.1527%" y="133" width="0.5500%" height="15" fill="rgb(235,93,37)"/><text x="30.4027%" y="143.50"></text></g><g><title>named_region_map (4,040,991 samples, 0.17%)</title><rect x="30.9298%" y="101" width="0.1679%" height="15" fill="rgb(213,116,39)"/><text x="31.1798%" y="111.50"></text></g><g><title>resolve_lifetimes (3,843,540 samples, 0.16%)</title><rect x="30.9380%" y="85" width="0.1597%" height="15" fill="rgb(222,207,29)"/><text x="31.1880%" y="95.50"></text></g><g><title>generics_of (5,148,031 samples, 0.21%)</title><rect x="30.8882%" y="117" width="0.2139%" height="15" fill="rgb(206,96,30)"/><text x="31.1382%" y="127.50"></text></g><g><title>predicates_of (3,369,334 samples, 0.14%)</title><rect x="31.1210%" y="117" width="0.1400%" height="15" fill="rgb(218,138,4)"/><text x="31.3710%" y="127.50"></text></g><g><title>predicates_defined_on (2,909,678 samples, 0.12%)</title><rect x="31.1401%" y="101" width="0.1209%" height="15" fill="rgb(250,191,14)"/><text x="31.3901%" y="111.50"></text></g><g><title>type_collecting (14,045,521 samples, 0.58%)</title><rect x="30.7033%" y="149" width="0.5836%" height="15" fill="rgb(239,60,40)"/><text x="30.9533%" y="159.50"></text></g><g><title>collect_mod_item_types (14,010,430 samples, 0.58%)</title><rect x="30.7047%" y="133" width="0.5821%" height="15" fill="rgb(206,27,48)"/><text x="30.9547%" y="143.50"></text></g><g><title>evaluate_obligation (2,577,785 samples, 0.11%)</title><rect x="31.9045%" y="117" width="0.1071%" height="15" fill="rgb(225,35,8)"/><text x="32.1545%" y="127.50"></text></g><g><title>region_scope_tree (2,768,433 samples, 0.12%)</title><rect x="32.1360%" y="117" width="0.1150%" height="15" fill="rgb(250,213,24)"/><text x="32.3860%" y="127.50"></text></g><g><title>check_impl_item_well_formed (21,486,362 samples, 0.89%)</title><rect x="31.3607%" y="133" width="0.8928%" height="15" fill="rgb(247,123,22)"/><text x="31.6107%" y="143.50"></text></g><g><title>evaluate_obligation (5,626,041 samples, 0.23%)</title><rect x="32.7208%" y="117" width="0.2338%" height="15" fill="rgb(231,138,38)"/><text x="32.9708%" y="127.50"></text></g><g><title>check_item_well_formed (22,124,976 samples, 0.92%)</title><rect x="32.2535%" y="133" width="0.9193%" height="15" fill="rgb(231,145,46)"/><text x="32.5035%" y="143.50"></text></g><g><title>analysis (480,073,827 samples, 19.95%)</title><rect x="13.3132%" y="181" width="19.9475%" height="15" fill="rgb(251,118,11)"/><text x="13.5632%" y="191.50">analysis</text></g><g><title>type_check_crate (280,233,917 samples, 11.64%)</title><rect x="21.6167%" y="165" width="11.6440%" height="15" fill="rgb(217,147,25)"/><text x="21.8667%" y="175.50">type_check_crate</text></g><g><title>wf_checking (47,457,737 samples, 1.97%)</title><rect x="31.2888%" y="149" width="1.9719%" height="15" fill="rgb(247,81,37)"/><text x="31.5388%" y="159.50">w..</text></g><g><title>compute_debuginfo_type_name (6,551,364 samples, 0.27%)</title><rect x="43.0875%" y="149" width="0.2722%" height="15" fill="rgb(209,12,38)"/><text x="43.3375%" y="159.50"></text></g><g><title>const_caller_location (3,491,442 samples, 0.15%)</title><rect x="43.3597%" y="149" width="0.1451%" height="15" fill="rgb(227,1,9)"/><text x="43.6097%" y="159.50"></text></g><g><title>layout_of (3,661,902 samples, 0.15%)</title><rect x="44.0596%" y="133" width="0.1522%" height="15" fill="rgb(248,47,43)"/><text x="44.3096%" y="143.50"></text></g><g><title>predicates_of (3,766,835 samples, 0.16%)</title><rect x="44.4823%" y="117" width="0.1565%" height="15" fill="rgb(221,10,30)"/><text x="44.7323%" y="127.50"></text></g><g><title>predicates_defined_on (2,681,603 samples, 0.11%)</title><rect x="44.5274%" y="101" width="0.1114%" height="15" fill="rgb(210,229,1)"/><text x="44.7774%" y="111.50"></text></g><g><title>param_env (10,290,399 samples, 0.43%)</title><rect x="44.2118%" y="133" width="0.4276%" height="15" fill="rgb(222,148,37)"/><text x="44.4618%" y="143.50"></text></g><g><title>fn_abi_of_instance (29,357,205 samples, 1.22%)</title><rect x="43.5079%" y="149" width="1.2198%" height="15" fill="rgb(234,67,33)"/><text x="43.7579%" y="159.50"></text></g><g><title>layout_of (5,811,368 samples, 0.24%)</title><rect x="44.7980%" y="149" width="0.2415%" height="15" fill="rgb(247,98,35)"/><text x="45.0480%" y="159.50"></text></g><g><title>symbol_name (2,968,658 samples, 0.12%)</title><rect x="45.0404%" y="149" width="0.1234%" height="15" fill="rgb(247,138,52)"/><text x="45.2904%" y="159.50"></text></g><g><title>codegen_module (283,413,961 samples, 11.78%)</title><rect x="33.4069%" y="165" width="11.7761%" height="15" fill="rgb(213,79,30)"/><text x="33.6569%" y="175.50">codegen_module</text></g><g><title>codegen_crate (287,036,426 samples, 11.93%)</title><rect x="33.2611%" y="181" width="11.9266%" height="15" fill="rgb(246,177,23)"/><text x="33.5111%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (941,571,268 samples, 39.12%)</title><rect x="45.1958%" y="165" width="39.1231%" height="15" fill="rgb(230,62,27)"/><text x="45.4458%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (890,107,170 samples, 36.98%)</title><rect x="47.3342%" y="149" width="36.9847%" height="15" fill="rgb(216,154,8)"/><text x="47.5842%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (983,602,803 samples, 40.87%)</title><rect x="45.1877%" y="181" width="40.8696%" height="15" fill="rgb(244,35,45)"/><text x="45.4377%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (41,836,213 samples, 1.74%)</title><rect x="84.3190%" y="165" width="1.7383%" height="15" fill="rgb(251,115,12)"/><text x="84.5690%" y="175.50"></text></g><g><title>macro_expand_crate (84,739,282 samples, 3.52%)</title><rect x="86.1192%" y="165" width="3.5210%" height="15" fill="rgb(240,54,50)"/><text x="86.3692%" y="175.50">mac..</text></g><g><title>expand_crate (84,725,782 samples, 3.52%)</title><rect x="86.1198%" y="149" width="3.5204%" height="15" fill="rgb(233,84,52)"/><text x="86.3698%" y="159.50">exp..</text></g><g><title>late_resolve_crate (10,201,082 samples, 0.42%)</title><rect x="89.7009%" y="149" width="0.4239%" height="15" fill="rgb(207,117,47)"/><text x="89.9509%" y="159.50"></text></g><g><title>configure_and_expand (98,952,415 samples, 4.11%)</title><rect x="86.0573%" y="181" width="4.1116%" height="15" fill="rgb(249,43,39)"/><text x="86.3073%" y="191.50">conf..</text></g><g><title>resolve_crate (12,625,526 samples, 0.52%)</title><rect x="89.6442%" y="165" width="0.5246%" height="15" fill="rgb(209,38,44)"/><text x="89.8942%" y="175.50"></text></g><g><title>early_lint_checks (3,048,381 samples, 0.13%)</title><rect x="90.2294%" y="181" width="0.1267%" height="15" fill="rgb(236,212,23)"/><text x="90.4794%" y="191.50"></text></g><g><title>free_global_ctxt (38,857,351 samples, 1.61%)</title><rect x="90.3561%" y="181" width="1.6146%" height="15" fill="rgb(242,79,21)"/><text x="90.6061%" y="191.50"></text></g><g><title>codegen_fn_attrs (3,829,193 samples, 0.16%)</title><rect x="92.8559%" y="101" width="0.1591%" height="15" fill="rgb(211,96,35)"/><text x="93.1059%" y="111.50"></text></g><g><title>mir_shims (2,626,490 samples, 0.11%)</title><rect x="93.1113%" y="101" width="0.1091%" height="15" fill="rgb(253,215,40)"/><text x="93.3613%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (7,701,597 samples, 0.32%)</title><rect x="93.7415%" y="85" width="0.3200%" height="15" fill="rgb(211,81,21)"/><text x="93.9915%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,365,439 samples, 0.56%)</title><rect x="94.0615%" y="85" width="0.5553%" height="15" fill="rgb(208,190,38)"/><text x="94.3115%" y="95.50"></text></g><g><title>optimized_mir (34,984,486 samples, 1.45%)</title><rect x="93.2204%" y="101" width="1.4536%" height="15" fill="rgb(235,213,38)"/><text x="93.4704%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (8,997,004 samples, 0.37%)</title><rect x="94.8240%" y="85" width="0.3738%" height="15" fill="rgb(237,122,38)"/><text x="95.0740%" y="95.50"></text></g><g><title>resolve_instance (18,074,832 samples, 0.75%)</title><rect x="94.6740%" y="101" width="0.7510%" height="15" fill="rgb(244,218,35)"/><text x="94.9240%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,523,525 samples, 0.10%)</title><rect x="95.4436%" y="101" width="0.1049%" height="15" fill="rgb(240,68,47)"/><text x="95.6936%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (77,581,300 samples, 3.22%)</title><rect x="92.4693%" y="117" width="3.2236%" height="15" fill="rgb(210,16,53)"/><text x="92.7193%" y="127.50">mon..</text></g><g><title>monomorphization_collector (77,911,493 samples, 3.24%)</title><rect x="92.4692%" y="133" width="3.2373%" height="15" fill="rgb(235,124,12)"/><text x="92.7192%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (7,519,826 samples, 0.31%)</title><rect x="95.7067%" y="117" width="0.3125%" height="15" fill="rgb(224,169,11)"/><text x="95.9567%" y="127.50"></text></g><g><title>symbol_name (6,747,488 samples, 0.28%)</title><rect x="95.7388%" y="101" width="0.2804%" height="15" fill="rgb(250,166,2)"/><text x="95.9888%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (88,923,483 samples, 3.69%)</title><rect x="92.4667%" y="149" width="3.6949%" height="15" fill="rgb(242,216,29)"/><text x="92.7167%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (10,951,410 samples, 0.46%)</title><rect x="95.7065%" y="133" width="0.4550%" height="15" fill="rgb(230,116,27)"/><text x="95.9565%" y="143.50"></text></g><g><title>cgu_partitioning (3,426,904 samples, 0.14%)</title><rect x="96.0191%" y="117" width="0.1424%" height="15" fill="rgb(228,99,48)"/><text x="96.2691%" y="127.50"></text></g><g><title>exported_symbols (90,091,746 samples, 3.74%)</title><rect x="92.4533%" y="165" width="3.7434%" height="15" fill="rgb(253,11,6)"/><text x="92.7033%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (14,389,690 samples, 0.60%)</title><rect x="96.9103%" y="149" width="0.5979%" height="15" fill="rgb(247,143,39)"/><text x="97.1603%" y="159.50"></text></g><g><title>optimized_mir (31,476,254 samples, 1.31%)</title><rect x="96.2214%" y="165" width="1.3079%" height="15" fill="rgb(236,97,10)"/><text x="96.4714%" y="175.50"></text></g><g><title>generate_crate_metadata (134,613,574 samples, 5.59%)</title><rect x="91.9706%" y="181" width="5.5933%" height="15" fill="rgb(233,208,19)"/><text x="92.2206%" y="191.50">generat..</text></g><g><title>hir_lowering (23,363,884 samples, 0.97%)</title><rect x="97.5639%" y="181" width="0.9708%" height="15" fill="rgb(216,164,2)"/><text x="97.8139%" y="191.50"></text></g><g><title>link_crate (7,496,085 samples, 0.31%)</title><rect x="98.5362%" y="165" width="0.3115%" height="15" fill="rgb(220,129,5)"/><text x="98.7862%" y="175.50"></text></g><g><title>link_binary (7,357,093 samples, 0.31%)</title><rect x="98.5420%" y="149" width="0.3057%" height="15" fill="rgb(242,17,10)"/><text x="98.7920%" y="159.50"></text></g><g><title>link_rlib (6,019,341 samples, 0.25%)</title><rect x="98.5976%" y="133" width="0.2501%" height="15" fill="rgb(242,107,0)"/><text x="98.8476%" y="143.50"></text></g><g><title>link (7,542,036 samples, 0.31%)</title><rect x="98.5347%" y="181" width="0.3134%" height="15" fill="rgb(251,28,31)"/><text x="98.7847%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (25,796,839 samples, 1.07%)</title><rect x="98.8862%" y="181" width="1.0719%" height="15" fill="rgb(233,223,10)"/><text x="99.1362%" y="191.50"></text></g><g><title>all (2,406,687,221 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,406,687,221 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>