<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (229,790,519 samples, 14.90%)</title><rect x="0.0329%" y="229" width="14.9027%" height="15" fill="rgb(227,0,7)"/><text x="0.2829%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,836,486 samples, 0.12%)</title><rect x="17.3957%" y="117" width="0.1191%" height="15" fill="rgb(217,0,24)"/><text x="17.6457%" y="127.50"></text></g><g><title>resolve_instance (2,562,373 samples, 0.17%)</title><rect x="17.5148%" y="117" width="0.1662%" height="15" fill="rgb(221,193,54)"/><text x="17.7648%" y="127.50"></text></g><g><title>thir_body (2,152,173 samples, 0.14%)</title><rect x="17.6843%" y="117" width="0.1396%" height="15" fill="rgb(248,212,6)"/><text x="17.9343%" y="127.50"></text></g><g><title>mir_const (16,174,284 samples, 1.05%)</title><rect x="16.7784%" y="165" width="1.0490%" height="15" fill="rgb(208,68,35)"/><text x="17.0284%" y="175.50"></text></g><g><title>unsafety_check_result (14,175,516 samples, 0.92%)</title><rect x="16.9080%" y="149" width="0.9193%" height="15" fill="rgb(232,128,0)"/><text x="17.1580%" y="159.50"></text></g><g><title>mir_built (12,497,838 samples, 0.81%)</title><rect x="17.0168%" y="133" width="0.8105%" height="15" fill="rgb(207,160,47)"/><text x="17.2668%" y="143.50"></text></g><g><title>mir_promoted (17,865,649 samples, 1.16%)</title><rect x="16.6729%" y="181" width="1.1586%" height="15" fill="rgb(228,23,34)"/><text x="16.9229%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,405,735 samples, 0.29%)</title><rect x="18.0417%" y="181" width="0.2857%" height="15" fill="rgb(218,30,26)"/><text x="18.2917%" y="191.50"></text></g><g><title>MIR_borrow_checking (51,886,124 samples, 3.36%)</title><rect x="14.9632%" y="213" width="3.3650%" height="15" fill="rgb(220,122,19)"/><text x="15.2132%" y="223.50">MIR..</text></g><g><title>mir_borrowck (51,692,382 samples, 3.35%)</title><rect x="14.9757%" y="197" width="3.3524%" height="15" fill="rgb(250,228,42)"/><text x="15.2257%" y="207.50">mir..</text></g><g><title>misc_checking_2 (2,068,481 samples, 0.13%)</title><rect x="18.4402%" y="213" width="0.1341%" height="15" fill="rgb(240,193,28)"/><text x="18.6902%" y="223.50"></text></g><g><title>crate_lints (2,333,423 samples, 0.15%)</title><rect x="18.6286%" y="181" width="0.1513%" height="15" fill="rgb(216,20,37)"/><text x="18.8786%" y="191.50"></text></g><g><title>lint_checking (3,187,752 samples, 0.21%)</title><rect x="18.6285%" y="197" width="0.2067%" height="15" fill="rgb(206,188,39)"/><text x="18.8785%" y="207.50"></text></g><g><title>misc_checking_3 (5,894,630 samples, 0.38%)</title><rect x="18.5743%" y="213" width="0.3823%" height="15" fill="rgb(217,207,13)"/><text x="18.8243%" y="223.50"></text></g><g><title>impl_parent (2,356,605 samples, 0.15%)</title><rect x="19.2575%" y="149" width="0.1528%" height="15" fill="rgb(231,73,38)"/><text x="19.5075%" y="159.50"></text></g><g><title>impl_trait_ref (5,007,320 samples, 0.32%)</title><rect x="19.4104%" y="149" width="0.3247%" height="15" fill="rgb(225,20,46)"/><text x="19.6604%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,018,528 samples, 0.26%)</title><rect x="19.4745%" y="133" width="0.2606%" height="15" fill="rgb(210,31,41)"/><text x="19.7245%" y="143.50"></text></g><g><title>coherent_trait (12,684,878 samples, 0.82%)</title><rect x="18.9623%" y="181" width="0.8227%" height="15" fill="rgb(221,200,47)"/><text x="19.2123%" y="191.50"></text></g><g><title>specialization_graph_of (12,240,744 samples, 0.79%)</title><rect x="18.9911%" y="165" width="0.7939%" height="15" fill="rgb(226,26,5)"/><text x="19.2411%" y="175.50"></text></g><g><title>coherence_checking (12,748,819 samples, 0.83%)</title><rect x="18.9613%" y="197" width="0.8268%" height="15" fill="rgb(249,33,26)"/><text x="19.2113%" y="207.50"></text></g><g><title>evaluate_obligation (9,293,246 samples, 0.60%)</title><rect x="23.1394%" y="133" width="0.6027%" height="15" fill="rgb(235,183,28)"/><text x="23.3894%" y="143.50"></text></g><g><title>typeck (36,995,702 samples, 2.40%)</title><rect x="21.5392%" y="149" width="2.3993%" height="15" fill="rgb(221,5,38)"/><text x="21.7892%" y="159.50">ty..</text></g><g><title>item_bodies_checking (63,999,646 samples, 4.15%)</title><rect x="19.7903%" y="197" width="4.1506%" height="15" fill="rgb(247,18,42)"/><text x="20.0403%" y="207.50">item_..</text></g><g><title>typeck_item_bodies (63,997,466 samples, 4.15%)</title><rect x="19.7904%" y="181" width="4.1504%" height="15" fill="rgb(241,131,45)"/><text x="20.0404%" y="191.50">typec..</text></g><g><title>typeck (63,884,434 samples, 4.14%)</title><rect x="19.7978%" y="165" width="4.1431%" height="15" fill="rgb(249,31,29)"/><text x="20.0478%" y="175.50">typeck</text></g><g><title>type_collecting (2,518,226 samples, 0.16%)</title><rect x="24.0003%" y="197" width="0.1633%" height="15" fill="rgb(225,111,53)"/><text x="24.2503%" y="207.50"></text></g><g><title>collect_mod_item_types (2,512,536 samples, 0.16%)</title><rect x="24.0007%" y="181" width="0.1629%" height="15" fill="rgb(238,160,17)"/><text x="24.2507%" y="191.50"></text></g><g><title>check_impl_item_well_formed (4,747,960 samples, 0.31%)</title><rect x="24.1793%" y="181" width="0.3079%" height="15" fill="rgb(214,148,48)"/><text x="24.4293%" y="191.50"></text></g><g><title>analysis (149,614,580 samples, 9.70%)</title><rect x="14.9356%" y="229" width="9.7030%" height="15" fill="rgb(232,36,49)"/><text x="15.1856%" y="239.50">analysis</text></g><g><title>type_check_crate (87,612,404 samples, 5.68%)</title><rect x="18.9566%" y="213" width="5.6820%" height="15" fill="rgb(209,103,24)"/><text x="19.2066%" y="223.50">type_ch..</text></g><g><title>wf_checking (7,315,314 samples, 0.47%)</title><rect x="24.1641%" y="197" width="0.4744%" height="15" fill="rgb(229,88,8)"/><text x="24.4141%" y="207.50"></text></g><g><title>check_item_well_formed (2,333,083 samples, 0.15%)</title><rect x="24.4873%" y="181" width="0.1513%" height="15" fill="rgb(213,181,19)"/><text x="24.7373%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (3,657,116 samples, 0.24%)</title><rect x="35.5679%" y="197" width="0.2372%" height="15" fill="rgb(254,191,54)"/><text x="35.8179%" y="207.50"></text></g><g><title>const_caller_location (1,680,007 samples, 0.11%)</title><rect x="35.8051%" y="197" width="0.1090%" height="15" fill="rgb(241,83,37)"/><text x="36.0551%" y="207.50"></text></g><g><title>layout_of (2,092,902 samples, 0.14%)</title><rect x="36.5865%" y="181" width="0.1357%" height="15" fill="rgb(233,36,39)"/><text x="36.8365%" y="191.50"></text></g><g><title>predicates_of (2,512,813 samples, 0.16%)</title><rect x="37.1326%" y="165" width="0.1630%" height="15" fill="rgb(226,3,54)"/><text x="37.3826%" y="175.50"></text></g><g><title>predicates_defined_on (1,901,721 samples, 0.12%)</title><rect x="37.1723%" y="149" width="0.1233%" height="15" fill="rgb(245,192,40)"/><text x="37.4223%" y="159.50"></text></g><g><title>param_env (8,851,680 samples, 0.57%)</title><rect x="36.7223%" y="181" width="0.5741%" height="15" fill="rgb(238,167,29)"/><text x="36.9723%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,242,380 samples, 0.15%)</title><rect x="37.2963%" y="181" width="0.1454%" height="15" fill="rgb(232,182,51)"/><text x="37.5463%" y="191.50"></text></g><g><title>normalize_projection_ty (1,710,684 samples, 0.11%)</title><rect x="37.3308%" y="165" width="0.1109%" height="15" fill="rgb(231,60,39)"/><text x="37.5808%" y="175.50"></text></g><g><title>fn_abi_of_instance (23,559,106 samples, 1.53%)</title><rect x="35.9179%" y="197" width="1.5279%" height="15" fill="rgb(208,69,12)"/><text x="36.1679%" y="207.50"></text></g><g><title>layout_of (3,203,377 samples, 0.21%)</title><rect x="37.5227%" y="197" width="0.2077%" height="15" fill="rgb(235,93,37)"/><text x="37.7727%" y="207.50"></text></g><g><title>codegen_module (200,411,592 samples, 13.00%)</title><rect x="24.8051%" y="213" width="12.9974%" height="15" fill="rgb(213,116,39)"/><text x="25.0551%" y="223.50">codegen_module</text></g><g><title>codegen_crate (203,051,620 samples, 13.17%)</title><rect x="24.6389%" y="229" width="13.1686%" height="15" fill="rgb(222,207,29)"/><text x="24.8889%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (754,965,681 samples, 48.96%)</title><rect x="37.8203%" y="213" width="48.9620%" height="15" fill="rgb(206,96,30)"/><text x="38.0703%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (723,734,795 samples, 46.94%)</title><rect x="39.8457%" y="197" width="46.9366%" height="15" fill="rgb(218,138,4)"/><text x="40.0957%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (802,227,909 samples, 52.03%)</title><rect x="37.8074%" y="229" width="52.0271%" height="15" fill="rgb(250,191,14)"/><text x="38.0574%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (47,063,764 samples, 3.05%)</title><rect x="86.7824%" y="213" width="3.0522%" height="15" fill="rgb(239,60,40)"/><text x="87.0324%" y="223.50">LLV..</text></g><g><title>macro_expand_crate (10,535,447 samples, 0.68%)</title><rect x="89.8601%" y="213" width="0.6833%" height="15" fill="rgb(206,27,48)"/><text x="90.1101%" y="223.50"></text></g><g><title>expand_crate (10,523,777 samples, 0.68%)</title><rect x="89.8609%" y="197" width="0.6825%" height="15" fill="rgb(225,35,8)"/><text x="90.1109%" y="207.50"></text></g><g><title>late_resolve_crate (2,422,394 samples, 0.16%)</title><rect x="90.5704%" y="197" width="0.1571%" height="15" fill="rgb(250,213,24)"/><text x="90.8204%" y="207.50"></text></g><g><title>configure_and_expand (13,928,681 samples, 0.90%)</title><rect x="89.8346%" y="229" width="0.9033%" height="15" fill="rgb(247,123,22)"/><text x="90.0846%" y="239.50"></text></g><g><title>resolve_crate (2,806,848 samples, 0.18%)</title><rect x="90.5559%" y="213" width="0.1820%" height="15" fill="rgb(231,138,38)"/><text x="90.8059%" y="223.50"></text></g><g><title>free_global_ctxt (7,228,903 samples, 0.47%)</title><rect x="90.7960%" y="229" width="0.4688%" height="15" fill="rgb(231,145,46)"/><text x="91.0460%" y="239.50"></text></g><g><title>item_attrs (1,895,409 samples, 0.12%)</title><rect x="91.9878%" y="133" width="0.1229%" height="15" fill="rgb(251,118,11)"/><text x="92.2378%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,790,417 samples, 0.12%)</title><rect x="91.9946%" y="117" width="0.1161%" height="15" fill="rgb(217,147,25)"/><text x="92.2446%" y="127.50"></text></g><g><title>codegen_fn_attrs (3,349,206 samples, 0.22%)</title><rect x="91.9473%" y="149" width="0.2172%" height="15" fill="rgb(247,81,37)"/><text x="92.1973%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,960,522 samples, 0.32%)</title><rect x="92.5551%" y="133" width="0.3217%" height="15" fill="rgb(209,12,38)"/><text x="92.8051%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,844,870 samples, 0.25%)</title><rect x="92.8768%" y="133" width="0.2494%" height="15" fill="rgb(227,1,9)"/><text x="93.1268%" y="143.50"></text></g><g><title>optimized_mir (13,221,781 samples, 0.86%)</title><rect x="92.3035%" y="149" width="0.8575%" height="15" fill="rgb(248,47,43)"/><text x="92.5535%" y="159.50"></text></g><g><title>evaluate_obligation (1,604,615 samples, 0.10%)</title><rect x="93.9153%" y="117" width="0.1041%" height="15" fill="rgb(221,10,30)"/><text x="94.1653%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (11,494,964 samples, 0.75%)</title><rect x="93.3782%" y="133" width="0.7455%" height="15" fill="rgb(210,229,1)"/><text x="93.6282%" y="143.50"></text></g><g><title>specialization_graph_of (4,671,257 samples, 0.30%)</title><rect x="94.2765%" y="133" width="0.3029%" height="15" fill="rgb(222,148,37)"/><text x="94.5265%" y="143.50"></text></g><g><title>impl_trait_ref (2,022,121 samples, 0.13%)</title><rect x="94.4483%" y="117" width="0.1311%" height="15" fill="rgb(234,67,33)"/><text x="94.6983%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,723,798 samples, 0.11%)</title><rect x="94.4676%" y="101" width="0.1118%" height="15" fill="rgb(247,98,35)"/><text x="94.7176%" y="111.50"></text></g><g><title>resolve_instance (22,777,675 samples, 1.48%)</title><rect x="93.1609%" y="149" width="1.4772%" height="15" fill="rgb(247,138,52)"/><text x="93.4109%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,585,110 samples, 0.10%)</title><rect x="94.6381%" y="149" width="0.1028%" height="15" fill="rgb(213,79,30)"/><text x="94.8881%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,656,188 samples, 0.24%)</title><rect x="94.9406%" y="69" width="0.2371%" height="15" fill="rgb(246,177,23)"/><text x="95.1906%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,654,568 samples, 0.24%)</title><rect x="94.9407%" y="53" width="0.2370%" height="15" fill="rgb(230,62,27)"/><text x="95.1907%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,651,378 samples, 0.24%)</title><rect x="94.9409%" y="37" width="0.2368%" height="15" fill="rgb(216,154,8)"/><text x="95.1909%" y="47.50"></text></g><g><title>eval_to_const_value_raw (6,335,034 samples, 0.41%)</title><rect x="94.7670%" y="133" width="0.4108%" height="15" fill="rgb(244,35,45)"/><text x="95.0170%" y="143.50"></text></g><g><title>eval_to_const_value_raw (6,277,863 samples, 0.41%)</title><rect x="94.7707%" y="117" width="0.4071%" height="15" fill="rgb(251,115,12)"/><text x="95.0207%" y="127.50"></text></g><g><title>eval_to_allocation_raw (6,213,910 samples, 0.40%)</title><rect x="94.7748%" y="101" width="0.4030%" height="15" fill="rgb(240,54,50)"/><text x="95.0248%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,663,338 samples, 0.24%)</title><rect x="94.9402%" y="85" width="0.2376%" height="15" fill="rgb(233,84,52)"/><text x="95.1902%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,835,732 samples, 0.44%)</title><rect x="94.7409%" y="149" width="0.4433%" height="15" fill="rgb(207,117,47)"/><text x="94.9909%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (59,544,261 samples, 3.86%)</title><rect x="91.4263%" y="165" width="3.8616%" height="15" fill="rgb(249,43,39)"/><text x="91.6763%" y="175.50">mono..</text></g><g><title>monomorphization_collector (59,622,872 samples, 3.87%)</title><rect x="91.4261%" y="181" width="3.8667%" height="15" fill="rgb(209,38,44)"/><text x="91.6761%" y="191.50">mono..</text></g><g><title>assert_symbols_are_distinct (6,509,866 samples, 0.42%)</title><rect x="95.2937%" y="165" width="0.4222%" height="15" fill="rgb(236,212,23)"/><text x="95.5437%" y="175.50"></text></g><g><title>symbol_name (5,801,389 samples, 0.38%)</title><rect x="95.3397%" y="149" width="0.3762%" height="15" fill="rgb(242,79,21)"/><text x="95.5897%" y="159.50"></text></g><g><title>cgu_partitioning_place_roots (2,016,230 samples, 0.13%)</title><rect x="95.7941%" y="149" width="0.1308%" height="15" fill="rgb(211,96,35)"/><text x="96.0441%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (69,625,203 samples, 4.52%)</title><rect x="91.4222%" y="197" width="4.5154%" height="15" fill="rgb(253,215,40)"/><text x="91.6722%" y="207.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (9,941,920 samples, 0.64%)</title><rect x="95.2928%" y="181" width="0.6448%" height="15" fill="rgb(211,81,21)"/><text x="95.5428%" y="191.50"></text></g><g><title>cgu_partitioning (3,417,964 samples, 0.22%)</title><rect x="95.7159%" y="165" width="0.2217%" height="15" fill="rgb(208,190,38)"/><text x="95.9659%" y="175.50"></text></g><g><title>exported_symbols (70,028,777 samples, 4.54%)</title><rect x="91.4037%" y="213" width="4.5416%" height="15" fill="rgb(235,213,38)"/><text x="91.6537%" y="223.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,478,055 samples, 0.36%)</title><rect x="96.2676%" y="197" width="0.3553%" height="15" fill="rgb(237,122,38)"/><text x="96.5176%" y="207.50"></text></g><g><title>optimized_mir (10,506,365 samples, 0.68%)</title><rect x="95.9514%" y="213" width="0.6814%" height="15" fill="rgb(244,218,35)"/><text x="96.2014%" y="223.50"></text></g><g><title>generate_crate_metadata (82,917,857 samples, 5.38%)</title><rect x="91.2648%" y="229" width="5.3775%" height="15" fill="rgb(240,68,47)"/><text x="91.5148%" y="239.50">generat..</text></g><g><title>hir_lowering (4,302,324 samples, 0.28%)</title><rect x="96.6423%" y="229" width="0.2790%" height="15" fill="rgb(210,16,53)"/><text x="96.8923%" y="239.50"></text></g><g><title>finish_ongoing_codegen (37,473,569 samples, 2.43%)</title><rect x="96.9223%" y="213" width="2.4303%" height="15" fill="rgb(235,124,12)"/><text x="97.1723%" y="223.50">fi..</text></g><g><title>link_crate (3,892,059 samples, 0.25%)</title><rect x="99.3526%" y="213" width="0.2524%" height="15" fill="rgb(224,169,11)"/><text x="99.6026%" y="223.50"></text></g><g><title>link_binary (3,813,218 samples, 0.25%)</title><rect x="99.3577%" y="197" width="0.2473%" height="15" fill="rgb(250,166,2)"/><text x="99.6077%" y="207.50"></text></g><g><title>link_rlib (2,985,470 samples, 0.19%)</title><rect x="99.4114%" y="181" width="0.1936%" height="15" fill="rgb(242,216,29)"/><text x="99.6614%" y="191.50"></text></g><g><title>link (41,391,138 samples, 2.68%)</title><rect x="96.9213%" y="229" width="2.6844%" height="15" fill="rgb(230,116,27)"/><text x="97.1713%" y="239.50">li..</text></g><g><title>parse_crate (3,362,613 samples, 0.22%)</title><rect x="99.6057%" y="229" width="0.2181%" height="15" fill="rgb(228,99,48)"/><text x="99.8557%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (2,002,900 samples, 0.13%)</title><rect x="99.8382%" y="229" width="0.1299%" height="15" fill="rgb(253,11,6)"/><text x="100.0882%" y="239.50"></text></g><g><title>all (1,541,940,914 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (1,541,940,914 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>