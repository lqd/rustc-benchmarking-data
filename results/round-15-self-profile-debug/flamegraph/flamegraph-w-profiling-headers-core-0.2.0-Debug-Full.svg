<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,039,480 samples, 11.65%)</title><rect x="0.7893%" y="197" width="11.6460%" height="15" fill="rgb(227,0,7)"/><text x="1.0393%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (64,210 samples, 0.12%)</title><rect x="15.2983%" y="53" width="0.1238%" height="15" fill="rgb(217,0,24)"/><text x="15.5483%" y="63.50"></text></g><g><title>evaluate_obligation (60,450 samples, 0.12%)</title><rect x="15.3055%" y="37" width="0.1166%" height="15" fill="rgb(221,193,54)"/><text x="15.5555%" y="47.50"></text></g><g><title>adt_drop_tys (79,451 samples, 0.15%)</title><rect x="15.2870%" y="69" width="0.1532%" height="15" fill="rgb(248,212,6)"/><text x="15.5370%" y="79.50"></text></g><g><title>needs_drop_raw (271,152 samples, 0.52%)</title><rect x="15.2679%" y="85" width="0.5229%" height="15" fill="rgb(208,68,35)"/><text x="15.5179%" y="95.50"></text></g><g><title>is_copy_raw (181,821 samples, 0.35%)</title><rect x="15.4402%" y="69" width="0.3506%" height="15" fill="rgb(232,128,0)"/><text x="15.6902%" y="79.50"></text></g><g><title>evaluate_obligation (174,181 samples, 0.34%)</title><rect x="15.4549%" y="53" width="0.3359%" height="15" fill="rgb(207,160,47)"/><text x="15.7049%" y="63.50"></text></g><g><title>trait_impls_of (145,161 samples, 0.28%)</title><rect x="15.5109%" y="37" width="0.2799%" height="15" fill="rgb(228,23,34)"/><text x="15.7609%" y="47.50"></text></g><g><title>thir_body (71,280 samples, 0.14%)</title><rect x="15.8231%" y="85" width="0.1375%" height="15" fill="rgb(218,30,26)"/><text x="16.0731%" y="95.50"></text></g><g><title>mir_const (748,417 samples, 1.44%)</title><rect x="14.5282%" y="133" width="1.4432%" height="15" fill="rgb(220,122,19)"/><text x="14.7782%" y="143.50"></text></g><g><title>unsafety_check_result (618,186 samples, 1.19%)</title><rect x="14.7794%" y="117" width="1.1921%" height="15" fill="rgb(250,228,42)"/><text x="15.0294%" y="127.50"></text></g><g><title>mir_built (554,784 samples, 1.07%)</title><rect x="14.9016%" y="101" width="1.0698%" height="15" fill="rgb(240,193,28)"/><text x="15.1516%" y="111.50"></text></g><g><title>mir_promoted (838,359 samples, 1.62%)</title><rect x="14.3664%" y="149" width="1.6166%" height="15" fill="rgb(216,20,37)"/><text x="14.6164%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (83,350 samples, 0.16%)</title><rect x="15.9831%" y="149" width="0.1607%" height="15" fill="rgb(206,188,39)"/><text x="16.2331%" y="159.50"></text></g><g><title>type_op_prove_predicate (92,231 samples, 0.18%)</title><rect x="16.1438%" y="149" width="0.1779%" height="15" fill="rgb(217,207,13)"/><text x="16.3938%" y="159.50"></text></g><g><title>MIR_borrow_checking (1,924,299 samples, 3.71%)</title><rect x="12.6167%" y="181" width="3.7107%" height="15" fill="rgb(231,73,38)"/><text x="12.8667%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (1,916,249 samples, 3.70%)</title><rect x="12.6323%" y="165" width="3.6951%" height="15" fill="rgb(225,20,46)"/><text x="12.8823%" y="175.50">mir_..</text></g><g><title>hir_module_items (66,471 samples, 0.13%)</title><rect x="16.3344%" y="181" width="0.1282%" height="15" fill="rgb(210,31,41)"/><text x="16.5844%" y="191.50"></text></g><g><title>should_inherit_track_caller (84,571 samples, 0.16%)</title><rect x="16.7500%" y="133" width="0.1631%" height="15" fill="rgb(221,200,47)"/><text x="17.0000%" y="143.50"></text></g><g><title>codegen_fn_attrs (189,553 samples, 0.37%)</title><rect x="16.5920%" y="149" width="0.3655%" height="15" fill="rgb(226,26,5)"/><text x="16.8420%" y="159.50"></text></g><g><title>check_mod_attrs (243,563 samples, 0.47%)</title><rect x="16.4882%" y="165" width="0.4697%" height="15" fill="rgb(249,33,26)"/><text x="16.7382%" y="175.50"></text></g><g><title>lookup_deprecation_entry (54,091 samples, 0.10%)</title><rect x="17.1224%" y="149" width="0.1043%" height="15" fill="rgb(235,183,28)"/><text x="17.3724%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (139,851 samples, 0.27%)</title><rect x="17.0360%" y="165" width="0.2697%" height="15" fill="rgb(221,5,38)"/><text x="17.2860%" y="175.50"></text></g><g><title>misc_checking_1 (473,994 samples, 0.91%)</title><rect x="16.4634%" y="181" width="0.9140%" height="15" fill="rgb(247,18,42)"/><text x="16.7134%" y="191.50"></text></g><g><title>misc_checking_2 (128,612 samples, 0.25%)</title><rect x="17.3774%" y="181" width="0.2480%" height="15" fill="rgb(241,131,45)"/><text x="17.6274%" y="191.50"></text></g><g><title>match_checking (80,421 samples, 0.16%)</title><rect x="17.4703%" y="165" width="0.1551%" height="15" fill="rgb(249,31,29)"/><text x="17.7203%" y="175.50"></text></g><g><title>check_match (77,311 samples, 0.15%)</title><rect x="17.4763%" y="149" width="0.1491%" height="15" fill="rgb(225,111,53)"/><text x="17.7263%" y="159.50"></text></g><g><title>death_checking (110,881 samples, 0.21%)</title><rect x="17.7217%" y="165" width="0.2138%" height="15" fill="rgb(238,160,17)"/><text x="17.9717%" y="175.50"></text></g><g><title>param_env (75,091 samples, 0.14%)</title><rect x="19.2939%" y="133" width="0.1448%" height="15" fill="rgb(214,148,48)"/><text x="19.5439%" y="143.50"></text></g><g><title>crate_lints (1,802,239 samples, 3.48%)</title><rect x="17.9385%" y="149" width="3.4753%" height="15" fill="rgb(232,36,49)"/><text x="18.1885%" y="159.50">cra..</text></g><g><title>type_of (1,024,241 samples, 1.98%)</title><rect x="19.4387%" y="133" width="1.9751%" height="15" fill="rgb(209,103,24)"/><text x="19.6887%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (761,508 samples, 1.47%)</title><rect x="19.9453%" y="117" width="1.4684%" height="15" fill="rgb(229,88,8)"/><text x="20.1953%" y="127.50"></text></g><g><title>lint_checking (1,876,980 samples, 3.62%)</title><rect x="17.9355%" y="165" width="3.6194%" height="15" fill="rgb(213,181,19)"/><text x="18.1855%" y="175.50">lint..</text></g><g><title>module_lints (73,221 samples, 0.14%)</title><rect x="21.4138%" y="149" width="0.1412%" height="15" fill="rgb(254,191,54)"/><text x="21.6638%" y="159.50"></text></g><g><title>lint_mod (70,881 samples, 0.14%)</title><rect x="21.4183%" y="133" width="0.1367%" height="15" fill="rgb(241,83,37)"/><text x="21.6683%" y="143.50"></text></g><g><title>privacy_access_levels (54,711 samples, 0.11%)</title><rect x="21.5549%" y="165" width="0.1055%" height="15" fill="rgb(233,36,39)"/><text x="21.8049%" y="175.50"></text></g><g><title>privacy_checking_modules (95,751 samples, 0.18%)</title><rect x="21.6604%" y="165" width="0.1846%" height="15" fill="rgb(226,3,54)"/><text x="21.9104%" y="175.50"></text></g><g><title>check_mod_privacy (94,611 samples, 0.18%)</title><rect x="21.6626%" y="149" width="0.1824%" height="15" fill="rgb(245,192,40)"/><text x="21.9126%" y="159.50"></text></g><g><title>misc_checking_3 (2,196,543 samples, 4.24%)</title><rect x="17.6254%" y="181" width="4.2356%" height="15" fill="rgb(238,167,29)"/><text x="17.8754%" y="191.50">misc_..</text></g><g><title>impl_parent (909,439 samples, 1.75%)</title><rect x="24.3988%" y="117" width="1.7537%" height="15" fill="rgb(232,182,51)"/><text x="24.6488%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (605,545 samples, 1.17%)</title><rect x="24.9848%" y="101" width="1.1677%" height="15" fill="rgb(231,60,39)"/><text x="25.2348%" y="111.50"></text></g><g><title>impl_trait_ref (3,089,045 samples, 5.96%)</title><rect x="26.1525%" y="117" width="5.9567%" height="15" fill="rgb(208,69,12)"/><text x="26.4025%" y="127.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,780,230 samples, 5.36%)</title><rect x="26.7480%" y="101" width="5.3612%" height="15" fill="rgb(235,93,37)"/><text x="26.9980%" y="111.50">metadat..</text></g><g><title>coherent_trait (5,561,966 samples, 10.73%)</title><rect x="21.9488%" y="149" width="10.7252%" height="15" fill="rgb(213,116,39)"/><text x="22.1988%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (5,554,676 samples, 10.71%)</title><rect x="21.9629%" y="133" width="10.7112%" height="15" fill="rgb(222,207,29)"/><text x="22.2129%" y="143.50">specialization_g..</text></g><g><title>trait_impls_of (291,623 samples, 0.56%)</title><rect x="32.1117%" y="117" width="0.5623%" height="15" fill="rgb(206,96,30)"/><text x="32.3617%" y="127.50"></text></g><g><title>implementations_of_trait (81,872 samples, 0.16%)</title><rect x="32.5162%" y="101" width="0.1579%" height="15" fill="rgb(218,138,4)"/><text x="32.7662%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (66,812 samples, 0.13%)</title><rect x="32.5452%" y="85" width="0.1288%" height="15" fill="rgb(250,191,14)"/><text x="32.7952%" y="95.50"></text></g><g><title>coherence_checking (5,612,947 samples, 10.82%)</title><rect x="21.9174%" y="165" width="10.8236%" height="15" fill="rgb(239,60,40)"/><text x="22.1674%" y="175.50">coherence_checki..</text></g><g><title>dropck_outlives (65,421 samples, 0.13%)</title><rect x="35.0672%" y="117" width="0.1262%" height="15" fill="rgb(206,27,48)"/><text x="35.3172%" y="127.50"></text></g><g><title>item_attrs (54,230 samples, 0.10%)</title><rect x="35.3712%" y="117" width="0.1046%" height="15" fill="rgb(225,35,8)"/><text x="35.6212%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (52,650 samples, 0.10%)</title><rect x="35.3743%" y="101" width="0.1015%" height="15" fill="rgb(250,213,24)"/><text x="35.6243%" y="111.50"></text></g><g><title>evaluate_obligation (66,681 samples, 0.13%)</title><rect x="35.6597%" y="101" width="0.1286%" height="15" fill="rgb(247,123,22)"/><text x="35.9097%" y="111.50"></text></g><g><title>object_safety_violations (161,701 samples, 0.31%)</title><rect x="35.5773%" y="117" width="0.3118%" height="15" fill="rgb(231,138,38)"/><text x="35.8273%" y="127.50"></text></g><g><title>explicit_predicates_of (84,460 samples, 0.16%)</title><rect x="35.9383%" y="85" width="0.1629%" height="15" fill="rgb(231,145,46)"/><text x="36.1883%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (80,180 samples, 0.15%)</title><rect x="35.9465%" y="69" width="0.1546%" height="15" fill="rgb(251,118,11)"/><text x="36.1965%" y="79.50"></text></g><g><title>predicates_of (109,130 samples, 0.21%)</title><rect x="35.9015%" y="117" width="0.2104%" height="15" fill="rgb(217,147,25)"/><text x="36.1515%" y="127.50"></text></g><g><title>predicates_defined_on (98,420 samples, 0.19%)</title><rect x="35.9221%" y="101" width="0.1898%" height="15" fill="rgb(247,81,37)"/><text x="36.1721%" y="111.50"></text></g><g><title>type_of (80,790 samples, 0.16%)</title><rect x="36.1568%" y="117" width="0.1558%" height="15" fill="rgb(209,12,38)"/><text x="36.4068%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (76,300 samples, 0.15%)</title><rect x="36.1655%" y="101" width="0.1471%" height="15" fill="rgb(227,1,9)"/><text x="36.4155%" y="111.50"></text></g><g><title>item_bodies_checking (1,852,028 samples, 3.57%)</title><rect x="32.7642%" y="165" width="3.5713%" height="15" fill="rgb(248,47,43)"/><text x="33.0142%" y="175.50">item..</text></g><g><title>typeck_item_bodies (1,850,488 samples, 3.57%)</title><rect x="32.7672%" y="149" width="3.5683%" height="15" fill="rgb(221,10,30)"/><text x="33.0172%" y="159.50">type..</text></g><g><title>typeck (1,842,918 samples, 3.55%)</title><rect x="32.7818%" y="133" width="3.5537%" height="15" fill="rgb(210,229,1)"/><text x="33.0318%" y="143.50">type..</text></g><g><title>impl_parent (59,950 samples, 0.12%)</title><rect x="36.7812%" y="85" width="0.1156%" height="15" fill="rgb(222,148,37)"/><text x="37.0312%" y="95.50"></text></g><g><title>impl_trait_ref (155,681 samples, 0.30%)</title><rect x="36.8968%" y="85" width="0.3002%" height="15" fill="rgb(234,67,33)"/><text x="37.1468%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (136,141 samples, 0.26%)</title><rect x="36.9345%" y="69" width="0.2625%" height="15" fill="rgb(247,98,35)"/><text x="37.1845%" y="79.50"></text></g><g><title>adt_destructor (343,053 samples, 0.66%)</title><rect x="36.6019%" y="133" width="0.6615%" height="15" fill="rgb(247,138,52)"/><text x="36.8519%" y="143.50"></text></g><g><title>coherent_trait (338,823 samples, 0.65%)</title><rect x="36.6101%" y="117" width="0.6534%" height="15" fill="rgb(213,79,30)"/><text x="36.8601%" y="127.50"></text></g><g><title>specialization_graph_of (337,173 samples, 0.65%)</title><rect x="36.6133%" y="101" width="0.6502%" height="15" fill="rgb(246,177,23)"/><text x="36.8633%" y="111.50"></text></g><g><title>item_types_checking (517,035 samples, 1.00%)</title><rect x="36.3355%" y="165" width="0.9970%" height="15" fill="rgb(230,62,27)"/><text x="36.5855%" y="175.50"></text></g><g><title>check_mod_item_types (514,895 samples, 0.99%)</title><rect x="36.3397%" y="149" width="0.9929%" height="15" fill="rgb(216,154,8)"/><text x="36.5897%" y="159.50"></text></g><g><title>fn_sig (93,441 samples, 0.18%)</title><rect x="37.4804%" y="133" width="0.1802%" height="15" fill="rgb(244,35,45)"/><text x="37.7304%" y="143.50"></text></g><g><title>associated_items (58,040 samples, 0.11%)</title><rect x="37.9731%" y="85" width="0.1119%" height="15" fill="rgb(251,115,12)"/><text x="38.2231%" y="95.50"></text></g><g><title>named_region_map (212,383 samples, 0.41%)</title><rect x="37.7392%" y="117" width="0.4095%" height="15" fill="rgb(240,54,50)"/><text x="37.9892%" y="127.50"></text></g><g><title>resolve_lifetimes (200,663 samples, 0.39%)</title><rect x="37.7618%" y="101" width="0.3869%" height="15" fill="rgb(233,84,52)"/><text x="38.0118%" y="111.50"></text></g><g><title>generics_of (259,533 samples, 0.50%)</title><rect x="37.6606%" y="133" width="0.5005%" height="15" fill="rgb(207,117,47)"/><text x="37.9106%" y="143.50"></text></g><g><title>explicit_predicates_of (87,741 samples, 0.17%)</title><rect x="38.2342%" y="101" width="0.1692%" height="15" fill="rgb(249,43,39)"/><text x="38.4842%" y="111.50"></text></g><g><title>predicates_of (156,191 samples, 0.30%)</title><rect x="38.1870%" y="133" width="0.3012%" height="15" fill="rgb(209,38,44)"/><text x="38.4370%" y="143.50"></text></g><g><title>predicates_defined_on (145,981 samples, 0.28%)</title><rect x="38.2067%" y="117" width="0.2815%" height="15" fill="rgb(236,212,23)"/><text x="38.4567%" y="127.50"></text></g><g><title>type_collecting (664,346 samples, 1.28%)</title><rect x="37.3350%" y="165" width="1.2811%" height="15" fill="rgb(242,79,21)"/><text x="37.5850%" y="175.50"></text></g><g><title>collect_mod_item_types (657,916 samples, 1.27%)</title><rect x="37.3474%" y="149" width="1.2687%" height="15" fill="rgb(211,96,35)"/><text x="37.5974%" y="159.50"></text></g><g><title>evaluate_obligation (60,151 samples, 0.12%)</title><rect x="38.9407%" y="133" width="0.1160%" height="15" fill="rgb(253,215,40)"/><text x="39.1907%" y="143.50"></text></g><g><title>check_impl_item_well_formed (266,471 samples, 0.51%)</title><rect x="38.6707%" y="149" width="0.5138%" height="15" fill="rgb(211,81,21)"/><text x="38.9207%" y="159.50"></text></g><g><title>param_env (154,411 samples, 0.30%)</title><rect x="39.6807%" y="133" width="0.2978%" height="15" fill="rgb(208,190,38)"/><text x="39.9307%" y="143.50"></text></g><g><title>check_item_well_formed (483,517 samples, 0.93%)</title><rect x="39.1845%" y="149" width="0.9324%" height="15" fill="rgb(235,213,38)"/><text x="39.4345%" y="159.50"></text></g><g><title>evaluate_obligation (109,291 samples, 0.21%)</title><rect x="40.5597%" y="133" width="0.2107%" height="15" fill="rgb(237,122,38)"/><text x="40.8097%" y="143.50"></text></g><g><title>implied_outlives_bounds (106,571 samples, 0.21%)</title><rect x="40.7704%" y="133" width="0.2055%" height="15" fill="rgb(244,218,35)"/><text x="41.0204%" y="143.50"></text></g><g><title>analysis (14,981,532 samples, 28.89%)</title><rect x="12.4353%" y="197" width="28.8892%" height="15" fill="rgb(240,68,47)"/><text x="12.6853%" y="207.50">analysis</text></g><g><title>type_check_crate (10,093,492 samples, 19.46%)</title><rect x="21.8610%" y="181" width="19.4635%" height="15" fill="rgb(210,16,53)"/><text x="22.1110%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,403,914 samples, 2.71%)</title><rect x="38.6173%" y="165" width="2.7072%" height="15" fill="rgb(235,124,12)"/><text x="38.8673%" y="175.50">wf..</text></g><g><title>check_trait_item_well_formed (626,256 samples, 1.21%)</title><rect x="40.1169%" y="149" width="1.2076%" height="15" fill="rgb(224,169,11)"/><text x="40.3669%" y="159.50"></text></g><g><title>trait_impls_of (100,300 samples, 0.19%)</title><rect x="41.1311%" y="133" width="0.1934%" height="15" fill="rgb(250,166,2)"/><text x="41.3811%" y="143.50"></text></g><g><title>layout_of (53,971 samples, 0.10%)</title><rect x="45.6206%" y="133" width="0.1041%" height="15" fill="rgb(242,216,29)"/><text x="45.8706%" y="143.50"></text></g><g><title>layout_of (88,071 samples, 0.17%)</title><rect x="45.5861%" y="149" width="0.1698%" height="15" fill="rgb(230,116,27)"/><text x="45.8361%" y="159.50"></text></g><g><title>fn_abi_of_instance (240,362 samples, 0.46%)</title><rect x="45.3811%" y="165" width="0.4635%" height="15" fill="rgb(228,99,48)"/><text x="45.6311%" y="175.50"></text></g><g><title>codegen_module (1,880,320 samples, 3.63%)</title><rect x="42.3912%" y="181" width="3.6259%" height="15" fill="rgb(253,11,6)"/><text x="42.6412%" y="191.50">code..</text></g><g><title>codegen_crate (2,511,486 samples, 4.84%)</title><rect x="41.3364%" y="197" width="4.8429%" height="15" fill="rgb(247,143,39)"/><text x="41.5864%" y="207.50">codege..</text></g><g><title>LLVM_module_codegen (9,372,914 samples, 18.07%)</title><rect x="46.2158%" y="181" width="18.0740%" height="15" fill="rgb(236,97,10)"/><text x="46.4658%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (9,102,401 samples, 17.55%)</title><rect x="46.7375%" y="165" width="17.5523%" height="15" fill="rgb(233,208,19)"/><text x="46.9875%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (9,797,158 samples, 18.89%)</title><rect x="46.1793%" y="197" width="18.8920%" height="15" fill="rgb(216,164,2)"/><text x="46.4293%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (405,324 samples, 0.78%)</title><rect x="64.2898%" y="181" width="0.7816%" height="15" fill="rgb(220,129,5)"/><text x="64.5398%" y="191.50"></text></g><g><title>crate_injection (56,860 samples, 0.11%)</title><rect x="65.4560%" y="181" width="0.1096%" height="15" fill="rgb(242,17,10)"/><text x="65.7060%" y="191.50"></text></g><g><title>macro_expand_crate (6,518,236 samples, 12.57%)</title><rect x="65.5656%" y="181" width="12.5692%" height="15" fill="rgb(242,107,0)"/><text x="65.8156%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (6,504,086 samples, 12.54%)</title><rect x="65.5929%" y="165" width="12.5420%" height="15" fill="rgb(251,28,31)"/><text x="65.8429%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,454,705 samples, 2.81%)</title><rect x="75.3297%" y="149" width="2.8051%" height="15" fill="rgb(233,223,10)"/><text x="75.5797%" y="159.50">me..</text></g><g><title>metadata_register_crate (485,405 samples, 0.94%)</title><rect x="77.1988%" y="133" width="0.9360%" height="15" fill="rgb(215,21,27)"/><text x="77.4488%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (75,130 samples, 0.14%)</title><rect x="78.1407%" y="181" width="0.1449%" height="15" fill="rgb(232,23,21)"/><text x="78.3907%" y="191.50"></text></g><g><title>late_resolve_crate (561,476 samples, 1.08%)</title><rect x="78.3610%" y="165" width="1.0827%" height="15" fill="rgb(244,5,23)"/><text x="78.6110%" y="175.50"></text></g><g><title>configure_and_expand (7,486,995 samples, 14.44%)</title><rect x="65.0714%" y="197" width="14.4373%" height="15" fill="rgb(226,81,46)"/><text x="65.3214%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (634,306 samples, 1.22%)</title><rect x="78.2856%" y="181" width="1.2231%" height="15" fill="rgb(247,70,30)"/><text x="78.5356%" y="191.50"></text></g><g><title>early_lint_checks (75,500 samples, 0.15%)</title><rect x="79.6119%" y="197" width="0.1456%" height="15" fill="rgb(212,68,19)"/><text x="79.8619%" y="207.50"></text></g><g><title>free_global_ctxt (2,647,027 samples, 5.10%)</title><rect x="79.7575%" y="197" width="5.1043%" height="15" fill="rgb(240,187,13)"/><text x="80.0075%" y="207.50">free_g..</text></g><g><title>crate_hash (70,251 samples, 0.14%)</title><rect x="85.3869%" y="181" width="0.1355%" height="15" fill="rgb(223,113,26)"/><text x="85.6369%" y="191.50"></text></g><g><title>is_reachable_non_generic (60,561 samples, 0.12%)</title><rect x="85.9082%" y="117" width="0.1168%" height="15" fill="rgb(206,192,2)"/><text x="86.1582%" y="127.50"></text></g><g><title>reachable_non_generics (58,491 samples, 0.11%)</title><rect x="85.9122%" y="101" width="0.1128%" height="15" fill="rgb(241,108,4)"/><text x="86.1622%" y="111.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (57,451 samples, 0.11%)</title><rect x="85.9142%" y="85" width="0.1108%" height="15" fill="rgb(247,173,49)"/><text x="86.1642%" y="95.50"></text></g><g><title>layout_of (98,931 samples, 0.19%)</title><rect x="86.5705%" y="101" width="0.1908%" height="15" fill="rgb(224,114,35)"/><text x="86.8205%" y="111.50"></text></g><g><title>optimized_mir (564,404 samples, 1.09%)</title><rect x="86.0792%" y="117" width="1.0884%" height="15" fill="rgb(245,159,27)"/><text x="86.3292%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (196,172 samples, 0.38%)</title><rect x="86.7893%" y="101" width="0.3783%" height="15" fill="rgb(245,172,44)"/><text x="87.0393%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (684,717 samples, 1.32%)</title><rect x="87.2158%" y="117" width="1.3204%" height="15" fill="rgb(236,23,11)"/><text x="87.4658%" y="127.50"></text></g><g><title>upstream_monomorphizations (679,597 samples, 1.31%)</title><rect x="87.2257%" y="101" width="1.3105%" height="15" fill="rgb(205,117,38)"/><text x="87.4757%" y="111.50"></text></g><g><title>exported_symbols (548,926 samples, 1.06%)</title><rect x="87.4777%" y="85" width="1.0585%" height="15" fill="rgb(237,72,25)"/><text x="87.7277%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (544,036 samples, 1.05%)</title><rect x="87.4871%" y="69" width="1.0491%" height="15" fill="rgb(244,70,9)"/><text x="87.7371%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (1,586,906 samples, 3.06%)</title><rect x="85.6968%" y="133" width="3.0601%" height="15" fill="rgb(217,125,39)"/><text x="85.9468%" y="143.50">mon..</text></g><g><title>vtable_entries (114,442 samples, 0.22%)</title><rect x="88.5362%" y="117" width="0.2207%" height="15" fill="rgb(235,36,10)"/><text x="88.7862%" y="127.50"></text></g><g><title>resolve_instance (77,491 samples, 0.15%)</title><rect x="88.6075%" y="101" width="0.1494%" height="15" fill="rgb(251,123,47)"/><text x="88.8575%" y="111.50"></text></g><g><title>monomorphization_collector (1,607,327 samples, 3.10%)</title><rect x="85.6928%" y="149" width="3.0994%" height="15" fill="rgb(221,13,13)"/><text x="85.9428%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (100,241 samples, 0.19%)</title><rect x="88.8095%" y="133" width="0.1933%" height="15" fill="rgb(238,131,9)"/><text x="89.0595%" y="143.50"></text></g><g><title>symbol_name (94,161 samples, 0.18%)</title><rect x="88.8212%" y="117" width="0.1816%" height="15" fill="rgb(211,50,8)"/><text x="89.0712%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (1,792,549 samples, 3.46%)</title><rect x="85.6286%" y="165" width="3.4566%" height="15" fill="rgb(245,182,24)"/><text x="85.8786%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (151,901 samples, 0.29%)</title><rect x="88.7923%" y="149" width="0.2929%" height="15" fill="rgb(242,14,37)"/><text x="89.0423%" y="159.50"></text></g><g><title>exported_symbols (1,841,129 samples, 3.55%)</title><rect x="85.5783%" y="181" width="3.5503%" height="15" fill="rgb(246,228,12)"/><text x="85.8283%" y="191.50">expo..</text></g><g><title>generate_crate_metadata (2,253,283 samples, 4.35%)</title><rect x="84.8618%" y="197" width="4.3450%" height="15" fill="rgb(213,55,15)"/><text x="85.1118%" y="207.50">gener..</text></g><g><title>hir_lowering (410,165 samples, 0.79%)</title><rect x="89.2069%" y="197" width="0.7909%" height="15" fill="rgb(209,9,3)"/><text x="89.4569%" y="207.50"></text></g><g><title>finish_ongoing_codegen (2,664,627 samples, 5.14%)</title><rect x="90.0306%" y="181" width="5.1383%" height="15" fill="rgb(230,59,30)"/><text x="90.2806%" y="191.50">finish..</text></g><g><title>link_binary_remove_temps (64,981 samples, 0.13%)</title><rect x="95.8625%" y="149" width="0.1253%" height="15" fill="rgb(209,121,21)"/><text x="96.1125%" y="159.50"></text></g><g><title>link_crate (1,079,491 samples, 2.08%)</title><rect x="95.1688%" y="181" width="2.0816%" height="15" fill="rgb(220,109,13)"/><text x="95.4188%" y="191.50">l..</text></g><g><title>link_binary (1,062,701 samples, 2.05%)</title><rect x="95.2012%" y="165" width="2.0492%" height="15" fill="rgb(232,18,1)"/><text x="95.4512%" y="175.50">l..</text></g><g><title>link_rlib (654,756 samples, 1.26%)</title><rect x="95.9878%" y="149" width="1.2626%" height="15" fill="rgb(215,41,42)"/><text x="96.2378%" y="159.50"></text></g><g><title>link (3,772,968 samples, 7.28%)</title><rect x="89.9978%" y="197" width="7.2755%" height="15" fill="rgb(224,123,36)"/><text x="90.2478%" y="207.50">link</text></g><g><title>parse_crate (439,295 samples, 0.85%)</title><rect x="97.2733%" y="197" width="0.8471%" height="15" fill="rgb(240,125,3)"/><text x="97.5233%" y="207.50"></text></g><g><title>prepare_outputs (188,392 samples, 0.36%)</title><rect x="98.1291%" y="197" width="0.3633%" height="15" fill="rgb(205,98,50)"/><text x="98.3791%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (431,534 samples, 0.83%)</title><rect x="98.4924%" y="197" width="0.8321%" height="15" fill="rgb(205,185,37)"/><text x="98.7424%" y="207.50"></text></g><g><title>setup_global_ctxt (82,081 samples, 0.16%)</title><rect x="99.3268%" y="197" width="0.1583%" height="15" fill="rgb(238,207,15)"/><text x="99.5768%" y="207.50"></text></g><g><title>all (51,858,632 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (51,858,632 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (267,022 samples, 0.51%)</title><rect x="99.4851%" y="197" width="0.5149%" height="15" fill="rgb(207,46,11)"/><text x="99.7351%" y="207.50"></text></g></svg></svg>