<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (197,658,063 samples, 11.18%)</title><rect x="0.0886%" y="197" width="11.1844%" height="15" fill="rgb(227,0,7)"/><text x="0.3386%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,291,424 samples, 0.13%)</title><rect x="18.5639%" y="85" width="0.1297%" height="15" fill="rgb(217,0,24)"/><text x="18.8139%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,895,490 samples, 0.11%)</title><rect x="18.7560%" y="69" width="0.1073%" height="15" fill="rgb(221,193,54)"/><text x="19.0060%" y="79.50"></text></g><g><title>resolve_instance (4,316,909 samples, 0.24%)</title><rect x="18.6953%" y="85" width="0.2443%" height="15" fill="rgb(248,212,6)"/><text x="18.9453%" y="95.50"></text></g><g><title>thir_body (7,609,380 samples, 0.43%)</title><rect x="18.9496%" y="85" width="0.4306%" height="15" fill="rgb(208,68,35)"/><text x="19.1996%" y="95.50"></text></g><g><title>mir_const (45,330,693 samples, 2.57%)</title><rect x="16.8247%" y="133" width="2.5650%" height="15" fill="rgb(232,128,0)"/><text x="17.0747%" y="143.50">mi..</text></g><g><title>unsafety_check_result (39,756,950 samples, 2.25%)</title><rect x="17.1400%" y="117" width="2.2496%" height="15" fill="rgb(207,160,47)"/><text x="17.3900%" y="127.50">u..</text></g><g><title>mir_built (35,614,688 samples, 2.02%)</title><rect x="17.3744%" y="101" width="2.0152%" height="15" fill="rgb(228,23,34)"/><text x="17.6244%" y="111.50">m..</text></g><g><title>mir_const (2,933,991 samples, 0.17%)</title><rect x="19.4554%" y="117" width="0.1660%" height="15" fill="rgb(218,30,26)"/><text x="19.7054%" y="127.50"></text></g><g><title>unsafety_check_result (2,172,091 samples, 0.12%)</title><rect x="19.4985%" y="101" width="0.1229%" height="15" fill="rgb(220,122,19)"/><text x="19.7485%" y="111.50"></text></g><g><title>mir_built (1,889,076 samples, 0.11%)</title><rect x="19.5146%" y="85" width="0.1069%" height="15" fill="rgb(250,228,42)"/><text x="19.7646%" y="95.50"></text></g><g><title>mir_promoted (55,907,020 samples, 3.16%)</title><rect x="16.4581%" y="149" width="3.1635%" height="15" fill="rgb(240,193,28)"/><text x="16.7081%" y="159.50">mir..</text></g><g><title>mir_const_qualif (4,098,448 samples, 0.23%)</title><rect x="19.3897%" y="133" width="0.2319%" height="15" fill="rgb(216,20,37)"/><text x="19.6397%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,196,125 samples, 0.18%)</title><rect x="19.6669%" y="149" width="0.1809%" height="15" fill="rgb(206,188,39)"/><text x="19.9169%" y="159.50"></text></g><g><title>normalize_projection_ty (2,170,205 samples, 0.12%)</title><rect x="19.7250%" y="133" width="0.1228%" height="15" fill="rgb(217,207,13)"/><text x="19.9750%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,462,403 samples, 0.48%)</title><rect x="19.9355%" y="149" width="0.4788%" height="15" fill="rgb(231,73,38)"/><text x="20.1855%" y="159.50"></text></g><g><title>MIR_borrow_checking (160,008,513 samples, 9.05%)</title><rect x="11.3607%" y="181" width="9.0540%" height="15" fill="rgb(225,20,46)"/><text x="11.6107%" y="191.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (158,805,333 samples, 8.99%)</title><rect x="11.4287%" y="165" width="8.9860%" height="15" fill="rgb(210,31,41)"/><text x="11.6787%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,009,401 samples, 0.11%)</title><rect x="20.4147%" y="181" width="0.1137%" height="15" fill="rgb(221,200,47)"/><text x="20.6647%" y="191.50"></text></g><g><title>check_mod_attrs (2,811,458 samples, 0.16%)</title><rect x="20.5958%" y="165" width="0.1591%" height="15" fill="rgb(226,26,5)"/><text x="20.8458%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (2,657,077 samples, 0.15%)</title><rect x="20.8256%" y="165" width="0.1503%" height="15" fill="rgb(249,33,26)"/><text x="21.0756%" y="175.50"></text></g><g><title>misc_checking_1 (6,903,559 samples, 0.39%)</title><rect x="20.5946%" y="181" width="0.3906%" height="15" fill="rgb(235,183,28)"/><text x="20.8446%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (3,072,911 samples, 0.17%)</title><rect x="20.9854%" y="165" width="0.1739%" height="15" fill="rgb(221,5,38)"/><text x="21.2354%" y="175.50"></text></g><g><title>check_mod_liveness (2,507,546 samples, 0.14%)</title><rect x="21.0174%" y="149" width="0.1419%" height="15" fill="rgb(247,18,42)"/><text x="21.2674%" y="159.50"></text></g><g><title>misc_checking_2 (6,724,868 samples, 0.38%)</title><rect x="20.9853%" y="181" width="0.3805%" height="15" fill="rgb(241,131,45)"/><text x="21.2353%" y="191.50"></text></g><g><title>match_checking (3,650,287 samples, 0.21%)</title><rect x="21.1592%" y="165" width="0.2066%" height="15" fill="rgb(249,31,29)"/><text x="21.4092%" y="175.50"></text></g><g><title>check_match (3,344,304 samples, 0.19%)</title><rect x="21.1766%" y="149" width="0.1892%" height="15" fill="rgb(225,111,53)"/><text x="21.4266%" y="159.50"></text></g><g><title>death_checking (2,124,281 samples, 0.12%)</title><rect x="21.4409%" y="165" width="0.1202%" height="15" fill="rgb(238,160,17)"/><text x="21.6909%" y="175.50"></text></g><g><title>crate_lints (5,068,471 samples, 0.29%)</title><rect x="21.5612%" y="149" width="0.2868%" height="15" fill="rgb(214,148,48)"/><text x="21.8112%" y="159.50"></text></g><g><title>lint_checking (7,849,609 samples, 0.44%)</title><rect x="21.5611%" y="165" width="0.4442%" height="15" fill="rgb(232,36,49)"/><text x="21.8111%" y="175.50"></text></g><g><title>module_lints (2,779,038 samples, 0.16%)</title><rect x="21.8480%" y="149" width="0.1573%" height="15" fill="rgb(209,103,24)"/><text x="22.0980%" y="159.50"></text></g><g><title>lint_mod (2,773,318 samples, 0.16%)</title><rect x="21.8483%" y="133" width="0.1569%" height="15" fill="rgb(229,88,8)"/><text x="22.0983%" y="143.50"></text></g><g><title>privacy_access_levels (2,186,512 samples, 0.12%)</title><rect x="22.0052%" y="165" width="0.1237%" height="15" fill="rgb(213,181,19)"/><text x="22.2552%" y="175.50"></text></g><g><title>privacy_checking_modules (5,544,596 samples, 0.31%)</title><rect x="22.1289%" y="165" width="0.3137%" height="15" fill="rgb(254,191,54)"/><text x="22.3789%" y="175.50"></text></g><g><title>check_mod_privacy (5,541,286 samples, 0.31%)</title><rect x="22.1291%" y="149" width="0.3136%" height="15" fill="rgb(241,83,37)"/><text x="22.3791%" y="159.50"></text></g><g><title>misc_checking_3 (19,077,442 samples, 1.08%)</title><rect x="21.3658%" y="181" width="1.0795%" height="15" fill="rgb(233,36,39)"/><text x="21.6158%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,939,960 samples, 0.22%)</title><rect x="23.8598%" y="117" width="0.2229%" height="15" fill="rgb(226,3,54)"/><text x="24.1098%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,920,049 samples, 0.22%)</title><rect x="23.8609%" y="101" width="0.2218%" height="15" fill="rgb(245,192,40)"/><text x="24.1109%" y="111.50"></text></g><g><title>eval_to_allocation_raw (3,912,208 samples, 0.22%)</title><rect x="23.8613%" y="85" width="0.2214%" height="15" fill="rgb(238,167,29)"/><text x="24.1113%" y="95.50"></text></g><g><title>typeck (2,521,225 samples, 0.14%)</title><rect x="23.9401%" y="69" width="0.1427%" height="15" fill="rgb(232,182,51)"/><text x="24.1901%" y="79.50"></text></g><g><title>impl_parent (5,826,200 samples, 0.33%)</title><rect x="24.1316%" y="117" width="0.3297%" height="15" fill="rgb(231,60,39)"/><text x="24.3816%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (3,094,278 samples, 0.18%)</title><rect x="24.2862%" y="101" width="0.1751%" height="15" fill="rgb(208,69,12)"/><text x="24.5362%" y="111.50"></text></g><g><title>impl_trait_ref (11,464,030 samples, 0.65%)</title><rect x="24.4613%" y="117" width="0.6487%" height="15" fill="rgb(235,93,37)"/><text x="24.7113%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,763,335 samples, 0.50%)</title><rect x="24.6142%" y="101" width="0.4959%" height="15" fill="rgb(213,116,39)"/><text x="24.8642%" y="111.50"></text></g><g><title>item_attrs (4,623,669 samples, 0.26%)</title><rect x="25.1100%" y="117" width="0.2616%" height="15" fill="rgb(222,207,29)"/><text x="25.3600%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (4,094,134 samples, 0.23%)</title><rect x="25.1400%" y="101" width="0.2317%" height="15" fill="rgb(206,96,30)"/><text x="25.3900%" y="111.50"></text></g><g><title>predicates_of (3,375,764 samples, 0.19%)</title><rect x="25.3717%" y="117" width="0.1910%" height="15" fill="rgb(218,138,4)"/><text x="25.6217%" y="127.50"></text></g><g><title>predicates_defined_on (2,018,678 samples, 0.11%)</title><rect x="25.4485%" y="101" width="0.1142%" height="15" fill="rgb(250,191,14)"/><text x="25.6985%" y="111.50"></text></g><g><title>trait_impls_of (2,737,012 samples, 0.15%)</title><rect x="25.5635%" y="117" width="0.1549%" height="15" fill="rgb(239,60,40)"/><text x="25.8135%" y="127.50"></text></g><g><title>coherent_trait (58,164,186 samples, 3.29%)</title><rect x="22.4756%" y="149" width="3.2912%" height="15" fill="rgb(206,27,48)"/><text x="22.7256%" y="159.50">coh..</text></g><g><title>specialization_graph_of (57,218,178 samples, 3.24%)</title><rect x="22.5292%" y="133" width="3.2377%" height="15" fill="rgb(225,35,8)"/><text x="22.7792%" y="143.50">spe..</text></g><g><title>coherence_checking (58,595,391 samples, 3.32%)</title><rect x="22.4727%" y="165" width="3.3156%" height="15" fill="rgb(250,213,24)"/><text x="22.7227%" y="175.50">coh..</text></g><g><title>associated_items (2,096,481 samples, 0.12%)</title><rect x="34.4823%" y="117" width="0.1186%" height="15" fill="rgb(247,123,22)"/><text x="34.7323%" y="127.50"></text></g><g><title>mir_borrowck (1,947,510 samples, 0.11%)</title><rect x="34.8137%" y="53" width="0.1102%" height="15" fill="rgb(231,138,38)"/><text x="35.0637%" y="63.50"></text></g><g><title>mir_for_ctfe (2,952,221 samples, 0.17%)</title><rect x="34.7578%" y="85" width="0.1671%" height="15" fill="rgb(231,145,46)"/><text x="35.0078%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,687,118 samples, 0.15%)</title><rect x="34.7728%" y="69" width="0.1520%" height="15" fill="rgb(251,118,11)"/><text x="35.0228%" y="79.50"></text></g><g><title>eval_to_allocation_raw (4,872,179 samples, 0.28%)</title><rect x="34.6661%" y="101" width="0.2757%" height="15" fill="rgb(217,147,25)"/><text x="34.9161%" y="111.50"></text></g><g><title>eval_to_const_value_raw (6,545,562 samples, 0.37%)</title><rect x="34.6611%" y="117" width="0.3704%" height="15" fill="rgb(247,81,37)"/><text x="34.9111%" y="127.50"></text></g><g><title>specializes (1,929,018 samples, 0.11%)</title><rect x="36.0308%" y="101" width="0.1092%" height="15" fill="rgb(209,12,38)"/><text x="36.2808%" y="111.50"></text></g><g><title>evaluate_obligation (19,824,192 samples, 1.12%)</title><rect x="35.0315%" y="117" width="1.1217%" height="15" fill="rgb(227,1,9)"/><text x="35.2815%" y="127.50"></text></g><g><title>typeck (14,790,959 samples, 0.84%)</title><rect x="36.6334%" y="117" width="0.8369%" height="15" fill="rgb(248,47,43)"/><text x="36.8834%" y="127.50"></text></g><g><title>item_bodies_checking (206,495,422 samples, 11.68%)</title><rect x="25.8026%" y="165" width="11.6845%" height="15" fill="rgb(221,10,30)"/><text x="26.0526%" y="175.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (206,492,662 samples, 11.68%)</title><rect x="25.8028%" y="149" width="11.6843%" height="15" fill="rgb(210,229,1)"/><text x="26.0528%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (205,602,562 samples, 11.63%)</title><rect x="25.8531%" y="133" width="11.6340%" height="15" fill="rgb(222,148,37)"/><text x="26.1031%" y="143.50">typeck</text></g><g><title>evaluate_obligation (4,240,802 samples, 0.24%)</title><rect x="38.3365%" y="117" width="0.2400%" height="15" fill="rgb(234,67,33)"/><text x="38.5865%" y="127.50"></text></g><g><title>typeck (5,556,545 samples, 0.31%)</title><rect x="38.2721%" y="133" width="0.3144%" height="15" fill="rgb(247,98,35)"/><text x="38.5221%" y="143.50"></text></g><g><title>item_types_checking (19,430,466 samples, 1.10%)</title><rect x="37.4871%" y="165" width="1.0995%" height="15" fill="rgb(247,138,52)"/><text x="37.7371%" y="175.50"></text></g><g><title>check_mod_item_types (19,426,976 samples, 1.10%)</title><rect x="37.4873%" y="149" width="1.0993%" height="15" fill="rgb(213,79,30)"/><text x="37.7373%" y="159.50"></text></g><g><title>fn_sig (2,089,197 samples, 0.12%)</title><rect x="38.6844%" y="133" width="0.1182%" height="15" fill="rgb(246,177,23)"/><text x="38.9344%" y="143.50"></text></g><g><title>generics_of (3,542,055 samples, 0.20%)</title><rect x="38.8026%" y="133" width="0.2004%" height="15" fill="rgb(230,62,27)"/><text x="39.0526%" y="143.50"></text></g><g><title>predicates_of (2,188,072 samples, 0.12%)</title><rect x="39.0355%" y="133" width="0.1238%" height="15" fill="rgb(216,154,8)"/><text x="39.2855%" y="143.50"></text></g><g><title>predicates_defined_on (1,838,819 samples, 0.10%)</title><rect x="39.0553%" y="117" width="0.1040%" height="15" fill="rgb(244,35,45)"/><text x="39.3053%" y="127.50"></text></g><g><title>type_collecting (10,819,950 samples, 0.61%)</title><rect x="38.5868%" y="165" width="0.6122%" height="15" fill="rgb(251,115,12)"/><text x="38.8368%" y="175.50"></text></g><g><title>collect_mod_item_types (10,810,650 samples, 0.61%)</title><rect x="38.5873%" y="149" width="0.6117%" height="15" fill="rgb(240,54,50)"/><text x="38.8373%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,140,130 samples, 0.12%)</title><rect x="39.9730%" y="133" width="0.1211%" height="15" fill="rgb(233,84,52)"/><text x="40.2230%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,119,290 samples, 0.12%)</title><rect x="39.9742%" y="117" width="0.1199%" height="15" fill="rgb(207,117,47)"/><text x="40.2242%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,101,670 samples, 0.12%)</title><rect x="39.9752%" y="101" width="0.1189%" height="15" fill="rgb(249,43,39)"/><text x="40.2252%" y="111.50"></text></g><g><title>param_env (2,504,981 samples, 0.14%)</title><rect x="40.2035%" y="133" width="0.1417%" height="15" fill="rgb(209,38,44)"/><text x="40.4535%" y="143.50"></text></g><g><title>region_scope_tree (3,074,552 samples, 0.17%)</title><rect x="40.3528%" y="133" width="0.1740%" height="15" fill="rgb(236,212,23)"/><text x="40.6028%" y="143.50"></text></g><g><title>check_impl_item_well_formed (22,228,332 samples, 1.26%)</title><rect x="39.2850%" y="149" width="1.2578%" height="15" fill="rgb(242,79,21)"/><text x="39.5350%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,507,226 samples, 0.14%)</title><rect x="41.1782%" y="133" width="0.1419%" height="15" fill="rgb(211,96,35)"/><text x="41.4282%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,502,326 samples, 0.14%)</title><rect x="41.1785%" y="117" width="0.1416%" height="15" fill="rgb(253,215,40)"/><text x="41.4285%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,499,455 samples, 0.14%)</title><rect x="41.1787%" y="101" width="0.1414%" height="15" fill="rgb(211,81,21)"/><text x="41.4287%" y="111.50"></text></g><g><title>evaluate_obligation (2,219,374 samples, 0.13%)</title><rect x="41.3201%" y="133" width="0.1256%" height="15" fill="rgb(208,190,38)"/><text x="41.5701%" y="143.50"></text></g><g><title>check_item_well_formed (18,406,131 samples, 1.04%)</title><rect x="40.5428%" y="149" width="1.0415%" height="15" fill="rgb(235,213,38)"/><text x="40.7928%" y="159.50"></text></g><g><title>analysis (535,951,794 samples, 30.33%)</title><rect x="11.2730%" y="197" width="30.3267%" height="15" fill="rgb(237,122,38)"/><text x="11.5230%" y="207.50">analysis</text></g><g><title>type_check_crate (338,507,854 samples, 19.15%)</title><rect x="22.4453%" y="181" width="19.1544%" height="15" fill="rgb(244,218,35)"/><text x="22.6953%" y="191.50">type_check_crate</text></g><g><title>wf_checking (42,363,697 samples, 2.40%)</title><rect x="39.2025%" y="165" width="2.3971%" height="15" fill="rgb(240,68,47)"/><text x="39.4525%" y="175.50">wf..</text></g><g><title>param_env (2,510,617 samples, 0.14%)</title><rect x="46.3875%" y="149" width="0.1421%" height="15" fill="rgb(210,16,53)"/><text x="46.6375%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,100,639 samples, 0.12%)</title><rect x="46.5296%" y="149" width="0.1189%" height="15" fill="rgb(235,124,12)"/><text x="46.7796%" y="159.50"></text></g><g><title>fn_abi_of_instance (9,861,525 samples, 0.56%)</title><rect x="46.0951%" y="165" width="0.5580%" height="15" fill="rgb(224,169,11)"/><text x="46.3451%" y="175.50"></text></g><g><title>codegen_module (88,801,894 samples, 5.02%)</title><rect x="41.7645%" y="181" width="5.0248%" height="15" fill="rgb(250,166,2)"/><text x="42.0145%" y="191.50">codege..</text></g><g><title>codegen_crate (91,859,556 samples, 5.20%)</title><rect x="41.6002%" y="197" width="5.1978%" height="15" fill="rgb(242,216,29)"/><text x="41.8502%" y="207.50">codege..</text></g><g><title>LLVM_module_codegen (555,337,281 samples, 31.42%)</title><rect x="46.8117%" y="181" width="31.4236%" height="15" fill="rgb(230,116,27)"/><text x="47.0617%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (541,779,522 samples, 30.66%)</title><rect x="47.5789%" y="165" width="30.6564%" height="15" fill="rgb(228,99,48)"/><text x="47.8289%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (588,946,878 samples, 33.33%)</title><rect x="46.7980%" y="197" width="33.3254%" height="15" fill="rgb(253,11,6)"/><text x="47.0480%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (33,368,267 samples, 1.89%)</title><rect x="78.2353%" y="181" width="1.8881%" height="15" fill="rgb(247,143,39)"/><text x="78.4853%" y="191.50">L..</text></g><g><title>metadata_load_macro (3,256,401 samples, 0.18%)</title><rect x="83.3688%" y="149" width="0.1843%" height="15" fill="rgb(236,97,10)"/><text x="83.6188%" y="159.50"></text></g><g><title>metadata_register_crate (27,056,272 samples, 1.53%)</title><rect x="83.5530%" y="149" width="1.5310%" height="15" fill="rgb(233,208,19)"/><text x="83.8030%" y="159.50"></text></g><g><title>metadata_register_crate (24,132,643 samples, 1.37%)</title><rect x="83.7184%" y="133" width="1.3655%" height="15" fill="rgb(216,164,2)"/><text x="83.9684%" y="143.50"></text></g><g><title>metadata_register_crate (22,501,298 samples, 1.27%)</title><rect x="83.8108%" y="117" width="1.2732%" height="15" fill="rgb(220,129,5)"/><text x="84.0608%" y="127.50"></text></g><g><title>metadata_register_crate (20,744,381 samples, 1.17%)</title><rect x="83.9102%" y="101" width="1.1738%" height="15" fill="rgb(242,17,10)"/><text x="84.1602%" y="111.50"></text></g><g><title>macro_expand_crate (86,751,625 samples, 4.91%)</title><rect x="80.1900%" y="181" width="4.9088%" height="15" fill="rgb(242,107,0)"/><text x="80.4400%" y="191.50">macro_..</text></g><g><title>expand_crate (86,737,685 samples, 4.91%)</title><rect x="80.1908%" y="165" width="4.9080%" height="15" fill="rgb(251,28,31)"/><text x="80.4408%" y="175.50">expand..</text></g><g><title>late_resolve_crate (8,309,035 samples, 0.47%)</title><rect x="85.1415%" y="165" width="0.4702%" height="15" fill="rgb(233,223,10)"/><text x="85.3915%" y="175.50"></text></g><g><title>configure_and_expand (97,647,995 samples, 5.53%)</title><rect x="80.1234%" y="197" width="5.5254%" height="15" fill="rgb(215,21,27)"/><text x="80.3734%" y="207.50">configu..</text></g><g><title>resolve_crate (9,663,198 samples, 0.55%)</title><rect x="85.1020%" y="181" width="0.5468%" height="15" fill="rgb(232,23,21)"/><text x="85.3520%" y="191.50"></text></g><g><title>early_lint_checks (2,529,705 samples, 0.14%)</title><rect x="85.7171%" y="197" width="0.1431%" height="15" fill="rgb(244,5,23)"/><text x="85.9671%" y="207.50"></text></g><g><title>free_global_ctxt (13,829,450 samples, 0.78%)</title><rect x="85.8602%" y="197" width="0.7825%" height="15" fill="rgb(226,81,46)"/><text x="86.1102%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,844,387 samples, 0.78%)</title><rect x="88.3291%" y="101" width="0.7834%" height="15" fill="rgb(247,70,30)"/><text x="88.5791%" y="111.50"></text></g><g><title>promoted_mir (2,379,492 samples, 0.13%)</title><rect x="89.3529%" y="37" width="0.1346%" height="15" fill="rgb(212,68,19)"/><text x="89.6029%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,576,667 samples, 0.32%)</title><rect x="89.1727%" y="85" width="0.3156%" height="15" fill="rgb(240,187,13)"/><text x="89.4227%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,440,327 samples, 0.31%)</title><rect x="89.1804%" y="69" width="0.3078%" height="15" fill="rgb(223,113,26)"/><text x="89.4304%" y="79.50"></text></g><g><title>eval_to_allocation_raw (5,178,834 samples, 0.29%)</title><rect x="89.1952%" y="53" width="0.2930%" height="15" fill="rgb(206,192,2)"/><text x="89.4452%" y="63.50"></text></g><g><title>optimized_mir (36,537,906 samples, 2.07%)</title><rect x="87.4298%" y="117" width="2.0675%" height="15" fill="rgb(241,108,4)"/><text x="87.6798%" y="127.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,433,134 samples, 0.36%)</title><rect x="89.1333%" y="101" width="0.3640%" height="15" fill="rgb(247,173,49)"/><text x="89.3833%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,334,262 samples, 0.25%)</title><rect x="89.5663%" y="101" width="0.2453%" height="15" fill="rgb(224,114,35)"/><text x="89.8163%" y="111.50"></text></g><g><title>resolve_instance (7,007,093 samples, 0.40%)</title><rect x="89.4973%" y="117" width="0.3965%" height="15" fill="rgb(245,159,27)"/><text x="89.7473%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (50,902,163 samples, 2.88%)</title><rect x="87.1411%" y="133" width="2.8803%" height="15" fill="rgb(245,172,44)"/><text x="87.3911%" y="143.50">mo..</text></g><g><title>monomorphization_collector (51,315,947 samples, 2.90%)</title><rect x="87.1409%" y="149" width="2.9037%" height="15" fill="rgb(236,23,11)"/><text x="87.3909%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,495,576 samples, 0.14%)</title><rect x="90.0449%" y="133" width="0.1412%" height="15" fill="rgb(205,117,38)"/><text x="90.2949%" y="143.50"></text></g><g><title>symbol_name (2,231,622 samples, 0.13%)</title><rect x="90.0598%" y="117" width="0.1263%" height="15" fill="rgb(237,72,25)"/><text x="90.3098%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (54,944,224 samples, 3.11%)</title><rect x="87.1387%" y="165" width="3.1090%" height="15" fill="rgb(244,70,9)"/><text x="87.3887%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,589,267 samples, 0.20%)</title><rect x="90.0446%" y="149" width="0.2031%" height="15" fill="rgb(217,125,39)"/><text x="90.2946%" y="159.50"></text></g><g><title>exported_symbols (55,931,573 samples, 3.16%)</title><rect x="87.1307%" y="181" width="3.1649%" height="15" fill="rgb(235,36,10)"/><text x="87.3807%" y="191.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (10,731,628 samples, 0.61%)</title><rect x="91.0535%" y="165" width="0.6072%" height="15" fill="rgb(251,123,47)"/><text x="91.3035%" y="175.50"></text></g><g><title>optimized_mir (24,112,155 samples, 1.36%)</title><rect x="90.3327%" y="181" width="1.3644%" height="15" fill="rgb(221,13,13)"/><text x="90.5827%" y="191.50"></text></g><g><title>generate_crate_metadata (89,856,106 samples, 5.08%)</title><rect x="86.6427%" y="197" width="5.0845%" height="15" fill="rgb(238,131,9)"/><text x="86.8927%" y="207.50">genera..</text></g><g><title>hir_lowering (20,005,621 samples, 1.13%)</title><rect x="91.7272%" y="197" width="1.1320%" height="15" fill="rgb(211,50,8)"/><text x="91.9772%" y="207.50"></text></g><g><title>finish_ongoing_codegen (115,821,738 samples, 6.55%)</title><rect x="92.8601%" y="181" width="6.5537%" height="15" fill="rgb(245,182,24)"/><text x="93.1101%" y="191.50">finish_on..</text></g><g><title>link_crate (3,624,947 samples, 0.21%)</title><rect x="99.4138%" y="181" width="0.2051%" height="15" fill="rgb(242,14,37)"/><text x="99.6638%" y="191.50"></text></g><g><title>link_binary (3,516,736 samples, 0.20%)</title><rect x="99.4199%" y="165" width="0.1990%" height="15" fill="rgb(246,228,12)"/><text x="99.6699%" y="175.50"></text></g><g><title>link_rlib (2,748,378 samples, 0.16%)</title><rect x="99.4634%" y="149" width="0.1555%" height="15" fill="rgb(213,55,15)"/><text x="99.7134%" y="159.50"></text></g><g><title>link (119,471,905 samples, 6.76%)</title><rect x="92.8592%" y="197" width="6.7603%" height="15" fill="rgb(209,9,3)"/><text x="93.1092%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (5,367,074 samples, 0.30%)</title><rect x="99.6505%" y="197" width="0.3037%" height="15" fill="rgb(230,59,30)"/><text x="99.9005%" y="207.50"></text></g><g><title>all (1,767,262,591 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,767,262,591 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>