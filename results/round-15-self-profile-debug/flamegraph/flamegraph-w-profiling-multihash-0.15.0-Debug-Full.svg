<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (121,822,965 samples, 9.70%)</title><rect x="0.0713%" y="181" width="9.7005%" height="15" fill="rgb(227,0,7)"/><text x="0.3213%" y="191.50">LLVM_passes</text></g><g><title>implied_outlives_bounds (1,280,268 samples, 0.10%)</title><rect x="12.4291%" y="133" width="0.1019%" height="15" fill="rgb(217,0,24)"/><text x="12.6791%" y="143.50"></text></g><g><title>is_copy_raw (4,966,384 samples, 0.40%)</title><rect x="13.8301%" y="53" width="0.3955%" height="15" fill="rgb(221,193,54)"/><text x="14.0801%" y="63.50"></text></g><g><title>evaluate_obligation (4,521,758 samples, 0.36%)</title><rect x="13.8655%" y="37" width="0.3601%" height="15" fill="rgb(248,212,6)"/><text x="14.1155%" y="47.50"></text></g><g><title>needs_drop_raw (6,115,923 samples, 0.49%)</title><rect x="13.7483%" y="69" width="0.4870%" height="15" fill="rgb(208,68,35)"/><text x="13.9983%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,761,738 samples, 0.14%)</title><rect x="14.2951%" y="53" width="0.1403%" height="15" fill="rgb(232,128,0)"/><text x="14.5451%" y="63.50"></text></g><g><title>resolve_instance (3,349,442 samples, 0.27%)</title><rect x="14.2381%" y="69" width="0.2667%" height="15" fill="rgb(207,160,47)"/><text x="14.4881%" y="79.50"></text></g><g><title>thir_body (2,700,220 samples, 0.22%)</title><rect x="14.5118%" y="69" width="0.2150%" height="15" fill="rgb(228,23,34)"/><text x="14.7618%" y="79.50"></text></g><g><title>mir_const (24,894,241 samples, 1.98%)</title><rect x="12.7495%" y="117" width="1.9823%" height="15" fill="rgb(218,30,26)"/><text x="12.9995%" y="127.50">m..</text></g><g><title>unsafety_check_result (22,253,968 samples, 1.77%)</title><rect x="12.9597%" y="101" width="1.7720%" height="15" fill="rgb(220,122,19)"/><text x="13.2097%" y="111.50">u..</text></g><g><title>mir_built (20,484,822 samples, 1.63%)</title><rect x="13.1006%" y="85" width="1.6312%" height="15" fill="rgb(250,228,42)"/><text x="13.3506%" y="95.50"></text></g><g><title>mir_promoted (27,386,314 samples, 2.18%)</title><rect x="12.5635%" y="133" width="2.1807%" height="15" fill="rgb(240,193,28)"/><text x="12.8135%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (2,188,125 samples, 0.17%)</title><rect x="14.7442%" y="133" width="0.1742%" height="15" fill="rgb(216,20,37)"/><text x="14.9942%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,393,439 samples, 0.11%)</title><rect x="14.9185%" y="133" width="0.1110%" height="15" fill="rgb(206,188,39)"/><text x="15.1685%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,864,372 samples, 0.47%)</title><rect x="15.0987%" y="133" width="0.4670%" height="15" fill="rgb(217,207,13)"/><text x="15.3487%" y="143.50"></text></g><g><title>MIR_borrow_checking (72,011,440 samples, 5.73%)</title><rect x="9.8326%" y="165" width="5.7341%" height="15" fill="rgb(231,73,38)"/><text x="10.0826%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (71,536,889 samples, 5.70%)</title><rect x="9.8704%" y="149" width="5.6963%" height="15" fill="rgb(225,20,46)"/><text x="10.1204%" y="159.50">mir_bor..</text></g><g><title>check_mod_attrs (1,414,894 samples, 0.11%)</title><rect x="15.6298%" y="149" width="0.1127%" height="15" fill="rgb(210,31,41)"/><text x="15.8798%" y="159.50"></text></g><g><title>misc_checking_1 (3,218,413 samples, 0.26%)</title><rect x="15.6266%" y="165" width="0.2563%" height="15" fill="rgb(221,200,47)"/><text x="15.8766%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,451,135 samples, 0.12%)</title><rect x="15.8830%" y="149" width="0.1156%" height="15" fill="rgb(226,26,5)"/><text x="16.1330%" y="159.50"></text></g><g><title>misc_checking_2 (2,971,490 samples, 0.24%)</title><rect x="15.8829%" y="165" width="0.2366%" height="15" fill="rgb(249,33,26)"/><text x="16.1329%" y="175.50"></text></g><g><title>match_checking (1,518,615 samples, 0.12%)</title><rect x="15.9986%" y="149" width="0.1209%" height="15" fill="rgb(235,183,28)"/><text x="16.2486%" y="159.50"></text></g><g><title>check_match (1,416,863 samples, 0.11%)</title><rect x="16.0067%" y="133" width="0.1128%" height="15" fill="rgb(221,5,38)"/><text x="16.2567%" y="143.50"></text></g><g><title>death_checking (1,481,755 samples, 0.12%)</title><rect x="16.1801%" y="149" width="0.1180%" height="15" fill="rgb(247,18,42)"/><text x="16.4301%" y="159.50"></text></g><g><title>crate_lints (3,555,536 samples, 0.28%)</title><rect x="16.2982%" y="133" width="0.2831%" height="15" fill="rgb(241,131,45)"/><text x="16.5482%" y="143.50"></text></g><g><title>lint_checking (4,862,759 samples, 0.39%)</title><rect x="16.2981%" y="149" width="0.3872%" height="15" fill="rgb(249,31,29)"/><text x="16.5481%" y="159.50"></text></g><g><title>module_lints (1,305,513 samples, 0.10%)</title><rect x="16.5813%" y="133" width="0.1040%" height="15" fill="rgb(225,111,53)"/><text x="16.8313%" y="143.50"></text></g><g><title>lint_mod (1,292,323 samples, 0.10%)</title><rect x="16.5824%" y="117" width="0.1029%" height="15" fill="rgb(238,160,17)"/><text x="16.8324%" y="127.50"></text></g><g><title>privacy_checking_modules (3,087,212 samples, 0.25%)</title><rect x="16.7806%" y="149" width="0.2458%" height="15" fill="rgb(214,148,48)"/><text x="17.0306%" y="159.50"></text></g><g><title>check_mod_privacy (3,077,312 samples, 0.25%)</title><rect x="16.7813%" y="133" width="0.2450%" height="15" fill="rgb(232,36,49)"/><text x="17.0313%" y="143.50"></text></g><g><title>misc_checking_3 (11,424,226 samples, 0.91%)</title><rect x="16.1195%" y="165" width="0.9097%" height="15" fill="rgb(209,103,24)"/><text x="16.3695%" y="175.50"></text></g><g><title>impl_parent (3,444,167 samples, 0.27%)</title><rect x="17.6258%" y="101" width="0.2743%" height="15" fill="rgb(229,88,8)"/><text x="17.8758%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,885,332 samples, 0.15%)</title><rect x="17.7499%" y="85" width="0.1501%" height="15" fill="rgb(213,181,19)"/><text x="17.9999%" y="95.50"></text></g><g><title>impl_trait_ref (6,894,189 samples, 0.55%)</title><rect x="17.9002%" y="101" width="0.5490%" height="15" fill="rgb(254,191,54)"/><text x="18.1502%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,334,614 samples, 0.42%)</title><rect x="18.0243%" y="85" width="0.4248%" height="15" fill="rgb(241,83,37)"/><text x="18.2743%" y="95.50"></text></g><g><title>trait_impls_of (1,350,971 samples, 0.11%)</title><rect x="18.4560%" y="101" width="0.1076%" height="15" fill="rgb(233,36,39)"/><text x="18.7060%" y="111.50"></text></g><g><title>coherent_trait (19,020,961 samples, 1.51%)</title><rect x="17.0491%" y="133" width="1.5146%" height="15" fill="rgb(226,3,54)"/><text x="17.2991%" y="143.50"></text></g><g><title>specialization_graph_of (18,269,684 samples, 1.45%)</title><rect x="17.1089%" y="117" width="1.4548%" height="15" fill="rgb(245,192,40)"/><text x="17.3589%" y="127.50"></text></g><g><title>coherence_checking (19,240,596 samples, 1.53%)</title><rect x="17.0468%" y="149" width="1.5321%" height="15" fill="rgb(238,167,29)"/><text x="17.2968%" y="159.50"></text></g><g><title>dropck_outlives (3,268,942 samples, 0.26%)</title><rect x="24.0348%" y="101" width="0.2603%" height="15" fill="rgb(232,182,51)"/><text x="24.2848%" y="111.50"></text></g><g><title>normalize_projection_ty (1,478,704 samples, 0.12%)</title><rect x="24.1773%" y="85" width="0.1177%" height="15" fill="rgb(231,60,39)"/><text x="24.4273%" y="95.50"></text></g><g><title>evaluate_obligation (7,220,927 samples, 0.57%)</title><rect x="24.3130%" y="101" width="0.5750%" height="15" fill="rgb(208,69,12)"/><text x="24.5630%" y="111.50"></text></g><g><title>method_autoderef_steps (1,367,987 samples, 0.11%)</title><rect x="24.9663%" y="101" width="0.1089%" height="15" fill="rgb(235,93,37)"/><text x="25.2163%" y="111.50"></text></g><g><title>item_bodies_checking (82,664,788 samples, 6.58%)</title><rect x="18.5913%" y="149" width="6.5824%" height="15" fill="rgb(213,116,39)"/><text x="18.8413%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (82,659,808 samples, 6.58%)</title><rect x="18.5917%" y="133" width="6.5820%" height="15" fill="rgb(222,207,29)"/><text x="18.8417%" y="143.50">typeck_it..</text></g><g><title>typeck (82,316,936 samples, 6.55%)</title><rect x="18.6190%" y="117" width="6.5547%" height="15" fill="rgb(206,96,30)"/><text x="18.8690%" y="127.50">typeck</text></g><g><title>evaluate_obligation (3,222,592 samples, 0.26%)</title><rect x="25.9208%" y="117" width="0.2566%" height="15" fill="rgb(218,138,4)"/><text x="26.1708%" y="127.50"></text></g><g><title>item_types_checking (13,032,953 samples, 1.04%)</title><rect x="25.1737%" y="149" width="1.0378%" height="15" fill="rgb(250,191,14)"/><text x="25.4237%" y="159.50"></text></g><g><title>check_mod_item_types (13,019,203 samples, 1.04%)</title><rect x="25.1748%" y="133" width="1.0367%" height="15" fill="rgb(239,60,40)"/><text x="25.4248%" y="143.50"></text></g><g><title>generics_of (1,616,270 samples, 0.13%)</title><rect x="26.3721%" y="117" width="0.1287%" height="15" fill="rgb(206,27,48)"/><text x="26.6221%" y="127.50"></text></g><g><title>explicit_predicates_of (2,002,143 samples, 0.16%)</title><rect x="26.6081%" y="85" width="0.1594%" height="15" fill="rgb(225,35,8)"/><text x="26.8581%" y="95.50"></text></g><g><title>predicates_of (3,253,428 samples, 0.26%)</title><rect x="26.5420%" y="117" width="0.2591%" height="15" fill="rgb(250,213,24)"/><text x="26.7920%" y="127.50"></text></g><g><title>predicates_defined_on (2,805,505 samples, 0.22%)</title><rect x="26.5777%" y="101" width="0.2234%" height="15" fill="rgb(247,123,22)"/><text x="26.8277%" y="111.50"></text></g><g><title>type_collecting (8,066,272 samples, 0.64%)</title><rect x="26.2121%" y="149" width="0.6423%" height="15" fill="rgb(231,138,38)"/><text x="26.4621%" y="159.50"></text></g><g><title>collect_mod_item_types (8,044,972 samples, 0.64%)</title><rect x="26.2138%" y="133" width="0.6406%" height="15" fill="rgb(231,145,46)"/><text x="26.4638%" y="143.50"></text></g><g><title>evaluate_obligation (3,460,113 samples, 0.28%)</title><rect x="27.8620%" y="117" width="0.2755%" height="15" fill="rgb(251,118,11)"/><text x="28.1120%" y="127.50"></text></g><g><title>param_env (2,745,547 samples, 0.22%)</title><rect x="28.2331%" y="117" width="0.2186%" height="15" fill="rgb(217,147,25)"/><text x="28.4831%" y="127.50"></text></g><g><title>check_impl_item_well_formed (20,411,999 samples, 1.63%)</title><rect x="26.9301%" y="133" width="1.6254%" height="15" fill="rgb(247,81,37)"/><text x="27.1801%" y="143.50"></text></g><g><title>evaluate_obligation (2,582,954 samples, 0.21%)</title><rect x="29.6822%" y="117" width="0.2057%" height="15" fill="rgb(209,12,38)"/><text x="29.9322%" y="127.50"></text></g><g><title>param_env (2,499,919 samples, 0.20%)</title><rect x="29.9651%" y="117" width="0.1991%" height="15" fill="rgb(227,1,9)"/><text x="30.2151%" y="127.50"></text></g><g><title>check_item_well_formed (20,862,721 samples, 1.66%)</title><rect x="28.5554%" y="133" width="1.6612%" height="15" fill="rgb(248,47,43)"/><text x="28.8054%" y="143.50"></text></g><g><title>analysis (258,890,557 samples, 20.61%)</title><rect x="9.7718%" y="181" width="20.6148%" height="15" fill="rgb(221,10,30)"/><text x="10.0218%" y="191.50">analysis</text></g><g><title>type_check_crate (167,749,012 samples, 13.36%)</title><rect x="17.0292%" y="165" width="13.3575%" height="15" fill="rgb(210,229,1)"/><text x="17.2792%" y="175.50">type_check_crate</text></g><g><title>wf_checking (44,342,209 samples, 3.53%)</title><rect x="26.8558%" y="149" width="3.5309%" height="15" fill="rgb(222,148,37)"/><text x="27.1058%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (2,134,321 samples, 0.17%)</title><rect x="30.2167%" y="133" width="0.1700%" height="15" fill="rgb(234,67,33)"/><text x="30.4667%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (4,881,149 samples, 0.39%)</title><rect x="37.2364%" y="149" width="0.3887%" height="15" fill="rgb(247,98,35)"/><text x="37.4864%" y="159.50"></text></g><g><title>param_env (3,547,867 samples, 0.28%)</title><rect x="38.2117%" y="133" width="0.2825%" height="15" fill="rgb(247,138,52)"/><text x="38.4617%" y="143.50"></text></g><g><title>normalize_projection_ty (1,501,563 samples, 0.12%)</title><rect x="38.5568%" y="117" width="0.1196%" height="15" fill="rgb(213,79,30)"/><text x="38.8068%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,293,516 samples, 0.18%)</title><rect x="38.4942%" y="133" width="0.1826%" height="15" fill="rgb(246,177,23)"/><text x="38.7442%" y="143.50"></text></g><g><title>fn_abi_of_instance (12,709,633 samples, 1.01%)</title><rect x="37.6728%" y="149" width="1.0120%" height="15" fill="rgb(230,62,27)"/><text x="37.9228%" y="159.50"></text></g><g><title>layout_of (1,625,600 samples, 0.13%)</title><rect x="38.7361%" y="149" width="0.1294%" height="15" fill="rgb(216,154,8)"/><text x="38.9861%" y="159.50"></text></g><g><title>symbol_name (1,437,651 samples, 0.11%)</title><rect x="38.8672%" y="149" width="0.1145%" height="15" fill="rgb(244,35,45)"/><text x="39.1172%" y="159.50"></text></g><g><title>codegen_module (106,684,431 samples, 8.50%)</title><rect x="30.5544%" y="165" width="8.4950%" height="15" fill="rgb(251,115,12)"/><text x="30.8044%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (108,915,765 samples, 8.67%)</title><rect x="30.3872%" y="181" width="8.6727%" height="15" fill="rgb(240,54,50)"/><text x="30.6372%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (557,602,139 samples, 44.40%)</title><rect x="39.0810%" y="165" width="44.4005%" height="15" fill="rgb(233,84,52)"/><text x="39.3310%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (539,096,828 samples, 42.93%)</title><rect x="40.5545%" y="149" width="42.9270%" height="15" fill="rgb(207,117,47)"/><text x="40.8045%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (588,629,483 samples, 46.87%)</title><rect x="39.0599%" y="181" width="46.8712%" height="15" fill="rgb(249,43,39)"/><text x="39.3099%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (30,761,770 samples, 2.45%)</title><rect x="83.4815%" y="165" width="2.4495%" height="15" fill="rgb(209,38,44)"/><text x="83.7315%" y="175.50">LL..</text></g><g><title>metadata_register_crate (6,988,731 samples, 0.56%)</title><rect x="89.1331%" y="133" width="0.5565%" height="15" fill="rgb(236,212,23)"/><text x="89.3831%" y="143.50"></text></g><g><title>macro_expand_crate (46,693,233 samples, 3.72%)</title><rect x="85.9876%" y="165" width="3.7181%" height="15" fill="rgb(242,79,21)"/><text x="86.2376%" y="175.50">macr..</text></g><g><title>expand_crate (46,682,373 samples, 3.72%)</title><rect x="85.9884%" y="149" width="3.7172%" height="15" fill="rgb(211,96,35)"/><text x="86.2384%" y="159.50">expa..</text></g><g><title>late_resolve_crate (6,017,071 samples, 0.48%)</title><rect x="89.7568%" y="149" width="0.4791%" height="15" fill="rgb(253,215,40)"/><text x="90.0068%" y="159.50"></text></g><g><title>configure_and_expand (54,364,421 samples, 4.33%)</title><rect x="85.9310%" y="181" width="4.3289%" height="15" fill="rgb(211,81,21)"/><text x="86.1810%" y="191.50">confi..</text></g><g><title>resolve_crate (6,910,820 samples, 0.55%)</title><rect x="89.7096%" y="165" width="0.5503%" height="15" fill="rgb(208,190,38)"/><text x="89.9596%" y="175.50"></text></g><g><title>free_global_ctxt (8,238,584 samples, 0.66%)</title><rect x="90.3794%" y="181" width="0.6560%" height="15" fill="rgb(235,213,38)"/><text x="90.6294%" y="191.50"></text></g><g><title>layout_of (1,805,397 samples, 0.14%)</title><rect x="92.2864%" y="85" width="0.1438%" height="15" fill="rgb(237,122,38)"/><text x="92.5364%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,167,024 samples, 0.25%)</title><rect x="92.5278%" y="85" width="0.2522%" height="15" fill="rgb(244,218,35)"/><text x="92.7778%" y="95.50"></text></g><g><title>optimized_mir (9,895,232 samples, 0.79%)</title><rect x="92.0197%" y="101" width="0.7879%" height="15" fill="rgb(240,68,47)"/><text x="92.2697%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,601,456 samples, 0.13%)</title><rect x="93.4190%" y="69" width="0.1275%" height="15" fill="rgb(210,16,53)"/><text x="93.6690%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,585,575 samples, 0.13%)</title><rect x="93.4203%" y="53" width="0.1263%" height="15" fill="rgb(235,124,12)"/><text x="93.6703%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,552,925 samples, 0.12%)</title><rect x="93.4229%" y="37" width="0.1237%" height="15" fill="rgb(224,169,11)"/><text x="93.6729%" y="47.50"></text></g><g><title>evaluate_obligation (3,066,229 samples, 0.24%)</title><rect x="93.5466%" y="69" width="0.2442%" height="15" fill="rgb(250,166,2)"/><text x="93.7966%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (11,175,644 samples, 0.89%)</title><rect x="92.9691%" y="85" width="0.8899%" height="15" fill="rgb(242,216,29)"/><text x="93.2191%" y="95.50"></text></g><g><title>is_copy_raw (1,669,887 samples, 0.13%)</title><rect x="93.9344%" y="69" width="0.1330%" height="15" fill="rgb(230,116,27)"/><text x="94.1844%" y="79.50"></text></g><g><title>evaluate_obligation (1,499,485 samples, 0.12%)</title><rect x="93.9480%" y="53" width="0.1194%" height="15" fill="rgb(228,99,48)"/><text x="94.1980%" y="63.50"></text></g><g><title>needs_drop_raw (2,019,180 samples, 0.16%)</title><rect x="93.9070%" y="85" width="0.1608%" height="15" fill="rgb(253,11,6)"/><text x="94.1570%" y="95.50"></text></g><g><title>resolve_instance (17,278,088 samples, 1.38%)</title><rect x="92.8076%" y="101" width="1.3758%" height="15" fill="rgb(247,143,39)"/><text x="93.0576%" y="111.50"></text></g><g><title>normalize_projection_ty (2,240,073 samples, 0.18%)</title><rect x="94.2381%" y="85" width="0.1784%" height="15" fill="rgb(236,97,10)"/><text x="94.4881%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,932,749 samples, 0.23%)</title><rect x="94.1834%" y="101" width="0.2335%" height="15" fill="rgb(233,208,19)"/><text x="94.4334%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,969,780 samples, 0.16%)</title><rect x="94.4170%" y="101" width="0.1568%" height="15" fill="rgb(216,164,2)"/><text x="94.6670%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (40,391,860 samples, 3.22%)</title><rect x="91.4827%" y="117" width="3.2163%" height="15" fill="rgb(220,129,5)"/><text x="91.7327%" y="127.50">mon..</text></g><g><title>monomorphization_collector (40,548,912 samples, 3.23%)</title><rect x="91.4822%" y="133" width="3.2288%" height="15" fill="rgb(242,17,10)"/><text x="91.7322%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,360,085 samples, 0.35%)</title><rect x="94.7121%" y="117" width="0.3472%" height="15" fill="rgb(242,107,0)"/><text x="94.9621%" y="127.50"></text></g><g><title>symbol_name (3,998,252 samples, 0.32%)</title><rect x="94.7409%" y="101" width="0.3184%" height="15" fill="rgb(251,28,31)"/><text x="94.9909%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (46,212,859 samples, 3.68%)</title><rect x="91.4784%" y="149" width="3.6798%" height="15" fill="rgb(233,223,10)"/><text x="91.7284%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,615,857 samples, 0.45%)</title><rect x="94.7111%" y="133" width="0.4472%" height="15" fill="rgb(215,21,27)"/><text x="94.9611%" y="143.50"></text></g><g><title>exported_symbols (46,774,425 samples, 3.72%)</title><rect x="91.4654%" y="165" width="3.7245%" height="15" fill="rgb(232,23,21)"/><text x="91.7154%" y="175.50">expo..</text></g><g><title>is_sized_raw (1,311,615 samples, 0.10%)</title><rect x="95.7653%" y="133" width="0.1044%" height="15" fill="rgb(244,5,23)"/><text x="96.0153%" y="143.50"></text></g><g><title>layout_of (1,288,143 samples, 0.10%)</title><rect x="95.8807%" y="117" width="0.1026%" height="15" fill="rgb(226,81,46)"/><text x="96.1307%" y="127.50"></text></g><g><title>layout_of (1,475,643 samples, 0.12%)</title><rect x="95.8697%" y="133" width="0.1175%" height="15" fill="rgb(247,70,30)"/><text x="96.1197%" y="143.50"></text></g><g><title>layout_of (3,661,395 samples, 0.29%)</title><rect x="95.7065%" y="149" width="0.2915%" height="15" fill="rgb(212,68,19)"/><text x="95.9565%" y="159.50"></text></g><g><title>is_copy_raw (1,699,366 samples, 0.14%)</title><rect x="96.5135%" y="117" width="0.1353%" height="15" fill="rgb(240,187,13)"/><text x="96.7635%" y="127.50"></text></g><g><title>evaluate_obligation (1,525,855 samples, 0.12%)</title><rect x="96.5273%" y="101" width="0.1215%" height="15" fill="rgb(223,113,26)"/><text x="96.7773%" y="111.50"></text></g><g><title>needs_drop_raw (1,904,447 samples, 0.15%)</title><rect x="96.5042%" y="133" width="0.1516%" height="15" fill="rgb(206,192,2)"/><text x="96.7542%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,346,693 samples, 0.66%)</title><rect x="95.9981%" y="149" width="0.6646%" height="15" fill="rgb(241,108,4)"/><text x="96.2481%" y="159.50"></text></g><g><title>optimized_mir (18,245,086 samples, 1.45%)</title><rect x="95.2258%" y="165" width="1.4528%" height="15" fill="rgb(247,173,49)"/><text x="95.4758%" y="175.50"></text></g><g><title>generate_crate_metadata (71,056,951 samples, 5.66%)</title><rect x="91.0354%" y="181" width="5.6581%" height="15" fill="rgb(224,114,35)"/><text x="91.2854%" y="191.50">generat..</text></g><g><title>hir_lowering (10,043,811 samples, 0.80%)</title><rect x="96.6935%" y="181" width="0.7998%" height="15" fill="rgb(245,159,27)"/><text x="96.9435%" y="191.50"></text></g><g><title>finish_ongoing_codegen (24,106,735 samples, 1.92%)</title><rect x="97.4946%" y="165" width="1.9196%" height="15" fill="rgb(245,172,44)"/><text x="97.7446%" y="175.50">f..</text></g><g><title>link_crate (3,961,200 samples, 0.32%)</title><rect x="99.4142%" y="165" width="0.3154%" height="15" fill="rgb(236,23,11)"/><text x="99.6642%" y="175.50"></text></g><g><title>link_binary (3,898,409 samples, 0.31%)</title><rect x="99.4192%" y="149" width="0.3104%" height="15" fill="rgb(205,117,38)"/><text x="99.6692%" y="159.50"></text></g><g><title>link_rlib (3,045,541 samples, 0.24%)</title><rect x="99.4871%" y="133" width="0.2425%" height="15" fill="rgb(237,72,25)"/><text x="99.7371%" y="143.50"></text></g><g><title>link (28,096,295 samples, 2.24%)</title><rect x="97.4933%" y="181" width="2.2372%" height="15" fill="rgb(244,70,9)"/><text x="97.7433%" y="191.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,251,682 samples, 0.18%)</title><rect x="99.7698%" y="181" width="0.1793%" height="15" fill="rgb(217,125,39)"/><text x="100.0198%" y="191.50"></text></g><g><title>all (1,255,846,030 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,255,846,030 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>