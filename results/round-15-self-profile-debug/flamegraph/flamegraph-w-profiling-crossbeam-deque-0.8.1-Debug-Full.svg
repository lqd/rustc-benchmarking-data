<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,411,345 samples, 3.45%)</title><rect x="0.3267%" y="213" width="3.4491%" height="15" fill="rgb(227,0,7)"/><text x="0.5767%" y="223.50">LLV..</text></g><g><title>param_env (473,747 samples, 0.22%)</title><rect x="13.4854%" y="133" width="0.2205%" height="15" fill="rgb(217,0,24)"/><text x="13.7354%" y="143.50"></text></g><g><title>item_attrs (497,653 samples, 0.23%)</title><rect x="14.2083%" y="101" width="0.2316%" height="15" fill="rgb(221,193,54)"/><text x="14.4583%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (482,493 samples, 0.22%)</title><rect x="14.2153%" y="85" width="0.2245%" height="15" fill="rgb(248,212,6)"/><text x="14.4653%" y="95.50"></text></g><g><title>codegen_fn_attrs (686,216 samples, 0.32%)</title><rect x="14.1319%" y="117" width="0.3193%" height="15" fill="rgb(208,68,35)"/><text x="14.3819%" y="127.50"></text></g><g><title>is_copy_raw (590,795 samples, 0.27%)</title><rect x="16.8186%" y="85" width="0.2749%" height="15" fill="rgb(232,128,0)"/><text x="17.0686%" y="95.50"></text></g><g><title>evaluate_obligation (480,875 samples, 0.22%)</title><rect x="16.8698%" y="69" width="0.2238%" height="15" fill="rgb(207,160,47)"/><text x="17.1198%" y="79.50"></text></g><g><title>needs_drop_raw (806,207 samples, 0.38%)</title><rect x="16.7201%" y="101" width="0.3752%" height="15" fill="rgb(228,23,34)"/><text x="16.9701%" y="111.50"></text></g><g><title>impl_parent (315,064 samples, 0.15%)</title><rect x="17.5703%" y="69" width="0.1466%" height="15" fill="rgb(218,30,26)"/><text x="17.8203%" y="79.50"></text></g><g><title>specialization_graph_of (1,700,698 samples, 0.79%)</title><rect x="17.2395%" y="85" width="0.7915%" height="15" fill="rgb(220,122,19)"/><text x="17.4895%" y="95.50"></text></g><g><title>impl_trait_ref (674,796 samples, 0.31%)</title><rect x="17.7169%" y="69" width="0.3140%" height="15" fill="rgb(250,228,42)"/><text x="17.9669%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (564,086 samples, 0.26%)</title><rect x="17.7684%" y="53" width="0.2625%" height="15" fill="rgb(240,193,28)"/><text x="18.0184%" y="63.50"></text></g><g><title>resolve_instance (2,109,201 samples, 0.98%)</title><rect x="17.0952%" y="101" width="0.9816%" height="15" fill="rgb(216,20,37)"/><text x="17.3452%" y="111.50"></text></g><g><title>thir_body (2,055,640 samples, 0.96%)</title><rect x="18.0877%" y="101" width="0.9566%" height="15" fill="rgb(206,188,39)"/><text x="18.3377%" y="111.50"></text></g><g><title>mir_const (13,215,819 samples, 6.15%)</title><rect x="12.9015%" y="149" width="6.1503%" height="15" fill="rgb(217,207,13)"/><text x="13.1515%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (11,487,552 samples, 5.35%)</title><rect x="13.7058%" y="133" width="5.3460%" height="15" fill="rgb(231,73,38)"/><text x="13.9558%" y="143.50">unsafet..</text></g><g><title>mir_built (9,885,728 samples, 4.60%)</title><rect x="14.4513%" y="117" width="4.6006%" height="15" fill="rgb(225,20,46)"/><text x="14.7013%" y="127.50">mir_b..</text></g><g><title>mir_promoted (14,663,315 samples, 6.82%)</title><rect x="12.3328%" y="165" width="6.8239%" height="15" fill="rgb(210,31,41)"/><text x="12.5828%" y="175.50">mir_promo..</text></g><g><title>mir_const_qualif (225,412 samples, 0.10%)</title><rect x="19.0519%" y="149" width="0.1049%" height="15" fill="rgb(221,200,47)"/><text x="19.3019%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (426,853 samples, 0.20%)</title><rect x="19.1568%" y="165" width="0.1986%" height="15" fill="rgb(226,26,5)"/><text x="19.4068%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (319,464 samples, 0.15%)</title><rect x="19.3554%" y="165" width="0.1487%" height="15" fill="rgb(249,33,26)"/><text x="19.6054%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,057,182 samples, 0.49%)</title><rect x="19.5132%" y="165" width="0.4920%" height="15" fill="rgb(235,183,28)"/><text x="19.7632%" y="175.50"></text></g><g><title>MIR_borrow_checking (34,493,267 samples, 16.05%)</title><rect x="3.9537%" y="197" width="16.0523%" height="15" fill="rgb(221,5,38)"/><text x="4.2037%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,357,716 samples, 15.99%)</title><rect x="4.0168%" y="181" width="15.9892%" height="15" fill="rgb(247,18,42)"/><text x="4.2668%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (280,833 samples, 0.13%)</title><rect x="20.3255%" y="165" width="0.1307%" height="15" fill="rgb(241,131,45)"/><text x="20.5755%" y="175.50"></text></g><g><title>check_mod_attrs (603,136 samples, 0.28%)</title><rect x="20.1755%" y="181" width="0.2807%" height="15" fill="rgb(249,31,29)"/><text x="20.4255%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (480,235 samples, 0.22%)</title><rect x="20.5676%" y="181" width="0.2235%" height="15" fill="rgb(225,111,53)"/><text x="20.8176%" y="191.50"></text></g><g><title>misc_checking_1 (1,384,153 samples, 0.64%)</title><rect x="20.1688%" y="197" width="0.6442%" height="15" fill="rgb(238,160,17)"/><text x="20.4188%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (729,538 samples, 0.34%)</title><rect x="20.8136%" y="181" width="0.3395%" height="15" fill="rgb(214,148,48)"/><text x="21.0636%" y="191.50"></text></g><g><title>check_mod_liveness (575,015 samples, 0.27%)</title><rect x="20.8855%" y="165" width="0.2676%" height="15" fill="rgb(232,36,49)"/><text x="21.1355%" y="175.50"></text></g><g><title>misc_checking_2 (1,373,394 samples, 0.64%)</title><rect x="20.8129%" y="197" width="0.6391%" height="15" fill="rgb(209,103,24)"/><text x="21.0629%" y="207.50"></text></g><g><title>match_checking (642,426 samples, 0.30%)</title><rect x="21.1531%" y="181" width="0.2990%" height="15" fill="rgb(229,88,8)"/><text x="21.4031%" y="191.50"></text></g><g><title>check_match (613,736 samples, 0.29%)</title><rect x="21.1665%" y="165" width="0.2856%" height="15" fill="rgb(213,181,19)"/><text x="21.4165%" y="175.50"></text></g><g><title>check_private_in_public (258,322 samples, 0.12%)</title><rect x="21.4558%" y="181" width="0.1202%" height="15" fill="rgb(254,191,54)"/><text x="21.7058%" y="191.50"></text></g><g><title>death_checking (618,446 samples, 0.29%)</title><rect x="21.5760%" y="181" width="0.2878%" height="15" fill="rgb(241,83,37)"/><text x="21.8260%" y="191.50"></text></g><g><title>crate_lints (2,864,058 samples, 1.33%)</title><rect x="21.8644%" y="165" width="1.3329%" height="15" fill="rgb(233,36,39)"/><text x="22.1144%" y="175.50"></text></g><g><title>type_of (1,361,854 samples, 0.63%)</title><rect x="22.5635%" y="149" width="0.6338%" height="15" fill="rgb(226,3,54)"/><text x="22.8135%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (897,810 samples, 0.42%)</title><rect x="22.7795%" y="133" width="0.4178%" height="15" fill="rgb(245,192,40)"/><text x="23.0295%" y="143.50"></text></g><g><title>lint_checking (3,590,346 samples, 1.67%)</title><rect x="21.8638%" y="181" width="1.6709%" height="15" fill="rgb(238,167,29)"/><text x="22.1138%" y="191.50"></text></g><g><title>module_lints (724,928 samples, 0.34%)</title><rect x="23.1973%" y="165" width="0.3374%" height="15" fill="rgb(232,182,51)"/><text x="23.4473%" y="175.50"></text></g><g><title>lint_mod (722,048 samples, 0.34%)</title><rect x="23.1986%" y="149" width="0.3360%" height="15" fill="rgb(231,60,39)"/><text x="23.4486%" y="159.50"></text></g><g><title>privacy_access_levels (280,603 samples, 0.13%)</title><rect x="23.5347%" y="181" width="0.1306%" height="15" fill="rgb(208,69,12)"/><text x="23.7847%" y="191.50"></text></g><g><title>privacy_checking_modules (1,156,821 samples, 0.54%)</title><rect x="23.6652%" y="181" width="0.5384%" height="15" fill="rgb(235,93,37)"/><text x="23.9152%" y="191.50"></text></g><g><title>check_mod_privacy (1,154,861 samples, 0.54%)</title><rect x="23.6661%" y="165" width="0.5374%" height="15" fill="rgb(213,116,39)"/><text x="23.9161%" y="175.50"></text></g><g><title>misc_checking_3 (5,924,879 samples, 2.76%)</title><rect x="21.4521%" y="197" width="2.7573%" height="15" fill="rgb(222,207,29)"/><text x="21.7021%" y="207.50">mi..</text></g><g><title>adt_destructor (382,733 samples, 0.18%)</title><rect x="24.2673%" y="149" width="0.1781%" height="15" fill="rgb(206,96,30)"/><text x="24.5173%" y="159.50"></text></g><g><title>coherent_trait (375,773 samples, 0.17%)</title><rect x="24.2705%" y="133" width="0.1749%" height="15" fill="rgb(218,138,4)"/><text x="24.5205%" y="143.50"></text></g><g><title>specialization_graph_of (373,813 samples, 0.17%)</title><rect x="24.2715%" y="117" width="0.1740%" height="15" fill="rgb(250,191,14)"/><text x="24.5215%" y="127.50"></text></g><g><title>impl_parent (2,362,673 samples, 1.10%)</title><rect x="26.3163%" y="133" width="1.0995%" height="15" fill="rgb(239,60,40)"/><text x="26.5663%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,380,286 samples, 0.64%)</title><rect x="26.7735%" y="117" width="0.6424%" height="15" fill="rgb(206,27,48)"/><text x="27.0235%" y="127.50"></text></g><g><title>impl_trait_ref (5,477,101 samples, 2.55%)</title><rect x="27.4158%" y="133" width="2.5489%" height="15" fill="rgb(225,35,8)"/><text x="27.6658%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,074,229 samples, 1.90%)</title><rect x="28.0687%" y="117" width="1.8960%" height="15" fill="rgb(250,213,24)"/><text x="28.3187%" y="127.50">m..</text></g><g><title>coherent_trait (13,085,951 samples, 6.09%)</title><rect x="24.2490%" y="165" width="6.0899%" height="15" fill="rgb(247,123,22)"/><text x="24.4990%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (12,415,972 samples, 5.78%)</title><rect x="24.5608%" y="149" width="5.7781%" height="15" fill="rgb(231,138,38)"/><text x="24.8108%" y="159.50">special..</text></g><g><title>trait_impls_of (802,375 samples, 0.37%)</title><rect x="29.9655%" y="133" width="0.3734%" height="15" fill="rgb(231,145,46)"/><text x="30.2155%" y="143.50"></text></g><g><title>implementations_of_trait (228,030 samples, 0.11%)</title><rect x="30.2328%" y="117" width="0.1061%" height="15" fill="rgb(251,118,11)"/><text x="30.4828%" y="127.50"></text></g><g><title>coherence_checking (13,159,722 samples, 6.12%)</title><rect x="24.2403%" y="181" width="6.1242%" height="15" fill="rgb(217,147,25)"/><text x="24.4903%" y="191.50">coherenc..</text></g><g><title>adt_def (447,116 samples, 0.21%)</title><rect x="47.2919%" y="117" width="0.2081%" height="15" fill="rgb(247,81,37)"/><text x="47.5419%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (445,616 samples, 0.21%)</title><rect x="47.2926%" y="101" width="0.2074%" height="15" fill="rgb(209,12,38)"/><text x="47.5426%" y="111.50"></text></g><g><title>item_attrs (429,805 samples, 0.20%)</title><rect x="47.3000%" y="85" width="0.2000%" height="15" fill="rgb(227,1,9)"/><text x="47.5500%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (428,095 samples, 0.20%)</title><rect x="47.3008%" y="69" width="0.1992%" height="15" fill="rgb(248,47,43)"/><text x="47.5508%" y="79.50"></text></g><g><title>adt_sized_constraint (467,318 samples, 0.22%)</title><rect x="47.2858%" y="133" width="0.2175%" height="15" fill="rgb(221,10,30)"/><text x="47.5358%" y="143.50"></text></g><g><title>associated_item (697,052 samples, 0.32%)</title><rect x="47.6360%" y="117" width="0.3244%" height="15" fill="rgb(210,229,1)"/><text x="47.8860%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (537,367 samples, 0.25%)</title><rect x="47.7103%" y="101" width="0.2501%" height="15" fill="rgb(222,148,37)"/><text x="47.9603%" y="111.50"></text></g><g><title>associated_items (1,031,016 samples, 0.48%)</title><rect x="47.5051%" y="133" width="0.4798%" height="15" fill="rgb(234,67,33)"/><text x="47.7551%" y="143.50"></text></g><g><title>adt_dtorck_constraint (261,733 samples, 0.12%)</title><rect x="48.1232%" y="117" width="0.1218%" height="15" fill="rgb(247,98,35)"/><text x="48.3732%" y="127.50"></text></g><g><title>dropck_outlives (451,194 samples, 0.21%)</title><rect x="48.0376%" y="133" width="0.2100%" height="15" fill="rgb(247,138,52)"/><text x="48.2876%" y="143.50"></text></g><g><title>generics_of (486,083 samples, 0.23%)</title><rect x="49.9228%" y="117" width="0.2262%" height="15" fill="rgb(213,79,30)"/><text x="50.1728%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (360,773 samples, 0.17%)</title><rect x="49.9811%" y="101" width="0.1679%" height="15" fill="rgb(246,177,23)"/><text x="50.2311%" y="111.50"></text></g><g><title>impl_trait_ref (814,591 samples, 0.38%)</title><rect x="50.1979%" y="117" width="0.3791%" height="15" fill="rgb(230,62,27)"/><text x="50.4479%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (687,099 samples, 0.32%)</title><rect x="50.2572%" y="101" width="0.3198%" height="15" fill="rgb(216,154,8)"/><text x="50.5072%" y="111.50"></text></g><g><title>predicates_of (379,527 samples, 0.18%)</title><rect x="50.5956%" y="117" width="0.1766%" height="15" fill="rgb(244,35,45)"/><text x="50.8456%" y="127.50"></text></g><g><title>predicates_defined_on (216,982 samples, 0.10%)</title><rect x="50.6713%" y="101" width="0.1010%" height="15" fill="rgb(251,115,12)"/><text x="50.9213%" y="111.50"></text></g><g><title>specializes (960,510 samples, 0.45%)</title><rect x="50.7722%" y="117" width="0.4470%" height="15" fill="rgb(240,54,50)"/><text x="51.0222%" y="127.50"></text></g><g><title>param_env (551,336 samples, 0.26%)</title><rect x="50.9627%" y="101" width="0.2566%" height="15" fill="rgb(233,84,52)"/><text x="51.2127%" y="111.50"></text></g><g><title>trait_impls_of (562,643 samples, 0.26%)</title><rect x="51.2285%" y="117" width="0.2618%" height="15" fill="rgb(207,117,47)"/><text x="51.4785%" y="127.50"></text></g><g><title>implementations_of_trait (238,613 samples, 0.11%)</title><rect x="51.3793%" y="101" width="0.1110%" height="15" fill="rgb(249,43,39)"/><text x="51.6293%" y="111.50"></text></g><g><title>evaluate_obligation (6,990,628 samples, 3.25%)</title><rect x="48.2476%" y="133" width="3.2533%" height="15" fill="rgb(209,38,44)"/><text x="48.4976%" y="143.50">eva..</text></g><g><title>item_attrs (357,932 samples, 0.17%)</title><rect x="51.7693%" y="133" width="0.1666%" height="15" fill="rgb(236,212,23)"/><text x="52.0193%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (345,162 samples, 0.16%)</title><rect x="51.7752%" y="117" width="0.1606%" height="15" fill="rgb(242,79,21)"/><text x="52.0252%" y="127.50"></text></g><g><title>evaluate_obligation (291,548 samples, 0.14%)</title><rect x="52.0980%" y="117" width="0.1357%" height="15" fill="rgb(211,96,35)"/><text x="52.3480%" y="127.50"></text></g><g><title>method_autoderef_steps (557,429 samples, 0.26%)</title><rect x="51.9896%" y="133" width="0.2594%" height="15" fill="rgb(253,215,40)"/><text x="52.2396%" y="143.50"></text></g><g><title>predicates_of (514,457 samples, 0.24%)</title><rect x="52.2774%" y="133" width="0.2394%" height="15" fill="rgb(211,81,21)"/><text x="52.5274%" y="143.50"></text></g><g><title>predicates_defined_on (350,945 samples, 0.16%)</title><rect x="52.3535%" y="117" width="0.1633%" height="15" fill="rgb(208,190,38)"/><text x="52.6035%" y="127.50"></text></g><g><title>evaluate_obligation (300,633 samples, 0.14%)</title><rect x="53.2681%" y="117" width="0.1399%" height="15" fill="rgb(235,213,38)"/><text x="53.5181%" y="127.50"></text></g><g><title>typeck (2,052,601 samples, 0.96%)</title><rect x="52.5849%" y="133" width="0.9552%" height="15" fill="rgb(237,122,38)"/><text x="52.8349%" y="143.50"></text></g><g><title>item_bodies_checking (49,823,370 samples, 23.19%)</title><rect x="30.3789%" y="181" width="23.1866%" height="15" fill="rgb(244,218,35)"/><text x="30.6289%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (49,820,770 samples, 23.19%)</title><rect x="30.3801%" y="165" width="23.1854%" height="15" fill="rgb(240,68,47)"/><text x="30.6301%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (49,741,560 samples, 23.15%)</title><rect x="30.4170%" y="149" width="23.1485%" height="15" fill="rgb(210,16,53)"/><text x="30.6670%" y="159.50">typeck</text></g><g><title>generics_of (422,806 samples, 0.20%)</title><rect x="55.2039%" y="117" width="0.1968%" height="15" fill="rgb(235,124,12)"/><text x="55.4539%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (284,414 samples, 0.13%)</title><rect x="55.2683%" y="101" width="0.1324%" height="15" fill="rgb(224,169,11)"/><text x="55.5183%" y="111.50"></text></g><g><title>impl_trait_ref (614,655 samples, 0.29%)</title><rect x="55.4498%" y="117" width="0.2860%" height="15" fill="rgb(250,166,2)"/><text x="55.6998%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (476,383 samples, 0.22%)</title><rect x="55.5141%" y="101" width="0.2217%" height="15" fill="rgb(242,216,29)"/><text x="55.7641%" y="111.50"></text></g><g><title>predicates_of (619,504 samples, 0.29%)</title><rect x="55.7499%" y="117" width="0.2883%" height="15" fill="rgb(230,116,27)"/><text x="55.9999%" y="127.50"></text></g><g><title>predicates_defined_on (344,353 samples, 0.16%)</title><rect x="55.8780%" y="101" width="0.1603%" height="15" fill="rgb(228,99,48)"/><text x="56.1280%" y="111.50"></text></g><g><title>specializes (2,071,763 samples, 0.96%)</title><rect x="56.0382%" y="117" width="0.9641%" height="15" fill="rgb(253,11,6)"/><text x="56.2882%" y="127.50"></text></g><g><title>param_env (1,053,204 samples, 0.49%)</title><rect x="56.5123%" y="101" width="0.4901%" height="15" fill="rgb(247,143,39)"/><text x="56.7623%" y="111.50"></text></g><g><title>def_span (464,796 samples, 0.22%)</title><rect x="56.7861%" y="85" width="0.2163%" height="15" fill="rgb(236,97,10)"/><text x="57.0361%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (406,034 samples, 0.19%)</title><rect x="56.8134%" y="69" width="0.1890%" height="15" fill="rgb(233,208,19)"/><text x="57.0634%" y="79.50"></text></g><g><title>evaluate_obligation (5,928,300 samples, 2.76%)</title><rect x="54.2862%" y="133" width="2.7589%" height="15" fill="rgb(216,164,2)"/><text x="54.5362%" y="143.50">ev..</text></g><g><title>item_types_checking (7,703,298 samples, 3.58%)</title><rect x="53.5655%" y="181" width="3.5849%" height="15" fill="rgb(220,129,5)"/><text x="53.8155%" y="191.50">item..</text></g><g><title>check_mod_item_types (7,700,437 samples, 3.58%)</title><rect x="53.5668%" y="165" width="3.5836%" height="15" fill="rgb(242,17,10)"/><text x="53.8168%" y="175.50">chec..</text></g><g><title>typeck (7,086,502 samples, 3.30%)</title><rect x="53.8525%" y="149" width="3.2979%" height="15" fill="rgb(242,107,0)"/><text x="54.1025%" y="159.50">typ..</text></g><g><title>fn_sig (277,254 samples, 0.13%)</title><rect x="57.2819%" y="149" width="0.1290%" height="15" fill="rgb(251,28,31)"/><text x="57.5319%" y="159.50"></text></g><g><title>named_region_map (360,344 samples, 0.17%)</title><rect x="57.4589%" y="133" width="0.1677%" height="15" fill="rgb(233,223,10)"/><text x="57.7089%" y="143.50"></text></g><g><title>resolve_lifetimes (346,574 samples, 0.16%)</title><rect x="57.4653%" y="117" width="0.1613%" height="15" fill="rgb(215,21,27)"/><text x="57.7153%" y="127.50"></text></g><g><title>generics_of (478,936 samples, 0.22%)</title><rect x="57.4109%" y="149" width="0.2229%" height="15" fill="rgb(232,23,21)"/><text x="57.6609%" y="159.50"></text></g><g><title>explicit_predicates_of (273,053 samples, 0.13%)</title><rect x="57.7175%" y="117" width="0.1271%" height="15" fill="rgb(244,5,23)"/><text x="57.9675%" y="127.50"></text></g><g><title>predicates_of (663,255 samples, 0.31%)</title><rect x="57.6591%" y="149" width="0.3087%" height="15" fill="rgb(226,81,46)"/><text x="57.9091%" y="159.50"></text></g><g><title>predicates_defined_on (612,525 samples, 0.29%)</title><rect x="57.6827%" y="133" width="0.2851%" height="15" fill="rgb(247,70,30)"/><text x="57.9327%" y="143.50"></text></g><g><title>inferred_outlives_of (264,762 samples, 0.12%)</title><rect x="57.8445%" y="117" width="0.1232%" height="15" fill="rgb(212,68,19)"/><text x="58.0945%" y="127.50"></text></g><g><title>inferred_outlives_crate (247,782 samples, 0.12%)</title><rect x="57.8524%" y="101" width="0.1153%" height="15" fill="rgb(240,187,13)"/><text x="58.1024%" y="111.50"></text></g><g><title>type_collecting (1,842,259 samples, 0.86%)</title><rect x="57.1514%" y="181" width="0.8573%" height="15" fill="rgb(223,113,26)"/><text x="57.4014%" y="191.50"></text></g><g><title>collect_mod_item_types (1,831,148 samples, 0.85%)</title><rect x="57.1566%" y="165" width="0.8522%" height="15" fill="rgb(206,192,2)"/><text x="57.4066%" y="175.50"></text></g><g><title>evaluate_obligation (336,183 samples, 0.16%)</title><rect x="58.9403%" y="149" width="0.1565%" height="15" fill="rgb(241,108,4)"/><text x="59.1903%" y="159.50"></text></g><g><title>param_env (276,715 samples, 0.13%)</title><rect x="59.1779%" y="149" width="0.1288%" height="15" fill="rgb(247,173,49)"/><text x="59.4279%" y="159.50"></text></g><g><title>region_scope_tree (750,694 samples, 0.35%)</title><rect x="59.3240%" y="149" width="0.3494%" height="15" fill="rgb(224,114,35)"/><text x="59.5740%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,470,325 samples, 1.62%)</title><rect x="58.1119%" y="165" width="1.6150%" height="15" fill="rgb(245,159,27)"/><text x="58.3619%" y="175.50"></text></g><g><title>adt_sized_constraint (265,932 samples, 0.12%)</title><rect x="60.3767%" y="149" width="0.1238%" height="15" fill="rgb(245,172,44)"/><text x="60.6267%" y="159.50"></text></g><g><title>mir_borrowck (269,903 samples, 0.13%)</title><rect x="60.6590%" y="69" width="0.1256%" height="15" fill="rgb(236,23,11)"/><text x="60.9090%" y="79.50"></text></g><g><title>mir_for_ctfe (377,034 samples, 0.18%)</title><rect x="60.6097%" y="101" width="0.1755%" height="15" fill="rgb(205,117,38)"/><text x="60.8597%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (350,044 samples, 0.16%)</title><rect x="60.6223%" y="85" width="0.1629%" height="15" fill="rgb(237,72,25)"/><text x="60.8723%" y="95.50"></text></g><g><title>eval_to_const_value_raw (639,687 samples, 0.30%)</title><rect x="60.7880%" y="85" width="0.2977%" height="15" fill="rgb(244,70,9)"/><text x="61.0380%" y="95.50"></text></g><g><title>eval_to_const_value_raw (638,727 samples, 0.30%)</title><rect x="60.7885%" y="69" width="0.2972%" height="15" fill="rgb(217,125,39)"/><text x="61.0385%" y="79.50"></text></g><g><title>eval_to_allocation_raw (637,707 samples, 0.30%)</title><rect x="60.7889%" y="53" width="0.2968%" height="15" fill="rgb(235,36,10)"/><text x="61.0389%" y="63.50"></text></g><g><title>typeck (278,983 samples, 0.13%)</title><rect x="60.9559%" y="37" width="0.1298%" height="15" fill="rgb(251,123,47)"/><text x="61.2059%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (648,867 samples, 0.30%)</title><rect x="60.7853%" y="101" width="0.3020%" height="15" fill="rgb(221,13,13)"/><text x="61.0353%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,343,214 samples, 0.63%)</title><rect x="60.5005%" y="149" width="0.6251%" height="15" fill="rgb(238,131,9)"/><text x="60.7505%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,332,964 samples, 0.62%)</title><rect x="60.5052%" y="133" width="0.6203%" height="15" fill="rgb(211,50,8)"/><text x="60.7552%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,331,434 samples, 0.62%)</title><rect x="60.5059%" y="117" width="0.6196%" height="15" fill="rgb(245,182,24)"/><text x="60.7559%" y="127.50"></text></g><g><title>param_env (266,275 samples, 0.12%)</title><rect x="61.2351%" y="149" width="0.1239%" height="15" fill="rgb(242,14,37)"/><text x="61.4851%" y="159.50"></text></g><g><title>analysis (123,967,166 samples, 57.69%)</title><rect x="3.7758%" y="213" width="57.6913%" height="15" fill="rgb(246,228,12)"/><text x="4.0258%" y="223.50">analysis</text></g><g><title>type_check_crate (80,059,385 samples, 37.26%)</title><rect x="24.2094%" y="197" width="37.2577%" height="15" fill="rgb(213,55,15)"/><text x="24.4594%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,425,875 samples, 3.46%)</title><rect x="58.0112%" y="181" width="3.4558%" height="15" fill="rgb(209,9,3)"/><text x="58.2612%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (3,739,330 samples, 1.74%)</title><rect x="59.7269%" y="165" width="1.7402%" height="15" fill="rgb(230,59,30)"/><text x="59.9769%" y="175.50"></text></g><g><title>codegen_module (933,019 samples, 0.43%)</title><rect x="61.6876%" y="197" width="0.4342%" height="15" fill="rgb(209,121,21)"/><text x="61.9376%" y="207.50"></text></g><g><title>codegen_crate (1,486,994 samples, 0.69%)</title><rect x="61.4711%" y="213" width="0.6920%" height="15" fill="rgb(220,109,13)"/><text x="61.7211%" y="223.50"></text></g><g><title>LLVM_module_codegen (6,815,768 samples, 3.17%)</title><rect x="62.1708%" y="197" width="3.1719%" height="15" fill="rgb(232,18,1)"/><text x="62.4208%" y="207.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (6,652,817 samples, 3.10%)</title><rect x="62.2466%" y="181" width="3.0961%" height="15" fill="rgb(215,41,42)"/><text x="62.4966%" y="191.50">LLV..</text></g><g><title>codegen_module_optimize (7,194,702 samples, 3.35%)</title><rect x="62.1631%" y="213" width="3.3482%" height="15" fill="rgb(224,123,36)"/><text x="62.4131%" y="223.50">cod..</text></g><g><title>LLVM_module_optimize (362,484 samples, 0.17%)</title><rect x="65.3427%" y="197" width="0.1687%" height="15" fill="rgb(240,125,3)"/><text x="65.5927%" y="207.50"></text></g><g><title>AST_validation (350,144 samples, 0.16%)</title><rect x="65.5924%" y="197" width="0.1629%" height="15" fill="rgb(205,98,50)"/><text x="65.8424%" y="207.50"></text></g><g><title>complete_gated_feature_checking (238,512 samples, 0.11%)</title><rect x="65.7554%" y="197" width="0.1110%" height="15" fill="rgb(205,185,37)"/><text x="66.0054%" y="207.50"></text></g><g><title>metadata_load_macro (261,303 samples, 0.12%)</title><rect x="78.8663%" y="165" width="0.1216%" height="15" fill="rgb(238,207,15)"/><text x="79.1163%" y="175.50"></text></g><g><title>metadata_register_crate (3,181,132 samples, 1.48%)</title><rect x="78.9879%" y="165" width="1.4804%" height="15" fill="rgb(213,199,42)"/><text x="79.2379%" y="175.50"></text></g><g><title>metadata_register_crate (1,022,041 samples, 0.48%)</title><rect x="79.9927%" y="149" width="0.4756%" height="15" fill="rgb(235,201,11)"/><text x="80.2427%" y="159.50"></text></g><g><title>macro_expand_crate (31,947,701 samples, 14.87%)</title><rect x="65.8988%" y="197" width="14.8677%" height="15" fill="rgb(207,46,11)"/><text x="66.1488%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (31,934,040 samples, 14.86%)</title><rect x="65.9051%" y="181" width="14.8613%" height="15" fill="rgb(241,35,35)"/><text x="66.1551%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (640,686 samples, 0.30%)</title><rect x="80.4683%" y="165" width="0.2982%" height="15" fill="rgb(243,32,47)"/><text x="80.7183%" y="175.50"></text></g><g><title>late_resolve_crate (6,113,051 samples, 2.84%)</title><rect x="80.9441%" y="181" width="2.8449%" height="15" fill="rgb(247,202,23)"/><text x="81.1941%" y="191.50">la..</text></g><g><title>configure_and_expand (39,644,818 samples, 18.45%)</title><rect x="65.5114%" y="213" width="18.4497%" height="15" fill="rgb(219,102,11)"/><text x="65.7614%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (6,779,538 samples, 3.16%)</title><rect x="80.8061%" y="197" width="3.1550%" height="15" fill="rgb(243,110,44)"/><text x="81.0561%" y="207.50">res..</text></g><g><title>drop_ast (284,443 samples, 0.13%)</title><rect x="83.9611%" y="213" width="0.1324%" height="15" fill="rgb(222,74,54)"/><text x="84.2111%" y="223.50"></text></g><g><title>early_lint_checks (562,986 samples, 0.26%)</title><rect x="84.1016%" y="213" width="0.2620%" height="15" fill="rgb(216,99,12)"/><text x="84.3516%" y="223.50"></text></g><g><title>free_global_ctxt (4,070,591 samples, 1.89%)</title><rect x="84.3636%" y="213" width="1.8944%" height="15" fill="rgb(226,22,26)"/><text x="84.6136%" y="223.50">f..</text></g><g><title>collect_and_partition_mono_items (294,503 samples, 0.14%)</title><rect x="87.3211%" y="181" width="0.1371%" height="15" fill="rgb(217,163,10)"/><text x="87.5711%" y="191.50"></text></g><g><title>exported_symbols (470,365 samples, 0.22%)</title><rect x="87.3154%" y="197" width="0.2189%" height="15" fill="rgb(213,25,53)"/><text x="87.5654%" y="207.50"></text></g><g><title>layout_of (324,234 samples, 0.15%)</title><rect x="90.2988%" y="165" width="0.1509%" height="15" fill="rgb(252,105,26)"/><text x="90.5488%" y="175.50"></text></g><g><title>layout_of (867,428 samples, 0.40%)</title><rect x="90.0726%" y="181" width="0.4037%" height="15" fill="rgb(220,39,43)"/><text x="90.3226%" y="191.50"></text></g><g><title>needs_drop_raw (301,152 samples, 0.14%)</title><rect x="93.6759%" y="165" width="0.1401%" height="15" fill="rgb(229,68,48)"/><text x="93.9259%" y="175.50"></text></g><g><title>is_copy_raw (270,461 samples, 0.13%)</title><rect x="93.6901%" y="149" width="0.1259%" height="15" fill="rgb(252,8,32)"/><text x="93.9401%" y="159.50"></text></g><g><title>evaluate_obligation (216,331 samples, 0.10%)</title><rect x="93.7153%" y="133" width="0.1007%" height="15" fill="rgb(223,20,43)"/><text x="93.9653%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,226,579 samples, 3.36%)</title><rect x="90.4763%" y="181" width="3.3631%" height="15" fill="rgb(229,81,49)"/><text x="90.7263%" y="191.50">mir..</text></g><g><title>optimized_mir (13,525,906 samples, 6.29%)</title><rect x="87.5675%" y="197" width="6.2946%" height="15" fill="rgb(236,28,36)"/><text x="87.8175%" y="207.50">optimize..</text></g><g><title>generate_crate_metadata (16,444,346 samples, 7.65%)</title><rect x="86.2580%" y="213" width="7.6528%" height="15" fill="rgb(249,185,26)"/><text x="86.5080%" y="223.50">generate_c..</text></g><g><title>hir_lowering (7,199,673 samples, 3.35%)</title><rect x="93.9108%" y="213" width="3.3506%" height="15" fill="rgb(249,174,33)"/><text x="94.1608%" y="223.50">hir..</text></g><g><title>finish_ongoing_codegen (2,482,265 samples, 1.16%)</title><rect x="97.2665%" y="197" width="1.1552%" height="15" fill="rgb(233,201,37)"/><text x="97.5165%" y="207.50"></text></g><g><title>link_crate (993,240 samples, 0.46%)</title><rect x="98.4217%" y="197" width="0.4622%" height="15" fill="rgb(221,78,26)"/><text x="98.6717%" y="207.50"></text></g><g><title>link_binary (982,530 samples, 0.46%)</title><rect x="98.4266%" y="181" width="0.4572%" height="15" fill="rgb(250,127,30)"/><text x="98.6766%" y="191.50"></text></g><g><title>link_rlib (699,387 samples, 0.33%)</title><rect x="98.5584%" y="165" width="0.3255%" height="15" fill="rgb(230,49,44)"/><text x="98.8084%" y="175.50"></text></g><g><title>link (3,494,045 samples, 1.63%)</title><rect x="97.2613%" y="213" width="1.6260%" height="15" fill="rgb(229,67,23)"/><text x="97.5113%" y="223.50"></text></g><g><title>parse_crate (353,594 samples, 0.16%)</title><rect x="98.8874%" y="213" width="0.1646%" height="15" fill="rgb(249,83,47)"/><text x="99.1374%" y="223.50"></text></g><g><title>prepare_outputs (341,184 samples, 0.16%)</title><rect x="99.0562%" y="213" width="0.1588%" height="15" fill="rgb(215,43,3)"/><text x="99.3062%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,147,331 samples, 0.53%)</title><rect x="99.2150%" y="213" width="0.5339%" height="15" fill="rgb(238,154,13)"/><text x="99.4650%" y="223.50"></text></g><g><title>all (214,880,290 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (214,880,290 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (471,975 samples, 0.22%)</title><rect x="99.7804%" y="213" width="0.2196%" height="15" fill="rgb(235,30,7)"/><text x="100.0304%" y="223.50"></text></g></svg></svg>