<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (201,238,010 samples, 9.59%)</title><rect x="0.0574%" y="197" width="9.5872%" height="15" fill="rgb(227,0,7)"/><text x="0.3074%" y="207.50">LLVM_passes</text></g><g><title>mir_const (12,741,587 samples, 0.61%)</title><rect x="15.5271%" y="133" width="0.6070%" height="15" fill="rgb(217,0,24)"/><text x="15.7771%" y="143.50"></text></g><g><title>unsafety_check_result (10,912,275 samples, 0.52%)</title><rect x="15.6142%" y="117" width="0.5199%" height="15" fill="rgb(221,193,54)"/><text x="15.8642%" y="127.50"></text></g><g><title>mir_built (9,579,298 samples, 0.46%)</title><rect x="15.6777%" y="101" width="0.4564%" height="15" fill="rgb(248,212,6)"/><text x="15.9277%" y="111.50"></text></g><g><title>thir_body (22,548,269 samples, 1.07%)</title><rect x="17.8131%" y="69" width="1.0742%" height="15" fill="rgb(208,68,35)"/><text x="18.0631%" y="79.50"></text></g><g><title>mir_const (54,296,534 samples, 2.59%)</title><rect x="16.3012%" y="117" width="2.5867%" height="15" fill="rgb(232,128,0)"/><text x="16.5512%" y="127.50">mi..</text></g><g><title>unsafety_check_result (50,608,296 samples, 2.41%)</title><rect x="16.4770%" y="101" width="2.4110%" height="15" fill="rgb(207,160,47)"/><text x="16.7270%" y="111.50">un..</text></g><g><title>mir_built (47,926,610 samples, 2.28%)</title><rect x="16.6047%" y="85" width="2.2833%" height="15" fill="rgb(228,23,34)"/><text x="16.8547%" y="95.50">m..</text></g><g><title>mir_const_qualif (57,836,569 samples, 2.76%)</title><rect x="16.1341%" y="133" width="2.7554%" height="15" fill="rgb(218,30,26)"/><text x="16.3841%" y="143.50">mi..</text></g><g><title>mir_promoted (75,860,585 samples, 3.61%)</title><rect x="15.2755%" y="149" width="3.6141%" height="15" fill="rgb(220,122,19)"/><text x="15.5255%" y="159.50">mir_..</text></g><g><title>type_op_prove_predicate (3,370,094 samples, 0.16%)</title><rect x="18.9615%" y="149" width="0.1606%" height="15" fill="rgb(250,228,42)"/><text x="19.2115%" y="159.50"></text></g><g><title>MIR_borrow_checking (194,816,725 samples, 9.28%)</title><rect x="9.8412%" y="181" width="9.2813%" height="15" fill="rgb(240,193,28)"/><text x="10.0912%" y="191.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (194,534,564 samples, 9.27%)</title><rect x="9.8547%" y="165" width="9.2678%" height="15" fill="rgb(216,20,37)"/><text x="10.1047%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (41,412,190 samples, 1.97%)</title><rect x="19.1225%" y="181" width="1.9729%" height="15" fill="rgb(206,188,39)"/><text x="19.3725%" y="191.50">M..</text></g><g><title>mir_drops_elaborated_and_const_checked (41,250,149 samples, 1.97%)</title><rect x="19.1302%" y="165" width="1.9652%" height="15" fill="rgb(217,207,13)"/><text x="19.3802%" y="175.50">m..</text></g><g><title>check_mod_attrs (4,012,731 samples, 0.19%)</title><rect x="21.1363%" y="165" width="0.1912%" height="15" fill="rgb(231,73,38)"/><text x="21.3863%" y="175.50"></text></g><g><title>misc_checking_1 (6,927,530 samples, 0.33%)</title><rect x="21.1351%" y="181" width="0.3300%" height="15" fill="rgb(225,20,46)"/><text x="21.3851%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (4,364,044 samples, 0.21%)</title><rect x="21.4653%" y="165" width="0.2079%" height="15" fill="rgb(210,31,41)"/><text x="21.7153%" y="175.50"></text></g><g><title>check_mod_liveness (2,879,319 samples, 0.14%)</title><rect x="21.5361%" y="149" width="0.1372%" height="15" fill="rgb(221,200,47)"/><text x="21.7861%" y="159.50"></text></g><g><title>misc_checking_2 (6,171,752 samples, 0.29%)</title><rect x="21.4652%" y="181" width="0.2940%" height="15" fill="rgb(226,26,5)"/><text x="21.7152%" y="191.50"></text></g><g><title>death_checking (3,078,341 samples, 0.15%)</title><rect x="21.7934%" y="165" width="0.1467%" height="15" fill="rgb(249,33,26)"/><text x="22.0434%" y="175.50"></text></g><g><title>mir_for_ctfe (17,768,081 samples, 0.85%)</title><rect x="27.9662%" y="85" width="0.8465%" height="15" fill="rgb(235,183,28)"/><text x="28.2162%" y="95.50"></text></g><g><title>eval_to_const_value_raw (136,924,589 samples, 6.52%)</title><rect x="22.2897%" y="133" width="6.5232%" height="15" fill="rgb(221,5,38)"/><text x="22.5397%" y="143.50">eval_to_c..</text></g><g><title>eval_to_const_value_raw (136,909,608 samples, 6.52%)</title><rect x="22.2904%" y="117" width="6.5225%" height="15" fill="rgb(247,18,42)"/><text x="22.5404%" y="127.50">eval_to_c..</text></g><g><title>eval_to_allocation_raw (136,876,438 samples, 6.52%)</title><rect x="22.2920%" y="101" width="6.5209%" height="15" fill="rgb(241,131,45)"/><text x="22.5420%" y="111.50">eval_to_a..</text></g><g><title>crate_lints (145,685,717 samples, 6.94%)</title><rect x="21.9402%" y="149" width="6.9406%" height="15" fill="rgb(249,31,29)"/><text x="22.1902%" y="159.50">crate_lin..</text></g><g><title>lint_checking (157,023,351 samples, 7.48%)</title><rect x="21.9400%" y="165" width="7.4808%" height="15" fill="rgb(225,111,53)"/><text x="22.1900%" y="175.50">lint_check..</text></g><g><title>module_lints (11,334,104 samples, 0.54%)</title><rect x="28.8808%" y="149" width="0.5400%" height="15" fill="rgb(238,160,17)"/><text x="29.1308%" y="159.50"></text></g><g><title>lint_mod (11,326,734 samples, 0.54%)</title><rect x="28.8812%" y="133" width="0.5396%" height="15" fill="rgb(214,148,48)"/><text x="29.1312%" y="143.50"></text></g><g><title>privacy_checking_modules (12,435,357 samples, 0.59%)</title><rect x="29.4812%" y="165" width="0.5924%" height="15" fill="rgb(232,36,49)"/><text x="29.7312%" y="175.50"></text></g><g><title>check_mod_privacy (12,428,667 samples, 0.59%)</title><rect x="29.4815%" y="149" width="0.5921%" height="15" fill="rgb(209,103,24)"/><text x="29.7315%" y="159.50"></text></g><g><title>misc_checking_3 (174,560,870 samples, 8.32%)</title><rect x="21.7592%" y="181" width="8.3163%" height="15" fill="rgb(229,88,8)"/><text x="22.0092%" y="191.50">misc_checkin..</text></g><g><title>impl_parent (2,799,047 samples, 0.13%)</title><rect x="30.3179%" y="117" width="0.1333%" height="15" fill="rgb(213,181,19)"/><text x="30.5679%" y="127.50"></text></g><g><title>impl_trait_ref (5,685,238 samples, 0.27%)</title><rect x="30.4513%" y="117" width="0.2709%" height="15" fill="rgb(254,191,54)"/><text x="30.7013%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,341,374 samples, 0.21%)</title><rect x="30.5153%" y="101" width="0.2068%" height="15" fill="rgb(241,83,37)"/><text x="30.7653%" y="111.50"></text></g><g><title>coherent_trait (14,347,696 samples, 0.68%)</title><rect x="30.0818%" y="149" width="0.6835%" height="15" fill="rgb(233,36,39)"/><text x="30.3318%" y="159.50"></text></g><g><title>specialization_graph_of (13,633,669 samples, 0.65%)</title><rect x="30.1159%" y="133" width="0.6495%" height="15" fill="rgb(226,3,54)"/><text x="30.3659%" y="143.50"></text></g><g><title>coherence_checking (14,462,696 samples, 0.69%)</title><rect x="30.0807%" y="165" width="0.6890%" height="15" fill="rgb(245,192,40)"/><text x="30.3307%" y="175.50"></text></g><g><title>evaluate_obligation (4,758,011 samples, 0.23%)</title><rect x="32.0591%" y="117" width="0.2267%" height="15" fill="rgb(238,167,29)"/><text x="32.3091%" y="127.50"></text></g><g><title>typeck (17,542,639 samples, 0.84%)</title><rect x="32.3919%" y="117" width="0.8358%" height="15" fill="rgb(232,182,51)"/><text x="32.6419%" y="127.50"></text></g><g><title>item_bodies_checking (51,594,344 samples, 2.46%)</title><rect x="30.7724%" y="165" width="2.4580%" height="15" fill="rgb(231,60,39)"/><text x="31.0224%" y="175.50">it..</text></g><g><title>typeck_item_bodies (51,590,144 samples, 2.46%)</title><rect x="30.7726%" y="149" width="2.4578%" height="15" fill="rgb(208,69,12)"/><text x="31.0226%" y="159.50">ty..</text></g><g><title>typeck (51,437,611 samples, 2.45%)</title><rect x="30.7798%" y="133" width="2.4505%" height="15" fill="rgb(235,93,37)"/><text x="31.0298%" y="143.50">ty..</text></g><g><title>mir_built (5,981,060 samples, 0.28%)</title><rect x="33.4886%" y="53" width="0.2849%" height="15" fill="rgb(213,116,39)"/><text x="33.7386%" y="63.50"></text></g><g><title>typeck (4,923,990 samples, 0.23%)</title><rect x="33.5390%" y="37" width="0.2346%" height="15" fill="rgb(222,207,29)"/><text x="33.7890%" y="47.50"></text></g><g><title>mir_const (6,607,136 samples, 0.31%)</title><rect x="33.4679%" y="85" width="0.3148%" height="15" fill="rgb(206,96,30)"/><text x="33.7179%" y="95.50"></text></g><g><title>unsafety_check_result (6,357,144 samples, 0.30%)</title><rect x="33.4798%" y="69" width="0.3029%" height="15" fill="rgb(218,138,4)"/><text x="33.7298%" y="79.50"></text></g><g><title>mir_promoted (6,779,358 samples, 0.32%)</title><rect x="33.4602%" y="101" width="0.3230%" height="15" fill="rgb(250,191,14)"/><text x="33.7102%" y="111.50"></text></g><g><title>type_of (10,209,763 samples, 0.49%)</title><rect x="33.3289%" y="133" width="0.4864%" height="15" fill="rgb(239,60,40)"/><text x="33.5789%" y="143.50"></text></g><g><title>mir_borrowck (10,186,663 samples, 0.49%)</title><rect x="33.3300%" y="117" width="0.4853%" height="15" fill="rgb(206,27,48)"/><text x="33.5800%" y="127.50"></text></g><g><title>item_types_checking (148,640,896 samples, 7.08%)</title><rect x="33.2304%" y="165" width="7.0814%" height="15" fill="rgb(225,35,8)"/><text x="33.4804%" y="175.50">item_types..</text></g><g><title>check_mod_item_types (148,634,116 samples, 7.08%)</title><rect x="33.2307%" y="149" width="7.0811%" height="15" fill="rgb(250,213,24)"/><text x="33.4807%" y="159.50">check_mod_..</text></g><g><title>typeck (136,363,502 samples, 6.50%)</title><rect x="33.8153%" y="133" width="6.4965%" height="15" fill="rgb(247,123,22)"/><text x="34.0653%" y="143.50">typeck</text></g><g><title>lint_levels (2,551,196 samples, 0.12%)</title><rect x="40.4227%" y="85" width="0.1215%" height="15" fill="rgb(231,138,38)"/><text x="40.6727%" y="95.50"></text></g><g><title>named_region_map (3,080,582 samples, 0.15%)</title><rect x="40.3975%" y="117" width="0.1468%" height="15" fill="rgb(231,145,46)"/><text x="40.6475%" y="127.50"></text></g><g><title>resolve_lifetimes (3,044,251 samples, 0.15%)</title><rect x="40.3992%" y="101" width="0.1450%" height="15" fill="rgb(251,118,11)"/><text x="40.6492%" y="111.50"></text></g><g><title>generics_of (3,496,126 samples, 0.17%)</title><rect x="40.3791%" y="133" width="0.1666%" height="15" fill="rgb(217,147,25)"/><text x="40.6291%" y="143.50"></text></g><g><title>type_collecting (6,044,951 samples, 0.29%)</title><rect x="40.3119%" y="165" width="0.2880%" height="15" fill="rgb(247,81,37)"/><text x="40.5619%" y="175.50"></text></g><g><title>collect_mod_item_types (6,031,001 samples, 0.29%)</title><rect x="40.3125%" y="149" width="0.2873%" height="15" fill="rgb(209,12,38)"/><text x="40.5625%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,367,803 samples, 0.16%)</title><rect x="40.6314%" y="149" width="0.1604%" height="15" fill="rgb(227,1,9)"/><text x="40.8814%" y="159.50"></text></g><g><title>region_scope_tree (3,560,593 samples, 0.17%)</title><rect x="40.9539%" y="133" width="0.1696%" height="15" fill="rgb(248,47,43)"/><text x="41.2039%" y="143.50"></text></g><g><title>analysis (660,947,871 samples, 31.49%)</title><rect x="9.6446%" y="197" width="31.4883%" height="15" fill="rgb(221,10,30)"/><text x="9.8946%" y="207.50">analysis</text></g><g><title>type_check_crate (232,099,113 samples, 11.06%)</title><rect x="30.0755%" y="181" width="11.0575%" height="15" fill="rgb(210,229,1)"/><text x="30.3255%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,174,574 samples, 0.53%)</title><rect x="40.6006%" y="165" width="0.5324%" height="15" fill="rgb(222,148,37)"/><text x="40.8506%" y="175.50"></text></g><g><title>check_item_well_formed (7,158,835 samples, 0.34%)</title><rect x="40.7919%" y="149" width="0.3411%" height="15" fill="rgb(234,67,33)"/><text x="41.0419%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (2,392,943 samples, 0.11%)</title><rect x="47.9381%" y="165" width="0.1140%" height="15" fill="rgb(247,98,35)"/><text x="48.1881%" y="175.50"></text></g><g><title>const_caller_location (3,184,372 samples, 0.15%)</title><rect x="48.0521%" y="165" width="0.1517%" height="15" fill="rgb(247,138,52)"/><text x="48.3021%" y="175.50"></text></g><g><title>layout_of (2,255,345 samples, 0.11%)</title><rect x="48.7221%" y="149" width="0.1074%" height="15" fill="rgb(213,79,30)"/><text x="48.9721%" y="159.50"></text></g><g><title>predicates_of (3,031,448 samples, 0.14%)</title><rect x="49.1465%" y="133" width="0.1444%" height="15" fill="rgb(246,177,23)"/><text x="49.3965%" y="143.50"></text></g><g><title>predicates_defined_on (2,297,633 samples, 0.11%)</title><rect x="49.1814%" y="117" width="0.1095%" height="15" fill="rgb(230,62,27)"/><text x="49.4314%" y="127.50"></text></g><g><title>param_env (9,707,778 samples, 0.46%)</title><rect x="48.8295%" y="149" width="0.4625%" height="15" fill="rgb(216,154,8)"/><text x="49.0795%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,487,485 samples, 0.17%)</title><rect x="49.2920%" y="149" width="0.1661%" height="15" fill="rgb(244,35,45)"/><text x="49.5420%" y="159.50"></text></g><g><title>normalize_projection_ty (2,773,424 samples, 0.13%)</title><rect x="49.3260%" y="133" width="0.1321%" height="15" fill="rgb(251,115,12)"/><text x="49.5760%" y="143.50"></text></g><g><title>fn_abi_of_instance (26,334,257 samples, 1.25%)</title><rect x="48.2059%" y="165" width="1.2546%" height="15" fill="rgb(240,54,50)"/><text x="48.4559%" y="175.50"></text></g><g><title>layout_of (3,237,854 samples, 0.15%)</title><rect x="49.5428%" y="165" width="0.1543%" height="15" fill="rgb(233,84,52)"/><text x="49.7928%" y="175.50"></text></g><g><title>codegen_module (178,000,323 samples, 8.48%)</title><rect x="41.2659%" y="181" width="8.4801%" height="15" fill="rgb(207,117,47)"/><text x="41.5159%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (180,863,714 samples, 8.62%)</title><rect x="41.1335%" y="197" width="8.6166%" height="15" fill="rgb(249,43,39)"/><text x="41.3835%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (693,865,606 samples, 33.06%)</title><rect x="49.7621%" y="181" width="33.0565%" height="15" fill="rgb(209,38,44)"/><text x="50.0121%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (666,278,628 samples, 31.74%)</title><rect x="51.0764%" y="165" width="31.7423%" height="15" fill="rgb(236,212,23)"/><text x="51.3264%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (730,786,499 samples, 34.82%)</title><rect x="49.7501%" y="197" width="34.8155%" height="15" fill="rgb(242,79,21)"/><text x="50.0001%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (36,668,802 samples, 1.75%)</title><rect x="82.8186%" y="181" width="1.7469%" height="15" fill="rgb(211,96,35)"/><text x="83.0686%" y="191.50"></text></g><g><title>macro_expand_crate (104,323,247 samples, 4.97%)</title><rect x="84.7312%" y="181" width="4.9701%" height="15" fill="rgb(253,215,40)"/><text x="84.9812%" y="191.50">macro_..</text></g><g><title>expand_crate (104,295,587 samples, 4.97%)</title><rect x="84.7325%" y="165" width="4.9688%" height="15" fill="rgb(211,81,21)"/><text x="84.9825%" y="175.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (3,439,834 samples, 0.16%)</title><rect x="89.5374%" y="149" width="0.1639%" height="15" fill="rgb(208,190,38)"/><text x="89.7874%" y="159.50"></text></g><g><title>late_resolve_crate (15,937,092 samples, 0.76%)</title><rect x="89.7419%" y="165" width="0.7593%" height="15" fill="rgb(235,213,38)"/><text x="89.9919%" y="175.50"></text></g><g><title>configure_and_expand (127,955,757 samples, 6.10%)</title><rect x="84.5656%" y="197" width="6.0960%" height="15" fill="rgb(237,122,38)"/><text x="84.8156%" y="207.50">configur..</text></g><g><title>resolve_crate (19,631,649 samples, 0.94%)</title><rect x="89.7263%" y="181" width="0.9353%" height="15" fill="rgb(244,218,35)"/><text x="89.9763%" y="191.50"></text></g><g><title>drop_ast (5,079,021 samples, 0.24%)</title><rect x="90.6615%" y="197" width="0.2420%" height="15" fill="rgb(240,68,47)"/><text x="90.9115%" y="207.50"></text></g><g><title>early_lint_checks (7,908,120 samples, 0.38%)</title><rect x="90.9045%" y="197" width="0.3768%" height="15" fill="rgb(210,16,53)"/><text x="91.1545%" y="207.50"></text></g><g><title>free_global_ctxt (21,796,581 samples, 1.04%)</title><rect x="91.2813%" y="197" width="1.0384%" height="15" fill="rgb(235,124,12)"/><text x="91.5313%" y="207.50"></text></g><g><title>codegen_fn_attrs (3,072,249 samples, 0.15%)</title><rect x="94.2341%" y="117" width="0.1464%" height="15" fill="rgb(224,169,11)"/><text x="94.4841%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,267,849 samples, 0.25%)</title><rect x="94.6460%" y="101" width="0.2510%" height="15" fill="rgb(250,166,2)"/><text x="94.8960%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,184,045 samples, 0.20%)</title><rect x="94.8969%" y="101" width="0.1993%" height="15" fill="rgb(242,216,29)"/><text x="95.1469%" y="111.50"></text></g><g><title>eval_to_const_value_raw (8,911,219 samples, 0.42%)</title><rect x="95.0994%" y="85" width="0.4245%" height="15" fill="rgb(230,116,27)"/><text x="95.3494%" y="95.50"></text></g><g><title>eval_to_const_value_raw (8,891,819 samples, 0.42%)</title><rect x="95.1003%" y="69" width="0.4236%" height="15" fill="rgb(228,99,48)"/><text x="95.3503%" y="79.50"></text></g><g><title>eval_to_allocation_raw (8,847,829 samples, 0.42%)</title><rect x="95.1024%" y="53" width="0.4215%" height="15" fill="rgb(253,11,6)"/><text x="95.3524%" y="63.50"></text></g><g><title>optimized_mir (22,923,598 samples, 1.09%)</title><rect x="94.4320%" y="117" width="1.0921%" height="15" fill="rgb(247,143,39)"/><text x="94.6820%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,979,469 samples, 0.43%)</title><rect x="95.0963%" y="101" width="0.4278%" height="15" fill="rgb(236,97,10)"/><text x="95.3463%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (7,267,316 samples, 0.35%)</title><rect x="95.6347%" y="101" width="0.3462%" height="15" fill="rgb(233,208,19)"/><text x="95.8847%" y="111.50"></text></g><g><title>specialization_graph_of (3,820,389 samples, 0.18%)</title><rect x="96.0845%" y="101" width="0.1820%" height="15" fill="rgb(216,164,2)"/><text x="96.3345%" y="111.50"></text></g><g><title>impl_trait_ref (2,203,971 samples, 0.10%)</title><rect x="96.1615%" y="85" width="0.1050%" height="15" fill="rgb(220,129,5)"/><text x="96.4115%" y="95.50"></text></g><g><title>resolve_instance (16,253,337 samples, 0.77%)</title><rect x="95.5241%" y="117" width="0.7743%" height="15" fill="rgb(242,17,10)"/><text x="95.7741%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (53,096,768 samples, 2.53%)</title><rect x="93.9471%" y="133" width="2.5296%" height="15" fill="rgb(242,107,0)"/><text x="94.1971%" y="143.50">mo..</text></g><g><title>monomorphization_collector (53,216,049 samples, 2.54%)</title><rect x="93.9468%" y="149" width="2.5353%" height="15" fill="rgb(251,28,31)"/><text x="94.1968%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (4,486,306 samples, 0.21%)</title><rect x="96.4827%" y="133" width="0.2137%" height="15" fill="rgb(233,223,10)"/><text x="96.7327%" y="143.50"></text></g><g><title>symbol_name (4,062,572 samples, 0.19%)</title><rect x="96.5029%" y="117" width="0.1935%" height="15" fill="rgb(215,21,27)"/><text x="96.7529%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (59,948,267 samples, 2.86%)</title><rect x="93.9437%" y="165" width="2.8560%" height="15" fill="rgb(232,23,21)"/><text x="94.1937%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (6,666,398 samples, 0.32%)</title><rect x="96.4821%" y="149" width="0.3176%" height="15" fill="rgb(244,5,23)"/><text x="96.7321%" y="159.50"></text></g><g><title>cgu_partitioning (2,167,972 samples, 0.10%)</title><rect x="96.6964%" y="133" width="0.1033%" height="15" fill="rgb(226,81,46)"/><text x="96.9464%" y="143.50"></text></g><g><title>exported_symbols (60,322,541 samples, 2.87%)</title><rect x="93.9352%" y="181" width="2.8738%" height="15" fill="rgb(247,70,30)"/><text x="94.1852%" y="191.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,122,547 samples, 0.15%)</title><rect x="97.0142%" y="165" width="0.1488%" height="15" fill="rgb(212,68,19)"/><text x="97.2642%" y="175.50"></text></g><g><title>optimized_mir (7,214,837 samples, 0.34%)</title><rect x="96.8200%" y="181" width="0.3437%" height="15" fill="rgb(240,187,13)"/><text x="97.0700%" y="191.50"></text></g><g><title>generate_crate_metadata (101,785,671 samples, 4.85%)</title><rect x="92.3197%" y="197" width="4.8492%" height="15" fill="rgb(223,113,26)"/><text x="92.5697%" y="207.50">genera..</text></g><g><title>hir_lowering (30,013,444 samples, 1.43%)</title><rect x="97.1689%" y="197" width="1.4299%" height="15" fill="rgb(206,192,2)"/><text x="97.4189%" y="207.50"></text></g><g><title>finish_ongoing_codegen (8,619,257 samples, 0.41%)</title><rect x="98.5995%" y="181" width="0.4106%" height="15" fill="rgb(241,108,4)"/><text x="98.8495%" y="191.50"></text></g><g><title>link_crate (7,640,548 samples, 0.36%)</title><rect x="99.0101%" y="181" width="0.3640%" height="15" fill="rgb(247,173,49)"/><text x="99.2601%" y="191.50"></text></g><g><title>link_binary (7,583,047 samples, 0.36%)</title><rect x="99.0129%" y="165" width="0.3613%" height="15" fill="rgb(224,114,35)"/><text x="99.2629%" y="175.50"></text></g><g><title>link_rlib (6,494,066 samples, 0.31%)</title><rect x="99.0647%" y="149" width="0.3094%" height="15" fill="rgb(245,159,27)"/><text x="99.3147%" y="159.50"></text></g><g><title>link (16,285,845 samples, 0.78%)</title><rect x="98.5988%" y="197" width="0.7759%" height="15" fill="rgb(245,172,44)"/><text x="98.8488%" y="207.50"></text></g><g><title>parse_crate (8,852,730 samples, 0.42%)</title><rect x="99.3746%" y="197" width="0.4218%" height="15" fill="rgb(236,23,11)"/><text x="99.6246%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,239,072 samples, 0.11%)</title><rect x="99.8079%" y="197" width="0.1067%" height="15" fill="rgb(205,117,38)"/><text x="100.0579%" y="207.50"></text></g><g><title>all (2,099,026,519 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,099,026,519 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>