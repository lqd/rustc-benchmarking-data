<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (81,786,536 samples, 11.49%)</title><rect x="0.1120%" y="181" width="11.4940%" height="15" fill="rgb(227,0,7)"/><text x="0.3620%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,366,164 samples, 0.19%)</title><rect x="16.7085%" y="53" width="0.1920%" height="15" fill="rgb(217,0,24)"/><text x="16.9585%" y="63.50"></text></g><g><title>evaluate_obligation (1,110,204 samples, 0.16%)</title><rect x="16.7445%" y="37" width="0.1560%" height="15" fill="rgb(221,193,54)"/><text x="16.9945%" y="47.50"></text></g><g><title>needs_drop_raw (1,816,548 samples, 0.26%)</title><rect x="16.6455%" y="69" width="0.2553%" height="15" fill="rgb(248,212,6)"/><text x="16.8955%" y="79.50"></text></g><g><title>resolve_instance (1,048,234 samples, 0.15%)</title><rect x="16.9008%" y="69" width="0.1473%" height="15" fill="rgb(208,68,35)"/><text x="17.1508%" y="79.50"></text></g><g><title>thir_body (2,413,562 samples, 0.34%)</title><rect x="17.0566%" y="69" width="0.3392%" height="15" fill="rgb(232,128,0)"/><text x="17.3066%" y="79.50"></text></g><g><title>mir_const (15,627,256 samples, 2.20%)</title><rect x="15.2061%" y="117" width="2.1962%" height="15" fill="rgb(207,160,47)"/><text x="15.4561%" y="127.50">m..</text></g><g><title>unsafety_check_result (13,372,079 samples, 1.88%)</title><rect x="15.5230%" y="101" width="1.8793%" height="15" fill="rgb(228,23,34)"/><text x="15.7730%" y="111.50">u..</text></g><g><title>mir_built (11,720,052 samples, 1.65%)</title><rect x="15.7552%" y="85" width="1.6471%" height="15" fill="rgb(218,30,26)"/><text x="16.0052%" y="95.50"></text></g><g><title>mir_promoted (17,591,457 samples, 2.47%)</title><rect x="14.9623%" y="133" width="2.4723%" height="15" fill="rgb(220,122,19)"/><text x="15.2123%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (809,640 samples, 0.11%)</title><rect x="17.4346%" y="133" width="0.1138%" height="15" fill="rgb(250,228,42)"/><text x="17.6846%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,924,209 samples, 0.41%)</title><rect x="17.6439%" y="133" width="0.4110%" height="15" fill="rgb(240,193,28)"/><text x="17.8939%" y="143.50"></text></g><g><title>MIR_borrow_checking (45,358,885 samples, 6.37%)</title><rect x="11.6820%" y="165" width="6.3746%" height="15" fill="rgb(216,20,37)"/><text x="11.9320%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (45,070,301 samples, 6.33%)</title><rect x="11.7226%" y="149" width="6.3341%" height="15" fill="rgb(206,188,39)"/><text x="11.9726%" y="159.50">mir_borr..</text></g><g><title>check_mod_attrs (1,018,228 samples, 0.14%)</title><rect x="18.1397%" y="149" width="0.1431%" height="15" fill="rgb(217,207,13)"/><text x="18.3897%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,082,113 samples, 0.15%)</title><rect x="18.3411%" y="149" width="0.1521%" height="15" fill="rgb(231,73,38)"/><text x="18.5911%" y="159.50"></text></g><g><title>misc_checking_1 (2,649,278 samples, 0.37%)</title><rect x="18.1343%" y="165" width="0.3723%" height="15" fill="rgb(225,20,46)"/><text x="18.3843%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (953,131 samples, 0.13%)</title><rect x="18.5069%" y="149" width="0.1340%" height="15" fill="rgb(210,31,41)"/><text x="18.7569%" y="159.50"></text></g><g><title>check_mod_liveness (744,948 samples, 0.10%)</title><rect x="18.5362%" y="133" width="0.1047%" height="15" fill="rgb(221,200,47)"/><text x="18.7862%" y="143.50"></text></g><g><title>misc_checking_2 (2,691,849 samples, 0.38%)</title><rect x="18.5066%" y="165" width="0.3783%" height="15" fill="rgb(226,26,5)"/><text x="18.7566%" y="175.50"></text></g><g><title>match_checking (1,736,598 samples, 0.24%)</title><rect x="18.6409%" y="149" width="0.2441%" height="15" fill="rgb(249,33,26)"/><text x="18.8909%" y="159.50"></text></g><g><title>check_match (1,654,687 samples, 0.23%)</title><rect x="18.6524%" y="133" width="0.2325%" height="15" fill="rgb(235,183,28)"/><text x="18.9024%" y="143.50"></text></g><g><title>death_checking (979,530 samples, 0.14%)</title><rect x="18.9559%" y="149" width="0.1377%" height="15" fill="rgb(221,5,38)"/><text x="19.2059%" y="159.50"></text></g><g><title>crate_lints (3,553,778 samples, 0.50%)</title><rect x="19.0938%" y="133" width="0.4994%" height="15" fill="rgb(247,18,42)"/><text x="19.3438%" y="143.50"></text></g><g><title>type_of (1,216,221 samples, 0.17%)</title><rect x="19.4223%" y="117" width="0.1709%" height="15" fill="rgb(241,131,45)"/><text x="19.6723%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (944,727 samples, 0.13%)</title><rect x="19.4605%" y="101" width="0.1328%" height="15" fill="rgb(249,31,29)"/><text x="19.7105%" y="111.50"></text></g><g><title>lint_checking (4,565,269 samples, 0.64%)</title><rect x="19.0936%" y="149" width="0.6416%" height="15" fill="rgb(225,111,53)"/><text x="19.3436%" y="159.50"></text></g><g><title>module_lints (1,009,911 samples, 0.14%)</title><rect x="19.5932%" y="133" width="0.1419%" height="15" fill="rgb(238,160,17)"/><text x="19.8432%" y="143.50"></text></g><g><title>lint_mod (998,061 samples, 0.14%)</title><rect x="19.5949%" y="117" width="0.1403%" height="15" fill="rgb(214,148,48)"/><text x="19.8449%" y="127.50"></text></g><g><title>privacy_checking_modules (1,649,228 samples, 0.23%)</title><rect x="19.7961%" y="149" width="0.2318%" height="15" fill="rgb(232,36,49)"/><text x="20.0461%" y="159.50"></text></g><g><title>check_mod_privacy (1,640,558 samples, 0.23%)</title><rect x="19.7973%" y="133" width="0.2306%" height="15" fill="rgb(209,103,24)"/><text x="20.0473%" y="143.50"></text></g><g><title>misc_checking_3 (8,150,887 samples, 1.15%)</title><rect x="18.8850%" y="165" width="1.1455%" height="15" fill="rgb(229,88,8)"/><text x="19.1350%" y="175.50"></text></g><g><title>impl_parent (2,941,668 samples, 0.41%)</title><rect x="20.8140%" y="101" width="0.4134%" height="15" fill="rgb(213,181,19)"/><text x="21.0640%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,596,667 samples, 0.22%)</title><rect x="21.0031%" y="85" width="0.2244%" height="15" fill="rgb(254,191,54)"/><text x="21.2531%" y="95.50"></text></g><g><title>impl_trait_ref (5,822,381 samples, 0.82%)</title><rect x="21.2275%" y="101" width="0.8183%" height="15" fill="rgb(241,83,37)"/><text x="21.4775%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,680,109 samples, 0.66%)</title><rect x="21.3880%" y="85" width="0.6577%" height="15" fill="rgb(233,36,39)"/><text x="21.6380%" y="95.50"></text></g><g><title>coherent_trait (15,279,544 samples, 2.15%)</title><rect x="20.0560%" y="133" width="2.1473%" height="15" fill="rgb(226,3,54)"/><text x="20.3060%" y="143.50">c..</text></g><g><title>specialization_graph_of (14,682,648 samples, 2.06%)</title><rect x="20.1399%" y="117" width="2.0635%" height="15" fill="rgb(245,192,40)"/><text x="20.3899%" y="127.50">s..</text></g><g><title>trait_impls_of (1,119,812 samples, 0.16%)</title><rect x="22.0460%" y="101" width="0.1574%" height="15" fill="rgb(238,167,29)"/><text x="22.2960%" y="111.50"></text></g><g><title>coherence_checking (15,413,425 samples, 2.17%)</title><rect x="20.0521%" y="149" width="2.1662%" height="15" fill="rgb(232,182,51)"/><text x="20.3021%" y="159.50">c..</text></g><g><title>dropck_outlives (823,901 samples, 0.12%)</title><rect x="27.1650%" y="101" width="0.1158%" height="15" fill="rgb(231,60,39)"/><text x="27.4150%" y="111.50"></text></g><g><title>impl_trait_ref (802,642 samples, 0.11%)</title><rect x="27.9384%" y="85" width="0.1128%" height="15" fill="rgb(208,69,12)"/><text x="28.1884%" y="95.50"></text></g><g><title>predicates_of (840,808 samples, 0.12%)</title><rect x="28.0591%" y="85" width="0.1182%" height="15" fill="rgb(235,93,37)"/><text x="28.3091%" y="95.50"></text></g><g><title>specializes (2,165,232 samples, 0.30%)</title><rect x="28.1773%" y="85" width="0.3043%" height="15" fill="rgb(213,116,39)"/><text x="28.4273%" y="95.50"></text></g><g><title>param_env (1,253,200 samples, 0.18%)</title><rect x="28.3054%" y="69" width="0.1761%" height="15" fill="rgb(222,207,29)"/><text x="28.5554%" y="79.50"></text></g><g><title>evaluate_obligation (9,044,248 samples, 1.27%)</title><rect x="27.2808%" y="101" width="1.2711%" height="15" fill="rgb(206,96,30)"/><text x="27.5308%" y="111.50"></text></g><g><title>typeck (9,938,186 samples, 1.40%)</title><rect x="28.8647%" y="101" width="1.3967%" height="15" fill="rgb(218,138,4)"/><text x="29.1147%" y="111.50"></text></g><g><title>item_bodies_checking (57,251,363 samples, 8.05%)</title><rect x="22.2279%" y="149" width="8.0459%" height="15" fill="rgb(250,191,14)"/><text x="22.4779%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (57,247,673 samples, 8.05%)</title><rect x="22.2284%" y="133" width="8.0454%" height="15" fill="rgb(239,60,40)"/><text x="22.4784%" y="143.50">typeck_item..</text></g><g><title>typeck (57,052,913 samples, 8.02%)</title><rect x="22.2558%" y="117" width="8.0181%" height="15" fill="rgb(206,27,48)"/><text x="22.5058%" y="127.50">typeck</text></g><g><title>item_types_checking (3,134,273 samples, 0.44%)</title><rect x="30.2738%" y="149" width="0.4405%" height="15" fill="rgb(225,35,8)"/><text x="30.5238%" y="159.50"></text></g><g><title>check_mod_item_types (3,122,853 samples, 0.44%)</title><rect x="30.2754%" y="133" width="0.4389%" height="15" fill="rgb(250,213,24)"/><text x="30.5254%" y="143.50"></text></g><g><title>typeck (857,399 samples, 0.12%)</title><rect x="30.5938%" y="117" width="0.1205%" height="15" fill="rgb(247,123,22)"/><text x="30.8438%" y="127.50"></text></g><g><title>mir_for_ctfe (777,099 samples, 0.11%)</title><rect x="30.8789%" y="69" width="0.1092%" height="15" fill="rgb(231,138,38)"/><text x="31.1289%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (715,738 samples, 0.10%)</title><rect x="30.8875%" y="53" width="0.1006%" height="15" fill="rgb(231,145,46)"/><text x="31.1375%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,701,338 samples, 0.24%)</title><rect x="30.8043%" y="117" width="0.2391%" height="15" fill="rgb(251,118,11)"/><text x="31.0543%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,684,388 samples, 0.24%)</title><rect x="30.8067%" y="101" width="0.2367%" height="15" fill="rgb(217,147,25)"/><text x="31.0567%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,671,648 samples, 0.23%)</title><rect x="30.8085%" y="85" width="0.2349%" height="15" fill="rgb(247,81,37)"/><text x="31.0585%" y="95.50"></text></g><g><title>fn_sig (762,519 samples, 0.11%)</title><rect x="31.0434%" y="117" width="0.1072%" height="15" fill="rgb(209,12,38)"/><text x="31.2934%" y="127.50"></text></g><g><title>predicates_of (1,351,105 samples, 0.19%)</title><rect x="31.2779%" y="117" width="0.1899%" height="15" fill="rgb(227,1,9)"/><text x="31.5279%" y="127.50"></text></g><g><title>predicates_defined_on (1,240,095 samples, 0.17%)</title><rect x="31.2935%" y="101" width="0.1743%" height="15" fill="rgb(248,47,43)"/><text x="31.5435%" y="111.50"></text></g><g><title>type_collecting (5,640,171 samples, 0.79%)</title><rect x="30.7152%" y="149" width="0.7927%" height="15" fill="rgb(221,10,30)"/><text x="30.9652%" y="159.50"></text></g><g><title>collect_mod_item_types (5,621,140 samples, 0.79%)</title><rect x="30.7179%" y="133" width="0.7900%" height="15" fill="rgb(210,229,1)"/><text x="30.9679%" y="143.50"></text></g><g><title>evaluate_obligation (1,505,788 samples, 0.21%)</title><rect x="32.1628%" y="117" width="0.2116%" height="15" fill="rgb(222,148,37)"/><text x="32.4128%" y="127.50"></text></g><g><title>region_scope_tree (959,693 samples, 0.13%)</title><rect x="32.5428%" y="117" width="0.1349%" height="15" fill="rgb(234,67,33)"/><text x="32.7928%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,906,755 samples, 1.11%)</title><rect x="31.5701%" y="133" width="1.1112%" height="15" fill="rgb(247,98,35)"/><text x="31.8201%" y="143.50"></text></g><g><title>evaluate_obligation (752,189 samples, 0.11%)</title><rect x="32.9814%" y="117" width="0.1057%" height="15" fill="rgb(247,138,52)"/><text x="33.2314%" y="127.50"></text></g><g><title>check_item_well_formed (3,892,193 samples, 0.55%)</title><rect x="32.6813%" y="133" width="0.5470%" height="15" fill="rgb(213,79,30)"/><text x="32.9313%" y="143.50"></text></g><g><title>analysis (153,910,698 samples, 21.63%)</title><rect x="11.6060%" y="181" width="21.6302%" height="15" fill="rgb(246,177,23)"/><text x="11.8560%" y="191.50">analysis</text></g><g><title>type_check_crate (93,966,017 samples, 13.21%)</title><rect x="20.0305%" y="165" width="13.2057%" height="15" fill="rgb(230,62,27)"/><text x="20.2805%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,284,452 samples, 1.73%)</title><rect x="31.5097%" y="149" width="1.7264%" height="15" fill="rgb(216,154,8)"/><text x="31.7597%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,035,914 samples, 0.15%)</title><rect x="40.0753%" y="149" width="0.1456%" height="15" fill="rgb(244,35,45)"/><text x="40.3253%" y="159.50"></text></g><g><title>const_caller_location (886,835 samples, 0.12%)</title><rect x="40.2208%" y="149" width="0.1246%" height="15" fill="rgb(251,115,12)"/><text x="40.4708%" y="159.50"></text></g><g><title>layout_of (1,274,952 samples, 0.18%)</title><rect x="40.7850%" y="133" width="0.1792%" height="15" fill="rgb(240,54,50)"/><text x="41.0350%" y="143.50"></text></g><g><title>predicates_of (736,898 samples, 0.10%)</title><rect x="41.1766%" y="117" width="0.1036%" height="15" fill="rgb(233,84,52)"/><text x="41.4266%" y="127.50"></text></g><g><title>param_env (2,254,140 samples, 0.32%)</title><rect x="40.9642%" y="133" width="0.3168%" height="15" fill="rgb(207,117,47)"/><text x="41.2142%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,953,387 samples, 0.98%)</title><rect x="40.3484%" y="149" width="0.9772%" height="15" fill="rgb(249,43,39)"/><text x="40.5984%" y="159.50"></text></g><g><title>layout_of (1,311,726 samples, 0.18%)</title><rect x="41.3589%" y="149" width="0.1843%" height="15" fill="rgb(209,38,44)"/><text x="41.6089%" y="159.50"></text></g><g><title>codegen_module (57,496,061 samples, 8.08%)</title><rect x="33.5808%" y="165" width="8.0803%" height="15" fill="rgb(236,212,23)"/><text x="33.8308%" y="175.50">codegen_mod..</text></g><g><title>codegen_crate (60,054,562 samples, 8.44%)</title><rect x="33.2376%" y="181" width="8.4399%" height="15" fill="rgb(242,79,21)"/><text x="33.4876%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (256,444,926 samples, 36.04%)</title><rect x="41.7049%" y="165" width="36.0400%" height="15" fill="rgb(211,96,35)"/><text x="41.9549%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (243,798,870 samples, 34.26%)</title><rect x="43.4821%" y="149" width="34.2628%" height="15" fill="rgb(253,215,40)"/><text x="43.7321%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (266,422,869 samples, 37.44%)</title><rect x="41.6775%" y="181" width="37.4423%" height="15" fill="rgb(211,81,21)"/><text x="41.9275%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,783,263 samples, 1.37%)</title><rect x="77.7449%" y="165" width="1.3749%" height="15" fill="rgb(208,190,38)"/><text x="77.9949%" y="175.50"></text></g><g><title>metadata_register_crate (19,056,613 samples, 2.68%)</title><rect x="84.9935%" y="133" width="2.6782%" height="15" fill="rgb(235,213,38)"/><text x="85.2435%" y="143.50">me..</text></g><g><title>metadata_register_crate (15,351,851 samples, 2.16%)</title><rect x="85.5142%" y="117" width="2.1575%" height="15" fill="rgb(237,122,38)"/><text x="85.7642%" y="127.50">m..</text></g><g><title>macro_expand_crate (60,908,642 samples, 8.56%)</title><rect x="79.2170%" y="165" width="8.5599%" height="15" fill="rgb(244,218,35)"/><text x="79.4670%" y="175.50">macro_expand..</text></g><g><title>expand_crate (60,889,072 samples, 8.56%)</title><rect x="79.2197%" y="149" width="8.5572%" height="15" fill="rgb(240,68,47)"/><text x="79.4697%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (748,916 samples, 0.11%)</title><rect x="87.6717%" y="133" width="0.1053%" height="15" fill="rgb(210,16,53)"/><text x="87.9217%" y="143.50"></text></g><g><title>late_resolve_crate (3,335,276 samples, 0.47%)</title><rect x="87.8457%" y="149" width="0.4687%" height="15" fill="rgb(235,124,12)"/><text x="88.0957%" y="159.50"></text></g><g><title>configure_and_expand (65,641,563 samples, 9.23%)</title><rect x="79.1198%" y="181" width="9.2251%" height="15" fill="rgb(224,169,11)"/><text x="79.3698%" y="191.50">configure_and..</text></g><g><title>resolve_crate (3,921,852 samples, 0.55%)</title><rect x="87.7938%" y="165" width="0.5512%" height="15" fill="rgb(250,166,2)"/><text x="88.0438%" y="175.50"></text></g><g><title>early_lint_checks (760,718 samples, 0.11%)</title><rect x="88.3961%" y="181" width="0.1069%" height="15" fill="rgb(242,216,29)"/><text x="88.6461%" y="191.50"></text></g><g><title>free_global_ctxt (6,852,584 samples, 0.96%)</title><rect x="88.5031%" y="181" width="0.9630%" height="15" fill="rgb(230,116,27)"/><text x="88.7531%" y="191.50"></text></g><g><title>codegen_fn_attrs (872,932 samples, 0.12%)</title><rect x="90.1603%" y="101" width="0.1227%" height="15" fill="rgb(228,99,48)"/><text x="90.4103%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,137,321 samples, 0.16%)</title><rect x="91.1504%" y="85" width="0.1598%" height="15" fill="rgb(253,11,6)"/><text x="91.4004%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,277,542 samples, 0.74%)</title><rect x="91.3102%" y="85" width="0.7417%" height="15" fill="rgb(247,143,39)"/><text x="91.5602%" y="95.50"></text></g><g><title>optimized_mir (12,756,494 samples, 1.79%)</title><rect x="90.3694%" y="101" width="1.7928%" height="15" fill="rgb(236,97,10)"/><text x="90.6194%" y="111.50">o..</text></g><g><title>codegen_fulfill_obligation (1,037,483 samples, 0.15%)</title><rect x="92.2534%" y="85" width="0.1458%" height="15" fill="rgb(233,208,19)"/><text x="92.5034%" y="95.50"></text></g><g><title>specialization_graph_of (2,153,615 samples, 0.30%)</title><rect x="92.4585%" y="85" width="0.3027%" height="15" fill="rgb(216,164,2)"/><text x="92.7085%" y="95.50"></text></g><g><title>resolve_instance (4,473,264 samples, 0.63%)</title><rect x="92.1622%" y="101" width="0.6287%" height="15" fill="rgb(220,129,5)"/><text x="92.4122%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (1,460,025 samples, 0.21%)</title><rect x="92.8547%" y="101" width="0.2052%" height="15" fill="rgb(242,17,10)"/><text x="93.1047%" y="111.50"></text></g><g><title>upstream_monomorphizations (1,440,765 samples, 0.20%)</title><rect x="92.8574%" y="85" width="0.2025%" height="15" fill="rgb(242,107,0)"/><text x="93.1074%" y="95.50"></text></g><g><title>exported_symbols (1,225,803 samples, 0.17%)</title><rect x="92.8876%" y="69" width="0.1723%" height="15" fill="rgb(251,28,31)"/><text x="93.1376%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,218,443 samples, 0.17%)</title><rect x="92.8886%" y="53" width="0.1712%" height="15" fill="rgb(233,223,10)"/><text x="93.1386%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (23,328,289 samples, 3.28%)</title><rect x="89.8852%" y="117" width="3.2785%" height="15" fill="rgb(215,21,27)"/><text x="90.1352%" y="127.50">mon..</text></g><g><title>vtable_entries (738,565 samples, 0.10%)</title><rect x="93.0599%" y="101" width="0.1038%" height="15" fill="rgb(232,23,21)"/><text x="93.3099%" y="111.50"></text></g><g><title>monomorphization_collector (23,432,940 samples, 3.29%)</title><rect x="89.8847%" y="133" width="3.2932%" height="15" fill="rgb(244,5,23)"/><text x="90.1347%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,513,446 samples, 0.21%)</title><rect x="93.1794%" y="117" width="0.2127%" height="15" fill="rgb(226,81,46)"/><text x="93.4294%" y="127.50"></text></g><g><title>symbol_name (1,343,444 samples, 0.19%)</title><rect x="93.2033%" y="101" width="0.1888%" height="15" fill="rgb(247,70,30)"/><text x="93.4533%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (25,762,205 samples, 3.62%)</title><rect x="89.8786%" y="149" width="3.6205%" height="15" fill="rgb(212,68,19)"/><text x="90.1286%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,286,405 samples, 0.32%)</title><rect x="93.1778%" y="133" width="0.3213%" height="15" fill="rgb(240,187,13)"/><text x="93.4278%" y="143.50"></text></g><g><title>cgu_partitioning (761,809 samples, 0.11%)</title><rect x="93.3921%" y="117" width="0.1071%" height="15" fill="rgb(223,113,26)"/><text x="93.6421%" y="127.50"></text></g><g><title>exported_symbols (25,995,878 samples, 3.65%)</title><rect x="89.8691%" y="165" width="3.6534%" height="15" fill="rgb(206,192,2)"/><text x="90.1191%" y="175.50">expo..</text></g><g><title>layout_of (836,371 samples, 0.12%)</title><rect x="93.8652%" y="149" width="0.1175%" height="15" fill="rgb(241,108,4)"/><text x="94.1152%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,972,139 samples, 0.42%)</title><rect x="93.9828%" y="149" width="0.4177%" height="15" fill="rgb(247,173,49)"/><text x="94.2328%" y="159.50"></text></g><g><title>optimized_mir (6,130,034 samples, 0.86%)</title><rect x="93.5429%" y="165" width="0.8615%" height="15" fill="rgb(224,114,35)"/><text x="93.7929%" y="175.50"></text></g><g><title>generate_crate_metadata (35,241,877 samples, 4.95%)</title><rect x="89.4661%" y="181" width="4.9528%" height="15" fill="rgb(245,159,27)"/><text x="89.7161%" y="191.50">genera..</text></g><g><title>hir_lowering (5,671,430 samples, 0.80%)</title><rect x="94.4189%" y="181" width="0.7970%" height="15" fill="rgb(245,172,44)"/><text x="94.6689%" y="191.50"></text></g><g><title>finish_ongoing_codegen (28,230,333 samples, 3.97%)</title><rect x="95.2184%" y="165" width="3.9674%" height="15" fill="rgb(236,23,11)"/><text x="95.4684%" y="175.50">fini..</text></g><g><title>link_crate (2,422,515 samples, 0.34%)</title><rect x="99.1858%" y="165" width="0.3405%" height="15" fill="rgb(205,117,38)"/><text x="99.4358%" y="175.50"></text></g><g><title>link_binary (2,187,443 samples, 0.31%)</title><rect x="99.2188%" y="149" width="0.3074%" height="15" fill="rgb(237,72,25)"/><text x="99.4688%" y="159.50"></text></g><g><title>link_rlib (1,599,507 samples, 0.22%)</title><rect x="99.3015%" y="133" width="0.2248%" height="15" fill="rgb(244,70,9)"/><text x="99.5515%" y="143.50"></text></g><g><title>link (30,682,218 samples, 4.31%)</title><rect x="95.2159%" y="181" width="4.3120%" height="15" fill="rgb(217,125,39)"/><text x="95.4659%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (2,300,405 samples, 0.32%)</title><rect x="99.6063%" y="181" width="0.3233%" height="15" fill="rgb(235,36,10)"/><text x="99.8563%" y="191.50"></text></g><g><title>all (711,555,765 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (711,555,765 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>