<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,398,895 samples, 9.19%)</title><rect x="1.1384%" y="197" width="9.1854%" height="15" fill="rgb(227,0,7)"/><text x="1.3884%" y="207.50">LLVM_passes</text></g><g><title>param_env (74,191 samples, 0.11%)</title><rect x="13.9848%" y="117" width="0.1065%" height="15" fill="rgb(217,0,24)"/><text x="14.2348%" y="127.50"></text></g><g><title>needs_drop_raw (354,704 samples, 0.51%)</title><rect x="14.9956%" y="85" width="0.5092%" height="15" fill="rgb(221,193,54)"/><text x="15.2456%" y="95.50"></text></g><g><title>is_copy_raw (267,353 samples, 0.38%)</title><rect x="15.1210%" y="69" width="0.3838%" height="15" fill="rgb(248,212,6)"/><text x="15.3710%" y="79.50"></text></g><g><title>evaluate_obligation (245,093 samples, 0.35%)</title><rect x="15.1530%" y="53" width="0.3518%" height="15" fill="rgb(208,68,35)"/><text x="15.4030%" y="63.50"></text></g><g><title>trait_impls_of (130,171 samples, 0.19%)</title><rect x="15.3179%" y="37" width="0.1869%" height="15" fill="rgb(232,128,0)"/><text x="15.5679%" y="47.50"></text></g><g><title>resolve_instance (130,592 samples, 0.19%)</title><rect x="15.5048%" y="85" width="0.1875%" height="15" fill="rgb(207,160,47)"/><text x="15.7548%" y="95.50"></text></g><g><title>thir_body (156,571 samples, 0.22%)</title><rect x="15.7021%" y="85" width="0.2248%" height="15" fill="rgb(228,23,34)"/><text x="15.9521%" y="95.50"></text></g><g><title>mir_const (1,592,125 samples, 2.29%)</title><rect x="13.6471%" y="133" width="2.2855%" height="15" fill="rgb(218,30,26)"/><text x="13.8971%" y="143.50">m..</text></g><g><title>unsafety_check_result (1,282,692 samples, 1.84%)</title><rect x="14.0913%" y="117" width="1.8413%" height="15" fill="rgb(220,122,19)"/><text x="14.3413%" y="127.50">u..</text></g><g><title>mir_built (1,102,741 samples, 1.58%)</title><rect x="14.3496%" y="101" width="1.5830%" height="15" fill="rgb(250,228,42)"/><text x="14.5996%" y="111.50"></text></g><g><title>mir_promoted (1,799,578 samples, 2.58%)</title><rect x="13.3680%" y="149" width="2.5832%" height="15" fill="rgb(240,193,28)"/><text x="13.6180%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (159,552 samples, 0.23%)</title><rect x="15.9512%" y="149" width="0.2290%" height="15" fill="rgb(216,20,37)"/><text x="16.2012%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (87,362 samples, 0.13%)</title><rect x="16.1802%" y="149" width="0.1254%" height="15" fill="rgb(206,188,39)"/><text x="16.4302%" y="159.50"></text></g><g><title>type_op_prove_predicate (317,233 samples, 0.46%)</title><rect x="16.3056%" y="149" width="0.4554%" height="15" fill="rgb(217,207,13)"/><text x="16.5556%" y="159.50"></text></g><g><title>MIR_borrow_checking (4,310,864 samples, 6.19%)</title><rect x="10.5744%" y="181" width="6.1881%" height="15" fill="rgb(231,73,38)"/><text x="10.8244%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (4,286,554 samples, 6.15%)</title><rect x="10.6093%" y="165" width="6.1532%" height="15" fill="rgb(225,20,46)"/><text x="10.8593%" y="175.50">mir_borr..</text></g><g><title>hir_module_items (137,171 samples, 0.20%)</title><rect x="16.7726%" y="181" width="0.1969%" height="15" fill="rgb(210,31,41)"/><text x="17.0226%" y="191.50"></text></g><g><title>get_lang_items (94,891 samples, 0.14%)</title><rect x="17.3030%" y="133" width="0.1362%" height="15" fill="rgb(221,200,47)"/><text x="17.5530%" y="143.50"></text></g><g><title>codegen_fn_attrs (75,420 samples, 0.11%)</title><rect x="17.5436%" y="117" width="0.1083%" height="15" fill="rgb(226,26,5)"/><text x="17.7936%" y="127.50"></text></g><g><title>should_inherit_track_caller (152,111 samples, 0.22%)</title><rect x="17.4392%" y="133" width="0.2184%" height="15" fill="rgb(249,33,26)"/><text x="17.6892%" y="143.50"></text></g><g><title>codegen_fn_attrs (355,514 samples, 0.51%)</title><rect x="17.1905%" y="149" width="0.5103%" height="15" fill="rgb(235,183,28)"/><text x="17.4405%" y="159.50"></text></g><g><title>check_mod_attrs (491,395 samples, 0.71%)</title><rect x="16.9958%" y="165" width="0.7054%" height="15" fill="rgb(221,5,38)"/><text x="17.2458%" y="175.50"></text></g><g><title>lookup_deprecation_entry (100,330 samples, 0.14%)</title><rect x="18.0206%" y="149" width="0.1440%" height="15" fill="rgb(247,18,42)"/><text x="18.2706%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (294,202 samples, 0.42%)</title><rect x="17.8452%" y="165" width="0.4223%" height="15" fill="rgb(241,131,45)"/><text x="18.0952%" y="175.50"></text></g><g><title>misc_checking_1 (957,809 samples, 1.37%)</title><rect x="16.9701%" y="181" width="1.3749%" height="15" fill="rgb(249,31,29)"/><text x="17.2201%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (97,471 samples, 0.14%)</title><rect x="18.3469%" y="165" width="0.1399%" height="15" fill="rgb(225,111,53)"/><text x="18.5969%" y="175.50"></text></g><g><title>check_mod_liveness (74,261 samples, 0.11%)</title><rect x="18.3802%" y="149" width="0.1066%" height="15" fill="rgb(238,160,17)"/><text x="18.6302%" y="159.50"></text></g><g><title>misc_checking_2 (204,122 samples, 0.29%)</title><rect x="18.3450%" y="181" width="0.2930%" height="15" fill="rgb(214,148,48)"/><text x="18.5950%" y="191.50"></text></g><g><title>match_checking (105,351 samples, 0.15%)</title><rect x="18.4868%" y="165" width="0.1512%" height="15" fill="rgb(232,36,49)"/><text x="18.7368%" y="175.50"></text></g><g><title>check_match (96,971 samples, 0.14%)</title><rect x="18.4988%" y="149" width="0.1392%" height="15" fill="rgb(209,103,24)"/><text x="18.7488%" y="159.50"></text></g><g><title>death_checking (147,511 samples, 0.21%)</title><rect x="18.7488%" y="165" width="0.2117%" height="15" fill="rgb(229,88,8)"/><text x="18.9988%" y="175.50"></text></g><g><title>param_env (83,031 samples, 0.12%)</title><rect x="19.7746%" y="133" width="0.1192%" height="15" fill="rgb(213,181,19)"/><text x="20.0246%" y="143.50"></text></g><g><title>crate_lints (1,898,500 samples, 2.73%)</title><rect x="18.9629%" y="149" width="2.7252%" height="15" fill="rgb(254,191,54)"/><text x="19.2129%" y="159.50">cr..</text></g><g><title>type_of (1,250,012 samples, 1.79%)</title><rect x="19.8937%" y="133" width="1.7944%" height="15" fill="rgb(241,83,37)"/><text x="20.1437%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (786,766 samples, 1.13%)</title><rect x="20.5587%" y="117" width="1.1294%" height="15" fill="rgb(233,36,39)"/><text x="20.8087%" y="127.50"></text></g><g><title>lint_checking (2,014,671 samples, 2.89%)</title><rect x="18.9605%" y="165" width="2.8920%" height="15" fill="rgb(226,3,54)"/><text x="19.2105%" y="175.50">li..</text></g><g><title>module_lints (114,541 samples, 0.16%)</title><rect x="21.6881%" y="149" width="0.1644%" height="15" fill="rgb(245,192,40)"/><text x="21.9381%" y="159.50"></text></g><g><title>lint_mod (112,511 samples, 0.16%)</title><rect x="21.6910%" y="133" width="0.1615%" height="15" fill="rgb(238,167,29)"/><text x="21.9410%" y="143.50"></text></g><g><title>privacy_access_levels (93,351 samples, 0.13%)</title><rect x="21.8525%" y="165" width="0.1340%" height="15" fill="rgb(232,182,51)"/><text x="22.1025%" y="175.50"></text></g><g><title>privacy_checking_modules (171,932 samples, 0.25%)</title><rect x="21.9865%" y="165" width="0.2468%" height="15" fill="rgb(231,60,39)"/><text x="22.2365%" y="175.50"></text></g><g><title>check_mod_privacy (170,502 samples, 0.24%)</title><rect x="21.9886%" y="149" width="0.2448%" height="15" fill="rgb(208,69,12)"/><text x="22.2386%" y="159.50"></text></g><g><title>misc_checking_3 (2,520,076 samples, 3.62%)</title><rect x="18.6380%" y="181" width="3.6175%" height="15" fill="rgb(235,93,37)"/><text x="18.8880%" y="191.50">misc..</text></g><g><title>impl_parent (887,089 samples, 1.27%)</title><rect x="24.0035%" y="117" width="1.2734%" height="15" fill="rgb(213,116,39)"/><text x="24.2535%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (588,788 samples, 0.85%)</title><rect x="24.4317%" y="101" width="0.8452%" height="15" fill="rgb(222,207,29)"/><text x="24.6817%" y="111.50"></text></g><g><title>impl_trait_ref (3,021,298 samples, 4.34%)</title><rect x="25.2769%" y="117" width="4.3370%" height="15" fill="rgb(206,96,30)"/><text x="25.5269%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,718,715 samples, 3.90%)</title><rect x="25.7112%" y="101" width="3.9026%" height="15" fill="rgb(218,138,4)"/><text x="25.9612%" y="111.50">meta..</text></g><g><title>coherent_trait (5,352,435 samples, 7.68%)</title><rect x="22.3223%" y="149" width="7.6833%" height="15" fill="rgb(250,191,14)"/><text x="22.5723%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (5,341,994 samples, 7.67%)</title><rect x="22.3373%" y="133" width="7.6683%" height="15" fill="rgb(239,60,40)"/><text x="22.5873%" y="143.50">specializa..</text></g><g><title>trait_impls_of (271,623 samples, 0.39%)</title><rect x="29.6156%" y="117" width="0.3899%" height="15" fill="rgb(206,27,48)"/><text x="29.8656%" y="127.50"></text></g><g><title>coherence_checking (5,403,035 samples, 7.76%)</title><rect x="22.3032%" y="165" width="7.7559%" height="15" fill="rgb(225,35,8)"/><text x="22.5532%" y="175.50">coherence_c..</text></g><g><title>dropck_outlives (116,721 samples, 0.17%)</title><rect x="34.1855%" y="117" width="0.1675%" height="15" fill="rgb(250,213,24)"/><text x="34.4355%" y="127.50"></text></g><g><title>evaluate_obligation (278,733 samples, 0.40%)</title><rect x="34.3530%" y="117" width="0.4001%" height="15" fill="rgb(247,123,22)"/><text x="34.6030%" y="127.50"></text></g><g><title>item_attrs (94,082 samples, 0.14%)</title><rect x="34.9218%" y="117" width="0.1351%" height="15" fill="rgb(231,138,38)"/><text x="35.1718%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (92,182 samples, 0.13%)</title><rect x="34.9245%" y="101" width="0.1323%" height="15" fill="rgb(231,145,46)"/><text x="35.1745%" y="111.50"></text></g><g><title>object_safety_violations (156,802 samples, 0.23%)</title><rect x="35.1355%" y="117" width="0.2251%" height="15" fill="rgb(251,118,11)"/><text x="35.3855%" y="127.50"></text></g><g><title>predicates_of (79,680 samples, 0.11%)</title><rect x="35.3750%" y="117" width="0.1144%" height="15" fill="rgb(217,147,25)"/><text x="35.6250%" y="127.50"></text></g><g><title>item_bodies_checking (3,822,269 samples, 5.49%)</title><rect x="30.0806%" y="165" width="5.4868%" height="15" fill="rgb(247,81,37)"/><text x="30.3306%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (3,820,489 samples, 5.48%)</title><rect x="30.0831%" y="149" width="5.4842%" height="15" fill="rgb(209,12,38)"/><text x="30.3331%" y="159.50">typeck_..</text></g><g><title>typeck (3,801,989 samples, 5.46%)</title><rect x="30.1097%" y="133" width="5.4576%" height="15" fill="rgb(227,1,9)"/><text x="30.3597%" y="143.50">typeck</text></g><g><title>item_types_checking (443,124 samples, 0.64%)</title><rect x="35.5673%" y="165" width="0.6361%" height="15" fill="rgb(248,47,43)"/><text x="35.8173%" y="175.50"></text></g><g><title>check_mod_item_types (441,314 samples, 0.63%)</title><rect x="35.5699%" y="149" width="0.6335%" height="15" fill="rgb(221,10,30)"/><text x="35.8199%" y="159.50"></text></g><g><title>fn_sig (86,880 samples, 0.12%)</title><rect x="36.4327%" y="133" width="0.1247%" height="15" fill="rgb(210,229,1)"/><text x="36.6827%" y="143.50"></text></g><g><title>generics_of (97,272 samples, 0.14%)</title><rect x="36.5574%" y="133" width="0.1396%" height="15" fill="rgb(222,148,37)"/><text x="36.8074%" y="143.50"></text></g><g><title>late_bound_vars_map (158,201 samples, 0.23%)</title><rect x="37.1594%" y="85" width="0.2271%" height="15" fill="rgb(234,67,33)"/><text x="37.4094%" y="95.50"></text></g><g><title>resolve_lifetimes (150,301 samples, 0.22%)</title><rect x="37.1708%" y="69" width="0.2158%" height="15" fill="rgb(247,98,35)"/><text x="37.4208%" y="79.50"></text></g><g><title>explicit_predicates_of (421,814 samples, 0.61%)</title><rect x="36.8356%" y="101" width="0.6055%" height="15" fill="rgb(247,138,52)"/><text x="37.0856%" y="111.50"></text></g><g><title>predicates_of (749,587 samples, 1.08%)</title><rect x="36.7446%" y="133" width="1.0760%" height="15" fill="rgb(213,79,30)"/><text x="36.9946%" y="143.50"></text></g><g><title>predicates_defined_on (724,397 samples, 1.04%)</title><rect x="36.7807%" y="117" width="1.0399%" height="15" fill="rgb(246,177,23)"/><text x="37.0307%" y="127.50"></text></g><g><title>inferred_outlives_of (264,343 samples, 0.38%)</title><rect x="37.4411%" y="101" width="0.3795%" height="15" fill="rgb(230,62,27)"/><text x="37.6911%" y="111.50"></text></g><g><title>inferred_outlives_crate (246,653 samples, 0.35%)</title><rect x="37.4665%" y="85" width="0.3541%" height="15" fill="rgb(216,154,8)"/><text x="37.7165%" y="95.50"></text></g><g><title>type_of (152,461 samples, 0.22%)</title><rect x="37.6017%" y="69" width="0.2189%" height="15" fill="rgb(244,35,45)"/><text x="37.8517%" y="79.50"></text></g><g><title>type_collecting (1,232,093 samples, 1.77%)</title><rect x="36.2054%" y="165" width="1.7686%" height="15" fill="rgb(251,115,12)"/><text x="36.4554%" y="175.50"></text></g><g><title>collect_mod_item_types (1,223,593 samples, 1.76%)</title><rect x="36.2176%" y="149" width="1.7564%" height="15" fill="rgb(240,54,50)"/><text x="36.4676%" y="159.50"></text></g><g><title>evaluate_obligation (212,133 samples, 0.30%)</title><rect x="38.8153%" y="133" width="0.3045%" height="15" fill="rgb(233,84,52)"/><text x="39.0653%" y="143.50"></text></g><g><title>implied_outlives_bounds (91,220 samples, 0.13%)</title><rect x="39.1198%" y="133" width="0.1309%" height="15" fill="rgb(207,117,47)"/><text x="39.3698%" y="143.50"></text></g><g><title>param_env (74,092 samples, 0.11%)</title><rect x="39.2508%" y="133" width="0.1064%" height="15" fill="rgb(249,43,39)"/><text x="39.5008%" y="143.50"></text></g><g><title>check_impl_item_well_formed (987,491 samples, 1.42%)</title><rect x="38.0599%" y="149" width="1.4175%" height="15" fill="rgb(209,38,44)"/><text x="38.3099%" y="159.50"></text></g><g><title>evaluate_obligation (111,130 samples, 0.16%)</title><rect x="40.8169%" y="133" width="0.1595%" height="15" fill="rgb(236,212,23)"/><text x="41.0669%" y="143.50"></text></g><g><title>param_env (245,342 samples, 0.35%)</title><rect x="41.0527%" y="133" width="0.3522%" height="15" fill="rgb(242,79,21)"/><text x="41.3027%" y="143.50"></text></g><g><title>check_item_well_formed (1,483,225 samples, 2.13%)</title><rect x="39.4774%" y="149" width="2.1291%" height="15" fill="rgb(211,96,35)"/><text x="39.7274%" y="159.50">c..</text></g><g><title>analysis (21,905,263 samples, 31.44%)</title><rect x="10.3238%" y="197" width="31.4444%" height="15" fill="rgb(253,215,40)"/><text x="10.5738%" y="207.50">analysis</text></g><g><title>type_check_crate (13,593,239 samples, 19.51%)</title><rect x="22.2555%" y="181" width="19.5127%" height="15" fill="rgb(211,81,21)"/><text x="22.5055%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,641,937 samples, 3.79%)</title><rect x="37.9758%" y="165" width="3.7924%" height="15" fill="rgb(208,190,38)"/><text x="38.2258%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (112,661 samples, 0.16%)</title><rect x="41.6065%" y="149" width="0.1617%" height="15" fill="rgb(235,213,38)"/><text x="41.8565%" y="159.50"></text></g><g><title>fn_abi_of_instance (138,343 samples, 0.20%)</title><rect x="43.7902%" y="165" width="0.1986%" height="15" fill="rgb(237,122,38)"/><text x="44.0402%" y="175.50"></text></g><g><title>layout_of (83,212 samples, 0.12%)</title><rect x="43.8694%" y="149" width="0.1194%" height="15" fill="rgb(244,218,35)"/><text x="44.1194%" y="159.50"></text></g><g><title>codegen_module (1,040,640 samples, 1.49%)</title><rect x="42.5192%" y="181" width="1.4938%" height="15" fill="rgb(240,68,47)"/><text x="42.7692%" y="191.50"></text></g><g><title>codegen_crate (1,622,176 samples, 2.33%)</title><rect x="41.7849%" y="197" width="2.3286%" height="15" fill="rgb(210,16,53)"/><text x="42.0349%" y="207.50">c..</text></g><g><title>LLVM_module_codegen (5,733,928 samples, 8.23%)</title><rect x="44.1681%" y="181" width="8.2309%" height="15" fill="rgb(235,124,12)"/><text x="44.4181%" y="191.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (5,575,827 samples, 8.00%)</title><rect x="44.3950%" y="165" width="8.0039%" height="15" fill="rgb(224,169,11)"/><text x="44.6450%" y="175.50">LLVM_module..</text></g><g><title>codegen_module_optimize (6,172,762 samples, 8.86%)</title><rect x="44.1135%" y="197" width="8.8608%" height="15" fill="rgb(250,166,2)"/><text x="44.3635%" y="207.50">codegen_modul..</text></g><g><title>LLVM_module_optimize (400,794 samples, 0.58%)</title><rect x="52.3990%" y="181" width="0.5753%" height="15" fill="rgb(242,216,29)"/><text x="52.6490%" y="191.50"></text></g><g><title>AST_validation (141,621 samples, 0.20%)</title><rect x="53.2950%" y="181" width="0.2033%" height="15" fill="rgb(230,116,27)"/><text x="53.5450%" y="191.50"></text></g><g><title>crate_injection (77,891 samples, 0.11%)</title><rect x="53.5768%" y="181" width="0.1118%" height="15" fill="rgb(228,99,48)"/><text x="53.8268%" y="191.50"></text></g><g><title>metadata_load_macro (97,210 samples, 0.14%)</title><rect x="69.3988%" y="149" width="0.1395%" height="15" fill="rgb(253,11,6)"/><text x="69.6488%" y="159.50"></text></g><g><title>macro_expand_crate (13,687,799 samples, 19.65%)</title><rect x="53.6886%" y="181" width="19.6485%" height="15" fill="rgb(247,143,39)"/><text x="53.9386%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,671,569 samples, 19.63%)</title><rect x="53.7119%" y="165" width="19.6252%" height="15" fill="rgb(236,97,10)"/><text x="53.9619%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,646,267 samples, 3.80%)</title><rect x="69.5384%" y="149" width="3.7986%" height="15" fill="rgb(233,208,19)"/><text x="69.7884%" y="159.50">meta..</text></g><g><title>metadata_register_crate (978,020 samples, 1.40%)</title><rect x="71.9331%" y="133" width="1.4039%" height="15" fill="rgb(216,164,2)"/><text x="72.1831%" y="143.50"></text></g><g><title>metadata_register_crate (78,640 samples, 0.11%)</title><rect x="73.2241%" y="117" width="0.1129%" height="15" fill="rgb(220,129,5)"/><text x="73.4741%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (190,232 samples, 0.27%)</title><rect x="73.3452%" y="181" width="0.2731%" height="15" fill="rgb(242,17,10)"/><text x="73.5952%" y="191.50"></text></g><g><title>late_resolve_crate (2,807,969 samples, 4.03%)</title><rect x="73.7760%" y="165" width="4.0308%" height="15" fill="rgb(242,107,0)"/><text x="74.0260%" y="175.50">late..</text></g><g><title>configure_and_expand (17,381,147 samples, 24.95%)</title><rect x="52.9743%" y="197" width="24.9501%" height="15" fill="rgb(251,28,31)"/><text x="53.2243%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,999,830 samples, 4.31%)</title><rect x="73.6183%" y="181" width="4.3062%" height="15" fill="rgb(233,223,10)"/><text x="73.8683%" y="191.50">resol..</text></g><g><title>drop_ast (99,321 samples, 0.14%)</title><rect x="77.9245%" y="197" width="0.1426%" height="15" fill="rgb(215,21,27)"/><text x="78.1745%" y="207.50"></text></g><g><title>early_lint_checks (219,803 samples, 0.32%)</title><rect x="78.0877%" y="197" width="0.3155%" height="15" fill="rgb(232,23,21)"/><text x="78.3377%" y="207.50"></text></g><g><title>free_global_ctxt (2,510,245 samples, 3.60%)</title><rect x="78.4033%" y="197" width="3.6034%" height="15" fill="rgb(244,5,23)"/><text x="78.6533%" y="207.50">free..</text></g><g><title>monomorphization_collector_graph_walk (130,712 samples, 0.19%)</title><rect x="82.9837%" y="133" width="0.1876%" height="15" fill="rgb(226,81,46)"/><text x="83.2337%" y="143.50"></text></g><g><title>optimized_mir (114,982 samples, 0.17%)</title><rect x="83.0062%" y="117" width="0.1651%" height="15" fill="rgb(247,70,30)"/><text x="83.2562%" y="127.50"></text></g><g><title>monomorphization_collector (156,482 samples, 0.22%)</title><rect x="82.9805%" y="149" width="0.2246%" height="15" fill="rgb(212,68,19)"/><text x="83.2305%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (70,551 samples, 0.10%)</title><rect x="83.2093%" y="133" width="0.1013%" height="15" fill="rgb(240,187,13)"/><text x="83.4593%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (277,783 samples, 0.40%)</title><rect x="82.9584%" y="165" width="0.3987%" height="15" fill="rgb(223,113,26)"/><text x="83.2084%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (105,871 samples, 0.15%)</title><rect x="83.2052%" y="149" width="0.1520%" height="15" fill="rgb(206,192,2)"/><text x="83.4552%" y="159.50"></text></g><g><title>exported_symbols (338,294 samples, 0.49%)</title><rect x="82.9409%" y="181" width="0.4856%" height="15" fill="rgb(241,108,4)"/><text x="83.1909%" y="191.50"></text></g><g><title>layout_of (159,250 samples, 0.23%)</title><rect x="84.2940%" y="165" width="0.2286%" height="15" fill="rgb(247,173,49)"/><text x="84.5440%" y="175.50"></text></g><g><title>optimized_mir (1,368,173 samples, 1.96%)</title><rect x="83.4988%" y="181" width="1.9640%" height="15" fill="rgb(224,114,35)"/><text x="83.7488%" y="191.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (654,954 samples, 0.94%)</title><rect x="84.5226%" y="165" width="0.9402%" height="15" fill="rgb(245,159,27)"/><text x="84.7726%" y="175.50"></text></g><g><title>generate_crate_metadata (2,426,715 samples, 3.48%)</title><rect x="82.0066%" y="197" width="3.4835%" height="15" fill="rgb(245,172,44)"/><text x="82.2566%" y="207.50">gen..</text></g><g><title>hir_lowering (1,574,655 samples, 2.26%)</title><rect x="85.4901%" y="197" width="2.2604%" height="15" fill="rgb(236,23,11)"/><text x="85.7401%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (3,455,665 samples, 4.96%)</title><rect x="87.7711%" y="181" width="4.9605%" height="15" fill="rgb(205,117,38)"/><text x="88.0211%" y="191.50">finish..</text></g><g><title>link_crate (612,926 samples, 0.88%)</title><rect x="92.7316%" y="181" width="0.8798%" height="15" fill="rgb(237,72,25)"/><text x="92.9816%" y="191.50"></text></g><g><title>link_binary (600,436 samples, 0.86%)</title><rect x="92.7495%" y="165" width="0.8619%" height="15" fill="rgb(244,70,9)"/><text x="92.9995%" y="175.50"></text></g><g><title>link_rlib (377,513 samples, 0.54%)</title><rect x="93.0695%" y="149" width="0.5419%" height="15" fill="rgb(217,125,39)"/><text x="93.3195%" y="159.50"></text></g><g><title>link (4,091,602 samples, 5.87%)</title><rect x="87.7505%" y="197" width="5.8734%" height="15" fill="rgb(235,36,10)"/><text x="88.0005%" y="207.50">link</text></g><g><title>parse_crate (3,243,303 samples, 4.66%)</title><rect x="93.6239%" y="197" width="4.6557%" height="15" fill="rgb(251,123,47)"/><text x="93.8739%" y="207.50">parse..</text></g><g><title>prepare_outputs (356,474 samples, 0.51%)</title><rect x="98.2933%" y="197" width="0.5117%" height="15" fill="rgb(221,13,13)"/><text x="98.5433%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (432,565 samples, 0.62%)</title><rect x="98.8050%" y="197" width="0.6209%" height="15" fill="rgb(238,131,9)"/><text x="99.0550%" y="207.50"></text></g><g><title>setup_global_ctxt (112,941 samples, 0.16%)</title><rect x="99.4272%" y="197" width="0.1621%" height="15" fill="rgb(211,50,8)"/><text x="99.6772%" y="207.50"></text></g><g><title>all (69,663,498 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (69,663,498 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (286,113 samples, 0.41%)</title><rect x="99.5893%" y="197" width="0.4107%" height="15" fill="rgb(246,228,12)"/><text x="99.8393%" y="207.50"></text></g></svg></svg>