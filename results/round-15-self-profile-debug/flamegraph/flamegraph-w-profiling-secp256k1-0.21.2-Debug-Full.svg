<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (69,168,574 samples, 10.16%)</title><rect x="0.1340%" y="181" width="10.1603%" height="15" fill="rgb(227,0,7)"/><text x="0.3840%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,642,230 samples, 0.24%)</title><rect x="19.0487%" y="69" width="0.2412%" height="15" fill="rgb(217,0,24)"/><text x="19.2987%" y="79.50"></text></g><g><title>is_copy_raw (1,247,676 samples, 0.18%)</title><rect x="19.1067%" y="53" width="0.1833%" height="15" fill="rgb(221,193,54)"/><text x="19.3567%" y="63.50"></text></g><g><title>evaluate_obligation (1,021,774 samples, 0.15%)</title><rect x="19.1399%" y="37" width="0.1501%" height="15" fill="rgb(248,212,6)"/><text x="19.3899%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,008,663 samples, 0.15%)</title><rect x="19.3984%" y="53" width="0.1482%" height="15" fill="rgb(208,68,35)"/><text x="19.6484%" y="63.50"></text></g><g><title>specialization_graph_of (1,106,170 samples, 0.16%)</title><rect x="19.5796%" y="53" width="0.1625%" height="15" fill="rgb(232,128,0)"/><text x="19.8296%" y="63.50"></text></g><g><title>resolve_instance (3,249,416 samples, 0.48%)</title><rect x="19.2940%" y="69" width="0.4773%" height="15" fill="rgb(207,160,47)"/><text x="19.5440%" y="79.50"></text></g><g><title>thir_body (3,745,979 samples, 0.55%)</title><rect x="19.7853%" y="69" width="0.5503%" height="15" fill="rgb(228,23,34)"/><text x="20.0353%" y="79.50"></text></g><g><title>mir_const (24,406,687 samples, 3.59%)</title><rect x="16.7584%" y="117" width="3.5851%" height="15" fill="rgb(218,30,26)"/><text x="17.0084%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (21,042,820 samples, 3.09%)</title><rect x="17.2526%" y="101" width="3.0910%" height="15" fill="rgb(220,122,19)"/><text x="17.5026%" y="111.50">uns..</text></g><g><title>mir_built (18,864,820 samples, 2.77%)</title><rect x="17.5725%" y="85" width="2.7711%" height="15" fill="rgb(250,228,42)"/><text x="17.8225%" y="95.50">mi..</text></g><g><title>mir_const (1,571,547 samples, 0.23%)</title><rect x="20.4605%" y="101" width="0.2308%" height="15" fill="rgb(240,193,28)"/><text x="20.7105%" y="111.50"></text></g><g><title>unsafety_check_result (1,129,769 samples, 0.17%)</title><rect x="20.5253%" y="85" width="0.1660%" height="15" fill="rgb(216,20,37)"/><text x="20.7753%" y="95.50"></text></g><g><title>mir_built (994,288 samples, 0.15%)</title><rect x="20.5452%" y="69" width="0.1461%" height="15" fill="rgb(206,188,39)"/><text x="20.7952%" y="79.50"></text></g><g><title>mir_const_qualif (2,372,016 samples, 0.35%)</title><rect x="20.3436%" y="117" width="0.3484%" height="15" fill="rgb(217,207,13)"/><text x="20.5936%" y="127.50"></text></g><g><title>mir_promoted (29,772,419 samples, 4.37%)</title><rect x="16.3189%" y="133" width="4.3733%" height="15" fill="rgb(231,73,38)"/><text x="16.5689%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (984,859 samples, 0.14%)</title><rect x="20.6941%" y="133" width="0.1447%" height="15" fill="rgb(225,20,46)"/><text x="20.9441%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,809,363 samples, 0.27%)</title><rect x="20.8388%" y="133" width="0.2658%" height="15" fill="rgb(210,31,41)"/><text x="21.0888%" y="143.50"></text></g><g><title>normalize_projection_ty (1,220,046 samples, 0.18%)</title><rect x="20.9254%" y="117" width="0.1792%" height="15" fill="rgb(221,200,47)"/><text x="21.1754%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,819,209 samples, 0.71%)</title><rect x="21.1454%" y="133" width="0.7079%" height="15" fill="rgb(226,26,5)"/><text x="21.3954%" y="143.50"></text></g><g><title>MIR_borrow_checking (77,872,982 samples, 11.44%)</title><rect x="10.4166%" y="165" width="11.4389%" height="15" fill="rgb(249,33,26)"/><text x="10.6666%" y="175.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (77,307,199 samples, 11.36%)</title><rect x="10.4997%" y="149" width="11.3557%" height="15" fill="rgb(235,183,28)"/><text x="10.7497%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,027,091 samples, 0.15%)</title><rect x="21.8554%" y="165" width="0.1509%" height="15" fill="rgb(221,5,38)"/><text x="22.1054%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (751,158 samples, 0.11%)</title><rect x="21.8960%" y="149" width="0.1103%" height="15" fill="rgb(247,18,42)"/><text x="22.1460%" y="159.50"></text></g><g><title>codegen_fn_attrs (966,870 samples, 0.14%)</title><rect x="22.2154%" y="133" width="0.1420%" height="15" fill="rgb(241,131,45)"/><text x="22.4654%" y="143.50"></text></g><g><title>check_mod_attrs (1,677,778 samples, 0.25%)</title><rect x="22.1110%" y="149" width="0.2465%" height="15" fill="rgb(249,31,29)"/><text x="22.3610%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,394,963 samples, 0.20%)</title><rect x="22.4570%" y="149" width="0.2049%" height="15" fill="rgb(225,111,53)"/><text x="22.7070%" y="159.50"></text></g><g><title>misc_checking_1 (3,938,950 samples, 0.58%)</title><rect x="22.1030%" y="165" width="0.5786%" height="15" fill="rgb(238,160,17)"/><text x="22.3530%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,540,106 samples, 0.23%)</title><rect x="22.6818%" y="149" width="0.2262%" height="15" fill="rgb(214,148,48)"/><text x="22.9318%" y="159.50"></text></g><g><title>check_mod_liveness (1,170,113 samples, 0.17%)</title><rect x="22.7362%" y="133" width="0.1719%" height="15" fill="rgb(232,36,49)"/><text x="22.9862%" y="143.50"></text></g><g><title>misc_checking_2 (3,215,283 samples, 0.47%)</title><rect x="22.6816%" y="165" width="0.4723%" height="15" fill="rgb(209,103,24)"/><text x="22.9316%" y="175.50"></text></g><g><title>match_checking (1,673,257 samples, 0.25%)</title><rect x="22.9081%" y="149" width="0.2458%" height="15" fill="rgb(229,88,8)"/><text x="23.1581%" y="159.50"></text></g><g><title>check_match (1,521,926 samples, 0.22%)</title><rect x="22.9303%" y="133" width="0.2236%" height="15" fill="rgb(213,181,19)"/><text x="23.1803%" y="143.50"></text></g><g><title>check_private_in_public (748,988 samples, 0.11%)</title><rect x="23.1556%" y="149" width="0.1100%" height="15" fill="rgb(254,191,54)"/><text x="23.4056%" y="159.50"></text></g><g><title>death_checking (1,419,924 samples, 0.21%)</title><rect x="23.2656%" y="149" width="0.2086%" height="15" fill="rgb(241,83,37)"/><text x="23.5156%" y="159.50"></text></g><g><title>crate_lints (4,119,022 samples, 0.61%)</title><rect x="23.4745%" y="133" width="0.6050%" height="15" fill="rgb(233,36,39)"/><text x="23.7245%" y="143.50"></text></g><g><title>type_of (1,144,630 samples, 0.17%)</title><rect x="23.9114%" y="117" width="0.1681%" height="15" fill="rgb(226,3,54)"/><text x="24.1614%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (912,917 samples, 0.13%)</title><rect x="23.9455%" y="101" width="0.1341%" height="15" fill="rgb(245,192,40)"/><text x="24.1955%" y="111.50"></text></g><g><title>lint_checking (5,551,526 samples, 0.82%)</title><rect x="23.4742%" y="149" width="0.8155%" height="15" fill="rgb(238,167,29)"/><text x="23.7242%" y="159.50"></text></g><g><title>module_lints (1,430,214 samples, 0.21%)</title><rect x="24.0795%" y="133" width="0.2101%" height="15" fill="rgb(232,182,51)"/><text x="24.3295%" y="143.50"></text></g><g><title>lint_mod (1,417,464 samples, 0.21%)</title><rect x="24.0814%" y="117" width="0.2082%" height="15" fill="rgb(231,60,39)"/><text x="24.3314%" y="127.50"></text></g><g><title>privacy_access_levels (1,453,735 samples, 0.21%)</title><rect x="24.2896%" y="149" width="0.2135%" height="15" fill="rgb(208,69,12)"/><text x="24.5396%" y="159.50"></text></g><g><title>privacy_checking_modules (2,739,168 samples, 0.40%)</title><rect x="24.5032%" y="149" width="0.4024%" height="15" fill="rgb(235,93,37)"/><text x="24.7532%" y="159.50"></text></g><g><title>check_mod_privacy (2,730,038 samples, 0.40%)</title><rect x="24.5045%" y="133" width="0.4010%" height="15" fill="rgb(213,116,39)"/><text x="24.7545%" y="143.50"></text></g><g><title>misc_checking_3 (11,953,171 samples, 1.76%)</title><rect x="23.1539%" y="165" width="1.7558%" height="15" fill="rgb(222,207,29)"/><text x="23.4039%" y="175.50"></text></g><g><title>mir_for_ctfe (742,228 samples, 0.11%)</title><rect x="25.1021%" y="69" width="0.1090%" height="15" fill="rgb(206,96,30)"/><text x="25.3521%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (682,207 samples, 0.10%)</title><rect x="25.1109%" y="53" width="0.1002%" height="15" fill="rgb(218,138,4)"/><text x="25.3609%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,099,071 samples, 0.31%)</title><rect x="25.0179%" y="117" width="0.3083%" height="15" fill="rgb(250,191,14)"/><text x="25.2679%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,082,991 samples, 0.31%)</title><rect x="25.0202%" y="101" width="0.3060%" height="15" fill="rgb(239,60,40)"/><text x="25.2702%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,079,131 samples, 0.31%)</title><rect x="25.0208%" y="85" width="0.3054%" height="15" fill="rgb(206,27,48)"/><text x="25.2708%" y="95.50"></text></g><g><title>impl_parent (3,176,481 samples, 0.47%)</title><rect x="26.1557%" y="101" width="0.4666%" height="15" fill="rgb(225,35,8)"/><text x="26.4057%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,870,693 samples, 0.27%)</title><rect x="26.3475%" y="85" width="0.2748%" height="15" fill="rgb(250,213,24)"/><text x="26.5975%" y="95.50"></text></g><g><title>impl_trait_ref (6,090,791 samples, 0.89%)</title><rect x="26.6223%" y="101" width="0.8947%" height="15" fill="rgb(247,123,22)"/><text x="26.8723%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,794,679 samples, 0.70%)</title><rect x="26.8127%" y="85" width="0.7043%" height="15" fill="rgb(231,138,38)"/><text x="27.0627%" y="95.50"></text></g><g><title>trait_impls_of (1,162,204 samples, 0.17%)</title><rect x="27.5743%" y="101" width="0.1707%" height="15" fill="rgb(231,145,46)"/><text x="27.8243%" y="111.50"></text></g><g><title>coherent_trait (18,997,084 samples, 2.79%)</title><rect x="24.9547%" y="133" width="2.7905%" height="15" fill="rgb(251,118,11)"/><text x="25.2047%" y="143.50">co..</text></g><g><title>specialization_graph_of (16,189,504 samples, 2.38%)</title><rect x="25.3671%" y="117" width="2.3781%" height="15" fill="rgb(217,147,25)"/><text x="25.6171%" y="127.50">sp..</text></g><g><title>coherence_checking (19,245,406 samples, 2.83%)</title><rect x="24.9501%" y="149" width="2.8270%" height="15" fill="rgb(247,81,37)"/><text x="25.2001%" y="159.50">co..</text></g><g><title>associated_item (890,219 samples, 0.13%)</title><rect x="38.4399%" y="85" width="0.1308%" height="15" fill="rgb(209,12,38)"/><text x="38.6899%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (718,473 samples, 0.11%)</title><rect x="38.4651%" y="69" width="0.1055%" height="15" fill="rgb(227,1,9)"/><text x="38.7151%" y="79.50"></text></g><g><title>associated_items (1,252,480 samples, 0.18%)</title><rect x="38.3953%" y="101" width="0.1840%" height="15" fill="rgb(248,47,43)"/><text x="38.6453%" y="111.50"></text></g><g><title>dropck_outlives (719,758 samples, 0.11%)</title><rect x="38.5971%" y="101" width="0.1057%" height="15" fill="rgb(221,10,30)"/><text x="38.8471%" y="111.50"></text></g><g><title>mir_borrowck (935,598 samples, 0.14%)</title><rect x="38.8803%" y="37" width="0.1374%" height="15" fill="rgb(210,229,1)"/><text x="39.1303%" y="47.50"></text></g><g><title>mir_for_ctfe (1,412,890 samples, 0.21%)</title><rect x="38.8114%" y="69" width="0.2075%" height="15" fill="rgb(222,148,37)"/><text x="39.0614%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,290,250 samples, 0.19%)</title><rect x="38.8294%" y="53" width="0.1895%" height="15" fill="rgb(234,67,33)"/><text x="39.0794%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,164,243 samples, 0.32%)</title><rect x="38.7028%" y="101" width="0.3179%" height="15" fill="rgb(247,98,35)"/><text x="38.9528%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,124,782 samples, 0.31%)</title><rect x="38.7086%" y="85" width="0.3121%" height="15" fill="rgb(247,138,52)"/><text x="38.9586%" y="95.50"></text></g><g><title>generics_of (1,479,968 samples, 0.22%)</title><rect x="40.3049%" y="85" width="0.2174%" height="15" fill="rgb(213,79,30)"/><text x="40.5549%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,136,674 samples, 0.17%)</title><rect x="40.3554%" y="69" width="0.1670%" height="15" fill="rgb(246,177,23)"/><text x="40.6054%" y="79.50"></text></g><g><title>impl_trait_ref (829,689 samples, 0.12%)</title><rect x="40.5647%" y="85" width="0.1219%" height="15" fill="rgb(230,62,27)"/><text x="40.8147%" y="95.50"></text></g><g><title>predicates_of (1,251,701 samples, 0.18%)</title><rect x="40.6971%" y="85" width="0.1839%" height="15" fill="rgb(216,154,8)"/><text x="40.9471%" y="95.50"></text></g><g><title>predicates_defined_on (713,996 samples, 0.10%)</title><rect x="40.7761%" y="69" width="0.1049%" height="15" fill="rgb(244,35,45)"/><text x="41.0261%" y="79.50"></text></g><g><title>specializes (2,902,733 samples, 0.43%)</title><rect x="40.8810%" y="85" width="0.4264%" height="15" fill="rgb(251,115,12)"/><text x="41.1310%" y="95.50"></text></g><g><title>param_env (1,680,189 samples, 0.25%)</title><rect x="41.0606%" y="69" width="0.2468%" height="15" fill="rgb(240,54,50)"/><text x="41.3106%" y="79.50"></text></g><g><title>def_span (739,869 samples, 0.11%)</title><rect x="41.1987%" y="53" width="0.1087%" height="15" fill="rgb(233,84,52)"/><text x="41.4487%" y="63.50"></text></g><g><title>trait_impls_of (869,496 samples, 0.13%)</title><rect x="41.3111%" y="85" width="0.1277%" height="15" fill="rgb(207,117,47)"/><text x="41.5611%" y="95.50"></text></g><g><title>evaluate_obligation (16,498,393 samples, 2.42%)</title><rect x="39.0207%" y="101" width="2.4235%" height="15" fill="rgb(249,43,39)"/><text x="39.2707%" y="111.50">ev..</text></g><g><title>method_autoderef_steps (804,928 samples, 0.12%)</title><rect x="41.6970%" y="101" width="0.1182%" height="15" fill="rgb(209,38,44)"/><text x="41.9470%" y="111.50"></text></g><g><title>param_env (719,660 samples, 0.11%)</title><rect x="41.8517%" y="101" width="0.1057%" height="15" fill="rgb(236,212,23)"/><text x="42.1017%" y="111.50"></text></g><g><title>predicates_of (871,333 samples, 0.13%)</title><rect x="41.9688%" y="101" width="0.1280%" height="15" fill="rgb(242,79,21)"/><text x="42.2188%" y="111.50"></text></g><g><title>evaluate_obligation (1,629,066 samples, 0.24%)</title><rect x="42.2623%" y="85" width="0.2393%" height="15" fill="rgb(211,96,35)"/><text x="42.5123%" y="95.50"></text></g><g><title>typeck (2,180,352 samples, 0.32%)</title><rect x="42.1946%" y="101" width="0.3203%" height="15" fill="rgb(253,215,40)"/><text x="42.4446%" y="111.50"></text></g><g><title>item_bodies_checking (100,364,852 samples, 14.74%)</title><rect x="27.7959%" y="149" width="14.7427%" height="15" fill="rgb(211,81,21)"/><text x="28.0459%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (100,360,972 samples, 14.74%)</title><rect x="27.7964%" y="133" width="14.7421%" height="15" fill="rgb(208,190,38)"/><text x="28.0464%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (99,924,308 samples, 14.68%)</title><rect x="27.8606%" y="117" width="14.6780%" height="15" fill="rgb(235,213,38)"/><text x="28.1106%" y="127.50">typeck</text></g><g><title>item_types_checking (4,024,701 samples, 0.59%)</title><rect x="42.5386%" y="149" width="0.5912%" height="15" fill="rgb(237,122,38)"/><text x="42.7886%" y="159.50"></text></g><g><title>check_mod_item_types (4,013,821 samples, 0.59%)</title><rect x="42.5402%" y="133" width="0.5896%" height="15" fill="rgb(244,218,35)"/><text x="42.7902%" y="143.50"></text></g><g><title>fn_sig (1,006,712 samples, 0.15%)</title><rect x="43.3058%" y="117" width="0.1479%" height="15" fill="rgb(240,68,47)"/><text x="43.5558%" y="127.50"></text></g><g><title>named_region_map (990,809 samples, 0.15%)</title><rect x="43.5360%" y="101" width="0.1455%" height="15" fill="rgb(210,16,53)"/><text x="43.7860%" y="111.50"></text></g><g><title>resolve_lifetimes (907,419 samples, 0.13%)</title><rect x="43.5482%" y="85" width="0.1333%" height="15" fill="rgb(235,124,12)"/><text x="43.7982%" y="95.50"></text></g><g><title>generics_of (1,604,226 samples, 0.24%)</title><rect x="43.4536%" y="117" width="0.2356%" height="15" fill="rgb(224,169,11)"/><text x="43.7036%" y="127.50"></text></g><g><title>predicates_of (1,578,951 samples, 0.23%)</title><rect x="43.7224%" y="117" width="0.2319%" height="15" fill="rgb(250,166,2)"/><text x="43.9724%" y="127.50"></text></g><g><title>predicates_defined_on (1,370,730 samples, 0.20%)</title><rect x="43.7530%" y="101" width="0.2013%" height="15" fill="rgb(242,216,29)"/><text x="44.0030%" y="111.50"></text></g><g><title>type_collecting (6,025,951 samples, 0.89%)</title><rect x="43.1309%" y="149" width="0.8852%" height="15" fill="rgb(230,116,27)"/><text x="43.3809%" y="159.50"></text></g><g><title>collect_mod_item_types (6,009,941 samples, 0.88%)</title><rect x="43.1332%" y="133" width="0.8828%" height="15" fill="rgb(228,99,48)"/><text x="43.3832%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,707,688 samples, 0.25%)</title><rect x="45.1947%" y="117" width="0.2508%" height="15" fill="rgb(253,11,6)"/><text x="45.4447%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,698,968 samples, 0.25%)</title><rect x="45.1960%" y="101" width="0.2496%" height="15" fill="rgb(247,143,39)"/><text x="45.4460%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,684,438 samples, 0.25%)</title><rect x="45.1982%" y="85" width="0.2474%" height="15" fill="rgb(236,97,10)"/><text x="45.4482%" y="95.50"></text></g><g><title>evaluate_obligation (1,049,674 samples, 0.15%)</title><rect x="45.4456%" y="117" width="0.1542%" height="15" fill="rgb(233,208,19)"/><text x="45.6956%" y="127.50"></text></g><g><title>param_env (1,148,495 samples, 0.17%)</title><rect x="45.6850%" y="117" width="0.1687%" height="15" fill="rgb(216,164,2)"/><text x="45.9350%" y="127.50"></text></g><g><title>region_scope_tree (1,395,854 samples, 0.21%)</title><rect x="45.8642%" y="117" width="0.2050%" height="15" fill="rgb(220,129,5)"/><text x="46.1142%" y="127.50"></text></g><g><title>check_impl_item_well_formed (13,255,673 samples, 1.95%)</title><rect x="44.1323%" y="133" width="1.9471%" height="15" fill="rgb(242,17,10)"/><text x="44.3823%" y="143.50">c..</text></g><g><title>eval_to_const_value_raw (705,878 samples, 0.10%)</title><rect x="46.6730%" y="117" width="0.1037%" height="15" fill="rgb(242,107,0)"/><text x="46.9230%" y="127.50"></text></g><g><title>eval_to_const_value_raw (702,548 samples, 0.10%)</title><rect x="46.6735%" y="101" width="0.1032%" height="15" fill="rgb(251,28,31)"/><text x="46.9235%" y="111.50"></text></g><g><title>eval_to_allocation_raw (694,547 samples, 0.10%)</title><rect x="46.6746%" y="85" width="0.1020%" height="15" fill="rgb(233,223,10)"/><text x="46.9246%" y="95.50"></text></g><g><title>evaluate_obligation (1,383,096 samples, 0.20%)</title><rect x="46.7767%" y="117" width="0.2032%" height="15" fill="rgb(215,21,27)"/><text x="47.0267%" y="127.50"></text></g><g><title>param_env (897,179 samples, 0.13%)</title><rect x="47.0143%" y="117" width="0.1318%" height="15" fill="rgb(232,23,21)"/><text x="47.2643%" y="127.50"></text></g><g><title>check_item_well_formed (7,817,783 samples, 1.15%)</title><rect x="46.0794%" y="133" width="1.1484%" height="15" fill="rgb(244,5,23)"/><text x="46.3294%" y="143.50"></text></g><g><title>analysis (251,529,000 samples, 36.95%)</title><rect x="10.2942%" y="181" width="36.9474%" height="15" fill="rgb(226,81,46)"/><text x="10.5442%" y="191.50">analysis</text></g><g><title>type_check_crate (152,030,557 samples, 22.33%)</title><rect x="24.9097%" y="165" width="22.3320%" height="15" fill="rgb(247,70,30)"/><text x="25.1597%" y="175.50">type_check_crate</text></g><g><title>wf_checking (21,929,033 samples, 3.22%)</title><rect x="44.0204%" y="149" width="3.2212%" height="15" fill="rgb(212,68,19)"/><text x="44.2704%" y="159.50">wf_..</text></g><g><title>const_caller_location (1,415,013 samples, 0.21%)</title><rect x="54.9826%" y="149" width="0.2079%" height="15" fill="rgb(240,187,13)"/><text x="55.2326%" y="159.50"></text></g><g><title>predicates_of (990,887 samples, 0.15%)</title><rect x="56.0911%" y="117" width="0.1456%" height="15" fill="rgb(223,113,26)"/><text x="56.3411%" y="127.50"></text></g><g><title>param_env (2,696,092 samples, 0.40%)</title><rect x="55.8411%" y="133" width="0.3960%" height="15" fill="rgb(206,192,2)"/><text x="56.0911%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,124,966 samples, 0.17%)</title><rect x="56.2371%" y="133" width="0.1652%" height="15" fill="rgb(241,108,4)"/><text x="56.4871%" y="143.50"></text></g><g><title>normalize_projection_ty (803,431 samples, 0.12%)</title><rect x="56.2843%" y="117" width="0.1180%" height="15" fill="rgb(247,173,49)"/><text x="56.5343%" y="127.50"></text></g><g><title>fn_abi_of_instance (8,258,262 samples, 1.21%)</title><rect x="55.1949%" y="149" width="1.2131%" height="15" fill="rgb(224,114,35)"/><text x="55.4449%" y="159.50"></text></g><g><title>symbol_name (795,846 samples, 0.12%)</title><rect x="56.5425%" y="149" width="0.1169%" height="15" fill="rgb(245,159,27)"/><text x="56.7925%" y="159.50"></text></g><g><title>codegen_module (61,329,305 samples, 9.01%)</title><rect x="47.6568%" y="165" width="9.0087%" height="15" fill="rgb(245,172,44)"/><text x="47.9068%" y="175.50">codegen_module</text></g><g><title>codegen_crate (64,241,564 samples, 9.44%)</title><rect x="47.2425%" y="181" width="9.4365%" height="15" fill="rgb(236,23,11)"/><text x="47.4925%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (175,870,075 samples, 25.83%)</title><rect x="56.7051%" y="165" width="25.8338%" height="15" fill="rgb(205,117,38)"/><text x="56.9551%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (166,044,280 samples, 24.39%)</title><rect x="58.1485%" y="149" width="24.3904%" height="15" fill="rgb(237,72,25)"/><text x="58.3985%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (186,935,636 samples, 27.46%)</title><rect x="56.6791%" y="181" width="27.4592%" height="15" fill="rgb(244,70,9)"/><text x="56.9291%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,888,040 samples, 1.60%)</title><rect x="82.5389%" y="165" width="1.5994%" height="15" fill="rgb(217,125,39)"/><text x="82.7889%" y="175.50"></text></g><g><title>metadata_register_crate (1,266,143 samples, 0.19%)</title><rect x="88.1009%" y="133" width="0.1860%" height="15" fill="rgb(235,36,10)"/><text x="88.3509%" y="143.50"></text></g><g><title>macro_expand_crate (28,109,187 samples, 4.13%)</title><rect x="84.2423%" y="165" width="4.1290%" height="15" fill="rgb(251,123,47)"/><text x="84.4923%" y="175.50">macr..</text></g><g><title>expand_crate (28,099,327 samples, 4.13%)</title><rect x="84.2438%" y="149" width="4.1275%" height="15" fill="rgb(221,13,13)"/><text x="84.4938%" y="159.50">expa..</text></g><g><title>late_resolve_crate (5,159,312 samples, 0.76%)</title><rect x="88.4606%" y="149" width="0.7579%" height="15" fill="rgb(238,131,9)"/><text x="88.7106%" y="159.50"></text></g><g><title>configure_and_expand (34,904,345 samples, 5.13%)</title><rect x="84.1383%" y="181" width="5.1271%" height="15" fill="rgb(211,50,8)"/><text x="84.3883%" y="191.50">config..</text></g><g><title>resolve_crate (5,858,209 samples, 0.86%)</title><rect x="88.4049%" y="165" width="0.8605%" height="15" fill="rgb(245,182,24)"/><text x="88.6549%" y="175.50"></text></g><g><title>drop_ast (762,257 samples, 0.11%)</title><rect x="89.2654%" y="181" width="0.1120%" height="15" fill="rgb(242,14,37)"/><text x="89.5154%" y="191.50"></text></g><g><title>early_lint_checks (1,103,731 samples, 0.16%)</title><rect x="89.3804%" y="181" width="0.1621%" height="15" fill="rgb(246,228,12)"/><text x="89.6304%" y="191.50"></text></g><g><title>free_global_ctxt (6,900,131 samples, 1.01%)</title><rect x="89.5425%" y="181" width="1.0136%" height="15" fill="rgb(213,55,15)"/><text x="89.7925%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,009,521 samples, 0.15%)</title><rect x="92.5546%" y="85" width="0.1483%" height="15" fill="rgb(209,9,3)"/><text x="92.8046%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,752,890 samples, 0.70%)</title><rect x="92.7029%" y="85" width="0.6982%" height="15" fill="rgb(230,59,30)"/><text x="92.9529%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,247,469 samples, 0.18%)</title><rect x="93.4394%" y="69" width="0.1832%" height="15" fill="rgb(209,121,21)"/><text x="93.6894%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,227,749 samples, 0.18%)</title><rect x="93.4423%" y="53" width="0.1803%" height="15" fill="rgb(220,109,13)"/><text x="93.6923%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,183,709 samples, 0.17%)</title><rect x="93.4487%" y="37" width="0.1739%" height="15" fill="rgb(232,18,1)"/><text x="93.6987%" y="47.50"></text></g><g><title>optimized_mir (12,793,904 samples, 1.88%)</title><rect x="91.7470%" y="101" width="1.8793%" height="15" fill="rgb(215,41,42)"/><text x="91.9970%" y="111.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,373,001 samples, 0.20%)</title><rect x="93.4246%" y="85" width="0.2017%" height="15" fill="rgb(224,123,36)"/><text x="93.6746%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,992,163 samples, 0.29%)</title><rect x="93.7100%" y="85" width="0.2926%" height="15" fill="rgb(240,125,3)"/><text x="93.9600%" y="95.50"></text></g><g><title>resolve_instance (3,078,158 samples, 0.45%)</title><rect x="93.6263%" y="101" width="0.4522%" height="15" fill="rgb(205,98,50)"/><text x="93.8763%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (19,277,316 samples, 2.83%)</title><rect x="91.3378%" y="117" width="2.8317%" height="15" fill="rgb(205,185,37)"/><text x="91.5878%" y="127.50">mo..</text></g><g><title>monomorphization_collector (19,480,208 samples, 2.86%)</title><rect x="91.3372%" y="133" width="2.8615%" height="15" fill="rgb(238,207,15)"/><text x="91.5872%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,613,117 samples, 0.24%)</title><rect x="94.1993%" y="117" width="0.2370%" height="15" fill="rgb(213,199,42)"/><text x="94.4493%" y="127.50"></text></g><g><title>symbol_name (1,455,485 samples, 0.21%)</title><rect x="94.2225%" y="101" width="0.2138%" height="15" fill="rgb(235,201,11)"/><text x="94.4725%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (21,861,733 samples, 3.21%)</title><rect x="91.3320%" y="149" width="3.2113%" height="15" fill="rgb(207,46,11)"/><text x="91.5820%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,346,235 samples, 0.34%)</title><rect x="94.1986%" y="133" width="0.3446%" height="15" fill="rgb(241,35,35)"/><text x="94.4486%" y="143.50"></text></g><g><title>cgu_partitioning (728,557 samples, 0.11%)</title><rect x="94.4363%" y="117" width="0.1070%" height="15" fill="rgb(243,32,47)"/><text x="94.6863%" y="127.50"></text></g><g><title>exported_symbols (22,374,088 samples, 3.29%)</title><rect x="91.3202%" y="165" width="3.2866%" height="15" fill="rgb(247,202,23)"/><text x="91.5702%" y="175.50">exp..</text></g><g><title>layout_of (1,069,199 samples, 0.16%)</title><rect x="95.7444%" y="149" width="0.1571%" height="15" fill="rgb(219,102,11)"/><text x="95.9944%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,641,683 samples, 0.83%)</title><rect x="95.9015%" y="149" width="0.8287%" height="15" fill="rgb(243,110,44)"/><text x="96.1515%" y="159.50"></text></g><g><title>optimized_mir (14,145,827 samples, 2.08%)</title><rect x="94.7211%" y="165" width="2.0779%" height="15" fill="rgb(222,74,54)"/><text x="94.9711%" y="175.50">o..</text></g><g><title>generate_crate_metadata (42,856,576 samples, 6.30%)</title><rect x="90.5561%" y="181" width="6.2953%" height="15" fill="rgb(216,99,12)"/><text x="90.8061%" y="191.50">generate..</text></g><g><title>hir_lowering (9,953,121 samples, 1.46%)</title><rect x="96.8513%" y="181" width="1.4620%" height="15" fill="rgb(226,22,26)"/><text x="97.1013%" y="191.50"></text></g><g><title>link_crate (2,512,436 samples, 0.37%)</title><rect x="98.3172%" y="165" width="0.3691%" height="15" fill="rgb(217,163,10)"/><text x="98.5672%" y="175.50"></text></g><g><title>link_binary (2,458,456 samples, 0.36%)</title><rect x="98.3251%" y="149" width="0.3611%" height="15" fill="rgb(213,25,53)"/><text x="98.5751%" y="159.50"></text></g><g><title>link_rlib (1,835,109 samples, 0.27%)</title><rect x="98.4167%" y="133" width="0.2696%" height="15" fill="rgb(252,105,26)"/><text x="98.6667%" y="143.50"></text></g><g><title>link (2,549,996 samples, 0.37%)</title><rect x="98.3134%" y="181" width="0.3746%" height="15" fill="rgb(220,39,43)"/><text x="98.5634%" y="191.50"></text></g><g><title>parse_crate (3,775,719 samples, 0.55%)</title><rect x="98.6879%" y="181" width="0.5546%" height="15" fill="rgb(229,68,48)"/><text x="98.9379%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,330,093 samples, 0.64%)</title><rect x="99.2735%" y="181" width="0.6361%" height="15" fill="rgb(252,8,32)"/><text x="99.5235%" y="191.50"></text></g><g><title>all (680,775,983 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (680,775,983 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>