<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (13,747,437 samples, 8.95%)</title><rect x="0.4884%" y="229" width="8.9464%" height="15" fill="rgb(227,0,7)"/><text x="0.7384%" y="239.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (163,621 samples, 0.11%)</title><rect x="14.4813%" y="133" width="0.1065%" height="15" fill="rgb(217,0,24)"/><text x="14.7313%" y="143.50"></text></g><g><title>adt_drop_tys (174,811 samples, 0.11%)</title><rect x="15.4775%" y="101" width="0.1138%" height="15" fill="rgb(221,193,54)"/><text x="15.7275%" y="111.50"></text></g><g><title>is_copy_raw (1,086,750 samples, 0.71%)</title><rect x="15.5913%" y="101" width="0.7072%" height="15" fill="rgb(248,212,6)"/><text x="15.8413%" y="111.50"></text></g><g><title>evaluate_obligation (992,800 samples, 0.65%)</title><rect x="15.6524%" y="85" width="0.6461%" height="15" fill="rgb(208,68,35)"/><text x="15.9024%" y="95.50"></text></g><g><title>trait_impls_of (171,642 samples, 0.11%)</title><rect x="16.1868%" y="69" width="0.1117%" height="15" fill="rgb(232,128,0)"/><text x="16.4368%" y="79.50"></text></g><g><title>needs_drop_raw (1,351,932 samples, 0.88%)</title><rect x="15.4212%" y="117" width="0.8798%" height="15" fill="rgb(207,160,47)"/><text x="15.6712%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (398,096 samples, 0.26%)</title><rect x="16.4329%" y="101" width="0.2591%" height="15" fill="rgb(228,23,34)"/><text x="16.6829%" y="111.50"></text></g><g><title>impl_parent (317,255 samples, 0.21%)</title><rect x="17.0193%" y="85" width="0.2065%" height="15" fill="rgb(218,30,26)"/><text x="17.2693%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (208,144 samples, 0.14%)</title><rect x="17.0903%" y="69" width="0.1355%" height="15" fill="rgb(220,122,19)"/><text x="17.3403%" y="79.50"></text></g><g><title>specialization_graph_of (1,602,736 samples, 1.04%)</title><rect x="16.7435%" y="101" width="1.0430%" height="15" fill="rgb(250,228,42)"/><text x="16.9935%" y="111.50"></text></g><g><title>impl_trait_ref (861,606 samples, 0.56%)</title><rect x="17.2258%" y="85" width="0.5607%" height="15" fill="rgb(240,193,28)"/><text x="17.4758%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (766,586 samples, 0.50%)</title><rect x="17.2876%" y="69" width="0.4989%" height="15" fill="rgb(216,20,37)"/><text x="17.5376%" y="79.50"></text></g><g><title>resolve_instance (2,326,355 samples, 1.51%)</title><rect x="16.3010%" y="117" width="1.5139%" height="15" fill="rgb(206,188,39)"/><text x="16.5510%" y="127.50"></text></g><g><title>thir_body (399,074 samples, 0.26%)</title><rect x="17.8251%" y="117" width="0.2597%" height="15" fill="rgb(217,207,13)"/><text x="18.0751%" y="127.50"></text></g><g><title>mir_const (6,408,027 samples, 4.17%)</title><rect x="13.9320%" y="165" width="4.1701%" height="15" fill="rgb(231,73,38)"/><text x="14.1820%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (5,814,121 samples, 3.78%)</title><rect x="14.3185%" y="149" width="3.7836%" height="15" fill="rgb(225,20,46)"/><text x="14.5685%" y="159.50">unsa..</text></g><g><title>mir_built (5,400,427 samples, 3.51%)</title><rect x="14.5877%" y="133" width="3.5144%" height="15" fill="rgb(210,31,41)"/><text x="14.8377%" y="143.50">mir..</text></g><g><title>mir_promoted (6,802,329 samples, 4.43%)</title><rect x="13.6920%" y="181" width="4.4267%" height="15" fill="rgb(221,200,47)"/><text x="13.9420%" y="191.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (286,641 samples, 0.19%)</title><rect x="18.1187%" y="181" width="0.1865%" height="15" fill="rgb(226,26,5)"/><text x="18.3687%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (509,084 samples, 0.33%)</title><rect x="18.3053%" y="181" width="0.3313%" height="15" fill="rgb(249,33,26)"/><text x="18.5553%" y="191.50"></text></g><g><title>normalize_projection_ty (283,353 samples, 0.18%)</title><rect x="18.4522%" y="165" width="0.1844%" height="15" fill="rgb(235,183,28)"/><text x="18.7022%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,562,364 samples, 1.02%)</title><rect x="18.6826%" y="181" width="1.0167%" height="15" fill="rgb(221,5,38)"/><text x="18.9326%" y="191.50"></text></g><g><title>MIR_borrow_checking (15,433,885 samples, 10.04%)</title><rect x="9.6610%" y="213" width="10.0438%" height="15" fill="rgb(247,18,42)"/><text x="9.9110%" y="223.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (15,369,063 samples, 10.00%)</title><rect x="9.7032%" y="197" width="10.0016%" height="15" fill="rgb(241,131,45)"/><text x="9.9532%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (225,123 samples, 0.15%)</title><rect x="19.7785%" y="213" width="0.1465%" height="15" fill="rgb(249,31,29)"/><text x="20.0285%" y="223.50"></text></g><g><title>codegen_fn_attrs (347,703 samples, 0.23%)</title><rect x="20.0921%" y="181" width="0.2263%" height="15" fill="rgb(225,111,53)"/><text x="20.3421%" y="191.50"></text></g><g><title>check_mod_attrs (574,348 samples, 0.37%)</title><rect x="19.9447%" y="197" width="0.3738%" height="15" fill="rgb(238,160,17)"/><text x="20.1947%" y="207.50"></text></g><g><title>lookup_deprecation_entry (176,881 samples, 0.12%)</title><rect x="20.6052%" y="181" width="0.1151%" height="15" fill="rgb(214,148,48)"/><text x="20.8552%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (478,465 samples, 0.31%)</title><rect x="20.4650%" y="197" width="0.3114%" height="15" fill="rgb(232,36,49)"/><text x="20.7150%" y="207.50"></text></g><g><title>misc_checking_1 (1,378,435 samples, 0.90%)</title><rect x="19.9253%" y="213" width="0.8970%" height="15" fill="rgb(209,103,24)"/><text x="20.1753%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (258,623 samples, 0.17%)</title><rect x="20.8232%" y="197" width="0.1683%" height="15" fill="rgb(229,88,8)"/><text x="21.0732%" y="207.50"></text></g><g><title>check_mod_liveness (216,423 samples, 0.14%)</title><rect x="20.8506%" y="181" width="0.1408%" height="15" fill="rgb(213,181,19)"/><text x="21.1006%" y="191.50"></text></g><g><title>misc_checking_2 (482,105 samples, 0.31%)</title><rect x="20.8223%" y="213" width="0.3137%" height="15" fill="rgb(254,191,54)"/><text x="21.0723%" y="223.50"></text></g><g><title>match_checking (222,242 samples, 0.14%)</title><rect x="20.9915%" y="197" width="0.1446%" height="15" fill="rgb(241,83,37)"/><text x="21.2415%" y="207.50"></text></g><g><title>check_match (206,701 samples, 0.13%)</title><rect x="21.0016%" y="181" width="0.1345%" height="15" fill="rgb(233,36,39)"/><text x="21.2516%" y="191.50"></text></g><g><title>death_checking (173,982 samples, 0.11%)</title><rect x="21.2169%" y="197" width="0.1132%" height="15" fill="rgb(226,3,54)"/><text x="21.4669%" y="207.50"></text></g><g><title>param_env (189,180 samples, 0.12%)</title><rect x="21.4568%" y="165" width="0.1231%" height="15" fill="rgb(245,192,40)"/><text x="21.7068%" y="175.50"></text></g><g><title>crate_lints (385,724 samples, 0.25%)</title><rect x="21.3310%" y="181" width="0.2510%" height="15" fill="rgb(238,167,29)"/><text x="21.5810%" y="191.50"></text></g><g><title>lint_checking (536,846 samples, 0.35%)</title><rect x="21.3301%" y="197" width="0.3494%" height="15" fill="rgb(232,182,51)"/><text x="21.5801%" y="207.50"></text></g><g><title>privacy_checking_modules (701,198 samples, 0.46%)</title><rect x="21.7672%" y="197" width="0.4563%" height="15" fill="rgb(231,60,39)"/><text x="22.0172%" y="207.50"></text></g><g><title>check_mod_privacy (697,948 samples, 0.45%)</title><rect x="21.7693%" y="181" width="0.4542%" height="15" fill="rgb(208,69,12)"/><text x="22.0193%" y="191.50"></text></g><g><title>visibility (240,123 samples, 0.16%)</title><rect x="22.0672%" y="165" width="0.1563%" height="15" fill="rgb(235,93,37)"/><text x="22.3172%" y="175.50"></text></g><g><title>misc_checking_3 (1,687,948 samples, 1.10%)</title><rect x="21.1361%" y="213" width="1.0985%" height="15" fill="rgb(213,116,39)"/><text x="21.3861%" y="223.50"></text></g><g><title>coherence_checking (190,612 samples, 0.12%)</title><rect x="22.2681%" y="197" width="0.1240%" height="15" fill="rgb(222,207,29)"/><text x="22.5181%" y="207.50"></text></g><g><title>associated_item (299,405 samples, 0.19%)</title><rect x="29.5623%" y="133" width="0.1948%" height="15" fill="rgb(206,96,30)"/><text x="29.8123%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (223,974 samples, 0.15%)</title><rect x="29.6114%" y="117" width="0.1458%" height="15" fill="rgb(218,138,4)"/><text x="29.8614%" y="127.50"></text></g><g><title>associated_items (431,696 samples, 0.28%)</title><rect x="29.4911%" y="149" width="0.2809%" height="15" fill="rgb(250,191,14)"/><text x="29.7411%" y="159.50"></text></g><g><title>impl_trait_ref (281,583 samples, 0.18%)</title><rect x="30.1155%" y="53" width="0.1832%" height="15" fill="rgb(239,60,40)"/><text x="30.3655%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (257,653 samples, 0.17%)</title><rect x="30.1311%" y="37" width="0.1677%" height="15" fill="rgb(206,27,48)"/><text x="30.3811%" y="47.50"></text></g><g><title>coherent_trait (488,935 samples, 0.32%)</title><rect x="30.0018%" y="85" width="0.3182%" height="15" fill="rgb(225,35,8)"/><text x="30.2518%" y="95.50"></text></g><g><title>specialization_graph_of (487,085 samples, 0.32%)</title><rect x="30.0030%" y="69" width="0.3170%" height="15" fill="rgb(250,213,24)"/><text x="30.2530%" y="79.50"></text></g><g><title>adt_destructor (501,535 samples, 0.33%)</title><rect x="29.9948%" y="117" width="0.3264%" height="15" fill="rgb(247,123,22)"/><text x="30.2448%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (498,475 samples, 0.32%)</title><rect x="29.9968%" y="101" width="0.3244%" height="15" fill="rgb(231,138,38)"/><text x="30.2468%" y="111.50"></text></g><g><title>adt_dtorck_constraint (717,708 samples, 0.47%)</title><rect x="29.9485%" y="133" width="0.4671%" height="15" fill="rgb(231,145,46)"/><text x="30.1985%" y="143.50"></text></g><g><title>dropck_outlives (971,592 samples, 0.63%)</title><rect x="29.7956%" y="149" width="0.6323%" height="15" fill="rgb(251,118,11)"/><text x="30.0456%" y="159.50"></text></g><g><title>trait_impls_of (491,687 samples, 0.32%)</title><rect x="31.2625%" y="133" width="0.3200%" height="15" fill="rgb(217,147,25)"/><text x="31.5125%" y="143.50"></text></g><g><title>evaluate_obligation (1,777,018 samples, 1.16%)</title><rect x="30.4279%" y="149" width="1.1564%" height="15" fill="rgb(247,81,37)"/><text x="30.6779%" y="159.50"></text></g><g><title>evaluate_obligation (328,224 samples, 0.21%)</title><rect x="32.4676%" y="133" width="0.2136%" height="15" fill="rgb(209,12,38)"/><text x="32.7176%" y="143.50"></text></g><g><title>method_autoderef_steps (1,078,120 samples, 0.70%)</title><rect x="31.9849%" y="149" width="0.7016%" height="15" fill="rgb(227,1,9)"/><text x="32.2349%" y="159.50"></text></g><g><title>predicates_of (322,370 samples, 0.21%)</title><rect x="32.7087%" y="149" width="0.2098%" height="15" fill="rgb(248,47,43)"/><text x="32.9587%" y="159.50"></text></g><g><title>predicates_defined_on (237,140 samples, 0.15%)</title><rect x="32.7642%" y="133" width="0.1543%" height="15" fill="rgb(221,10,30)"/><text x="33.0142%" y="143.50"></text></g><g><title>item_bodies_checking (16,275,455 samples, 10.59%)</title><rect x="22.4212%" y="197" width="10.5915%" height="15" fill="rgb(210,229,1)"/><text x="22.6712%" y="207.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (16,272,685 samples, 10.59%)</title><rect x="22.4230%" y="181" width="10.5897%" height="15" fill="rgb(222,148,37)"/><text x="22.6730%" y="191.50">typeck_item_bod..</text></g><g><title>typeck (16,225,135 samples, 10.56%)</title><rect x="22.4540%" y="165" width="10.5587%" height="15" fill="rgb(234,67,33)"/><text x="22.7040%" y="175.50">typeck</text></g><g><title>item_types_checking (1,539,986 samples, 1.00%)</title><rect x="33.0127%" y="197" width="1.0022%" height="15" fill="rgb(247,98,35)"/><text x="33.2627%" y="207.50"></text></g><g><title>check_mod_item_types (1,532,196 samples, 1.00%)</title><rect x="33.0178%" y="181" width="0.9971%" height="15" fill="rgb(247,138,52)"/><text x="33.2678%" y="191.50"></text></g><g><title>fn_sig (424,084 samples, 0.28%)</title><rect x="34.2367%" y="165" width="0.2760%" height="15" fill="rgb(213,79,30)"/><text x="34.4867%" y="175.50"></text></g><g><title>is_late_bound_map (166,293 samples, 0.11%)</title><rect x="34.6171%" y="149" width="0.1082%" height="15" fill="rgb(246,177,23)"/><text x="34.8671%" y="159.50"></text></g><g><title>named_region_map (181,432 samples, 0.12%)</title><rect x="34.7253%" y="149" width="0.1181%" height="15" fill="rgb(230,62,27)"/><text x="34.9753%" y="159.50"></text></g><g><title>generics_of (533,446 samples, 0.35%)</title><rect x="34.5127%" y="165" width="0.3471%" height="15" fill="rgb(216,154,8)"/><text x="34.7627%" y="175.50"></text></g><g><title>late_bound_vars_map (288,371 samples, 0.19%)</title><rect x="35.1750%" y="117" width="0.1877%" height="15" fill="rgb(244,35,45)"/><text x="35.4250%" y="127.50"></text></g><g><title>resolve_lifetimes (272,701 samples, 0.18%)</title><rect x="35.1852%" y="101" width="0.1775%" height="15" fill="rgb(251,115,12)"/><text x="35.4352%" y="111.50"></text></g><g><title>explicit_predicates_of (790,155 samples, 0.51%)</title><rect x="34.9683%" y="133" width="0.5142%" height="15" fill="rgb(240,54,50)"/><text x="35.2183%" y="143.50"></text></g><g><title>predicates_of (952,747 samples, 0.62%)</title><rect x="34.8768%" y="165" width="0.6200%" height="15" fill="rgb(233,84,52)"/><text x="35.1268%" y="175.50"></text></g><g><title>predicates_defined_on (899,686 samples, 0.59%)</title><rect x="34.9113%" y="149" width="0.5855%" height="15" fill="rgb(207,117,47)"/><text x="35.1613%" y="159.50"></text></g><g><title>type_collecting (2,641,928 samples, 1.72%)</title><rect x="34.0164%" y="197" width="1.7193%" height="15" fill="rgb(249,43,39)"/><text x="34.2664%" y="207.50"></text></g><g><title>collect_mod_item_types (2,619,738 samples, 1.70%)</title><rect x="34.0308%" y="181" width="1.7048%" height="15" fill="rgb(209,38,44)"/><text x="34.2808%" y="191.50"></text></g><g><title>type_of (227,454 samples, 0.15%)</title><rect x="35.5876%" y="165" width="0.1480%" height="15" fill="rgb(236,212,23)"/><text x="35.8376%" y="175.50"></text></g><g><title>evaluate_obligation (1,617,356 samples, 1.05%)</title><rect x="39.2382%" y="165" width="1.0525%" height="15" fill="rgb(242,79,21)"/><text x="39.4882%" y="175.50"></text></g><g><title>implied_outlives_bounds (641,607 samples, 0.42%)</title><rect x="40.2907%" y="165" width="0.4175%" height="15" fill="rgb(211,96,35)"/><text x="40.5407%" y="175.50"></text></g><g><title>param_env (560,766 samples, 0.36%)</title><rect x="40.7082%" y="165" width="0.3649%" height="15" fill="rgb(253,215,40)"/><text x="40.9582%" y="175.50"></text></g><g><title>check_impl_item_well_formed (8,194,508 samples, 5.33%)</title><rect x="35.9067%" y="181" width="5.3327%" height="15" fill="rgb(211,81,21)"/><text x="36.1567%" y="191.50">check_i..</text></g><g><title>region_scope_tree (255,543 samples, 0.17%)</title><rect x="41.0731%" y="165" width="0.1663%" height="15" fill="rgb(208,190,38)"/><text x="41.3231%" y="175.50"></text></g><g><title>evaluate_obligation (188,921 samples, 0.12%)</title><rect x="42.3427%" y="165" width="0.1229%" height="15" fill="rgb(235,213,38)"/><text x="42.5927%" y="175.50"></text></g><g><title>param_env (473,435 samples, 0.31%)</title><rect x="42.5612%" y="165" width="0.3081%" height="15" fill="rgb(237,122,38)"/><text x="42.8112%" y="175.50"></text></g><g><title>check_item_well_formed (2,742,739 samples, 1.78%)</title><rect x="41.2394%" y="181" width="1.7849%" height="15" fill="rgb(244,218,35)"/><text x="41.4894%" y="191.50">c..</text></g><g><title>evaluate_obligation (1,142,779 samples, 0.74%)</title><rect x="44.1156%" y="165" width="0.7437%" height="15" fill="rgb(240,68,47)"/><text x="44.3656%" y="175.50"></text></g><g><title>implied_outlives_bounds (278,795 samples, 0.18%)</title><rect x="44.8764%" y="165" width="0.1814%" height="15" fill="rgb(210,16,53)"/><text x="45.1264%" y="175.50"></text></g><g><title>analysis (55,129,563 samples, 35.88%)</title><rect x="9.4348%" y="229" width="35.8764%" height="15" fill="rgb(235,124,12)"/><text x="9.6848%" y="239.50">analysis</text></g><g><title>type_check_crate (35,460,741 samples, 23.08%)</title><rect x="22.2345%" y="213" width="23.0766%" height="15" fill="rgb(224,169,11)"/><text x="22.4845%" y="223.50">type_check_crate</text></g><g><title>wf_checking (14,711,858 samples, 9.57%)</title><rect x="35.7372%" y="197" width="9.5740%" height="15" fill="rgb(250,166,2)"/><text x="35.9872%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,514,058 samples, 2.29%)</title><rect x="43.0243%" y="181" width="2.2868%" height="15" fill="rgb(242,216,29)"/><text x="43.2743%" y="191.50">c..</text></g><g><title>layout_of (277,973 samples, 0.18%)</title><rect x="50.7367%" y="165" width="0.1809%" height="15" fill="rgb(230,116,27)"/><text x="50.9867%" y="175.50"></text></g><g><title>layout_of (365,734 samples, 0.24%)</title><rect x="50.7057%" y="181" width="0.2380%" height="15" fill="rgb(228,99,48)"/><text x="50.9557%" y="191.50"></text></g><g><title>param_env (311,014 samples, 0.20%)</title><rect x="50.9437%" y="181" width="0.2024%" height="15" fill="rgb(253,11,6)"/><text x="51.1937%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (172,373 samples, 0.11%)</title><rect x="51.1461%" y="181" width="0.1122%" height="15" fill="rgb(247,143,39)"/><text x="51.3961%" y="191.50"></text></g><g><title>fn_abi_of_instance (1,362,104 samples, 0.89%)</title><rect x="50.3778%" y="197" width="0.8864%" height="15" fill="rgb(236,97,10)"/><text x="50.6278%" y="207.50"></text></g><g><title>layout_of (166,482 samples, 0.11%)</title><rect x="51.3663%" y="181" width="0.1083%" height="15" fill="rgb(233,208,19)"/><text x="51.6163%" y="191.50"></text></g><g><title>layout_of (350,013 samples, 0.23%)</title><rect x="51.2898%" y="197" width="0.2278%" height="15" fill="rgb(216,164,2)"/><text x="51.5398%" y="207.50"></text></g><g><title>codegen_module (8,609,141 samples, 5.60%)</title><rect x="45.9888%" y="213" width="5.6025%" height="15" fill="rgb(220,129,5)"/><text x="46.2388%" y="223.50">codegen..</text></g><g><title>codegen_crate (9,718,104 samples, 6.32%)</title><rect x="45.3174%" y="229" width="6.3242%" height="15" fill="rgb(242,17,10)"/><text x="45.5674%" y="239.50">codegen_..</text></g><g><title>LLVM_module_codegen (31,437,427 samples, 20.46%)</title><rect x="51.7077%" y="213" width="20.4584%" height="15" fill="rgb(242,107,0)"/><text x="51.9577%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (29,499,998 samples, 19.20%)</title><rect x="52.9685%" y="197" width="19.1976%" height="15" fill="rgb(251,28,31)"/><text x="53.2185%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (33,740,952 samples, 21.96%)</title><rect x="51.6416%" y="229" width="21.9574%" height="15" fill="rgb(233,223,10)"/><text x="51.8916%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,202,045 samples, 1.43%)</title><rect x="72.1660%" y="213" width="1.4330%" height="15" fill="rgb(215,21,27)"/><text x="72.4160%" y="223.50"></text></g><g><title>AST_validation (176,491 samples, 0.11%)</title><rect x="73.7320%" y="213" width="0.1149%" height="15" fill="rgb(232,23,21)"/><text x="73.9820%" y="223.50"></text></g><g><title>metadata_register_crate (2,651,667 samples, 1.73%)</title><rect x="83.1097%" y="181" width="1.7256%" height="15" fill="rgb(244,5,23)"/><text x="83.3597%" y="191.50"></text></g><g><title>metadata_register_crate (956,840 samples, 0.62%)</title><rect x="84.2126%" y="165" width="0.6227%" height="15" fill="rgb(226,81,46)"/><text x="84.4626%" y="175.50"></text></g><g><title>macro_expand_crate (16,904,432 samples, 11.00%)</title><rect x="73.9426%" y="213" width="11.0008%" height="15" fill="rgb(247,70,30)"/><text x="74.1926%" y="223.50">macro_expand_cra..</text></g><g><title>expand_crate (16,886,321 samples, 10.99%)</title><rect x="73.9544%" y="197" width="10.9890%" height="15" fill="rgb(212,68,19)"/><text x="74.2044%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (166,102 samples, 0.11%)</title><rect x="84.8353%" y="181" width="0.1081%" height="15" fill="rgb(240,187,13)"/><text x="85.0853%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (336,654 samples, 0.22%)</title><rect x="84.9466%" y="213" width="0.2191%" height="15" fill="rgb(223,113,26)"/><text x="85.1966%" y="223.50"></text></g><g><title>finalize_imports (306,113 samples, 0.20%)</title><rect x="85.1715%" y="197" width="0.1992%" height="15" fill="rgb(206,192,2)"/><text x="85.4215%" y="207.50"></text></g><g><title>late_resolve_crate (1,899,581 samples, 1.24%)</title><rect x="85.3840%" y="197" width="1.2362%" height="15" fill="rgb(241,108,4)"/><text x="85.6340%" y="207.50"></text></g><g><title>configure_and_expand (20,145,546 samples, 13.11%)</title><rect x="73.5991%" y="229" width="13.1100%" height="15" fill="rgb(247,173,49)"/><text x="73.8491%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,371,615 samples, 1.54%)</title><rect x="85.1657%" y="213" width="1.5434%" height="15" fill="rgb(224,114,35)"/><text x="85.4157%" y="223.50"></text></g><g><title>early_lint_checks (343,634 samples, 0.22%)</title><rect x="86.8179%" y="229" width="0.2236%" height="15" fill="rgb(245,159,27)"/><text x="87.0679%" y="239.50"></text></g><g><title>free_global_ctxt (2,713,869 samples, 1.77%)</title><rect x="87.0415%" y="229" width="1.7661%" height="15" fill="rgb(245,172,44)"/><text x="87.2915%" y="239.50"></text></g><g><title>adt_sized_constraint (241,783 samples, 0.16%)</title><rect x="89.9659%" y="101" width="0.1573%" height="15" fill="rgb(236,23,11)"/><text x="90.2159%" y="111.50"></text></g><g><title>adt_def (240,193 samples, 0.16%)</title><rect x="89.9670%" y="85" width="0.1563%" height="15" fill="rgb(205,117,38)"/><text x="90.2170%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (239,763 samples, 0.16%)</title><rect x="89.9672%" y="69" width="0.1560%" height="15" fill="rgb(237,72,25)"/><text x="90.2172%" y="79.50"></text></g><g><title>item_attrs (234,953 samples, 0.15%)</title><rect x="89.9704%" y="53" width="0.1529%" height="15" fill="rgb(244,70,9)"/><text x="90.2204%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (234,493 samples, 0.15%)</title><rect x="89.9707%" y="37" width="0.1526%" height="15" fill="rgb(217,125,39)"/><text x="90.2207%" y="47.50"></text></g><g><title>layout_of (245,803 samples, 0.16%)</title><rect x="89.9635%" y="117" width="0.1600%" height="15" fill="rgb(235,36,10)"/><text x="90.2135%" y="127.50"></text></g><g><title>layout_of (312,793 samples, 0.20%)</title><rect x="89.9259%" y="133" width="0.2036%" height="15" fill="rgb(251,123,47)"/><text x="90.1759%" y="143.50"></text></g><g><title>optimized_mir (1,043,452 samples, 0.68%)</title><rect x="89.7353%" y="149" width="0.6790%" height="15" fill="rgb(221,13,13)"/><text x="89.9853%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (306,651 samples, 0.20%)</title><rect x="90.2148%" y="133" width="0.1996%" height="15" fill="rgb(238,131,9)"/><text x="90.4648%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (309,033 samples, 0.20%)</title><rect x="90.4683%" y="133" width="0.2011%" height="15" fill="rgb(211,50,8)"/><text x="90.7183%" y="143.50"></text></g><g><title>resolve_instance (546,756 samples, 0.36%)</title><rect x="90.4143%" y="149" width="0.3558%" height="15" fill="rgb(245,182,24)"/><text x="90.6643%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (2,463,136 samples, 1.60%)</title><rect x="89.4491%" y="165" width="1.6029%" height="15" fill="rgb(242,14,37)"/><text x="89.6991%" y="175.50"></text></g><g><title>upstream_monomorphizations_for (379,714 samples, 0.25%)</title><rect x="90.8050%" y="149" width="0.2471%" height="15" fill="rgb(246,228,12)"/><text x="91.0550%" y="159.50"></text></g><g><title>upstream_monomorphizations (374,684 samples, 0.24%)</title><rect x="90.8082%" y="133" width="0.2438%" height="15" fill="rgb(213,55,15)"/><text x="91.0582%" y="143.50"></text></g><g><title>exported_symbols (260,772 samples, 0.17%)</title><rect x="90.8824%" y="117" width="0.1697%" height="15" fill="rgb(209,9,3)"/><text x="91.1324%" y="127.50"></text></g><g><title>metadata_decode_entry_exported_symbols (255,102 samples, 0.17%)</title><rect x="90.8861%" y="101" width="0.1660%" height="15" fill="rgb(230,59,30)"/><text x="91.1361%" y="111.50"></text></g><g><title>monomorphization_collector (2,495,016 samples, 1.62%)</title><rect x="89.4476%" y="181" width="1.6237%" height="15" fill="rgb(209,121,21)"/><text x="89.6976%" y="191.50"></text></g><g><title>assert_symbols_are_distinct (222,293 samples, 0.14%)</title><rect x="91.0736%" y="165" width="0.1447%" height="15" fill="rgb(220,109,13)"/><text x="91.3236%" y="175.50"></text></g><g><title>symbol_name (209,043 samples, 0.14%)</title><rect x="91.0822%" y="149" width="0.1360%" height="15" fill="rgb(232,18,1)"/><text x="91.3322%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,848,211 samples, 1.85%)</title><rect x="89.4303%" y="197" width="1.8535%" height="15" fill="rgb(215,41,42)"/><text x="89.6803%" y="207.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (326,684 samples, 0.21%)</title><rect x="91.0713%" y="181" width="0.2126%" height="15" fill="rgb(224,123,36)"/><text x="91.3213%" y="191.50"></text></g><g><title>exported_symbols (2,926,491 samples, 1.90%)</title><rect x="89.4153%" y="213" width="1.9045%" height="15" fill="rgb(240,125,3)"/><text x="89.6653%" y="223.50">e..</text></g><g><title>layout_of (270,353 samples, 0.18%)</title><rect x="92.3244%" y="181" width="0.1759%" height="15" fill="rgb(205,98,50)"/><text x="92.5744%" y="191.50"></text></g><g><title>layout_of (640,856 samples, 0.42%)</title><rect x="92.1313%" y="197" width="0.4170%" height="15" fill="rgb(205,185,37)"/><text x="92.3813%" y="207.50"></text></g><g><title>needs_drop_raw (156,842 samples, 0.10%)</title><rect x="93.4154%" y="181" width="0.1021%" height="15" fill="rgb(238,207,15)"/><text x="93.6654%" y="191.50"></text></g><g><title>optimized_mir (3,308,237 samples, 2.15%)</title><rect x="91.3715%" y="213" width="2.1529%" height="15" fill="rgb(213,199,42)"/><text x="91.6215%" y="223.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,499,781 samples, 0.98%)</title><rect x="92.5484%" y="197" width="0.9760%" height="15" fill="rgb(235,201,11)"/><text x="92.7984%" y="207.50"></text></g><g><title>generate_crate_metadata (7,341,459 samples, 4.78%)</title><rect x="88.8076%" y="229" width="4.7776%" height="15" fill="rgb(207,46,11)"/><text x="89.0576%" y="239.50">genera..</text></g><g><title>hir_lowering (3,434,037 samples, 2.23%)</title><rect x="93.5852%" y="229" width="2.2348%" height="15" fill="rgb(241,35,35)"/><text x="93.8352%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (3,529,818 samples, 2.30%)</title><rect x="95.8293%" y="213" width="2.2971%" height="15" fill="rgb(243,32,47)"/><text x="96.0793%" y="223.50">f..</text></g><g><title>link_crate (1,110,202 samples, 0.72%)</title><rect x="98.1264%" y="213" width="0.7225%" height="15" fill="rgb(247,202,23)"/><text x="98.3764%" y="223.50"></text></g><g><title>link_binary (1,081,281 samples, 0.70%)</title><rect x="98.1452%" y="197" width="0.7037%" height="15" fill="rgb(219,102,11)"/><text x="98.3952%" y="207.50"></text></g><g><title>link_rlib (690,248 samples, 0.45%)</title><rect x="98.3997%" y="181" width="0.4492%" height="15" fill="rgb(243,110,44)"/><text x="98.6497%" y="191.50"></text></g><g><title>link (4,662,620 samples, 3.03%)</title><rect x="95.8200%" y="229" width="3.0343%" height="15" fill="rgb(222,74,54)"/><text x="96.0700%" y="239.50">link</text></g><g><title>parse_crate (480,066 samples, 0.31%)</title><rect x="98.8542%" y="229" width="0.3124%" height="15" fill="rgb(216,99,12)"/><text x="99.1042%" y="239.50"></text></g><g><title>prepare_outputs (281,953 samples, 0.18%)</title><rect x="99.1722%" y="229" width="0.1835%" height="15" fill="rgb(226,22,26)"/><text x="99.4222%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (570,087 samples, 0.37%)</title><rect x="99.3557%" y="229" width="0.3710%" height="15" fill="rgb(217,163,10)"/><text x="99.6057%" y="239.50"></text></g><g><title>all (153,665,310 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (153,665,310 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (297,653 samples, 0.19%)</title><rect x="99.8063%" y="229" width="0.1937%" height="15" fill="rgb(220,39,43)"/><text x="100.0563%" y="239.50"></text></g></svg></svg>