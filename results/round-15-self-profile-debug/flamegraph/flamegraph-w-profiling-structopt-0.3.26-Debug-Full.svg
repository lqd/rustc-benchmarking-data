<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,388,647 samples, 6.69%)</title><rect x="1.3228%" y="309" width="6.6891%" height="15" fill="rgb(227,0,7)"/><text x="1.5728%" y="319.50">LLVM_pass..</text></g><g><title>param_env (67,440 samples, 0.10%)</title><rect x="11.6359%" y="229" width="0.1028%" height="15" fill="rgb(217,0,24)"/><text x="11.8859%" y="239.50"></text></g><g><title>item_attrs (77,070 samples, 0.12%)</title><rect x="11.9031%" y="197" width="0.1175%" height="15" fill="rgb(221,193,54)"/><text x="12.1531%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (74,810 samples, 0.11%)</title><rect x="11.9066%" y="181" width="0.1140%" height="15" fill="rgb(248,212,6)"/><text x="12.1566%" y="191.50"></text></g><g><title>codegen_fn_attrs (100,160 samples, 0.15%)</title><rect x="11.8759%" y="213" width="0.1527%" height="15" fill="rgb(208,68,35)"/><text x="12.1259%" y="223.50"></text></g><g><title>adt_drop_tys (80,941 samples, 0.12%)</title><rect x="12.7190%" y="165" width="0.1234%" height="15" fill="rgb(232,128,0)"/><text x="12.9690%" y="175.50"></text></g><g><title>adt_drop_tys (165,561 samples, 0.25%)</title><rect x="12.7021%" y="181" width="0.2523%" height="15" fill="rgb(207,160,47)"/><text x="12.9521%" y="191.50"></text></g><g><title>explicit_predicates_of (112,372 samples, 0.17%)</title><rect x="13.3755%" y="117" width="0.1713%" height="15" fill="rgb(228,23,34)"/><text x="13.6255%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (111,192 samples, 0.17%)</title><rect x="13.3773%" y="101" width="0.1695%" height="15" fill="rgb(218,30,26)"/><text x="13.6273%" y="111.50"></text></g><g><title>needs_drop_raw (592,106 samples, 0.90%)</title><rect x="12.6480%" y="197" width="0.9025%" height="15" fill="rgb(220,122,19)"/><text x="12.8980%" y="207.50"></text></g><g><title>is_copy_raw (391,055 samples, 0.60%)</title><rect x="12.9544%" y="181" width="0.5960%" height="15" fill="rgb(250,228,42)"/><text x="13.2044%" y="191.50"></text></g><g><title>evaluate_obligation (346,294 samples, 0.53%)</title><rect x="13.0227%" y="165" width="0.5278%" height="15" fill="rgb(240,193,28)"/><text x="13.2727%" y="175.50"></text></g><g><title>predicates_of (126,822 samples, 0.19%)</title><rect x="13.3572%" y="149" width="0.1933%" height="15" fill="rgb(216,20,37)"/><text x="13.6072%" y="159.50"></text></g><g><title>predicates_defined_on (119,622 samples, 0.18%)</title><rect x="13.3681%" y="133" width="0.1823%" height="15" fill="rgb(206,188,39)"/><text x="13.6181%" y="143.50"></text></g><g><title>resolve_instance (150,692 samples, 0.23%)</title><rect x="13.5505%" y="197" width="0.2297%" height="15" fill="rgb(217,207,13)"/><text x="13.8005%" y="207.50"></text></g><g><title>thir_body (110,922 samples, 0.17%)</title><rect x="13.7901%" y="197" width="0.1691%" height="15" fill="rgb(231,73,38)"/><text x="14.0401%" y="207.50"></text></g><g><title>mir_const (1,744,778 samples, 2.66%)</title><rect x="11.3354%" y="245" width="2.6594%" height="15" fill="rgb(225,20,46)"/><text x="11.5854%" y="255.50">mi..</text></g><g><title>unsafety_check_result (1,480,127 samples, 2.26%)</title><rect x="11.7387%" y="229" width="2.2560%" height="15" fill="rgb(210,31,41)"/><text x="11.9887%" y="239.50">u..</text></g><g><title>mir_built (1,289,985 samples, 1.97%)</title><rect x="12.0285%" y="213" width="1.9662%" height="15" fill="rgb(221,200,47)"/><text x="12.2785%" y="223.50">m..</text></g><g><title>mir_promoted (1,930,381 samples, 2.94%)</title><rect x="11.0706%" y="261" width="2.9423%" height="15" fill="rgb(226,26,5)"/><text x="11.3206%" y="271.50">mi..</text></g><g><title>type_op_ascribe_user_type (125,742 samples, 0.19%)</title><rect x="14.0129%" y="261" width="0.1917%" height="15" fill="rgb(249,33,26)"/><text x="14.2629%" y="271.50"></text></g><g><title>type_op_prove_predicate (335,875 samples, 0.51%)</title><rect x="14.3354%" y="261" width="0.5119%" height="15" fill="rgb(235,183,28)"/><text x="14.5854%" y="271.50"></text></g><g><title>MIR_borrow_checking (4,348,935 samples, 6.63%)</title><rect x="8.2545%" y="293" width="6.6286%" height="15" fill="rgb(221,5,38)"/><text x="8.5045%" y="303.50">MIR_borro..</text></g><g><title>mir_borrowck (4,326,585 samples, 6.59%)</title><rect x="8.2886%" y="277" width="6.5945%" height="15" fill="rgb(247,18,42)"/><text x="8.5386%" y="287.50">mir_borro..</text></g><g><title>hir_module_items (127,041 samples, 0.19%)</title><rect x="14.8929%" y="293" width="0.1936%" height="15" fill="rgb(241,131,45)"/><text x="15.1429%" y="303.50"></text></g><g><title>get_lang_items (100,701 samples, 0.15%)</title><rect x="15.4951%" y="245" width="0.1535%" height="15" fill="rgb(249,31,29)"/><text x="15.7451%" y="255.50"></text></g><g><title>should_inherit_track_caller (94,631 samples, 0.14%)</title><rect x="15.6486%" y="245" width="0.1442%" height="15" fill="rgb(225,111,53)"/><text x="15.8986%" y="255.50"></text></g><g><title>codegen_fn_attrs (283,852 samples, 0.43%)</title><rect x="15.3885%" y="261" width="0.4326%" height="15" fill="rgb(238,160,17)"/><text x="15.6385%" y="271.50"></text></g><g><title>check_mod_attrs (457,235 samples, 0.70%)</title><rect x="15.1249%" y="277" width="0.6969%" height="15" fill="rgb(214,148,48)"/><text x="15.3749%" y="287.50"></text></g><g><title>lookup_deprecation_entry (106,550 samples, 0.16%)</title><rect x="16.0763%" y="261" width="0.1624%" height="15" fill="rgb(232,36,49)"/><text x="16.3263%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (250,273 samples, 0.38%)</title><rect x="15.9511%" y="277" width="0.3815%" height="15" fill="rgb(209,103,24)"/><text x="16.2011%" y="287.50"></text></g><g><title>misc_checking_1 (861,469 samples, 1.31%)</title><rect x="15.0876%" y="293" width="1.3130%" height="15" fill="rgb(229,88,8)"/><text x="15.3376%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (304,383 samples, 0.46%)</title><rect x="16.4028%" y="277" width="0.4639%" height="15" fill="rgb(213,181,19)"/><text x="16.6528%" y="287.50"></text></g><g><title>check_mod_liveness (285,673 samples, 0.44%)</title><rect x="16.4313%" y="261" width="0.4354%" height="15" fill="rgb(254,191,54)"/><text x="16.6813%" y="271.50"></text></g><g><title>type_uninhabited_from (230,592 samples, 0.35%)</title><rect x="16.5152%" y="245" width="0.3515%" height="15" fill="rgb(241,83,37)"/><text x="16.7652%" y="255.50"></text></g><g><title>type_uninhabited_from (213,452 samples, 0.33%)</title><rect x="16.5414%" y="229" width="0.3253%" height="15" fill="rgb(233,36,39)"/><text x="16.7914%" y="239.50"></text></g><g><title>type_uninhabited_from (175,762 samples, 0.27%)</title><rect x="16.5988%" y="213" width="0.2679%" height="15" fill="rgb(226,3,54)"/><text x="16.8488%" y="223.50"></text></g><g><title>type_uninhabited_from (101,112 samples, 0.15%)</title><rect x="16.7126%" y="197" width="0.1541%" height="15" fill="rgb(245,192,40)"/><text x="16.9626%" y="207.50"></text></g><g><title>misc_checking_2 (420,875 samples, 0.64%)</title><rect x="16.4007%" y="293" width="0.6415%" height="15" fill="rgb(238,167,29)"/><text x="16.6507%" y="303.50"></text></g><g><title>match_checking (115,122 samples, 0.18%)</title><rect x="16.8667%" y="277" width="0.1755%" height="15" fill="rgb(232,182,51)"/><text x="17.1167%" y="287.50"></text></g><g><title>check_match (108,142 samples, 0.16%)</title><rect x="16.8773%" y="261" width="0.1648%" height="15" fill="rgb(231,60,39)"/><text x="17.1273%" y="271.50"></text></g><g><title>crate_lints (1,025,101 samples, 1.56%)</title><rect x="17.2315%" y="261" width="1.5624%" height="15" fill="rgb(208,69,12)"/><text x="17.4815%" y="271.50"></text></g><g><title>lint_checking (1,091,361 samples, 1.66%)</title><rect x="17.2296%" y="277" width="1.6634%" height="15" fill="rgb(235,93,37)"/><text x="17.4796%" y="287.50"></text></g><g><title>privacy_checking_modules (121,722 samples, 0.19%)</title><rect x="18.9894%" y="277" width="0.1855%" height="15" fill="rgb(213,116,39)"/><text x="19.2394%" y="287.50"></text></g><g><title>check_mod_privacy (120,702 samples, 0.18%)</title><rect x="18.9910%" y="261" width="0.1840%" height="15" fill="rgb(222,207,29)"/><text x="19.2410%" y="271.50"></text></g><g><title>misc_checking_3 (1,421,445 samples, 2.17%)</title><rect x="17.0422%" y="293" width="2.1665%" height="15" fill="rgb(206,96,30)"/><text x="17.2922%" y="303.50">m..</text></g><g><title>coherent_trait (83,501 samples, 0.13%)</title><rect x="19.2636%" y="261" width="0.1273%" height="15" fill="rgb(218,138,4)"/><text x="19.5136%" y="271.50"></text></g><g><title>specialization_graph_of (76,881 samples, 0.12%)</title><rect x="19.2737%" y="245" width="0.1172%" height="15" fill="rgb(250,191,14)"/><text x="19.5237%" y="255.50"></text></g><g><title>coherence_checking (128,071 samples, 0.20%)</title><rect x="19.2420%" y="277" width="0.1952%" height="15" fill="rgb(239,60,40)"/><text x="19.4920%" y="287.50"></text></g><g><title>adt_sized_constraint (69,770 samples, 0.11%)</title><rect x="22.7388%" y="197" width="0.1063%" height="15" fill="rgb(206,27,48)"/><text x="22.9888%" y="207.50"></text></g><g><title>adt_sized_constraint (84,241 samples, 0.13%)</title><rect x="22.7196%" y="213" width="0.1284%" height="15" fill="rgb(225,35,8)"/><text x="22.9696%" y="223.50"></text></g><g><title>adt_sized_constraint (109,151 samples, 0.17%)</title><rect x="22.6884%" y="229" width="0.1664%" height="15" fill="rgb(250,213,24)"/><text x="22.9384%" y="239.50"></text></g><g><title>associated_item (117,571 samples, 0.18%)</title><rect x="22.9401%" y="213" width="0.1792%" height="15" fill="rgb(247,123,22)"/><text x="23.1901%" y="223.50"></text></g><g><title>metadata_decode_entry_associated_item (88,111 samples, 0.13%)</title><rect x="22.9851%" y="197" width="0.1343%" height="15" fill="rgb(231,138,38)"/><text x="23.2351%" y="207.50"></text></g><g><title>associated_items (178,843 samples, 0.27%)</title><rect x="22.8602%" y="229" width="0.2726%" height="15" fill="rgb(231,145,46)"/><text x="23.1102%" y="239.50"></text></g><g><title>adt_def (214,291 samples, 0.33%)</title><rect x="23.6235%" y="197" width="0.3266%" height="15" fill="rgb(251,118,11)"/><text x="23.8735%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (211,021 samples, 0.32%)</title><rect x="23.6285%" y="181" width="0.3216%" height="15" fill="rgb(217,147,25)"/><text x="23.8785%" y="191.50"></text></g><g><title>item_attrs (169,791 samples, 0.26%)</title><rect x="23.6913%" y="165" width="0.2588%" height="15" fill="rgb(247,81,37)"/><text x="23.9413%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (166,301 samples, 0.25%)</title><rect x="23.6967%" y="149" width="0.2535%" height="15" fill="rgb(209,12,38)"/><text x="23.9467%" y="159.50"></text></g><g><title>adt_def (68,192 samples, 0.10%)</title><rect x="24.0552%" y="181" width="0.1039%" height="15" fill="rgb(227,1,9)"/><text x="24.3052%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (67,252 samples, 0.10%)</title><rect x="24.0566%" y="165" width="0.1025%" height="15" fill="rgb(248,47,43)"/><text x="24.3066%" y="175.50"></text></g><g><title>adt_def (172,471 samples, 0.26%)</title><rect x="24.2233%" y="165" width="0.2629%" height="15" fill="rgb(221,10,30)"/><text x="24.4733%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (171,141 samples, 0.26%)</title><rect x="24.2254%" y="149" width="0.2609%" height="15" fill="rgb(210,229,1)"/><text x="24.4754%" y="159.50"></text></g><g><title>impl_parent (82,190 samples, 0.13%)</title><rect x="24.8878%" y="53" width="0.1253%" height="15" fill="rgb(222,148,37)"/><text x="25.1378%" y="63.50"></text></g><g><title>impl_trait_ref (322,664 samples, 0.49%)</title><rect x="25.0131%" y="53" width="0.4918%" height="15" fill="rgb(234,67,33)"/><text x="25.2631%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (303,013 samples, 0.46%)</title><rect x="25.0430%" y="37" width="0.4618%" height="15" fill="rgb(247,98,35)"/><text x="25.2930%" y="47.50"></text></g><g><title>coherent_trait (535,165 samples, 0.82%)</title><rect x="24.7352%" y="85" width="0.8157%" height="15" fill="rgb(247,138,52)"/><text x="24.9852%" y="95.50"></text></g><g><title>specialization_graph_of (533,455 samples, 0.81%)</title><rect x="24.7379%" y="69" width="0.8131%" height="15" fill="rgb(213,79,30)"/><text x="24.9879%" y="79.50"></text></g><g><title>adt_destructor (540,715 samples, 0.82%)</title><rect x="24.7290%" y="117" width="0.8242%" height="15" fill="rgb(246,177,23)"/><text x="24.9790%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (540,025 samples, 0.82%)</title><rect x="24.7300%" y="101" width="0.8231%" height="15" fill="rgb(230,62,27)"/><text x="24.9800%" y="111.50"></text></g><g><title>adt_dtorck_constraint (564,286 samples, 0.86%)</title><rect x="24.6952%" y="133" width="0.8601%" height="15" fill="rgb(216,154,8)"/><text x="24.9452%" y="143.50"></text></g><g><title>adt_dtorck_constraint (631,096 samples, 0.96%)</title><rect x="24.6015%" y="149" width="0.9619%" height="15" fill="rgb(244,35,45)"/><text x="24.8515%" y="159.50"></text></g><g><title>adt_dtorck_constraint (704,017 samples, 1.07%)</title><rect x="24.5129%" y="165" width="1.0731%" height="15" fill="rgb(251,115,12)"/><text x="24.7629%" y="175.50"></text></g><g><title>adt_dtorck_constraint (965,571 samples, 1.47%)</title><rect x="24.1812%" y="181" width="1.4717%" height="15" fill="rgb(240,54,50)"/><text x="24.4312%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,179,153 samples, 1.80%)</title><rect x="23.9875%" y="197" width="1.7972%" height="15" fill="rgb(233,84,52)"/><text x="24.2375%" y="207.50">a..</text></g><g><title>type_of (75,480 samples, 0.12%)</title><rect x="25.6697%" y="181" width="0.1150%" height="15" fill="rgb(207,117,47)"/><text x="25.9197%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (66,540 samples, 0.10%)</title><rect x="25.6834%" y="165" width="0.1014%" height="15" fill="rgb(249,43,39)"/><text x="25.9334%" y="175.50"></text></g><g><title>dropck_outlives (2,006,702 samples, 3.06%)</title><rect x="23.1621%" y="229" width="3.0586%" height="15" fill="rgb(209,38,44)"/><text x="23.4121%" y="239.50">dro..</text></g><g><title>adt_dtorck_constraint (1,771,987 samples, 2.70%)</title><rect x="23.5199%" y="213" width="2.7008%" height="15" fill="rgb(236,212,23)"/><text x="23.7699%" y="223.50">ad..</text></g><g><title>type_of (270,372 samples, 0.41%)</title><rect x="25.8086%" y="197" width="0.4121%" height="15" fill="rgb(242,79,21)"/><text x="26.0586%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (259,752 samples, 0.40%)</title><rect x="25.8248%" y="181" width="0.3959%" height="15" fill="rgb(211,96,35)"/><text x="26.0748%" y="191.50"></text></g><g><title>evaluate_obligation (189,711 samples, 0.29%)</title><rect x="26.2207%" y="229" width="0.2892%" height="15" fill="rgb(253,215,40)"/><text x="26.4707%" y="239.50"></text></g><g><title>method_autoderef_steps (74,960 samples, 0.11%)</title><rect x="26.7395%" y="229" width="0.1143%" height="15" fill="rgb(211,81,21)"/><text x="26.9895%" y="239.50"></text></g><g><title>predicates_of (108,770 samples, 0.17%)</title><rect x="26.8682%" y="229" width="0.1658%" height="15" fill="rgb(208,190,38)"/><text x="27.1182%" y="239.50"></text></g><g><title>predicates_defined_on (73,440 samples, 0.11%)</title><rect x="26.9221%" y="213" width="0.1119%" height="15" fill="rgb(235,213,38)"/><text x="27.1721%" y="223.50"></text></g><g><title>associated_item (77,500 samples, 0.12%)</title><rect x="27.9517%" y="197" width="0.1181%" height="15" fill="rgb(237,122,38)"/><text x="28.2017%" y="207.50"></text></g><g><title>associated_items (111,630 samples, 0.17%)</title><rect x="27.9061%" y="213" width="0.1701%" height="15" fill="rgb(244,218,35)"/><text x="28.1561%" y="223.50"></text></g><g><title>evaluate_obligation (274,114 samples, 0.42%)</title><rect x="28.1571%" y="213" width="0.4178%" height="15" fill="rgb(240,68,47)"/><text x="28.4071%" y="223.50"></text></g><g><title>trait_impls_of (217,203 samples, 0.33%)</title><rect x="28.2439%" y="197" width="0.3311%" height="15" fill="rgb(210,16,53)"/><text x="28.4939%" y="207.50"></text></g><g><title>typeck (1,032,181 samples, 1.57%)</title><rect x="27.1576%" y="229" width="1.5732%" height="15" fill="rgb(235,124,12)"/><text x="27.4076%" y="239.50"></text></g><g><title>item_bodies_checking (6,105,075 samples, 9.31%)</title><rect x="19.4653%" y="277" width="9.3053%" height="15" fill="rgb(224,169,11)"/><text x="19.7153%" y="287.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (6,102,735 samples, 9.30%)</title><rect x="19.4689%" y="261" width="9.3017%" height="15" fill="rgb(250,166,2)"/><text x="19.7189%" y="271.50">typeck_item_b..</text></g><g><title>typeck (6,086,305 samples, 9.28%)</title><rect x="19.4939%" y="245" width="9.2767%" height="15" fill="rgb(242,216,29)"/><text x="19.7439%" y="255.50">typeck</text></g><g><title>item_types_checking (158,961 samples, 0.24%)</title><rect x="28.7706%" y="277" width="0.2423%" height="15" fill="rgb(230,116,27)"/><text x="29.0206%" y="287.50"></text></g><g><title>check_mod_item_types (157,431 samples, 0.24%)</title><rect x="28.7729%" y="261" width="0.2400%" height="15" fill="rgb(228,99,48)"/><text x="29.0229%" y="271.50"></text></g><g><title>fn_sig (187,582 samples, 0.29%)</title><rect x="29.2314%" y="245" width="0.2859%" height="15" fill="rgb(253,11,6)"/><text x="29.4814%" y="255.50"></text></g><g><title>is_late_bound_map (120,402 samples, 0.18%)</title><rect x="29.6333%" y="229" width="0.1835%" height="15" fill="rgb(247,143,39)"/><text x="29.8833%" y="239.50"></text></g><g><title>resolve_lifetimes (112,212 samples, 0.17%)</title><rect x="29.6457%" y="213" width="0.1710%" height="15" fill="rgb(236,97,10)"/><text x="29.8957%" y="223.50"></text></g><g><title>generics_of (216,423 samples, 0.33%)</title><rect x="29.5173%" y="245" width="0.3299%" height="15" fill="rgb(233,208,19)"/><text x="29.7673%" y="255.50"></text></g><g><title>late_bound_vars_map (203,492 samples, 0.31%)</title><rect x="30.2119%" y="197" width="0.3102%" height="15" fill="rgb(216,164,2)"/><text x="30.4619%" y="207.50"></text></g><g><title>resolve_lifetimes (199,102 samples, 0.30%)</title><rect x="30.2186%" y="181" width="0.3035%" height="15" fill="rgb(220,129,5)"/><text x="30.4686%" y="191.50"></text></g><g><title>lint_levels (73,861 samples, 0.11%)</title><rect x="30.4095%" y="165" width="0.1126%" height="15" fill="rgb(242,17,10)"/><text x="30.6595%" y="175.50"></text></g><g><title>type_param_predicates (109,741 samples, 0.17%)</title><rect x="30.6034%" y="197" width="0.1673%" height="15" fill="rgb(242,107,0)"/><text x="30.8534%" y="207.50"></text></g><g><title>explicit_predicates_of (539,894 samples, 0.82%)</title><rect x="29.9490%" y="213" width="0.8229%" height="15" fill="rgb(251,28,31)"/><text x="30.1990%" y="223.50"></text></g><g><title>predicates_of (612,104 samples, 0.93%)</title><rect x="29.8545%" y="245" width="0.9330%" height="15" fill="rgb(233,223,10)"/><text x="30.1045%" y="255.50"></text></g><g><title>predicates_defined_on (590,194 samples, 0.90%)</title><rect x="29.8879%" y="229" width="0.8996%" height="15" fill="rgb(215,21,27)"/><text x="30.1379%" y="239.50"></text></g><g><title>super_predicates_of (102,260 samples, 0.16%)</title><rect x="30.7875%" y="245" width="0.1559%" height="15" fill="rgb(232,23,21)"/><text x="31.0375%" y="255.50"></text></g><g><title>super_predicates_that_define_assoc_type (89,800 samples, 0.14%)</title><rect x="30.8065%" y="229" width="0.1369%" height="15" fill="rgb(244,5,23)"/><text x="31.0565%" y="239.50"></text></g><g><title>type_collecting (1,356,954 samples, 2.07%)</title><rect x="29.0243%" y="277" width="2.0682%" height="15" fill="rgb(226,81,46)"/><text x="29.2743%" y="287.50">t..</text></g><g><title>collect_mod_item_types (1,346,584 samples, 2.05%)</title><rect x="29.0401%" y="261" width="2.0524%" height="15" fill="rgb(247,70,30)"/><text x="29.2901%" y="271.50">c..</text></g><g><title>type_of (88,842 samples, 0.14%)</title><rect x="30.9572%" y="245" width="0.1354%" height="15" fill="rgb(212,68,19)"/><text x="31.2072%" y="255.50"></text></g><g><title>check_impl_item_well_formed (250,692 samples, 0.38%)</title><rect x="31.1789%" y="261" width="0.3821%" height="15" fill="rgb(240,187,13)"/><text x="31.4289%" y="271.50"></text></g><g><title>evaluate_obligation (67,871 samples, 0.10%)</title><rect x="32.0300%" y="245" width="0.1034%" height="15" fill="rgb(223,113,26)"/><text x="32.2800%" y="255.50"></text></g><g><title>param_env (177,931 samples, 0.27%)</title><rect x="32.1487%" y="245" width="0.2712%" height="15" fill="rgb(206,192,2)"/><text x="32.3987%" y="255.50"></text></g><g><title>check_item_well_formed (587,506 samples, 0.90%)</title><rect x="31.5610%" y="261" width="0.8955%" height="15" fill="rgb(241,108,4)"/><text x="31.8110%" y="271.50"></text></g><g><title>adt_def (96,231 samples, 0.15%)</title><rect x="33.9236%" y="181" width="0.1467%" height="15" fill="rgb(247,173,49)"/><text x="34.1736%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (95,811 samples, 0.15%)</title><rect x="33.9242%" y="165" width="0.1460%" height="15" fill="rgb(224,114,35)"/><text x="34.1742%" y="175.50"></text></g><g><title>item_attrs (90,751 samples, 0.14%)</title><rect x="33.9319%" y="149" width="0.1383%" height="15" fill="rgb(245,159,27)"/><text x="34.1819%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (90,251 samples, 0.14%)</title><rect x="33.9327%" y="133" width="0.1376%" height="15" fill="rgb(245,172,44)"/><text x="34.1827%" y="143.50"></text></g><g><title>adt_sized_constraint (100,351 samples, 0.15%)</title><rect x="33.9189%" y="197" width="0.1530%" height="15" fill="rgb(236,23,11)"/><text x="34.1689%" y="207.50"></text></g><g><title>adt_sized_constraint (169,792 samples, 0.26%)</title><rect x="33.8460%" y="213" width="0.2588%" height="15" fill="rgb(205,117,38)"/><text x="34.0960%" y="223.50"></text></g><g><title>evaluate_obligation (313,223 samples, 0.48%)</title><rect x="33.6660%" y="245" width="0.4774%" height="15" fill="rgb(237,72,25)"/><text x="33.9160%" y="255.50"></text></g><g><title>adt_sized_constraint (257,373 samples, 0.39%)</title><rect x="33.7511%" y="229" width="0.3923%" height="15" fill="rgb(244,70,9)"/><text x="34.0011%" y="239.50"></text></g><g><title>implied_outlives_bounds (193,752 samples, 0.30%)</title><rect x="34.2420%" y="245" width="0.2953%" height="15" fill="rgb(217,125,39)"/><text x="34.4920%" y="255.50"></text></g><g><title>param_env (425,815 samples, 0.65%)</title><rect x="34.5615%" y="245" width="0.6490%" height="15" fill="rgb(235,36,10)"/><text x="34.8115%" y="255.50"></text></g><g><title>trait_impls_of (174,912 samples, 0.27%)</title><rect x="34.9439%" y="229" width="0.2666%" height="15" fill="rgb(251,123,47)"/><text x="35.1939%" y="239.50"></text></g><g><title>implementations_of_trait (72,740 samples, 0.11%)</title><rect x="35.0997%" y="213" width="0.1109%" height="15" fill="rgb(221,13,13)"/><text x="35.3497%" y="223.50"></text></g><g><title>explicit_predicates_of (68,420 samples, 0.10%)</title><rect x="35.2813%" y="213" width="0.1043%" height="15" fill="rgb(238,131,9)"/><text x="35.5313%" y="223.50"></text></g><g><title>predicates_of (136,961 samples, 0.21%)</title><rect x="35.2105%" y="245" width="0.2088%" height="15" fill="rgb(211,50,8)"/><text x="35.4605%" y="255.50"></text></g><g><title>predicates_defined_on (109,840 samples, 0.17%)</title><rect x="35.2519%" y="229" width="0.1674%" height="15" fill="rgb(245,182,24)"/><text x="35.5019%" y="239.50"></text></g><g><title>analysis (18,581,456 samples, 28.32%)</title><rect x="8.0120%" y="309" width="28.3216%" height="15" fill="rgb(242,14,37)"/><text x="8.2620%" y="319.50">analysis</text></g><g><title>type_check_crate (11,235,398 samples, 17.12%)</title><rect x="19.2087%" y="293" width="17.1248%" height="15" fill="rgb(246,228,12)"/><text x="19.4587%" y="303.50">type_check_crate</text></g><g><title>wf_checking (3,437,286 samples, 5.24%)</title><rect x="31.0945%" y="277" width="5.2391%" height="15" fill="rgb(213,55,15)"/><text x="31.3445%" y="287.50">wf_che..</text></g><g><title>check_trait_item_well_formed (2,543,707 samples, 3.88%)</title><rect x="32.4565%" y="261" width="3.8771%" height="15" fill="rgb(209,9,3)"/><text x="32.7065%" y="271.50">chec..</text></g><g><title>trait_impls_of (543,526 samples, 0.83%)</title><rect x="35.5051%" y="245" width="0.8284%" height="15" fill="rgb(230,59,30)"/><text x="35.7551%" y="255.50"></text></g><g><title>implementations_of_trait (149,473 samples, 0.23%)</title><rect x="36.1057%" y="229" width="0.2278%" height="15" fill="rgb(209,121,21)"/><text x="36.3557%" y="239.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (110,313 samples, 0.17%)</title><rect x="36.1654%" y="213" width="0.1681%" height="15" fill="rgb(220,109,13)"/><text x="36.4154%" y="223.50"></text></g><g><title>codegen_module (287,843 samples, 0.44%)</title><rect x="37.1576%" y="293" width="0.4387%" height="15" fill="rgb(232,18,1)"/><text x="37.4076%" y="303.50"></text></g><g><title>codegen_crate (922,619 samples, 1.41%)</title><rect x="36.3501%" y="309" width="1.4062%" height="15" fill="rgb(215,41,42)"/><text x="36.6001%" y="319.50"></text></g><g><title>LLVM_module_codegen (3,684,719 samples, 5.62%)</title><rect x="38.0708%" y="293" width="5.6162%" height="15" fill="rgb(224,123,36)"/><text x="38.3208%" y="303.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (3,600,879 samples, 5.49%)</title><rect x="38.1986%" y="277" width="5.4884%" height="15" fill="rgb(240,125,3)"/><text x="38.4486%" y="287.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (4,191,735 samples, 6.39%)</title><rect x="37.7563%" y="309" width="6.3890%" height="15" fill="rgb(205,98,50)"/><text x="38.0063%" y="319.50">codegen_..</text></g><g><title>LLVM_module_optimize (300,663 samples, 0.46%)</title><rect x="43.6870%" y="293" width="0.4583%" height="15" fill="rgb(205,185,37)"/><text x="43.9370%" y="303.50"></text></g><g><title>AST_validation (149,842 samples, 0.23%)</title><rect x="44.4300%" y="293" width="0.2284%" height="15" fill="rgb(238,207,15)"/><text x="44.6800%" y="303.50"></text></g><g><title>crate_injection (71,611 samples, 0.11%)</title><rect x="44.7292%" y="293" width="0.1091%" height="15" fill="rgb(213,199,42)"/><text x="44.9792%" y="303.50"></text></g><g><title>macro_expand_crate (20,861,600 samples, 31.80%)</title><rect x="44.8384%" y="293" width="31.7970%" height="15" fill="rgb(235,201,11)"/><text x="45.0884%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (20,843,150 samples, 31.77%)</title><rect x="44.8665%" y="277" width="31.7688%" height="15" fill="rgb(207,46,11)"/><text x="45.1165%" y="287.50">expand_crate</text></g><g><title>metadata_register_crate (11,576,013 samples, 17.64%)</title><rect x="58.9913%" y="261" width="17.6440%" height="15" fill="rgb(241,35,35)"/><text x="59.2413%" y="271.50">metadata_register_crate</text></g><g><title>metadata_register_crate (1,112,090 samples, 1.70%)</title><rect x="74.9403%" y="245" width="1.6950%" height="15" fill="rgb(243,32,47)"/><text x="75.1903%" y="255.50"></text></g><g><title>metadata_register_crate (83,650 samples, 0.13%)</title><rect x="76.5078%" y="229" width="0.1275%" height="15" fill="rgb(247,202,23)"/><text x="76.7578%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (146,552 samples, 0.22%)</title><rect x="76.6497%" y="293" width="0.2234%" height="15" fill="rgb(219,102,11)"/><text x="76.8997%" y="303.50"></text></g><g><title>late_resolve_crate (1,124,152 samples, 1.71%)</title><rect x="76.9661%" y="277" width="1.7134%" height="15" fill="rgb(243,110,44)"/><text x="77.2161%" y="287.50"></text></g><g><title>configure_and_expand (22,734,119 samples, 34.65%)</title><rect x="44.1453%" y="309" width="34.6510%" height="15" fill="rgb(222,74,54)"/><text x="44.3953%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (1,261,773 samples, 1.92%)</title><rect x="76.8731%" y="293" width="1.9232%" height="15" fill="rgb(216,99,12)"/><text x="77.1231%" y="303.50">r..</text></g><g><title>drop_ast (105,891 samples, 0.16%)</title><rect x="78.7963%" y="309" width="0.1614%" height="15" fill="rgb(226,22,26)"/><text x="79.0463%" y="319.50"></text></g><g><title>early_lint_checks (296,503 samples, 0.45%)</title><rect x="79.0210%" y="309" width="0.4519%" height="15" fill="rgb(217,163,10)"/><text x="79.2710%" y="319.50"></text></g><g><title>free_global_ctxt (3,887,001 samples, 5.92%)</title><rect x="79.4729%" y="309" width="5.9245%" height="15" fill="rgb(213,25,53)"/><text x="79.7229%" y="319.50">free_glo..</text></g><g><title>crate_hash (72,400 samples, 0.11%)</title><rect x="86.1805%" y="293" width="0.1104%" height="15" fill="rgb(252,105,26)"/><text x="86.4305%" y="303.50"></text></g><g><title>exported_symbols (90,640 samples, 0.14%)</title><rect x="86.3451%" y="293" width="0.1382%" height="15" fill="rgb(220,39,43)"/><text x="86.5951%" y="303.50"></text></g><g><title>layout_of (66,111 samples, 0.10%)</title><rect x="88.0098%" y="197" width="0.1008%" height="15" fill="rgb(229,68,48)"/><text x="88.2598%" y="207.50"></text></g><g><title>layout_of (158,392 samples, 0.24%)</title><rect x="87.9032%" y="213" width="0.2414%" height="15" fill="rgb(252,8,32)"/><text x="88.1532%" y="223.50"></text></g><g><title>layout_of (299,814 samples, 0.46%)</title><rect x="87.7469%" y="229" width="0.4570%" height="15" fill="rgb(223,20,43)"/><text x="87.9969%" y="239.50"></text></g><g><title>layout_of (507,556 samples, 0.77%)</title><rect x="87.4635%" y="261" width="0.7736%" height="15" fill="rgb(229,81,49)"/><text x="87.7135%" y="271.50"></text></g><g><title>layout_of (433,945 samples, 0.66%)</title><rect x="87.5757%" y="245" width="0.6614%" height="15" fill="rgb(236,28,36)"/><text x="87.8257%" y="255.50"></text></g><g><title>layout_of (580,736 samples, 0.89%)</title><rect x="87.3625%" y="277" width="0.8851%" height="15" fill="rgb(249,185,26)"/><text x="87.6125%" y="287.50"></text></g><g><title>needs_drop_raw (143,333 samples, 0.22%)</title><rect x="89.1965%" y="261" width="0.2185%" height="15" fill="rgb(249,174,33)"/><text x="89.4465%" y="271.50"></text></g><g><title>is_copy_raw (128,683 samples, 0.20%)</title><rect x="89.2188%" y="245" width="0.1961%" height="15" fill="rgb(233,201,37)"/><text x="89.4688%" y="255.50"></text></g><g><title>evaluate_obligation (104,862 samples, 0.16%)</title><rect x="89.2551%" y="229" width="0.1598%" height="15" fill="rgb(221,78,26)"/><text x="89.5051%" y="239.50"></text></g><g><title>optimized_mir (1,890,461 samples, 2.88%)</title><rect x="86.5501%" y="293" width="2.8814%" height="15" fill="rgb(250,127,30)"/><text x="86.8001%" y="303.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (776,729 samples, 1.18%)</title><rect x="88.2476%" y="277" width="1.1839%" height="15" fill="rgb(230,49,44)"/><text x="88.4976%" y="287.50"></text></g><g><title>generate_crate_metadata (2,665,898 samples, 4.06%)</title><rect x="85.3975%" y="309" width="4.0633%" height="15" fill="rgb(229,67,23)"/><text x="85.6475%" y="319.50">gene..</text></g><g><title>hir_lowering (1,227,393 samples, 1.87%)</title><rect x="89.4608%" y="309" width="1.8708%" height="15" fill="rgb(249,83,47)"/><text x="89.7108%" y="319.50">h..</text></g><g><title>link_crate (1,328,224 samples, 2.02%)</title><rect x="91.3836%" y="293" width="2.0245%" height="15" fill="rgb(215,43,3)"/><text x="91.6336%" y="303.50">l..</text></g><g><title>link_binary (1,287,574 samples, 1.96%)</title><rect x="91.4455%" y="277" width="1.9625%" height="15" fill="rgb(238,154,13)"/><text x="91.6955%" y="287.50">l..</text></g><g><title>link_rlib (855,539 samples, 1.30%)</title><rect x="92.1040%" y="261" width="1.3040%" height="15" fill="rgb(219,56,2)"/><text x="92.3540%" y="271.50"></text></g><g><title>link (1,373,885 samples, 2.09%)</title><rect x="91.3316%" y="309" width="2.0941%" height="15" fill="rgb(233,0,4)"/><text x="91.5816%" y="319.50">l..</text></g><g><title>parse_crate (2,556,118 samples, 3.90%)</title><rect x="93.4256%" y="309" width="3.8960%" height="15" fill="rgb(235,30,7)"/><text x="93.6756%" y="319.50">pars..</text></g><g><title>prepare_outputs (298,863 samples, 0.46%)</title><rect x="97.3369%" y="309" width="0.4555%" height="15" fill="rgb(250,79,13)"/><text x="97.5869%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (966,350 samples, 1.47%)</title><rect x="97.7925%" y="309" width="1.4729%" height="15" fill="rgb(211,146,34)"/><text x="98.0425%" y="319.50"></text></g><g><title>setup_global_ctxt (103,121 samples, 0.16%)</title><rect x="99.2681%" y="309" width="0.1572%" height="15" fill="rgb(228,22,38)"/><text x="99.5181%" y="319.50"></text></g><g><title>all (65,608,804 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (65,608,804 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (377,084 samples, 0.57%)</title><rect x="99.4253%" y="309" width="0.5747%" height="15" fill="rgb(215,215,53)"/><text x="99.6753%" y="319.50"></text></g></svg></svg>