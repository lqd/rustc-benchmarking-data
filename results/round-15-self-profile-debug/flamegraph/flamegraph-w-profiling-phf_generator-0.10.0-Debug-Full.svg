<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,250,903 samples, 5.67%)</title><rect x="0.7413%" y="213" width="5.6717%" height="15" fill="rgb(227,0,7)"/><text x="0.9913%" y="223.50">LLVM_pa..</text></g><g><title>implied_outlives_bounds (59,961 samples, 0.10%)</title><rect x="11.7967%" y="165" width="0.1046%" height="15" fill="rgb(217,0,24)"/><text x="12.0467%" y="175.50"></text></g><g><title>param_env (177,431 samples, 0.31%)</title><rect x="12.5972%" y="133" width="0.3096%" height="15" fill="rgb(221,193,54)"/><text x="12.8472%" y="143.50"></text></g><g><title>item_attrs (157,701 samples, 0.28%)</title><rect x="13.1584%" y="101" width="0.2751%" height="15" fill="rgb(248,212,6)"/><text x="13.4084%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (152,531 samples, 0.27%)</title><rect x="13.1674%" y="85" width="0.2661%" height="15" fill="rgb(208,68,35)"/><text x="13.4174%" y="95.50"></text></g><g><title>codegen_fn_attrs (207,473 samples, 0.36%)</title><rect x="13.0834%" y="117" width="0.3620%" height="15" fill="rgb(232,128,0)"/><text x="13.3334%" y="127.50"></text></g><g><title>is_copy_raw (75,310 samples, 0.13%)</title><rect x="14.9059%" y="69" width="0.1314%" height="15" fill="rgb(207,160,47)"/><text x="15.1559%" y="79.50"></text></g><g><title>evaluate_obligation (61,830 samples, 0.11%)</title><rect x="14.9294%" y="53" width="0.1079%" height="15" fill="rgb(228,23,34)"/><text x="15.1794%" y="63.50"></text></g><g><title>param_env (60,860 samples, 0.11%)</title><rect x="15.0373%" y="69" width="0.1062%" height="15" fill="rgb(218,30,26)"/><text x="15.2873%" y="79.50"></text></g><g><title>adt_drop_tys (168,941 samples, 0.29%)</title><rect x="14.8505%" y="85" width="0.2947%" height="15" fill="rgb(220,122,19)"/><text x="15.1005%" y="95.50"></text></g><g><title>needs_drop_raw (470,732 samples, 0.82%)</title><rect x="14.7606%" y="101" width="0.8213%" height="15" fill="rgb(250,228,42)"/><text x="15.0106%" y="111.50"></text></g><g><title>is_copy_raw (250,261 samples, 0.44%)</title><rect x="15.1453%" y="85" width="0.4366%" height="15" fill="rgb(240,193,28)"/><text x="15.3953%" y="95.50"></text></g><g><title>evaluate_obligation (204,711 samples, 0.36%)</title><rect x="15.2247%" y="69" width="0.3571%" height="15" fill="rgb(216,20,37)"/><text x="15.4747%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (244,814 samples, 0.43%)</title><rect x="15.7190%" y="85" width="0.4271%" height="15" fill="rgb(206,188,39)"/><text x="15.9690%" y="95.50"></text></g><g><title>impl_parent (250,572 samples, 0.44%)</title><rect x="16.6886%" y="69" width="0.4372%" height="15" fill="rgb(217,207,13)"/><text x="16.9386%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (184,122 samples, 0.32%)</title><rect x="16.8045%" y="53" width="0.3212%" height="15" fill="rgb(231,73,38)"/><text x="17.0545%" y="63.50"></text></g><g><title>specialization_graph_of (1,139,171 samples, 1.99%)</title><rect x="16.1696%" y="85" width="1.9874%" height="15" fill="rgb(225,20,46)"/><text x="16.4196%" y="95.50">s..</text></g><g><title>impl_trait_ref (591,147 samples, 1.03%)</title><rect x="17.1257%" y="69" width="1.0313%" height="15" fill="rgb(210,31,41)"/><text x="17.3757%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (518,507 samples, 0.90%)</title><rect x="17.2524%" y="53" width="0.9046%" height="15" fill="rgb(221,200,47)"/><text x="17.5024%" y="63.50"></text></g><g><title>resolve_instance (1,504,585 samples, 2.62%)</title><rect x="15.5819%" y="101" width="2.6250%" height="15" fill="rgb(226,26,5)"/><text x="15.8319%" y="111.50">re..</text></g><g><title>thir_body (219,723 samples, 0.38%)</title><rect x="18.2191%" y="101" width="0.3833%" height="15" fill="rgb(249,33,26)"/><text x="18.4691%" y="111.50"></text></g><g><title>mir_const (3,639,257 samples, 6.35%)</title><rect x="12.2615%" y="149" width="6.3492%" height="15" fill="rgb(235,183,28)"/><text x="12.5115%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (3,269,405 samples, 5.70%)</title><rect x="12.9068%" y="133" width="5.7039%" height="15" fill="rgb(221,5,38)"/><text x="13.1568%" y="143.50">unsafet..</text></g><g><title>mir_built (2,960,702 samples, 5.17%)</title><rect x="13.4453%" y="117" width="5.1654%" height="15" fill="rgb(247,18,42)"/><text x="13.6953%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (3,997,802 samples, 6.97%)</title><rect x="11.9304%" y="165" width="6.9747%" height="15" fill="rgb(241,131,45)"/><text x="12.1804%" y="175.50">mir_promo..</text></g><g><title>mir_const_qualif (168,772 samples, 0.29%)</title><rect x="18.6107%" y="149" width="0.2944%" height="15" fill="rgb(249,31,29)"/><text x="18.8607%" y="159.50"></text></g><g><title>mir_const (144,472 samples, 0.25%)</title><rect x="18.6531%" y="133" width="0.2521%" height="15" fill="rgb(225,111,53)"/><text x="18.9031%" y="143.50"></text></g><g><title>unsafety_check_result (101,592 samples, 0.18%)</title><rect x="18.7279%" y="117" width="0.1772%" height="15" fill="rgb(238,160,17)"/><text x="18.9779%" y="127.50"></text></g><g><title>mir_built (64,251 samples, 0.11%)</title><rect x="18.7931%" y="101" width="0.1121%" height="15" fill="rgb(214,148,48)"/><text x="19.0431%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (174,911 samples, 0.31%)</title><rect x="18.9051%" y="165" width="0.3052%" height="15" fill="rgb(232,36,49)"/><text x="19.1551%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (529,495 samples, 0.92%)</title><rect x="19.2103%" y="165" width="0.9238%" height="15" fill="rgb(209,103,24)"/><text x="19.4603%" y="175.50"></text></g><g><title>normalize_projection_ty (354,044 samples, 0.62%)</title><rect x="19.5164%" y="149" width="0.6177%" height="15" fill="rgb(229,88,8)"/><text x="19.7664%" y="159.50"></text></g><g><title>type_op_normalize_predicate (247,862 samples, 0.43%)</title><rect x="20.1341%" y="165" width="0.4324%" height="15" fill="rgb(213,181,19)"/><text x="20.3841%" y="175.50"></text></g><g><title>normalize_projection_ty (159,792 samples, 0.28%)</title><rect x="20.2877%" y="149" width="0.2788%" height="15" fill="rgb(254,191,54)"/><text x="20.5377%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,060,302 samples, 15.81%)</title><rect x="6.6107%" y="197" width="15.8070%" height="15" fill="rgb(241,83,37)"/><text x="6.8607%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,044,172 samples, 15.78%)</title><rect x="6.6389%" y="181" width="15.7789%" height="15" fill="rgb(233,36,39)"/><text x="6.8889%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,061,071 samples, 1.85%)</title><rect x="20.5665%" y="165" width="1.8512%" height="15" fill="rgb(226,3,54)"/><text x="20.8165%" y="175.50">t..</text></g><g><title>evaluate_obligation (88,241 samples, 0.15%)</title><rect x="22.2638%" y="149" width="0.1539%" height="15" fill="rgb(245,192,40)"/><text x="22.5138%" y="159.50"></text></g><g><title>MIR_effect_checking (114,322 samples, 0.20%)</title><rect x="22.4177%" y="197" width="0.1995%" height="15" fill="rgb(238,167,29)"/><text x="22.6677%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (89,471 samples, 0.16%)</title><rect x="22.4611%" y="181" width="0.1561%" height="15" fill="rgb(232,182,51)"/><text x="22.7111%" y="191.50"></text></g><g><title>hir_module_items (90,541 samples, 0.16%)</title><rect x="22.6172%" y="197" width="0.1580%" height="15" fill="rgb(231,60,39)"/><text x="22.8672%" y="207.50"></text></g><g><title>codegen_fn_attrs (127,932 samples, 0.22%)</title><rect x="22.9305%" y="165" width="0.2232%" height="15" fill="rgb(208,69,12)"/><text x="23.1805%" y="175.50"></text></g><g><title>check_mod_attrs (199,242 samples, 0.35%)</title><rect x="22.8062%" y="181" width="0.3476%" height="15" fill="rgb(235,93,37)"/><text x="23.0562%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (114,221 samples, 0.20%)</title><rect x="23.2336%" y="181" width="0.1993%" height="15" fill="rgb(213,116,39)"/><text x="23.4836%" y="191.50"></text></g><g><title>misc_checking_1 (403,694 samples, 0.70%)</title><rect x="22.7758%" y="197" width="0.7043%" height="15" fill="rgb(222,207,29)"/><text x="23.0258%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (195,292 samples, 0.34%)</title><rect x="23.4827%" y="181" width="0.3407%" height="15" fill="rgb(206,96,30)"/><text x="23.7327%" y="191.50"></text></g><g><title>check_mod_liveness (168,612 samples, 0.29%)</title><rect x="23.5292%" y="165" width="0.2942%" height="15" fill="rgb(218,138,4)"/><text x="23.7792%" y="175.50"></text></g><g><title>misc_checking_2 (388,014 samples, 0.68%)</title><rect x="23.4801%" y="197" width="0.6769%" height="15" fill="rgb(250,191,14)"/><text x="23.7301%" y="207.50"></text></g><g><title>match_checking (191,232 samples, 0.33%)</title><rect x="23.8234%" y="181" width="0.3336%" height="15" fill="rgb(239,60,40)"/><text x="24.0734%" y="191.50"></text></g><g><title>check_match (183,572 samples, 0.32%)</title><rect x="23.8368%" y="165" width="0.3203%" height="15" fill="rgb(206,27,48)"/><text x="24.0868%" y="175.50"></text></g><g><title>death_checking (74,120 samples, 0.13%)</title><rect x="24.2390%" y="181" width="0.1293%" height="15" fill="rgb(225,35,8)"/><text x="24.4890%" y="191.50"></text></g><g><title>eval_to_const_value_raw (113,481 samples, 0.20%)</title><rect x="25.1817%" y="149" width="0.1980%" height="15" fill="rgb(250,213,24)"/><text x="25.4317%" y="159.50"></text></g><g><title>eval_to_const_value_raw (110,371 samples, 0.19%)</title><rect x="25.1871%" y="133" width="0.1926%" height="15" fill="rgb(247,123,22)"/><text x="25.4371%" y="143.50"></text></g><g><title>eval_to_allocation_raw (104,731 samples, 0.18%)</title><rect x="25.1970%" y="117" width="0.1827%" height="15" fill="rgb(231,138,38)"/><text x="25.4470%" y="127.50"></text></g><g><title>explicit_predicates_of (241,333 samples, 0.42%)</title><rect x="25.4589%" y="101" width="0.4210%" height="15" fill="rgb(231,145,46)"/><text x="25.7089%" y="111.50"></text></g><g><title>generics_of (233,673 samples, 0.41%)</title><rect x="25.4723%" y="85" width="0.4077%" height="15" fill="rgb(251,118,11)"/><text x="25.7223%" y="95.50"></text></g><g><title>param_env (288,093 samples, 0.50%)</title><rect x="25.3797%" y="149" width="0.5026%" height="15" fill="rgb(217,147,25)"/><text x="25.6297%" y="159.50"></text></g><g><title>predicates_of (253,503 samples, 0.44%)</title><rect x="25.4400%" y="133" width="0.4423%" height="15" fill="rgb(247,81,37)"/><text x="25.6900%" y="143.50"></text></g><g><title>predicates_defined_on (249,523 samples, 0.44%)</title><rect x="25.4470%" y="117" width="0.4353%" height="15" fill="rgb(209,12,38)"/><text x="25.6970%" y="127.50"></text></g><g><title>trait_impls_of (215,412 samples, 0.38%)</title><rect x="25.8823%" y="149" width="0.3758%" height="15" fill="rgb(227,1,9)"/><text x="26.1323%" y="159.50"></text></g><g><title>crate_lints (3,819,648 samples, 6.66%)</title><rect x="24.3716%" y="165" width="6.6639%" height="15" fill="rgb(248,47,43)"/><text x="24.6216%" y="175.50">crate_lin..</text></g><g><title>type_of (2,732,377 samples, 4.77%)</title><rect x="26.2685%" y="149" width="4.7670%" height="15" fill="rgb(221,10,30)"/><text x="26.5185%" y="159.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,477,353 samples, 4.32%)</title><rect x="26.7134%" y="133" width="4.3221%" height="15" fill="rgb(210,229,1)"/><text x="26.9634%" y="143.50">metad..</text></g><g><title>lint_checking (3,969,030 samples, 6.92%)</title><rect x="24.3683%" y="181" width="6.9245%" height="15" fill="rgb(222,148,37)"/><text x="24.6183%" y="191.50">lint_chec..</text></g><g><title>module_lints (147,472 samples, 0.26%)</title><rect x="31.0355%" y="165" width="0.2573%" height="15" fill="rgb(234,67,33)"/><text x="31.2855%" y="175.50"></text></g><g><title>lint_mod (144,672 samples, 0.25%)</title><rect x="31.0404%" y="149" width="0.2524%" height="15" fill="rgb(247,98,35)"/><text x="31.2904%" y="159.50"></text></g><g><title>privacy_checking_modules (177,291 samples, 0.31%)</title><rect x="31.3902%" y="181" width="0.3093%" height="15" fill="rgb(247,138,52)"/><text x="31.6402%" y="191.50"></text></g><g><title>check_mod_privacy (175,801 samples, 0.31%)</title><rect x="31.3928%" y="165" width="0.3067%" height="15" fill="rgb(213,79,30)"/><text x="31.6428%" y="175.50"></text></g><g><title>misc_checking_3 (4,338,303 samples, 7.57%)</title><rect x="24.1570%" y="197" width="7.5688%" height="15" fill="rgb(246,177,23)"/><text x="24.4070%" y="207.50">misc_check..</text></g><g><title>adt_def (71,880 samples, 0.13%)</title><rect x="45.5265%" y="101" width="0.1254%" height="15" fill="rgb(230,62,27)"/><text x="45.7765%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (69,970 samples, 0.12%)</title><rect x="45.5298%" y="85" width="0.1221%" height="15" fill="rgb(216,154,8)"/><text x="45.7798%" y="95.50"></text></g><g><title>adt_sized_constraint (127,201 samples, 0.22%)</title><rect x="45.5082%" y="117" width="0.2219%" height="15" fill="rgb(244,35,45)"/><text x="45.7582%" y="127.50"></text></g><g><title>associated_item (455,525 samples, 0.79%)</title><rect x="46.0375%" y="101" width="0.7947%" height="15" fill="rgb(251,115,12)"/><text x="46.2875%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (364,354 samples, 0.64%)</title><rect x="46.1966%" y="85" width="0.6357%" height="15" fill="rgb(240,54,50)"/><text x="46.4466%" y="95.50"></text></g><g><title>associated_items (666,808 samples, 1.16%)</title><rect x="45.7580%" y="117" width="1.1633%" height="15" fill="rgb(233,84,52)"/><text x="46.0080%" y="127.50"></text></g><g><title>adt_dtorck_constraint (95,811 samples, 0.17%)</title><rect x="47.2711%" y="85" width="0.1672%" height="15" fill="rgb(207,117,47)"/><text x="47.5211%" y="95.50"></text></g><g><title>dropck_outlives (270,083 samples, 0.47%)</title><rect x="47.0024%" y="117" width="0.4712%" height="15" fill="rgb(249,43,39)"/><text x="47.2524%" y="127.50"></text></g><g><title>adt_dtorck_constraint (167,382 samples, 0.29%)</title><rect x="47.1816%" y="101" width="0.2920%" height="15" fill="rgb(209,38,44)"/><text x="47.4316%" y="111.50"></text></g><g><title>mir_for_ctfe (876,907 samples, 1.53%)</title><rect x="49.0498%" y="69" width="1.5299%" height="15" fill="rgb(236,212,23)"/><text x="49.2998%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (866,007 samples, 1.51%)</title><rect x="49.0688%" y="53" width="1.5109%" height="15" fill="rgb(242,79,21)"/><text x="49.3188%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,807,779 samples, 3.15%)</title><rect x="47.4736%" y="117" width="3.1539%" height="15" fill="rgb(211,96,35)"/><text x="47.7236%" y="127.50">eva..</text></g><g><title>eval_to_const_value_raw (1,757,969 samples, 3.07%)</title><rect x="47.5605%" y="101" width="3.0670%" height="15" fill="rgb(253,215,40)"/><text x="47.8105%" y="111.50">eva..</text></g><g><title>eval_to_allocation_raw (1,712,739 samples, 2.99%)</title><rect x="47.6394%" y="85" width="2.9881%" height="15" fill="rgb(211,81,21)"/><text x="47.8894%" y="95.50">eva..</text></g><g><title>adt_def (107,122 samples, 0.19%)</title><rect x="52.8541%" y="85" width="0.1869%" height="15" fill="rgb(208,190,38)"/><text x="53.1041%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (104,372 samples, 0.18%)</title><rect x="52.8589%" y="69" width="0.1821%" height="15" fill="rgb(235,213,38)"/><text x="53.1089%" y="79.50"></text></g><g><title>item_attrs (79,101 samples, 0.14%)</title><rect x="52.9030%" y="53" width="0.1380%" height="15" fill="rgb(237,122,38)"/><text x="53.1530%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (76,451 samples, 0.13%)</title><rect x="52.9076%" y="37" width="0.1334%" height="15" fill="rgb(244,218,35)"/><text x="53.1576%" y="47.50"></text></g><g><title>adt_sized_constraint (131,422 samples, 0.23%)</title><rect x="52.8362%" y="101" width="0.2293%" height="15" fill="rgb(240,68,47)"/><text x="53.0862%" y="111.50"></text></g><g><title>generics_of (69,892 samples, 0.12%)</title><rect x="53.0655%" y="101" width="0.1219%" height="15" fill="rgb(210,16,53)"/><text x="53.3155%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (59,592 samples, 0.10%)</title><rect x="53.0835%" y="85" width="0.1040%" height="15" fill="rgb(235,124,12)"/><text x="53.3335%" y="95.50"></text></g><g><title>impl_trait_ref (86,051 samples, 0.15%)</title><rect x="53.2827%" y="101" width="0.1501%" height="15" fill="rgb(224,169,11)"/><text x="53.5327%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (75,071 samples, 0.13%)</title><rect x="53.3019%" y="85" width="0.1310%" height="15" fill="rgb(250,166,2)"/><text x="53.5519%" y="95.50"></text></g><g><title>predicates_of (183,801 samples, 0.32%)</title><rect x="53.4800%" y="101" width="0.3207%" height="15" fill="rgb(242,216,29)"/><text x="53.7300%" y="111.50"></text></g><g><title>predicates_defined_on (121,991 samples, 0.21%)</title><rect x="53.5878%" y="85" width="0.2128%" height="15" fill="rgb(230,116,27)"/><text x="53.8378%" y="95.50"></text></g><g><title>specializes (166,433 samples, 0.29%)</title><rect x="53.8006%" y="101" width="0.2904%" height="15" fill="rgb(228,99,48)"/><text x="54.0506%" y="111.50"></text></g><g><title>param_env (132,993 samples, 0.23%)</title><rect x="53.8590%" y="85" width="0.2320%" height="15" fill="rgb(253,11,6)"/><text x="54.1090%" y="95.50"></text></g><g><title>def_span (84,722 samples, 0.15%)</title><rect x="53.9432%" y="69" width="0.1478%" height="15" fill="rgb(247,143,39)"/><text x="54.1932%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (81,352 samples, 0.14%)</title><rect x="53.9491%" y="53" width="0.1419%" height="15" fill="rgb(236,97,10)"/><text x="54.1991%" y="63.50"></text></g><g><title>trait_impls_of (1,003,778 samples, 1.75%)</title><rect x="54.1098%" y="101" width="1.7512%" height="15" fill="rgb(233,208,19)"/><text x="54.3598%" y="111.50"></text></g><g><title>implementations_of_trait (339,494 samples, 0.59%)</title><rect x="55.2687%" y="85" width="0.5923%" height="15" fill="rgb(216,164,2)"/><text x="55.5187%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (213,243 samples, 0.37%)</title><rect x="55.4890%" y="69" width="0.3720%" height="15" fill="rgb(220,129,5)"/><text x="55.7390%" y="79.50"></text></g><g><title>evaluate_obligation (3,002,243 samples, 5.24%)</title><rect x="50.6275%" y="117" width="5.2378%" height="15" fill="rgb(242,17,10)"/><text x="50.8775%" y="127.50">evalua..</text></g><g><title>fn_sig (147,841 samples, 0.26%)</title><rect x="55.8991%" y="117" width="0.2579%" height="15" fill="rgb(242,107,0)"/><text x="56.1491%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (135,521 samples, 0.24%)</title><rect x="55.9206%" y="101" width="0.2364%" height="15" fill="rgb(251,28,31)"/><text x="56.1706%" y="111.50"></text></g><g><title>generics_of (200,083 samples, 0.35%)</title><rect x="56.1570%" y="117" width="0.3491%" height="15" fill="rgb(233,223,10)"/><text x="56.4070%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (151,522 samples, 0.26%)</title><rect x="56.2418%" y="101" width="0.2644%" height="15" fill="rgb(215,21,27)"/><text x="56.4918%" y="111.50"></text></g><g><title>associated_item (62,321 samples, 0.11%)</title><rect x="56.5818%" y="85" width="0.1087%" height="15" fill="rgb(232,23,21)"/><text x="56.8318%" y="95.50"></text></g><g><title>impl_item_implementor_ids (114,981 samples, 0.20%)</title><rect x="56.5061%" y="117" width="0.2006%" height="15" fill="rgb(244,5,23)"/><text x="56.7561%" y="127.50"></text></g><g><title>associated_items (98,421 samples, 0.17%)</title><rect x="56.5350%" y="101" width="0.1717%" height="15" fill="rgb(226,81,46)"/><text x="56.7850%" y="111.50"></text></g><g><title>impl_trait_ref (183,871 samples, 0.32%)</title><rect x="56.7668%" y="117" width="0.3208%" height="15" fill="rgb(247,70,30)"/><text x="57.0168%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (161,571 samples, 0.28%)</title><rect x="56.8057%" y="101" width="0.2819%" height="15" fill="rgb(212,68,19)"/><text x="57.0557%" y="111.50"></text></g><g><title>explicit_predicates_of (60,880 samples, 0.11%)</title><rect x="57.4329%" y="53" width="0.1062%" height="15" fill="rgb(240,187,13)"/><text x="57.6829%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (59,720 samples, 0.10%)</title><rect x="57.4350%" y="37" width="0.1042%" height="15" fill="rgb(223,113,26)"/><text x="57.6850%" y="47.50"></text></g><g><title>predicates_of (80,410 samples, 0.14%)</title><rect x="57.4094%" y="85" width="0.1403%" height="15" fill="rgb(206,192,2)"/><text x="57.6594%" y="95.50"></text></g><g><title>predicates_defined_on (70,600 samples, 0.12%)</title><rect x="57.4266%" y="69" width="0.1232%" height="15" fill="rgb(241,108,4)"/><text x="57.6766%" y="79.50"></text></g><g><title>is_copy_raw (397,733 samples, 0.69%)</title><rect x="57.1763%" y="117" width="0.6939%" height="15" fill="rgb(247,173,49)"/><text x="57.4263%" y="127.50"></text></g><g><title>evaluate_obligation (373,593 samples, 0.65%)</title><rect x="57.2185%" y="101" width="0.6518%" height="15" fill="rgb(224,114,35)"/><text x="57.4685%" y="111.50"></text></g><g><title>trait_impls_of (182,592 samples, 0.32%)</title><rect x="57.5517%" y="85" width="0.3186%" height="15" fill="rgb(245,159,27)"/><text x="57.8017%" y="95.50"></text></g><g><title>item_attrs (67,131 samples, 0.12%)</title><rect x="57.8784%" y="117" width="0.1171%" height="15" fill="rgb(245,172,44)"/><text x="58.1284%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (63,881 samples, 0.11%)</title><rect x="57.8841%" y="101" width="0.1114%" height="15" fill="rgb(236,23,11)"/><text x="58.1341%" y="111.50"></text></g><g><title>evaluate_obligation (208,900 samples, 0.36%)</title><rect x="58.5309%" y="101" width="0.3645%" height="15" fill="rgb(205,117,38)"/><text x="58.7809%" y="111.50"></text></g><g><title>method_autoderef_steps (445,234 samples, 0.78%)</title><rect x="58.1404%" y="117" width="0.7768%" height="15" fill="rgb(237,72,25)"/><text x="58.3904%" y="127.50"></text></g><g><title>explicit_predicates_of (203,402 samples, 0.35%)</title><rect x="59.3919%" y="85" width="0.3549%" height="15" fill="rgb(244,70,9)"/><text x="59.6419%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (167,631 samples, 0.29%)</title><rect x="59.4543%" y="69" width="0.2925%" height="15" fill="rgb(217,125,39)"/><text x="59.7043%" y="79.50"></text></g><g><title>predicates_of (517,988 samples, 0.90%)</title><rect x="58.9512%" y="117" width="0.9037%" height="15" fill="rgb(235,36,10)"/><text x="59.2012%" y="127.50"></text></g><g><title>predicates_defined_on (364,955 samples, 0.64%)</title><rect x="59.2182%" y="101" width="0.6367%" height="15" fill="rgb(251,123,47)"/><text x="59.4682%" y="111.50"></text></g><g><title>inferred_outlives_of (61,951 samples, 0.11%)</title><rect x="59.7468%" y="85" width="0.1081%" height="15" fill="rgb(221,13,13)"/><text x="59.9968%" y="95.50"></text></g><g><title>resolve_instance (73,230 samples, 0.13%)</title><rect x="59.8549%" y="117" width="0.1278%" height="15" fill="rgb(238,131,9)"/><text x="60.1049%" y="127.50"></text></g><g><title>specializes (186,293 samples, 0.33%)</title><rect x="59.9826%" y="117" width="0.3250%" height="15" fill="rgb(211,50,8)"/><text x="60.2326%" y="127.50"></text></g><g><title>param_env (78,441 samples, 0.14%)</title><rect x="60.1708%" y="101" width="0.1369%" height="15" fill="rgb(245,182,24)"/><text x="60.4208%" y="111.50"></text></g><g><title>item_bodies_checking (16,478,477 samples, 28.75%)</title><rect x="31.8144%" y="181" width="28.7491%" height="15" fill="rgb(242,14,37)"/><text x="32.0644%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,476,147 samples, 28.74%)</title><rect x="31.8184%" y="165" width="28.7450%" height="15" fill="rgb(246,228,12)"/><text x="32.0684%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (16,469,317 samples, 28.73%)</title><rect x="31.8304%" y="149" width="28.7331%" height="15" fill="rgb(213,55,15)"/><text x="32.0804%" y="159.50">typeck</text></g><g><title>typeck (16,459,697 samples, 28.72%)</title><rect x="31.8471%" y="133" width="28.7163%" height="15" fill="rgb(209,9,3)"/><text x="32.0971%" y="143.50">typeck</text></g><g><title>impl_parent (95,401 samples, 0.17%)</title><rect x="60.8023%" y="101" width="0.1664%" height="15" fill="rgb(230,59,30)"/><text x="61.0523%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (72,331 samples, 0.13%)</title><rect x="60.8425%" y="85" width="0.1262%" height="15" fill="rgb(209,121,21)"/><text x="61.0925%" y="95.50"></text></g><g><title>impl_trait_ref (308,661 samples, 0.54%)</title><rect x="60.9687%" y="101" width="0.5385%" height="15" fill="rgb(220,109,13)"/><text x="61.2187%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (289,451 samples, 0.50%)</title><rect x="61.0022%" y="85" width="0.5050%" height="15" fill="rgb(232,18,1)"/><text x="61.2522%" y="95.50"></text></g><g><title>adt_destructor (536,746 samples, 0.94%)</title><rect x="60.6188%" y="149" width="0.9364%" height="15" fill="rgb(215,41,42)"/><text x="60.8688%" y="159.50"></text></g><g><title>coherent_trait (531,436 samples, 0.93%)</title><rect x="60.6280%" y="133" width="0.9272%" height="15" fill="rgb(224,123,36)"/><text x="60.8780%" y="143.50"></text></g><g><title>specialization_graph_of (527,506 samples, 0.92%)</title><rect x="60.6349%" y="117" width="0.9203%" height="15" fill="rgb(240,125,3)"/><text x="60.8849%" y="127.50"></text></g><g><title>item_types_checking (696,037 samples, 1.21%)</title><rect x="60.5634%" y="181" width="1.2143%" height="15" fill="rgb(205,98,50)"/><text x="60.8134%" y="191.50"></text></g><g><title>check_mod_item_types (694,437 samples, 1.21%)</title><rect x="60.5662%" y="165" width="1.2115%" height="15" fill="rgb(205,185,37)"/><text x="60.8162%" y="175.50"></text></g><g><title>typeck (111,841 samples, 0.20%)</title><rect x="61.5827%" y="149" width="0.1951%" height="15" fill="rgb(238,207,15)"/><text x="61.8327%" y="159.50"></text></g><g><title>named_region_map (68,920 samples, 0.12%)</title><rect x="61.9971%" y="133" width="0.1202%" height="15" fill="rgb(213,199,42)"/><text x="62.2471%" y="143.50"></text></g><g><title>resolve_lifetimes (65,200 samples, 0.11%)</title><rect x="62.0036%" y="117" width="0.1138%" height="15" fill="rgb(235,201,11)"/><text x="62.2536%" y="127.50"></text></g><g><title>generics_of (110,110 samples, 0.19%)</title><rect x="61.9429%" y="149" width="0.1921%" height="15" fill="rgb(207,46,11)"/><text x="62.1929%" y="159.50"></text></g><g><title>predicates_of (173,212 samples, 0.30%)</title><rect x="62.1350%" y="149" width="0.3022%" height="15" fill="rgb(241,35,35)"/><text x="62.3850%" y="159.50"></text></g><g><title>predicates_defined_on (167,562 samples, 0.29%)</title><rect x="62.1448%" y="133" width="0.2923%" height="15" fill="rgb(243,32,47)"/><text x="62.3948%" y="143.50"></text></g><g><title>inferred_outlives_of (109,981 samples, 0.19%)</title><rect x="62.2453%" y="117" width="0.1919%" height="15" fill="rgb(247,202,23)"/><text x="62.4953%" y="127.50"></text></g><g><title>inferred_outlives_crate (100,981 samples, 0.18%)</title><rect x="62.2610%" y="101" width="0.1762%" height="15" fill="rgb(219,102,11)"/><text x="62.5110%" y="111.50"></text></g><g><title>type_collecting (435,355 samples, 0.76%)</title><rect x="61.7804%" y="181" width="0.7595%" height="15" fill="rgb(243,110,44)"/><text x="62.0304%" y="191.50"></text></g><g><title>collect_mod_item_types (428,635 samples, 0.75%)</title><rect x="61.7921%" y="165" width="0.7478%" height="15" fill="rgb(222,74,54)"/><text x="62.0421%" y="175.50"></text></g><g><title>type_of (58,891 samples, 0.10%)</title><rect x="62.4372%" y="149" width="0.1027%" height="15" fill="rgb(216,99,12)"/><text x="62.6872%" y="159.50"></text></g><g><title>adt_def (63,790 samples, 0.11%)</title><rect x="63.3810%" y="117" width="0.1113%" height="15" fill="rgb(226,22,26)"/><text x="63.6310%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (62,650 samples, 0.11%)</title><rect x="63.3830%" y="101" width="0.1093%" height="15" fill="rgb(217,163,10)"/><text x="63.6330%" y="111.50"></text></g><g><title>adt_sized_constraint (70,610 samples, 0.12%)</title><rect x="63.3706%" y="133" width="0.1232%" height="15" fill="rgb(213,25,53)"/><text x="63.6206%" y="143.50"></text></g><g><title>evaluate_obligation (221,622 samples, 0.39%)</title><rect x="63.1802%" y="149" width="0.3867%" height="15" fill="rgb(252,105,26)"/><text x="63.4302%" y="159.50"></text></g><g><title>implied_outlives_bounds (68,141 samples, 0.12%)</title><rect x="63.5669%" y="149" width="0.1189%" height="15" fill="rgb(220,39,43)"/><text x="63.8169%" y="159.50"></text></g><g><title>param_env (160,163 samples, 0.28%)</title><rect x="63.6858%" y="149" width="0.2794%" height="15" fill="rgb(229,68,48)"/><text x="63.9358%" y="159.50"></text></g><g><title>region_scope_tree (58,181 samples, 0.10%)</title><rect x="64.0354%" y="149" width="0.1015%" height="15" fill="rgb(252,8,32)"/><text x="64.2854%" y="159.50"></text></g><g><title>analysis (33,138,186 samples, 57.81%)</title><rect x="6.4130%" y="213" width="57.8143%" height="15" fill="rgb(223,20,43)"/><text x="6.6630%" y="223.50">analysis</text></g><g><title>type_check_crate (18,629,299 samples, 32.50%)</title><rect x="31.7258%" y="197" width="32.5015%" height="15" fill="rgb(229,81,49)"/><text x="31.9758%" y="207.50">type_check_crate</text></g><g><title>wf_checking (966,180 samples, 1.69%)</title><rect x="62.5417%" y="181" width="1.6856%" height="15" fill="rgb(236,28,36)"/><text x="62.7917%" y="191.50"></text></g><g><title>check_item_well_formed (933,750 samples, 1.63%)</title><rect x="62.5983%" y="165" width="1.6291%" height="15" fill="rgb(249,185,26)"/><text x="62.8483%" y="175.50"></text></g><g><title>codegen_module (285,883 samples, 0.50%)</title><rect x="65.1051%" y="197" width="0.4988%" height="15" fill="rgb(249,174,33)"/><text x="65.3551%" y="207.50"></text></g><g><title>codegen_crate (874,669 samples, 1.53%)</title><rect x="64.2394%" y="213" width="1.5260%" height="15" fill="rgb(233,201,37)"/><text x="64.4894%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,810,619 samples, 4.90%)</title><rect x="65.7941%" y="197" width="4.9035%" height="15" fill="rgb(221,78,26)"/><text x="66.0441%" y="207.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (2,758,019 samples, 4.81%)</title><rect x="65.8859%" y="181" width="4.8118%" height="15" fill="rgb(250,127,30)"/><text x="66.1359%" y="191.50">LLVM_m..</text></g><g><title>codegen_module_optimize (3,009,321 samples, 5.25%)</title><rect x="65.7654%" y="213" width="5.2502%" height="15" fill="rgb(230,49,44)"/><text x="66.0154%" y="223.50">codege..</text></g><g><title>LLVM_module_optimize (182,202 samples, 0.32%)</title><rect x="70.6977%" y="197" width="0.3179%" height="15" fill="rgb(229,67,23)"/><text x="70.9477%" y="207.50"></text></g><g><title>AST_validation (70,341 samples, 0.12%)</title><rect x="71.2510%" y="197" width="0.1227%" height="15" fill="rgb(249,83,47)"/><text x="71.5010%" y="207.50"></text></g><g><title>metadata_load_macro (64,490 samples, 0.11%)</title><rect x="79.3996%" y="165" width="0.1125%" height="15" fill="rgb(215,43,3)"/><text x="79.6496%" y="175.50"></text></g><g><title>macro_expand_crate (6,198,513 samples, 10.81%)</title><rect x="71.4944%" y="197" width="10.8142%" height="15" fill="rgb(238,154,13)"/><text x="71.7444%" y="207.50">macro_expand_cra..</text></g><g><title>expand_crate (6,184,533 samples, 10.79%)</title><rect x="71.5188%" y="181" width="10.7898%" height="15" fill="rgb(219,56,2)"/><text x="71.7688%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (1,602,877 samples, 2.80%)</title><rect x="79.5121%" y="165" width="2.7964%" height="15" fill="rgb(233,0,4)"/><text x="79.7621%" y="175.50">me..</text></g><g><title>metadata_register_crate (647,557 samples, 1.13%)</title><rect x="81.1788%" y="149" width="1.1298%" height="15" fill="rgb(235,30,7)"/><text x="81.4288%" y="159.50"></text></g><g><title>metadata_register_crate (137,751 samples, 0.24%)</title><rect x="82.0683%" y="133" width="0.2403%" height="15" fill="rgb(250,79,13)"/><text x="82.3183%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (59,461 samples, 0.10%)</title><rect x="82.3138%" y="197" width="0.1037%" height="15" fill="rgb(211,146,34)"/><text x="82.5638%" y="207.50"></text></g><g><title>finalize_imports (192,802 samples, 0.34%)</title><rect x="82.4248%" y="181" width="0.3364%" height="15" fill="rgb(228,22,38)"/><text x="82.6748%" y="191.50"></text></g><g><title>late_resolve_crate (597,646 samples, 1.04%)</title><rect x="82.7787%" y="181" width="1.0427%" height="15" fill="rgb(235,168,5)"/><text x="83.0287%" y="191.50"></text></g><g><title>configure_and_expand (7,369,345 samples, 12.86%)</title><rect x="71.0155%" y="213" width="12.8569%" height="15" fill="rgb(221,155,16)"/><text x="71.2655%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (833,939 samples, 1.45%)</title><rect x="82.4175%" y="197" width="1.4549%" height="15" fill="rgb(215,215,53)"/><text x="82.6675%" y="207.50"></text></g><g><title>early_lint_checks (81,901 samples, 0.14%)</title><rect x="83.9878%" y="213" width="0.1429%" height="15" fill="rgb(223,4,10)"/><text x="84.2378%" y="223.50"></text></g><g><title>free_global_ctxt (3,231,733 samples, 5.64%)</title><rect x="84.1307%" y="213" width="5.6382%" height="15" fill="rgb(234,103,6)"/><text x="84.3807%" y="223.50">free_gl..</text></g><g><title>crate_hash (69,761 samples, 0.12%)</title><rect x="90.5060%" y="197" width="0.1217%" height="15" fill="rgb(227,97,0)"/><text x="90.7560%" y="207.50"></text></g><g><title>exported_symbols (96,961 samples, 0.17%)</title><rect x="90.6850%" y="197" width="0.1692%" height="15" fill="rgb(234,150,53)"/><text x="90.9350%" y="207.50"></text></g><g><title>layout_of (191,131 samples, 0.33%)</title><rect x="92.6493%" y="165" width="0.3335%" height="15" fill="rgb(228,201,54)"/><text x="92.8993%" y="175.50"></text></g><g><title>layout_of (133,931 samples, 0.23%)</title><rect x="92.7490%" y="149" width="0.2337%" height="15" fill="rgb(222,22,37)"/><text x="92.9990%" y="159.50"></text></g><g><title>layout_of (94,981 samples, 0.17%)</title><rect x="92.8170%" y="133" width="0.1657%" height="15" fill="rgb(237,53,32)"/><text x="93.0670%" y="143.50"></text></g><g><title>layout_of (573,990 samples, 1.00%)</title><rect x="92.0765%" y="181" width="1.0014%" height="15" fill="rgb(233,25,53)"/><text x="92.3265%" y="191.50"></text></g><g><title>needs_drop_raw (88,932 samples, 0.16%)</title><rect x="94.5020%" y="165" width="0.1552%" height="15" fill="rgb(210,40,34)"/><text x="94.7520%" y="175.50"></text></g><g><title>is_copy_raw (76,062 samples, 0.13%)</title><rect x="94.5244%" y="149" width="0.1327%" height="15" fill="rgb(241,220,44)"/><text x="94.7744%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (907,278 samples, 1.58%)</title><rect x="93.0779%" y="181" width="1.5829%" height="15" fill="rgb(235,28,35)"/><text x="93.3279%" y="191.50"></text></g><g><title>optimized_mir (2,167,313 samples, 3.78%)</title><rect x="90.8969%" y="197" width="3.7812%" height="15" fill="rgb(210,56,17)"/><text x="91.1469%" y="207.50">opti..</text></g><g><title>generate_crate_metadata (2,829,038 samples, 4.94%)</title><rect x="89.7689%" y="213" width="4.9357%" height="15" fill="rgb(224,130,29)"/><text x="90.0189%" y="223.50">genera..</text></g><g><title>hir_lowering (513,595 samples, 0.90%)</title><rect x="94.7045%" y="213" width="0.8960%" height="15" fill="rgb(235,212,8)"/><text x="94.9545%" y="223.50"></text></g><g><title>link_crate (683,077 samples, 1.19%)</title><rect x="95.6428%" y="197" width="1.1917%" height="15" fill="rgb(223,33,50)"/><text x="95.8928%" y="207.50"></text></g><g><title>link_binary (664,816 samples, 1.16%)</title><rect x="95.6746%" y="181" width="1.1599%" height="15" fill="rgb(219,149,13)"/><text x="95.9246%" y="191.50"></text></g><g><title>link_rlib (399,044 samples, 0.70%)</title><rect x="96.1383%" y="165" width="0.6962%" height="15" fill="rgb(250,156,29)"/><text x="96.3883%" y="175.50"></text></g><g><title>link (714,458 samples, 1.25%)</title><rect x="95.6006%" y="213" width="1.2465%" height="15" fill="rgb(216,193,19)"/><text x="95.8506%" y="223.50"></text></g><g><title>parse_crate (707,847 samples, 1.23%)</title><rect x="96.8470%" y="213" width="1.2349%" height="15" fill="rgb(216,135,14)"/><text x="97.0970%" y="223.50"></text></g><g><title>prepare_outputs (183,262 samples, 0.32%)</title><rect x="98.0910%" y="213" width="0.3197%" height="15" fill="rgb(241,47,5)"/><text x="98.3410%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (546,086 samples, 0.95%)</title><rect x="98.4107%" y="213" width="0.9527%" height="15" fill="rgb(233,42,35)"/><text x="98.6607%" y="223.50"></text></g><g><title>setup_global_ctxt (78,691 samples, 0.14%)</title><rect x="99.3660%" y="213" width="0.1373%" height="15" fill="rgb(231,13,6)"/><text x="99.6160%" y="223.50"></text></g><g><title>all (57,318,313 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(207,181,40)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (57,318,313 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(254,173,49)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (284,723 samples, 0.50%)</title><rect x="99.5033%" y="213" width="0.4967%" height="15" fill="rgb(221,1,38)"/><text x="99.7533%" y="223.50"></text></g></svg></svg>