<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,758,769 samples, 12.15%)</title><rect x="0.8239%" y="277" width="12.1500%" height="15" fill="rgb(227,0,7)"/><text x="1.0739%" y="287.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (74,731 samples, 0.10%)</title><rect x="14.5437%" y="181" width="0.1037%" height="15" fill="rgb(217,0,24)"/><text x="14.7937%" y="191.50"></text></g><g><title>needs_drop_raw (538,206 samples, 0.75%)</title><rect x="14.8445%" y="165" width="0.7466%" height="15" fill="rgb(221,193,54)"/><text x="15.0945%" y="175.50"></text></g><g><title>is_copy_raw (489,565 samples, 0.68%)</title><rect x="14.9119%" y="149" width="0.6791%" height="15" fill="rgb(248,212,6)"/><text x="15.1619%" y="159.50"></text></g><g><title>evaluate_obligation (476,105 samples, 0.66%)</title><rect x="14.9306%" y="133" width="0.6604%" height="15" fill="rgb(208,68,35)"/><text x="15.1806%" y="143.50"></text></g><g><title>trait_impls_of (314,914 samples, 0.44%)</title><rect x="15.1542%" y="117" width="0.4368%" height="15" fill="rgb(232,128,0)"/><text x="15.4042%" y="127.50"></text></g><g><title>thir_body (94,211 samples, 0.13%)</title><rect x="15.6354%" y="165" width="0.1307%" height="15" fill="rgb(207,160,47)"/><text x="15.8854%" y="175.50"></text></g><g><title>mir_const (1,112,441 samples, 1.54%)</title><rect x="14.2316%" y="213" width="1.5432%" height="15" fill="rgb(228,23,34)"/><text x="14.4816%" y="223.50"></text></g><g><title>unsafety_check_result (944,009 samples, 1.31%)</title><rect x="14.4653%" y="197" width="1.3095%" height="15" fill="rgb(218,30,26)"/><text x="14.7153%" y="207.50"></text></g><g><title>mir_built (812,738 samples, 1.13%)</title><rect x="14.6474%" y="181" width="1.1274%" height="15" fill="rgb(220,122,19)"/><text x="14.8974%" y="191.50"></text></g><g><title>mir_promoted (1,243,063 samples, 1.72%)</title><rect x="14.0605%" y="229" width="1.7244%" height="15" fill="rgb(250,228,42)"/><text x="14.3105%" y="239.50"></text></g><g><title>MIR_borrow_checking (2,010,891 samples, 2.79%)</title><rect x="13.1279%" y="261" width="2.7895%" height="15" fill="rgb(240,193,28)"/><text x="13.3779%" y="271.50">MI..</text></g><g><title>mir_borrowck (2,005,991 samples, 2.78%)</title><rect x="13.1347%" y="245" width="2.7827%" height="15" fill="rgb(216,20,37)"/><text x="13.3847%" y="255.50">mi..</text></g><g><title>hir_module_items (83,141 samples, 0.12%)</title><rect x="15.9236%" y="261" width="0.1153%" height="15" fill="rgb(206,188,39)"/><text x="16.1736%" y="271.50"></text></g><g><title>codegen_fn_attrs (133,121 samples, 0.18%)</title><rect x="16.1417%" y="229" width="0.1847%" height="15" fill="rgb(217,207,13)"/><text x="16.3917%" y="239.50"></text></g><g><title>check_mod_attrs (176,141 samples, 0.24%)</title><rect x="16.0823%" y="245" width="0.2443%" height="15" fill="rgb(231,73,38)"/><text x="16.3323%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (147,443 samples, 0.20%)</title><rect x="16.3785%" y="245" width="0.2045%" height="15" fill="rgb(225,20,46)"/><text x="16.6285%" y="255.50"></text></g><g><title>misc_checking_1 (419,025 samples, 0.58%)</title><rect x="16.0397%" y="261" width="0.5813%" height="15" fill="rgb(210,31,41)"/><text x="16.2897%" y="271.50"></text></g><g><title>misc_checking_2 (94,041 samples, 0.13%)</title><rect x="16.6210%" y="261" width="0.1305%" height="15" fill="rgb(221,200,47)"/><text x="16.8710%" y="271.50"></text></g><g><title>death_checking (98,061 samples, 0.14%)</title><rect x="16.8046%" y="245" width="0.1360%" height="15" fill="rgb(226,26,5)"/><text x="17.0546%" y="255.50"></text></g><g><title>crate_lints (173,671 samples, 0.24%)</title><rect x="16.9436%" y="229" width="0.2409%" height="15" fill="rgb(249,33,26)"/><text x="17.1936%" y="239.50"></text></g><g><title>param_env (111,260 samples, 0.15%)</title><rect x="17.0302%" y="213" width="0.1543%" height="15" fill="rgb(235,183,28)"/><text x="17.2802%" y="223.50"></text></g><g><title>lint_checking (206,732 samples, 0.29%)</title><rect x="16.9406%" y="245" width="0.2868%" height="15" fill="rgb(221,5,38)"/><text x="17.1906%" y="255.50"></text></g><g><title>misc_checking_3 (432,394 samples, 0.60%)</title><rect x="16.7514%" y="261" width="0.5998%" height="15" fill="rgb(247,18,42)"/><text x="17.0014%" y="271.50"></text></g><g><title>associated_item (165,902 samples, 0.23%)</title><rect x="18.9680%" y="181" width="0.2301%" height="15" fill="rgb(241,131,45)"/><text x="19.2180%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (127,842 samples, 0.18%)</title><rect x="19.0207%" y="165" width="0.1773%" height="15" fill="rgb(249,31,29)"/><text x="19.2707%" y="175.50"></text></g><g><title>associated_items (253,542 samples, 0.35%)</title><rect x="18.8615%" y="197" width="0.3517%" height="15" fill="rgb(225,111,53)"/><text x="19.1115%" y="207.50"></text></g><g><title>impl_parent (138,740 samples, 0.19%)</title><rect x="19.6074%" y="101" width="0.1925%" height="15" fill="rgb(238,160,17)"/><text x="19.8574%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (97,410 samples, 0.14%)</title><rect x="19.6647%" y="85" width="0.1351%" height="15" fill="rgb(214,148,48)"/><text x="19.9147%" y="95.50"></text></g><g><title>impl_trait_ref (537,888 samples, 0.75%)</title><rect x="19.7999%" y="101" width="0.7461%" height="15" fill="rgb(232,36,49)"/><text x="20.0499%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (493,877 samples, 0.69%)</title><rect x="19.8609%" y="85" width="0.6851%" height="15" fill="rgb(209,103,24)"/><text x="20.1109%" y="95.50"></text></g><g><title>coherent_trait (915,089 samples, 1.27%)</title><rect x="19.3541%" y="133" width="1.2694%" height="15" fill="rgb(229,88,8)"/><text x="19.6041%" y="143.50"></text></g><g><title>specialization_graph_of (909,539 samples, 1.26%)</title><rect x="19.3618%" y="117" width="1.2617%" height="15" fill="rgb(213,181,19)"/><text x="19.6118%" y="127.50"></text></g><g><title>adt_destructor (929,569 samples, 1.29%)</title><rect x="19.3375%" y="165" width="1.2895%" height="15" fill="rgb(254,191,54)"/><text x="19.5875%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_destructor (926,849 samples, 1.29%)</title><rect x="19.3413%" y="149" width="1.2857%" height="15" fill="rgb(241,83,37)"/><text x="19.5913%" y="159.50"></text></g><g><title>dropck_outlives (1,036,180 samples, 1.44%)</title><rect x="19.2290%" y="197" width="1.4374%" height="15" fill="rgb(233,36,39)"/><text x="19.4790%" y="207.50"></text></g><g><title>adt_dtorck_constraint (997,179 samples, 1.38%)</title><rect x="19.2831%" y="181" width="1.3833%" height="15" fill="rgb(226,3,54)"/><text x="19.5331%" y="191.50"></text></g><g><title>adt_def (278,924 samples, 0.39%)</title><rect x="20.9700%" y="165" width="0.3869%" height="15" fill="rgb(245,192,40)"/><text x="21.2200%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (276,244 samples, 0.38%)</title><rect x="20.9737%" y="149" width="0.3832%" height="15" fill="rgb(238,167,29)"/><text x="21.2237%" y="159.50"></text></g><g><title>item_attrs (254,864 samples, 0.35%)</title><rect x="21.0033%" y="133" width="0.3535%" height="15" fill="rgb(232,182,51)"/><text x="21.2533%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (252,284 samples, 0.35%)</title><rect x="21.0069%" y="117" width="0.3500%" height="15" fill="rgb(231,60,39)"/><text x="21.2569%" y="127.50"></text></g><g><title>adt_sized_constraint (364,124 samples, 0.51%)</title><rect x="20.9525%" y="181" width="0.5051%" height="15" fill="rgb(208,69,12)"/><text x="21.2025%" y="191.50"></text></g><g><title>specializes (233,802 samples, 0.32%)</title><rect x="21.5842%" y="181" width="0.3243%" height="15" fill="rgb(235,93,37)"/><text x="21.8342%" y="191.50"></text></g><g><title>param_env (215,422 samples, 0.30%)</title><rect x="21.6097%" y="165" width="0.2988%" height="15" fill="rgb(213,116,39)"/><text x="21.8597%" y="175.50"></text></g><g><title>def_span (192,902 samples, 0.27%)</title><rect x="21.6410%" y="149" width="0.2676%" height="15" fill="rgb(222,207,29)"/><text x="21.8910%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (191,312 samples, 0.27%)</title><rect x="21.6432%" y="133" width="0.2654%" height="15" fill="rgb(206,96,30)"/><text x="21.8932%" y="143.50"></text></g><g><title>evaluate_obligation (1,377,014 samples, 1.91%)</title><rect x="20.6664%" y="197" width="1.9102%" height="15" fill="rgb(218,138,4)"/><text x="20.9164%" y="207.50">e..</text></g><g><title>trait_impls_of (478,816 samples, 0.66%)</title><rect x="21.9123%" y="181" width="0.6642%" height="15" fill="rgb(250,191,14)"/><text x="22.1623%" y="191.50"></text></g><g><title>implementations_of_trait (114,361 samples, 0.16%)</title><rect x="22.4179%" y="165" width="0.1586%" height="15" fill="rgb(239,60,40)"/><text x="22.6679%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (96,970 samples, 0.13%)</title><rect x="22.4420%" y="149" width="0.1345%" height="15" fill="rgb(206,27,48)"/><text x="22.6920%" y="159.50"></text></g><g><title>fn_sig (81,743 samples, 0.11%)</title><rect x="22.5866%" y="197" width="0.1134%" height="15" fill="rgb(225,35,8)"/><text x="22.8366%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (77,793 samples, 0.11%)</title><rect x="22.5921%" y="181" width="0.1079%" height="15" fill="rgb(250,213,24)"/><text x="22.8421%" y="191.50"></text></g><g><title>method_autoderef_steps (143,701 samples, 0.20%)</title><rect x="22.9658%" y="197" width="0.1993%" height="15" fill="rgb(247,123,22)"/><text x="23.2158%" y="207.50"></text></g><g><title>evaluate_obligation (119,011 samples, 0.17%)</title><rect x="23.0000%" y="181" width="0.1651%" height="15" fill="rgb(231,138,38)"/><text x="23.2500%" y="191.50"></text></g><g><title>explicit_predicates_of (75,172 samples, 0.10%)</title><rect x="23.2892%" y="165" width="0.1043%" height="15" fill="rgb(231,145,46)"/><text x="23.5392%" y="175.50"></text></g><g><title>predicates_of (187,522 samples, 0.26%)</title><rect x="23.1848%" y="197" width="0.2601%" height="15" fill="rgb(251,118,11)"/><text x="23.4348%" y="207.50"></text></g><g><title>predicates_defined_on (138,022 samples, 0.19%)</title><rect x="23.2535%" y="181" width="0.1915%" height="15" fill="rgb(217,147,25)"/><text x="23.5035%" y="191.50"></text></g><g><title>item_bodies_checking (4,478,035 samples, 6.21%)</title><rect x="17.4263%" y="245" width="6.2119%" height="15" fill="rgb(247,81,37)"/><text x="17.6763%" y="255.50">item_bod..</text></g><g><title>typeck_item_bodies (4,475,425 samples, 6.21%)</title><rect x="17.4300%" y="229" width="6.2082%" height="15" fill="rgb(209,12,38)"/><text x="17.6800%" y="239.50">typeck_i..</text></g><g><title>typeck (4,470,725 samples, 6.20%)</title><rect x="17.4365%" y="213" width="6.2017%" height="15" fill="rgb(227,1,9)"/><text x="17.6865%" y="223.50">typeck</text></g><g><title>type_collecting (241,622 samples, 0.34%)</title><rect x="23.6481%" y="245" width="0.3352%" height="15" fill="rgb(248,47,43)"/><text x="23.8981%" y="255.50"></text></g><g><title>collect_mod_item_types (226,962 samples, 0.31%)</title><rect x="23.6684%" y="229" width="0.3148%" height="15" fill="rgb(221,10,30)"/><text x="23.9184%" y="239.50"></text></g><g><title>type_of (80,451 samples, 0.11%)</title><rect x="23.8717%" y="213" width="0.1116%" height="15" fill="rgb(210,229,1)"/><text x="24.1217%" y="223.50"></text></g><g><title>implied_outlives_bounds (72,670 samples, 0.10%)</title><rect x="24.3484%" y="213" width="0.1008%" height="15" fill="rgb(222,148,37)"/><text x="24.5984%" y="223.50"></text></g><g><title>param_env (155,452 samples, 0.22%)</title><rect x="24.4492%" y="213" width="0.2156%" height="15" fill="rgb(234,67,33)"/><text x="24.6992%" y="223.50"></text></g><g><title>analysis (8,441,215 samples, 11.71%)</title><rect x="12.9740%" y="277" width="11.7095%" height="15" fill="rgb(247,98,35)"/><text x="13.2240%" y="287.50">analysis</text></g><g><title>type_check_crate (5,285,683 samples, 7.33%)</title><rect x="17.3513%" y="261" width="7.3322%" height="15" fill="rgb(247,138,52)"/><text x="17.6013%" y="271.50">type_check..</text></g><g><title>wf_checking (504,165 samples, 0.70%)</title><rect x="23.9841%" y="245" width="0.6994%" height="15" fill="rgb(213,79,30)"/><text x="24.2341%" y="255.50"></text></g><g><title>check_item_well_formed (484,895 samples, 0.67%)</title><rect x="24.0108%" y="229" width="0.6726%" height="15" fill="rgb(246,177,23)"/><text x="24.2608%" y="239.50"></text></g><g><title>const_caller_location (76,941 samples, 0.11%)</title><rect x="31.0519%" y="245" width="0.1067%" height="15" fill="rgb(230,62,27)"/><text x="31.3019%" y="255.50"></text></g><g><title>eval_to_const_value_raw (217,572 samples, 0.30%)</title><rect x="31.5962%" y="213" width="0.3018%" height="15" fill="rgb(216,154,8)"/><text x="31.8462%" y="223.50"></text></g><g><title>eval_to_const_value_raw (194,641 samples, 0.27%)</title><rect x="31.6280%" y="197" width="0.2700%" height="15" fill="rgb(244,35,45)"/><text x="31.8780%" y="207.50"></text></g><g><title>eval_to_allocation_raw (174,441 samples, 0.24%)</title><rect x="31.6560%" y="181" width="0.2420%" height="15" fill="rgb(251,115,12)"/><text x="31.9060%" y="191.50"></text></g><g><title>layout_of (177,432 samples, 0.25%)</title><rect x="31.9095%" y="213" width="0.2461%" height="15" fill="rgb(240,54,50)"/><text x="32.1595%" y="223.50"></text></g><g><title>param_env (184,963 samples, 0.26%)</title><rect x="32.1556%" y="213" width="0.2566%" height="15" fill="rgb(233,84,52)"/><text x="32.4056%" y="223.50"></text></g><g><title>predicates_of (75,121 samples, 0.10%)</title><rect x="32.3080%" y="197" width="0.1042%" height="15" fill="rgb(207,117,47)"/><text x="32.5580%" y="207.50"></text></g><g><title>layout_of (756,058 samples, 1.05%)</title><rect x="31.3793%" y="229" width="1.0488%" height="15" fill="rgb(249,43,39)"/><text x="31.6293%" y="239.50"></text></g><g><title>fn_abi_of_instance (957,740 samples, 1.33%)</title><rect x="31.1614%" y="245" width="1.3286%" height="15" fill="rgb(209,38,44)"/><text x="31.4114%" y="255.50"></text></g><g><title>symbol_name (148,440 samples, 0.21%)</title><rect x="32.5812%" y="245" width="0.2059%" height="15" fill="rgb(236,212,23)"/><text x="32.8312%" y="255.50"></text></g><g><title>codegen_module (4,179,661 samples, 5.80%)</title><rect x="27.0007%" y="261" width="5.7980%" height="15" fill="rgb(242,79,21)"/><text x="27.2507%" y="271.50">codegen..</text></g><g><title>codegen_crate (5,956,150 samples, 8.26%)</title><rect x="24.6945%" y="277" width="8.2623%" height="15" fill="rgb(211,96,35)"/><text x="24.9445%" y="287.50">codegen_crate</text></g><g><title>LLVM_module_codegen (15,953,421 samples, 22.13%)</title><rect x="33.0176%" y="261" width="22.1303%" height="15" fill="rgb(253,215,40)"/><text x="33.2676%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (15,337,076 samples, 21.28%)</title><rect x="33.8726%" y="245" width="21.2754%" height="15" fill="rgb(211,81,21)"/><text x="34.1226%" y="255.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (16,688,179 samples, 23.15%)</title><rect x="32.9568%" y="277" width="23.1496%" height="15" fill="rgb(208,190,38)"/><text x="33.2068%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (690,968 samples, 0.96%)</title><rect x="55.1479%" y="261" width="0.9585%" height="15" fill="rgb(235,213,38)"/><text x="55.3979%" y="271.50"></text></g><g><title>metadata_load_macro (122,240 samples, 0.17%)</title><rect x="69.1690%" y="229" width="0.1696%" height="15" fill="rgb(237,122,38)"/><text x="69.4190%" y="239.50"></text></g><g><title>metadata_register_crate (2,338,053 samples, 3.24%)</title><rect x="69.3385%" y="229" width="3.2433%" height="15" fill="rgb(244,218,35)"/><text x="69.5885%" y="239.50">met..</text></g><g><title>metadata_register_crate (859,318 samples, 1.19%)</title><rect x="71.3898%" y="213" width="1.1920%" height="15" fill="rgb(240,68,47)"/><text x="71.6398%" y="223.50"></text></g><g><title>macro_expand_crate (11,608,567 samples, 16.10%)</title><rect x="56.5059%" y="261" width="16.1032%" height="15" fill="rgb(210,16,53)"/><text x="56.7559%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (11,587,887 samples, 16.07%)</title><rect x="56.5346%" y="245" width="16.0745%" height="15" fill="rgb(235,124,12)"/><text x="56.7846%" y="255.50">expand_crate</text></g><g><title>finalize_imports (325,594 samples, 0.45%)</title><rect x="72.6895%" y="245" width="0.4517%" height="15" fill="rgb(224,169,11)"/><text x="72.9395%" y="255.50"></text></g><g><title>late_resolve_crate (310,823 samples, 0.43%)</title><rect x="73.1634%" y="245" width="0.4312%" height="15" fill="rgb(250,166,2)"/><text x="73.4134%" y="255.50"></text></g><g><title>configure_and_expand (12,647,068 samples, 17.54%)</title><rect x="56.1064%" y="277" width="17.5438%" height="15" fill="rgb(242,216,29)"/><text x="56.3564%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (699,907 samples, 0.97%)</title><rect x="72.6793%" y="261" width="0.9709%" height="15" fill="rgb(230,116,27)"/><text x="72.9293%" y="271.50"></text></g><g><title>free_global_ctxt (3,216,563 samples, 4.46%)</title><rect x="73.7781%" y="277" width="4.4620%" height="15" fill="rgb(228,99,48)"/><text x="74.0281%" y="287.50">free_..</text></g><g><title>crate_hash (111,881 samples, 0.16%)</title><rect x="78.6484%" y="261" width="0.1552%" height="15" fill="rgb(253,11,6)"/><text x="78.8984%" y="271.50"></text></g><g><title>is_reachable_non_generic (317,753 samples, 0.44%)</title><rect x="79.2176%" y="197" width="0.4408%" height="15" fill="rgb(247,143,39)"/><text x="79.4676%" y="207.50"></text></g><g><title>reachable_non_generics (313,003 samples, 0.43%)</title><rect x="79.2242%" y="181" width="0.4342%" height="15" fill="rgb(236,97,10)"/><text x="79.4742%" y="191.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (311,113 samples, 0.43%)</title><rect x="79.2268%" y="165" width="0.4316%" height="15" fill="rgb(233,208,19)"/><text x="79.4768%" y="175.50"></text></g><g><title>exported_symbols (157,451 samples, 0.22%)</title><rect x="79.4400%" y="149" width="0.2184%" height="15" fill="rgb(216,164,2)"/><text x="79.6900%" y="159.50"></text></g><g><title>metadata_decode_entry_exported_symbols (155,551 samples, 0.22%)</title><rect x="79.4426%" y="133" width="0.2158%" height="15" fill="rgb(220,129,5)"/><text x="79.6926%" y="143.50"></text></g><g><title>eval_to_const_value_raw (236,752 samples, 0.33%)</title><rect x="80.2467%" y="69" width="0.3284%" height="15" fill="rgb(242,17,10)"/><text x="80.4967%" y="79.50"></text></g><g><title>eval_to_const_value_raw (234,202 samples, 0.32%)</title><rect x="80.2503%" y="53" width="0.3249%" height="15" fill="rgb(242,107,0)"/><text x="80.5003%" y="63.50"></text></g><g><title>eval_to_allocation_raw (228,172 samples, 0.32%)</title><rect x="80.2586%" y="37" width="0.3165%" height="15" fill="rgb(251,28,31)"/><text x="80.5086%" y="47.50"></text></g><g><title>eval_to_const_value_raw (289,473 samples, 0.40%)</title><rect x="80.1803%" y="133" width="0.4016%" height="15" fill="rgb(233,223,10)"/><text x="80.4303%" y="143.50"></text></g><g><title>eval_to_const_value_raw (287,683 samples, 0.40%)</title><rect x="80.1828%" y="117" width="0.3991%" height="15" fill="rgb(215,21,27)"/><text x="80.4328%" y="127.50"></text></g><g><title>eval_to_allocation_raw (286,143 samples, 0.40%)</title><rect x="80.1849%" y="101" width="0.3969%" height="15" fill="rgb(232,23,21)"/><text x="80.4349%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (247,343 samples, 0.34%)</title><rect x="80.2388%" y="85" width="0.3431%" height="15" fill="rgb(244,5,23)"/><text x="80.4888%" y="95.50"></text></g><g><title>eval_to_allocation_raw (399,224 samples, 0.55%)</title><rect x="80.0349%" y="181" width="0.5538%" height="15" fill="rgb(226,81,46)"/><text x="80.2849%" y="191.50"></text></g><g><title>eval_to_allocation_raw (391,604 samples, 0.54%)</title><rect x="80.0454%" y="165" width="0.5432%" height="15" fill="rgb(247,70,30)"/><text x="80.2954%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (304,543 samples, 0.42%)</title><rect x="80.1662%" y="149" width="0.4225%" height="15" fill="rgb(212,68,19)"/><text x="80.4162%" y="159.50"></text></g><g><title>layout_of (78,642 samples, 0.11%)</title><rect x="80.7107%" y="165" width="0.1091%" height="15" fill="rgb(240,187,13)"/><text x="80.9607%" y="175.50"></text></g><g><title>layout_of (170,703 samples, 0.24%)</title><rect x="80.5887%" y="181" width="0.2368%" height="15" fill="rgb(223,113,26)"/><text x="80.8387%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (206,482 samples, 0.29%)</title><rect x="80.9107%" y="181" width="0.2864%" height="15" fill="rgb(206,192,2)"/><text x="81.1607%" y="191.50"></text></g><g><title>optimized_mir (1,055,491 samples, 1.46%)</title><rect x="79.7416%" y="197" width="1.4642%" height="15" fill="rgb(241,108,4)"/><text x="79.9916%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (78,512 samples, 0.11%)</title><rect x="81.2960%" y="197" width="0.1089%" height="15" fill="rgb(247,173,49)"/><text x="81.5460%" y="207.50"></text></g><g><title>upstream_monomorphizations_for (215,132 samples, 0.30%)</title><rect x="81.4049%" y="197" width="0.2984%" height="15" fill="rgb(224,114,35)"/><text x="81.6549%" y="207.50"></text></g><g><title>upstream_monomorphizations (211,122 samples, 0.29%)</title><rect x="81.4104%" y="181" width="0.2929%" height="15" fill="rgb(245,159,27)"/><text x="81.6604%" y="191.50"></text></g><g><title>exported_symbols (137,272 samples, 0.19%)</title><rect x="81.5129%" y="165" width="0.1904%" height="15" fill="rgb(245,172,44)"/><text x="81.7629%" y="175.50"></text></g><g><title>metadata_decode_entry_exported_symbols (129,322 samples, 0.18%)</title><rect x="81.5239%" y="149" width="0.1794%" height="15" fill="rgb(236,23,11)"/><text x="81.7739%" y="159.50"></text></g><g><title>evaluate_obligation (137,111 samples, 0.19%)</title><rect x="81.9774%" y="165" width="0.1902%" height="15" fill="rgb(205,117,38)"/><text x="82.2274%" y="175.50"></text></g><g><title>own_existential_vtable_entries (331,493 samples, 0.46%)</title><rect x="81.8434%" y="181" width="0.4598%" height="15" fill="rgb(237,72,25)"/><text x="82.0934%" y="191.50"></text></g><g><title>impl_parent (1,320,601 samples, 1.83%)</title><rect x="85.4502%" y="149" width="1.8319%" height="15" fill="rgb(244,70,9)"/><text x="85.7002%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (755,573 samples, 1.05%)</title><rect x="86.2340%" y="133" width="1.0481%" height="15" fill="rgb(217,125,39)"/><text x="86.4840%" y="143.50"></text></g><g><title>impl_trait_ref (5,105,973 samples, 7.08%)</title><rect x="87.2821%" y="149" width="7.0829%" height="15" fill="rgb(235,36,10)"/><text x="87.5321%" y="159.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,556,757 samples, 6.32%)</title><rect x="88.0440%" y="133" width="6.3211%" height="15" fill="rgb(251,123,47)"/><text x="88.2940%" y="143.50">metadata..</text></g><g><title>specialization_graph_of (8,633,717 samples, 11.98%)</title><rect x="82.3913%" y="165" width="11.9766%" height="15" fill="rgb(221,13,13)"/><text x="82.6413%" y="175.50">specialization_gra..</text></g><g><title>monomorphization_collector_graph_walk (11,096,212 samples, 15.39%)</title><rect x="78.9940%" y="213" width="15.3925%" height="15" fill="rgb(238,131,9)"/><text x="79.2440%" y="223.50">monomorphization_collect..</text></g><g><title>vtable_entries (9,143,152 samples, 12.68%)</title><rect x="81.7033%" y="197" width="12.6832%" height="15" fill="rgb(211,50,8)"/><text x="81.9533%" y="207.50">vtable_entries</text></g><g><title>resolve_instance (8,710,648 samples, 12.08%)</title><rect x="82.3033%" y="181" width="12.0833%" height="15" fill="rgb(245,182,24)"/><text x="82.5533%" y="191.50">resolve_instance</text></g><g><title>monomorphization_collector (11,121,452 samples, 15.43%)</title><rect x="78.9886%" y="229" width="15.4275%" height="15" fill="rgb(242,14,37)"/><text x="79.2386%" y="239.50">monomorphization_collect..</text></g><g><title>assert_symbols_are_distinct (113,291 samples, 0.16%)</title><rect x="94.4230%" y="213" width="0.1572%" height="15" fill="rgb(246,228,12)"/><text x="94.6730%" y="223.50"></text></g><g><title>symbol_name (105,071 samples, 0.15%)</title><rect x="94.4344%" y="197" width="0.1458%" height="15" fill="rgb(213,55,15)"/><text x="94.6844%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (11,375,886 samples, 15.78%)</title><rect x="78.9028%" y="245" width="15.7805%" height="15" fill="rgb(209,9,3)"/><text x="79.1528%" y="255.50">collect_and_partition_mo..</text></g><g><title>partition_and_assert_distinct_symbols (192,572 samples, 0.27%)</title><rect x="94.4161%" y="229" width="0.2671%" height="15" fill="rgb(230,59,30)"/><text x="94.6661%" y="239.50"></text></g><g><title>cgu_partitioning (74,261 samples, 0.10%)</title><rect x="94.5802%" y="213" width="0.1030%" height="15" fill="rgb(209,121,21)"/><text x="94.8302%" y="223.50"></text></g><g><title>exported_symbols (11,434,696 samples, 15.86%)</title><rect x="78.8671%" y="261" width="15.8620%" height="15" fill="rgb(220,109,13)"/><text x="79.1171%" y="271.50">exported_symbols</text></g><g><title>generate_crate_metadata (11,951,761 samples, 16.58%)</title><rect x="78.2400%" y="277" width="16.5793%" height="15" fill="rgb(232,18,1)"/><text x="78.4900%" y="287.50">generate_crate_metadata</text></g><g><title>hir_lowering (305,393 samples, 0.42%)</title><rect x="94.8193%" y="277" width="0.4236%" height="15" fill="rgb(215,41,42)"/><text x="95.0693%" y="287.50"></text></g><g><title>finish_ongoing_codegen (847,648 samples, 1.18%)</title><rect x="95.2595%" y="261" width="1.1758%" height="15" fill="rgb(224,123,36)"/><text x="95.5095%" y="271.50"></text></g><g><title>link_crate (716,728 samples, 0.99%)</title><rect x="96.4354%" y="261" width="0.9942%" height="15" fill="rgb(240,125,3)"/><text x="96.6854%" y="271.50"></text></g><g><title>link_binary (705,937 samples, 0.98%)</title><rect x="96.4503%" y="245" width="0.9793%" height="15" fill="rgb(205,98,50)"/><text x="96.7003%" y="255.50"></text></g><g><title>link_rlib (418,135 samples, 0.58%)</title><rect x="96.8496%" y="229" width="0.5800%" height="15" fill="rgb(205,185,37)"/><text x="97.0996%" y="239.50"></text></g><g><title>link (1,582,806 samples, 2.20%)</title><rect x="95.2430%" y="277" width="2.1956%" height="15" fill="rgb(238,207,15)"/><text x="95.4930%" y="287.50">l..</text></g><g><title>parse_crate (314,643 samples, 0.44%)</title><rect x="97.4386%" y="277" width="0.4365%" height="15" fill="rgb(213,199,42)"/><text x="97.6886%" y="287.50"></text></g><g><title>prepare_outputs (290,613 samples, 0.40%)</title><rect x="97.8860%" y="277" width="0.4031%" height="15" fill="rgb(235,201,11)"/><text x="98.1360%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (710,328 samples, 0.99%)</title><rect x="98.2891%" y="277" width="0.9854%" height="15" fill="rgb(207,46,11)"/><text x="98.5391%" y="287.50"></text></g><g><title>setup_global_ctxt (121,441 samples, 0.17%)</title><rect x="99.2760%" y="277" width="0.1685%" height="15" fill="rgb(241,35,35)"/><text x="99.5260%" y="287.50"></text></g><g><title>all (72,088,470 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (72,088,470 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (400,504 samples, 0.56%)</title><rect x="99.4444%" y="277" width="0.5556%" height="15" fill="rgb(219,102,11)"/><text x="99.6944%" y="287.50"></text></g></svg></svg>