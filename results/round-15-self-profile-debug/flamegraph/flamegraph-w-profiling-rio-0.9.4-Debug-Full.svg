<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (310,481,197 samples, 15.59%)</title><rect x="0.0522%" y="181" width="15.5949%" height="15" fill="rgb(227,0,7)"/><text x="0.3022%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,385,284 samples, 0.12%)</title><rect x="18.3583%" y="69" width="0.1198%" height="15" fill="rgb(217,0,24)"/><text x="18.6083%" y="79.50"></text></g><g><title>specialization_graph_of (4,717,627 samples, 0.24%)</title><rect x="18.5476%" y="53" width="0.2370%" height="15" fill="rgb(221,193,54)"/><text x="18.7976%" y="63.50"></text></g><g><title>impl_trait_ref (2,152,802 samples, 0.11%)</title><rect x="18.6765%" y="37" width="0.1081%" height="15" fill="rgb(248,212,6)"/><text x="18.9265%" y="47.50"></text></g><g><title>resolve_instance (6,327,580 samples, 0.32%)</title><rect x="18.4781%" y="69" width="0.3178%" height="15" fill="rgb(208,68,35)"/><text x="18.7281%" y="79.50"></text></g><g><title>thir_body (3,417,148 samples, 0.17%)</title><rect x="18.8000%" y="69" width="0.1716%" height="15" fill="rgb(232,128,0)"/><text x="19.0500%" y="79.50"></text></g><g><title>mir_const (25,241,654 samples, 1.27%)</title><rect x="17.7060%" y="117" width="1.2678%" height="15" fill="rgb(207,160,47)"/><text x="17.9560%" y="127.50"></text></g><g><title>unsafety_check_result (22,626,252 samples, 1.14%)</title><rect x="17.8373%" y="101" width="1.1365%" height="15" fill="rgb(228,23,34)"/><text x="18.0873%" y="111.50"></text></g><g><title>mir_built (20,319,684 samples, 1.02%)</title><rect x="17.9532%" y="85" width="1.0206%" height="15" fill="rgb(218,30,26)"/><text x="18.2032%" y="95.50"></text></g><g><title>mir_const_qualif (2,059,938 samples, 0.10%)</title><rect x="18.9738%" y="117" width="0.1035%" height="15" fill="rgb(220,122,19)"/><text x="19.2238%" y="127.50"></text></g><g><title>mir_promoted (29,660,983 samples, 1.49%)</title><rect x="17.5875%" y="133" width="1.4898%" height="15" fill="rgb(250,228,42)"/><text x="17.8375%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,718,425 samples, 0.29%)</title><rect x="19.2222%" y="133" width="0.2872%" height="15" fill="rgb(240,193,28)"/><text x="19.4722%" y="143.50"></text></g><g><title>MIR_borrow_checking (76,187,456 samples, 3.83%)</title><rect x="15.6835%" y="165" width="3.8267%" height="15" fill="rgb(216,20,37)"/><text x="15.9335%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (75,834,479 samples, 3.81%)</title><rect x="15.7012%" y="149" width="3.8090%" height="15" fill="rgb(206,188,39)"/><text x="15.9512%" y="159.50">mir_..</text></g><g><title>check_mod_unstable_api_usage (2,951,841 samples, 0.15%)</title><rect x="19.6695%" y="149" width="0.1483%" height="15" fill="rgb(217,207,13)"/><text x="19.9195%" y="159.50"></text></g><g><title>misc_checking_1 (4,783,508 samples, 0.24%)</title><rect x="19.5833%" y="165" width="0.2403%" height="15" fill="rgb(231,73,38)"/><text x="19.8333%" y="175.50"></text></g><g><title>misc_checking_2 (2,823,408 samples, 0.14%)</title><rect x="19.8235%" y="165" width="0.1418%" height="15" fill="rgb(225,20,46)"/><text x="20.0735%" y="175.50"></text></g><g><title>crate_lints (4,926,040 samples, 0.25%)</title><rect x="20.0530%" y="133" width="0.2474%" height="15" fill="rgb(210,31,41)"/><text x="20.3030%" y="143.50"></text></g><g><title>lint_checking (6,341,895 samples, 0.32%)</title><rect x="20.0529%" y="149" width="0.3185%" height="15" fill="rgb(221,200,47)"/><text x="20.3029%" y="159.50"></text></g><g><title>privacy_checking_modules (2,258,483 samples, 0.11%)</title><rect x="20.4089%" y="149" width="0.1134%" height="15" fill="rgb(226,26,5)"/><text x="20.6589%" y="159.50"></text></g><g><title>check_mod_privacy (2,248,153 samples, 0.11%)</title><rect x="20.4094%" y="133" width="0.1129%" height="15" fill="rgb(249,33,26)"/><text x="20.6594%" y="143.50"></text></g><g><title>misc_checking_3 (11,112,644 samples, 0.56%)</title><rect x="19.9653%" y="165" width="0.5582%" height="15" fill="rgb(235,183,28)"/><text x="20.2153%" y="175.50"></text></g><g><title>impl_parent (2,038,307 samples, 0.10%)</title><rect x="20.7022%" y="101" width="0.1024%" height="15" fill="rgb(221,5,38)"/><text x="20.9522%" y="111.50"></text></g><g><title>impl_trait_ref (4,649,726 samples, 0.23%)</title><rect x="20.8046%" y="101" width="0.2335%" height="15" fill="rgb(247,18,42)"/><text x="21.0546%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,695,117 samples, 0.19%)</title><rect x="20.8525%" y="85" width="0.1856%" height="15" fill="rgb(241,131,45)"/><text x="21.1025%" y="95.50"></text></g><g><title>coherent_trait (10,487,477 samples, 0.53%)</title><rect x="20.5341%" y="133" width="0.5268%" height="15" fill="rgb(249,31,29)"/><text x="20.7841%" y="143.50"></text></g><g><title>specialization_graph_of (9,883,011 samples, 0.50%)</title><rect x="20.5645%" y="117" width="0.4964%" height="15" fill="rgb(225,111,53)"/><text x="20.8145%" y="127.50"></text></g><g><title>coherence_checking (10,602,177 samples, 0.53%)</title><rect x="20.5330%" y="149" width="0.5325%" height="15" fill="rgb(238,160,17)"/><text x="20.7830%" y="159.50"></text></g><g><title>evaluate_obligation (11,169,382 samples, 0.56%)</title><rect x="23.8975%" y="101" width="0.5610%" height="15" fill="rgb(214,148,48)"/><text x="24.1475%" y="111.50"></text></g><g><title>evaluate_obligation (3,703,456 samples, 0.19%)</title><rect x="25.7951%" y="85" width="0.1860%" height="15" fill="rgb(232,36,49)"/><text x="26.0451%" y="95.50"></text></g><g><title>typeck (27,915,557 samples, 1.40%)</title><rect x="24.6864%" y="101" width="1.4021%" height="15" fill="rgb(209,103,24)"/><text x="24.9364%" y="111.50"></text></g><g><title>item_bodies_checking (100,053,218 samples, 5.03%)</title><rect x="21.0688%" y="149" width="5.0255%" height="15" fill="rgb(229,88,8)"/><text x="21.3188%" y="159.50">item_b..</text></g><g><title>typeck_item_bodies (100,048,798 samples, 5.03%)</title><rect x="21.0690%" y="133" width="5.0253%" height="15" fill="rgb(213,181,19)"/><text x="21.3190%" y="143.50">typeck..</text></g><g><title>typeck (99,857,597 samples, 5.02%)</title><rect x="21.0786%" y="117" width="5.0157%" height="15" fill="rgb(254,191,54)"/><text x="21.3286%" y="127.50">typeck</text></g><g><title>evaluate_obligation (6,110,463 samples, 0.31%)</title><rect x="26.2694%" y="101" width="0.3069%" height="15" fill="rgb(241,83,37)"/><text x="26.5194%" y="111.50"></text></g><g><title>item_types_checking (9,878,480 samples, 0.50%)</title><rect x="26.0943%" y="149" width="0.4962%" height="15" fill="rgb(233,36,39)"/><text x="26.3443%" y="159.50"></text></g><g><title>check_mod_item_types (9,863,980 samples, 0.50%)</title><rect x="26.0950%" y="133" width="0.4954%" height="15" fill="rgb(226,3,54)"/><text x="26.3450%" y="143.50"></text></g><g><title>typeck (8,138,142 samples, 0.41%)</title><rect x="26.1817%" y="117" width="0.4088%" height="15" fill="rgb(245,192,40)"/><text x="26.4317%" y="127.50"></text></g><g><title>type_collecting (3,300,474 samples, 0.17%)</title><rect x="26.5908%" y="149" width="0.1658%" height="15" fill="rgb(238,167,29)"/><text x="26.8408%" y="159.50"></text></g><g><title>collect_mod_item_types (3,287,414 samples, 0.17%)</title><rect x="26.5915%" y="133" width="0.1651%" height="15" fill="rgb(232,182,51)"/><text x="26.8415%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,246,446 samples, 0.31%)</title><rect x="26.7810%" y="133" width="0.3137%" height="15" fill="rgb(231,60,39)"/><text x="27.0310%" y="143.50"></text></g><g><title>check_item_well_formed (4,638,514 samples, 0.23%)</title><rect x="27.0947%" y="133" width="0.2330%" height="15" fill="rgb(208,69,12)"/><text x="27.3447%" y="143.50"></text></g><g><title>analysis (232,645,156 samples, 11.69%)</title><rect x="15.6470%" y="181" width="11.6853%" height="15" fill="rgb(235,93,37)"/><text x="15.8970%" y="191.50">analysis</text></g><g><title>type_check_crate (135,558,469 samples, 6.81%)</title><rect x="20.5235%" y="165" width="6.8088%" height="15" fill="rgb(213,116,39)"/><text x="20.7735%" y="175.50">type_chec..</text></g><g><title>wf_checking (11,444,617 samples, 0.57%)</title><rect x="26.7575%" y="149" width="0.5748%" height="15" fill="rgb(222,207,29)"/><text x="27.0075%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (6,027,727 samples, 0.30%)</title><rect x="38.5222%" y="149" width="0.3028%" height="15" fill="rgb(206,96,30)"/><text x="38.7722%" y="159.50"></text></g><g><title>const_caller_location (2,746,114 samples, 0.14%)</title><rect x="38.8250%" y="149" width="0.1379%" height="15" fill="rgb(218,138,4)"/><text x="39.0750%" y="159.50"></text></g><g><title>layout_of (4,469,596 samples, 0.22%)</title><rect x="39.6408%" y="133" width="0.2245%" height="15" fill="rgb(250,191,14)"/><text x="39.8908%" y="143.50"></text></g><g><title>predicates_of (3,587,605 samples, 0.18%)</title><rect x="40.1973%" y="117" width="0.1802%" height="15" fill="rgb(239,60,40)"/><text x="40.4473%" y="127.50"></text></g><g><title>predicates_defined_on (2,677,698 samples, 0.13%)</title><rect x="40.2430%" y="101" width="0.1345%" height="15" fill="rgb(206,27,48)"/><text x="40.4930%" y="111.50"></text></g><g><title>param_env (10,217,302 samples, 0.51%)</title><rect x="39.8653%" y="133" width="0.5132%" height="15" fill="rgb(225,35,8)"/><text x="40.1153%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,187,701 samples, 0.11%)</title><rect x="40.3785%" y="133" width="0.1099%" height="15" fill="rgb(250,213,24)"/><text x="40.6285%" y="143.50"></text></g><g><title>fn_abi_of_instance (30,395,583 samples, 1.53%)</title><rect x="38.9666%" y="149" width="1.5267%" height="15" fill="rgb(247,123,22)"/><text x="39.2166%" y="159.50"></text></g><g><title>layout_of (4,811,637 samples, 0.24%)</title><rect x="40.5757%" y="149" width="0.2417%" height="15" fill="rgb(231,138,38)"/><text x="40.8257%" y="159.50"></text></g><g><title>codegen_module (267,630,471 samples, 13.44%)</title><rect x="27.4922%" y="165" width="13.4426%" height="15" fill="rgb(231,145,46)"/><text x="27.7422%" y="175.50">codegen_module</text></g><g><title>codegen_crate (270,879,054 samples, 13.61%)</title><rect x="27.3329%" y="181" width="13.6057%" height="15" fill="rgb(251,118,11)"/><text x="27.5829%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (898,826,412 samples, 45.15%)</title><rect x="40.9506%" y="165" width="45.1463%" height="15" fill="rgb(217,147,25)"/><text x="41.2006%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (864,969,124 samples, 43.45%)</title><rect x="42.6512%" y="149" width="43.4457%" height="15" fill="rgb(247,81,37)"/><text x="42.9012%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (959,781,460 samples, 48.21%)</title><rect x="40.9386%" y="181" width="48.2080%" height="15" fill="rgb(209,12,38)"/><text x="41.1886%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (60,717,076 samples, 3.05%)</title><rect x="86.0969%" y="165" width="3.0497%" height="15" fill="rgb(227,1,9)"/><text x="86.3469%" y="175.50">LLV..</text></g><g><title>metadata_register_crate (2,775,368 samples, 0.14%)</title><rect x="91.2067%" y="133" width="0.1394%" height="15" fill="rgb(248,47,43)"/><text x="91.4567%" y="143.50"></text></g><g><title>macro_expand_crate (44,114,419 samples, 2.22%)</title><rect x="89.1904%" y="165" width="2.2158%" height="15" fill="rgb(221,10,30)"/><text x="89.4404%" y="175.50">m..</text></g><g><title>expand_crate (44,092,969 samples, 2.21%)</title><rect x="89.1915%" y="149" width="2.2147%" height="15" fill="rgb(210,229,1)"/><text x="89.4415%" y="159.50">e..</text></g><g><title>late_resolve_crate (7,879,161 samples, 0.40%)</title><rect x="91.4552%" y="149" width="0.3958%" height="15" fill="rgb(222,148,37)"/><text x="91.7052%" y="159.50"></text></g><g><title>configure_and_expand (54,161,301 samples, 2.72%)</title><rect x="89.1466%" y="181" width="2.7204%" height="15" fill="rgb(234,67,33)"/><text x="89.3966%" y="191.50">co..</text></g><g><title>resolve_crate (8,566,458 samples, 0.43%)</title><rect x="91.4368%" y="165" width="0.4303%" height="15" fill="rgb(247,98,35)"/><text x="91.6868%" y="175.50"></text></g><g><title>free_global_ctxt (9,365,345 samples, 0.47%)</title><rect x="91.9540%" y="181" width="0.4704%" height="15" fill="rgb(247,138,52)"/><text x="92.2040%" y="191.50"></text></g><g><title>codegen_fn_attrs (3,490,176 samples, 0.18%)</title><rect x="93.1162%" y="101" width="0.1753%" height="15" fill="rgb(213,79,30)"/><text x="93.3662%" y="111.50"></text></g><g><title>mir_shims (3,055,398 samples, 0.15%)</title><rect x="93.3461%" y="101" width="0.1535%" height="15" fill="rgb(246,177,23)"/><text x="93.5961%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,477,595 samples, 0.28%)</title><rect x="93.8786%" y="85" width="0.2751%" height="15" fill="rgb(230,62,27)"/><text x="94.1286%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,267,997 samples, 0.37%)</title><rect x="94.1537%" y="85" width="0.3651%" height="15" fill="rgb(216,154,8)"/><text x="94.4037%" y="95.50"></text></g><g><title>optimized_mir (22,267,699 samples, 1.12%)</title><rect x="93.4996%" y="101" width="1.1185%" height="15" fill="rgb(244,35,45)"/><text x="93.7496%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (8,907,024 samples, 0.45%)</title><rect x="94.7998%" y="85" width="0.4474%" height="15" fill="rgb(251,115,12)"/><text x="95.0498%" y="95.50"></text></g><g><title>specialization_graph_of (2,265,894 samples, 0.11%)</title><rect x="95.3859%" y="85" width="0.1138%" height="15" fill="rgb(240,54,50)"/><text x="95.6359%" y="95.50"></text></g><g><title>resolve_instance (18,410,799 samples, 0.92%)</title><rect x="94.6181%" y="101" width="0.9247%" height="15" fill="rgb(233,84,52)"/><text x="94.8681%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,086,672 samples, 0.10%)</title><rect x="95.5878%" y="85" width="0.1048%" height="15" fill="rgb(207,117,47)"/><text x="95.8378%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,009,692 samples, 0.10%)</title><rect x="95.5917%" y="69" width="0.1009%" height="15" fill="rgb(249,43,39)"/><text x="95.8417%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,586,606 samples, 0.13%)</title><rect x="95.5666%" y="101" width="0.1299%" height="15" fill="rgb(209,38,44)"/><text x="95.8166%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (64,340,655 samples, 3.23%)</title><rect x="92.6235%" y="117" width="3.2317%" height="15" fill="rgb(236,212,23)"/><text x="92.8735%" y="127.50">mon..</text></g><g><title>vtable_entries (2,922,816 samples, 0.15%)</title><rect x="95.7084%" y="101" width="0.1468%" height="15" fill="rgb(242,79,21)"/><text x="95.9584%" y="111.50"></text></g><g><title>monomorphization_collector (64,469,226 samples, 3.24%)</title><rect x="92.6233%" y="133" width="3.2382%" height="15" fill="rgb(211,96,35)"/><text x="92.8733%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (7,826,609 samples, 0.39%)</title><rect x="95.8623%" y="117" width="0.3931%" height="15" fill="rgb(253,215,40)"/><text x="96.1123%" y="127.50"></text></g><g><title>symbol_name (6,753,480 samples, 0.34%)</title><rect x="95.9162%" y="101" width="0.3392%" height="15" fill="rgb(211,81,21)"/><text x="96.1662%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (75,996,774 samples, 3.82%)</title><rect x="92.6196%" y="149" width="3.8172%" height="15" fill="rgb(208,190,38)"/><text x="92.8696%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (11,452,666 samples, 0.58%)</title><rect x="95.8615%" y="133" width="0.5752%" height="15" fill="rgb(235,213,38)"/><text x="96.1115%" y="143.50"></text></g><g><title>cgu_partitioning (3,609,707 samples, 0.18%)</title><rect x="96.2554%" y="117" width="0.1813%" height="15" fill="rgb(237,122,38)"/><text x="96.5054%" y="127.50"></text></g><g><title>exported_symbols (76,590,790 samples, 3.85%)</title><rect x="92.5991%" y="165" width="3.8470%" height="15" fill="rgb(244,218,35)"/><text x="92.8491%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,463,904 samples, 0.17%)</title><rect x="96.6834%" y="149" width="0.1740%" height="15" fill="rgb(240,68,47)"/><text x="96.9334%" y="159.50"></text></g><g><title>optimized_mir (8,578,197 samples, 0.43%)</title><rect x="96.4547%" y="165" width="0.4309%" height="15" fill="rgb(210,16,53)"/><text x="96.7047%" y="175.50"></text></g><g><title>generate_crate_metadata (89,050,445 samples, 4.47%)</title><rect x="92.4244%" y="181" width="4.4728%" height="15" fill="rgb(235,124,12)"/><text x="92.6744%" y="191.50">gener..</text></g><g><title>hir_lowering (8,177,383 samples, 0.41%)</title><rect x="96.8972%" y="181" width="0.4107%" height="15" fill="rgb(224,169,11)"/><text x="97.1472%" y="191.50"></text></g><g><title>finish_ongoing_codegen (43,247,579 samples, 2.17%)</title><rect x="97.3087%" y="165" width="2.1722%" height="15" fill="rgb(250,166,2)"/><text x="97.5587%" y="175.50">f..</text></g><g><title>link_crate (5,307,404 samples, 0.27%)</title><rect x="99.4810%" y="165" width="0.2666%" height="15" fill="rgb(242,216,29)"/><text x="99.7310%" y="175.50"></text></g><g><title>link_binary (5,243,323 samples, 0.26%)</title><rect x="99.4842%" y="149" width="0.2634%" height="15" fill="rgb(230,116,27)"/><text x="99.7342%" y="159.50"></text></g><g><title>link_rlib (4,239,114 samples, 0.21%)</title><rect x="99.5346%" y="133" width="0.2129%" height="15" fill="rgb(228,99,48)"/><text x="99.7846%" y="143.50"></text></g><g><title>link (48,585,044 samples, 2.44%)</title><rect x="97.3079%" y="181" width="2.4403%" height="15" fill="rgb(253,11,6)"/><text x="97.5579%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (2,844,650 samples, 0.14%)</title><rect x="99.8292%" y="181" width="0.1429%" height="15" fill="rgb(247,143,39)"/><text x="100.0792%" y="191.50"></text></g><g><title>all (1,990,918,315 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,990,918,315 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>