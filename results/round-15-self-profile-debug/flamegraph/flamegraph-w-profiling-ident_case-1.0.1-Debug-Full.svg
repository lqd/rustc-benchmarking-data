<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (10,441,466 samples, 8.35%)</title><rect x="0.5261%" y="181" width="8.3474%" height="15" fill="rgb(227,0,7)"/><text x="0.7761%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (144,022 samples, 0.12%)</title><rect x="11.4258%" y="85" width="0.1151%" height="15" fill="rgb(217,0,24)"/><text x="11.6758%" y="95.50"></text></g><g><title>needs_drop_raw (299,531 samples, 0.24%)</title><rect x="12.0890%" y="69" width="0.2395%" height="15" fill="rgb(221,193,54)"/><text x="12.3390%" y="79.50"></text></g><g><title>is_copy_raw (156,770 samples, 0.13%)</title><rect x="12.2032%" y="53" width="0.1253%" height="15" fill="rgb(248,212,6)"/><text x="12.4532%" y="63.50"></text></g><g><title>evaluate_obligation (134,980 samples, 0.11%)</title><rect x="12.2206%" y="37" width="0.1079%" height="15" fill="rgb(208,68,35)"/><text x="12.4706%" y="47.50"></text></g><g><title>thir_body (222,414 samples, 0.18%)</title><rect x="12.3866%" y="69" width="0.1778%" height="15" fill="rgb(232,128,0)"/><text x="12.6366%" y="79.50"></text></g><g><title>mir_const (1,846,260 samples, 1.48%)</title><rect x="11.0936%" y="117" width="1.4760%" height="15" fill="rgb(207,160,47)"/><text x="11.3436%" y="127.50"></text></g><g><title>unsafety_check_result (1,545,706 samples, 1.24%)</title><rect x="11.3339%" y="101" width="1.2357%" height="15" fill="rgb(228,23,34)"/><text x="11.5839%" y="111.50"></text></g><g><title>mir_built (1,286,713 samples, 1.03%)</title><rect x="11.5409%" y="85" width="1.0287%" height="15" fill="rgb(218,30,26)"/><text x="11.7909%" y="95.50"></text></g><g><title>mir_promoted (2,076,394 samples, 1.66%)</title><rect x="10.9169%" y="133" width="1.6600%" height="15" fill="rgb(220,122,19)"/><text x="11.1669%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (279,412 samples, 0.22%)</title><rect x="12.5945%" y="133" width="0.2234%" height="15" fill="rgb(250,228,42)"/><text x="12.8445%" y="143.50"></text></g><g><title>normalize_projection_ty (158,242 samples, 0.13%)</title><rect x="12.6914%" y="117" width="0.1265%" height="15" fill="rgb(240,193,28)"/><text x="12.9414%" y="127.50"></text></g><g><title>type_op_prove_predicate (321,961 samples, 0.26%)</title><rect x="12.8312%" y="133" width="0.2574%" height="15" fill="rgb(216,20,37)"/><text x="13.0812%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,085,941 samples, 4.07%)</title><rect x="9.0238%" y="165" width="4.0659%" height="15" fill="rgb(206,188,39)"/><text x="9.2738%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (5,070,871 samples, 4.05%)</title><rect x="9.0359%" y="149" width="4.0539%" height="15" fill="rgb(217,207,13)"/><text x="9.2859%" y="159.50">mir_..</text></g><g><title>hir_module_items (128,042 samples, 0.10%)</title><rect x="13.0931%" y="165" width="0.1024%" height="15" fill="rgb(231,73,38)"/><text x="13.3431%" y="175.50"></text></g><g><title>codegen_fn_attrs (264,573 samples, 0.21%)</title><rect x="13.4128%" y="101" width="0.2115%" height="15" fill="rgb(225,20,46)"/><text x="13.6628%" y="111.50"></text></g><g><title>codegen_fn_attrs (375,154 samples, 0.30%)</title><rect x="13.3270%" y="133" width="0.2999%" height="15" fill="rgb(210,31,41)"/><text x="13.5770%" y="143.50"></text></g><g><title>should_inherit_track_caller (344,333 samples, 0.28%)</title><rect x="13.3516%" y="117" width="0.2753%" height="15" fill="rgb(221,200,47)"/><text x="13.6016%" y="127.50"></text></g><g><title>check_mod_attrs (520,515 samples, 0.42%)</title><rect x="13.2110%" y="149" width="0.4161%" height="15" fill="rgb(226,26,5)"/><text x="13.4610%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (373,264 samples, 0.30%)</title><rect x="13.7011%" y="149" width="0.2984%" height="15" fill="rgb(249,33,26)"/><text x="13.9511%" y="159.50"></text></g><g><title>misc_checking_1 (1,050,771 samples, 0.84%)</title><rect x="13.1957%" y="165" width="0.8400%" height="15" fill="rgb(235,183,28)"/><text x="13.4457%" y="175.50"></text></g><g><title>misc_checking_2 (326,333 samples, 0.26%)</title><rect x="14.0358%" y="165" width="0.2609%" height="15" fill="rgb(221,5,38)"/><text x="14.2858%" y="175.50"></text></g><g><title>match_checking (202,222 samples, 0.16%)</title><rect x="14.1350%" y="149" width="0.1617%" height="15" fill="rgb(247,18,42)"/><text x="14.3850%" y="159.50"></text></g><g><title>check_match (196,382 samples, 0.16%)</title><rect x="14.1397%" y="133" width="0.1570%" height="15" fill="rgb(241,131,45)"/><text x="14.3897%" y="143.50"></text></g><g><title>death_checking (188,931 samples, 0.15%)</title><rect x="14.3428%" y="149" width="0.1510%" height="15" fill="rgb(249,31,29)"/><text x="14.5928%" y="159.50"></text></g><g><title>crate_lints (1,593,916 samples, 1.27%)</title><rect x="14.4949%" y="133" width="1.2742%" height="15" fill="rgb(225,111,53)"/><text x="14.7449%" y="143.50"></text></g><g><title>type_of (1,069,120 samples, 0.85%)</title><rect x="14.9144%" y="117" width="0.8547%" height="15" fill="rgb(238,160,17)"/><text x="15.1644%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (841,549 samples, 0.67%)</title><rect x="15.0963%" y="101" width="0.6728%" height="15" fill="rgb(214,148,48)"/><text x="15.3463%" y="111.50"></text></g><g><title>lint_checking (1,694,347 samples, 1.35%)</title><rect x="14.4939%" y="149" width="1.3545%" height="15" fill="rgb(232,36,49)"/><text x="14.7439%" y="159.50"></text></g><g><title>privacy_checking_modules (194,142 samples, 0.16%)</title><rect x="15.9050%" y="149" width="0.1552%" height="15" fill="rgb(209,103,24)"/><text x="16.1550%" y="159.50"></text></g><g><title>check_mod_privacy (192,602 samples, 0.15%)</title><rect x="15.9062%" y="133" width="0.1540%" height="15" fill="rgb(229,88,8)"/><text x="16.1562%" y="143.50"></text></g><g><title>misc_checking_3 (2,220,603 samples, 1.78%)</title><rect x="14.2967%" y="165" width="1.7753%" height="15" fill="rgb(213,181,19)"/><text x="14.5467%" y="175.50">m..</text></g><g><title>impl_trait_ref (314,863 samples, 0.25%)</title><rect x="16.4540%" y="69" width="0.2517%" height="15" fill="rgb(254,191,54)"/><text x="16.7040%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (273,683 samples, 0.22%)</title><rect x="16.4870%" y="53" width="0.2188%" height="15" fill="rgb(241,83,37)"/><text x="16.7370%" y="63.50"></text></g><g><title>adt_destructor (613,046 samples, 0.49%)</title><rect x="16.2577%" y="117" width="0.4901%" height="15" fill="rgb(233,36,39)"/><text x="16.5077%" y="127.50"></text></g><g><title>coherent_trait (602,726 samples, 0.48%)</title><rect x="16.2660%" y="101" width="0.4818%" height="15" fill="rgb(226,3,54)"/><text x="16.5160%" y="111.50"></text></g><g><title>specialization_graph_of (599,836 samples, 0.48%)</title><rect x="16.2683%" y="85" width="0.4795%" height="15" fill="rgb(245,192,40)"/><text x="16.5183%" y="95.50"></text></g><g><title>impl_parent (4,186,820 samples, 3.35%)</title><rect x="23.6031%" y="101" width="3.3471%" height="15" fill="rgb(238,167,29)"/><text x="23.8531%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (2,139,339 samples, 1.71%)</title><rect x="25.2400%" y="85" width="1.7103%" height="15" fill="rgb(232,182,51)"/><text x="25.4900%" y="95.50"></text></g><g><title>impl_trait_ref (9,817,470 samples, 7.85%)</title><rect x="26.9503%" y="101" width="7.8485%" height="15" fill="rgb(231,60,39)"/><text x="27.2003%" y="111.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,719,983 samples, 6.17%)</title><rect x="28.6271%" y="85" width="6.1717%" height="15" fill="rgb(208,69,12)"/><text x="28.8771%" y="95.50">metadata..</text></g><g><title>coherent_trait (24,985,833 samples, 19.97%)</title><rect x="16.2131%" y="133" width="19.9748%" height="15" fill="rgb(235,93,37)"/><text x="16.4631%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (24,197,336 samples, 19.34%)</title><rect x="16.8435%" y="117" width="19.3445%" height="15" fill="rgb(213,116,39)"/><text x="17.0935%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,734,735 samples, 1.39%)</title><rect x="34.8011%" y="101" width="1.3868%" height="15" fill="rgb(222,207,29)"/><text x="35.0511%" y="111.50"></text></g><g><title>implementations_of_trait (419,792 samples, 0.34%)</title><rect x="35.8523%" y="85" width="0.3356%" height="15" fill="rgb(206,96,30)"/><text x="36.1023%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (342,541 samples, 0.27%)</title><rect x="35.9141%" y="69" width="0.2738%" height="15" fill="rgb(218,138,4)"/><text x="36.1641%" y="79.50"></text></g><g><title>coherence_checking (25,071,794 samples, 20.04%)</title><rect x="16.1907%" y="149" width="20.0435%" height="15" fill="rgb(250,191,14)"/><text x="16.4407%" y="159.50">coherence_checking</text></g><g><title>associated_item (177,102 samples, 0.14%)</title><rect x="39.8460%" y="85" width="0.1416%" height="15" fill="rgb(239,60,40)"/><text x="40.0960%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (138,351 samples, 0.11%)</title><rect x="39.8770%" y="69" width="0.1106%" height="15" fill="rgb(206,27,48)"/><text x="40.1270%" y="79.50"></text></g><g><title>associated_items (254,883 samples, 0.20%)</title><rect x="39.7929%" y="101" width="0.2038%" height="15" fill="rgb(225,35,8)"/><text x="40.0429%" y="111.50"></text></g><g><title>dropck_outlives (216,112 samples, 0.17%)</title><rect x="40.0441%" y="101" width="0.1728%" height="15" fill="rgb(250,213,24)"/><text x="40.2941%" y="111.50"></text></g><g><title>adt_dtorck_constraint (159,241 samples, 0.13%)</title><rect x="40.0895%" y="85" width="0.1273%" height="15" fill="rgb(247,123,22)"/><text x="40.3395%" y="95.50"></text></g><g><title>adt_sized_constraint (176,061 samples, 0.14%)</title><rect x="40.5027%" y="85" width="0.1408%" height="15" fill="rgb(231,138,38)"/><text x="40.7527%" y="95.50"></text></g><g><title>evaluate_obligation (970,740 samples, 0.78%)</title><rect x="40.2168%" y="101" width="0.7761%" height="15" fill="rgb(231,145,46)"/><text x="40.4668%" y="111.50"></text></g><g><title>trait_impls_of (266,333 samples, 0.21%)</title><rect x="40.7800%" y="85" width="0.2129%" height="15" fill="rgb(251,118,11)"/><text x="41.0300%" y="95.50"></text></g><g><title>predicates_of (167,860 samples, 0.13%)</title><rect x="41.4001%" y="101" width="0.1342%" height="15" fill="rgb(217,147,25)"/><text x="41.6501%" y="111.50"></text></g><g><title>item_bodies_checking (6,694,328 samples, 5.35%)</title><rect x="36.2544%" y="149" width="5.3518%" height="15" fill="rgb(247,81,37)"/><text x="36.5044%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (6,692,318 samples, 5.35%)</title><rect x="36.2560%" y="133" width="5.3501%" height="15" fill="rgb(209,12,38)"/><text x="36.5060%" y="143.50">typeck_..</text></g><g><title>typeck (6,680,228 samples, 5.34%)</title><rect x="36.2656%" y="117" width="5.3405%" height="15" fill="rgb(227,1,9)"/><text x="36.5156%" y="127.50">typeck</text></g><g><title>item_types_checking (279,073 samples, 0.22%)</title><rect x="41.6061%" y="149" width="0.2231%" height="15" fill="rgb(248,47,43)"/><text x="41.8561%" y="159.50"></text></g><g><title>check_mod_item_types (276,963 samples, 0.22%)</title><rect x="41.6078%" y="133" width="0.2214%" height="15" fill="rgb(221,10,30)"/><text x="41.8578%" y="143.50"></text></g><g><title>fn_sig (316,845 samples, 0.25%)</title><rect x="41.9615%" y="117" width="0.2533%" height="15" fill="rgb(210,229,1)"/><text x="42.2115%" y="127.50"></text></g><g><title>named_region_map (172,321 samples, 0.14%)</title><rect x="42.2651%" y="101" width="0.1378%" height="15" fill="rgb(222,148,37)"/><text x="42.5151%" y="111.50"></text></g><g><title>resolve_lifetimes (159,901 samples, 0.13%)</title><rect x="42.2750%" y="85" width="0.1278%" height="15" fill="rgb(234,67,33)"/><text x="42.5250%" y="95.50"></text></g><g><title>generics_of (251,341 samples, 0.20%)</title><rect x="42.2148%" y="117" width="0.2009%" height="15" fill="rgb(247,98,35)"/><text x="42.4648%" y="127.50"></text></g><g><title>predicates_of (192,991 samples, 0.15%)</title><rect x="42.4704%" y="117" width="0.1543%" height="15" fill="rgb(247,138,52)"/><text x="42.7204%" y="127.50"></text></g><g><title>predicates_defined_on (169,550 samples, 0.14%)</title><rect x="42.4891%" y="101" width="0.1355%" height="15" fill="rgb(213,79,30)"/><text x="42.7391%" y="111.50"></text></g><g><title>type_collecting (1,104,161 samples, 0.88%)</title><rect x="41.8300%" y="149" width="0.8827%" height="15" fill="rgb(246,177,23)"/><text x="42.0800%" y="159.50"></text></g><g><title>collect_mod_item_types (1,094,761 samples, 0.88%)</title><rect x="41.8376%" y="133" width="0.8752%" height="15" fill="rgb(230,62,27)"/><text x="42.0876%" y="143.50"></text></g><g><title>evaluate_obligation (263,413 samples, 0.21%)</title><rect x="43.1783%" y="117" width="0.2106%" height="15" fill="rgb(216,154,8)"/><text x="43.4283%" y="127.50"></text></g><g><title>predicates_of (456,444 samples, 0.36%)</title><rect x="43.5225%" y="117" width="0.3649%" height="15" fill="rgb(244,35,45)"/><text x="43.7725%" y="127.50"></text></g><g><title>predicates_defined_on (421,484 samples, 0.34%)</title><rect x="43.5505%" y="101" width="0.3370%" height="15" fill="rgb(251,115,12)"/><text x="43.8005%" y="111.50"></text></g><g><title>region_scope_tree (134,722 samples, 0.11%)</title><rect x="43.8874%" y="117" width="0.1077%" height="15" fill="rgb(240,54,50)"/><text x="44.1374%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,605,108 samples, 1.28%)</title><rect x="42.7580%" y="133" width="1.2832%" height="15" fill="rgb(233,84,52)"/><text x="43.0080%" y="143.50"></text></g><g><title>analysis (44,717,392 samples, 35.75%)</title><rect x="8.8734%" y="181" width="35.7491%" height="15" fill="rgb(207,117,47)"/><text x="9.1234%" y="191.50">analysis</text></g><g><title>type_check_crate (35,713,071 samples, 28.55%)</title><rect x="16.0719%" y="165" width="28.5507%" height="15" fill="rgb(249,43,39)"/><text x="16.3219%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,388,184 samples, 1.91%)</title><rect x="42.7133%" y="149" width="1.9092%" height="15" fill="rgb(209,38,44)"/><text x="42.9633%" y="159.50">w..</text></g><g><title>check_item_well_formed (727,206 samples, 0.58%)</title><rect x="44.0412%" y="133" width="0.5814%" height="15" fill="rgb(236,212,23)"/><text x="44.2912%" y="143.50"></text></g><g><title>item_attrs (301,593 samples, 0.24%)</title><rect x="48.6527%" y="117" width="0.2411%" height="15" fill="rgb(242,79,21)"/><text x="48.9027%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (299,213 samples, 0.24%)</title><rect x="48.6546%" y="101" width="0.2392%" height="15" fill="rgb(211,96,35)"/><text x="48.9046%" y="111.50"></text></g><g><title>codegen_fn_attrs (333,944 samples, 0.27%)</title><rect x="48.6284%" y="133" width="0.2670%" height="15" fill="rgb(253,215,40)"/><text x="48.8784%" y="143.50"></text></g><g><title>param_env (251,472 samples, 0.20%)</title><rect x="48.9770%" y="133" width="0.2010%" height="15" fill="rgb(211,81,21)"/><text x="49.2270%" y="143.50"></text></g><g><title>fn_abi_of_instance (889,580 samples, 0.71%)</title><rect x="48.4768%" y="149" width="0.7112%" height="15" fill="rgb(208,190,38)"/><text x="48.7268%" y="159.50"></text></g><g><title>codegen_module (4,952,910 samples, 3.96%)</title><rect x="45.3070%" y="165" width="3.9596%" height="15" fill="rgb(235,213,38)"/><text x="45.5570%" y="175.50">code..</text></g><g><title>codegen_crate (5,864,579 samples, 4.69%)</title><rect x="44.6305%" y="181" width="4.6884%" height="15" fill="rgb(237,122,38)"/><text x="44.8805%" y="191.50">codeg..</text></g><g><title>LLVM_module_codegen (33,103,644 samples, 26.46%)</title><rect x="49.3720%" y="165" width="26.4646%" height="15" fill="rgb(244,218,35)"/><text x="49.6220%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (29,664,460 samples, 23.72%)</title><rect x="52.1214%" y="149" width="23.7151%" height="15" fill="rgb(240,68,47)"/><text x="52.3714%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (34,421,958 samples, 27.52%)</title><rect x="49.3189%" y="181" width="27.5185%" height="15" fill="rgb(210,16,53)"/><text x="49.5689%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,251,913 samples, 1.00%)</title><rect x="75.8365%" y="165" width="1.0008%" height="15" fill="rgb(235,124,12)"/><text x="76.0865%" y="175.50"></text></g><g><title>macro_expand_crate (11,595,987 samples, 9.27%)</title><rect x="77.1442%" y="165" width="9.2704%" height="15" fill="rgb(224,169,11)"/><text x="77.3942%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (11,574,187 samples, 9.25%)</title><rect x="77.1617%" y="149" width="9.2529%" height="15" fill="rgb(250,166,2)"/><text x="77.4117%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,251,513 samples, 1.80%)</title><rect x="84.6146%" y="133" width="1.8000%" height="15" fill="rgb(242,216,29)"/><text x="84.8646%" y="143.50">m..</text></g><g><title>metadata_register_crate (831,428 samples, 0.66%)</title><rect x="85.7499%" y="117" width="0.6647%" height="15" fill="rgb(230,116,27)"/><text x="85.9999%" y="127.50"></text></g><g><title>finalize_macro_resolutions (388,174 samples, 0.31%)</title><rect x="86.5366%" y="149" width="0.3103%" height="15" fill="rgb(228,99,48)"/><text x="86.7866%" y="159.50"></text></g><g><title>late_resolve_crate (1,531,386 samples, 1.22%)</title><rect x="86.8469%" y="149" width="1.2243%" height="15" fill="rgb(253,11,6)"/><text x="87.0969%" y="159.50"></text></g><g><title>configure_and_expand (14,114,793 samples, 11.28%)</title><rect x="76.8374%" y="181" width="11.2840%" height="15" fill="rgb(247,143,39)"/><text x="77.0874%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (2,014,480 samples, 1.61%)</title><rect x="86.5109%" y="165" width="1.6105%" height="15" fill="rgb(236,97,10)"/><text x="86.7609%" y="175.50"></text></g><g><title>early_lint_checks (233,553 samples, 0.19%)</title><rect x="88.2031%" y="181" width="0.1867%" height="15" fill="rgb(233,208,19)"/><text x="88.4531%" y="191.50"></text></g><g><title>free_global_ctxt (4,180,572 samples, 3.34%)</title><rect x="88.3898%" y="181" width="3.3421%" height="15" fill="rgb(216,164,2)"/><text x="88.6398%" y="191.50">fre..</text></g><g><title>optimized_mir (540,125 samples, 0.43%)</title><rect x="92.3793%" y="101" width="0.4318%" height="15" fill="rgb(220,129,5)"/><text x="92.6293%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (199,802 samples, 0.16%)</title><rect x="92.6514%" y="85" width="0.1597%" height="15" fill="rgb(242,17,10)"/><text x="92.9014%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (262,363 samples, 0.21%)</title><rect x="92.8484%" y="85" width="0.2097%" height="15" fill="rgb(242,107,0)"/><text x="93.0984%" y="95.50"></text></g><g><title>resolve_instance (374,864 samples, 0.30%)</title><rect x="92.8111%" y="101" width="0.2997%" height="15" fill="rgb(251,28,31)"/><text x="93.0611%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,329,794 samples, 1.06%)</title><rect x="92.1733%" y="117" width="1.0631%" height="15" fill="rgb(233,223,10)"/><text x="92.4233%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (157,182 samples, 0.13%)</title><rect x="93.1108%" y="101" width="0.1257%" height="15" fill="rgb(215,21,27)"/><text x="93.3608%" y="111.50"></text></g><g><title>upstream_monomorphizations (154,262 samples, 0.12%)</title><rect x="93.1131%" y="85" width="0.1233%" height="15" fill="rgb(232,23,21)"/><text x="93.3631%" y="95.50"></text></g><g><title>monomorphization_collector (1,352,784 samples, 1.08%)</title><rect x="92.1715%" y="133" width="1.0815%" height="15" fill="rgb(244,5,23)"/><text x="92.4215%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (139,671 samples, 0.11%)</title><rect x="93.2556%" y="117" width="0.1117%" height="15" fill="rgb(226,81,46)"/><text x="93.5056%" y="127.50"></text></g><g><title>symbol_name (131,821 samples, 0.11%)</title><rect x="93.2618%" y="101" width="0.1054%" height="15" fill="rgb(247,70,30)"/><text x="93.5118%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (1,600,906 samples, 1.28%)</title><rect x="92.1478%" y="149" width="1.2798%" height="15" fill="rgb(212,68,19)"/><text x="92.3978%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (218,552 samples, 0.17%)</title><rect x="93.2530%" y="133" width="0.1747%" height="15" fill="rgb(240,187,13)"/><text x="93.5030%" y="143.50"></text></g><g><title>exported_symbols (1,665,547 samples, 1.33%)</title><rect x="92.1336%" y="165" width="1.3315%" height="15" fill="rgb(223,113,26)"/><text x="92.3836%" y="175.50"></text></g><g><title>layout_of (198,442 samples, 0.16%)</title><rect x="93.9081%" y="149" width="0.1586%" height="15" fill="rgb(206,192,2)"/><text x="94.1581%" y="159.50"></text></g><g><title>optimized_mir (1,321,813 samples, 1.06%)</title><rect x="93.4954%" y="165" width="1.0567%" height="15" fill="rgb(241,108,4)"/><text x="93.7454%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (607,167 samples, 0.49%)</title><rect x="94.0667%" y="149" width="0.4854%" height="15" fill="rgb(247,173,49)"/><text x="94.3167%" y="159.50"></text></g><g><title>generate_crate_metadata (3,596,317 samples, 2.88%)</title><rect x="91.7319%" y="181" width="2.8751%" height="15" fill="rgb(224,114,35)"/><text x="91.9819%" y="191.50">ge..</text></g><g><title>hir_lowering (1,215,992 samples, 0.97%)</title><rect x="94.6070%" y="181" width="0.9721%" height="15" fill="rgb(245,159,27)"/><text x="94.8570%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,179,132 samples, 0.94%)</title><rect x="95.5909%" y="165" width="0.9427%" height="15" fill="rgb(245,172,44)"/><text x="95.8409%" y="175.50"></text></g><g><title>link_crate (916,079 samples, 0.73%)</title><rect x="96.5335%" y="165" width="0.7324%" height="15" fill="rgb(236,23,11)"/><text x="96.7835%" y="175.50"></text></g><g><title>link_binary (903,019 samples, 0.72%)</title><rect x="96.5440%" y="149" width="0.7219%" height="15" fill="rgb(205,117,38)"/><text x="96.7940%" y="159.50"></text></g><g><title>link_rlib (549,796 samples, 0.44%)</title><rect x="96.8263%" y="133" width="0.4395%" height="15" fill="rgb(237,72,25)"/><text x="97.0763%" y="143.50"></text></g><g><title>link (2,118,331 samples, 1.69%)</title><rect x="95.5791%" y="181" width="1.6935%" height="15" fill="rgb(244,70,9)"/><text x="95.8291%" y="191.50"></text></g><g><title>parse_crate (1,576,805 samples, 1.26%)</title><rect x="97.2726%" y="181" width="1.2606%" height="15" fill="rgb(217,125,39)"/><text x="97.5226%" y="191.50"></text></g><g><title>prepare_outputs (299,433 samples, 0.24%)</title><rect x="98.5388%" y="181" width="0.2394%" height="15" fill="rgb(235,36,10)"/><text x="98.7888%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,117,172 samples, 0.89%)</title><rect x="98.7782%" y="181" width="0.8931%" height="15" fill="rgb(251,123,47)"/><text x="99.0282%" y="191.50"></text></g><g><title>all (125,086,665 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (125,086,665 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (289,492 samples, 0.23%)</title><rect x="99.7686%" y="181" width="0.2314%" height="15" fill="rgb(211,50,8)"/><text x="100.0186%" y="191.50"></text></g></svg></svg>