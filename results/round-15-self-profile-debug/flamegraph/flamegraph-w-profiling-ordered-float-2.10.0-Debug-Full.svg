<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,336,876 samples, 3.24%)</title><rect x="0.1553%" y="181" width="3.2375%" height="15" fill="rgb(227,0,7)"/><text x="0.4053%" y="191.50">LLV..</text></g><g><title>implied_outlives_bounds (594,376 samples, 0.13%)</title><rect x="10.8967%" y="133" width="0.1255%" height="15" fill="rgb(217,0,24)"/><text x="11.1467%" y="143.50"></text></g><g><title>is_sized_raw (1,861,360 samples, 0.39%)</title><rect x="11.1027%" y="133" width="0.3929%" height="15" fill="rgb(221,193,54)"/><text x="11.3527%" y="143.50"></text></g><g><title>evaluate_obligation (1,545,727 samples, 0.33%)</title><rect x="11.1693%" y="117" width="0.3263%" height="15" fill="rgb(248,212,6)"/><text x="11.4193%" y="127.50"></text></g><g><title>param_env (1,939,759 samples, 0.41%)</title><rect x="12.7428%" y="101" width="0.4095%" height="15" fill="rgb(208,68,35)"/><text x="12.9928%" y="111.50"></text></g><g><title>is_copy_raw (1,013,060 samples, 0.21%)</title><rect x="15.4349%" y="69" width="0.2138%" height="15" fill="rgb(232,128,0)"/><text x="15.6849%" y="79.50"></text></g><g><title>evaluate_obligation (821,259 samples, 0.17%)</title><rect x="15.4754%" y="53" width="0.1734%" height="15" fill="rgb(207,160,47)"/><text x="15.7254%" y="63.50"></text></g><g><title>is_copy_raw (2,274,624 samples, 0.48%)</title><rect x="15.7287%" y="53" width="0.4802%" height="15" fill="rgb(228,23,34)"/><text x="15.9787%" y="63.50"></text></g><g><title>evaluate_obligation (1,742,648 samples, 0.37%)</title><rect x="15.8410%" y="37" width="0.3679%" height="15" fill="rgb(218,30,26)"/><text x="16.0910%" y="47.50"></text></g><g><title>needs_drop_raw (2,654,964 samples, 0.56%)</title><rect x="15.6495%" y="69" width="0.5604%" height="15" fill="rgb(220,122,19)"/><text x="15.8995%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,008,336 samples, 0.42%)</title><rect x="16.3817%" y="53" width="0.4239%" height="15" fill="rgb(250,228,42)"/><text x="16.6317%" y="63.50"></text></g><g><title>specialization_graph_of (884,269 samples, 0.19%)</title><rect x="16.8424%" y="53" width="0.1867%" height="15" fill="rgb(240,193,28)"/><text x="17.0924%" y="63.50"></text></g><g><title>impl_trait_ref (489,816 samples, 0.10%)</title><rect x="16.9257%" y="37" width="0.1034%" height="15" fill="rgb(216,20,37)"/><text x="17.1757%" y="47.50"></text></g><g><title>resolve_instance (4,046,225 samples, 0.85%)</title><rect x="16.2187%" y="69" width="0.8541%" height="15" fill="rgb(206,188,39)"/><text x="16.4687%" y="79.50"></text></g><g><title>thir_body (2,885,378 samples, 0.61%)</title><rect x="17.1010%" y="69" width="0.6091%" height="15" fill="rgb(217,207,13)"/><text x="17.3510%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,155,712 samples, 0.24%)</title><rect x="17.7270%" y="69" width="0.2440%" height="15" fill="rgb(231,73,38)"/><text x="17.9770%" y="79.50"></text></g><g><title>normalize_projection_ty (909,070 samples, 0.19%)</title><rect x="17.7790%" y="53" width="0.1919%" height="15" fill="rgb(225,20,46)"/><text x="18.0290%" y="63.50"></text></g><g><title>mir_const (27,980,935 samples, 5.91%)</title><rect x="12.0669%" y="117" width="5.9065%" height="15" fill="rgb(210,31,41)"/><text x="12.3169%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (22,839,064 samples, 4.82%)</title><rect x="13.1523%" y="101" width="4.8211%" height="15" fill="rgb(221,200,47)"/><text x="13.4023%" y="111.50">unsafe..</text></g><g><title>mir_built (20,949,913 samples, 4.42%)</title><rect x="13.5511%" y="85" width="4.4224%" height="15" fill="rgb(226,26,5)"/><text x="13.8011%" y="95.50">mir_b..</text></g><g><title>mir_promoted (31,443,948 samples, 6.64%)</title><rect x="11.4956%" y="133" width="6.6376%" height="15" fill="rgb(249,33,26)"/><text x="11.7456%" y="143.50">mir_promo..</text></g><g><title>mir_const_qualif (756,858 samples, 0.16%)</title><rect x="17.9734%" y="117" width="0.1598%" height="15" fill="rgb(235,183,28)"/><text x="18.2234%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (576,958 samples, 0.12%)</title><rect x="18.1332%" y="133" width="0.1218%" height="15" fill="rgb(221,5,38)"/><text x="18.3832%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,310,774 samples, 0.28%)</title><rect x="18.2550%" y="133" width="0.2767%" height="15" fill="rgb(247,18,42)"/><text x="18.5050%" y="143.50"></text></g><g><title>normalize_projection_ty (916,370 samples, 0.19%)</title><rect x="18.3382%" y="117" width="0.1934%" height="15" fill="rgb(241,131,45)"/><text x="18.5882%" y="127.50"></text></g><g><title>type_op_normalize_predicate (733,655 samples, 0.15%)</title><rect x="18.5317%" y="133" width="0.1549%" height="15" fill="rgb(249,31,29)"/><text x="18.7817%" y="143.50"></text></g><g><title>type_op_normalize_ty (8,881,065 samples, 1.87%)</title><rect x="18.6865%" y="133" width="1.8747%" height="15" fill="rgb(225,111,53)"/><text x="18.9365%" y="143.50">t..</text></g><g><title>normalize_projection_ty (7,489,026 samples, 1.58%)</title><rect x="18.9804%" y="117" width="1.5809%" height="15" fill="rgb(238,160,17)"/><text x="19.2304%" y="127.50"></text></g><g><title>type_op_prove_predicate (8,739,315 samples, 1.84%)</title><rect x="20.5613%" y="133" width="1.8448%" height="15" fill="rgb(214,148,48)"/><text x="20.8113%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (89,370,877 samples, 18.87%)</title><rect x="3.5422%" y="165" width="18.8655%" height="15" fill="rgb(232,36,49)"/><text x="3.7922%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (88,718,091 samples, 18.73%)</title><rect x="3.6800%" y="149" width="18.7277%" height="15" fill="rgb(209,103,24)"/><text x="3.9300%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (623,776 samples, 0.13%)</title><rect x="22.4959%" y="165" width="0.1317%" height="15" fill="rgb(229,88,8)"/><text x="22.7459%" y="175.50"></text></g><g><title>codegen_fn_attrs (799,669 samples, 0.17%)</title><rect x="22.9641%" y="101" width="0.1688%" height="15" fill="rgb(213,181,19)"/><text x="23.2141%" y="111.50"></text></g><g><title>should_inherit_track_caller (1,302,661 samples, 0.27%)</title><rect x="22.8652%" y="117" width="0.2750%" height="15" fill="rgb(254,191,54)"/><text x="23.1152%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,805,925 samples, 0.38%)</title><rect x="22.7631%" y="133" width="0.3812%" height="15" fill="rgb(241,83,37)"/><text x="23.0131%" y="143.50"></text></g><g><title>check_mod_attrs (2,428,085 samples, 0.51%)</title><rect x="22.6318%" y="149" width="0.5125%" height="15" fill="rgb(233,36,39)"/><text x="22.8818%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (921,249 samples, 0.19%)</title><rect x="23.2799%" y="149" width="0.1945%" height="15" fill="rgb(226,3,54)"/><text x="23.5299%" y="159.50"></text></g><g><title>misc_checking_1 (4,122,522 samples, 0.87%)</title><rect x="22.6277%" y="165" width="0.8702%" height="15" fill="rgb(245,192,40)"/><text x="22.8777%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,118,091 samples, 0.24%)</title><rect x="23.4983%" y="149" width="0.2360%" height="15" fill="rgb(238,167,29)"/><text x="23.7483%" y="159.50"></text></g><g><title>check_mod_liveness (910,539 samples, 0.19%)</title><rect x="23.5421%" y="133" width="0.1922%" height="15" fill="rgb(232,182,51)"/><text x="23.7921%" y="143.50"></text></g><g><title>misc_checking_2 (3,014,621 samples, 0.64%)</title><rect x="23.4979%" y="165" width="0.6364%" height="15" fill="rgb(231,60,39)"/><text x="23.7479%" y="175.50"></text></g><g><title>match_checking (1,894,760 samples, 0.40%)</title><rect x="23.7343%" y="149" width="0.4000%" height="15" fill="rgb(208,69,12)"/><text x="23.9843%" y="159.50"></text></g><g><title>check_match (1,741,070 samples, 0.37%)</title><rect x="23.7668%" y="133" width="0.3675%" height="15" fill="rgb(235,93,37)"/><text x="24.0168%" y="143.50"></text></g><g><title>check_private_in_public (763,507 samples, 0.16%)</title><rect x="24.1368%" y="149" width="0.1612%" height="15" fill="rgb(213,116,39)"/><text x="24.3868%" y="159.50"></text></g><g><title>death_checking (1,481,766 samples, 0.31%)</title><rect x="24.2980%" y="149" width="0.3128%" height="15" fill="rgb(222,207,29)"/><text x="24.5480%" y="159.50"></text></g><g><title>crate_lints (2,858,329 samples, 0.60%)</title><rect x="24.6112%" y="133" width="0.6034%" height="15" fill="rgb(206,96,30)"/><text x="24.8612%" y="143.50"></text></g><g><title>type_of (1,163,592 samples, 0.25%)</title><rect x="24.9689%" y="117" width="0.2456%" height="15" fill="rgb(218,138,4)"/><text x="25.2189%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (929,869 samples, 0.20%)</title><rect x="25.0182%" y="101" width="0.1963%" height="15" fill="rgb(250,191,14)"/><text x="25.2682%" y="111.50"></text></g><g><title>lint_checking (3,685,967 samples, 0.78%)</title><rect x="24.6107%" y="149" width="0.7781%" height="15" fill="rgb(239,60,40)"/><text x="24.8607%" y="159.50"></text></g><g><title>module_lints (825,628 samples, 0.17%)</title><rect x="25.2145%" y="133" width="0.1743%" height="15" fill="rgb(206,27,48)"/><text x="25.4645%" y="143.50"></text></g><g><title>lint_mod (822,048 samples, 0.17%)</title><rect x="25.2153%" y="117" width="0.1735%" height="15" fill="rgb(225,35,8)"/><text x="25.4653%" y="127.50"></text></g><g><title>privacy_access_levels (1,291,454 samples, 0.27%)</title><rect x="25.3888%" y="149" width="0.2726%" height="15" fill="rgb(250,213,24)"/><text x="25.6388%" y="159.50"></text></g><g><title>privacy_checking_modules (2,866,809 samples, 0.61%)</title><rect x="25.6614%" y="149" width="0.6052%" height="15" fill="rgb(247,123,22)"/><text x="25.9114%" y="159.50"></text></g><g><title>check_mod_privacy (2,865,119 samples, 0.60%)</title><rect x="25.6618%" y="133" width="0.6048%" height="15" fill="rgb(231,138,38)"/><text x="25.9118%" y="143.50"></text></g><g><title>misc_checking_3 (10,125,723 samples, 2.14%)</title><rect x="24.1343%" y="165" width="2.1375%" height="15" fill="rgb(231,145,46)"/><text x="24.3843%" y="175.50">m..</text></g><g><title>impl_parent (4,126,789 samples, 0.87%)</title><rect x="30.5698%" y="101" width="0.8711%" height="15" fill="rgb(251,118,11)"/><text x="30.8198%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,332,304 samples, 0.49%)</title><rect x="30.9486%" y="85" width="0.4923%" height="15" fill="rgb(217,147,25)"/><text x="31.1986%" y="95.50"></text></g><g><title>impl_trait_ref (7,725,756 samples, 1.63%)</title><rect x="31.4418%" y="101" width="1.6308%" height="15" fill="rgb(247,81,37)"/><text x="31.6918%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,079,762 samples, 1.28%)</title><rect x="31.7893%" y="85" width="1.2834%" height="15" fill="rgb(209,12,38)"/><text x="32.0393%" y="95.50"></text></g><g><title>item_attrs (1,770,425 samples, 0.37%)</title><rect x="33.0727%" y="101" width="0.3737%" height="15" fill="rgb(227,1,9)"/><text x="33.3227%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,642,073 samples, 0.35%)</title><rect x="33.0998%" y="85" width="0.3466%" height="15" fill="rgb(248,47,43)"/><text x="33.3498%" y="95.50"></text></g><g><title>predicates_of (1,460,991 samples, 0.31%)</title><rect x="33.4467%" y="101" width="0.3084%" height="15" fill="rgb(221,10,30)"/><text x="33.6967%" y="111.50"></text></g><g><title>predicates_defined_on (925,147 samples, 0.20%)</title><rect x="33.5598%" y="85" width="0.1953%" height="15" fill="rgb(210,229,1)"/><text x="33.8098%" y="95.50"></text></g><g><title>trait_impls_of (1,602,063 samples, 0.34%)</title><rect x="33.7556%" y="101" width="0.3382%" height="15" fill="rgb(222,148,37)"/><text x="34.0056%" y="111.50"></text></g><g><title>implementations_of_trait (576,544 samples, 0.12%)</title><rect x="33.9721%" y="85" width="0.1217%" height="15" fill="rgb(234,67,33)"/><text x="34.2221%" y="95.50"></text></g><g><title>coherent_trait (42,317,959 samples, 8.93%)</title><rect x="26.3333%" y="133" width="8.9330%" height="15" fill="rgb(247,98,35)"/><text x="26.5833%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (41,804,185 samples, 8.82%)</title><rect x="26.4417%" y="117" width="8.8245%" height="15" fill="rgb(247,138,52)"/><text x="26.6917%" y="127.50">specializati..</text></g><g><title>visible_parent_map (5,218,722 samples, 1.10%)</title><rect x="34.1646%" y="101" width="1.1016%" height="15" fill="rgb(213,79,30)"/><text x="34.4146%" y="111.50"></text></g><g><title>module_children (4,727,648 samples, 1.00%)</title><rect x="34.2683%" y="85" width="0.9980%" height="15" fill="rgb(246,177,23)"/><text x="34.5183%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,617,057 samples, 0.97%)</title><rect x="34.2916%" y="69" width="0.9746%" height="15" fill="rgb(230,62,27)"/><text x="34.5416%" y="79.50"></text></g><g><title>coherence_checking (42,543,282 samples, 8.98%)</title><rect x="26.3220%" y="149" width="8.9805%" height="15" fill="rgb(216,154,8)"/><text x="26.5720%" y="159.50">coherence_che..</text></g><g><title>dropck_outlives (2,271,041 samples, 0.48%)</title><rect x="47.9317%" y="101" width="0.4794%" height="15" fill="rgb(244,35,45)"/><text x="48.1817%" y="111.50"></text></g><g><title>normalize_projection_ty (1,379,394 samples, 0.29%)</title><rect x="48.1199%" y="85" width="0.2912%" height="15" fill="rgb(251,115,12)"/><text x="48.3699%" y="95.50"></text></g><g><title>evaluate_obligation (5,782,397 samples, 1.22%)</title><rect x="48.4111%" y="101" width="1.2206%" height="15" fill="rgb(240,54,50)"/><text x="48.6611%" y="111.50"></text></g><g><title>method_autoderef_steps (1,211,883 samples, 0.26%)</title><rect x="49.7369%" y="101" width="0.2558%" height="15" fill="rgb(233,84,52)"/><text x="49.9869%" y="111.50"></text></g><g><title>evaluate_obligation (606,747 samples, 0.13%)</title><rect x="49.8647%" y="85" width="0.1281%" height="15" fill="rgb(207,117,47)"/><text x="50.1147%" y="95.50"></text></g><g><title>evaluate_obligation (605,827 samples, 0.13%)</title><rect x="52.0105%" y="85" width="0.1279%" height="15" fill="rgb(249,43,39)"/><text x="52.2605%" y="95.50"></text></g><g><title>typeck (10,531,738 samples, 2.22%)</title><rect x="50.1084%" y="101" width="2.2232%" height="15" fill="rgb(209,38,44)"/><text x="50.3584%" y="111.50">t..</text></g><g><title>item_bodies_checking (80,639,769 samples, 17.02%)</title><rect x="35.3438%" y="149" width="17.0224%" height="15" fill="rgb(236,212,23)"/><text x="35.5938%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (80,636,069 samples, 17.02%)</title><rect x="35.3446%" y="133" width="17.0216%" height="15" fill="rgb(242,79,21)"/><text x="35.5946%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (80,182,240 samples, 16.93%)</title><rect x="35.4404%" y="117" width="16.9258%" height="15" fill="rgb(211,96,35)"/><text x="35.6904%" y="127.50">typeck</text></g><g><title>item_types_checking (18,469,237 samples, 3.90%)</title><rect x="52.3662%" y="149" width="3.8987%" height="15" fill="rgb(253,215,40)"/><text x="52.6162%" y="159.50">item..</text></g><g><title>check_mod_item_types (18,465,007 samples, 3.90%)</title><rect x="52.3671%" y="133" width="3.8978%" height="15" fill="rgb(211,81,21)"/><text x="52.6171%" y="143.50">chec..</text></g><g><title>fn_sig (1,136,445 samples, 0.24%)</title><rect x="56.5620%" y="117" width="0.2399%" height="15" fill="rgb(208,190,38)"/><text x="56.8120%" y="127.50"></text></g><g><title>is_late_bound_map (829,590 samples, 0.18%)</title><rect x="56.9166%" y="101" width="0.1751%" height="15" fill="rgb(235,213,38)"/><text x="57.1666%" y="111.50"></text></g><g><title>resolve_lifetimes (743,279 samples, 0.16%)</title><rect x="56.9348%" y="85" width="0.1569%" height="15" fill="rgb(237,122,38)"/><text x="57.1848%" y="95.50"></text></g><g><title>generics_of (1,538,505 samples, 0.32%)</title><rect x="56.8019%" y="117" width="0.3248%" height="15" fill="rgb(244,218,35)"/><text x="57.0519%" y="127.50"></text></g><g><title>late_bound_vars_map (1,280,953 samples, 0.27%)</title><rect x="57.5532%" y="69" width="0.2704%" height="15" fill="rgb(240,68,47)"/><text x="57.8032%" y="79.50"></text></g><g><title>resolve_lifetimes (1,202,293 samples, 0.25%)</title><rect x="57.5698%" y="53" width="0.2538%" height="15" fill="rgb(210,16,53)"/><text x="57.8198%" y="63.50"></text></g><g><title>explicit_predicates_of (2,233,633 samples, 0.47%)</title><rect x="57.3613%" y="85" width="0.4715%" height="15" fill="rgb(235,124,12)"/><text x="57.6113%" y="95.50"></text></g><g><title>predicates_of (3,041,627 samples, 0.64%)</title><rect x="57.2156%" y="117" width="0.6421%" height="15" fill="rgb(224,169,11)"/><text x="57.4656%" y="127.50"></text></g><g><title>predicates_defined_on (2,778,137 samples, 0.59%)</title><rect x="57.2712%" y="101" width="0.5864%" height="15" fill="rgb(250,166,2)"/><text x="57.5212%" y="111.50"></text></g><g><title>type_collecting (8,563,617 samples, 1.81%)</title><rect x="56.2657%" y="149" width="1.8077%" height="15" fill="rgb(242,216,29)"/><text x="56.5157%" y="159.50">t..</text></g><g><title>collect_mod_item_types (8,551,907 samples, 1.81%)</title><rect x="56.2681%" y="133" width="1.8052%" height="15" fill="rgb(230,116,27)"/><text x="56.5181%" y="143.50">c..</text></g><g><title>type_of (1,021,854 samples, 0.22%)</title><rect x="57.8577%" y="117" width="0.2157%" height="15" fill="rgb(228,99,48)"/><text x="58.1077%" y="127.50"></text></g><g><title>evaluate_obligation (1,124,349 samples, 0.24%)</title><rect x="62.1222%" y="117" width="0.2373%" height="15" fill="rgb(253,11,6)"/><text x="62.3722%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,853,959 samples, 0.39%)</title><rect x="62.4057%" y="117" width="0.3914%" height="15" fill="rgb(247,143,39)"/><text x="62.6557%" y="127.50"></text></g><g><title>param_env (5,820,407 samples, 1.23%)</title><rect x="62.9010%" y="117" width="1.2286%" height="15" fill="rgb(236,97,10)"/><text x="63.1510%" y="127.50"></text></g><g><title>region_scope_tree (1,429,407 samples, 0.30%)</title><rect x="64.1411%" y="117" width="0.3017%" height="15" fill="rgb(233,208,19)"/><text x="64.3911%" y="127.50"></text></g><g><title>check_impl_item_well_formed (29,098,494 samples, 6.14%)</title><rect x="58.3180%" y="133" width="6.1425%" height="15" fill="rgb(216,164,2)"/><text x="58.5680%" y="143.50">check_im..</text></g><g><title>evaluate_obligation (482,365 samples, 0.10%)</title><rect x="68.3496%" y="117" width="0.1018%" height="15" fill="rgb(220,129,5)"/><text x="68.5996%" y="127.50"></text></g><g><title>implied_outlives_bounds (894,534 samples, 0.19%)</title><rect x="68.4781%" y="117" width="0.1888%" height="15" fill="rgb(242,17,10)"/><text x="68.7281%" y="127.50"></text></g><g><title>param_env (2,877,287 samples, 0.61%)</title><rect x="68.6681%" y="117" width="0.6074%" height="15" fill="rgb(242,107,0)"/><text x="68.9181%" y="127.50"></text></g><g><title>analysis (312,924,576 samples, 66.06%)</title><rect x="3.3928%" y="181" width="66.0558%" height="15" fill="rgb(251,28,31)"/><text x="3.6428%" y="191.50">analysis</text></g><g><title>type_check_crate (204,540,746 samples, 43.18%)</title><rect x="26.2717%" y="165" width="43.1769%" height="15" fill="rgb(233,223,10)"/><text x="26.5217%" y="175.50">type_check_crate</text></g><g><title>wf_checking (53,861,927 samples, 11.37%)</title><rect x="58.0788%" y="149" width="11.3698%" height="15" fill="rgb(215,21,27)"/><text x="58.3288%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (23,630,481 samples, 4.99%)</title><rect x="64.4604%" y="133" width="4.9882%" height="15" fill="rgb(232,23,21)"/><text x="64.7104%" y="143.50">check_..</text></g><g><title>codegen_module (3,037,510 samples, 0.64%)</title><rect x="69.6145%" y="165" width="0.6412%" height="15" fill="rgb(244,5,23)"/><text x="69.8645%" y="175.50"></text></g><g><title>codegen_crate (3,887,039 samples, 0.82%)</title><rect x="69.4514%" y="181" width="0.8205%" height="15" fill="rgb(226,81,46)"/><text x="69.7014%" y="191.50"></text></g><g><title>LLVM_module_codegen (32,683,741 samples, 6.90%)</title><rect x="70.2831%" y="165" width="6.8993%" height="15" fill="rgb(247,70,30)"/><text x="70.5331%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (31,561,269 samples, 6.66%)</title><rect x="70.5201%" y="149" width="6.6623%" height="15" fill="rgb(212,68,19)"/><text x="70.7701%" y="159.50">LLVM_modu..</text></g><g><title>codegen_module_optimize (34,015,105 samples, 7.18%)</title><rect x="70.2720%" y="181" width="7.1803%" height="15" fill="rgb(240,187,13)"/><text x="70.5220%" y="191.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (1,278,393 samples, 0.27%)</title><rect x="77.1824%" y="165" width="0.2699%" height="15" fill="rgb(223,113,26)"/><text x="77.4324%" y="175.50"></text></g><g><title>macro_expand_crate (21,142,205 samples, 4.46%)</title><rect x="77.6119%" y="165" width="4.4629%" height="15" fill="rgb(206,192,2)"/><text x="77.8619%" y="175.50">macro..</text></g><g><title>expand_crate (21,128,515 samples, 4.46%)</title><rect x="77.6148%" y="149" width="4.4601%" height="15" fill="rgb(241,108,4)"/><text x="77.8648%" y="159.50">expan..</text></g><g><title>metadata_register_crate (1,704,747 samples, 0.36%)</title><rect x="81.7150%" y="133" width="0.3599%" height="15" fill="rgb(247,173,49)"/><text x="81.9650%" y="143.50"></text></g><g><title>metadata_register_crate (588,506 samples, 0.12%)</title><rect x="81.9506%" y="117" width="0.1242%" height="15" fill="rgb(224,114,35)"/><text x="82.2006%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (935,779 samples, 0.20%)</title><rect x="82.0767%" y="165" width="0.1975%" height="15" fill="rgb(245,159,27)"/><text x="82.3267%" y="175.50"></text></g><g><title>late_resolve_crate (4,632,107 samples, 0.98%)</title><rect x="82.3339%" y="149" width="0.9778%" height="15" fill="rgb(245,172,44)"/><text x="82.5839%" y="159.50"></text></g><g><title>configure_and_expand (27,992,304 samples, 5.91%)</title><rect x="77.4523%" y="181" width="5.9089%" height="15" fill="rgb(236,23,11)"/><text x="77.7023%" y="191.50">configur..</text></g><g><title>resolve_crate (5,149,422 samples, 1.09%)</title><rect x="82.2742%" y="165" width="1.0870%" height="15" fill="rgb(205,117,38)"/><text x="82.5242%" y="175.50"></text></g><g><title>drop_ast (808,608 samples, 0.17%)</title><rect x="83.3612%" y="181" width="0.1707%" height="15" fill="rgb(237,72,25)"/><text x="83.6112%" y="191.50"></text></g><g><title>early_lint_checks (823,279 samples, 0.17%)</title><rect x="83.5359%" y="181" width="0.1738%" height="15" fill="rgb(244,70,9)"/><text x="83.7859%" y="191.50"></text></g><g><title>free_global_ctxt (6,536,766 samples, 1.38%)</title><rect x="83.7097%" y="181" width="1.3799%" height="15" fill="rgb(217,125,39)"/><text x="83.9597%" y="191.50"></text></g><g><title>optimized_mir (1,112,656 samples, 0.23%)</title><rect x="86.5164%" y="101" width="0.2349%" height="15" fill="rgb(235,36,10)"/><text x="86.7664%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,715,017 samples, 0.36%)</title><rect x="86.4481%" y="117" width="0.3620%" height="15" fill="rgb(251,123,47)"/><text x="86.6981%" y="127.50"></text></g><g><title>monomorphization_collector (1,800,468 samples, 0.38%)</title><rect x="86.4470%" y="133" width="0.3801%" height="15" fill="rgb(221,13,13)"/><text x="86.6970%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (2,128,332 samples, 0.45%)</title><rect x="86.4431%" y="149" width="0.4493%" height="15" fill="rgb(238,131,9)"/><text x="86.6931%" y="159.50"></text></g><g><title>exported_symbols (2,717,558 samples, 0.57%)</title><rect x="86.4384%" y="165" width="0.5737%" height="15" fill="rgb(211,50,8)"/><text x="86.6884%" y="175.50"></text></g><g><title>reachable_non_generics (567,116 samples, 0.12%)</title><rect x="86.8924%" y="149" width="0.1197%" height="15" fill="rgb(245,182,24)"/><text x="87.1424%" y="159.50"></text></g><g><title>reachable_set (505,645 samples, 0.11%)</title><rect x="86.9054%" y="133" width="0.1067%" height="15" fill="rgb(242,14,37)"/><text x="87.1554%" y="143.50"></text></g><g><title>is_sized_raw (583,185 samples, 0.12%)</title><rect x="89.2886%" y="133" width="0.1231%" height="15" fill="rgb(246,228,12)"/><text x="89.5386%" y="143.50"></text></g><g><title>layout_of (1,821,997 samples, 0.38%)</title><rect x="89.1210%" y="149" width="0.3846%" height="15" fill="rgb(213,55,15)"/><text x="89.3710%" y="159.50"></text></g><g><title>is_copy_raw (1,330,837 samples, 0.28%)</title><rect x="91.6202%" y="117" width="0.2809%" height="15" fill="rgb(209,9,3)"/><text x="91.8702%" y="127.50"></text></g><g><title>evaluate_obligation (983,585 samples, 0.21%)</title><rect x="91.6935%" y="101" width="0.2076%" height="15" fill="rgb(230,59,30)"/><text x="91.9435%" y="111.50"></text></g><g><title>needs_drop_raw (1,515,762 samples, 0.32%)</title><rect x="91.5818%" y="133" width="0.3200%" height="15" fill="rgb(209,121,21)"/><text x="91.8318%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,831,605 samples, 2.71%)</title><rect x="89.5056%" y="149" width="2.7086%" height="15" fill="rgb(220,109,13)"/><text x="89.7556%" y="159.50">mi..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,277,132 samples, 0.27%)</title><rect x="91.9447%" y="133" width="0.2696%" height="15" fill="rgb(232,18,1)"/><text x="92.1947%" y="143.50"></text></g><g><title>normalize_projection_ty (1,043,751 samples, 0.22%)</title><rect x="91.9939%" y="117" width="0.2203%" height="15" fill="rgb(215,41,42)"/><text x="92.2439%" y="127.50"></text></g><g><title>optimized_mir (24,415,031 samples, 5.15%)</title><rect x="87.0699%" y="165" width="5.1538%" height="15" fill="rgb(224,123,36)"/><text x="87.3199%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (34,149,197 samples, 7.21%)</title><rect x="85.0896%" y="181" width="7.2086%" height="15" fill="rgb(240,125,3)"/><text x="85.3396%" y="191.50">generate_c..</text></g><g><title>hir_lowering (9,967,501 samples, 2.10%)</title><rect x="92.2982%" y="181" width="2.1041%" height="15" fill="rgb(205,98,50)"/><text x="92.5482%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (5,153,612 samples, 1.09%)</title><rect x="94.4064%" y="165" width="1.0879%" height="15" fill="rgb(205,185,37)"/><text x="94.6564%" y="175.50"></text></g><g><title>link_crate (1,611,887 samples, 0.34%)</title><rect x="95.4943%" y="165" width="0.3403%" height="15" fill="rgb(238,207,15)"/><text x="95.7443%" y="175.50"></text></g><g><title>link_binary (1,567,906 samples, 0.33%)</title><rect x="95.5036%" y="149" width="0.3310%" height="15" fill="rgb(213,199,42)"/><text x="95.7536%" y="159.50"></text></g><g><title>link_rlib (1,187,672 samples, 0.25%)</title><rect x="95.5838%" y="133" width="0.2507%" height="15" fill="rgb(235,201,11)"/><text x="95.8338%" y="143.50"></text></g><g><title>link (6,794,449 samples, 1.43%)</title><rect x="94.4022%" y="181" width="1.4343%" height="15" fill="rgb(207,46,11)"/><text x="94.6522%" y="191.50"></text></g><g><title>parse_crate (16,865,402 samples, 3.56%)</title><rect x="95.8365%" y="181" width="3.5601%" height="15" fill="rgb(241,35,35)"/><text x="96.0865%" y="191.50">pars..</text></g><g><title>self_profile_alloc_query_strings (1,956,910 samples, 0.41%)</title><rect x="99.4465%" y="181" width="0.4131%" height="15" fill="rgb(243,32,47)"/><text x="99.6965%" y="191.50"></text></g><g><title>all (473,727,359 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (473,727,359 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (571,596 samples, 0.12%)</title><rect x="99.8793%" y="181" width="0.1207%" height="15" fill="rgb(243,110,44)"/><text x="100.1293%" y="191.50"></text></g></svg></svg>