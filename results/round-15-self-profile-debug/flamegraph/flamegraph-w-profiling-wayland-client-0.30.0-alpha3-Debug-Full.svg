<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (256,806,349 samples, 7.26%)</title><rect x="0.1170%" y="181" width="7.2641%" height="15" fill="rgb(227,0,7)"/><text x="0.3670%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (6,165,182 samples, 0.17%)</title><rect x="14.8787%" y="53" width="0.1744%" height="15" fill="rgb(217,0,24)"/><text x="15.1287%" y="63.50"></text></g><g><title>evaluate_obligation (4,783,873 samples, 0.14%)</title><rect x="14.9178%" y="37" width="0.1353%" height="15" fill="rgb(221,193,54)"/><text x="15.1678%" y="47.50"></text></g><g><title>needs_drop_raw (7,977,964 samples, 0.23%)</title><rect x="14.8275%" y="69" width="0.2257%" height="15" fill="rgb(248,212,6)"/><text x="15.0775%" y="79.50"></text></g><g><title>resolve_instance (4,698,373 samples, 0.13%)</title><rect x="15.0817%" y="69" width="0.1329%" height="15" fill="rgb(208,68,35)"/><text x="15.3317%" y="79.50"></text></g><g><title>thir_body (15,219,745 samples, 0.43%)</title><rect x="15.2232%" y="69" width="0.4305%" height="15" fill="rgb(232,128,0)"/><text x="15.4732%" y="79.50"></text></g><g><title>mir_const (86,618,221 samples, 2.45%)</title><rect x="13.2161%" y="117" width="2.4501%" height="15" fill="rgb(207,160,47)"/><text x="13.4661%" y="127.50">mi..</text></g><g><title>unsafety_check_result (76,617,524 samples, 2.17%)</title><rect x="13.4990%" y="101" width="2.1672%" height="15" fill="rgb(228,23,34)"/><text x="13.7490%" y="111.50">u..</text></g><g><title>mir_built (70,076,490 samples, 1.98%)</title><rect x="13.6840%" y="85" width="1.9822%" height="15" fill="rgb(218,30,26)"/><text x="13.9340%" y="95.50">m..</text></g><g><title>thir_body (4,051,537 samples, 0.11%)</title><rect x="16.1627%" y="53" width="0.1146%" height="15" fill="rgb(220,122,19)"/><text x="16.4127%" y="63.50"></text></g><g><title>mir_const (16,244,751 samples, 0.46%)</title><rect x="15.8201%" y="101" width="0.4595%" height="15" fill="rgb(250,228,42)"/><text x="16.0701%" y="111.50"></text></g><g><title>unsafety_check_result (13,484,991 samples, 0.38%)</title><rect x="15.8981%" y="85" width="0.3814%" height="15" fill="rgb(240,193,28)"/><text x="16.1481%" y="95.50"></text></g><g><title>mir_built (12,194,293 samples, 0.34%)</title><rect x="15.9346%" y="69" width="0.3449%" height="15" fill="rgb(216,20,37)"/><text x="16.1846%" y="79.50"></text></g><g><title>mir_const_qualif (21,701,635 samples, 0.61%)</title><rect x="15.6662%" y="117" width="0.6139%" height="15" fill="rgb(206,188,39)"/><text x="15.9162%" y="127.50"></text></g><g><title>mir_promoted (121,000,407 samples, 3.42%)</title><rect x="12.8574%" y="133" width="3.4227%" height="15" fill="rgb(217,207,13)"/><text x="13.1074%" y="143.50">mir..</text></g><g><title>type_op_prove_predicate (15,209,650 samples, 0.43%)</title><rect x="16.4656%" y="133" width="0.4302%" height="15" fill="rgb(231,73,38)"/><text x="16.7156%" y="143.50"></text></g><g><title>MIR_borrow_checking (332,724,858 samples, 9.41%)</title><rect x="7.4847%" y="165" width="9.4116%" height="15" fill="rgb(225,20,46)"/><text x="7.7347%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (330,382,433 samples, 9.35%)</title><rect x="7.5509%" y="149" width="9.3454%" height="15" fill="rgb(210,31,41)"/><text x="7.8009%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (7,734,192 samples, 0.22%)</title><rect x="16.8963%" y="165" width="0.2188%" height="15" fill="rgb(221,200,47)"/><text x="17.1463%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,580,458 samples, 0.19%)</title><rect x="16.9289%" y="149" width="0.1861%" height="15" fill="rgb(226,26,5)"/><text x="17.1789%" y="159.50"></text></g><g><title>check_mod_attrs (7,539,078 samples, 0.21%)</title><rect x="17.1960%" y="149" width="0.2133%" height="15" fill="rgb(249,33,26)"/><text x="17.4460%" y="159.50"></text></g><g><title>misc_checking_1 (14,674,796 samples, 0.42%)</title><rect x="17.1934%" y="165" width="0.4151%" height="15" fill="rgb(235,183,28)"/><text x="17.4434%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (6,454,580 samples, 0.18%)</title><rect x="17.6086%" y="149" width="0.1826%" height="15" fill="rgb(221,5,38)"/><text x="17.8586%" y="159.50"></text></g><g><title>check_mod_liveness (5,016,489 samples, 0.14%)</title><rect x="17.6492%" y="133" width="0.1419%" height="15" fill="rgb(247,18,42)"/><text x="17.8992%" y="143.50"></text></g><g><title>misc_checking_2 (16,613,388 samples, 0.47%)</title><rect x="17.6084%" y="165" width="0.4699%" height="15" fill="rgb(241,131,45)"/><text x="17.8584%" y="175.50"></text></g><g><title>match_checking (10,154,948 samples, 0.29%)</title><rect x="17.7911%" y="149" width="0.2872%" height="15" fill="rgb(249,31,29)"/><text x="18.0411%" y="159.50"></text></g><g><title>check_match (9,480,724 samples, 0.27%)</title><rect x="17.8102%" y="133" width="0.2682%" height="15" fill="rgb(225,111,53)"/><text x="18.0602%" y="143.50"></text></g><g><title>check_private_in_public (3,542,948 samples, 0.10%)</title><rect x="18.0790%" y="149" width="0.1002%" height="15" fill="rgb(238,160,17)"/><text x="18.3290%" y="159.50"></text></g><g><title>death_checking (6,254,346 samples, 0.18%)</title><rect x="18.1792%" y="149" width="0.1769%" height="15" fill="rgb(214,148,48)"/><text x="18.4292%" y="159.50"></text></g><g><title>eval_to_const_value_raw (6,022,234 samples, 0.17%)</title><rect x="18.8662%" y="69" width="0.1703%" height="15" fill="rgb(232,36,49)"/><text x="19.1162%" y="79.50"></text></g><g><title>eval_to_const_value_raw (5,929,363 samples, 0.17%)</title><rect x="18.8689%" y="53" width="0.1677%" height="15" fill="rgb(209,103,24)"/><text x="19.1189%" y="63.50"></text></g><g><title>eval_to_allocation_raw (5,869,503 samples, 0.17%)</title><rect x="18.8706%" y="37" width="0.1660%" height="15" fill="rgb(229,88,8)"/><text x="19.1206%" y="47.50"></text></g><g><title>eval_to_allocation_raw (11,349,541 samples, 0.32%)</title><rect x="18.7163%" y="117" width="0.3210%" height="15" fill="rgb(213,181,19)"/><text x="18.9663%" y="127.50"></text></g><g><title>eval_to_allocation_raw (11,263,928 samples, 0.32%)</title><rect x="18.7187%" y="101" width="0.3186%" height="15" fill="rgb(254,191,54)"/><text x="18.9687%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,209,096 samples, 0.18%)</title><rect x="18.8617%" y="85" width="0.1756%" height="15" fill="rgb(241,83,37)"/><text x="19.1117%" y="95.50"></text></g><g><title>crate_lints (31,037,292 samples, 0.88%)</title><rect x="18.3562%" y="133" width="0.8779%" height="15" fill="rgb(233,36,39)"/><text x="18.6062%" y="143.50"></text></g><g><title>lint_checking (41,138,319 samples, 1.16%)</title><rect x="18.3561%" y="149" width="1.1637%" height="15" fill="rgb(226,3,54)"/><text x="18.6061%" y="159.50"></text></g><g><title>module_lints (10,097,457 samples, 0.29%)</title><rect x="19.2341%" y="133" width="0.2856%" height="15" fill="rgb(245,192,40)"/><text x="19.4841%" y="143.50"></text></g><g><title>lint_mod (10,064,817 samples, 0.28%)</title><rect x="19.2351%" y="117" width="0.2847%" height="15" fill="rgb(238,167,29)"/><text x="19.4851%" y="127.50"></text></g><g><title>privacy_access_levels (4,894,762 samples, 0.14%)</title><rect x="19.5198%" y="149" width="0.1385%" height="15" fill="rgb(232,182,51)"/><text x="19.7698%" y="159.50"></text></g><g><title>privacy_checking_modules (15,412,545 samples, 0.44%)</title><rect x="19.6582%" y="149" width="0.4360%" height="15" fill="rgb(231,60,39)"/><text x="19.9082%" y="159.50"></text></g><g><title>check_mod_privacy (15,383,245 samples, 0.44%)</title><rect x="19.6590%" y="133" width="0.4351%" height="15" fill="rgb(208,69,12)"/><text x="19.9090%" y="143.50"></text></g><g><title>misc_checking_3 (71,425,872 samples, 2.02%)</title><rect x="18.0784%" y="165" width="2.0204%" height="15" fill="rgb(235,93,37)"/><text x="18.3284%" y="175.50">m..</text></g><g><title>impl_parent (5,856,977 samples, 0.17%)</title><rect x="20.4492%" y="101" width="0.1657%" height="15" fill="rgb(213,116,39)"/><text x="20.6992%" y="111.50"></text></g><g><title>impl_trait_ref (9,634,190 samples, 0.27%)</title><rect x="20.6149%" y="101" width="0.2725%" height="15" fill="rgb(222,207,29)"/><text x="20.8649%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,267,565 samples, 0.21%)</title><rect x="20.6818%" y="85" width="0.2056%" height="15" fill="rgb(206,96,30)"/><text x="20.9318%" y="95.50"></text></g><g><title>coherent_trait (28,661,776 samples, 0.81%)</title><rect x="20.1414%" y="133" width="0.8107%" height="15" fill="rgb(218,138,4)"/><text x="20.3914%" y="143.50"></text></g><g><title>specialization_graph_of (28,021,549 samples, 0.79%)</title><rect x="20.1595%" y="117" width="0.7926%" height="15" fill="rgb(250,191,14)"/><text x="20.4095%" y="127.50"></text></g><g><title>coherence_checking (29,380,604 samples, 0.83%)</title><rect x="20.1401%" y="149" width="0.8311%" height="15" fill="rgb(239,60,40)"/><text x="20.3901%" y="159.50"></text></g><g><title>evaluate_obligation (7,443,411 samples, 0.21%)</title><rect x="29.5463%" y="101" width="0.2105%" height="15" fill="rgb(206,27,48)"/><text x="29.7963%" y="111.50"></text></g><g><title>evaluate_obligation (5,058,564 samples, 0.14%)</title><rect x="31.0943%" y="85" width="0.1431%" height="15" fill="rgb(225,35,8)"/><text x="31.3443%" y="95.50"></text></g><g><title>typeck (49,714,453 samples, 1.41%)</title><rect x="29.9175%" y="101" width="1.4062%" height="15" fill="rgb(250,213,24)"/><text x="30.1675%" y="111.50"></text></g><g><title>item_bodies_checking (365,789,870 samples, 10.35%)</title><rect x="20.9862%" y="149" width="10.3469%" height="15" fill="rgb(247,123,22)"/><text x="21.2362%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (365,785,230 samples, 10.35%)</title><rect x="20.9864%" y="133" width="10.3468%" height="15" fill="rgb(231,138,38)"/><text x="21.2364%" y="143.50">typeck_item_bod..</text></g><g><title>typeck (363,285,472 samples, 10.28%)</title><rect x="21.0571%" y="117" width="10.2761%" height="15" fill="rgb(231,145,46)"/><text x="21.3071%" y="127.50">typeck</text></g><g><title>item_types_checking (51,399,378 samples, 1.45%)</title><rect x="31.3331%" y="149" width="1.4539%" height="15" fill="rgb(251,118,11)"/><text x="31.5831%" y="159.50"></text></g><g><title>check_mod_item_types (51,365,197 samples, 1.45%)</title><rect x="31.3341%" y="133" width="1.4529%" height="15" fill="rgb(217,147,25)"/><text x="31.5841%" y="143.50"></text></g><g><title>typeck (35,899,423 samples, 1.02%)</title><rect x="31.7716%" y="117" width="1.0155%" height="15" fill="rgb(247,81,37)"/><text x="32.0216%" y="127.50"></text></g><g><title>mir_const_qualif (3,590,653 samples, 0.10%)</title><rect x="33.0129%" y="69" width="0.1016%" height="15" fill="rgb(209,12,38)"/><text x="33.2629%" y="79.50"></text></g><g><title>mir_borrowck (7,793,224 samples, 0.22%)</title><rect x="33.2345%" y="37" width="0.2204%" height="15" fill="rgb(227,1,9)"/><text x="33.4845%" y="47.50"></text></g><g><title>mir_for_ctfe (12,095,427 samples, 0.34%)</title><rect x="33.1145%" y="69" width="0.3421%" height="15" fill="rgb(248,47,43)"/><text x="33.3645%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,067,358 samples, 0.31%)</title><rect x="33.1436%" y="53" width="0.3131%" height="15" fill="rgb(221,10,30)"/><text x="33.3936%" y="63.50"></text></g><g><title>eval_to_const_value_raw (23,773,069 samples, 0.67%)</title><rect x="32.9145%" y="117" width="0.6725%" height="15" fill="rgb(210,229,1)"/><text x="33.1645%" y="127.50"></text></g><g><title>eval_to_const_value_raw (23,618,076 samples, 0.67%)</title><rect x="32.9189%" y="101" width="0.6681%" height="15" fill="rgb(222,148,37)"/><text x="33.1689%" y="111.50"></text></g><g><title>eval_to_allocation_raw (23,309,230 samples, 0.66%)</title><rect x="32.9276%" y="85" width="0.6593%" height="15" fill="rgb(234,67,33)"/><text x="33.1776%" y="95.50"></text></g><g><title>typeck (4,577,774 samples, 0.13%)</title><rect x="33.4574%" y="69" width="0.1295%" height="15" fill="rgb(247,98,35)"/><text x="33.7074%" y="79.50"></text></g><g><title>named_region_map (7,903,337 samples, 0.22%)</title><rect x="33.7312%" y="101" width="0.2236%" height="15" fill="rgb(247,138,52)"/><text x="33.9812%" y="111.50"></text></g><g><title>resolve_lifetimes (7,638,962 samples, 0.22%)</title><rect x="33.7386%" y="85" width="0.2161%" height="15" fill="rgb(213,79,30)"/><text x="33.9886%" y="95.50"></text></g><g><title>lint_levels (3,616,118 samples, 0.10%)</title><rect x="33.8524%" y="69" width="0.1023%" height="15" fill="rgb(246,177,23)"/><text x="34.1024%" y="79.50"></text></g><g><title>generics_of (9,680,626 samples, 0.27%)</title><rect x="33.6866%" y="117" width="0.2738%" height="15" fill="rgb(230,62,27)"/><text x="33.9366%" y="127.50"></text></g><g><title>predicates_of (6,516,851 samples, 0.18%)</title><rect x="34.0230%" y="117" width="0.1843%" height="15" fill="rgb(216,154,8)"/><text x="34.2730%" y="127.50"></text></g><g><title>predicates_defined_on (5,661,478 samples, 0.16%)</title><rect x="34.0472%" y="101" width="0.1601%" height="15" fill="rgb(244,35,45)"/><text x="34.2972%" y="111.50"></text></g><g><title>type_collecting (51,349,897 samples, 1.45%)</title><rect x="32.7880%" y="149" width="1.4525%" height="15" fill="rgb(251,115,12)"/><text x="33.0380%" y="159.50"></text></g><g><title>collect_mod_item_types (51,311,047 samples, 1.45%)</title><rect x="32.7891%" y="133" width="1.4514%" height="15" fill="rgb(240,54,50)"/><text x="33.0391%" y="143.50"></text></g><g><title>evaluate_obligation (3,950,344 samples, 0.11%)</title><rect x="34.9411%" y="117" width="0.1117%" height="15" fill="rgb(233,84,52)"/><text x="35.1911%" y="127.50"></text></g><g><title>region_scope_tree (5,417,829 samples, 0.15%)</title><rect x="35.2441%" y="117" width="0.1533%" height="15" fill="rgb(207,117,47)"/><text x="35.4941%" y="127.50"></text></g><g><title>check_impl_item_well_formed (38,092,579 samples, 1.08%)</title><rect x="34.3237%" y="133" width="1.0775%" height="15" fill="rgb(249,43,39)"/><text x="34.5737%" y="143.50"></text></g><g><title>evaluate_obligation (5,242,416 samples, 0.15%)</title><rect x="35.7329%" y="117" width="0.1483%" height="15" fill="rgb(209,38,44)"/><text x="35.9829%" y="127.50"></text></g><g><title>check_item_well_formed (22,442,792 samples, 0.63%)</title><rect x="35.4012%" y="133" width="0.6348%" height="15" fill="rgb(236,212,23)"/><text x="35.6512%" y="143.50"></text></g><g><title>analysis (1,015,200,196 samples, 28.72%)</title><rect x="7.3811%" y="181" width="28.7164%" height="15" fill="rgb(242,79,21)"/><text x="7.6311%" y="191.50">analysis</text></g><g><title>type_check_crate (565,598,611 samples, 16.00%)</title><rect x="20.0988%" y="165" width="15.9988%" height="15" fill="rgb(211,96,35)"/><text x="20.3488%" y="175.50">type_check_crate</text></g><g><title>wf_checking (65,451,428 samples, 1.85%)</title><rect x="34.2462%" y="149" width="1.8514%" height="15" fill="rgb(253,215,40)"/><text x="34.4962%" y="159.50">w..</text></g><g><title>compute_debuginfo_type_name (4,078,347 samples, 0.12%)</title><rect x="42.0591%" y="149" width="0.1154%" height="15" fill="rgb(211,81,21)"/><text x="42.3091%" y="159.50"></text></g><g><title>param_env (4,509,777 samples, 0.13%)</title><rect x="42.5290%" y="133" width="0.1276%" height="15" fill="rgb(208,190,38)"/><text x="42.7790%" y="143.50"></text></g><g><title>fn_abi_of_instance (17,730,937 samples, 0.50%)</title><rect x="42.2004%" y="149" width="0.5015%" height="15" fill="rgb(235,213,38)"/><text x="42.4504%" y="159.50"></text></g><g><title>codegen_module (236,995,644 samples, 6.70%)</title><rect x="36.1886%" y="165" width="6.7038%" height="15" fill="rgb(237,122,38)"/><text x="36.4386%" y="175.50">codegen_m..</text></g><g><title>codegen_crate (240,336,542 samples, 6.80%)</title><rect x="36.0978%" y="181" width="6.7983%" height="15" fill="rgb(244,218,35)"/><text x="36.3478%" y="191.50">codegen_c..</text></g><g><title>LLVM_module_codegen (1,089,343,137 samples, 30.81%)</title><rect x="42.9028%" y="165" width="30.8137%" height="15" fill="rgb(240,68,47)"/><text x="43.1528%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,051,320,249 samples, 29.74%)</title><rect x="43.9783%" y="149" width="29.7381%" height="15" fill="rgb(210,16,53)"/><text x="44.2283%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,117,755,483 samples, 31.62%)</title><rect x="42.8961%" y="181" width="31.6173%" height="15" fill="rgb(235,124,12)"/><text x="43.1461%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,174,943 samples, 0.80%)</title><rect x="73.7164%" y="165" width="0.7970%" height="15" fill="rgb(224,169,11)"/><text x="73.9664%" y="175.50"></text></g><g><title>metadata_register_crate (8,355,330 samples, 0.24%)</title><rect x="91.1243%" y="133" width="0.2363%" height="15" fill="rgb(250,166,2)"/><text x="91.3743%" y="143.50"></text></g><g><title>macro_expand_crate (591,522,418 samples, 16.73%)</title><rect x="74.6379%" y="165" width="16.7321%" height="15" fill="rgb(242,216,29)"/><text x="74.8879%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (591,493,277 samples, 16.73%)</title><rect x="74.6387%" y="149" width="16.7313%" height="15" fill="rgb(230,116,27)"/><text x="74.8887%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (21,700,012 samples, 0.61%)</title><rect x="91.4293%" y="149" width="0.6138%" height="15" fill="rgb(228,99,48)"/><text x="91.6793%" y="159.50"></text></g><g><title>configure_and_expand (623,269,386 samples, 17.63%)</title><rect x="74.5134%" y="181" width="17.6301%" height="15" fill="rgb(253,11,6)"/><text x="74.7634%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (27,237,581 samples, 0.77%)</title><rect x="91.3730%" y="165" width="0.7705%" height="15" fill="rgb(247,143,39)"/><text x="91.6230%" y="175.50"></text></g><g><title>drop_ast (3,995,682 samples, 0.11%)</title><rect x="92.1435%" y="181" width="0.1130%" height="15" fill="rgb(236,97,10)"/><text x="92.3935%" y="191.50"></text></g><g><title>early_lint_checks (6,783,862 samples, 0.19%)</title><rect x="92.2575%" y="181" width="0.1919%" height="15" fill="rgb(233,208,19)"/><text x="92.5075%" y="191.50"></text></g><g><title>free_global_ctxt (15,366,964 samples, 0.43%)</title><rect x="92.4494%" y="181" width="0.4347%" height="15" fill="rgb(216,164,2)"/><text x="92.6994%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (34,771,342 samples, 0.98%)</title><rect x="94.7072%" y="85" width="0.9836%" height="15" fill="rgb(220,129,5)"/><text x="94.9572%" y="95.50"></text></g><g><title>optimized_mir (68,277,630 samples, 1.93%)</title><rect x="93.7856%" y="101" width="1.9313%" height="15" fill="rgb(242,17,10)"/><text x="94.0356%" y="111.50">o..</text></g><g><title>codegen_fulfill_obligation (4,622,678 samples, 0.13%)</title><rect x="95.7786%" y="85" width="0.1308%" height="15" fill="rgb(242,107,0)"/><text x="96.0286%" y="95.50"></text></g><g><title>resolve_instance (9,319,453 samples, 0.26%)</title><rect x="95.7170%" y="101" width="0.2636%" height="15" fill="rgb(251,28,31)"/><text x="95.9670%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (94,926,653 samples, 2.69%)</title><rect x="93.4716%" y="117" width="2.6851%" height="15" fill="rgb(233,223,10)"/><text x="93.7216%" y="127.50">mo..</text></g><g><title>monomorphization_collector (95,704,931 samples, 2.71%)</title><rect x="93.4714%" y="133" width="2.7072%" height="15" fill="rgb(215,21,27)"/><text x="93.7214%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (6,029,375 samples, 0.17%)</title><rect x="96.1789%" y="117" width="0.1705%" height="15" fill="rgb(232,23,21)"/><text x="96.4289%" y="127.50"></text></g><g><title>symbol_name (5,128,123 samples, 0.15%)</title><rect x="96.2044%" y="101" width="0.1451%" height="15" fill="rgb(244,5,23)"/><text x="96.4544%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (104,711,587 samples, 2.96%)</title><rect x="93.4689%" y="149" width="2.9619%" height="15" fill="rgb(226,81,46)"/><text x="93.7189%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (8,919,095 samples, 0.25%)</title><rect x="96.1786%" y="133" width="0.2523%" height="15" fill="rgb(247,70,30)"/><text x="96.4286%" y="143.50"></text></g><g><title>exported_symbols (106,862,669 samples, 3.02%)</title><rect x="93.4597%" y="165" width="3.0228%" height="15" fill="rgb(212,68,19)"/><text x="93.7097%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (17,690,539 samples, 0.50%)</title><rect x="97.0996%" y="149" width="0.5004%" height="15" fill="rgb(240,187,13)"/><text x="97.3496%" y="159.50"></text></g><g><title>optimized_mir (39,572,944 samples, 1.12%)</title><rect x="96.5195%" y="165" width="1.1194%" height="15" fill="rgb(223,113,26)"/><text x="96.7695%" y="175.50"></text></g><g><title>generate_crate_metadata (169,042,392 samples, 4.78%)</title><rect x="92.8840%" y="181" width="4.7816%" height="15" fill="rgb(206,192,2)"/><text x="93.1340%" y="191.50">genera..</text></g><g><title>hir_lowering (46,557,537 samples, 1.32%)</title><rect x="97.6657%" y="181" width="1.3169%" height="15" fill="rgb(241,108,4)"/><text x="97.9157%" y="191.50"></text></g><g><title>finish_ongoing_codegen (18,362,486 samples, 0.52%)</title><rect x="98.9832%" y="165" width="0.5194%" height="15" fill="rgb(247,173,49)"/><text x="99.2332%" y="175.50"></text></g><g><title>link_crate (8,088,235 samples, 0.23%)</title><rect x="99.5026%" y="165" width="0.2288%" height="15" fill="rgb(224,114,35)"/><text x="99.7526%" y="175.50"></text></g><g><title>link_binary (7,935,964 samples, 0.22%)</title><rect x="99.5069%" y="149" width="0.2245%" height="15" fill="rgb(245,159,27)"/><text x="99.7569%" y="159.50"></text></g><g><title>link_rlib (6,490,579 samples, 0.18%)</title><rect x="99.5478%" y="133" width="0.1836%" height="15" fill="rgb(245,172,44)"/><text x="99.7978%" y="143.50"></text></g><g><title>link (26,488,763 samples, 0.75%)</title><rect x="98.9826%" y="181" width="0.7493%" height="15" fill="rgb(236,23,11)"/><text x="99.2326%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (6,893,744 samples, 0.19%)</title><rect x="99.7645%" y="181" width="0.1950%" height="15" fill="rgb(205,117,38)"/><text x="100.0145%" y="191.50"></text></g><g><title>all (3,535,260,012 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (3,535,260,012 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>