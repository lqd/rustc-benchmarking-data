<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,666,387 samples, 13.76%)</title><rect x="0.3952%" y="197" width="13.7637%" height="15" fill="rgb(227,0,7)"/><text x="0.6452%" y="207.50">LLVM_passes</text></g><g><title>mir_const (1,109,040 samples, 0.67%)</title><rect x="15.1055%" y="133" width="0.6734%" height="15" fill="rgb(217,0,24)"/><text x="15.3555%" y="143.50"></text></g><g><title>unsafety_check_result (971,329 samples, 0.59%)</title><rect x="15.1891%" y="117" width="0.5898%" height="15" fill="rgb(221,193,54)"/><text x="15.4391%" y="127.50"></text></g><g><title>mir_built (764,996 samples, 0.46%)</title><rect x="15.3144%" y="101" width="0.4645%" height="15" fill="rgb(248,212,6)"/><text x="15.5644%" y="111.50"></text></g><g><title>needs_drop_raw (261,233 samples, 0.16%)</title><rect x="15.9389%" y="69" width="0.1586%" height="15" fill="rgb(208,68,35)"/><text x="16.1889%" y="79.50"></text></g><g><title>is_copy_raw (203,513 samples, 0.12%)</title><rect x="15.9740%" y="53" width="0.1236%" height="15" fill="rgb(232,128,0)"/><text x="16.2240%" y="63.50"></text></g><g><title>evaluate_obligation (196,053 samples, 0.12%)</title><rect x="15.9785%" y="37" width="0.1190%" height="15" fill="rgb(207,160,47)"/><text x="16.2285%" y="47.50"></text></g><g><title>mir_const (392,244 samples, 0.24%)</title><rect x="15.8733%" y="117" width="0.2382%" height="15" fill="rgb(228,23,34)"/><text x="16.1233%" y="127.50"></text></g><g><title>unsafety_check_result (341,413 samples, 0.21%)</title><rect x="15.9042%" y="101" width="0.2073%" height="15" fill="rgb(218,30,26)"/><text x="16.1542%" y="111.50"></text></g><g><title>mir_built (324,973 samples, 0.20%)</title><rect x="15.9142%" y="85" width="0.1973%" height="15" fill="rgb(220,122,19)"/><text x="16.1642%" y="95.50"></text></g><g><title>mir_const_qualif (561,455 samples, 0.34%)</title><rect x="15.7789%" y="133" width="0.3409%" height="15" fill="rgb(250,228,42)"/><text x="16.0289%" y="143.50"></text></g><g><title>mir_promoted (1,786,267 samples, 1.08%)</title><rect x="15.0353%" y="149" width="1.0847%" height="15" fill="rgb(240,193,28)"/><text x="15.2853%" y="159.50"></text></g><g><title>type_op_prove_predicate (192,735 samples, 0.12%)</title><rect x="16.1556%" y="149" width="0.1170%" height="15" fill="rgb(216,20,37)"/><text x="16.4056%" y="159.50"></text></g><g><title>MIR_borrow_checking (3,309,143 samples, 2.01%)</title><rect x="14.2642%" y="181" width="2.0094%" height="15" fill="rgb(206,188,39)"/><text x="14.5142%" y="191.50">M..</text></g><g><title>mir_borrowck (3,297,593 samples, 2.00%)</title><rect x="14.2713%" y="165" width="2.0024%" height="15" fill="rgb(217,207,13)"/><text x="14.5213%" y="175.50">m..</text></g><g><title>codegen_fn_attrs (301,333 samples, 0.18%)</title><rect x="16.4989%" y="149" width="0.1830%" height="15" fill="rgb(231,73,38)"/><text x="16.7489%" y="159.50"></text></g><g><title>check_mod_attrs (405,784 samples, 0.25%)</title><rect x="16.4357%" y="165" width="0.2464%" height="15" fill="rgb(225,20,46)"/><text x="16.6857%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (310,903 samples, 0.19%)</title><rect x="16.7387%" y="165" width="0.1888%" height="15" fill="rgb(210,31,41)"/><text x="16.9887%" y="175.50"></text></g><g><title>misc_checking_1 (884,998 samples, 0.54%)</title><rect x="16.4208%" y="181" width="0.5374%" height="15" fill="rgb(221,200,47)"/><text x="16.6708%" y="191.50"></text></g><g><title>mir_borrowck (281,902 samples, 0.17%)</title><rect x="17.2221%" y="53" width="0.1712%" height="15" fill="rgb(226,26,5)"/><text x="17.4721%" y="63.50"></text></g><g><title>eval_to_const_value_raw (490,955 samples, 0.30%)</title><rect x="17.0957%" y="133" width="0.2981%" height="15" fill="rgb(249,33,26)"/><text x="17.3457%" y="143.50"></text></g><g><title>eval_to_const_value_raw (485,865 samples, 0.30%)</title><rect x="17.0988%" y="117" width="0.2950%" height="15" fill="rgb(235,183,28)"/><text x="17.3488%" y="127.50"></text></g><g><title>eval_to_allocation_raw (479,625 samples, 0.29%)</title><rect x="17.1026%" y="101" width="0.2912%" height="15" fill="rgb(221,5,38)"/><text x="17.3526%" y="111.50"></text></g><g><title>mir_for_ctfe (396,354 samples, 0.24%)</title><rect x="17.1531%" y="85" width="0.2407%" height="15" fill="rgb(247,18,42)"/><text x="17.4031%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (363,594 samples, 0.22%)</title><rect x="17.1730%" y="69" width="0.2208%" height="15" fill="rgb(241,131,45)"/><text x="17.4230%" y="79.50"></text></g><g><title>misc_checking_2 (878,149 samples, 0.53%)</title><rect x="16.9582%" y="181" width="0.5332%" height="15" fill="rgb(249,31,29)"/><text x="17.2082%" y="191.50"></text></g><g><title>match_checking (789,838 samples, 0.48%)</title><rect x="17.0118%" y="165" width="0.4796%" height="15" fill="rgb(225,111,53)"/><text x="17.2618%" y="175.50"></text></g><g><title>check_match (783,428 samples, 0.48%)</title><rect x="17.0157%" y="149" width="0.4757%" height="15" fill="rgb(238,160,17)"/><text x="17.2657%" y="159.50"></text></g><g><title>death_checking (339,724 samples, 0.21%)</title><rect x="17.5208%" y="165" width="0.2063%" height="15" fill="rgb(214,148,48)"/><text x="17.7708%" y="175.50"></text></g><g><title>impl_parent (508,652 samples, 0.31%)</title><rect x="18.5976%" y="101" width="0.3089%" height="15" fill="rgb(232,36,49)"/><text x="18.8476%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (306,911 samples, 0.19%)</title><rect x="18.7201%" y="85" width="0.1864%" height="15" fill="rgb(209,103,24)"/><text x="18.9701%" y="95.50"></text></g><g><title>specialization_graph_of (2,262,573 samples, 1.37%)</title><rect x="18.1203%" y="117" width="1.3739%" height="15" fill="rgb(229,88,8)"/><text x="18.3703%" y="127.50"></text></g><g><title>impl_trait_ref (967,908 samples, 0.59%)</title><rect x="18.9064%" y="101" width="0.5877%" height="15" fill="rgb(213,181,19)"/><text x="19.1564%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (769,287 samples, 0.47%)</title><rect x="19.0270%" y="85" width="0.4671%" height="15" fill="rgb(254,191,54)"/><text x="19.2770%" y="95.50"></text></g><g><title>resolve_instance (2,306,423 samples, 1.40%)</title><rect x="18.0948%" y="133" width="1.4005%" height="15" fill="rgb(241,83,37)"/><text x="18.3448%" y="143.50"></text></g><g><title>crate_lints (3,940,379 samples, 2.39%)</title><rect x="17.7280%" y="149" width="2.3927%" height="15" fill="rgb(233,36,39)"/><text x="17.9780%" y="159.50">cr..</text></g><g><title>type_of (1,024,512 samples, 0.62%)</title><rect x="19.4986%" y="133" width="0.6221%" height="15" fill="rgb(226,3,54)"/><text x="19.7486%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (782,499 samples, 0.48%)</title><rect x="19.6455%" y="117" width="0.4752%" height="15" fill="rgb(245,192,40)"/><text x="19.8955%" y="127.50"></text></g><g><title>lint_checking (4,014,790 samples, 2.44%)</title><rect x="17.7271%" y="165" width="2.4379%" height="15" fill="rgb(238,167,29)"/><text x="17.9771%" y="175.50">li..</text></g><g><title>misc_checking_3 (4,580,525 samples, 2.78%)</title><rect x="17.4914%" y="181" width="2.7814%" height="15" fill="rgb(232,182,51)"/><text x="17.7414%" y="191.50">mi..</text></g><g><title>impl_parent (1,189,919 samples, 0.72%)</title><rect x="21.3784%" y="117" width="0.7226%" height="15" fill="rgb(231,60,39)"/><text x="21.6284%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (759,633 samples, 0.46%)</title><rect x="21.6397%" y="101" width="0.4613%" height="15" fill="rgb(208,69,12)"/><text x="21.8897%" y="111.50"></text></g><g><title>impl_trait_ref (3,948,197 samples, 2.40%)</title><rect x="22.1010%" y="117" width="2.3975%" height="15" fill="rgb(235,93,37)"/><text x="22.3510%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,516,789 samples, 2.14%)</title><rect x="22.3629%" y="101" width="2.1355%" height="15" fill="rgb(213,116,39)"/><text x="22.6129%" y="111.50">m..</text></g><g><title>coherent_trait (7,471,935 samples, 4.54%)</title><rect x="20.3037%" y="149" width="4.5372%" height="15" fill="rgb(222,207,29)"/><text x="20.5537%" y="159.50">coher..</text></g><g><title>specialization_graph_of (7,455,715 samples, 4.53%)</title><rect x="20.3135%" y="133" width="4.5273%" height="15" fill="rgb(206,96,30)"/><text x="20.5635%" y="143.50">speci..</text></g><g><title>trait_impls_of (562,605 samples, 0.34%)</title><rect x="24.4992%" y="117" width="0.3416%" height="15" fill="rgb(218,138,4)"/><text x="24.7492%" y="127.50"></text></g><g><title>coherence_checking (7,544,865 samples, 4.58%)</title><rect x="20.2929%" y="165" width="4.5815%" height="15" fill="rgb(250,191,14)"/><text x="20.5429%" y="175.50">coher..</text></g><g><title>associated_item (165,072 samples, 0.10%)</title><rect x="26.4505%" y="101" width="0.1002%" height="15" fill="rgb(239,60,40)"/><text x="26.7005%" y="111.50"></text></g><g><title>associated_items (243,673 samples, 0.15%)</title><rect x="26.4088%" y="117" width="0.1480%" height="15" fill="rgb(206,27,48)"/><text x="26.6588%" y="127.50"></text></g><g><title>trait_impls_of (433,545 samples, 0.26%)</title><rect x="26.8541%" y="101" width="0.2633%" height="15" fill="rgb(225,35,8)"/><text x="27.1041%" y="111.50"></text></g><g><title>evaluate_obligation (776,067 samples, 0.47%)</title><rect x="26.6485%" y="117" width="0.4713%" height="15" fill="rgb(250,213,24)"/><text x="26.8985%" y="127.50"></text></g><g><title>item_bodies_checking (4,235,462 samples, 2.57%)</title><rect x="24.8879%" y="165" width="2.5719%" height="15" fill="rgb(247,123,22)"/><text x="25.1379%" y="175.50">it..</text></g><g><title>typeck_item_bodies (4,233,932 samples, 2.57%)</title><rect x="24.8888%" y="149" width="2.5710%" height="15" fill="rgb(231,138,38)"/><text x="25.1388%" y="159.50">ty..</text></g><g><title>typeck (4,225,552 samples, 2.57%)</title><rect x="24.8939%" y="133" width="2.5659%" height="15" fill="rgb(231,145,46)"/><text x="25.1439%" y="143.50">ty..</text></g><g><title>adt_destructor (297,803 samples, 0.18%)</title><rect x="27.5114%" y="133" width="0.1808%" height="15" fill="rgb(251,118,11)"/><text x="27.7614%" y="143.50"></text></g><g><title>coherent_trait (295,633 samples, 0.18%)</title><rect x="27.5127%" y="117" width="0.1795%" height="15" fill="rgb(217,147,25)"/><text x="27.7627%" y="127.50"></text></g><g><title>specialization_graph_of (294,213 samples, 0.18%)</title><rect x="27.5135%" y="101" width="0.1787%" height="15" fill="rgb(247,81,37)"/><text x="27.7635%" y="111.50"></text></g><g><title>item_types_checking (500,325 samples, 0.30%)</title><rect x="27.4598%" y="165" width="0.3038%" height="15" fill="rgb(209,12,38)"/><text x="27.7098%" y="175.50"></text></g><g><title>check_mod_item_types (498,535 samples, 0.30%)</title><rect x="27.4609%" y="149" width="0.3027%" height="15" fill="rgb(227,1,9)"/><text x="27.7109%" y="159.50"></text></g><g><title>fn_sig (165,721 samples, 0.10%)</title><rect x="27.8495%" y="133" width="0.1006%" height="15" fill="rgb(248,47,43)"/><text x="28.0995%" y="143.50"></text></g><g><title>predicates_of (362,344 samples, 0.22%)</title><rect x="28.0116%" y="133" width="0.2200%" height="15" fill="rgb(221,10,30)"/><text x="28.2616%" y="143.50"></text></g><g><title>predicates_defined_on (343,824 samples, 0.21%)</title><rect x="28.0229%" y="117" width="0.2088%" height="15" fill="rgb(210,229,1)"/><text x="28.2729%" y="127.50"></text></g><g><title>inferred_outlives_of (241,433 samples, 0.15%)</title><rect x="28.0850%" y="101" width="0.1466%" height="15" fill="rgb(222,148,37)"/><text x="28.3350%" y="111.50"></text></g><g><title>inferred_outlives_crate (224,652 samples, 0.14%)</title><rect x="28.0952%" y="85" width="0.1364%" height="15" fill="rgb(234,67,33)"/><text x="28.3452%" y="95.50"></text></g><g><title>type_collecting (967,539 samples, 0.59%)</title><rect x="27.7643%" y="165" width="0.5875%" height="15" fill="rgb(247,98,35)"/><text x="28.0143%" y="175.50"></text></g><g><title>collect_mod_item_types (952,729 samples, 0.58%)</title><rect x="27.7733%" y="149" width="0.5785%" height="15" fill="rgb(247,138,52)"/><text x="28.0233%" y="159.50"></text></g><g><title>check_impl_item_well_formed (397,615 samples, 0.24%)</title><rect x="28.3703%" y="149" width="0.2414%" height="15" fill="rgb(213,79,30)"/><text x="28.6203%" y="159.50"></text></g><g><title>evaluate_obligation (208,942 samples, 0.13%)</title><rect x="28.7573%" y="133" width="0.1269%" height="15" fill="rgb(246,177,23)"/><text x="29.0073%" y="143.50"></text></g><g><title>analysis (24,439,944 samples, 14.84%)</title><rect x="14.1589%" y="197" width="14.8407%" height="15" fill="rgb(230,62,27)"/><text x="14.4089%" y="207.50">analysis</text></g><g><title>type_check_crate (14,371,303 samples, 8.73%)</title><rect x="20.2729%" y="181" width="8.7267%" height="15" fill="rgb(216,154,8)"/><text x="20.5229%" y="191.50">type_check_c..</text></g><g><title>wf_checking (1,065,881 samples, 0.65%)</title><rect x="28.3523%" y="165" width="0.6472%" height="15" fill="rgb(244,35,45)"/><text x="28.6023%" y="175.50"></text></g><g><title>check_item_well_formed (638,696 samples, 0.39%)</title><rect x="28.6117%" y="149" width="0.3878%" height="15" fill="rgb(251,115,12)"/><text x="28.8617%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (224,775 samples, 0.14%)</title><rect x="37.5888%" y="165" width="0.1365%" height="15" fill="rgb(240,54,50)"/><text x="37.8388%" y="175.50"></text></g><g><title>const_caller_location (204,902 samples, 0.12%)</title><rect x="37.7253%" y="165" width="0.1244%" height="15" fill="rgb(233,84,52)"/><text x="37.9753%" y="175.50"></text></g><g><title>codegen_fn_attrs (256,782 samples, 0.16%)</title><rect x="38.2317%" y="149" width="0.1559%" height="15" fill="rgb(207,117,47)"/><text x="38.4817%" y="159.50"></text></g><g><title>adt_def (189,902 samples, 0.12%)</title><rect x="38.4826%" y="117" width="0.1153%" height="15" fill="rgb(249,43,39)"/><text x="38.7326%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (187,972 samples, 0.11%)</title><rect x="38.4837%" y="101" width="0.1141%" height="15" fill="rgb(209,38,44)"/><text x="38.7337%" y="111.50"></text></g><g><title>adt_sized_constraint (218,073 samples, 0.13%)</title><rect x="38.4769%" y="133" width="0.1324%" height="15" fill="rgb(236,212,23)"/><text x="38.7269%" y="143.50"></text></g><g><title>eval_to_const_value_raw (179,973 samples, 0.11%)</title><rect x="38.6145%" y="133" width="0.1093%" height="15" fill="rgb(242,79,21)"/><text x="38.8645%" y="143.50"></text></g><g><title>param_env (178,870 samples, 0.11%)</title><rect x="38.8456%" y="133" width="0.1086%" height="15" fill="rgb(211,96,35)"/><text x="39.0956%" y="143.50"></text></g><g><title>layout_of (926,451 samples, 0.56%)</title><rect x="38.4018%" y="149" width="0.5626%" height="15" fill="rgb(253,215,40)"/><text x="38.6518%" y="159.50"></text></g><g><title>predicates_of (325,696 samples, 0.20%)</title><rect x="39.4934%" y="133" width="0.1978%" height="15" fill="rgb(211,81,21)"/><text x="39.7434%" y="143.50"></text></g><g><title>predicates_defined_on (228,955 samples, 0.14%)</title><rect x="39.5522%" y="117" width="0.1390%" height="15" fill="rgb(208,190,38)"/><text x="39.8022%" y="127.50"></text></g><g><title>param_env (1,199,074 samples, 0.73%)</title><rect x="38.9644%" y="149" width="0.7281%" height="15" fill="rgb(235,213,38)"/><text x="39.2144%" y="159.50"></text></g><g><title>fn_abi_of_instance (3,034,985 samples, 1.84%)</title><rect x="37.8571%" y="165" width="1.8429%" height="15" fill="rgb(237,122,38)"/><text x="38.1071%" y="175.50">f..</text></g><g><title>layout_of (321,684 samples, 0.20%)</title><rect x="39.7504%" y="165" width="0.1953%" height="15" fill="rgb(244,218,35)"/><text x="40.0004%" y="175.50"></text></g><g><title>symbol_name (182,291 samples, 0.11%)</title><rect x="39.9585%" y="165" width="0.1107%" height="15" fill="rgb(240,68,47)"/><text x="40.2085%" y="175.50"></text></g><g><title>codegen_module (16,162,393 samples, 9.81%)</title><rect x="30.2609%" y="181" width="9.8143%" height="15" fill="rgb(210,16,53)"/><text x="30.5109%" y="191.50">codegen_module</text></g><g><title>codegen_crate (18,297,053 samples, 11.11%)</title><rect x="29.0064%" y="197" width="11.1105%" height="15" fill="rgb(235,124,12)"/><text x="29.2564%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (60,418,045 samples, 36.69%)</title><rect x="40.1791%" y="181" width="36.6877%" height="15" fill="rgb(224,169,11)"/><text x="40.4291%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (57,759,607 samples, 35.07%)</title><rect x="41.7933%" y="165" width="35.0734%" height="15" fill="rgb(250,166,2)"/><text x="42.0433%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (63,981,813 samples, 38.85%)</title><rect x="40.1169%" y="197" width="38.8517%" height="15" fill="rgb(242,216,29)"/><text x="40.3669%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,461,405 samples, 2.10%)</title><rect x="76.8668%" y="181" width="2.1019%" height="15" fill="rgb(230,116,27)"/><text x="77.1168%" y="191.50">L..</text></g><g><title>metadata_load_macro (299,973 samples, 0.18%)</title><rect x="86.2000%" y="149" width="0.1822%" height="15" fill="rgb(228,99,48)"/><text x="86.4500%" y="159.50"></text></g><g><title>macro_expand_crate (14,514,036 samples, 8.81%)</title><rect x="79.1850%" y="181" width="8.8134%" height="15" fill="rgb(253,11,6)"/><text x="79.4350%" y="191.50">macro_expand..</text></g><g><title>expand_crate (14,499,996 samples, 8.80%)</title><rect x="79.1936%" y="165" width="8.8048%" height="15" fill="rgb(247,143,39)"/><text x="79.4436%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,661,676 samples, 1.62%)</title><rect x="86.3821%" y="149" width="1.6163%" height="15" fill="rgb(236,97,10)"/><text x="86.6321%" y="159.50"></text></g><g><title>metadata_register_crate (942,140 samples, 0.57%)</title><rect x="87.4263%" y="133" width="0.5721%" height="15" fill="rgb(233,208,19)"/><text x="87.6763%" y="143.50"></text></g><g><title>finalize_imports (281,313 samples, 0.17%)</title><rect x="88.0648%" y="165" width="0.1708%" height="15" fill="rgb(216,164,2)"/><text x="88.3148%" y="175.50"></text></g><g><title>late_resolve_crate (1,115,742 samples, 0.68%)</title><rect x="88.2488%" y="165" width="0.6775%" height="15" fill="rgb(220,129,5)"/><text x="88.4988%" y="175.50"></text></g><g><title>configure_and_expand (16,457,455 samples, 9.99%)</title><rect x="78.9686%" y="197" width="9.9935%" height="15" fill="rgb(242,17,10)"/><text x="79.2186%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (1,487,035 samples, 0.90%)</title><rect x="88.0591%" y="181" width="0.9030%" height="15" fill="rgb(242,107,0)"/><text x="88.3091%" y="191.50"></text></g><g><title>early_lint_checks (187,242 samples, 0.11%)</title><rect x="89.0090%" y="197" width="0.1137%" height="15" fill="rgb(251,28,31)"/><text x="89.2590%" y="207.50"></text></g><g><title>free_global_ctxt (4,637,076 samples, 2.82%)</title><rect x="89.1227%" y="197" width="2.8158%" height="15" fill="rgb(233,223,10)"/><text x="89.3727%" y="207.50">fr..</text></g><g><title>item_attrs (195,553 samples, 0.12%)</title><rect x="92.3877%" y="101" width="0.1187%" height="15" fill="rgb(215,21,27)"/><text x="92.6377%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (190,893 samples, 0.12%)</title><rect x="92.3905%" y="85" width="0.1159%" height="15" fill="rgb(232,23,21)"/><text x="92.6405%" y="95.50"></text></g><g><title>codegen_fn_attrs (252,634 samples, 0.15%)</title><rect x="92.3656%" y="117" width="0.1534%" height="15" fill="rgb(244,5,23)"/><text x="92.6156%" y="127.50"></text></g><g><title>layout_of (291,012 samples, 0.18%)</title><rect x="93.0015%" y="101" width="0.1767%" height="15" fill="rgb(226,81,46)"/><text x="93.2515%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (345,813 samples, 0.21%)</title><rect x="93.1782%" y="101" width="0.2100%" height="15" fill="rgb(247,70,30)"/><text x="93.4282%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (486,976 samples, 0.30%)</title><rect x="93.3882%" y="101" width="0.2957%" height="15" fill="rgb(212,68,19)"/><text x="93.6382%" y="111.50"></text></g><g><title>optimized_mir (1,862,360 samples, 1.13%)</title><rect x="92.6509%" y="117" width="1.1309%" height="15" fill="rgb(240,187,13)"/><text x="92.9009%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (189,992 samples, 0.12%)</title><rect x="93.8558%" y="101" width="0.1154%" height="15" fill="rgb(223,113,26)"/><text x="94.1058%" y="111.50"></text></g><g><title>specialization_graph_of (413,434 samples, 0.25%)</title><rect x="94.0174%" y="101" width="0.2510%" height="15" fill="rgb(206,192,2)"/><text x="94.2674%" y="111.50"></text></g><g><title>resolve_instance (874,317 samples, 0.53%)</title><rect x="93.7818%" y="117" width="0.5309%" height="15" fill="rgb(241,108,4)"/><text x="94.0318%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (187,932 samples, 0.11%)</title><rect x="94.3127%" y="117" width="0.1141%" height="15" fill="rgb(247,173,49)"/><text x="94.5627%" y="127.50"></text></g><g><title>eval_to_const_value_raw (164,891 samples, 0.10%)</title><rect x="94.3267%" y="101" width="0.1001%" height="15" fill="rgb(224,114,35)"/><text x="94.5767%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (4,098,301 samples, 2.49%)</title><rect x="92.1711%" y="133" width="2.4886%" height="15" fill="rgb(245,159,27)"/><text x="92.4211%" y="143.50">mo..</text></g><g><title>vtable_entries (229,152 samples, 0.14%)</title><rect x="94.5206%" y="117" width="0.1391%" height="15" fill="rgb(245,172,44)"/><text x="94.7706%" y="127.50"></text></g><g><title>monomorphization_collector (4,119,332 samples, 2.50%)</title><rect x="92.1699%" y="149" width="2.5014%" height="15" fill="rgb(236,23,11)"/><text x="92.4199%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (294,462 samples, 0.18%)</title><rect x="94.6731%" y="133" width="0.1788%" height="15" fill="rgb(205,117,38)"/><text x="94.9231%" y="143.50"></text></g><g><title>symbol_name (268,202 samples, 0.16%)</title><rect x="94.6890%" y="117" width="0.1629%" height="15" fill="rgb(237,72,25)"/><text x="94.9390%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (4,625,977 samples, 2.81%)</title><rect x="92.1507%" y="165" width="2.8090%" height="15" fill="rgb(244,70,9)"/><text x="92.4007%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (475,054 samples, 0.29%)</title><rect x="94.6713%" y="149" width="0.2885%" height="15" fill="rgb(217,125,39)"/><text x="94.9213%" y="159.50"></text></g><g><title>cgu_partitioning (177,562 samples, 0.11%)</title><rect x="94.8519%" y="133" width="0.1078%" height="15" fill="rgb(235,36,10)"/><text x="95.1019%" y="143.50"></text></g><g><title>exported_symbols (4,668,247 samples, 2.83%)</title><rect x="92.1373%" y="181" width="2.8347%" height="15" fill="rgb(251,123,47)"/><text x="92.3873%" y="191.50">ex..</text></g><g><title>generate_crate_metadata (5,024,741 samples, 3.05%)</title><rect x="91.9385%" y="197" width="3.0512%" height="15" fill="rgb(221,13,13)"/><text x="92.1885%" y="207.50">gen..</text></g><g><title>hir_lowering (1,091,431 samples, 0.66%)</title><rect x="94.9897%" y="197" width="0.6628%" height="15" fill="rgb(238,131,9)"/><text x="95.2397%" y="207.50"></text></g><g><title>finish_ongoing_codegen (2,478,945 samples, 1.51%)</title><rect x="95.6605%" y="181" width="1.5053%" height="15" fill="rgb(211,50,8)"/><text x="95.9105%" y="191.50"></text></g><g><title>link_crate (1,161,572 samples, 0.71%)</title><rect x="97.1658%" y="181" width="0.7053%" height="15" fill="rgb(245,182,24)"/><text x="97.4158%" y="191.50"></text></g><g><title>link_binary (1,147,712 samples, 0.70%)</title><rect x="97.1742%" y="165" width="0.6969%" height="15" fill="rgb(242,14,37)"/><text x="97.4242%" y="175.50"></text></g><g><title>link_rlib (729,587 samples, 0.44%)</title><rect x="97.4281%" y="149" width="0.4430%" height="15" fill="rgb(246,228,12)"/><text x="97.6781%" y="159.50"></text></g><g><title>link (3,660,587 samples, 2.22%)</title><rect x="95.6524%" y="197" width="2.2228%" height="15" fill="rgb(213,55,15)"/><text x="95.9024%" y="207.50">l..</text></g><g><title>parse_crate (1,498,065 samples, 0.91%)</title><rect x="97.8752%" y="197" width="0.9097%" height="15" fill="rgb(209,9,3)"/><text x="98.1252%" y="207.50"></text></g><g><title>prepare_outputs (414,214 samples, 0.25%)</title><rect x="98.7901%" y="197" width="0.2515%" height="15" fill="rgb(230,59,30)"/><text x="99.0401%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,151,702 samples, 0.70%)</title><rect x="99.0416%" y="197" width="0.6993%" height="15" fill="rgb(209,121,21)"/><text x="99.2916%" y="207.50"></text></g><g><title>all (164,682,031 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (164,682,031 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (286,353 samples, 0.17%)</title><rect x="99.8261%" y="197" width="0.1739%" height="15" fill="rgb(215,41,42)"/><text x="100.0761%" y="207.50"></text></g></svg></svg>