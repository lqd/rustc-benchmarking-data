<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (112,028,327 samples, 14.50%)</title><rect x="0.1139%" y="165" width="14.5040%" height="15" fill="rgb(227,0,7)"/><text x="0.3639%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,315,149 samples, 0.17%)</title><rect x="16.9781%" y="53" width="0.1703%" height="15" fill="rgb(217,0,24)"/><text x="17.2281%" y="63.50"></text></g><g><title>specialization_graph_of (1,027,561 samples, 0.13%)</title><rect x="17.2377%" y="37" width="0.1330%" height="15" fill="rgb(221,193,54)"/><text x="17.4877%" y="47.50"></text></g><g><title>resolve_instance (1,785,571 samples, 0.23%)</title><rect x="17.1516%" y="53" width="0.2312%" height="15" fill="rgb(248,212,6)"/><text x="17.4016%" y="63.50"></text></g><g><title>thir_body (899,920 samples, 0.12%)</title><rect x="17.3860%" y="53" width="0.1165%" height="15" fill="rgb(208,68,35)"/><text x="17.6360%" y="63.50"></text></g><g><title>mir_const (8,906,005 samples, 1.15%)</title><rect x="16.3521%" y="101" width="1.1530%" height="15" fill="rgb(232,128,0)"/><text x="16.6021%" y="111.50"></text></g><g><title>unsafety_check_result (7,820,660 samples, 1.01%)</title><rect x="16.4926%" y="85" width="1.0125%" height="15" fill="rgb(207,160,47)"/><text x="16.7426%" y="95.50"></text></g><g><title>mir_built (6,869,463 samples, 0.89%)</title><rect x="16.6158%" y="69" width="0.8894%" height="15" fill="rgb(228,23,34)"/><text x="16.8658%" y="79.50"></text></g><g><title>mir_promoted (9,763,260 samples, 1.26%)</title><rect x="16.2463%" y="117" width="1.2640%" height="15" fill="rgb(218,30,26)"/><text x="16.4963%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,967,053 samples, 0.38%)</title><rect x="17.7320%" y="117" width="0.3841%" height="15" fill="rgb(220,122,19)"/><text x="17.9820%" y="127.50"></text></g><g><title>MIR_borrow_checking (26,470,163 samples, 3.43%)</title><rect x="14.6925%" y="149" width="3.4270%" height="15" fill="rgb(250,228,42)"/><text x="14.9425%" y="159.50">MIR..</text></g><g><title>mir_borrowck (26,370,223 samples, 3.41%)</title><rect x="14.7054%" y="133" width="3.4141%" height="15" fill="rgb(240,193,28)"/><text x="14.9554%" y="143.50">mir..</text></g><g><title>check_mod_attrs (1,139,634 samples, 0.15%)</title><rect x="18.1714%" y="133" width="0.1475%" height="15" fill="rgb(216,20,37)"/><text x="18.4214%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (898,418 samples, 0.12%)</title><rect x="18.3716%" y="133" width="0.1163%" height="15" fill="rgb(206,188,39)"/><text x="18.6216%" y="143.50"></text></g><g><title>misc_checking_1 (2,590,698 samples, 0.34%)</title><rect x="18.1649%" y="149" width="0.3354%" height="15" fill="rgb(217,207,13)"/><text x="18.4149%" y="159.50"></text></g><g><title>misc_checking_2 (1,066,282 samples, 0.14%)</title><rect x="18.5003%" y="149" width="0.1380%" height="15" fill="rgb(231,73,38)"/><text x="18.7503%" y="159.50"></text></g><g><title>crate_lints (1,970,761 samples, 0.26%)</title><rect x="18.7186%" y="117" width="0.2551%" height="15" fill="rgb(225,20,46)"/><text x="18.9686%" y="127.50"></text></g><g><title>type_of (1,104,722 samples, 0.14%)</title><rect x="18.8307%" y="101" width="0.1430%" height="15" fill="rgb(210,31,41)"/><text x="19.0807%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (872,461 samples, 0.11%)</title><rect x="18.8608%" y="85" width="0.1130%" height="15" fill="rgb(221,200,47)"/><text x="19.1108%" y="95.50"></text></g><g><title>lint_checking (2,379,745 samples, 0.31%)</title><rect x="18.7184%" y="133" width="0.3081%" height="15" fill="rgb(226,26,5)"/><text x="18.9684%" y="143.50"></text></g><g><title>misc_checking_3 (3,913,231 samples, 0.51%)</title><rect x="18.6384%" y="149" width="0.5066%" height="15" fill="rgb(249,33,26)"/><text x="18.8884%" y="159.50"></text></g><g><title>impl_parent (2,921,544 samples, 0.38%)</title><rect x="19.8360%" y="85" width="0.3782%" height="15" fill="rgb(235,183,28)"/><text x="20.0860%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,586,194 samples, 0.21%)</title><rect x="20.0089%" y="69" width="0.2054%" height="15" fill="rgb(221,5,38)"/><text x="20.2589%" y="79.50"></text></g><g><title>impl_trait_ref (5,493,089 samples, 0.71%)</title><rect x="20.2143%" y="85" width="0.7112%" height="15" fill="rgb(247,18,42)"/><text x="20.4643%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,410,618 samples, 0.57%)</title><rect x="20.3544%" y="69" width="0.5710%" height="15" fill="rgb(241,131,45)"/><text x="20.6044%" y="79.50"></text></g><g><title>coherent_trait (14,734,748 samples, 1.91%)</title><rect x="19.1566%" y="117" width="1.9077%" height="15" fill="rgb(249,31,29)"/><text x="19.4066%" y="127.50">c..</text></g><g><title>specialization_graph_of (13,984,480 samples, 1.81%)</title><rect x="19.2537%" y="101" width="1.8105%" height="15" fill="rgb(225,111,53)"/><text x="19.5037%" y="111.50">s..</text></g><g><title>trait_impls_of (1,070,684 samples, 0.14%)</title><rect x="20.9256%" y="85" width="0.1386%" height="15" fill="rgb(238,160,17)"/><text x="21.1756%" y="95.50"></text></g><g><title>coherence_checking (14,835,699 samples, 1.92%)</title><rect x="19.1532%" y="133" width="1.9207%" height="15" fill="rgb(214,148,48)"/><text x="19.4032%" y="143.50">c..</text></g><g><title>evaluate_obligation (1,301,622 samples, 0.17%)</title><rect x="23.2163%" y="85" width="0.1685%" height="15" fill="rgb(232,36,49)"/><text x="23.4663%" y="95.50"></text></g><g><title>evaluate_obligation (1,493,974 samples, 0.19%)</title><rect x="24.4155%" y="69" width="0.1934%" height="15" fill="rgb(209,103,24)"/><text x="24.6655%" y="79.50"></text></g><g><title>typeck (8,763,763 samples, 1.13%)</title><rect x="23.6235%" y="85" width="1.1346%" height="15" fill="rgb(229,88,8)"/><text x="23.8735%" y="95.50"></text></g><g><title>item_bodies_checking (28,458,985 samples, 3.68%)</title><rect x="21.0807%" y="133" width="3.6845%" height="15" fill="rgb(213,181,19)"/><text x="21.3307%" y="143.50">item..</text></g><g><title>typeck_item_bodies (28,455,695 samples, 3.68%)</title><rect x="21.0811%" y="117" width="3.6841%" height="15" fill="rgb(254,191,54)"/><text x="21.3311%" y="127.50">type..</text></g><g><title>typeck (28,391,193 samples, 3.68%)</title><rect x="21.0894%" y="101" width="3.6757%" height="15" fill="rgb(241,83,37)"/><text x="21.3394%" y="111.50">type..</text></g><g><title>generics_of (1,055,434 samples, 0.14%)</title><rect x="24.9508%" y="101" width="0.1366%" height="15" fill="rgb(233,36,39)"/><text x="25.2008%" y="111.50"></text></g><g><title>predicates_of (911,860 samples, 0.12%)</title><rect x="25.1012%" y="101" width="0.1181%" height="15" fill="rgb(226,3,54)"/><text x="25.3512%" y="111.50"></text></g><g><title>predicates_defined_on (847,639 samples, 0.11%)</title><rect x="25.1095%" y="85" width="0.1097%" height="15" fill="rgb(245,192,40)"/><text x="25.3595%" y="95.50"></text></g><g><title>type_collecting (3,033,352 samples, 0.39%)</title><rect x="24.8484%" y="133" width="0.3927%" height="15" fill="rgb(238,167,29)"/><text x="25.0984%" y="143.50"></text></g><g><title>collect_mod_item_types (3,002,312 samples, 0.39%)</title><rect x="24.8524%" y="117" width="0.3887%" height="15" fill="rgb(232,182,51)"/><text x="25.1024%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,381,702 samples, 0.31%)</title><rect x="25.2621%" y="117" width="0.3084%" height="15" fill="rgb(231,60,39)"/><text x="25.5121%" y="127.50"></text></g><g><title>analysis (86,523,833 samples, 11.20%)</title><rect x="14.6179%" y="165" width="11.2020%" height="15" fill="rgb(208,69,12)"/><text x="14.8679%" y="175.50">analysis</text></g><g><title>type_check_crate (51,556,340 samples, 6.67%)</title><rect x="19.1450%" y="149" width="6.6748%" height="15" fill="rgb(235,93,37)"/><text x="19.3950%" y="159.50">type_chec..</text></g><g><title>wf_checking (4,465,108 samples, 0.58%)</title><rect x="25.2418%" y="133" width="0.5781%" height="15" fill="rgb(213,116,39)"/><text x="25.4918%" y="143.50"></text></g><g><title>check_item_well_formed (1,926,114 samples, 0.25%)</title><rect x="25.5705%" y="117" width="0.2494%" height="15" fill="rgb(222,207,29)"/><text x="25.8205%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (1,222,021 samples, 0.16%)</title><rect x="34.0265%" y="133" width="0.1582%" height="15" fill="rgb(206,96,30)"/><text x="34.2765%" y="143.50"></text></g><g><title>const_caller_location (963,652 samples, 0.12%)</title><rect x="34.1847%" y="133" width="0.1248%" height="15" fill="rgb(218,138,4)"/><text x="34.4347%" y="143.50"></text></g><g><title>layout_of (1,519,905 samples, 0.20%)</title><rect x="34.8698%" y="117" width="0.1968%" height="15" fill="rgb(250,191,14)"/><text x="35.1198%" y="127.50"></text></g><g><title>predicates_of (1,427,226 samples, 0.18%)</title><rect x="35.5263%" y="101" width="0.1848%" height="15" fill="rgb(239,60,40)"/><text x="35.7763%" y="111.50"></text></g><g><title>predicates_defined_on (1,081,623 samples, 0.14%)</title><rect x="35.5710%" y="85" width="0.1400%" height="15" fill="rgb(206,27,48)"/><text x="35.8210%" y="95.50"></text></g><g><title>param_env (4,987,036 samples, 0.65%)</title><rect x="35.0666%" y="117" width="0.6457%" height="15" fill="rgb(225,35,8)"/><text x="35.3166%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,131,992 samples, 0.15%)</title><rect x="35.7122%" y="117" width="0.1466%" height="15" fill="rgb(250,213,24)"/><text x="35.9622%" y="127.50"></text></g><g><title>normalize_projection_ty (798,308 samples, 0.10%)</title><rect x="35.7554%" y="101" width="0.1034%" height="15" fill="rgb(247,123,22)"/><text x="36.0054%" y="111.50"></text></g><g><title>fn_abi_of_instance (11,965,543 samples, 1.55%)</title><rect x="34.3143%" y="133" width="1.5491%" height="15" fill="rgb(231,138,38)"/><text x="34.5643%" y="143.50"></text></g><g><title>layout_of (1,333,012 samples, 0.17%)</title><rect x="35.9454%" y="133" width="0.1726%" height="15" fill="rgb(231,145,46)"/><text x="36.1954%" y="143.50"></text></g><g><title>codegen_module (77,396,324 samples, 10.02%)</title><rect x="26.1952%" y="149" width="10.0203%" height="15" fill="rgb(251,118,11)"/><text x="26.4452%" y="159.50">codegen_module</text></g><g><title>codegen_crate (80,356,019 samples, 10.40%)</title><rect x="25.8214%" y="165" width="10.4035%" height="15" fill="rgb(217,147,25)"/><text x="26.0714%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (359,021,336 samples, 46.48%)</title><rect x="36.3696%" y="149" width="46.4814%" height="15" fill="rgb(247,81,37)"/><text x="36.6196%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (345,173,864 samples, 44.69%)</title><rect x="38.1624%" y="133" width="44.6886%" height="15" fill="rgb(209,12,38)"/><text x="38.4124%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (376,772,486 samples, 48.78%)</title><rect x="36.2248%" y="165" width="48.7796%" height="15" fill="rgb(227,1,9)"/><text x="36.4748%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (16,633,009 samples, 2.15%)</title><rect x="82.8510%" y="149" width="2.1534%" height="15" fill="rgb(248,47,43)"/><text x="83.1010%" y="159.50">L..</text></g><g><title>metadata_register_crate (2,642,089 samples, 0.34%)</title><rect x="88.2425%" y="117" width="0.3421%" height="15" fill="rgb(221,10,30)"/><text x="88.4925%" y="127.50"></text></g><g><title>metadata_register_crate (958,689 samples, 0.12%)</title><rect x="88.4605%" y="101" width="0.1241%" height="15" fill="rgb(210,229,1)"/><text x="88.7105%" y="111.50"></text></g><g><title>macro_expand_crate (27,407,752 samples, 3.55%)</title><rect x="85.0952%" y="149" width="3.5484%" height="15" fill="rgb(222,148,37)"/><text x="85.3452%" y="159.50">macr..</text></g><g><title>expand_crate (27,378,752 samples, 3.54%)</title><rect x="85.0990%" y="133" width="3.5446%" height="15" fill="rgb(234,67,33)"/><text x="85.3490%" y="143.50">expa..</text></g><g><title>late_resolve_crate (3,681,270 samples, 0.48%)</title><rect x="88.7059%" y="133" width="0.4766%" height="15" fill="rgb(247,98,35)"/><text x="88.9559%" y="143.50"></text></g><g><title>configure_and_expand (32,493,257 samples, 4.21%)</title><rect x="85.0044%" y="165" width="4.2068%" height="15" fill="rgb(247,138,52)"/><text x="85.2544%" y="175.50">confi..</text></g><g><title>resolve_crate (4,313,216 samples, 0.56%)</title><rect x="88.6528%" y="149" width="0.5584%" height="15" fill="rgb(213,79,30)"/><text x="88.9028%" y="159.50"></text></g><g><title>early_lint_checks (777,238 samples, 0.10%)</title><rect x="89.2667%" y="165" width="0.1006%" height="15" fill="rgb(246,177,23)"/><text x="89.5167%" y="175.50"></text></g><g><title>free_global_ctxt (4,935,122 samples, 0.64%)</title><rect x="89.3673%" y="165" width="0.6389%" height="15" fill="rgb(230,62,27)"/><text x="89.6173%" y="175.50"></text></g><g><title>item_attrs (1,144,744 samples, 0.15%)</title><rect x="90.5727%" y="69" width="0.1482%" height="15" fill="rgb(216,154,8)"/><text x="90.8227%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,089,354 samples, 0.14%)</title><rect x="90.5799%" y="53" width="0.1410%" height="15" fill="rgb(244,35,45)"/><text x="90.8299%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,918,962 samples, 0.25%)</title><rect x="90.5292%" y="85" width="0.2484%" height="15" fill="rgb(251,115,12)"/><text x="90.7792%" y="95.50"></text></g><g><title>layout_of (1,018,860 samples, 0.13%)</title><rect x="91.1243%" y="69" width="0.1319%" height="15" fill="rgb(240,54,50)"/><text x="91.3743%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,555,782 samples, 0.33%)</title><rect x="91.2562%" y="69" width="0.3309%" height="15" fill="rgb(233,84,52)"/><text x="91.5062%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,083,444 samples, 0.27%)</title><rect x="91.5871%" y="69" width="0.2697%" height="15" fill="rgb(207,117,47)"/><text x="91.8371%" y="79.50"></text></g><g><title>optimized_mir (8,119,899 samples, 1.05%)</title><rect x="90.8745%" y="85" width="1.0513%" height="15" fill="rgb(249,43,39)"/><text x="91.1245%" y="95.50"></text></g><g><title>evaluate_obligation (781,669 samples, 0.10%)</title><rect x="92.4263%" y="53" width="0.1012%" height="15" fill="rgb(209,38,44)"/><text x="92.6763%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (4,029,152 samples, 0.52%)</title><rect x="92.0854%" y="69" width="0.5216%" height="15" fill="rgb(236,212,23)"/><text x="92.3354%" y="79.50"></text></g><g><title>specialization_graph_of (2,880,087 samples, 0.37%)</title><rect x="92.7388%" y="69" width="0.3729%" height="15" fill="rgb(242,79,21)"/><text x="92.9888%" y="79.50"></text></g><g><title>impl_trait_ref (909,118 samples, 0.12%)</title><rect x="92.9940%" y="53" width="0.1177%" height="15" fill="rgb(211,96,35)"/><text x="93.2440%" y="63.50"></text></g><g><title>resolve_instance (9,622,507 samples, 1.25%)</title><rect x="91.9258%" y="85" width="1.2458%" height="15" fill="rgb(253,215,40)"/><text x="92.1758%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (25,007,307 samples, 3.24%)</title><rect x="90.1937%" y="101" width="3.2376%" height="15" fill="rgb(211,81,21)"/><text x="90.4437%" y="111.50">mon..</text></g><g><title>monomorphization_collector (25,065,468 samples, 3.25%)</title><rect x="90.1932%" y="117" width="3.2452%" height="15" fill="rgb(208,190,38)"/><text x="90.4432%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,379,855 samples, 0.31%)</title><rect x="93.4399%" y="101" width="0.3081%" height="15" fill="rgb(235,213,38)"/><text x="93.6899%" y="111.50"></text></g><g><title>symbol_name (2,172,314 samples, 0.28%)</title><rect x="93.4668%" y="85" width="0.2812%" height="15" fill="rgb(237,122,38)"/><text x="93.7168%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (28,636,267 samples, 3.71%)</title><rect x="90.1872%" y="133" width="3.7075%" height="15" fill="rgb(244,218,35)"/><text x="90.4372%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (3,524,167 samples, 0.46%)</title><rect x="93.4384%" y="117" width="0.4563%" height="15" fill="rgb(240,68,47)"/><text x="93.6884%" y="127.50"></text></g><g><title>cgu_partitioning (1,132,552 samples, 0.15%)</title><rect x="93.7480%" y="101" width="0.1466%" height="15" fill="rgb(210,16,53)"/><text x="93.9980%" y="111.50"></text></g><g><title>exported_symbols (28,812,569 samples, 3.73%)</title><rect x="90.1743%" y="149" width="3.7303%" height="15" fill="rgb(235,124,12)"/><text x="90.4243%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,552,035 samples, 0.20%)</title><rect x="94.1577%" y="133" width="0.2009%" height="15" fill="rgb(224,169,11)"/><text x="94.4077%" y="143.50"></text></g><g><title>optimized_mir (3,433,907 samples, 0.44%)</title><rect x="93.9154%" y="149" width="0.4446%" height="15" fill="rgb(250,166,2)"/><text x="94.1654%" y="159.50"></text></g><g><title>generate_crate_metadata (33,675,621 samples, 4.36%)</title><rect x="90.0063%" y="165" width="4.3599%" height="15" fill="rgb(242,216,29)"/><text x="90.2563%" y="175.50">gener..</text></g><g><title>hir_lowering (5,569,350 samples, 0.72%)</title><rect x="94.3662%" y="165" width="0.7210%" height="15" fill="rgb(230,116,27)"/><text x="94.6162%" y="175.50"></text></g><g><title>finish_ongoing_codegen (32,790,211 samples, 4.25%)</title><rect x="95.0894%" y="149" width="4.2453%" height="15" fill="rgb(228,99,48)"/><text x="95.3394%" y="159.50">finis..</text></g><g><title>link_crate (2,378,425 samples, 0.31%)</title><rect x="99.3346%" y="149" width="0.3079%" height="15" fill="rgb(253,11,6)"/><text x="99.5846%" y="159.50"></text></g><g><title>link_binary (2,340,435 samples, 0.30%)</title><rect x="99.3396%" y="133" width="0.3030%" height="15" fill="rgb(247,143,39)"/><text x="99.5896%" y="143.50"></text></g><g><title>link_rlib (1,728,359 samples, 0.22%)</title><rect x="99.4188%" y="117" width="0.2238%" height="15" fill="rgb(236,97,10)"/><text x="99.6688%" y="127.50"></text></g><g><title>link (35,196,937 samples, 4.56%)</title><rect x="95.0872%" y="165" width="4.5568%" height="15" fill="rgb(233,208,19)"/><text x="95.3372%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (1,348,454 samples, 0.17%)</title><rect x="99.7603%" y="165" width="0.1746%" height="15" fill="rgb(216,164,2)"/><text x="100.0103%" y="175.50"></text></g><g><title>all (772,397,432 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (772,397,432 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>