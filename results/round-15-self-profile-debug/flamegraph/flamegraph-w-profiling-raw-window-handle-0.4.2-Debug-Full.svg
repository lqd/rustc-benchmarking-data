<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,962,024 samples, 10.44%)</title><rect x="0.2786%" y="149" width="10.4387%" height="15" fill="rgb(227,0,7)"/><text x="0.5286%" y="159.50">LLVM_passes</text></g><g><title>thir_body (989,483 samples, 0.45%)</title><rect x="18.1717%" y="37" width="0.4498%" height="15" fill="rgb(217,0,24)"/><text x="18.4217%" y="47.50"></text></g><g><title>mir_const (5,300,870 samples, 2.41%)</title><rect x="16.2189%" y="85" width="2.4098%" height="15" fill="rgb(221,193,54)"/><text x="16.4689%" y="95.50">mi..</text></g><g><title>unsafety_check_result (4,511,612 samples, 2.05%)</title><rect x="16.5777%" y="69" width="2.0510%" height="15" fill="rgb(248,212,6)"/><text x="16.8277%" y="79.50">u..</text></g><g><title>mir_built (4,033,521 samples, 1.83%)</title><rect x="16.7950%" y="53" width="1.8337%" height="15" fill="rgb(208,68,35)"/><text x="17.0450%" y="63.50">m..</text></g><g><title>mir_promoted (6,084,954 samples, 2.77%)</title><rect x="15.8844%" y="101" width="2.7663%" height="15" fill="rgb(232,128,0)"/><text x="16.1344%" y="111.50">mi..</text></g><g><title>type_op_prove_predicate (912,960 samples, 0.42%)</title><rect x="18.7267%" y="101" width="0.4150%" height="15" fill="rgb(207,160,47)"/><text x="18.9767%" y="111.50"></text></g><g><title>MIR_borrow_checking (18,195,475 samples, 8.27%)</title><rect x="10.8726%" y="133" width="8.2718%" height="15" fill="rgb(228,23,34)"/><text x="11.1226%" y="143.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (18,067,873 samples, 8.21%)</title><rect x="10.9306%" y="117" width="8.2138%" height="15" fill="rgb(218,30,26)"/><text x="11.1806%" y="127.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (367,523 samples, 0.17%)</title><rect x="19.4001%" y="101" width="0.1671%" height="15" fill="rgb(220,122,19)"/><text x="19.6501%" y="111.50"></text></g><g><title>check_mod_attrs (661,436 samples, 0.30%)</title><rect x="19.2666%" y="117" width="0.3007%" height="15" fill="rgb(250,228,42)"/><text x="19.5166%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (291,882 samples, 0.13%)</title><rect x="19.6604%" y="117" width="0.1327%" height="15" fill="rgb(240,193,28)"/><text x="19.9104%" y="127.50"></text></g><g><title>misc_checking_1 (1,247,362 samples, 0.57%)</title><rect x="19.2532%" y="133" width="0.5671%" height="15" fill="rgb(216,20,37)"/><text x="19.5032%" y="143.50"></text></g><g><title>misc_checking_2 (1,040,571 samples, 0.47%)</title><rect x="19.8203%" y="133" width="0.4731%" height="15" fill="rgb(206,188,39)"/><text x="20.0703%" y="143.50"></text></g><g><title>match_checking (867,609 samples, 0.39%)</title><rect x="19.8989%" y="117" width="0.3944%" height="15" fill="rgb(217,207,13)"/><text x="20.1489%" y="127.50"></text></g><g><title>check_match (834,649 samples, 0.38%)</title><rect x="19.9139%" y="101" width="0.3794%" height="15" fill="rgb(231,73,38)"/><text x="20.1639%" y="111.50"></text></g><g><title>death_checking (540,885 samples, 0.25%)</title><rect x="20.3977%" y="117" width="0.2459%" height="15" fill="rgb(225,20,46)"/><text x="20.6477%" y="127.50"></text></g><g><title>crate_lints (1,010,200 samples, 0.46%)</title><rect x="20.6443%" y="101" width="0.4592%" height="15" fill="rgb(210,31,41)"/><text x="20.8943%" y="111.50"></text></g><g><title>type_of (334,784 samples, 0.15%)</title><rect x="20.9513%" y="85" width="0.1522%" height="15" fill="rgb(221,200,47)"/><text x="21.2013%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (257,332 samples, 0.12%)</title><rect x="20.9865%" y="69" width="0.1170%" height="15" fill="rgb(226,26,5)"/><text x="21.2365%" y="79.50"></text></g><g><title>lint_checking (1,457,245 samples, 0.66%)</title><rect x="20.6436%" y="117" width="0.6625%" height="15" fill="rgb(249,33,26)"/><text x="20.8936%" y="127.50"></text></g><g><title>module_lints (445,484 samples, 0.20%)</title><rect x="21.1035%" y="101" width="0.2025%" height="15" fill="rgb(235,183,28)"/><text x="21.3535%" y="111.50"></text></g><g><title>lint_mod (438,514 samples, 0.20%)</title><rect x="21.1067%" y="85" width="0.1994%" height="15" fill="rgb(221,5,38)"/><text x="21.3567%" y="95.50"></text></g><g><title>privacy_access_levels (339,394 samples, 0.15%)</title><rect x="21.3060%" y="117" width="0.1543%" height="15" fill="rgb(247,18,42)"/><text x="21.5560%" y="127.50"></text></g><g><title>privacy_checking_modules (783,968 samples, 0.36%)</title><rect x="21.4603%" y="117" width="0.3564%" height="15" fill="rgb(241,131,45)"/><text x="21.7103%" y="127.50"></text></g><g><title>check_mod_privacy (779,078 samples, 0.35%)</title><rect x="21.4626%" y="101" width="0.3542%" height="15" fill="rgb(249,31,29)"/><text x="21.7126%" y="111.50"></text></g><g><title>misc_checking_3 (3,366,444 samples, 1.53%)</title><rect x="20.2933%" y="133" width="1.5304%" height="15" fill="rgb(225,111,53)"/><text x="20.5433%" y="143.50"></text></g><g><title>is_copy_raw (233,844 samples, 0.11%)</title><rect x="21.9086%" y="85" width="0.1063%" height="15" fill="rgb(238,160,17)"/><text x="22.1586%" y="95.50"></text></g><g><title>impl_parent (781,436 samples, 0.36%)</title><rect x="22.6362%" y="69" width="0.3552%" height="15" fill="rgb(214,148,48)"/><text x="22.8862%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (455,376 samples, 0.21%)</title><rect x="22.7845%" y="53" width="0.2070%" height="15" fill="rgb(232,36,49)"/><text x="23.0345%" y="63.50"></text></g><g><title>impl_trait_ref (1,454,238 samples, 0.66%)</title><rect x="22.9915%" y="69" width="0.6611%" height="15" fill="rgb(209,103,24)"/><text x="23.2415%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,138,955 samples, 0.52%)</title><rect x="23.1348%" y="53" width="0.5178%" height="15" fill="rgb(229,88,8)"/><text x="23.3848%" y="63.50"></text></g><g><title>coherent_trait (4,214,074 samples, 1.92%)</title><rect x="21.8608%" y="101" width="1.9158%" height="15" fill="rgb(213,181,19)"/><text x="22.1108%" y="111.50">c..</text></g><g><title>specialization_graph_of (3,735,879 samples, 1.70%)</title><rect x="22.0782%" y="85" width="1.6984%" height="15" fill="rgb(254,191,54)"/><text x="22.3282%" y="95.50"></text></g><g><title>trait_impls_of (271,593 samples, 0.12%)</title><rect x="23.6531%" y="69" width="0.1235%" height="15" fill="rgb(241,83,37)"/><text x="23.9031%" y="79.50"></text></g><g><title>coherence_checking (4,302,614 samples, 1.96%)</title><rect x="21.8538%" y="117" width="1.9560%" height="15" fill="rgb(233,36,39)"/><text x="22.1038%" y="127.50">c..</text></g><g><title>evaluate_obligation (544,007 samples, 0.25%)</title><rect x="32.6798%" y="69" width="0.2473%" height="15" fill="rgb(226,3,54)"/><text x="32.9298%" y="79.50"></text></g><g><title>item_bodies_checking (20,593,180 samples, 9.36%)</title><rect x="23.8322%" y="117" width="9.3618%" height="15" fill="rgb(245,192,40)"/><text x="24.0822%" y="127.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (20,590,670 samples, 9.36%)</title><rect x="23.8334%" y="101" width="9.3607%" height="15" fill="rgb(238,167,29)"/><text x="24.0834%" y="111.50">typeck_item_b..</text></g><g><title>typeck (20,502,770 samples, 9.32%)</title><rect x="23.8733%" y="85" width="9.3207%" height="15" fill="rgb(232,182,51)"/><text x="24.1233%" y="95.50">typeck</text></g><g><title>item_types_checking (1,343,643 samples, 0.61%)</title><rect x="33.1940%" y="117" width="0.6108%" height="15" fill="rgb(231,60,39)"/><text x="33.4440%" y="127.50"></text></g><g><title>check_mod_item_types (1,335,203 samples, 0.61%)</title><rect x="33.1979%" y="101" width="0.6070%" height="15" fill="rgb(208,69,12)"/><text x="33.4479%" y="111.50"></text></g><g><title>fn_sig (243,981 samples, 0.11%)</title><rect x="33.9803%" y="85" width="0.1109%" height="15" fill="rgb(235,93,37)"/><text x="34.2303%" y="95.50"></text></g><g><title>is_late_bound_map (238,412 samples, 0.11%)</title><rect x="34.1586%" y="69" width="0.1084%" height="15" fill="rgb(213,116,39)"/><text x="34.4086%" y="79.50"></text></g><g><title>resolve_lifetimes (229,672 samples, 0.10%)</title><rect x="34.1626%" y="53" width="0.1044%" height="15" fill="rgb(222,207,29)"/><text x="34.4126%" y="63.50"></text></g><g><title>named_region_map (402,105 samples, 0.18%)</title><rect x="34.2670%" y="69" width="0.1828%" height="15" fill="rgb(206,96,30)"/><text x="34.5170%" y="79.50"></text></g><g><title>resolve_lifetimes (368,725 samples, 0.17%)</title><rect x="34.2822%" y="53" width="0.1676%" height="15" fill="rgb(218,138,4)"/><text x="34.5322%" y="63.50"></text></g><g><title>generics_of (808,169 samples, 0.37%)</title><rect x="34.0912%" y="85" width="0.3674%" height="15" fill="rgb(250,191,14)"/><text x="34.3412%" y="95.50"></text></g><g><title>predicates_of (575,419 samples, 0.26%)</title><rect x="34.4968%" y="85" width="0.2616%" height="15" fill="rgb(239,60,40)"/><text x="34.7468%" y="95.50"></text></g><g><title>predicates_defined_on (489,998 samples, 0.22%)</title><rect x="34.5356%" y="69" width="0.2228%" height="15" fill="rgb(206,27,48)"/><text x="34.7856%" y="79.50"></text></g><g><title>type_collecting (2,253,703 samples, 1.02%)</title><rect x="33.8056%" y="117" width="1.0246%" height="15" fill="rgb(225,35,8)"/><text x="34.0556%" y="127.50"></text></g><g><title>collect_mod_item_types (2,240,873 samples, 1.02%)</title><rect x="33.8114%" y="101" width="1.0187%" height="15" fill="rgb(250,213,24)"/><text x="34.0614%" y="111.50"></text></g><g><title>evaluate_obligation (419,302 samples, 0.19%)</title><rect x="35.8870%" y="85" width="0.1906%" height="15" fill="rgb(247,123,22)"/><text x="36.1370%" y="95.50"></text></g><g><title>param_env (281,407 samples, 0.13%)</title><rect x="36.1555%" y="85" width="0.1279%" height="15" fill="rgb(231,138,38)"/><text x="36.4055%" y="95.50"></text></g><g><title>region_scope_tree (480,241 samples, 0.22%)</title><rect x="36.2971%" y="85" width="0.2183%" height="15" fill="rgb(231,145,46)"/><text x="36.5471%" y="95.50"></text></g><g><title>check_impl_item_well_formed (3,478,201 samples, 1.58%)</title><rect x="34.9393%" y="101" width="1.5812%" height="15" fill="rgb(251,118,11)"/><text x="35.1893%" y="111.50"></text></g><g><title>evaluate_obligation (616,935 samples, 0.28%)</title><rect x="37.3023%" y="85" width="0.2805%" height="15" fill="rgb(217,147,25)"/><text x="37.5523%" y="95.50"></text></g><g><title>param_env (351,054 samples, 0.16%)</title><rect x="37.6265%" y="85" width="0.1596%" height="15" fill="rgb(247,81,37)"/><text x="37.8765%" y="95.50"></text></g><g><title>check_item_well_formed (2,920,923 samples, 1.33%)</title><rect x="36.5205%" y="101" width="1.3279%" height="15" fill="rgb(209,12,38)"/><text x="36.7705%" y="111.50"></text></g><g><title>analysis (59,833,328 samples, 27.20%)</title><rect x="10.7173%" y="149" width="27.2007%" height="15" fill="rgb(227,1,9)"/><text x="10.9673%" y="159.50">analysis</text></g><g><title>type_check_crate (35,402,500 samples, 16.09%)</title><rect x="21.8238%" y="133" width="16.0943%" height="15" fill="rgb(248,47,43)"/><text x="22.0738%" y="143.50">type_check_crate</text></g><g><title>wf_checking (6,786,489 samples, 3.09%)</title><rect x="34.8328%" y="117" width="3.0852%" height="15" fill="rgb(221,10,30)"/><text x="35.0828%" y="127.50">wf_..</text></g><g><title>param_env (355,045 samples, 0.16%)</title><rect x="45.6066%" y="101" width="0.1614%" height="15" fill="rgb(210,229,1)"/><text x="45.8566%" y="111.50"></text></g><g><title>fn_abi_of_instance (1,160,749 samples, 0.53%)</title><rect x="45.2460%" y="117" width="0.5277%" height="15" fill="rgb(222,148,37)"/><text x="45.4960%" y="127.50"></text></g><g><title>symbol_name (222,931 samples, 0.10%)</title><rect x="45.8513%" y="117" width="0.1013%" height="15" fill="rgb(234,67,33)"/><text x="46.1013%" y="127.50"></text></g><g><title>codegen_module (15,990,104 samples, 7.27%)</title><rect x="38.7027%" y="133" width="7.2692%" height="15" fill="rgb(247,98,35)"/><text x="38.9527%" y="143.50">codegen_mo..</text></g><g><title>codegen_crate (17,730,631 samples, 8.06%)</title><rect x="37.9222%" y="149" width="8.0605%" height="15" fill="rgb(247,138,52)"/><text x="38.1722%" y="159.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (63,579,656 samples, 28.90%)</title><rect x="46.0470%" y="133" width="28.9038%" height="15" fill="rgb(213,79,30)"/><text x="46.2970%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (59,501,887 samples, 27.05%)</title><rect x="47.9008%" y="117" width="27.0500%" height="15" fill="rgb(246,177,23)"/><text x="48.1508%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (67,436,973 samples, 30.66%)</title><rect x="45.9827%" y="149" width="30.6574%" height="15" fill="rgb(230,62,27)"/><text x="46.2327%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,715,926 samples, 1.69%)</title><rect x="74.9508%" y="133" width="1.6893%" height="15" fill="rgb(216,154,8)"/><text x="75.2008%" y="143.50"></text></g><g><title>AST_validation (259,363 samples, 0.12%)</title><rect x="76.7231%" y="133" width="0.1179%" height="15" fill="rgb(244,35,45)"/><text x="76.9731%" y="143.50"></text></g><g><title>macro_expand_crate (16,036,523 samples, 7.29%)</title><rect x="76.9433%" y="133" width="7.2903%" height="15" fill="rgb(251,115,12)"/><text x="77.1933%" y="143.50">macro_expa..</text></g><g><title>expand_crate (16,014,593 samples, 7.28%)</title><rect x="76.9533%" y="117" width="7.2804%" height="15" fill="rgb(240,54,50)"/><text x="77.2033%" y="127.50">expand_cra..</text></g><g><title>finalize_macro_resolutions (733,248 samples, 0.33%)</title><rect x="84.3203%" y="117" width="0.3333%" height="15" fill="rgb(233,84,52)"/><text x="84.5703%" y="127.50"></text></g><g><title>late_resolve_crate (4,382,884 samples, 1.99%)</title><rect x="84.6536%" y="117" width="1.9925%" height="15" fill="rgb(207,117,47)"/><text x="84.9036%" y="127.50">l..</text></g><g><title>configure_and_expand (22,249,036 samples, 10.11%)</title><rect x="76.6401%" y="149" width="10.1146%" height="15" fill="rgb(249,43,39)"/><text x="76.8901%" y="159.50">configure_and_e..</text></g><g><title>resolve_crate (5,458,416 samples, 2.48%)</title><rect x="84.2732%" y="133" width="2.4814%" height="15" fill="rgb(209,38,44)"/><text x="84.5232%" y="143.50">re..</text></g><g><title>early_lint_checks (441,075 samples, 0.20%)</title><rect x="86.8393%" y="149" width="0.2005%" height="15" fill="rgb(236,212,23)"/><text x="87.0893%" y="159.50"></text></g><g><title>free_global_ctxt (2,397,364 samples, 1.09%)</title><rect x="87.0398%" y="149" width="1.0899%" height="15" fill="rgb(242,79,21)"/><text x="87.2898%" y="159.50"></text></g><g><title>optimized_mir (2,025,790 samples, 0.92%)</title><rect x="89.1107%" y="69" width="0.9209%" height="15" fill="rgb(211,96,35)"/><text x="89.3607%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (908,541 samples, 0.41%)</title><rect x="89.6186%" y="53" width="0.4130%" height="15" fill="rgb(253,215,40)"/><text x="89.8686%" y="63.50"></text></g><g><title>specialization_graph_of (432,624 samples, 0.20%)</title><rect x="90.2180%" y="53" width="0.1967%" height="15" fill="rgb(211,81,21)"/><text x="90.4680%" y="63.50"></text></g><g><title>resolve_instance (866,908 samples, 0.39%)</title><rect x="90.0317%" y="69" width="0.3941%" height="15" fill="rgb(208,190,38)"/><text x="90.2817%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (298,722 samples, 0.14%)</title><rect x="90.5097%" y="37" width="0.1358%" height="15" fill="rgb(235,213,38)"/><text x="90.7597%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (3,892,949 samples, 1.77%)</title><rect x="88.8825%" y="85" width="1.7698%" height="15" fill="rgb(237,122,38)"/><text x="89.1325%" y="95.50"></text></g><g><title>vtable_entries (466,283 samples, 0.21%)</title><rect x="90.4403%" y="69" width="0.2120%" height="15" fill="rgb(244,218,35)"/><text x="90.6903%" y="79.50"></text></g><g><title>resolve_instance (364,033 samples, 0.17%)</title><rect x="90.4868%" y="53" width="0.1655%" height="15" fill="rgb(240,68,47)"/><text x="90.7368%" y="63.50"></text></g><g><title>monomorphization_collector (3,955,880 samples, 1.80%)</title><rect x="88.8813%" y="101" width="1.7984%" height="15" fill="rgb(210,16,53)"/><text x="89.1313%" y="111.50">m..</text></g><g><title>assert_symbols_are_distinct (293,323 samples, 0.13%)</title><rect x="90.6813%" y="85" width="0.1333%" height="15" fill="rgb(235,124,12)"/><text x="90.9313%" y="95.50"></text></g><g><title>symbol_name (264,843 samples, 0.12%)</title><rect x="90.6943%" y="69" width="0.1204%" height="15" fill="rgb(224,169,11)"/><text x="90.9443%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (4,451,405 samples, 2.02%)</title><rect x="88.8605%" y="117" width="2.0236%" height="15" fill="rgb(250,166,2)"/><text x="89.1105%" y="127.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (449,835 samples, 0.20%)</title><rect x="90.6796%" y="101" width="0.2045%" height="15" fill="rgb(242,216,29)"/><text x="90.9296%" y="111.50"></text></g><g><title>exported_symbols (4,596,716 samples, 2.09%)</title><rect x="88.8446%" y="133" width="2.0897%" height="15" fill="rgb(230,116,27)"/><text x="89.0946%" y="143.50">e..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,746,665 samples, 0.79%)</title><rect x="91.8952%" y="117" width="0.7940%" height="15" fill="rgb(228,99,48)"/><text x="92.1452%" y="127.50"></text></g><g><title>optimized_mir (3,787,662 samples, 1.72%)</title><rect x="90.9815%" y="133" width="1.7219%" height="15" fill="rgb(253,11,6)"/><text x="91.2315%" y="143.50"></text></g><g><title>generate_crate_metadata (10,123,922 samples, 4.60%)</title><rect x="88.1297%" y="149" width="4.6024%" height="15" fill="rgb(247,143,39)"/><text x="88.3797%" y="159.50">gener..</text></g><g><title>hir_lowering (6,922,240 samples, 3.15%)</title><rect x="92.7321%" y="149" width="3.1469%" height="15" fill="rgb(236,97,10)"/><text x="92.9821%" y="159.50">hir..</text></g><g><title>finish_ongoing_codegen (4,593,037 samples, 2.09%)</title><rect x="95.8855%" y="133" width="2.0880%" height="15" fill="rgb(233,208,19)"/><text x="96.1355%" y="143.50">f..</text></g><g><title>link_binary_remove_temps (244,792 samples, 0.11%)</title><rect x="98.1268%" y="101" width="0.1113%" height="15" fill="rgb(216,164,2)"/><text x="98.3768%" y="111.50"></text></g><g><title>link_crate (1,735,568 samples, 0.79%)</title><rect x="97.9736%" y="133" width="0.7890%" height="15" fill="rgb(220,129,5)"/><text x="98.2236%" y="143.50"></text></g><g><title>link_binary (1,691,547 samples, 0.77%)</title><rect x="97.9936%" y="117" width="0.7690%" height="15" fill="rgb(242,17,10)"/><text x="98.2436%" y="127.50"></text></g><g><title>link_rlib (1,153,771 samples, 0.52%)</title><rect x="98.2380%" y="101" width="0.5245%" height="15" fill="rgb(242,107,0)"/><text x="98.4880%" y="111.50"></text></g><g><title>link (6,351,515 samples, 2.89%)</title><rect x="95.8790%" y="149" width="2.8875%" height="15" fill="rgb(251,28,31)"/><text x="96.1290%" y="159.50">li..</text></g><g><title>parse_crate (924,530 samples, 0.42%)</title><rect x="98.7664%" y="149" width="0.4203%" height="15" fill="rgb(233,223,10)"/><text x="99.0164%" y="159.50"></text></g><g><title>prepare_outputs (290,593 samples, 0.13%)</title><rect x="99.1902%" y="149" width="0.1321%" height="15" fill="rgb(215,21,27)"/><text x="99.4402%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,030,071 samples, 0.47%)</title><rect x="99.3223%" y="149" width="0.4683%" height="15" fill="rgb(232,23,21)"/><text x="99.5723%" y="159.50"></text></g><g><title>all (219,969,695 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (219,969,695 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (376,204 samples, 0.17%)</title><rect x="99.8290%" y="149" width="0.1710%" height="15" fill="rgb(247,70,30)"/><text x="100.0790%" y="159.50"></text></g></svg></svg>