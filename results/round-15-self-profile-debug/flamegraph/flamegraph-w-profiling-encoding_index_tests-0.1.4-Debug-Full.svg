<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,253,752 samples, 8.33%)</title><rect x="2.2833%" y="165" width="8.3327%" height="15" fill="rgb(227,0,7)"/><text x="2.5333%" y="175.50">LLVM_passes</text></g><g><title>hir_module_items (76,411 samples, 0.28%)</title><rect x="10.9564%" y="149" width="0.2825%" height="15" fill="rgb(217,0,24)"/><text x="11.2064%" y="159.50"></text></g><g><title>check_mod_attrs (35,651 samples, 0.13%)</title><rect x="11.3264%" y="133" width="0.1318%" height="15" fill="rgb(221,193,54)"/><text x="11.5764%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (85,211 samples, 0.32%)</title><rect x="11.5023%" y="133" width="0.3150%" height="15" fill="rgb(248,212,6)"/><text x="11.7523%" y="143.50"></text></g><g><title>looking_for_derive_registrar (32,610 samples, 0.12%)</title><rect x="11.8213%" y="133" width="0.1206%" height="15" fill="rgb(208,68,35)"/><text x="12.0713%" y="143.50"></text></g><g><title>misc_checking_1 (198,792 samples, 0.73%)</title><rect x="11.2409%" y="149" width="0.7350%" height="15" fill="rgb(232,128,0)"/><text x="11.4909%" y="159.50"></text></g><g><title>get_lang_items (54,920 samples, 0.20%)</title><rect x="12.3265%" y="101" width="0.2031%" height="15" fill="rgb(207,160,47)"/><text x="12.5765%" y="111.50"></text></g><g><title>codegen_fn_attrs (112,951 samples, 0.42%)</title><rect x="12.2290%" y="117" width="0.4176%" height="15" fill="rgb(228,23,34)"/><text x="12.4790%" y="127.50"></text></g><g><title>death_checking (171,142 samples, 0.63%)</title><rect x="12.0828%" y="133" width="0.6328%" height="15" fill="rgb(218,30,26)"/><text x="12.3328%" y="143.50"></text></g><g><title>explicit_predicates_of (45,780 samples, 0.17%)</title><rect x="13.6576%" y="53" width="0.1693%" height="15" fill="rgb(220,122,19)"/><text x="13.9076%" y="63.50"></text></g><g><title>generics_of (27,880 samples, 0.10%)</title><rect x="13.7238%" y="37" width="0.1031%" height="15" fill="rgb(250,228,42)"/><text x="13.9738%" y="47.50"></text></g><g><title>crate_lints (294,853 samples, 1.09%)</title><rect x="12.7431%" y="117" width="1.0901%" height="15" fill="rgb(240,193,28)"/><text x="12.9931%" y="127.50"></text></g><g><title>param_env (268,003 samples, 0.99%)</title><rect x="12.8424%" y="101" width="0.9909%" height="15" fill="rgb(216,20,37)"/><text x="13.0924%" y="111.50"></text></g><g><title>predicates_of (66,961 samples, 0.25%)</title><rect x="13.5857%" y="85" width="0.2476%" height="15" fill="rgb(206,188,39)"/><text x="13.8357%" y="95.50"></text></g><g><title>predicates_defined_on (59,560 samples, 0.22%)</title><rect x="13.6131%" y="69" width="0.2202%" height="15" fill="rgb(217,207,13)"/><text x="13.8631%" y="79.50"></text></g><g><title>lint_checking (321,753 samples, 1.19%)</title><rect x="12.7156%" y="133" width="1.1896%" height="15" fill="rgb(231,73,38)"/><text x="12.9656%" y="143.50"></text></g><g><title>misc_checking_3 (563,966 samples, 2.09%)</title><rect x="12.0099%" y="149" width="2.0851%" height="15" fill="rgb(225,20,46)"/><text x="12.2599%" y="159.50">m..</text></g><g><title>unused_lib_feature_checking (29,170 samples, 0.11%)</title><rect x="13.9872%" y="133" width="0.1078%" height="15" fill="rgb(210,31,41)"/><text x="14.2372%" y="143.50"></text></g><g><title>coherence_checking (36,990 samples, 0.14%)</title><rect x="14.2196%" y="133" width="0.1368%" height="15" fill="rgb(221,200,47)"/><text x="14.4696%" y="143.50"></text></g><g><title>type_collecting (45,360 samples, 0.17%)</title><rect x="14.4564%" y="133" width="0.1677%" height="15" fill="rgb(226,26,5)"/><text x="14.7064%" y="143.50"></text></g><g><title>analysis (1,103,622 samples, 4.08%)</title><rect x="10.6160%" y="165" width="4.0804%" height="15" fill="rgb(249,33,26)"/><text x="10.8660%" y="175.50">anal..</text></g><g><title>type_check_crate (162,642 samples, 0.60%)</title><rect x="14.0951%" y="149" width="0.6013%" height="15" fill="rgb(235,183,28)"/><text x="14.3451%" y="159.50"></text></g><g><title>codegen_module (342,713 samples, 1.27%)</title><rect x="18.5092%" y="149" width="1.2671%" height="15" fill="rgb(221,5,38)"/><text x="18.7592%" y="159.50"></text></g><g><title>native_libraries (43,540 samples, 0.16%)</title><rect x="20.0094%" y="149" width="0.1610%" height="15" fill="rgb(247,18,42)"/><text x="20.2594%" y="159.50"></text></g><g><title>metadata_decode_entry_native_libraries (32,210 samples, 0.12%)</title><rect x="20.0513%" y="133" width="0.1191%" height="15" fill="rgb(241,131,45)"/><text x="20.3013%" y="143.50"></text></g><g><title>codegen_crate (1,498,165 samples, 5.54%)</title><rect x="14.7303%" y="165" width="5.5391%" height="15" fill="rgb(249,31,29)"/><text x="14.9803%" y="175.50">codegen..</text></g><g><title>LLVM_module_codegen (1,842,339 samples, 6.81%)</title><rect x="20.3550%" y="149" width="6.8116%" height="15" fill="rgb(225,111,53)"/><text x="20.6050%" y="159.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (1,793,358 samples, 6.63%)</title><rect x="20.5361%" y="133" width="6.6305%" height="15" fill="rgb(238,160,17)"/><text x="20.7861%" y="143.50">LLVM_modu..</text></g><g><title>codegen_module_optimize (2,074,981 samples, 7.67%)</title><rect x="20.2694%" y="165" width="7.6717%" height="15" fill="rgb(214,148,48)"/><text x="20.5194%" y="175.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (209,492 samples, 0.77%)</title><rect x="27.1666%" y="149" width="0.7745%" height="15" fill="rgb(232,36,49)"/><text x="27.4166%" y="159.50"></text></g><g><title>crate_injection (91,101 samples, 0.34%)</title><rect x="28.8602%" y="149" width="0.3368%" height="15" fill="rgb(209,103,24)"/><text x="29.1102%" y="159.50"></text></g><g><title>metadata_load_macro (54,190 samples, 0.20%)</title><rect x="61.8117%" y="117" width="0.2004%" height="15" fill="rgb(229,88,8)"/><text x="62.0617%" y="127.50"></text></g><g><title>macro_expand_crate (11,567,356 samples, 42.77%)</title><rect x="29.1970%" y="149" width="42.7674%" height="15" fill="rgb(213,181,19)"/><text x="29.4470%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (11,547,646 samples, 42.69%)</title><rect x="29.2698%" y="133" width="42.6946%" height="15" fill="rgb(254,191,54)"/><text x="29.5198%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (2,691,817 samples, 9.95%)</title><rect x="62.0121%" y="117" width="9.9523%" height="15" fill="rgb(241,83,37)"/><text x="62.2621%" y="127.50">metadata_regis..</text></g><g><title>metadata_register_crate (974,288 samples, 3.60%)</title><rect x="68.3622%" y="101" width="3.6022%" height="15" fill="rgb(233,36,39)"/><text x="68.6122%" y="111.50">meta..</text></g><g><title>metadata_register_crate (83,682 samples, 0.31%)</title><rect x="71.6550%" y="85" width="0.3094%" height="15" fill="rgb(226,3,54)"/><text x="71.9050%" y="95.50"></text></g><g><title>pre_AST_expansion_lint_checks (108,081 samples, 0.40%)</title><rect x="72.0160%" y="149" width="0.3996%" height="15" fill="rgb(245,192,40)"/><text x="72.2660%" y="159.50"></text></g><g><title>finalize_macro_resolutions (350,284 samples, 1.30%)</title><rect x="72.4810%" y="133" width="1.2951%" height="15" fill="rgb(238,167,29)"/><text x="72.7310%" y="143.50"></text></g><g><title>configure_and_expand (12,425,904 samples, 45.94%)</title><rect x="27.9411%" y="165" width="45.9417%" height="15" fill="rgb(232,182,51)"/><text x="28.1911%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (396,844 samples, 1.47%)</title><rect x="72.4156%" y="149" width="1.4672%" height="15" fill="rgb(231,60,39)"/><text x="72.6656%" y="159.50"></text></g><g><title>early_lint_checks (53,021 samples, 0.20%)</title><rect x="74.0015%" y="165" width="0.1960%" height="15" fill="rgb(208,69,12)"/><text x="74.2515%" y="175.50"></text></g><g><title>free_global_ctxt (1,372,943 samples, 5.08%)</title><rect x="74.1976%" y="165" width="5.0761%" height="15" fill="rgb(235,93,37)"/><text x="74.4476%" y="175.50">free_g..</text></g><g><title>crate_hash (145,711 samples, 0.54%)</title><rect x="80.7111%" y="149" width="0.5387%" height="15" fill="rgb(213,116,39)"/><text x="80.9611%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (83,631 samples, 0.31%)</title><rect x="81.4749%" y="133" width="0.3092%" height="15" fill="rgb(222,207,29)"/><text x="81.7249%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (38,960 samples, 0.14%)</title><rect x="81.6401%" y="117" width="0.1440%" height="15" fill="rgb(206,96,30)"/><text x="81.8901%" y="127.50"></text></g><g><title>cgu_partitioning (33,710 samples, 0.12%)</title><rect x="81.6595%" y="101" width="0.1246%" height="15" fill="rgb(218,138,4)"/><text x="81.9095%" y="111.50"></text></g><g><title>exported_symbols (117,832 samples, 0.44%)</title><rect x="81.4304%" y="149" width="0.4357%" height="15" fill="rgb(250,191,14)"/><text x="81.6804%" y="159.50"></text></g><g><title>mir_keys (36,950 samples, 0.14%)</title><rect x="81.9374%" y="149" width="0.1366%" height="15" fill="rgb(239,60,40)"/><text x="82.1874%" y="159.50"></text></g><g><title>generate_crate_metadata (761,937 samples, 2.82%)</title><rect x="79.2737%" y="165" width="2.8171%" height="15" fill="rgb(206,27,48)"/><text x="79.5237%" y="175.50">ge..</text></g><g><title>hir_lowering (821,838 samples, 3.04%)</title><rect x="82.0908%" y="165" width="3.0385%" height="15" fill="rgb(225,35,8)"/><text x="82.3408%" y="175.50">hir..</text></g><g><title>finish_ongoing_codegen (717,898 samples, 2.65%)</title><rect x="85.1793%" y="149" width="2.6543%" height="15" fill="rgb(250,213,24)"/><text x="85.4293%" y="159.50">fi..</text></g><g><title>link_binary_remove_temps (36,191 samples, 0.13%)</title><rect x="89.1891%" y="117" width="0.1338%" height="15" fill="rgb(247,123,22)"/><text x="89.4391%" y="127.50"></text></g><g><title>link_crate (1,005,240 samples, 3.72%)</title><rect x="87.8336%" y="149" width="3.7166%" height="15" fill="rgb(231,138,38)"/><text x="88.0836%" y="159.50">link..</text></g><g><title>link_binary (985,730 samples, 3.64%)</title><rect x="87.9057%" y="133" width="3.6445%" height="15" fill="rgb(231,145,46)"/><text x="88.1557%" y="143.50">link..</text></g><g><title>link_rlib (602,427 samples, 2.23%)</title><rect x="89.3229%" y="117" width="2.2273%" height="15" fill="rgb(251,118,11)"/><text x="89.5729%" y="127.50">l..</text></g><g><title>link (1,746,628 samples, 6.46%)</title><rect x="85.1293%" y="165" width="6.4577%" height="15" fill="rgb(217,147,25)"/><text x="85.3793%" y="175.50">link</text></g><g><title>parse_crate (1,115,592 samples, 4.12%)</title><rect x="91.5870%" y="165" width="4.1246%" height="15" fill="rgb(247,81,37)"/><text x="91.8370%" y="175.50">pars..</text></g><g><title>prepare_outputs (340,474 samples, 1.26%)</title><rect x="95.7449%" y="165" width="1.2588%" height="15" fill="rgb(209,12,38)"/><text x="95.9949%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (260,723 samples, 0.96%)</title><rect x="97.0037%" y="165" width="0.9640%" height="15" fill="rgb(227,1,9)"/><text x="97.2537%" y="175.50"></text></g><g><title>setup_global_ctxt (114,361 samples, 0.42%)</title><rect x="97.9708%" y="165" width="0.4228%" height="15" fill="rgb(248,47,43)"/><text x="98.2208%" y="175.50"></text></g><g><title>all (27,047,112 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(221,10,30)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (27,047,112 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,229,1)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (434,485 samples, 1.61%)</title><rect x="98.3936%" y="165" width="1.6064%" height="15" fill="rgb(222,148,37)"/><text x="98.6436%" y="175.50"></text></g></svg></svg>