<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (154,690,851 samples, 12.78%)</title><rect x="0.0667%" y="181" width="12.7816%" height="15" fill="rgb(227,0,7)"/><text x="0.3167%" y="191.50">LLVM_passes</text></g><g><title>mir_const (6,974,563 samples, 0.58%)</title><rect x="13.7585%" y="117" width="0.5763%" height="15" fill="rgb(217,0,24)"/><text x="14.0085%" y="127.50"></text></g><g><title>unsafety_check_result (6,092,014 samples, 0.50%)</title><rect x="13.8314%" y="101" width="0.5034%" height="15" fill="rgb(221,193,54)"/><text x="14.0814%" y="111.50"></text></g><g><title>mir_built (5,476,239 samples, 0.45%)</title><rect x="13.8823%" y="85" width="0.4525%" height="15" fill="rgb(248,212,6)"/><text x="14.1323%" y="95.50"></text></g><g><title>mir_promoted (7,532,388 samples, 0.62%)</title><rect x="13.7136%" y="133" width="0.6224%" height="15" fill="rgb(208,68,35)"/><text x="13.9636%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,325,527 samples, 0.11%)</title><rect x="14.3503%" y="133" width="0.1095%" height="15" fill="rgb(232,128,0)"/><text x="14.6003%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,302,208 samples, 0.36%)</title><rect x="14.5604%" y="133" width="0.3555%" height="15" fill="rgb(207,160,47)"/><text x="14.8104%" y="143.50"></text></g><g><title>MIR_borrow_checking (24,578,729 samples, 2.03%)</title><rect x="12.8853%" y="165" width="2.0309%" height="15" fill="rgb(228,23,34)"/><text x="13.1353%" y="175.50">M..</text></g><g><title>mir_borrowck (24,531,259 samples, 2.03%)</title><rect x="12.8893%" y="149" width="2.0269%" height="15" fill="rgb(218,30,26)"/><text x="13.1393%" y="159.50">m..</text></g><g><title>misc_checking_1 (1,636,157 samples, 0.14%)</title><rect x="14.9363%" y="165" width="0.1352%" height="15" fill="rgb(220,122,19)"/><text x="15.1863%" y="175.50"></text></g><g><title>resolve_instance (1,276,143 samples, 0.11%)</title><rect x="15.2226%" y="117" width="0.1054%" height="15" fill="rgb(250,228,42)"/><text x="15.4726%" y="127.50"></text></g><g><title>crate_lints (3,046,432 samples, 0.25%)</title><rect x="15.1656%" y="133" width="0.2517%" height="15" fill="rgb(240,193,28)"/><text x="15.4156%" y="143.50"></text></g><g><title>lint_checking (3,390,596 samples, 0.28%)</title><rect x="15.1654%" y="149" width="0.2802%" height="15" fill="rgb(216,20,37)"/><text x="15.4154%" y="159.50"></text></g><g><title>misc_checking_3 (4,388,916 samples, 0.36%)</title><rect x="15.1379%" y="165" width="0.3626%" height="15" fill="rgb(206,188,39)"/><text x="15.3879%" y="175.50"></text></g><g><title>impl_parent (2,892,969 samples, 0.24%)</title><rect x="15.9099%" y="101" width="0.2390%" height="15" fill="rgb(217,207,13)"/><text x="16.1599%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,424,255 samples, 0.12%)</title><rect x="16.0313%" y="85" width="0.1177%" height="15" fill="rgb(231,73,38)"/><text x="16.2813%" y="95.50"></text></g><g><title>impl_trait_ref (7,407,412 samples, 0.61%)</title><rect x="16.1490%" y="101" width="0.6121%" height="15" fill="rgb(225,20,46)"/><text x="16.3990%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,312,833 samples, 0.52%)</title><rect x="16.2394%" y="85" width="0.5216%" height="15" fill="rgb(210,31,41)"/><text x="16.4894%" y="95.50"></text></g><g><title>coherent_trait (16,856,968 samples, 1.39%)</title><rect x="15.5060%" y="133" width="1.3928%" height="15" fill="rgb(221,200,47)"/><text x="15.7560%" y="143.50"></text></g><g><title>specialization_graph_of (16,831,868 samples, 1.39%)</title><rect x="15.5081%" y="117" width="1.3908%" height="15" fill="rgb(226,26,5)"/><text x="15.7581%" y="127.50"></text></g><g><title>coherence_checking (16,969,399 samples, 1.40%)</title><rect x="15.5038%" y="149" width="1.4021%" height="15" fill="rgb(249,33,26)"/><text x="15.7538%" y="159.50"></text></g><g><title>evaluate_obligation (8,069,340 samples, 0.67%)</title><rect x="18.7781%" y="101" width="0.6667%" height="15" fill="rgb(235,183,28)"/><text x="19.0281%" y="111.50"></text></g><g><title>generics_of (1,288,684 samples, 0.11%)</title><rect x="19.4550%" y="101" width="0.1065%" height="15" fill="rgb(221,5,38)"/><text x="19.7050%" y="111.50"></text></g><g><title>impl_trait_ref (1,666,478 samples, 0.14%)</title><rect x="19.5722%" y="101" width="0.1377%" height="15" fill="rgb(247,18,42)"/><text x="19.8222%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,411,555 samples, 0.12%)</title><rect x="19.5933%" y="85" width="0.1166%" height="15" fill="rgb(241,131,45)"/><text x="19.8433%" y="95.50"></text></g><g><title>evaluate_obligation (2,975,929 samples, 0.25%)</title><rect x="20.2379%" y="85" width="0.2459%" height="15" fill="rgb(249,31,29)"/><text x="20.4879%" y="95.50"></text></g><g><title>typeck (8,725,702 samples, 0.72%)</title><rect x="19.8060%" y="101" width="0.7210%" height="15" fill="rgb(225,111,53)"/><text x="20.0560%" y="111.50"></text></g><g><title>item_bodies_checking (43,840,933 samples, 3.62%)</title><rect x="16.9082%" y="149" width="3.6224%" height="15" fill="rgb(238,160,17)"/><text x="17.1582%" y="159.50">item..</text></g><g><title>typeck_item_bodies (43,837,093 samples, 3.62%)</title><rect x="16.9085%" y="133" width="3.6221%" height="15" fill="rgb(214,148,48)"/><text x="17.1585%" y="143.50">type..</text></g><g><title>typeck (43,803,242 samples, 3.62%)</title><rect x="16.9113%" y="117" width="3.6193%" height="15" fill="rgb(232,36,49)"/><text x="17.1613%" y="127.50">type..</text></g><g><title>mir_const (2,510,726 samples, 0.21%)</title><rect x="20.6692%" y="69" width="0.2075%" height="15" fill="rgb(209,103,24)"/><text x="20.9192%" y="79.50"></text></g><g><title>unsafety_check_result (2,416,455 samples, 0.20%)</title><rect x="20.6770%" y="53" width="0.1997%" height="15" fill="rgb(229,88,8)"/><text x="20.9270%" y="63.50"></text></g><g><title>mir_built (2,295,984 samples, 0.19%)</title><rect x="20.6870%" y="37" width="0.1897%" height="15" fill="rgb(213,181,19)"/><text x="20.9370%" y="47.50"></text></g><g><title>mir_promoted (2,598,237 samples, 0.21%)</title><rect x="20.6625%" y="85" width="0.2147%" height="15" fill="rgb(254,191,54)"/><text x="20.9125%" y="95.50"></text></g><g><title>item_types_checking (4,332,345 samples, 0.36%)</title><rect x="20.5306%" y="149" width="0.3580%" height="15" fill="rgb(241,83,37)"/><text x="20.7806%" y="159.50"></text></g><g><title>check_mod_item_types (4,328,495 samples, 0.36%)</title><rect x="20.5310%" y="133" width="0.3577%" height="15" fill="rgb(233,36,39)"/><text x="20.7810%" y="143.50"></text></g><g><title>type_of (3,324,255 samples, 0.27%)</title><rect x="20.6139%" y="117" width="0.2747%" height="15" fill="rgb(226,3,54)"/><text x="20.8639%" y="127.50"></text></g><g><title>mir_borrowck (3,319,485 samples, 0.27%)</title><rect x="20.6143%" y="101" width="0.2743%" height="15" fill="rgb(245,192,40)"/><text x="20.8643%" y="111.50"></text></g><g><title>type_collecting (2,547,247 samples, 0.21%)</title><rect x="20.8887%" y="149" width="0.2105%" height="15" fill="rgb(238,167,29)"/><text x="21.1387%" y="159.50"></text></g><g><title>collect_mod_item_types (2,534,447 samples, 0.21%)</title><rect x="20.8898%" y="133" width="0.2094%" height="15" fill="rgb(232,182,51)"/><text x="21.1398%" y="143.50"></text></g><g><title>analysis (102,651,522 samples, 8.48%)</title><rect x="12.8483%" y="181" width="8.4818%" height="15" fill="rgb(231,60,39)"/><text x="13.0983%" y="191.50">analysis</text></g><g><title>type_check_crate (70,552,884 samples, 5.83%)</title><rect x="15.5005%" y="165" width="5.8296%" height="15" fill="rgb(208,69,12)"/><text x="15.7505%" y="175.50">type_ch..</text></g><g><title>wf_checking (2,791,810 samples, 0.23%)</title><rect x="21.0994%" y="149" width="0.2307%" height="15" fill="rgb(235,93,37)"/><text x="21.3494%" y="159.50"></text></g><g><title>check_item_well_formed (2,195,241 samples, 0.18%)</title><rect x="21.1487%" y="133" width="0.1814%" height="15" fill="rgb(213,116,39)"/><text x="21.3987%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (2,262,812 samples, 0.19%)</title><rect x="31.7236%" y="149" width="0.1870%" height="15" fill="rgb(222,207,29)"/><text x="31.9736%" y="159.50"></text></g><g><title>const_caller_location (2,830,981 samples, 0.23%)</title><rect x="31.9106%" y="149" width="0.2339%" height="15" fill="rgb(206,96,30)"/><text x="32.1606%" y="159.50"></text></g><g><title>layout_of (2,581,768 samples, 0.21%)</title><rect x="32.7444%" y="133" width="0.2133%" height="15" fill="rgb(218,138,4)"/><text x="32.9944%" y="143.50"></text></g><g><title>predicates_of (2,736,885 samples, 0.23%)</title><rect x="33.4371%" y="117" width="0.2261%" height="15" fill="rgb(250,191,14)"/><text x="33.6871%" y="127.50"></text></g><g><title>predicates_defined_on (2,045,580 samples, 0.17%)</title><rect x="33.4942%" y="101" width="0.1690%" height="15" fill="rgb(239,60,40)"/><text x="33.7442%" y="111.50"></text></g><g><title>param_env (8,563,745 samples, 0.71%)</title><rect x="32.9578%" y="133" width="0.7076%" height="15" fill="rgb(206,27,48)"/><text x="33.2078%" y="143.50"></text></g><g><title>normalize_projection_ty (1,364,648 samples, 0.11%)</title><rect x="33.7126%" y="117" width="0.1128%" height="15" fill="rgb(225,35,8)"/><text x="33.9626%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,948,103 samples, 0.16%)</title><rect x="33.6654%" y="133" width="0.1610%" height="15" fill="rgb(250,213,24)"/><text x="33.9154%" y="143.50"></text></g><g><title>fn_abi_of_instance (20,291,363 samples, 1.68%)</title><rect x="32.1541%" y="149" width="1.6766%" height="15" fill="rgb(247,123,22)"/><text x="32.4041%" y="159.50"></text></g><g><title>layout_of (2,671,300 samples, 0.22%)</title><rect x="33.9359%" y="149" width="0.2207%" height="15" fill="rgb(231,138,38)"/><text x="34.1859%" y="159.50"></text></g><g><title>codegen_module (153,941,943 samples, 12.72%)</title><rect x="21.5167%" y="165" width="12.7198%" height="15" fill="rgb(231,145,46)"/><text x="21.7667%" y="175.50">codegen_module</text></g><g><title>codegen_crate (156,263,438 samples, 12.91%)</title><rect x="21.3311%" y="181" width="12.9116%" height="15" fill="rgb(251,118,11)"/><text x="21.5811%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (642,610,865 samples, 53.10%)</title><rect x="34.2615%" y="165" width="53.0970%" height="15" fill="rgb(217,147,25)"/><text x="34.5115%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (612,428,338 samples, 50.60%)</title><rect x="36.7554%" y="149" width="50.6031%" height="15" fill="rgb(247,81,37)"/><text x="37.0054%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (684,367,377 samples, 56.55%)</title><rect x="34.2427%" y="181" width="56.5472%" height="15" fill="rgb(209,12,38)"/><text x="34.4927%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (41,528,460 samples, 3.43%)</title><rect x="87.3585%" y="165" width="3.4314%" height="15" fill="rgb(227,1,9)"/><text x="87.6085%" y="175.50">LLV..</text></g><g><title>macro_expand_crate (15,011,958 samples, 1.24%)</title><rect x="90.8378%" y="165" width="1.2404%" height="15" fill="rgb(248,47,43)"/><text x="91.0878%" y="175.50"></text></g><g><title>expand_crate (14,985,428 samples, 1.24%)</title><rect x="90.8400%" y="149" width="1.2382%" height="15" fill="rgb(221,10,30)"/><text x="91.0900%" y="159.50"></text></g><g><title>metadata_register_crate (2,541,097 samples, 0.21%)</title><rect x="91.8682%" y="133" width="0.2100%" height="15" fill="rgb(210,229,1)"/><text x="92.1182%" y="143.50"></text></g><g><title>late_resolve_crate (2,299,015 samples, 0.19%)</title><rect x="92.1247%" y="149" width="0.1900%" height="15" fill="rgb(222,148,37)"/><text x="92.3747%" y="159.50"></text></g><g><title>configure_and_expand (18,606,706 samples, 1.54%)</title><rect x="90.7899%" y="181" width="1.5374%" height="15" fill="rgb(234,67,33)"/><text x="91.0399%" y="191.50"></text></g><g><title>resolve_crate (2,566,907 samples, 0.21%)</title><rect x="92.1152%" y="165" width="0.2121%" height="15" fill="rgb(247,98,35)"/><text x="92.3652%" y="175.50"></text></g><g><title>free_global_ctxt (10,741,243 samples, 0.89%)</title><rect x="92.4000%" y="181" width="0.8875%" height="15" fill="rgb(247,138,52)"/><text x="92.6500%" y="191.50"></text></g><g><title>item_attrs (2,296,020 samples, 0.19%)</title><rect x="93.9679%" y="85" width="0.1897%" height="15" fill="rgb(213,79,30)"/><text x="94.2179%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,178,529 samples, 0.18%)</title><rect x="93.9777%" y="69" width="0.1800%" height="15" fill="rgb(246,177,23)"/><text x="94.2277%" y="79.50"></text></g><g><title>codegen_fn_attrs (4,102,749 samples, 0.34%)</title><rect x="93.9078%" y="101" width="0.3390%" height="15" fill="rgb(230,62,27)"/><text x="94.1578%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,720,384 samples, 0.47%)</title><rect x="94.5369%" y="85" width="0.4727%" height="15" fill="rgb(216,154,8)"/><text x="94.7869%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,577,117 samples, 0.13%)</title><rect x="95.0096%" y="85" width="0.1303%" height="15" fill="rgb(244,35,45)"/><text x="95.2596%" y="95.50"></text></g><g><title>optimized_mir (9,401,191 samples, 0.78%)</title><rect x="94.3824%" y="101" width="0.7768%" height="15" fill="rgb(251,115,12)"/><text x="94.6324%" y="111.50"></text></g><g><title>evaluate_obligation (1,277,781 samples, 0.11%)</title><rect x="95.7942%" y="69" width="0.1056%" height="15" fill="rgb(240,54,50)"/><text x="96.0442%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (7,811,639 samples, 0.65%)</title><rect x="95.3889%" y="85" width="0.6455%" height="15" fill="rgb(233,84,52)"/><text x="95.6389%" y="95.50"></text></g><g><title>specialization_graph_of (4,439,887 samples, 0.37%)</title><rect x="96.2199%" y="85" width="0.3669%" height="15" fill="rgb(207,117,47)"/><text x="96.4699%" y="95.50"></text></g><g><title>impl_trait_ref (1,492,224 samples, 0.12%)</title><rect x="96.4635%" y="69" width="0.1233%" height="15" fill="rgb(249,43,39)"/><text x="96.7135%" y="79.50"></text></g><g><title>resolve_instance (18,169,934 samples, 1.50%)</title><rect x="95.1592%" y="101" width="1.5013%" height="15" fill="rgb(209,38,44)"/><text x="95.4092%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,507,545 samples, 0.12%)</title><rect x="96.7844%" y="85" width="0.1246%" height="15" fill="rgb(236,212,23)"/><text x="97.0344%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,475,484 samples, 0.12%)</title><rect x="96.7870%" y="69" width="0.1219%" height="15" fill="rgb(242,79,21)"/><text x="97.0370%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,421,644 samples, 0.12%)</title><rect x="96.7915%" y="53" width="0.1175%" height="15" fill="rgb(211,96,35)"/><text x="97.0415%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,930,908 samples, 0.16%)</title><rect x="96.7540%" y="101" width="0.1595%" height="15" fill="rgb(253,215,40)"/><text x="97.0040%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (43,564,060 samples, 3.60%)</title><rect x="93.3881%" y="117" width="3.5996%" height="15" fill="rgb(211,81,21)"/><text x="93.6381%" y="127.50">mono..</text></g><g><title>monomorphization_collector (43,598,680 samples, 3.60%)</title><rect x="93.3879%" y="133" width="3.6024%" height="15" fill="rgb(208,190,38)"/><text x="93.6379%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,678,499 samples, 0.39%)</title><rect x="96.9907%" y="117" width="0.3866%" height="15" fill="rgb(235,213,38)"/><text x="97.2407%" y="127.50"></text></g><g><title>symbol_name (4,200,876 samples, 0.35%)</title><rect x="97.0302%" y="101" width="0.3471%" height="15" fill="rgb(237,122,38)"/><text x="97.2802%" y="111.50"></text></g><g><title>cgu_partitioning_place_roots (1,319,744 samples, 0.11%)</title><rect x="97.4603%" y="101" width="0.1090%" height="15" fill="rgb(244,218,35)"/><text x="97.7103%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (50,845,046 samples, 4.20%)</title><rect x="93.3821%" y="149" width="4.2012%" height="15" fill="rgb(240,68,47)"/><text x="93.6321%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (7,176,245 samples, 0.59%)</title><rect x="96.9903%" y="133" width="0.5930%" height="15" fill="rgb(210,16,53)"/><text x="97.2403%" y="143.50"></text></g><g><title>cgu_partitioning (2,492,586 samples, 0.21%)</title><rect x="97.3773%" y="117" width="0.2060%" height="15" fill="rgb(235,124,12)"/><text x="97.6273%" y="127.50"></text></g><g><title>exported_symbols (51,115,389 samples, 4.22%)</title><rect x="93.3667%" y="165" width="4.2235%" height="15" fill="rgb(224,169,11)"/><text x="93.6167%" y="175.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,726,699 samples, 0.23%)</title><rect x="97.7648%" y="149" width="0.2253%" height="15" fill="rgb(250,166,2)"/><text x="98.0148%" y="159.50"></text></g><g><title>optimized_mir (4,778,499 samples, 0.39%)</title><rect x="97.5959%" y="165" width="0.3948%" height="15" fill="rgb(242,216,29)"/><text x="97.8459%" y="175.50"></text></g><g><title>generate_crate_metadata (56,944,741 samples, 4.71%)</title><rect x="93.2875%" y="181" width="4.7052%" height="15" fill="rgb(230,116,27)"/><text x="93.5375%" y="191.50">gener..</text></g><g><title>hir_lowering (3,485,687 samples, 0.29%)</title><rect x="97.9927%" y="181" width="0.2880%" height="15" fill="rgb(228,99,48)"/><text x="98.2427%" y="191.50"></text></g><g><title>finish_ongoing_codegen (6,254,976 samples, 0.52%)</title><rect x="98.2820%" y="165" width="0.5168%" height="15" fill="rgb(253,11,6)"/><text x="98.5320%" y="175.50"></text></g><g><title>link_crate (3,243,565 samples, 0.27%)</title><rect x="98.7989%" y="165" width="0.2680%" height="15" fill="rgb(247,143,39)"/><text x="99.0489%" y="175.50"></text></g><g><title>link_binary (3,200,414 samples, 0.26%)</title><rect x="98.8024%" y="149" width="0.2644%" height="15" fill="rgb(236,97,10)"/><text x="99.0524%" y="159.50"></text></g><g><title>link_rlib (2,535,707 samples, 0.21%)</title><rect x="98.8574%" y="133" width="0.2095%" height="15" fill="rgb(233,208,19)"/><text x="99.1074%" y="143.50"></text></g><g><title>link (9,527,211 samples, 0.79%)</title><rect x="98.2807%" y="181" width="0.7872%" height="15" fill="rgb(216,164,2)"/><text x="98.5307%" y="191.50"></text></g><g><title>parse_crate (7,633,440 samples, 0.63%)</title><rect x="99.0679%" y="181" width="0.6307%" height="15" fill="rgb(220,129,5)"/><text x="99.3179%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,873,751 samples, 0.24%)</title><rect x="99.7269%" y="181" width="0.2374%" height="15" fill="rgb(242,17,10)"/><text x="99.9769%" y="191.50"></text></g><g><title>all (1,210,257,783 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,210,257,783 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>