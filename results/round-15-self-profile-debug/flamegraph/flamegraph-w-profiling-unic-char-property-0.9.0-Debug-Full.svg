<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,917,281 samples, 2.50%)</title><rect x="0.7713%" y="181" width="2.4961%" height="15" fill="rgb(227,0,7)"/><text x="1.0213%" y="191.50">LL..</text></g><g><title>implied_outlives_bounds (163,001 samples, 0.21%)</title><rect x="8.6217%" y="133" width="0.2122%" height="15" fill="rgb(217,0,24)"/><text x="8.8717%" y="143.50"></text></g><g><title>param_env (77,560 samples, 0.10%)</title><rect x="9.5374%" y="101" width="0.1010%" height="15" fill="rgb(221,193,54)"/><text x="9.7874%" y="111.50"></text></g><g><title>codegen_fn_attrs (105,322 samples, 0.14%)</title><rect x="9.8033%" y="85" width="0.1371%" height="15" fill="rgb(248,212,6)"/><text x="10.0533%" y="95.50"></text></g><g><title>is_copy_raw (163,012 samples, 0.21%)</title><rect x="10.9740%" y="69" width="0.2122%" height="15" fill="rgb(208,68,35)"/><text x="11.2240%" y="79.50"></text></g><g><title>evaluate_obligation (137,822 samples, 0.18%)</title><rect x="11.0068%" y="53" width="0.1794%" height="15" fill="rgb(232,128,0)"/><text x="11.2568%" y="63.50"></text></g><g><title>needs_drop_raw (417,645 samples, 0.54%)</title><rect x="11.1862%" y="69" width="0.5437%" height="15" fill="rgb(207,160,47)"/><text x="11.4362%" y="79.50"></text></g><g><title>is_copy_raw (342,984 samples, 0.45%)</title><rect x="11.2834%" y="53" width="0.4465%" height="15" fill="rgb(228,23,34)"/><text x="11.5334%" y="63.50"></text></g><g><title>evaluate_obligation (301,944 samples, 0.39%)</title><rect x="11.3368%" y="37" width="0.3931%" height="15" fill="rgb(218,30,26)"/><text x="11.5868%" y="47.50"></text></g><g><title>thir_body (275,926 samples, 0.36%)</title><rect x="11.7947%" y="69" width="0.3592%" height="15" fill="rgb(220,122,19)"/><text x="12.0447%" y="79.50"></text></g><g><title>mir_const (2,278,542 samples, 2.97%)</title><rect x="9.1997%" y="117" width="2.9664%" height="15" fill="rgb(250,228,42)"/><text x="9.4497%" y="127.50">mir..</text></g><g><title>unsafety_check_result (1,941,561 samples, 2.53%)</title><rect x="9.6384%" y="101" width="2.5277%" height="15" fill="rgb(240,193,28)"/><text x="9.8884%" y="111.50">un..</text></g><g><title>mir_built (1,709,608 samples, 2.23%)</title><rect x="9.9404%" y="85" width="2.2257%" height="15" fill="rgb(216,20,37)"/><text x="10.1904%" y="95.50">m..</text></g><g><title>mir_promoted (2,709,140 samples, 3.53%)</title><rect x="8.8634%" y="133" width="3.5270%" height="15" fill="rgb(206,188,39)"/><text x="9.1134%" y="143.50">mir..</text></g><g><title>mir_const_qualif (172,293 samples, 0.22%)</title><rect x="12.1661%" y="117" width="0.2243%" height="15" fill="rgb(217,207,13)"/><text x="12.4161%" y="127.50"></text></g><g><title>mir_const (132,313 samples, 0.17%)</title><rect x="12.2182%" y="101" width="0.1723%" height="15" fill="rgb(231,73,38)"/><text x="12.4682%" y="111.50"></text></g><g><title>unsafety_check_result (86,312 samples, 0.11%)</title><rect x="12.2780%" y="85" width="0.1124%" height="15" fill="rgb(225,20,46)"/><text x="12.5280%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (104,442 samples, 0.14%)</title><rect x="12.3904%" y="133" width="0.1360%" height="15" fill="rgb(210,31,41)"/><text x="12.6404%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,133,292 samples, 1.48%)</title><rect x="12.5917%" y="133" width="1.4754%" height="15" fill="rgb(221,200,47)"/><text x="12.8417%" y="143.50"></text></g><g><title>MIR_borrow_checking (8,046,496 samples, 10.48%)</title><rect x="3.5941%" y="165" width="10.4757%" height="15" fill="rgb(226,26,5)"/><text x="3.8441%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (8,000,125 samples, 10.42%)</title><rect x="3.6545%" y="149" width="10.4153%" height="15" fill="rgb(249,33,26)"/><text x="3.9045%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (106,081 samples, 0.14%)</title><rect x="14.0699%" y="165" width="0.1381%" height="15" fill="rgb(235,183,28)"/><text x="14.3199%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (81,941 samples, 0.11%)</title><rect x="14.1013%" y="149" width="0.1067%" height="15" fill="rgb(221,5,38)"/><text x="14.3513%" y="159.50"></text></g><g><title>hir_module_items (173,893 samples, 0.23%)</title><rect x="14.2080%" y="165" width="0.2264%" height="15" fill="rgb(247,18,42)"/><text x="14.4580%" y="175.50"></text></g><g><title>codegen_fn_attrs (107,680 samples, 0.14%)</title><rect x="14.9877%" y="101" width="0.1402%" height="15" fill="rgb(241,131,45)"/><text x="15.2377%" y="111.50"></text></g><g><title>should_inherit_track_caller (207,943 samples, 0.27%)</title><rect x="14.8666%" y="117" width="0.2707%" height="15" fill="rgb(249,31,29)"/><text x="15.1166%" y="127.50"></text></g><g><title>codegen_fn_attrs (351,825 samples, 0.46%)</title><rect x="14.7219%" y="133" width="0.4580%" height="15" fill="rgb(225,111,53)"/><text x="14.9719%" y="143.50"></text></g><g><title>check_mod_attrs (539,037 samples, 0.70%)</title><rect x="14.4784%" y="149" width="0.7018%" height="15" fill="rgb(238,160,17)"/><text x="14.7284%" y="159.50"></text></g><g><title>check_mod_const_bodies (88,121 samples, 0.11%)</title><rect x="15.1801%" y="149" width="0.1147%" height="15" fill="rgb(214,148,48)"/><text x="15.4301%" y="159.50"></text></g><g><title>lookup_deprecation_entry (143,842 samples, 0.19%)</title><rect x="15.5818%" y="133" width="0.1873%" height="15" fill="rgb(232,36,49)"/><text x="15.8318%" y="143.50"></text></g><g><title>stability_index (91,221 samples, 0.12%)</title><rect x="15.6503%" y="117" width="0.1188%" height="15" fill="rgb(209,103,24)"/><text x="15.9003%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (374,784 samples, 0.49%)</title><rect x="15.3740%" y="149" width="0.4879%" height="15" fill="rgb(229,88,8)"/><text x="15.6240%" y="159.50"></text></g><g><title>looking_for_derive_registrar (77,351 samples, 0.10%)</title><rect x="15.8645%" y="149" width="0.1007%" height="15" fill="rgb(213,181,19)"/><text x="16.1145%" y="159.50"></text></g><g><title>misc_checking_1 (1,178,793 samples, 1.53%)</title><rect x="14.4349%" y="165" width="1.5347%" height="15" fill="rgb(254,191,54)"/><text x="14.6849%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (134,961 samples, 0.18%)</title><rect x="15.9711%" y="149" width="0.1757%" height="15" fill="rgb(241,83,37)"/><text x="16.2211%" y="159.50"></text></g><g><title>check_mod_liveness (101,441 samples, 0.13%)</title><rect x="16.0147%" y="133" width="0.1321%" height="15" fill="rgb(233,36,39)"/><text x="16.2647%" y="143.50"></text></g><g><title>misc_checking_2 (386,344 samples, 0.50%)</title><rect x="15.9695%" y="165" width="0.5030%" height="15" fill="rgb(226,3,54)"/><text x="16.2195%" y="175.50"></text></g><g><title>match_checking (250,173 samples, 0.33%)</title><rect x="16.1468%" y="149" width="0.3257%" height="15" fill="rgb(245,192,40)"/><text x="16.3968%" y="159.50"></text></g><g><title>check_match (234,573 samples, 0.31%)</title><rect x="16.1671%" y="133" width="0.3054%" height="15" fill="rgb(238,167,29)"/><text x="16.4171%" y="143.50"></text></g><g><title>check_private_in_public (86,231 samples, 0.11%)</title><rect x="16.4815%" y="149" width="0.1123%" height="15" fill="rgb(232,182,51)"/><text x="16.7315%" y="159.50"></text></g><g><title>death_checking (245,643 samples, 0.32%)</title><rect x="16.5938%" y="149" width="0.3198%" height="15" fill="rgb(231,60,39)"/><text x="16.8438%" y="159.50"></text></g><g><title>eval_to_const_value_raw (145,162 samples, 0.19%)</title><rect x="17.2694%" y="117" width="0.1890%" height="15" fill="rgb(208,69,12)"/><text x="17.5194%" y="127.50"></text></g><g><title>eval_to_const_value_raw (142,022 samples, 0.18%)</title><rect x="17.2735%" y="101" width="0.1849%" height="15" fill="rgb(235,93,37)"/><text x="17.5235%" y="111.50"></text></g><g><title>eval_to_allocation_raw (133,562 samples, 0.17%)</title><rect x="17.2845%" y="85" width="0.1739%" height="15" fill="rgb(213,116,39)"/><text x="17.5345%" y="95.50"></text></g><g><title>param_env (166,671 samples, 0.22%)</title><rect x="17.4584%" y="117" width="0.2170%" height="15" fill="rgb(222,207,29)"/><text x="17.7084%" y="127.50"></text></g><g><title>crate_lints (1,132,332 samples, 1.47%)</title><rect x="16.9153%" y="133" width="1.4742%" height="15" fill="rgb(206,96,30)"/><text x="17.1653%" y="143.50"></text></g><g><title>type_of (544,414 samples, 0.71%)</title><rect x="17.6807%" y="117" width="0.7088%" height="15" fill="rgb(218,138,4)"/><text x="17.9307%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (206,551 samples, 0.27%)</title><rect x="18.1206%" y="101" width="0.2689%" height="15" fill="rgb(250,191,14)"/><text x="18.3706%" y="111.50"></text></g><g><title>lint_checking (1,304,224 samples, 1.70%)</title><rect x="16.9136%" y="149" width="1.6980%" height="15" fill="rgb(239,60,40)"/><text x="17.1636%" y="159.50"></text></g><g><title>module_lints (170,572 samples, 0.22%)</title><rect x="18.3895%" y="133" width="0.2221%" height="15" fill="rgb(206,27,48)"/><text x="18.6395%" y="143.50"></text></g><g><title>lint_mod (166,162 samples, 0.22%)</title><rect x="18.3952%" y="117" width="0.2163%" height="15" fill="rgb(225,35,8)"/><text x="18.6452%" y="127.50"></text></g><g><title>privacy_access_levels (102,011 samples, 0.13%)</title><rect x="18.6115%" y="149" width="0.1328%" height="15" fill="rgb(250,213,24)"/><text x="18.8615%" y="159.50"></text></g><g><title>privacy_checking_modules (257,662 samples, 0.34%)</title><rect x="18.7444%" y="149" width="0.3354%" height="15" fill="rgb(247,123,22)"/><text x="18.9944%" y="159.50"></text></g><g><title>check_mod_privacy (254,132 samples, 0.33%)</title><rect x="18.7490%" y="133" width="0.3309%" height="15" fill="rgb(231,138,38)"/><text x="18.9990%" y="143.50"></text></g><g><title>misc_checking_3 (2,011,281 samples, 2.62%)</title><rect x="16.4725%" y="165" width="2.6185%" height="15" fill="rgb(231,145,46)"/><text x="16.7225%" y="175.50">mi..</text></g><g><title>adt_destructor (88,221 samples, 0.11%)</title><rect x="19.2577%" y="117" width="0.1149%" height="15" fill="rgb(251,118,11)"/><text x="19.5077%" y="127.50"></text></g><g><title>coherent_trait (77,221 samples, 0.10%)</title><rect x="19.2720%" y="101" width="0.1005%" height="15" fill="rgb(217,147,25)"/><text x="19.5220%" y="111.50"></text></g><g><title>is_copy_raw (205,672 samples, 0.27%)</title><rect x="19.3726%" y="117" width="0.2678%" height="15" fill="rgb(247,81,37)"/><text x="19.6226%" y="127.50"></text></g><g><title>evaluate_obligation (174,811 samples, 0.23%)</title><rect x="19.4127%" y="101" width="0.2276%" height="15" fill="rgb(209,12,38)"/><text x="19.6627%" y="111.50"></text></g><g><title>param_env (130,911 samples, 0.17%)</title><rect x="19.6403%" y="117" width="0.1704%" height="15" fill="rgb(227,1,9)"/><text x="19.8903%" y="127.50"></text></g><g><title>impl_parent (931,121 samples, 1.21%)</title><rect x="22.3256%" y="101" width="1.2122%" height="15" fill="rgb(248,47,43)"/><text x="22.5756%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (459,775 samples, 0.60%)</title><rect x="22.9393%" y="85" width="0.5986%" height="15" fill="rgb(221,10,30)"/><text x="23.1893%" y="95.50"></text></g><g><title>impl_trait_ref (2,510,042 samples, 3.27%)</title><rect x="23.5379%" y="101" width="3.2678%" height="15" fill="rgb(210,229,1)"/><text x="23.7879%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,995,807 samples, 2.60%)</title><rect x="24.2074%" y="85" width="2.5983%" height="15" fill="rgb(222,148,37)"/><text x="24.4574%" y="95.50">me..</text></g><g><title>coherent_trait (6,287,608 samples, 8.19%)</title><rect x="19.1814%" y="133" width="8.1858%" height="15" fill="rgb(234,67,33)"/><text x="19.4314%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (5,804,232 samples, 7.56%)</title><rect x="19.8108%" y="117" width="7.5565%" height="15" fill="rgb(247,98,35)"/><text x="20.0608%" y="127.50">specializa..</text></g><g><title>trait_impls_of (429,032 samples, 0.56%)</title><rect x="26.8087%" y="101" width="0.5586%" height="15" fill="rgb(247,138,52)"/><text x="27.0587%" y="111.50"></text></g><g><title>implementations_of_trait (100,910 samples, 0.13%)</title><rect x="27.2359%" y="85" width="0.1314%" height="15" fill="rgb(213,79,30)"/><text x="27.4859%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (89,550 samples, 0.12%)</title><rect x="27.2507%" y="69" width="0.1166%" height="15" fill="rgb(246,177,23)"/><text x="27.5007%" y="79.50"></text></g><g><title>coherence_checking (6,384,858 samples, 8.31%)</title><rect x="19.1459%" y="149" width="8.3124%" height="15" fill="rgb(230,62,27)"/><text x="19.3959%" y="159.50">coherence_ch..</text></g><g><title>associated_item (134,261 samples, 0.17%)</title><rect x="38.2750%" y="85" width="0.1748%" height="15" fill="rgb(216,154,8)"/><text x="38.5250%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (91,681 samples, 0.12%)</title><rect x="38.3304%" y="69" width="0.1194%" height="15" fill="rgb(244,35,45)"/><text x="38.5804%" y="79.50"></text></g><g><title>associated_items (226,163 samples, 0.29%)</title><rect x="38.1762%" y="101" width="0.2944%" height="15" fill="rgb(251,115,12)"/><text x="38.4262%" y="111.50"></text></g><g><title>dropck_outlives (182,911 samples, 0.24%)</title><rect x="38.5010%" y="101" width="0.2381%" height="15" fill="rgb(240,54,50)"/><text x="38.7510%" y="111.50"></text></g><g><title>specializes (146,582 samples, 0.19%)</title><rect x="39.5055%" y="85" width="0.1908%" height="15" fill="rgb(233,84,52)"/><text x="39.7555%" y="95.50"></text></g><g><title>param_env (131,331 samples, 0.17%)</title><rect x="39.5253%" y="69" width="0.1710%" height="15" fill="rgb(207,117,47)"/><text x="39.7753%" y="79.50"></text></g><g><title>def_span (109,791 samples, 0.14%)</title><rect x="39.5534%" y="53" width="0.1429%" height="15" fill="rgb(249,43,39)"/><text x="39.8034%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (108,301 samples, 0.14%)</title><rect x="39.5553%" y="37" width="0.1410%" height="15" fill="rgb(209,38,44)"/><text x="39.8053%" y="47.50"></text></g><g><title>evaluate_obligation (824,567 samples, 1.07%)</title><rect x="38.7391%" y="101" width="1.0735%" height="15" fill="rgb(236,212,23)"/><text x="38.9891%" y="111.50"></text></g><g><title>trait_impls_of (86,510 samples, 0.11%)</title><rect x="39.7000%" y="85" width="0.1126%" height="15" fill="rgb(242,79,21)"/><text x="39.9500%" y="95.50"></text></g><g><title>method_autoderef_steps (144,083 samples, 0.19%)</title><rect x="40.1559%" y="101" width="0.1876%" height="15" fill="rgb(211,96,35)"/><text x="40.4059%" y="111.50"></text></g><g><title>evaluate_obligation (76,983 samples, 0.10%)</title><rect x="40.2432%" y="85" width="0.1002%" height="15" fill="rgb(253,215,40)"/><text x="40.4932%" y="95.50"></text></g><g><title>evaluate_obligation (88,801 samples, 0.12%)</title><rect x="40.4001%" y="85" width="0.1156%" height="15" fill="rgb(211,81,21)"/><text x="40.6501%" y="95.50"></text></g><g><title>object_safety_violations (190,232 samples, 0.25%)</title><rect x="40.3435%" y="101" width="0.2477%" height="15" fill="rgb(208,190,38)"/><text x="40.5935%" y="111.50"></text></g><g><title>explicit_predicates_of (207,321 samples, 0.27%)</title><rect x="40.7664%" y="69" width="0.2699%" height="15" fill="rgb(235,213,38)"/><text x="41.0164%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (195,771 samples, 0.25%)</title><rect x="40.7814%" y="53" width="0.2549%" height="15" fill="rgb(237,122,38)"/><text x="41.0314%" y="63.50"></text></g><g><title>predicates_of (340,162 samples, 0.44%)</title><rect x="40.6202%" y="101" width="0.4429%" height="15" fill="rgb(244,218,35)"/><text x="40.8702%" y="111.50"></text></g><g><title>predicates_defined_on (284,752 samples, 0.37%)</title><rect x="40.6923%" y="85" width="0.3707%" height="15" fill="rgb(240,68,47)"/><text x="40.9423%" y="95.50"></text></g><g><title>associated_item (246,443 samples, 0.32%)</title><rect x="48.4325%" y="69" width="0.3208%" height="15" fill="rgb(210,16,53)"/><text x="48.6825%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (174,932 samples, 0.23%)</title><rect x="48.5256%" y="53" width="0.2277%" height="15" fill="rgb(235,124,12)"/><text x="48.7756%" y="63.50"></text></g><g><title>associated_items (390,195 samples, 0.51%)</title><rect x="48.2628%" y="85" width="0.5080%" height="15" fill="rgb(224,169,11)"/><text x="48.5128%" y="95.50"></text></g><g><title>dropck_outlives (118,601 samples, 0.15%)</title><rect x="48.7988%" y="85" width="0.1544%" height="15" fill="rgb(250,166,2)"/><text x="49.0488%" y="95.50"></text></g><g><title>evaluate_obligation (692,998 samples, 0.90%)</title><rect x="48.9532%" y="85" width="0.9022%" height="15" fill="rgb(242,216,29)"/><text x="49.2032%" y="95.50"></text></g><g><title>trait_impls_of (94,521 samples, 0.12%)</title><rect x="49.7324%" y="69" width="0.1231%" height="15" fill="rgb(230,116,27)"/><text x="49.9824%" y="79.50"></text></g><g><title>implied_outlives_bounds (79,512 samples, 0.10%)</title><rect x="50.0524%" y="85" width="0.1035%" height="15" fill="rgb(228,99,48)"/><text x="50.3024%" y="95.50"></text></g><g><title>is_copy_raw (219,991 samples, 0.29%)</title><rect x="50.1727%" y="85" width="0.2864%" height="15" fill="rgb(253,11,6)"/><text x="50.4227%" y="95.50"></text></g><g><title>evaluate_obligation (174,051 samples, 0.23%)</title><rect x="50.2325%" y="69" width="0.2266%" height="15" fill="rgb(247,143,39)"/><text x="50.4825%" y="79.50"></text></g><g><title>method_autoderef_steps (227,483 samples, 0.30%)</title><rect x="50.4848%" y="85" width="0.2962%" height="15" fill="rgb(236,97,10)"/><text x="50.7348%" y="95.50"></text></g><g><title>evaluate_obligation (125,441 samples, 0.16%)</title><rect x="50.6177%" y="69" width="0.1633%" height="15" fill="rgb(233,208,19)"/><text x="50.8677%" y="79.50"></text></g><g><title>predicates_of (138,510 samples, 0.18%)</title><rect x="50.7941%" y="85" width="0.1803%" height="15" fill="rgb(216,164,2)"/><text x="51.0441%" y="95.50"></text></g><g><title>predicates_defined_on (100,350 samples, 0.13%)</title><rect x="50.8437%" y="69" width="0.1306%" height="15" fill="rgb(220,129,5)"/><text x="51.0937%" y="79.50"></text></g><g><title>typeck (7,649,352 samples, 9.96%)</title><rect x="41.1373%" y="101" width="9.9587%" height="15" fill="rgb(242,17,10)"/><text x="41.3873%" y="111.50">typeck</text></g><g><title>item_bodies_checking (18,138,664 samples, 23.61%)</title><rect x="27.5157%" y="149" width="23.6147%" height="15" fill="rgb(242,107,0)"/><text x="27.7657%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,136,044 samples, 23.61%)</title><rect x="27.5191%" y="133" width="23.6113%" height="15" fill="rgb(251,28,31)"/><text x="27.7691%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (18,091,224 samples, 23.55%)</title><rect x="27.5775%" y="117" width="23.5529%" height="15" fill="rgb(233,223,10)"/><text x="27.8275%" y="127.50">typeck</text></g><g><title>item_types_checking (975,060 samples, 1.27%)</title><rect x="51.1304%" y="149" width="1.2694%" height="15" fill="rgb(215,21,27)"/><text x="51.3804%" y="159.50"></text></g><g><title>check_mod_item_types (966,220 samples, 1.26%)</title><rect x="51.1419%" y="133" width="1.2579%" height="15" fill="rgb(232,23,21)"/><text x="51.3919%" y="143.50"></text></g><g><title>typeck (289,873 samples, 0.38%)</title><rect x="52.0225%" y="117" width="0.3774%" height="15" fill="rgb(244,5,23)"/><text x="52.2725%" y="127.50"></text></g><g><title>associated_item (80,700 samples, 0.11%)</title><rect x="53.1413%" y="85" width="0.1051%" height="15" fill="rgb(226,81,46)"/><text x="53.3913%" y="95.50"></text></g><g><title>associated_items (126,331 samples, 0.16%)</title><rect x="53.0863%" y="101" width="0.1645%" height="15" fill="rgb(247,70,30)"/><text x="53.3363%" y="111.50"></text></g><g><title>fn_sig (459,125 samples, 0.60%)</title><rect x="52.7916%" y="117" width="0.5977%" height="15" fill="rgb(212,68,19)"/><text x="53.0416%" y="127.50"></text></g><g><title>named_region_map (163,713 samples, 0.21%)</title><rect x="53.6615%" y="101" width="0.2131%" height="15" fill="rgb(240,187,13)"/><text x="53.9115%" y="111.50"></text></g><g><title>resolve_lifetimes (139,182 samples, 0.18%)</title><rect x="53.6934%" y="85" width="0.1812%" height="15" fill="rgb(223,113,26)"/><text x="53.9434%" y="95.50"></text></g><g><title>generics_of (391,573 samples, 0.51%)</title><rect x="53.3893%" y="117" width="0.5098%" height="15" fill="rgb(206,192,2)"/><text x="53.6393%" y="127.50"></text></g><g><title>late_bound_vars_map (260,953 samples, 0.34%)</title><rect x="54.3728%" y="69" width="0.3397%" height="15" fill="rgb(241,108,4)"/><text x="54.6228%" y="79.50"></text></g><g><title>resolve_lifetimes (251,623 samples, 0.33%)</title><rect x="54.3849%" y="53" width="0.3276%" height="15" fill="rgb(247,173,49)"/><text x="54.6349%" y="63.50"></text></g><g><title>lint_levels (118,371 samples, 0.15%)</title><rect x="54.5584%" y="37" width="0.1541%" height="15" fill="rgb(224,114,35)"/><text x="54.8084%" y="47.50"></text></g><g><title>explicit_predicates_of (484,256 samples, 0.63%)</title><rect x="54.1395%" y="85" width="0.6305%" height="15" fill="rgb(245,159,27)"/><text x="54.3895%" y="95.50"></text></g><g><title>predicates_of (802,932 samples, 1.05%)</title><rect x="53.9410%" y="117" width="1.0453%" height="15" fill="rgb(245,172,44)"/><text x="54.1910%" y="127.50"></text></g><g><title>predicates_defined_on (742,460 samples, 0.97%)</title><rect x="54.0198%" y="101" width="0.9666%" height="15" fill="rgb(236,23,11)"/><text x="54.2698%" y="111.50"></text></g><g><title>inferred_outlives_of (166,212 samples, 0.22%)</title><rect x="54.7700%" y="85" width="0.2164%" height="15" fill="rgb(205,117,38)"/><text x="55.0200%" y="95.50"></text></g><g><title>inferred_outlives_crate (142,522 samples, 0.19%)</title><rect x="54.8008%" y="69" width="0.1855%" height="15" fill="rgb(237,72,25)"/><text x="55.0508%" y="79.50"></text></g><g><title>super_predicates_of (201,301 samples, 0.26%)</title><rect x="54.9864%" y="117" width="0.2621%" height="15" fill="rgb(244,70,9)"/><text x="55.2364%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (191,961 samples, 0.25%)</title><rect x="54.9985%" y="101" width="0.2499%" height="15" fill="rgb(217,125,39)"/><text x="55.2485%" y="111.50"></text></g><g><title>type_collecting (2,351,695 samples, 3.06%)</title><rect x="52.4014%" y="149" width="3.0617%" height="15" fill="rgb(235,36,10)"/><text x="52.6514%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (2,333,115 samples, 3.04%)</title><rect x="52.4256%" y="133" width="3.0375%" height="15" fill="rgb(251,123,47)"/><text x="52.6756%" y="143.50">col..</text></g><g><title>type_of (158,342 samples, 0.21%)</title><rect x="55.2570%" y="117" width="0.2061%" height="15" fill="rgb(221,13,13)"/><text x="55.5070%" y="127.50"></text></g><g><title>evaluate_obligation (470,305 samples, 0.61%)</title><rect x="57.3278%" y="117" width="0.6123%" height="15" fill="rgb(238,131,9)"/><text x="57.5778%" y="127.50"></text></g><g><title>implied_outlives_bounds (231,802 samples, 0.30%)</title><rect x="57.9481%" y="117" width="0.3018%" height="15" fill="rgb(211,50,8)"/><text x="58.1981%" y="127.50"></text></g><g><title>param_env (185,164 samples, 0.24%)</title><rect x="58.2499%" y="117" width="0.2411%" height="15" fill="rgb(245,182,24)"/><text x="58.4999%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,346,276 samples, 3.05%)</title><rect x="55.7180%" y="133" width="3.0546%" height="15" fill="rgb(242,14,37)"/><text x="55.9680%" y="143.50">che..</text></g><g><title>region_scope_tree (184,742 samples, 0.24%)</title><rect x="58.5321%" y="117" width="0.2405%" height="15" fill="rgb(246,228,12)"/><text x="58.7821%" y="127.50"></text></g><g><title>implied_outlives_bounds (117,110 samples, 0.15%)</title><rect x="61.6863%" y="117" width="0.1525%" height="15" fill="rgb(213,55,15)"/><text x="61.9363%" y="127.50"></text></g><g><title>param_env (403,656 samples, 0.53%)</title><rect x="61.8410%" y="117" width="0.5255%" height="15" fill="rgb(209,9,3)"/><text x="62.0910%" y="127.50"></text></g><g><title>predicates_of (81,261 samples, 0.11%)</title><rect x="62.3665%" y="117" width="0.1058%" height="15" fill="rgb(230,59,30)"/><text x="62.6165%" y="127.50"></text></g><g><title>trait_impls_of (217,853 samples, 0.28%)</title><rect x="62.5272%" y="117" width="0.2836%" height="15" fill="rgb(209,121,21)"/><text x="62.7772%" y="127.50"></text></g><g><title>check_item_well_formed (3,213,895 samples, 4.18%)</title><rect x="58.7726%" y="133" width="4.1842%" height="15" fill="rgb(220,109,13)"/><text x="59.0226%" y="143.50">check..</text></g><g><title>variances_of (112,131 samples, 0.15%)</title><rect x="62.8108%" y="117" width="0.1460%" height="15" fill="rgb(232,18,1)"/><text x="63.0608%" y="127.50"></text></g><g><title>crate_variances (107,171 samples, 0.14%)</title><rect x="62.8173%" y="101" width="0.1395%" height="15" fill="rgb(215,41,42)"/><text x="63.0673%" y="111.50"></text></g><g><title>evaluate_obligation (197,532 samples, 0.26%)</title><rect x="64.5652%" y="117" width="0.2572%" height="15" fill="rgb(224,123,36)"/><text x="64.8152%" y="127.50"></text></g><g><title>implied_outlives_bounds (188,921 samples, 0.25%)</title><rect x="64.8224%" y="117" width="0.2460%" height="15" fill="rgb(240,125,3)"/><text x="65.0724%" y="127.50"></text></g><g><title>param_env (321,404 samples, 0.42%)</title><rect x="65.0684%" y="117" width="0.4184%" height="15" fill="rgb(205,98,50)"/><text x="65.3184%" y="127.50"></text></g><g><title>analysis (47,865,541 samples, 62.32%)</title><rect x="3.2675%" y="181" width="62.3160%" height="15" fill="rgb(205,185,37)"/><text x="3.5175%" y="191.50">analysis</text></g><g><title>type_check_crate (35,711,332 samples, 46.49%)</title><rect x="19.0910%" y="165" width="46.4925%" height="15" fill="rgb(238,207,15)"/><text x="19.3410%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,771,304 samples, 10.12%)</title><rect x="55.4661%" y="149" width="10.1174%" height="15" fill="rgb(213,199,42)"/><text x="55.7161%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,017,592 samples, 2.63%)</title><rect x="62.9568%" y="133" width="2.6267%" height="15" fill="rgb(235,201,11)"/><text x="63.2068%" y="143.50">ch..</text></g><g><title>codegen_module (237,172 samples, 0.31%)</title><rect x="66.0432%" y="165" width="0.3088%" height="15" fill="rgb(207,46,11)"/><text x="66.2932%" y="175.50"></text></g><g><title>codegen_crate (606,857 samples, 0.79%)</title><rect x="65.5925%" y="181" width="0.7901%" height="15" fill="rgb(241,35,35)"/><text x="65.8425%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,523,677 samples, 1.98%)</title><rect x="66.3999%" y="165" width="1.9837%" height="15" fill="rgb(243,32,47)"/><text x="66.6499%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (1,466,726 samples, 1.91%)</title><rect x="66.4740%" y="149" width="1.9095%" height="15" fill="rgb(247,202,23)"/><text x="66.7240%" y="159.50">L..</text></g><g><title>codegen_module_optimize (1,765,179 samples, 2.30%)</title><rect x="66.3826%" y="181" width="2.2981%" height="15" fill="rgb(219,102,11)"/><text x="66.6326%" y="191.50">c..</text></g><g><title>LLVM_module_optimize (228,212 samples, 0.30%)</title><rect x="68.3835%" y="165" width="0.2971%" height="15" fill="rgb(243,110,44)"/><text x="68.6335%" y="175.50"></text></g><g><title>AST_validation (125,331 samples, 0.16%)</title><rect x="68.8857%" y="165" width="0.1632%" height="15" fill="rgb(222,74,54)"/><text x="69.1357%" y="175.50"></text></g><g><title>metadata_load_macro (118,912 samples, 0.15%)</title><rect x="84.1725%" y="133" width="0.1548%" height="15" fill="rgb(216,99,12)"/><text x="84.4225%" y="143.50"></text></g><g><title>metadata_register_crate (182,472 samples, 0.24%)</title><rect x="84.3273%" y="133" width="0.2376%" height="15" fill="rgb(226,22,26)"/><text x="84.5773%" y="143.50"></text></g><g><title>macro_expand_crate (11,982,559 samples, 15.60%)</title><rect x="69.2093%" y="165" width="15.6001%" height="15" fill="rgb(217,163,10)"/><text x="69.4593%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (11,963,269 samples, 15.57%)</title><rect x="69.2344%" y="149" width="15.5750%" height="15" fill="rgb(213,25,53)"/><text x="69.4844%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (187,852 samples, 0.24%)</title><rect x="84.5648%" y="133" width="0.2446%" height="15" fill="rgb(252,105,26)"/><text x="84.8148%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (80,031 samples, 0.10%)</title><rect x="84.8149%" y="165" width="0.1042%" height="15" fill="rgb(220,39,43)"/><text x="85.0649%" y="175.50"></text></g><g><title>finalize_imports (78,541 samples, 0.10%)</title><rect x="84.9305%" y="149" width="0.1023%" height="15" fill="rgb(229,68,48)"/><text x="85.1805%" y="159.50"></text></g><g><title>finalize_macro_resolutions (142,142 samples, 0.19%)</title><rect x="85.0328%" y="149" width="0.1851%" height="15" fill="rgb(252,8,32)"/><text x="85.2828%" y="159.50"></text></g><g><title>late_resolve_crate (1,004,000 samples, 1.31%)</title><rect x="85.2178%" y="149" width="1.3071%" height="15" fill="rgb(223,20,43)"/><text x="85.4678%" y="159.50"></text></g><g><title>configure_and_expand (13,829,708 samples, 18.00%)</title><rect x="68.6807%" y="181" width="18.0049%" height="15" fill="rgb(229,81,49)"/><text x="68.9307%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,356,825 samples, 1.77%)</title><rect x="84.9191%" y="165" width="1.7664%" height="15" fill="rgb(236,28,36)"/><text x="85.1691%" y="175.50"></text></g><g><title>drop_ast (127,031 samples, 0.17%)</title><rect x="86.6855%" y="181" width="0.1654%" height="15" fill="rgb(249,185,26)"/><text x="86.9355%" y="191.50"></text></g><g><title>early_lint_checks (323,853 samples, 0.42%)</title><rect x="86.8684%" y="181" width="0.4216%" height="15" fill="rgb(249,174,33)"/><text x="87.1184%" y="191.50"></text></g><g><title>free_global_ctxt (1,313,814 samples, 1.71%)</title><rect x="87.2900%" y="181" width="1.7105%" height="15" fill="rgb(233,201,37)"/><text x="87.5400%" y="191.50"></text></g><g><title>exported_symbols (104,931 samples, 0.14%)</title><rect x="90.1877%" y="165" width="0.1366%" height="15" fill="rgb(221,78,26)"/><text x="90.4377%" y="175.50"></text></g><g><title>layout_of (102,791 samples, 0.13%)</title><rect x="92.0887%" y="133" width="0.1338%" height="15" fill="rgb(250,127,30)"/><text x="92.3387%" y="143.50"></text></g><g><title>layout_of (90,261 samples, 0.12%)</title><rect x="92.1050%" y="117" width="0.1175%" height="15" fill="rgb(230,49,44)"/><text x="92.3550%" y="127.50"></text></g><g><title>layout_of (458,506 samples, 0.60%)</title><rect x="91.6804%" y="149" width="0.5969%" height="15" fill="rgb(229,67,23)"/><text x="91.9304%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (844,945 samples, 1.10%)</title><rect x="92.2773%" y="149" width="1.1000%" height="15" fill="rgb(249,83,47)"/><text x="92.5273%" y="159.50"></text></g><g><title>optimized_mir (2,334,234 samples, 3.04%)</title><rect x="90.3663%" y="165" width="3.0389%" height="15" fill="rgb(215,43,3)"/><text x="90.6163%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (3,431,497 samples, 4.47%)</title><rect x="89.0004%" y="181" width="4.4675%" height="15" fill="rgb(238,154,13)"/><text x="89.2504%" y="191.50">gener..</text></g><g><title>hir_lowering (2,657,907 samples, 3.46%)</title><rect x="93.4679%" y="181" width="3.4603%" height="15" fill="rgb(219,56,2)"/><text x="93.7179%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (232,382 samples, 0.30%)</title><rect x="96.9429%" y="165" width="0.3025%" height="15" fill="rgb(233,0,4)"/><text x="97.1929%" y="175.50"></text></g><g><title>link_crate (625,067 samples, 0.81%)</title><rect x="97.2455%" y="165" width="0.8138%" height="15" fill="rgb(235,30,7)"/><text x="97.4955%" y="175.50"></text></g><g><title>link_binary (609,577 samples, 0.79%)</title><rect x="97.2656%" y="149" width="0.7936%" height="15" fill="rgb(250,79,13)"/><text x="97.5156%" y="159.50"></text></g><g><title>link_rlib (395,345 samples, 0.51%)</title><rect x="97.5446%" y="133" width="0.5147%" height="15" fill="rgb(211,146,34)"/><text x="97.7946%" y="143.50"></text></g><g><title>link (873,699 samples, 1.14%)</title><rect x="96.9282%" y="181" width="1.1375%" height="15" fill="rgb(228,22,38)"/><text x="97.1782%" y="191.50"></text></g><g><title>parse_crate (360,274 samples, 0.47%)</title><rect x="98.0657%" y="181" width="0.4690%" height="15" fill="rgb(235,168,5)"/><text x="98.3157%" y="191.50"></text></g><g><title>prepare_outputs (307,203 samples, 0.40%)</title><rect x="98.5434%" y="181" width="0.3999%" height="15" fill="rgb(221,155,16)"/><text x="98.7934%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (414,935 samples, 0.54%)</title><rect x="98.9434%" y="181" width="0.5402%" height="15" fill="rgb(215,215,53)"/><text x="99.1934%" y="191.50"></text></g><g><title>setup_global_ctxt (106,431 samples, 0.14%)</title><rect x="99.4842%" y="181" width="0.1386%" height="15" fill="rgb(223,4,10)"/><text x="99.7342%" y="191.50"></text></g><g><title>all (76,810,942 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (76,810,942 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (289,723 samples, 0.38%)</title><rect x="99.6228%" y="181" width="0.3772%" height="15" fill="rgb(234,150,53)"/><text x="99.8728%" y="191.50"></text></g></svg></svg>