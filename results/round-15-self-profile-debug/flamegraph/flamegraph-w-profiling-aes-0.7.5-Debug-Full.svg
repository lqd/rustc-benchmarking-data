<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (160,616,717 samples, 13.65%)</title><rect x="0.1725%" y="165" width="13.6528%" height="15" fill="rgb(227,0,7)"/><text x="0.4225%" y="175.50">LLVM_passes</text></g><g><title>mir_promoted (3,587,348 samples, 0.30%)</title><rect x="18.3991%" y="101" width="0.3049%" height="15" fill="rgb(217,0,24)"/><text x="18.6491%" y="111.50"></text></g><g><title>mir_const_qualif_const_arg (2,996,252 samples, 0.25%)</title><rect x="18.4493%" y="85" width="0.2547%" height="15" fill="rgb(221,193,54)"/><text x="18.6993%" y="95.50"></text></g><g><title>mir_const (2,533,537 samples, 0.22%)</title><rect x="18.4887%" y="69" width="0.2154%" height="15" fill="rgb(248,212,6)"/><text x="18.7387%" y="79.50"></text></g><g><title>unsafety_check_result_for_const_arg (1,712,510 samples, 0.15%)</title><rect x="18.5585%" y="53" width="0.1456%" height="15" fill="rgb(208,68,35)"/><text x="18.8085%" y="63.50"></text></g><g><title>mir_built (1,480,278 samples, 0.13%)</title><rect x="18.5782%" y="37" width="0.1258%" height="15" fill="rgb(232,128,0)"/><text x="18.8282%" y="47.50"></text></g><g><title>mir_borrowck_const_arg (9,095,569 samples, 0.77%)</title><rect x="17.9328%" y="117" width="0.7731%" height="15" fill="rgb(207,160,47)"/><text x="18.1828%" y="127.50"></text></g><g><title>specialization_graph_of (2,201,285 samples, 0.19%)</title><rect x="20.7157%" y="37" width="0.1871%" height="15" fill="rgb(228,23,34)"/><text x="20.9657%" y="47.50"></text></g><g><title>resolve_instance (3,376,053 samples, 0.29%)</title><rect x="20.6274%" y="53" width="0.2870%" height="15" fill="rgb(218,30,26)"/><text x="20.8774%" y="63.50"></text></g><g><title>thir_body (6,012,426 samples, 0.51%)</title><rect x="20.9184%" y="53" width="0.5111%" height="15" fill="rgb(220,122,19)"/><text x="21.1684%" y="63.50"></text></g><g><title>mir_const (29,198,579 samples, 2.48%)</title><rect x="18.9503%" y="101" width="2.4819%" height="15" fill="rgb(250,228,42)"/><text x="19.2003%" y="111.50">mi..</text></g><g><title>unsafety_check_result (26,232,048 samples, 2.23%)</title><rect x="19.2024%" y="85" width="2.2298%" height="15" fill="rgb(240,193,28)"/><text x="19.4524%" y="95.50">u..</text></g><g><title>mir_built (24,021,618 samples, 2.04%)</title><rect x="19.3903%" y="69" width="2.0419%" height="15" fill="rgb(216,20,37)"/><text x="19.6403%" y="79.50">m..</text></g><g><title>mir_promoted (32,968,968 samples, 2.80%)</title><rect x="18.7060%" y="117" width="2.8024%" height="15" fill="rgb(206,188,39)"/><text x="18.9560%" y="127.50">mi..</text></g><g><title>type_op_normalize_fn_sig (1,419,716 samples, 0.12%)</title><rect x="21.5287%" y="117" width="0.1207%" height="15" fill="rgb(217,207,13)"/><text x="21.7787%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,013,060 samples, 0.17%)</title><rect x="21.6528%" y="117" width="0.1711%" height="15" fill="rgb(231,73,38)"/><text x="21.9028%" y="127.50"></text></g><g><title>MIR_borrow_checking (92,959,010 samples, 7.90%)</title><rect x="13.9228%" y="149" width="7.9017%" height="15" fill="rgb(225,20,46)"/><text x="14.1728%" y="159.50">MIR_borrow_..</text></g><g><title>mir_borrowck (92,456,975 samples, 7.86%)</title><rect x="13.9655%" y="133" width="7.8590%" height="15" fill="rgb(210,31,41)"/><text x="14.2155%" y="143.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (1,521,555 samples, 0.13%)</title><rect x="21.8884%" y="117" width="0.1293%" height="15" fill="rgb(221,200,47)"/><text x="22.1384%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,854,308 samples, 0.16%)</title><rect x="21.8604%" y="133" width="0.1576%" height="15" fill="rgb(226,26,5)"/><text x="22.1104%" y="143.50"></text></g><g><title>MIR_effect_checking (2,322,433 samples, 0.20%)</title><rect x="21.8245%" y="149" width="0.1974%" height="15" fill="rgb(249,33,26)"/><text x="22.0745%" y="159.50"></text></g><g><title>check_mod_attrs (1,648,817 samples, 0.14%)</title><rect x="22.0820%" y="133" width="0.1402%" height="15" fill="rgb(235,183,28)"/><text x="22.3320%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,346,793 samples, 0.11%)</title><rect x="22.2759%" y="133" width="0.1145%" height="15" fill="rgb(221,5,38)"/><text x="22.5259%" y="143.50"></text></g><g><title>misc_checking_1 (3,814,358 samples, 0.32%)</title><rect x="22.0770%" y="149" width="0.3242%" height="15" fill="rgb(247,18,42)"/><text x="22.3270%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (2,073,661 samples, 0.18%)</title><rect x="22.4014%" y="133" width="0.1763%" height="15" fill="rgb(241,131,45)"/><text x="22.6514%" y="143.50"></text></g><g><title>check_mod_liveness (1,652,255 samples, 0.14%)</title><rect x="22.4372%" y="117" width="0.1404%" height="15" fill="rgb(249,31,29)"/><text x="22.6872%" y="127.50"></text></g><g><title>misc_checking_2 (4,098,481 samples, 0.35%)</title><rect x="22.4012%" y="149" width="0.3484%" height="15" fill="rgb(225,111,53)"/><text x="22.6512%" y="159.50"></text></g><g><title>match_checking (2,023,260 samples, 0.17%)</title><rect x="22.5776%" y="133" width="0.1720%" height="15" fill="rgb(238,160,17)"/><text x="22.8276%" y="143.50"></text></g><g><title>check_match (1,896,429 samples, 0.16%)</title><rect x="22.5884%" y="117" width="0.1612%" height="15" fill="rgb(214,148,48)"/><text x="22.8384%" y="127.50"></text></g><g><title>death_checking (1,197,572 samples, 0.10%)</title><rect x="22.7989%" y="133" width="0.1018%" height="15" fill="rgb(232,36,49)"/><text x="23.0489%" y="143.50"></text></g><g><title>crate_lints (4,149,502 samples, 0.35%)</title><rect x="22.9009%" y="117" width="0.3527%" height="15" fill="rgb(209,103,24)"/><text x="23.1509%" y="127.50"></text></g><g><title>lint_checking (6,719,118 samples, 0.57%)</title><rect x="22.9007%" y="133" width="0.5711%" height="15" fill="rgb(229,88,8)"/><text x="23.1507%" y="143.50"></text></g><g><title>module_lints (2,567,556 samples, 0.22%)</title><rect x="23.2536%" y="117" width="0.2182%" height="15" fill="rgb(213,181,19)"/><text x="23.5036%" y="127.50"></text></g><g><title>lint_mod (2,554,096 samples, 0.22%)</title><rect x="23.2547%" y="101" width="0.2171%" height="15" fill="rgb(254,191,54)"/><text x="23.5047%" y="111.50"></text></g><g><title>privacy_checking_modules (3,281,743 samples, 0.28%)</title><rect x="23.5238%" y="133" width="0.2790%" height="15" fill="rgb(241,83,37)"/><text x="23.7738%" y="143.50"></text></g><g><title>check_mod_privacy (3,272,213 samples, 0.28%)</title><rect x="23.5246%" y="117" width="0.2781%" height="15" fill="rgb(233,36,39)"/><text x="23.7746%" y="127.50"></text></g><g><title>misc_checking_3 (12,419,375 samples, 1.06%)</title><rect x="22.7496%" y="149" width="1.0557%" height="15" fill="rgb(226,3,54)"/><text x="22.9996%" y="159.50"></text></g><g><title>impl_trait_ref (1,432,947 samples, 0.12%)</title><rect x="23.9727%" y="85" width="0.1218%" height="15" fill="rgb(245,192,40)"/><text x="24.2227%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,221,372 samples, 0.10%)</title><rect x="23.9907%" y="69" width="0.1038%" height="15" fill="rgb(238,167,29)"/><text x="24.2407%" y="79.50"></text></g><g><title>coherent_trait (3,354,954 samples, 0.29%)</title><rect x="23.8277%" y="117" width="0.2852%" height="15" fill="rgb(232,182,51)"/><text x="24.0777%" y="127.50"></text></g><g><title>specialization_graph_of (3,017,301 samples, 0.26%)</title><rect x="23.8564%" y="101" width="0.2565%" height="15" fill="rgb(231,60,39)"/><text x="24.1064%" y="111.50"></text></g><g><title>coherence_checking (3,503,975 samples, 0.30%)</title><rect x="23.8264%" y="133" width="0.2978%" height="15" fill="rgb(208,69,12)"/><text x="24.0764%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,656,216 samples, 0.14%)</title><rect x="35.4595%" y="85" width="0.1408%" height="15" fill="rgb(235,93,37)"/><text x="35.7095%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,641,366 samples, 0.14%)</title><rect x="35.4607%" y="69" width="0.1395%" height="15" fill="rgb(213,116,39)"/><text x="35.7107%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,586,238 samples, 0.13%)</title><rect x="36.2078%" y="69" width="0.1348%" height="15" fill="rgb(222,207,29)"/><text x="36.4578%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,544,867 samples, 0.13%)</title><rect x="36.2113%" y="53" width="0.1313%" height="15" fill="rgb(206,96,30)"/><text x="36.4613%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,507,317 samples, 0.13%)</title><rect x="36.2145%" y="37" width="0.1281%" height="15" fill="rgb(218,138,4)"/><text x="36.4645%" y="47.50"></text></g><g><title>generics_of (1,414,362 samples, 0.12%)</title><rect x="36.3426%" y="69" width="0.1202%" height="15" fill="rgb(250,191,14)"/><text x="36.5926%" y="79.50"></text></g><g><title>impl_trait_ref (1,766,624 samples, 0.15%)</title><rect x="36.4864%" y="69" width="0.1502%" height="15" fill="rgb(239,60,40)"/><text x="36.7364%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,429,122 samples, 0.12%)</title><rect x="36.5151%" y="53" width="0.1215%" height="15" fill="rgb(206,27,48)"/><text x="36.7651%" y="63.50"></text></g><g><title>predicates_of (1,347,701 samples, 0.11%)</title><rect x="36.6435%" y="69" width="0.1146%" height="15" fill="rgb(225,35,8)"/><text x="36.8935%" y="79.50"></text></g><g><title>specializes (2,978,185 samples, 0.25%)</title><rect x="36.7643%" y="69" width="0.2532%" height="15" fill="rgb(250,213,24)"/><text x="37.0143%" y="79.50"></text></g><g><title>param_env (1,736,913 samples, 0.15%)</title><rect x="36.8698%" y="53" width="0.1476%" height="15" fill="rgb(247,123,22)"/><text x="37.1198%" y="63.50"></text></g><g><title>evaluate_obligation (17,318,224 samples, 1.47%)</title><rect x="35.6003%" y="85" width="1.4721%" height="15" fill="rgb(231,138,38)"/><text x="35.8503%" y="95.50"></text></g><g><title>evaluate_obligation (1,328,233 samples, 0.11%)</title><rect x="39.1342%" y="53" width="0.1129%" height="15" fill="rgb(231,145,46)"/><text x="39.3842%" y="63.50"></text></g><g><title>opt_const_param_of (23,652,926 samples, 2.01%)</title><rect x="37.2635%" y="85" width="2.0105%" height="15" fill="rgb(251,118,11)"/><text x="37.5135%" y="95.50">o..</text></g><g><title>typeck (23,435,384 samples, 1.99%)</title><rect x="37.2820%" y="69" width="1.9921%" height="15" fill="rgb(217,147,25)"/><text x="37.5320%" y="79.50">t..</text></g><g><title>param_env (1,190,941 samples, 0.10%)</title><rect x="39.5837%" y="69" width="0.1012%" height="15" fill="rgb(247,81,37)"/><text x="39.8337%" y="79.50"></text></g><g><title>typeck_const_arg (3,590,336 samples, 0.31%)</title><rect x="39.3996%" y="85" width="0.3052%" height="15" fill="rgb(209,12,38)"/><text x="39.6496%" y="95.50"></text></g><g><title>item_bodies_checking (183,349,575 samples, 15.59%)</title><rect x="24.1292%" y="133" width="15.5851%" height="15" fill="rgb(227,1,9)"/><text x="24.3792%" y="143.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (183,346,315 samples, 15.58%)</title><rect x="24.1295%" y="117" width="15.5848%" height="15" fill="rgb(248,47,43)"/><text x="24.3795%" y="127.50">typeck_item_bodies</text></g><g><title>typeck (183,011,112 samples, 15.56%)</title><rect x="24.1580%" y="101" width="15.5563%" height="15" fill="rgb(221,10,30)"/><text x="24.4080%" y="111.50">typeck</text></g><g><title>item_types_checking (4,092,781 samples, 0.35%)</title><rect x="39.7143%" y="133" width="0.3479%" height="15" fill="rgb(210,229,1)"/><text x="39.9643%" y="143.50"></text></g><g><title>check_mod_item_types (4,079,251 samples, 0.35%)</title><rect x="39.7155%" y="117" width="0.3467%" height="15" fill="rgb(222,148,37)"/><text x="39.9655%" y="127.50"></text></g><g><title>named_region_map (1,445,066 samples, 0.12%)</title><rect x="40.1579%" y="85" width="0.1228%" height="15" fill="rgb(234,67,33)"/><text x="40.4079%" y="95.50"></text></g><g><title>resolve_lifetimes (1,391,775 samples, 0.12%)</title><rect x="40.1624%" y="69" width="0.1183%" height="15" fill="rgb(247,98,35)"/><text x="40.4124%" y="79.50"></text></g><g><title>generics_of (1,630,880 samples, 0.14%)</title><rect x="40.1439%" y="101" width="0.1386%" height="15" fill="rgb(247,138,52)"/><text x="40.3939%" y="111.50"></text></g><g><title>type_collecting (3,156,971 samples, 0.27%)</title><rect x="40.0630%" y="133" width="0.2683%" height="15" fill="rgb(213,79,30)"/><text x="40.3130%" y="143.50"></text></g><g><title>collect_mod_item_types (3,144,201 samples, 0.27%)</title><rect x="40.0641%" y="117" width="0.2673%" height="15" fill="rgb(246,177,23)"/><text x="40.3141%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,049,014 samples, 0.34%)</title><rect x="40.3727%" y="117" width="0.3442%" height="15" fill="rgb(230,62,27)"/><text x="40.6227%" y="127.50"></text></g><g><title>evaluate_obligation (1,214,851 samples, 0.10%)</title><rect x="40.9245%" y="101" width="0.1033%" height="15" fill="rgb(216,154,8)"/><text x="41.1745%" y="111.50"></text></g><g><title>region_scope_tree (1,446,107 samples, 0.12%)</title><rect x="41.0977%" y="101" width="0.1229%" height="15" fill="rgb(244,35,45)"/><text x="41.3477%" y="111.50"></text></g><g><title>analysis (322,345,016 samples, 27.40%)</title><rect x="13.8253%" y="165" width="27.4000%" height="15" fill="rgb(251,115,12)"/><text x="14.0753%" y="175.50">analysis</text></g><g><title>type_check_crate (204,935,961 samples, 17.42%)</title><rect x="23.8053%" y="149" width="17.4200%" height="15" fill="rgb(240,54,50)"/><text x="24.0553%" y="159.50">type_check_crate</text></g><g><title>wf_checking (10,489,465 samples, 0.89%)</title><rect x="40.3337%" y="133" width="0.8916%" height="15" fill="rgb(233,84,52)"/><text x="40.5837%" y="143.50"></text></g><g><title>check_item_well_formed (5,981,840 samples, 0.51%)</title><rect x="40.7168%" y="117" width="0.5085%" height="15" fill="rgb(207,117,47)"/><text x="40.9668%" y="127.50"></text></g><g><title>const_caller_location (3,029,274 samples, 0.26%)</title><rect x="45.7499%" y="133" width="0.2575%" height="15" fill="rgb(249,43,39)"/><text x="45.9999%" y="143.50"></text></g><g><title>param_env (2,884,707 samples, 0.25%)</title><rect x="46.3115%" y="117" width="0.2452%" height="15" fill="rgb(209,38,44)"/><text x="46.5615%" y="127.50"></text></g><g><title>normalize_projection_ty (1,186,592 samples, 0.10%)</title><rect x="46.5877%" y="101" width="0.1009%" height="15" fill="rgb(236,212,23)"/><text x="46.8377%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,558,067 samples, 0.13%)</title><rect x="46.5568%" y="117" width="0.1324%" height="15" fill="rgb(242,79,21)"/><text x="46.8068%" y="127.50"></text></g><g><title>fn_abi_of_instance (8,036,172 samples, 0.68%)</title><rect x="46.0074%" y="133" width="0.6831%" height="15" fill="rgb(211,96,35)"/><text x="46.2574%" y="143.50"></text></g><g><title>codegen_module (63,877,469 samples, 5.43%)</title><rect x="41.4025%" y="149" width="5.4297%" height="15" fill="rgb(253,215,40)"/><text x="41.6525%" y="159.50">codegen..</text></g><g><title>codegen_crate (66,003,271 samples, 5.61%)</title><rect x="41.2262%" y="165" width="5.6104%" height="15" fill="rgb(211,81,21)"/><text x="41.4762%" y="175.50">codegen..</text></g><g><title>LLVM_module_codegen (307,841,965 samples, 26.17%)</title><rect x="46.8578%" y="149" width="26.1672%" height="15" fill="rgb(208,190,38)"/><text x="47.1078%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (294,722,765 samples, 25.05%)</title><rect x="47.9730%" y="133" width="25.0521%" height="15" fill="rgb(235,213,38)"/><text x="48.2230%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (350,387,101 samples, 29.78%)</title><rect x="46.8366%" y="165" width="29.7837%" height="15" fill="rgb(237,122,38)"/><text x="47.0866%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (42,295,354 samples, 3.60%)</title><rect x="73.0250%" y="149" width="3.5952%" height="15" fill="rgb(244,218,35)"/><text x="73.2750%" y="159.50">LLVM..</text></g><g><title>macro_expand_crate (61,913,419 samples, 5.26%)</title><rect x="76.7116%" y="149" width="5.2628%" height="15" fill="rgb(240,68,47)"/><text x="76.9616%" y="159.50">macro_..</text></g><g><title>expand_crate (61,882,509 samples, 5.26%)</title><rect x="76.7142%" y="133" width="5.2601%" height="15" fill="rgb(210,16,53)"/><text x="76.9642%" y="143.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (1,372,691 samples, 0.12%)</title><rect x="81.8577%" y="117" width="0.1167%" height="15" fill="rgb(235,124,12)"/><text x="82.1077%" y="127.50"></text></g><g><title>finalize_imports (1,428,184 samples, 0.12%)</title><rect x="81.9857%" y="133" width="0.1214%" height="15" fill="rgb(224,169,11)"/><text x="82.2357%" y="143.50"></text></g><g><title>late_resolve_crate (6,598,266 samples, 0.56%)</title><rect x="82.1363%" y="133" width="0.5609%" height="15" fill="rgb(250,166,2)"/><text x="82.3863%" y="143.50"></text></g><g><title>configure_and_expand (72,097,681 samples, 6.13%)</title><rect x="76.6202%" y="165" width="6.1285%" height="15" fill="rgb(242,216,29)"/><text x="76.8702%" y="175.50">configur..</text></g><g><title>resolve_crate (8,985,410 samples, 0.76%)</title><rect x="81.9849%" y="149" width="0.7638%" height="15" fill="rgb(230,116,27)"/><text x="82.2349%" y="159.50"></text></g><g><title>early_lint_checks (1,917,480 samples, 0.16%)</title><rect x="82.8212%" y="165" width="0.1630%" height="15" fill="rgb(228,99,48)"/><text x="83.0712%" y="175.50"></text></g><g><title>free_global_ctxt (8,523,244 samples, 0.72%)</title><rect x="82.9842%" y="165" width="0.7245%" height="15" fill="rgb(253,11,6)"/><text x="83.2342%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,349,914 samples, 0.62%)</title><rect x="85.6393%" y="69" width="0.6248%" height="15" fill="rgb(247,143,39)"/><text x="85.8893%" y="79.50"></text></g><g><title>optimized_mir (17,122,107 samples, 1.46%)</title><rect x="84.9045%" y="85" width="1.4554%" height="15" fill="rgb(236,97,10)"/><text x="85.1545%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,761,447 samples, 0.23%)</title><rect x="86.4152%" y="69" width="0.2347%" height="15" fill="rgb(233,208,19)"/><text x="86.6652%" y="79.50"></text></g><g><title>specialization_graph_of (1,742,697 samples, 0.15%)</title><rect x="86.6792%" y="69" width="0.1481%" height="15" fill="rgb(216,164,2)"/><text x="86.9292%" y="79.50"></text></g><g><title>resolve_instance (5,708,988 samples, 0.49%)</title><rect x="86.3599%" y="85" width="0.4853%" height="15" fill="rgb(220,129,5)"/><text x="86.6099%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (27,390,955 samples, 2.33%)</title><rect x="84.6261%" y="101" width="2.3283%" height="15" fill="rgb(242,17,10)"/><text x="84.8761%" y="111.50">m..</text></g><g><title>monomorphization_collector (27,509,436 samples, 2.34%)</title><rect x="84.6256%" y="117" width="2.3384%" height="15" fill="rgb(242,107,0)"/><text x="84.8756%" y="127.50">m..</text></g><g><title>assert_symbols_are_distinct (1,374,544 samples, 0.12%)</title><rect x="86.9644%" y="101" width="0.1168%" height="15" fill="rgb(251,28,31)"/><text x="87.2144%" y="111.50"></text></g><g><title>symbol_name (1,266,402 samples, 0.11%)</title><rect x="86.9736%" y="85" width="0.1076%" height="15" fill="rgb(233,223,10)"/><text x="87.2236%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (29,598,956 samples, 2.52%)</title><rect x="84.6216%" y="133" width="2.5160%" height="15" fill="rgb(215,21,27)"/><text x="84.8716%" y="143.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (2,042,330 samples, 0.17%)</title><rect x="86.9640%" y="117" width="0.1736%" height="15" fill="rgb(232,23,21)"/><text x="87.2140%" y="127.50"></text></g><g><title>exported_symbols (30,008,211 samples, 2.55%)</title><rect x="84.6167%" y="149" width="2.5508%" height="15" fill="rgb(244,5,23)"/><text x="84.8667%" y="159.50">ex..</text></g><g><title>layout_of (1,434,932 samples, 0.12%)</title><rect x="87.8641%" y="133" width="0.1220%" height="15" fill="rgb(226,81,46)"/><text x="88.1141%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,726,290 samples, 0.66%)</title><rect x="87.9860%" y="133" width="0.6568%" height="15" fill="rgb(247,70,30)"/><text x="88.2360%" y="143.50"></text></g><g><title>optimized_mir (16,895,487 samples, 1.44%)</title><rect x="87.2299%" y="149" width="1.4362%" height="15" fill="rgb(212,68,19)"/><text x="87.4799%" y="159.50"></text></g><g><title>generate_crate_metadata (58,579,796 samples, 4.98%)</title><rect x="83.7087%" y="165" width="4.9794%" height="15" fill="rgb(240,187,13)"/><text x="83.9587%" y="175.50">genera..</text></g><g><title>hir_lowering (12,359,783 samples, 1.05%)</title><rect x="88.6881%" y="165" width="1.0506%" height="15" fill="rgb(223,113,26)"/><text x="88.9381%" y="175.50"></text></g><g><title>finish_ongoing_codegen (108,775,980 samples, 9.25%)</title><rect x="89.7402%" y="149" width="9.2462%" height="15" fill="rgb(206,192,2)"/><text x="89.9902%" y="159.50">finish_ongoin..</text></g><g><title>link_crate (6,041,910 samples, 0.51%)</title><rect x="98.9864%" y="149" width="0.5136%" height="15" fill="rgb(241,108,4)"/><text x="99.2364%" y="159.50"></text></g><g><title>link_binary (6,004,560 samples, 0.51%)</title><rect x="98.9896%" y="133" width="0.5104%" height="15" fill="rgb(247,173,49)"/><text x="99.2396%" y="143.50"></text></g><g><title>link_rlib (5,075,921 samples, 0.43%)</title><rect x="99.0685%" y="117" width="0.4315%" height="15" fill="rgb(224,114,35)"/><text x="99.3185%" y="127.50"></text></g><g><title>link (114,848,040 samples, 9.76%)</title><rect x="89.7387%" y="165" width="9.7623%" height="15" fill="rgb(245,159,27)"/><text x="89.9887%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (3,048,261 samples, 0.26%)</title><rect x="99.5916%" y="165" width="0.2591%" height="15" fill="rgb(245,172,44)"/><text x="99.8416%" y="175.50"></text></g><g><title>all (1,176,440,868 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,176,440,868 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (1,663,527 samples, 0.14%)</title><rect x="99.8586%" y="165" width="0.1414%" height="15" fill="rgb(237,72,25)"/><text x="100.1086%" y="175.50"></text></g></svg></svg>