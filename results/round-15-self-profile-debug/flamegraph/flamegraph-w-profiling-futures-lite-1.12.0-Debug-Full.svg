<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (52,493,940 samples, 3.73%)</title><rect x="0.1354%" y="197" width="3.7289%" height="15" fill="rgb(227,0,7)"/><text x="0.3854%" y="207.50">LLVM..</text></g><g><title>is_copy_raw (13,796,849 samples, 0.98%)</title><rect x="15.5641%" y="69" width="0.9801%" height="15" fill="rgb(217,0,24)"/><text x="15.8141%" y="79.50"></text></g><g><title>evaluate_obligation (11,601,651 samples, 0.82%)</title><rect x="15.7201%" y="53" width="0.8241%" height="15" fill="rgb(221,193,54)"/><text x="15.9701%" y="63.50"></text></g><g><title>needs_drop_raw (15,906,944 samples, 1.13%)</title><rect x="15.4181%" y="85" width="1.1299%" height="15" fill="rgb(248,212,6)"/><text x="15.6681%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,574,335 samples, 0.18%)</title><rect x="16.6715%" y="69" width="0.1829%" height="15" fill="rgb(208,68,35)"/><text x="16.9215%" y="79.50"></text></g><g><title>resolve_instance (5,314,032 samples, 0.38%)</title><rect x="16.5516%" y="85" width="0.3775%" height="15" fill="rgb(232,128,0)"/><text x="16.8016%" y="95.50"></text></g><g><title>thir_body (8,475,496 samples, 0.60%)</title><rect x="16.9444%" y="85" width="0.6021%" height="15" fill="rgb(207,160,47)"/><text x="17.1944%" y="95.50"></text></g><g><title>mir_const (67,290,857 samples, 4.78%)</title><rect x="12.7871%" y="133" width="4.7800%" height="15" fill="rgb(228,23,34)"/><text x="13.0371%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (59,796,921 samples, 4.25%)</title><rect x="13.3194%" y="117" width="4.2477%" height="15" fill="rgb(218,30,26)"/><text x="13.5694%" y="127.50">unsaf..</text></g><g><title>mir_built (54,703,339 samples, 3.89%)</title><rect x="13.6812%" y="101" width="3.8858%" height="15" fill="rgb(220,122,19)"/><text x="13.9312%" y="111.50">mir_..</text></g><g><title>mir_const_qualif (1,970,926 samples, 0.14%)</title><rect x="17.5671%" y="133" width="0.1400%" height="15" fill="rgb(250,228,42)"/><text x="17.8171%" y="143.50"></text></g><g><title>mir_promoted (75,742,841 samples, 5.38%)</title><rect x="12.3267%" y="149" width="5.3804%" height="15" fill="rgb(240,193,28)"/><text x="12.5767%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (5,607,144 samples, 0.40%)</title><rect x="17.7071%" y="149" width="0.3983%" height="15" fill="rgb(216,20,37)"/><text x="17.9571%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (5,145,746 samples, 0.37%)</title><rect x="18.1054%" y="149" width="0.3655%" height="15" fill="rgb(206,188,39)"/><text x="18.3554%" y="159.50"></text></g><g><title>normalize_projection_ty (2,809,823 samples, 0.20%)</title><rect x="18.2713%" y="133" width="0.1996%" height="15" fill="rgb(217,207,13)"/><text x="18.5213%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,444,577 samples, 0.24%)</title><rect x="18.5401%" y="149" width="0.2447%" height="15" fill="rgb(231,73,38)"/><text x="18.7901%" y="159.50"></text></g><g><title>normalize_projection_ty (2,281,998 samples, 0.16%)</title><rect x="18.6227%" y="133" width="0.1621%" height="15" fill="rgb(225,20,46)"/><text x="18.8727%" y="143.50"></text></g><g><title>type_op_prove_predicate (26,290,207 samples, 1.87%)</title><rect x="18.7848%" y="149" width="1.8675%" height="15" fill="rgb(210,31,41)"/><text x="19.0348%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (233,953,792 samples, 16.62%)</title><rect x="4.0345%" y="181" width="16.6188%" height="15" fill="rgb(221,200,47)"/><text x="4.2845%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (232,731,478 samples, 16.53%)</title><rect x="4.1214%" y="165" width="16.5320%" height="15" fill="rgb(226,26,5)"/><text x="4.3714%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (1,913,131 samples, 0.14%)</title><rect x="20.7431%" y="181" width="0.1359%" height="15" fill="rgb(249,33,26)"/><text x="20.9931%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,798,207 samples, 0.13%)</title><rect x="21.0563%" y="149" width="0.1277%" height="15" fill="rgb(235,183,28)"/><text x="21.3063%" y="159.50"></text></g><g><title>check_mod_attrs (4,251,543 samples, 0.30%)</title><rect x="20.8820%" y="165" width="0.3020%" height="15" fill="rgb(221,5,38)"/><text x="21.1320%" y="175.50"></text></g><g><title>lookup_deprecation_entry (1,516,527 samples, 0.11%)</title><rect x="21.4428%" y="149" width="0.1077%" height="15" fill="rgb(247,18,42)"/><text x="21.6928%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (3,401,595 samples, 0.24%)</title><rect x="21.3217%" y="165" width="0.2416%" height="15" fill="rgb(241,131,45)"/><text x="21.5717%" y="175.50"></text></g><g><title>misc_checking_1 (10,063,981 samples, 0.71%)</title><rect x="20.8790%" y="181" width="0.7149%" height="15" fill="rgb(249,31,29)"/><text x="21.1290%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (4,320,053 samples, 0.31%)</title><rect x="21.5941%" y="165" width="0.3069%" height="15" fill="rgb(225,111,53)"/><text x="21.8441%" y="175.50"></text></g><g><title>check_mod_liveness (3,526,556 samples, 0.25%)</title><rect x="21.6505%" y="149" width="0.2505%" height="15" fill="rgb(238,160,17)"/><text x="21.9005%" y="159.50"></text></g><g><title>misc_checking_2 (9,244,093 samples, 0.66%)</title><rect x="21.5939%" y="181" width="0.6567%" height="15" fill="rgb(214,148,48)"/><text x="21.8439%" y="191.50"></text></g><g><title>match_checking (4,921,600 samples, 0.35%)</title><rect x="21.9010%" y="165" width="0.3496%" height="15" fill="rgb(232,36,49)"/><text x="22.1510%" y="175.50"></text></g><g><title>check_match (4,574,447 samples, 0.32%)</title><rect x="21.9256%" y="149" width="0.3249%" height="15" fill="rgb(209,103,24)"/><text x="22.1756%" y="159.50"></text></g><g><title>check_private_in_public (2,381,953 samples, 0.17%)</title><rect x="22.2518%" y="165" width="0.1692%" height="15" fill="rgb(229,88,8)"/><text x="22.5018%" y="175.50"></text></g><g><title>death_checking (4,054,241 samples, 0.29%)</title><rect x="22.4210%" y="165" width="0.2880%" height="15" fill="rgb(213,181,19)"/><text x="22.6710%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,431,392 samples, 0.10%)</title><rect x="23.0670%" y="133" width="0.1017%" height="15" fill="rgb(254,191,54)"/><text x="23.3170%" y="143.50"></text></g><g><title>crate_lints (8,329,664 samples, 0.59%)</title><rect x="22.7092%" y="149" width="0.5917%" height="15" fill="rgb(241,83,37)"/><text x="22.9592%" y="159.50"></text></g><g><title>lint_checking (12,710,358 samples, 0.90%)</title><rect x="22.7090%" y="165" width="0.9029%" height="15" fill="rgb(233,36,39)"/><text x="22.9590%" y="175.50"></text></g><g><title>module_lints (4,377,274 samples, 0.31%)</title><rect x="23.3009%" y="149" width="0.3109%" height="15" fill="rgb(226,3,54)"/><text x="23.5509%" y="159.50"></text></g><g><title>lint_mod (4,368,274 samples, 0.31%)</title><rect x="23.3015%" y="133" width="0.3103%" height="15" fill="rgb(245,192,40)"/><text x="23.5515%" y="143.50"></text></g><g><title>privacy_access_levels (3,492,135 samples, 0.25%)</title><rect x="23.6118%" y="165" width="0.2481%" height="15" fill="rgb(238,167,29)"/><text x="23.8618%" y="175.50"></text></g><g><title>privacy_checking_modules (11,645,708 samples, 0.83%)</title><rect x="23.8599%" y="165" width="0.8272%" height="15" fill="rgb(232,182,51)"/><text x="24.1099%" y="175.50"></text></g><g><title>check_mod_privacy (11,638,257 samples, 0.83%)</title><rect x="23.8604%" y="149" width="0.8267%" height="15" fill="rgb(231,60,39)"/><text x="24.1104%" y="159.50"></text></g><g><title>misc_checking_3 (34,440,657 samples, 2.45%)</title><rect x="22.2506%" y="181" width="2.4465%" height="15" fill="rgb(208,69,12)"/><text x="22.5006%" y="191.50">mi..</text></g><g><title>impl_parent (3,284,048 samples, 0.23%)</title><rect x="25.1607%" y="117" width="0.2333%" height="15" fill="rgb(235,93,37)"/><text x="25.4107%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,705,749 samples, 0.12%)</title><rect x="25.2728%" y="101" width="0.1212%" height="15" fill="rgb(213,116,39)"/><text x="25.5228%" y="111.50"></text></g><g><title>impl_trait_ref (6,188,881 samples, 0.44%)</title><rect x="25.3939%" y="117" width="0.4396%" height="15" fill="rgb(222,207,29)"/><text x="25.6439%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,006,838 samples, 0.36%)</title><rect x="25.4779%" y="101" width="0.3557%" height="15" fill="rgb(206,96,30)"/><text x="25.7279%" y="111.50"></text></g><g><title>coherent_trait (16,796,849 samples, 1.19%)</title><rect x="24.7395%" y="149" width="1.1932%" height="15" fill="rgb(218,138,4)"/><text x="24.9895%" y="159.50"></text></g><g><title>specialization_graph_of (16,262,084 samples, 1.16%)</title><rect x="24.7775%" y="133" width="1.1552%" height="15" fill="rgb(250,191,14)"/><text x="25.0275%" y="143.50"></text></g><g><title>coherence_checking (17,557,937 samples, 1.25%)</title><rect x="24.7353%" y="165" width="1.2472%" height="15" fill="rgb(239,60,40)"/><text x="24.9853%" y="175.50"></text></g><g><title>dropck_outlives (4,292,527 samples, 0.30%)</title><rect x="40.3955%" y="117" width="0.3049%" height="15" fill="rgb(206,27,48)"/><text x="40.6455%" y="127.50"></text></g><g><title>evaluate_obligation (10,992,599 samples, 0.78%)</title><rect x="40.7004%" y="117" width="0.7809%" height="15" fill="rgb(225,35,8)"/><text x="40.9504%" y="127.50"></text></g><g><title>evaluate_obligation (2,904,388 samples, 0.21%)</title><rect x="42.2334%" y="101" width="0.2063%" height="15" fill="rgb(250,213,24)"/><text x="42.4834%" y="111.50"></text></g><g><title>method_autoderef_steps (10,651,407 samples, 0.76%)</title><rect x="41.6851%" y="117" width="0.7566%" height="15" fill="rgb(247,123,22)"/><text x="41.9351%" y="127.50"></text></g><g><title>evaluate_obligation (2,251,195 samples, 0.16%)</title><rect x="43.5050%" y="101" width="0.1599%" height="15" fill="rgb(231,138,38)"/><text x="43.7550%" y="111.50"></text></g><g><title>typeck (18,069,492 samples, 1.28%)</title><rect x="42.5572%" y="117" width="1.2836%" height="15" fill="rgb(231,145,46)"/><text x="42.8072%" y="127.50"></text></g><g><title>item_bodies_checking (251,177,605 samples, 17.84%)</title><rect x="26.0160%" y="165" width="17.8423%" height="15" fill="rgb(251,118,11)"/><text x="26.2660%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (251,173,155 samples, 17.84%)</title><rect x="26.0164%" y="149" width="17.8420%" height="15" fill="rgb(217,147,25)"/><text x="26.2664%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (250,265,514 samples, 17.78%)</title><rect x="26.0808%" y="133" width="17.7775%" height="15" fill="rgb(247,81,37)"/><text x="26.3308%" y="143.50">typeck</text></g><g><title>mir_built (1,974,080 samples, 0.14%)</title><rect x="45.0846%" y="53" width="0.1402%" height="15" fill="rgb(209,12,38)"/><text x="45.3346%" y="63.50"></text></g><g><title>typeck (1,787,388 samples, 0.13%)</title><rect x="45.0979%" y="37" width="0.1270%" height="15" fill="rgb(227,1,9)"/><text x="45.3479%" y="47.50"></text></g><g><title>mir_const (2,444,835 samples, 0.17%)</title><rect x="45.0765%" y="85" width="0.1737%" height="15" fill="rgb(248,47,43)"/><text x="45.3265%" y="95.50"></text></g><g><title>unsafety_check_result (2,350,483 samples, 0.17%)</title><rect x="45.0832%" y="69" width="0.1670%" height="15" fill="rgb(221,10,30)"/><text x="45.3332%" y="79.50"></text></g><g><title>mir_promoted (2,529,226 samples, 0.18%)</title><rect x="45.0710%" y="101" width="0.1797%" height="15" fill="rgb(210,229,1)"/><text x="45.3210%" y="111.50"></text></g><g><title>type_of (4,231,753 samples, 0.30%)</title><rect x="44.9547%" y="133" width="0.3006%" height="15" fill="rgb(222,148,37)"/><text x="45.2047%" y="143.50"></text></g><g><title>mir_borrowck (4,219,143 samples, 0.30%)</title><rect x="44.9556%" y="117" width="0.2997%" height="15" fill="rgb(234,67,33)"/><text x="45.2056%" y="127.50"></text></g><g><title>item_types_checking (23,559,607 samples, 1.67%)</title><rect x="43.8583%" y="165" width="1.6735%" height="15" fill="rgb(247,98,35)"/><text x="44.1083%" y="175.50"></text></g><g><title>check_mod_item_types (23,550,487 samples, 1.67%)</title><rect x="43.8590%" y="149" width="1.6729%" height="15" fill="rgb(247,138,52)"/><text x="44.1090%" y="159.50"></text></g><g><title>typeck (3,893,051 samples, 0.28%)</title><rect x="45.2553%" y="133" width="0.2765%" height="15" fill="rgb(213,79,30)"/><text x="45.5053%" y="143.50"></text></g><g><title>fn_sig (2,782,720 samples, 0.20%)</title><rect x="45.7862%" y="133" width="0.1977%" height="15" fill="rgb(246,177,23)"/><text x="46.0362%" y="143.50"></text></g><g><title>is_late_bound_map (6,900,807 samples, 0.49%)</title><rect x="46.0946%" y="117" width="0.4902%" height="15" fill="rgb(230,62,27)"/><text x="46.3446%" y="127.50"></text></g><g><title>resolve_lifetimes (6,717,923 samples, 0.48%)</title><rect x="46.1076%" y="101" width="0.4772%" height="15" fill="rgb(216,154,8)"/><text x="46.3576%" y="111.50"></text></g><g><title>lint_levels (4,453,805 samples, 0.32%)</title><rect x="46.2684%" y="85" width="0.3164%" height="15" fill="rgb(244,35,45)"/><text x="46.5184%" y="95.50"></text></g><g><title>generics_of (9,580,858 samples, 0.68%)</title><rect x="45.9838%" y="133" width="0.6806%" height="15" fill="rgb(251,115,12)"/><text x="46.2338%" y="143.50"></text></g><g><title>late_bound_vars_map (2,791,376 samples, 0.20%)</title><rect x="47.1336%" y="85" width="0.1983%" height="15" fill="rgb(240,54,50)"/><text x="47.3836%" y="95.50"></text></g><g><title>resolve_lifetimes (2,580,435 samples, 0.18%)</title><rect x="47.1486%" y="69" width="0.1833%" height="15" fill="rgb(233,84,52)"/><text x="47.3986%" y="79.50"></text></g><g><title>explicit_predicates_of (7,298,742 samples, 0.52%)</title><rect x="46.8473%" y="101" width="0.5185%" height="15" fill="rgb(207,117,47)"/><text x="47.0973%" y="111.50"></text></g><g><title>predicates_of (14,070,771 samples, 1.00%)</title><rect x="46.6863%" y="133" width="0.9995%" height="15" fill="rgb(249,43,39)"/><text x="46.9363%" y="143.50"></text></g><g><title>predicates_defined_on (13,044,703 samples, 0.93%)</title><rect x="46.7592%" y="117" width="0.9266%" height="15" fill="rgb(209,38,44)"/><text x="47.0092%" y="127.50"></text></g><g><title>inferred_outlives_of (4,504,840 samples, 0.32%)</title><rect x="47.3658%" y="101" width="0.3200%" height="15" fill="rgb(236,212,23)"/><text x="47.6158%" y="111.50"></text></g><g><title>inferred_outlives_crate (4,185,532 samples, 0.30%)</title><rect x="47.3885%" y="85" width="0.2973%" height="15" fill="rgb(242,79,21)"/><text x="47.6385%" y="95.50"></text></g><g><title>type_of (2,467,378 samples, 0.18%)</title><rect x="47.5105%" y="69" width="0.1753%" height="15" fill="rgb(211,96,35)"/><text x="47.7605%" y="79.50"></text></g><g><title>type_collecting (32,149,315 samples, 2.28%)</title><rect x="45.5322%" y="165" width="2.2837%" height="15" fill="rgb(253,215,40)"/><text x="45.7822%" y="175.50">t..</text></g><g><title>collect_mod_item_types (32,124,134 samples, 2.28%)</title><rect x="45.5340%" y="149" width="2.2819%" height="15" fill="rgb(211,81,21)"/><text x="45.7840%" y="159.50">c..</text></g><g><title>type_of (1,654,533 samples, 0.12%)</title><rect x="47.6984%" y="133" width="0.1175%" height="15" fill="rgb(208,190,38)"/><text x="47.9484%" y="143.50"></text></g><g><title>evaluate_obligation (13,334,429 samples, 0.95%)</title><rect x="50.1486%" y="133" width="0.9472%" height="15" fill="rgb(235,213,38)"/><text x="50.3986%" y="143.50"></text></g><g><title>implied_outlives_bounds (4,517,516 samples, 0.32%)</title><rect x="51.1098%" y="133" width="0.3209%" height="15" fill="rgb(237,122,38)"/><text x="51.3598%" y="143.50"></text></g><g><title>param_env (3,528,437 samples, 0.25%)</title><rect x="51.4455%" y="133" width="0.2506%" height="15" fill="rgb(244,218,35)"/><text x="51.6955%" y="143.50"></text></g><g><title>region_scope_tree (3,052,726 samples, 0.22%)</title><rect x="51.6995%" y="133" width="0.2168%" height="15" fill="rgb(240,68,47)"/><text x="51.9495%" y="143.50"></text></g><g><title>check_impl_item_well_formed (54,976,275 samples, 3.91%)</title><rect x="48.0136%" y="149" width="3.9052%" height="15" fill="rgb(210,16,53)"/><text x="48.2636%" y="159.50">chec..</text></g><g><title>implied_outlives_bounds (2,339,777 samples, 0.17%)</title><rect x="54.2269%" y="133" width="0.1662%" height="15" fill="rgb(235,124,12)"/><text x="54.4769%" y="143.50"></text></g><g><title>param_env (5,888,659 samples, 0.42%)</title><rect x="54.3939%" y="133" width="0.4183%" height="15" fill="rgb(224,169,11)"/><text x="54.6439%" y="143.50"></text></g><g><title>check_item_well_formed (43,233,343 samples, 3.07%)</title><rect x="51.9188%" y="149" width="3.0711%" height="15" fill="rgb(250,166,2)"/><text x="52.1688%" y="159.50">che..</text></g><g><title>analysis (726,462,101 samples, 51.60%)</title><rect x="3.8643%" y="197" width="51.6040%" height="15" fill="rgb(242,216,29)"/><text x="4.1143%" y="207.50">analysis</text></g><g><title>type_check_crate (433,185,812 samples, 30.77%)</title><rect x="24.6970%" y="181" width="30.7712%" height="15" fill="rgb(230,116,27)"/><text x="24.9470%" y="191.50">type_check_crate</text></g><g><title>wf_checking (107,665,136 samples, 7.65%)</title><rect x="47.8203%" y="165" width="7.6480%" height="15" fill="rgb(228,99,48)"/><text x="48.0703%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (6,734,110 samples, 0.48%)</title><rect x="54.9899%" y="149" width="0.4784%" height="15" fill="rgb(253,11,6)"/><text x="55.2399%" y="159.50"></text></g><g><title>layout_of (1,524,957 samples, 0.11%)</title><rect x="58.6400%" y="149" width="0.1083%" height="15" fill="rgb(247,143,39)"/><text x="58.8900%" y="159.50"></text></g><g><title>param_env (2,928,555 samples, 0.21%)</title><rect x="58.7483%" y="149" width="0.2080%" height="15" fill="rgb(236,97,10)"/><text x="58.9983%" y="159.50"></text></g><g><title>fn_abi_of_instance (8,424,965 samples, 0.60%)</title><rect x="58.4129%" y="165" width="0.5985%" height="15" fill="rgb(233,208,19)"/><text x="58.6629%" y="175.50"></text></g><g><title>layout_of (1,587,582 samples, 0.11%)</title><rect x="59.0471%" y="165" width="0.1128%" height="15" fill="rgb(216,164,2)"/><text x="59.2971%" y="175.50"></text></g><g><title>codegen_module (50,151,877 samples, 3.56%)</title><rect x="55.6553%" y="181" width="3.5625%" height="15" fill="rgb(220,129,5)"/><text x="55.9053%" y="191.50">code..</text></g><g><title>codegen_crate (52,868,654 samples, 3.76%)</title><rect x="55.4690%" y="197" width="3.7555%" height="15" fill="rgb(242,17,10)"/><text x="55.7190%" y="207.50">code..</text></g><g><title>LLVM_module_codegen (160,195,937 samples, 11.38%)</title><rect x="59.2384%" y="181" width="11.3795%" height="15" fill="rgb(242,107,0)"/><text x="59.4884%" y="191.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (149,894,133 samples, 10.65%)</title><rect x="59.9702%" y="165" width="10.6477%" height="15" fill="rgb(251,28,31)"/><text x="60.2202%" y="175.50">LLVM_module_code..</text></g><g><title>codegen_module_optimize (170,876,803 samples, 12.14%)</title><rect x="59.2245%" y="197" width="12.1382%" height="15" fill="rgb(233,223,10)"/><text x="59.4745%" y="207.50">codegen_module_opt..</text></g><g><title>LLVM_module_optimize (10,485,206 samples, 0.74%)</title><rect x="70.6179%" y="181" width="0.7448%" height="15" fill="rgb(215,21,27)"/><text x="70.8679%" y="191.50"></text></g><g><title>AST_validation (3,527,025 samples, 0.25%)</title><rect x="71.3805%" y="181" width="0.2505%" height="15" fill="rgb(232,23,21)"/><text x="71.6305%" y="191.50"></text></g><g><title>macro_expand_crate (172,417,660 samples, 12.25%)</title><rect x="71.7097%" y="181" width="12.2476%" height="15" fill="rgb(244,5,23)"/><text x="71.9597%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (172,398,490 samples, 12.25%)</title><rect x="71.7111%" y="165" width="12.2463%" height="15" fill="rgb(226,81,46)"/><text x="71.9611%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,425,205 samples, 0.10%)</title><rect x="83.8561%" y="149" width="0.1012%" height="15" fill="rgb(247,70,30)"/><text x="84.1061%" y="159.50"></text></g><g><title>finalize_macro_resolutions (1,674,637 samples, 0.12%)</title><rect x="83.9787%" y="165" width="0.1190%" height="15" fill="rgb(212,68,19)"/><text x="84.2287%" y="175.50"></text></g><g><title>late_resolve_crate (15,514,927 samples, 1.10%)</title><rect x="84.0977%" y="165" width="1.1021%" height="15" fill="rgb(240,187,13)"/><text x="84.3477%" y="175.50"></text></g><g><title>configure_and_expand (197,066,708 samples, 14.00%)</title><rect x="71.3627%" y="197" width="13.9986%" height="15" fill="rgb(223,113,26)"/><text x="71.6127%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (19,663,929 samples, 1.40%)</title><rect x="83.9644%" y="181" width="1.3968%" height="15" fill="rgb(206,192,2)"/><text x="84.2144%" y="191.50"></text></g><g><title>drop_ast (5,117,342 samples, 0.36%)</title><rect x="85.3613%" y="197" width="0.3635%" height="15" fill="rgb(241,108,4)"/><text x="85.6113%" y="207.50"></text></g><g><title>early_lint_checks (9,216,513 samples, 0.65%)</title><rect x="85.7267%" y="197" width="0.6547%" height="15" fill="rgb(247,173,49)"/><text x="85.9767%" y="207.50"></text></g><g><title>free_global_ctxt (12,677,067 samples, 0.90%)</title><rect x="86.3814%" y="197" width="0.9005%" height="15" fill="rgb(224,114,35)"/><text x="86.6314%" y="207.50"></text></g><g><title>codegen_fn_attrs (1,563,334 samples, 0.11%)</title><rect x="89.2489%" y="117" width="0.1111%" height="15" fill="rgb(245,159,27)"/><text x="89.4989%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,432,339 samples, 0.10%)</title><rect x="89.4954%" y="101" width="0.1017%" height="15" fill="rgb(245,172,44)"/><text x="89.7454%" y="111.50"></text></g><g><title>optimized_mir (3,529,409 samples, 0.25%)</title><rect x="89.4173%" y="117" width="0.2507%" height="15" fill="rgb(236,23,11)"/><text x="89.6673%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,926,140 samples, 0.14%)</title><rect x="89.7136%" y="101" width="0.1368%" height="15" fill="rgb(205,117,38)"/><text x="89.9636%" y="111.50"></text></g><g><title>resolve_instance (4,459,704 samples, 0.32%)</title><rect x="89.6680%" y="117" width="0.3168%" height="15" fill="rgb(237,72,25)"/><text x="89.9180%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,996,290 samples, 0.14%)</title><rect x="90.0485%" y="117" width="0.1418%" height="15" fill="rgb(244,70,9)"/><text x="90.2985%" y="127.50"></text></g><g><title>upstream_monomorphizations (1,975,240 samples, 0.14%)</title><rect x="90.0500%" y="101" width="0.1403%" height="15" fill="rgb(217,125,39)"/><text x="90.3000%" y="111.50"></text></g><g><title>exported_symbols (1,839,739 samples, 0.13%)</title><rect x="90.0596%" y="85" width="0.1307%" height="15" fill="rgb(235,36,10)"/><text x="90.3096%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,834,339 samples, 0.13%)</title><rect x="90.0600%" y="69" width="0.1303%" height="15" fill="rgb(251,123,47)"/><text x="90.3100%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (14,967,502 samples, 1.06%)</title><rect x="89.1390%" y="133" width="1.0632%" height="15" fill="rgb(221,13,13)"/><text x="89.3890%" y="143.50"></text></g><g><title>monomorphization_collector (15,150,914 samples, 1.08%)</title><rect x="89.1387%" y="149" width="1.0762%" height="15" fill="rgb(238,131,9)"/><text x="89.3887%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (17,128,363 samples, 1.22%)</title><rect x="89.1361%" y="165" width="1.2167%" height="15" fill="rgb(211,50,8)"/><text x="89.3861%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,940,739 samples, 0.14%)</title><rect x="90.2149%" y="149" width="0.1379%" height="15" fill="rgb(245,182,24)"/><text x="90.4649%" y="159.50"></text></g><g><title>exported_symbols (18,613,968 samples, 1.32%)</title><rect x="89.1310%" y="181" width="1.3222%" height="15" fill="rgb(242,14,37)"/><text x="89.3810%" y="191.50"></text></g><g><title>reachable_non_generics (1,414,234 samples, 0.10%)</title><rect x="90.3528%" y="165" width="0.1005%" height="15" fill="rgb(246,228,12)"/><text x="90.6028%" y="175.50"></text></g><g><title>layout_of (2,434,124 samples, 0.17%)</title><rect x="92.9623%" y="149" width="0.1729%" height="15" fill="rgb(213,55,15)"/><text x="93.2123%" y="159.50"></text></g><g><title>layout_of (8,368,046 samples, 0.59%)</title><rect x="92.5652%" y="165" width="0.5944%" height="15" fill="rgb(209,9,3)"/><text x="92.8152%" y="175.50"></text></g><g><title>is_copy_raw (6,028,984 samples, 0.43%)</title><rect x="95.7813%" y="133" width="0.4283%" height="15" fill="rgb(230,59,30)"/><text x="96.0313%" y="143.50"></text></g><g><title>evaluate_obligation (5,130,874 samples, 0.36%)</title><rect x="95.8451%" y="117" width="0.3645%" height="15" fill="rgb(209,121,21)"/><text x="96.0951%" y="127.50"></text></g><g><title>needs_drop_raw (6,678,302 samples, 0.47%)</title><rect x="95.7382%" y="149" width="0.4744%" height="15" fill="rgb(220,109,13)"/><text x="95.9882%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,982,428 samples, 3.12%)</title><rect x="93.1596%" y="165" width="3.1243%" height="15" fill="rgb(232,18,1)"/><text x="93.4096%" y="175.50">mir..</text></g><g><title>optimized_mir (81,522,932 samples, 5.79%)</title><rect x="90.5606%" y="181" width="5.7909%" height="15" fill="rgb(215,41,42)"/><text x="90.8106%" y="191.50">optimiz..</text></g><g><title>generate_crate_metadata (128,643,298 samples, 9.14%)</title><rect x="87.2819%" y="197" width="9.1381%" height="15" fill="rgb(224,123,36)"/><text x="87.5319%" y="207.50">generate_crat..</text></g><g><title>hir_lowering (36,910,452 samples, 2.62%)</title><rect x="96.4200%" y="197" width="2.6219%" height="15" fill="rgb(240,125,3)"/><text x="96.6700%" y="207.50">hi..</text></g><g><title>link_crate (6,213,622 samples, 0.44%)</title><rect x="99.0445%" y="181" width="0.4414%" height="15" fill="rgb(205,98,50)"/><text x="99.2945%" y="191.50"></text></g><g><title>link_binary (6,036,431 samples, 0.43%)</title><rect x="99.0571%" y="165" width="0.4288%" height="15" fill="rgb(205,185,37)"/><text x="99.3071%" y="175.50"></text></g><g><title>link_rlib (5,024,190 samples, 0.36%)</title><rect x="99.1290%" y="149" width="0.3569%" height="15" fill="rgb(238,207,15)"/><text x="99.3790%" y="159.50"></text></g><g><title>link (6,262,523 samples, 0.44%)</title><rect x="99.0420%" y="197" width="0.4449%" height="15" fill="rgb(213,199,42)"/><text x="99.2920%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (4,499,266 samples, 0.32%)</title><rect x="99.5461%" y="197" width="0.3196%" height="15" fill="rgb(235,201,11)"/><text x="99.7961%" y="207.50"></text></g><g><title>all (1,407,764,485 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,407,764,485 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,579,956 samples, 0.11%)</title><rect x="99.8878%" y="197" width="0.1122%" height="15" fill="rgb(243,32,47)"/><text x="100.1378%" y="207.50"></text></g></svg></svg>