<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (147,589,118 samples, 16.56%)</title><rect x="0.0702%" y="165" width="16.5590%" height="15" fill="rgb(227,0,7)"/><text x="0.3202%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,166,378 samples, 0.13%)</title><rect x="17.6799%" y="53" width="0.1309%" height="15" fill="rgb(217,0,24)"/><text x="17.9299%" y="63.50"></text></g><g><title>mir_const (4,517,066 samples, 0.51%)</title><rect x="17.3918%" y="101" width="0.5068%" height="15" fill="rgb(221,193,54)"/><text x="17.6418%" y="111.50"></text></g><g><title>unsafety_check_result (3,861,997 samples, 0.43%)</title><rect x="17.4653%" y="85" width="0.4333%" height="15" fill="rgb(248,212,6)"/><text x="17.7153%" y="95.50"></text></g><g><title>mir_built (3,316,711 samples, 0.37%)</title><rect x="17.5265%" y="69" width="0.3721%" height="15" fill="rgb(208,68,35)"/><text x="17.7765%" y="79.50"></text></g><g><title>mir_promoted (5,199,538 samples, 0.58%)</title><rect x="17.3419%" y="117" width="0.5834%" height="15" fill="rgb(232,128,0)"/><text x="17.5919%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,176,390 samples, 0.13%)</title><rect x="17.9974%" y="117" width="0.1320%" height="15" fill="rgb(207,160,47)"/><text x="18.2474%" y="127.50"></text></g><g><title>MIR_borrow_checking (13,103,653 samples, 1.47%)</title><rect x="16.6600%" y="149" width="1.4702%" height="15" fill="rgb(228,23,34)"/><text x="16.9100%" y="159.50"></text></g><g><title>mir_borrowck (13,066,693 samples, 1.47%)</title><rect x="16.6641%" y="133" width="1.4660%" height="15" fill="rgb(218,30,26)"/><text x="16.9141%" y="143.50"></text></g><g><title>misc_checking_1 (1,281,993 samples, 0.14%)</title><rect x="18.1616%" y="149" width="0.1438%" height="15" fill="rgb(220,122,19)"/><text x="18.4116%" y="159.50"></text></g><g><title>crate_lints (2,030,851 samples, 0.23%)</title><rect x="18.4072%" y="117" width="0.2279%" height="15" fill="rgb(250,228,42)"/><text x="18.6572%" y="127.50"></text></g><g><title>type_of (1,110,931 samples, 0.12%)</title><rect x="18.5104%" y="101" width="0.1246%" height="15" fill="rgb(240,193,28)"/><text x="18.7604%" y="111.50"></text></g><g><title>lint_checking (2,386,774 samples, 0.27%)</title><rect x="18.4071%" y="133" width="0.2678%" height="15" fill="rgb(216,20,37)"/><text x="18.6571%" y="143.50"></text></g><g><title>misc_checking_3 (3,111,671 samples, 0.35%)</title><rect x="18.3776%" y="149" width="0.3491%" height="15" fill="rgb(206,188,39)"/><text x="18.6276%" y="159.50"></text></g><g><title>impl_parent (1,564,044 samples, 0.18%)</title><rect x="19.0258%" y="85" width="0.1755%" height="15" fill="rgb(217,207,13)"/><text x="19.2758%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (897,856 samples, 0.10%)</title><rect x="19.1006%" y="69" width="0.1007%" height="15" fill="rgb(231,73,38)"/><text x="19.3506%" y="79.50"></text></g><g><title>impl_trait_ref (5,799,591 samples, 0.65%)</title><rect x="19.2013%" y="85" width="0.6507%" height="15" fill="rgb(225,20,46)"/><text x="19.4513%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,130,255 samples, 0.58%)</title><rect x="19.2764%" y="69" width="0.5756%" height="15" fill="rgb(210,31,41)"/><text x="19.5264%" y="79.50"></text></g><g><title>coherent_trait (10,517,027 samples, 1.18%)</title><rect x="18.7339%" y="117" width="1.1800%" height="15" fill="rgb(221,200,47)"/><text x="18.9839%" y="127.50"></text></g><g><title>specialization_graph_of (10,505,227 samples, 1.18%)</title><rect x="18.7352%" y="101" width="1.1787%" height="15" fill="rgb(226,26,5)"/><text x="18.9852%" y="111.50"></text></g><g><title>coherence_checking (10,573,337 samples, 1.19%)</title><rect x="18.7314%" y="133" width="1.1863%" height="15" fill="rgb(249,33,26)"/><text x="18.9814%" y="143.50"></text></g><g><title>dropck_outlives (1,068,781 samples, 0.12%)</title><rect x="21.1895%" y="85" width="0.1199%" height="15" fill="rgb(235,183,28)"/><text x="21.4395%" y="95.50"></text></g><g><title>evaluate_obligation (1,783,556 samples, 0.20%)</title><rect x="21.3095%" y="85" width="0.2001%" height="15" fill="rgb(221,5,38)"/><text x="21.5595%" y="95.50"></text></g><g><title>typeck (2,529,496 samples, 0.28%)</title><rect x="21.7050%" y="85" width="0.2838%" height="15" fill="rgb(247,18,42)"/><text x="21.9550%" y="95.50"></text></g><g><title>item_bodies_checking (18,516,428 samples, 2.08%)</title><rect x="19.9201%" y="133" width="2.0775%" height="15" fill="rgb(241,131,45)"/><text x="20.1701%" y="143.50">i..</text></g><g><title>typeck_item_bodies (18,513,308 samples, 2.08%)</title><rect x="19.9204%" y="117" width="2.0771%" height="15" fill="rgb(249,31,29)"/><text x="20.1704%" y="127.50">t..</text></g><g><title>typeck (18,488,498 samples, 2.07%)</title><rect x="19.9232%" y="101" width="2.0743%" height="15" fill="rgb(225,111,53)"/><text x="20.1732%" y="111.50">t..</text></g><g><title>item_types_checking (1,153,352 samples, 0.13%)</title><rect x="21.9976%" y="133" width="0.1294%" height="15" fill="rgb(238,160,17)"/><text x="22.2476%" y="143.50"></text></g><g><title>check_mod_item_types (1,148,192 samples, 0.13%)</title><rect x="21.9981%" y="117" width="0.1288%" height="15" fill="rgb(214,148,48)"/><text x="22.2481%" y="127.50"></text></g><g><title>type_collecting (1,776,298 samples, 0.20%)</title><rect x="22.1273%" y="133" width="0.1993%" height="15" fill="rgb(232,36,49)"/><text x="22.3773%" y="143.50"></text></g><g><title>collect_mod_item_types (1,763,397 samples, 0.20%)</title><rect x="22.1287%" y="117" width="0.1978%" height="15" fill="rgb(209,103,24)"/><text x="22.3787%" y="127.50"></text></g><g><title>object_safety_violations (910,470 samples, 0.10%)</title><rect x="22.3999%" y="101" width="0.1022%" height="15" fill="rgb(229,88,8)"/><text x="22.6499%" y="111.50"></text></g><g><title>check_impl_item_well_formed (1,583,035 samples, 0.18%)</title><rect x="22.3406%" y="117" width="0.1776%" height="15" fill="rgb(213,181,19)"/><text x="22.5906%" y="127.50"></text></g><g><title>analysis (55,105,229 samples, 6.18%)</title><rect x="16.6292%" y="165" width="6.1826%" height="15" fill="rgb(254,191,54)"/><text x="16.8792%" y="175.50">analysis</text></g><g><title>type_check_crate (36,410,440 samples, 4.09%)</title><rect x="18.7267%" y="149" width="4.0851%" height="15" fill="rgb(241,83,37)"/><text x="18.9767%" y="159.50">type..</text></g><g><title>wf_checking (4,323,484 samples, 0.49%)</title><rect x="22.3268%" y="133" width="0.4851%" height="15" fill="rgb(233,36,39)"/><text x="22.5768%" y="143.50"></text></g><g><title>check_item_well_formed (2,617,378 samples, 0.29%)</title><rect x="22.5182%" y="117" width="0.2937%" height="15" fill="rgb(226,3,54)"/><text x="22.7682%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (3,158,899 samples, 0.35%)</title><rect x="34.6066%" y="133" width="0.3544%" height="15" fill="rgb(245,192,40)"/><text x="34.8566%" y="143.50"></text></g><g><title>const_caller_location (2,002,097 samples, 0.22%)</title><rect x="34.9610%" y="133" width="0.2246%" height="15" fill="rgb(238,167,29)"/><text x="35.2110%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,402,562 samples, 0.16%)</title><rect x="35.8207%" y="117" width="0.1574%" height="15" fill="rgb(232,182,51)"/><text x="36.0707%" y="127.50"></text></g><g><title>layout_of (1,073,081 samples, 0.12%)</title><rect x="36.2215%" y="101" width="0.1204%" height="15" fill="rgb(231,60,39)"/><text x="36.4715%" y="111.50"></text></g><g><title>layout_of (3,319,663 samples, 0.37%)</title><rect x="36.0062%" y="117" width="0.3725%" height="15" fill="rgb(208,69,12)"/><text x="36.2562%" y="127.50"></text></g><g><title>predicates_of (2,268,288 samples, 0.25%)</title><rect x="36.8582%" y="101" width="0.2545%" height="15" fill="rgb(235,93,37)"/><text x="37.1082%" y="111.50"></text></g><g><title>predicates_defined_on (1,639,851 samples, 0.18%)</title><rect x="36.9287%" y="85" width="0.1840%" height="15" fill="rgb(213,116,39)"/><text x="37.1787%" y="95.50"></text></g><g><title>param_env (6,582,356 samples, 0.74%)</title><rect x="36.3786%" y="117" width="0.7385%" height="15" fill="rgb(222,207,29)"/><text x="36.6286%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,011,038 samples, 0.23%)</title><rect x="37.1171%" y="117" width="0.2256%" height="15" fill="rgb(206,96,30)"/><text x="37.3671%" y="127.50"></text></g><g><title>normalize_projection_ty (1,537,152 samples, 0.17%)</title><rect x="37.1703%" y="101" width="0.1725%" height="15" fill="rgb(218,138,4)"/><text x="37.4203%" y="111.50"></text></g><g><title>fn_abi_of_instance (19,248,320 samples, 2.16%)</title><rect x="35.1906%" y="133" width="2.1596%" height="15" fill="rgb(250,191,14)"/><text x="35.4406%" y="143.50">f..</text></g><g><title>layout_of (907,010 samples, 0.10%)</title><rect x="37.6922%" y="117" width="0.1018%" height="15" fill="rgb(239,60,40)"/><text x="37.9422%" y="127.50"></text></g><g><title>layout_of (3,162,765 samples, 0.35%)</title><rect x="37.4574%" y="133" width="0.3549%" height="15" fill="rgb(206,27,48)"/><text x="37.7074%" y="143.50"></text></g><g><title>symbol_name (1,354,002 samples, 0.15%)</title><rect x="37.8145%" y="133" width="0.1519%" height="15" fill="rgb(225,35,8)"/><text x="38.0645%" y="143.50"></text></g><g><title>codegen_module (131,640,438 samples, 14.77%)</title><rect x="23.2133%" y="149" width="14.7696%" height="15" fill="rgb(250,213,24)"/><text x="23.4633%" y="159.50">codegen_module</text></g><g><title>codegen_crate (135,290,563 samples, 15.18%)</title><rect x="22.8130%" y="165" width="15.1792%" height="15" fill="rgb(247,123,22)"/><text x="23.0630%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (438,340,132 samples, 49.18%)</title><rect x="38.0424%" y="149" width="49.1803%" height="15" fill="rgb(231,138,38)"/><text x="38.2924%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (418,532,051 samples, 46.96%)</title><rect x="40.2648%" y="133" width="46.9579%" height="15" fill="rgb(231,145,46)"/><text x="40.5148%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (462,654,623 samples, 51.91%)</title><rect x="37.9921%" y="165" width="51.9084%" height="15" fill="rgb(251,118,11)"/><text x="38.2421%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (23,866,488 samples, 2.68%)</title><rect x="87.2227%" y="149" width="2.6777%" height="15" fill="rgb(217,147,25)"/><text x="87.4727%" y="159.50">LL..</text></g><g><title>metadata_register_crate (2,695,518 samples, 0.30%)</title><rect x="91.4450%" y="117" width="0.3024%" height="15" fill="rgb(247,81,37)"/><text x="91.6950%" y="127.50"></text></g><g><title>metadata_register_crate (923,729 samples, 0.10%)</title><rect x="91.6438%" y="101" width="0.1036%" height="15" fill="rgb(209,12,38)"/><text x="91.8938%" y="111.50"></text></g><g><title>macro_expand_crate (16,019,583 samples, 1.80%)</title><rect x="89.9560%" y="149" width="1.7973%" height="15" fill="rgb(227,1,9)"/><text x="90.2060%" y="159.50">m..</text></g><g><title>expand_crate (15,996,003 samples, 1.79%)</title><rect x="89.9587%" y="133" width="1.7947%" height="15" fill="rgb(248,47,43)"/><text x="90.2087%" y="143.50">e..</text></g><g><title>late_resolve_crate (1,592,246 samples, 0.18%)</title><rect x="91.7891%" y="133" width="0.1786%" height="15" fill="rgb(221,10,30)"/><text x="92.0391%" y="143.50"></text></g><g><title>configure_and_expand (18,516,279 samples, 2.08%)</title><rect x="89.9005%" y="165" width="2.0775%" height="15" fill="rgb(210,229,1)"/><text x="90.1505%" y="175.50">c..</text></g><g><title>resolve_crate (1,840,498 samples, 0.21%)</title><rect x="91.7715%" y="149" width="0.2065%" height="15" fill="rgb(222,148,37)"/><text x="92.0215%" y="159.50"></text></g><g><title>free_global_ctxt (5,646,158 samples, 0.63%)</title><rect x="92.0280%" y="165" width="0.6335%" height="15" fill="rgb(234,67,33)"/><text x="92.2780%" y="175.50"></text></g><g><title>item_attrs (1,336,045 samples, 0.15%)</title><rect x="93.2324%" y="69" width="0.1499%" height="15" fill="rgb(247,98,35)"/><text x="93.4824%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,268,155 samples, 0.14%)</title><rect x="93.2400%" y="53" width="0.1423%" height="15" fill="rgb(247,138,52)"/><text x="93.4900%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,379,594 samples, 0.27%)</title><rect x="93.1868%" y="85" width="0.2670%" height="15" fill="rgb(213,79,30)"/><text x="93.4368%" y="95.50"></text></g><g><title>mir_shims (1,839,378 samples, 0.21%)</title><rect x="93.5382%" y="85" width="0.2064%" height="15" fill="rgb(246,177,23)"/><text x="93.7882%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,302,221 samples, 0.37%)</title><rect x="93.9599%" y="69" width="0.3705%" height="15" fill="rgb(230,62,27)"/><text x="94.2099%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,095,802 samples, 0.24%)</title><rect x="94.3304%" y="69" width="0.2351%" height="15" fill="rgb(216,154,8)"/><text x="94.5804%" y="79.50"></text></g><g><title>optimized_mir (7,598,137 samples, 0.85%)</title><rect x="93.7446%" y="85" width="0.8525%" height="15" fill="rgb(244,35,45)"/><text x="93.9946%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,387,552 samples, 0.49%)</title><rect x="94.7781%" y="69" width="0.4923%" height="15" fill="rgb(251,115,12)"/><text x="95.0281%" y="79.50"></text></g><g><title>impl_parent (1,498,757 samples, 0.17%)</title><rect x="95.7491%" y="53" width="0.1682%" height="15" fill="rgb(240,54,50)"/><text x="95.9991%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (911,530 samples, 0.10%)</title><rect x="95.8150%" y="37" width="0.1023%" height="15" fill="rgb(233,84,52)"/><text x="96.0650%" y="47.50"></text></g><g><title>specialization_graph_of (7,872,710 samples, 0.88%)</title><rect x="95.4690%" y="69" width="0.8833%" height="15" fill="rgb(207,117,47)"/><text x="95.7190%" y="79.50"></text></g><g><title>impl_trait_ref (3,877,290 samples, 0.44%)</title><rect x="95.9173%" y="53" width="0.4350%" height="15" fill="rgb(249,43,39)"/><text x="96.1673%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,872,024 samples, 0.32%)</title><rect x="96.0301%" y="37" width="0.3222%" height="15" fill="rgb(209,38,44)"/><text x="96.2801%" y="47.50"></text></g><g><title>resolve_instance (16,292,799 samples, 1.83%)</title><rect x="94.5970%" y="85" width="1.8280%" height="15" fill="rgb(236,212,23)"/><text x="94.8470%" y="95.50">r..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,196,323 samples, 0.13%)</title><rect x="96.4361%" y="85" width="0.1342%" height="15" fill="rgb(242,79,21)"/><text x="96.6861%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (34,417,969 samples, 3.86%)</title><rect x="92.8032%" y="101" width="3.8616%" height="15" fill="rgb(211,96,35)"/><text x="93.0532%" y="111.50">mono..</text></g><g><title>monomorphization_collector (34,447,930 samples, 3.86%)</title><rect x="92.8029%" y="117" width="3.8649%" height="15" fill="rgb(253,215,40)"/><text x="93.0529%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (3,226,423 samples, 0.36%)</title><rect x="96.6684%" y="101" width="0.3620%" height="15" fill="rgb(211,81,21)"/><text x="96.9184%" y="111.50"></text></g><g><title>symbol_name (2,935,080 samples, 0.33%)</title><rect x="96.7011%" y="85" width="0.3293%" height="15" fill="rgb(208,190,38)"/><text x="96.9511%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (39,204,608 samples, 4.40%)</title><rect x="92.7969%" y="133" width="4.3986%" height="15" fill="rgb(235,213,38)"/><text x="93.0469%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (4,702,598 samples, 0.53%)</title><rect x="96.6679%" y="117" width="0.5276%" height="15" fill="rgb(237,122,38)"/><text x="96.9179%" y="127.50"></text></g><g><title>cgu_partitioning (1,471,765 samples, 0.17%)</title><rect x="97.0304%" y="101" width="0.1651%" height="15" fill="rgb(244,218,35)"/><text x="97.2804%" y="111.50"></text></g><g><title>exported_symbols (39,365,750 samples, 4.42%)</title><rect x="92.7824%" y="149" width="4.4167%" height="15" fill="rgb(240,68,47)"/><text x="93.0324%" y="159.50">expor..</text></g><g><title>optimized_mir (1,663,407 samples, 0.19%)</title><rect x="97.2032%" y="149" width="0.1866%" height="15" fill="rgb(210,16,53)"/><text x="97.4532%" y="159.50"></text></g><g><title>generate_crate_metadata (42,163,949 samples, 4.73%)</title><rect x="92.6614%" y="165" width="4.7307%" height="15" fill="rgb(235,124,12)"/><text x="92.9114%" y="175.50">genera..</text></g><g><title>hir_lowering (2,327,363 samples, 0.26%)</title><rect x="97.3921%" y="165" width="0.2611%" height="15" fill="rgb(224,169,11)"/><text x="97.6421%" y="175.50"></text></g><g><title>finish_ongoing_codegen (14,336,856 samples, 1.61%)</title><rect x="97.6565%" y="149" width="1.6085%" height="15" fill="rgb(250,166,2)"/><text x="97.9065%" y="159.50"></text></g><g><title>link_crate (2,699,438 samples, 0.30%)</title><rect x="99.2651%" y="149" width="0.3029%" height="15" fill="rgb(242,216,29)"/><text x="99.5151%" y="159.50"></text></g><g><title>link_binary (2,637,497 samples, 0.30%)</title><rect x="99.2720%" y="133" width="0.2959%" height="15" fill="rgb(230,116,27)"/><text x="99.5220%" y="143.50"></text></g><g><title>link_rlib (1,999,370 samples, 0.22%)</title><rect x="99.3436%" y="117" width="0.2243%" height="15" fill="rgb(228,99,48)"/><text x="99.5936%" y="127.50"></text></g><g><title>link (17,077,644 samples, 1.92%)</title><rect x="97.6532%" y="165" width="1.9161%" height="15" fill="rgb(253,11,6)"/><text x="97.9032%" y="175.50">l..</text></g><g><title>parse_crate (1,674,946 samples, 0.19%)</title><rect x="99.5693%" y="165" width="0.1879%" height="15" fill="rgb(247,143,39)"/><text x="99.8193%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,410,084 samples, 0.16%)</title><rect x="99.7899%" y="165" width="0.1582%" height="15" fill="rgb(236,97,10)"/><text x="100.0399%" y="175.50"></text></g><g><title>all (891,291,204 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (891,291,204 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>