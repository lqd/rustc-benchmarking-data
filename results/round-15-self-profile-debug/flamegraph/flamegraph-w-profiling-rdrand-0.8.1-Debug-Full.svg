<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (44,792,405 samples, 11.95%)</title><rect x="0.2533%" y="197" width="11.9549%" height="15" fill="rgb(227,0,7)"/><text x="0.5033%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (382,763 samples, 0.10%)</title><rect x="15.0005%" y="85" width="0.1022%" height="15" fill="rgb(217,0,24)"/><text x="15.2505%" y="95.50"></text></g><g><title>specialization_graph_of (893,360 samples, 0.24%)</title><rect x="15.2254%" y="69" width="0.2384%" height="15" fill="rgb(221,193,54)"/><text x="15.4754%" y="79.50"></text></g><g><title>impl_trait_ref (437,553 samples, 0.12%)</title><rect x="15.3470%" y="53" width="0.1168%" height="15" fill="rgb(248,212,6)"/><text x="15.5970%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (379,973 samples, 0.10%)</title><rect x="15.3624%" y="37" width="0.1014%" height="15" fill="rgb(208,68,35)"/><text x="15.6124%" y="47.50"></text></g><g><title>resolve_instance (1,400,593 samples, 0.37%)</title><rect x="15.1027%" y="85" width="0.3738%" height="15" fill="rgb(232,128,0)"/><text x="15.3527%" y="95.50"></text></g><g><title>thir_body (707,278 samples, 0.19%)</title><rect x="15.4811%" y="85" width="0.1888%" height="15" fill="rgb(207,160,47)"/><text x="15.7311%" y="95.50"></text></g><g><title>mir_const (5,805,647 samples, 1.55%)</title><rect x="14.1230%" y="133" width="1.5495%" height="15" fill="rgb(228,23,34)"/><text x="14.3730%" y="143.50"></text></g><g><title>unsafety_check_result (5,157,068 samples, 1.38%)</title><rect x="14.2961%" y="117" width="1.3764%" height="15" fill="rgb(218,30,26)"/><text x="14.5461%" y="127.50"></text></g><g><title>mir_built (4,570,642 samples, 1.22%)</title><rect x="14.4527%" y="101" width="1.2199%" height="15" fill="rgb(220,122,19)"/><text x="14.7027%" y="111.50"></text></g><g><title>mir_promoted (6,433,354 samples, 1.72%)</title><rect x="13.9799%" y="149" width="1.7170%" height="15" fill="rgb(250,228,42)"/><text x="14.2299%" y="159.50"></text></g><g><title>type_op_prove_predicate (607,786 samples, 0.16%)</title><rect x="15.8039%" y="149" width="0.1622%" height="15" fill="rgb(240,193,28)"/><text x="16.0539%" y="159.50"></text></g><g><title>MIR_borrow_checking (13,871,851 samples, 3.70%)</title><rect x="12.2646%" y="181" width="3.7023%" height="15" fill="rgb(216,20,37)"/><text x="12.5146%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (13,798,931 samples, 3.68%)</title><rect x="12.2840%" y="165" width="3.6829%" height="15" fill="rgb(206,188,39)"/><text x="12.5340%" y="175.50">mir_..</text></g><g><title>codegen_fn_attrs (621,325 samples, 0.17%)</title><rect x="16.0973%" y="149" width="0.1658%" height="15" fill="rgb(217,207,13)"/><text x="16.3473%" y="159.50"></text></g><g><title>check_mod_attrs (796,727 samples, 0.21%)</title><rect x="16.0506%" y="165" width="0.2126%" height="15" fill="rgb(231,73,38)"/><text x="16.3006%" y="175.50"></text></g><g><title>misc_checking_1 (1,250,202 samples, 0.33%)</title><rect x="16.0429%" y="181" width="0.3337%" height="15" fill="rgb(225,20,46)"/><text x="16.2929%" y="191.50"></text></g><g><title>misc_checking_2 (694,007 samples, 0.19%)</title><rect x="16.3765%" y="181" width="0.1852%" height="15" fill="rgb(210,31,41)"/><text x="16.6265%" y="191.50"></text></g><g><title>match_checking (375,633 samples, 0.10%)</title><rect x="16.4615%" y="165" width="0.1003%" height="15" fill="rgb(221,200,47)"/><text x="16.7115%" y="175.50"></text></g><g><title>crate_lints (2,008,310 samples, 0.54%)</title><rect x="16.6710%" y="149" width="0.5360%" height="15" fill="rgb(226,26,5)"/><text x="16.9210%" y="159.50"></text></g><g><title>type_of (1,065,594 samples, 0.28%)</title><rect x="16.9226%" y="133" width="0.2844%" height="15" fill="rgb(249,33,26)"/><text x="17.1726%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (834,968 samples, 0.22%)</title><rect x="16.9842%" y="117" width="0.2228%" height="15" fill="rgb(235,183,28)"/><text x="17.2342%" y="127.50"></text></g><g><title>lint_checking (2,281,003 samples, 0.61%)</title><rect x="16.6706%" y="165" width="0.6088%" height="15" fill="rgb(221,5,38)"/><text x="16.9206%" y="175.50"></text></g><g><title>privacy_checking_modules (720,058 samples, 0.19%)</title><rect x="17.3313%" y="165" width="0.1922%" height="15" fill="rgb(247,18,42)"/><text x="17.5813%" y="175.50"></text></g><g><title>check_mod_privacy (714,688 samples, 0.19%)</title><rect x="17.3328%" y="149" width="0.1907%" height="15" fill="rgb(241,131,45)"/><text x="17.5828%" y="159.50"></text></g><g><title>misc_checking_3 (3,621,578 samples, 0.97%)</title><rect x="16.5618%" y="181" width="0.9666%" height="15" fill="rgb(249,31,29)"/><text x="16.8118%" y="191.50"></text></g><g><title>impl_parent (2,340,669 samples, 0.62%)</title><rect x="18.6287%" y="117" width="0.6247%" height="15" fill="rgb(225,111,53)"/><text x="18.8787%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,271,669 samples, 0.34%)</title><rect x="18.9141%" y="101" width="0.3394%" height="15" fill="rgb(238,160,17)"/><text x="19.1641%" y="111.50"></text></g><g><title>impl_trait_ref (5,049,511 samples, 1.35%)</title><rect x="19.2538%" y="117" width="1.3477%" height="15" fill="rgb(214,148,48)"/><text x="19.5038%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,208,931 samples, 1.12%)</title><rect x="19.4781%" y="101" width="1.1233%" height="15" fill="rgb(232,36,49)"/><text x="19.7281%" y="111.50"></text></g><g><title>trait_impls_of (730,848 samples, 0.20%)</title><rect x="20.6241%" y="117" width="0.1951%" height="15" fill="rgb(209,103,24)"/><text x="20.8741%" y="127.50"></text></g><g><title>coherent_trait (12,269,615 samples, 3.27%)</title><rect x="17.5450%" y="149" width="3.2747%" height="15" fill="rgb(229,88,8)"/><text x="17.7950%" y="159.50">coh..</text></g><g><title>specialization_graph_of (11,792,970 samples, 3.15%)</title><rect x="17.6722%" y="133" width="3.1475%" height="15" fill="rgb(213,181,19)"/><text x="17.9222%" y="143.50">spe..</text></g><g><title>coherence_checking (12,345,205 samples, 3.29%)</title><rect x="17.5398%" y="165" width="3.2949%" height="15" fill="rgb(254,191,54)"/><text x="17.7898%" y="175.50">coh..</text></g><g><title>associated_item (503,977 samples, 0.13%)</title><rect x="24.2657%" y="101" width="0.1345%" height="15" fill="rgb(241,83,37)"/><text x="24.5157%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (398,044 samples, 0.11%)</title><rect x="24.2940%" y="85" width="0.1062%" height="15" fill="rgb(233,36,39)"/><text x="24.5440%" y="95.50"></text></g><g><title>associated_items (712,609 samples, 0.19%)</title><rect x="24.2186%" y="117" width="0.1902%" height="15" fill="rgb(226,3,54)"/><text x="24.4686%" y="127.50"></text></g><g><title>generics_of (935,630 samples, 0.25%)</title><rect x="25.1852%" y="101" width="0.2497%" height="15" fill="rgb(245,192,40)"/><text x="25.4352%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (785,859 samples, 0.21%)</title><rect x="25.2252%" y="85" width="0.2097%" height="15" fill="rgb(238,167,29)"/><text x="25.4752%" y="95.50"></text></g><g><title>impl_trait_ref (684,277 samples, 0.18%)</title><rect x="25.4511%" y="101" width="0.1826%" height="15" fill="rgb(232,182,51)"/><text x="25.7011%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (533,725 samples, 0.14%)</title><rect x="25.4913%" y="85" width="0.1424%" height="15" fill="rgb(231,60,39)"/><text x="25.7413%" y="95.50"></text></g><g><title>specializes (496,185 samples, 0.13%)</title><rect x="25.7076%" y="101" width="0.1324%" height="15" fill="rgb(208,69,12)"/><text x="25.9576%" y="111.50"></text></g><g><title>trait_impls_of (710,839 samples, 0.19%)</title><rect x="25.8441%" y="101" width="0.1897%" height="15" fill="rgb(235,93,37)"/><text x="26.0941%" y="111.50"></text></g><g><title>evaluate_obligation (5,482,986 samples, 1.46%)</title><rect x="24.5733%" y="117" width="1.4634%" height="15" fill="rgb(213,116,39)"/><text x="24.8233%" y="127.50"></text></g><g><title>object_safety_violations (424,744 samples, 0.11%)</title><rect x="26.2666%" y="117" width="0.1134%" height="15" fill="rgb(222,207,29)"/><text x="26.5166%" y="127.50"></text></g><g><title>item_bodies_checking (21,518,949 samples, 5.74%)</title><rect x="20.8417%" y="165" width="5.7433%" height="15" fill="rgb(206,96,30)"/><text x="21.0917%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (21,515,608 samples, 5.74%)</title><rect x="20.8426%" y="149" width="5.7424%" height="15" fill="rgb(218,138,4)"/><text x="21.0926%" y="159.50">typeck_..</text></g><g><title>typeck (21,462,947 samples, 5.73%)</title><rect x="20.8566%" y="133" width="5.7284%" height="15" fill="rgb(250,191,14)"/><text x="21.1066%" y="143.50">typeck</text></g><g><title>generics_of (505,564 samples, 0.13%)</title><rect x="27.5626%" y="101" width="0.1349%" height="15" fill="rgb(239,60,40)"/><text x="27.8126%" y="111.50"></text></g><g><title>impl_trait_ref (897,550 samples, 0.24%)</title><rect x="27.7296%" y="101" width="0.2396%" height="15" fill="rgb(206,27,48)"/><text x="27.9796%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (543,807 samples, 0.15%)</title><rect x="27.8240%" y="85" width="0.1451%" height="15" fill="rgb(225,35,8)"/><text x="28.0740%" y="95.50"></text></g><g><title>predicates_of (598,065 samples, 0.16%)</title><rect x="27.9778%" y="101" width="0.1596%" height="15" fill="rgb(250,213,24)"/><text x="28.2278%" y="111.50"></text></g><g><title>specializes (1,967,571 samples, 0.53%)</title><rect x="28.1374%" y="101" width="0.5251%" height="15" fill="rgb(247,123,22)"/><text x="28.3874%" y="111.50"></text></g><g><title>param_env (1,172,451 samples, 0.31%)</title><rect x="28.3496%" y="85" width="0.3129%" height="15" fill="rgb(231,138,38)"/><text x="28.5996%" y="95.50"></text></g><g><title>def_span (581,884 samples, 0.16%)</title><rect x="28.5072%" y="69" width="0.1553%" height="15" fill="rgb(231,145,46)"/><text x="28.7572%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (524,264 samples, 0.14%)</title><rect x="28.5226%" y="53" width="0.1399%" height="15" fill="rgb(251,118,11)"/><text x="28.7726%" y="63.50"></text></g><g><title>evaluate_obligation (6,257,923 samples, 1.67%)</title><rect x="27.0141%" y="117" width="1.6702%" height="15" fill="rgb(217,147,25)"/><text x="27.2641%" y="127.50"></text></g><g><title>item_types_checking (8,091,312 samples, 2.16%)</title><rect x="26.5850%" y="165" width="2.1595%" height="15" fill="rgb(247,81,37)"/><text x="26.8350%" y="175.50">i..</text></g><g><title>check_mod_item_types (8,083,902 samples, 2.16%)</title><rect x="26.5870%" y="149" width="2.1576%" height="15" fill="rgb(209,12,38)"/><text x="26.8370%" y="159.50">c..</text></g><g><title>typeck (7,439,646 samples, 1.99%)</title><rect x="26.7589%" y="133" width="1.9856%" height="15" fill="rgb(227,1,9)"/><text x="27.0089%" y="143.50">t..</text></g><g><title>type_collecting (1,009,190 samples, 0.27%)</title><rect x="28.7450%" y="165" width="0.2693%" height="15" fill="rgb(248,47,43)"/><text x="28.9950%" y="175.50"></text></g><g><title>collect_mod_item_types (998,690 samples, 0.27%)</title><rect x="28.7478%" y="149" width="0.2665%" height="15" fill="rgb(221,10,30)"/><text x="28.9978%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,379,384 samples, 0.37%)</title><rect x="29.0463%" y="149" width="0.3682%" height="15" fill="rgb(210,229,1)"/><text x="29.2963%" y="159.50"></text></g><g><title>analysis (65,801,760 samples, 17.56%)</title><rect x="12.2082%" y="197" width="17.5622%" height="15" fill="rgb(222,148,37)"/><text x="12.4582%" y="207.50">analysis</text></g><g><title>type_check_crate (45,868,487 samples, 12.24%)</title><rect x="17.5283%" y="181" width="12.2421%" height="15" fill="rgb(234,67,33)"/><text x="17.7783%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,828,049 samples, 0.75%)</title><rect x="29.0157%" y="165" width="0.7548%" height="15" fill="rgb(247,98,35)"/><text x="29.2657%" y="175.50"></text></g><g><title>check_item_well_formed (1,334,024 samples, 0.36%)</title><rect x="29.4144%" y="149" width="0.3560%" height="15" fill="rgb(247,138,52)"/><text x="29.6644%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (415,207 samples, 0.11%)</title><rect x="38.4264%" y="165" width="0.1108%" height="15" fill="rgb(213,79,30)"/><text x="38.6764%" y="175.50"></text></g><g><title>const_caller_location (461,475 samples, 0.12%)</title><rect x="38.5372%" y="165" width="0.1232%" height="15" fill="rgb(246,177,23)"/><text x="38.7872%" y="175.50"></text></g><g><title>item_attrs (465,054 samples, 0.12%)</title><rect x="39.0853%" y="133" width="0.1241%" height="15" fill="rgb(230,62,27)"/><text x="39.3353%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (448,694 samples, 0.12%)</title><rect x="39.0897%" y="117" width="0.1198%" height="15" fill="rgb(216,154,8)"/><text x="39.3397%" y="127.50"></text></g><g><title>codegen_fn_attrs (661,085 samples, 0.18%)</title><rect x="39.0413%" y="149" width="0.1764%" height="15" fill="rgb(244,35,45)"/><text x="39.2913%" y="159.50"></text></g><g><title>layout_of (409,974 samples, 0.11%)</title><rect x="39.5916%" y="117" width="0.1094%" height="15" fill="rgb(251,115,12)"/><text x="39.8416%" y="127.50"></text></g><g><title>layout_of (932,117 samples, 0.25%)</title><rect x="39.4645%" y="133" width="0.2488%" height="15" fill="rgb(240,54,50)"/><text x="39.7145%" y="143.50"></text></g><g><title>layout_of (2,017,679 samples, 0.54%)</title><rect x="39.2339%" y="149" width="0.5385%" height="15" fill="rgb(233,84,52)"/><text x="39.4839%" y="159.50"></text></g><g><title>predicates_of (705,025 samples, 0.19%)</title><rect x="40.1553%" y="133" width="0.1882%" height="15" fill="rgb(207,117,47)"/><text x="40.4053%" y="143.50"></text></g><g><title>predicates_defined_on (496,313 samples, 0.13%)</title><rect x="40.2110%" y="117" width="0.1325%" height="15" fill="rgb(249,43,39)"/><text x="40.4610%" y="127.50"></text></g><g><title>param_env (2,143,267 samples, 0.57%)</title><rect x="39.7724%" y="149" width="0.5720%" height="15" fill="rgb(209,38,44)"/><text x="40.0224%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (701,737 samples, 0.19%)</title><rect x="40.3445%" y="149" width="0.1873%" height="15" fill="rgb(236,212,23)"/><text x="40.5945%" y="159.50"></text></g><g><title>normalize_projection_ty (556,366 samples, 0.15%)</title><rect x="40.3833%" y="133" width="0.1485%" height="15" fill="rgb(242,79,21)"/><text x="40.6333%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,002,260 samples, 1.87%)</title><rect x="38.6653%" y="165" width="1.8689%" height="15" fill="rgb(211,96,35)"/><text x="38.9153%" y="175.50">f..</text></g><g><title>adt_sized_constraint (385,913 samples, 0.10%)</title><rect x="41.0729%" y="85" width="0.1030%" height="15" fill="rgb(253,215,40)"/><text x="41.3229%" y="95.50"></text></g><g><title>layout_of (753,109 samples, 0.20%)</title><rect x="41.0627%" y="101" width="0.2010%" height="15" fill="rgb(211,81,21)"/><text x="41.3127%" y="111.50"></text></g><g><title>layout_of (1,004,610 samples, 0.27%)</title><rect x="41.0125%" y="117" width="0.2681%" height="15" fill="rgb(208,190,38)"/><text x="41.2625%" y="127.50"></text></g><g><title>layout_of (1,394,905 samples, 0.37%)</title><rect x="40.9263%" y="133" width="0.3723%" height="15" fill="rgb(235,213,38)"/><text x="41.1763%" y="143.50"></text></g><g><title>layout_of (1,848,938 samples, 0.49%)</title><rect x="40.8263%" y="149" width="0.4935%" height="15" fill="rgb(237,122,38)"/><text x="41.0763%" y="159.50"></text></g><g><title>layout_of (2,896,962 samples, 0.77%)</title><rect x="40.5989%" y="165" width="0.7732%" height="15" fill="rgb(244,218,35)"/><text x="40.8489%" y="175.50"></text></g><g><title>symbol_name (403,366 samples, 0.11%)</title><rect x="41.3773%" y="165" width="0.1077%" height="15" fill="rgb(240,68,47)"/><text x="41.6273%" y="175.50"></text></g><g><title>codegen_module (41,341,087 samples, 11.03%)</title><rect x="30.4755%" y="181" width="11.0338%" height="15" fill="rgb(210,16,53)"/><text x="30.7255%" y="191.50">codegen_module</text></g><g><title>codegen_crate (44,058,057 samples, 11.76%)</title><rect x="29.7735%" y="197" width="11.7589%" height="15" fill="rgb(235,124,12)"/><text x="30.0235%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (136,899,054 samples, 36.54%)</title><rect x="41.5849%" y="181" width="36.5379%" height="15" fill="rgb(224,169,11)"/><text x="41.8349%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (129,078,217 samples, 34.45%)</title><rect x="43.6723%" y="165" width="34.4505%" height="15" fill="rgb(250,166,2)"/><text x="43.9223%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (147,694,692 samples, 39.42%)</title><rect x="41.5325%" y="197" width="39.4192%" height="15" fill="rgb(242,216,29)"/><text x="41.7825%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,599,145 samples, 2.83%)</title><rect x="78.1228%" y="181" width="2.8289%" height="15" fill="rgb(230,116,27)"/><text x="78.3728%" y="191.50">LL..</text></g><g><title>metadata_register_crate (3,039,231 samples, 0.81%)</title><rect x="89.4044%" y="149" width="0.8112%" height="15" fill="rgb(228,99,48)"/><text x="89.6544%" y="159.50"></text></g><g><title>metadata_register_crate (1,205,272 samples, 0.32%)</title><rect x="89.8938%" y="133" width="0.3217%" height="15" fill="rgb(253,11,6)"/><text x="90.1438%" y="143.50"></text></g><g><title>macro_expand_crate (34,094,646 samples, 9.10%)</title><rect x="81.1361%" y="181" width="9.0997%" height="15" fill="rgb(247,143,39)"/><text x="81.3861%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (34,077,246 samples, 9.10%)</title><rect x="81.1407%" y="165" width="9.0951%" height="15" fill="rgb(236,97,10)"/><text x="81.3907%" y="175.50">expand_crate</text></g><g><title>finalize_imports (399,384 samples, 0.11%)</title><rect x="90.2965%" y="165" width="0.1066%" height="15" fill="rgb(233,208,19)"/><text x="90.5465%" y="175.50"></text></g><g><title>late_resolve_crate (2,493,705 samples, 0.67%)</title><rect x="90.4648%" y="165" width="0.6656%" height="15" fill="rgb(216,164,2)"/><text x="90.7148%" y="175.50"></text></g><g><title>configure_and_expand (38,303,099 samples, 10.22%)</title><rect x="80.9517%" y="197" width="10.2230%" height="15" fill="rgb(220,129,5)"/><text x="81.2017%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (3,300,004 samples, 0.88%)</title><rect x="90.2939%" y="181" width="0.8808%" height="15" fill="rgb(242,17,10)"/><text x="90.5439%" y="191.50"></text></g><g><title>early_lint_checks (481,705 samples, 0.13%)</title><rect x="91.2347%" y="197" width="0.1286%" height="15" fill="rgb(242,107,0)"/><text x="91.4847%" y="207.50"></text></g><g><title>free_global_ctxt (5,388,385 samples, 1.44%)</title><rect x="91.3633%" y="197" width="1.4381%" height="15" fill="rgb(251,28,31)"/><text x="91.6133%" y="207.50"></text></g><g><title>item_attrs (517,268 samples, 0.14%)</title><rect x="93.5484%" y="101" width="0.1381%" height="15" fill="rgb(233,223,10)"/><text x="93.7984%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (499,788 samples, 0.13%)</title><rect x="93.5530%" y="85" width="0.1334%" height="15" fill="rgb(215,21,27)"/><text x="93.8030%" y="95.50"></text></g><g><title>codegen_fn_attrs (777,236 samples, 0.21%)</title><rect x="93.5159%" y="117" width="0.2074%" height="15" fill="rgb(232,23,21)"/><text x="93.7659%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (973,486 samples, 0.26%)</title><rect x="94.3205%" y="101" width="0.2598%" height="15" fill="rgb(244,5,23)"/><text x="94.5705%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,771,817 samples, 0.47%)</title><rect x="94.5803%" y="101" width="0.4729%" height="15" fill="rgb(226,81,46)"/><text x="94.8303%" y="111.50"></text></g><g><title>optimized_mir (4,858,722 samples, 1.30%)</title><rect x="93.8069%" y="117" width="1.2968%" height="15" fill="rgb(247,70,30)"/><text x="94.0569%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (694,248 samples, 0.19%)</title><rect x="95.1886%" y="101" width="0.1853%" height="15" fill="rgb(212,68,19)"/><text x="95.4386%" y="111.50"></text></g><g><title>impl_parent (423,183 samples, 0.11%)</title><rect x="95.6009%" y="85" width="0.1129%" height="15" fill="rgb(240,187,13)"/><text x="95.8509%" y="95.50"></text></g><g><title>specialization_graph_of (1,259,003 samples, 0.34%)</title><rect x="95.4341%" y="101" width="0.3360%" height="15" fill="rgb(223,113,26)"/><text x="95.6841%" y="111.50"></text></g><g><title>resolve_instance (2,689,295 samples, 0.72%)</title><rect x="95.1036%" y="117" width="0.7178%" height="15" fill="rgb(206,192,2)"/><text x="95.3536%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (402,525 samples, 0.11%)</title><rect x="95.8214%" y="117" width="0.1074%" height="15" fill="rgb(241,108,4)"/><text x="96.0714%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (10,370,716 samples, 2.77%)</title><rect x="93.2833%" y="133" width="2.7679%" height="15" fill="rgb(247,173,49)"/><text x="93.5333%" y="143.50">mo..</text></g><g><title>monomorphization_collector (10,425,017 samples, 2.78%)</title><rect x="93.2826%" y="149" width="2.7824%" height="15" fill="rgb(224,114,35)"/><text x="93.5326%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (757,218 samples, 0.20%)</title><rect x="96.0677%" y="133" width="0.2021%" height="15" fill="rgb(245,159,27)"/><text x="96.3177%" y="143.50"></text></g><g><title>symbol_name (687,677 samples, 0.18%)</title><rect x="96.0863%" y="117" width="0.1835%" height="15" fill="rgb(245,172,44)"/><text x="96.3363%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (11,640,409 samples, 3.11%)</title><rect x="93.2753%" y="165" width="3.1068%" height="15" fill="rgb(236,23,11)"/><text x="93.5253%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,188,212 samples, 0.32%)</title><rect x="96.0650%" y="149" width="0.3171%" height="15" fill="rgb(205,117,38)"/><text x="96.3150%" y="159.50"></text></g><g><title>cgu_partitioning (420,734 samples, 0.11%)</title><rect x="96.2698%" y="133" width="0.1123%" height="15" fill="rgb(237,72,25)"/><text x="96.5198%" y="143.50"></text></g><g><title>exported_symbols (11,754,550 samples, 3.14%)</title><rect x="93.2653%" y="181" width="3.1372%" height="15" fill="rgb(244,70,9)"/><text x="93.5153%" y="191.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (515,369 samples, 0.14%)</title><rect x="96.6421%" y="165" width="0.1376%" height="15" fill="rgb(217,125,39)"/><text x="96.8921%" y="175.50"></text></g><g><title>optimized_mir (1,383,415 samples, 0.37%)</title><rect x="96.4131%" y="181" width="0.3692%" height="15" fill="rgb(235,36,10)"/><text x="96.6631%" y="191.50"></text></g><g><title>generate_crate_metadata (14,950,471 samples, 3.99%)</title><rect x="92.8014%" y="197" width="3.9902%" height="15" fill="rgb(251,123,47)"/><text x="93.0514%" y="207.50">gene..</text></g><g><title>hir_lowering (4,230,163 samples, 1.13%)</title><rect x="96.7916%" y="197" width="1.1290%" height="15" fill="rgb(221,13,13)"/><text x="97.0416%" y="207.50"></text></g><g><title>link_crate (2,227,093 samples, 0.59%)</title><rect x="97.9267%" y="181" width="0.5944%" height="15" fill="rgb(238,131,9)"/><text x="98.1767%" y="191.50"></text></g><g><title>link_binary (2,200,532 samples, 0.59%)</title><rect x="97.9338%" y="165" width="0.5873%" height="15" fill="rgb(211,50,8)"/><text x="98.1838%" y="175.50"></text></g><g><title>link_rlib (1,513,135 samples, 0.40%)</title><rect x="98.1173%" y="149" width="0.4039%" height="15" fill="rgb(245,182,24)"/><text x="98.3673%" y="159.50"></text></g><g><title>link (2,260,783 samples, 0.60%)</title><rect x="97.9206%" y="197" width="0.6034%" height="15" fill="rgb(242,14,37)"/><text x="98.1706%" y="207.50"></text></g><g><title>parse_crate (2,694,928 samples, 0.72%)</title><rect x="98.5240%" y="197" width="0.7193%" height="15" fill="rgb(246,228,12)"/><text x="98.7740%" y="207.50"></text></g><g><title>prepare_outputs (418,884 samples, 0.11%)</title><rect x="99.2455%" y="197" width="0.1118%" height="15" fill="rgb(213,55,15)"/><text x="99.4955%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,825,068 samples, 0.49%)</title><rect x="99.3573%" y="197" width="0.4871%" height="15" fill="rgb(209,9,3)"/><text x="99.6073%" y="207.50"></text></g><g><title>all (374,677,279 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (374,677,279 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (505,206 samples, 0.13%)</title><rect x="99.8652%" y="197" width="0.1348%" height="15" fill="rgb(220,109,13)"/><text x="100.1152%" y="207.50"></text></g></svg></svg>