<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (57,056,880 samples, 9.89%)</title><rect x="0.1109%" y="181" width="9.8913%" height="15" fill="rgb(227,0,7)"/><text x="0.3609%" y="191.50">LLVM_passes</text></g><g><title>item_attrs (656,708 samples, 0.11%)</title><rect x="15.6953%" y="69" width="0.1138%" height="15" fill="rgb(217,0,24)"/><text x="15.9453%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (642,798 samples, 0.11%)</title><rect x="15.6977%" y="53" width="0.1114%" height="15" fill="rgb(221,193,54)"/><text x="15.9477%" y="63.50"></text></g><g><title>codegen_fn_attrs (810,738 samples, 0.14%)</title><rect x="15.6725%" y="85" width="0.1405%" height="15" fill="rgb(248,212,6)"/><text x="15.9225%" y="95.50"></text></g><g><title>needs_drop_raw (1,999,489 samples, 0.35%)</title><rect x="17.1674%" y="69" width="0.3466%" height="15" fill="rgb(208,68,35)"/><text x="17.4174%" y="79.50"></text></g><g><title>is_copy_raw (1,673,669 samples, 0.29%)</title><rect x="17.2238%" y="53" width="0.2901%" height="15" fill="rgb(232,128,0)"/><text x="17.4738%" y="63.50"></text></g><g><title>evaluate_obligation (1,473,386 samples, 0.26%)</title><rect x="17.2586%" y="37" width="0.2554%" height="15" fill="rgb(207,160,47)"/><text x="17.5086%" y="47.50"></text></g><g><title>resolve_instance (664,368 samples, 0.12%)</title><rect x="17.5140%" y="69" width="0.1152%" height="15" fill="rgb(228,23,34)"/><text x="17.7640%" y="79.50"></text></g><g><title>thir_body (2,722,126 samples, 0.47%)</title><rect x="17.6383%" y="69" width="0.4719%" height="15" fill="rgb(218,30,26)"/><text x="17.8883%" y="79.50"></text></g><g><title>mir_const (17,783,221 samples, 3.08%)</title><rect x="15.0324%" y="117" width="3.0829%" height="15" fill="rgb(220,122,19)"/><text x="15.2824%" y="127.50">mir..</text></g><g><title>unsafety_check_result (15,162,392 samples, 2.63%)</title><rect x="15.4867%" y="101" width="2.6285%" height="15" fill="rgb(250,228,42)"/><text x="15.7367%" y="111.50">un..</text></g><g><title>mir_built (13,279,964 samples, 2.30%)</title><rect x="15.8131%" y="85" width="2.3022%" height="15" fill="rgb(240,193,28)"/><text x="16.0631%" y="95.50">m..</text></g><g><title>mir_promoted (20,200,317 samples, 3.50%)</title><rect x="14.6822%" y="133" width="3.5019%" height="15" fill="rgb(216,20,37)"/><text x="14.9322%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (655,937 samples, 0.11%)</title><rect x="18.1844%" y="133" width="0.1137%" height="15" fill="rgb(206,188,39)"/><text x="18.4344%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,361,678 samples, 0.41%)</title><rect x="18.4627%" y="133" width="0.4094%" height="15" fill="rgb(217,207,13)"/><text x="18.7127%" y="143.50"></text></g><g><title>MIR_borrow_checking (50,562,074 samples, 8.77%)</title><rect x="10.1081%" y="165" width="8.7654%" height="15" fill="rgb(231,73,38)"/><text x="10.3581%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (50,315,592 samples, 8.72%)</title><rect x="10.1509%" y="149" width="8.7226%" height="15" fill="rgb(225,20,46)"/><text x="10.4009%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (974,529 samples, 0.17%)</title><rect x="18.9936%" y="149" width="0.1689%" height="15" fill="rgb(210,31,41)"/><text x="19.2436%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,184,765 samples, 0.21%)</title><rect x="19.2284%" y="149" width="0.2054%" height="15" fill="rgb(221,200,47)"/><text x="19.4784%" y="159.50"></text></g><g><title>misc_checking_1 (2,694,178 samples, 0.47%)</title><rect x="18.9862%" y="165" width="0.4671%" height="15" fill="rgb(226,26,5)"/><text x="19.2362%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (996,670 samples, 0.17%)</title><rect x="19.4535%" y="149" width="0.1728%" height="15" fill="rgb(249,33,26)"/><text x="19.7035%" y="159.50"></text></g><g><title>check_mod_liveness (781,888 samples, 0.14%)</title><rect x="19.4908%" y="133" width="0.1355%" height="15" fill="rgb(235,183,28)"/><text x="19.7408%" y="143.50"></text></g><g><title>misc_checking_2 (3,391,014 samples, 0.59%)</title><rect x="19.4532%" y="165" width="0.5879%" height="15" fill="rgb(221,5,38)"/><text x="19.7032%" y="175.50"></text></g><g><title>match_checking (2,392,684 samples, 0.41%)</title><rect x="19.6263%" y="149" width="0.4148%" height="15" fill="rgb(247,18,42)"/><text x="19.8763%" y="159.50"></text></g><g><title>check_match (2,330,964 samples, 0.40%)</title><rect x="19.6370%" y="133" width="0.4041%" height="15" fill="rgb(241,131,45)"/><text x="19.8870%" y="143.50"></text></g><g><title>death_checking (940,070 samples, 0.16%)</title><rect x="20.1116%" y="149" width="0.1630%" height="15" fill="rgb(249,31,29)"/><text x="20.3616%" y="159.50"></text></g><g><title>param_env (929,241 samples, 0.16%)</title><rect x="20.5476%" y="117" width="0.1611%" height="15" fill="rgb(225,111,53)"/><text x="20.7976%" y="127.50"></text></g><g><title>crate_lints (3,845,449 samples, 0.67%)</title><rect x="20.2749%" y="133" width="0.6666%" height="15" fill="rgb(238,160,17)"/><text x="20.5249%" y="143.50"></text></g><g><title>type_of (1,334,736 samples, 0.23%)</title><rect x="20.7101%" y="117" width="0.2314%" height="15" fill="rgb(214,148,48)"/><text x="20.9601%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (877,679 samples, 0.15%)</title><rect x="20.7894%" y="101" width="0.1522%" height="15" fill="rgb(232,36,49)"/><text x="21.0394%" y="111.50"></text></g><g><title>lint_checking (5,159,682 samples, 0.89%)</title><rect x="20.2746%" y="149" width="0.8945%" height="15" fill="rgb(209,103,24)"/><text x="20.5246%" y="159.50"></text></g><g><title>module_lints (1,312,453 samples, 0.23%)</title><rect x="20.9415%" y="133" width="0.2275%" height="15" fill="rgb(229,88,8)"/><text x="21.1915%" y="143.50"></text></g><g><title>lint_mod (1,299,063 samples, 0.23%)</title><rect x="20.9438%" y="117" width="0.2252%" height="15" fill="rgb(213,181,19)"/><text x="21.1938%" y="127.50"></text></g><g><title>privacy_checking_modules (1,926,300 samples, 0.33%)</title><rect x="21.2639%" y="149" width="0.3339%" height="15" fill="rgb(254,191,54)"/><text x="21.5139%" y="159.50"></text></g><g><title>check_mod_privacy (1,915,860 samples, 0.33%)</title><rect x="21.2658%" y="133" width="0.3321%" height="15" fill="rgb(241,83,37)"/><text x="21.5158%" y="143.50"></text></g><g><title>misc_checking_3 (9,013,402 samples, 1.56%)</title><rect x="20.0411%" y="165" width="1.5625%" height="15" fill="rgb(233,36,39)"/><text x="20.2911%" y="175.50"></text></g><g><title>impl_parent (2,402,032 samples, 0.42%)</title><rect x="22.3134%" y="101" width="0.4164%" height="15" fill="rgb(226,3,54)"/><text x="22.5634%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,314,701 samples, 0.23%)</title><rect x="22.5019%" y="85" width="0.2279%" height="15" fill="rgb(245,192,40)"/><text x="22.7519%" y="95.50"></text></g><g><title>impl_trait_ref (5,293,816 samples, 0.92%)</title><rect x="22.7298%" y="101" width="0.9177%" height="15" fill="rgb(238,167,29)"/><text x="22.9798%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,186,785 samples, 0.73%)</title><rect x="22.9217%" y="85" width="0.7258%" height="15" fill="rgb(232,182,51)"/><text x="23.1717%" y="95.50"></text></g><g><title>trait_impls_of (696,529 samples, 0.12%)</title><rect x="23.6588%" y="101" width="0.1207%" height="15" fill="rgb(231,60,39)"/><text x="23.9088%" y="111.50"></text></g><g><title>coherent_trait (12,382,256 samples, 2.15%)</title><rect x="21.6332%" y="133" width="2.1466%" height="15" fill="rgb(208,69,12)"/><text x="21.8832%" y="143.50">c..</text></g><g><title>specialization_graph_of (11,938,022 samples, 2.07%)</title><rect x="21.7102%" y="117" width="2.0696%" height="15" fill="rgb(235,93,37)"/><text x="21.9602%" y="127.50">s..</text></g><g><title>coherence_checking (12,476,497 samples, 2.16%)</title><rect x="21.6299%" y="149" width="2.1629%" height="15" fill="rgb(213,116,39)"/><text x="21.8799%" y="159.50">c..</text></g><g><title>dropck_outlives (738,929 samples, 0.13%)</title><rect x="33.5265%" y="101" width="0.1281%" height="15" fill="rgb(222,207,29)"/><text x="33.7765%" y="111.50"></text></g><g><title>generics_of (957,643 samples, 0.17%)</title><rect x="34.2795%" y="85" width="0.1660%" height="15" fill="rgb(206,96,30)"/><text x="34.5295%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (618,399 samples, 0.11%)</title><rect x="34.3383%" y="69" width="0.1072%" height="15" fill="rgb(218,138,4)"/><text x="34.5883%" y="79.50"></text></g><g><title>impl_trait_ref (644,924 samples, 0.11%)</title><rect x="34.4569%" y="85" width="0.1118%" height="15" fill="rgb(250,191,14)"/><text x="34.7069%" y="95.50"></text></g><g><title>evaluate_obligation (6,380,618 samples, 1.11%)</title><rect x="33.6546%" y="101" width="1.1061%" height="15" fill="rgb(239,60,40)"/><text x="33.9046%" y="111.50"></text></g><g><title>generics_of (760,708 samples, 0.13%)</title><rect x="34.8017%" y="101" width="0.1319%" height="15" fill="rgb(206,27,48)"/><text x="35.0517%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (593,778 samples, 0.10%)</title><rect x="34.8306%" y="85" width="0.1029%" height="15" fill="rgb(225,35,8)"/><text x="35.0806%" y="95.50"></text></g><g><title>typeck (3,049,021 samples, 0.53%)</title><rect x="35.2086%" y="101" width="0.5286%" height="15" fill="rgb(250,213,24)"/><text x="35.4586%" y="111.50"></text></g><g><title>item_bodies_checking (68,951,861 samples, 11.95%)</title><rect x="23.7995%" y="149" width="11.9534%" height="15" fill="rgb(247,123,22)"/><text x="24.0495%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (68,948,941 samples, 11.95%)</title><rect x="23.8000%" y="133" width="11.9529%" height="15" fill="rgb(231,138,38)"/><text x="24.0500%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (68,779,720 samples, 11.92%)</title><rect x="23.8293%" y="117" width="11.9235%" height="15" fill="rgb(231,145,46)"/><text x="24.0793%" y="127.50">typeck</text></g><g><title>item_types_checking (908,009 samples, 0.16%)</title><rect x="35.7529%" y="149" width="0.1574%" height="15" fill="rgb(251,118,11)"/><text x="36.0029%" y="159.50"></text></g><g><title>check_mod_item_types (897,879 samples, 0.16%)</title><rect x="35.7546%" y="133" width="0.1557%" height="15" fill="rgb(217,147,25)"/><text x="36.0046%" y="143.50"></text></g><g><title>fn_sig (689,618 samples, 0.12%)</title><rect x="36.0022%" y="117" width="0.1196%" height="15" fill="rgb(247,81,37)"/><text x="36.2522%" y="127.50"></text></g><g><title>named_region_map (672,625 samples, 0.12%)</title><rect x="36.1704%" y="101" width="0.1166%" height="15" fill="rgb(209,12,38)"/><text x="36.4204%" y="111.50"></text></g><g><title>resolve_lifetimes (625,785 samples, 0.11%)</title><rect x="36.1785%" y="85" width="0.1085%" height="15" fill="rgb(227,1,9)"/><text x="36.4285%" y="95.50"></text></g><g><title>generics_of (979,510 samples, 0.17%)</title><rect x="36.1218%" y="117" width="0.1698%" height="15" fill="rgb(248,47,43)"/><text x="36.3718%" y="127.50"></text></g><g><title>predicates_of (793,377 samples, 0.14%)</title><rect x="36.3030%" y="117" width="0.1375%" height="15" fill="rgb(221,10,30)"/><text x="36.5530%" y="127.50"></text></g><g><title>predicates_defined_on (691,126 samples, 0.12%)</title><rect x="36.3207%" y="101" width="0.1198%" height="15" fill="rgb(210,229,1)"/><text x="36.5707%" y="111.50"></text></g><g><title>type_collecting (3,215,462 samples, 0.56%)</title><rect x="35.9118%" y="149" width="0.5574%" height="15" fill="rgb(222,148,37)"/><text x="36.1618%" y="159.50"></text></g><g><title>collect_mod_item_types (3,194,182 samples, 0.55%)</title><rect x="35.9154%" y="133" width="0.5537%" height="15" fill="rgb(234,67,33)"/><text x="36.1654%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,008,633 samples, 0.35%)</title><rect x="36.5331%" y="133" width="0.3482%" height="15" fill="rgb(247,98,35)"/><text x="36.7831%" y="143.50"></text></g><g><title>param_env (598,055 samples, 0.10%)</title><rect x="37.5796%" y="117" width="0.1037%" height="15" fill="rgb(247,138,52)"/><text x="37.8296%" y="127.50"></text></g><g><title>region_scope_tree (679,446 samples, 0.12%)</title><rect x="37.6955%" y="117" width="0.1178%" height="15" fill="rgb(213,79,30)"/><text x="37.9455%" y="127.50"></text></g><g><title>analysis (160,611,114 samples, 27.84%)</title><rect x="10.0022%" y="181" width="27.8433%" height="15" fill="rgb(246,177,23)"/><text x="10.2522%" y="191.50">analysis</text></g><g><title>type_check_crate (93,689,143 samples, 16.24%)</title><rect x="21.6036%" y="165" width="16.2418%" height="15" fill="rgb(230,62,27)"/><text x="21.8536%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,927,881 samples, 1.37%)</title><rect x="36.4711%" y="149" width="1.3744%" height="15" fill="rgb(216,154,8)"/><text x="36.7211%" y="159.50"></text></g><g><title>check_item_well_formed (5,561,662 samples, 0.96%)</title><rect x="36.8813%" y="133" width="0.9642%" height="15" fill="rgb(244,35,45)"/><text x="37.1313%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (638,369 samples, 0.11%)</title><rect x="44.3638%" y="149" width="0.1107%" height="15" fill="rgb(251,115,12)"/><text x="44.6138%" y="159.50"></text></g><g><title>codegen_fn_attrs (699,856 samples, 0.12%)</title><rect x="44.8866%" y="133" width="0.1213%" height="15" fill="rgb(240,54,50)"/><text x="45.1366%" y="143.50"></text></g><g><title>layout_of (642,695 samples, 0.11%)</title><rect x="45.1057%" y="117" width="0.1114%" height="15" fill="rgb(233,84,52)"/><text x="45.3557%" y="127.50"></text></g><g><title>layout_of (1,312,914 samples, 0.23%)</title><rect x="45.0238%" y="133" width="0.2276%" height="15" fill="rgb(207,117,47)"/><text x="45.2738%" y="143.50"></text></g><g><title>predicates_of (762,966 samples, 0.13%)</title><rect x="45.4932%" y="117" width="0.1323%" height="15" fill="rgb(249,43,39)"/><text x="45.7432%" y="127.50"></text></g><g><title>param_env (2,170,392 samples, 0.38%)</title><rect x="45.2514%" y="133" width="0.3763%" height="15" fill="rgb(209,38,44)"/><text x="45.5014%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,014,499 samples, 0.18%)</title><rect x="45.6276%" y="133" width="0.1759%" height="15" fill="rgb(236,212,23)"/><text x="45.8776%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,171,350 samples, 1.24%)</title><rect x="44.5663%" y="149" width="1.2432%" height="15" fill="rgb(242,79,21)"/><text x="44.8163%" y="159.50"></text></g><g><title>layout_of (722,797 samples, 0.13%)</title><rect x="45.9609%" y="133" width="0.1253%" height="15" fill="rgb(211,96,35)"/><text x="46.2109%" y="143.50"></text></g><g><title>layout_of (1,477,616 samples, 0.26%)</title><rect x="45.8492%" y="149" width="0.2562%" height="15" fill="rgb(253,215,40)"/><text x="46.0992%" y="159.50"></text></g><g><title>symbol_name (743,997 samples, 0.13%)</title><rect x="46.1091%" y="149" width="0.1290%" height="15" fill="rgb(211,81,21)"/><text x="46.3591%" y="159.50"></text></g><g><title>codegen_module (46,696,892 samples, 8.10%)</title><rect x="38.1730%" y="165" width="8.0953%" height="15" fill="rgb(208,190,38)"/><text x="38.4230%" y="175.50">codegen_mod..</text></g><g><title>codegen_crate (48,659,505 samples, 8.44%)</title><rect x="37.8465%" y="181" width="8.4355%" height="15" fill="rgb(235,213,38)"/><text x="38.0965%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (217,587,124 samples, 37.72%)</title><rect x="46.3204%" y="165" width="37.7206%" height="15" fill="rgb(237,122,38)"/><text x="46.5704%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (207,144,689 samples, 35.91%)</title><rect x="48.1306%" y="149" width="35.9103%" height="15" fill="rgb(244,218,35)"/><text x="48.3806%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (225,253,501 samples, 39.05%)</title><rect x="46.2821%" y="181" width="39.0496%" height="15" fill="rgb(240,68,47)"/><text x="46.5321%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,445,535 samples, 1.29%)</title><rect x="84.0409%" y="165" width="1.2907%" height="15" fill="rgb(210,16,53)"/><text x="84.2909%" y="175.50"></text></g><g><title>metadata_register_crate (1,309,694 samples, 0.23%)</title><rect x="87.9519%" y="133" width="0.2270%" height="15" fill="rgb(235,124,12)"/><text x="88.2019%" y="143.50"></text></g><g><title>macro_expand_crate (16,269,385 samples, 2.82%)</title><rect x="85.4170%" y="165" width="2.8204%" height="15" fill="rgb(224,169,11)"/><text x="85.6670%" y="175.50">ma..</text></g><g><title>expand_crate (16,253,725 samples, 2.82%)</title><rect x="85.4198%" y="149" width="2.8177%" height="15" fill="rgb(250,166,2)"/><text x="85.6698%" y="159.50">ex..</text></g><g><title>late_resolve_crate (2,942,060 samples, 0.51%)</title><rect x="88.3035%" y="149" width="0.5100%" height="15" fill="rgb(242,216,29)"/><text x="88.5535%" y="159.50"></text></g><g><title>configure_and_expand (20,305,966 samples, 3.52%)</title><rect x="85.3317%" y="181" width="3.5202%" height="15" fill="rgb(230,116,27)"/><text x="85.5817%" y="191.50">con..</text></g><g><title>resolve_crate (3,501,866 samples, 0.61%)</title><rect x="88.2448%" y="165" width="0.6071%" height="15" fill="rgb(228,99,48)"/><text x="88.4948%" y="175.50"></text></g><g><title>early_lint_checks (696,937 samples, 0.12%)</title><rect x="88.9118%" y="181" width="0.1208%" height="15" fill="rgb(253,11,6)"/><text x="89.1618%" y="191.50"></text></g><g><title>free_global_ctxt (6,913,610 samples, 1.20%)</title><rect x="89.0327%" y="181" width="1.1985%" height="15" fill="rgb(247,143,39)"/><text x="89.2827%" y="191.50"></text></g><g><title>codegen_fn_attrs (847,596 samples, 0.15%)</title><rect x="91.0684%" y="101" width="0.1469%" height="15" fill="rgb(236,97,10)"/><text x="91.3184%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (739,696 samples, 0.13%)</title><rect x="91.6481%" y="85" width="0.1282%" height="15" fill="rgb(233,208,19)"/><text x="91.8981%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,104,134 samples, 0.36%)</title><rect x="91.7764%" y="85" width="0.3648%" height="15" fill="rgb(216,164,2)"/><text x="92.0264%" y="95.50"></text></g><g><title>optimized_mir (4,810,949 samples, 0.83%)</title><rect x="91.3089%" y="101" width="0.8340%" height="15" fill="rgb(220,129,5)"/><text x="91.5589%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,621,829 samples, 0.28%)</title><rect x="92.2243%" y="85" width="0.2812%" height="15" fill="rgb(242,17,10)"/><text x="92.4743%" y="95.50"></text></g><g><title>specialization_graph_of (1,947,799 samples, 0.34%)</title><rect x="92.5894%" y="85" width="0.3377%" height="15" fill="rgb(242,107,0)"/><text x="92.8394%" y="95.50"></text></g><g><title>impl_trait_ref (795,388 samples, 0.14%)</title><rect x="92.7892%" y="69" width="0.1379%" height="15" fill="rgb(251,28,31)"/><text x="93.0392%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (616,025 samples, 0.11%)</title><rect x="92.8203%" y="53" width="0.1068%" height="15" fill="rgb(233,223,10)"/><text x="93.0703%" y="63.50"></text></g><g><title>resolve_instance (4,682,531 samples, 0.81%)</title><rect x="92.1430%" y="101" width="0.8118%" height="15" fill="rgb(215,21,27)"/><text x="92.3930%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (13,037,702 samples, 2.26%)</title><rect x="90.8820%" y="117" width="2.2602%" height="15" fill="rgb(232,23,21)"/><text x="91.1320%" y="127.50">m..</text></g><g><title>vtable_entries (715,336 samples, 0.12%)</title><rect x="93.0182%" y="101" width="0.1240%" height="15" fill="rgb(244,5,23)"/><text x="93.2682%" y="111.50"></text></g><g><title>monomorphization_collector (13,116,213 samples, 2.27%)</title><rect x="90.8812%" y="133" width="2.2738%" height="15" fill="rgb(226,81,46)"/><text x="91.1312%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (1,024,320 samples, 0.18%)</title><rect x="93.1560%" y="117" width="0.1776%" height="15" fill="rgb(247,70,30)"/><text x="93.4060%" y="127.50"></text></g><g><title>symbol_name (936,119 samples, 0.16%)</title><rect x="93.1713%" y="101" width="0.1623%" height="15" fill="rgb(212,68,19)"/><text x="93.4213%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (14,688,549 samples, 2.55%)</title><rect x="90.8739%" y="149" width="2.5464%" height="15" fill="rgb(240,187,13)"/><text x="91.1239%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,529,905 samples, 0.27%)</title><rect x="93.1550%" y="133" width="0.2652%" height="15" fill="rgb(223,113,26)"/><text x="93.4050%" y="143.50"></text></g><g><title>exported_symbols (14,992,303 samples, 2.60%)</title><rect x="90.8641%" y="165" width="2.5990%" height="15" fill="rgb(206,192,2)"/><text x="91.1141%" y="175.50">ex..</text></g><g><title>layout_of (823,695 samples, 0.14%)</title><rect x="94.6466%" y="149" width="0.1428%" height="15" fill="rgb(241,108,4)"/><text x="94.8966%" y="159.50"></text></g><g><title>needs_drop_raw (1,074,915 samples, 0.19%)</title><rect x="96.6669%" y="133" width="0.1863%" height="15" fill="rgb(247,173,49)"/><text x="96.9169%" y="143.50"></text></g><g><title>is_copy_raw (967,834 samples, 0.17%)</title><rect x="96.6854%" y="117" width="0.1678%" height="15" fill="rgb(224,114,35)"/><text x="96.9354%" y="127.50"></text></g><g><title>evaluate_obligation (843,251 samples, 0.15%)</title><rect x="96.7070%" y="101" width="0.1462%" height="15" fill="rgb(245,159,27)"/><text x="96.9570%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,931,772 samples, 2.07%)</title><rect x="94.7894%" y="149" width="2.0685%" height="15" fill="rgb(245,172,44)"/><text x="95.0394%" y="159.50">m..</text></g><g><title>optimized_mir (19,395,558 samples, 3.36%)</title><rect x="93.5068%" y="165" width="3.3624%" height="15" fill="rgb(236,23,11)"/><text x="93.7568%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (38,429,261 samples, 6.66%)</title><rect x="90.2312%" y="181" width="6.6620%" height="15" fill="rgb(205,117,38)"/><text x="90.4812%" y="191.50">generate_..</text></g><g><title>hir_lowering (6,401,045 samples, 1.11%)</title><rect x="96.8932%" y="181" width="1.1097%" height="15" fill="rgb(237,72,25)"/><text x="97.1432%" y="191.50"></text></g><g><title>finish_ongoing_codegen (6,406,385 samples, 1.11%)</title><rect x="98.0056%" y="165" width="1.1106%" height="15" fill="rgb(244,70,9)"/><text x="98.2556%" y="175.50"></text></g><g><title>link_crate (2,388,925 samples, 0.41%)</title><rect x="99.1162%" y="165" width="0.4141%" height="15" fill="rgb(217,125,39)"/><text x="99.3662%" y="175.50"></text></g><g><title>link_binary (2,328,154 samples, 0.40%)</title><rect x="99.1267%" y="149" width="0.4036%" height="15" fill="rgb(235,36,10)"/><text x="99.3767%" y="159.50"></text></g><g><title>link_rlib (1,647,986 samples, 0.29%)</title><rect x="99.2446%" y="133" width="0.2857%" height="15" fill="rgb(251,123,47)"/><text x="99.4946%" y="143.50"></text></g><g><title>link (8,821,890 samples, 1.53%)</title><rect x="98.0029%" y="181" width="1.5293%" height="15" fill="rgb(221,13,13)"/><text x="98.2529%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,619,677 samples, 0.28%)</title><rect x="99.6183%" y="181" width="0.2808%" height="15" fill="rgb(238,131,9)"/><text x="99.8683%" y="191.50"></text></g><g><title>all (576,839,356 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (576,839,356 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>