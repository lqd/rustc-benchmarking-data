<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,505,874 samples, 7.41%)</title><rect x="0.3161%" y="197" width="7.4070%" height="15" fill="rgb(227,0,7)"/><text x="0.5661%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (223,714 samples, 0.11%)</title><rect x="14.7530%" y="101" width="0.1142%" height="15" fill="rgb(217,0,24)"/><text x="15.0030%" y="111.50"></text></g><g><title>is_copy_raw (1,171,475 samples, 0.60%)</title><rect x="16.2777%" y="69" width="0.5982%" height="15" fill="rgb(221,193,54)"/><text x="16.5277%" y="79.50"></text></g><g><title>evaluate_obligation (1,022,113 samples, 0.52%)</title><rect x="16.3540%" y="53" width="0.5219%" height="15" fill="rgb(248,212,6)"/><text x="16.6040%" y="63.50"></text></g><g><title>needs_drop_raw (1,438,429 samples, 0.73%)</title><rect x="16.1456%" y="85" width="0.7345%" height="15" fill="rgb(208,68,35)"/><text x="16.3956%" y="95.50"></text></g><g><title>impl_parent (312,323 samples, 0.16%)</title><rect x="17.3106%" y="53" width="0.1595%" height="15" fill="rgb(232,128,0)"/><text x="17.5606%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (198,661 samples, 0.10%)</title><rect x="17.3687%" y="37" width="0.1014%" height="15" fill="rgb(207,160,47)"/><text x="17.6187%" y="47.50"></text></g><g><title>specialization_graph_of (1,270,733 samples, 0.65%)</title><rect x="17.0523%" y="69" width="0.6489%" height="15" fill="rgb(228,23,34)"/><text x="17.3023%" y="79.50"></text></g><g><title>impl_trait_ref (452,415 samples, 0.23%)</title><rect x="17.4701%" y="53" width="0.2310%" height="15" fill="rgb(218,30,26)"/><text x="17.7201%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (335,095 samples, 0.17%)</title><rect x="17.5300%" y="37" width="0.1711%" height="15" fill="rgb(220,122,19)"/><text x="17.7800%" y="47.50"></text></g><g><title>resolve_instance (1,648,338 samples, 0.84%)</title><rect x="16.8801%" y="85" width="0.8417%" height="15" fill="rgb(250,228,42)"/><text x="17.1301%" y="95.50"></text></g><g><title>thir_body (932,982 samples, 0.48%)</title><rect x="17.7310%" y="85" width="0.4764%" height="15" fill="rgb(240,193,28)"/><text x="17.9810%" y="95.50"></text></g><g><title>mir_const (8,174,528 samples, 4.17%)</title><rect x="14.0643%" y="133" width="4.1741%" height="15" fill="rgb(216,20,37)"/><text x="14.3143%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (7,255,127 samples, 3.70%)</title><rect x="14.5338%" y="117" width="3.7046%" height="15" fill="rgb(206,188,39)"/><text x="14.7838%" y="127.50">unsa..</text></g><g><title>mir_built (6,602,040 samples, 3.37%)</title><rect x="14.8672%" y="101" width="3.3712%" height="15" fill="rgb(217,207,13)"/><text x="15.1172%" y="111.50">mir..</text></g><g><title>mir_promoted (8,995,519 samples, 4.59%)</title><rect x="13.6637%" y="149" width="4.5933%" height="15" fill="rgb(231,73,38)"/><text x="13.9137%" y="159.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (413,884 samples, 0.21%)</title><rect x="18.2571%" y="149" width="0.2113%" height="15" fill="rgb(225,20,46)"/><text x="18.5071%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (537,535 samples, 0.27%)</title><rect x="18.4684%" y="149" width="0.2745%" height="15" fill="rgb(210,31,41)"/><text x="18.7184%" y="159.50"></text></g><g><title>normalize_projection_ty (255,513 samples, 0.13%)</title><rect x="18.6124%" y="133" width="0.1305%" height="15" fill="rgb(221,200,47)"/><text x="18.8624%" y="143.50"></text></g><g><title>type_op_normalize_predicate (298,282 samples, 0.15%)</title><rect x="18.7429%" y="149" width="0.1523%" height="15" fill="rgb(226,26,5)"/><text x="18.9929%" y="159.50"></text></g><g><title>type_op_normalize_ty (329,465 samples, 0.17%)</title><rect x="18.8952%" y="149" width="0.1682%" height="15" fill="rgb(249,33,26)"/><text x="19.1452%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,895,101 samples, 1.48%)</title><rect x="19.0634%" y="149" width="1.4783%" height="15" fill="rgb(235,183,28)"/><text x="19.3134%" y="159.50"></text></g><g><title>MIR_borrow_checking (24,849,137 samples, 12.69%)</title><rect x="7.8563%" y="181" width="12.6886%" height="15" fill="rgb(221,5,38)"/><text x="8.1063%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,768,157 samples, 12.65%)</title><rect x="7.8977%" y="165" width="12.6472%" height="15" fill="rgb(247,18,42)"/><text x="8.1477%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (308,653 samples, 0.16%)</title><rect x="20.7575%" y="149" width="0.1576%" height="15" fill="rgb(241,131,45)"/><text x="21.0075%" y="159.50"></text></g><g><title>check_mod_attrs (513,885 samples, 0.26%)</title><rect x="20.6529%" y="165" width="0.2624%" height="15" fill="rgb(249,31,29)"/><text x="20.9029%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (266,343 samples, 0.14%)</title><rect x="20.9860%" y="165" width="0.1360%" height="15" fill="rgb(225,111,53)"/><text x="21.2360%" y="175.50"></text></g><g><title>misc_checking_1 (983,610 samples, 0.50%)</title><rect x="20.6431%" y="181" width="0.5023%" height="15" fill="rgb(238,160,17)"/><text x="20.8931%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (343,983 samples, 0.18%)</title><rect x="21.1462%" y="165" width="0.1756%" height="15" fill="rgb(214,148,48)"/><text x="21.3962%" y="175.50"></text></g><g><title>check_mod_liveness (275,882 samples, 0.14%)</title><rect x="21.1810%" y="149" width="0.1409%" height="15" fill="rgb(232,36,49)"/><text x="21.4310%" y="159.50"></text></g><g><title>misc_checking_2 (805,118 samples, 0.41%)</title><rect x="21.1453%" y="181" width="0.4111%" height="15" fill="rgb(209,103,24)"/><text x="21.3953%" y="191.50"></text></g><g><title>match_checking (459,385 samples, 0.23%)</title><rect x="21.3219%" y="165" width="0.2346%" height="15" fill="rgb(229,88,8)"/><text x="21.5719%" y="175.50"></text></g><g><title>check_match (439,145 samples, 0.22%)</title><rect x="21.3322%" y="149" width="0.2242%" height="15" fill="rgb(213,181,19)"/><text x="21.5822%" y="159.50"></text></g><g><title>death_checking (305,424 samples, 0.16%)</title><rect x="21.6523%" y="165" width="0.1560%" height="15" fill="rgb(254,191,54)"/><text x="21.9023%" y="175.50"></text></g><g><title>crate_lints (2,339,514 samples, 1.19%)</title><rect x="21.8091%" y="149" width="1.1946%" height="15" fill="rgb(241,83,37)"/><text x="22.0591%" y="159.50"></text></g><g><title>type_of (1,119,801 samples, 0.57%)</title><rect x="22.4319%" y="133" width="0.5718%" height="15" fill="rgb(233,36,39)"/><text x="22.6819%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (878,159 samples, 0.45%)</title><rect x="22.5553%" y="117" width="0.4484%" height="15" fill="rgb(226,3,54)"/><text x="22.8053%" y="127.50"></text></g><g><title>lint_checking (2,706,678 samples, 1.38%)</title><rect x="21.8083%" y="165" width="1.3821%" height="15" fill="rgb(245,192,40)"/><text x="22.0583%" y="175.50"></text></g><g><title>module_lints (365,554 samples, 0.19%)</title><rect x="23.0037%" y="149" width="0.1867%" height="15" fill="rgb(238,167,29)"/><text x="23.2537%" y="159.50"></text></g><g><title>lint_mod (361,414 samples, 0.18%)</title><rect x="23.0058%" y="133" width="0.1845%" height="15" fill="rgb(232,182,51)"/><text x="23.2558%" y="143.50"></text></g><g><title>privacy_access_levels (238,442 samples, 0.12%)</title><rect x="23.1904%" y="165" width="0.1218%" height="15" fill="rgb(231,60,39)"/><text x="23.4404%" y="175.50"></text></g><g><title>privacy_checking_modules (999,141 samples, 0.51%)</title><rect x="23.3121%" y="165" width="0.5102%" height="15" fill="rgb(208,69,12)"/><text x="23.5621%" y="175.50"></text></g><g><title>check_mod_privacy (996,141 samples, 0.51%)</title><rect x="23.3137%" y="149" width="0.5087%" height="15" fill="rgb(235,93,37)"/><text x="23.5637%" y="159.50"></text></g><g><title>misc_checking_3 (4,457,987 samples, 2.28%)</title><rect x="21.5564%" y="181" width="2.2764%" height="15" fill="rgb(213,116,39)"/><text x="21.8064%" y="191.50">m..</text></g><g><title>impl_parent (865,835 samples, 0.44%)</title><rect x="24.5268%" y="117" width="0.4421%" height="15" fill="rgb(222,207,29)"/><text x="24.7768%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (569,284 samples, 0.29%)</title><rect x="24.6782%" y="101" width="0.2907%" height="15" fill="rgb(206,96,30)"/><text x="24.9282%" y="111.50"></text></g><g><title>impl_trait_ref (3,032,283 samples, 1.55%)</title><rect x="24.9689%" y="117" width="1.5484%" height="15" fill="rgb(218,138,4)"/><text x="25.2189%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,737,292 samples, 1.40%)</title><rect x="25.1196%" y="101" width="1.3977%" height="15" fill="rgb(250,191,14)"/><text x="25.3696%" y="111.50"></text></g><g><title>trait_impls_of (267,652 samples, 0.14%)</title><rect x="26.5344%" y="117" width="0.1367%" height="15" fill="rgb(239,60,40)"/><text x="26.7844%" y="127.50"></text></g><g><title>coherent_trait (5,495,919 samples, 2.81%)</title><rect x="23.8651%" y="149" width="2.8063%" height="15" fill="rgb(206,27,48)"/><text x="24.1151%" y="159.50">co..</text></g><g><title>specialization_graph_of (5,483,129 samples, 2.80%)</title><rect x="23.8716%" y="133" width="2.7998%" height="15" fill="rgb(225,35,8)"/><text x="24.1216%" y="143.50">sp..</text></g><g><title>coherence_checking (5,551,780 samples, 2.83%)</title><rect x="23.8575%" y="165" width="2.8349%" height="15" fill="rgb(250,213,24)"/><text x="24.1075%" y="175.50">co..</text></g><g><title>associated_item (222,390 samples, 0.11%)</title><rect x="38.5645%" y="101" width="0.1136%" height="15" fill="rgb(247,123,22)"/><text x="38.8145%" y="111.50"></text></g><g><title>associated_items (329,493 samples, 0.17%)</title><rect x="38.5199%" y="117" width="0.1682%" height="15" fill="rgb(231,138,38)"/><text x="38.7699%" y="127.50"></text></g><g><title>dropck_outlives (570,057 samples, 0.29%)</title><rect x="38.7274%" y="117" width="0.2911%" height="15" fill="rgb(231,145,46)"/><text x="38.9774%" y="127.50"></text></g><g><title>trait_impls_of (231,713 samples, 0.12%)</title><rect x="39.5155%" y="101" width="0.1183%" height="15" fill="rgb(251,118,11)"/><text x="39.7655%" y="111.50"></text></g><g><title>evaluate_obligation (1,206,025 samples, 0.62%)</title><rect x="39.0184%" y="117" width="0.6158%" height="15" fill="rgb(217,147,25)"/><text x="39.2684%" y="127.50"></text></g><g><title>fn_sig (224,953 samples, 0.11%)</title><rect x="39.6466%" y="117" width="0.1149%" height="15" fill="rgb(247,81,37)"/><text x="39.8966%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (206,373 samples, 0.11%)</title><rect x="39.6561%" y="101" width="0.1054%" height="15" fill="rgb(209,12,38)"/><text x="39.9061%" y="111.50"></text></g><g><title>method_autoderef_steps (373,045 samples, 0.19%)</title><rect x="40.0278%" y="117" width="0.1905%" height="15" fill="rgb(227,1,9)"/><text x="40.2778%" y="127.50"></text></g><g><title>evaluate_obligation (209,141 samples, 0.11%)</title><rect x="40.1115%" y="101" width="0.1068%" height="15" fill="rgb(248,47,43)"/><text x="40.3615%" y="111.50"></text></g><g><title>object_safety_violations (202,322 samples, 0.10%)</title><rect x="40.2183%" y="117" width="0.1033%" height="15" fill="rgb(221,10,30)"/><text x="40.4683%" y="127.50"></text></g><g><title>predicates_of (434,505 samples, 0.22%)</title><rect x="40.3394%" y="117" width="0.2219%" height="15" fill="rgb(210,229,1)"/><text x="40.5894%" y="127.50"></text></g><g><title>predicates_defined_on (286,445 samples, 0.15%)</title><rect x="40.4151%" y="101" width="0.1463%" height="15" fill="rgb(222,148,37)"/><text x="40.6651%" y="111.50"></text></g><g><title>trait_impls_of (324,044 samples, 0.17%)</title><rect x="40.5644%" y="117" width="0.1655%" height="15" fill="rgb(234,67,33)"/><text x="40.8144%" y="127.50"></text></g><g><title>implementations_of_trait (260,163 samples, 0.13%)</title><rect x="40.5970%" y="101" width="0.1328%" height="15" fill="rgb(247,98,35)"/><text x="40.8470%" y="111.50"></text></g><g><title>item_bodies_checking (27,596,765 samples, 14.09%)</title><rect x="26.7105%" y="165" width="14.0916%" height="15" fill="rgb(247,138,52)"/><text x="26.9605%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (27,593,315 samples, 14.09%)</title><rect x="26.7123%" y="149" width="14.0898%" height="15" fill="rgb(213,79,30)"/><text x="26.9623%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (27,528,503 samples, 14.06%)</title><rect x="26.7454%" y="133" width="14.0567%" height="15" fill="rgb(246,177,23)"/><text x="26.9954%" y="143.50">typeck</text></g><g><title>adt_destructor (332,723 samples, 0.17%)</title><rect x="41.4540%" y="133" width="0.1699%" height="15" fill="rgb(230,62,27)"/><text x="41.7040%" y="143.50"></text></g><g><title>coherent_trait (324,423 samples, 0.17%)</title><rect x="41.4582%" y="117" width="0.1657%" height="15" fill="rgb(216,154,8)"/><text x="41.7082%" y="127.50"></text></g><g><title>specialization_graph_of (322,443 samples, 0.16%)</title><rect x="41.4593%" y="101" width="0.1646%" height="15" fill="rgb(244,35,45)"/><text x="41.7093%" y="111.50"></text></g><g><title>item_types_checking (1,721,838 samples, 0.88%)</title><rect x="40.8021%" y="165" width="0.8792%" height="15" fill="rgb(251,115,12)"/><text x="41.0521%" y="175.50"></text></g><g><title>check_mod_item_types (1,717,918 samples, 0.88%)</title><rect x="40.8041%" y="149" width="0.8772%" height="15" fill="rgb(240,54,50)"/><text x="41.0541%" y="159.50"></text></g><g><title>fn_sig (434,455 samples, 0.22%)</title><rect x="41.8162%" y="133" width="0.2218%" height="15" fill="rgb(233,84,52)"/><text x="42.0662%" y="143.50"></text></g><g><title>resolve_lifetimes (486,745 samples, 0.25%)</title><rect x="42.1183%" y="101" width="0.2485%" height="15" fill="rgb(207,117,47)"/><text x="42.3683%" y="111.50"></text></g><g><title>is_late_bound_map (524,805 samples, 0.27%)</title><rect x="42.1002%" y="117" width="0.2680%" height="15" fill="rgb(249,43,39)"/><text x="42.3502%" y="127.50"></text></g><g><title>generics_of (703,405 samples, 0.36%)</title><rect x="42.0381%" y="133" width="0.3592%" height="15" fill="rgb(209,38,44)"/><text x="42.2881%" y="143.50"></text></g><g><title>explicit_predicates_of (283,084 samples, 0.14%)</title><rect x="42.5271%" y="101" width="0.1445%" height="15" fill="rgb(236,212,23)"/><text x="42.7771%" y="111.50"></text></g><g><title>predicates_of (930,000 samples, 0.47%)</title><rect x="42.4532%" y="133" width="0.4749%" height="15" fill="rgb(242,79,21)"/><text x="42.7032%" y="143.50"></text></g><g><title>predicates_defined_on (875,040 samples, 0.45%)</title><rect x="42.4812%" y="117" width="0.4468%" height="15" fill="rgb(211,96,35)"/><text x="42.7312%" y="127.50"></text></g><g><title>inferred_outlives_of (502,215 samples, 0.26%)</title><rect x="42.6716%" y="101" width="0.2564%" height="15" fill="rgb(253,215,40)"/><text x="42.9216%" y="111.50"></text></g><g><title>inferred_outlives_crate (478,335 samples, 0.24%)</title><rect x="42.6838%" y="85" width="0.2442%" height="15" fill="rgb(211,81,21)"/><text x="42.9338%" y="95.50"></text></g><g><title>type_of (311,464 samples, 0.16%)</title><rect x="42.7690%" y="69" width="0.1590%" height="15" fill="rgb(208,190,38)"/><text x="43.0190%" y="79.50"></text></g><g><title>type_collecting (2,619,139 samples, 1.34%)</title><rect x="41.6825%" y="165" width="1.3374%" height="15" fill="rgb(235,213,38)"/><text x="41.9325%" y="175.50"></text></g><g><title>collect_mod_item_types (2,610,098 samples, 1.33%)</title><rect x="41.6871%" y="149" width="1.3328%" height="15" fill="rgb(237,122,38)"/><text x="41.9371%" y="159.50"></text></g><g><title>evaluate_obligation (576,457 samples, 0.29%)</title><rect x="44.2067%" y="133" width="0.2944%" height="15" fill="rgb(244,218,35)"/><text x="44.4567%" y="143.50"></text></g><g><title>implied_outlives_bounds (408,238 samples, 0.21%)</title><rect x="44.5094%" y="133" width="0.2085%" height="15" fill="rgb(240,68,47)"/><text x="44.7594%" y="143.50"></text></g><g><title>param_env (259,114 samples, 0.13%)</title><rect x="44.8236%" y="133" width="0.1323%" height="15" fill="rgb(210,16,53)"/><text x="45.0736%" y="143.50"></text></g><g><title>region_scope_tree (333,181 samples, 0.17%)</title><rect x="44.9720%" y="133" width="0.1701%" height="15" fill="rgb(235,124,12)"/><text x="45.2220%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,984,186 samples, 2.03%)</title><rect x="43.1170%" y="149" width="2.0344%" height="15" fill="rgb(224,169,11)"/><text x="43.3670%" y="159.50">c..</text></g><g><title>param_env (305,641 samples, 0.16%)</title><rect x="46.1408%" y="133" width="0.1561%" height="15" fill="rgb(250,166,2)"/><text x="46.3908%" y="143.50"></text></g><g><title>check_item_well_formed (2,418,644 samples, 1.24%)</title><rect x="45.1515%" y="149" width="1.2350%" height="15" fill="rgb(242,216,29)"/><text x="45.4015%" y="159.50"></text></g><g><title>analysis (76,090,164 samples, 38.85%)</title><rect x="7.7231%" y="197" width="38.8535%" height="15" fill="rgb(230,116,27)"/><text x="7.9731%" y="207.50">analysis</text></g><g><title>type_check_crate (44,541,187 samples, 22.74%)</title><rect x="23.8328%" y="181" width="22.7438%" height="15" fill="rgb(228,99,48)"/><text x="24.0828%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,961,824 samples, 3.55%)</title><rect x="43.0217%" y="165" width="3.5549%" height="15" fill="rgb(253,11,6)"/><text x="43.2717%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (372,334 samples, 0.19%)</title><rect x="46.3865%" y="149" width="0.1901%" height="15" fill="rgb(247,143,39)"/><text x="46.6365%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (201,854 samples, 0.10%)</title><rect x="51.3530%" y="165" width="0.1031%" height="15" fill="rgb(236,97,10)"/><text x="51.6030%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (363,933 samples, 0.19%)</title><rect x="52.1218%" y="149" width="0.1858%" height="15" fill="rgb(233,208,19)"/><text x="52.3718%" y="159.50"></text></g><g><title>normalize_projection_ty (268,551 samples, 0.14%)</title><rect x="52.1705%" y="133" width="0.1371%" height="15" fill="rgb(216,164,2)"/><text x="52.4205%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,690,060 samples, 0.86%)</title><rect x="51.4561%" y="165" width="0.8630%" height="15" fill="rgb(220,129,5)"/><text x="51.7061%" y="175.50"></text></g><g><title>layout_of (312,713 samples, 0.16%)</title><rect x="52.3291%" y="165" width="0.1597%" height="15" fill="rgb(242,17,10)"/><text x="52.5791%" y="175.50"></text></g><g><title>codegen_module (10,735,664 samples, 5.48%)</title><rect x="47.1153%" y="181" width="5.4819%" height="15" fill="rgb(242,107,0)"/><text x="47.3653%" y="191.50">codegen..</text></g><g><title>codegen_crate (11,853,477 samples, 6.05%)</title><rect x="46.5819%" y="197" width="6.0527%" height="15" fill="rgb(251,28,31)"/><text x="46.8319%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (40,216,149 samples, 20.54%)</title><rect x="52.6765%" y="181" width="20.5353%" height="15" fill="rgb(233,223,10)"/><text x="52.9265%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (38,549,802 samples, 19.68%)</title><rect x="53.5273%" y="165" width="19.6845%" height="15" fill="rgb(215,21,27)"/><text x="53.7773%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (42,029,348 samples, 21.46%)</title><rect x="52.6346%" y="197" width="21.4612%" height="15" fill="rgb(232,23,21)"/><text x="52.8846%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,731,129 samples, 0.88%)</title><rect x="73.2118%" y="181" width="0.8840%" height="15" fill="rgb(244,5,23)"/><text x="73.4618%" y="191.50"></text></g><g><title>AST_validation (236,862 samples, 0.12%)</title><rect x="74.1939%" y="181" width="0.1209%" height="15" fill="rgb(226,81,46)"/><text x="74.4439%" y="191.50"></text></g><g><title>metadata_register_crate (2,460,676 samples, 1.26%)</title><rect x="81.5169%" y="149" width="1.2565%" height="15" fill="rgb(247,70,30)"/><text x="81.7669%" y="159.50"></text></g><g><title>metadata_register_crate (849,860 samples, 0.43%)</title><rect x="82.3395%" y="133" width="0.4340%" height="15" fill="rgb(212,68,19)"/><text x="82.5895%" y="143.50"></text></g><g><title>macro_expand_crate (16,442,416 samples, 8.40%)</title><rect x="74.3960%" y="181" width="8.3959%" height="15" fill="rgb(240,187,13)"/><text x="74.6460%" y="191.50">macro_expand..</text></g><g><title>expand_crate (16,419,585 samples, 8.38%)</title><rect x="74.4077%" y="165" width="8.3842%" height="15" fill="rgb(223,113,26)"/><text x="74.6577%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (263,353 samples, 0.13%)</title><rect x="82.7945%" y="181" width="0.1345%" height="15" fill="rgb(206,192,2)"/><text x="83.0445%" y="191.50"></text></g><g><title>late_resolve_crate (2,739,469 samples, 1.40%)</title><rect x="83.0177%" y="165" width="1.3988%" height="15" fill="rgb(241,108,4)"/><text x="83.2677%" y="175.50"></text></g><g><title>configure_and_expand (20,355,688 samples, 10.39%)</title><rect x="74.0957%" y="197" width="10.3941%" height="15" fill="rgb(247,173,49)"/><text x="74.3457%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (3,056,753 samples, 1.56%)</title><rect x="82.9290%" y="181" width="1.5609%" height="15" fill="rgb(224,114,35)"/><text x="83.1790%" y="191.50"></text></g><g><title>drop_ast (294,233 samples, 0.15%)</title><rect x="84.4899%" y="197" width="0.1502%" height="15" fill="rgb(245,159,27)"/><text x="84.7399%" y="207.50"></text></g><g><title>early_lint_checks (519,485 samples, 0.27%)</title><rect x="84.6503%" y="197" width="0.2653%" height="15" fill="rgb(245,172,44)"/><text x="84.9003%" y="207.50"></text></g><g><title>free_global_ctxt (4,256,075 samples, 2.17%)</title><rect x="84.9156%" y="197" width="2.1733%" height="15" fill="rgb(236,23,11)"/><text x="85.1656%" y="207.50">f..</text></g><g><title>optimized_mir (969,660 samples, 0.50%)</title><rect x="88.0593%" y="117" width="0.4951%" height="15" fill="rgb(205,117,38)"/><text x="88.3093%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (437,995 samples, 0.22%)</title><rect x="88.3308%" y="101" width="0.2237%" height="15" fill="rgb(237,72,25)"/><text x="88.5808%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (559,466 samples, 0.29%)</title><rect x="88.6525%" y="117" width="0.2857%" height="15" fill="rgb(244,70,9)"/><text x="88.9025%" y="127.50"></text></g><g><title>upstream_monomorphizations (556,546 samples, 0.28%)</title><rect x="88.6540%" y="101" width="0.2842%" height="15" fill="rgb(217,125,39)"/><text x="88.9040%" y="111.50"></text></g><g><title>exported_symbols (441,096 samples, 0.23%)</title><rect x="88.7130%" y="85" width="0.2252%" height="15" fill="rgb(235,36,10)"/><text x="88.9630%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (436,535 samples, 0.22%)</title><rect x="88.7153%" y="69" width="0.2229%" height="15" fill="rgb(251,123,47)"/><text x="88.9653%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (2,519,267 samples, 1.29%)</title><rect x="87.8880%" y="133" width="1.2864%" height="15" fill="rgb(221,13,13)"/><text x="88.1380%" y="143.50"></text></g><g><title>vtable_entries (462,495 samples, 0.24%)</title><rect x="88.9382%" y="117" width="0.2362%" height="15" fill="rgb(238,131,9)"/><text x="89.1882%" y="127.50"></text></g><g><title>resolve_instance (384,345 samples, 0.20%)</title><rect x="88.9781%" y="101" width="0.1963%" height="15" fill="rgb(211,50,8)"/><text x="89.2281%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (347,455 samples, 0.18%)</title><rect x="88.9970%" y="85" width="0.1774%" height="15" fill="rgb(245,182,24)"/><text x="89.2470%" y="95.50"></text></g><g><title>monomorphization_collector (2,556,947 samples, 1.31%)</title><rect x="87.8864%" y="149" width="1.3056%" height="15" fill="rgb(242,14,37)"/><text x="88.1364%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (223,992 samples, 0.11%)</title><rect x="89.1935%" y="133" width="0.1144%" height="15" fill="rgb(246,228,12)"/><text x="89.4435%" y="143.50"></text></g><g><title>symbol_name (203,102 samples, 0.10%)</title><rect x="89.2041%" y="117" width="0.1037%" height="15" fill="rgb(213,55,15)"/><text x="89.4541%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (2,928,941 samples, 1.50%)</title><rect x="87.8672%" y="165" width="1.4956%" height="15" fill="rgb(209,9,3)"/><text x="88.1172%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (334,493 samples, 0.17%)</title><rect x="89.1920%" y="149" width="0.1708%" height="15" fill="rgb(230,59,30)"/><text x="89.4420%" y="159.50"></text></g><g><title>exported_symbols (3,057,753 samples, 1.56%)</title><rect x="87.8537%" y="181" width="1.5614%" height="15" fill="rgb(209,121,21)"/><text x="88.1037%" y="191.50"></text></g><g><title>layout_of (302,113 samples, 0.15%)</title><rect x="90.8646%" y="149" width="0.1543%" height="15" fill="rgb(220,109,13)"/><text x="91.1146%" y="159.50"></text></g><g><title>layout_of (831,269 samples, 0.42%)</title><rect x="90.6685%" y="165" width="0.4245%" height="15" fill="rgb(232,18,1)"/><text x="90.9185%" y="175.50"></text></g><g><title>is_copy_raw (635,676 samples, 0.32%)</title><rect x="93.0828%" y="133" width="0.3246%" height="15" fill="rgb(215,41,42)"/><text x="93.3328%" y="143.50"></text></g><g><title>evaluate_obligation (563,936 samples, 0.29%)</title><rect x="93.1195%" y="117" width="0.2880%" height="15" fill="rgb(224,123,36)"/><text x="93.3695%" y="127.50"></text></g><g><title>needs_drop_raw (784,297 samples, 0.40%)</title><rect x="93.0433%" y="149" width="0.4005%" height="15" fill="rgb(240,125,3)"/><text x="93.2933%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,766,627 samples, 2.43%)</title><rect x="91.0930%" y="165" width="2.4340%" height="15" fill="rgb(205,98,50)"/><text x="91.3430%" y="175.50">mi..</text></g><g><title>optimized_mir (8,088,374 samples, 4.13%)</title><rect x="89.4714%" y="181" width="4.1301%" height="15" fill="rgb(205,185,37)"/><text x="89.7214%" y="191.50">optim..</text></g><g><title>generate_crate_metadata (12,889,448 samples, 6.58%)</title><rect x="87.0888%" y="197" width="6.5817%" height="15" fill="rgb(238,207,15)"/><text x="87.3388%" y="207.50">generate_..</text></g><g><title>hir_lowering (4,708,261 samples, 2.40%)</title><rect x="93.6705%" y="197" width="2.4042%" height="15" fill="rgb(213,199,42)"/><text x="93.9205%" y="207.50">hi..</text></g><g><title>finish_ongoing_codegen (1,047,182 samples, 0.53%)</title><rect x="96.0828%" y="181" width="0.5347%" height="15" fill="rgb(235,201,11)"/><text x="96.3328%" y="191.50"></text></g><g><title>link_crate (1,309,744 samples, 0.67%)</title><rect x="96.6176%" y="181" width="0.6688%" height="15" fill="rgb(207,46,11)"/><text x="96.8676%" y="191.50"></text></g><g><title>link_binary (1,277,644 samples, 0.65%)</title><rect x="96.6340%" y="165" width="0.6524%" height="15" fill="rgb(241,35,35)"/><text x="96.8840%" y="175.50"></text></g><g><title>link_rlib (885,850 samples, 0.45%)</title><rect x="96.8340%" y="149" width="0.4523%" height="15" fill="rgb(243,32,47)"/><text x="97.0840%" y="159.50"></text></g><g><title>link (2,380,996 samples, 1.22%)</title><rect x="96.0746%" y="197" width="1.2158%" height="15" fill="rgb(247,202,23)"/><text x="96.3246%" y="207.50"></text></g><g><title>parse_crate (3,513,008 samples, 1.79%)</title><rect x="97.2904%" y="197" width="1.7938%" height="15" fill="rgb(219,102,11)"/><text x="97.5404%" y="207.50">p..</text></g><g><title>prepare_outputs (287,023 samples, 0.15%)</title><rect x="99.0885%" y="197" width="0.1466%" height="15" fill="rgb(243,110,44)"/><text x="99.3385%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,041,531 samples, 0.53%)</title><rect x="99.2350%" y="197" width="0.5318%" height="15" fill="rgb(222,74,54)"/><text x="99.4850%" y="207.50"></text></g><g><title>all (195,838,802 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (195,838,802 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (350,664 samples, 0.18%)</title><rect x="99.8209%" y="197" width="0.1791%" height="15" fill="rgb(217,163,10)"/><text x="100.0709%" y="207.50"></text></g></svg></svg>