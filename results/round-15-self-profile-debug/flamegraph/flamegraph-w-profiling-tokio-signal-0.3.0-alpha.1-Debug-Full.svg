<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (236,045,951 samples, 17.99%)</title><rect x="0.0560%" y="181" width="17.9941%" height="15" fill="rgb(227,0,7)"/><text x="0.3060%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,469,532 samples, 0.11%)</title><rect x="19.1287%" y="69" width="0.1120%" height="15" fill="rgb(217,0,24)"/><text x="19.3787%" y="79.50"></text></g><g><title>resolve_instance (1,984,872 samples, 0.15%)</title><rect x="19.2407%" y="69" width="0.1513%" height="15" fill="rgb(221,193,54)"/><text x="19.4907%" y="79.50"></text></g><g><title>mir_const (8,064,337 samples, 0.61%)</title><rect x="18.8385%" y="117" width="0.6148%" height="15" fill="rgb(248,212,6)"/><text x="19.0885%" y="127.50"></text></g><g><title>unsafety_check_result (7,029,549 samples, 0.54%)</title><rect x="18.9174%" y="101" width="0.5359%" height="15" fill="rgb(208,68,35)"/><text x="19.1674%" y="111.50"></text></g><g><title>mir_built (6,213,356 samples, 0.47%)</title><rect x="18.9796%" y="85" width="0.4737%" height="15" fill="rgb(232,128,0)"/><text x="19.2296%" y="95.50"></text></g><g><title>mir_promoted (9,348,770 samples, 0.71%)</title><rect x="18.7878%" y="133" width="0.7127%" height="15" fill="rgb(207,160,47)"/><text x="19.0378%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,417,237 samples, 0.18%)</title><rect x="19.6198%" y="133" width="0.1843%" height="15" fill="rgb(228,23,34)"/><text x="19.8698%" y="143.50"></text></g><g><title>MIR_borrow_checking (22,821,215 samples, 1.74%)</title><rect x="18.0650%" y="165" width="1.7397%" height="15" fill="rgb(218,30,26)"/><text x="18.3150%" y="175.50"></text></g><g><title>mir_borrowck (22,721,923 samples, 1.73%)</title><rect x="18.0725%" y="149" width="1.7321%" height="15" fill="rgb(220,122,19)"/><text x="18.3225%" y="159.50"></text></g><g><title>crate_lints (3,529,258 samples, 0.27%)</title><rect x="20.0031%" y="133" width="0.2690%" height="15" fill="rgb(250,228,42)"/><text x="20.2531%" y="143.50"></text></g><g><title>type_of (1,340,437 samples, 0.10%)</title><rect x="20.1700%" y="117" width="0.1022%" height="15" fill="rgb(240,193,28)"/><text x="20.4200%" y="127.50"></text></g><g><title>lint_checking (3,817,111 samples, 0.29%)</title><rect x="20.0030%" y="149" width="0.2910%" height="15" fill="rgb(216,20,37)"/><text x="20.2530%" y="159.50"></text></g><g><title>misc_checking_3 (5,181,335 samples, 0.39%)</title><rect x="19.9599%" y="165" width="0.3950%" height="15" fill="rgb(206,188,39)"/><text x="20.2099%" y="175.50"></text></g><g><title>impl_parent (1,317,868 samples, 0.10%)</title><rect x="20.5040%" y="101" width="0.1005%" height="15" fill="rgb(217,207,13)"/><text x="20.7540%" y="111.50"></text></g><g><title>impl_trait_ref (3,685,963 samples, 0.28%)</title><rect x="20.6044%" y="101" width="0.2810%" height="15" fill="rgb(231,73,38)"/><text x="20.8544%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,265,259 samples, 0.25%)</title><rect x="20.6365%" y="85" width="0.2489%" height="15" fill="rgb(225,20,46)"/><text x="20.8865%" y="95.50"></text></g><g><title>coherent_trait (7,336,878 samples, 0.56%)</title><rect x="20.3611%" y="133" width="0.5593%" height="15" fill="rgb(210,31,41)"/><text x="20.6111%" y="143.50"></text></g><g><title>specialization_graph_of (7,324,808 samples, 0.56%)</title><rect x="20.3620%" y="117" width="0.5584%" height="15" fill="rgb(221,200,47)"/><text x="20.6120%" y="127.50"></text></g><g><title>coherence_checking (7,457,920 samples, 0.57%)</title><rect x="20.3599%" y="149" width="0.5685%" height="15" fill="rgb(226,26,5)"/><text x="20.6099%" y="159.50"></text></g><g><title>evaluate_obligation (1,548,479 samples, 0.12%)</title><rect x="21.7584%" y="101" width="0.1180%" height="15" fill="rgb(249,33,26)"/><text x="22.0084%" y="111.50"></text></g><g><title>evaluate_obligation (2,493,244 samples, 0.19%)</title><rect x="22.5649%" y="85" width="0.1901%" height="15" fill="rgb(235,183,28)"/><text x="22.8149%" y="95.50"></text></g><g><title>typeck (12,172,670 samples, 0.93%)</title><rect x="21.9866%" y="101" width="0.9279%" height="15" fill="rgb(221,5,38)"/><text x="22.2366%" y="111.50"></text></g><g><title>item_bodies_checking (26,068,780 samples, 1.99%)</title><rect x="20.9303%" y="149" width="1.9873%" height="15" fill="rgb(247,18,42)"/><text x="21.1803%" y="159.50">i..</text></g><g><title>typeck_item_bodies (26,066,500 samples, 1.99%)</title><rect x="20.9305%" y="133" width="1.9871%" height="15" fill="rgb(241,131,45)"/><text x="21.1805%" y="143.50">t..</text></g><g><title>typeck (26,007,870 samples, 1.98%)</title><rect x="20.9350%" y="117" width="1.9826%" height="15" fill="rgb(249,31,29)"/><text x="21.1850%" y="127.50">t..</text></g><g><title>item_types_checking (2,363,275 samples, 0.18%)</title><rect x="22.9176%" y="149" width="0.1802%" height="15" fill="rgb(225,111,53)"/><text x="23.1676%" y="159.50"></text></g><g><title>check_mod_item_types (2,357,985 samples, 0.18%)</title><rect x="22.9180%" y="133" width="0.1798%" height="15" fill="rgb(238,160,17)"/><text x="23.1680%" y="143.50"></text></g><g><title>type_collecting (1,705,498 samples, 0.13%)</title><rect x="23.0980%" y="149" width="0.1300%" height="15" fill="rgb(214,148,48)"/><text x="23.3480%" y="159.50"></text></g><g><title>collect_mod_item_types (1,692,387 samples, 0.13%)</title><rect x="23.0990%" y="133" width="0.1290%" height="15" fill="rgb(232,36,49)"/><text x="23.3490%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,724,338 samples, 0.21%)</title><rect x="23.2399%" y="133" width="0.2077%" height="15" fill="rgb(209,103,24)"/><text x="23.4899%" y="143.50"></text></g><g><title>evaluate_obligation (1,320,536 samples, 0.10%)</title><rect x="23.5067%" y="117" width="0.1007%" height="15" fill="rgb(229,88,8)"/><text x="23.7567%" y="127.50"></text></g><g><title>check_item_well_formed (2,587,008 samples, 0.20%)</title><rect x="23.4476%" y="133" width="0.1972%" height="15" fill="rgb(213,181,19)"/><text x="23.6976%" y="143.50"></text></g><g><title>analysis (73,718,081 samples, 5.62%)</title><rect x="18.0501%" y="181" width="5.6196%" height="15" fill="rgb(254,191,54)"/><text x="18.3001%" y="191.50">analysis</text></g><g><title>type_check_crate (43,483,106 samples, 3.31%)</title><rect x="20.3549%" y="165" width="3.3148%" height="15" fill="rgb(241,83,37)"/><text x="20.6049%" y="175.50">typ..</text></g><g><title>wf_checking (5,789,432 samples, 0.44%)</title><rect x="23.2284%" y="149" width="0.4413%" height="15" fill="rgb(233,36,39)"/><text x="23.4784%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (6,239,379 samples, 0.48%)</title><rect x="36.2815%" y="149" width="0.4756%" height="15" fill="rgb(226,3,54)"/><text x="36.5315%" y="159.50"></text></g><g><title>const_caller_location (1,961,731 samples, 0.15%)</title><rect x="36.7572%" y="149" width="0.1495%" height="15" fill="rgb(245,192,40)"/><text x="37.0072%" y="159.50"></text></g><g><title>item_attrs (1,474,464 samples, 0.11%)</title><rect x="37.6874%" y="117" width="0.1124%" height="15" fill="rgb(238,167,29)"/><text x="37.9374%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,382,633 samples, 0.11%)</title><rect x="37.6944%" y="101" width="0.1054%" height="15" fill="rgb(232,182,51)"/><text x="37.9444%" y="111.50"></text></g><g><title>codegen_fn_attrs (2,514,114 samples, 0.19%)</title><rect x="37.6447%" y="133" width="0.1917%" height="15" fill="rgb(231,60,39)"/><text x="37.8947%" y="143.50"></text></g><g><title>layout_of (1,725,076 samples, 0.13%)</title><rect x="38.0951%" y="117" width="0.1315%" height="15" fill="rgb(208,69,12)"/><text x="38.3451%" y="127.50"></text></g><g><title>layout_of (5,169,212 samples, 0.39%)</title><rect x="37.8695%" y="133" width="0.3941%" height="15" fill="rgb(235,93,37)"/><text x="38.1195%" y="143.50"></text></g><g><title>explicit_predicates_of (1,376,130 samples, 0.10%)</title><rect x="38.9713%" y="85" width="0.1049%" height="15" fill="rgb(213,116,39)"/><text x="39.2213%" y="95.50"></text></g><g><title>predicates_of (4,005,582 samples, 0.31%)</title><rect x="38.8009%" y="117" width="0.3054%" height="15" fill="rgb(222,207,29)"/><text x="39.0509%" y="127.50"></text></g><g><title>predicates_defined_on (2,979,805 samples, 0.23%)</title><rect x="38.8791%" y="101" width="0.2272%" height="15" fill="rgb(206,96,30)"/><text x="39.1291%" y="111.50"></text></g><g><title>param_env (11,077,894 samples, 0.84%)</title><rect x="38.2635%" y="133" width="0.8445%" height="15" fill="rgb(218,138,4)"/><text x="38.5135%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,627,046 samples, 0.20%)</title><rect x="39.1080%" y="133" width="0.2003%" height="15" fill="rgb(250,191,14)"/><text x="39.3580%" y="143.50"></text></g><g><title>normalize_projection_ty (2,073,849 samples, 0.16%)</title><rect x="39.1502%" y="117" width="0.1581%" height="15" fill="rgb(239,60,40)"/><text x="39.4002%" y="127.50"></text></g><g><title>fn_abi_of_instance (31,569,000 samples, 2.41%)</title><rect x="36.9125%" y="149" width="2.4065%" height="15" fill="rgb(206,27,48)"/><text x="37.1625%" y="159.50">fn..</text></g><g><title>layout_of (1,738,649 samples, 0.13%)</title><rect x="39.8166%" y="85" width="0.1325%" height="15" fill="rgb(225,35,8)"/><text x="40.0666%" y="95.50"></text></g><g><title>layout_of (2,578,006 samples, 0.20%)</title><rect x="39.7861%" y="101" width="0.1965%" height="15" fill="rgb(250,213,24)"/><text x="40.0361%" y="111.50"></text></g><g><title>layout_of (3,702,300 samples, 0.28%)</title><rect x="39.7315%" y="117" width="0.2822%" height="15" fill="rgb(247,123,22)"/><text x="39.9815%" y="127.50"></text></g><g><title>layout_of (4,624,860 samples, 0.35%)</title><rect x="39.6910%" y="133" width="0.3526%" height="15" fill="rgb(231,138,38)"/><text x="39.9410%" y="143.50"></text></g><g><title>layout_of (8,509,073 samples, 0.65%)</title><rect x="39.4239%" y="149" width="0.6487%" height="15" fill="rgb(231,145,46)"/><text x="39.6739%" y="159.50"></text></g><g><title>symbol_name (4,054,436 samples, 0.31%)</title><rect x="40.0777%" y="149" width="0.3091%" height="15" fill="rgb(251,118,11)"/><text x="40.3277%" y="159.50"></text></g><g><title>codegen_module (215,697,223 samples, 16.44%)</title><rect x="23.9702%" y="165" width="16.4429%" height="15" fill="rgb(217,147,25)"/><text x="24.2202%" y="175.50">codegen_module</text></g><g><title>codegen_crate (219,769,877 samples, 16.75%)</title><rect x="23.6704%" y="181" width="16.7533%" height="15" fill="rgb(247,81,37)"/><text x="23.9204%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (592,536,372 samples, 45.17%)</title><rect x="40.4377%" y="165" width="45.1698%" height="15" fill="rgb(209,12,38)"/><text x="40.6877%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (567,737,767 samples, 43.28%)</title><rect x="42.3281%" y="149" width="43.2794%" height="15" fill="rgb(227,1,9)"/><text x="42.5781%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (627,064,666 samples, 47.80%)</title><rect x="40.4237%" y="181" width="47.8019%" height="15" fill="rgb(248,47,43)"/><text x="40.6737%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (34,345,011 samples, 2.62%)</title><rect x="85.6075%" y="165" width="2.6182%" height="15" fill="rgb(221,10,30)"/><text x="85.8575%" y="175.50">LL..</text></g><g><title>metadata_register_crate (6,106,145 samples, 0.47%)</title><rect x="90.8004%" y="133" width="0.4655%" height="15" fill="rgb(210,229,1)"/><text x="91.0504%" y="143.50"></text></g><g><title>metadata_register_crate (3,462,080 samples, 0.26%)</title><rect x="91.0019%" y="117" width="0.2639%" height="15" fill="rgb(222,148,37)"/><text x="91.2519%" y="127.50"></text></g><g><title>macro_expand_crate (39,573,284 samples, 3.02%)</title><rect x="88.2777%" y="165" width="3.0167%" height="15" fill="rgb(234,67,33)"/><text x="88.5277%" y="175.50">mac..</text></g><g><title>expand_crate (39,547,744 samples, 3.01%)</title><rect x="88.2796%" y="149" width="3.0148%" height="15" fill="rgb(247,98,35)"/><text x="88.5296%" y="159.50">exp..</text></g><g><title>late_resolve_crate (3,218,955 samples, 0.25%)</title><rect x="91.3341%" y="149" width="0.2454%" height="15" fill="rgb(247,138,52)"/><text x="91.5841%" y="159.50"></text></g><g><title>configure_and_expand (44,233,584 samples, 3.37%)</title><rect x="88.2257%" y="181" width="3.3720%" height="15" fill="rgb(213,79,30)"/><text x="88.4757%" y="191.50">con..</text></g><g><title>resolve_crate (3,877,472 samples, 0.30%)</title><rect x="91.3021%" y="165" width="0.2956%" height="15" fill="rgb(246,177,23)"/><text x="91.5521%" y="175.50"></text></g><g><title>free_global_ctxt (10,113,159 samples, 0.77%)</title><rect x="91.6431%" y="181" width="0.7709%" height="15" fill="rgb(230,62,27)"/><text x="91.8931%" y="191.50"></text></g><g><title>item_attrs (2,873,075 samples, 0.22%)</title><rect x="93.0528%" y="85" width="0.2190%" height="15" fill="rgb(216,154,8)"/><text x="93.3028%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,773,065 samples, 0.21%)</title><rect x="93.0605%" y="69" width="0.2114%" height="15" fill="rgb(244,35,45)"/><text x="93.3105%" y="79.50"></text></g><g><title>codegen_fn_attrs (4,338,891 samples, 0.33%)</title><rect x="93.0054%" y="101" width="0.3308%" height="15" fill="rgb(251,115,12)"/><text x="93.2554%" y="111.50"></text></g><g><title>mir_shims (1,489,896 samples, 0.11%)</title><rect x="93.4771%" y="101" width="0.1136%" height="15" fill="rgb(240,54,50)"/><text x="93.7271%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,885,414 samples, 0.45%)</title><rect x="93.7883%" y="85" width="0.4487%" height="15" fill="rgb(233,84,52)"/><text x="94.0383%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,489,552 samples, 0.19%)</title><rect x="94.2369%" y="85" width="0.1898%" height="15" fill="rgb(207,117,47)"/><text x="94.4869%" y="95.50"></text></g><g><title>optimized_mir (11,355,738 samples, 0.87%)</title><rect x="93.5906%" y="101" width="0.8657%" height="15" fill="rgb(249,43,39)"/><text x="93.8406%" y="111.50"></text></g><g><title>evaluate_obligation (1,607,565 samples, 0.12%)</title><rect x="95.0196%" y="69" width="0.1225%" height="15" fill="rgb(209,38,44)"/><text x="95.2696%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (7,547,481 samples, 0.58%)</title><rect x="94.6832%" y="85" width="0.5754%" height="15" fill="rgb(236,212,23)"/><text x="94.9332%" y="95.50"></text></g><g><title>needs_drop_raw (1,827,731 samples, 0.14%)</title><rect x="95.3512%" y="85" width="0.1393%" height="15" fill="rgb(242,79,21)"/><text x="95.6012%" y="95.50"></text></g><g><title>impl_parent (1,885,329 samples, 0.14%)</title><rect x="95.7350%" y="69" width="0.1437%" height="15" fill="rgb(211,96,35)"/><text x="95.9850%" y="79.50"></text></g><g><title>specialization_graph_of (8,433,031 samples, 0.64%)</title><rect x="95.4914%" y="85" width="0.6429%" height="15" fill="rgb(253,215,40)"/><text x="95.7414%" y="95.50"></text></g><g><title>impl_trait_ref (3,353,334 samples, 0.26%)</title><rect x="95.8787%" y="69" width="0.2556%" height="15" fill="rgb(211,81,21)"/><text x="96.1287%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,579,150 samples, 0.20%)</title><rect x="95.9377%" y="53" width="0.1966%" height="15" fill="rgb(208,190,38)"/><text x="96.1877%" y="63.50"></text></g><g><title>resolve_instance (22,999,844 samples, 1.75%)</title><rect x="94.4563%" y="101" width="1.7533%" height="15" fill="rgb(235,213,38)"/><text x="94.7063%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,397,161 samples, 0.11%)</title><rect x="96.2627%" y="85" width="0.1065%" height="15" fill="rgb(237,122,38)"/><text x="96.5127%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,344,771 samples, 0.10%)</title><rect x="96.2667%" y="69" width="0.1025%" height="15" fill="rgb(244,218,35)"/><text x="96.5167%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,721,993 samples, 0.13%)</title><rect x="96.2445%" y="101" width="0.1313%" height="15" fill="rgb(240,68,47)"/><text x="96.4945%" y="111.50"></text></g><g><title>upstream_drop_glue_for (3,160,255 samples, 0.24%)</title><rect x="96.3758%" y="101" width="0.2409%" height="15" fill="rgb(210,16,53)"/><text x="96.6258%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (3,139,644 samples, 0.24%)</title><rect x="96.3773%" y="85" width="0.2393%" height="15" fill="rgb(235,124,12)"/><text x="96.6273%" y="95.50"></text></g><g><title>upstream_monomorphizations (3,137,164 samples, 0.24%)</title><rect x="96.3775%" y="69" width="0.2392%" height="15" fill="rgb(224,169,11)"/><text x="96.6275%" y="79.50"></text></g><g><title>exported_symbols (2,707,630 samples, 0.21%)</title><rect x="96.4103%" y="53" width="0.2064%" height="15" fill="rgb(250,166,2)"/><text x="96.6603%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,695,830 samples, 0.21%)</title><rect x="96.4112%" y="37" width="0.2055%" height="15" fill="rgb(242,216,29)"/><text x="96.6612%" y="47.50"></text></g><g><title>resolve_instance (1,637,340 samples, 0.12%)</title><rect x="96.7133%" y="85" width="0.1248%" height="15" fill="rgb(230,116,27)"/><text x="96.9633%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (56,604,707 samples, 4.32%)</title><rect x="92.5233%" y="117" width="4.3150%" height="15" fill="rgb(228,99,48)"/><text x="92.7733%" y="127.50">monom..</text></g><g><title>vtable_entries (2,826,993 samples, 0.22%)</title><rect x="96.6228%" y="101" width="0.2155%" height="15" fill="rgb(253,11,6)"/><text x="96.8728%" y="111.50"></text></g><g><title>monomorphization_collector (56,653,558 samples, 4.32%)</title><rect x="92.5231%" y="133" width="4.3188%" height="15" fill="rgb(247,143,39)"/><text x="92.7731%" y="143.50">monom..</text></g><g><title>assert_symbols_are_distinct (5,342,447 samples, 0.41%)</title><rect x="96.8422%" y="117" width="0.4073%" height="15" fill="rgb(236,97,10)"/><text x="97.0922%" y="127.50"></text></g><g><title>symbol_name (4,675,340 samples, 0.36%)</title><rect x="96.8930%" y="101" width="0.3564%" height="15" fill="rgb(233,208,19)"/><text x="97.1430%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (64,236,770 samples, 4.90%)</title><rect x="92.5190%" y="149" width="4.8969%" height="15" fill="rgb(216,164,2)"/><text x="92.7690%" y="159.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (7,529,411 samples, 0.57%)</title><rect x="96.8419%" y="133" width="0.5740%" height="15" fill="rgb(220,129,5)"/><text x="97.0919%" y="143.50"></text></g><g><title>cgu_partitioning (2,182,764 samples, 0.17%)</title><rect x="97.2495%" y="117" width="0.1664%" height="15" fill="rgb(242,17,10)"/><text x="97.4995%" y="127.50"></text></g><g><title>exported_symbols (64,481,511 samples, 4.92%)</title><rect x="92.5055%" y="165" width="4.9155%" height="15" fill="rgb(242,107,0)"/><text x="92.7555%" y="175.50">export..</text></g><g><title>optimized_mir (3,487,165 samples, 0.27%)</title><rect x="97.4275%" y="165" width="0.2658%" height="15" fill="rgb(251,28,31)"/><text x="97.6775%" y="175.50"></text></g><g><title>generate_crate_metadata (69,304,744 samples, 5.28%)</title><rect x="92.4141%" y="181" width="5.2832%" height="15" fill="rgb(233,223,10)"/><text x="92.6641%" y="191.50">genera..</text></g><g><title>hir_lowering (3,590,479 samples, 0.27%)</title><rect x="97.6973%" y="181" width="0.2737%" height="15" fill="rgb(215,21,27)"/><text x="97.9473%" y="191.50"></text></g><g><title>finish_ongoing_codegen (19,366,547 samples, 1.48%)</title><rect x="97.9725%" y="165" width="1.4763%" height="15" fill="rgb(232,23,21)"/><text x="98.2225%" y="175.50"></text></g><g><title>link_crate (3,556,988 samples, 0.27%)</title><rect x="99.4488%" y="165" width="0.2712%" height="15" fill="rgb(244,5,23)"/><text x="99.6988%" y="175.50"></text></g><g><title>link_binary (3,521,127 samples, 0.27%)</title><rect x="99.4516%" y="149" width="0.2684%" height="15" fill="rgb(226,81,46)"/><text x="99.7016%" y="159.50"></text></g><g><title>link_rlib (2,723,010 samples, 0.21%)</title><rect x="99.5124%" y="133" width="0.2076%" height="15" fill="rgb(247,70,30)"/><text x="99.7624%" y="143.50"></text></g><g><title>link (22,951,496 samples, 1.75%)</title><rect x="97.9710%" y="181" width="1.7496%" height="15" fill="rgb(212,68,19)"/><text x="98.2210%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,352,415 samples, 0.18%)</title><rect x="99.7889%" y="181" width="0.1793%" height="15" fill="rgb(240,187,13)"/><text x="100.0389%" y="191.50"></text></g><g><title>all (1,311,797,390 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,311,797,390 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>