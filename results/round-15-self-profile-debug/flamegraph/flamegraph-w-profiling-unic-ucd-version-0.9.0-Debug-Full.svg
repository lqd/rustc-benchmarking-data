<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,408,095 samples, 7.74%)</title><rect x="2.8330%" y="229" width="7.7430%" height="15" fill="rgb(227,0,7)"/><text x="3.0830%" y="239.50">LLVM_passes</text></g><g><title>implied_outlives_bounds (49,631 samples, 0.27%)</title><rect x="13.8817%" y="181" width="0.2729%" height="15" fill="rgb(217,0,24)"/><text x="14.1317%" y="191.50"></text></g><g><title>has_structural_eq_impls (101,391 samples, 0.56%)</title><rect x="14.9561%" y="149" width="0.5575%" height="15" fill="rgb(221,193,54)"/><text x="15.2061%" y="159.50"></text></g><g><title>evaluate_obligation (90,851 samples, 0.50%)</title><rect x="15.0141%" y="133" width="0.4996%" height="15" fill="rgb(248,212,6)"/><text x="15.2641%" y="143.50"></text></g><g><title>trait_impls_of (49,491 samples, 0.27%)</title><rect x="15.2415%" y="117" width="0.2721%" height="15" fill="rgb(208,68,35)"/><text x="15.4915%" y="127.50"></text></g><g><title>is_freeze_raw (29,921 samples, 0.16%)</title><rect x="15.5137%" y="149" width="0.1645%" height="15" fill="rgb(232,128,0)"/><text x="15.7637%" y="159.50"></text></g><g><title>evaluate_obligation (28,021 samples, 0.15%)</title><rect x="15.5241%" y="133" width="0.1541%" height="15" fill="rgb(207,160,47)"/><text x="15.7741%" y="143.50"></text></g><g><title>thir_body (76,661 samples, 0.42%)</title><rect x="16.8128%" y="101" width="0.4216%" height="15" fill="rgb(228,23,34)"/><text x="17.0628%" y="111.50"></text></g><g><title>lit_to_const (36,540 samples, 0.20%)</title><rect x="17.0334%" y="85" width="0.2009%" height="15" fill="rgb(218,30,26)"/><text x="17.2834%" y="95.50"></text></g><g><title>mir_const (289,432 samples, 1.59%)</title><rect x="15.6782%" y="149" width="1.5916%" height="15" fill="rgb(220,122,19)"/><text x="15.9282%" y="159.50"></text></g><g><title>unsafety_check_result (217,842 samples, 1.20%)</title><rect x="16.0719%" y="133" width="1.1979%" height="15" fill="rgb(250,228,42)"/><text x="16.3219%" y="143.50"></text></g><g><title>mir_built (172,841 samples, 0.95%)</title><rect x="16.3193%" y="117" width="0.9504%" height="15" fill="rgb(240,193,28)"/><text x="16.5693%" y="127.50"></text></g><g><title>needs_drop_raw (61,751 samples, 0.34%)</title><rect x="17.2698%" y="149" width="0.3396%" height="15" fill="rgb(216,20,37)"/><text x="17.5198%" y="159.50"></text></g><g><title>is_copy_raw (58,411 samples, 0.32%)</title><rect x="17.2881%" y="133" width="0.3212%" height="15" fill="rgb(206,188,39)"/><text x="17.5381%" y="143.50"></text></g><g><title>evaluate_obligation (53,181 samples, 0.29%)</title><rect x="17.3169%" y="117" width="0.2924%" height="15" fill="rgb(217,207,13)"/><text x="17.5669%" y="127.50"></text></g><g><title>trait_impls_of (40,491 samples, 0.22%)</title><rect x="17.3867%" y="101" width="0.2227%" height="15" fill="rgb(231,73,38)"/><text x="17.6367%" y="111.50"></text></g><g><title>MIR_borrow_checking (1,176,512 samples, 6.47%)</title><rect x="11.1426%" y="213" width="6.4695%" height="15" fill="rgb(225,20,46)"/><text x="11.3926%" y="223.50">MIR_borr..</text></g><g><title>mir_borrowck (1,169,212 samples, 6.43%)</title><rect x="11.1828%" y="197" width="6.4294%" height="15" fill="rgb(210,31,41)"/><text x="11.4328%" y="207.50">mir_borr..</text></g><g><title>mir_promoted (620,156 samples, 3.41%)</title><rect x="14.2020%" y="181" width="3.4102%" height="15" fill="rgb(221,200,47)"/><text x="14.4520%" y="191.50">mir..</text></g><g><title>mir_const_qualif (559,856 samples, 3.08%)</title><rect x="14.5335%" y="165" width="3.0786%" height="15" fill="rgb(226,26,5)"/><text x="14.7835%" y="175.50">mir..</text></g><g><title>MIR_effect_checking (168,592 samples, 0.93%)</title><rect x="17.6121%" y="213" width="0.9271%" height="15" fill="rgb(249,33,26)"/><text x="17.8621%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (151,462 samples, 0.83%)</title><rect x="17.7063%" y="197" width="0.8329%" height="15" fill="rgb(235,183,28)"/><text x="17.9563%" y="207.50"></text></g><g><title>hir_owner (21,861 samples, 0.12%)</title><rect x="18.9306%" y="197" width="0.1202%" height="15" fill="rgb(221,5,38)"/><text x="19.1806%" y="207.50"></text></g><g><title>hir_module_items (94,312 samples, 0.52%)</title><rect x="18.5392%" y="213" width="0.5186%" height="15" fill="rgb(247,18,42)"/><text x="18.7892%" y="223.50"></text></g><g><title>check_mod_attrs (44,121 samples, 0.24%)</title><rect x="19.2259%" y="197" width="0.2426%" height="15" fill="rgb(241,131,45)"/><text x="19.4759%" y="207.50"></text></g><g><title>lookup_deprecation_entry (33,540 samples, 0.18%)</title><rect x="19.8074%" y="181" width="0.1844%" height="15" fill="rgb(249,31,29)"/><text x="20.0574%" y="191.50"></text></g><g><title>stability_index (21,080 samples, 0.12%)</title><rect x="19.8760%" y="165" width="0.1159%" height="15" fill="rgb(225,111,53)"/><text x="20.1260%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (78,881 samples, 0.43%)</title><rect x="19.5680%" y="197" width="0.4338%" height="15" fill="rgb(238,160,17)"/><text x="19.8180%" y="207.50"></text></g><g><title>looking_for_derive_registrar (27,050 samples, 0.15%)</title><rect x="20.0099%" y="197" width="0.1487%" height="15" fill="rgb(214,148,48)"/><text x="20.2599%" y="207.50"></text></g><g><title>misc_checking_1 (203,172 samples, 1.12%)</title><rect x="19.0600%" y="213" width="1.1172%" height="15" fill="rgb(232,36,49)"/><text x="19.3100%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (25,601 samples, 0.14%)</title><rect x="20.1860%" y="197" width="0.1408%" height="15" fill="rgb(209,103,24)"/><text x="20.4360%" y="207.50"></text></g><g><title>misc_checking_2 (52,311 samples, 0.29%)</title><rect x="20.1772%" y="213" width="0.2877%" height="15" fill="rgb(229,88,8)"/><text x="20.4272%" y="223.50"></text></g><g><title>match_checking (25,110 samples, 0.14%)</title><rect x="20.3268%" y="197" width="0.1381%" height="15" fill="rgb(213,181,19)"/><text x="20.5768%" y="207.50"></text></g><g><title>check_match (20,330 samples, 0.11%)</title><rect x="20.3531%" y="181" width="0.1118%" height="15" fill="rgb(254,191,54)"/><text x="20.6031%" y="191.50"></text></g><g><title>check_private_in_public (21,120 samples, 0.12%)</title><rect x="20.4976%" y="197" width="0.1161%" height="15" fill="rgb(241,83,37)"/><text x="20.7476%" y="207.50"></text></g><g><title>codegen_fn_attrs (48,680 samples, 0.27%)</title><rect x="20.8112%" y="181" width="0.2677%" height="15" fill="rgb(233,36,39)"/><text x="21.0612%" y="191.50"></text></g><g><title>supported_target_features (21,990 samples, 0.12%)</title><rect x="20.9580%" y="165" width="0.1209%" height="15" fill="rgb(226,3,54)"/><text x="21.2080%" y="175.50"></text></g><g><title>death_checking (107,641 samples, 0.59%)</title><rect x="20.6138%" y="197" width="0.5919%" height="15" fill="rgb(245,192,40)"/><text x="20.8638%" y="207.50"></text></g><g><title>lint_levels (20,930 samples, 0.12%)</title><rect x="21.0906%" y="181" width="0.1151%" height="15" fill="rgb(238,167,29)"/><text x="21.3406%" y="191.50"></text></g><g><title>layout_of (34,621 samples, 0.19%)</title><rect x="22.2054%" y="117" width="0.1904%" height="15" fill="rgb(232,182,51)"/><text x="22.4554%" y="127.50"></text></g><g><title>eval_to_const_value_raw (223,773 samples, 1.23%)</title><rect x="21.4618%" y="165" width="1.2305%" height="15" fill="rgb(231,60,39)"/><text x="21.7118%" y="175.50"></text></g><g><title>eval_to_const_value_raw (219,303 samples, 1.21%)</title><rect x="21.4863%" y="149" width="1.2059%" height="15" fill="rgb(208,69,12)"/><text x="21.7363%" y="159.50"></text></g><g><title>eval_to_allocation_raw (210,213 samples, 1.16%)</title><rect x="21.5363%" y="133" width="1.1559%" height="15" fill="rgb(235,93,37)"/><text x="21.7863%" y="143.50"></text></g><g><title>mir_for_ctfe (53,920 samples, 0.30%)</title><rect x="22.3958%" y="117" width="0.2965%" height="15" fill="rgb(213,116,39)"/><text x="22.6458%" y="127.50"></text></g><g><title>crate_lints (349,574 samples, 1.92%)</title><rect x="21.2131%" y="181" width="1.9223%" height="15" fill="rgb(222,207,29)"/><text x="21.4631%" y="191.50">c..</text></g><g><title>param_env (80,581 samples, 0.44%)</title><rect x="22.6923%" y="165" width="0.4431%" height="15" fill="rgb(206,96,30)"/><text x="22.9423%" y="175.50"></text></g><g><title>predicates_of (34,961 samples, 0.19%)</title><rect x="22.9431%" y="149" width="0.1922%" height="15" fill="rgb(218,138,4)"/><text x="23.1931%" y="159.50"></text></g><g><title>predicates_defined_on (25,910 samples, 0.14%)</title><rect x="22.9929%" y="133" width="0.1425%" height="15" fill="rgb(250,191,14)"/><text x="23.2429%" y="143.50"></text></g><g><title>lint_checking (369,804 samples, 2.03%)</title><rect x="21.2057%" y="197" width="2.0335%" height="15" fill="rgb(239,60,40)"/><text x="21.4557%" y="207.50">l..</text></g><g><title>module_lints (18,880 samples, 0.10%)</title><rect x="23.1354%" y="181" width="0.1038%" height="15" fill="rgb(206,27,48)"/><text x="23.3854%" y="191.50"></text></g><g><title>privacy_access_levels (30,110 samples, 0.17%)</title><rect x="23.2392%" y="197" width="0.1656%" height="15" fill="rgb(225,35,8)"/><text x="23.4892%" y="207.50"></text></g><g><title>privacy_checking_modules (19,410 samples, 0.11%)</title><rect x="23.4048%" y="197" width="0.1067%" height="15" fill="rgb(250,213,24)"/><text x="23.6548%" y="207.50"></text></g><g><title>misc_checking_3 (566,506 samples, 3.12%)</title><rect x="20.4648%" y="213" width="3.1152%" height="15" fill="rgb(247,123,22)"/><text x="20.7148%" y="223.50">mis..</text></g><g><title>coherence_checking (31,620 samples, 0.17%)</title><rect x="23.7030%" y="197" width="0.1739%" height="15" fill="rgb(231,138,38)"/><text x="23.9530%" y="207.50"></text></g><g><title>impl_trait_ref (51,551 samples, 0.28%)</title><rect x="27.2154%" y="53" width="0.2835%" height="15" fill="rgb(231,145,46)"/><text x="27.4654%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (48,521 samples, 0.27%)</title><rect x="27.2321%" y="37" width="0.2668%" height="15" fill="rgb(251,118,11)"/><text x="27.4821%" y="47.50"></text></g><g><title>adt_destructor (115,521 samples, 0.64%)</title><rect x="26.9267%" y="117" width="0.6352%" height="15" fill="rgb(217,147,25)"/><text x="27.1767%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (114,641 samples, 0.63%)</title><rect x="26.9315%" y="101" width="0.6304%" height="15" fill="rgb(247,81,37)"/><text x="27.1815%" y="111.50"></text></g><g><title>coherent_trait (105,981 samples, 0.58%)</title><rect x="26.9791%" y="85" width="0.5828%" height="15" fill="rgb(209,12,38)"/><text x="27.2291%" y="95.50"></text></g><g><title>specialization_graph_of (101,031 samples, 0.56%)</title><rect x="27.0064%" y="69" width="0.5556%" height="15" fill="rgb(227,1,9)"/><text x="27.2564%" y="79.50"></text></g><g><title>dropck_outlives (175,962 samples, 0.97%)</title><rect x="26.6049%" y="149" width="0.9676%" height="15" fill="rgb(248,47,43)"/><text x="26.8549%" y="159.50"></text></g><g><title>adt_dtorck_constraint (124,371 samples, 0.68%)</title><rect x="26.8886%" y="133" width="0.6839%" height="15" fill="rgb(221,10,30)"/><text x="27.1386%" y="143.50"></text></g><g><title>impl_trait_ref (42,000 samples, 0.23%)</title><rect x="27.6626%" y="149" width="0.2310%" height="15" fill="rgb(210,229,1)"/><text x="27.9126%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (40,240 samples, 0.22%)</title><rect x="27.6723%" y="133" width="0.2213%" height="15" fill="rgb(222,148,37)"/><text x="27.9223%" y="143.50"></text></g><g><title>predicates_of (24,700 samples, 0.14%)</title><rect x="27.9597%" y="149" width="0.1358%" height="15" fill="rgb(234,67,33)"/><text x="28.2097%" y="159.50"></text></g><g><title>predicates_defined_on (20,650 samples, 0.11%)</title><rect x="27.9820%" y="133" width="0.1136%" height="15" fill="rgb(247,98,35)"/><text x="28.2320%" y="143.50"></text></g><g><title>trait_impls_of (30,601 samples, 0.17%)</title><rect x="28.1314%" y="149" width="0.1683%" height="15" fill="rgb(247,138,52)"/><text x="28.3814%" y="159.50"></text></g><g><title>item_types_checking (805,509 samples, 4.43%)</title><rect x="23.9268%" y="197" width="4.4294%" height="15" fill="rgb(213,79,30)"/><text x="24.1768%" y="207.50">item_..</text></g><g><title>check_mod_item_types (801,149 samples, 4.41%)</title><rect x="23.9507%" y="181" width="4.4054%" height="15" fill="rgb(246,177,23)"/><text x="24.2007%" y="191.50">check..</text></g><g><title>typeck (790,759 samples, 4.35%)</title><rect x="24.0079%" y="165" width="4.3483%" height="15" fill="rgb(230,62,27)"/><text x="24.2579%" y="175.50">typeck</text></g><g><title>generics_of (31,171 samples, 0.17%)</title><rect x="28.7719%" y="165" width="0.1714%" height="15" fill="rgb(216,154,8)"/><text x="29.0219%" y="175.50"></text></g><g><title>explicit_predicates_of (25,990 samples, 0.14%)</title><rect x="29.0565%" y="133" width="0.1429%" height="15" fill="rgb(244,35,45)"/><text x="29.3065%" y="143.50"></text></g><g><title>predicates_of (52,891 samples, 0.29%)</title><rect x="28.9433%" y="165" width="0.2908%" height="15" fill="rgb(251,115,12)"/><text x="29.1933%" y="175.50"></text></g><g><title>predicates_defined_on (47,921 samples, 0.26%)</title><rect x="28.9706%" y="149" width="0.2635%" height="15" fill="rgb(240,54,50)"/><text x="29.2206%" y="159.50"></text></g><g><title>named_region_map (32,110 samples, 0.18%)</title><rect x="29.5086%" y="149" width="0.1766%" height="15" fill="rgb(233,84,52)"/><text x="29.7586%" y="159.50"></text></g><g><title>resolve_lifetimes (26,270 samples, 0.14%)</title><rect x="29.5407%" y="133" width="0.1445%" height="15" fill="rgb(207,117,47)"/><text x="29.7907%" y="143.50"></text></g><g><title>type_collecting (248,903 samples, 1.37%)</title><rect x="28.3627%" y="197" width="1.3687%" height="15" fill="rgb(249,43,39)"/><text x="28.6127%" y="207.50"></text></g><g><title>collect_mod_item_types (227,823 samples, 1.25%)</title><rect x="28.4786%" y="181" width="1.2528%" height="15" fill="rgb(209,38,44)"/><text x="28.7286%" y="191.50"></text></g><g><title>type_of (90,441 samples, 0.50%)</title><rect x="29.2341%" y="165" width="0.4973%" height="15" fill="rgb(236,212,23)"/><text x="29.4841%" y="175.50"></text></g><g><title>adt_def (20,460 samples, 0.11%)</title><rect x="31.9456%" y="133" width="0.1125%" height="15" fill="rgb(242,79,21)"/><text x="32.1956%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (19,290 samples, 0.11%)</title><rect x="31.9521%" y="117" width="0.1061%" height="15" fill="rgb(211,96,35)"/><text x="32.2021%" y="127.50"></text></g><g><title>adt_sized_constraint (28,160 samples, 0.15%)</title><rect x="31.9146%" y="149" width="0.1548%" height="15" fill="rgb(253,215,40)"/><text x="32.1646%" y="159.50"></text></g><g><title>evaluate_obligation (102,601 samples, 0.56%)</title><rect x="31.5168%" y="165" width="0.5642%" height="15" fill="rgb(211,81,21)"/><text x="31.7668%" y="175.50"></text></g><g><title>get_lang_items (39,170 samples, 0.22%)</title><rect x="32.0810%" y="165" width="0.2154%" height="15" fill="rgb(208,190,38)"/><text x="32.3310%" y="175.50"></text></g><g><title>param_env (165,981 samples, 0.91%)</title><rect x="32.2964%" y="165" width="0.9127%" height="15" fill="rgb(235,213,38)"/><text x="32.5464%" y="175.50"></text></g><g><title>region_scope_tree (23,400 samples, 0.13%)</title><rect x="33.2540%" y="165" width="0.1287%" height="15" fill="rgb(237,122,38)"/><text x="33.5040%" y="175.50"></text></g><g><title>analysis (4,148,784 samples, 22.81%)</title><rect x="10.5760%" y="229" width="22.8138%" height="15" fill="rgb(244,218,35)"/><text x="10.8260%" y="239.50">analysis</text></g><g><title>type_check_crate (1,783,949 samples, 9.81%)</title><rect x="23.5800%" y="213" width="9.8098%" height="15" fill="rgb(240,68,47)"/><text x="23.8300%" y="223.50">type_check_cra..</text></g><g><title>wf_checking (664,447 samples, 3.65%)</title><rect x="29.7360%" y="197" width="3.6537%" height="15" fill="rgb(210,16,53)"/><text x="29.9860%" y="207.50">wf_c..</text></g><g><title>check_item_well_formed (632,087 samples, 3.48%)</title><rect x="29.9140%" y="181" width="3.4758%" height="15" fill="rgb(235,124,12)"/><text x="30.1640%" y="191.50">che..</text></g><g><title>codegen_module (288,193 samples, 1.58%)</title><rect x="35.5204%" y="213" width="1.5847%" height="15" fill="rgb(224,169,11)"/><text x="35.7704%" y="223.50"></text></g><g><title>codegen_crate (681,127 samples, 3.75%)</title><rect x="33.4362%" y="229" width="3.7455%" height="15" fill="rgb(250,166,2)"/><text x="33.6862%" y="239.50">code..</text></g><g><title>LLVM_module_codegen (1,093,431 samples, 6.01%)</title><rect x="37.2570%" y="213" width="6.0127%" height="15" fill="rgb(242,216,29)"/><text x="37.5070%" y="223.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (1,046,631 samples, 5.76%)</title><rect x="37.5144%" y="197" width="5.7553%" height="15" fill="rgb(230,116,27)"/><text x="37.7644%" y="207.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (1,297,454 samples, 7.13%)</title><rect x="37.1816%" y="229" width="7.1346%" height="15" fill="rgb(228,99,48)"/><text x="37.4316%" y="239.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (190,312 samples, 1.05%)</title><rect x="43.2697%" y="213" width="1.0465%" height="15" fill="rgb(253,11,6)"/><text x="43.5197%" y="223.50"></text></g><g><title>AST_validation (51,030 samples, 0.28%)</title><rect x="45.2355%" y="213" width="0.2806%" height="15" fill="rgb(247,143,39)"/><text x="45.4855%" y="223.50"></text></g><g><title>crate_injection (67,111 samples, 0.37%)</title><rect x="45.5881%" y="213" width="0.3690%" height="15" fill="rgb(236,97,10)"/><text x="45.8381%" y="223.50"></text></g><g><title>metadata_load_macro (74,450 samples, 0.41%)</title><rect x="76.4155%" y="181" width="0.4094%" height="15" fill="rgb(233,208,19)"/><text x="76.6655%" y="191.50"></text></g><g><title>metadata_register_crate (178,722 samples, 0.98%)</title><rect x="76.8249%" y="181" width="0.9828%" height="15" fill="rgb(216,164,2)"/><text x="77.0749%" y="191.50"></text></g><g><title>macro_expand_crate (5,822,232 samples, 32.02%)</title><rect x="45.9572%" y="213" width="32.0159%" height="15" fill="rgb(220,129,5)"/><text x="46.2072%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (5,802,042 samples, 31.90%)</title><rect x="46.0682%" y="197" width="31.9049%" height="15" fill="rgb(242,17,10)"/><text x="46.3182%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (30,080 samples, 0.17%)</title><rect x="77.8077%" y="181" width="0.1654%" height="15" fill="rgb(242,107,0)"/><text x="78.0577%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (88,591 samples, 0.49%)</title><rect x="77.9927%" y="213" width="0.4872%" height="15" fill="rgb(251,28,31)"/><text x="78.2427%" y="223.50"></text></g><g><title>finalize_imports (246,573 samples, 1.36%)</title><rect x="78.5098%" y="197" width="1.3559%" height="15" fill="rgb(233,223,10)"/><text x="78.7598%" y="207.50"></text></g><g><title>late_resolve_crate (28,820 samples, 0.16%)</title><rect x="79.9289%" y="197" width="0.1585%" height="15" fill="rgb(215,21,27)"/><text x="80.1789%" y="207.50"></text></g><g><title>configure_and_expand (6,539,740 samples, 35.96%)</title><rect x="44.3162%" y="229" width="35.9614%" height="15" fill="rgb(232,23,21)"/><text x="44.5662%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (326,934 samples, 1.80%)</title><rect x="78.4799%" y="213" width="1.7978%" height="15" fill="rgb(244,5,23)"/><text x="78.7299%" y="223.50">r..</text></g><g><title>drop_compiler (21,140 samples, 0.12%)</title><rect x="80.3760%" y="229" width="0.1162%" height="15" fill="rgb(226,81,46)"/><text x="80.6260%" y="239.50"></text></g><g><title>early_lint_checks (65,700 samples, 0.36%)</title><rect x="80.4922%" y="229" width="0.3613%" height="15" fill="rgb(247,70,30)"/><text x="80.7422%" y="239.50"></text></g><g><title>free_global_ctxt (705,397 samples, 3.88%)</title><rect x="80.8535%" y="229" width="3.8789%" height="15" fill="rgb(212,68,19)"/><text x="81.1035%" y="239.50">free..</text></g><g><title>crate_hash (63,540 samples, 0.35%)</title><rect x="85.8631%" y="213" width="0.3494%" height="15" fill="rgb(240,187,13)"/><text x="86.1131%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (50,590 samples, 0.28%)</title><rect x="86.3160%" y="197" width="0.2782%" height="15" fill="rgb(223,113,26)"/><text x="86.5660%" y="207.50"></text></g><g><title>partition_and_assert_distinct_symbols (23,510 samples, 0.13%)</title><rect x="86.4650%" y="181" width="0.1293%" height="15" fill="rgb(206,192,2)"/><text x="86.7150%" y="191.50"></text></g><g><title>cgu_partitioning (18,630 samples, 0.10%)</title><rect x="86.4918%" y="165" width="0.1024%" height="15" fill="rgb(241,108,4)"/><text x="86.7418%" y="175.50"></text></g><g><title>exported_symbols (76,320 samples, 0.42%)</title><rect x="86.2647%" y="213" width="0.4197%" height="15" fill="rgb(247,173,49)"/><text x="86.5147%" y="223.50"></text></g><g><title>generate_crate_metadata (373,994 samples, 2.06%)</title><rect x="84.7324%" y="229" width="2.0566%" height="15" fill="rgb(224,114,35)"/><text x="84.9824%" y="239.50">g..</text></g><g><title>hir_lowering (286,443 samples, 1.58%)</title><rect x="86.7890%" y="229" width="1.5751%" height="15" fill="rgb(245,159,27)"/><text x="87.0390%" y="239.50"></text></g><g><title>finish_ongoing_codegen (424,015 samples, 2.33%)</title><rect x="88.4200%" y="213" width="2.3316%" height="15" fill="rgb(245,172,44)"/><text x="88.6700%" y="223.50">f..</text></g><g><title>join_worker_thread (30,681 samples, 0.17%)</title><rect x="90.5829%" y="197" width="0.1687%" height="15" fill="rgb(236,23,11)"/><text x="90.8329%" y="207.50"></text></g><g><title>link_crate (518,865 samples, 2.85%)</title><rect x="90.7516%" y="213" width="2.8532%" height="15" fill="rgb(205,117,38)"/><text x="91.0016%" y="223.50">li..</text></g><g><title>link_binary (509,005 samples, 2.80%)</title><rect x="90.8058%" y="197" width="2.7990%" height="15" fill="rgb(237,72,25)"/><text x="91.0558%" y="207.50">li..</text></g><g><title>link_rlib (333,473 samples, 1.83%)</title><rect x="91.7711%" y="181" width="1.8337%" height="15" fill="rgb(244,70,9)"/><text x="92.0211%" y="191.50">l..</text></g><g><title>link (958,700 samples, 5.27%)</title><rect x="88.3641%" y="229" width="5.2718%" height="15" fill="rgb(217,125,39)"/><text x="88.6141%" y="239.50">link</text></g><g><title>parse_crate (278,723 samples, 1.53%)</title><rect x="93.6359%" y="229" width="1.5327%" height="15" fill="rgb(235,36,10)"/><text x="93.8859%" y="239.50"></text></g><g><title>prepare_outputs (231,052 samples, 1.27%)</title><rect x="95.2120%" y="229" width="1.2705%" height="15" fill="rgb(251,123,47)"/><text x="95.4620%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (293,514 samples, 1.61%)</title><rect x="96.4825%" y="229" width="1.6140%" height="15" fill="rgb(221,13,13)"/><text x="96.7325%" y="239.50"></text></g><g><title>setup_global_ctxt (102,481 samples, 0.56%)</title><rect x="98.1019%" y="229" width="0.5635%" height="15" fill="rgb(238,131,9)"/><text x="98.3519%" y="239.50"></text></g><g><title>all (18,185,434 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (18,185,434 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (242,693 samples, 1.33%)</title><rect x="98.6655%" y="229" width="1.3345%" height="15" fill="rgb(242,14,37)"/><text x="98.9155%" y="239.50"></text></g></svg></svg>