<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,956,059 samples, 5.04%)</title><rect x="0.2828%" y="213" width="5.0362%" height="15" fill="rgb(227,0,7)"/><text x="0.5328%" y="223.50">LLVM_p..</text></g><g><title>param_env (341,073 samples, 0.14%)</title><rect x="14.7765%" y="133" width="0.1437%" height="15" fill="rgb(217,0,24)"/><text x="15.0265%" y="143.50"></text></g><g><title>codegen_fn_attrs (325,418 samples, 0.14%)</title><rect x="15.2152%" y="117" width="0.1371%" height="15" fill="rgb(221,193,54)"/><text x="15.4652%" y="127.50"></text></g><g><title>adt_drop_tys (343,714 samples, 0.14%)</title><rect x="17.2655%" y="85" width="0.1448%" height="15" fill="rgb(248,212,6)"/><text x="17.5155%" y="95.50"></text></g><g><title>is_copy_raw (1,471,388 samples, 0.62%)</title><rect x="17.4103%" y="85" width="0.6198%" height="15" fill="rgb(208,68,35)"/><text x="17.6603%" y="95.50"></text></g><g><title>evaluate_obligation (1,208,756 samples, 0.51%)</title><rect x="17.5209%" y="69" width="0.5092%" height="15" fill="rgb(232,128,0)"/><text x="17.7709%" y="79.50"></text></g><g><title>needs_drop_raw (2,056,504 samples, 0.87%)</title><rect x="17.1645%" y="101" width="0.8663%" height="15" fill="rgb(207,160,47)"/><text x="17.4145%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,053,892 samples, 0.44%)</title><rect x="18.1649%" y="85" width="0.4439%" height="15" fill="rgb(228,23,34)"/><text x="18.4149%" y="95.50"></text></g><g><title>specialization_graph_of (583,896 samples, 0.25%)</title><rect x="18.6385%" y="85" width="0.2460%" height="15" fill="rgb(218,30,26)"/><text x="18.8885%" y="95.50"></text></g><g><title>impl_trait_ref (307,663 samples, 0.13%)</title><rect x="18.7549%" y="69" width="0.1296%" height="15" fill="rgb(220,122,19)"/><text x="19.0049%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (272,963 samples, 0.11%)</title><rect x="18.7695%" y="53" width="0.1150%" height="15" fill="rgb(250,228,42)"/><text x="19.0195%" y="63.50"></text></g><g><title>resolve_instance (2,117,650 samples, 0.89%)</title><rect x="18.0308%" y="101" width="0.8920%" height="15" fill="rgb(240,193,28)"/><text x="18.2808%" y="111.50"></text></g><g><title>thir_body (1,496,768 samples, 0.63%)</title><rect x="18.9403%" y="101" width="0.6305%" height="15" fill="rgb(216,20,37)"/><text x="19.1903%" y="111.50"></text></g><g><title>mir_const (12,673,135 samples, 5.34%)</title><rect x="14.2500%" y="149" width="5.3383%" height="15" fill="rgb(206,188,39)"/><text x="14.5000%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (11,082,225 samples, 4.67%)</title><rect x="14.9201%" y="133" width="4.6682%" height="15" fill="rgb(217,207,13)"/><text x="15.1701%" y="143.50">unsaf..</text></g><g><title>mir_built (10,056,252 samples, 4.24%)</title><rect x="15.3523%" y="117" width="4.2360%" height="15" fill="rgb(231,73,38)"/><text x="15.6023%" y="127.50">mir_b..</text></g><g><title>mir_promoted (13,953,918 samples, 5.88%)</title><rect x="13.7459%" y="165" width="5.8778%" height="15" fill="rgb(225,20,46)"/><text x="13.9959%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (1,429,368 samples, 0.60%)</title><rect x="19.6237%" y="165" width="0.6021%" height="15" fill="rgb(210,31,41)"/><text x="19.8737%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,153,895 samples, 0.49%)</title><rect x="20.2258%" y="165" width="0.4861%" height="15" fill="rgb(221,200,47)"/><text x="20.4758%" y="175.50"></text></g><g><title>normalize_projection_ty (651,911 samples, 0.27%)</title><rect x="20.4373%" y="149" width="0.2746%" height="15" fill="rgb(226,26,5)"/><text x="20.6873%" y="159.50"></text></g><g><title>type_op_normalize_ty (329,453 samples, 0.14%)</title><rect x="20.7463%" y="165" width="0.1388%" height="15" fill="rgb(249,33,26)"/><text x="20.9963%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,544,290 samples, 1.91%)</title><rect x="20.8851%" y="165" width="1.9142%" height="15" fill="rgb(235,183,28)"/><text x="21.1351%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (41,131,831 samples, 17.33%)</title><rect x="5.4803%" y="197" width="17.3259%" height="15" fill="rgb(221,5,38)"/><text x="5.7303%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (40,959,701 samples, 17.25%)</title><rect x="5.5528%" y="181" width="17.2534%" height="15" fill="rgb(247,18,42)"/><text x="5.8028%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (244,471 samples, 0.10%)</title><rect x="22.8712%" y="197" width="0.1030%" height="15" fill="rgb(241,131,45)"/><text x="23.1212%" y="207.50"></text></g><g><title>codegen_fn_attrs (331,032 samples, 0.14%)</title><rect x="23.1881%" y="133" width="0.1394%" height="15" fill="rgb(249,31,29)"/><text x="23.4381%" y="143.50"></text></g><g><title>codegen_fn_attrs (541,395 samples, 0.23%)</title><rect x="23.1034%" y="165" width="0.2281%" height="15" fill="rgb(225,111,53)"/><text x="23.3534%" y="175.50"></text></g><g><title>should_inherit_track_caller (480,985 samples, 0.20%)</title><rect x="23.1288%" y="149" width="0.2026%" height="15" fill="rgb(238,160,17)"/><text x="23.3788%" y="159.50"></text></g><g><title>check_mod_attrs (821,678 samples, 0.35%)</title><rect x="22.9854%" y="181" width="0.3461%" height="15" fill="rgb(214,148,48)"/><text x="23.2354%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (496,205 samples, 0.21%)</title><rect x="23.4440%" y="181" width="0.2090%" height="15" fill="rgb(232,36,49)"/><text x="23.6940%" y="191.50"></text></g><g><title>misc_checking_1 (1,677,348 samples, 0.71%)</title><rect x="22.9744%" y="197" width="0.7065%" height="15" fill="rgb(209,103,24)"/><text x="23.2244%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (993,681 samples, 0.42%)</title><rect x="23.6817%" y="181" width="0.4186%" height="15" fill="rgb(229,88,8)"/><text x="23.9317%" y="191.50"></text></g><g><title>check_mod_liveness (863,308 samples, 0.36%)</title><rect x="23.7366%" y="165" width="0.3637%" height="15" fill="rgb(213,181,19)"/><text x="23.9866%" y="175.50"></text></g><g><title>type_uninhabited_from (398,863 samples, 0.17%)</title><rect x="23.9323%" y="149" width="0.1680%" height="15" fill="rgb(254,191,54)"/><text x="24.1823%" y="159.50"></text></g><g><title>type_uninhabited_from (356,293 samples, 0.15%)</title><rect x="23.9502%" y="133" width="0.1501%" height="15" fill="rgb(241,83,37)"/><text x="24.2002%" y="143.50"></text></g><g><title>type_uninhabited_from (332,463 samples, 0.14%)</title><rect x="23.9602%" y="117" width="0.1400%" height="15" fill="rgb(233,36,39)"/><text x="24.2102%" y="127.50"></text></g><g><title>type_uninhabited_from (315,323 samples, 0.13%)</title><rect x="23.9675%" y="101" width="0.1328%" height="15" fill="rgb(226,3,54)"/><text x="24.2175%" y="111.50"></text></g><g><title>type_uninhabited_from (302,523 samples, 0.13%)</title><rect x="23.9728%" y="85" width="0.1274%" height="15" fill="rgb(245,192,40)"/><text x="24.2228%" y="95.50"></text></g><g><title>type_uninhabited_from (276,292 samples, 0.12%)</title><rect x="23.9839%" y="69" width="0.1164%" height="15" fill="rgb(238,167,29)"/><text x="24.2339%" y="79.50"></text></g><g><title>misc_checking_2 (1,942,151 samples, 0.82%)</title><rect x="23.6810%" y="197" width="0.8181%" height="15" fill="rgb(232,182,51)"/><text x="23.9310%" y="207.50"></text></g><g><title>match_checking (946,700 samples, 0.40%)</title><rect x="24.1003%" y="181" width="0.3988%" height="15" fill="rgb(231,60,39)"/><text x="24.3503%" y="191.50"></text></g><g><title>check_match (903,060 samples, 0.38%)</title><rect x="24.1187%" y="165" width="0.3804%" height="15" fill="rgb(208,69,12)"/><text x="24.3687%" y="175.50"></text></g><g><title>check_private_in_public (341,304 samples, 0.14%)</title><rect x="24.5034%" y="181" width="0.1438%" height="15" fill="rgb(235,93,37)"/><text x="24.7534%" y="191.50"></text></g><g><title>death_checking (806,398 samples, 0.34%)</title><rect x="24.6472%" y="181" width="0.3397%" height="15" fill="rgb(213,116,39)"/><text x="24.8972%" y="191.50"></text></g><g><title>param_env (452,786 samples, 0.19%)</title><rect x="25.4290%" y="149" width="0.1907%" height="15" fill="rgb(222,207,29)"/><text x="25.6790%" y="159.50"></text></g><g><title>crate_lints (3,044,162 samples, 1.28%)</title><rect x="24.9876%" y="165" width="1.2823%" height="15" fill="rgb(206,96,30)"/><text x="25.2376%" y="175.50"></text></g><g><title>type_of (1,468,397 samples, 0.62%)</title><rect x="25.6513%" y="149" width="0.6185%" height="15" fill="rgb(218,138,4)"/><text x="25.9013%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,128,653 samples, 0.48%)</title><rect x="25.7944%" y="133" width="0.4754%" height="15" fill="rgb(250,191,14)"/><text x="26.0444%" y="143.50"></text></g><g><title>lint_checking (3,644,239 samples, 1.54%)</title><rect x="24.9869%" y="181" width="1.5351%" height="15" fill="rgb(239,60,40)"/><text x="25.2369%" y="191.50"></text></g><g><title>module_lints (598,357 samples, 0.25%)</title><rect x="26.2699%" y="165" width="0.2520%" height="15" fill="rgb(206,27,48)"/><text x="26.5199%" y="175.50"></text></g><g><title>lint_mod (592,507 samples, 0.25%)</title><rect x="26.2723%" y="149" width="0.2496%" height="15" fill="rgb(225,35,8)"/><text x="26.5223%" y="159.50"></text></g><g><title>privacy_access_levels (357,044 samples, 0.15%)</title><rect x="26.5219%" y="181" width="0.1504%" height="15" fill="rgb(250,213,24)"/><text x="26.7719%" y="191.50"></text></g><g><title>privacy_checking_modules (1,361,274 samples, 0.57%)</title><rect x="26.6723%" y="181" width="0.5734%" height="15" fill="rgb(247,123,22)"/><text x="26.9223%" y="191.50"></text></g><g><title>check_mod_privacy (1,356,794 samples, 0.57%)</title><rect x="26.6742%" y="165" width="0.5715%" height="15" fill="rgb(231,138,38)"/><text x="26.9242%" y="175.50"></text></g><g><title>misc_checking_3 (6,542,340 samples, 2.76%)</title><rect x="24.4991%" y="197" width="2.7558%" height="15" fill="rgb(231,145,46)"/><text x="24.7491%" y="207.50">mi..</text></g><g><title>impl_parent (2,159,209 samples, 0.91%)</title><rect x="28.8012%" y="133" width="0.9095%" height="15" fill="rgb(251,118,11)"/><text x="29.0512%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,363,483 samples, 0.57%)</title><rect x="29.1364%" y="117" width="0.5743%" height="15" fill="rgb(217,147,25)"/><text x="29.3864%" y="127.50"></text></g><g><title>impl_trait_ref (5,931,834 samples, 2.50%)</title><rect x="29.7107%" y="133" width="2.4987%" height="15" fill="rgb(247,81,37)"/><text x="29.9607%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,114,868 samples, 2.15%)</title><rect x="30.0548%" y="117" width="2.1545%" height="15" fill="rgb(209,12,38)"/><text x="30.3048%" y="127.50">m..</text></g><g><title>trait_impls_of (697,327 samples, 0.29%)</title><rect x="32.2206%" y="133" width="0.2937%" height="15" fill="rgb(227,1,9)"/><text x="32.4706%" y="143.50"></text></g><g><title>implementations_of_trait (237,472 samples, 0.10%)</title><rect x="32.4143%" y="117" width="0.1000%" height="15" fill="rgb(248,47,43)"/><text x="32.6643%" y="127.50"></text></g><g><title>coherent_trait (12,369,313 samples, 5.21%)</title><rect x="27.3044%" y="165" width="5.2103%" height="15" fill="rgb(221,10,30)"/><text x="27.5544%" y="175.50">cohere..</text></g><g><title>specialization_graph_of (12,349,752 samples, 5.20%)</title><rect x="27.3126%" y="149" width="5.2021%" height="15" fill="rgb(210,229,1)"/><text x="27.5626%" y="159.50">specia..</text></g><g><title>coherence_checking (12,453,674 samples, 5.25%)</title><rect x="27.2964%" y="181" width="5.2458%" height="15" fill="rgb(222,148,37)"/><text x="27.5464%" y="191.50">cohere..</text></g><g><title>associated_item (411,315 samples, 0.17%)</title><rect x="46.4256%" y="117" width="0.1733%" height="15" fill="rgb(234,67,33)"/><text x="46.6756%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (322,374 samples, 0.14%)</title><rect x="46.4631%" y="101" width="0.1358%" height="15" fill="rgb(247,98,35)"/><text x="46.7131%" y="111.50"></text></g><g><title>associated_items (617,287 samples, 0.26%)</title><rect x="46.3534%" y="133" width="0.2600%" height="15" fill="rgb(247,138,52)"/><text x="46.6034%" y="143.50"></text></g><g><title>adt_dtorck_constraint (269,444 samples, 0.11%)</title><rect x="47.3865%" y="37" width="0.1135%" height="15" fill="rgb(213,79,30)"/><text x="47.6365%" y="47.50"></text></g><g><title>adt_dtorck_constraint (397,426 samples, 0.17%)</title><rect x="47.3377%" y="53" width="0.1674%" height="15" fill="rgb(246,177,23)"/><text x="47.5877%" y="63.50"></text></g><g><title>adt_dtorck_constraint (554,796 samples, 0.23%)</title><rect x="47.2748%" y="69" width="0.2337%" height="15" fill="rgb(230,62,27)"/><text x="47.5248%" y="79.50"></text></g><g><title>adt_dtorck_constraint (739,069 samples, 0.31%)</title><rect x="47.2012%" y="85" width="0.3113%" height="15" fill="rgb(216,154,8)"/><text x="47.4512%" y="95.50"></text></g><g><title>adt_dtorck_constraint (924,530 samples, 0.39%)</title><rect x="47.1342%" y="101" width="0.3894%" height="15" fill="rgb(244,35,45)"/><text x="47.3842%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,339,893 samples, 0.56%)</title><rect x="46.9872%" y="117" width="0.5644%" height="15" fill="rgb(251,115,12)"/><text x="47.2372%" y="127.50"></text></g><g><title>eval_to_const_value_raw (246,382 samples, 0.10%)</title><rect x="47.5525%" y="117" width="0.1038%" height="15" fill="rgb(240,54,50)"/><text x="47.8025%" y="127.50"></text></g><g><title>dropck_outlives (2,470,686 samples, 1.04%)</title><rect x="46.6507%" y="133" width="1.0407%" height="15" fill="rgb(233,84,52)"/><text x="46.9007%" y="143.50"></text></g><g><title>generics_of (1,031,980 samples, 0.43%)</title><rect x="50.2794%" y="117" width="0.4347%" height="15" fill="rgb(207,117,47)"/><text x="50.5294%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (850,817 samples, 0.36%)</title><rect x="50.3558%" y="101" width="0.3584%" height="15" fill="rgb(249,43,39)"/><text x="50.6058%" y="111.50"></text></g><g><title>impl_trait_ref (1,305,455 samples, 0.55%)</title><rect x="50.7280%" y="117" width="0.5499%" height="15" fill="rgb(209,38,44)"/><text x="50.9780%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (914,822 samples, 0.39%)</title><rect x="50.8925%" y="101" width="0.3853%" height="15" fill="rgb(236,212,23)"/><text x="51.1425%" y="111.50"></text></g><g><title>specializes (273,862 samples, 0.12%)</title><rect x="51.3749%" y="117" width="0.1154%" height="15" fill="rgb(242,79,21)"/><text x="51.6249%" y="127.50"></text></g><g><title>trait_impls_of (565,615 samples, 0.24%)</title><rect x="51.4953%" y="117" width="0.2383%" height="15" fill="rgb(211,96,35)"/><text x="51.7453%" y="127.50"></text></g><g><title>evaluate_obligation (9,604,696 samples, 4.05%)</title><rect x="47.6914%" y="133" width="4.0458%" height="15" fill="rgb(253,215,40)"/><text x="47.9414%" y="143.50">eval..</text></g><g><title>evaluate_obligation (489,732 samples, 0.21%)</title><rect x="52.3303%" y="117" width="0.2063%" height="15" fill="rgb(211,81,21)"/><text x="52.5803%" y="127.50"></text></g><g><title>method_autoderef_steps (1,194,140 samples, 0.50%)</title><rect x="52.0397%" y="133" width="0.5030%" height="15" fill="rgb(208,190,38)"/><text x="52.2897%" y="143.50"></text></g><g><title>object_safety_violations (297,333 samples, 0.13%)</title><rect x="52.5427%" y="133" width="0.1252%" height="15" fill="rgb(235,213,38)"/><text x="52.7927%" y="143.50"></text></g><g><title>predicates_of (430,319 samples, 0.18%)</title><rect x="52.6896%" y="133" width="0.1813%" height="15" fill="rgb(237,122,38)"/><text x="52.9396%" y="143.50"></text></g><g><title>predicates_defined_on (297,625 samples, 0.13%)</title><rect x="52.7455%" y="117" width="0.1254%" height="15" fill="rgb(244,218,35)"/><text x="52.9955%" y="127.50"></text></g><g><title>dropck_outlives (254,035 samples, 0.11%)</title><rect x="55.2268%" y="117" width="0.1070%" height="15" fill="rgb(240,68,47)"/><text x="55.4768%" y="127.50"></text></g><g><title>evaluate_obligation (1,005,401 samples, 0.42%)</title><rect x="55.3338%" y="117" width="0.4235%" height="15" fill="rgb(210,16,53)"/><text x="55.5838%" y="127.50"></text></g><g><title>is_copy_raw (487,165 samples, 0.21%)</title><rect x="55.8289%" y="117" width="0.2052%" height="15" fill="rgb(235,124,12)"/><text x="56.0789%" y="127.50"></text></g><g><title>evaluate_obligation (440,883 samples, 0.19%)</title><rect x="55.8484%" y="101" width="0.1857%" height="15" fill="rgb(224,169,11)"/><text x="56.0984%" y="111.50"></text></g><g><title>method_autoderef_steps (341,903 samples, 0.14%)</title><rect x="56.0553%" y="117" width="0.1440%" height="15" fill="rgb(250,166,2)"/><text x="56.3053%" y="127.50"></text></g><g><title>object_safety_violations (328,504 samples, 0.14%)</title><rect x="56.1993%" y="117" width="0.1384%" height="15" fill="rgb(242,216,29)"/><text x="56.4493%" y="127.50"></text></g><g><title>typeck (8,256,857 samples, 3.48%)</title><rect x="52.9377%" y="133" width="3.4780%" height="15" fill="rgb(230,116,27)"/><text x="53.1877%" y="143.50">typ..</text></g><g><title>item_bodies_checking (56,677,678 samples, 23.87%)</title><rect x="32.5640%" y="181" width="23.8743%" height="15" fill="rgb(228,99,48)"/><text x="32.8140%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (56,674,198 samples, 23.87%)</title><rect x="32.5654%" y="165" width="23.8728%" height="15" fill="rgb(253,11,6)"/><text x="32.8154%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (56,559,057 samples, 23.82%)</title><rect x="32.6139%" y="149" width="23.8243%" height="15" fill="rgb(247,143,39)"/><text x="32.8639%" y="159.50">typeck</text></g><g><title>impl_trait_ref (250,405 samples, 0.11%)</title><rect x="57.4965%" y="101" width="0.1055%" height="15" fill="rgb(236,97,10)"/><text x="57.7465%" y="111.50"></text></g><g><title>adt_destructor (592,996 samples, 0.25%)</title><rect x="57.3779%" y="149" width="0.2498%" height="15" fill="rgb(233,208,19)"/><text x="57.6279%" y="159.50"></text></g><g><title>coherent_trait (583,186 samples, 0.25%)</title><rect x="57.3821%" y="133" width="0.2457%" height="15" fill="rgb(216,164,2)"/><text x="57.6321%" y="143.50"></text></g><g><title>specialization_graph_of (580,746 samples, 0.24%)</title><rect x="57.3831%" y="117" width="0.2446%" height="15" fill="rgb(220,129,5)"/><text x="57.6331%" y="127.50"></text></g><g><title>item_types_checking (3,125,924 samples, 1.32%)</title><rect x="56.4382%" y="181" width="1.3167%" height="15" fill="rgb(242,17,10)"/><text x="56.6882%" y="191.50"></text></g><g><title>check_mod_item_types (3,118,973 samples, 1.31%)</title><rect x="56.4412%" y="165" width="1.3138%" height="15" fill="rgb(242,107,0)"/><text x="56.6912%" y="175.50"></text></g><g><title>fn_sig (466,233 samples, 0.20%)</title><rect x="57.9245%" y="149" width="0.1964%" height="15" fill="rgb(251,28,31)"/><text x="58.1745%" y="159.50"></text></g><g><title>generics_of (508,716 samples, 0.21%)</title><rect x="58.1209%" y="149" width="0.2143%" height="15" fill="rgb(233,223,10)"/><text x="58.3709%" y="159.50"></text></g><g><title>late_bound_vars_map (477,766 samples, 0.20%)</title><rect x="58.5869%" y="101" width="0.2012%" height="15" fill="rgb(215,21,27)"/><text x="58.8369%" y="111.50"></text></g><g><title>resolve_lifetimes (457,896 samples, 0.19%)</title><rect x="58.5953%" y="85" width="0.1929%" height="15" fill="rgb(232,23,21)"/><text x="58.8453%" y="95.50"></text></g><g><title>explicit_predicates_of (899,619 samples, 0.38%)</title><rect x="58.4397%" y="117" width="0.3789%" height="15" fill="rgb(244,5,23)"/><text x="58.6897%" y="127.50"></text></g><g><title>predicates_of (1,653,757 samples, 0.70%)</title><rect x="58.3593%" y="149" width="0.6966%" height="15" fill="rgb(226,81,46)"/><text x="58.6093%" y="159.50"></text></g><g><title>predicates_defined_on (1,580,317 samples, 0.67%)</title><rect x="58.3903%" y="133" width="0.6657%" height="15" fill="rgb(247,70,30)"/><text x="58.6403%" y="143.50"></text></g><g><title>inferred_outlives_of (563,466 samples, 0.24%)</title><rect x="58.8186%" y="117" width="0.2373%" height="15" fill="rgb(212,68,19)"/><text x="59.0686%" y="127.50"></text></g><g><title>inferred_outlives_crate (531,045 samples, 0.22%)</title><rect x="58.8323%" y="101" width="0.2237%" height="15" fill="rgb(240,187,13)"/><text x="59.0823%" y="111.50"></text></g><g><title>type_of (329,882 samples, 0.14%)</title><rect x="58.9170%" y="85" width="0.1390%" height="15" fill="rgb(223,113,26)"/><text x="59.1670%" y="95.50"></text></g><g><title>type_collecting (3,263,455 samples, 1.37%)</title><rect x="57.7572%" y="181" width="1.3747%" height="15" fill="rgb(206,192,2)"/><text x="58.0072%" y="191.50"></text></g><g><title>collect_mod_item_types (3,251,715 samples, 1.37%)</title><rect x="57.7621%" y="165" width="1.3697%" height="15" fill="rgb(241,108,4)"/><text x="58.0121%" y="175.50"></text></g><g><title>evaluate_obligation (1,340,025 samples, 0.56%)</title><rect x="61.2955%" y="149" width="0.5645%" height="15" fill="rgb(247,173,49)"/><text x="61.5455%" y="159.50"></text></g><g><title>implied_outlives_bounds (562,024 samples, 0.24%)</title><rect x="61.8782%" y="149" width="0.2367%" height="15" fill="rgb(224,114,35)"/><text x="62.1282%" y="159.50"></text></g><g><title>param_env (553,963 samples, 0.23%)</title><rect x="62.1149%" y="149" width="0.2333%" height="15" fill="rgb(245,159,27)"/><text x="62.3649%" y="159.50"></text></g><g><title>region_scope_tree (549,544 samples, 0.23%)</title><rect x="62.3835%" y="149" width="0.2315%" height="15" fill="rgb(245,172,44)"/><text x="62.6335%" y="159.50"></text></g><g><title>check_impl_item_well_formed (7,957,653 samples, 3.35%)</title><rect x="59.2639%" y="165" width="3.3520%" height="15" fill="rgb(236,23,11)"/><text x="59.5139%" y="175.50">che..</text></g><g><title>evaluate_obligation (287,193 samples, 0.12%)</title><rect x="63.4645%" y="149" width="0.1210%" height="15" fill="rgb(205,117,38)"/><text x="63.7145%" y="159.50"></text></g><g><title>param_env (425,252 samples, 0.18%)</title><rect x="63.6704%" y="149" width="0.1791%" height="15" fill="rgb(237,72,25)"/><text x="63.9204%" y="159.50"></text></g><g><title>check_item_well_formed (3,300,633 samples, 1.39%)</title><rect x="62.6159%" y="165" width="1.3903%" height="15" fill="rgb(244,70,9)"/><text x="62.8659%" y="175.50"></text></g><g><title>analysis (139,590,867 samples, 58.80%)</title><rect x="5.3191%" y="213" width="58.7997%" height="15" fill="rgb(217,125,39)"/><text x="5.5691%" y="223.50">analysis</text></g><g><title>type_check_crate (87,515,109 samples, 36.86%)</title><rect x="27.2549%" y="197" width="36.8639%" height="15" fill="rgb(235,36,10)"/><text x="27.5049%" y="207.50">type_check_crate</text></g><g><title>wf_checking (11,832,046 samples, 4.98%)</title><rect x="59.1348%" y="181" width="4.9840%" height="15" fill="rgb(251,123,47)"/><text x="59.3848%" y="191.50">wf_che..</text></g><g><title>check_trait_item_well_formed (267,073 samples, 0.11%)</title><rect x="64.0063%" y="165" width="0.1125%" height="15" fill="rgb(221,13,13)"/><text x="64.2563%" y="175.50"></text></g><g><title>layout_of (295,514 samples, 0.12%)</title><rect x="66.2861%" y="133" width="0.1245%" height="15" fill="rgb(238,131,9)"/><text x="66.5361%" y="143.50"></text></g><g><title>layout_of (440,905 samples, 0.19%)</title><rect x="66.2314%" y="149" width="0.1857%" height="15" fill="rgb(211,50,8)"/><text x="66.4814%" y="159.50"></text></g><g><title>layout_of (501,596 samples, 0.21%)</title><rect x="66.2212%" y="165" width="0.2113%" height="15" fill="rgb(245,182,24)"/><text x="66.4712%" y="175.50"></text></g><g><title>fn_abi_of_instance (572,987 samples, 0.24%)</title><rect x="66.1958%" y="181" width="0.2414%" height="15" fill="rgb(242,14,37)"/><text x="66.4458%" y="191.50"></text></g><g><title>layout_of (237,761 samples, 0.10%)</title><rect x="66.8168%" y="101" width="0.1002%" height="15" fill="rgb(246,228,12)"/><text x="67.0668%" y="111.50"></text></g><g><title>layout_of (345,393 samples, 0.15%)</title><rect x="66.7936%" y="117" width="0.1455%" height="15" fill="rgb(213,55,15)"/><text x="67.0436%" y="127.50"></text></g><g><title>layout_of (490,574 samples, 0.21%)</title><rect x="66.7674%" y="133" width="0.2066%" height="15" fill="rgb(209,9,3)"/><text x="67.0174%" y="143.50"></text></g><g><title>layout_of (874,629 samples, 0.37%)</title><rect x="66.6477%" y="149" width="0.3684%" height="15" fill="rgb(230,59,30)"/><text x="66.8977%" y="159.50"></text></g><g><title>eval_to_const_value_raw (384,074 samples, 0.16%)</title><rect x="67.0470%" y="133" width="0.1618%" height="15" fill="rgb(209,121,21)"/><text x="67.2970%" y="143.50"></text></g><g><title>eval_to_const_value_raw (380,574 samples, 0.16%)</title><rect x="67.0484%" y="117" width="0.1603%" height="15" fill="rgb(220,109,13)"/><text x="67.2984%" y="127.50"></text></g><g><title>eval_to_allocation_raw (374,644 samples, 0.16%)</title><rect x="67.0509%" y="101" width="0.1578%" height="15" fill="rgb(232,18,1)"/><text x="67.3009%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (415,995 samples, 0.18%)</title><rect x="67.0383%" y="149" width="0.1752%" height="15" fill="rgb(215,41,42)"/><text x="67.2883%" y="159.50"></text></g><g><title>layout_of (1,489,757 samples, 0.63%)</title><rect x="66.5915%" y="165" width="0.6275%" height="15" fill="rgb(224,123,36)"/><text x="66.8415%" y="175.50"></text></g><g><title>layout_of (2,074,755 samples, 0.87%)</title><rect x="66.4453%" y="181" width="0.8739%" height="15" fill="rgb(240,125,3)"/><text x="66.6953%" y="191.50"></text></g><g><title>codegen_module (6,761,573 samples, 2.85%)</title><rect x="64.4816%" y="197" width="2.8482%" height="15" fill="rgb(205,98,50)"/><text x="64.7316%" y="207.50">co..</text></g><g><title>codegen_crate (7,751,493 samples, 3.27%)</title><rect x="64.1230%" y="213" width="3.2652%" height="15" fill="rgb(205,185,37)"/><text x="64.3730%" y="223.50">cod..</text></g><g><title>LLVM_module_codegen (8,675,243 samples, 3.65%)</title><rect x="67.3982%" y="197" width="3.6543%" height="15" fill="rgb(238,207,15)"/><text x="67.6482%" y="207.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (8,215,759 samples, 3.46%)</title><rect x="67.5918%" y="181" width="3.4607%" height="15" fill="rgb(213,199,42)"/><text x="67.8418%" y="191.50">LLV..</text></g><g><title>codegen_module_optimize (9,089,347 samples, 3.83%)</title><rect x="67.3882%" y="213" width="3.8287%" height="15" fill="rgb(235,201,11)"/><text x="67.6382%" y="223.50">code..</text></g><g><title>LLVM_module_optimize (390,304 samples, 0.16%)</title><rect x="71.0525%" y="197" width="0.1644%" height="15" fill="rgb(207,46,11)"/><text x="71.3025%" y="207.50"></text></g><g><title>metadata_register_crate (8,038,465 samples, 3.39%)</title><rect x="80.2687%" y="165" width="3.3860%" height="15" fill="rgb(241,35,35)"/><text x="80.5187%" y="175.50">met..</text></g><g><title>metadata_register_crate (5,295,227 samples, 2.23%)</title><rect x="81.4242%" y="149" width="2.2305%" height="15" fill="rgb(243,32,47)"/><text x="81.6742%" y="159.50">m..</text></g><g><title>metadata_register_crate (312,622 samples, 0.13%)</title><rect x="83.5230%" y="133" width="0.1317%" height="15" fill="rgb(247,202,23)"/><text x="83.7730%" y="143.50"></text></g><g><title>macro_expand_crate (29,460,526 samples, 12.41%)</title><rect x="71.4278%" y="197" width="12.4096%" height="15" fill="rgb(219,102,11)"/><text x="71.6778%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (29,447,676 samples, 12.40%)</title><rect x="71.4333%" y="181" width="12.4042%" height="15" fill="rgb(243,110,44)"/><text x="71.6833%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (433,824 samples, 0.18%)</title><rect x="83.6547%" y="165" width="0.1827%" height="15" fill="rgb(222,74,54)"/><text x="83.9047%" y="175.50"></text></g><g><title>late_resolve_crate (2,271,244 samples, 0.96%)</title><rect x="84.0083%" y="181" width="0.9567%" height="15" fill="rgb(216,99,12)"/><text x="84.2583%" y="191.50"></text></g><g><title>configure_and_expand (32,786,991 samples, 13.81%)</title><rect x="71.2169%" y="213" width="13.8108%" height="15" fill="rgb(226,22,26)"/><text x="71.4669%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,604,447 samples, 1.10%)</title><rect x="83.9306%" y="197" width="1.0971%" height="15" fill="rgb(217,163,10)"/><text x="84.1806%" y="207.50"></text></g><g><title>drop_ast (271,803 samples, 0.11%)</title><rect x="85.0277%" y="213" width="0.1145%" height="15" fill="rgb(213,25,53)"/><text x="85.2777%" y="223.50"></text></g><g><title>early_lint_checks (449,775 samples, 0.19%)</title><rect x="85.1526%" y="213" width="0.1895%" height="15" fill="rgb(252,105,26)"/><text x="85.4026%" y="223.50"></text></g><g><title>free_global_ctxt (4,547,949 samples, 1.92%)</title><rect x="85.3420%" y="213" width="1.9157%" height="15" fill="rgb(220,39,43)"/><text x="85.5920%" y="223.50">f..</text></g><g><title>optimized_mir (244,192 samples, 0.10%)</title><rect x="88.4027%" y="133" width="0.1029%" height="15" fill="rgb(229,68,48)"/><text x="88.6527%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (334,223 samples, 0.14%)</title><rect x="88.3672%" y="149" width="0.1408%" height="15" fill="rgb(252,8,32)"/><text x="88.6172%" y="159.50"></text></g><g><title>monomorphization_collector (373,054 samples, 0.16%)</title><rect x="88.3656%" y="165" width="0.1571%" height="15" fill="rgb(223,20,43)"/><text x="88.6156%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (520,936 samples, 0.22%)</title><rect x="88.3586%" y="181" width="0.2194%" height="15" fill="rgb(229,81,49)"/><text x="88.6086%" y="191.50"></text></g><g><title>exported_symbols (727,688 samples, 0.31%)</title><rect x="88.3531%" y="197" width="0.3065%" height="15" fill="rgb(236,28,36)"/><text x="88.6031%" y="207.50"></text></g><g><title>adt_sized_constraint (258,332 samples, 0.11%)</title><rect x="91.4335%" y="69" width="0.1088%" height="15" fill="rgb(249,185,26)"/><text x="91.6835%" y="79.50"></text></g><g><title>layout_of (382,104 samples, 0.16%)</title><rect x="91.5822%" y="53" width="0.1610%" height="15" fill="rgb(249,174,33)"/><text x="91.8322%" y="63.50"></text></g><g><title>layout_of (504,435 samples, 0.21%)</title><rect x="91.5515%" y="69" width="0.2125%" height="15" fill="rgb(233,201,37)"/><text x="91.8015%" y="79.50"></text></g><g><title>layout_of (876,040 samples, 0.37%)</title><rect x="91.4010%" y="85" width="0.3690%" height="15" fill="rgb(221,78,26)"/><text x="91.6510%" y="95.50"></text></g><g><title>layout_of (1,020,050 samples, 0.43%)</title><rect x="91.3534%" y="101" width="0.4297%" height="15" fill="rgb(250,127,30)"/><text x="91.6034%" y="111.50"></text></g><g><title>layout_of (1,146,801 samples, 0.48%)</title><rect x="91.3045%" y="117" width="0.4831%" height="15" fill="rgb(230,49,44)"/><text x="91.5545%" y="127.50"></text></g><g><title>layout_of (1,261,322 samples, 0.53%)</title><rect x="91.2726%" y="133" width="0.5313%" height="15" fill="rgb(229,67,23)"/><text x="91.5226%" y="143.50"></text></g><g><title>layout_of (1,380,524 samples, 0.58%)</title><rect x="91.2298%" y="149" width="0.5815%" height="15" fill="rgb(249,83,47)"/><text x="91.4798%" y="159.50"></text></g><g><title>layout_of (1,638,887 samples, 0.69%)</title><rect x="91.1248%" y="165" width="0.6903%" height="15" fill="rgb(215,43,3)"/><text x="91.3748%" y="175.50"></text></g><g><title>layout_of (2,652,703 samples, 1.12%)</title><rect x="90.7331%" y="181" width="1.1174%" height="15" fill="rgb(238,154,13)"/><text x="90.9831%" y="191.50"></text></g><g><title>needs_drop_raw (774,837 samples, 0.33%)</title><rect x="94.7370%" y="165" width="0.3264%" height="15" fill="rgb(219,56,2)"/><text x="94.9870%" y="175.50"></text></g><g><title>is_copy_raw (673,715 samples, 0.28%)</title><rect x="94.7796%" y="149" width="0.2838%" height="15" fill="rgb(233,0,4)"/><text x="95.0296%" y="159.50"></text></g><g><title>evaluate_obligation (547,735 samples, 0.23%)</title><rect x="94.8327%" y="133" width="0.2307%" height="15" fill="rgb(235,30,7)"/><text x="95.0827%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,685,087 samples, 3.24%)</title><rect x="91.8505%" y="181" width="3.2372%" height="15" fill="rgb(250,79,13)"/><text x="92.1005%" y="191.50">mir..</text></g><g><title>optimized_mir (15,107,833 samples, 6.36%)</title><rect x="88.7361%" y="197" width="6.3639%" height="15" fill="rgb(211,146,34)"/><text x="88.9861%" y="207.50">optimize..</text></g><g><title>generate_crate_metadata (18,829,542 samples, 7.93%)</title><rect x="87.2577%" y="213" width="7.9315%" height="15" fill="rgb(228,22,38)"/><text x="87.5077%" y="223.50">generate_cr..</text></g><g><title>hir_lowering (3,800,830 samples, 1.60%)</title><rect x="95.1893%" y="213" width="1.6010%" height="15" fill="rgb(235,168,5)"/><text x="95.4393%" y="223.50"></text></g><g><title>finish_ongoing_codegen (780,058 samples, 0.33%)</title><rect x="96.8063%" y="197" width="0.3286%" height="15" fill="rgb(221,155,16)"/><text x="97.0563%" y="207.50"></text></g><g><title>link_crate (1,011,960 samples, 0.43%)</title><rect x="97.1349%" y="197" width="0.4263%" height="15" fill="rgb(215,215,53)"/><text x="97.3849%" y="207.50"></text></g><g><title>link_binary (992,730 samples, 0.42%)</title><rect x="97.1430%" y="181" width="0.4182%" height="15" fill="rgb(223,4,10)"/><text x="97.3930%" y="191.50"></text></g><g><title>link_rlib (716,818 samples, 0.30%)</title><rect x="97.2592%" y="165" width="0.3019%" height="15" fill="rgb(234,103,6)"/><text x="97.5092%" y="175.50"></text></g><g><title>link (1,838,599 samples, 0.77%)</title><rect x="96.7903%" y="213" width="0.7745%" height="15" fill="rgb(227,97,0)"/><text x="97.0403%" y="223.50"></text></g><g><title>parse_crate (4,017,553 samples, 1.69%)</title><rect x="97.5648%" y="213" width="1.6923%" height="15" fill="rgb(234,150,53)"/><text x="97.8148%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,073,322 samples, 0.45%)</title><rect x="99.3414%" y="213" width="0.4521%" height="15" fill="rgb(228,201,54)"/><text x="99.5914%" y="223.50"></text></g><g><title>all (237,400,707 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (237,400,707 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (409,745 samples, 0.17%)</title><rect x="99.8274%" y="213" width="0.1726%" height="15" fill="rgb(233,25,53)"/><text x="100.0774%" y="223.50"></text></g></svg></svg>