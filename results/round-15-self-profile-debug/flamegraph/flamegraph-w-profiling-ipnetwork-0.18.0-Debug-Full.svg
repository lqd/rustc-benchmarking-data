<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (120,439,249 samples, 13.13%)</title><rect x="0.0811%" y="165" width="13.1347%" height="15" fill="rgb(227,0,7)"/><text x="0.3311%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (1,046,764 samples, 0.11%)</title><rect x="16.8430%" y="37" width="0.1142%" height="15" fill="rgb(217,0,24)"/><text x="17.0930%" y="47.50"></text></g><g><title>needs_drop_raw (1,629,290 samples, 0.18%)</title><rect x="16.7803%" y="53" width="0.1777%" height="15" fill="rgb(221,193,54)"/><text x="17.0303%" y="63.50"></text></g><g><title>resolve_instance (1,327,274 samples, 0.14%)</title><rect x="16.9609%" y="53" width="0.1447%" height="15" fill="rgb(248,212,6)"/><text x="17.2109%" y="63.50"></text></g><g><title>thir_body (2,105,973 samples, 0.23%)</title><rect x="17.1110%" y="53" width="0.2297%" height="15" fill="rgb(208,68,35)"/><text x="17.3610%" y="63.50"></text></g><g><title>mir_const (14,372,747 samples, 1.57%)</title><rect x="15.7797%" y="101" width="1.5674%" height="15" fill="rgb(232,128,0)"/><text x="16.0297%" y="111.50"></text></g><g><title>unsafety_check_result (12,528,036 samples, 1.37%)</title><rect x="15.9808%" y="85" width="1.3663%" height="15" fill="rgb(207,160,47)"/><text x="16.2308%" y="95.50"></text></g><g><title>mir_built (11,198,762 samples, 1.22%)</title><rect x="16.1258%" y="69" width="1.2213%" height="15" fill="rgb(228,23,34)"/><text x="16.3758%" y="79.50"></text></g><g><title>mir_promoted (16,637,706 samples, 1.81%)</title><rect x="15.6069%" y="117" width="1.8144%" height="15" fill="rgb(218,30,26)"/><text x="15.8569%" y="127.50">m..</text></g><g><title>type_op_normalize_fn_sig (924,702 samples, 0.10%)</title><rect x="17.4788%" y="117" width="0.1008%" height="15" fill="rgb(220,122,19)"/><text x="17.7288%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,246,013 samples, 0.35%)</title><rect x="17.6503%" y="117" width="0.3540%" height="15" fill="rgb(250,228,42)"/><text x="17.9003%" y="127.50"></text></g><g><title>MIR_borrow_checking (43,452,270 samples, 4.74%)</title><rect x="13.2676%" y="149" width="4.7387%" height="15" fill="rgb(240,193,28)"/><text x="13.5176%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (43,217,979 samples, 4.71%)</title><rect x="13.2932%" y="133" width="4.7132%" height="15" fill="rgb(216,20,37)"/><text x="13.5432%" y="143.50">mir_b..</text></g><g><title>check_mod_attrs (978,669 samples, 0.11%)</title><rect x="18.0738%" y="133" width="0.1067%" height="15" fill="rgb(206,188,39)"/><text x="18.3238%" y="143.50"></text></g><g><title>misc_checking_1 (1,908,789 samples, 0.21%)</title><rect x="18.0712%" y="149" width="0.2082%" height="15" fill="rgb(217,207,13)"/><text x="18.3212%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (1,076,541 samples, 0.12%)</title><rect x="18.2796%" y="133" width="0.1174%" height="15" fill="rgb(231,73,38)"/><text x="18.5296%" y="143.50"></text></g><g><title>misc_checking_2 (2,386,405 samples, 0.26%)</title><rect x="18.2794%" y="149" width="0.2603%" height="15" fill="rgb(225,20,46)"/><text x="18.5294%" y="159.50"></text></g><g><title>match_checking (1,308,224 samples, 0.14%)</title><rect x="18.3970%" y="133" width="0.1427%" height="15" fill="rgb(210,31,41)"/><text x="18.6470%" y="143.50"></text></g><g><title>check_match (1,251,083 samples, 0.14%)</title><rect x="18.4032%" y="117" width="0.1364%" height="15" fill="rgb(221,200,47)"/><text x="18.6532%" y="127.50"></text></g><g><title>crate_lints (2,597,056 samples, 0.28%)</title><rect x="18.6622%" y="117" width="0.2832%" height="15" fill="rgb(226,26,5)"/><text x="18.9122%" y="127.50"></text></g><g><title>type_of (1,148,111 samples, 0.13%)</title><rect x="18.8202%" y="101" width="0.1252%" height="15" fill="rgb(249,33,26)"/><text x="19.0702%" y="111.50"></text></g><g><title>lint_checking (3,504,196 samples, 0.38%)</title><rect x="18.6620%" y="133" width="0.3822%" height="15" fill="rgb(235,183,28)"/><text x="18.9120%" y="143.50"></text></g><g><title>privacy_checking_modules (1,389,154 samples, 0.15%)</title><rect x="19.0985%" y="133" width="0.1515%" height="15" fill="rgb(221,5,38)"/><text x="19.3485%" y="143.50"></text></g><g><title>check_mod_privacy (1,385,124 samples, 0.15%)</title><rect x="19.0990%" y="117" width="0.1511%" height="15" fill="rgb(247,18,42)"/><text x="19.3490%" y="127.50"></text></g><g><title>misc_checking_3 (6,530,846 samples, 0.71%)</title><rect x="18.5397%" y="149" width="0.7122%" height="15" fill="rgb(241,131,45)"/><text x="18.7897%" y="159.50"></text></g><g><title>impl_parent (3,411,496 samples, 0.37%)</title><rect x="20.0262%" y="85" width="0.3720%" height="15" fill="rgb(249,31,29)"/><text x="20.2762%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,872,555 samples, 0.20%)</title><rect x="20.1941%" y="69" width="0.2042%" height="15" fill="rgb(225,111,53)"/><text x="20.4441%" y="79.50"></text></g><g><title>impl_trait_ref (6,716,274 samples, 0.73%)</title><rect x="20.3984%" y="85" width="0.7325%" height="15" fill="rgb(238,160,17)"/><text x="20.6484%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,360,293 samples, 0.58%)</title><rect x="20.5463%" y="69" width="0.5846%" height="15" fill="rgb(214,148,48)"/><text x="20.7963%" y="79.50"></text></g><g><title>trait_impls_of (1,199,051 samples, 0.13%)</title><rect x="21.1679%" y="85" width="0.1308%" height="15" fill="rgb(232,36,49)"/><text x="21.4179%" y="95.50"></text></g><g><title>coherent_trait (18,654,009 samples, 2.03%)</title><rect x="19.2661%" y="117" width="2.0343%" height="15" fill="rgb(209,103,24)"/><text x="19.5161%" y="127.50">c..</text></g><g><title>specialization_graph_of (18,059,462 samples, 1.97%)</title><rect x="19.3309%" y="101" width="1.9695%" height="15" fill="rgb(229,88,8)"/><text x="19.5809%" y="111.50">s..</text></g><g><title>coherence_checking (18,769,990 samples, 2.05%)</title><rect x="19.2630%" y="133" width="2.0470%" height="15" fill="rgb(213,181,19)"/><text x="19.5130%" y="143.50">c..</text></g><g><title>associated_items (1,185,273 samples, 0.13%)</title><rect x="24.9968%" y="85" width="0.1293%" height="15" fill="rgb(254,191,54)"/><text x="25.2468%" y="95.50"></text></g><g><title>specializes (1,536,703 samples, 0.17%)</title><rect x="25.6887%" y="69" width="0.1676%" height="15" fill="rgb(241,83,37)"/><text x="25.9387%" y="79.50"></text></g><g><title>param_env (1,065,560 samples, 0.12%)</title><rect x="25.7401%" y="53" width="0.1162%" height="15" fill="rgb(233,36,39)"/><text x="25.9901%" y="63.50"></text></g><g><title>evaluate_obligation (6,530,936 samples, 0.71%)</title><rect x="25.1983%" y="85" width="0.7122%" height="15" fill="rgb(226,3,54)"/><text x="25.4483%" y="95.50"></text></g><g><title>evaluate_obligation (1,144,853 samples, 0.12%)</title><rect x="26.5862%" y="69" width="0.1249%" height="15" fill="rgb(245,192,40)"/><text x="26.8362%" y="79.50"></text></g><g><title>typeck (6,430,584 samples, 0.70%)</title><rect x="26.1140%" y="85" width="0.7013%" height="15" fill="rgb(238,167,29)"/><text x="26.3640%" y="95.50"></text></g><g><title>item_bodies_checking (50,525,661 samples, 5.51%)</title><rect x="21.3159%" y="133" width="5.5101%" height="15" fill="rgb(232,182,51)"/><text x="21.5659%" y="143.50">item_bo..</text></g><g><title>typeck_item_bodies (50,522,691 samples, 5.51%)</title><rect x="21.3162%" y="117" width="5.5098%" height="15" fill="rgb(231,60,39)"/><text x="21.5662%" y="127.50">typeck_..</text></g><g><title>typeck (50,365,990 samples, 5.49%)</title><rect x="21.3333%" y="101" width="5.4927%" height="15" fill="rgb(208,69,12)"/><text x="21.5833%" y="111.50">typeck</text></g><g><title>item_types_checking (3,084,892 samples, 0.34%)</title><rect x="26.8260%" y="133" width="0.3364%" height="15" fill="rgb(235,93,37)"/><text x="27.0760%" y="143.50"></text></g><g><title>check_mod_item_types (3,078,932 samples, 0.34%)</title><rect x="26.8267%" y="117" width="0.3358%" height="15" fill="rgb(213,116,39)"/><text x="27.0767%" y="127.50"></text></g><g><title>generics_of (1,096,922 samples, 0.12%)</title><rect x="27.3058%" y="101" width="0.1196%" height="15" fill="rgb(222,207,29)"/><text x="27.5558%" y="111.50"></text></g><g><title>type_collecting (3,332,674 samples, 0.36%)</title><rect x="27.1627%" y="133" width="0.3634%" height="15" fill="rgb(206,96,30)"/><text x="27.4127%" y="143.50"></text></g><g><title>collect_mod_item_types (3,323,204 samples, 0.36%)</title><rect x="27.1638%" y="117" width="0.3624%" height="15" fill="rgb(218,138,4)"/><text x="27.4138%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,213,964 samples, 0.57%)</title><rect x="27.5645%" y="117" width="0.5686%" height="15" fill="rgb(250,191,14)"/><text x="27.8145%" y="127.50"></text></g><g><title>analysis (140,454,982 samples, 15.32%)</title><rect x="13.2158%" y="165" width="15.3175%" height="15" fill="rgb(239,60,40)"/><text x="13.4658%" y="175.50">analysis</text></g><g><title>type_check_crate (85,106,241 samples, 9.28%)</title><rect x="19.2519%" y="149" width="9.2814%" height="15" fill="rgb(206,27,48)"/><text x="19.5019%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (9,223,983 samples, 1.01%)</title><rect x="27.5273%" y="133" width="1.0059%" height="15" fill="rgb(225,35,8)"/><text x="27.7773%" y="143.50"></text></g><g><title>check_item_well_formed (3,668,724 samples, 0.40%)</title><rect x="28.1332%" y="117" width="0.4001%" height="15" fill="rgb(250,213,24)"/><text x="28.3832%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (1,003,507 samples, 0.11%)</title><rect x="36.4652%" y="133" width="0.1094%" height="15" fill="rgb(247,123,22)"/><text x="36.7152%" y="143.50"></text></g><g><title>const_caller_location (1,274,133 samples, 0.14%)</title><rect x="36.5747%" y="133" width="0.1390%" height="15" fill="rgb(231,138,38)"/><text x="36.8247%" y="143.50"></text></g><g><title>codegen_fn_attrs (969,917 samples, 0.11%)</title><rect x="37.1015%" y="117" width="0.1058%" height="15" fill="rgb(231,145,46)"/><text x="37.3515%" y="127.50"></text></g><g><title>layout_of (1,029,112 samples, 0.11%)</title><rect x="37.2233%" y="117" width="0.1122%" height="15" fill="rgb(251,118,11)"/><text x="37.4733%" y="127.50"></text></g><g><title>predicates_of (1,398,286 samples, 0.15%)</title><rect x="37.6484%" y="101" width="0.1525%" height="15" fill="rgb(217,147,25)"/><text x="37.8984%" y="111.50"></text></g><g><title>predicates_defined_on (1,012,873 samples, 0.11%)</title><rect x="37.6905%" y="85" width="0.1105%" height="15" fill="rgb(247,81,37)"/><text x="37.9405%" y="95.50"></text></g><g><title>param_env (4,279,210 samples, 0.47%)</title><rect x="37.3356%" y="117" width="0.4667%" height="15" fill="rgb(209,12,38)"/><text x="37.5856%" y="127.50"></text></g><g><title>normalize_projection_ty (1,718,865 samples, 0.19%)</title><rect x="37.8765%" y="101" width="0.1875%" height="15" fill="rgb(227,1,9)"/><text x="38.1265%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,421,663 samples, 0.26%)</title><rect x="37.8023%" y="117" width="0.2641%" height="15" fill="rgb(248,47,43)"/><text x="38.0523%" y="127.50"></text></g><g><title>fn_abi_of_instance (12,407,033 samples, 1.35%)</title><rect x="36.7172%" y="133" width="1.3531%" height="15" fill="rgb(221,10,30)"/><text x="36.9672%" y="143.50"></text></g><g><title>layout_of (1,456,217 samples, 0.16%)</title><rect x="38.1375%" y="133" width="0.1588%" height="15" fill="rgb(210,229,1)"/><text x="38.3875%" y="143.50"></text></g><g><title>symbol_name (1,044,426 samples, 0.11%)</title><rect x="38.2983%" y="133" width="0.1139%" height="15" fill="rgb(222,148,37)"/><text x="38.5483%" y="143.50"></text></g><g><title>codegen_module (87,891,439 samples, 9.59%)</title><rect x="28.8489%" y="149" width="9.5851%" height="15" fill="rgb(234,67,33)"/><text x="29.0989%" y="159.50">codegen_module</text></g><g><title>codegen_crate (90,851,989 samples, 9.91%)</title><rect x="28.5346%" y="165" width="9.9080%" height="15" fill="rgb(247,98,35)"/><text x="28.7846%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (412,027,082 samples, 44.93%)</title><rect x="38.4683%" y="149" width="44.9341%" height="15" fill="rgb(247,138,52)"/><text x="38.7183%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (395,141,789 samples, 43.09%)</title><rect x="40.3097%" y="133" width="43.0927%" height="15" fill="rgb(213,79,30)"/><text x="40.5597%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (433,108,343 samples, 47.23%)</title><rect x="38.4425%" y="165" width="47.2332%" height="15" fill="rgb(246,177,23)"/><text x="38.6925%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (20,845,429 samples, 2.27%)</title><rect x="83.4024%" y="149" width="2.2733%" height="15" fill="rgb(230,62,27)"/><text x="83.6524%" y="159.50">L..</text></g><g><title>metadata_register_crate (2,652,596 samples, 0.29%)</title><rect x="89.1441%" y="117" width="0.2893%" height="15" fill="rgb(216,154,8)"/><text x="89.3941%" y="127.50"></text></g><g><title>metadata_register_crate (975,811 samples, 0.11%)</title><rect x="89.3270%" y="101" width="0.1064%" height="15" fill="rgb(244,35,45)"/><text x="89.5770%" y="111.50"></text></g><g><title>macro_expand_crate (34,147,975 samples, 3.72%)</title><rect x="85.7723%" y="149" width="3.7241%" height="15" fill="rgb(251,115,12)"/><text x="86.0223%" y="159.50">macr..</text></g><g><title>expand_crate (34,130,665 samples, 3.72%)</title><rect x="85.7742%" y="133" width="3.7222%" height="15" fill="rgb(240,54,50)"/><text x="86.0242%" y="143.50">expa..</text></g><g><title>late_resolve_crate (7,062,761 samples, 0.77%)</title><rect x="89.5884%" y="133" width="0.7702%" height="15" fill="rgb(233,84,52)"/><text x="89.8384%" y="143.50"></text></g><g><title>configure_and_expand (43,240,728 samples, 4.72%)</title><rect x="85.6757%" y="165" width="4.7157%" height="15" fill="rgb(207,117,47)"/><text x="85.9257%" y="175.50">confi..</text></g><g><title>resolve_crate (7,983,621 samples, 0.87%)</title><rect x="89.5207%" y="149" width="0.8707%" height="15" fill="rgb(249,43,39)"/><text x="89.7707%" y="159.50"></text></g><g><title>free_global_ctxt (7,004,361 samples, 0.76%)</title><rect x="90.4933%" y="165" width="0.7639%" height="15" fill="rgb(209,38,44)"/><text x="90.7433%" y="175.50"></text></g><g><title>item_attrs (1,200,194 samples, 0.13%)</title><rect x="91.8230%" y="69" width="0.1309%" height="15" fill="rgb(236,212,23)"/><text x="92.0730%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,145,872 samples, 0.12%)</title><rect x="91.8289%" y="53" width="0.1250%" height="15" fill="rgb(242,79,21)"/><text x="92.0789%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,020,303 samples, 0.22%)</title><rect x="91.7843%" y="85" width="0.2203%" height="15" fill="rgb(211,96,35)"/><text x="92.0343%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,482,266 samples, 0.27%)</title><rect x="92.6090%" y="69" width="0.2707%" height="15" fill="rgb(253,215,40)"/><text x="92.8590%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,689,272 samples, 0.51%)</title><rect x="92.8797%" y="69" width="0.5114%" height="15" fill="rgb(211,81,21)"/><text x="93.1297%" y="79.50"></text></g><g><title>optimized_mir (12,470,732 samples, 1.36%)</title><rect x="92.0881%" y="85" width="1.3600%" height="15" fill="rgb(208,190,38)"/><text x="92.3381%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,185,501 samples, 0.46%)</title><rect x="93.5867%" y="69" width="0.4565%" height="15" fill="rgb(235,213,38)"/><text x="93.8367%" y="79.50"></text></g><g><title>specialization_graph_of (921,388 samples, 0.10%)</title><rect x="94.1374%" y="69" width="0.1005%" height="15" fill="rgb(237,122,38)"/><text x="94.3874%" y="79.50"></text></g><g><title>resolve_instance (7,603,751 samples, 0.83%)</title><rect x="93.4481%" y="85" width="0.8292%" height="15" fill="rgb(244,218,35)"/><text x="93.6981%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (27,249,266 samples, 2.97%)</title><rect x="91.5025%" y="101" width="2.9717%" height="15" fill="rgb(240,68,47)"/><text x="91.7525%" y="111.50">mon..</text></g><g><title>monomorphization_collector (27,370,877 samples, 2.98%)</title><rect x="91.5022%" y="117" width="2.9850%" height="15" fill="rgb(210,16,53)"/><text x="91.7522%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,327,223 samples, 0.25%)</title><rect x="94.4884%" y="101" width="0.2538%" height="15" fill="rgb(235,124,12)"/><text x="94.7384%" y="111.50"></text></g><g><title>symbol_name (2,125,442 samples, 0.23%)</title><rect x="94.5104%" y="85" width="0.2318%" height="15" fill="rgb(224,169,11)"/><text x="94.7604%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (30,847,402 samples, 3.36%)</title><rect x="91.4982%" y="133" width="3.3641%" height="15" fill="rgb(250,166,2)"/><text x="91.7482%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,439,754 samples, 0.38%)</title><rect x="94.4872%" y="117" width="0.3751%" height="15" fill="rgb(242,216,29)"/><text x="94.7372%" y="127.50"></text></g><g><title>cgu_partitioning (1,101,171 samples, 0.12%)</title><rect x="94.7422%" y="101" width="0.1201%" height="15" fill="rgb(230,116,27)"/><text x="94.9922%" y="111.50"></text></g><g><title>exported_symbols (31,128,504 samples, 3.39%)</title><rect x="91.4879%" y="149" width="3.3948%" height="15" fill="rgb(228,99,48)"/><text x="91.7379%" y="159.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,190,275 samples, 0.35%)</title><rect x="95.2150%" y="133" width="0.3479%" height="15" fill="rgb(253,11,6)"/><text x="95.4650%" y="143.50"></text></g><g><title>optimized_mir (6,177,822 samples, 0.67%)</title><rect x="94.8926%" y="149" width="0.6737%" height="15" fill="rgb(247,143,39)"/><text x="95.1426%" y="159.50"></text></g><g><title>generate_crate_metadata (39,585,581 samples, 4.32%)</title><rect x="91.2571%" y="165" width="4.3171%" height="15" fill="rgb(236,97,10)"/><text x="91.5071%" y="175.50">gener..</text></g><g><title>hir_lowering (5,653,417 samples, 0.62%)</title><rect x="95.5742%" y="165" width="0.6165%" height="15" fill="rgb(233,208,19)"/><text x="95.8242%" y="175.50"></text></g><g><title>finish_ongoing_codegen (27,172,165 samples, 2.96%)</title><rect x="96.1924%" y="149" width="2.9633%" height="15" fill="rgb(216,164,2)"/><text x="96.4424%" y="159.50">fin..</text></g><g><title>link_crate (2,217,323 samples, 0.24%)</title><rect x="99.1557%" y="149" width="0.2418%" height="15" fill="rgb(220,129,5)"/><text x="99.4057%" y="159.50"></text></g><g><title>link_binary (2,184,992 samples, 0.24%)</title><rect x="99.1592%" y="133" width="0.2383%" height="15" fill="rgb(242,17,10)"/><text x="99.4092%" y="143.50"></text></g><g><title>link_rlib (1,609,617 samples, 0.18%)</title><rect x="99.2219%" y="117" width="0.1755%" height="15" fill="rgb(242,107,0)"/><text x="99.4719%" y="127.50"></text></g><g><title>link (29,416,268 samples, 3.21%)</title><rect x="96.1907%" y="165" width="3.2080%" height="15" fill="rgb(251,28,31)"/><text x="96.4407%" y="175.50">link</text></g><g><title>parse_crate (2,931,400 samples, 0.32%)</title><rect x="99.3988%" y="165" width="0.3197%" height="15" fill="rgb(233,223,10)"/><text x="99.6488%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,786,918 samples, 0.19%)</title><rect x="99.7513%" y="165" width="0.1949%" height="15" fill="rgb(215,21,27)"/><text x="100.0013%" y="175.50"></text></g><g><title>all (916,957,591 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (916,957,591 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>