<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (46,852,480 samples, 8.87%)</title><rect x="0.1794%" y="197" width="8.8746%" height="15" fill="rgb(227,0,7)"/><text x="0.4294%" y="207.50">LLVM_passes</text></g><g><title>param_env (600,994 samples, 0.11%)</title><rect x="14.8060%" y="117" width="0.1138%" height="15" fill="rgb(217,0,24)"/><text x="15.0560%" y="127.50"></text></g><g><title>codegen_fn_attrs (960,900 samples, 0.18%)</title><rect x="15.1185%" y="101" width="0.1820%" height="15" fill="rgb(221,193,54)"/><text x="15.3685%" y="111.50"></text></g><g><title>is_copy_raw (1,833,120 samples, 0.35%)</title><rect x="16.6009%" y="69" width="0.3472%" height="15" fill="rgb(248,212,6)"/><text x="16.8509%" y="79.50"></text></g><g><title>evaluate_obligation (1,472,407 samples, 0.28%)</title><rect x="16.6692%" y="53" width="0.2789%" height="15" fill="rgb(208,68,35)"/><text x="16.9192%" y="63.50"></text></g><g><title>needs_drop_raw (2,407,346 samples, 0.46%)</title><rect x="16.4963%" y="85" width="0.4560%" height="15" fill="rgb(232,128,0)"/><text x="16.7463%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (662,509 samples, 0.13%)</title><rect x="17.0606%" y="69" width="0.1255%" height="15" fill="rgb(207,160,47)"/><text x="17.3106%" y="79.50"></text></g><g><title>specialization_graph_of (856,309 samples, 0.16%)</title><rect x="17.2029%" y="69" width="0.1622%" height="15" fill="rgb(228,23,34)"/><text x="17.4529%" y="79.50"></text></g><g><title>resolve_instance (2,352,492 samples, 0.45%)</title><rect x="16.9575%" y="85" width="0.4456%" height="15" fill="rgb(218,30,26)"/><text x="17.2075%" y="95.50"></text></g><g><title>thir_body (2,225,260 samples, 0.42%)</title><rect x="17.4175%" y="85" width="0.4215%" height="15" fill="rgb(220,122,19)"/><text x="17.6675%" y="95.50"></text></g><g><title>mir_const (17,947,351 samples, 3.40%)</title><rect x="14.4658%" y="133" width="3.3995%" height="15" fill="rgb(250,228,42)"/><text x="14.7158%" y="143.50">mir..</text></g><g><title>unsafety_check_result (15,550,577 samples, 2.95%)</title><rect x="14.9198%" y="117" width="2.9455%" height="15" fill="rgb(240,193,28)"/><text x="15.1698%" y="127.50">un..</text></g><g><title>mir_built (13,540,544 samples, 2.56%)</title><rect x="15.3005%" y="101" width="2.5648%" height="15" fill="rgb(216,20,37)"/><text x="15.5505%" y="111.50">mi..</text></g><g><title>mir_const_qualif (847,117 samples, 0.16%)</title><rect x="17.8653%" y="133" width="0.1605%" height="15" fill="rgb(206,188,39)"/><text x="18.1153%" y="143.50"></text></g><g><title>mir_promoted (20,495,800 samples, 3.88%)</title><rect x="14.1437%" y="149" width="3.8822%" height="15" fill="rgb(217,207,13)"/><text x="14.3937%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (1,927,001 samples, 0.37%)</title><rect x="18.0261%" y="149" width="0.3650%" height="15" fill="rgb(231,73,38)"/><text x="18.2761%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,066,737 samples, 0.20%)</title><rect x="18.3911%" y="149" width="0.2021%" height="15" fill="rgb(225,20,46)"/><text x="18.6411%" y="159.50"></text></g><g><title>type_op_normalize_ty (779,147 samples, 0.15%)</title><rect x="18.6224%" y="149" width="0.1476%" height="15" fill="rgb(210,31,41)"/><text x="18.8724%" y="159.50"></text></g><g><title>type_op_prove_predicate (6,031,724 samples, 1.14%)</title><rect x="18.7700%" y="149" width="1.1425%" height="15" fill="rgb(221,200,47)"/><text x="19.0200%" y="159.50"></text></g><g><title>MIR_borrow_checking (56,749,267 samples, 10.75%)</title><rect x="9.1664%" y="181" width="10.7492%" height="15" fill="rgb(226,26,5)"/><text x="9.4164%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (56,446,729 samples, 10.69%)</title><rect x="9.2237%" y="165" width="10.6919%" height="15" fill="rgb(249,33,26)"/><text x="9.4737%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (763,649 samples, 0.14%)</title><rect x="20.2051%" y="149" width="0.1446%" height="15" fill="rgb(235,183,28)"/><text x="20.4551%" y="159.50"></text></g><g><title>check_mod_attrs (1,282,074 samples, 0.24%)</title><rect x="20.1070%" y="165" width="0.2428%" height="15" fill="rgb(221,5,38)"/><text x="20.3570%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (889,586 samples, 0.17%)</title><rect x="20.4399%" y="165" width="0.1685%" height="15" fill="rgb(247,18,42)"/><text x="20.6899%" y="175.50"></text></g><g><title>misc_checking_1 (2,830,568 samples, 0.54%)</title><rect x="20.0973%" y="181" width="0.5362%" height="15" fill="rgb(241,131,45)"/><text x="20.3473%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,050,581 samples, 0.20%)</title><rect x="20.6338%" y="165" width="0.1990%" height="15" fill="rgb(249,31,29)"/><text x="20.8838%" y="175.50"></text></g><g><title>check_mod_liveness (835,769 samples, 0.16%)</title><rect x="20.6745%" y="149" width="0.1583%" height="15" fill="rgb(225,111,53)"/><text x="20.9245%" y="159.50"></text></g><g><title>misc_checking_2 (2,691,607 samples, 0.51%)</title><rect x="20.6334%" y="181" width="0.5098%" height="15" fill="rgb(238,160,17)"/><text x="20.8834%" y="191.50"></text></g><g><title>match_checking (1,638,996 samples, 0.31%)</title><rect x="20.8328%" y="165" width="0.3105%" height="15" fill="rgb(214,148,48)"/><text x="21.0828%" y="175.50"></text></g><g><title>check_match (1,559,603 samples, 0.30%)</title><rect x="20.8478%" y="149" width="0.2954%" height="15" fill="rgb(232,36,49)"/><text x="21.0978%" y="159.50"></text></g><g><title>check_private_in_public (598,226 samples, 0.11%)</title><rect x="21.1452%" y="165" width="0.1133%" height="15" fill="rgb(209,103,24)"/><text x="21.3952%" y="175.50"></text></g><g><title>death_checking (1,262,273 samples, 0.24%)</title><rect x="21.2585%" y="165" width="0.2391%" height="15" fill="rgb(229,88,8)"/><text x="21.5085%" y="175.50"></text></g><g><title>param_env (934,128 samples, 0.18%)</title><rect x="21.9119%" y="133" width="0.1769%" height="15" fill="rgb(213,181,19)"/><text x="22.1619%" y="143.50"></text></g><g><title>crate_lints (4,327,034 samples, 0.82%)</title><rect x="21.4980%" y="149" width="0.8196%" height="15" fill="rgb(254,191,54)"/><text x="21.7480%" y="159.50"></text></g><g><title>type_of (1,194,513 samples, 0.23%)</title><rect x="22.0913%" y="133" width="0.2263%" height="15" fill="rgb(241,83,37)"/><text x="22.3413%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (924,118 samples, 0.18%)</title><rect x="22.1425%" y="117" width="0.1750%" height="15" fill="rgb(233,36,39)"/><text x="22.3925%" y="127.50"></text></g><g><title>lint_checking (5,205,233 samples, 0.99%)</title><rect x="21.4976%" y="165" width="0.9860%" height="15" fill="rgb(226,3,54)"/><text x="21.7476%" y="175.50"></text></g><g><title>module_lints (876,399 samples, 0.17%)</title><rect x="22.3176%" y="149" width="0.1660%" height="15" fill="rgb(245,192,40)"/><text x="22.5676%" y="159.50"></text></g><g><title>lint_mod (861,159 samples, 0.16%)</title><rect x="22.3205%" y="133" width="0.1631%" height="15" fill="rgb(238,167,29)"/><text x="22.5705%" y="143.50"></text></g><g><title>privacy_access_levels (1,174,361 samples, 0.22%)</title><rect x="22.4836%" y="165" width="0.2224%" height="15" fill="rgb(232,182,51)"/><text x="22.7336%" y="175.50"></text></g><g><title>privacy_checking_modules (2,146,301 samples, 0.41%)</title><rect x="22.7060%" y="165" width="0.4065%" height="15" fill="rgb(231,60,39)"/><text x="22.9560%" y="175.50"></text></g><g><title>check_mod_privacy (2,134,461 samples, 0.40%)</title><rect x="22.7083%" y="149" width="0.4043%" height="15" fill="rgb(208,69,12)"/><text x="22.9583%" y="159.50"></text></g><g><title>misc_checking_3 (10,428,944 samples, 1.98%)</title><rect x="21.1433%" y="181" width="1.9754%" height="15" fill="rgb(235,93,37)"/><text x="21.3933%" y="191.50">m..</text></g><g><title>impl_parent (3,534,285 samples, 0.67%)</title><rect x="24.3800%" y="117" width="0.6694%" height="15" fill="rgb(213,116,39)"/><text x="24.6300%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,937,782 samples, 0.37%)</title><rect x="24.6824%" y="101" width="0.3670%" height="15" fill="rgb(222,207,29)"/><text x="24.9324%" y="111.50"></text></g><g><title>impl_trait_ref (6,500,852 samples, 1.23%)</title><rect x="25.0499%" y="117" width="1.2314%" height="15" fill="rgb(206,96,30)"/><text x="25.2999%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,128,697 samples, 0.97%)</title><rect x="25.3098%" y="101" width="0.9715%" height="15" fill="rgb(218,138,4)"/><text x="25.5598%" y="111.50"></text></g><g><title>trait_impls_of (1,087,513 samples, 0.21%)</title><rect x="26.3421%" y="117" width="0.2060%" height="15" fill="rgb(250,191,14)"/><text x="26.5921%" y="127.50"></text></g><g><title>coherent_trait (21,267,023 samples, 4.03%)</title><rect x="23.1578%" y="149" width="4.0283%" height="15" fill="rgb(239,60,40)"/><text x="23.4078%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (20,653,287 samples, 3.91%)</title><rect x="23.2741%" y="133" width="3.9121%" height="15" fill="rgb(206,27,48)"/><text x="23.5241%" y="143.50">spec..</text></g><g><title>visible_parent_map (3,351,053 samples, 0.63%)</title><rect x="26.5514%" y="117" width="0.6347%" height="15" fill="rgb(225,35,8)"/><text x="26.8014%" y="127.50"></text></g><g><title>module_children (3,031,220 samples, 0.57%)</title><rect x="26.6120%" y="101" width="0.5742%" height="15" fill="rgb(250,213,24)"/><text x="26.8620%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (2,965,950 samples, 0.56%)</title><rect x="26.6243%" y="85" width="0.5618%" height="15" fill="rgb(247,123,22)"/><text x="26.8743%" y="95.50"></text></g><g><title>coherence_checking (21,457,764 samples, 4.06%)</title><rect x="23.1519%" y="165" width="4.0644%" height="15" fill="rgb(231,138,38)"/><text x="23.4019%" y="175.50">cohe..</text></g><g><title>associated_item (804,918 samples, 0.15%)</title><rect x="34.8410%" y="101" width="0.1525%" height="15" fill="rgb(231,145,46)"/><text x="35.0910%" y="111.50"></text></g><g><title>associated_items (1,079,760 samples, 0.20%)</title><rect x="34.7997%" y="117" width="0.2045%" height="15" fill="rgb(251,118,11)"/><text x="35.0497%" y="127.50"></text></g><g><title>dropck_outlives (1,214,953 samples, 0.23%)</title><rect x="35.0335%" y="117" width="0.2301%" height="15" fill="rgb(217,147,25)"/><text x="35.2835%" y="127.50"></text></g><g><title>adt_sized_constraint (803,588 samples, 0.15%)</title><rect x="35.7834%" y="101" width="0.1522%" height="15" fill="rgb(247,81,37)"/><text x="36.0334%" y="111.50"></text></g><g><title>adt_def (795,908 samples, 0.15%)</title><rect x="35.7849%" y="85" width="0.1508%" height="15" fill="rgb(209,12,38)"/><text x="36.0349%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (794,728 samples, 0.15%)</title><rect x="35.7851%" y="69" width="0.1505%" height="15" fill="rgb(227,1,9)"/><text x="36.0351%" y="79.50"></text></g><g><title>item_attrs (782,308 samples, 0.15%)</title><rect x="35.7875%" y="53" width="0.1482%" height="15" fill="rgb(248,47,43)"/><text x="36.0375%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (780,748 samples, 0.15%)</title><rect x="35.7878%" y="37" width="0.1479%" height="15" fill="rgb(221,10,30)"/><text x="36.0378%" y="47.50"></text></g><g><title>mir_for_ctfe (891,774 samples, 0.17%)</title><rect x="36.0962%" y="53" width="0.1689%" height="15" fill="rgb(210,229,1)"/><text x="36.3462%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (881,964 samples, 0.17%)</title><rect x="36.0980%" y="37" width="0.1671%" height="15" fill="rgb(222,148,37)"/><text x="36.3480%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,767,236 samples, 0.33%)</title><rect x="35.9362%" y="101" width="0.3347%" height="15" fill="rgb(234,67,33)"/><text x="36.1862%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,737,556 samples, 0.33%)</title><rect x="35.9419%" y="85" width="0.3291%" height="15" fill="rgb(247,98,35)"/><text x="36.1919%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,693,045 samples, 0.32%)</title><rect x="35.9503%" y="69" width="0.3207%" height="15" fill="rgb(247,138,52)"/><text x="36.2003%" y="79.50"></text></g><g><title>evaluate_obligation (6,250,917 samples, 1.18%)</title><rect x="35.2636%" y="117" width="1.1840%" height="15" fill="rgb(213,79,30)"/><text x="35.5136%" y="127.50"></text></g><g><title>evaluate_obligation (557,788 samples, 0.11%)</title><rect x="36.7652%" y="101" width="0.1057%" height="15" fill="rgb(246,177,23)"/><text x="37.0152%" y="111.50"></text></g><g><title>method_autoderef_steps (1,177,974 samples, 0.22%)</title><rect x="36.6536%" y="117" width="0.2231%" height="15" fill="rgb(230,62,27)"/><text x="36.9036%" y="127.50"></text></g><g><title>evaluate_obligation (1,034,780 samples, 0.20%)</title><rect x="38.3717%" y="101" width="0.1960%" height="15" fill="rgb(216,154,8)"/><text x="38.6217%" y="111.50"></text></g><g><title>typeck (9,068,341 samples, 1.72%)</title><rect x="37.0354%" y="117" width="1.7177%" height="15" fill="rgb(244,35,45)"/><text x="37.2854%" y="127.50"></text></g><g><title>item_bodies_checking (60,896,270 samples, 11.53%)</title><rect x="27.2369%" y="165" width="11.5347%" height="15" fill="rgb(251,115,12)"/><text x="27.4869%" y="175.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (60,892,670 samples, 11.53%)</title><rect x="27.2375%" y="149" width="11.5340%" height="15" fill="rgb(240,54,50)"/><text x="27.4875%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (60,676,188 samples, 11.49%)</title><rect x="27.2785%" y="133" width="11.4930%" height="15" fill="rgb(233,84,52)"/><text x="27.5285%" y="143.50">typeck</text></g><g><title>item_types_checking (5,549,586 samples, 1.05%)</title><rect x="38.7716%" y="165" width="1.0512%" height="15" fill="rgb(207,117,47)"/><text x="39.0216%" y="175.50"></text></g><g><title>check_mod_item_types (5,534,236 samples, 1.05%)</title><rect x="38.7745%" y="149" width="1.0483%" height="15" fill="rgb(249,43,39)"/><text x="39.0245%" y="159.50"></text></g><g><title>typeck (871,529 samples, 0.17%)</title><rect x="39.6577%" y="133" width="0.1651%" height="15" fill="rgb(209,38,44)"/><text x="39.9077%" y="143.50"></text></g><g><title>fn_sig (685,349 samples, 0.13%)</title><rect x="39.9685%" y="133" width="0.1298%" height="15" fill="rgb(236,212,23)"/><text x="40.2185%" y="143.50"></text></g><g><title>generics_of (973,090 samples, 0.18%)</title><rect x="40.0983%" y="133" width="0.1843%" height="15" fill="rgb(242,79,21)"/><text x="40.3483%" y="143.50"></text></g><g><title>late_bound_vars_map (736,027 samples, 0.14%)</title><rect x="40.5698%" y="85" width="0.1394%" height="15" fill="rgb(211,96,35)"/><text x="40.8198%" y="95.50"></text></g><g><title>resolve_lifetimes (680,536 samples, 0.13%)</title><rect x="40.5803%" y="69" width="0.1289%" height="15" fill="rgb(253,215,40)"/><text x="40.8303%" y="79.50"></text></g><g><title>explicit_predicates_of (1,835,738 samples, 0.35%)</title><rect x="40.4011%" y="101" width="0.3477%" height="15" fill="rgb(211,81,21)"/><text x="40.6511%" y="111.50"></text></g><g><title>predicates_of (3,068,161 samples, 0.58%)</title><rect x="40.3219%" y="133" width="0.5812%" height="15" fill="rgb(208,190,38)"/><text x="40.5719%" y="143.50"></text></g><g><title>predicates_defined_on (2,898,211 samples, 0.55%)</title><rect x="40.3541%" y="117" width="0.5490%" height="15" fill="rgb(235,213,38)"/><text x="40.6041%" y="127.50"></text></g><g><title>inferred_outlives_of (814,359 samples, 0.15%)</title><rect x="40.7488%" y="101" width="0.1543%" height="15" fill="rgb(237,122,38)"/><text x="40.9988%" y="111.50"></text></g><g><title>inferred_outlives_crate (756,577 samples, 0.14%)</title><rect x="40.7597%" y="85" width="0.1433%" height="15" fill="rgb(244,218,35)"/><text x="41.0097%" y="95.50"></text></g><g><title>type_of (534,415 samples, 0.10%)</title><rect x="40.8018%" y="69" width="0.1012%" height="15" fill="rgb(240,68,47)"/><text x="41.0518%" y="79.50"></text></g><g><title>type_collecting (6,098,751 samples, 1.16%)</title><rect x="39.8242%" y="165" width="1.1552%" height="15" fill="rgb(210,16,53)"/><text x="40.0742%" y="175.50"></text></g><g><title>collect_mod_item_types (6,078,911 samples, 1.15%)</title><rect x="39.8280%" y="149" width="1.1514%" height="15" fill="rgb(235,124,12)"/><text x="40.0780%" y="159.50"></text></g><g><title>evaluate_obligation (1,486,344 samples, 0.28%)</title><rect x="42.3177%" y="133" width="0.2815%" height="15" fill="rgb(224,169,11)"/><text x="42.5677%" y="143.50"></text></g><g><title>implied_outlives_bounds (938,232 samples, 0.18%)</title><rect x="42.6053%" y="133" width="0.1777%" height="15" fill="rgb(250,166,2)"/><text x="42.8553%" y="143.50"></text></g><g><title>param_env (1,140,258 samples, 0.22%)</title><rect x="42.7830%" y="133" width="0.2160%" height="15" fill="rgb(242,216,29)"/><text x="43.0330%" y="143.50"></text></g><g><title>region_scope_tree (856,160 samples, 0.16%)</title><rect x="43.0091%" y="133" width="0.1622%" height="15" fill="rgb(230,116,27)"/><text x="43.2591%" y="143.50"></text></g><g><title>check_impl_item_well_formed (10,980,824 samples, 2.08%)</title><rect x="41.0966%" y="149" width="2.0799%" height="15" fill="rgb(228,99,48)"/><text x="41.3466%" y="159.50">c..</text></g><g><title>eval_to_const_value_raw (1,217,963 samples, 0.23%)</title><rect x="44.4664%" y="133" width="0.2307%" height="15" fill="rgb(253,11,6)"/><text x="44.7164%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,201,982 samples, 0.23%)</title><rect x="44.4695%" y="117" width="0.2277%" height="15" fill="rgb(247,143,39)"/><text x="44.7195%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,199,882 samples, 0.23%)</title><rect x="44.4699%" y="101" width="0.2273%" height="15" fill="rgb(236,97,10)"/><text x="44.7199%" y="111.50"></text></g><g><title>param_env (1,048,709 samples, 0.20%)</title><rect x="44.8970%" y="133" width="0.1986%" height="15" fill="rgb(233,208,19)"/><text x="45.1470%" y="143.50"></text></g><g><title>check_item_well_formed (10,747,102 samples, 2.04%)</title><rect x="43.1765%" y="149" width="2.0357%" height="15" fill="rgb(216,164,2)"/><text x="43.4265%" y="159.50">c..</text></g><g><title>analysis (192,014,292 samples, 36.37%)</title><rect x="9.0540%" y="197" width="36.3705%" height="15" fill="rgb(220,129,5)"/><text x="9.3040%" y="207.50">analysis</text></g><g><title>type_check_crate (117,761,370 samples, 22.31%)</title><rect x="23.1187%" y="181" width="22.3058%" height="15" fill="rgb(242,17,10)"/><text x="23.3687%" y="191.50">type_check_crate</text></g><g><title>wf_checking (23,454,615 samples, 4.44%)</title><rect x="40.9818%" y="165" width="4.4427%" height="15" fill="rgb(242,107,0)"/><text x="41.2318%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,120,882 samples, 0.21%)</title><rect x="45.2122%" y="149" width="0.2123%" height="15" fill="rgb(251,28,31)"/><text x="45.4622%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (639,185 samples, 0.12%)</title><rect x="52.5265%" y="165" width="0.1211%" height="15" fill="rgb(233,223,10)"/><text x="52.7765%" y="175.50"></text></g><g><title>codegen_fn_attrs (536,976 samples, 0.10%)</title><rect x="53.1284%" y="149" width="0.1017%" height="15" fill="rgb(215,21,27)"/><text x="53.3784%" y="159.50"></text></g><g><title>layout_of (1,671,537 samples, 0.32%)</title><rect x="53.2449%" y="149" width="0.3166%" height="15" fill="rgb(232,23,21)"/><text x="53.4949%" y="159.50"></text></g><g><title>param_env (2,616,678 samples, 0.50%)</title><rect x="53.5616%" y="149" width="0.4956%" height="15" fill="rgb(244,5,23)"/><text x="53.8116%" y="159.50"></text></g><g><title>predicates_of (896,476 samples, 0.17%)</title><rect x="53.8874%" y="133" width="0.1698%" height="15" fill="rgb(226,81,46)"/><text x="54.1374%" y="143.50"></text></g><g><title>predicates_defined_on (651,384 samples, 0.12%)</title><rect x="53.9338%" y="117" width="0.1234%" height="15" fill="rgb(247,70,30)"/><text x="54.1838%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (611,076 samples, 0.12%)</title><rect x="54.0572%" y="149" width="0.1157%" height="15" fill="rgb(212,68,19)"/><text x="54.3072%" y="159.50"></text></g><g><title>fn_abi_of_instance (7,559,620 samples, 1.43%)</title><rect x="52.7453%" y="165" width="1.4319%" height="15" fill="rgb(240,187,13)"/><text x="52.9953%" y="175.50"></text></g><g><title>layout_of (743,350 samples, 0.14%)</title><rect x="54.2574%" y="165" width="0.1408%" height="15" fill="rgb(223,113,26)"/><text x="54.5074%" y="175.50"></text></g><g><title>codegen_module (44,895,970 samples, 8.50%)</title><rect x="45.9794%" y="181" width="8.5040%" height="15" fill="rgb(206,192,2)"/><text x="46.2294%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (47,896,590 samples, 9.07%)</title><rect x="45.4268%" y="197" width="9.0724%" height="15" fill="rgb(241,108,4)"/><text x="45.6768%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (131,080,342 samples, 24.83%)</title><rect x="54.5340%" y="181" width="24.8287%" height="15" fill="rgb(247,173,49)"/><text x="54.7840%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (123,640,190 samples, 23.42%)</title><rect x="55.9433%" y="165" width="23.4194%" height="15" fill="rgb(224,114,35)"/><text x="56.1933%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (140,239,544 samples, 26.56%)</title><rect x="54.4992%" y="197" width="26.5636%" height="15" fill="rgb(245,159,27)"/><text x="54.7492%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,975,310 samples, 1.70%)</title><rect x="79.3627%" y="181" width="1.7001%" height="15" fill="rgb(245,172,44)"/><text x="79.6127%" y="191.50"></text></g><g><title>metadata_load_macro (564,653 samples, 0.11%)</title><rect x="87.2422%" y="149" width="0.1070%" height="15" fill="rgb(236,23,11)"/><text x="87.4922%" y="159.50"></text></g><g><title>metadata_register_crate (2,008,290 samples, 0.38%)</title><rect x="87.3492%" y="149" width="0.3804%" height="15" fill="rgb(205,117,38)"/><text x="87.5992%" y="159.50"></text></g><g><title>metadata_register_crate (728,248 samples, 0.14%)</title><rect x="87.5917%" y="133" width="0.1379%" height="15" fill="rgb(237,72,25)"/><text x="87.8417%" y="143.50"></text></g><g><title>macro_expand_crate (35,254,703 samples, 6.68%)</title><rect x="81.2093%" y="181" width="6.6778%" height="15" fill="rgb(244,70,9)"/><text x="81.4593%" y="191.50">macro_exp..</text></g><g><title>expand_crate (35,233,013 samples, 6.67%)</title><rect x="81.2134%" y="165" width="6.6737%" height="15" fill="rgb(217,125,39)"/><text x="81.4634%" y="175.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (831,618 samples, 0.16%)</title><rect x="87.7296%" y="149" width="0.1575%" height="15" fill="rgb(235,36,10)"/><text x="87.9796%" y="159.50"></text></g><g><title>late_resolve_crate (3,482,715 samples, 0.66%)</title><rect x="88.0367%" y="165" width="0.6597%" height="15" fill="rgb(251,123,47)"/><text x="88.2867%" y="175.50"></text></g><g><title>configure_and_expand (40,603,146 samples, 7.69%)</title><rect x="81.0627%" y="197" width="7.6909%" height="15" fill="rgb(221,13,13)"/><text x="81.3127%" y="207.50">configure_a..</text></g><g><title>resolve_crate (4,128,762 samples, 0.78%)</title><rect x="87.9715%" y="181" width="0.7821%" height="15" fill="rgb(238,131,9)"/><text x="88.2215%" y="191.50"></text></g><g><title>early_lint_checks (890,169 samples, 0.17%)</title><rect x="88.8361%" y="197" width="0.1686%" height="15" fill="rgb(211,50,8)"/><text x="89.0861%" y="207.50"></text></g><g><title>free_global_ctxt (5,757,388 samples, 1.09%)</title><rect x="89.0047%" y="197" width="1.0905%" height="15" fill="rgb(245,182,24)"/><text x="89.2547%" y="207.50"></text></g><g><title>item_attrs (538,294 samples, 0.10%)</title><rect x="91.2602%" y="101" width="0.1020%" height="15" fill="rgb(242,14,37)"/><text x="91.5102%" y="111.50"></text></g><g><title>codegen_fn_attrs (794,555 samples, 0.15%)</title><rect x="91.2339%" y="117" width="0.1505%" height="15" fill="rgb(246,228,12)"/><text x="91.4839%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,038,912 samples, 0.20%)</title><rect x="91.7351%" y="101" width="0.1968%" height="15" fill="rgb(213,55,15)"/><text x="91.9851%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,082,100 samples, 0.20%)</title><rect x="91.9319%" y="101" width="0.2050%" height="15" fill="rgb(209,9,3)"/><text x="92.1819%" y="111.50"></text></g><g><title>optimized_mir (3,770,069 samples, 0.71%)</title><rect x="91.4771%" y="117" width="0.7141%" height="15" fill="rgb(230,59,30)"/><text x="91.7271%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (615,669 samples, 0.12%)</title><rect x="92.2771%" y="101" width="0.1166%" height="15" fill="rgb(209,121,21)"/><text x="92.5271%" y="111.50"></text></g><g><title>resolve_instance (1,744,663 samples, 0.33%)</title><rect x="92.1912%" y="117" width="0.3305%" height="15" fill="rgb(220,109,13)"/><text x="92.4412%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (8,769,337 samples, 1.66%)</title><rect x="91.0171%" y="133" width="1.6610%" height="15" fill="rgb(232,18,1)"/><text x="91.2671%" y="143.50"></text></g><g><title>monomorphization_collector (8,843,968 samples, 1.68%)</title><rect x="91.0162%" y="149" width="1.6752%" height="15" fill="rgb(215,41,42)"/><text x="91.2662%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (922,669 samples, 0.17%)</title><rect x="92.6921%" y="133" width="0.1748%" height="15" fill="rgb(224,123,36)"/><text x="92.9421%" y="143.50"></text></g><g><title>symbol_name (824,109 samples, 0.16%)</title><rect x="92.7107%" y="117" width="0.1561%" height="15" fill="rgb(240,125,3)"/><text x="92.9607%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (10,334,693 samples, 1.96%)</title><rect x="91.0080%" y="165" width="1.9576%" height="15" fill="rgb(205,98,50)"/><text x="91.2580%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,447,504 samples, 0.27%)</title><rect x="92.6914%" y="149" width="0.2742%" height="15" fill="rgb(205,185,37)"/><text x="92.9414%" y="159.50"></text></g><g><title>exported_symbols (10,716,488 samples, 2.03%)</title><rect x="90.9952%" y="181" width="2.0299%" height="15" fill="rgb(238,207,15)"/><text x="91.2452%" y="191.50">e..</text></g><g><title>is_sized_raw (884,395 samples, 0.17%)</title><rect x="94.4042%" y="149" width="0.1675%" height="15" fill="rgb(213,199,42)"/><text x="94.6542%" y="159.50"></text></g><g><title>evaluate_obligation (715,992 samples, 0.14%)</title><rect x="94.4361%" y="133" width="0.1356%" height="15" fill="rgb(235,201,11)"/><text x="94.6861%" y="143.50"></text></g><g><title>layout_of (795,669 samples, 0.15%)</title><rect x="94.5718%" y="149" width="0.1507%" height="15" fill="rgb(207,46,11)"/><text x="94.8218%" y="159.50"></text></g><g><title>layout_of (3,033,159 samples, 0.57%)</title><rect x="94.2173%" y="165" width="0.5745%" height="15" fill="rgb(241,35,35)"/><text x="94.4673%" y="175.50"></text></g><g><title>is_copy_raw (769,381 samples, 0.15%)</title><rect x="96.0387%" y="133" width="0.1457%" height="15" fill="rgb(243,32,47)"/><text x="96.2887%" y="143.50"></text></g><g><title>evaluate_obligation (557,068 samples, 0.11%)</title><rect x="96.0789%" y="117" width="0.1055%" height="15" fill="rgb(247,202,23)"/><text x="96.3289%" y="127.50"></text></g><g><title>needs_drop_raw (955,402 samples, 0.18%)</title><rect x="96.0155%" y="149" width="0.1810%" height="15" fill="rgb(219,102,11)"/><text x="96.2655%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,606,462 samples, 1.44%)</title><rect x="94.7918%" y="165" width="1.4408%" height="15" fill="rgb(243,110,44)"/><text x="95.0418%" y="175.50"></text></g><g><title>optimized_mir (17,011,389 samples, 3.22%)</title><rect x="93.0768%" y="181" width="3.2222%" height="15" fill="rgb(222,74,54)"/><text x="93.3268%" y="191.50">opt..</text></g><g><title>generate_crate_metadata (32,969,500 samples, 6.24%)</title><rect x="90.0952%" y="197" width="6.2449%" height="15" fill="rgb(216,99,12)"/><text x="90.3452%" y="207.50">generate..</text></g><g><title>hir_lowering (7,565,186 samples, 1.43%)</title><rect x="96.3402%" y="197" width="1.4330%" height="15" fill="rgb(226,22,26)"/><text x="96.5902%" y="207.50"></text></g><g><title>link_crate (2,303,803 samples, 0.44%)</title><rect x="97.7790%" y="181" width="0.4364%" height="15" fill="rgb(217,163,10)"/><text x="98.0290%" y="191.50"></text></g><g><title>link_binary (2,246,442 samples, 0.43%)</title><rect x="97.7899%" y="165" width="0.4255%" height="15" fill="rgb(213,25,53)"/><text x="98.0399%" y="175.50"></text></g><g><title>link_rlib (1,679,547 samples, 0.32%)</title><rect x="97.8973%" y="149" width="0.3181%" height="15" fill="rgb(252,105,26)"/><text x="98.1473%" y="159.50"></text></g><g><title>link (2,345,793 samples, 0.44%)</title><rect x="97.7731%" y="197" width="0.4443%" height="15" fill="rgb(220,39,43)"/><text x="98.0231%" y="207.50"></text></g><g><title>parse_crate (6,644,097 samples, 1.26%)</title><rect x="98.2174%" y="197" width="1.2585%" height="15" fill="rgb(229,68,48)"/><text x="98.4674%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,847,259 samples, 0.35%)</title><rect x="99.5171%" y="197" width="0.3499%" height="15" fill="rgb(252,8,32)"/><text x="99.7671%" y="207.50"></text></g><g><title>all (527,939,716 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (527,939,716 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (605,706 samples, 0.11%)</title><rect x="99.8853%" y="197" width="0.1147%" height="15" fill="rgb(236,28,36)"/><text x="100.1353%" y="207.50"></text></g></svg></svg>