<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (415,213,364 samples, 15.27%)</title><rect x="0.0396%" y="149" width="15.2691%" height="15" fill="rgb(227,0,7)"/><text x="0.2896%" y="159.50">LLVM_passes</text></g><g><title>thir_body (7,361,878 samples, 0.27%)</title><rect x="19.1646%" y="37" width="0.2707%" height="15" fill="rgb(217,0,24)"/><text x="19.4146%" y="47.50"></text></g><g><title>mir_const (38,055,442 samples, 1.40%)</title><rect x="18.0378%" y="85" width="1.3995%" height="15" fill="rgb(221,193,54)"/><text x="18.2878%" y="95.50"></text></g><g><title>unsafety_check_result (32,797,366 samples, 1.21%)</title><rect x="18.2311%" y="69" width="1.2061%" height="15" fill="rgb(248,212,6)"/><text x="18.4811%" y="79.50"></text></g><g><title>mir_built (29,608,008 samples, 1.09%)</title><rect x="18.3484%" y="53" width="1.0888%" height="15" fill="rgb(208,68,35)"/><text x="18.5984%" y="63.50"></text></g><g><title>mir_promoted (43,157,127 samples, 1.59%)</title><rect x="17.8676%" y="101" width="1.5871%" height="15" fill="rgb(232,128,0)"/><text x="18.1176%" y="111.50"></text></g><g><title>type_op_prove_predicate (4,939,390 samples, 0.18%)</title><rect x="19.5426%" y="101" width="0.1816%" height="15" fill="rgb(207,160,47)"/><text x="19.7926%" y="111.50"></text></g><g><title>MIR_borrow_checking (118,850,967 samples, 4.37%)</title><rect x="15.3539%" y="133" width="4.3706%" height="15" fill="rgb(228,23,34)"/><text x="15.6039%" y="143.50">MIR_b..</text></g><g><title>mir_borrowck (118,428,295 samples, 4.36%)</title><rect x="15.3694%" y="117" width="4.3551%" height="15" fill="rgb(218,30,26)"/><text x="15.6194%" y="127.50">mir_b..</text></g><g><title>misc_checking_1 (4,661,920 samples, 0.17%)</title><rect x="19.7576%" y="133" width="0.1714%" height="15" fill="rgb(220,122,19)"/><text x="20.0076%" y="143.50"></text></g><g><title>misc_checking_2 (7,051,265 samples, 0.26%)</title><rect x="19.9290%" y="133" width="0.2593%" height="15" fill="rgb(250,228,42)"/><text x="20.1790%" y="143.50"></text></g><g><title>match_checking (4,807,531 samples, 0.18%)</title><rect x="20.0115%" y="117" width="0.1768%" height="15" fill="rgb(240,193,28)"/><text x="20.2615%" y="127.50"></text></g><g><title>check_match (4,691,061 samples, 0.17%)</title><rect x="20.0158%" y="101" width="0.1725%" height="15" fill="rgb(216,20,37)"/><text x="20.2658%" y="111.50"></text></g><g><title>crate_lints (3,917,101 samples, 0.14%)</title><rect x="20.2869%" y="101" width="0.1440%" height="15" fill="rgb(206,188,39)"/><text x="20.5369%" y="111.50"></text></g><g><title>lint_checking (6,512,028 samples, 0.24%)</title><rect x="20.2868%" y="117" width="0.2395%" height="15" fill="rgb(217,207,13)"/><text x="20.5368%" y="127.50"></text></g><g><title>privacy_checking_modules (4,258,106 samples, 0.16%)</title><rect x="20.5626%" y="117" width="0.1566%" height="15" fill="rgb(231,73,38)"/><text x="20.8126%" y="127.50"></text></g><g><title>check_mod_privacy (4,253,676 samples, 0.16%)</title><rect x="20.5627%" y="101" width="0.1564%" height="15" fill="rgb(225,20,46)"/><text x="20.8127%" y="111.50"></text></g><g><title>misc_checking_3 (14,477,174 samples, 0.53%)</title><rect x="20.1883%" y="133" width="0.5324%" height="15" fill="rgb(210,31,41)"/><text x="20.4383%" y="143.50"></text></g><g><title>impl_parent (3,033,231 samples, 0.11%)</title><rect x="20.9151%" y="69" width="0.1115%" height="15" fill="rgb(221,200,47)"/><text x="21.1651%" y="79.50"></text></g><g><title>impl_trait_ref (6,534,244 samples, 0.24%)</title><rect x="21.0267%" y="69" width="0.2403%" height="15" fill="rgb(226,26,5)"/><text x="21.2767%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,878,223 samples, 0.18%)</title><rect x="21.0876%" y="53" width="0.1794%" height="15" fill="rgb(249,33,26)"/><text x="21.3376%" y="63.50"></text></g><g><title>coherent_trait (15,765,608 samples, 0.58%)</title><rect x="20.7274%" y="101" width="0.5798%" height="15" fill="rgb(235,183,28)"/><text x="20.9774%" y="111.50"></text></g><g><title>specialization_graph_of (15,267,523 samples, 0.56%)</title><rect x="20.7457%" y="85" width="0.5614%" height="15" fill="rgb(221,5,38)"/><text x="20.9957%" y="95.50"></text></g><g><title>coherence_checking (15,873,359 samples, 0.58%)</title><rect x="20.7266%" y="117" width="0.5837%" height="15" fill="rgb(247,18,42)"/><text x="20.9766%" y="127.50"></text></g><g><title>evaluate_obligation (7,633,324 samples, 0.28%)</title><rect x="26.1482%" y="69" width="0.2807%" height="15" fill="rgb(241,131,45)"/><text x="26.3982%" y="79.50"></text></g><g><title>typeck (3,269,415 samples, 0.12%)</title><rect x="26.5812%" y="69" width="0.1202%" height="15" fill="rgb(249,31,29)"/><text x="26.8312%" y="79.50"></text></g><g><title>item_bodies_checking (146,670,483 samples, 5.39%)</title><rect x="21.3130%" y="117" width="5.3937%" height="15" fill="rgb(225,111,53)"/><text x="21.5630%" y="127.50">item_bo..</text></g><g><title>typeck_item_bodies (146,667,953 samples, 5.39%)</title><rect x="21.3131%" y="101" width="5.3936%" height="15" fill="rgb(238,160,17)"/><text x="21.5631%" y="111.50">typeck_..</text></g><g><title>typeck (146,363,511 samples, 5.38%)</title><rect x="21.3243%" y="85" width="5.3824%" height="15" fill="rgb(214,148,48)"/><text x="21.5743%" y="95.50">typeck</text></g><g><title>type_collecting (4,534,008 samples, 0.17%)</title><rect x="26.8000%" y="117" width="0.1667%" height="15" fill="rgb(232,36,49)"/><text x="27.0500%" y="127.50"></text></g><g><title>collect_mod_item_types (4,522,018 samples, 0.17%)</title><rect x="26.8005%" y="101" width="0.1663%" height="15" fill="rgb(209,103,24)"/><text x="27.0505%" y="111.50"></text></g><g><title>check_impl_item_well_formed (10,486,983 samples, 0.39%)</title><rect x="26.9892%" y="101" width="0.3856%" height="15" fill="rgb(229,88,8)"/><text x="27.2392%" y="111.50"></text></g><g><title>check_item_well_formed (4,278,017 samples, 0.16%)</title><rect x="27.3748%" y="101" width="0.1573%" height="15" fill="rgb(213,181,19)"/><text x="27.6248%" y="111.50"></text></g><g><title>analysis (332,524,164 samples, 12.23%)</title><rect x="15.3086%" y="149" width="12.2283%" height="15" fill="rgb(254,191,54)"/><text x="15.5586%" y="159.50">analysis</text></g><g><title>type_check_crate (185,353,005 samples, 6.82%)</title><rect x="20.7207%" y="133" width="6.8162%" height="15" fill="rgb(241,83,37)"/><text x="20.9707%" y="143.50">type_chec..</text></g><g><title>wf_checking (15,486,805 samples, 0.57%)</title><rect x="26.9674%" y="117" width="0.5695%" height="15" fill="rgb(233,36,39)"/><text x="27.2174%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (6,666,667 samples, 0.25%)</title><rect x="39.5039%" y="117" width="0.2452%" height="15" fill="rgb(226,3,54)"/><text x="39.7539%" y="127.50"></text></g><g><title>const_caller_location (7,984,299 samples, 0.29%)</title><rect x="39.7491%" y="117" width="0.2936%" height="15" fill="rgb(245,192,40)"/><text x="39.9991%" y="127.50"></text></g><g><title>layout_of (5,088,134 samples, 0.19%)</title><rect x="40.6973%" y="101" width="0.1871%" height="15" fill="rgb(238,167,29)"/><text x="40.9473%" y="111.50"></text></g><g><title>predicates_of (4,992,698 samples, 0.18%)</title><rect x="41.2568%" y="85" width="0.1836%" height="15" fill="rgb(232,182,51)"/><text x="41.5068%" y="95.50"></text></g><g><title>predicates_defined_on (3,692,596 samples, 0.14%)</title><rect x="41.3046%" y="69" width="0.1358%" height="15" fill="rgb(231,60,39)"/><text x="41.5546%" y="79.50"></text></g><g><title>param_env (15,154,339 samples, 0.56%)</title><rect x="40.8844%" y="101" width="0.5573%" height="15" fill="rgb(208,69,12)"/><text x="41.1344%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,605,299 samples, 0.13%)</title><rect x="41.4417%" y="101" width="0.1326%" height="15" fill="rgb(235,93,37)"/><text x="41.6917%" y="111.50"></text></g><g><title>fn_abi_of_instance (41,591,316 samples, 1.53%)</title><rect x="40.0487%" y="117" width="1.5295%" height="15" fill="rgb(213,116,39)"/><text x="40.2987%" y="127.50"></text></g><g><title>layout_of (5,449,822 samples, 0.20%)</title><rect x="41.6694%" y="117" width="0.2004%" height="15" fill="rgb(222,207,29)"/><text x="41.9194%" y="127.50"></text></g><g><title>codegen_module (388,416,739 samples, 14.28%)</title><rect x="27.6488%" y="133" width="14.2837%" height="15" fill="rgb(206,96,30)"/><text x="27.8988%" y="143.50">codegen_module</text></g><g><title>codegen_crate (391,533,082 samples, 14.40%)</title><rect x="27.5372%" y="149" width="14.3983%" height="15" fill="rgb(218,138,4)"/><text x="27.7872%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,235,785,969 samples, 45.44%)</title><rect x="41.9437%" y="133" width="45.4448%" height="15" fill="rgb(250,191,14)"/><text x="42.1937%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,169,479,211 samples, 43.01%)</title><rect x="44.3821%" y="117" width="43.0065%" height="15" fill="rgb(239,60,40)"/><text x="44.6321%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,298,293,083 samples, 47.74%)</title><rect x="41.9355%" y="149" width="47.7435%" height="15" fill="rgb(206,27,48)"/><text x="42.1855%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (62,284,212 samples, 2.29%)</title><rect x="87.3885%" y="133" width="2.2904%" height="15" fill="rgb(225,35,8)"/><text x="87.6385%" y="143.50">L..</text></g><g><title>macro_expand_crate (55,304,869 samples, 2.03%)</title><rect x="89.7111%" y="133" width="2.0338%" height="15" fill="rgb(250,213,24)"/><text x="89.9611%" y="143.50">m..</text></g><g><title>expand_crate (55,288,809 samples, 2.03%)</title><rect x="89.7117%" y="117" width="2.0332%" height="15" fill="rgb(247,123,22)"/><text x="89.9617%" y="127.50">e..</text></g><g><title>late_resolve_crate (6,386,727 samples, 0.23%)</title><rect x="91.7589%" y="117" width="0.2349%" height="15" fill="rgb(231,138,38)"/><text x="92.0089%" y="127.50"></text></g><g><title>configure_and_expand (63,407,406 samples, 2.33%)</title><rect x="89.6790%" y="149" width="2.3317%" height="15" fill="rgb(231,145,46)"/><text x="89.9290%" y="159.50">c..</text></g><g><title>resolve_crate (7,158,566 samples, 0.26%)</title><rect x="91.7475%" y="133" width="0.2632%" height="15" fill="rgb(251,118,11)"/><text x="91.9975%" y="143.50"></text></g><g><title>free_global_ctxt (11,839,076 samples, 0.44%)</title><rect x="92.1089%" y="149" width="0.4354%" height="15" fill="rgb(217,147,25)"/><text x="92.3589%" y="159.50"></text></g><g><title>item_attrs (3,326,532 samples, 0.12%)</title><rect x="93.3437%" y="53" width="0.1223%" height="15" fill="rgb(247,81,37)"/><text x="93.5937%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (3,145,390 samples, 0.12%)</title><rect x="93.3503%" y="37" width="0.1157%" height="15" fill="rgb(209,12,38)"/><text x="93.6003%" y="47.50"></text></g><g><title>codegen_fn_attrs (5,933,328 samples, 0.22%)</title><rect x="93.3018%" y="69" width="0.2182%" height="15" fill="rgb(227,1,9)"/><text x="93.5518%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (9,794,897 samples, 0.36%)</title><rect x="93.8697%" y="53" width="0.3602%" height="15" fill="rgb(248,47,43)"/><text x="94.1197%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,264,207 samples, 0.23%)</title><rect x="94.2299%" y="53" width="0.2304%" height="15" fill="rgb(221,10,30)"/><text x="94.4799%" y="63.50"></text></g><g><title>optimized_mir (23,664,942 samples, 0.87%)</title><rect x="93.6372%" y="69" width="0.8703%" height="15" fill="rgb(210,229,1)"/><text x="93.8872%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (11,534,951 samples, 0.42%)</title><rect x="94.7528%" y="53" width="0.4242%" height="15" fill="rgb(222,148,37)"/><text x="95.0028%" y="63.50"></text></g><g><title>specialization_graph_of (3,168,375 samples, 0.12%)</title><rect x="95.3232%" y="53" width="0.1165%" height="15" fill="rgb(234,67,33)"/><text x="95.5732%" y="63.50"></text></g><g><title>resolve_instance (26,645,348 samples, 0.98%)</title><rect x="94.5075%" y="69" width="0.9799%" height="15" fill="rgb(247,98,35)"/><text x="94.7575%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,783,862 samples, 0.10%)</title><rect x="95.5438%" y="53" width="0.1024%" height="15" fill="rgb(247,138,52)"/><text x="95.7938%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,720,182 samples, 0.10%)</title><rect x="95.5461%" y="37" width="0.1000%" height="15" fill="rgb(213,79,30)"/><text x="95.7961%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,662,962 samples, 0.13%)</title><rect x="95.5229%" y="69" width="0.1347%" height="15" fill="rgb(246,177,23)"/><text x="95.7729%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (79,833,201 samples, 2.94%)</title><rect x="92.7812%" y="85" width="2.9358%" height="15" fill="rgb(230,62,27)"/><text x="93.0312%" y="95.50">mo..</text></g><g><title>monomorphization_collector (79,948,782 samples, 2.94%)</title><rect x="92.7810%" y="101" width="2.9400%" height="15" fill="rgb(216,154,8)"/><text x="93.0310%" y="111.50">mo..</text></g><g><title>assert_symbols_are_distinct (11,102,678 samples, 0.41%)</title><rect x="95.7213%" y="85" width="0.4083%" height="15" fill="rgb(244,35,45)"/><text x="95.9713%" y="95.50"></text></g><g><title>symbol_name (9,647,414 samples, 0.35%)</title><rect x="95.7748%" y="69" width="0.3548%" height="15" fill="rgb(251,115,12)"/><text x="96.0248%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (96,079,454 samples, 3.53%)</title><rect x="92.7776%" y="117" width="3.5332%" height="15" fill="rgb(240,54,50)"/><text x="93.0276%" y="127.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (16,037,221 samples, 0.59%)</title><rect x="95.7211%" y="101" width="0.5898%" height="15" fill="rgb(233,84,52)"/><text x="95.9711%" y="111.50"></text></g><g><title>cgu_partitioning (4,929,733 samples, 0.18%)</title><rect x="96.1295%" y="85" width="0.1813%" height="15" fill="rgb(207,117,47)"/><text x="96.3795%" y="95.50"></text></g><g><title>exported_symbols (97,106,005 samples, 3.57%)</title><rect x="92.7598%" y="133" width="3.5710%" height="15" fill="rgb(249,43,39)"/><text x="93.0098%" y="143.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (22,291,632 samples, 0.82%)</title><rect x="96.8950%" y="117" width="0.8198%" height="15" fill="rgb(209,38,44)"/><text x="97.1450%" y="127.50"></text></g><g><title>optimized_mir (37,616,521 samples, 1.38%)</title><rect x="96.3358%" y="133" width="1.3833%" height="15" fill="rgb(236,212,23)"/><text x="96.5858%" y="143.50"></text></g><g><title>generate_crate_metadata (141,131,674 samples, 5.19%)</title><rect x="92.5443%" y="149" width="5.1900%" height="15" fill="rgb(242,79,21)"/><text x="92.7943%" y="159.50">genera..</text></g><g><title>hir_lowering (12,720,245 samples, 0.47%)</title><rect x="97.7343%" y="149" width="0.4678%" height="15" fill="rgb(211,96,35)"/><text x="97.9843%" y="159.50"></text></g><g><title>finish_ongoing_codegen (37,342,838 samples, 1.37%)</title><rect x="98.2031%" y="133" width="1.3732%" height="15" fill="rgb(253,215,40)"/><text x="98.4531%" y="143.50"></text></g><g><title>link_crate (6,776,633 samples, 0.25%)</title><rect x="99.5763%" y="133" width="0.2492%" height="15" fill="rgb(211,81,21)"/><text x="99.8263%" y="143.50"></text></g><g><title>link_binary (6,645,221 samples, 0.24%)</title><rect x="99.5812%" y="117" width="0.2444%" height="15" fill="rgb(208,190,38)"/><text x="99.8312%" y="127.50"></text></g><g><title>link_rlib (5,385,118 samples, 0.20%)</title><rect x="99.6275%" y="101" width="0.1980%" height="15" fill="rgb(235,213,38)"/><text x="99.8775%" y="111.50"></text></g><g><title>link (44,155,071 samples, 1.62%)</title><rect x="98.2021%" y="149" width="1.6238%" height="15" fill="rgb(237,122,38)"/><text x="98.4521%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (2,957,002 samples, 0.11%)</title><rect x="99.8657%" y="149" width="0.1087%" height="15" fill="rgb(244,218,35)"/><text x="100.1157%" y="159.50"></text></g><g><title>all (2,719,309,815 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (2,719,309,815 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>