<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (238,381,619 samples, 17.66%)</title><rect x="0.0436%" y="213" width="17.6581%" height="15" fill="rgb(227,0,7)"/><text x="0.2936%" y="223.50">LLVM_passes</text></g><g><title>specialization_graph_of (1,387,103 samples, 0.10%)</title><rect x="18.7014%" y="85" width="0.1027%" height="15" fill="rgb(217,0,24)"/><text x="18.9514%" y="95.50"></text></g><g><title>resolve_instance (1,950,710 samples, 0.14%)</title><rect x="18.6661%" y="101" width="0.1445%" height="15" fill="rgb(221,193,54)"/><text x="18.9161%" y="111.50"></text></g><g><title>mir_const (6,911,552 samples, 0.51%)</title><rect x="18.3490%" y="149" width="0.5120%" height="15" fill="rgb(248,212,6)"/><text x="18.5990%" y="159.50"></text></g><g><title>unsafety_check_result (5,988,121 samples, 0.44%)</title><rect x="18.4174%" y="133" width="0.4436%" height="15" fill="rgb(208,68,35)"/><text x="18.6674%" y="143.50"></text></g><g><title>mir_built (5,208,541 samples, 0.39%)</title><rect x="18.4751%" y="117" width="0.3858%" height="15" fill="rgb(232,128,0)"/><text x="18.7251%" y="127.50"></text></g><g><title>mir_promoted (8,471,570 samples, 0.63%)</title><rect x="18.3084%" y="165" width="0.6275%" height="15" fill="rgb(207,160,47)"/><text x="18.5584%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,516,817 samples, 0.11%)</title><rect x="19.0085%" y="165" width="0.1124%" height="15" fill="rgb(228,23,34)"/><text x="19.2585%" y="175.50"></text></g><g><title>MIR_borrow_checking (18,913,749 samples, 1.40%)</title><rect x="17.7205%" y="197" width="1.4010%" height="15" fill="rgb(218,30,26)"/><text x="17.9705%" y="207.50"></text></g><g><title>mir_borrowck (18,829,559 samples, 1.39%)</title><rect x="17.7267%" y="181" width="1.3948%" height="15" fill="rgb(220,122,19)"/><text x="17.9767%" y="191.50"></text></g><g><title>crate_lints (3,380,854 samples, 0.25%)</title><rect x="19.3531%" y="165" width="0.2504%" height="15" fill="rgb(250,228,42)"/><text x="19.6031%" y="175.50"></text></g><g><title>lint_checking (3,881,449 samples, 0.29%)</title><rect x="19.3529%" y="181" width="0.2875%" height="15" fill="rgb(240,193,28)"/><text x="19.6029%" y="191.50"></text></g><g><title>misc_checking_3 (5,789,708 samples, 0.43%)</title><rect x="19.3151%" y="197" width="0.4289%" height="15" fill="rgb(216,20,37)"/><text x="19.5651%" y="207.50"></text></g><g><title>impl_trait_ref (3,078,928 samples, 0.23%)</title><rect x="19.9074%" y="133" width="0.2281%" height="15" fill="rgb(206,188,39)"/><text x="20.1574%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,766,418 samples, 0.20%)</title><rect x="19.9305%" y="117" width="0.2049%" height="15" fill="rgb(217,207,13)"/><text x="20.1805%" y="127.50"></text></g><g><title>coherent_trait (5,511,125 samples, 0.41%)</title><rect x="19.7501%" y="165" width="0.4082%" height="15" fill="rgb(231,73,38)"/><text x="20.0001%" y="175.50"></text></g><g><title>specialization_graph_of (5,501,445 samples, 0.41%)</title><rect x="19.7508%" y="149" width="0.4075%" height="15" fill="rgb(225,20,46)"/><text x="20.0008%" y="159.50"></text></g><g><title>coherence_checking (5,570,856 samples, 0.41%)</title><rect x="19.7488%" y="181" width="0.4127%" height="15" fill="rgb(210,31,41)"/><text x="19.9988%" y="191.50"></text></g><g><title>evaluate_obligation (1,843,565 samples, 0.14%)</title><rect x="21.1741%" y="133" width="0.1366%" height="15" fill="rgb(221,200,47)"/><text x="21.4241%" y="143.50"></text></g><g><title>item_bodies_checking (17,125,962 samples, 1.27%)</title><rect x="20.1631%" y="181" width="1.2686%" height="15" fill="rgb(226,26,5)"/><text x="20.4131%" y="191.50"></text></g><g><title>typeck_item_bodies (17,121,992 samples, 1.27%)</title><rect x="20.1634%" y="165" width="1.2683%" height="15" fill="rgb(249,33,26)"/><text x="20.4134%" y="175.50"></text></g><g><title>typeck (17,062,191 samples, 1.26%)</title><rect x="20.1678%" y="149" width="1.2639%" height="15" fill="rgb(235,183,28)"/><text x="20.4178%" y="159.50"></text></g><g><title>mir_borrowck (6,915,508 samples, 0.51%)</title><rect x="21.7170%" y="117" width="0.5123%" height="15" fill="rgb(221,5,38)"/><text x="21.9670%" y="127.50"></text></g><g><title>specialization_graph_of (3,009,750 samples, 0.22%)</title><rect x="22.3190%" y="37" width="0.2229%" height="15" fill="rgb(247,18,42)"/><text x="22.5690%" y="47.50"></text></g><g><title>resolve_instance (3,114,341 samples, 0.23%)</title><rect x="22.3125%" y="53" width="0.2307%" height="15" fill="rgb(241,131,45)"/><text x="22.5625%" y="63.50"></text></g><g><title>evaluate_obligation (2,161,870 samples, 0.16%)</title><rect x="23.4994%" y="37" width="0.1601%" height="15" fill="rgb(249,31,29)"/><text x="23.7494%" y="47.50"></text></g><g><title>mir_built (20,638,116 samples, 1.53%)</title><rect x="22.2637%" y="69" width="1.5288%" height="15" fill="rgb(225,111,53)"/><text x="22.5137%" y="79.50"></text></g><g><title>typeck (16,719,908 samples, 1.24%)</title><rect x="22.5540%" y="53" width="1.2385%" height="15" fill="rgb(238,160,17)"/><text x="22.8040%" y="63.50"></text></g><g><title>mir_built (2,177,085 samples, 0.16%)</title><rect x="23.8152%" y="53" width="0.1613%" height="15" fill="rgb(214,148,48)"/><text x="24.0652%" y="63.50"></text></g><g><title>mir_const (23,474,965 samples, 1.74%)</title><rect x="22.2378%" y="101" width="1.7389%" height="15" fill="rgb(232,36,49)"/><text x="22.4878%" y="111.50"></text></g><g><title>unsafety_check_result (23,250,824 samples, 1.72%)</title><rect x="22.2544%" y="85" width="1.7223%" height="15" fill="rgb(209,103,24)"/><text x="22.5044%" y="95.50"></text></g><g><title>unsafety_check_result (2,486,156 samples, 0.18%)</title><rect x="23.7925%" y="69" width="0.1842%" height="15" fill="rgb(229,88,8)"/><text x="24.0425%" y="79.50"></text></g><g><title>mir_promoted (23,601,615 samples, 1.75%)</title><rect x="22.2293%" y="117" width="1.7483%" height="15" fill="rgb(213,181,19)"/><text x="22.4793%" y="127.50"></text></g><g><title>type_of (33,122,470 samples, 2.45%)</title><rect x="21.5671%" y="149" width="2.4535%" height="15" fill="rgb(254,191,54)"/><text x="21.8171%" y="159.50">ty..</text></g><g><title>mir_borrowck (33,048,530 samples, 2.45%)</title><rect x="21.5726%" y="133" width="2.4481%" height="15" fill="rgb(241,83,37)"/><text x="21.8226%" y="143.50">mi..</text></g><g><title>evaluate_obligation (2,465,618 samples, 0.18%)</title><rect x="24.3943%" y="133" width="0.1826%" height="15" fill="rgb(233,36,39)"/><text x="24.6443%" y="143.50"></text></g><g><title>item_types_checking (45,166,882 samples, 3.35%)</title><rect x="21.4317%" y="181" width="3.3457%" height="15" fill="rgb(226,3,54)"/><text x="21.6817%" y="191.50">ite..</text></g><g><title>check_mod_item_types (45,161,502 samples, 3.35%)</title><rect x="21.4321%" y="165" width="3.3453%" height="15" fill="rgb(245,192,40)"/><text x="21.6821%" y="175.50">che..</text></g><g><title>typeck (10,216,473 samples, 0.76%)</title><rect x="24.0207%" y="149" width="0.7568%" height="15" fill="rgb(238,167,29)"/><text x="24.2707%" y="159.50"></text></g><g><title>type_collecting (1,739,587 samples, 0.13%)</title><rect x="24.7776%" y="181" width="0.1289%" height="15" fill="rgb(232,182,51)"/><text x="25.0276%" y="191.50"></text></g><g><title>collect_mod_item_types (1,731,897 samples, 0.13%)</title><rect x="24.7782%" y="165" width="0.1283%" height="15" fill="rgb(231,60,39)"/><text x="25.0282%" y="175.50"></text></g><g><title>check_impl_item_well_formed (3,519,639 samples, 0.26%)</title><rect x="24.9179%" y="165" width="0.2607%" height="15" fill="rgb(208,69,12)"/><text x="25.1679%" y="175.50"></text></g><g><title>evaluate_obligation (1,667,946 samples, 0.12%)</title><rect x="25.2228%" y="149" width="0.1236%" height="15" fill="rgb(235,93,37)"/><text x="25.4728%" y="159.50"></text></g><g><title>check_item_well_formed (2,702,594 samples, 0.20%)</title><rect x="25.1786%" y="165" width="0.2002%" height="15" fill="rgb(213,116,39)"/><text x="25.4286%" y="175.50"></text></g><g><title>analysis (104,529,497 samples, 7.74%)</title><rect x="17.7016%" y="213" width="7.7430%" height="15" fill="rgb(222,207,29)"/><text x="17.9516%" y="223.50">analysis</text></g><g><title>type_check_crate (76,958,920 samples, 5.70%)</title><rect x="19.7439%" y="197" width="5.7007%" height="15" fill="rgb(206,96,30)"/><text x="19.9939%" y="207.50">type_ch..</text></g><g><title>wf_checking (7,260,723 samples, 0.54%)</title><rect x="24.9068%" y="181" width="0.5378%" height="15" fill="rgb(218,138,4)"/><text x="25.1568%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (7,030,470 samples, 0.52%)</title><rect x="37.4346%" y="181" width="0.5208%" height="15" fill="rgb(250,191,14)"/><text x="37.6846%" y="191.50"></text></g><g><title>const_caller_location (1,498,315 samples, 0.11%)</title><rect x="37.9553%" y="181" width="0.1110%" height="15" fill="rgb(239,60,40)"/><text x="38.2053%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,086,617 samples, 0.15%)</title><rect x="38.7651%" y="165" width="0.1546%" height="15" fill="rgb(206,27,48)"/><text x="39.0151%" y="175.50"></text></g><g><title>layout_of (1,708,655 samples, 0.13%)</title><rect x="39.1128%" y="149" width="0.1266%" height="15" fill="rgb(225,35,8)"/><text x="39.3628%" y="159.50"></text></g><g><title>layout_of (4,264,239 samples, 0.32%)</title><rect x="38.9443%" y="165" width="0.3159%" height="15" fill="rgb(250,213,24)"/><text x="39.1943%" y="175.50"></text></g><g><title>predicates_of (2,901,174 samples, 0.21%)</title><rect x="39.6475%" y="149" width="0.2149%" height="15" fill="rgb(247,123,22)"/><text x="39.8975%" y="159.50"></text></g><g><title>predicates_defined_on (2,053,305 samples, 0.15%)</title><rect x="39.7103%" y="133" width="0.1521%" height="15" fill="rgb(231,138,38)"/><text x="39.9603%" y="143.50"></text></g><g><title>param_env (8,173,171 samples, 0.61%)</title><rect x="39.2602%" y="165" width="0.6054%" height="15" fill="rgb(231,145,46)"/><text x="39.5102%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,913,086 samples, 0.14%)</title><rect x="39.8656%" y="165" width="0.1417%" height="15" fill="rgb(251,118,11)"/><text x="40.1156%" y="175.50"></text></g><g><title>normalize_projection_ty (1,433,583 samples, 0.11%)</title><rect x="39.9011%" y="149" width="0.1062%" height="15" fill="rgb(217,147,25)"/><text x="40.1511%" y="159.50"></text></g><g><title>fn_abi_of_instance (26,226,771 samples, 1.94%)</title><rect x="38.0706%" y="181" width="1.9427%" height="15" fill="rgb(247,81,37)"/><text x="38.3206%" y="191.50">f..</text></g><g><title>layout_of (1,796,098 samples, 0.13%)</title><rect x="40.3506%" y="165" width="0.1330%" height="15" fill="rgb(209,12,38)"/><text x="40.6006%" y="175.50"></text></g><g><title>layout_of (5,364,928 samples, 0.40%)</title><rect x="40.1067%" y="181" width="0.3974%" height="15" fill="rgb(227,1,9)"/><text x="40.3567%" y="191.50"></text></g><g><title>symbol_name (2,762,749 samples, 0.20%)</title><rect x="40.5057%" y="181" width="0.2047%" height="15" fill="rgb(248,47,43)"/><text x="40.7557%" y="191.50"></text></g><g><title>codegen_module (202,479,668 samples, 15.00%)</title><rect x="25.7393%" y="197" width="14.9986%" height="15" fill="rgb(221,10,30)"/><text x="25.9893%" y="207.50">codegen_module</text></g><g><title>codegen_crate (206,581,680 samples, 15.30%)</title><rect x="25.4451%" y="213" width="15.3025%" height="15" fill="rgb(210,229,1)"/><text x="25.6951%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (632,107,451 samples, 46.82%)</title><rect x="40.7744%" y="197" width="46.8232%" height="15" fill="rgb(222,148,37)"/><text x="41.0244%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (603,941,001 samples, 44.74%)</title><rect x="42.8608%" y="181" width="44.7368%" height="15" fill="rgb(234,67,33)"/><text x="43.1108%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (665,082,495 samples, 49.27%)</title><rect x="40.7476%" y="213" width="49.2658%" height="15" fill="rgb(247,98,35)"/><text x="40.9976%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,613,840 samples, 2.42%)</title><rect x="87.5976%" y="197" width="2.4159%" height="15" fill="rgb(247,138,52)"/><text x="87.8476%" y="207.50">LL..</text></g><g><title>metadata_register_crate (2,196,062 samples, 0.16%)</title><rect x="90.6854%" y="165" width="0.1627%" height="15" fill="rgb(213,79,30)"/><text x="90.9354%" y="175.50"></text></g><g><title>macro_expand_crate (10,924,790 samples, 0.81%)</title><rect x="90.0399%" y="197" width="0.8093%" height="15" fill="rgb(246,177,23)"/><text x="90.2899%" y="207.50"></text></g><g><title>expand_crate (10,908,180 samples, 0.81%)</title><rect x="90.0411%" y="181" width="0.8080%" height="15" fill="rgb(230,62,27)"/><text x="90.2911%" y="191.50"></text></g><g><title>late_resolve_crate (5,251,383 samples, 0.39%)</title><rect x="90.8690%" y="181" width="0.3890%" height="15" fill="rgb(216,154,8)"/><text x="91.1190%" y="191.50"></text></g><g><title>configure_and_expand (16,902,699 samples, 1.25%)</title><rect x="90.0135%" y="213" width="1.2521%" height="15" fill="rgb(244,35,45)"/><text x="90.2635%" y="223.50"></text></g><g><title>resolve_crate (5,448,585 samples, 0.40%)</title><rect x="90.8619%" y="197" width="0.4036%" height="15" fill="rgb(251,115,12)"/><text x="91.1119%" y="207.50"></text></g><g><title>free_global_ctxt (6,860,979 samples, 0.51%)</title><rect x="91.2991%" y="213" width="0.5082%" height="15" fill="rgb(240,54,50)"/><text x="91.5491%" y="223.50"></text></g><g><title>item_attrs (2,233,640 samples, 0.17%)</title><rect x="92.4409%" y="117" width="0.1655%" height="15" fill="rgb(233,84,52)"/><text x="92.6909%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,157,600 samples, 0.16%)</title><rect x="92.4466%" y="101" width="0.1598%" height="15" fill="rgb(207,117,47)"/><text x="92.6966%" y="111.50"></text></g><g><title>codegen_fn_attrs (3,317,251 samples, 0.25%)</title><rect x="92.4058%" y="133" width="0.2457%" height="15" fill="rgb(249,43,39)"/><text x="92.6558%" y="143.50"></text></g><g><title>mir_shims (2,837,898 samples, 0.21%)</title><rect x="92.8001%" y="133" width="0.2102%" height="15" fill="rgb(209,38,44)"/><text x="93.0501%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,820,264 samples, 0.28%)</title><rect x="93.2267%" y="117" width="0.2830%" height="15" fill="rgb(236,212,23)"/><text x="93.4767%" y="127.50"></text></g><g><title>optimized_mir (9,378,342 samples, 0.69%)</title><rect x="93.0105%" y="133" width="0.6947%" height="15" fill="rgb(242,79,21)"/><text x="93.2605%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,638,559 samples, 0.20%)</title><rect x="93.5097%" y="117" width="0.1955%" height="15" fill="rgb(211,96,35)"/><text x="93.7597%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (5,375,324 samples, 0.40%)</title><rect x="93.9041%" y="117" width="0.3982%" height="15" fill="rgb(253,215,40)"/><text x="94.1541%" y="127.50"></text></g><g><title>specialization_graph_of (3,367,037 samples, 0.25%)</title><rect x="94.4717%" y="117" width="0.2494%" height="15" fill="rgb(211,81,21)"/><text x="94.7217%" y="127.50"></text></g><g><title>resolve_instance (14,436,530 samples, 1.07%)</title><rect x="93.7052%" y="133" width="1.0694%" height="15" fill="rgb(208,190,38)"/><text x="93.9552%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,516,327 samples, 0.11%)</title><rect x="94.8110%" y="117" width="0.1123%" height="15" fill="rgb(235,213,38)"/><text x="95.0610%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,480,747 samples, 0.11%)</title><rect x="94.8137%" y="101" width="0.1097%" height="15" fill="rgb(237,122,38)"/><text x="95.0637%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,409,455 samples, 0.10%)</title><rect x="94.8190%" y="85" width="0.1044%" height="15" fill="rgb(244,218,35)"/><text x="95.0690%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,866,951 samples, 0.14%)</title><rect x="94.7955%" y="133" width="0.1383%" height="15" fill="rgb(240,68,47)"/><text x="95.0455%" y="143.50"></text></g><g><title>upstream_drop_glue_for (2,438,845 samples, 0.18%)</title><rect x="94.9338%" y="133" width="0.1807%" height="15" fill="rgb(210,16,53)"/><text x="95.1838%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (2,410,394 samples, 0.18%)</title><rect x="94.9359%" y="117" width="0.1785%" height="15" fill="rgb(235,124,12)"/><text x="95.1859%" y="127.50"></text></g><g><title>upstream_monomorphizations (2,406,284 samples, 0.18%)</title><rect x="94.9362%" y="101" width="0.1782%" height="15" fill="rgb(224,169,11)"/><text x="95.1862%" y="111.50"></text></g><g><title>exported_symbols (2,024,081 samples, 0.15%)</title><rect x="94.9645%" y="85" width="0.1499%" height="15" fill="rgb(250,166,2)"/><text x="95.2145%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,015,201 samples, 0.15%)</title><rect x="94.9651%" y="69" width="0.1493%" height="15" fill="rgb(242,216,29)"/><text x="95.2151%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (43,805,318 samples, 3.24%)</title><rect x="91.9689%" y="149" width="3.2449%" height="15" fill="rgb(230,116,27)"/><text x="92.2189%" y="159.50">mon..</text></g><g><title>monomorphization_collector (43,867,299 samples, 3.25%)</title><rect x="91.9687%" y="165" width="3.2495%" height="15" fill="rgb(228,99,48)"/><text x="92.2187%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,039,390 samples, 0.37%)</title><rect x="95.2185%" y="149" width="0.3733%" height="15" fill="rgb(253,11,6)"/><text x="95.4685%" y="159.50"></text></g><g><title>symbol_name (4,498,824 samples, 0.33%)</title><rect x="95.2586%" y="133" width="0.3332%" height="15" fill="rgb(247,143,39)"/><text x="95.5086%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (51,099,091 samples, 3.79%)</title><rect x="91.9640%" y="181" width="3.7852%" height="15" fill="rgb(236,97,10)"/><text x="92.2140%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (7,167,752 samples, 0.53%)</title><rect x="95.2182%" y="165" width="0.5309%" height="15" fill="rgb(233,208,19)"/><text x="95.4682%" y="175.50"></text></g><g><title>cgu_partitioning (2,123,612 samples, 0.16%)</title><rect x="95.5918%" y="149" width="0.1573%" height="15" fill="rgb(216,164,2)"/><text x="95.8418%" y="159.50"></text></g><g><title>exported_symbols (51,395,985 samples, 3.81%)</title><rect x="91.9477%" y="197" width="3.8071%" height="15" fill="rgb(220,129,5)"/><text x="92.1977%" y="207.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,270,009 samples, 0.39%)</title><rect x="96.0764%" y="181" width="0.3904%" height="15" fill="rgb(242,17,10)"/><text x="96.3264%" y="191.50"></text></g><g><title>optimized_mir (9,579,530 samples, 0.71%)</title><rect x="95.7595%" y="197" width="0.7096%" height="15" fill="rgb(242,107,0)"/><text x="96.0095%" y="207.50"></text></g><g><title>generate_crate_metadata (62,989,491 samples, 4.67%)</title><rect x="91.8074%" y="213" width="4.6659%" height="15" fill="rgb(251,28,31)"/><text x="92.0574%" y="223.50">gener..</text></g><g><title>hir_lowering (2,138,672 samples, 0.16%)</title><rect x="96.4733%" y="213" width="0.1584%" height="15" fill="rgb(233,223,10)"/><text x="96.7233%" y="223.50"></text></g><g><title>finish_ongoing_codegen (36,342,685 samples, 2.69%)</title><rect x="96.6330%" y="197" width="2.6921%" height="15" fill="rgb(215,21,27)"/><text x="96.8830%" y="207.50">fi..</text></g><g><title>link_crate (4,220,513 samples, 0.31%)</title><rect x="99.3250%" y="197" width="0.3126%" height="15" fill="rgb(232,23,21)"/><text x="99.5750%" y="207.50"></text></g><g><title>link_binary (4,168,152 samples, 0.31%)</title><rect x="99.3289%" y="181" width="0.3088%" height="15" fill="rgb(244,5,23)"/><text x="99.5789%" y="191.50"></text></g><g><title>link_rlib (3,305,373 samples, 0.24%)</title><rect x="99.3928%" y="165" width="0.2448%" height="15" fill="rgb(226,81,46)"/><text x="99.6428%" y="175.50"></text></g><g><title>link (40,590,798 samples, 3.01%)</title><rect x="96.6317%" y="213" width="3.0068%" height="15" fill="rgb(247,70,30)"/><text x="96.8817%" y="223.50">link</text></g><g><title>parse_crate (2,414,804 samples, 0.18%)</title><rect x="99.6385%" y="213" width="0.1789%" height="15" fill="rgb(212,68,19)"/><text x="99.8885%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,820,898 samples, 0.13%)</title><rect x="99.8325%" y="213" width="0.1349%" height="15" fill="rgb(240,187,13)"/><text x="100.0825%" y="223.50"></text></g><g><title>all (1,349,986,857 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,349,986,857 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>