<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (47,064,796 samples, 9.11%)</title><rect x="0.1840%" y="197" width="9.1134%" height="15" fill="rgb(227,0,7)"/><text x="0.4340%" y="207.50">LLVM_passes</text></g><g><title>adt_drop_tys (687,035 samples, 0.13%)</title><rect x="14.7933%" y="69" width="0.1330%" height="15" fill="rgb(217,0,24)"/><text x="15.0433%" y="79.50"></text></g><g><title>needs_drop_raw (2,623,082 samples, 0.51%)</title><rect x="14.7438%" y="85" width="0.5079%" height="15" fill="rgb(221,193,54)"/><text x="14.9938%" y="95.50"></text></g><g><title>is_copy_raw (1,680,474 samples, 0.33%)</title><rect x="14.9264%" y="69" width="0.3254%" height="15" fill="rgb(248,212,6)"/><text x="15.1764%" y="79.50"></text></g><g><title>evaluate_obligation (1,353,901 samples, 0.26%)</title><rect x="14.9896%" y="53" width="0.2622%" height="15" fill="rgb(208,68,35)"/><text x="15.2396%" y="63.50"></text></g><g><title>impl_parent (899,896 samples, 0.17%)</title><rect x="15.7164%" y="53" width="0.1743%" height="15" fill="rgb(232,128,0)"/><text x="15.9664%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (556,993 samples, 0.11%)</title><rect x="15.7828%" y="37" width="0.1079%" height="15" fill="rgb(207,160,47)"/><text x="16.0328%" y="47.50"></text></g><g><title>specialization_graph_of (3,930,010 samples, 0.76%)</title><rect x="15.4281%" y="69" width="0.7610%" height="15" fill="rgb(228,23,34)"/><text x="15.6781%" y="79.50"></text></g><g><title>impl_trait_ref (1,541,027 samples, 0.30%)</title><rect x="15.8907%" y="53" width="0.2984%" height="15" fill="rgb(218,30,26)"/><text x="16.1407%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,190,225 samples, 0.23%)</title><rect x="15.9586%" y="37" width="0.2305%" height="15" fill="rgb(220,122,19)"/><text x="16.2086%" y="47.50"></text></g><g><title>resolve_instance (4,927,306 samples, 0.95%)</title><rect x="15.2518%" y="85" width="0.9541%" height="15" fill="rgb(250,228,42)"/><text x="15.5018%" y="95.50"></text></g><g><title>thir_body (1,511,804 samples, 0.29%)</title><rect x="16.2123%" y="85" width="0.2927%" height="15" fill="rgb(240,193,28)"/><text x="16.4623%" y="95.50"></text></g><g><title>mir_const (15,445,896 samples, 2.99%)</title><rect x="13.5223%" y="133" width="2.9909%" height="15" fill="rgb(216,20,37)"/><text x="13.7723%" y="143.50">mir..</text></g><g><title>unsafety_check_result (14,166,901 samples, 2.74%)</title><rect x="13.7699%" y="117" width="2.7432%" height="15" fill="rgb(206,188,39)"/><text x="14.0199%" y="127.50">un..</text></g><g><title>mir_built (13,208,401 samples, 2.56%)</title><rect x="13.9555%" y="101" width="2.5576%" height="15" fill="rgb(217,207,13)"/><text x="14.2055%" y="111.50">mi..</text></g><g><title>mir_const (858,177 samples, 0.17%)</title><rect x="16.7109%" y="117" width="0.1662%" height="15" fill="rgb(231,73,38)"/><text x="16.9609%" y="127.50"></text></g><g><title>unsafety_check_result (733,215 samples, 0.14%)</title><rect x="16.7351%" y="101" width="0.1420%" height="15" fill="rgb(225,20,46)"/><text x="16.9851%" y="111.50"></text></g><g><title>mir_built (642,265 samples, 0.12%)</title><rect x="16.7527%" y="85" width="0.1244%" height="15" fill="rgb(210,31,41)"/><text x="17.0027%" y="95.50"></text></g><g><title>mir_const_qualif (1,944,852 samples, 0.38%)</title><rect x="16.5132%" y="133" width="0.3766%" height="15" fill="rgb(221,200,47)"/><text x="16.7632%" y="143.50"></text></g><g><title>mir_promoted (18,706,715 samples, 3.62%)</title><rect x="13.2683%" y="149" width="3.6223%" height="15" fill="rgb(226,26,5)"/><text x="13.5183%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (1,099,312 samples, 0.21%)</title><rect x="16.8906%" y="149" width="0.2129%" height="15" fill="rgb(249,33,26)"/><text x="17.1406%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,348,452 samples, 0.65%)</title><rect x="17.2358%" y="149" width="0.6484%" height="15" fill="rgb(235,183,28)"/><text x="17.4858%" y="159.50"></text></g><g><title>MIR_borrow_checking (43,945,493 samples, 8.51%)</title><rect x="9.3774%" y="181" width="8.5094%" height="15" fill="rgb(221,5,38)"/><text x="9.6274%" y="191.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (43,776,590 samples, 8.48%)</title><rect x="9.4101%" y="165" width="8.4767%" height="15" fill="rgb(247,18,42)"/><text x="9.6601%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (633,397 samples, 0.12%)</title><rect x="18.0358%" y="165" width="0.1226%" height="15" fill="rgb(241,131,45)"/><text x="18.2858%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (549,286 samples, 0.11%)</title><rect x="18.2051%" y="165" width="0.1064%" height="15" fill="rgb(249,31,29)"/><text x="18.4551%" y="175.50"></text></g><g><title>misc_checking_1 (1,526,346 samples, 0.30%)</title><rect x="18.0310%" y="181" width="0.2956%" height="15" fill="rgb(225,111,53)"/><text x="18.2810%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (831,359 samples, 0.16%)</title><rect x="18.3269%" y="165" width="0.1610%" height="15" fill="rgb(238,160,17)"/><text x="18.5769%" y="175.50"></text></g><g><title>check_mod_liveness (693,318 samples, 0.13%)</title><rect x="18.3536%" y="149" width="0.1343%" height="15" fill="rgb(214,148,48)"/><text x="18.6036%" y="159.50"></text></g><g><title>misc_checking_2 (1,605,397 samples, 0.31%)</title><rect x="18.3265%" y="181" width="0.3109%" height="15" fill="rgb(232,36,49)"/><text x="18.5765%" y="191.50"></text></g><g><title>match_checking (772,068 samples, 0.15%)</title><rect x="18.4879%" y="165" width="0.1495%" height="15" fill="rgb(209,103,24)"/><text x="18.7379%" y="175.50"></text></g><g><title>check_match (730,827 samples, 0.14%)</title><rect x="18.4959%" y="149" width="0.1415%" height="15" fill="rgb(229,88,8)"/><text x="18.7459%" y="159.50"></text></g><g><title>death_checking (623,947 samples, 0.12%)</title><rect x="18.7020%" y="165" width="0.1208%" height="15" fill="rgb(213,181,19)"/><text x="18.9520%" y="175.50"></text></g><g><title>eval_to_const_value_raw (533,338 samples, 0.10%)</title><rect x="19.3656%" y="85" width="0.1033%" height="15" fill="rgb(254,191,54)"/><text x="19.6156%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (607,368 samples, 0.12%)</title><rect x="19.3545%" y="101" width="0.1176%" height="15" fill="rgb(241,83,37)"/><text x="19.6045%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,268,686 samples, 0.44%)</title><rect x="19.0606%" y="133" width="0.4393%" height="15" fill="rgb(233,36,39)"/><text x="19.3106%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,254,666 samples, 0.44%)</title><rect x="19.0633%" y="117" width="0.4366%" height="15" fill="rgb(226,3,54)"/><text x="19.3133%" y="127.50"></text></g><g><title>param_env (745,896 samples, 0.14%)</title><rect x="19.5132%" y="133" width="0.1444%" height="15" fill="rgb(245,192,40)"/><text x="19.7632%" y="143.50"></text></g><g><title>crate_lints (5,797,772 samples, 1.12%)</title><rect x="18.8234%" y="149" width="1.1227%" height="15" fill="rgb(238,167,29)"/><text x="19.0734%" y="159.50"></text></g><g><title>type_of (1,436,827 samples, 0.28%)</title><rect x="19.6678%" y="133" width="0.2782%" height="15" fill="rgb(232,182,51)"/><text x="19.9178%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,114,854 samples, 0.22%)</title><rect x="19.7301%" y="117" width="0.2159%" height="15" fill="rgb(231,60,39)"/><text x="19.9801%" y="127.50"></text></g><g><title>lint_checking (7,309,998 samples, 1.42%)</title><rect x="18.8229%" y="165" width="1.4155%" height="15" fill="rgb(208,69,12)"/><text x="19.0729%" y="175.50"></text></g><g><title>module_lints (1,509,666 samples, 0.29%)</title><rect x="19.9460%" y="149" width="0.2923%" height="15" fill="rgb(235,93,37)"/><text x="20.1960%" y="159.50"></text></g><g><title>lint_mod (1,502,336 samples, 0.29%)</title><rect x="19.9474%" y="133" width="0.2909%" height="15" fill="rgb(213,116,39)"/><text x="20.1974%" y="143.50"></text></g><g><title>layout_of (780,778 samples, 0.15%)</title><rect x="20.0872%" y="117" width="0.1512%" height="15" fill="rgb(222,207,29)"/><text x="20.3372%" y="127.50"></text></g><g><title>layout_of (763,858 samples, 0.15%)</title><rect x="20.0904%" y="101" width="0.1479%" height="15" fill="rgb(206,96,30)"/><text x="20.3404%" y="111.50"></text></g><g><title>layout_of (662,947 samples, 0.13%)</title><rect x="20.1100%" y="85" width="0.1284%" height="15" fill="rgb(218,138,4)"/><text x="20.3600%" y="95.50"></text></g><g><title>privacy_checking_modules (1,277,754 samples, 0.25%)</title><rect x="20.3039%" y="165" width="0.2474%" height="15" fill="rgb(250,191,14)"/><text x="20.5539%" y="175.50"></text></g><g><title>check_mod_privacy (1,273,634 samples, 0.25%)</title><rect x="20.3047%" y="149" width="0.2466%" height="15" fill="rgb(239,60,40)"/><text x="20.5547%" y="159.50"></text></g><g><title>misc_checking_3 (9,906,577 samples, 1.92%)</title><rect x="18.6374%" y="181" width="1.9183%" height="15" fill="rgb(206,27,48)"/><text x="18.8874%" y="191.50">m..</text></g><g><title>impl_parent (1,731,711 samples, 0.34%)</title><rect x="20.9838%" y="117" width="0.3353%" height="15" fill="rgb(225,35,8)"/><text x="21.2338%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,004,762 samples, 0.19%)</title><rect x="21.1245%" y="101" width="0.1946%" height="15" fill="rgb(250,213,24)"/><text x="21.3745%" y="111.50"></text></g><g><title>impl_trait_ref (4,183,768 samples, 0.81%)</title><rect x="21.3191%" y="117" width="0.8101%" height="15" fill="rgb(247,123,22)"/><text x="21.5691%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,647,982 samples, 0.71%)</title><rect x="21.4228%" y="101" width="0.7064%" height="15" fill="rgb(231,138,38)"/><text x="21.6728%" y="111.50"></text></g><g><title>coherent_trait (8,507,322 samples, 1.65%)</title><rect x="20.5805%" y="149" width="1.6473%" height="15" fill="rgb(231,145,46)"/><text x="20.8305%" y="159.50"></text></g><g><title>specialization_graph_of (8,493,302 samples, 1.64%)</title><rect x="20.5832%" y="133" width="1.6446%" height="15" fill="rgb(251,118,11)"/><text x="20.8332%" y="143.50"></text></g><g><title>coherence_checking (8,601,602 samples, 1.67%)</title><rect x="20.5772%" y="165" width="1.6656%" height="15" fill="rgb(217,147,25)"/><text x="20.8272%" y="175.50"></text></g><g><title>associated_item (548,523 samples, 0.11%)</title><rect x="29.0070%" y="101" width="0.1062%" height="15" fill="rgb(247,81,37)"/><text x="29.2570%" y="111.50"></text></g><g><title>associated_items (825,546 samples, 0.16%)</title><rect x="28.9615%" y="117" width="0.1599%" height="15" fill="rgb(209,12,38)"/><text x="29.2115%" y="127.50"></text></g><g><title>adt_dtorck_constraint (937,899 samples, 0.18%)</title><rect x="29.3566%" y="101" width="0.1816%" height="15" fill="rgb(227,1,9)"/><text x="29.6066%" y="111.50"></text></g><g><title>dropck_outlives (3,195,214 samples, 0.62%)</title><rect x="29.1372%" y="117" width="0.6187%" height="15" fill="rgb(248,47,43)"/><text x="29.3872%" y="127.50"></text></g><g><title>normalize_projection_ty (1,124,253 samples, 0.22%)</title><rect x="29.5382%" y="101" width="0.2177%" height="15" fill="rgb(221,10,30)"/><text x="29.7882%" y="111.50"></text></g><g><title>adt_sized_constraint (696,728 samples, 0.13%)</title><rect x="30.2928%" y="101" width="0.1349%" height="15" fill="rgb(210,229,1)"/><text x="30.5428%" y="111.50"></text></g><g><title>trait_impls_of (678,369 samples, 0.13%)</title><rect x="30.5466%" y="101" width="0.1314%" height="15" fill="rgb(222,148,37)"/><text x="30.7966%" y="111.50"></text></g><g><title>evaluate_obligation (4,763,496 samples, 0.92%)</title><rect x="29.7559%" y="117" width="0.9224%" height="15" fill="rgb(234,67,33)"/><text x="30.0059%" y="127.50"></text></g><g><title>method_autoderef_steps (816,123 samples, 0.16%)</title><rect x="30.8665%" y="117" width="0.1580%" height="15" fill="rgb(247,98,35)"/><text x="31.1165%" y="127.50"></text></g><g><title>predicates_of (613,805 samples, 0.12%)</title><rect x="31.0617%" y="117" width="0.1189%" height="15" fill="rgb(247,138,52)"/><text x="31.3117%" y="127.50"></text></g><g><title>typeck (2,253,605 samples, 0.44%)</title><rect x="31.2482%" y="117" width="0.4364%" height="15" fill="rgb(213,79,30)"/><text x="31.4982%" y="127.50"></text></g><g><title>item_bodies_checking (48,833,505 samples, 9.46%)</title><rect x="22.2489%" y="165" width="9.4559%" height="15" fill="rgb(246,177,23)"/><text x="22.4989%" y="175.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (48,829,165 samples, 9.46%)</title><rect x="22.2497%" y="149" width="9.4551%" height="15" fill="rgb(230,62,27)"/><text x="22.4997%" y="159.50">typeck_item_bo..</text></g><g><title>typeck (48,725,805 samples, 9.44%)</title><rect x="22.2697%" y="133" width="9.4351%" height="15" fill="rgb(216,154,8)"/><text x="22.5197%" y="143.50">typeck</text></g><g><title>impl_trait_ref (576,825 samples, 0.11%)</title><rect x="33.0117%" y="101" width="0.1117%" height="15" fill="rgb(244,35,45)"/><text x="33.2617%" y="111.50"></text></g><g><title>evaluate_obligation (1,956,221 samples, 0.38%)</title><rect x="32.8447%" y="117" width="0.3788%" height="15" fill="rgb(251,115,12)"/><text x="33.0947%" y="127.50"></text></g><g><title>item_types_checking (8,222,849 samples, 1.59%)</title><rect x="31.7048%" y="165" width="1.5922%" height="15" fill="rgb(240,54,50)"/><text x="31.9548%" y="175.50"></text></g><g><title>check_mod_item_types (8,215,349 samples, 1.59%)</title><rect x="31.7063%" y="149" width="1.5908%" height="15" fill="rgb(233,84,52)"/><text x="31.9563%" y="159.50"></text></g><g><title>typeck (6,679,473 samples, 1.29%)</title><rect x="32.0037%" y="133" width="1.2934%" height="15" fill="rgb(207,117,47)"/><text x="32.2537%" y="143.50"></text></g><g><title>fn_sig (677,389 samples, 0.13%)</title><rect x="33.3707%" y="133" width="0.1312%" height="15" fill="rgb(249,43,39)"/><text x="33.6207%" y="143.50"></text></g><g><title>generics_of (606,797 samples, 0.12%)</title><rect x="33.5019%" y="133" width="0.1175%" height="15" fill="rgb(209,38,44)"/><text x="33.7519%" y="143.50"></text></g><g><title>predicates_of (879,891 samples, 0.17%)</title><rect x="33.6246%" y="133" width="0.1704%" height="15" fill="rgb(236,212,23)"/><text x="33.8746%" y="143.50"></text></g><g><title>predicates_defined_on (815,921 samples, 0.16%)</title><rect x="33.6370%" y="117" width="0.1580%" height="15" fill="rgb(242,79,21)"/><text x="33.8870%" y="127.50"></text></g><g><title>type_collecting (2,855,611 samples, 0.55%)</title><rect x="33.2986%" y="165" width="0.5529%" height="15" fill="rgb(211,96,35)"/><text x="33.5486%" y="175.50"></text></g><g><title>collect_mod_item_types (2,838,701 samples, 0.55%)</title><rect x="33.3019%" y="149" width="0.5497%" height="15" fill="rgb(253,215,40)"/><text x="33.5519%" y="159.50"></text></g><g><title>evaluate_obligation (802,419 samples, 0.16%)</title><rect x="34.2405%" y="133" width="0.1554%" height="15" fill="rgb(211,81,21)"/><text x="34.4905%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,966,331 samples, 0.77%)</title><rect x="33.9027%" y="149" width="0.7680%" height="15" fill="rgb(208,190,38)"/><text x="34.1527%" y="159.50"></text></g><g><title>evaluate_obligation (857,641 samples, 0.17%)</title><rect x="34.9631%" y="133" width="0.1661%" height="15" fill="rgb(235,213,38)"/><text x="35.2131%" y="143.50"></text></g><g><title>check_item_well_formed (3,490,118 samples, 0.68%)</title><rect x="34.6707%" y="149" width="0.6758%" height="15" fill="rgb(237,122,38)"/><text x="34.9207%" y="159.50"></text></g><g><title>analysis (135,771,350 samples, 26.29%)</title><rect x="9.2975%" y="197" width="26.2902%" height="15" fill="rgb(244,218,35)"/><text x="9.5475%" y="207.50">analysis</text></g><g><title>type_check_crate (77,630,435 samples, 15.03%)</title><rect x="20.5556%" y="181" width="15.0320%" height="15" fill="rgb(240,68,47)"/><text x="20.8056%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,959,447 samples, 1.73%)</title><rect x="33.8528%" y="165" width="1.7349%" height="15" fill="rgb(210,16,53)"/><text x="34.1028%" y="175.50"></text></g><g><title>check_trait_item_well_formed (1,245,514 samples, 0.24%)</title><rect x="35.3465%" y="149" width="0.2412%" height="15" fill="rgb(235,124,12)"/><text x="35.5965%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (815,539 samples, 0.16%)</title><rect x="41.2689%" y="165" width="0.1579%" height="15" fill="rgb(224,169,11)"/><text x="41.5189%" y="175.50"></text></g><g><title>layout_of (744,248 samples, 0.14%)</title><rect x="41.8112%" y="149" width="0.1441%" height="15" fill="rgb(250,166,2)"/><text x="42.0612%" y="159.50"></text></g><g><title>param_env (1,121,360 samples, 0.22%)</title><rect x="41.9553%" y="149" width="0.2171%" height="15" fill="rgb(242,216,29)"/><text x="42.2053%" y="159.50"></text></g><g><title>fn_abi_of_instance (3,861,464 samples, 0.75%)</title><rect x="41.4650%" y="165" width="0.7477%" height="15" fill="rgb(230,116,27)"/><text x="41.7150%" y="175.50"></text></g><g><title>layout_of (846,314 samples, 0.16%)</title><rect x="42.2893%" y="165" width="0.1639%" height="15" fill="rgb(228,99,48)"/><text x="42.5393%" y="175.50"></text></g><g><title>symbol_name (594,396 samples, 0.12%)</title><rect x="42.4569%" y="165" width="0.1151%" height="15" fill="rgb(253,11,6)"/><text x="42.7069%" y="175.50"></text></g><g><title>codegen_module (34,100,698 samples, 6.60%)</title><rect x="35.9813%" y="181" width="6.6031%" height="15" fill="rgb(247,143,39)"/><text x="36.2313%" y="191.50">codegen_m..</text></g><g><title>codegen_crate (36,256,210 samples, 7.02%)</title><rect x="35.5895%" y="197" width="7.0205%" height="15" fill="rgb(236,97,10)"/><text x="35.8395%" y="207.50">codegen_c..</text></g><g><title>LLVM_module_codegen (155,918,401 samples, 30.19%)</title><rect x="42.6511%" y="181" width="30.1914%" height="15" fill="rgb(233,208,19)"/><text x="42.9011%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (146,966,322 samples, 28.46%)</title><rect x="44.3845%" y="165" width="28.4580%" height="15" fill="rgb(216,164,2)"/><text x="44.6345%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (160,683,803 samples, 31.11%)</title><rect x="42.6100%" y="197" width="31.1142%" height="15" fill="rgb(220,129,5)"/><text x="42.8600%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,553,510 samples, 0.88%)</title><rect x="72.8425%" y="181" width="0.8817%" height="15" fill="rgb(242,17,10)"/><text x="73.0925%" y="191.50"></text></g><g><title>metadata_load_macro (2,033,661 samples, 0.39%)</title><rect x="83.3678%" y="149" width="0.3938%" height="15" fill="rgb(242,107,0)"/><text x="83.6178%" y="159.50"></text></g><g><title>metadata_register_crate (23,230,671 samples, 4.50%)</title><rect x="83.7615%" y="149" width="4.4983%" height="15" fill="rgb(251,28,31)"/><text x="84.0115%" y="159.50">metad..</text></g><g><title>metadata_register_crate (20,539,852 samples, 3.98%)</title><rect x="84.2826%" y="133" width="3.9773%" height="15" fill="rgb(233,223,10)"/><text x="84.5326%" y="143.50">meta..</text></g><g><title>metadata_register_crate (13,022,771 samples, 2.52%)</title><rect x="85.7382%" y="117" width="2.5217%" height="15" fill="rgb(215,21,27)"/><text x="85.9882%" y="127.50">me..</text></g><g><title>metadata_register_crate (5,708,131 samples, 1.11%)</title><rect x="87.1545%" y="101" width="1.1053%" height="15" fill="rgb(232,23,21)"/><text x="87.4045%" y="111.50"></text></g><g><title>metadata_register_crate (5,014,354 samples, 0.97%)</title><rect x="87.2889%" y="85" width="0.9710%" height="15" fill="rgb(244,5,23)"/><text x="87.5389%" y="95.50"></text></g><g><title>macro_expand_crate (74,777,194 samples, 14.48%)</title><rect x="73.8230%" y="181" width="14.4796%" height="15" fill="rgb(226,81,46)"/><text x="74.0730%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (74,763,554 samples, 14.48%)</title><rect x="73.8256%" y="165" width="14.4769%" height="15" fill="rgb(247,70,30)"/><text x="74.0756%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (2,846,840 samples, 0.55%)</title><rect x="88.3853%" y="165" width="0.5513%" height="15" fill="rgb(212,68,19)"/><text x="88.6353%" y="175.50"></text></g><g><title>configure_and_expand (78,954,819 samples, 15.29%)</title><rect x="73.7242%" y="197" width="15.2885%" height="15" fill="rgb(240,187,13)"/><text x="73.9742%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,598,048 samples, 0.70%)</title><rect x="88.3160%" y="181" width="0.6967%" height="15" fill="rgb(223,113,26)"/><text x="88.5660%" y="191.50"></text></g><g><title>free_global_ctxt (6,231,837 samples, 1.21%)</title><rect x="89.1594%" y="197" width="1.2067%" height="15" fill="rgb(206,192,2)"/><text x="89.4094%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,773,672 samples, 0.34%)</title><rect x="91.7288%" y="101" width="0.3434%" height="15" fill="rgb(241,108,4)"/><text x="91.9788%" y="111.50"></text></g><g><title>eval_to_const_value_raw (675,486 samples, 0.13%)</title><rect x="92.1495%" y="85" width="0.1308%" height="15" fill="rgb(247,173,49)"/><text x="92.3995%" y="95.50"></text></g><g><title>eval_to_const_value_raw (650,405 samples, 0.13%)</title><rect x="92.1543%" y="69" width="0.1259%" height="15" fill="rgb(224,114,35)"/><text x="92.4043%" y="79.50"></text></g><g><title>eval_to_allocation_raw (616,294 samples, 0.12%)</title><rect x="92.1610%" y="53" width="0.1193%" height="15" fill="rgb(245,159,27)"/><text x="92.4110%" y="63.50"></text></g><g><title>optimized_mir (5,286,960 samples, 1.02%)</title><rect x="91.2598%" y="117" width="1.0237%" height="15" fill="rgb(245,172,44)"/><text x="91.5098%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (772,859 samples, 0.15%)</title><rect x="92.1339%" y="101" width="0.1497%" height="15" fill="rgb(236,23,11)"/><text x="92.3839%" y="111.50"></text></g><g><title>specialization_graph_of (1,021,382 samples, 0.20%)</title><rect x="92.4544%" y="101" width="0.1978%" height="15" fill="rgb(205,117,38)"/><text x="92.7044%" y="111.50"></text></g><g><title>resolve_instance (1,970,972 samples, 0.38%)</title><rect x="92.2835%" y="117" width="0.3817%" height="15" fill="rgb(237,72,25)"/><text x="92.5335%" y="127.50"></text></g><g><title>upstream_drop_glue_for (1,815,370 samples, 0.35%)</title><rect x="92.7047%" y="117" width="0.3515%" height="15" fill="rgb(244,70,9)"/><text x="92.9547%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,810,670 samples, 0.35%)</title><rect x="92.7056%" y="101" width="0.3506%" height="15" fill="rgb(217,125,39)"/><text x="92.9556%" y="111.50"></text></g><g><title>upstream_monomorphizations (1,807,580 samples, 0.35%)</title><rect x="92.7062%" y="85" width="0.3500%" height="15" fill="rgb(235,36,10)"/><text x="92.9562%" y="95.50"></text></g><g><title>exported_symbols (1,482,846 samples, 0.29%)</title><rect x="92.7690%" y="69" width="0.2871%" height="15" fill="rgb(251,123,47)"/><text x="93.0190%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,473,926 samples, 0.29%)</title><rect x="92.7708%" y="53" width="0.2854%" height="15" fill="rgb(221,13,13)"/><text x="93.0208%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (11,711,606 samples, 2.27%)</title><rect x="90.8818%" y="133" width="2.2678%" height="15" fill="rgb(238,131,9)"/><text x="91.1318%" y="143.50">m..</text></g><g><title>monomorphization_collector (11,829,927 samples, 2.29%)</title><rect x="90.8808%" y="149" width="2.2907%" height="15" fill="rgb(211,50,8)"/><text x="91.1308%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (718,988 samples, 0.14%)</title><rect x="93.1725%" y="133" width="0.1392%" height="15" fill="rgb(245,182,24)"/><text x="93.4225%" y="143.50"></text></g><g><title>symbol_name (641,447 samples, 0.12%)</title><rect x="93.1875%" y="117" width="0.1242%" height="15" fill="rgb(242,14,37)"/><text x="93.4375%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (12,949,929 samples, 2.51%)</title><rect x="90.8749%" y="165" width="2.5076%" height="15" fill="rgb(246,228,12)"/><text x="91.1249%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,089,262 samples, 0.21%)</title><rect x="93.1715%" y="149" width="0.2109%" height="15" fill="rgb(213,55,15)"/><text x="93.4215%" y="159.50"></text></g><g><title>exported_symbols (13,148,451 samples, 2.55%)</title><rect x="90.8647%" y="181" width="2.5460%" height="15" fill="rgb(209,9,3)"/><text x="91.1147%" y="191.50">ex..</text></g><g><title>layout_of (636,676 samples, 0.12%)</title><rect x="94.0937%" y="149" width="0.1233%" height="15" fill="rgb(230,59,30)"/><text x="94.3437%" y="159.50"></text></g><g><title>layout_of (1,408,014 samples, 0.27%)</title><rect x="93.9601%" y="165" width="0.2726%" height="15" fill="rgb(209,121,21)"/><text x="94.2101%" y="175.50"></text></g><g><title>needs_drop_raw (1,092,552 samples, 0.21%)</title><rect x="95.0309%" y="149" width="0.2116%" height="15" fill="rgb(220,109,13)"/><text x="95.2809%" y="159.50"></text></g><g><title>is_copy_raw (971,600 samples, 0.19%)</title><rect x="95.0543%" y="133" width="0.1881%" height="15" fill="rgb(232,18,1)"/><text x="95.3043%" y="143.50"></text></g><g><title>evaluate_obligation (807,816 samples, 0.16%)</title><rect x="95.0860%" y="117" width="0.1564%" height="15" fill="rgb(215,41,42)"/><text x="95.3360%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,266,021 samples, 1.02%)</title><rect x="94.2327%" y="165" width="1.0197%" height="15" fill="rgb(224,123,36)"/><text x="94.4827%" y="175.50"></text></g><g><title>optimized_mir (9,509,821 samples, 1.84%)</title><rect x="93.4372%" y="181" width="1.8414%" height="15" fill="rgb(240,125,3)"/><text x="93.6872%" y="191.50">o..</text></g><g><title>generate_crate_metadata (25,703,817 samples, 4.98%)</title><rect x="90.3661%" y="197" width="4.9772%" height="15" fill="rgb(205,98,50)"/><text x="90.6161%" y="207.50">genera..</text></g><g><title>hir_lowering (4,114,524 samples, 0.80%)</title><rect x="95.3433%" y="197" width="0.7967%" height="15" fill="rgb(205,185,37)"/><text x="95.5933%" y="207.50"></text></g><g><title>finish_ongoing_codegen (15,187,763 samples, 2.94%)</title><rect x="96.1431%" y="181" width="2.9409%" height="15" fill="rgb(238,207,15)"/><text x="96.3931%" y="191.50">fi..</text></g><g><title>link_crate (2,087,072 samples, 0.40%)</title><rect x="99.0840%" y="181" width="0.4041%" height="15" fill="rgb(213,199,42)"/><text x="99.3340%" y="191.50"></text></g><g><title>link_binary (2,055,342 samples, 0.40%)</title><rect x="99.0901%" y="165" width="0.3980%" height="15" fill="rgb(235,201,11)"/><text x="99.3401%" y="175.50"></text></g><g><title>link_rlib (1,457,095 samples, 0.28%)</title><rect x="99.2060%" y="149" width="0.2821%" height="15" fill="rgb(207,46,11)"/><text x="99.4560%" y="159.50"></text></g><g><title>link (17,302,685 samples, 3.35%)</title><rect x="96.1400%" y="197" width="3.3504%" height="15" fill="rgb(241,35,35)"/><text x="96.3900%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (1,662,759 samples, 0.32%)</title><rect x="99.5826%" y="197" width="0.3220%" height="15" fill="rgb(243,32,47)"/><text x="99.8326%" y="207.50"></text></g><g><title>all (516,433,129 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (516,433,129 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>