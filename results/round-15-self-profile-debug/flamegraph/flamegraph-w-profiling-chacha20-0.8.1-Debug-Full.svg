<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,401,944 samples, 1.77%)</title><rect x="0.4568%" y="213" width="1.7658%" height="15" fill="rgb(227,0,7)"/><text x="0.7068%" y="223.50"></text></g><g><title>mir_promoted (687,915 samples, 0.28%)</title><rect x="10.7464%" y="149" width="0.2760%" height="15" fill="rgb(217,0,24)"/><text x="10.9964%" y="159.50"></text></g><g><title>mir_const_qualif_const_arg (577,044 samples, 0.23%)</title><rect x="10.7909%" y="133" width="0.2315%" height="15" fill="rgb(221,193,54)"/><text x="11.0409%" y="143.50"></text></g><g><title>mir_const (491,532 samples, 0.20%)</title><rect x="10.8252%" y="117" width="0.1972%" height="15" fill="rgb(248,212,6)"/><text x="11.0752%" y="127.50"></text></g><g><title>unsafety_check_result_for_const_arg (313,832 samples, 0.13%)</title><rect x="10.8964%" y="101" width="0.1259%" height="15" fill="rgb(208,68,35)"/><text x="11.1464%" y="111.50"></text></g><g><title>mir_built (272,031 samples, 0.11%)</title><rect x="10.9132%" y="85" width="0.1091%" height="15" fill="rgb(232,128,0)"/><text x="11.1632%" y="95.50"></text></g><g><title>mir_borrowck_const_arg (1,684,718 samples, 0.68%)</title><rect x="10.3482%" y="165" width="0.6758%" height="15" fill="rgb(207,160,47)"/><text x="10.5982%" y="175.50"></text></g><g><title>param_env (537,353 samples, 0.22%)</title><rect x="11.9954%" y="133" width="0.2156%" height="15" fill="rgb(228,23,34)"/><text x="12.2454%" y="143.50"></text></g><g><title>item_attrs (405,406 samples, 0.16%)</title><rect x="12.6382%" y="101" width="0.1626%" height="15" fill="rgb(218,30,26)"/><text x="12.8882%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (393,736 samples, 0.16%)</title><rect x="12.6429%" y="85" width="0.1579%" height="15" fill="rgb(220,122,19)"/><text x="12.8929%" y="95.50"></text></g><g><title>codegen_fn_attrs (638,238 samples, 0.26%)</title><rect x="12.5568%" y="117" width="0.2560%" height="15" fill="rgb(250,228,42)"/><text x="12.8068%" y="127.50"></text></g><g><title>is_copy_raw (326,615 samples, 0.13%)</title><rect x="14.7552%" y="101" width="0.1310%" height="15" fill="rgb(240,193,28)"/><text x="15.0052%" y="111.50"></text></g><g><title>evaluate_obligation (259,425 samples, 0.10%)</title><rect x="14.7822%" y="85" width="0.1041%" height="15" fill="rgb(216,20,37)"/><text x="15.0322%" y="95.50"></text></g><g><title>adt_drop_tys (290,392 samples, 0.12%)</title><rect x="14.9609%" y="85" width="0.1165%" height="15" fill="rgb(206,188,39)"/><text x="15.2109%" y="95.50"></text></g><g><title>is_copy_raw (1,531,704 samples, 0.61%)</title><rect x="15.0773%" y="85" width="0.6144%" height="15" fill="rgb(217,207,13)"/><text x="15.3273%" y="95.50"></text></g><g><title>evaluate_obligation (1,357,842 samples, 0.54%)</title><rect x="15.1471%" y="69" width="0.5447%" height="15" fill="rgb(231,73,38)"/><text x="15.3971%" y="79.50"></text></g><g><title>needs_drop_raw (2,013,937 samples, 0.81%)</title><rect x="14.8863%" y="101" width="0.8079%" height="15" fill="rgb(225,20,46)"/><text x="15.1363%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (731,250 samples, 0.29%)</title><rect x="15.8419%" y="85" width="0.2933%" height="15" fill="rgb(210,31,41)"/><text x="16.0919%" y="95.50"></text></g><g><title>impl_parent (383,312 samples, 0.15%)</title><rect x="16.4320%" y="69" width="0.1538%" height="15" fill="rgb(221,200,47)"/><text x="16.6820%" y="79.50"></text></g><g><title>specialization_graph_of (1,787,145 samples, 0.72%)</title><rect x="16.1758%" y="85" width="0.7169%" height="15" fill="rgb(226,26,5)"/><text x="16.4258%" y="95.50"></text></g><g><title>impl_trait_ref (765,197 samples, 0.31%)</title><rect x="16.5858%" y="69" width="0.3070%" height="15" fill="rgb(249,33,26)"/><text x="16.8358%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (629,687 samples, 0.25%)</title><rect x="16.6402%" y="53" width="0.2526%" height="15" fill="rgb(235,183,28)"/><text x="16.8902%" y="63.50"></text></g><g><title>resolve_instance (3,161,892 samples, 1.27%)</title><rect x="15.6941%" y="101" width="1.2684%" height="15" fill="rgb(221,5,38)"/><text x="15.9441%" y="111.50"></text></g><g><title>thir_body (2,072,276 samples, 0.83%)</title><rect x="16.9761%" y="101" width="0.8313%" height="15" fill="rgb(247,18,42)"/><text x="17.2261%" y="111.50"></text></g><g><title>mir_const (15,709,416 samples, 6.30%)</title><rect x="11.5140%" y="149" width="6.3017%" height="15" fill="rgb(241,131,45)"/><text x="11.7640%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (13,972,162 samples, 5.60%)</title><rect x="12.2109%" y="133" width="5.6048%" height="15" fill="rgb(249,31,29)"/><text x="12.4609%" y="143.50">unsafet..</text></g><g><title>mir_built (12,471,683 samples, 5.00%)</title><rect x="12.8128%" y="117" width="5.0029%" height="15" fill="rgb(225,111,53)"/><text x="13.0628%" y="127.50">mir_bu..</text></g><g><title>mir_const (391,293 samples, 0.16%)</title><rect x="17.9844%" y="133" width="0.1570%" height="15" fill="rgb(238,160,17)"/><text x="18.2344%" y="143.50"></text></g><g><title>unsafety_check_result (285,502 samples, 0.11%)</title><rect x="18.0268%" y="117" width="0.1145%" height="15" fill="rgb(214,148,48)"/><text x="18.2768%" y="127.50"></text></g><g><title>mir_const_qualif (841,619 samples, 0.34%)</title><rect x="17.8158%" y="149" width="0.3376%" height="15" fill="rgb(232,36,49)"/><text x="18.0658%" y="159.50"></text></g><g><title>mir_promoted (17,773,257 samples, 7.13%)</title><rect x="11.0241%" y="165" width="7.1296%" height="15" fill="rgb(209,103,24)"/><text x="11.2741%" y="175.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (525,713 samples, 0.21%)</title><rect x="18.1547%" y="165" width="0.2109%" height="15" fill="rgb(229,88,8)"/><text x="18.4047%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (3,084,958 samples, 1.24%)</title><rect x="18.3656%" y="165" width="1.2375%" height="15" fill="rgb(213,181,19)"/><text x="18.6156%" y="175.50"></text></g><g><title>normalize_projection_ty (2,243,358 samples, 0.90%)</title><rect x="18.7032%" y="149" width="0.8999%" height="15" fill="rgb(254,191,54)"/><text x="18.9532%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,523,184 samples, 1.81%)</title><rect x="19.7583%" y="165" width="1.8144%" height="15" fill="rgb(241,83,37)"/><text x="20.0083%" y="175.50">t..</text></g><g><title>evaluate_obligation (293,871 samples, 0.12%)</title><rect x="21.4548%" y="149" width="0.1179%" height="15" fill="rgb(233,36,39)"/><text x="21.7048%" y="159.50"></text></g><g><title>MIR_borrow_checking (47,790,240 samples, 19.17%)</title><rect x="2.4045%" y="197" width="19.1708%" height="15" fill="rgb(226,3,54)"/><text x="2.6545%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,553,038 samples, 19.08%)</title><rect x="2.4997%" y="181" width="19.0756%" height="15" fill="rgb(245,192,40)"/><text x="2.7497%" y="191.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (258,343 samples, 0.10%)</title><rect x="21.7476%" y="165" width="0.1036%" height="15" fill="rgb(238,167,29)"/><text x="21.9976%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (502,155 samples, 0.20%)</title><rect x="21.6506%" y="181" width="0.2014%" height="15" fill="rgb(232,182,51)"/><text x="21.9006%" y="191.50"></text></g><g><title>MIR_effect_checking (696,947 samples, 0.28%)</title><rect x="21.5753%" y="197" width="0.2796%" height="15" fill="rgb(231,60,39)"/><text x="21.8253%" y="207.50"></text></g><g><title>hir_module_items (324,263 samples, 0.13%)</title><rect x="21.8548%" y="197" width="0.1301%" height="15" fill="rgb(208,69,12)"/><text x="22.1048%" y="207.50"></text></g><g><title>fn_sig (291,384 samples, 0.12%)</title><rect x="22.2283%" y="149" width="0.1169%" height="15" fill="rgb(235,93,37)"/><text x="22.4783%" y="159.50"></text></g><g><title>codegen_fn_attrs (689,486 samples, 0.28%)</title><rect x="22.1765%" y="165" width="0.2766%" height="15" fill="rgb(213,116,39)"/><text x="22.4265%" y="175.50"></text></g><g><title>check_mod_attrs (1,124,802 samples, 0.45%)</title><rect x="22.0019%" y="181" width="0.4512%" height="15" fill="rgb(222,207,29)"/><text x="22.2519%" y="191.50"></text></g><g><title>mir_borrowck (462,245 samples, 0.19%)</title><rect x="23.0306%" y="53" width="0.1854%" height="15" fill="rgb(206,96,30)"/><text x="23.2806%" y="63.50"></text></g><g><title>mir_for_ctfe (608,666 samples, 0.24%)</title><rect x="22.9723%" y="85" width="0.2442%" height="15" fill="rgb(218,138,4)"/><text x="23.2223%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (564,296 samples, 0.23%)</title><rect x="22.9901%" y="69" width="0.2264%" height="15" fill="rgb(250,191,14)"/><text x="23.2401%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,779,907 samples, 0.71%)</title><rect x="22.8233%" y="133" width="0.7140%" height="15" fill="rgb(239,60,40)"/><text x="23.0733%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,761,637 samples, 0.71%)</title><rect x="22.8307%" y="117" width="0.7067%" height="15" fill="rgb(206,27,48)"/><text x="23.0807%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,757,987 samples, 0.71%)</title><rect x="22.8321%" y="101" width="0.7052%" height="15" fill="rgb(225,35,8)"/><text x="23.0821%" y="111.50"></text></g><g><title>typeck (584,936 samples, 0.23%)</title><rect x="23.3027%" y="85" width="0.2346%" height="15" fill="rgb(250,213,24)"/><text x="23.5527%" y="95.50"></text></g><g><title>is_copy_raw (2,187,042 samples, 0.88%)</title><rect x="22.7042%" y="165" width="0.8773%" height="15" fill="rgb(247,123,22)"/><text x="22.9542%" y="175.50"></text></g><g><title>evaluate_obligation (2,162,852 samples, 0.87%)</title><rect x="22.7139%" y="149" width="0.8676%" height="15" fill="rgb(231,138,38)"/><text x="22.9639%" y="159.50"></text></g><g><title>predicates_of (452,634 samples, 0.18%)</title><rect x="23.7698%" y="149" width="0.1816%" height="15" fill="rgb(231,145,46)"/><text x="24.0198%" y="159.50"></text></g><g><title>predicates_defined_on (449,874 samples, 0.18%)</title><rect x="23.7709%" y="133" width="0.1805%" height="15" fill="rgb(251,118,11)"/><text x="24.0209%" y="143.50"></text></g><g><title>inferred_outlives_of (347,603 samples, 0.14%)</title><rect x="23.8119%" y="117" width="0.1394%" height="15" fill="rgb(217,147,25)"/><text x="24.0619%" y="127.50"></text></g><g><title>inferred_outlives_crate (339,603 samples, 0.14%)</title><rect x="23.8152%" y="101" width="0.1362%" height="15" fill="rgb(247,81,37)"/><text x="24.0652%" y="111.50"></text></g><g><title>param_env (644,376 samples, 0.26%)</title><rect x="23.7063%" y="165" width="0.2585%" height="15" fill="rgb(209,12,38)"/><text x="23.9563%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (3,501,884 samples, 1.40%)</title><rect x="22.5954%" y="181" width="1.4048%" height="15" fill="rgb(227,1,9)"/><text x="22.8454%" y="191.50"></text></g><g><title>misc_checking_1 (5,121,491 samples, 2.05%)</title><rect x="21.9850%" y="197" width="2.0545%" height="15" fill="rgb(248,47,43)"/><text x="22.2350%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (908,989 samples, 0.36%)</title><rect x="24.0402%" y="181" width="0.3646%" height="15" fill="rgb(221,10,30)"/><text x="24.2902%" y="191.50"></text></g><g><title>check_mod_liveness (727,837 samples, 0.29%)</title><rect x="24.1128%" y="165" width="0.2920%" height="15" fill="rgb(210,229,1)"/><text x="24.3628%" y="175.50"></text></g><g><title>misc_checking_2 (1,742,817 samples, 0.70%)</title><rect x="24.0395%" y="197" width="0.6991%" height="15" fill="rgb(222,148,37)"/><text x="24.2895%" y="207.50"></text></g><g><title>match_checking (832,198 samples, 0.33%)</title><rect x="24.4048%" y="181" width="0.3338%" height="15" fill="rgb(234,67,33)"/><text x="24.6548%" y="191.50"></text></g><g><title>check_match (771,938 samples, 0.31%)</title><rect x="24.4290%" y="165" width="0.3097%" height="15" fill="rgb(247,98,35)"/><text x="24.6790%" y="175.50"></text></g><g><title>check_private_in_public (394,594 samples, 0.16%)</title><rect x="24.7429%" y="181" width="0.1583%" height="15" fill="rgb(247,138,52)"/><text x="24.9929%" y="191.50"></text></g><g><title>death_checking (795,438 samples, 0.32%)</title><rect x="24.9012%" y="181" width="0.3191%" height="15" fill="rgb(213,79,30)"/><text x="25.1512%" y="191.50"></text></g><g><title>eval_to_const_value_raw (273,811 samples, 0.11%)</title><rect x="25.6667%" y="149" width="0.1098%" height="15" fill="rgb(246,177,23)"/><text x="25.9167%" y="159.50"></text></g><g><title>eval_to_const_value_raw (267,461 samples, 0.11%)</title><rect x="25.6692%" y="133" width="0.1073%" height="15" fill="rgb(230,62,27)"/><text x="25.9192%" y="143.50"></text></g><g><title>eval_to_allocation_raw (256,471 samples, 0.10%)</title><rect x="25.6737%" y="117" width="0.1029%" height="15" fill="rgb(216,154,8)"/><text x="25.9237%" y="127.50"></text></g><g><title>param_env (815,388 samples, 0.33%)</title><rect x="25.7765%" y="149" width="0.3271%" height="15" fill="rgb(244,35,45)"/><text x="26.0265%" y="159.50"></text></g><g><title>predicates_of (367,633 samples, 0.15%)</title><rect x="25.9562%" y="133" width="0.1475%" height="15" fill="rgb(251,115,12)"/><text x="26.2062%" y="143.50"></text></g><g><title>predicates_defined_on (303,392 samples, 0.12%)</title><rect x="25.9819%" y="117" width="0.1217%" height="15" fill="rgb(240,54,50)"/><text x="26.2319%" y="127.50"></text></g><g><title>crate_lints (2,896,019 samples, 1.16%)</title><rect x="25.2209%" y="165" width="1.1617%" height="15" fill="rgb(233,84,52)"/><text x="25.4709%" y="175.50"></text></g><g><title>type_of (685,108 samples, 0.27%)</title><rect x="26.1078%" y="149" width="0.2748%" height="15" fill="rgb(207,117,47)"/><text x="26.3578%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (373,544 samples, 0.15%)</title><rect x="26.2328%" y="133" width="0.1498%" height="15" fill="rgb(249,43,39)"/><text x="26.4828%" y="143.50"></text></g><g><title>lint_checking (3,770,728 samples, 1.51%)</title><rect x="25.2203%" y="181" width="1.5126%" height="15" fill="rgb(209,38,44)"/><text x="25.4703%" y="191.50"></text></g><g><title>module_lints (873,109 samples, 0.35%)</title><rect x="26.3827%" y="165" width="0.3502%" height="15" fill="rgb(236,212,23)"/><text x="26.6327%" y="175.50"></text></g><g><title>lint_mod (863,799 samples, 0.35%)</title><rect x="26.3864%" y="149" width="0.3465%" height="15" fill="rgb(242,79,21)"/><text x="26.6364%" y="159.50"></text></g><g><title>privacy_access_levels (336,353 samples, 0.13%)</title><rect x="26.7329%" y="181" width="0.1349%" height="15" fill="rgb(211,96,35)"/><text x="26.9829%" y="191.50"></text></g><g><title>privacy_checking_modules (1,306,343 samples, 0.52%)</title><rect x="26.8678%" y="181" width="0.5240%" height="15" fill="rgb(253,215,40)"/><text x="27.1178%" y="191.50"></text></g><g><title>check_mod_privacy (1,298,323 samples, 0.52%)</title><rect x="26.8711%" y="165" width="0.5208%" height="15" fill="rgb(211,81,21)"/><text x="27.1211%" y="175.50"></text></g><g><title>misc_checking_3 (6,641,606 samples, 2.66%)</title><rect x="24.7386%" y="197" width="2.6642%" height="15" fill="rgb(208,190,38)"/><text x="24.9886%" y="207.50">mi..</text></g><g><title>impl_parent (579,046 samples, 0.23%)</title><rect x="28.0221%" y="133" width="0.2323%" height="15" fill="rgb(235,213,38)"/><text x="28.2721%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (360,484 samples, 0.14%)</title><rect x="28.1097%" y="117" width="0.1446%" height="15" fill="rgb(237,122,38)"/><text x="28.3597%" y="127.50"></text></g><g><title>impl_trait_ref (1,391,726 samples, 0.56%)</title><rect x="28.2543%" y="133" width="0.5583%" height="15" fill="rgb(244,218,35)"/><text x="28.5043%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,181,084 samples, 0.47%)</title><rect x="28.3388%" y="117" width="0.4738%" height="15" fill="rgb(240,68,47)"/><text x="28.5888%" y="127.50"></text></g><g><title>coherent_trait (3,301,723 samples, 1.32%)</title><rect x="27.5636%" y="165" width="1.3245%" height="15" fill="rgb(210,16,53)"/><text x="27.8136%" y="175.50"></text></g><g><title>specialization_graph_of (2,995,500 samples, 1.20%)</title><rect x="27.6865%" y="149" width="1.2016%" height="15" fill="rgb(235,124,12)"/><text x="27.9365%" y="159.50"></text></g><g><title>coherence_checking (3,380,253 samples, 1.36%)</title><rect x="27.5579%" y="181" width="1.3560%" height="15" fill="rgb(224,169,11)"/><text x="27.8079%" y="191.50"></text></g><g><title>associated_item (946,811 samples, 0.38%)</title><rect x="46.6890%" y="117" width="0.3798%" height="15" fill="rgb(250,166,2)"/><text x="46.9390%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (804,259 samples, 0.32%)</title><rect x="46.7462%" y="101" width="0.3226%" height="15" fill="rgb(242,216,29)"/><text x="46.9962%" y="111.50"></text></g><g><title>associated_items (1,298,943 samples, 0.52%)</title><rect x="46.5735%" y="133" width="0.5211%" height="15" fill="rgb(230,116,27)"/><text x="46.8235%" y="143.50"></text></g><g><title>adt_dtorck_constraint (258,873 samples, 0.10%)</title><rect x="47.2801%" y="117" width="0.1038%" height="15" fill="rgb(228,99,48)"/><text x="47.5301%" y="127.50"></text></g><g><title>dropck_outlives (725,637 samples, 0.29%)</title><rect x="47.1403%" y="133" width="0.2911%" height="15" fill="rgb(253,11,6)"/><text x="47.3903%" y="143.50"></text></g><g><title>mir_for_ctfe (251,102 samples, 0.10%)</title><rect x="47.5661%" y="85" width="0.1007%" height="15" fill="rgb(247,143,39)"/><text x="47.8161%" y="95.50"></text></g><g><title>eval_to_const_value_raw (600,266 samples, 0.24%)</title><rect x="47.4314%" y="133" width="0.2408%" height="15" fill="rgb(236,97,10)"/><text x="47.6814%" y="143.50"></text></g><g><title>eval_to_const_value_raw (595,295 samples, 0.24%)</title><rect x="47.4334%" y="117" width="0.2388%" height="15" fill="rgb(233,208,19)"/><text x="47.6834%" y="127.50"></text></g><g><title>eval_to_allocation_raw (584,615 samples, 0.23%)</title><rect x="47.4377%" y="101" width="0.2345%" height="15" fill="rgb(216,164,2)"/><text x="47.6877%" y="111.50"></text></g><g><title>generics_of (825,490 samples, 0.33%)</title><rect x="50.1628%" y="117" width="0.3311%" height="15" fill="rgb(220,129,5)"/><text x="50.4128%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (613,526 samples, 0.25%)</title><rect x="50.2478%" y="101" width="0.2461%" height="15" fill="rgb(242,17,10)"/><text x="50.4978%" y="111.50"></text></g><g><title>impl_trait_ref (1,056,718 samples, 0.42%)</title><rect x="50.5911%" y="117" width="0.4239%" height="15" fill="rgb(242,107,0)"/><text x="50.8411%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (853,906 samples, 0.34%)</title><rect x="50.6724%" y="101" width="0.3425%" height="15" fill="rgb(251,28,31)"/><text x="50.9224%" y="111.50"></text></g><g><title>predicates_of (1,159,552 samples, 0.47%)</title><rect x="51.0430%" y="117" width="0.4651%" height="15" fill="rgb(233,223,10)"/><text x="51.2930%" y="127.50"></text></g><g><title>predicates_defined_on (654,927 samples, 0.26%)</title><rect x="51.2454%" y="101" width="0.2627%" height="15" fill="rgb(215,21,27)"/><text x="51.4954%" y="111.50"></text></g><g><title>specializes (2,577,297 samples, 1.03%)</title><rect x="51.5081%" y="117" width="1.0339%" height="15" fill="rgb(232,23,21)"/><text x="51.7581%" y="127.50"></text></g><g><title>param_env (1,501,735 samples, 0.60%)</title><rect x="51.9396%" y="101" width="0.6024%" height="15" fill="rgb(244,5,23)"/><text x="52.1896%" y="111.50"></text></g><g><title>def_span (651,338 samples, 0.26%)</title><rect x="52.2807%" y="85" width="0.2613%" height="15" fill="rgb(226,81,46)"/><text x="52.5307%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (572,838 samples, 0.23%)</title><rect x="52.3122%" y="69" width="0.2298%" height="15" fill="rgb(247,70,30)"/><text x="52.5622%" y="79.50"></text></g><g><title>trait_impls_of (527,234 samples, 0.21%)</title><rect x="52.5501%" y="117" width="0.2115%" height="15" fill="rgb(212,68,19)"/><text x="52.8001%" y="127.50"></text></g><g><title>evaluate_obligation (12,718,299 samples, 5.10%)</title><rect x="47.6722%" y="133" width="5.1019%" height="15" fill="rgb(240,187,13)"/><text x="47.9222%" y="143.50">evalua..</text></g><g><title>generics_of (317,795 samples, 0.13%)</title><rect x="52.8786%" y="133" width="0.1275%" height="15" fill="rgb(223,113,26)"/><text x="53.1286%" y="143.50"></text></g><g><title>impl_item_implementor_ids (329,292 samples, 0.13%)</title><rect x="53.0061%" y="133" width="0.1321%" height="15" fill="rgb(206,192,2)"/><text x="53.2561%" y="143.50"></text></g><g><title>associated_items (292,582 samples, 0.12%)</title><rect x="53.0208%" y="117" width="0.1174%" height="15" fill="rgb(241,108,4)"/><text x="53.2708%" y="127.50"></text></g><g><title>impl_trait_ref (328,832 samples, 0.13%)</title><rect x="53.1461%" y="133" width="0.1319%" height="15" fill="rgb(247,173,49)"/><text x="53.3961%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (295,432 samples, 0.12%)</title><rect x="53.1595%" y="117" width="0.1185%" height="15" fill="rgb(224,114,35)"/><text x="53.4095%" y="127.50"></text></g><g><title>evaluate_obligation (459,907 samples, 0.18%)</title><rect x="53.5857%" y="117" width="0.1845%" height="15" fill="rgb(245,159,27)"/><text x="53.8357%" y="127.50"></text></g><g><title>method_autoderef_steps (887,732 samples, 0.36%)</title><rect x="53.4184%" y="133" width="0.3561%" height="15" fill="rgb(245,172,44)"/><text x="53.6684%" y="143.50"></text></g><g><title>opt_const_param_of (1,983,330 samples, 0.80%)</title><rect x="53.8270%" y="133" width="0.7956%" height="15" fill="rgb(236,23,11)"/><text x="54.0770%" y="143.50"></text></g><g><title>typeck (1,930,020 samples, 0.77%)</title><rect x="53.8484%" y="117" width="0.7742%" height="15" fill="rgb(205,117,38)"/><text x="54.0984%" y="127.50"></text></g><g><title>predicates_of (629,895 samples, 0.25%)</title><rect x="54.6881%" y="133" width="0.2527%" height="15" fill="rgb(237,72,25)"/><text x="54.9381%" y="143.50"></text></g><g><title>predicates_defined_on (431,043 samples, 0.17%)</title><rect x="54.7679%" y="117" width="0.1729%" height="15" fill="rgb(244,70,9)"/><text x="55.0179%" y="127.50"></text></g><g><title>evaluate_obligation (402,564 samples, 0.16%)</title><rect x="56.9213%" y="117" width="0.1615%" height="15" fill="rgb(217,125,39)"/><text x="57.1713%" y="127.50"></text></g><g><title>typeck (5,236,932 samples, 2.10%)</title><rect x="55.0930%" y="133" width="2.1008%" height="15" fill="rgb(235,36,10)"/><text x="55.3430%" y="143.50">t..</text></g><g><title>typeck_const_arg (724,038 samples, 0.29%)</title><rect x="57.1937%" y="133" width="0.2904%" height="15" fill="rgb(251,123,47)"/><text x="57.4437%" y="143.50"></text></g><g><title>item_bodies_checking (71,262,146 samples, 28.59%)</title><rect x="28.9298%" y="181" width="28.5864%" height="15" fill="rgb(221,13,13)"/><text x="29.1798%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (71,258,126 samples, 28.58%)</title><rect x="28.9314%" y="165" width="28.5848%" height="15" fill="rgb(238,131,9)"/><text x="29.1814%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (71,116,745 samples, 28.53%)</title><rect x="28.9881%" y="149" width="28.5280%" height="15" fill="rgb(211,50,8)"/><text x="29.2381%" y="159.50">typeck</text></g><g><title>evaluate_obligation (959,111 samples, 0.38%)</title><rect x="57.9939%" y="149" width="0.3847%" height="15" fill="rgb(245,182,24)"/><text x="58.2439%" y="159.50"></text></g><g><title>item_types_checking (3,198,702 samples, 1.28%)</title><rect x="57.5162%" y="181" width="1.2831%" height="15" fill="rgb(242,14,37)"/><text x="57.7662%" y="191.50"></text></g><g><title>check_mod_item_types (3,187,341 samples, 1.28%)</title><rect x="57.5207%" y="165" width="1.2786%" height="15" fill="rgb(246,228,12)"/><text x="57.7707%" y="175.50"></text></g><g><title>typeck (810,749 samples, 0.33%)</title><rect x="58.4741%" y="149" width="0.3252%" height="15" fill="rgb(213,55,15)"/><text x="58.7241%" y="159.50"></text></g><g><title>named_region_map (430,743 samples, 0.17%)</title><rect x="59.0803%" y="133" width="0.1728%" height="15" fill="rgb(209,9,3)"/><text x="59.3303%" y="143.50"></text></g><g><title>resolve_lifetimes (416,053 samples, 0.17%)</title><rect x="59.0861%" y="117" width="0.1669%" height="15" fill="rgb(230,59,30)"/><text x="59.3361%" y="127.50"></text></g><g><title>lint_levels (306,923 samples, 0.12%)</title><rect x="59.1299%" y="101" width="0.1231%" height="15" fill="rgb(209,121,21)"/><text x="59.3799%" y="111.50"></text></g><g><title>generics_of (557,375 samples, 0.22%)</title><rect x="59.0349%" y="149" width="0.2236%" height="15" fill="rgb(220,109,13)"/><text x="59.2849%" y="159.50"></text></g><g><title>explicit_predicates_of (360,913 samples, 0.14%)</title><rect x="59.3456%" y="117" width="0.1448%" height="15" fill="rgb(232,18,1)"/><text x="59.5956%" y="127.50"></text></g><g><title>predicates_of (566,256 samples, 0.23%)</title><rect x="59.2726%" y="149" width="0.2272%" height="15" fill="rgb(215,41,42)"/><text x="59.5226%" y="159.50"></text></g><g><title>predicates_defined_on (497,286 samples, 0.20%)</title><rect x="59.3003%" y="133" width="0.1995%" height="15" fill="rgb(224,123,36)"/><text x="59.5503%" y="143.50"></text></g><g><title>type_collecting (1,889,389 samples, 0.76%)</title><rect x="58.8027%" y="181" width="0.7579%" height="15" fill="rgb(240,125,3)"/><text x="59.0527%" y="191.50"></text></g><g><title>collect_mod_item_types (1,878,689 samples, 0.75%)</title><rect x="58.8070%" y="165" width="0.7536%" height="15" fill="rgb(205,98,50)"/><text x="59.0570%" y="175.50"></text></g><g><title>mir_borrowck (509,925 samples, 0.20%)</title><rect x="61.3744%" y="69" width="0.2046%" height="15" fill="rgb(205,185,37)"/><text x="61.6244%" y="79.50"></text></g><g><title>mir_for_ctfe (771,967 samples, 0.31%)</title><rect x="61.2705%" y="101" width="0.3097%" height="15" fill="rgb(238,207,15)"/><text x="61.5205%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (705,997 samples, 0.28%)</title><rect x="61.2970%" y="85" width="0.2832%" height="15" fill="rgb(213,199,42)"/><text x="61.5470%" y="95.50"></text></g><g><title>eval_to_const_value_raw (444,044 samples, 0.18%)</title><rect x="61.5875%" y="85" width="0.1781%" height="15" fill="rgb(235,201,11)"/><text x="61.8375%" y="95.50"></text></g><g><title>eval_to_const_value_raw (434,044 samples, 0.17%)</title><rect x="61.5915%" y="69" width="0.1741%" height="15" fill="rgb(207,46,11)"/><text x="61.8415%" y="79.50"></text></g><g><title>eval_to_allocation_raw (425,234 samples, 0.17%)</title><rect x="61.5951%" y="53" width="0.1706%" height="15" fill="rgb(241,35,35)"/><text x="61.8451%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (468,235 samples, 0.19%)</title><rect x="61.5808%" y="101" width="0.1878%" height="15" fill="rgb(243,32,47)"/><text x="61.8308%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,967,239 samples, 0.79%)</title><rect x="61.1169%" y="149" width="0.7891%" height="15" fill="rgb(247,202,23)"/><text x="61.3669%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,959,439 samples, 0.79%)</title><rect x="61.1200%" y="133" width="0.7860%" height="15" fill="rgb(219,102,11)"/><text x="61.3700%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,945,128 samples, 0.78%)</title><rect x="61.1257%" y="117" width="0.7803%" height="15" fill="rgb(243,110,44)"/><text x="61.3757%" y="127.50"></text></g><g><title>typeck (342,382 samples, 0.14%)</title><rect x="61.7687%" y="101" width="0.1373%" height="15" fill="rgb(222,74,54)"/><text x="62.0187%" y="111.50"></text></g><g><title>evaluate_obligation (889,777 samples, 0.36%)</title><rect x="61.9060%" y="149" width="0.3569%" height="15" fill="rgb(216,99,12)"/><text x="62.1560%" y="159.50"></text></g><g><title>implied_outlives_bounds (289,544 samples, 0.12%)</title><rect x="62.3058%" y="149" width="0.1161%" height="15" fill="rgb(226,22,26)"/><text x="62.5558%" y="159.50"></text></g><g><title>param_env (430,795 samples, 0.17%)</title><rect x="62.4241%" y="149" width="0.1728%" height="15" fill="rgb(217,163,10)"/><text x="62.6741%" y="159.50"></text></g><g><title>region_scope_tree (467,305 samples, 0.19%)</title><rect x="62.6268%" y="149" width="0.1875%" height="15" fill="rgb(213,25,53)"/><text x="62.8768%" y="159.50"></text></g><g><title>check_impl_item_well_formed (7,904,838 samples, 3.17%)</title><rect x="59.6898%" y="165" width="3.1710%" height="15" fill="rgb(252,105,26)"/><text x="59.9398%" y="175.50">che..</text></g><g><title>mir_borrowck (276,932 samples, 0.11%)</title><rect x="63.8960%" y="69" width="0.1111%" height="15" fill="rgb(220,39,43)"/><text x="64.1460%" y="79.50"></text></g><g><title>mir_for_ctfe (419,224 samples, 0.17%)</title><rect x="63.8396%" y="101" width="0.1682%" height="15" fill="rgb(229,68,48)"/><text x="64.0896%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (384,644 samples, 0.15%)</title><rect x="63.8535%" y="85" width="0.1543%" height="15" fill="rgb(252,8,32)"/><text x="64.1035%" y="95.50"></text></g><g><title>eval_to_const_value_raw (593,206 samples, 0.24%)</title><rect x="64.0096%" y="85" width="0.2380%" height="15" fill="rgb(223,20,43)"/><text x="64.2596%" y="95.50"></text></g><g><title>eval_to_const_value_raw (592,616 samples, 0.24%)</title><rect x="64.0099%" y="69" width="0.2377%" height="15" fill="rgb(229,81,49)"/><text x="64.2599%" y="79.50"></text></g><g><title>eval_to_allocation_raw (591,686 samples, 0.24%)</title><rect x="64.0102%" y="53" width="0.2374%" height="15" fill="rgb(236,28,36)"/><text x="64.2602%" y="63.50"></text></g><g><title>typeck (257,153 samples, 0.10%)</title><rect x="64.1444%" y="37" width="0.1032%" height="15" fill="rgb(249,185,26)"/><text x="64.3944%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (599,116 samples, 0.24%)</title><rect x="64.0081%" y="101" width="0.2403%" height="15" fill="rgb(249,174,33)"/><text x="64.2581%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,391,055 samples, 0.56%)</title><rect x="63.7582%" y="149" width="0.5580%" height="15" fill="rgb(233,201,37)"/><text x="64.0082%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,387,085 samples, 0.56%)</title><rect x="63.7598%" y="133" width="0.5564%" height="15" fill="rgb(221,78,26)"/><text x="64.0098%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,378,575 samples, 0.55%)</title><rect x="63.7632%" y="117" width="0.5530%" height="15" fill="rgb(250,127,30)"/><text x="64.0132%" y="127.50"></text></g><g><title>evaluate_obligation (338,422 samples, 0.14%)</title><rect x="64.3162%" y="149" width="0.1358%" height="15" fill="rgb(230,49,44)"/><text x="64.5662%" y="159.50"></text></g><g><title>param_env (394,364 samples, 0.16%)</title><rect x="64.5027%" y="149" width="0.1582%" height="15" fill="rgb(229,67,23)"/><text x="64.7527%" y="159.50"></text></g><g><title>check_item_well_formed (4,901,703 samples, 1.97%)</title><rect x="62.8608%" y="165" width="1.9663%" height="15" fill="rgb(249,83,47)"/><text x="63.1108%" y="175.50">c..</text></g><g><title>analysis (156,107,067 samples, 62.62%)</title><rect x="2.2226%" y="213" width="62.6214%" height="15" fill="rgb(215,43,3)"/><text x="2.4726%" y="223.50">analysis</text></g><g><title>type_check_crate (93,335,978 samples, 37.44%)</title><rect x="27.4029%" y="197" width="37.4412%" height="15" fill="rgb(238,154,13)"/><text x="27.6529%" y="207.50">type_check_crate</text></g><g><title>wf_checking (13,154,543 samples, 5.28%)</title><rect x="59.5671%" y="181" width="5.2769%" height="15" fill="rgb(219,56,2)"/><text x="59.8171%" y="191.50">wf_che..</text></g><g><title>fn_abi_of_instance (313,612 samples, 0.13%)</title><rect x="66.2884%" y="181" width="0.1258%" height="15" fill="rgb(233,0,4)"/><text x="66.5384%" y="191.50"></text></g><g><title>codegen_module (2,820,129 samples, 1.13%)</title><rect x="65.3409%" y="197" width="1.1313%" height="15" fill="rgb(235,30,7)"/><text x="65.5909%" y="207.50"></text></g><g><title>codegen_crate (4,083,391 samples, 1.64%)</title><rect x="64.8476%" y="213" width="1.6380%" height="15" fill="rgb(250,79,13)"/><text x="65.0976%" y="223.50"></text></g><g><title>LLVM_module_codegen (9,639,307 samples, 3.87%)</title><rect x="66.5010%" y="197" width="3.8667%" height="15" fill="rgb(211,146,34)"/><text x="66.7510%" y="207.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (8,901,349 samples, 3.57%)</title><rect x="66.7971%" y="181" width="3.5707%" height="15" fill="rgb(228,22,38)"/><text x="67.0471%" y="191.50">LLVM..</text></g><g><title>codegen_module_optimize (10,346,304 samples, 4.15%)</title><rect x="66.4856%" y="213" width="4.1504%" height="15" fill="rgb(235,168,5)"/><text x="66.7356%" y="223.50">codeg..</text></g><g><title>LLVM_module_optimize (668,527 samples, 0.27%)</title><rect x="70.3678%" y="197" width="0.2682%" height="15" fill="rgb(221,155,16)"/><text x="70.6178%" y="207.50"></text></g><g><title>AST_validation (306,913 samples, 0.12%)</title><rect x="70.7112%" y="197" width="0.1231%" height="15" fill="rgb(215,215,53)"/><text x="70.9612%" y="207.50"></text></g><g><title>metadata_load_macro (351,793 samples, 0.14%)</title><rect x="84.2921%" y="165" width="0.1411%" height="15" fill="rgb(223,4,10)"/><text x="84.5421%" y="175.50"></text></g><g><title>metadata_register_crate (725,407 samples, 0.29%)</title><rect x="84.4332%" y="165" width="0.2910%" height="15" fill="rgb(234,103,6)"/><text x="84.6832%" y="175.50"></text></g><g><title>metadata_register_crate (332,243 samples, 0.13%)</title><rect x="84.5910%" y="149" width="0.1333%" height="15" fill="rgb(227,97,0)"/><text x="84.8410%" y="159.50"></text></g><g><title>macro_expand_crate (35,037,862 samples, 14.06%)</title><rect x="70.9037%" y="197" width="14.0552%" height="15" fill="rgb(234,150,53)"/><text x="71.1537%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (35,023,142 samples, 14.05%)</title><rect x="70.9096%" y="181" width="14.0493%" height="15" fill="rgb(228,201,54)"/><text x="71.1596%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (584,956 samples, 0.23%)</title><rect x="84.7242%" y="165" width="0.2347%" height="15" fill="rgb(222,22,37)"/><text x="84.9742%" y="175.50"></text></g><g><title>finalize_imports (449,275 samples, 0.18%)</title><rect x="84.9917%" y="181" width="0.1802%" height="15" fill="rgb(237,53,32)"/><text x="85.2417%" y="191.50"></text></g><g><title>late_resolve_crate (2,132,592 samples, 0.86%)</title><rect x="85.2275%" y="181" width="0.8555%" height="15" fill="rgb(233,25,53)"/><text x="85.4775%" y="191.50"></text></g><g><title>configure_and_expand (38,780,109 samples, 15.56%)</title><rect x="70.6360%" y="213" width="15.5564%" height="15" fill="rgb(210,40,34)"/><text x="70.8860%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,997,990 samples, 1.20%)</title><rect x="84.9897%" y="197" width="1.2026%" height="15" fill="rgb(241,220,44)"/><text x="85.2397%" y="207.50"></text></g><g><title>drop_ast (353,193 samples, 0.14%)</title><rect x="86.1924%" y="213" width="0.1417%" height="15" fill="rgb(235,28,35)"/><text x="86.4424%" y="223.50"></text></g><g><title>early_lint_checks (663,167 samples, 0.27%)</title><rect x="86.3421%" y="213" width="0.2660%" height="15" fill="rgb(210,56,17)"/><text x="86.5921%" y="223.50"></text></g><g><title>free_global_ctxt (3,287,032 samples, 1.32%)</title><rect x="86.6081%" y="213" width="1.3186%" height="15" fill="rgb(224,130,29)"/><text x="86.8581%" y="223.50"></text></g><g><title>optimized_mir (266,213 samples, 0.11%)</title><rect x="89.9342%" y="133" width="0.1068%" height="15" fill="rgb(235,212,8)"/><text x="90.1842%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (862,568 samples, 0.35%)</title><rect x="89.8494%" y="149" width="0.3460%" height="15" fill="rgb(223,33,50)"/><text x="90.0994%" y="159.50"></text></g><g><title>monomorphization_collector (912,229 samples, 0.37%)</title><rect x="89.8479%" y="165" width="0.3659%" height="15" fill="rgb(219,149,13)"/><text x="90.0979%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,100,631 samples, 0.44%)</title><rect x="89.8361%" y="181" width="0.4415%" height="15" fill="rgb(250,156,29)"/><text x="90.0861%" y="191.50"></text></g><g><title>exported_symbols (1,354,203 samples, 0.54%)</title><rect x="89.8310%" y="197" width="0.5432%" height="15" fill="rgb(216,193,19)"/><text x="90.0810%" y="207.50"></text></g><g><title>is_sized_raw (540,413 samples, 0.22%)</title><rect x="92.7918%" y="165" width="0.2168%" height="15" fill="rgb(216,135,14)"/><text x="93.0418%" y="175.50"></text></g><g><title>evaluate_obligation (503,823 samples, 0.20%)</title><rect x="92.8065%" y="149" width="0.2021%" height="15" fill="rgb(241,47,5)"/><text x="93.0565%" y="159.50"></text></g><g><title>layout_of (574,515 samples, 0.23%)</title><rect x="93.0086%" y="165" width="0.2305%" height="15" fill="rgb(233,42,35)"/><text x="93.2586%" y="175.50"></text></g><g><title>layout_of (1,828,887 samples, 0.73%)</title><rect x="92.5244%" y="181" width="0.7336%" height="15" fill="rgb(231,13,6)"/><text x="92.7744%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,215,891 samples, 2.09%)</title><rect x="93.2581%" y="181" width="2.0923%" height="15" fill="rgb(207,181,40)"/><text x="93.5081%" y="191.50">m..</text></g><g><title>optimized_mir (12,259,087 samples, 4.92%)</title><rect x="90.5154%" y="197" width="4.9177%" height="15" fill="rgb(254,173,49)"/><text x="90.7654%" y="207.50">optimi..</text></g><g><title>generate_crate_metadata (18,980,391 samples, 7.61%)</title><rect x="87.9267%" y="213" width="7.6139%" height="15" fill="rgb(221,1,38)"/><text x="88.1767%" y="223.50">generate_c..</text></g><g><title>hir_lowering (4,672,387 samples, 1.87%)</title><rect x="95.5405%" y="213" width="1.8743%" height="15" fill="rgb(206,124,46)"/><text x="95.7905%" y="223.50">h..</text></g><g><title>link_crate (1,906,439 samples, 0.76%)</title><rect x="97.4241%" y="197" width="0.7648%" height="15" fill="rgb(249,21,11)"/><text x="97.6741%" y="207.50"></text></g><g><title>link_binary (1,897,319 samples, 0.76%)</title><rect x="97.4277%" y="181" width="0.7611%" height="15" fill="rgb(222,201,40)"/><text x="97.6777%" y="191.50"></text></g><g><title>link_rlib (1,470,055 samples, 0.59%)</title><rect x="97.5991%" y="165" width="0.5897%" height="15" fill="rgb(235,61,29)"/><text x="97.8491%" y="175.50"></text></g><g><title>link (1,938,280 samples, 0.78%)</title><rect x="97.4148%" y="213" width="0.7775%" height="15" fill="rgb(219,207,3)"/><text x="97.6648%" y="223.50"></text></g><g><title>parse_crate (631,446 samples, 0.25%)</title><rect x="98.1924%" y="213" width="0.2533%" height="15" fill="rgb(222,56,46)"/><text x="98.4424%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (2,832,688 samples, 1.14%)</title><rect x="98.5275%" y="213" width="1.1363%" height="15" fill="rgb(239,76,54)"/><text x="98.7775%" y="223.50"></text></g><g><title>all (249,287,132 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(231,124,27)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (249,287,132 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,195,6)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (758,638 samples, 0.30%)</title><rect x="99.6957%" y="213" width="0.3043%" height="15" fill="rgb(237,174,47)"/><text x="99.9457%" y="223.50"></text></g></svg></svg>