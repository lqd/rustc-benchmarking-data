<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (336,884,095 samples, 11.07%)</title><rect x="0.0285%" y="165" width="11.0739%" height="15" fill="rgb(227,0,7)"/><text x="0.2785%" y="175.50">LLVM_passes</text></g><g><title>is_late_bound_map (3,377,527 samples, 0.11%)</title><rect x="18.7208%" y="117" width="0.1110%" height="15" fill="rgb(217,0,24)"/><text x="18.9708%" y="127.50"></text></g><g><title>thir_body (20,075,281 samples, 0.66%)</title><rect x="22.0481%" y="53" width="0.6599%" height="15" fill="rgb(221,193,54)"/><text x="22.2981%" y="63.50"></text></g><g><title>mir_const (100,390,388 samples, 3.30%)</title><rect x="19.4216%" y="101" width="3.3000%" height="15" fill="rgb(248,212,6)"/><text x="19.6716%" y="111.50">mir..</text></g><g><title>unsafety_check_result (85,268,514 samples, 2.80%)</title><rect x="19.9187%" y="85" width="2.8029%" height="15" fill="rgb(208,68,35)"/><text x="20.1687%" y="95.50">un..</text></g><g><title>mir_built (77,521,047 samples, 2.55%)</title><rect x="20.1733%" y="69" width="2.5482%" height="15" fill="rgb(232,128,0)"/><text x="20.4233%" y="79.50">mi..</text></g><g><title>thir_body (3,969,081 samples, 0.13%)</title><rect x="23.5947%" y="37" width="0.1305%" height="15" fill="rgb(207,160,47)"/><text x="23.8447%" y="47.50"></text></g><g><title>mir_const (23,466,579 samples, 0.77%)</title><rect x="22.9605%" y="85" width="0.7714%" height="15" fill="rgb(228,23,34)"/><text x="23.2105%" y="95.50"></text></g><g><title>unsafety_check_result (18,345,728 samples, 0.60%)</title><rect x="23.1288%" y="69" width="0.6031%" height="15" fill="rgb(218,30,26)"/><text x="23.3788%" y="79.50"></text></g><g><title>mir_built (16,397,850 samples, 0.54%)</title><rect x="23.1929%" y="53" width="0.5390%" height="15" fill="rgb(220,122,19)"/><text x="23.4429%" y="63.50"></text></g><g><title>mir_const_qualif (31,203,841 samples, 1.03%)</title><rect x="22.7216%" y="101" width="1.0257%" height="15" fill="rgb(250,228,42)"/><text x="22.9716%" y="111.50"></text></g><g><title>mir_promoted (149,375,452 samples, 4.91%)</title><rect x="18.8371%" y="117" width="4.9102%" height="15" fill="rgb(240,193,28)"/><text x="19.0871%" y="127.50">mir_pr..</text></g><g><title>type_op_prove_predicate (6,769,441 samples, 0.22%)</title><rect x="23.9008%" y="117" width="0.2225%" height="15" fill="rgb(216,20,37)"/><text x="24.1508%" y="127.50"></text></g><g><title>MIR_borrow_checking (391,856,414 samples, 12.88%)</title><rect x="11.2428%" y="149" width="12.8809%" height="15" fill="rgb(206,188,39)"/><text x="11.4928%" y="159.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (386,482,460 samples, 12.70%)</title><rect x="11.4194%" y="133" width="12.7043%" height="15" fill="rgb(217,207,13)"/><text x="11.6694%" y="143.50">mir_borrowck</text></g><g><title>MIR_effect_checking (15,080,463 samples, 0.50%)</title><rect x="24.1237%" y="149" width="0.4957%" height="15" fill="rgb(231,73,38)"/><text x="24.3737%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,353,939 samples, 0.41%)</title><rect x="24.2133%" y="133" width="0.4061%" height="15" fill="rgb(225,20,46)"/><text x="24.4633%" y="143.50"></text></g><g><title>hir_module_items (3,402,574 samples, 0.11%)</title><rect x="24.6194%" y="149" width="0.1118%" height="15" fill="rgb(210,31,41)"/><text x="24.8694%" y="159.50"></text></g><g><title>codegen_fn_attrs (4,724,676 samples, 0.16%)</title><rect x="24.9264%" y="117" width="0.1553%" height="15" fill="rgb(221,200,47)"/><text x="25.1764%" y="127.50"></text></g><g><title>check_mod_attrs (10,624,307 samples, 0.35%)</title><rect x="24.7325%" y="133" width="0.3492%" height="15" fill="rgb(226,26,5)"/><text x="24.9825%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (4,210,634 samples, 0.14%)</title><rect x="25.2208%" y="133" width="0.1384%" height="15" fill="rgb(249,33,26)"/><text x="25.4708%" y="143.50"></text></g><g><title>misc_checking_1 (19,483,658 samples, 0.64%)</title><rect x="24.7313%" y="149" width="0.6405%" height="15" fill="rgb(235,183,28)"/><text x="24.9813%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (7,817,559 samples, 0.26%)</title><rect x="25.3718%" y="133" width="0.2570%" height="15" fill="rgb(221,5,38)"/><text x="25.6218%" y="143.50"></text></g><g><title>check_mod_liveness (6,041,281 samples, 0.20%)</title><rect x="25.4302%" y="117" width="0.1986%" height="15" fill="rgb(247,18,42)"/><text x="25.6802%" y="127.50"></text></g><g><title>misc_checking_2 (18,572,788 samples, 0.61%)</title><rect x="25.3717%" y="149" width="0.6105%" height="15" fill="rgb(241,131,45)"/><text x="25.6217%" y="159.50"></text></g><g><title>match_checking (10,751,589 samples, 0.35%)</title><rect x="25.6288%" y="133" width="0.3534%" height="15" fill="rgb(249,31,29)"/><text x="25.8788%" y="143.50"></text></g><g><title>check_match (9,648,507 samples, 0.32%)</title><rect x="25.6651%" y="117" width="0.3172%" height="15" fill="rgb(225,111,53)"/><text x="25.9151%" y="127.50"></text></g><g><title>check_private_in_public (4,836,568 samples, 0.16%)</title><rect x="25.9830%" y="133" width="0.1590%" height="15" fill="rgb(238,160,17)"/><text x="26.2330%" y="143.50"></text></g><g><title>death_checking (8,138,554 samples, 0.27%)</title><rect x="26.1419%" y="133" width="0.2675%" height="15" fill="rgb(214,148,48)"/><text x="26.3919%" y="143.50"></text></g><g><title>crate_lints (10,761,880 samples, 0.35%)</title><rect x="26.4096%" y="117" width="0.3538%" height="15" fill="rgb(232,36,49)"/><text x="26.6596%" y="127.50"></text></g><g><title>lint_checking (20,857,112 samples, 0.69%)</title><rect x="26.4095%" y="133" width="0.6856%" height="15" fill="rgb(209,103,24)"/><text x="26.6595%" y="143.50"></text></g><g><title>module_lints (10,091,012 samples, 0.33%)</title><rect x="26.7634%" y="117" width="0.3317%" height="15" fill="rgb(229,88,8)"/><text x="27.0134%" y="127.50"></text></g><g><title>lint_mod (10,080,302 samples, 0.33%)</title><rect x="26.7637%" y="101" width="0.3314%" height="15" fill="rgb(213,181,19)"/><text x="27.0137%" y="111.50"></text></g><g><title>privacy_access_levels (5,139,623 samples, 0.17%)</title><rect x="27.0951%" y="133" width="0.1689%" height="15" fill="rgb(254,191,54)"/><text x="27.3451%" y="143.50"></text></g><g><title>privacy_checking_modules (14,906,381 samples, 0.49%)</title><rect x="27.2640%" y="133" width="0.4900%" height="15" fill="rgb(241,83,37)"/><text x="27.5140%" y="143.50"></text></g><g><title>check_mod_privacy (14,897,111 samples, 0.49%)</title><rect x="27.2643%" y="117" width="0.4897%" height="15" fill="rgb(233,36,39)"/><text x="27.5143%" y="127.50"></text></g><g><title>misc_checking_3 (54,138,500 samples, 1.78%)</title><rect x="25.9822%" y="149" width="1.7796%" height="15" fill="rgb(226,3,54)"/><text x="26.2322%" y="159.50">m..</text></g><g><title>impl_trait_ref (3,091,114 samples, 0.10%)</title><rect x="27.9870%" y="85" width="0.1016%" height="15" fill="rgb(245,192,40)"/><text x="28.2370%" y="95.50"></text></g><g><title>coherent_trait (9,253,894 samples, 0.30%)</title><rect x="27.8089%" y="117" width="0.3042%" height="15" fill="rgb(238,167,29)"/><text x="28.0589%" y="127.50"></text></g><g><title>specialization_graph_of (8,863,651 samples, 0.29%)</title><rect x="27.8218%" y="101" width="0.2914%" height="15" fill="rgb(232,182,51)"/><text x="28.0718%" y="111.50"></text></g><g><title>coherence_checking (9,984,881 samples, 0.33%)</title><rect x="27.8075%" y="133" width="0.3282%" height="15" fill="rgb(231,60,39)"/><text x="28.0575%" y="143.50"></text></g><g><title>specializes (3,558,853 samples, 0.12%)</title><rect x="40.3810%" y="69" width="0.1170%" height="15" fill="rgb(208,69,12)"/><text x="40.6310%" y="79.50"></text></g><g><title>evaluate_obligation (16,752,715 samples, 0.55%)</title><rect x="39.9572%" y="85" width="0.5507%" height="15" fill="rgb(235,93,37)"/><text x="40.2072%" y="95.50"></text></g><g><title>typeck (8,453,265 samples, 0.28%)</title><rect x="40.6438%" y="85" width="0.2779%" height="15" fill="rgb(213,116,39)"/><text x="40.8938%" y="95.50"></text></g><g><title>item_bodies_checking (388,839,363 samples, 12.78%)</title><rect x="28.1640%" y="133" width="12.7817%" height="15" fill="rgb(222,207,29)"/><text x="28.4140%" y="143.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (388,835,083 samples, 12.78%)</title><rect x="28.1642%" y="117" width="12.7816%" height="15" fill="rgb(206,96,30)"/><text x="28.4142%" y="127.50">typeck_item_bodies</text></g><g><title>typeck (385,954,485 samples, 12.69%)</title><rect x="28.2589%" y="101" width="12.6869%" height="15" fill="rgb(218,138,4)"/><text x="28.5089%" y="111.50">typeck</text></g><g><title>item_types_checking (17,572,178 samples, 0.58%)</title><rect x="40.9458%" y="133" width="0.5776%" height="15" fill="rgb(250,191,14)"/><text x="41.1958%" y="143.50"></text></g><g><title>check_mod_item_types (17,563,638 samples, 0.58%)</title><rect x="40.9461%" y="117" width="0.5773%" height="15" fill="rgb(239,60,40)"/><text x="41.1961%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,103,673 samples, 0.10%)</title><rect x="41.6970%" y="101" width="0.1020%" height="15" fill="rgb(206,27,48)"/><text x="41.9470%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,078,972 samples, 0.10%)</title><rect x="41.6978%" y="85" width="0.1012%" height="15" fill="rgb(225,35,8)"/><text x="41.9478%" y="95.50"></text></g><g><title>eval_to_allocation_raw (3,058,512 samples, 0.10%)</title><rect x="41.6985%" y="69" width="0.1005%" height="15" fill="rgb(250,213,24)"/><text x="41.9485%" y="79.50"></text></g><g><title>fn_sig (4,470,084 samples, 0.15%)</title><rect x="41.7990%" y="101" width="0.1469%" height="15" fill="rgb(247,123,22)"/><text x="42.0490%" y="111.50"></text></g><g><title>named_region_map (10,729,571 samples, 0.35%)</title><rect x="42.0119%" y="85" width="0.3527%" height="15" fill="rgb(231,138,38)"/><text x="42.2619%" y="95.50"></text></g><g><title>resolve_lifetimes (10,269,228 samples, 0.34%)</title><rect x="42.0270%" y="69" width="0.3376%" height="15" fill="rgb(231,145,46)"/><text x="42.2770%" y="79.50"></text></g><g><title>lint_levels (5,667,548 samples, 0.19%)</title><rect x="42.1783%" y="53" width="0.1863%" height="15" fill="rgb(251,118,11)"/><text x="42.4283%" y="63.50"></text></g><g><title>generics_of (13,030,713 samples, 0.43%)</title><rect x="41.9459%" y="101" width="0.4283%" height="15" fill="rgb(217,147,25)"/><text x="42.1959%" y="111.50"></text></g><g><title>predicates_of (5,962,010 samples, 0.20%)</title><rect x="42.3951%" y="101" width="0.1960%" height="15" fill="rgb(247,81,37)"/><text x="42.6451%" y="111.50"></text></g><g><title>predicates_defined_on (4,558,137 samples, 0.15%)</title><rect x="42.4412%" y="85" width="0.1498%" height="15" fill="rgb(209,12,38)"/><text x="42.6912%" y="95.50"></text></g><g><title>type_collecting (33,553,641 samples, 1.10%)</title><rect x="41.5235%" y="133" width="1.1030%" height="15" fill="rgb(227,1,9)"/><text x="41.7735%" y="143.50"></text></g><g><title>collect_mod_item_types (33,536,881 samples, 1.10%)</title><rect x="41.5240%" y="117" width="1.1024%" height="15" fill="rgb(248,47,43)"/><text x="41.7740%" y="127.50"></text></g><g><title>param_env (6,307,471 samples, 0.21%)</title><rect x="43.8969%" y="101" width="0.2073%" height="15" fill="rgb(221,10,30)"/><text x="44.1469%" y="111.50"></text></g><g><title>region_scope_tree (8,553,504 samples, 0.28%)</title><rect x="44.1055%" y="101" width="0.2812%" height="15" fill="rgb(210,229,1)"/><text x="44.3555%" y="111.50"></text></g><g><title>check_impl_item_well_formed (49,502,152 samples, 1.63%)</title><rect x="42.7600%" y="117" width="1.6272%" height="15" fill="rgb(222,148,37)"/><text x="43.0100%" y="127.50"></text></g><g><title>evaluate_obligation (4,437,604 samples, 0.15%)</title><rect x="44.7147%" y="101" width="0.1459%" height="15" fill="rgb(234,67,33)"/><text x="44.9647%" y="111.50"></text></g><g><title>check_item_well_formed (18,486,167 samples, 0.61%)</title><rect x="44.3872%" y="117" width="0.6077%" height="15" fill="rgb(247,98,35)"/><text x="44.6372%" y="127.50"></text></g><g><title>analysis (1,041,032,652 samples, 34.22%)</title><rect x="11.1024%" y="165" width="34.2203%" height="15" fill="rgb(247,138,52)"/><text x="11.3524%" y="175.50">analysis</text></g><g><title>type_check_crate (534,226,561 samples, 17.56%)</title><rect x="27.7618%" y="149" width="17.5608%" height="15" fill="rgb(213,79,30)"/><text x="28.0118%" y="159.50">type_check_crate</text></g><g><title>wf_checking (81,789,902 samples, 2.69%)</title><rect x="42.6341%" y="133" width="2.6886%" height="15" fill="rgb(246,177,23)"/><text x="42.8841%" y="143.50">wf..</text></g><g><title>check_trait_item_well_formed (9,973,319 samples, 0.33%)</title><rect x="44.9949%" y="117" width="0.3278%" height="15" fill="rgb(230,62,27)"/><text x="45.2449%" y="127.50"></text></g><g><title>param_env (3,515,334 samples, 0.12%)</title><rect x="50.1166%" y="117" width="0.1156%" height="15" fill="rgb(216,154,8)"/><text x="50.3666%" y="127.50"></text></g><g><title>fn_abi_of_instance (11,239,644 samples, 0.37%)</title><rect x="49.8932%" y="133" width="0.3695%" height="15" fill="rgb(244,35,45)"/><text x="50.1432%" y="143.50"></text></g><g><title>codegen_module (150,814,004 samples, 4.96%)</title><rect x="45.4042%" y="149" width="4.9575%" height="15" fill="rgb(251,115,12)"/><text x="45.6542%" y="159.50">codege..</text></g><g><title>codegen_crate (153,318,238 samples, 5.04%)</title><rect x="45.3231%" y="165" width="5.0398%" height="15" fill="rgb(240,54,50)"/><text x="45.5731%" y="175.50">codege..</text></g><g><title>LLVM_module_codegen (764,136,716 samples, 25.12%)</title><rect x="50.3714%" y="149" width="25.1183%" height="15" fill="rgb(233,84,52)"/><text x="50.6214%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (745,535,269 samples, 24.51%)</title><rect x="50.9829%" y="133" width="24.5069%" height="15" fill="rgb(207,117,47)"/><text x="51.2329%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (801,101,511 samples, 26.33%)</title><rect x="50.3629%" y="165" width="26.3334%" height="15" fill="rgb(249,43,39)"/><text x="50.6129%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (36,703,749 samples, 1.21%)</title><rect x="75.4898%" y="149" width="1.2065%" height="15" fill="rgb(209,38,44)"/><text x="75.7398%" y="159.50"></text></g><g><title>macro_expand_crate (108,697,425 samples, 3.57%)</title><rect x="76.8708%" y="149" width="3.5730%" height="15" fill="rgb(236,212,23)"/><text x="77.1208%" y="159.50">macr..</text></g><g><title>expand_crate (108,670,785 samples, 3.57%)</title><rect x="76.8717%" y="133" width="3.5722%" height="15" fill="rgb(242,79,21)"/><text x="77.1217%" y="143.50">expa..</text></g><g><title>late_resolve_crate (22,838,872 samples, 0.75%)</title><rect x="80.5513%" y="133" width="0.7507%" height="15" fill="rgb(211,96,35)"/><text x="80.8013%" y="143.50"></text></g><g><title>configure_and_expand (143,524,929 samples, 4.72%)</title><rect x="76.6963%" y="165" width="4.7179%" height="15" fill="rgb(253,215,40)"/><text x="76.9463%" y="175.50">confi..</text></g><g><title>resolve_crate (28,257,407 samples, 0.93%)</title><rect x="80.4853%" y="149" width="0.9289%" height="15" fill="rgb(211,81,21)"/><text x="80.7353%" y="159.50"></text></g><g><title>drop_ast (8,751,320 samples, 0.29%)</title><rect x="81.4142%" y="165" width="0.2877%" height="15" fill="rgb(208,190,38)"/><text x="81.6642%" y="175.50"></text></g><g><title>early_lint_checks (7,241,433 samples, 0.24%)</title><rect x="81.7026%" y="165" width="0.2380%" height="15" fill="rgb(235,213,38)"/><text x="81.9526%" y="175.50"></text></g><g><title>free_global_ctxt (17,420,127 samples, 0.57%)</title><rect x="81.9406%" y="165" width="0.5726%" height="15" fill="rgb(237,122,38)"/><text x="82.1906%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (33,732,016 samples, 1.11%)</title><rect x="84.8444%" y="69" width="1.1088%" height="15" fill="rgb(244,218,35)"/><text x="85.0944%" y="79.50"></text></g><g><title>optimized_mir (70,814,747 samples, 2.33%)</title><rect x="83.7115%" y="85" width="2.3278%" height="15" fill="rgb(240,68,47)"/><text x="83.9615%" y="95.50">o..</text></g><g><title>resolve_instance (7,701,732 samples, 0.25%)</title><rect x="86.0393%" y="85" width="0.2532%" height="15" fill="rgb(210,16,53)"/><text x="86.2893%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (91,709,623 samples, 3.01%)</title><rect x="83.3992%" y="101" width="3.0146%" height="15" fill="rgb(235,124,12)"/><text x="83.6492%" y="111.50">mon..</text></g><g><title>vtable_entries (3,125,613 samples, 0.10%)</title><rect x="86.3111%" y="85" width="0.1027%" height="15" fill="rgb(224,169,11)"/><text x="86.5611%" y="95.50"></text></g><g><title>monomorphization_collector (92,897,965 samples, 3.05%)</title><rect x="83.3990%" y="117" width="3.0537%" height="15" fill="rgb(250,166,2)"/><text x="83.6490%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,744,468 samples, 0.19%)</title><rect x="86.4531%" y="101" width="0.1888%" height="15" fill="rgb(242,216,29)"/><text x="86.7031%" y="111.50"></text></g><g><title>symbol_name (5,020,809 samples, 0.17%)</title><rect x="86.4769%" y="85" width="0.1650%" height="15" fill="rgb(230,116,27)"/><text x="86.7269%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (101,935,226 samples, 3.35%)</title><rect x="83.3962%" y="133" width="3.3508%" height="15" fill="rgb(228,99,48)"/><text x="83.6462%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (8,951,131 samples, 0.29%)</title><rect x="86.4527%" y="117" width="0.2942%" height="15" fill="rgb(253,11,6)"/><text x="86.7027%" y="127.50"></text></g><g><title>cgu_partitioning (3,195,633 samples, 0.11%)</title><rect x="86.6419%" y="101" width="0.1050%" height="15" fill="rgb(247,143,39)"/><text x="86.8919%" y="111.50"></text></g><g><title>exported_symbols (104,598,443 samples, 3.44%)</title><rect x="83.3865%" y="149" width="3.4383%" height="15" fill="rgb(236,97,10)"/><text x="83.6365%" y="159.50">exp..</text></g><g><title>mir_for_ctfe (5,727,477 samples, 0.19%)</title><rect x="86.8328%" y="149" width="0.1883%" height="15" fill="rgb(233,208,19)"/><text x="87.0828%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (25,133,234 samples, 0.83%)</title><rect x="88.2305%" y="133" width="0.8262%" height="15" fill="rgb(216,164,2)"/><text x="88.4805%" y="143.50"></text></g><g><title>mir_for_ctfe (7,278,735 samples, 0.24%)</title><rect x="89.1587%" y="69" width="0.2393%" height="15" fill="rgb(220,129,5)"/><text x="89.4087%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,544,338 samples, 0.12%)</title><rect x="89.2815%" y="53" width="0.1165%" height="15" fill="rgb(242,17,10)"/><text x="89.5315%" y="63.50"></text></g><g><title>eval_to_const_value_raw (9,651,788 samples, 0.32%)</title><rect x="89.0892%" y="117" width="0.3173%" height="15" fill="rgb(242,107,0)"/><text x="89.3392%" y="127.50"></text></g><g><title>eval_to_const_value_raw (9,524,685 samples, 0.31%)</title><rect x="89.0934%" y="101" width="0.3131%" height="15" fill="rgb(251,28,31)"/><text x="89.3434%" y="111.50"></text></g><g><title>eval_to_allocation_raw (9,292,922 samples, 0.31%)</title><rect x="89.1010%" y="85" width="0.3055%" height="15" fill="rgb(233,223,10)"/><text x="89.3510%" y="95.50"></text></g><g><title>optimized_mir (73,485,962 samples, 2.42%)</title><rect x="87.0254%" y="149" width="2.4156%" height="15" fill="rgb(215,21,27)"/><text x="87.2754%" y="159.50">op..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (11,170,064 samples, 0.37%)</title><rect x="89.0739%" y="133" width="0.3672%" height="15" fill="rgb(232,23,21)"/><text x="89.3239%" y="143.50"></text></g><g><title>generate_crate_metadata (212,199,847 samples, 6.98%)</title><rect x="82.5132%" y="165" width="6.9753%" height="15" fill="rgb(244,5,23)"/><text x="82.7632%" y="175.50">generate_..</text></g><g><title>hir_lowering (54,437,474 samples, 1.79%)</title><rect x="89.4886%" y="165" width="1.7894%" height="15" fill="rgb(226,81,46)"/><text x="89.7386%" y="175.50">h..</text></g><g><title>finish_ongoing_codegen (225,109,769 samples, 7.40%)</title><rect x="91.2787%" y="149" width="7.3997%" height="15" fill="rgb(247,70,30)"/><text x="91.5287%" y="159.50">finish_ong..</text></g><g><title>link_crate (6,965,310 samples, 0.23%)</title><rect x="98.6784%" y="149" width="0.2290%" height="15" fill="rgb(212,68,19)"/><text x="98.9284%" y="159.50"></text></g><g><title>link_binary (6,847,499 samples, 0.23%)</title><rect x="98.6822%" y="133" width="0.2251%" height="15" fill="rgb(240,187,13)"/><text x="98.9322%" y="143.50"></text></g><g><title>link_rlib (5,764,478 samples, 0.19%)</title><rect x="98.7178%" y="117" width="0.1895%" height="15" fill="rgb(223,113,26)"/><text x="98.9678%" y="127.50"></text></g><g><title>link (232,108,599 samples, 7.63%)</title><rect x="91.2780%" y="165" width="7.6298%" height="15" fill="rgb(206,192,2)"/><text x="91.5280%" y="175.50">link</text></g><g><title>parse_crate (26,049,745 samples, 0.86%)</title><rect x="98.9078%" y="165" width="0.8563%" height="15" fill="rgb(241,108,4)"/><text x="99.1578%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (5,189,403 samples, 0.17%)</title><rect x="99.7720%" y="165" width="0.1706%" height="15" fill="rgb(247,173,49)"/><text x="100.0220%" y="175.50"></text></g><g><title>all (3,042,147,113 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,042,147,113 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>