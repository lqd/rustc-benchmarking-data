<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,181,422 samples, 6.72%)</title><rect x="0.5028%" y="245" width="6.7185%" height="15" fill="rgb(227,0,7)"/><text x="0.7528%" y="255.50">LLVM_pass..</text></g><g><title>implied_outlives_bounds (168,481 samples, 0.12%)</title><rect x="13.5142%" y="197" width="0.1233%" height="15" fill="rgb(217,0,24)"/><text x="13.7642%" y="207.50"></text></g><g><title>param_env (359,172 samples, 0.26%)</title><rect x="14.5012%" y="165" width="0.2628%" height="15" fill="rgb(221,193,54)"/><text x="14.7512%" y="175.50"></text></g><g><title>item_attrs (468,012 samples, 0.34%)</title><rect x="15.0779%" y="133" width="0.3425%" height="15" fill="rgb(248,212,6)"/><text x="15.3279%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (455,842 samples, 0.33%)</title><rect x="15.0868%" y="117" width="0.3336%" height="15" fill="rgb(208,68,35)"/><text x="15.3368%" y="127.50"></text></g><g><title>codegen_fn_attrs (595,334 samples, 0.44%)</title><rect x="14.9990%" y="149" width="0.4356%" height="15" fill="rgb(232,128,0)"/><text x="15.2490%" y="159.50"></text></g><g><title>is_copy_raw (172,582 samples, 0.13%)</title><rect x="16.7086%" y="133" width="0.1263%" height="15" fill="rgb(207,160,47)"/><text x="16.9586%" y="143.50"></text></g><g><title>evaluate_obligation (144,322 samples, 0.11%)</title><rect x="16.7292%" y="117" width="0.1056%" height="15" fill="rgb(228,23,34)"/><text x="16.9792%" y="127.50"></text></g><g><title>param_env (247,123 samples, 0.18%)</title><rect x="16.9490%" y="85" width="0.1808%" height="15" fill="rgb(218,30,26)"/><text x="17.1990%" y="95.50"></text></g><g><title>predicates_of (238,633 samples, 0.17%)</title><rect x="16.9553%" y="69" width="0.1746%" height="15" fill="rgb(220,122,19)"/><text x="17.2053%" y="79.50"></text></g><g><title>predicates_defined_on (234,133 samples, 0.17%)</title><rect x="16.9585%" y="53" width="0.1713%" height="15" fill="rgb(250,228,42)"/><text x="17.2085%" y="63.50"></text></g><g><title>inferred_outlives_of (230,052 samples, 0.17%)</title><rect x="16.9615%" y="37" width="0.1683%" height="15" fill="rgb(240,193,28)"/><text x="17.2115%" y="47.50"></text></g><g><title>adt_drop_tys (299,473 samples, 0.22%)</title><rect x="16.9114%" y="101" width="0.2191%" height="15" fill="rgb(216,20,37)"/><text x="17.1614%" y="111.50"></text></g><g><title>adt_drop_tys (400,894 samples, 0.29%)</title><rect x="16.8981%" y="117" width="0.2934%" height="15" fill="rgb(206,188,39)"/><text x="17.1481%" y="127.50"></text></g><g><title>needs_drop_raw (1,096,110 samples, 0.80%)</title><rect x="16.8368%" y="133" width="0.8021%" height="15" fill="rgb(217,207,13)"/><text x="17.0868%" y="143.50"></text></g><g><title>is_copy_raw (611,454 samples, 0.45%)</title><rect x="17.1915%" y="117" width="0.4474%" height="15" fill="rgb(231,73,38)"/><text x="17.4415%" y="127.50"></text></g><g><title>evaluate_obligation (492,153 samples, 0.36%)</title><rect x="17.2788%" y="101" width="0.3601%" height="15" fill="rgb(225,20,46)"/><text x="17.5288%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (278,122 samples, 0.20%)</title><rect x="17.7678%" y="117" width="0.2035%" height="15" fill="rgb(210,31,41)"/><text x="18.0178%" y="127.50"></text></g><g><title>impl_parent (231,222 samples, 0.17%)</title><rect x="18.2397%" y="101" width="0.1692%" height="15" fill="rgb(221,200,47)"/><text x="18.4897%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (163,692 samples, 0.12%)</title><rect x="18.2891%" y="85" width="0.1198%" height="15" fill="rgb(226,26,5)"/><text x="18.5391%" y="95.50"></text></g><g><title>specialization_graph_of (1,029,621 samples, 0.75%)</title><rect x="17.9909%" y="117" width="0.7534%" height="15" fill="rgb(249,33,26)"/><text x="18.2409%" y="127.50"></text></g><g><title>impl_trait_ref (458,407 samples, 0.34%)</title><rect x="18.4089%" y="101" width="0.3354%" height="15" fill="rgb(235,183,28)"/><text x="18.6589%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (390,827 samples, 0.29%)</title><rect x="18.4583%" y="85" width="0.2860%" height="15" fill="rgb(221,5,38)"/><text x="18.7083%" y="95.50"></text></g><g><title>resolve_instance (1,619,237 samples, 1.18%)</title><rect x="17.6389%" y="133" width="1.1849%" height="15" fill="rgb(247,18,42)"/><text x="17.8889%" y="143.50"></text></g><g><title>thir_body (671,188 samples, 0.49%)</title><rect x="18.8372%" y="133" width="0.4911%" height="15" fill="rgb(241,131,45)"/><text x="19.0872%" y="143.50"></text></g><g><title>mir_const (7,198,380 samples, 5.27%)</title><rect x="14.0990%" y="181" width="5.2674%" height="15" fill="rgb(249,31,29)"/><text x="14.3490%" y="191.50">mir_co..</text></g><g><title>unsafety_check_result (6,289,461 samples, 4.60%)</title><rect x="14.7641%" y="165" width="4.6023%" height="15" fill="rgb(225,111,53)"/><text x="15.0141%" y="175.50">unsaf..</text></g><g><title>mir_built (5,373,094 samples, 3.93%)</title><rect x="15.4346%" y="149" width="3.9318%" height="15" fill="rgb(238,160,17)"/><text x="15.6846%" y="159.50">mir_..</text></g><g><title>mir_promoted (7,819,449 samples, 5.72%)</title><rect x="13.7234%" y="197" width="5.7219%" height="15" fill="rgb(214,148,48)"/><text x="13.9734%" y="207.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (278,362 samples, 0.20%)</title><rect x="19.4458%" y="197" width="0.2037%" height="15" fill="rgb(232,36,49)"/><text x="19.6958%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (766,479 samples, 0.56%)</title><rect x="19.6495%" y="197" width="0.5609%" height="15" fill="rgb(209,103,24)"/><text x="19.8995%" y="207.50"></text></g><g><title>normalize_projection_ty (374,064 samples, 0.27%)</title><rect x="19.9366%" y="181" width="0.2737%" height="15" fill="rgb(229,88,8)"/><text x="20.1866%" y="191.50"></text></g><g><title>type_op_normalize_predicate (790,307 samples, 0.58%)</title><rect x="20.2103%" y="197" width="0.5783%" height="15" fill="rgb(213,181,19)"/><text x="20.4603%" y="207.50"></text></g><g><title>normalize_projection_ty (247,692 samples, 0.18%)</title><rect x="20.6074%" y="181" width="0.1812%" height="15" fill="rgb(254,191,54)"/><text x="20.8574%" y="191.50"></text></g><g><title>type_op_normalize_ty (250,003 samples, 0.18%)</title><rect x="20.7886%" y="197" width="0.1829%" height="15" fill="rgb(241,83,37)"/><text x="21.0386%" y="207.50"></text></g><g><title>type_op_prove_predicate (3,003,910 samples, 2.20%)</title><rect x="20.9716%" y="197" width="2.1981%" height="15" fill="rgb(233,36,39)"/><text x="21.2216%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (21,602,186 samples, 15.81%)</title><rect x="7.3660%" y="229" width="15.8074%" height="15" fill="rgb(226,3,54)"/><text x="7.6160%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,540,725 samples, 15.76%)</title><rect x="7.4110%" y="213" width="15.7624%" height="15" fill="rgb(245,192,40)"/><text x="7.6610%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (284,563 samples, 0.21%)</title><rect x="23.4796%" y="197" width="0.2082%" height="15" fill="rgb(238,167,29)"/><text x="23.7296%" y="207.50"></text></g><g><title>check_mod_attrs (416,725 samples, 0.30%)</title><rect x="23.3830%" y="213" width="0.3049%" height="15" fill="rgb(232,182,51)"/><text x="23.6330%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (316,453 samples, 0.23%)</title><rect x="23.7730%" y="213" width="0.2316%" height="15" fill="rgb(231,60,39)"/><text x="24.0230%" y="223.50"></text></g><g><title>misc_checking_1 (912,179 samples, 0.67%)</title><rect x="23.3612%" y="229" width="0.6675%" height="15" fill="rgb(208,69,12)"/><text x="23.6112%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (349,164 samples, 0.26%)</title><rect x="24.0302%" y="213" width="0.2555%" height="15" fill="rgb(235,93,37)"/><text x="24.2802%" y="223.50"></text></g><g><title>check_mod_liveness (285,233 samples, 0.21%)</title><rect x="24.0770%" y="197" width="0.2087%" height="15" fill="rgb(213,116,39)"/><text x="24.3270%" y="207.50"></text></g><g><title>misc_checking_2 (817,879 samples, 0.60%)</title><rect x="24.0287%" y="229" width="0.5985%" height="15" fill="rgb(222,207,29)"/><text x="24.2787%" y="239.50"></text></g><g><title>match_checking (466,715 samples, 0.34%)</title><rect x="24.2857%" y="213" width="0.3415%" height="15" fill="rgb(206,96,30)"/><text x="24.5357%" y="223.50"></text></g><g><title>check_match (448,364 samples, 0.33%)</title><rect x="24.2991%" y="197" width="0.3281%" height="15" fill="rgb(218,138,4)"/><text x="24.5491%" y="207.50"></text></g><g><title>death_checking (208,732 samples, 0.15%)</title><rect x="24.7173%" y="213" width="0.1527%" height="15" fill="rgb(250,191,14)"/><text x="24.9673%" y="223.50"></text></g><g><title>param_env (164,142 samples, 0.12%)</title><rect x="25.3740%" y="181" width="0.1201%" height="15" fill="rgb(239,60,40)"/><text x="25.6240%" y="191.50"></text></g><g><title>crate_lints (1,924,789 samples, 1.41%)</title><rect x="24.8713%" y="197" width="1.4085%" height="15" fill="rgb(206,27,48)"/><text x="25.1213%" y="207.50"></text></g><g><title>type_of (1,063,291 samples, 0.78%)</title><rect x="25.5017%" y="181" width="0.7781%" height="15" fill="rgb(225,35,8)"/><text x="25.7517%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (818,540 samples, 0.60%)</title><rect x="25.6808%" y="165" width="0.5990%" height="15" fill="rgb(250,213,24)"/><text x="25.9308%" y="175.50"></text></g><g><title>lint_checking (2,197,392 samples, 1.61%)</title><rect x="24.8701%" y="213" width="1.6079%" height="15" fill="rgb(247,123,22)"/><text x="25.1201%" y="223.50"></text></g><g><title>module_lints (271,003 samples, 0.20%)</title><rect x="26.2797%" y="197" width="0.1983%" height="15" fill="rgb(231,138,38)"/><text x="26.5297%" y="207.50"></text></g><g><title>lint_mod (265,833 samples, 0.19%)</title><rect x="26.2835%" y="181" width="0.1945%" height="15" fill="rgb(231,145,46)"/><text x="26.5335%" y="191.50"></text></g><g><title>privacy_checking_modules (476,815 samples, 0.35%)</title><rect x="26.5615%" y="213" width="0.3489%" height="15" fill="rgb(251,118,11)"/><text x="26.8115%" y="223.50"></text></g><g><title>check_mod_privacy (472,625 samples, 0.35%)</title><rect x="26.5646%" y="197" width="0.3458%" height="15" fill="rgb(217,147,25)"/><text x="26.8146%" y="207.50"></text></g><g><title>misc_checking_3 (3,135,832 samples, 2.29%)</title><rect x="24.6272%" y="229" width="2.2946%" height="15" fill="rgb(247,81,37)"/><text x="24.8772%" y="239.50">m..</text></g><g><title>impl_parent (845,159 samples, 0.62%)</title><rect x="27.8771%" y="165" width="0.6184%" height="15" fill="rgb(209,12,38)"/><text x="28.1271%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (569,456 samples, 0.42%)</title><rect x="28.0788%" y="149" width="0.4167%" height="15" fill="rgb(227,1,9)"/><text x="28.3288%" y="159.50"></text></g><g><title>impl_trait_ref (2,850,121 samples, 2.09%)</title><rect x="28.4955%" y="165" width="2.0856%" height="15" fill="rgb(248,47,43)"/><text x="28.7455%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,559,691 samples, 1.87%)</title><rect x="28.7081%" y="149" width="1.8731%" height="15" fill="rgb(221,10,30)"/><text x="28.9581%" y="159.50">m..</text></g><g><title>coherent_trait (5,189,142 samples, 3.80%)</title><rect x="26.9588%" y="197" width="3.7971%" height="15" fill="rgb(210,229,1)"/><text x="27.2088%" y="207.50">cohe..</text></g><g><title>specialization_graph_of (5,179,712 samples, 3.79%)</title><rect x="26.9657%" y="181" width="3.7902%" height="15" fill="rgb(222,148,37)"/><text x="27.2157%" y="191.50">spec..</text></g><g><title>trait_impls_of (237,413 samples, 0.17%)</title><rect x="30.5822%" y="165" width="0.1737%" height="15" fill="rgb(234,67,33)"/><text x="30.8322%" y="175.50"></text></g><g><title>coherence_checking (5,235,613 samples, 3.83%)</title><rect x="26.9495%" y="213" width="3.8312%" height="15" fill="rgb(247,98,35)"/><text x="27.1995%" y="223.50">cohe..</text></g><g><title>associated_item (743,788 samples, 0.54%)</title><rect x="38.3682%" y="149" width="0.5443%" height="15" fill="rgb(247,138,52)"/><text x="38.6182%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (587,677 samples, 0.43%)</title><rect x="38.4824%" y="133" width="0.4300%" height="15" fill="rgb(213,79,30)"/><text x="38.7324%" y="143.50"></text></g><g><title>associated_items (1,014,869 samples, 0.74%)</title><rect x="38.1962%" y="165" width="0.7426%" height="15" fill="rgb(246,177,23)"/><text x="38.4462%" y="175.50"></text></g><g><title>dropck_outlives (293,455 samples, 0.21%)</title><rect x="38.9886%" y="165" width="0.2147%" height="15" fill="rgb(230,62,27)"/><text x="39.2386%" y="175.50"></text></g><g><title>adt_dtorck_constraint (176,492 samples, 0.13%)</title><rect x="39.0742%" y="149" width="0.1291%" height="15" fill="rgb(216,154,8)"/><text x="39.3242%" y="159.50"></text></g><g><title>generics_of (416,606 samples, 0.30%)</title><rect x="40.8290%" y="149" width="0.3049%" height="15" fill="rgb(244,35,45)"/><text x="41.0790%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (328,723 samples, 0.24%)</title><rect x="40.8933%" y="133" width="0.2405%" height="15" fill="rgb(251,115,12)"/><text x="41.1433%" y="143.50"></text></g><g><title>impl_trait_ref (554,414 samples, 0.41%)</title><rect x="41.2244%" y="149" width="0.4057%" height="15" fill="rgb(240,54,50)"/><text x="41.4744%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (465,193 samples, 0.34%)</title><rect x="41.2897%" y="133" width="0.3404%" height="15" fill="rgb(233,84,52)"/><text x="41.5397%" y="143.50"></text></g><g><title>predicates_of (436,306 samples, 0.32%)</title><rect x="41.6611%" y="149" width="0.3193%" height="15" fill="rgb(207,117,47)"/><text x="41.9111%" y="159.50"></text></g><g><title>predicates_defined_on (256,105 samples, 0.19%)</title><rect x="41.7930%" y="133" width="0.1874%" height="15" fill="rgb(249,43,39)"/><text x="42.0430%" y="143.50"></text></g><g><title>specializes (973,882 samples, 0.71%)</title><rect x="41.9804%" y="149" width="0.7126%" height="15" fill="rgb(209,38,44)"/><text x="42.2304%" y="159.50"></text></g><g><title>param_env (607,227 samples, 0.44%)</title><rect x="42.2487%" y="133" width="0.4443%" height="15" fill="rgb(236,212,23)"/><text x="42.4987%" y="143.50"></text></g><g><title>def_span (270,885 samples, 0.20%)</title><rect x="42.4948%" y="117" width="0.1982%" height="15" fill="rgb(242,79,21)"/><text x="42.7448%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (243,474 samples, 0.18%)</title><rect x="42.5149%" y="101" width="0.1782%" height="15" fill="rgb(211,96,35)"/><text x="42.7649%" y="111.50"></text></g><g><title>trait_impls_of (648,356 samples, 0.47%)</title><rect x="42.7076%" y="149" width="0.4744%" height="15" fill="rgb(253,215,40)"/><text x="42.9576%" y="159.50"></text></g><g><title>implementations_of_trait (269,483 samples, 0.20%)</title><rect x="42.9848%" y="133" width="0.1972%" height="15" fill="rgb(211,81,21)"/><text x="43.2348%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (187,571 samples, 0.14%)</title><rect x="43.0448%" y="117" width="0.1373%" height="15" fill="rgb(208,190,38)"/><text x="43.2948%" y="127.50"></text></g><g><title>evaluate_obligation (5,454,541 samples, 3.99%)</title><rect x="39.2033%" y="165" width="3.9914%" height="15" fill="rgb(235,213,38)"/><text x="39.4533%" y="175.50">eval..</text></g><g><title>fn_sig (137,350 samples, 0.10%)</title><rect x="43.2129%" y="165" width="0.1005%" height="15" fill="rgb(237,122,38)"/><text x="43.4629%" y="175.50"></text></g><g><title>impl_item_implementor_ids (141,402 samples, 0.10%)</title><rect x="43.4013%" y="165" width="0.1035%" height="15" fill="rgb(244,218,35)"/><text x="43.6513%" y="175.50"></text></g><g><title>item_attrs (148,582 samples, 0.11%)</title><rect x="43.5860%" y="165" width="0.1087%" height="15" fill="rgb(240,68,47)"/><text x="43.8360%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (143,422 samples, 0.10%)</title><rect x="43.5898%" y="149" width="0.1049%" height="15" fill="rgb(210,16,53)"/><text x="43.8398%" y="159.50"></text></g><g><title>evaluate_obligation (197,034 samples, 0.14%)</title><rect x="43.8775%" y="149" width="0.1442%" height="15" fill="rgb(235,124,12)"/><text x="44.1275%" y="159.50"></text></g><g><title>method_autoderef_steps (380,976 samples, 0.28%)</title><rect x="43.7506%" y="165" width="0.2788%" height="15" fill="rgb(224,169,11)"/><text x="44.0006%" y="175.50"></text></g><g><title>predicates_of (651,508 samples, 0.48%)</title><rect x="44.0746%" y="165" width="0.4767%" height="15" fill="rgb(250,166,2)"/><text x="44.3246%" y="175.50"></text></g><g><title>predicates_defined_on (528,798 samples, 0.39%)</title><rect x="44.1644%" y="149" width="0.3869%" height="15" fill="rgb(242,216,29)"/><text x="44.4144%" y="159.50"></text></g><g><title>inferred_outlives_of (301,063 samples, 0.22%)</title><rect x="44.3310%" y="133" width="0.2203%" height="15" fill="rgb(230,116,27)"/><text x="44.5810%" y="143.50"></text></g><g><title>dropck_outlives (265,391 samples, 0.19%)</title><rect x="49.4388%" y="149" width="0.1942%" height="15" fill="rgb(228,99,48)"/><text x="49.6888%" y="159.50"></text></g><g><title>generics_of (148,891 samples, 0.11%)</title><rect x="50.8590%" y="133" width="0.1090%" height="15" fill="rgb(253,11,6)"/><text x="51.1090%" y="143.50"></text></g><g><title>impl_trait_ref (208,431 samples, 0.15%)</title><rect x="50.9909%" y="133" width="0.1525%" height="15" fill="rgb(247,143,39)"/><text x="51.2409%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (162,110 samples, 0.12%)</title><rect x="51.0248%" y="117" width="0.1186%" height="15" fill="rgb(236,97,10)"/><text x="51.2748%" y="127.50"></text></g><g><title>specializes (218,692 samples, 0.16%)</title><rect x="51.2245%" y="133" width="0.1600%" height="15" fill="rgb(233,208,19)"/><text x="51.4745%" y="143.50"></text></g><g><title>evaluate_obligation (2,470,943 samples, 1.81%)</title><rect x="49.6330%" y="149" width="1.8081%" height="15" fill="rgb(216,164,2)"/><text x="49.8830%" y="159.50">e..</text></g><g><title>method_autoderef_steps (420,035 samples, 0.31%)</title><rect x="51.6880%" y="149" width="0.3074%" height="15" fill="rgb(220,129,5)"/><text x="51.9380%" y="159.50"></text></g><g><title>evaluate_obligation (192,983 samples, 0.14%)</title><rect x="51.8541%" y="133" width="0.1412%" height="15" fill="rgb(242,17,10)"/><text x="52.1041%" y="143.50"></text></g><g><title>typeck (10,240,092 samples, 7.49%)</title><rect x="44.6488%" y="165" width="7.4932%" height="15" fill="rgb(242,107,0)"/><text x="44.8988%" y="175.50">typeck</text></g><g><title>item_bodies_checking (29,220,683 samples, 21.38%)</title><rect x="30.7919%" y="213" width="21.3822%" height="15" fill="rgb(251,28,31)"/><text x="31.0419%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,217,913 samples, 21.38%)</title><rect x="30.7939%" y="197" width="21.3802%" height="15" fill="rgb(233,223,10)"/><text x="31.0439%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (29,178,352 samples, 21.35%)</title><rect x="30.8228%" y="181" width="21.3512%" height="15" fill="rgb(215,21,27)"/><text x="31.0728%" y="191.50">typeck</text></g><g><title>impl_trait_ref (157,170 samples, 0.12%)</title><rect x="52.7106%" y="133" width="0.1150%" height="15" fill="rgb(232,23,21)"/><text x="52.9606%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (136,940 samples, 0.10%)</title><rect x="52.7254%" y="117" width="0.1002%" height="15" fill="rgb(244,5,23)"/><text x="52.9754%" y="127.50"></text></g><g><title>adt_destructor (328,243 samples, 0.24%)</title><rect x="52.6053%" y="181" width="0.2402%" height="15" fill="rgb(226,81,46)"/><text x="52.8553%" y="191.50"></text></g><g><title>coherent_trait (323,913 samples, 0.24%)</title><rect x="52.6084%" y="165" width="0.2370%" height="15" fill="rgb(247,70,30)"/><text x="52.8584%" y="175.50"></text></g><g><title>specialization_graph_of (322,173 samples, 0.24%)</title><rect x="52.6097%" y="149" width="0.2357%" height="15" fill="rgb(212,68,19)"/><text x="52.8597%" y="159.50"></text></g><g><title>item_types_checking (1,143,431 samples, 0.84%)</title><rect x="52.1740%" y="213" width="0.8367%" height="15" fill="rgb(240,187,13)"/><text x="52.4240%" y="223.50"></text></g><g><title>check_mod_item_types (1,135,901 samples, 0.83%)</title><rect x="52.1796%" y="197" width="0.8312%" height="15" fill="rgb(223,113,26)"/><text x="52.4296%" y="207.50"></text></g><g><title>fn_sig (186,801 samples, 0.14%)</title><rect x="53.1338%" y="181" width="0.1367%" height="15" fill="rgb(206,192,2)"/><text x="53.3838%" y="191.50"></text></g><g><title>generics_of (287,621 samples, 0.21%)</title><rect x="53.2705%" y="181" width="0.2105%" height="15" fill="rgb(241,108,4)"/><text x="53.5205%" y="191.50"></text></g><g><title>explicit_predicates_of (179,832 samples, 0.13%)</title><rect x="53.6020%" y="149" width="0.1316%" height="15" fill="rgb(247,173,49)"/><text x="53.8520%" y="159.50"></text></g><g><title>predicates_of (476,545 samples, 0.35%)</title><rect x="53.5596%" y="181" width="0.3487%" height="15" fill="rgb(224,114,35)"/><text x="53.8096%" y="191.50"></text></g><g><title>predicates_defined_on (453,965 samples, 0.33%)</title><rect x="53.5761%" y="165" width="0.3322%" height="15" fill="rgb(245,159,27)"/><text x="53.8261%" y="175.50"></text></g><g><title>inferred_outlives_of (238,842 samples, 0.17%)</title><rect x="53.7336%" y="149" width="0.1748%" height="15" fill="rgb(245,172,44)"/><text x="53.9836%" y="159.50"></text></g><g><title>inferred_outlives_crate (225,792 samples, 0.17%)</title><rect x="53.7431%" y="133" width="0.1652%" height="15" fill="rgb(236,23,11)"/><text x="53.9931%" y="143.50"></text></g><g><title>type_of (150,132 samples, 0.11%)</title><rect x="53.7985%" y="117" width="0.1099%" height="15" fill="rgb(205,117,38)"/><text x="54.0485%" y="127.50"></text></g><g><title>type_collecting (1,331,283 samples, 0.97%)</title><rect x="53.0120%" y="213" width="0.9742%" height="15" fill="rgb(237,72,25)"/><text x="53.2620%" y="223.50"></text></g><g><title>collect_mod_item_types (1,320,893 samples, 0.97%)</title><rect x="53.0196%" y="197" width="0.9666%" height="15" fill="rgb(244,70,9)"/><text x="53.2696%" y="207.50"></text></g><g><title>evaluate_obligation (220,754 samples, 0.16%)</title><rect x="54.5007%" y="181" width="0.1615%" height="15" fill="rgb(217,125,39)"/><text x="54.7507%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,201,004 samples, 0.88%)</title><rect x="54.0555%" y="197" width="0.8788%" height="15" fill="rgb(235,36,10)"/><text x="54.3055%" y="207.50"></text></g><g><title>region_scope_tree (159,442 samples, 0.12%)</title><rect x="54.8177%" y="181" width="0.1167%" height="15" fill="rgb(251,123,47)"/><text x="55.0677%" y="191.50"></text></g><g><title>evaluate_obligation (150,730 samples, 0.11%)</title><rect x="55.4220%" y="181" width="0.1103%" height="15" fill="rgb(221,13,13)"/><text x="55.6720%" y="191.50"></text></g><g><title>param_env (221,792 samples, 0.16%)</title><rect x="55.6157%" y="181" width="0.1623%" height="15" fill="rgb(238,131,9)"/><text x="55.8657%" y="191.50"></text></g><g><title>trait_impls_of (401,574 samples, 0.29%)</title><rect x="55.8500%" y="181" width="0.2939%" height="15" fill="rgb(211,50,8)"/><text x="56.1000%" y="191.50"></text></g><g><title>check_item_well_formed (1,700,275 samples, 1.24%)</title><rect x="54.9344%" y="197" width="1.2442%" height="15" fill="rgb(245,182,24)"/><text x="55.1844%" y="207.50"></text></g><g><title>evaluate_obligation (256,804 samples, 0.19%)</title><rect x="56.5715%" y="181" width="0.1879%" height="15" fill="rgb(242,14,37)"/><text x="56.8215%" y="191.50"></text></g><g><title>implied_outlives_bounds (260,045 samples, 0.19%)</title><rect x="56.7594%" y="181" width="0.1903%" height="15" fill="rgb(246,228,12)"/><text x="57.0094%" y="191.50"></text></g><g><title>analysis (68,128,314 samples, 49.85%)</title><rect x="7.2213%" y="245" width="49.8528%" height="15" fill="rgb(213,55,15)"/><text x="7.4713%" y="255.50">analysis</text></g><g><title>type_check_crate (41,205,722 samples, 30.15%)</title><rect x="26.9218%" y="229" width="30.1522%" height="15" fill="rgb(209,9,3)"/><text x="27.1718%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,217,392 samples, 3.09%)</title><rect x="53.9880%" y="213" width="3.0861%" height="15" fill="rgb(230,59,30)"/><text x="54.2380%" y="223.50">wf_..</text></g><g><title>check_trait_item_well_formed (1,223,832 samples, 0.90%)</title><rect x="56.1785%" y="197" width="0.8955%" height="15" fill="rgb(209,121,21)"/><text x="56.4285%" y="207.50"></text></g><g><title>fn_abi_of_instance (167,171 samples, 0.12%)</title><rect x="58.8626%" y="213" width="0.1223%" height="15" fill="rgb(220,109,13)"/><text x="59.1126%" y="223.50"></text></g><g><title>layout_of (171,882 samples, 0.13%)</title><rect x="58.9882%" y="213" width="0.1258%" height="15" fill="rgb(232,18,1)"/><text x="59.2382%" y="223.50"></text></g><g><title>codegen_module (2,269,663 samples, 1.66%)</title><rect x="57.4832%" y="229" width="1.6608%" height="15" fill="rgb(215,41,42)"/><text x="57.7332%" y="239.50"></text></g><g><title>codegen_crate (2,887,029 samples, 2.11%)</title><rect x="57.0807%" y="245" width="2.1126%" height="15" fill="rgb(224,123,36)"/><text x="57.3307%" y="255.50">c..</text></g><g><title>LLVM_module_codegen (16,181,992 samples, 11.84%)</title><rect x="59.2213%" y="229" width="11.8411%" height="15" fill="rgb(240,125,3)"/><text x="59.4713%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (15,707,677 samples, 11.49%)</title><rect x="59.5683%" y="213" width="11.4941%" height="15" fill="rgb(205,98,50)"/><text x="59.8183%" y="223.50">LLVM_module_codeg..</text></g><g><title>codegen_module_optimize (16,965,820 samples, 12.41%)</title><rect x="59.1933%" y="245" width="12.4147%" height="15" fill="rgb(205,185,37)"/><text x="59.4433%" y="255.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (745,628 samples, 0.55%)</title><rect x="71.0624%" y="229" width="0.5456%" height="15" fill="rgb(238,207,15)"/><text x="71.3124%" y="239.50"></text></g><g><title>metadata_load_macro (199,201 samples, 0.15%)</title><rect x="81.7099%" y="197" width="0.1458%" height="15" fill="rgb(213,199,42)"/><text x="81.9599%" y="207.50"></text></g><g><title>metadata_register_crate (2,285,713 samples, 1.67%)</title><rect x="81.8556%" y="197" width="1.6726%" height="15" fill="rgb(235,201,11)"/><text x="82.1056%" y="207.50"></text></g><g><title>metadata_register_crate (845,510 samples, 0.62%)</title><rect x="82.9095%" y="181" width="0.6187%" height="15" fill="rgb(207,46,11)"/><text x="83.1595%" y="191.50"></text></g><g><title>macro_expand_crate (16,171,943 samples, 11.83%)</title><rect x="71.8805%" y="229" width="11.8338%" height="15" fill="rgb(241,35,35)"/><text x="72.1305%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (16,159,972 samples, 11.83%)</title><rect x="71.8892%" y="213" width="11.8250%" height="15" fill="rgb(243,32,47)"/><text x="72.1392%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (254,253 samples, 0.19%)</title><rect x="83.5282%" y="197" width="0.1860%" height="15" fill="rgb(247,202,23)"/><text x="83.7782%" y="207.50"></text></g><g><title>late_resolve_crate (1,512,535 samples, 1.11%)</title><rect x="83.8237%" y="213" width="1.1068%" height="15" fill="rgb(219,102,11)"/><text x="84.0737%" y="223.50"></text></g><g><title>configure_and_expand (18,268,264 samples, 13.37%)</title><rect x="71.6080%" y="245" width="13.3678%" height="15" fill="rgb(243,110,44)"/><text x="71.8580%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,631,636 samples, 1.19%)</title><rect x="83.7819%" y="229" width="1.1939%" height="15" fill="rgb(222,74,54)"/><text x="84.0319%" y="239.50"></text></g><g><title>early_lint_checks (401,944 samples, 0.29%)</title><rect x="85.0692%" y="245" width="0.2941%" height="15" fill="rgb(216,99,12)"/><text x="85.3192%" y="255.50"></text></g><g><title>free_global_ctxt (3,778,398 samples, 2.76%)</title><rect x="85.3633%" y="245" width="2.7648%" height="15" fill="rgb(226,22,26)"/><text x="85.6133%" y="255.50">fr..</text></g><g><title>optimized_mir (516,815 samples, 0.38%)</title><rect x="88.9810%" y="165" width="0.3782%" height="15" fill="rgb(217,163,10)"/><text x="89.2310%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (694,997 samples, 0.51%)</title><rect x="88.8964%" y="181" width="0.5086%" height="15" fill="rgb(213,25,53)"/><text x="89.1464%" y="191.50"></text></g><g><title>monomorphization_collector (727,647 samples, 0.53%)</title><rect x="88.8943%" y="197" width="0.5325%" height="15" fill="rgb(252,105,26)"/><text x="89.1443%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (882,369 samples, 0.65%)</title><rect x="88.8735%" y="213" width="0.6457%" height="15" fill="rgb(220,39,43)"/><text x="89.1235%" y="223.50"></text></g><g><title>exported_symbols (970,819 samples, 0.71%)</title><rect x="88.8644%" y="229" width="0.7104%" height="15" fill="rgb(229,68,48)"/><text x="89.1144%" y="239.50"></text></g><g><title>is_sized_raw (160,060 samples, 0.12%)</title><rect x="91.2254%" y="197" width="0.1171%" height="15" fill="rgb(252,8,32)"/><text x="91.4754%" y="207.50"></text></g><g><title>layout_of (183,980 samples, 0.13%)</title><rect x="91.3425%" y="197" width="0.1346%" height="15" fill="rgb(223,20,43)"/><text x="91.5925%" y="207.50"></text></g><g><title>layout_of (868,327 samples, 0.64%)</title><rect x="90.9828%" y="213" width="0.6354%" height="15" fill="rgb(229,81,49)"/><text x="91.2328%" y="223.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (149,003 samples, 0.11%)</title><rect x="91.5092%" y="197" width="0.1090%" height="15" fill="rgb(236,28,36)"/><text x="91.7592%" y="207.50"></text></g><g><title>needs_drop_raw (153,472 samples, 0.11%)</title><rect x="93.2017%" y="197" width="0.1123%" height="15" fill="rgb(249,185,26)"/><text x="93.4517%" y="207.50"></text></g><g><title>is_copy_raw (138,112 samples, 0.10%)</title><rect x="93.2130%" y="181" width="0.1011%" height="15" fill="rgb(249,174,33)"/><text x="93.4630%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,354,188 samples, 1.72%)</title><rect x="91.6182%" y="213" width="1.7227%" height="15" fill="rgb(233,201,37)"/><text x="91.8682%" y="223.50"></text></g><g><title>optimized_mir (5,127,043 samples, 3.75%)</title><rect x="89.6024%" y="229" width="3.7517%" height="15" fill="rgb(221,78,26)"/><text x="89.8524%" y="239.50">opti..</text></g><g><title>generate_crate_metadata (7,179,042 samples, 5.25%)</title><rect x="88.1282%" y="245" width="5.2533%" height="15" fill="rgb(250,127,30)"/><text x="88.3782%" y="255.50">genera..</text></g><g><title>hir_lowering (1,366,823 samples, 1.00%)</title><rect x="93.3814%" y="245" width="1.0002%" height="15" fill="rgb(230,49,44)"/><text x="93.6314%" y="255.50"></text></g><g><title>finish_ongoing_codegen (3,873,079 samples, 2.83%)</title><rect x="94.3969%" y="229" width="2.8341%" height="15" fill="rgb(229,67,23)"/><text x="94.6469%" y="239.50">fi..</text></g><g><title>link_crate (1,306,163 samples, 0.96%)</title><rect x="97.2311%" y="229" width="0.9558%" height="15" fill="rgb(249,83,47)"/><text x="97.4811%" y="239.50"></text></g><g><title>link_binary (1,282,213 samples, 0.94%)</title><rect x="97.2486%" y="213" width="0.9383%" height="15" fill="rgb(215,43,3)"/><text x="97.4986%" y="223.50"></text></g><g><title>link_rlib (839,408 samples, 0.61%)</title><rect x="97.5726%" y="197" width="0.6142%" height="15" fill="rgb(238,154,13)"/><text x="97.8226%" y="207.50"></text></g><g><title>link (5,209,782 samples, 3.81%)</title><rect x="94.3816%" y="245" width="3.8123%" height="15" fill="rgb(219,56,2)"/><text x="94.6316%" y="255.50">link</text></g><g><title>parse_crate (1,034,740 samples, 0.76%)</title><rect x="98.1938%" y="245" width="0.7572%" height="15" fill="rgb(233,0,4)"/><text x="98.4438%" y="255.50"></text></g><g><title>prepare_outputs (185,722 samples, 0.14%)</title><rect x="98.9570%" y="245" width="0.1359%" height="15" fill="rgb(235,30,7)"/><text x="99.2070%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (830,208 samples, 0.61%)</title><rect x="99.0929%" y="245" width="0.6075%" height="15" fill="rgb(250,79,13)"/><text x="99.3429%" y="255.50"></text></g><g><title>all (136,658,960 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (136,658,960 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (333,123 samples, 0.24%)</title><rect x="99.7562%" y="245" width="0.2438%" height="15" fill="rgb(235,168,5)"/><text x="100.0062%" y="255.50"></text></g></svg></svg>