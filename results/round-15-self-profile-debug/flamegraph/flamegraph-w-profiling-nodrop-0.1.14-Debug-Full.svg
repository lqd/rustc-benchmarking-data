<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,155,832 samples, 9.59%)</title><rect x="1.3109%" y="197" width="9.5894%" height="15" fill="rgb(227,0,7)"/><text x="1.5609%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (161,021 samples, 0.49%)</title><rect x="16.0511%" y="85" width="0.4893%" height="15" fill="rgb(217,0,24)"/><text x="16.3011%" y="95.50"></text></g><g><title>is_copy_raw (153,431 samples, 0.47%)</title><rect x="16.0742%" y="69" width="0.4662%" height="15" fill="rgb(221,193,54)"/><text x="16.3242%" y="79.50"></text></g><g><title>evaluate_obligation (143,781 samples, 0.44%)</title><rect x="16.1035%" y="53" width="0.4369%" height="15" fill="rgb(248,212,6)"/><text x="16.3535%" y="63.50"></text></g><g><title>trait_impls_of (125,051 samples, 0.38%)</title><rect x="16.1604%" y="37" width="0.3800%" height="15" fill="rgb(208,68,35)"/><text x="16.4104%" y="47.50"></text></g><g><title>resolve_instance (53,431 samples, 0.16%)</title><rect x="16.5404%" y="85" width="0.1624%" height="15" fill="rgb(232,128,0)"/><text x="16.7904%" y="95.50"></text></g><g><title>thir_body (120,042 samples, 0.36%)</title><rect x="16.7143%" y="85" width="0.3648%" height="15" fill="rgb(207,160,47)"/><text x="16.9643%" y="95.50"></text></g><g><title>mir_const (877,499 samples, 2.67%)</title><rect x="14.4191%" y="133" width="2.6664%" height="15" fill="rgb(228,23,34)"/><text x="14.6691%" y="143.50">mi..</text></g><g><title>unsafety_check_result (687,996 samples, 2.09%)</title><rect x="14.9949%" y="117" width="2.0906%" height="15" fill="rgb(218,30,26)"/><text x="15.2449%" y="127.50">u..</text></g><g><title>mir_built (601,295 samples, 1.83%)</title><rect x="15.2584%" y="101" width="1.8271%" height="15" fill="rgb(220,122,19)"/><text x="15.5084%" y="111.50">m..</text></g><g><title>mir_promoted (1,005,980 samples, 3.06%)</title><rect x="14.0527%" y="149" width="3.0568%" height="15" fill="rgb(250,228,42)"/><text x="14.3027%" y="159.50">mir..</text></g><g><title>type_op_normalize_fn_sig (39,110 samples, 0.12%)</title><rect x="17.1095%" y="149" width="0.1188%" height="15" fill="rgb(240,193,28)"/><text x="17.3595%" y="159.50"></text></g><g><title>MIR_borrow_checking (2,104,602 samples, 6.40%)</title><rect x="11.1817%" y="181" width="6.3951%" height="15" fill="rgb(216,20,37)"/><text x="11.4317%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (2,092,932 samples, 6.36%)</title><rect x="11.2171%" y="165" width="6.3597%" height="15" fill="rgb(206,188,39)"/><text x="11.4671%" y="175.50">mir_borr..</text></g><g><title>type_op_prove_predicate (114,681 samples, 0.35%)</title><rect x="17.2283%" y="149" width="0.3485%" height="15" fill="rgb(217,207,13)"/><text x="17.4783%" y="159.50"></text></g><g><title>MIR_effect_checking (43,230 samples, 0.13%)</title><rect x="17.5768%" y="181" width="0.1314%" height="15" fill="rgb(231,73,38)"/><text x="17.8268%" y="191.50"></text></g><g><title>hir_module_items (69,481 samples, 0.21%)</title><rect x="17.7082%" y="181" width="0.2111%" height="15" fill="rgb(225,20,46)"/><text x="17.9582%" y="191.50"></text></g><g><title>get_lang_items (40,190 samples, 0.12%)</title><rect x="18.2492%" y="133" width="0.1221%" height="15" fill="rgb(210,31,41)"/><text x="18.4992%" y="143.50"></text></g><g><title>codegen_fn_attrs (35,141 samples, 0.11%)</title><rect x="18.4454%" y="117" width="0.1068%" height="15" fill="rgb(221,200,47)"/><text x="18.6954%" y="127.50"></text></g><g><title>should_inherit_track_caller (60,811 samples, 0.18%)</title><rect x="18.3713%" y="133" width="0.1848%" height="15" fill="rgb(226,26,5)"/><text x="18.6213%" y="143.50"></text></g><g><title>codegen_fn_attrs (156,412 samples, 0.48%)</title><rect x="18.1387%" y="149" width="0.4753%" height="15" fill="rgb(249,33,26)"/><text x="18.3887%" y="159.50"></text></g><g><title>check_mod_attrs (210,372 samples, 0.64%)</title><rect x="17.9750%" y="165" width="0.6392%" height="15" fill="rgb(235,183,28)"/><text x="18.2250%" y="175.50"></text></g><g><title>lookup_deprecation_entry (50,740 samples, 0.15%)</title><rect x="18.9272%" y="149" width="0.1542%" height="15" fill="rgb(221,5,38)"/><text x="19.1772%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (143,751 samples, 0.44%)</title><rect x="18.7396%" y="165" width="0.4368%" height="15" fill="rgb(247,18,42)"/><text x="18.9896%" y="175.50"></text></g><g><title>misc_checking_1 (435,255 samples, 1.32%)</title><rect x="17.9204%" y="181" width="1.3226%" height="15" fill="rgb(241,131,45)"/><text x="18.1704%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (66,320 samples, 0.20%)</title><rect x="19.2465%" y="165" width="0.2015%" height="15" fill="rgb(249,31,29)"/><text x="19.4965%" y="175.50"></text></g><g><title>check_mod_liveness (51,580 samples, 0.16%)</title><rect x="19.2913%" y="149" width="0.1567%" height="15" fill="rgb(225,111,53)"/><text x="19.5413%" y="159.50"></text></g><g><title>misc_checking_2 (161,761 samples, 0.49%)</title><rect x="19.2430%" y="181" width="0.4915%" height="15" fill="rgb(238,160,17)"/><text x="19.4930%" y="191.50"></text></g><g><title>match_checking (94,291 samples, 0.29%)</title><rect x="19.4480%" y="165" width="0.2865%" height="15" fill="rgb(214,148,48)"/><text x="19.6980%" y="175.50"></text></g><g><title>check_match (90,251 samples, 0.27%)</title><rect x="19.4603%" y="149" width="0.2742%" height="15" fill="rgb(232,36,49)"/><text x="19.7103%" y="159.50"></text></g><g><title>check_private_in_public (37,800 samples, 0.11%)</title><rect x="19.7535%" y="165" width="0.1149%" height="15" fill="rgb(209,103,24)"/><text x="20.0035%" y="175.50"></text></g><g><title>death_checking (71,321 samples, 0.22%)</title><rect x="19.8683%" y="165" width="0.2167%" height="15" fill="rgb(229,88,8)"/><text x="20.1183%" y="175.50"></text></g><g><title>param_env (55,601 samples, 0.17%)</title><rect x="21.3440%" y="133" width="0.1690%" height="15" fill="rgb(213,181,19)"/><text x="21.5940%" y="143.50"></text></g><g><title>trait_impls_of (225,423 samples, 0.68%)</title><rect x="21.5129%" y="133" width="0.6850%" height="15" fill="rgb(254,191,54)"/><text x="21.7629%" y="143.50"></text></g><g><title>implementations_of_trait (44,380 samples, 0.13%)</title><rect x="22.0630%" y="117" width="0.1349%" height="15" fill="rgb(241,83,37)"/><text x="22.3130%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (40,240 samples, 0.12%)</title><rect x="22.0756%" y="101" width="0.1223%" height="15" fill="rgb(233,36,39)"/><text x="22.3256%" y="111.50"></text></g><g><title>crate_lints (3,511,045 samples, 10.67%)</title><rect x="20.0919%" y="149" width="10.6688%" height="15" fill="rgb(226,3,54)"/><text x="20.3419%" y="159.50">crate_lints</text></g><g><title>type_of (2,817,986 samples, 8.56%)</title><rect x="22.1979%" y="133" width="8.5628%" height="15" fill="rgb(245,192,40)"/><text x="22.4479%" y="143.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,563,763 samples, 7.79%)</title><rect x="22.9704%" y="117" width="7.7903%" height="15" fill="rgb(238,167,29)"/><text x="23.2204%" y="127.50">metadata_de..</text></g><g><title>lint_checking (3,570,706 samples, 10.85%)</title><rect x="20.0851%" y="165" width="10.8501%" height="15" fill="rgb(232,182,51)"/><text x="20.3351%" y="175.50">lint_checking</text></g><g><title>module_lints (57,401 samples, 0.17%)</title><rect x="30.7607%" y="149" width="0.1744%" height="15" fill="rgb(231,60,39)"/><text x="31.0107%" y="159.50"></text></g><g><title>lint_mod (54,661 samples, 0.17%)</title><rect x="30.7690%" y="133" width="0.1661%" height="15" fill="rgb(208,69,12)"/><text x="31.0190%" y="143.50"></text></g><g><title>privacy_access_levels (52,071 samples, 0.16%)</title><rect x="30.9351%" y="165" width="0.1582%" height="15" fill="rgb(235,93,37)"/><text x="31.1851%" y="175.50"></text></g><g><title>privacy_checking_modules (61,920 samples, 0.19%)</title><rect x="31.0934%" y="165" width="0.1882%" height="15" fill="rgb(213,116,39)"/><text x="31.3434%" y="175.50"></text></g><g><title>check_mod_privacy (60,540 samples, 0.18%)</title><rect x="31.0975%" y="149" width="0.1840%" height="15" fill="rgb(222,207,29)"/><text x="31.3475%" y="159.50"></text></g><g><title>misc_checking_3 (3,810,158 samples, 11.58%)</title><rect x="19.7345%" y="181" width="11.5777%" height="15" fill="rgb(206,96,30)"/><text x="19.9845%" y="191.50">misc_checking_3</text></g><g><title>impl_parent (117,481 samples, 0.36%)</title><rect x="31.9797%" y="117" width="0.3570%" height="15" fill="rgb(218,138,4)"/><text x="32.2297%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (89,221 samples, 0.27%)</title><rect x="32.0656%" y="101" width="0.2711%" height="15" fill="rgb(250,191,14)"/><text x="32.3156%" y="111.50"></text></g><g><title>impl_trait_ref (407,854 samples, 1.24%)</title><rect x="32.3367%" y="117" width="1.2393%" height="15" fill="rgb(239,60,40)"/><text x="32.5867%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (379,294 samples, 1.15%)</title><rect x="32.4235%" y="101" width="1.1525%" height="15" fill="rgb(206,27,48)"/><text x="32.6735%" y="111.50"></text></g><g><title>coherent_trait (791,538 samples, 2.41%)</title><rect x="31.4156%" y="149" width="2.4052%" height="15" fill="rgb(225,35,8)"/><text x="31.6656%" y="159.50">co..</text></g><g><title>specialization_graph_of (784,518 samples, 2.38%)</title><rect x="31.4369%" y="133" width="2.3839%" height="15" fill="rgb(250,213,24)"/><text x="31.6869%" y="143.50">sp..</text></g><g><title>trait_impls_of (80,550 samples, 0.24%)</title><rect x="33.5760%" y="117" width="0.2448%" height="15" fill="rgb(247,123,22)"/><text x="33.8260%" y="127.50"></text></g><g><title>coherence_checking (838,519 samples, 2.55%)</title><rect x="31.3791%" y="165" width="2.5480%" height="15" fill="rgb(231,138,38)"/><text x="31.6291%" y="175.50">co..</text></g><g><title>dropck_outlives (46,790 samples, 0.14%)</title><rect x="37.3031%" y="117" width="0.1422%" height="15" fill="rgb(231,145,46)"/><text x="37.5531%" y="127.50"></text></g><g><title>evaluate_obligation (226,812 samples, 0.69%)</title><rect x="37.4453%" y="117" width="0.6892%" height="15" fill="rgb(251,118,11)"/><text x="37.6953%" y="127.50"></text></g><g><title>trait_impls_of (83,221 samples, 0.25%)</title><rect x="37.8816%" y="101" width="0.2529%" height="15" fill="rgb(217,147,25)"/><text x="38.1316%" y="111.50"></text></g><g><title>implementations_of_trait (34,541 samples, 0.10%)</title><rect x="38.0295%" y="85" width="0.1050%" height="15" fill="rgb(247,81,37)"/><text x="38.2795%" y="95.50"></text></g><g><title>associated_item (71,551 samples, 0.22%)</title><rect x="38.2462%" y="85" width="0.2174%" height="15" fill="rgb(209,12,38)"/><text x="38.4962%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (71,071 samples, 0.22%)</title><rect x="38.2477%" y="69" width="0.2160%" height="15" fill="rgb(227,1,9)"/><text x="38.4977%" y="79.50"></text></g><g><title>impl_item_implementor_ids (74,681 samples, 0.23%)</title><rect x="38.2384%" y="117" width="0.2269%" height="15" fill="rgb(248,47,43)"/><text x="38.4884%" y="127.50"></text></g><g><title>associated_items (73,661 samples, 0.22%)</title><rect x="38.2415%" y="101" width="0.2238%" height="15" fill="rgb(221,10,30)"/><text x="38.4915%" y="111.50"></text></g><g><title>item_attrs (64,980 samples, 0.20%)</title><rect x="38.5632%" y="117" width="0.1975%" height="15" fill="rgb(210,229,1)"/><text x="38.8132%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (63,210 samples, 0.19%)</title><rect x="38.5686%" y="101" width="0.1921%" height="15" fill="rgb(222,148,37)"/><text x="38.8186%" y="111.50"></text></g><g><title>predicates_of (54,790 samples, 0.17%)</title><rect x="38.7777%" y="117" width="0.1665%" height="15" fill="rgb(234,67,33)"/><text x="39.0277%" y="127.50"></text></g><g><title>predicates_defined_on (40,600 samples, 0.12%)</title><rect x="38.8209%" y="101" width="0.1234%" height="15" fill="rgb(247,98,35)"/><text x="39.0709%" y="111.50"></text></g><g><title>item_bodies_checking (1,687,707 samples, 5.13%)</title><rect x="33.9697%" y="165" width="5.1283%" height="15" fill="rgb(247,138,52)"/><text x="34.2197%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (1,686,427 samples, 5.12%)</title><rect x="33.9736%" y="149" width="5.1244%" height="15" fill="rgb(213,79,30)"/><text x="34.2236%" y="159.50">typeck..</text></g><g><title>typeck (1,677,497 samples, 5.10%)</title><rect x="34.0007%" y="133" width="5.0973%" height="15" fill="rgb(246,177,23)"/><text x="34.2507%" y="143.50">typeck</text></g><g><title>item_types_checking (252,312 samples, 0.77%)</title><rect x="39.0980%" y="165" width="0.7667%" height="15" fill="rgb(230,62,27)"/><text x="39.3480%" y="175.50"></text></g><g><title>check_mod_item_types (250,512 samples, 0.76%)</title><rect x="39.1035%" y="149" width="0.7612%" height="15" fill="rgb(216,154,8)"/><text x="39.3535%" y="159.50"></text></g><g><title>fn_sig (79,232 samples, 0.24%)</title><rect x="40.0939%" y="133" width="0.2408%" height="15" fill="rgb(244,35,45)"/><text x="40.3439%" y="143.50"></text></g><g><title>late_bound_vars_map (44,452 samples, 0.14%)</title><rect x="40.1996%" y="117" width="0.1351%" height="15" fill="rgb(251,115,12)"/><text x="40.4496%" y="127.50"></text></g><g><title>resolve_lifetimes (34,742 samples, 0.11%)</title><rect x="40.2291%" y="101" width="0.1056%" height="15" fill="rgb(240,54,50)"/><text x="40.4791%" y="111.50"></text></g><g><title>generics_of (78,160 samples, 0.24%)</title><rect x="40.3346%" y="133" width="0.2375%" height="15" fill="rgb(233,84,52)"/><text x="40.5846%" y="143.50"></text></g><g><title>explicit_predicates_of (68,880 samples, 0.21%)</title><rect x="40.6994%" y="101" width="0.2093%" height="15" fill="rgb(207,117,47)"/><text x="40.9494%" y="111.50"></text></g><g><title>predicates_of (140,811 samples, 0.43%)</title><rect x="40.6261%" y="133" width="0.4279%" height="15" fill="rgb(249,43,39)"/><text x="40.8761%" y="143.50"></text></g><g><title>predicates_defined_on (132,261 samples, 0.40%)</title><rect x="40.6521%" y="117" width="0.4019%" height="15" fill="rgb(209,38,44)"/><text x="40.9021%" y="127.50"></text></g><g><title>inferred_outlives_of (47,811 samples, 0.15%)</title><rect x="40.9087%" y="101" width="0.1453%" height="15" fill="rgb(236,212,23)"/><text x="41.1587%" y="111.50"></text></g><g><title>inferred_outlives_crate (42,291 samples, 0.13%)</title><rect x="40.9254%" y="85" width="0.1285%" height="15" fill="rgb(242,79,21)"/><text x="41.1754%" y="95.50"></text></g><g><title>type_collecting (444,254 samples, 1.35%)</title><rect x="39.8678%" y="165" width="1.3499%" height="15" fill="rgb(211,96,35)"/><text x="40.1178%" y="175.50"></text></g><g><title>collect_mod_item_types (433,794 samples, 1.32%)</title><rect x="39.8996%" y="149" width="1.3181%" height="15" fill="rgb(253,215,40)"/><text x="40.1496%" y="159.50"></text></g><g><title>type_of (53,891 samples, 0.16%)</title><rect x="41.0539%" y="133" width="0.1638%" height="15" fill="rgb(211,81,21)"/><text x="41.3039%" y="143.50"></text></g><g><title>evaluate_obligation (90,382 samples, 0.27%)</title><rect x="41.8943%" y="133" width="0.2746%" height="15" fill="rgb(208,190,38)"/><text x="42.1443%" y="143.50"></text></g><g><title>implied_outlives_bounds (34,980 samples, 0.11%)</title><rect x="42.1690%" y="133" width="0.1063%" height="15" fill="rgb(235,213,38)"/><text x="42.4190%" y="143.50"></text></g><g><title>check_impl_item_well_formed (374,124 samples, 1.14%)</title><rect x="41.3093%" y="149" width="1.1368%" height="15" fill="rgb(237,122,38)"/><text x="41.5593%" y="159.50"></text></g><g><title>evaluate_obligation (35,771 samples, 0.11%)</title><rect x="43.5078%" y="133" width="0.1087%" height="15" fill="rgb(244,218,35)"/><text x="43.7578%" y="143.50"></text></g><g><title>implied_outlives_bounds (41,790 samples, 0.13%)</title><rect x="43.6217%" y="133" width="0.1270%" height="15" fill="rgb(240,68,47)"/><text x="43.8717%" y="143.50"></text></g><g><title>param_env (159,931 samples, 0.49%)</title><rect x="43.7486%" y="133" width="0.4860%" height="15" fill="rgb(210,16,53)"/><text x="43.9986%" y="143.50"></text></g><g><title>predicates_of (37,010 samples, 0.11%)</title><rect x="44.2346%" y="133" width="0.1125%" height="15" fill="rgb(235,124,12)"/><text x="44.4846%" y="143.50"></text></g><g><title>analysis (11,052,091 samples, 33.58%)</title><rect x="10.9003%" y="197" width="33.5833%" height="15" fill="rgb(224,169,11)"/><text x="11.1503%" y="207.50">analysis</text></g><g><title>type_check_crate (4,334,644 samples, 13.17%)</title><rect x="31.3122%" y="181" width="13.1714%" height="15" fill="rgb(250,166,2)"/><text x="31.5622%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,074,001 samples, 3.26%)</title><rect x="41.2201%" y="165" width="3.2635%" height="15" fill="rgb(242,216,29)"/><text x="41.4701%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (670,526 samples, 2.04%)</title><rect x="42.4461%" y="149" width="2.0375%" height="15" fill="rgb(230,116,27)"/><text x="42.6961%" y="159.50">c..</text></g><g><title>codegen_module (298,413 samples, 0.91%)</title><rect x="45.8278%" y="181" width="0.9068%" height="15" fill="rgb(228,99,48)"/><text x="46.0778%" y="191.50"></text></g><g><title>codegen_crate (797,098 samples, 2.42%)</title><rect x="44.5028%" y="197" width="2.4221%" height="15" fill="rgb(253,11,6)"/><text x="44.7528%" y="207.50">co..</text></g><g><title>LLVM_module_codegen (2,651,247 samples, 8.06%)</title><rect x="46.9916%" y="181" width="8.0562%" height="15" fill="rgb(247,143,39)"/><text x="47.2416%" y="191.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (2,597,096 samples, 7.89%)</title><rect x="47.1562%" y="165" width="7.8916%" height="15" fill="rgb(236,97,10)"/><text x="47.4062%" y="175.50">LLVM_module..</text></g><g><title>codegen_module_optimize (2,953,150 samples, 8.97%)</title><rect x="46.9249%" y="197" width="8.9735%" height="15" fill="rgb(233,208,19)"/><text x="47.1749%" y="207.50">codegen_modul..</text></g><g><title>LLVM_module_optimize (279,943 samples, 0.85%)</title><rect x="55.0478%" y="181" width="0.8506%" height="15" fill="rgb(216,164,2)"/><text x="55.2978%" y="191.50"></text></g><g><title>AST_validation (49,730 samples, 0.15%)</title><rect x="56.2941%" y="181" width="0.1511%" height="15" fill="rgb(220,129,5)"/><text x="56.5441%" y="191.50"></text></g><g><title>crate_injection (48,931 samples, 0.15%)</title><rect x="56.4872%" y="181" width="0.1487%" height="15" fill="rgb(242,17,10)"/><text x="56.7372%" y="191.50"></text></g><g><title>metadata_load_macro (189,072 samples, 0.57%)</title><rect x="71.0943%" y="149" width="0.5745%" height="15" fill="rgb(242,107,0)"/><text x="71.3443%" y="159.50"></text></g><g><title>macro_expand_crate (6,223,113 samples, 18.91%)</title><rect x="56.6359%" y="181" width="18.9098%" height="15" fill="rgb(251,28,31)"/><text x="56.8859%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (6,211,153 samples, 18.87%)</title><rect x="56.6723%" y="165" width="18.8734%" height="15" fill="rgb(233,223,10)"/><text x="56.9223%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,275,853 samples, 3.88%)</title><rect x="71.6688%" y="149" width="3.8769%" height="15" fill="rgb(215,21,27)"/><text x="71.9188%" y="159.50">meta..</text></g><g><title>metadata_register_crate (448,554 samples, 1.36%)</title><rect x="74.1827%" y="133" width="1.3630%" height="15" fill="rgb(232,23,21)"/><text x="74.4327%" y="143.50"></text></g><g><title>metadata_register_crate (38,170 samples, 0.12%)</title><rect x="75.4297%" y="117" width="0.1160%" height="15" fill="rgb(244,5,23)"/><text x="75.6797%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (59,461 samples, 0.18%)</title><rect x="75.5540%" y="181" width="0.1807%" height="15" fill="rgb(226,81,46)"/><text x="75.8040%" y="191.50"></text></g><g><title>finalize_macro_resolutions (125,801 samples, 0.38%)</title><rect x="75.7965%" y="165" width="0.3823%" height="15" fill="rgb(247,70,30)"/><text x="76.0465%" y="175.50"></text></g><g><title>late_resolve_crate (517,225 samples, 1.57%)</title><rect x="76.1787%" y="165" width="1.5717%" height="15" fill="rgb(212,68,19)"/><text x="76.4287%" y="175.50"></text></g><g><title>configure_and_expand (7,217,253 samples, 21.93%)</title><rect x="55.8984%" y="197" width="21.9306%" height="15" fill="rgb(240,187,13)"/><text x="56.1484%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (689,227 samples, 2.09%)</title><rect x="75.7347%" y="181" width="2.0943%" height="15" fill="rgb(223,113,26)"/><text x="75.9847%" y="191.50">r..</text></g><g><title>drop_ast (42,650 samples, 0.13%)</title><rect x="77.8290%" y="197" width="0.1296%" height="15" fill="rgb(206,192,2)"/><text x="78.0790%" y="207.50"></text></g><g><title>early_lint_checks (78,311 samples, 0.24%)</title><rect x="77.9994%" y="197" width="0.2380%" height="15" fill="rgb(241,108,4)"/><text x="78.2494%" y="207.50"></text></g><g><title>free_global_ctxt (2,342,333 samples, 7.12%)</title><rect x="78.2374%" y="197" width="7.1175%" height="15" fill="rgb(247,173,49)"/><text x="78.4874%" y="207.50">free_globa..</text></g><g><title>crate_hash (68,461 samples, 0.21%)</title><rect x="86.4951%" y="181" width="0.2080%" height="15" fill="rgb(224,114,35)"/><text x="86.7451%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (45,941 samples, 0.14%)</title><rect x="86.8281%" y="165" width="0.1396%" height="15" fill="rgb(245,159,27)"/><text x="87.0781%" y="175.50"></text></g><g><title>exported_symbols (104,821 samples, 0.32%)</title><rect x="86.7893%" y="181" width="0.3185%" height="15" fill="rgb(245,172,44)"/><text x="87.0393%" y="191.50"></text></g><g><title>reachable_non_generics (46,130 samples, 0.14%)</title><rect x="86.9677%" y="165" width="0.1402%" height="15" fill="rgb(236,23,11)"/><text x="87.2177%" y="175.50"></text></g><g><title>layout_of (52,490 samples, 0.16%)</title><rect x="88.3775%" y="165" width="0.1595%" height="15" fill="rgb(205,117,38)"/><text x="88.6275%" y="175.50"></text></g><g><title>needs_drop_raw (37,930 samples, 0.12%)</title><rect x="89.6224%" y="149" width="0.1153%" height="15" fill="rgb(237,72,25)"/><text x="89.8724%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (397,396 samples, 1.21%)</title><rect x="88.5370%" y="165" width="1.2075%" height="15" fill="rgb(244,70,9)"/><text x="88.7870%" y="175.50"></text></g><g><title>optimized_mir (844,789 samples, 2.57%)</title><rect x="87.2474%" y="181" width="2.5670%" height="15" fill="rgb(217,125,39)"/><text x="87.4974%" y="191.50">op..</text></g><g><title>generate_crate_metadata (1,486,555 samples, 4.52%)</title><rect x="85.3549%" y="197" width="4.5171%" height="15" fill="rgb(235,36,10)"/><text x="85.6049%" y="207.50">gener..</text></g><g><title>hir_lowering (413,434 samples, 1.26%)</title><rect x="89.8720%" y="197" width="1.2563%" height="15" fill="rgb(251,123,47)"/><text x="90.1220%" y="207.50"></text></g><g><title>finish_ongoing_codegen (587,266 samples, 1.78%)</title><rect x="91.1603%" y="181" width="1.7845%" height="15" fill="rgb(221,13,13)"/><text x="91.4103%" y="191.50">f..</text></g><g><title>join_worker_thread (33,280 samples, 0.10%)</title><rect x="92.8437%" y="165" width="0.1011%" height="15" fill="rgb(238,131,9)"/><text x="93.0937%" y="175.50"></text></g><g><title>link_crate (528,986 samples, 1.61%)</title><rect x="92.9448%" y="181" width="1.6074%" height="15" fill="rgb(211,50,8)"/><text x="93.1948%" y="191.50"></text></g><g><title>link_binary (516,985 samples, 1.57%)</title><rect x="92.9813%" y="165" width="1.5709%" height="15" fill="rgb(245,182,24)"/><text x="93.2313%" y="175.50"></text></g><g><title>link_rlib (320,594 samples, 0.97%)</title><rect x="93.5780%" y="149" width="0.9742%" height="15" fill="rgb(242,14,37)"/><text x="93.8280%" y="159.50"></text></g><g><title>link (1,133,172 samples, 3.44%)</title><rect x="91.1283%" y="197" width="3.4433%" height="15" fill="rgb(246,228,12)"/><text x="91.3783%" y="207.50">link</text></g><g><title>parse_crate (751,007 samples, 2.28%)</title><rect x="94.5715%" y="197" width="2.2820%" height="15" fill="rgb(213,55,15)"/><text x="94.8215%" y="207.50">p..</text></g><g><title>prepare_outputs (210,892 samples, 0.64%)</title><rect x="96.8708%" y="197" width="0.6408%" height="15" fill="rgb(209,9,3)"/><text x="97.1208%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (408,085 samples, 1.24%)</title><rect x="97.5116%" y="197" width="1.2400%" height="15" fill="rgb(230,59,30)"/><text x="97.7616%" y="207.50"></text></g><g><title>setup_global_ctxt (78,151 samples, 0.24%)</title><rect x="98.7676%" y="197" width="0.2375%" height="15" fill="rgb(209,121,21)"/><text x="99.0176%" y="207.50"></text></g><g><title>all (32,909,523 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (32,909,523 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (327,423 samples, 0.99%)</title><rect x="99.0051%" y="197" width="0.9949%" height="15" fill="rgb(215,41,42)"/><text x="99.2551%" y="207.50"></text></g></svg></svg>