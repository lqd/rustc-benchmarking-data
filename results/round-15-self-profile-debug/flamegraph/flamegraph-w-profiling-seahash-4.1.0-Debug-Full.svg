<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (50,363,343 samples, 13.06%)</title><rect x="0.1433%" y="181" width="13.0629%" height="15" fill="rgb(227,0,7)"/><text x="0.3933%" y="191.50">LLVM_passes</text></g><g><title>resolve_instance (622,966 samples, 0.16%)</title><rect x="16.0318%" y="69" width="0.1616%" height="15" fill="rgb(217,0,24)"/><text x="16.2818%" y="79.50"></text></g><g><title>thir_body (878,678 samples, 0.23%)</title><rect x="16.1974%" y="69" width="0.2279%" height="15" fill="rgb(221,193,54)"/><text x="16.4474%" y="79.50"></text></g><g><title>mir_const (5,589,589 samples, 1.45%)</title><rect x="14.9777%" y="117" width="1.4498%" height="15" fill="rgb(248,212,6)"/><text x="15.2277%" y="127.50"></text></g><g><title>unsafety_check_result (4,845,391 samples, 1.26%)</title><rect x="15.1707%" y="101" width="1.2568%" height="15" fill="rgb(208,68,35)"/><text x="15.4207%" y="111.50"></text></g><g><title>mir_built (4,154,176 samples, 1.08%)</title><rect x="15.3500%" y="85" width="1.0775%" height="15" fill="rgb(232,128,0)"/><text x="15.6000%" y="95.50"></text></g><g><title>mir_promoted (6,306,314 samples, 1.64%)</title><rect x="14.8469%" y="133" width="1.6357%" height="15" fill="rgb(207,160,47)"/><text x="15.0969%" y="143.50"></text></g><g><title>MIR_borrow_checking (13,270,706 samples, 3.44%)</title><rect x="13.2662%" y="165" width="3.4421%" height="15" fill="rgb(228,23,34)"/><text x="13.5162%" y="175.50">MIR..</text></g><g><title>mir_borrowck (13,209,736 samples, 3.43%)</title><rect x="13.2820%" y="149" width="3.4262%" height="15" fill="rgb(218,30,26)"/><text x="13.5320%" y="159.50">mir..</text></g><g><title>type_op_prove_predicate (583,184 samples, 0.15%)</title><rect x="16.5570%" y="133" width="0.1513%" height="15" fill="rgb(220,122,19)"/><text x="16.8070%" y="143.50"></text></g><g><title>check_mod_attrs (448,254 samples, 0.12%)</title><rect x="16.8022%" y="149" width="0.1163%" height="15" fill="rgb(250,228,42)"/><text x="17.0522%" y="159.50"></text></g><g><title>misc_checking_1 (887,289 samples, 0.23%)</title><rect x="16.7955%" y="165" width="0.2301%" height="15" fill="rgb(240,193,28)"/><text x="17.0455%" y="175.50"></text></g><g><title>misc_checking_2 (707,877 samples, 0.18%)</title><rect x="17.0256%" y="165" width="0.1836%" height="15" fill="rgb(216,20,37)"/><text x="17.2756%" y="175.50"></text></g><g><title>crate_lints (1,078,452 samples, 0.28%)</title><rect x="17.2930%" y="133" width="0.2797%" height="15" fill="rgb(206,188,39)"/><text x="17.5430%" y="143.50"></text></g><g><title>type_of (493,625 samples, 0.13%)</title><rect x="17.4447%" y="117" width="0.1280%" height="15" fill="rgb(217,207,13)"/><text x="17.6947%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (406,034 samples, 0.11%)</title><rect x="17.4675%" y="101" width="0.1053%" height="15" fill="rgb(231,73,38)"/><text x="17.7175%" y="111.50"></text></g><g><title>lint_checking (1,387,625 samples, 0.36%)</title><rect x="17.2926%" y="149" width="0.3599%" height="15" fill="rgb(225,20,46)"/><text x="17.5426%" y="159.50"></text></g><g><title>misc_checking_3 (2,210,292 samples, 0.57%)</title><rect x="17.2092%" y="165" width="0.5733%" height="15" fill="rgb(210,31,41)"/><text x="17.4592%" y="175.50"></text></g><g><title>impl_trait_ref (842,409 samples, 0.22%)</title><rect x="18.0820%" y="101" width="0.2185%" height="15" fill="rgb(221,200,47)"/><text x="18.3320%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (728,078 samples, 0.19%)</title><rect x="18.1117%" y="85" width="0.1888%" height="15" fill="rgb(226,26,5)"/><text x="18.3617%" y="95.50"></text></g><g><title>coherent_trait (2,058,341 samples, 0.53%)</title><rect x="17.7958%" y="133" width="0.5339%" height="15" fill="rgb(249,33,26)"/><text x="18.0458%" y="143.50"></text></g><g><title>specialization_graph_of (1,717,507 samples, 0.45%)</title><rect x="17.8842%" y="117" width="0.4455%" height="15" fill="rgb(235,183,28)"/><text x="18.1342%" y="127.50"></text></g><g><title>coherence_checking (2,115,631 samples, 0.55%)</title><rect x="17.7925%" y="149" width="0.5487%" height="15" fill="rgb(221,5,38)"/><text x="18.0425%" y="159.50"></text></g><g><title>associated_item (1,205,782 samples, 0.31%)</title><rect x="21.9067%" y="85" width="0.3127%" height="15" fill="rgb(247,18,42)"/><text x="22.1567%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (952,210 samples, 0.25%)</title><rect x="21.9724%" y="69" width="0.2470%" height="15" fill="rgb(241,131,45)"/><text x="22.2224%" y="79.50"></text></g><g><title>associated_items (1,627,136 samples, 0.42%)</title><rect x="21.8089%" y="101" width="0.4220%" height="15" fill="rgb(249,31,29)"/><text x="22.0589%" y="111.50"></text></g><g><title>eval_to_const_value_raw (652,947 samples, 0.17%)</title><rect x="22.2823%" y="101" width="0.1694%" height="15" fill="rgb(225,111,53)"/><text x="22.5323%" y="111.50"></text></g><g><title>eval_to_const_value_raw (627,856 samples, 0.16%)</title><rect x="22.2888%" y="85" width="0.1628%" height="15" fill="rgb(238,160,17)"/><text x="22.5388%" y="95.50"></text></g><g><title>eval_to_allocation_raw (604,815 samples, 0.16%)</title><rect x="22.2948%" y="69" width="0.1569%" height="15" fill="rgb(214,148,48)"/><text x="22.5448%" y="79.50"></text></g><g><title>generics_of (875,077 samples, 0.23%)</title><rect x="23.3178%" y="85" width="0.2270%" height="15" fill="rgb(232,36,49)"/><text x="23.5678%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (478,923 samples, 0.12%)</title><rect x="23.4205%" y="69" width="0.1242%" height="15" fill="rgb(209,103,24)"/><text x="23.6705%" y="79.50"></text></g><g><title>impl_trait_ref (865,162 samples, 0.22%)</title><rect x="23.6026%" y="85" width="0.2244%" height="15" fill="rgb(229,88,8)"/><text x="23.8526%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (691,769 samples, 0.18%)</title><rect x="23.6476%" y="69" width="0.1794%" height="15" fill="rgb(213,181,19)"/><text x="23.8976%" y="79.50"></text></g><g><title>predicates_of (981,453 samples, 0.25%)</title><rect x="23.8458%" y="85" width="0.2546%" height="15" fill="rgb(254,191,54)"/><text x="24.0958%" y="95.50"></text></g><g><title>predicates_defined_on (546,907 samples, 0.14%)</title><rect x="23.9585%" y="69" width="0.1419%" height="15" fill="rgb(241,83,37)"/><text x="24.2085%" y="79.50"></text></g><g><title>specializes (2,939,767 samples, 0.76%)</title><rect x="24.1003%" y="85" width="0.7625%" height="15" fill="rgb(233,36,39)"/><text x="24.3503%" y="95.50"></text></g><g><title>param_env (1,763,136 samples, 0.46%)</title><rect x="24.4055%" y="69" width="0.4573%" height="15" fill="rgb(226,3,54)"/><text x="24.6555%" y="79.50"></text></g><g><title>def_span (797,545 samples, 0.21%)</title><rect x="24.6560%" y="53" width="0.2069%" height="15" fill="rgb(245,192,40)"/><text x="24.9060%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (703,205 samples, 0.18%)</title><rect x="24.6804%" y="37" width="0.1824%" height="15" fill="rgb(238,167,29)"/><text x="24.9304%" y="47.50"></text></g><g><title>trait_impls_of (426,995 samples, 0.11%)</title><rect x="24.8682%" y="85" width="0.1108%" height="15" fill="rgb(232,182,51)"/><text x="25.1182%" y="95.50"></text></g><g><title>evaluate_obligation (9,770,600 samples, 2.53%)</title><rect x="22.4517%" y="101" width="2.5342%" height="15" fill="rgb(231,60,39)"/><text x="22.7017%" y="111.50">ev..</text></g><g><title>item_bodies_checking (27,213,897 samples, 7.06%)</title><rect x="18.3471%" y="149" width="7.0585%" height="15" fill="rgb(208,69,12)"/><text x="18.5971%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (27,211,107 samples, 7.06%)</title><rect x="18.3478%" y="133" width="7.0578%" height="15" fill="rgb(235,93,37)"/><text x="18.5978%" y="143.50">typeck_it..</text></g><g><title>typeck (27,163,777 samples, 7.05%)</title><rect x="18.3601%" y="117" width="7.0455%" height="15" fill="rgb(213,116,39)"/><text x="18.6101%" y="127.50">typeck</text></g><g><title>type_collecting (753,268 samples, 0.20%)</title><rect x="25.4889%" y="149" width="0.1954%" height="15" fill="rgb(222,207,29)"/><text x="25.7389%" y="159.50"></text></g><g><title>collect_mod_item_types (740,058 samples, 0.19%)</title><rect x="25.4924%" y="133" width="0.1920%" height="15" fill="rgb(206,96,30)"/><text x="25.7424%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,175,581 samples, 0.30%)</title><rect x="25.7064%" y="133" width="0.3049%" height="15" fill="rgb(218,138,4)"/><text x="25.9564%" y="143.50"></text></g><g><title>analysis (50,006,348 samples, 12.97%)</title><rect x="13.2062%" y="181" width="12.9703%" height="15" fill="rgb(250,191,14)"/><text x="13.4562%" y="191.50">analysis</text></g><g><title>type_check_crate (32,362,599 samples, 8.39%)</title><rect x="17.7825%" y="165" width="8.3940%" height="15" fill="rgb(239,60,40)"/><text x="18.0325%" y="175.50">type_check_c..</text></g><g><title>wf_checking (1,894,739 samples, 0.49%)</title><rect x="25.6850%" y="149" width="0.4914%" height="15" fill="rgb(206,27,48)"/><text x="25.9350%" y="159.50"></text></g><g><title>check_item_well_formed (636,667 samples, 0.17%)</title><rect x="26.0113%" y="133" width="0.1651%" height="15" fill="rgb(225,35,8)"/><text x="26.2613%" y="143.50"></text></g><g><title>const_caller_location (534,536 samples, 0.14%)</title><rect x="32.3682%" y="149" width="0.1386%" height="15" fill="rgb(250,213,24)"/><text x="32.6182%" y="159.50"></text></g><g><title>layout_of (832,758 samples, 0.22%)</title><rect x="32.9124%" y="133" width="0.2160%" height="15" fill="rgb(247,123,22)"/><text x="33.1624%" y="143.50"></text></g><g><title>predicates_of (832,078 samples, 0.22%)</title><rect x="33.4072%" y="117" width="0.2158%" height="15" fill="rgb(231,138,38)"/><text x="33.6572%" y="127.50"></text></g><g><title>predicates_defined_on (434,514 samples, 0.11%)</title><rect x="33.5104%" y="101" width="0.1127%" height="15" fill="rgb(231,145,46)"/><text x="33.7604%" y="111.50"></text></g><g><title>param_env (1,910,426 samples, 0.50%)</title><rect x="33.1284%" y="133" width="0.4955%" height="15" fill="rgb(251,118,11)"/><text x="33.3784%" y="143.50"></text></g><g><title>normalize_projection_ty (533,346 samples, 0.14%)</title><rect x="33.7795%" y="117" width="0.1383%" height="15" fill="rgb(217,147,25)"/><text x="34.0295%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,178,110 samples, 0.31%)</title><rect x="33.6239%" y="133" width="0.3056%" height="15" fill="rgb(247,81,37)"/><text x="33.8739%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,488,569 samples, 1.42%)</title><rect x="32.5068%" y="149" width="1.4236%" height="15" fill="rgb(209,12,38)"/><text x="32.7568%" y="159.50"></text></g><g><title>layout_of (622,185 samples, 0.16%)</title><rect x="33.9848%" y="149" width="0.1614%" height="15" fill="rgb(227,1,9)"/><text x="34.2348%" y="159.50"></text></g><g><title>codegen_module (29,129,814 samples, 7.56%)</title><rect x="26.6229%" y="165" width="7.5555%" height="15" fill="rgb(248,47,43)"/><text x="26.8729%" y="175.50">codegen_mo..</text></g><g><title>codegen_crate (30,868,854 samples, 8.01%)</title><rect x="26.1782%" y="181" width="8.0065%" height="15" fill="rgb(221,10,30)"/><text x="26.4282%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (177,178,473 samples, 45.96%)</title><rect x="34.2450%" y="165" width="45.9553%" height="15" fill="rgb(210,229,1)"/><text x="34.4950%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (169,844,017 samples, 44.05%)</title><rect x="36.1473%" y="149" width="44.0529%" height="15" fill="rgb(222,148,37)"/><text x="36.3973%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (202,727,755 samples, 52.58%)</title><rect x="34.1847%" y="181" width="52.5820%" height="15" fill="rgb(234,67,33)"/><text x="34.4347%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (25,317,071 samples, 6.57%)</title><rect x="80.2002%" y="165" width="6.5666%" height="15" fill="rgb(247,98,35)"/><text x="80.4502%" y="175.50">LLVM_modu..</text></g><g><title>macro_expand_crate (7,907,561 samples, 2.05%)</title><rect x="86.8503%" y="165" width="2.0510%" height="15" fill="rgb(247,138,52)"/><text x="87.1003%" y="175.50">m..</text></g><g><title>expand_crate (7,898,480 samples, 2.05%)</title><rect x="86.8526%" y="149" width="2.0487%" height="15" fill="rgb(213,79,30)"/><text x="87.1026%" y="159.50">e..</text></g><g><title>late_resolve_crate (1,322,734 samples, 0.34%)</title><rect x="88.9469%" y="149" width="0.3431%" height="15" fill="rgb(246,177,23)"/><text x="89.1969%" y="159.50"></text></g><g><title>configure_and_expand (9,814,890 samples, 2.55%)</title><rect x="86.7668%" y="181" width="2.5457%" height="15" fill="rgb(230,62,27)"/><text x="87.0168%" y="191.50">co..</text></g><g><title>resolve_crate (1,537,445 samples, 0.40%)</title><rect x="88.9137%" y="165" width="0.3988%" height="15" fill="rgb(216,154,8)"/><text x="89.1637%" y="175.50"></text></g><g><title>free_global_ctxt (3,061,611 samples, 0.79%)</title><rect x="89.4322%" y="181" width="0.7941%" height="15" fill="rgb(244,35,45)"/><text x="89.6822%" y="191.50"></text></g><g><title>item_attrs (793,628 samples, 0.21%)</title><rect x="90.6665%" y="85" width="0.2058%" height="15" fill="rgb(251,115,12)"/><text x="90.9165%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (773,828 samples, 0.20%)</title><rect x="90.6716%" y="69" width="0.2007%" height="15" fill="rgb(240,54,50)"/><text x="90.9216%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,049,811 samples, 0.27%)</title><rect x="90.6312%" y="101" width="0.2723%" height="15" fill="rgb(233,84,52)"/><text x="90.8812%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (680,086 samples, 0.18%)</title><rect x="91.3953%" y="85" width="0.1764%" height="15" fill="rgb(207,117,47)"/><text x="91.6453%" y="95.50"></text></g><g><title>optimized_mir (3,600,997 samples, 0.93%)</title><rect x="90.9718%" y="101" width="0.9340%" height="15" fill="rgb(249,43,39)"/><text x="91.2218%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,288,225 samples, 0.33%)</title><rect x="91.5717%" y="85" width="0.3341%" height="15" fill="rgb(209,38,44)"/><text x="91.8217%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (484,394 samples, 0.13%)</title><rect x="91.9781%" y="85" width="0.1256%" height="15" fill="rgb(236,212,23)"/><text x="92.2281%" y="95.50"></text></g><g><title>specialization_graph_of (653,467 samples, 0.17%)</title><rect x="92.1446%" y="85" width="0.1695%" height="15" fill="rgb(242,79,21)"/><text x="92.3946%" y="95.50"></text></g><g><title>resolve_instance (1,703,935 samples, 0.44%)</title><rect x="91.9058%" y="101" width="0.4420%" height="15" fill="rgb(211,96,35)"/><text x="92.1558%" y="111.50"></text></g><g><title>specialization_graph_of (837,749 samples, 0.22%)</title><rect x="92.4450%" y="69" width="0.2173%" height="15" fill="rgb(253,215,40)"/><text x="92.6950%" y="79.50"></text></g><g><title>resolve_instance (909,289 samples, 0.24%)</title><rect x="92.4270%" y="85" width="0.2358%" height="15" fill="rgb(211,81,21)"/><text x="92.6770%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (8,640,048 samples, 2.24%)</title><rect x="90.4224%" y="117" width="2.2410%" height="15" fill="rgb(208,190,38)"/><text x="90.6724%" y="127.50">m..</text></g><g><title>vtable_entries (1,105,851 samples, 0.29%)</title><rect x="92.3765%" y="101" width="0.2868%" height="15" fill="rgb(235,213,38)"/><text x="92.6265%" y="111.50"></text></g><g><title>monomorphization_collector (8,692,088 samples, 2.25%)</title><rect x="90.4218%" y="133" width="2.2545%" height="15" fill="rgb(237,122,38)"/><text x="90.6718%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (742,528 samples, 0.19%)</title><rect x="92.6773%" y="117" width="0.1926%" height="15" fill="rgb(244,218,35)"/><text x="92.9273%" y="127.50"></text></g><g><title>symbol_name (670,668 samples, 0.17%)</title><rect x="92.6959%" y="101" width="0.1740%" height="15" fill="rgb(240,68,47)"/><text x="92.9459%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (9,883,750 samples, 2.56%)</title><rect x="90.4117%" y="149" width="2.5636%" height="15" fill="rgb(210,16,53)"/><text x="90.6617%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,152,772 samples, 0.30%)</title><rect x="92.6763%" y="133" width="0.2990%" height="15" fill="rgb(235,124,12)"/><text x="92.9263%" y="143.50"></text></g><g><title>cgu_partitioning (406,214 samples, 0.11%)</title><rect x="92.8699%" y="117" width="0.1054%" height="15" fill="rgb(224,169,11)"/><text x="93.1199%" y="127.50"></text></g><g><title>exported_symbols (9,965,332 samples, 2.58%)</title><rect x="90.4007%" y="165" width="2.5847%" height="15" fill="rgb(250,166,2)"/><text x="90.6507%" y="175.50">ex..</text></g><g><title>optimized_mir (1,632,394 samples, 0.42%)</title><rect x="92.9965%" y="165" width="0.4234%" height="15" fill="rgb(242,216,29)"/><text x="93.2465%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (796,405 samples, 0.21%)</title><rect x="93.2134%" y="149" width="0.2066%" height="15" fill="rgb(230,116,27)"/><text x="93.4634%" y="159.50"></text></g><g><title>generate_crate_metadata (12,331,156 samples, 3.20%)</title><rect x="90.2263%" y="181" width="3.1984%" height="15" fill="rgb(228,99,48)"/><text x="90.4763%" y="191.50">gen..</text></g><g><title>hir_lowering (1,643,457 samples, 0.43%)</title><rect x="93.4247%" y="181" width="0.4263%" height="15" fill="rgb(253,11,6)"/><text x="93.6747%" y="191.50"></text></g><g><title>finish_ongoing_codegen (20,095,154 samples, 5.21%)</title><rect x="93.8550%" y="165" width="5.2121%" height="15" fill="rgb(247,143,39)"/><text x="94.1050%" y="175.50">finish..</text></g><g><title>link_crate (1,437,724 samples, 0.37%)</title><rect x="99.0671%" y="165" width="0.3729%" height="15" fill="rgb(236,97,10)"/><text x="99.3171%" y="175.50"></text></g><g><title>link_binary (1,423,094 samples, 0.37%)</title><rect x="99.0709%" y="149" width="0.3691%" height="15" fill="rgb(233,208,19)"/><text x="99.3209%" y="159.50"></text></g><g><title>link_rlib (918,529 samples, 0.24%)</title><rect x="99.2018%" y="133" width="0.2382%" height="15" fill="rgb(216,164,2)"/><text x="99.4518%" y="143.50"></text></g><g><title>link (21,558,259 samples, 5.59%)</title><rect x="93.8509%" y="181" width="5.5916%" height="15" fill="rgb(220,129,5)"/><text x="94.1009%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (1,299,023 samples, 0.34%)</title><rect x="99.5586%" y="181" width="0.3369%" height="15" fill="rgb(242,17,10)"/><text x="99.8086%" y="191.50"></text></g><g><title>all (385,545,585 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (385,545,585 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>