<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (31,552,071 samples, 12.04%)</title><rect x="0.2656%" y="181" width="12.0411%" height="15" fill="rgb(227,0,7)"/><text x="0.5156%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (556,364 samples, 0.21%)</title><rect x="14.4363%" y="69" width="0.2123%" height="15" fill="rgb(217,0,24)"/><text x="14.6863%" y="79.50"></text></g><g><title>is_copy_raw (331,152 samples, 0.13%)</title><rect x="14.5222%" y="53" width="0.1264%" height="15" fill="rgb(221,193,54)"/><text x="14.7722%" y="63.50"></text></g><g><title>evaluate_obligation (271,851 samples, 0.10%)</title><rect x="14.5448%" y="37" width="0.1037%" height="15" fill="rgb(248,212,6)"/><text x="14.7948%" y="47.50"></text></g><g><title>thir_body (288,014 samples, 0.11%)</title><rect x="14.7450%" y="69" width="0.1099%" height="15" fill="rgb(208,68,35)"/><text x="14.9950%" y="79.50"></text></g><g><title>mir_const (2,676,140 samples, 1.02%)</title><rect x="13.8363%" y="117" width="1.0213%" height="15" fill="rgb(232,128,0)"/><text x="14.0863%" y="127.50"></text></g><g><title>unsafety_check_result (2,300,146 samples, 0.88%)</title><rect x="13.9798%" y="101" width="0.8778%" height="15" fill="rgb(207,160,47)"/><text x="14.2298%" y="111.50"></text></g><g><title>mir_built (1,968,100 samples, 0.75%)</title><rect x="14.1065%" y="85" width="0.7511%" height="15" fill="rgb(228,23,34)"/><text x="14.3565%" y="95.50"></text></g><g><title>mir_promoted (3,145,604 samples, 1.20%)</title><rect x="13.7325%" y="133" width="1.2004%" height="15" fill="rgb(218,30,26)"/><text x="13.9825%" y="143.50"></text></g><g><title>type_op_prove_predicate (955,209 samples, 0.36%)</title><rect x="15.0809%" y="133" width="0.3645%" height="15" fill="rgb(220,122,19)"/><text x="15.3309%" y="143.50"></text></g><g><title>MIR_borrow_checking (8,008,981 samples, 3.06%)</title><rect x="12.3912%" y="165" width="3.0564%" height="15" fill="rgb(250,228,42)"/><text x="12.6412%" y="175.50">MIR..</text></g><g><title>mir_borrowck (7,974,871 samples, 3.04%)</title><rect x="12.4042%" y="149" width="3.0434%" height="15" fill="rgb(240,193,28)"/><text x="12.6542%" y="159.50">mir..</text></g><g><title>should_inherit_track_caller (273,882 samples, 0.10%)</title><rect x="15.6826%" y="117" width="0.1045%" height="15" fill="rgb(216,20,37)"/><text x="15.9326%" y="127.50"></text></g><g><title>codegen_fn_attrs (472,025 samples, 0.18%)</title><rect x="15.6187%" y="133" width="0.1801%" height="15" fill="rgb(206,188,39)"/><text x="15.8687%" y="143.50"></text></g><g><title>check_mod_attrs (637,086 samples, 0.24%)</title><rect x="15.5559%" y="149" width="0.2431%" height="15" fill="rgb(217,207,13)"/><text x="15.8059%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (378,453 samples, 0.14%)</title><rect x="15.8507%" y="149" width="0.1444%" height="15" fill="rgb(231,73,38)"/><text x="16.1007%" y="159.50"></text></g><g><title>misc_checking_1 (1,216,692 samples, 0.46%)</title><rect x="15.5463%" y="165" width="0.4643%" height="15" fill="rgb(225,20,46)"/><text x="15.7963%" y="175.50"></text></g><g><title>misc_checking_2 (496,965 samples, 0.19%)</title><rect x="16.0106%" y="165" width="0.1897%" height="15" fill="rgb(210,31,41)"/><text x="16.2606%" y="175.50"></text></g><g><title>match_checking (304,803 samples, 0.12%)</title><rect x="16.0839%" y="149" width="0.1163%" height="15" fill="rgb(221,200,47)"/><text x="16.3339%" y="159.50"></text></g><g><title>check_match (292,253 samples, 0.11%)</title><rect x="16.0887%" y="133" width="0.1115%" height="15" fill="rgb(226,26,5)"/><text x="16.3387%" y="143.50"></text></g><g><title>crate_lints (1,759,198 samples, 0.67%)</title><rect x="16.2906%" y="133" width="0.6714%" height="15" fill="rgb(249,33,26)"/><text x="16.5406%" y="143.50"></text></g><g><title>type_of (1,084,390 samples, 0.41%)</title><rect x="16.5481%" y="117" width="0.4138%" height="15" fill="rgb(235,183,28)"/><text x="16.7981%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (852,178 samples, 0.33%)</title><rect x="16.6368%" y="101" width="0.3252%" height="15" fill="rgb(221,5,38)"/><text x="16.8868%" y="111.50"></text></g><g><title>lint_checking (1,891,599 samples, 0.72%)</title><rect x="16.2901%" y="149" width="0.7219%" height="15" fill="rgb(247,18,42)"/><text x="16.5401%" y="159.50"></text></g><g><title>misc_checking_3 (2,490,126 samples, 0.95%)</title><rect x="16.2003%" y="165" width="0.9503%" height="15" fill="rgb(241,131,45)"/><text x="16.4503%" y="175.50"></text></g><g><title>impl_trait_ref (302,083 samples, 0.12%)</title><rect x="17.2909%" y="69" width="0.1153%" height="15" fill="rgb(249,31,29)"/><text x="17.5409%" y="79.50"></text></g><g><title>adt_destructor (596,636 samples, 0.23%)</title><rect x="17.1978%" y="117" width="0.2277%" height="15" fill="rgb(225,111,53)"/><text x="17.4478%" y="127.50"></text></g><g><title>coherent_trait (592,396 samples, 0.23%)</title><rect x="17.1994%" y="101" width="0.2261%" height="15" fill="rgb(238,160,17)"/><text x="17.4494%" y="111.50"></text></g><g><title>specialization_graph_of (589,856 samples, 0.23%)</title><rect x="17.2003%" y="85" width="0.2251%" height="15" fill="rgb(214,148,48)"/><text x="17.4503%" y="95.50"></text></g><g><title>impl_parent (3,342,767 samples, 1.28%)</title><rect x="20.1522%" y="101" width="1.2757%" height="15" fill="rgb(232,36,49)"/><text x="20.4022%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,779,571 samples, 0.68%)</title><rect x="20.7487%" y="85" width="0.6791%" height="15" fill="rgb(209,103,24)"/><text x="20.9987%" y="95.50"></text></g><g><title>impl_trait_ref (9,111,684 samples, 3.48%)</title><rect x="21.4279%" y="101" width="3.4773%" height="15" fill="rgb(229,88,8)"/><text x="21.6779%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,561,828 samples, 2.89%)</title><rect x="22.0193%" y="85" width="2.8858%" height="15" fill="rgb(213,181,19)"/><text x="22.2693%" y="95.50">me..</text></g><g><title>coherent_trait (21,577,439 samples, 8.23%)</title><rect x="17.1769%" y="133" width="8.2345%" height="15" fill="rgb(254,191,54)"/><text x="17.4269%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (20,568,529 samples, 7.85%)</title><rect x="17.5619%" y="117" width="7.8495%" height="15" fill="rgb(241,83,37)"/><text x="17.8119%" y="127.50">specializat..</text></g><g><title>trait_impls_of (1,324,152 samples, 0.51%)</title><rect x="24.9061%" y="101" width="0.5053%" height="15" fill="rgb(233,36,39)"/><text x="25.1561%" y="111.50"></text></g><g><title>implementations_of_trait (315,264 samples, 0.12%)</title><rect x="25.2911%" y="85" width="0.1203%" height="15" fill="rgb(226,3,54)"/><text x="25.5411%" y="95.50"></text></g><g><title>coherence_checking (21,668,371 samples, 8.27%)</title><rect x="17.1657%" y="149" width="8.2692%" height="15" fill="rgb(245,192,40)"/><text x="17.4157%" y="159.50">coherence_ch..</text></g><g><title>associated_items (354,123 samples, 0.14%)</title><rect x="27.7879%" y="101" width="0.1351%" height="15" fill="rgb(238,167,29)"/><text x="28.0379%" y="111.50"></text></g><g><title>generics_of (1,197,564 samples, 0.46%)</title><rect x="29.4362%" y="85" width="0.4570%" height="15" fill="rgb(232,182,51)"/><text x="29.6862%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (952,423 samples, 0.36%)</title><rect x="29.5298%" y="69" width="0.3635%" height="15" fill="rgb(231,60,39)"/><text x="29.7798%" y="79.50"></text></g><g><title>impl_trait_ref (1,027,568 samples, 0.39%)</title><rect x="29.9616%" y="85" width="0.3921%" height="15" fill="rgb(208,69,12)"/><text x="30.2116%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (791,536 samples, 0.30%)</title><rect x="30.0517%" y="69" width="0.3021%" height="15" fill="rgb(235,93,37)"/><text x="30.3017%" y="79.50"></text></g><g><title>opt_def_kind (355,254 samples, 0.14%)</title><rect x="30.4549%" y="69" width="0.1356%" height="15" fill="rgb(213,116,39)"/><text x="30.7049%" y="79.50"></text></g><g><title>predicates_of (1,038,742 samples, 0.40%)</title><rect x="30.3742%" y="85" width="0.3964%" height="15" fill="rgb(222,207,29)"/><text x="30.6242%" y="95.50"></text></g><g><title>predicates_defined_on (471,883 samples, 0.18%)</title><rect x="30.5905%" y="69" width="0.1801%" height="15" fill="rgb(206,96,30)"/><text x="30.8405%" y="79.50"></text></g><g><title>specializes (2,523,618 samples, 0.96%)</title><rect x="30.7706%" y="85" width="0.9631%" height="15" fill="rgb(218,138,4)"/><text x="31.0206%" y="95.50"></text></g><g><title>param_env (1,467,757 samples, 0.56%)</title><rect x="31.1735%" y="69" width="0.5601%" height="15" fill="rgb(250,191,14)"/><text x="31.4235%" y="79.50"></text></g><g><title>def_span (642,214 samples, 0.25%)</title><rect x="31.4886%" y="53" width="0.2451%" height="15" fill="rgb(239,60,40)"/><text x="31.7386%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (561,713 samples, 0.21%)</title><rect x="31.5193%" y="37" width="0.2144%" height="15" fill="rgb(206,27,48)"/><text x="31.7693%" y="47.50"></text></g><g><title>trait_impls_of (342,313 samples, 0.13%)</title><rect x="31.7385%" y="85" width="0.1306%" height="15" fill="rgb(225,35,8)"/><text x="31.9885%" y="95.50"></text></g><g><title>evaluate_obligation (10,117,843 samples, 3.86%)</title><rect x="28.0141%" y="101" width="3.8612%" height="15" fill="rgb(250,213,24)"/><text x="28.2641%" y="111.50">eval..</text></g><g><title>specializes (270,935 samples, 0.10%)</title><rect x="33.3300%" y="69" width="0.1034%" height="15" fill="rgb(247,123,22)"/><text x="33.5800%" y="79.50"></text></g><g><title>evaluate_obligation (1,023,812 samples, 0.39%)</title><rect x="33.1065%" y="85" width="0.3907%" height="15" fill="rgb(231,138,38)"/><text x="33.3565%" y="95.50"></text></g><g><title>typeck (3,697,897 samples, 1.41%)</title><rect x="32.2679%" y="101" width="1.4112%" height="15" fill="rgb(231,145,46)"/><text x="32.5179%" y="111.50"></text></g><g><title>item_bodies_checking (21,588,850 samples, 8.24%)</title><rect x="25.4495%" y="149" width="8.2389%" height="15" fill="rgb(251,118,11)"/><text x="25.6995%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (21,586,219 samples, 8.24%)</title><rect x="25.4505%" y="133" width="8.2379%" height="15" fill="rgb(217,147,25)"/><text x="25.7005%" y="143.50">typeck_item..</text></g><g><title>typeck (21,562,829 samples, 8.23%)</title><rect x="25.4595%" y="117" width="8.2290%" height="15" fill="rgb(247,81,37)"/><text x="25.7095%" y="127.50">typeck</text></g><g><title>item_types_checking (812,019 samples, 0.31%)</title><rect x="33.6884%" y="149" width="0.3099%" height="15" fill="rgb(209,12,38)"/><text x="33.9384%" y="159.50"></text></g><g><title>check_mod_item_types (809,878 samples, 0.31%)</title><rect x="33.6892%" y="133" width="0.3091%" height="15" fill="rgb(227,1,9)"/><text x="33.9392%" y="143.50"></text></g><g><title>is_late_bound_map (515,594 samples, 0.20%)</title><rect x="34.2238%" y="101" width="0.1968%" height="15" fill="rgb(248,47,43)"/><text x="34.4738%" y="111.50"></text></g><g><title>resolve_lifetimes (495,804 samples, 0.19%)</title><rect x="34.2313%" y="85" width="0.1892%" height="15" fill="rgb(221,10,30)"/><text x="34.4813%" y="95.50"></text></g><g><title>generics_of (815,837 samples, 0.31%)</title><rect x="34.1737%" y="117" width="0.3113%" height="15" fill="rgb(210,229,1)"/><text x="34.4237%" y="127.50"></text></g><g><title>explicit_predicates_of (268,573 samples, 0.10%)</title><rect x="34.5575%" y="85" width="0.1025%" height="15" fill="rgb(222,148,37)"/><text x="34.8075%" y="95.50"></text></g><g><title>predicates_of (626,927 samples, 0.24%)</title><rect x="34.5129%" y="117" width="0.2393%" height="15" fill="rgb(234,67,33)"/><text x="34.7629%" y="127.50"></text></g><g><title>predicates_defined_on (581,546 samples, 0.22%)</title><rect x="34.5302%" y="101" width="0.2219%" height="15" fill="rgb(247,98,35)"/><text x="34.7802%" y="111.50"></text></g><g><title>type_collecting (2,189,882 samples, 0.84%)</title><rect x="33.9987%" y="149" width="0.8357%" height="15" fill="rgb(247,138,52)"/><text x="34.2487%" y="159.50"></text></g><g><title>collect_mod_item_types (2,179,972 samples, 0.83%)</title><rect x="34.0025%" y="133" width="0.8319%" height="15" fill="rgb(213,79,30)"/><text x="34.2525%" y="143.50"></text></g><g><title>evaluate_obligation (278,283 samples, 0.11%)</title><rect x="35.1034%" y="117" width="0.1062%" height="15" fill="rgb(246,177,23)"/><text x="35.3534%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,234,041 samples, 0.47%)</title><rect x="34.8642%" y="133" width="0.4709%" height="15" fill="rgb(230,62,27)"/><text x="35.1142%" y="143.50"></text></g><g><title>check_item_well_formed (1,166,582 samples, 0.45%)</title><rect x="35.3352%" y="133" width="0.4452%" height="15" fill="rgb(216,154,8)"/><text x="35.5852%" y="143.50"></text></g><g><title>analysis (62,009,522 samples, 23.66%)</title><rect x="12.3067%" y="181" width="23.6645%" height="15" fill="rgb(244,35,45)"/><text x="12.5567%" y="191.50">analysis</text></g><g><title>type_check_crate (49,316,923 samples, 18.82%)</title><rect x="17.1506%" y="165" width="18.8207%" height="15" fill="rgb(251,115,12)"/><text x="17.4006%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,977,060 samples, 1.14%)</title><rect x="34.8351%" y="149" width="1.1361%" height="15" fill="rgb(240,54,50)"/><text x="35.0851%" y="159.50"></text></g><g><title>check_trait_item_well_formed (500,135 samples, 0.19%)</title><rect x="35.7804%" y="133" width="0.1909%" height="15" fill="rgb(233,84,52)"/><text x="36.0304%" y="143.50"></text></g><g><title>const_caller_location (412,975 samples, 0.16%)</title><rect x="43.9961%" y="149" width="0.1576%" height="15" fill="rgb(207,117,47)"/><text x="44.2461%" y="159.50"></text></g><g><title>item_attrs (766,328 samples, 0.29%)</title><rect x="44.5741%" y="117" width="0.2925%" height="15" fill="rgb(249,43,39)"/><text x="44.8241%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (760,727 samples, 0.29%)</title><rect x="44.5762%" y="101" width="0.2903%" height="15" fill="rgb(209,38,44)"/><text x="44.8262%" y="111.50"></text></g><g><title>codegen_fn_attrs (834,428 samples, 0.32%)</title><rect x="44.5496%" y="133" width="0.3184%" height="15" fill="rgb(236,212,23)"/><text x="44.7996%" y="143.50"></text></g><g><title>eval_to_const_value_raw (291,292 samples, 0.11%)</title><rect x="44.9786%" y="117" width="0.1112%" height="15" fill="rgb(242,79,21)"/><text x="45.2286%" y="127.50"></text></g><g><title>eval_to_const_value_raw (274,282 samples, 0.10%)</title><rect x="44.9851%" y="101" width="0.1047%" height="15" fill="rgb(211,96,35)"/><text x="45.2351%" y="111.50"></text></g><g><title>layout_of (971,528 samples, 0.37%)</title><rect x="44.8860%" y="133" width="0.3708%" height="15" fill="rgb(253,215,40)"/><text x="45.1360%" y="143.50"></text></g><g><title>predicates_of (421,452 samples, 0.16%)</title><rect x="45.5933%" y="117" width="0.1608%" height="15" fill="rgb(211,81,21)"/><text x="45.8433%" y="127.50"></text></g><g><title>predicates_defined_on (319,871 samples, 0.12%)</title><rect x="45.6320%" y="101" width="0.1221%" height="15" fill="rgb(208,190,38)"/><text x="45.8820%" y="111.50"></text></g><g><title>param_env (1,309,951 samples, 0.50%)</title><rect x="45.2567%" y="133" width="0.4999%" height="15" fill="rgb(235,213,38)"/><text x="45.5067%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (576,047 samples, 0.22%)</title><rect x="45.7567%" y="133" width="0.2198%" height="15" fill="rgb(237,122,38)"/><text x="46.0067%" y="143.50"></text></g><g><title>normalize_projection_ty (438,926 samples, 0.17%)</title><rect x="45.8090%" y="117" width="0.1675%" height="15" fill="rgb(244,218,35)"/><text x="46.0590%" y="127.50"></text></g><g><title>fn_abi_of_instance (4,749,425 samples, 1.81%)</title><rect x="44.1657%" y="149" width="1.8125%" height="15" fill="rgb(240,68,47)"/><text x="44.4157%" y="159.50">f..</text></g><g><title>layout_of (558,513 samples, 0.21%)</title><rect x="46.0484%" y="149" width="0.2131%" height="15" fill="rgb(210,16,53)"/><text x="46.2984%" y="159.50"></text></g><g><title>codegen_module (25,432,861 samples, 9.71%)</title><rect x="36.6424%" y="165" width="9.7059%" height="15" fill="rgb(235,124,12)"/><text x="36.8924%" y="175.50">codegen_module</text></g><g><title>codegen_crate (27,256,068 samples, 10.40%)</title><rect x="35.9754%" y="181" width="10.4017%" height="15" fill="rgb(224,169,11)"/><text x="36.2254%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (95,571,691 samples, 36.47%)</title><rect x="46.4456%" y="165" width="36.4728%" height="15" fill="rgb(250,166,2)"/><text x="46.6956%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (90,621,651 samples, 34.58%)</title><rect x="48.3346%" y="149" width="34.5837%" height="15" fill="rgb(242,216,29)"/><text x="48.5846%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (102,677,794 samples, 39.18%)</title><rect x="46.3770%" y="181" width="39.1847%" height="15" fill="rgb(230,116,27)"/><text x="46.6270%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,926,571 samples, 2.64%)</title><rect x="82.9183%" y="165" width="2.6434%" height="15" fill="rgb(228,99,48)"/><text x="83.1683%" y="175.50">LL..</text></g><g><title>macro_expand_crate (12,498,548 samples, 4.77%)</title><rect x="85.7162%" y="165" width="4.7698%" height="15" fill="rgb(253,11,6)"/><text x="85.9662%" y="175.50">macro_..</text></g><g><title>expand_crate (12,483,967 samples, 4.76%)</title><rect x="85.7218%" y="149" width="4.7642%" height="15" fill="rgb(247,143,39)"/><text x="85.9718%" y="159.50">expand..</text></g><g><title>metadata_register_crate (2,375,494 samples, 0.91%)</title><rect x="89.5795%" y="133" width="0.9066%" height="15" fill="rgb(236,97,10)"/><text x="89.8295%" y="143.50"></text></g><g><title>metadata_register_crate (896,691 samples, 0.34%)</title><rect x="90.1438%" y="117" width="0.3422%" height="15" fill="rgb(233,208,19)"/><text x="90.3938%" y="127.50"></text></g><g><title>late_resolve_crate (1,635,647 samples, 0.62%)</title><rect x="90.6340%" y="149" width="0.6242%" height="15" fill="rgb(216,164,2)"/><text x="90.8840%" y="159.50"></text></g><g><title>configure_and_expand (15,009,183 samples, 5.73%)</title><rect x="85.5617%" y="181" width="5.7279%" height="15" fill="rgb(220,129,5)"/><text x="85.8117%" y="191.50">configu..</text></g><g><title>resolve_crate (1,919,250 samples, 0.73%)</title><rect x="90.5572%" y="165" width="0.7324%" height="15" fill="rgb(242,17,10)"/><text x="90.8072%" y="175.50"></text></g><g><title>early_lint_checks (263,033 samples, 0.10%)</title><rect x="91.3467%" y="181" width="0.1004%" height="15" fill="rgb(242,107,0)"/><text x="91.5967%" y="191.50"></text></g><g><title>free_global_ctxt (4,359,475 samples, 1.66%)</title><rect x="91.4471%" y="181" width="1.6637%" height="15" fill="rgb(251,28,31)"/><text x="91.6971%" y="191.50"></text></g><g><title>item_attrs (394,093 samples, 0.15%)</title><rect x="93.6131%" y="85" width="0.1504%" height="15" fill="rgb(233,223,10)"/><text x="93.8631%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (379,123 samples, 0.14%)</title><rect x="93.6188%" y="69" width="0.1447%" height="15" fill="rgb(215,21,27)"/><text x="93.8688%" y="79.50"></text></g><g><title>codegen_fn_attrs (610,705 samples, 0.23%)</title><rect x="93.5780%" y="101" width="0.2331%" height="15" fill="rgb(232,23,21)"/><text x="93.8280%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (688,128 samples, 0.26%)</title><rect x="94.1498%" y="85" width="0.2626%" height="15" fill="rgb(244,5,23)"/><text x="94.3998%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (466,995 samples, 0.18%)</title><rect x="94.4124%" y="85" width="0.1782%" height="15" fill="rgb(226,81,46)"/><text x="94.6624%" y="95.50"></text></g><g><title>optimized_mir (2,089,832 samples, 0.80%)</title><rect x="93.8703%" y="101" width="0.7975%" height="15" fill="rgb(247,70,30)"/><text x="94.1203%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (574,726 samples, 0.22%)</title><rect x="94.7630%" y="85" width="0.2193%" height="15" fill="rgb(212,68,19)"/><text x="95.0130%" y="95.50"></text></g><g><title>resolve_instance (1,310,001 samples, 0.50%)</title><rect x="94.6678%" y="101" width="0.4999%" height="15" fill="rgb(240,187,13)"/><text x="94.9178%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (4,966,800 samples, 1.90%)</title><rect x="93.3900%" y="117" width="1.8955%" height="15" fill="rgb(223,113,26)"/><text x="93.6400%" y="127.50">m..</text></g><g><title>monomorphization_collector (4,993,270 samples, 1.91%)</title><rect x="93.3890%" y="133" width="1.9056%" height="15" fill="rgb(206,192,2)"/><text x="93.6390%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (597,247 samples, 0.23%)</title><rect x="95.2961%" y="117" width="0.2279%" height="15" fill="rgb(241,108,4)"/><text x="95.5461%" y="127.50"></text></g><g><title>symbol_name (550,545 samples, 0.21%)</title><rect x="95.3139%" y="101" width="0.2101%" height="15" fill="rgb(247,173,49)"/><text x="95.5639%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (5,915,411 samples, 2.26%)</title><rect x="93.3755%" y="149" width="2.2575%" height="15" fill="rgb(224,114,35)"/><text x="93.6255%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (886,790 samples, 0.34%)</title><rect x="95.2946%" y="133" width="0.3384%" height="15" fill="rgb(245,159,27)"/><text x="95.5446%" y="143.50"></text></g><g><title>cgu_partitioning (285,603 samples, 0.11%)</title><rect x="95.5240%" y="117" width="0.1090%" height="15" fill="rgb(245,172,44)"/><text x="95.7740%" y="127.50"></text></g><g><title>exported_symbols (6,002,341 samples, 2.29%)</title><rect x="93.3624%" y="165" width="2.2907%" height="15" fill="rgb(236,23,11)"/><text x="93.6124%" y="175.50">e..</text></g><g><title>mir_drops_elaborated_and_const_checked (446,053 samples, 0.17%)</title><rect x="95.9807%" y="149" width="0.1702%" height="15" fill="rgb(205,117,38)"/><text x="96.2307%" y="159.50"></text></g><g><title>optimized_mir (1,285,590 samples, 0.49%)</title><rect x="95.6642%" y="165" width="0.4906%" height="15" fill="rgb(237,72,25)"/><text x="95.9142%" y="175.50"></text></g><g><title>generate_crate_metadata (8,001,821 samples, 3.05%)</title><rect x="93.1108%" y="181" width="3.0537%" height="15" fill="rgb(244,70,9)"/><text x="93.3608%" y="191.50">gen..</text></g><g><title>hir_lowering (1,789,788 samples, 0.68%)</title><rect x="96.1645%" y="181" width="0.6830%" height="15" fill="rgb(217,125,39)"/><text x="96.4145%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,927,469 samples, 0.74%)</title><rect x="96.8538%" y="165" width="0.7356%" height="15" fill="rgb(235,36,10)"/><text x="97.1038%" y="175.50"></text></g><g><title>link_binary_remove_temps (280,633 samples, 0.11%)</title><rect x="97.7102%" y="133" width="0.1071%" height="15" fill="rgb(251,123,47)"/><text x="97.9602%" y="143.50"></text></g><g><title>link_crate (1,614,706 samples, 0.62%)</title><rect x="97.5894%" y="165" width="0.6162%" height="15" fill="rgb(221,13,13)"/><text x="97.8394%" y="175.50"></text></g><g><title>link_binary (1,596,986 samples, 0.61%)</title><rect x="97.5962%" y="149" width="0.6095%" height="15" fill="rgb(238,131,9)"/><text x="97.8462%" y="159.50"></text></g><g><title>link_rlib (1,017,500 samples, 0.39%)</title><rect x="97.8173%" y="133" width="0.3883%" height="15" fill="rgb(211,50,8)"/><text x="98.0673%" y="143.50"></text></g><g><title>link (3,570,216 samples, 1.36%)</title><rect x="96.8475%" y="181" width="1.3625%" height="15" fill="rgb(245,182,24)"/><text x="97.0975%" y="191.50"></text></g><g><title>parse_crate (2,610,636 samples, 1.00%)</title><rect x="98.2100%" y="181" width="0.9963%" height="15" fill="rgb(242,14,37)"/><text x="98.4600%" y="191.50"></text></g><g><title>prepare_outputs (317,233 samples, 0.12%)</title><rect x="99.2096%" y="181" width="0.1211%" height="15" fill="rgb(246,228,12)"/><text x="99.4596%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,339,843 samples, 0.51%)</title><rect x="99.3307%" y="181" width="0.5113%" height="15" fill="rgb(213,55,15)"/><text x="99.5807%" y="191.50"></text></g><g><title>all (262,035,665 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (262,035,665 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (296,283 samples, 0.11%)</title><rect x="99.8869%" y="181" width="0.1131%" height="15" fill="rgb(209,121,21)"/><text x="100.1369%" y="191.50"></text></g></svg></svg>