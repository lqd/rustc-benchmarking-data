<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (136,344,009 samples, 15.70%)</title><rect x="0.0589%" y="197" width="15.7032%" height="15" fill="rgb(227,0,7)"/><text x="0.3089%" y="207.50">LLVM_passes</text></g><g><title>specialization_graph_of (2,035,632 samples, 0.23%)</title><rect x="17.1454%" y="69" width="0.2345%" height="15" fill="rgb(217,0,24)"/><text x="17.3954%" y="79.50"></text></g><g><title>impl_trait_ref (1,013,722 samples, 0.12%)</title><rect x="17.2631%" y="53" width="0.1168%" height="15" fill="rgb(221,193,54)"/><text x="17.5131%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (885,968 samples, 0.10%)</title><rect x="17.2778%" y="37" width="0.1020%" height="15" fill="rgb(248,212,6)"/><text x="17.5278%" y="47.50"></text></g><g><title>resolve_instance (2,640,719 samples, 0.30%)</title><rect x="17.0827%" y="85" width="0.3041%" height="15" fill="rgb(208,68,35)"/><text x="17.3327%" y="95.50"></text></g><g><title>mir_const (7,133,602 samples, 0.82%)</title><rect x="16.6242%" y="133" width="0.8216%" height="15" fill="rgb(232,128,0)"/><text x="16.8742%" y="143.50"></text></g><g><title>unsafety_check_result (6,353,886 samples, 0.73%)</title><rect x="16.7140%" y="117" width="0.7318%" height="15" fill="rgb(207,160,47)"/><text x="16.9640%" y="127.50"></text></g><g><title>mir_built (5,522,537 samples, 0.64%)</title><rect x="16.8098%" y="101" width="0.6360%" height="15" fill="rgb(228,23,34)"/><text x="17.0598%" y="111.50"></text></g><g><title>mir_const_qualif (1,770,921 samples, 0.20%)</title><rect x="17.4458%" y="133" width="0.2040%" height="15" fill="rgb(218,30,26)"/><text x="17.6958%" y="143.50"></text></g><g><title>mir_promoted (9,417,498 samples, 1.08%)</title><rect x="16.5652%" y="149" width="1.0846%" height="15" fill="rgb(220,122,19)"/><text x="16.8152%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,473,904 samples, 0.17%)</title><rect x="17.7195%" y="149" width="0.1698%" height="15" fill="rgb(250,228,42)"/><text x="17.9695%" y="159.50"></text></g><g><title>MIR_borrow_checking (18,264,314 samples, 2.10%)</title><rect x="15.7862%" y="181" width="2.1036%" height="15" fill="rgb(240,193,28)"/><text x="16.0362%" y="191.50">M..</text></g><g><title>mir_borrowck (18,205,193 samples, 2.10%)</title><rect x="15.7930%" y="165" width="2.0968%" height="15" fill="rgb(216,20,37)"/><text x="16.0430%" y="175.50">m..</text></g><g><title>eval_to_const_value_raw (985,120 samples, 0.11%)</title><rect x="18.2460%" y="69" width="0.1135%" height="15" fill="rgb(206,188,39)"/><text x="18.4960%" y="79.50"></text></g><g><title>eval_to_const_value_raw (983,130 samples, 0.11%)</title><rect x="18.2463%" y="53" width="0.1132%" height="15" fill="rgb(217,207,13)"/><text x="18.4963%" y="63.50"></text></g><g><title>eval_to_allocation_raw (978,610 samples, 0.11%)</title><rect x="18.2468%" y="37" width="0.1127%" height="15" fill="rgb(231,73,38)"/><text x="18.4968%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,217,593 samples, 0.14%)</title><rect x="18.2199%" y="133" width="0.1402%" height="15" fill="rgb(225,20,46)"/><text x="18.4699%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,216,053 samples, 0.14%)</title><rect x="18.2201%" y="117" width="0.1401%" height="15" fill="rgb(210,31,41)"/><text x="18.4701%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,213,823 samples, 0.14%)</title><rect x="18.2203%" y="101" width="0.1398%" height="15" fill="rgb(221,200,47)"/><text x="18.4703%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,003,080 samples, 0.12%)</title><rect x="18.2446%" y="85" width="0.1155%" height="15" fill="rgb(226,26,5)"/><text x="18.4946%" y="95.50"></text></g><g><title>crate_lints (3,689,599 samples, 0.42%)</title><rect x="18.1503%" y="149" width="0.4249%" height="15" fill="rgb(249,33,26)"/><text x="18.4003%" y="159.50"></text></g><g><title>type_of (1,771,687 samples, 0.20%)</title><rect x="18.3711%" y="133" width="0.2041%" height="15" fill="rgb(235,183,28)"/><text x="18.6211%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,520,006 samples, 0.18%)</title><rect x="18.4001%" y="117" width="0.1751%" height="15" fill="rgb(221,5,38)"/><text x="18.6501%" y="127.50"></text></g><g><title>lint_checking (3,948,262 samples, 0.45%)</title><rect x="18.1500%" y="165" width="0.4547%" height="15" fill="rgb(247,18,42)"/><text x="18.4000%" y="175.50"></text></g><g><title>misc_checking_3 (4,881,321 samples, 0.56%)</title><rect x="18.1116%" y="181" width="0.5622%" height="15" fill="rgb(241,131,45)"/><text x="18.3616%" y="191.50"></text></g><g><title>impl_trait_ref (2,136,675 samples, 0.25%)</title><rect x="18.8926%" y="117" width="0.2461%" height="15" fill="rgb(249,31,29)"/><text x="19.1426%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,875,623 samples, 0.22%)</title><rect x="18.9227%" y="101" width="0.2160%" height="15" fill="rgb(225,111,53)"/><text x="19.1727%" y="111.50"></text></g><g><title>coherent_trait (4,240,215 samples, 0.49%)</title><rect x="18.6807%" y="149" width="0.4884%" height="15" fill="rgb(238,160,17)"/><text x="18.9307%" y="159.50"></text></g><g><title>specialization_graph_of (4,231,735 samples, 0.49%)</title><rect x="18.6817%" y="133" width="0.4874%" height="15" fill="rgb(214,148,48)"/><text x="18.9317%" y="143.50"></text></g><g><title>coherence_checking (4,304,776 samples, 0.50%)</title><rect x="18.6786%" y="165" width="0.4958%" height="15" fill="rgb(232,36,49)"/><text x="18.9286%" y="175.50"></text></g><g><title>evaluate_obligation (1,512,980 samples, 0.17%)</title><rect x="20.1700%" y="117" width="0.1743%" height="15" fill="rgb(209,103,24)"/><text x="20.4200%" y="127.50"></text></g><g><title>evaluate_obligation (1,394,563 samples, 0.16%)</title><rect x="20.8996%" y="101" width="0.1606%" height="15" fill="rgb(229,88,8)"/><text x="21.1496%" y="111.50"></text></g><g><title>typeck (6,285,868 samples, 0.72%)</title><rect x="20.4706%" y="117" width="0.7240%" height="15" fill="rgb(213,181,19)"/><text x="20.7206%" y="127.50"></text></g><g><title>item_bodies_checking (17,563,395 samples, 2.02%)</title><rect x="19.1762%" y="165" width="2.0228%" height="15" fill="rgb(254,191,54)"/><text x="19.4262%" y="175.50">i..</text></g><g><title>typeck_item_bodies (17,559,915 samples, 2.02%)</title><rect x="19.1766%" y="149" width="2.0224%" height="15" fill="rgb(241,83,37)"/><text x="19.4266%" y="159.50">t..</text></g><g><title>typeck (17,528,365 samples, 2.02%)</title><rect x="19.1803%" y="133" width="2.0188%" height="15" fill="rgb(233,36,39)"/><text x="19.4303%" y="143.50">t..</text></g><g><title>typeck (3,784,530 samples, 0.44%)</title><rect x="21.2245%" y="133" width="0.4359%" height="15" fill="rgb(226,3,54)"/><text x="21.4745%" y="143.50"></text></g><g><title>item_types_checking (4,006,732 samples, 0.46%)</title><rect x="21.1991%" y="165" width="0.4615%" height="15" fill="rgb(245,192,40)"/><text x="21.4491%" y="175.50"></text></g><g><title>check_mod_item_types (4,004,502 samples, 0.46%)</title><rect x="21.1993%" y="149" width="0.4612%" height="15" fill="rgb(238,167,29)"/><text x="21.4493%" y="159.50"></text></g><g><title>type_collecting (909,919 samples, 0.10%)</title><rect x="21.6607%" y="165" width="0.1048%" height="15" fill="rgb(232,182,51)"/><text x="21.9107%" y="175.50"></text></g><g><title>collect_mod_item_types (902,439 samples, 0.10%)</title><rect x="21.6616%" y="149" width="0.1039%" height="15" fill="rgb(231,60,39)"/><text x="21.9116%" y="159.50"></text></g><g><title>analysis (54,345,704 samples, 6.26%)</title><rect x="15.7621%" y="197" width="6.2592%" height="15" fill="rgb(208,69,12)"/><text x="16.0121%" y="207.50">analysis</text></g><g><title>type_check_crate (29,064,776 samples, 3.35%)</title><rect x="18.6738%" y="181" width="3.3475%" height="15" fill="rgb(235,93,37)"/><text x="18.9238%" y="191.50">typ..</text></g><g><title>wf_checking (2,217,594 samples, 0.26%)</title><rect x="21.7659%" y="165" width="0.2554%" height="15" fill="rgb(213,116,39)"/><text x="22.0159%" y="175.50"></text></g><g><title>check_item_well_formed (1,398,735 samples, 0.16%)</title><rect x="21.8602%" y="149" width="0.1611%" height="15" fill="rgb(222,207,29)"/><text x="22.1102%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,967,255 samples, 0.23%)</title><rect x="34.2419%" y="165" width="0.2266%" height="15" fill="rgb(206,96,30)"/><text x="34.4919%" y="175.50"></text></g><g><title>const_caller_location (2,537,450 samples, 0.29%)</title><rect x="34.4685%" y="165" width="0.2922%" height="15" fill="rgb(218,138,4)"/><text x="34.7185%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,259,687 samples, 0.15%)</title><rect x="35.4023%" y="149" width="0.1451%" height="15" fill="rgb(250,191,14)"/><text x="35.6523%" y="159.50"></text></g><g><title>layout_of (1,579,755 samples, 0.18%)</title><rect x="35.5856%" y="149" width="0.1819%" height="15" fill="rgb(239,60,40)"/><text x="35.8356%" y="159.50"></text></g><g><title>explicit_predicates_of (923,890 samples, 0.11%)</title><rect x="36.5515%" y="101" width="0.1064%" height="15" fill="rgb(206,27,48)"/><text x="36.8015%" y="111.50"></text></g><g><title>predicates_of (2,583,911 samples, 0.30%)</title><rect x="36.3935%" y="133" width="0.2976%" height="15" fill="rgb(225,35,8)"/><text x="36.6435%" y="143.50"></text></g><g><title>predicates_defined_on (1,931,058 samples, 0.22%)</title><rect x="36.4687%" y="117" width="0.2224%" height="15" fill="rgb(250,213,24)"/><text x="36.7187%" y="127.50"></text></g><g><title>param_env (8,045,696 samples, 0.93%)</title><rect x="35.7676%" y="149" width="0.9266%" height="15" fill="rgb(247,123,22)"/><text x="36.0176%" y="159.50"></text></g><g><title>normalize_projection_ty (1,149,295 samples, 0.13%)</title><rect x="36.7601%" y="133" width="0.1324%" height="15" fill="rgb(231,138,38)"/><text x="37.0101%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,737,802 samples, 0.20%)</title><rect x="36.6942%" y="149" width="0.2001%" height="15" fill="rgb(231,145,46)"/><text x="36.9442%" y="159.50"></text></g><g><title>fn_abi_of_instance (18,535,368 samples, 2.13%)</title><rect x="34.7665%" y="165" width="2.1348%" height="15" fill="rgb(251,118,11)"/><text x="35.0165%" y="175.50">f..</text></g><g><title>layout_of (3,592,139 samples, 0.41%)</title><rect x="37.0083%" y="165" width="0.4137%" height="15" fill="rgb(217,147,25)"/><text x="37.2583%" y="175.50"></text></g><g><title>symbol_name (1,774,494 samples, 0.20%)</title><rect x="37.4247%" y="165" width="0.2044%" height="15" fill="rgb(247,81,37)"/><text x="37.6747%" y="175.50"></text></g><g><title>codegen_module (133,017,283 samples, 15.32%)</title><rect x="22.3635%" y="181" width="15.3200%" height="15" fill="rgb(209,12,38)"/><text x="22.6135%" y="191.50">codegen_module</text></g><g><title>codegen_crate (136,091,436 samples, 15.67%)</title><rect x="22.0221%" y="197" width="15.6741%" height="15" fill="rgb(227,1,9)"/><text x="22.2721%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (428,548,141 samples, 49.36%)</title><rect x="37.7202%" y="181" width="49.3573%" height="15" fill="rgb(248,47,43)"/><text x="37.9702%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (408,953,707 samples, 47.10%)</title><rect x="39.9769%" y="165" width="47.1005%" height="15" fill="rgb(221,10,30)"/><text x="40.2269%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (456,117,832 samples, 52.53%)</title><rect x="37.6962%" y="197" width="52.5326%" height="15" fill="rgb(210,229,1)"/><text x="37.9462%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (27,361,259 samples, 3.15%)</title><rect x="87.0775%" y="181" width="3.1513%" height="15" fill="rgb(222,148,37)"/><text x="87.3275%" y="191.50">LLV..</text></g><g><title>macro_expand_crate (12,019,077 samples, 1.38%)</title><rect x="90.2702%" y="181" width="1.3843%" height="15" fill="rgb(234,67,33)"/><text x="90.5202%" y="191.50"></text></g><g><title>expand_crate (12,008,357 samples, 1.38%)</title><rect x="90.2714%" y="165" width="1.3830%" height="15" fill="rgb(247,98,35)"/><text x="90.5214%" y="175.50"></text></g><g><title>metadata_register_crate (2,384,606 samples, 0.27%)</title><rect x="91.3798%" y="149" width="0.2746%" height="15" fill="rgb(247,138,52)"/><text x="91.6298%" y="159.50"></text></g><g><title>metadata_register_crate (974,459 samples, 0.11%)</title><rect x="91.5422%" y="133" width="0.1122%" height="15" fill="rgb(213,79,30)"/><text x="91.7922%" y="143.50"></text></g><g><title>late_resolve_crate (1,722,278 samples, 0.20%)</title><rect x="91.6896%" y="165" width="0.1984%" height="15" fill="rgb(246,177,23)"/><text x="91.9396%" y="175.50"></text></g><g><title>configure_and_expand (14,466,063 samples, 1.67%)</title><rect x="90.2288%" y="197" width="1.6661%" height="15" fill="rgb(230,62,27)"/><text x="90.4788%" y="207.50"></text></g><g><title>resolve_crate (1,945,760 samples, 0.22%)</title><rect x="91.6708%" y="181" width="0.2241%" height="15" fill="rgb(216,154,8)"/><text x="91.9208%" y="191.50"></text></g><g><title>free_global_ctxt (6,835,321 samples, 0.79%)</title><rect x="91.9357%" y="197" width="0.7872%" height="15" fill="rgb(244,35,45)"/><text x="92.1857%" y="207.50"></text></g><g><title>item_attrs (1,954,033 samples, 0.23%)</title><rect x="93.4053%" y="101" width="0.2251%" height="15" fill="rgb(251,115,12)"/><text x="93.6553%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,874,252 samples, 0.22%)</title><rect x="93.4144%" y="85" width="0.2159%" height="15" fill="rgb(240,54,50)"/><text x="93.6644%" y="95.50"></text></g><g><title>codegen_fn_attrs (3,369,108 samples, 0.39%)</title><rect x="93.3267%" y="117" width="0.3880%" height="15" fill="rgb(233,84,52)"/><text x="93.5767%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,294,472 samples, 0.49%)</title><rect x="94.1711%" y="101" width="0.4946%" height="15" fill="rgb(207,117,47)"/><text x="94.4211%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,836,369 samples, 0.21%)</title><rect x="94.6657%" y="101" width="0.2115%" height="15" fill="rgb(249,43,39)"/><text x="94.9157%" y="111.50"></text></g><g><title>optimized_mir (9,660,639 samples, 1.11%)</title><rect x="93.8917%" y="117" width="1.1126%" height="15" fill="rgb(209,38,44)"/><text x="94.1417%" y="127.50"></text></g><g><title>evaluate_obligation (1,052,149 samples, 0.12%)</title><rect x="95.5486%" y="85" width="0.1212%" height="15" fill="rgb(236,212,23)"/><text x="95.7986%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (5,391,847 samples, 0.62%)</title><rect x="95.1843%" y="101" width="0.6210%" height="15" fill="rgb(242,79,21)"/><text x="95.4343%" y="111.50"></text></g><g><title>impl_parent (1,206,886 samples, 0.14%)</title><rect x="96.2287%" y="85" width="0.1390%" height="15" fill="rgb(211,96,35)"/><text x="96.4787%" y="95.50"></text></g><g><title>specialization_graph_of (6,107,366 samples, 0.70%)</title><rect x="95.9663%" y="101" width="0.7034%" height="15" fill="rgb(253,215,40)"/><text x="96.2163%" y="111.50"></text></g><g><title>impl_trait_ref (2,622,235 samples, 0.30%)</title><rect x="96.3677%" y="85" width="0.3020%" height="15" fill="rgb(211,81,21)"/><text x="96.6177%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,164,341 samples, 0.25%)</title><rect x="96.4204%" y="69" width="0.2493%" height="15" fill="rgb(208,190,38)"/><text x="96.6704%" y="79.50"></text></g><g><title>resolve_instance (15,236,478 samples, 1.75%)</title><rect x="95.0044%" y="117" width="1.7548%" height="15" fill="rgb(235,213,38)"/><text x="95.2544%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,868,469 samples, 0.22%)</title><rect x="96.8265%" y="101" width="0.2152%" height="15" fill="rgb(237,122,38)"/><text x="97.0765%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,808,179 samples, 0.21%)</title><rect x="96.8334%" y="85" width="0.2083%" height="15" fill="rgb(244,218,35)"/><text x="97.0834%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,722,477 samples, 0.20%)</title><rect x="96.8433%" y="69" width="0.1984%" height="15" fill="rgb(240,68,47)"/><text x="97.0933%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,208,142 samples, 0.25%)</title><rect x="96.7936%" y="117" width="0.2543%" height="15" fill="rgb(210,16,53)"/><text x="97.0436%" y="127.50"></text></g><g><title>impl_trait_ref (1,039,782 samples, 0.12%)</title><rect x="97.4079%" y="69" width="0.1198%" height="15" fill="rgb(235,124,12)"/><text x="97.6579%" y="79.50"></text></g><g><title>specialization_graph_of (2,728,529 samples, 0.31%)</title><rect x="97.2136%" y="85" width="0.3143%" height="15" fill="rgb(224,169,11)"/><text x="97.4636%" y="95.50"></text></g><g><title>resolve_instance (2,963,821 samples, 0.34%)</title><rect x="97.1875%" y="101" width="0.3414%" height="15" fill="rgb(250,166,2)"/><text x="97.4375%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (40,356,806 samples, 4.65%)</title><rect x="92.8811%" y="133" width="4.6480%" height="15" fill="rgb(242,216,29)"/><text x="93.1311%" y="143.50">monom..</text></g><g><title>vtable_entries (3,435,444 samples, 0.40%)</title><rect x="97.1334%" y="117" width="0.3957%" height="15" fill="rgb(230,116,27)"/><text x="97.3834%" y="127.50"></text></g><g><title>monomorphization_collector (40,404,097 samples, 4.65%)</title><rect x="92.8808%" y="149" width="4.6535%" height="15" fill="rgb(228,99,48)"/><text x="93.1308%" y="159.50">monom..</text></g><g><title>assert_symbols_are_distinct (2,857,079 samples, 0.33%)</title><rect x="97.5348%" y="133" width="0.3291%" height="15" fill="rgb(253,11,6)"/><text x="97.7848%" y="143.50"></text></g><g><title>symbol_name (2,597,718 samples, 0.30%)</title><rect x="97.5646%" y="117" width="0.2992%" height="15" fill="rgb(247,143,39)"/><text x="97.8146%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (44,785,333 samples, 5.16%)</title><rect x="92.8761%" y="165" width="5.1581%" height="15" fill="rgb(236,97,10)"/><text x="93.1261%" y="175.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (4,340,645 samples, 0.50%)</title><rect x="97.5342%" y="149" width="0.4999%" height="15" fill="rgb(233,208,19)"/><text x="97.7842%" y="159.50"></text></g><g><title>cgu_partitioning (1,479,055 samples, 0.17%)</title><rect x="97.8638%" y="133" width="0.1703%" height="15" fill="rgb(216,164,2)"/><text x="98.1138%" y="143.50"></text></g><g><title>exported_symbols (44,930,864 samples, 5.17%)</title><rect x="92.8634%" y="181" width="5.1748%" height="15" fill="rgb(220,129,5)"/><text x="93.1134%" y="191.50">export..</text></g><g><title>generate_crate_metadata (46,964,435 samples, 5.41%)</title><rect x="92.7229%" y="197" width="5.4090%" height="15" fill="rgb(242,17,10)"/><text x="92.9729%" y="207.50">generat..</text></g><g><title>hir_lowering (1,570,526 samples, 0.18%)</title><rect x="98.1320%" y="197" width="0.1809%" height="15" fill="rgb(242,107,0)"/><text x="98.3820%" y="207.50"></text></g><g><title>finish_ongoing_codegen (7,988,965 samples, 0.92%)</title><rect x="98.3149%" y="181" width="0.9201%" height="15" fill="rgb(251,28,31)"/><text x="98.5649%" y="191.50"></text></g><g><title>link_crate (2,494,167 samples, 0.29%)</title><rect x="99.2350%" y="181" width="0.2873%" height="15" fill="rgb(233,223,10)"/><text x="99.4850%" y="191.50"></text></g><g><title>link_binary (2,456,526 samples, 0.28%)</title><rect x="99.2393%" y="165" width="0.2829%" height="15" fill="rgb(215,21,27)"/><text x="99.4893%" y="175.50"></text></g><g><title>link_rlib (1,854,869 samples, 0.21%)</title><rect x="99.3086%" y="149" width="0.2136%" height="15" fill="rgb(232,23,21)"/><text x="99.5586%" y="159.50"></text></g><g><title>link (10,511,452 samples, 1.21%)</title><rect x="98.3129%" y="197" width="1.2106%" height="15" fill="rgb(244,5,23)"/><text x="98.5629%" y="207.50"></text></g><g><title>parse_crate (1,831,159 samples, 0.21%)</title><rect x="99.5235%" y="197" width="0.2109%" height="15" fill="rgb(226,81,46)"/><text x="99.7735%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,625,417 samples, 0.19%)</title><rect x="99.7647%" y="197" width="0.1872%" height="15" fill="rgb(247,70,30)"/><text x="100.0147%" y="207.50"></text></g><g><title>all (868,256,981 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (868,256,981 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>