<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,246,878 samples, 8.75%)</title><rect x="0.5030%" y="197" width="8.7508%" height="15" fill="rgb(227,0,7)"/><text x="0.7530%" y="207.50">LLVM_passes</text></g><g><title>is_late_bound_map (129,870 samples, 0.14%)</title><rect x="12.8341%" y="149" width="0.1378%" height="15" fill="rgb(217,0,24)"/><text x="13.0841%" y="159.50"></text></g><g><title>param_env (105,712 samples, 0.11%)</title><rect x="13.6422%" y="117" width="0.1122%" height="15" fill="rgb(221,193,54)"/><text x="13.8922%" y="127.50"></text></g><g><title>eval_to_const_value_raw (130,511 samples, 0.14%)</title><rect x="14.7205%" y="85" width="0.1385%" height="15" fill="rgb(248,212,6)"/><text x="14.9705%" y="95.50"></text></g><g><title>eval_to_const_value_raw (116,251 samples, 0.12%)</title><rect x="14.7356%" y="69" width="0.1234%" height="15" fill="rgb(208,68,35)"/><text x="14.9856%" y="79.50"></text></g><g><title>eval_to_allocation_raw (108,851 samples, 0.12%)</title><rect x="14.7435%" y="53" width="0.1155%" height="15" fill="rgb(232,128,0)"/><text x="14.9935%" y="63.50"></text></g><g><title>needs_drop_raw (517,885 samples, 0.55%)</title><rect x="14.8633%" y="85" width="0.5495%" height="15" fill="rgb(207,160,47)"/><text x="15.1133%" y="95.50"></text></g><g><title>is_copy_raw (448,925 samples, 0.48%)</title><rect x="14.9365%" y="69" width="0.4764%" height="15" fill="rgb(228,23,34)"/><text x="15.1865%" y="79.50"></text></g><g><title>evaluate_obligation (404,474 samples, 0.43%)</title><rect x="14.9836%" y="53" width="0.4292%" height="15" fill="rgb(218,30,26)"/><text x="15.2336%" y="63.50"></text></g><g><title>trait_impls_of (135,542 samples, 0.14%)</title><rect x="15.2690%" y="37" width="0.1438%" height="15" fill="rgb(220,122,19)"/><text x="15.5190%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (180,674 samples, 0.19%)</title><rect x="15.5467%" y="69" width="0.1917%" height="15" fill="rgb(250,228,42)"/><text x="15.7967%" y="79.50"></text></g><g><title>specialization_graph_of (138,261 samples, 0.15%)</title><rect x="15.7822%" y="69" width="0.1467%" height="15" fill="rgb(240,193,28)"/><text x="16.0322%" y="79.50"></text></g><g><title>resolve_instance (520,927 samples, 0.55%)</title><rect x="15.4397%" y="85" width="0.5528%" height="15" fill="rgb(216,20,37)"/><text x="15.6897%" y="95.50"></text></g><g><title>thir_body (203,063 samples, 0.22%)</title><rect x="16.0028%" y="85" width="0.2155%" height="15" fill="rgb(206,188,39)"/><text x="16.2528%" y="95.50"></text></g><g><title>mir_const (2,715,549 samples, 2.88%)</title><rect x="13.3424%" y="133" width="2.8815%" height="15" fill="rgb(217,207,13)"/><text x="13.5924%" y="143.50">mi..</text></g><g><title>unsafety_check_result (2,327,215 samples, 2.47%)</title><rect x="13.7544%" y="117" width="2.4694%" height="15" fill="rgb(231,73,38)"/><text x="14.0044%" y="127.50">un..</text></g><g><title>mir_built (2,117,014 samples, 2.25%)</title><rect x="13.9775%" y="101" width="2.2464%" height="15" fill="rgb(225,20,46)"/><text x="14.2275%" y="111.50">m..</text></g><g><title>mir_promoted (3,358,369 samples, 3.56%)</title><rect x="13.0033%" y="149" width="3.5636%" height="15" fill="rgb(210,31,41)"/><text x="13.2533%" y="159.50">mir_..</text></g><g><title>mir_const_qualif (323,275 samples, 0.34%)</title><rect x="16.2238%" y="133" width="0.3430%" height="15" fill="rgb(221,200,47)"/><text x="16.4738%" y="143.50"></text></g><g><title>mir_const (251,884 samples, 0.27%)</title><rect x="16.2996%" y="117" width="0.2673%" height="15" fill="rgb(226,26,5)"/><text x="16.5496%" y="127.50"></text></g><g><title>unsafety_check_result (177,863 samples, 0.19%)</title><rect x="16.3781%" y="101" width="0.1887%" height="15" fill="rgb(249,33,26)"/><text x="16.6281%" y="111.50"></text></g><g><title>mir_built (154,213 samples, 0.16%)</title><rect x="16.4032%" y="85" width="0.1636%" height="15" fill="rgb(235,183,28)"/><text x="16.6532%" y="95.50"></text></g><g><title>type_op_normalize_fn_sig (121,981 samples, 0.13%)</title><rect x="16.6081%" y="149" width="0.1294%" height="15" fill="rgb(221,5,38)"/><text x="16.8581%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,462,588 samples, 7.92%)</title><rect x="9.4061%" y="181" width="7.9186%" height="15" fill="rgb(247,18,42)"/><text x="9.6561%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (7,403,138 samples, 7.86%)</title><rect x="9.4692%" y="165" width="7.8555%" height="15" fill="rgb(241,131,45)"/><text x="9.7192%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (486,825 samples, 0.52%)</title><rect x="16.8081%" y="149" width="0.5166%" height="15" fill="rgb(249,31,29)"/><text x="17.0581%" y="159.50"></text></g><g><title>MIR_effect_checking (243,283 samples, 0.26%)</title><rect x="17.3247%" y="181" width="0.2581%" height="15" fill="rgb(225,111,53)"/><text x="17.5747%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (208,022 samples, 0.22%)</title><rect x="17.3621%" y="165" width="0.2207%" height="15" fill="rgb(238,160,17)"/><text x="17.6121%" y="175.50"></text></g><g><title>hir_module_items (116,632 samples, 0.12%)</title><rect x="17.5828%" y="181" width="0.1238%" height="15" fill="rgb(214,148,48)"/><text x="17.8328%" y="191.50"></text></g><g><title>codegen_fn_attrs (110,251 samples, 0.12%)</title><rect x="18.0420%" y="117" width="0.1170%" height="15" fill="rgb(232,36,49)"/><text x="18.2920%" y="127.50"></text></g><g><title>should_inherit_track_caller (183,623 samples, 0.19%)</title><rect x="17.9676%" y="133" width="0.1948%" height="15" fill="rgb(209,103,24)"/><text x="18.2176%" y="143.50"></text></g><g><title>codegen_fn_attrs (316,794 samples, 0.34%)</title><rect x="17.8465%" y="149" width="0.3362%" height="15" fill="rgb(229,88,8)"/><text x="18.0965%" y="159.50"></text></g><g><title>check_mod_attrs (427,084 samples, 0.45%)</title><rect x="17.7297%" y="165" width="0.4532%" height="15" fill="rgb(213,181,19)"/><text x="17.9797%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (268,763 samples, 0.29%)</title><rect x="18.2670%" y="165" width="0.2852%" height="15" fill="rgb(254,191,54)"/><text x="18.5170%" y="175.50"></text></g><g><title>misc_checking_1 (832,079 samples, 0.88%)</title><rect x="17.7069%" y="181" width="0.8829%" height="15" fill="rgb(241,83,37)"/><text x="17.9569%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (131,312 samples, 0.14%)</title><rect x="18.5913%" y="165" width="0.1393%" height="15" fill="rgb(233,36,39)"/><text x="18.8413%" y="175.50"></text></g><g><title>check_mod_liveness (98,662 samples, 0.10%)</title><rect x="18.6259%" y="149" width="0.1047%" height="15" fill="rgb(226,3,54)"/><text x="18.8759%" y="159.50"></text></g><g><title>misc_checking_2 (305,843 samples, 0.32%)</title><rect x="18.5898%" y="181" width="0.3245%" height="15" fill="rgb(245,192,40)"/><text x="18.8398%" y="191.50"></text></g><g><title>match_checking (173,191 samples, 0.18%)</title><rect x="18.7306%" y="165" width="0.1838%" height="15" fill="rgb(238,167,29)"/><text x="18.9806%" y="175.50"></text></g><g><title>check_match (157,441 samples, 0.17%)</title><rect x="18.7473%" y="149" width="0.1671%" height="15" fill="rgb(232,182,51)"/><text x="18.9973%" y="159.50"></text></g><g><title>check_private_in_public (111,571 samples, 0.12%)</title><rect x="18.9237%" y="165" width="0.1184%" height="15" fill="rgb(231,60,39)"/><text x="19.1737%" y="175.50"></text></g><g><title>death_checking (322,293 samples, 0.34%)</title><rect x="19.0421%" y="165" width="0.3420%" height="15" fill="rgb(208,69,12)"/><text x="19.2921%" y="175.50"></text></g><g><title>item_attrs (143,762 samples, 0.15%)</title><rect x="19.2316%" y="149" width="0.1525%" height="15" fill="rgb(235,93,37)"/><text x="19.4816%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,312 samples, 0.15%)</title><rect x="19.2331%" y="133" width="0.1510%" height="15" fill="rgb(213,116,39)"/><text x="19.4831%" y="143.50"></text></g><g><title>param_env (97,690 samples, 0.10%)</title><rect x="20.1883%" y="133" width="0.1037%" height="15" fill="rgb(222,207,29)"/><text x="20.4383%" y="143.50"></text></g><g><title>crate_lints (1,931,361 samples, 2.05%)</title><rect x="19.3858%" y="149" width="2.0494%" height="15" fill="rgb(206,96,30)"/><text x="19.6358%" y="159.50">c..</text></g><g><title>type_of (1,077,332 samples, 1.14%)</title><rect x="20.2920%" y="133" width="1.1432%" height="15" fill="rgb(218,138,4)"/><text x="20.5420%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (841,549 samples, 0.89%)</title><rect x="20.5422%" y="117" width="0.8930%" height="15" fill="rgb(250,191,14)"/><text x="20.7922%" y="127.50"></text></g><g><title>lint_checking (2,033,372 samples, 2.16%)</title><rect x="19.3841%" y="165" width="2.1576%" height="15" fill="rgb(239,60,40)"/><text x="19.6341%" y="175.50">l..</text></g><g><title>module_lints (100,431 samples, 0.11%)</title><rect x="21.4352%" y="149" width="0.1066%" height="15" fill="rgb(206,27,48)"/><text x="21.6852%" y="159.50"></text></g><g><title>lint_mod (97,241 samples, 0.10%)</title><rect x="21.4386%" y="133" width="0.1032%" height="15" fill="rgb(225,35,8)"/><text x="21.6886%" y="143.50"></text></g><g><title>privacy_access_levels (144,262 samples, 0.15%)</title><rect x="21.5417%" y="165" width="0.1531%" height="15" fill="rgb(250,213,24)"/><text x="21.7917%" y="175.50"></text></g><g><title>privacy_checking_modules (334,163 samples, 0.35%)</title><rect x="21.6948%" y="165" width="0.3546%" height="15" fill="rgb(247,123,22)"/><text x="21.9448%" y="175.50"></text></g><g><title>check_mod_privacy (331,853 samples, 0.35%)</title><rect x="21.6973%" y="149" width="0.3521%" height="15" fill="rgb(231,138,38)"/><text x="21.9473%" y="159.50"></text></g><g><title>misc_checking_3 (2,964,951 samples, 3.15%)</title><rect x="18.9144%" y="181" width="3.1461%" height="15" fill="rgb(231,145,46)"/><text x="19.1644%" y="191.50">mis..</text></g><g><title>impl_parent (2,779,230 samples, 2.95%)</title><rect x="27.0250%" y="117" width="2.9491%" height="15" fill="rgb(251,118,11)"/><text x="27.2750%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,537,237 samples, 1.63%)</title><rect x="28.3429%" y="101" width="1.6312%" height="15" fill="rgb(217,147,25)"/><text x="28.5929%" y="111.50"></text></g><g><title>impl_trait_ref (5,578,154 samples, 5.92%)</title><rect x="29.9741%" y="117" width="5.9190%" height="15" fill="rgb(247,81,37)"/><text x="30.2241%" y="127.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,484,026 samples, 4.76%)</title><rect x="31.1351%" y="101" width="4.7580%" height="15" fill="rgb(209,12,38)"/><text x="31.3851%" y="111.50">metada..</text></g><g><title>trait_impls_of (1,002,461 samples, 1.06%)</title><rect x="35.9238%" y="117" width="1.0637%" height="15" fill="rgb(227,1,9)"/><text x="36.1738%" y="127.50"></text></g><g><title>implementations_of_trait (266,083 samples, 0.28%)</title><rect x="36.7052%" y="101" width="0.2823%" height="15" fill="rgb(248,47,43)"/><text x="36.9552%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (208,213 samples, 0.22%)</title><rect x="36.7666%" y="85" width="0.2209%" height="15" fill="rgb(221,10,30)"/><text x="37.0166%" y="95.50"></text></g><g><title>coherent_trait (14,011,548 samples, 14.87%)</title><rect x="22.1214%" y="149" width="14.8677%" height="15" fill="rgb(210,229,1)"/><text x="22.3714%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,982,498 samples, 14.84%)</title><rect x="22.1522%" y="133" width="14.8369%" height="15" fill="rgb(222,148,37)"/><text x="22.4022%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (14,095,029 samples, 14.96%)</title><rect x="22.0973%" y="165" width="14.9563%" height="15" fill="rgb(234,67,33)"/><text x="22.3473%" y="175.50">coherence_checking</text></g><g><title>associated_item (180,183 samples, 0.19%)</title><rect x="41.5953%" y="101" width="0.1912%" height="15" fill="rgb(247,98,35)"/><text x="41.8453%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (143,082 samples, 0.15%)</title><rect x="41.6347%" y="85" width="0.1518%" height="15" fill="rgb(247,138,52)"/><text x="41.8847%" y="95.50"></text></g><g><title>associated_items (261,853 samples, 0.28%)</title><rect x="41.5179%" y="117" width="0.2779%" height="15" fill="rgb(213,79,30)"/><text x="41.7679%" y="127.50"></text></g><g><title>adt_dtorck_constraint (96,931 samples, 0.10%)</title><rect x="41.9931%" y="85" width="0.1029%" height="15" fill="rgb(246,177,23)"/><text x="42.2431%" y="95.50"></text></g><g><title>dropck_outlives (272,303 samples, 0.29%)</title><rect x="41.8204%" y="117" width="0.2889%" height="15" fill="rgb(230,62,27)"/><text x="42.0704%" y="127.50"></text></g><g><title>adt_dtorck_constraint (175,822 samples, 0.19%)</title><rect x="41.9228%" y="101" width="0.1866%" height="15" fill="rgb(216,154,8)"/><text x="42.1728%" y="111.50"></text></g><g><title>specializes (107,102 samples, 0.11%)</title><rect x="42.8019%" y="101" width="0.1136%" height="15" fill="rgb(244,35,45)"/><text x="43.0519%" y="111.50"></text></g><g><title>evaluate_obligation (846,221 samples, 0.90%)</title><rect x="42.1094%" y="117" width="0.8979%" height="15" fill="rgb(251,115,12)"/><text x="42.3594%" y="127.50"></text></g><g><title>param_env (106,682 samples, 0.11%)</title><rect x="43.3310%" y="117" width="0.1132%" height="15" fill="rgb(240,54,50)"/><text x="43.5810%" y="127.50"></text></g><g><title>predicates_of (100,223 samples, 0.11%)</title><rect x="43.4493%" y="117" width="0.1063%" height="15" fill="rgb(233,84,52)"/><text x="43.6993%" y="127.50"></text></g><g><title>item_bodies_checking (6,210,305 samples, 6.59%)</title><rect x="37.0861%" y="165" width="6.5898%" height="15" fill="rgb(207,117,47)"/><text x="37.3361%" y="175.50">item_bodi..</text></g><g><title>typeck_item_bodies (6,208,295 samples, 6.59%)</title><rect x="37.0882%" y="149" width="6.5876%" height="15" fill="rgb(249,43,39)"/><text x="37.3382%" y="159.50">typeck_it..</text></g><g><title>typeck (6,167,895 samples, 6.54%)</title><rect x="37.1311%" y="133" width="6.5448%" height="15" fill="rgb(209,38,44)"/><text x="37.3811%" y="143.50">typeck</text></g><g><title>impl_trait_ref (130,721 samples, 0.14%)</title><rect x="44.3975%" y="85" width="0.1387%" height="15" fill="rgb(236,212,23)"/><text x="44.6475%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (111,031 samples, 0.12%)</title><rect x="44.4184%" y="69" width="0.1178%" height="15" fill="rgb(242,79,21)"/><text x="44.6684%" y="79.50"></text></g><g><title>adt_destructor (294,773 samples, 0.31%)</title><rect x="44.2589%" y="133" width="0.3128%" height="15" fill="rgb(211,96,35)"/><text x="44.5089%" y="143.50"></text></g><g><title>coherent_trait (291,933 samples, 0.31%)</title><rect x="44.2619%" y="117" width="0.3098%" height="15" fill="rgb(253,215,40)"/><text x="44.5119%" y="127.50"></text></g><g><title>specialization_graph_of (290,343 samples, 0.31%)</title><rect x="44.2636%" y="101" width="0.3081%" height="15" fill="rgb(211,81,21)"/><text x="44.5136%" y="111.50"></text></g><g><title>item_types_checking (980,731 samples, 1.04%)</title><rect x="43.6759%" y="165" width="1.0407%" height="15" fill="rgb(208,190,38)"/><text x="43.9259%" y="175.50"></text></g><g><title>check_mod_item_types (977,880 samples, 1.04%)</title><rect x="43.6789%" y="149" width="1.0376%" height="15" fill="rgb(235,213,38)"/><text x="43.9289%" y="159.50"></text></g><g><title>fn_sig (178,471 samples, 0.19%)</title><rect x="44.9112%" y="133" width="0.1894%" height="15" fill="rgb(237,122,38)"/><text x="45.1612%" y="143.50"></text></g><g><title>generics_of (145,492 samples, 0.15%)</title><rect x="45.1006%" y="133" width="0.1544%" height="15" fill="rgb(244,218,35)"/><text x="45.3506%" y="143.50"></text></g><g><title>late_bound_vars_map (261,235 samples, 0.28%)</title><rect x="45.6881%" y="85" width="0.2772%" height="15" fill="rgb(240,68,47)"/><text x="45.9381%" y="95.50"></text></g><g><title>resolve_lifetimes (242,474 samples, 0.26%)</title><rect x="45.7080%" y="69" width="0.2573%" height="15" fill="rgb(210,16,53)"/><text x="45.9580%" y="79.50"></text></g><g><title>explicit_predicates_of (469,165 samples, 0.50%)</title><rect x="45.4831%" y="101" width="0.4978%" height="15" fill="rgb(235,124,12)"/><text x="45.7331%" y="111.50"></text></g><g><title>predicates_of (608,357 samples, 0.65%)</title><rect x="45.3867%" y="133" width="0.6455%" height="15" fill="rgb(224,169,11)"/><text x="45.6367%" y="143.50"></text></g><g><title>predicates_defined_on (573,007 samples, 0.61%)</title><rect x="45.4242%" y="117" width="0.6080%" height="15" fill="rgb(250,166,2)"/><text x="45.6742%" y="127.50"></text></g><g><title>type_collecting (1,520,266 samples, 1.61%)</title><rect x="44.7178%" y="165" width="1.6132%" height="15" fill="rgb(242,216,29)"/><text x="44.9678%" y="175.50"></text></g><g><title>collect_mod_item_types (1,512,616 samples, 1.61%)</title><rect x="44.7259%" y="149" width="1.6050%" height="15" fill="rgb(230,116,27)"/><text x="44.9759%" y="159.50"></text></g><g><title>type_of (243,672 samples, 0.26%)</title><rect x="46.0724%" y="133" width="0.2586%" height="15" fill="rgb(228,99,48)"/><text x="46.3224%" y="143.50"></text></g><g><title>evaluate_obligation (359,635 samples, 0.38%)</title><rect x="47.4600%" y="133" width="0.3816%" height="15" fill="rgb(253,11,6)"/><text x="47.7100%" y="143.50"></text></g><g><title>implied_outlives_bounds (130,472 samples, 0.14%)</title><rect x="47.8457%" y="133" width="0.1384%" height="15" fill="rgb(247,143,39)"/><text x="48.0957%" y="143.50"></text></g><g><title>param_env (155,121 samples, 0.16%)</title><rect x="47.9841%" y="133" width="0.1646%" height="15" fill="rgb(236,97,10)"/><text x="48.2341%" y="143.50"></text></g><g><title>region_scope_tree (104,091 samples, 0.11%)</title><rect x="48.1960%" y="133" width="0.1105%" height="15" fill="rgb(233,208,19)"/><text x="48.4460%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,744,161 samples, 1.85%)</title><rect x="46.4695%" y="149" width="1.8507%" height="15" fill="rgb(216,164,2)"/><text x="46.7195%" y="159.50">c..</text></g><g><title>adt_def (175,002 samples, 0.19%)</title><rect x="50.2492%" y="101" width="0.1857%" height="15" fill="rgb(220,129,5)"/><text x="50.4992%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (173,502 samples, 0.18%)</title><rect x="50.2508%" y="85" width="0.1841%" height="15" fill="rgb(242,17,10)"/><text x="50.5008%" y="95.50"></text></g><g><title>item_attrs (159,841 samples, 0.17%)</title><rect x="50.2653%" y="69" width="0.1696%" height="15" fill="rgb(242,107,0)"/><text x="50.5153%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (158,291 samples, 0.17%)</title><rect x="50.2669%" y="53" width="0.1680%" height="15" fill="rgb(251,28,31)"/><text x="50.5169%" y="63.50"></text></g><g><title>adt_sized_constraint (185,732 samples, 0.20%)</title><rect x="50.2398%" y="117" width="0.1971%" height="15" fill="rgb(233,223,10)"/><text x="50.4898%" y="127.50"></text></g><g><title>evaluate_obligation (521,178 samples, 0.55%)</title><rect x="49.9027%" y="133" width="0.5530%" height="15" fill="rgb(215,21,27)"/><text x="50.1527%" y="143.50"></text></g><g><title>implied_outlives_bounds (167,660 samples, 0.18%)</title><rect x="50.4744%" y="133" width="0.1779%" height="15" fill="rgb(232,23,21)"/><text x="50.7244%" y="143.50"></text></g><g><title>param_env (310,113 samples, 0.33%)</title><rect x="50.6523%" y="133" width="0.3291%" height="15" fill="rgb(244,5,23)"/><text x="50.9023%" y="143.50"></text></g><g><title>predicates_of (130,331 samples, 0.14%)</title><rect x="50.9814%" y="133" width="0.1383%" height="15" fill="rgb(226,81,46)"/><text x="51.2314%" y="143.50"></text></g><g><title>check_item_well_formed (2,747,805 samples, 2.92%)</title><rect x="48.3202%" y="149" width="2.9157%" height="15" fill="rgb(247,70,30)"/><text x="48.5702%" y="159.50">ch..</text></g><g><title>analysis (39,663,098 samples, 42.09%)</title><rect x="9.2538%" y="197" width="42.0867%" height="15" fill="rgb(212,68,19)"/><text x="9.5038%" y="207.50">analysis</text></g><g><title>type_check_crate (27,593,881 samples, 29.28%)</title><rect x="22.0605%" y="181" width="29.2800%" height="15" fill="rgb(240,187,13)"/><text x="22.3105%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,718,209 samples, 5.01%)</title><rect x="46.3339%" y="165" width="5.0065%" height="15" fill="rgb(223,113,26)"/><text x="46.5839%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (98,482 samples, 0.10%)</title><rect x="51.2360%" y="149" width="0.1045%" height="15" fill="rgb(206,192,2)"/><text x="51.4860%" y="159.50"></text></g><g><title>codegen_module (1,309,084 samples, 1.39%)</title><rect x="52.1121%" y="181" width="1.3891%" height="15" fill="rgb(241,108,4)"/><text x="52.3621%" y="191.50"></text></g><g><title>codegen_crate (2,090,852 samples, 2.22%)</title><rect x="51.3503%" y="197" width="2.2186%" height="15" fill="rgb(247,173,49)"/><text x="51.6003%" y="207.50">c..</text></g><g><title>LLVM_module_codegen (13,855,407 samples, 14.70%)</title><rect x="53.6072%" y="181" width="14.7020%" height="15" fill="rgb(224,114,35)"/><text x="53.8572%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (13,543,474 samples, 14.37%)</title><rect x="53.9382%" y="165" width="14.3710%" height="15" fill="rgb(245,159,27)"/><text x="54.1882%" y="175.50">LLVM_module_codegen_em..</text></g><g><title>codegen_module_optimize (14,639,416 samples, 15.53%)</title><rect x="53.5689%" y="197" width="15.5339%" height="15" fill="rgb(245,172,44)"/><text x="53.8189%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (747,929 samples, 0.79%)</title><rect x="68.3092%" y="181" width="0.7936%" height="15" fill="rgb(236,23,11)"/><text x="68.5592%" y="191.50"></text></g><g><title>macro_expand_crate (9,866,794 samples, 10.47%)</title><rect x="69.4639%" y="181" width="10.4697%" height="15" fill="rgb(205,117,38)"/><text x="69.7139%" y="191.50">macro_expand_cr..</text></g><g><title>expand_crate (9,855,874 samples, 10.46%)</title><rect x="69.4755%" y="165" width="10.4581%" height="15" fill="rgb(237,72,25)"/><text x="69.7255%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,050,651 samples, 2.18%)</title><rect x="77.7576%" y="149" width="2.1760%" height="15" fill="rgb(244,70,9)"/><text x="78.0076%" y="159.50">m..</text></g><g><title>metadata_register_crate (742,624 samples, 0.79%)</title><rect x="79.1456%" y="133" width="0.7880%" height="15" fill="rgb(217,125,39)"/><text x="79.3956%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (168,071 samples, 0.18%)</title><rect x="79.9366%" y="181" width="0.1783%" height="15" fill="rgb(235,36,10)"/><text x="80.1866%" y="191.50"></text></g><g><title>finalize_macro_resolutions (98,261 samples, 0.10%)</title><rect x="80.1422%" y="165" width="0.1043%" height="15" fill="rgb(251,123,47)"/><text x="80.3922%" y="175.50"></text></g><g><title>late_resolve_crate (1,749,489 samples, 1.86%)</title><rect x="80.2464%" y="165" width="1.8564%" height="15" fill="rgb(221,13,13)"/><text x="80.4964%" y="175.50">l..</text></g><g><title>configure_and_expand (12,301,000 samples, 13.05%)</title><rect x="69.1028%" y="197" width="13.0526%" height="15" fill="rgb(238,131,9)"/><text x="69.3528%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,923,071 samples, 2.04%)</title><rect x="80.1149%" y="181" width="2.0406%" height="15" fill="rgb(211,50,8)"/><text x="80.3649%" y="191.50">r..</text></g><g><title>early_lint_checks (161,162 samples, 0.17%)</title><rect x="82.2461%" y="197" width="0.1710%" height="15" fill="rgb(245,182,24)"/><text x="82.4961%" y="207.50"></text></g><g><title>free_global_ctxt (3,425,246 samples, 3.63%)</title><rect x="82.4171%" y="197" width="3.6345%" height="15" fill="rgb(242,14,37)"/><text x="82.6671%" y="207.50">free..</text></g><g><title>optimized_mir (248,883 samples, 0.26%)</title><rect x="87.1604%" y="117" width="0.2641%" height="15" fill="rgb(246,228,12)"/><text x="87.4104%" y="127.50"></text></g><g><title>resolve_instance (96,621 samples, 0.10%)</title><rect x="87.4245%" y="117" width="0.1025%" height="15" fill="rgb(213,55,15)"/><text x="87.6745%" y="127.50"></text></g><g><title>fn_abi_of_instance (159,651 samples, 0.17%)</title><rect x="87.6702%" y="53" width="0.1694%" height="15" fill="rgb(209,9,3)"/><text x="87.9202%" y="63.50"></text></g><g><title>eval_to_const_value_raw (369,204 samples, 0.39%)</title><rect x="87.5363%" y="101" width="0.3918%" height="15" fill="rgb(230,59,30)"/><text x="87.7863%" y="111.50"></text></g><g><title>eval_to_const_value_raw (368,084 samples, 0.39%)</title><rect x="87.5374%" y="85" width="0.3906%" height="15" fill="rgb(209,121,21)"/><text x="87.7874%" y="95.50"></text></g><g><title>eval_to_allocation_raw (363,714 samples, 0.39%)</title><rect x="87.5421%" y="69" width="0.3859%" height="15" fill="rgb(220,109,13)"/><text x="87.7921%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (380,924 samples, 0.40%)</title><rect x="87.5270%" y="117" width="0.4042%" height="15" fill="rgb(232,18,1)"/><text x="87.7770%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,123,482 samples, 1.19%)</title><rect x="87.0663%" y="133" width="1.1921%" height="15" fill="rgb(215,41,42)"/><text x="87.3163%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (308,363 samples, 0.33%)</title><rect x="87.9312%" y="117" width="0.3272%" height="15" fill="rgb(224,123,36)"/><text x="88.1812%" y="127.50"></text></g><g><title>upstream_monomorphizations (303,883 samples, 0.32%)</title><rect x="87.9360%" y="101" width="0.3225%" height="15" fill="rgb(240,125,3)"/><text x="88.1860%" y="111.50"></text></g><g><title>exported_symbols (226,152 samples, 0.24%)</title><rect x="88.0184%" y="85" width="0.2400%" height="15" fill="rgb(205,98,50)"/><text x="88.2684%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (222,362 samples, 0.24%)</title><rect x="88.0225%" y="69" width="0.2359%" height="15" fill="rgb(205,185,37)"/><text x="88.2725%" y="79.50"></text></g><g><title>monomorphization_collector (1,143,782 samples, 1.21%)</title><rect x="87.0635%" y="149" width="1.2137%" height="15" fill="rgb(238,207,15)"/><text x="87.3135%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,314,064 samples, 1.39%)</title><rect x="87.0374%" y="165" width="1.3944%" height="15" fill="rgb(213,199,42)"/><text x="87.2874%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (145,741 samples, 0.15%)</title><rect x="88.2772%" y="149" width="0.1546%" height="15" fill="rgb(235,201,11)"/><text x="88.5272%" y="159.50"></text></g><g><title>exported_symbols (1,400,505 samples, 1.49%)</title><rect x="87.0126%" y="181" width="1.4861%" height="15" fill="rgb(207,46,11)"/><text x="87.2626%" y="191.50"></text></g><g><title>is_sized_raw (107,800 samples, 0.11%)</title><rect x="89.6286%" y="149" width="0.1144%" height="15" fill="rgb(241,35,35)"/><text x="89.8786%" y="159.50"></text></g><g><title>layout_of (299,081 samples, 0.32%)</title><rect x="89.4612%" y="165" width="0.3174%" height="15" fill="rgb(243,32,47)"/><text x="89.7112%" y="175.50"></text></g><g><title>optimized_mir (1,903,001 samples, 2.02%)</title><rect x="88.6036%" y="181" width="2.0193%" height="15" fill="rgb(247,202,23)"/><text x="88.8536%" y="191.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (795,700 samples, 0.84%)</title><rect x="89.7786%" y="165" width="0.8443%" height="15" fill="rgb(219,102,11)"/><text x="90.0286%" y="175.50"></text></g><g><title>generate_crate_metadata (4,341,546 samples, 4.61%)</title><rect x="86.0517%" y="197" width="4.6068%" height="15" fill="rgb(243,110,44)"/><text x="86.3017%" y="207.50">gener..</text></g><g><title>hir_lowering (1,231,053 samples, 1.31%)</title><rect x="90.6585%" y="197" width="1.3063%" height="15" fill="rgb(222,74,54)"/><text x="90.9085%" y="207.50"></text></g><g><title>finish_ongoing_codegen (3,671,908 samples, 3.90%)</title><rect x="91.9787%" y="181" width="3.8963%" height="15" fill="rgb(216,99,12)"/><text x="92.2287%" y="191.50">fini..</text></g><g><title>join_worker_thread (122,811 samples, 0.13%)</title><rect x="95.7447%" y="165" width="0.1303%" height="15" fill="rgb(226,22,26)"/><text x="95.9947%" y="175.50"></text></g><g><title>link_crate (716,068 samples, 0.76%)</title><rect x="95.8750%" y="181" width="0.7598%" height="15" fill="rgb(217,163,10)"/><text x="96.1250%" y="191.50"></text></g><g><title>link_binary (705,818 samples, 0.75%)</title><rect x="95.8859%" y="165" width="0.7489%" height="15" fill="rgb(213,25,53)"/><text x="96.1359%" y="175.50"></text></g><g><title>link_rlib (454,365 samples, 0.48%)</title><rect x="96.1527%" y="149" width="0.4821%" height="15" fill="rgb(252,105,26)"/><text x="96.4027%" y="159.50"></text></g><g><title>link (4,408,977 samples, 4.68%)</title><rect x="91.9648%" y="197" width="4.6784%" height="15" fill="rgb(220,39,43)"/><text x="92.2148%" y="207.50">link</text></g><g><title>parse_crate (1,796,748 samples, 1.91%)</title><rect x="96.6431%" y="197" width="1.9065%" height="15" fill="rgb(229,68,48)"/><text x="96.8931%" y="207.50">p..</text></g><g><title>prepare_outputs (168,492 samples, 0.18%)</title><rect x="98.5586%" y="197" width="0.1788%" height="15" fill="rgb(252,8,32)"/><text x="98.8086%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (796,399 samples, 0.85%)</title><rect x="98.7374%" y="197" width="0.8451%" height="15" fill="rgb(223,20,43)"/><text x="98.9874%" y="207.50"></text></g><g><title>all (94,241,496 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (94,241,496 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (308,463 samples, 0.33%)</title><rect x="99.6727%" y="197" width="0.3273%" height="15" fill="rgb(249,185,26)"/><text x="99.9227%" y="207.50"></text></g></svg></svg>