<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,623,719 samples, 2.55%)</title><rect x="0.7555%" y="213" width="2.5536%" height="15" fill="rgb(227,0,7)"/><text x="1.0055%" y="223.50">LL..</text></g><g><title>param_env (259,290 samples, 0.25%)</title><rect x="10.4330%" y="133" width="0.2524%" height="15" fill="rgb(217,0,24)"/><text x="10.6830%" y="143.50"></text></g><g><title>item_attrs (198,923 samples, 0.19%)</title><rect x="11.0208%" y="101" width="0.1936%" height="15" fill="rgb(221,193,54)"/><text x="11.2708%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (191,793 samples, 0.19%)</title><rect x="11.0277%" y="85" width="0.1867%" height="15" fill="rgb(248,212,6)"/><text x="11.2777%" y="95.50"></text></g><g><title>codegen_fn_attrs (276,114 samples, 0.27%)</title><rect x="10.9535%" y="117" width="0.2687%" height="15" fill="rgb(208,68,35)"/><text x="11.2035%" y="127.50"></text></g><g><title>adt_drop_tys (138,003 samples, 0.13%)</title><rect x="12.7434%" y="85" width="0.1343%" height="15" fill="rgb(232,128,0)"/><text x="12.9934%" y="95.50"></text></g><g><title>needs_drop_raw (706,047 samples, 0.69%)</title><rect x="12.6825%" y="101" width="0.6872%" height="15" fill="rgb(207,160,47)"/><text x="12.9325%" y="111.50"></text></g><g><title>is_copy_raw (505,454 samples, 0.49%)</title><rect x="12.8777%" y="85" width="0.4920%" height="15" fill="rgb(228,23,34)"/><text x="13.1277%" y="95.50"></text></g><g><title>evaluate_obligation (422,554 samples, 0.41%)</title><rect x="12.9584%" y="69" width="0.4113%" height="15" fill="rgb(218,30,26)"/><text x="13.2084%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (241,872 samples, 0.24%)</title><rect x="13.5353%" y="85" width="0.2354%" height="15" fill="rgb(220,122,19)"/><text x="13.7853%" y="95.50"></text></g><g><title>resolve_instance (575,576 samples, 0.56%)</title><rect x="13.3697%" y="101" width="0.5602%" height="15" fill="rgb(250,228,42)"/><text x="13.6197%" y="111.50"></text></g><g><title>thir_body (520,203 samples, 0.51%)</title><rect x="13.9429%" y="101" width="0.5063%" height="15" fill="rgb(240,193,28)"/><text x="14.1929%" y="111.50"></text></g><g><title>mir_const (4,666,191 samples, 4.54%)</title><rect x="9.9231%" y="149" width="4.5415%" height="15" fill="rgb(216,20,37)"/><text x="10.1731%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (3,883,023 samples, 3.78%)</title><rect x="10.6854%" y="133" width="3.7793%" height="15" fill="rgb(206,188,39)"/><text x="10.9354%" y="143.50">unsa..</text></g><g><title>mir_built (3,331,463 samples, 3.24%)</title><rect x="11.2222%" y="117" width="3.2425%" height="15" fill="rgb(217,207,13)"/><text x="11.4722%" y="127.50">mir..</text></g><g><title>mir_promoted (5,202,086 samples, 5.06%)</title><rect x="9.4278%" y="165" width="5.0631%" height="15" fill="rgb(231,73,38)"/><text x="9.6778%" y="175.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (160,271 samples, 0.16%)</title><rect x="14.4909%" y="165" width="0.1560%" height="15" fill="rgb(225,20,46)"/><text x="14.7409%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (413,256 samples, 0.40%)</title><rect x="14.6469%" y="165" width="0.4022%" height="15" fill="rgb(210,31,41)"/><text x="14.8969%" y="175.50"></text></g><g><title>normalize_projection_ty (275,225 samples, 0.27%)</title><rect x="14.7812%" y="149" width="0.2679%" height="15" fill="rgb(221,200,47)"/><text x="15.0312%" y="159.50"></text></g><g><title>type_op_normalize_ty (211,602 samples, 0.21%)</title><rect x="15.0570%" y="165" width="0.2059%" height="15" fill="rgb(226,26,5)"/><text x="15.3070%" y="175.50"></text></g><g><title>normalize_projection_ty (138,321 samples, 0.13%)</title><rect x="15.1283%" y="149" width="0.1346%" height="15" fill="rgb(249,33,26)"/><text x="15.3783%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,096,712 samples, 1.07%)</title><rect x="15.2629%" y="165" width="1.0674%" height="15" fill="rgb(235,183,28)"/><text x="15.5129%" y="175.50"></text></g><g><title>MIR_borrow_checking (13,014,359 samples, 12.67%)</title><rect x="3.6652%" y="197" width="12.6667%" height="15" fill="rgb(221,5,38)"/><text x="3.9152%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,949,969 samples, 12.60%)</title><rect x="3.7278%" y="181" width="12.6040%" height="15" fill="rgb(247,18,42)"/><text x="3.9778%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (241,163 samples, 0.23%)</title><rect x="16.3471%" y="197" width="0.2347%" height="15" fill="rgb(241,131,45)"/><text x="16.5971%" y="207.50"></text></g><g><title>item_attrs (113,822 samples, 0.11%)</title><rect x="17.3314%" y="117" width="0.1108%" height="15" fill="rgb(249,31,29)"/><text x="17.5814%" y="127.50"></text></g><g><title>codegen_fn_attrs (424,675 samples, 0.41%)</title><rect x="17.1162%" y="133" width="0.4133%" height="15" fill="rgb(225,111,53)"/><text x="17.3662%" y="143.50"></text></g><g><title>codegen_fn_attrs (666,727 samples, 0.65%)</title><rect x="16.8887%" y="165" width="0.6489%" height="15" fill="rgb(238,160,17)"/><text x="17.1387%" y="175.50"></text></g><g><title>should_inherit_track_caller (586,206 samples, 0.57%)</title><rect x="16.9671%" y="149" width="0.5705%" height="15" fill="rgb(214,148,48)"/><text x="17.2171%" y="159.50"></text></g><g><title>check_mod_attrs (958,420 samples, 0.93%)</title><rect x="16.6053%" y="181" width="0.9328%" height="15" fill="rgb(232,36,49)"/><text x="16.8553%" y="191.50"></text></g><g><title>check_mod_const_bodies (154,302 samples, 0.15%)</title><rect x="17.5381%" y="181" width="0.1502%" height="15" fill="rgb(209,103,24)"/><text x="17.7881%" y="191.50"></text></g><g><title>lookup_deprecation_entry (216,982 samples, 0.21%)</title><rect x="18.0398%" y="165" width="0.2112%" height="15" fill="rgb(229,88,8)"/><text x="18.2898%" y="175.50"></text></g><g><title>stability_index (139,852 samples, 0.14%)</title><rect x="18.1149%" y="149" width="0.1361%" height="15" fill="rgb(213,181,19)"/><text x="18.3649%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (619,026 samples, 0.60%)</title><rect x="17.7777%" y="181" width="0.6025%" height="15" fill="rgb(254,191,54)"/><text x="18.0277%" y="191.50"></text></g><g><title>misc_checking_1 (1,936,631 samples, 1.88%)</title><rect x="16.5823%" y="197" width="1.8849%" height="15" fill="rgb(241,83,37)"/><text x="16.8323%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (278,023 samples, 0.27%)</title><rect x="18.4686%" y="181" width="0.2706%" height="15" fill="rgb(233,36,39)"/><text x="18.7186%" y="191.50"></text></g><g><title>check_mod_liveness (230,862 samples, 0.22%)</title><rect x="18.5145%" y="165" width="0.2247%" height="15" fill="rgb(226,3,54)"/><text x="18.7645%" y="175.50"></text></g><g><title>misc_checking_2 (612,057 samples, 0.60%)</title><rect x="18.4672%" y="197" width="0.5957%" height="15" fill="rgb(245,192,40)"/><text x="18.7172%" y="207.50"></text></g><g><title>match_checking (332,614 samples, 0.32%)</title><rect x="18.7392%" y="181" width="0.3237%" height="15" fill="rgb(238,167,29)"/><text x="18.9892%" y="191.50"></text></g><g><title>check_match (316,074 samples, 0.31%)</title><rect x="18.7553%" y="165" width="0.3076%" height="15" fill="rgb(232,182,51)"/><text x="19.0053%" y="175.50"></text></g><g><title>check_private_in_public (110,411 samples, 0.11%)</title><rect x="19.0720%" y="181" width="0.1075%" height="15" fill="rgb(231,60,39)"/><text x="19.3220%" y="191.50"></text></g><g><title>death_checking (193,893 samples, 0.19%)</title><rect x="19.1794%" y="181" width="0.1887%" height="15" fill="rgb(208,69,12)"/><text x="19.4294%" y="191.50"></text></g><g><title>crate_lints (791,118 samples, 0.77%)</title><rect x="19.3696%" y="165" width="0.7700%" height="15" fill="rgb(235,93,37)"/><text x="19.6196%" y="175.50"></text></g><g><title>type_of (391,725 samples, 0.38%)</title><rect x="19.7584%" y="149" width="0.3813%" height="15" fill="rgb(213,116,39)"/><text x="20.0084%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (301,424 samples, 0.29%)</title><rect x="19.8463%" y="133" width="0.2934%" height="15" fill="rgb(222,207,29)"/><text x="20.0963%" y="143.50"></text></g><g><title>lint_checking (968,810 samples, 0.94%)</title><rect x="19.3682%" y="181" width="0.9429%" height="15" fill="rgb(206,96,30)"/><text x="19.6182%" y="191.50"></text></g><g><title>module_lints (176,162 samples, 0.17%)</title><rect x="20.1396%" y="165" width="0.1715%" height="15" fill="rgb(218,138,4)"/><text x="20.3896%" y="175.50"></text></g><g><title>lint_mod (174,202 samples, 0.17%)</title><rect x="20.1415%" y="149" width="0.1695%" height="15" fill="rgb(250,191,14)"/><text x="20.3915%" y="159.50"></text></g><g><title>privacy_access_levels (150,071 samples, 0.15%)</title><rect x="20.3111%" y="181" width="0.1461%" height="15" fill="rgb(239,60,40)"/><text x="20.5611%" y="191.50"></text></g><g><title>privacy_checking_modules (380,984 samples, 0.37%)</title><rect x="20.4571%" y="181" width="0.3708%" height="15" fill="rgb(206,27,48)"/><text x="20.7071%" y="191.50"></text></g><g><title>check_mod_privacy (379,634 samples, 0.37%)</title><rect x="20.4585%" y="165" width="0.3695%" height="15" fill="rgb(225,35,8)"/><text x="20.7085%" y="175.50"></text></g><g><title>misc_checking_3 (1,824,509 samples, 1.78%)</title><rect x="19.0630%" y="197" width="1.7758%" height="15" fill="rgb(250,213,24)"/><text x="19.3130%" y="207.50">m..</text></g><g><title>impl_parent (1,267,921 samples, 1.23%)</title><rect x="23.8974%" y="133" width="1.2341%" height="15" fill="rgb(247,123,22)"/><text x="24.1474%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (679,863 samples, 0.66%)</title><rect x="24.4697%" y="117" width="0.6617%" height="15" fill="rgb(231,138,38)"/><text x="24.7197%" y="127.50"></text></g><g><title>impl_trait_ref (3,497,645 samples, 3.40%)</title><rect x="25.1347%" y="133" width="3.4042%" height="15" fill="rgb(231,145,46)"/><text x="25.3847%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,924,819 samples, 2.85%)</title><rect x="25.6922%" y="117" width="2.8467%" height="15" fill="rgb(251,118,11)"/><text x="25.9422%" y="127.50">me..</text></g><g><title>item_attrs (178,881 samples, 0.17%)</title><rect x="28.5389%" y="133" width="0.1741%" height="15" fill="rgb(217,147,25)"/><text x="28.7889%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (165,361 samples, 0.16%)</title><rect x="28.5521%" y="117" width="0.1609%" height="15" fill="rgb(247,81,37)"/><text x="28.8021%" y="127.50"></text></g><g><title>predicates_of (154,432 samples, 0.15%)</title><rect x="28.7141%" y="133" width="0.1503%" height="15" fill="rgb(209,12,38)"/><text x="28.9641%" y="143.50"></text></g><g><title>trait_impls_of (503,534 samples, 0.49%)</title><rect x="28.8742%" y="133" width="0.4901%" height="15" fill="rgb(227,1,9)"/><text x="29.1242%" y="143.50"></text></g><g><title>implementations_of_trait (114,840 samples, 0.11%)</title><rect x="29.2525%" y="117" width="0.1118%" height="15" fill="rgb(248,47,43)"/><text x="29.5025%" y="127.50"></text></g><g><title>coherent_trait (8,702,573 samples, 8.47%)</title><rect x="20.9256%" y="165" width="8.4701%" height="15" fill="rgb(221,10,30)"/><text x="21.1756%" y="175.50">coherent_tra..</text></g><g><title>specialization_graph_of (8,671,713 samples, 8.44%)</title><rect x="20.9556%" y="149" width="8.4401%" height="15" fill="rgb(210,229,1)"/><text x="21.2056%" y="159.50">specializati..</text></g><g><title>coherence_checking (8,838,654 samples, 8.60%)</title><rect x="20.8873%" y="181" width="8.6026%" height="15" fill="rgb(222,148,37)"/><text x="21.1373%" y="191.50">coherence_ch..</text></g><g><title>associated_item (603,798 samples, 0.59%)</title><rect x="42.5588%" y="117" width="0.5877%" height="15" fill="rgb(234,67,33)"/><text x="42.8088%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (471,408 samples, 0.46%)</title><rect x="42.6877%" y="101" width="0.4588%" height="15" fill="rgb(247,98,35)"/><text x="42.9377%" y="111.50"></text></g><g><title>associated_items (865,559 samples, 0.84%)</title><rect x="42.3367%" y="133" width="0.8424%" height="15" fill="rgb(247,138,52)"/><text x="42.5867%" y="143.50"></text></g><g><title>adt_def (187,192 samples, 0.18%)</title><rect x="43.5499%" y="85" width="0.1822%" height="15" fill="rgb(213,79,30)"/><text x="43.7999%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (186,892 samples, 0.18%)</title><rect x="43.5502%" y="69" width="0.1819%" height="15" fill="rgb(246,177,23)"/><text x="43.8002%" y="79.50"></text></g><g><title>item_attrs (182,152 samples, 0.18%)</title><rect x="43.5548%" y="53" width="0.1773%" height="15" fill="rgb(230,62,27)"/><text x="43.8048%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (181,722 samples, 0.18%)</title><rect x="43.5552%" y="37" width="0.1769%" height="15" fill="rgb(216,154,8)"/><text x="43.8052%" y="47.50"></text></g><g><title>adt_dtorck_constraint (133,331 samples, 0.13%)</title><rect x="43.7372%" y="85" width="0.1298%" height="15" fill="rgb(244,35,45)"/><text x="43.9872%" y="95.50"></text></g><g><title>adt_dtorck_constraint (347,763 samples, 0.34%)</title><rect x="43.5375%" y="101" width="0.3385%" height="15" fill="rgb(251,115,12)"/><text x="43.7875%" y="111.50"></text></g><g><title>adt_dtorck_constraint (433,014 samples, 0.42%)</title><rect x="43.4751%" y="117" width="0.4214%" height="15" fill="rgb(240,54,50)"/><text x="43.7251%" y="127.50"></text></g><g><title>dropck_outlives (669,875 samples, 0.65%)</title><rect x="43.2514%" y="133" width="0.6520%" height="15" fill="rgb(233,84,52)"/><text x="43.5014%" y="143.50"></text></g><g><title>predicates_of (166,701 samples, 0.16%)</title><rect x="45.1246%" y="117" width="0.1622%" height="15" fill="rgb(207,117,47)"/><text x="45.3746%" y="127.50"></text></g><g><title>predicates_defined_on (110,420 samples, 0.11%)</title><rect x="45.1794%" y="101" width="0.1075%" height="15" fill="rgb(249,43,39)"/><text x="45.4294%" y="111.50"></text></g><g><title>specializes (166,553 samples, 0.16%)</title><rect x="45.2869%" y="117" width="0.1621%" height="15" fill="rgb(209,38,44)"/><text x="45.5369%" y="127.50"></text></g><g><title>param_env (129,493 samples, 0.13%)</title><rect x="45.3230%" y="101" width="0.1260%" height="15" fill="rgb(236,212,23)"/><text x="45.5730%" y="111.50"></text></g><g><title>evaluate_obligation (2,034,377 samples, 1.98%)</title><rect x="43.9034%" y="133" width="1.9800%" height="15" fill="rgb(242,79,21)"/><text x="44.1534%" y="143.50">e..</text></g><g><title>trait_impls_of (435,855 samples, 0.42%)</title><rect x="45.4592%" y="117" width="0.4242%" height="15" fill="rgb(211,96,35)"/><text x="45.7092%" y="127.50"></text></g><g><title>implementations_of_trait (146,491 samples, 0.14%)</title><rect x="45.7409%" y="101" width="0.1426%" height="15" fill="rgb(253,215,40)"/><text x="45.9909%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (128,271 samples, 0.12%)</title><rect x="45.7586%" y="85" width="0.1248%" height="15" fill="rgb(211,81,21)"/><text x="46.0086%" y="95.50"></text></g><g><title>fn_sig (145,492 samples, 0.14%)</title><rect x="45.9100%" y="133" width="0.1416%" height="15" fill="rgb(208,190,38)"/><text x="46.1600%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (127,782 samples, 0.12%)</title><rect x="45.9272%" y="117" width="0.1244%" height="15" fill="rgb(235,213,38)"/><text x="46.1772%" y="127.50"></text></g><g><title>generics_of (112,020 samples, 0.11%)</title><rect x="46.0516%" y="133" width="0.1090%" height="15" fill="rgb(237,122,38)"/><text x="46.3016%" y="143.50"></text></g><g><title>associated_item (193,773 samples, 0.19%)</title><rect x="46.2325%" y="101" width="0.1886%" height="15" fill="rgb(244,218,35)"/><text x="46.4825%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (175,383 samples, 0.17%)</title><rect x="46.2504%" y="85" width="0.1707%" height="15" fill="rgb(240,68,47)"/><text x="46.5004%" y="95.50"></text></g><g><title>impl_item_implementor_ids (280,503 samples, 0.27%)</title><rect x="46.1606%" y="133" width="0.2730%" height="15" fill="rgb(210,16,53)"/><text x="46.4106%" y="143.50"></text></g><g><title>associated_items (253,653 samples, 0.25%)</title><rect x="46.1868%" y="117" width="0.2469%" height="15" fill="rgb(235,124,12)"/><text x="46.4368%" y="127.50"></text></g><g><title>item_attrs (157,244 samples, 0.15%)</title><rect x="46.5065%" y="133" width="0.1530%" height="15" fill="rgb(224,169,11)"/><text x="46.7565%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,304 samples, 0.15%)</title><rect x="46.5123%" y="117" width="0.1473%" height="15" fill="rgb(250,166,2)"/><text x="46.7623%" y="127.50"></text></g><g><title>evaluate_obligation (323,804 samples, 0.32%)</title><rect x="46.9469%" y="117" width="0.3152%" height="15" fill="rgb(242,216,29)"/><text x="47.1969%" y="127.50"></text></g><g><title>method_autoderef_steps (564,025 samples, 0.55%)</title><rect x="46.7387%" y="133" width="0.5490%" height="15" fill="rgb(230,116,27)"/><text x="46.9887%" y="143.50"></text></g><g><title>predicates_of (557,088 samples, 0.54%)</title><rect x="47.3337%" y="133" width="0.5422%" height="15" fill="rgb(228,99,48)"/><text x="47.5837%" y="143.50"></text></g><g><title>predicates_defined_on (215,043 samples, 0.21%)</title><rect x="47.6667%" y="117" width="0.2093%" height="15" fill="rgb(253,11,6)"/><text x="47.9167%" y="127.50"></text></g><g><title>item_bodies_checking (18,985,083 samples, 18.48%)</title><rect x="29.5494%" y="181" width="18.4780%" height="15" fill="rgb(247,143,39)"/><text x="29.7994%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,982,313 samples, 18.48%)</title><rect x="29.5521%" y="165" width="18.4753%" height="15" fill="rgb(236,97,10)"/><text x="29.8021%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (18,917,812 samples, 18.41%)</title><rect x="29.6149%" y="149" width="18.4125%" height="15" fill="rgb(233,208,19)"/><text x="29.8649%" y="159.50">typeck</text></g><g><title>impl_trait_ref (170,981 samples, 0.17%)</title><rect x="51.0851%" y="101" width="0.1664%" height="15" fill="rgb(216,164,2)"/><text x="51.3351%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (146,811 samples, 0.14%)</title><rect x="51.1086%" y="85" width="0.1429%" height="15" fill="rgb(220,129,5)"/><text x="51.3586%" y="95.50"></text></g><g><title>adt_destructor (394,504 samples, 0.38%)</title><rect x="50.8969%" y="149" width="0.3840%" height="15" fill="rgb(242,17,10)"/><text x="51.1469%" y="159.50"></text></g><g><title>coherent_trait (382,774 samples, 0.37%)</title><rect x="50.9084%" y="133" width="0.3725%" height="15" fill="rgb(242,107,0)"/><text x="51.1584%" y="143.50"></text></g><g><title>specialization_graph_of (379,484 samples, 0.37%)</title><rect x="50.9116%" y="117" width="0.3693%" height="15" fill="rgb(251,28,31)"/><text x="51.1616%" y="127.50"></text></g><g><title>item_types_checking (3,649,588 samples, 3.55%)</title><rect x="48.0274%" y="181" width="3.5521%" height="15" fill="rgb(233,223,10)"/><text x="48.2774%" y="191.50">item..</text></g><g><title>check_mod_item_types (3,645,108 samples, 3.55%)</title><rect x="48.0317%" y="165" width="3.5477%" height="15" fill="rgb(215,21,27)"/><text x="48.2817%" y="175.50">chec..</text></g><g><title>associated_items (149,091 samples, 0.15%)</title><rect x="52.2171%" y="133" width="0.1451%" height="15" fill="rgb(232,23,21)"/><text x="52.4671%" y="143.50"></text></g><g><title>late_bound_vars_map (170,402 samples, 0.17%)</title><rect x="52.3729%" y="133" width="0.1659%" height="15" fill="rgb(244,5,23)"/><text x="52.6229%" y="143.50"></text></g><g><title>resolve_lifetimes (152,892 samples, 0.15%)</title><rect x="52.3900%" y="117" width="0.1488%" height="15" fill="rgb(226,81,46)"/><text x="52.6400%" y="127.50"></text></g><g><title>fn_sig (661,997 samples, 0.64%)</title><rect x="51.9540%" y="149" width="0.6443%" height="15" fill="rgb(247,70,30)"/><text x="52.2040%" y="159.50"></text></g><g><title>is_late_bound_map (360,434 samples, 0.35%)</title><rect x="52.7754%" y="133" width="0.3508%" height="15" fill="rgb(212,68,19)"/><text x="53.0254%" y="143.50"></text></g><g><title>resolve_lifetimes (345,574 samples, 0.34%)</title><rect x="52.7899%" y="117" width="0.3363%" height="15" fill="rgb(240,187,13)"/><text x="53.0399%" y="127.50"></text></g><g><title>lint_levels (151,182 samples, 0.15%)</title><rect x="52.9791%" y="101" width="0.1471%" height="15" fill="rgb(223,113,26)"/><text x="53.2291%" y="111.50"></text></g><g><title>named_region_map (124,003 samples, 0.12%)</title><rect x="53.1262%" y="133" width="0.1207%" height="15" fill="rgb(206,192,2)"/><text x="53.3762%" y="143.50"></text></g><g><title>resolve_lifetimes (104,011 samples, 0.10%)</title><rect x="53.1457%" y="117" width="0.1012%" height="15" fill="rgb(241,108,4)"/><text x="53.3957%" y="127.50"></text></g><g><title>generics_of (696,289 samples, 0.68%)</title><rect x="52.5983%" y="149" width="0.6777%" height="15" fill="rgb(247,173,49)"/><text x="52.8483%" y="159.50"></text></g><g><title>explicit_predicates_of (576,399 samples, 0.56%)</title><rect x="53.5282%" y="117" width="0.5610%" height="15" fill="rgb(224,114,35)"/><text x="53.7782%" y="127.50"></text></g><g><title>predicates_of (1,312,194 samples, 1.28%)</title><rect x="53.3524%" y="149" width="1.2771%" height="15" fill="rgb(245,159,27)"/><text x="53.6024%" y="159.50"></text></g><g><title>predicates_defined_on (1,244,824 samples, 1.21%)</title><rect x="53.4180%" y="133" width="1.2116%" height="15" fill="rgb(245,172,44)"/><text x="53.6680%" y="143.50"></text></g><g><title>inferred_outlives_of (555,165 samples, 0.54%)</title><rect x="54.0892%" y="117" width="0.5403%" height="15" fill="rgb(236,23,11)"/><text x="54.3392%" y="127.50"></text></g><g><title>inferred_outlives_crate (519,715 samples, 0.51%)</title><rect x="54.1237%" y="101" width="0.5058%" height="15" fill="rgb(205,117,38)"/><text x="54.3737%" y="111.50"></text></g><g><title>type_of (272,745 samples, 0.27%)</title><rect x="54.3641%" y="85" width="0.2655%" height="15" fill="rgb(237,72,25)"/><text x="54.6141%" y="95.50"></text></g><g><title>type_collecting (3,350,126 samples, 3.26%)</title><rect x="51.5807%" y="181" width="3.2606%" height="15" fill="rgb(244,70,9)"/><text x="51.8307%" y="191.50">typ..</text></g><g><title>collect_mod_item_types (3,338,376 samples, 3.25%)</title><rect x="51.5921%" y="165" width="3.2492%" height="15" fill="rgb(217,125,39)"/><text x="51.8421%" y="175.50">col..</text></g><g><title>type_of (217,622 samples, 0.21%)</title><rect x="54.6295%" y="149" width="0.2118%" height="15" fill="rgb(235,36,10)"/><text x="54.8795%" y="159.50"></text></g><g><title>evaluate_obligation (753,311 samples, 0.73%)</title><rect x="58.7028%" y="149" width="0.7332%" height="15" fill="rgb(251,123,47)"/><text x="58.9528%" y="159.50"></text></g><g><title>implied_outlives_bounds (473,748 samples, 0.46%)</title><rect x="59.4750%" y="149" width="0.4611%" height="15" fill="rgb(221,13,13)"/><text x="59.7250%" y="159.50"></text></g><g><title>param_env (623,527 samples, 0.61%)</title><rect x="59.9361%" y="149" width="0.6069%" height="15" fill="rgb(238,131,9)"/><text x="60.1861%" y="159.50"></text></g><g><title>check_impl_item_well_formed (6,145,993 samples, 5.98%)</title><rect x="55.1170%" y="165" width="5.9818%" height="15" fill="rgb(211,50,8)"/><text x="55.3670%" y="175.50">check_im..</text></g><g><title>region_scope_tree (476,104 samples, 0.46%)</title><rect x="60.6354%" y="149" width="0.4634%" height="15" fill="rgb(245,182,24)"/><text x="60.8854%" y="159.50"></text></g><g><title>adt_def (243,354 samples, 0.24%)</title><rect x="63.3548%" y="133" width="0.2369%" height="15" fill="rgb(242,14,37)"/><text x="63.6048%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (237,234 samples, 0.23%)</title><rect x="63.3608%" y="117" width="0.2309%" height="15" fill="rgb(246,228,12)"/><text x="63.6108%" y="127.50"></text></g><g><title>item_attrs (190,453 samples, 0.19%)</title><rect x="63.4063%" y="101" width="0.1854%" height="15" fill="rgb(213,55,15)"/><text x="63.6563%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (185,703 samples, 0.18%)</title><rect x="63.4109%" y="85" width="0.1807%" height="15" fill="rgb(209,9,3)"/><text x="63.6609%" y="95.50"></text></g><g><title>adt_sized_constraint (374,755 samples, 0.36%)</title><rect x="63.3244%" y="149" width="0.3647%" height="15" fill="rgb(230,59,30)"/><text x="63.5744%" y="159.50"></text></g><g><title>implied_outlives_bounds (212,872 samples, 0.21%)</title><rect x="63.8014%" y="149" width="0.2072%" height="15" fill="rgb(209,121,21)"/><text x="64.0514%" y="159.50"></text></g><g><title>param_env (402,676 samples, 0.39%)</title><rect x="64.0086%" y="149" width="0.3919%" height="15" fill="rgb(220,109,13)"/><text x="64.2586%" y="159.50"></text></g><g><title>predicates_of (153,713 samples, 0.15%)</title><rect x="64.4005%" y="149" width="0.1496%" height="15" fill="rgb(232,18,1)"/><text x="64.6505%" y="159.50"></text></g><g><title>analysis (63,107,984 samples, 61.42%)</title><rect x="3.3091%" y="213" width="61.4222%" height="15" fill="rgb(215,41,42)"/><text x="3.5591%" y="223.50">analysis</text></g><g><title>type_check_crate (45,097,251 samples, 43.89%)</title><rect x="20.8387%" y="197" width="43.8926%" height="15" fill="rgb(224,123,36)"/><text x="21.0887%" y="207.50">type_check_crate</text></g><g><title>wf_checking (10,158,709 samples, 9.89%)</title><rect x="54.8440%" y="181" width="9.8873%" height="15" fill="rgb(240,125,3)"/><text x="55.0940%" y="191.50">wf_checking</text></g><g><title>check_item_well_formed (3,732,231 samples, 3.63%)</title><rect x="61.0988%" y="165" width="3.6325%" height="15" fill="rgb(205,98,50)"/><text x="61.3488%" y="175.50">chec..</text></g><g><title>variances_of (149,223 samples, 0.15%)</title><rect x="64.5861%" y="149" width="0.1452%" height="15" fill="rgb(205,185,37)"/><text x="64.8361%" y="159.50"></text></g><g><title>crate_variances (140,582 samples, 0.14%)</title><rect x="64.5945%" y="133" width="0.1368%" height="15" fill="rgb(238,207,15)"/><text x="64.8445%" y="143.50"></text></g><g><title>codegen_module (293,403 samples, 0.29%)</title><rect x="65.1874%" y="197" width="0.2856%" height="15" fill="rgb(213,199,42)"/><text x="65.4374%" y="207.50"></text></g><g><title>codegen_crate (772,918 samples, 0.75%)</title><rect x="64.7441%" y="213" width="0.7523%" height="15" fill="rgb(235,201,11)"/><text x="64.9941%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,164,133 samples, 2.11%)</title><rect x="65.5126%" y="197" width="2.1063%" height="15" fill="rgb(207,46,11)"/><text x="65.7626%" y="207.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,086,072 samples, 2.03%)</title><rect x="65.5886%" y="181" width="2.0303%" height="15" fill="rgb(241,35,35)"/><text x="65.8386%" y="191.50">L..</text></g><g><title>codegen_module_optimize (2,447,746 samples, 2.38%)</title><rect x="65.4964%" y="213" width="2.3824%" height="15" fill="rgb(243,32,47)"/><text x="65.7464%" y="223.50">co..</text></g><g><title>LLVM_module_optimize (266,963 samples, 0.26%)</title><rect x="67.6189%" y="197" width="0.2598%" height="15" fill="rgb(247,202,23)"/><text x="67.8689%" y="207.50"></text></g><g><title>AST_validation (198,392 samples, 0.19%)</title><rect x="68.1081%" y="197" width="0.1931%" height="15" fill="rgb(219,102,11)"/><text x="68.3581%" y="207.50"></text></g><g><title>crate_injection (110,221 samples, 0.11%)</title><rect x="68.3807%" y="197" width="0.1073%" height="15" fill="rgb(243,110,44)"/><text x="68.6307%" y="207.50"></text></g><g><title>metadata_load_macro (355,314 samples, 0.35%)</title><rect x="78.5895%" y="165" width="0.3458%" height="15" fill="rgb(222,74,54)"/><text x="78.8395%" y="175.50"></text></g><g><title>macro_expand_crate (10,972,307 samples, 10.68%)</title><rect x="68.4880%" y="197" width="10.6792%" height="15" fill="rgb(216,99,12)"/><text x="68.7380%" y="207.50">macro_expand_cra..</text></g><g><title>expand_crate (10,947,426 samples, 10.65%)</title><rect x="68.5122%" y="181" width="10.6550%" height="15" fill="rgb(226,22,26)"/><text x="68.7622%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (238,193 samples, 0.23%)</title><rect x="78.9354%" y="165" width="0.2318%" height="15" fill="rgb(217,163,10)"/><text x="79.1854%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (268,253 samples, 0.26%)</title><rect x="79.1717%" y="197" width="0.2611%" height="15" fill="rgb(213,25,53)"/><text x="79.4217%" y="207.50"></text></g><g><title>late_resolve_crate (2,527,167 samples, 2.46%)</title><rect x="79.5875%" y="181" width="2.4597%" height="15" fill="rgb(252,105,26)"/><text x="79.8375%" y="191.50">la..</text></g><g><title>configure_and_expand (14,688,657 samples, 14.30%)</title><rect x="67.8787%" y="213" width="14.2963%" height="15" fill="rgb(220,39,43)"/><text x="68.1287%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,817,490 samples, 2.74%)</title><rect x="79.4328%" y="197" width="2.7422%" height="15" fill="rgb(229,68,48)"/><text x="79.6828%" y="207.50">re..</text></g><g><title>drop_ast (210,142 samples, 0.20%)</title><rect x="82.1750%" y="213" width="0.2045%" height="15" fill="rgb(252,8,32)"/><text x="82.4250%" y="223.50"></text></g><g><title>early_lint_checks (437,155 samples, 0.43%)</title><rect x="82.3924%" y="213" width="0.4255%" height="15" fill="rgb(223,20,43)"/><text x="82.6424%" y="223.50"></text></g><g><title>free_global_ctxt (1,912,161 samples, 1.86%)</title><rect x="82.8178%" y="213" width="1.8611%" height="15" fill="rgb(229,81,49)"/><text x="83.0678%" y="223.50">f..</text></g><g><title>exported_symbols (162,902 samples, 0.16%)</title><rect x="85.6782%" y="197" width="0.1586%" height="15" fill="rgb(236,28,36)"/><text x="85.9282%" y="207.50"></text></g><g><title>is_sized_raw (114,811 samples, 0.11%)</title><rect x="87.8789%" y="165" width="0.1117%" height="15" fill="rgb(249,185,26)"/><text x="88.1289%" y="175.50"></text></g><g><title>layout_of (122,331 samples, 0.12%)</title><rect x="88.1001%" y="149" width="0.1191%" height="15" fill="rgb(249,174,33)"/><text x="88.3501%" y="159.50"></text></g><g><title>layout_of (250,613 samples, 0.24%)</title><rect x="87.9907%" y="165" width="0.2439%" height="15" fill="rgb(233,201,37)"/><text x="88.2407%" y="175.50"></text></g><g><title>layout_of (687,169 samples, 0.67%)</title><rect x="87.5968%" y="181" width="0.6688%" height="15" fill="rgb(221,78,26)"/><text x="87.8468%" y="191.50"></text></g><g><title>needs_drop_raw (194,952 samples, 0.19%)</title><rect x="90.1508%" y="165" width="0.1897%" height="15" fill="rgb(250,127,30)"/><text x="90.4008%" y="175.50"></text></g><g><title>is_copy_raw (168,832 samples, 0.16%)</title><rect x="90.1763%" y="149" width="0.1643%" height="15" fill="rgb(230,49,44)"/><text x="90.4263%" y="159.50"></text></g><g><title>evaluate_obligation (132,002 samples, 0.13%)</title><rect x="90.2121%" y="133" width="0.1285%" height="15" fill="rgb(229,67,23)"/><text x="90.4621%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,168,342 samples, 2.11%)</title><rect x="88.2656%" y="181" width="2.1104%" height="15" fill="rgb(249,83,47)"/><text x="88.5156%" y="191.50">m..</text></g><g><title>optimized_mir (4,619,663 samples, 4.50%)</title><rect x="85.8936%" y="197" width="4.4963%" height="15" fill="rgb(215,43,3)"/><text x="86.1436%" y="207.50">optim..</text></g><g><title>promoted_mir (117,362 samples, 0.11%)</title><rect x="90.3899%" y="197" width="0.1142%" height="15" fill="rgb(238,154,13)"/><text x="90.6399%" y="207.50"></text></g><g><title>generate_crate_metadata (6,006,304 samples, 5.85%)</title><rect x="84.6789%" y="213" width="5.8459%" height="15" fill="rgb(219,56,2)"/><text x="84.9289%" y="223.50">generat..</text></g><g><title>hir_lowering (3,219,274 samples, 3.13%)</title><rect x="90.5248%" y="213" width="3.1333%" height="15" fill="rgb(233,0,4)"/><text x="90.7748%" y="223.50">hir..</text></g><g><title>finish_ongoing_codegen (204,252 samples, 0.20%)</title><rect x="93.6718%" y="197" width="0.1988%" height="15" fill="rgb(235,30,7)"/><text x="93.9218%" y="207.50"></text></g><g><title>link_crate (681,138 samples, 0.66%)</title><rect x="93.8705%" y="197" width="0.6629%" height="15" fill="rgb(250,79,13)"/><text x="94.1205%" y="207.50"></text></g><g><title>link_binary (665,547 samples, 0.65%)</title><rect x="93.8857%" y="181" width="0.6478%" height="15" fill="rgb(211,146,34)"/><text x="94.1357%" y="191.50"></text></g><g><title>link_rlib (429,315 samples, 0.42%)</title><rect x="94.1156%" y="165" width="0.4178%" height="15" fill="rgb(228,22,38)"/><text x="94.3656%" y="175.50"></text></g><g><title>link (906,160 samples, 0.88%)</title><rect x="93.6581%" y="213" width="0.8820%" height="15" fill="rgb(235,168,5)"/><text x="93.9081%" y="223.50"></text></g><g><title>parse_crate (4,271,855 samples, 4.16%)</title><rect x="94.5400%" y="213" width="4.1577%" height="15" fill="rgb(221,155,16)"/><text x="94.7900%" y="223.50">parse..</text></g><g><title>prepare_outputs (365,114 samples, 0.36%)</title><rect x="98.7073%" y="213" width="0.3554%" height="15" fill="rgb(215,215,53)"/><text x="98.9573%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (524,405 samples, 0.51%)</title><rect x="99.0627%" y="213" width="0.5104%" height="15" fill="rgb(223,4,10)"/><text x="99.3127%" y="223.50"></text></g><g><title>setup_global_ctxt (136,961 samples, 0.13%)</title><rect x="99.5739%" y="213" width="0.1333%" height="15" fill="rgb(234,103,6)"/><text x="99.8239%" y="223.50"></text></g><g><title>all (102,744,528 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (102,744,528 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (300,783 samples, 0.29%)</title><rect x="99.7073%" y="213" width="0.2927%" height="15" fill="rgb(228,201,54)"/><text x="99.9573%" y="223.50"></text></g></svg></svg>