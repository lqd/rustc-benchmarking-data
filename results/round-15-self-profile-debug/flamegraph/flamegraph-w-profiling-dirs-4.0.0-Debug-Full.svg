<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (29,438,266 samples, 17.35%)</title><rect x="0.4232%" y="229" width="17.3452%" height="15" fill="rgb(227,0,7)"/><text x="0.6732%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (171,863 samples, 0.10%)</title><rect x="20.9575%" y="117" width="0.1013%" height="15" fill="rgb(217,0,24)"/><text x="21.2075%" y="127.50"></text></g><g><title>thir_body (305,104 samples, 0.18%)</title><rect x="21.1053%" y="117" width="0.1798%" height="15" fill="rgb(221,193,54)"/><text x="21.3553%" y="127.50"></text></g><g><title>mir_const (2,098,464 samples, 1.24%)</title><rect x="20.0604%" y="165" width="1.2364%" height="15" fill="rgb(248,212,6)"/><text x="20.3104%" y="175.50"></text></g><g><title>unsafety_check_result (1,629,527 samples, 0.96%)</title><rect x="20.3367%" y="149" width="0.9601%" height="15" fill="rgb(208,68,35)"/><text x="20.5867%" y="159.50"></text></g><g><title>mir_built (1,388,085 samples, 0.82%)</title><rect x="20.4789%" y="133" width="0.8179%" height="15" fill="rgb(232,128,0)"/><text x="20.7289%" y="143.50"></text></g><g><title>mir_promoted (2,488,936 samples, 1.47%)</title><rect x="19.8464%" y="181" width="1.4665%" height="15" fill="rgb(207,160,47)"/><text x="20.0964%" y="191.50"></text></g><g><title>MIR_borrow_checking (6,313,194 samples, 3.72%)</title><rect x="17.8883%" y="213" width="3.7198%" height="15" fill="rgb(228,23,34)"/><text x="18.1383%" y="223.50">MIR_..</text></g><g><title>mir_borrowck (6,243,662 samples, 3.68%)</title><rect x="17.9293%" y="197" width="3.6788%" height="15" fill="rgb(218,30,26)"/><text x="18.1793%" y="207.50">mir_..</text></g><g><title>type_op_prove_predicate (469,424 samples, 0.28%)</title><rect x="21.3315%" y="181" width="0.2766%" height="15" fill="rgb(220,122,19)"/><text x="21.5815%" y="191.50"></text></g><g><title>evaluate_obligation (234,452 samples, 0.14%)</title><rect x="21.4699%" y="165" width="0.1381%" height="15" fill="rgb(250,228,42)"/><text x="21.7199%" y="175.50"></text></g><g><title>codegen_fn_attrs (274,572 samples, 0.16%)</title><rect x="21.8168%" y="181" width="0.1618%" height="15" fill="rgb(240,193,28)"/><text x="22.0668%" y="191.50"></text></g><g><title>check_mod_attrs (426,124 samples, 0.25%)</title><rect x="21.7276%" y="197" width="0.2511%" height="15" fill="rgb(216,20,37)"/><text x="21.9776%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (245,543 samples, 0.14%)</title><rect x="22.0724%" y="197" width="0.1447%" height="15" fill="rgb(206,188,39)"/><text x="22.3224%" y="207.50"></text></g><g><title>misc_checking_1 (937,930 samples, 0.55%)</title><rect x="21.7088%" y="213" width="0.5526%" height="15" fill="rgb(217,207,13)"/><text x="21.9588%" y="223.50"></text></g><g><title>misc_checking_2 (249,313 samples, 0.15%)</title><rect x="22.2615%" y="213" width="0.1469%" height="15" fill="rgb(231,73,38)"/><text x="22.5115%" y="223.50"></text></g><g><title>lint_checking (211,842 samples, 0.12%)</title><rect x="22.4765%" y="197" width="0.1248%" height="15" fill="rgb(225,20,46)"/><text x="22.7265%" y="207.50"></text></g><g><title>misc_checking_3 (526,855 samples, 0.31%)</title><rect x="22.4083%" y="213" width="0.3104%" height="15" fill="rgb(210,31,41)"/><text x="22.6583%" y="223.50"></text></g><g><title>impl_trait_ref (654,365 samples, 0.39%)</title><rect x="24.2499%" y="53" width="0.3856%" height="15" fill="rgb(221,200,47)"/><text x="24.4999%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (595,395 samples, 0.35%)</title><rect x="24.2847%" y="37" width="0.3508%" height="15" fill="rgb(226,26,5)"/><text x="24.5347%" y="47.50"></text></g><g><title>coherent_trait (1,082,691 samples, 0.64%)</title><rect x="24.0328%" y="85" width="0.6379%" height="15" fill="rgb(249,33,26)"/><text x="24.2828%" y="95.50"></text></g><g><title>specialization_graph_of (1,076,231 samples, 0.63%)</title><rect x="24.0366%" y="69" width="0.6341%" height="15" fill="rgb(235,183,28)"/><text x="24.2866%" y="79.50"></text></g><g><title>adt_destructor (1,095,741 samples, 0.65%)</title><rect x="24.0268%" y="117" width="0.6456%" height="15" fill="rgb(221,5,38)"/><text x="24.2768%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,093,541 samples, 0.64%)</title><rect x="24.0281%" y="101" width="0.6443%" height="15" fill="rgb(247,18,42)"/><text x="24.2781%" y="111.50"></text></g><g><title>adt_dtorck_constraint (219,132 samples, 0.13%)</title><rect x="24.6897%" y="69" width="0.1291%" height="15" fill="rgb(241,131,45)"/><text x="24.9397%" y="79.50"></text></g><g><title>adt_dtorck_constraint (249,292 samples, 0.15%)</title><rect x="24.6807%" y="85" width="0.1469%" height="15" fill="rgb(249,31,29)"/><text x="24.9307%" y="95.50"></text></g><g><title>adt_dtorck_constraint (257,003 samples, 0.15%)</title><rect x="24.6768%" y="101" width="0.1514%" height="15" fill="rgb(225,111,53)"/><text x="24.9268%" y="111.50"></text></g><g><title>adt_dtorck_constraint (265,473 samples, 0.16%)</title><rect x="24.6724%" y="117" width="0.1564%" height="15" fill="rgb(238,160,17)"/><text x="24.9224%" y="127.50"></text></g><g><title>dropck_outlives (1,465,445 samples, 0.86%)</title><rect x="23.9728%" y="149" width="0.8634%" height="15" fill="rgb(214,148,48)"/><text x="24.2228%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,423,974 samples, 0.84%)</title><rect x="23.9972%" y="133" width="0.8390%" height="15" fill="rgb(232,36,49)"/><text x="24.2472%" y="143.50"></text></g><g><title>associated_item (282,002 samples, 0.17%)</title><rect x="28.1230%" y="117" width="0.1662%" height="15" fill="rgb(209,103,24)"/><text x="28.3730%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (197,811 samples, 0.12%)</title><rect x="28.1726%" y="101" width="0.1166%" height="15" fill="rgb(229,88,8)"/><text x="28.4226%" y="111.50"></text></g><g><title>associated_items (427,163 samples, 0.25%)</title><rect x="28.0450%" y="133" width="0.2517%" height="15" fill="rgb(213,181,19)"/><text x="28.2950%" y="143.50"></text></g><g><title>evaluate_obligation (442,345 samples, 0.26%)</title><rect x="28.3169%" y="133" width="0.2606%" height="15" fill="rgb(254,191,54)"/><text x="28.5669%" y="143.50"></text></g><g><title>is_copy_raw (832,418 samples, 0.49%)</title><rect x="28.6878%" y="133" width="0.4905%" height="15" fill="rgb(241,83,37)"/><text x="28.9378%" y="143.50"></text></g><g><title>evaluate_obligation (768,907 samples, 0.45%)</title><rect x="28.7252%" y="117" width="0.4530%" height="15" fill="rgb(233,36,39)"/><text x="28.9752%" y="127.50"></text></g><g><title>trait_impls_of (481,785 samples, 0.28%)</title><rect x="28.8944%" y="101" width="0.2839%" height="15" fill="rgb(226,3,54)"/><text x="29.1444%" y="111.50"></text></g><g><title>method_autoderef_steps (245,722 samples, 0.14%)</title><rect x="29.2429%" y="133" width="0.1448%" height="15" fill="rgb(245,192,40)"/><text x="29.4929%" y="143.50"></text></g><g><title>predicates_of (180,862 samples, 0.11%)</title><rect x="29.3947%" y="133" width="0.1066%" height="15" fill="rgb(238,167,29)"/><text x="29.6447%" y="143.50"></text></g><g><title>typeck (7,757,889 samples, 4.57%)</title><rect x="24.9729%" y="149" width="4.5710%" height="15" fill="rgb(232,182,51)"/><text x="25.2229%" y="159.50">typeck</text></g><g><title>item_bodies_checking (11,524,756 samples, 6.79%)</title><rect x="22.7699%" y="197" width="6.7904%" height="15" fill="rgb(231,60,39)"/><text x="23.0199%" y="207.50">item_bodi..</text></g><g><title>typeck_item_bodies (11,522,356 samples, 6.79%)</title><rect x="22.7713%" y="181" width="6.7890%" height="15" fill="rgb(208,69,12)"/><text x="23.0213%" y="191.50">typeck_it..</text></g><g><title>typeck (11,469,836 samples, 6.76%)</title><rect x="22.8023%" y="165" width="6.7581%" height="15" fill="rgb(235,93,37)"/><text x="23.0523%" y="175.50">typeck</text></g><g><title>late_bound_vars_map (274,625 samples, 0.16%)</title><rect x="29.8218%" y="149" width="0.1618%" height="15" fill="rgb(213,116,39)"/><text x="30.0718%" y="159.50"></text></g><g><title>resolve_lifetimes (235,475 samples, 0.14%)</title><rect x="29.8449%" y="133" width="0.1387%" height="15" fill="rgb(222,207,29)"/><text x="30.0949%" y="143.50"></text></g><g><title>fn_sig (548,739 samples, 0.32%)</title><rect x="29.6886%" y="165" width="0.3233%" height="15" fill="rgb(206,96,30)"/><text x="29.9386%" y="175.50"></text></g><g><title>type_collecting (1,098,801 samples, 0.65%)</title><rect x="29.5658%" y="197" width="0.6474%" height="15" fill="rgb(218,138,4)"/><text x="29.8158%" y="207.50"></text></g><g><title>collect_mod_item_types (1,085,491 samples, 0.64%)</title><rect x="29.5737%" y="181" width="0.6396%" height="15" fill="rgb(250,191,14)"/><text x="29.8237%" y="191.50"></text></g><g><title>adt_sized_constraint (171,462 samples, 0.10%)</title><rect x="30.9084%" y="117" width="0.1010%" height="15" fill="rgb(239,60,40)"/><text x="31.1584%" y="127.50"></text></g><g><title>adt_sized_constraint (219,373 samples, 0.13%)</title><rect x="30.8857%" y="133" width="0.1293%" height="15" fill="rgb(206,27,48)"/><text x="31.1357%" y="143.50"></text></g><g><title>adt_sized_constraint (288,023 samples, 0.17%)</title><rect x="30.8526%" y="149" width="0.1697%" height="15" fill="rgb(225,35,8)"/><text x="31.1026%" y="159.50"></text></g><g><title>evaluate_obligation (376,594 samples, 0.22%)</title><rect x="30.8013%" y="165" width="0.2219%" height="15" fill="rgb(250,213,24)"/><text x="31.0513%" y="175.50"></text></g><g><title>param_env (424,953 samples, 0.25%)</title><rect x="31.0624%" y="165" width="0.2504%" height="15" fill="rgb(247,123,22)"/><text x="31.3124%" y="175.50"></text></g><g><title>analysis (23,191,884 samples, 13.66%)</title><rect x="17.7684%" y="229" width="13.6648%" height="15" fill="rgb(231,138,38)"/><text x="18.0184%" y="239.50">analysis</text></g><g><title>type_check_crate (14,790,078 samples, 8.71%)</title><rect x="22.7188%" y="213" width="8.7144%" height="15" fill="rgb(231,145,46)"/><text x="22.9688%" y="223.50">type_check_c..</text></g><g><title>wf_checking (2,067,431 samples, 1.22%)</title><rect x="30.2150%" y="197" width="1.2181%" height="15" fill="rgb(251,118,11)"/><text x="30.4650%" y="207.50"></text></g><g><title>check_item_well_formed (1,975,729 samples, 1.16%)</title><rect x="30.2690%" y="181" width="1.1641%" height="15" fill="rgb(217,147,25)"/><text x="30.5190%" y="191.50"></text></g><g><title>eval_to_const_value_raw (229,912 samples, 0.14%)</title><rect x="35.4735%" y="165" width="0.1355%" height="15" fill="rgb(247,81,37)"/><text x="35.7235%" y="175.50"></text></g><g><title>eval_to_const_value_raw (213,312 samples, 0.13%)</title><rect x="35.4833%" y="149" width="0.1257%" height="15" fill="rgb(209,12,38)"/><text x="35.7333%" y="159.50"></text></g><g><title>eval_to_allocation_raw (179,532 samples, 0.11%)</title><rect x="35.5032%" y="133" width="0.1058%" height="15" fill="rgb(227,1,9)"/><text x="35.7532%" y="143.50"></text></g><g><title>layout_of (616,456 samples, 0.36%)</title><rect x="35.4178%" y="181" width="0.3632%" height="15" fill="rgb(248,47,43)"/><text x="35.6678%" y="191.50"></text></g><g><title>fn_abi_of_instance (886,283 samples, 0.52%)</title><rect x="35.3054%" y="197" width="0.5222%" height="15" fill="rgb(221,10,30)"/><text x="35.5554%" y="207.50"></text></g><g><title>codegen_module (6,713,268 samples, 3.96%)</title><rect x="32.0255%" y="213" width="3.9555%" height="15" fill="rgb(210,229,1)"/><text x="32.2755%" y="223.50">code..</text></g><g><title>codegen_crate (7,778,689 samples, 4.58%)</title><rect x="31.4393%" y="229" width="4.5832%" height="15" fill="rgb(222,148,37)"/><text x="31.6893%" y="239.50">codeg..</text></g><g><title>LLVM_module_codegen (56,142,765 samples, 33.08%)</title><rect x="36.0573%" y="213" width="33.0796%" height="15" fill="rgb(234,67,33)"/><text x="36.3073%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (54,953,634 samples, 32.38%)</title><rect x="36.7580%" y="197" width="32.3789%" height="15" fill="rgb(247,98,35)"/><text x="37.0080%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (58,162,106 samples, 34.27%)</title><rect x="36.0226%" y="229" width="34.2694%" height="15" fill="rgb(247,138,52)"/><text x="36.2726%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,960,319 samples, 1.16%)</title><rect x="69.1369%" y="213" width="1.1550%" height="15" fill="rgb(213,79,30)"/><text x="69.3869%" y="223.50"></text></g><g><title>metadata_register_crate (2,829,029 samples, 1.67%)</title><rect x="76.6882%" y="181" width="1.6669%" height="15" fill="rgb(246,177,23)"/><text x="76.9382%" y="191.50"></text></g><g><title>metadata_register_crate (1,032,611 samples, 0.61%)</title><rect x="77.7466%" y="165" width="0.6084%" height="15" fill="rgb(230,62,27)"/><text x="77.9966%" y="175.50"></text></g><g><title>macro_expand_crate (13,264,194 samples, 7.82%)</title><rect x="70.5702%" y="213" width="7.8153%" height="15" fill="rgb(216,154,8)"/><text x="70.8202%" y="223.50">macro_expan..</text></g><g><title>expand_crate (13,239,814 samples, 7.80%)</title><rect x="70.5846%" y="197" width="7.8010%" height="15" fill="rgb(244,35,45)"/><text x="70.8346%" y="207.50">expand_crate</text></g><g><title>finalize_macro_resolutions (297,933 samples, 0.18%)</title><rect x="78.5017%" y="197" width="0.1755%" height="15" fill="rgb(251,115,12)"/><text x="78.7517%" y="207.50"></text></g><g><title>late_resolve_crate (1,189,542 samples, 0.70%)</title><rect x="78.6772%" y="197" width="0.7009%" height="15" fill="rgb(240,54,50)"/><text x="78.9272%" y="207.50"></text></g><g><title>configure_and_expand (15,493,646 samples, 9.13%)</title><rect x="70.2919%" y="229" width="9.1289%" height="15" fill="rgb(233,84,52)"/><text x="70.5419%" y="239.50">configure_and..</text></g><g><title>resolve_crate (1,604,646 samples, 0.95%)</title><rect x="78.4754%" y="213" width="0.9455%" height="15" fill="rgb(207,117,47)"/><text x="78.7254%" y="223.50"></text></g><g><title>early_lint_checks (222,242 samples, 0.13%)</title><rect x="79.4751%" y="229" width="0.1309%" height="15" fill="rgb(249,43,39)"/><text x="79.7251%" y="239.50"></text></g><g><title>free_global_ctxt (2,318,833 samples, 1.37%)</title><rect x="79.6061%" y="229" width="1.3663%" height="15" fill="rgb(209,38,44)"/><text x="79.8561%" y="239.50"></text></g><g><title>is_reachable_non_generic (398,134 samples, 0.23%)</title><rect x="81.5138%" y="149" width="0.2346%" height="15" fill="rgb(236,212,23)"/><text x="81.7638%" y="159.50"></text></g><g><title>reachable_non_generics (394,334 samples, 0.23%)</title><rect x="81.5161%" y="133" width="0.2323%" height="15" fill="rgb(242,79,21)"/><text x="81.7661%" y="143.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (392,754 samples, 0.23%)</title><rect x="81.5170%" y="117" width="0.2314%" height="15" fill="rgb(211,96,35)"/><text x="81.7670%" y="127.50"></text></g><g><title>exported_symbols (305,703 samples, 0.18%)</title><rect x="81.5683%" y="101" width="0.1801%" height="15" fill="rgb(253,215,40)"/><text x="81.8183%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (304,473 samples, 0.18%)</title><rect x="81.5690%" y="85" width="0.1794%" height="15" fill="rgb(211,81,21)"/><text x="81.8190%" y="95.50"></text></g><g><title>optimized_mir (1,706,181 samples, 1.01%)</title><rect x="81.7484%" y="149" width="1.0053%" height="15" fill="rgb(208,190,38)"/><text x="81.9984%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (765,787 samples, 0.45%)</title><rect x="82.3025%" y="133" width="0.4512%" height="15" fill="rgb(235,213,38)"/><text x="82.5525%" y="143.50"></text></g><g><title>resolve_instance (436,574 samples, 0.26%)</title><rect x="82.7537%" y="149" width="0.2572%" height="15" fill="rgb(237,122,38)"/><text x="83.0037%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (3,130,932 samples, 1.84%)</title><rect x="81.2909%" y="165" width="1.8448%" height="15" fill="rgb(244,218,35)"/><text x="81.5409%" y="175.50">m..</text></g><g><title>upstream_monomorphizations_for (211,132 samples, 0.12%)</title><rect x="83.0112%" y="149" width="0.1244%" height="15" fill="rgb(240,68,47)"/><text x="83.2612%" y="159.50"></text></g><g><title>upstream_monomorphizations (208,052 samples, 0.12%)</title><rect x="83.0131%" y="133" width="0.1226%" height="15" fill="rgb(210,16,53)"/><text x="83.2631%" y="143.50"></text></g><g><title>monomorphization_collector (3,173,862 samples, 1.87%)</title><rect x="81.2894%" y="181" width="1.8701%" height="15" fill="rgb(235,124,12)"/><text x="81.5394%" y="191.50">m..</text></g><g><title>assert_symbols_are_distinct (195,862 samples, 0.12%)</title><rect x="83.1613%" y="165" width="0.1154%" height="15" fill="rgb(224,169,11)"/><text x="83.4113%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (3,556,765 samples, 2.10%)</title><rect x="81.2718%" y="197" width="2.0957%" height="15" fill="rgb(250,166,2)"/><text x="81.5218%" y="207.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (352,963 samples, 0.21%)</title><rect x="83.1595%" y="181" width="0.2080%" height="15" fill="rgb(242,216,29)"/><text x="83.4095%" y="191.50"></text></g><g><title>exported_symbols (3,607,876 samples, 2.13%)</title><rect x="81.2545%" y="213" width="2.1258%" height="15" fill="rgb(230,116,27)"/><text x="81.5045%" y="223.50">e..</text></g><g><title>layout_of (192,292 samples, 0.11%)</title><rect x="83.6551%" y="197" width="0.1133%" height="15" fill="rgb(228,99,48)"/><text x="83.9051%" y="207.50"></text></g><g><title>optimized_mir (1,080,160 samples, 0.64%)</title><rect x="83.4026%" y="213" width="0.6364%" height="15" fill="rgb(253,11,6)"/><text x="83.6526%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (459,305 samples, 0.27%)</title><rect x="83.7684%" y="197" width="0.2706%" height="15" fill="rgb(247,143,39)"/><text x="84.0184%" y="207.50"></text></g><g><title>generate_crate_metadata (5,237,162 samples, 3.09%)</title><rect x="80.9723%" y="229" width="3.0858%" height="15" fill="rgb(236,97,10)"/><text x="81.2223%" y="239.50">gen..</text></g><g><title>hir_lowering (1,281,334 samples, 0.75%)</title><rect x="84.0581%" y="229" width="0.7550%" height="15" fill="rgb(233,208,19)"/><text x="84.3081%" y="239.50"></text></g><g><title>finish_ongoing_codegen (21,703,199 samples, 12.79%)</title><rect x="84.8223%" y="213" width="12.7876%" height="15" fill="rgb(216,164,2)"/><text x="85.0723%" y="223.50">finish_ongoing_code..</text></g><g><title>link_crate (1,065,240 samples, 0.63%)</title><rect x="97.6099%" y="213" width="0.6276%" height="15" fill="rgb(220,129,5)"/><text x="97.8599%" y="223.50"></text></g><g><title>link_binary (1,049,690 samples, 0.62%)</title><rect x="97.6190%" y="197" width="0.6185%" height="15" fill="rgb(242,17,10)"/><text x="97.8690%" y="207.50"></text></g><g><title>link_rlib (730,407 samples, 0.43%)</title><rect x="97.8072%" y="181" width="0.4304%" height="15" fill="rgb(242,107,0)"/><text x="98.0572%" y="191.50"></text></g><g><title>link (22,793,239 samples, 13.43%)</title><rect x="84.8131%" y="229" width="13.4299%" height="15" fill="rgb(251,28,31)"/><text x="85.0631%" y="239.50">link</text></g><g><title>parse_crate (1,556,625 samples, 0.92%)</title><rect x="98.2429%" y="229" width="0.9172%" height="15" fill="rgb(233,223,10)"/><text x="98.4929%" y="239.50"></text></g><g><title>prepare_outputs (338,993 samples, 0.20%)</title><rect x="99.1659%" y="229" width="0.1997%" height="15" fill="rgb(215,21,27)"/><text x="99.4159%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (631,576 samples, 0.37%)</title><rect x="99.3656%" y="229" width="0.3721%" height="15" fill="rgb(232,23,21)"/><text x="99.6156%" y="239.50"></text></g><g><title>all (169,720,349 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (169,720,349 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (290,812 samples, 0.17%)</title><rect x="99.8287%" y="229" width="0.1713%" height="15" fill="rgb(247,70,30)"/><text x="100.0787%" y="239.50"></text></g></svg></svg>