<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (19,884,611 samples, 6.80%)</title><rect x="0.1987%" y="197" width="6.7960%" height="15" fill="rgb(227,0,7)"/><text x="0.4487%" y="207.50">LLVM_pass..</text></g><g><title>is_copy_raw (433,656 samples, 0.15%)</title><rect x="14.5807%" y="85" width="0.1482%" height="15" fill="rgb(217,0,24)"/><text x="14.8307%" y="95.50"></text></g><g><title>evaluate_obligation (351,686 samples, 0.12%)</title><rect x="14.6087%" y="69" width="0.1202%" height="15" fill="rgb(221,193,54)"/><text x="14.8587%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,404,340 samples, 0.48%)</title><rect x="14.9621%" y="69" width="0.4800%" height="15" fill="rgb(248,212,6)"/><text x="15.2121%" y="79.50"></text></g><g><title>specialization_graph_of (347,133 samples, 0.12%)</title><rect x="15.4563%" y="69" width="0.1186%" height="15" fill="rgb(208,68,35)"/><text x="15.7063%" y="79.50"></text></g><g><title>resolve_instance (2,289,701 samples, 0.78%)</title><rect x="14.8159%" y="85" width="0.7826%" height="15" fill="rgb(232,128,0)"/><text x="15.0659%" y="95.50"></text></g><g><title>thir_body (1,297,513 samples, 0.44%)</title><rect x="15.6087%" y="85" width="0.4435%" height="15" fill="rgb(207,160,47)"/><text x="15.8587%" y="95.50"></text></g><g><title>mir_const (9,221,804 samples, 3.15%)</title><rect x="12.9065%" y="133" width="3.1517%" height="15" fill="rgb(228,23,34)"/><text x="13.1565%" y="143.50">mir..</text></g><g><title>unsafety_check_result (8,197,571 samples, 2.80%)</title><rect x="13.2566%" y="117" width="2.8017%" height="15" fill="rgb(218,30,26)"/><text x="13.5066%" y="127.50">un..</text></g><g><title>mir_built (7,368,674 samples, 2.52%)</title><rect x="13.5398%" y="101" width="2.5184%" height="15" fill="rgb(220,122,19)"/><text x="13.7898%" y="111.50">mi..</text></g><g><title>mir_const (801,790 samples, 0.27%)</title><rect x="16.1519%" y="117" width="0.2740%" height="15" fill="rgb(250,228,42)"/><text x="16.4019%" y="127.50"></text></g><g><title>unsafety_check_result (566,078 samples, 0.19%)</title><rect x="16.2324%" y="101" width="0.1935%" height="15" fill="rgb(240,193,28)"/><text x="16.4824%" y="111.50"></text></g><g><title>mir_built (475,627 samples, 0.16%)</title><rect x="16.2633%" y="85" width="0.1626%" height="15" fill="rgb(216,20,37)"/><text x="16.5133%" y="95.50"></text></g><g><title>mir_promoted (11,360,422 samples, 3.88%)</title><rect x="12.5462%" y="149" width="3.8827%" height="15" fill="rgb(206,188,39)"/><text x="12.7962%" y="159.50">mir_..</text></g><g><title>mir_const_qualif (1,084,311 samples, 0.37%)</title><rect x="16.0582%" y="133" width="0.3706%" height="15" fill="rgb(217,207,13)"/><text x="16.3082%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,780,289 samples, 0.61%)</title><rect x="16.4743%" y="149" width="0.6085%" height="15" fill="rgb(231,73,38)"/><text x="16.7243%" y="159.50"></text></g><g><title>normalize_projection_ty (1,388,943 samples, 0.47%)</title><rect x="16.6080%" y="133" width="0.4747%" height="15" fill="rgb(225,20,46)"/><text x="16.8580%" y="143.50"></text></g><g><title>MIR_borrow_checking (32,015,514 samples, 10.94%)</title><rect x="7.1171%" y="181" width="10.9420%" height="15" fill="rgb(210,31,41)"/><text x="7.3671%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (31,785,562 samples, 10.86%)</title><rect x="7.1957%" y="165" width="10.8634%" height="15" fill="rgb(221,200,47)"/><text x="7.4457%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (2,827,817 samples, 0.97%)</title><rect x="17.0926%" y="149" width="0.9665%" height="15" fill="rgb(226,26,5)"/><text x="17.3426%" y="159.50"></text></g><g><title>MIR_effect_checking (491,785 samples, 0.17%)</title><rect x="18.0591%" y="181" width="0.1681%" height="15" fill="rgb(249,33,26)"/><text x="18.3091%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (392,494 samples, 0.13%)</title><rect x="18.0930%" y="165" width="0.1341%" height="15" fill="rgb(235,183,28)"/><text x="18.3430%" y="175.50"></text></g><g><title>codegen_fn_attrs (397,003 samples, 0.14%)</title><rect x="18.3918%" y="149" width="0.1357%" height="15" fill="rgb(221,5,38)"/><text x="18.6418%" y="159.50"></text></g><g><title>check_mod_attrs (640,417 samples, 0.22%)</title><rect x="18.3087%" y="165" width="0.2189%" height="15" fill="rgb(247,18,42)"/><text x="18.5587%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (496,415 samples, 0.17%)</title><rect x="18.6061%" y="165" width="0.1697%" height="15" fill="rgb(241,131,45)"/><text x="18.8561%" y="175.50"></text></g><g><title>misc_checking_1 (1,439,434 samples, 0.49%)</title><rect x="18.3021%" y="181" width="0.4920%" height="15" fill="rgb(249,31,29)"/><text x="18.5521%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (549,215 samples, 0.19%)</title><rect x="18.7946%" y="165" width="0.1877%" height="15" fill="rgb(225,111,53)"/><text x="19.0446%" y="175.50"></text></g><g><title>check_mod_liveness (414,334 samples, 0.14%)</title><rect x="18.8407%" y="149" width="0.1416%" height="15" fill="rgb(238,160,17)"/><text x="19.0907%" y="159.50"></text></g><g><title>misc_checking_2 (1,110,391 samples, 0.38%)</title><rect x="18.7941%" y="181" width="0.3795%" height="15" fill="rgb(214,148,48)"/><text x="19.0441%" y="191.50"></text></g><g><title>match_checking (559,676 samples, 0.19%)</title><rect x="18.9823%" y="165" width="0.1913%" height="15" fill="rgb(232,36,49)"/><text x="19.2323%" y="175.50"></text></g><g><title>check_match (505,056 samples, 0.17%)</title><rect x="19.0010%" y="149" width="0.1726%" height="15" fill="rgb(209,103,24)"/><text x="19.2510%" y="159.50"></text></g><g><title>death_checking (675,616 samples, 0.23%)</title><rect x="19.2622%" y="165" width="0.2309%" height="15" fill="rgb(229,88,8)"/><text x="19.5122%" y="175.50"></text></g><g><title>crate_lints (1,098,751 samples, 0.38%)</title><rect x="19.4936%" y="149" width="0.3755%" height="15" fill="rgb(213,181,19)"/><text x="19.7436%" y="159.50"></text></g><g><title>type_of (339,544 samples, 0.12%)</title><rect x="19.7531%" y="133" width="0.1160%" height="15" fill="rgb(254,191,54)"/><text x="20.0031%" y="143.50"></text></g><g><title>lint_checking (1,604,666 samples, 0.55%)</title><rect x="19.4931%" y="165" width="0.5484%" height="15" fill="rgb(241,83,37)"/><text x="19.7431%" y="175.50"></text></g><g><title>module_lints (504,375 samples, 0.17%)</title><rect x="19.8692%" y="149" width="0.1724%" height="15" fill="rgb(233,36,39)"/><text x="20.1192%" y="159.50"></text></g><g><title>lint_mod (500,435 samples, 0.17%)</title><rect x="19.8705%" y="133" width="0.1710%" height="15" fill="rgb(226,3,54)"/><text x="20.1205%" y="143.50"></text></g><g><title>privacy_access_levels (357,333 samples, 0.12%)</title><rect x="20.0415%" y="165" width="0.1221%" height="15" fill="rgb(245,192,40)"/><text x="20.2915%" y="175.50"></text></g><g><title>privacy_checking_modules (904,379 samples, 0.31%)</title><rect x="20.1637%" y="165" width="0.3091%" height="15" fill="rgb(238,167,29)"/><text x="20.4137%" y="175.50"></text></g><g><title>check_mod_privacy (901,489 samples, 0.31%)</title><rect x="20.1647%" y="149" width="0.3081%" height="15" fill="rgb(232,182,51)"/><text x="20.4147%" y="159.50"></text></g><g><title>misc_checking_3 (3,814,948 samples, 1.30%)</title><rect x="19.1736%" y="181" width="1.3038%" height="15" fill="rgb(231,60,39)"/><text x="19.4236%" y="191.50"></text></g><g><title>impl_parent (1,032,613 samples, 0.35%)</title><rect x="21.7290%" y="117" width="0.3529%" height="15" fill="rgb(208,69,12)"/><text x="21.9790%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (462,266 samples, 0.16%)</title><rect x="21.9240%" y="101" width="0.1580%" height="15" fill="rgb(235,93,37)"/><text x="22.1740%" y="111.50"></text></g><g><title>impl_trait_ref (1,580,273 samples, 0.54%)</title><rect x="22.0820%" y="117" width="0.5401%" height="15" fill="rgb(213,116,39)"/><text x="22.3320%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,232,479 samples, 0.42%)</title><rect x="22.2008%" y="101" width="0.4212%" height="15" fill="rgb(222,207,29)"/><text x="22.4508%" y="111.50"></text></g><g><title>coherent_trait (6,443,715 samples, 2.20%)</title><rect x="20.5151%" y="149" width="2.2023%" height="15" fill="rgb(206,96,30)"/><text x="20.7651%" y="159.50">c..</text></g><g><title>specialization_graph_of (6,183,323 samples, 2.11%)</title><rect x="20.6041%" y="133" width="2.1133%" height="15" fill="rgb(218,138,4)"/><text x="20.8541%" y="143.50">s..</text></g><g><title>coherence_checking (6,529,416 samples, 2.23%)</title><rect x="20.5096%" y="165" width="2.2316%" height="15" fill="rgb(250,191,14)"/><text x="20.7596%" y="175.50">c..</text></g><g><title>associated_item (591,528 samples, 0.20%)</title><rect x="33.2061%" y="101" width="0.2022%" height="15" fill="rgb(239,60,40)"/><text x="33.4561%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (463,127 samples, 0.16%)</title><rect x="33.2500%" y="85" width="0.1583%" height="15" fill="rgb(206,27,48)"/><text x="33.5000%" y="95.50"></text></g><g><title>associated_items (814,429 samples, 0.28%)</title><rect x="33.1408%" y="117" width="0.2783%" height="15" fill="rgb(225,35,8)"/><text x="33.3908%" y="127.50"></text></g><g><title>mir_const (395,274 samples, 0.14%)</title><rect x="33.7091%" y="53" width="0.1351%" height="15" fill="rgb(250,213,24)"/><text x="33.9591%" y="63.50"></text></g><g><title>mir_const_qualif (482,345 samples, 0.16%)</title><rect x="33.6798%" y="69" width="0.1649%" height="15" fill="rgb(247,123,22)"/><text x="33.9298%" y="79.50"></text></g><g><title>mir_borrowck (840,727 samples, 0.29%)</title><rect x="33.9867%" y="37" width="0.2873%" height="15" fill="rgb(231,138,38)"/><text x="34.2367%" y="47.50"></text></g><g><title>mir_for_ctfe (1,260,294 samples, 0.43%)</title><rect x="33.8447%" y="69" width="0.4307%" height="15" fill="rgb(231,145,46)"/><text x="34.0947%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,140,410 samples, 0.39%)</title><rect x="33.8857%" y="53" width="0.3898%" height="15" fill="rgb(251,118,11)"/><text x="34.1357%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,295,034 samples, 0.78%)</title><rect x="33.4960%" y="117" width="0.7844%" height="15" fill="rgb(217,147,25)"/><text x="33.7460%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,268,834 samples, 0.78%)</title><rect x="33.5050%" y="101" width="0.7754%" height="15" fill="rgb(247,81,37)"/><text x="33.7550%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,247,434 samples, 0.77%)</title><rect x="33.5123%" y="85" width="0.7681%" height="15" fill="rgb(209,12,38)"/><text x="33.7623%" y="95.50"></text></g><g><title>generics_of (393,762 samples, 0.13%)</title><rect x="35.2451%" y="101" width="0.1346%" height="15" fill="rgb(227,1,9)"/><text x="35.4951%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (308,482 samples, 0.11%)</title><rect x="35.2742%" y="85" width="0.1054%" height="15" fill="rgb(248,47,43)"/><text x="35.5242%" y="95.50"></text></g><g><title>impl_trait_ref (463,864 samples, 0.16%)</title><rect x="35.4160%" y="101" width="0.1585%" height="15" fill="rgb(221,10,30)"/><text x="35.6660%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (385,044 samples, 0.13%)</title><rect x="35.4430%" y="85" width="0.1316%" height="15" fill="rgb(210,229,1)"/><text x="35.6930%" y="95.50"></text></g><g><title>predicates_of (348,932 samples, 0.12%)</title><rect x="35.5888%" y="101" width="0.1193%" height="15" fill="rgb(222,148,37)"/><text x="35.8388%" y="111.50"></text></g><g><title>specializes (890,978 samples, 0.30%)</title><rect x="35.7080%" y="101" width="0.3045%" height="15" fill="rgb(234,67,33)"/><text x="35.9580%" y="111.50"></text></g><g><title>param_env (525,654 samples, 0.18%)</title><rect x="35.8329%" y="85" width="0.1797%" height="15" fill="rgb(247,98,35)"/><text x="36.0829%" y="95.50"></text></g><g><title>trait_impls_of (386,443 samples, 0.13%)</title><rect x="36.0195%" y="101" width="0.1321%" height="15" fill="rgb(247,138,52)"/><text x="36.2695%" y="111.50"></text></g><g><title>evaluate_obligation (5,491,183 samples, 1.88%)</title><rect x="34.2804%" y="117" width="1.8767%" height="15" fill="rgb(213,79,30)"/><text x="34.5304%" y="127.50">e..</text></g><g><title>method_autoderef_steps (1,133,548 samples, 0.39%)</title><rect x="36.3839%" y="117" width="0.3874%" height="15" fill="rgb(246,177,23)"/><text x="36.6339%" y="127.50"></text></g><g><title>evaluate_obligation (556,355 samples, 0.19%)</title><rect x="36.5812%" y="101" width="0.1901%" height="15" fill="rgb(230,62,27)"/><text x="36.8312%" y="111.50"></text></g><g><title>param_env (589,603 samples, 0.20%)</title><rect x="36.7911%" y="117" width="0.2015%" height="15" fill="rgb(216,154,8)"/><text x="37.0411%" y="127.50"></text></g><g><title>predicates_of (310,201 samples, 0.11%)</title><rect x="36.8866%" y="101" width="0.1060%" height="15" fill="rgb(244,35,45)"/><text x="37.1366%" y="111.50"></text></g><g><title>predicates_of (368,766 samples, 0.13%)</title><rect x="37.0007%" y="117" width="0.1260%" height="15" fill="rgb(251,115,12)"/><text x="37.2507%" y="127.50"></text></g><g><title>item_bodies_checking (42,342,768 samples, 14.47%)</title><rect x="22.7609%" y="165" width="14.4715%" height="15" fill="rgb(240,54,50)"/><text x="23.0109%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,339,428 samples, 14.47%)</title><rect x="22.7621%" y="149" width="14.4704%" height="15" fill="rgb(233,84,52)"/><text x="23.0121%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (42,166,436 samples, 14.41%)</title><rect x="22.8212%" y="133" width="14.4113%" height="15" fill="rgb(207,117,47)"/><text x="23.0712%" y="143.50">typeck</text></g><g><title>item_types_checking (2,597,427 samples, 0.89%)</title><rect x="37.2325%" y="165" width="0.8877%" height="15" fill="rgb(249,43,39)"/><text x="37.4825%" y="175.50"></text></g><g><title>check_mod_item_types (2,593,637 samples, 0.89%)</title><rect x="37.2338%" y="149" width="0.8864%" height="15" fill="rgb(209,38,44)"/><text x="37.4838%" y="159.50"></text></g><g><title>generics_of (444,424 samples, 0.15%)</title><rect x="38.3499%" y="133" width="0.1519%" height="15" fill="rgb(236,212,23)"/><text x="38.5999%" y="143.50"></text></g><g><title>late_bound_vars_map (391,784 samples, 0.13%)</title><rect x="38.7978%" y="85" width="0.1339%" height="15" fill="rgb(242,79,21)"/><text x="39.0478%" y="95.50"></text></g><g><title>resolve_lifetimes (344,003 samples, 0.12%)</title><rect x="38.8141%" y="69" width="0.1176%" height="15" fill="rgb(211,96,35)"/><text x="39.0641%" y="79.50"></text></g><g><title>explicit_predicates_of (919,679 samples, 0.31%)</title><rect x="38.6232%" y="101" width="0.3143%" height="15" fill="rgb(253,215,40)"/><text x="38.8732%" y="111.50"></text></g><g><title>predicates_of (1,305,584 samples, 0.45%)</title><rect x="38.5537%" y="133" width="0.4462%" height="15" fill="rgb(211,81,21)"/><text x="38.8037%" y="143.50"></text></g><g><title>predicates_defined_on (1,227,092 samples, 0.42%)</title><rect x="38.5806%" y="117" width="0.4194%" height="15" fill="rgb(208,190,38)"/><text x="38.8306%" y="127.50"></text></g><g><title>type_collecting (2,808,448 samples, 0.96%)</title><rect x="38.1207%" y="165" width="0.9598%" height="15" fill="rgb(235,213,38)"/><text x="38.3707%" y="175.50"></text></g><g><title>collect_mod_item_types (2,800,628 samples, 0.96%)</title><rect x="38.1233%" y="149" width="0.9572%" height="15" fill="rgb(237,122,38)"/><text x="38.3733%" y="159.50"></text></g><g><title>evaluate_obligation (1,374,107 samples, 0.47%)</title><rect x="40.7774%" y="133" width="0.4696%" height="15" fill="rgb(244,218,35)"/><text x="41.0274%" y="143.50"></text></g><g><title>implied_outlives_bounds (727,286 samples, 0.25%)</title><rect x="41.2488%" y="133" width="0.2486%" height="15" fill="rgb(240,68,47)"/><text x="41.4988%" y="143.50"></text></g><g><title>param_env (579,920 samples, 0.20%)</title><rect x="41.4973%" y="133" width="0.1982%" height="15" fill="rgb(210,16,53)"/><text x="41.7473%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,803,755 samples, 2.67%)</title><rect x="39.2027%" y="149" width="2.6671%" height="15" fill="rgb(235,124,12)"/><text x="39.4527%" y="159.50">ch..</text></g><g><title>region_scope_tree (484,184 samples, 0.17%)</title><rect x="41.7043%" y="133" width="0.1655%" height="15" fill="rgb(224,169,11)"/><text x="41.9543%" y="143.50"></text></g><g><title>param_env (564,893 samples, 0.19%)</title><rect x="43.5869%" y="133" width="0.1931%" height="15" fill="rgb(250,166,2)"/><text x="43.8369%" y="143.50"></text></g><g><title>check_item_well_formed (5,811,734 samples, 1.99%)</title><rect x="41.8698%" y="149" width="1.9863%" height="15" fill="rgb(242,216,29)"/><text x="42.1198%" y="159.50">c..</text></g><g><title>analysis (108,237,484 samples, 36.99%)</title><rect x="6.9947%" y="197" width="36.9925%" height="15" fill="rgb(230,116,27)"/><text x="7.2447%" y="207.50">analysis</text></g><g><title>type_check_crate (68,787,875 samples, 23.51%)</title><rect x="20.4774%" y="181" width="23.5097%" height="15" fill="rgb(228,99,48)"/><text x="20.7274%" y="191.50">type_check_crate</text></g><g><title>wf_checking (14,345,814 samples, 4.90%)</title><rect x="39.0842%" y="165" width="4.9030%" height="15" fill="rgb(253,11,6)"/><text x="39.3342%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (383,454 samples, 0.13%)</title><rect x="43.8561%" y="149" width="0.1311%" height="15" fill="rgb(247,143,39)"/><text x="44.1061%" y="159.50"></text></g><g><title>layout_of (426,062 samples, 0.15%)</title><rect x="48.7106%" y="149" width="0.1456%" height="15" fill="rgb(236,97,10)"/><text x="48.9606%" y="159.50"></text></g><g><title>param_env (894,631 samples, 0.31%)</title><rect x="48.8562%" y="149" width="0.3058%" height="15" fill="rgb(233,208,19)"/><text x="49.1062%" y="159.50"></text></g><g><title>normalize_projection_ty (391,874 samples, 0.13%)</title><rect x="49.2489%" y="133" width="0.1339%" height="15" fill="rgb(216,164,2)"/><text x="49.4989%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (664,737 samples, 0.23%)</title><rect x="49.1620%" y="149" width="0.2272%" height="15" fill="rgb(220,129,5)"/><text x="49.4120%" y="159.50"></text></g><g><title>fn_abi_of_instance (2,703,499 samples, 0.92%)</title><rect x="48.4668%" y="165" width="0.9240%" height="15" fill="rgb(242,17,10)"/><text x="48.7168%" y="175.50"></text></g><g><title>layout_of (392,643 samples, 0.13%)</title><rect x="49.4533%" y="165" width="0.1342%" height="15" fill="rgb(242,107,0)"/><text x="49.7033%" y="175.50"></text></g><g><title>codegen_module (15,252,775 samples, 5.21%)</title><rect x="44.4081%" y="181" width="5.2130%" height="15" fill="rgb(251,28,31)"/><text x="44.6581%" y="191.50">codege..</text></g><g><title>codegen_crate (16,499,376 samples, 5.64%)</title><rect x="43.9904%" y="197" width="5.6390%" height="15" fill="rgb(233,223,10)"/><text x="44.2404%" y="207.50">codegen..</text></g><g><title>LLVM_module_codegen (88,237,921 samples, 30.16%)</title><rect x="49.7027%" y="181" width="30.1572%" height="15" fill="rgb(215,21,27)"/><text x="49.9527%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (81,844,507 samples, 27.97%)</title><rect x="51.8877%" y="165" width="27.9721%" height="15" fill="rgb(232,23,21)"/><text x="52.1377%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (95,218,353 samples, 32.54%)</title><rect x="49.6294%" y="197" width="32.5429%" height="15" fill="rgb(244,5,23)"/><text x="49.8794%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,765,981 samples, 2.31%)</title><rect x="79.8598%" y="181" width="2.3124%" height="15" fill="rgb(226,81,46)"/><text x="80.1098%" y="191.50">L..</text></g><g><title>macro_expand_crate (17,538,227 samples, 5.99%)</title><rect x="82.3349%" y="181" width="5.9941%" height="15" fill="rgb(247,70,30)"/><text x="82.5849%" y="191.50">macro_ex..</text></g><g><title>expand_crate (17,521,267 samples, 5.99%)</title><rect x="82.3407%" y="165" width="5.9883%" height="15" fill="rgb(212,68,19)"/><text x="82.5907%" y="175.50">expand_c..</text></g><g><title>late_resolve_crate (2,306,053 samples, 0.79%)</title><rect x="88.4416%" y="165" width="0.7881%" height="15" fill="rgb(240,187,13)"/><text x="88.6916%" y="175.50"></text></g><g><title>configure_and_expand (20,757,659 samples, 7.09%)</title><rect x="82.1723%" y="197" width="7.0944%" height="15" fill="rgb(223,113,26)"/><text x="82.4223%" y="207.50">configure_..</text></g><g><title>resolve_crate (2,565,576 samples, 0.88%)</title><rect x="88.3898%" y="181" width="0.8768%" height="15" fill="rgb(206,192,2)"/><text x="88.6398%" y="191.50"></text></g><g><title>early_lint_checks (407,984 samples, 0.14%)</title><rect x="89.3432%" y="197" width="0.1394%" height="15" fill="rgb(241,108,4)"/><text x="89.5932%" y="207.50"></text></g><g><title>free_global_ctxt (4,942,131 samples, 1.69%)</title><rect x="89.4827%" y="197" width="1.6891%" height="15" fill="rgb(247,173,49)"/><text x="89.7327%" y="207.50"></text></g><g><title>item_attrs (316,202 samples, 0.11%)</title><rect x="92.3070%" y="101" width="0.1081%" height="15" fill="rgb(224,114,35)"/><text x="92.5570%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (305,462 samples, 0.10%)</title><rect x="92.3107%" y="85" width="0.1044%" height="15" fill="rgb(245,159,27)"/><text x="92.5607%" y="95.50"></text></g><g><title>codegen_fn_attrs (503,756 samples, 0.17%)</title><rect x="92.2816%" y="117" width="0.1722%" height="15" fill="rgb(245,172,44)"/><text x="92.5316%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (349,873 samples, 0.12%)</title><rect x="92.7025%" y="101" width="0.1196%" height="15" fill="rgb(236,23,11)"/><text x="92.9525%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (457,574 samples, 0.16%)</title><rect x="92.8221%" y="101" width="0.1564%" height="15" fill="rgb(205,117,38)"/><text x="93.0721%" y="111.50"></text></g><g><title>optimized_mir (1,384,593 samples, 0.47%)</title><rect x="92.5084%" y="117" width="0.4732%" height="15" fill="rgb(237,72,25)"/><text x="92.7584%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (684,759 samples, 0.23%)</title><rect x="93.0435%" y="101" width="0.2340%" height="15" fill="rgb(244,70,9)"/><text x="93.2935%" y="111.50"></text></g><g><title>specialization_graph_of (656,047 samples, 0.22%)</title><rect x="93.3463%" y="101" width="0.2242%" height="15" fill="rgb(217,125,39)"/><text x="93.5963%" y="111.50"></text></g><g><title>resolve_instance (1,802,893 samples, 0.62%)</title><rect x="92.9816%" y="117" width="0.6162%" height="15" fill="rgb(235,36,10)"/><text x="93.2316%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (4,702,248 samples, 1.61%)</title><rect x="92.0700%" y="133" width="1.6071%" height="15" fill="rgb(251,123,47)"/><text x="92.3200%" y="143.50"></text></g><g><title>monomorphization_collector (4,740,939 samples, 1.62%)</title><rect x="92.0687%" y="149" width="1.6203%" height="15" fill="rgb(221,13,13)"/><text x="92.3187%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (448,564 samples, 0.15%)</title><rect x="93.6904%" y="133" width="0.1533%" height="15" fill="rgb(238,131,9)"/><text x="93.9404%" y="143.50"></text></g><g><title>symbol_name (411,484 samples, 0.14%)</title><rect x="93.7030%" y="117" width="0.1406%" height="15" fill="rgb(211,50,8)"/><text x="93.9530%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (5,444,466 samples, 1.86%)</title><rect x="92.0539%" y="165" width="1.8608%" height="15" fill="rgb(245,182,24)"/><text x="92.3039%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (660,056 samples, 0.23%)</title><rect x="93.6891%" y="149" width="0.2256%" height="15" fill="rgb(242,14,37)"/><text x="93.9391%" y="159.50"></text></g><g><title>exported_symbols (5,610,627 samples, 1.92%)</title><rect x="92.0428%" y="181" width="1.9176%" height="15" fill="rgb(246,228,12)"/><text x="92.2928%" y="191.50">e..</text></g><g><title>is_sized_raw (774,549 samples, 0.26%)</title><rect x="95.2818%" y="149" width="0.2647%" height="15" fill="rgb(213,55,15)"/><text x="95.5318%" y="159.50"></text></g><g><title>evaluate_obligation (606,786 samples, 0.21%)</title><rect x="95.3391%" y="133" width="0.2074%" height="15" fill="rgb(209,9,3)"/><text x="95.5891%" y="143.50"></text></g><g><title>layout_of (1,323,314 samples, 0.45%)</title><rect x="95.1179%" y="165" width="0.4523%" height="15" fill="rgb(230,59,30)"/><text x="95.3679%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,055,002 samples, 1.04%)</title><rect x="95.5701%" y="165" width="1.0441%" height="15" fill="rgb(209,121,21)"/><text x="95.8201%" y="175.50"></text></g><g><title>optimized_mir (7,616,064 samples, 2.60%)</title><rect x="94.0418%" y="181" width="2.6030%" height="15" fill="rgb(220,109,13)"/><text x="94.2918%" y="191.50">op..</text></g><g><title>generate_crate_metadata (16,125,053 samples, 5.51%)</title><rect x="91.1718%" y="197" width="5.5111%" height="15" fill="rgb(232,18,1)"/><text x="91.4218%" y="207.50">generat..</text></g><g><title>hir_lowering (3,704,548 samples, 1.27%)</title><rect x="96.6828%" y="197" width="1.2661%" height="15" fill="rgb(215,41,42)"/><text x="96.9328%" y="207.50"></text></g><g><title>finish_ongoing_codegen (558,025 samples, 0.19%)</title><rect x="97.9550%" y="181" width="0.1907%" height="15" fill="rgb(224,123,36)"/><text x="98.2050%" y="191.50"></text></g><g><title>link_crate (1,717,638 samples, 0.59%)</title><rect x="98.1457%" y="181" width="0.5870%" height="15" fill="rgb(240,125,3)"/><text x="98.3957%" y="191.50"></text></g><g><title>link_binary (1,678,487 samples, 0.57%)</title><rect x="98.1591%" y="165" width="0.5737%" height="15" fill="rgb(205,98,50)"/><text x="98.4091%" y="175.50"></text></g><g><title>link_rlib (1,118,091 samples, 0.38%)</title><rect x="98.3506%" y="149" width="0.3821%" height="15" fill="rgb(205,185,37)"/><text x="98.6006%" y="159.50"></text></g><g><title>link (2,302,753 samples, 0.79%)</title><rect x="97.9489%" y="197" width="0.7870%" height="15" fill="rgb(238,207,15)"/><text x="98.1989%" y="207.50"></text></g><g><title>parse_crate (1,888,709 samples, 0.65%)</title><rect x="98.7360%" y="197" width="0.6455%" height="15" fill="rgb(213,199,42)"/><text x="98.9860%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,167,842 samples, 0.40%)</title><rect x="99.4460%" y="197" width="0.3991%" height="15" fill="rgb(235,201,11)"/><text x="99.6960%" y="207.50"></text></g><g><title>all (292,593,417 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (292,593,417 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (370,134 samples, 0.13%)</title><rect x="99.8735%" y="197" width="0.1265%" height="15" fill="rgb(243,32,47)"/><text x="100.1235%" y="207.50"></text></g></svg></svg>