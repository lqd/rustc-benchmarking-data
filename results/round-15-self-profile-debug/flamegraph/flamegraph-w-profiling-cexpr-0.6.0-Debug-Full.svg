<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (292,851,080 samples, 13.59%)</title><rect x="0.0304%" y="197" width="13.5950%" height="15" fill="rgb(227,0,7)"/><text x="0.2804%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,117,391 samples, 0.14%)</title><rect x="16.9550%" y="85" width="0.1447%" height="15" fill="rgb(217,0,24)"/><text x="17.2050%" y="95.50"></text></g><g><title>is_copy_raw (2,576,525 samples, 0.12%)</title><rect x="16.9801%" y="69" width="0.1196%" height="15" fill="rgb(221,193,54)"/><text x="17.2301%" y="79.50"></text></g><g><title>evaluate_obligation (2,175,301 samples, 0.10%)</title><rect x="16.9988%" y="53" width="0.1010%" height="15" fill="rgb(248,212,6)"/><text x="17.2488%" y="63.50"></text></g><g><title>thir_body (2,655,674 samples, 0.12%)</title><rect x="17.1673%" y="85" width="0.1233%" height="15" fill="rgb(208,68,35)"/><text x="17.4173%" y="95.50"></text></g><g><title>mir_const (18,849,767 samples, 0.88%)</title><rect x="16.4220%" y="133" width="0.8751%" height="15" fill="rgb(232,128,0)"/><text x="16.6720%" y="143.50"></text></g><g><title>unsafety_check_result (16,064,247 samples, 0.75%)</title><rect x="16.5514%" y="117" width="0.7457%" height="15" fill="rgb(207,160,47)"/><text x="16.8014%" y="127.50"></text></g><g><title>mir_built (14,409,712 samples, 0.67%)</title><rect x="16.6282%" y="101" width="0.6689%" height="15" fill="rgb(228,23,34)"/><text x="16.8782%" y="111.50"></text></g><g><title>mir_promoted (20,915,163 samples, 0.97%)</title><rect x="16.3305%" y="149" width="0.9709%" height="15" fill="rgb(218,30,26)"/><text x="16.5805%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (4,526,781 samples, 0.21%)</title><rect x="17.3250%" y="149" width="0.2101%" height="15" fill="rgb(220,122,19)"/><text x="17.5750%" y="159.50"></text></g><g><title>type_op_normalize_predicate (3,485,377 samples, 0.16%)</title><rect x="17.5352%" y="149" width="0.1618%" height="15" fill="rgb(250,228,42)"/><text x="17.7852%" y="159.50"></text></g><g><title>type_op_prove_predicate (28,906,479 samples, 1.34%)</title><rect x="17.7930%" y="149" width="1.3419%" height="15" fill="rgb(240,193,28)"/><text x="18.0430%" y="159.50"></text></g><g><title>MIR_borrow_checking (118,145,136 samples, 5.48%)</title><rect x="13.6509%" y="181" width="5.4846%" height="15" fill="rgb(216,20,37)"/><text x="13.9009%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (117,601,466 samples, 5.46%)</title><rect x="13.6761%" y="165" width="5.4594%" height="15" fill="rgb(206,188,39)"/><text x="13.9261%" y="175.50">mir_bor..</text></g><g><title>misc_checking_2 (2,990,750 samples, 0.14%)</title><rect x="19.2496%" y="181" width="0.1388%" height="15" fill="rgb(217,207,13)"/><text x="19.4996%" y="191.50"></text></g><g><title>crate_lints (2,748,068 samples, 0.13%)</title><rect x="19.4435%" y="149" width="0.1276%" height="15" fill="rgb(231,73,38)"/><text x="19.6935%" y="159.50"></text></g><g><title>lint_checking (4,307,013 samples, 0.20%)</title><rect x="19.4435%" y="165" width="0.1999%" height="15" fill="rgb(225,20,46)"/><text x="19.6935%" y="175.50"></text></g><g><title>privacy_checking_modules (4,180,612 samples, 0.19%)</title><rect x="19.6673%" y="165" width="0.1941%" height="15" fill="rgb(210,31,41)"/><text x="19.9173%" y="175.50"></text></g><g><title>check_mod_privacy (4,176,252 samples, 0.19%)</title><rect x="19.6675%" y="149" width="0.1939%" height="15" fill="rgb(221,200,47)"/><text x="19.9175%" y="159.50"></text></g><g><title>misc_checking_3 (10,205,982 samples, 0.47%)</title><rect x="19.3884%" y="181" width="0.4738%" height="15" fill="rgb(226,26,5)"/><text x="19.6384%" y="191.50"></text></g><g><title>impl_parent (3,012,852 samples, 0.14%)</title><rect x="20.1594%" y="117" width="0.1399%" height="15" fill="rgb(249,33,26)"/><text x="20.4094%" y="127.50"></text></g><g><title>impl_trait_ref (6,145,884 samples, 0.29%)</title><rect x="20.2993%" y="117" width="0.2853%" height="15" fill="rgb(235,183,28)"/><text x="20.5493%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,848,228 samples, 0.23%)</title><rect x="20.3595%" y="101" width="0.2251%" height="15" fill="rgb(221,5,38)"/><text x="20.6095%" y="111.50"></text></g><g><title>coherent_trait (16,513,865 samples, 0.77%)</title><rect x="19.8704%" y="149" width="0.7666%" height="15" fill="rgb(247,18,42)"/><text x="20.1204%" y="159.50"></text></g><g><title>specialization_graph_of (15,770,708 samples, 0.73%)</title><rect x="19.9049%" y="133" width="0.7321%" height="15" fill="rgb(241,131,45)"/><text x="20.1549%" y="143.50"></text></g><g><title>coherence_checking (16,632,848 samples, 0.77%)</title><rect x="19.8688%" y="165" width="0.7721%" height="15" fill="rgb(249,31,29)"/><text x="20.1188%" y="175.50"></text></g><g><title>evaluate_obligation (4,719,717 samples, 0.22%)</title><rect x="22.3949%" y="117" width="0.2191%" height="15" fill="rgb(225,111,53)"/><text x="22.6449%" y="127.50"></text></g><g><title>evaluate_obligation (3,186,941 samples, 0.15%)</title><rect x="25.3039%" y="101" width="0.1479%" height="15" fill="rgb(238,160,17)"/><text x="25.5539%" y="111.50"></text></g><g><title>typeck (61,834,151 samples, 2.87%)</title><rect x="22.7044%" y="117" width="2.8705%" height="15" fill="rgb(214,148,48)"/><text x="22.9544%" y="127.50">ty..</text></g><g><title>item_bodies_checking (106,311,168 samples, 4.94%)</title><rect x="20.6431%" y="165" width="4.9353%" height="15" fill="rgb(232,36,49)"/><text x="20.8931%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (106,307,368 samples, 4.94%)</title><rect x="20.6433%" y="149" width="4.9351%" height="15" fill="rgb(209,103,24)"/><text x="20.8933%" y="159.50">typeck..</text></g><g><title>typeck (106,139,888 samples, 4.93%)</title><rect x="20.6510%" y="133" width="4.9273%" height="15" fill="rgb(229,88,8)"/><text x="20.9010%" y="143.50">typeck</text></g><g><title>mir_borrowck (3,267,394 samples, 0.15%)</title><rect x="25.6936%" y="101" width="0.1517%" height="15" fill="rgb(213,181,19)"/><text x="25.9436%" y="111.50"></text></g><g><title>mir_built (9,882,640 samples, 0.46%)</title><rect x="25.8543%" y="53" width="0.4588%" height="15" fill="rgb(254,191,54)"/><text x="26.1043%" y="63.50"></text></g><g><title>typeck (9,618,767 samples, 0.45%)</title><rect x="25.8666%" y="37" width="0.4465%" height="15" fill="rgb(241,83,37)"/><text x="26.1166%" y="47.50"></text></g><g><title>mir_const (11,436,406 samples, 0.53%)</title><rect x="25.8483%" y="85" width="0.5309%" height="15" fill="rgb(233,36,39)"/><text x="26.0983%" y="95.50"></text></g><g><title>unsafety_check_result (11,340,234 samples, 0.53%)</title><rect x="25.8527%" y="69" width="0.5264%" height="15" fill="rgb(226,3,54)"/><text x="26.1027%" y="79.50"></text></g><g><title>mir_promoted (11,510,217 samples, 0.53%)</title><rect x="25.8452%" y="101" width="0.5343%" height="15" fill="rgb(245,192,40)"/><text x="26.0952%" y="111.50"></text></g><g><title>item_types_checking (17,402,834 samples, 0.81%)</title><rect x="25.5783%" y="165" width="0.8079%" height="15" fill="rgb(238,167,29)"/><text x="25.8283%" y="175.50"></text></g><g><title>check_mod_item_types (17,393,864 samples, 0.81%)</title><rect x="25.5788%" y="149" width="0.8075%" height="15" fill="rgb(232,182,51)"/><text x="25.8288%" y="159.50"></text></g><g><title>type_of (15,779,989 samples, 0.73%)</title><rect x="25.6537%" y="133" width="0.7326%" height="15" fill="rgb(231,60,39)"/><text x="25.9037%" y="143.50"></text></g><g><title>mir_borrowck (15,757,029 samples, 0.73%)</title><rect x="25.6548%" y="117" width="0.7315%" height="15" fill="rgb(208,69,12)"/><text x="25.9048%" y="127.50"></text></g><g><title>type_collecting (3,409,974 samples, 0.16%)</title><rect x="26.3865%" y="165" width="0.1583%" height="15" fill="rgb(235,93,37)"/><text x="26.6365%" y="175.50"></text></g><g><title>collect_mod_item_types (3,400,754 samples, 0.16%)</title><rect x="26.3869%" y="149" width="0.1579%" height="15" fill="rgb(213,116,39)"/><text x="26.6369%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,519,147 samples, 0.16%)</title><rect x="26.5613%" y="149" width="0.1634%" height="15" fill="rgb(222,207,29)"/><text x="26.8113%" y="159.50"></text></g><g><title>check_item_well_formed (4,900,319 samples, 0.23%)</title><rect x="26.7247%" y="149" width="0.2275%" height="15" fill="rgb(206,96,30)"/><text x="26.9747%" y="159.50"></text></g><g><title>analysis (287,122,172 samples, 13.33%)</title><rect x="13.6254%" y="197" width="13.3290%" height="15" fill="rgb(218,138,4)"/><text x="13.8754%" y="207.50">analysis</text></g><g><title>type_check_crate (152,775,634 samples, 7.09%)</title><rect x="19.8622%" y="181" width="7.0923%" height="15" fill="rgb(250,191,14)"/><text x="20.1122%" y="191.50">type_check..</text></g><g><title>wf_checking (8,811,768 samples, 0.41%)</title><rect x="26.5454%" y="165" width="0.4091%" height="15" fill="rgb(239,60,40)"/><text x="26.7954%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (6,719,978 samples, 0.31%)</title><rect x="37.5520%" y="165" width="0.3120%" height="15" fill="rgb(206,27,48)"/><text x="37.8020%" y="175.50"></text></g><g><title>const_caller_location (2,872,877 samples, 0.13%)</title><rect x="37.8639%" y="165" width="0.1334%" height="15" fill="rgb(225,35,8)"/><text x="38.1139%" y="175.50"></text></g><g><title>layout_of (3,089,625 samples, 0.14%)</title><rect x="38.5752%" y="149" width="0.1434%" height="15" fill="rgb(250,213,24)"/><text x="38.8252%" y="159.50"></text></g><g><title>predicates_of (2,859,284 samples, 0.13%)</title><rect x="39.0375%" y="133" width="0.1327%" height="15" fill="rgb(247,123,22)"/><text x="39.2875%" y="143.50"></text></g><g><title>param_env (9,757,771 samples, 0.45%)</title><rect x="38.7187%" y="149" width="0.4530%" height="15" fill="rgb(231,138,38)"/><text x="38.9687%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,402,398 samples, 0.16%)</title><rect x="39.1716%" y="149" width="0.1579%" height="15" fill="rgb(231,145,46)"/><text x="39.4216%" y="159.50"></text></g><g><title>fn_abi_of_instance (28,690,579 samples, 1.33%)</title><rect x="38.0040%" y="165" width="1.3319%" height="15" fill="rgb(251,118,11)"/><text x="38.2540%" y="175.50"></text></g><g><title>layout_of (4,237,902 samples, 0.20%)</title><rect x="39.3923%" y="165" width="0.1967%" height="15" fill="rgb(217,147,25)"/><text x="39.6423%" y="175.50"></text></g><g><title>symbol_name (2,214,055 samples, 0.10%)</title><rect x="39.5902%" y="165" width="0.1028%" height="15" fill="rgb(247,81,37)"/><text x="39.8402%" y="175.50"></text></g><g><title>codegen_module (272,470,203 samples, 12.65%)</title><rect x="27.0628%" y="181" width="12.6489%" height="15" fill="rgb(209,12,38)"/><text x="27.3128%" y="191.50">codegen_module</text></g><g><title>codegen_crate (274,883,659 samples, 12.76%)</title><rect x="26.9548%" y="197" width="12.7609%" height="15" fill="rgb(227,1,9)"/><text x="27.2048%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,056,459,024 samples, 49.04%)</title><rect x="39.7273%" y="181" width="49.0439%" height="15" fill="rgb(248,47,43)"/><text x="39.9773%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,004,867,489 samples, 46.65%)</title><rect x="42.1223%" y="165" width="46.6489%" height="15" fill="rgb(221,10,30)"/><text x="42.3723%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,099,857,222 samples, 51.06%)</title><rect x="39.7157%" y="197" width="51.0586%" height="15" fill="rgb(210,229,1)"/><text x="39.9657%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (43,149,395 samples, 2.00%)</title><rect x="88.7712%" y="181" width="2.0031%" height="15" fill="rgb(222,148,37)"/><text x="89.0212%" y="191.50">L..</text></g><g><title>macro_expand_crate (16,795,539 samples, 0.78%)</title><rect x="90.7988%" y="181" width="0.7797%" height="15" fill="rgb(234,67,33)"/><text x="91.0488%" y="191.50"></text></g><g><title>expand_crate (16,779,899 samples, 0.78%)</title><rect x="90.7995%" y="165" width="0.7790%" height="15" fill="rgb(247,98,35)"/><text x="91.0495%" y="175.50"></text></g><g><title>late_resolve_crate (3,899,749 samples, 0.18%)</title><rect x="91.5971%" y="165" width="0.1810%" height="15" fill="rgb(247,138,52)"/><text x="91.8471%" y="175.50"></text></g><g><title>configure_and_expand (21,835,500 samples, 1.01%)</title><rect x="90.7743%" y="197" width="1.0137%" height="15" fill="rgb(213,79,30)"/><text x="91.0243%" y="207.50"></text></g><g><title>resolve_crate (4,410,464 samples, 0.20%)</title><rect x="91.5832%" y="181" width="0.2047%" height="15" fill="rgb(246,177,23)"/><text x="91.8332%" y="191.50"></text></g><g><title>free_global_ctxt (7,838,358 samples, 0.36%)</title><rect x="91.8403%" y="197" width="0.3639%" height="15" fill="rgb(230,62,27)"/><text x="92.0903%" y="207.50"></text></g><g><title>codegen_fn_attrs (4,035,848 samples, 0.19%)</title><rect x="92.9127%" y="117" width="0.1874%" height="15" fill="rgb(216,154,8)"/><text x="93.1627%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,451,030 samples, 0.30%)</title><rect x="93.6151%" y="101" width="0.2995%" height="15" fill="rgb(244,35,45)"/><text x="93.8651%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,701,514 samples, 0.45%)</title><rect x="93.9145%" y="101" width="0.4504%" height="15" fill="rgb(251,115,12)"/><text x="94.1645%" y="111.50"></text></g><g><title>optimized_mir (25,458,675 samples, 1.18%)</title><rect x="93.2294%" y="117" width="1.1819%" height="15" fill="rgb(240,54,50)"/><text x="93.4794%" y="127.50"></text></g><g><title>evaluate_obligation (6,224,912 samples, 0.29%)</title><rect x="95.3707%" y="85" width="0.2890%" height="15" fill="rgb(233,84,52)"/><text x="95.6207%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (22,922,118 samples, 1.06%)</title><rect x="94.6300%" y="101" width="1.0641%" height="15" fill="rgb(207,117,47)"/><text x="94.8800%" y="111.50"></text></g><g><title>specialization_graph_of (10,248,088 samples, 0.48%)</title><rect x="95.8321%" y="101" width="0.4757%" height="15" fill="rgb(249,43,39)"/><text x="96.0821%" y="111.50"></text></g><g><title>impl_trait_ref (4,433,235 samples, 0.21%)</title><rect x="96.1020%" y="85" width="0.2058%" height="15" fill="rgb(209,38,44)"/><text x="96.3520%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,298,004 samples, 0.15%)</title><rect x="96.1547%" y="69" width="0.1531%" height="15" fill="rgb(236,212,23)"/><text x="96.4047%" y="79.50"></text></g><g><title>resolve_instance (41,751,927 samples, 1.94%)</title><rect x="94.4113%" y="117" width="1.9382%" height="15" fill="rgb(242,79,21)"/><text x="94.6613%" y="127.50">r..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,160,746 samples, 0.15%)</title><rect x="96.3855%" y="117" width="0.1467%" height="15" fill="rgb(211,96,35)"/><text x="96.6355%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (91,254,936 samples, 4.24%)</title><rect x="92.3597%" y="133" width="4.2363%" height="15" fill="rgb(253,215,40)"/><text x="92.6097%" y="143.50">monom..</text></g><g><title>monomorphization_collector (91,344,627 samples, 4.24%)</title><rect x="92.3595%" y="149" width="4.2405%" height="15" fill="rgb(211,81,21)"/><text x="92.6095%" y="159.50">monom..</text></g><g><title>assert_symbols_are_distinct (7,104,711 samples, 0.33%)</title><rect x="96.6007%" y="133" width="0.3298%" height="15" fill="rgb(208,190,38)"/><text x="96.8507%" y="143.50"></text></g><g><title>symbol_name (6,346,695 samples, 0.29%)</title><rect x="96.6359%" y="117" width="0.2946%" height="15" fill="rgb(235,213,38)"/><text x="96.8859%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (101,825,752 samples, 4.73%)</title><rect x="92.3559%" y="165" width="4.7270%" height="15" fill="rgb(237,122,38)"/><text x="92.6059%" y="175.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (10,404,294 samples, 0.48%)</title><rect x="96.6000%" y="149" width="0.4830%" height="15" fill="rgb(244,218,35)"/><text x="96.8500%" y="159.50"></text></g><g><title>cgu_partitioning (3,284,453 samples, 0.15%)</title><rect x="96.9305%" y="133" width="0.1525%" height="15" fill="rgb(240,68,47)"/><text x="97.1805%" y="143.50"></text></g><g><title>exported_symbols (102,270,666 samples, 4.75%)</title><rect x="92.3418%" y="181" width="4.7477%" height="15" fill="rgb(210,16,53)"/><text x="92.5918%" y="191.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,146,422 samples, 0.19%)</title><rect x="97.3024%" y="165" width="0.1925%" height="15" fill="rgb(235,124,12)"/><text x="97.5524%" y="175.50"></text></g><g><title>optimized_mir (8,596,815 samples, 0.40%)</title><rect x="97.0976%" y="181" width="0.3991%" height="15" fill="rgb(224,169,11)"/><text x="97.3476%" y="191.50"></text></g><g><title>generate_crate_metadata (114,156,776 samples, 5.30%)</title><rect x="92.2042%" y="197" width="5.2995%" height="15" fill="rgb(250,166,2)"/><text x="92.4542%" y="207.50">genera..</text></g><g><title>hir_lowering (5,798,838 samples, 0.27%)</title><rect x="97.5037%" y="197" width="0.2692%" height="15" fill="rgb(242,216,29)"/><text x="97.7537%" y="207.50"></text></g><g><title>finish_ongoing_codegen (37,666,158 samples, 1.75%)</title><rect x="97.7736%" y="181" width="1.7486%" height="15" fill="rgb(230,116,27)"/><text x="98.0236%" y="191.50"></text></g><g><title>link_crate (4,614,666 samples, 0.21%)</title><rect x="99.5222%" y="181" width="0.2142%" height="15" fill="rgb(228,99,48)"/><text x="99.7722%" y="191.50"></text></g><g><title>link_binary (4,556,266 samples, 0.21%)</title><rect x="99.5249%" y="165" width="0.2115%" height="15" fill="rgb(253,11,6)"/><text x="99.7749%" y="175.50"></text></g><g><title>link_rlib (3,600,556 samples, 0.17%)</title><rect x="99.5693%" y="149" width="0.1671%" height="15" fill="rgb(247,143,39)"/><text x="99.8193%" y="159.50"></text></g><g><title>link (42,310,715 samples, 1.96%)</title><rect x="97.7729%" y="197" width="1.9642%" height="15" fill="rgb(236,97,10)"/><text x="98.0229%" y="207.50">l..</text></g><g><title>self_profile_alloc_query_strings (4,128,642 samples, 0.19%)</title><rect x="99.7863%" y="197" width="0.1917%" height="15" fill="rgb(233,208,19)"/><text x="100.0363%" y="207.50"></text></g><g><title>all (2,154,109,045 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,154,109,045 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>