<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,067,897,230 samples, 15.77%)</title><rect x="0.0311%" y="165" width="15.7669%" height="15" fill="rgb(227,0,7)"/><text x="0.2811%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (6,984,231 samples, 0.10%)</title><rect x="18.7553%" y="37" width="0.1031%" height="15" fill="rgb(217,0,24)"/><text x="19.0053%" y="47.50"></text></g><g><title>needs_drop_raw (10,552,050 samples, 0.16%)</title><rect x="18.7064%" y="53" width="0.1558%" height="15" fill="rgb(221,193,54)"/><text x="18.9564%" y="63.50"></text></g><g><title>resolve_instance (8,419,920 samples, 0.12%)</title><rect x="18.8627%" y="53" width="0.1243%" height="15" fill="rgb(248,212,6)"/><text x="19.1127%" y="63.50"></text></g><g><title>thir_body (10,342,379 samples, 0.15%)</title><rect x="18.9922%" y="53" width="0.1527%" height="15" fill="rgb(208,68,35)"/><text x="19.2422%" y="63.50"></text></g><g><title>mir_const (75,979,588 samples, 1.12%)</title><rect x="18.0282%" y="101" width="1.1218%" height="15" fill="rgb(232,128,0)"/><text x="18.2782%" y="111.50"></text></g><g><title>unsafety_check_result (66,430,823 samples, 0.98%)</title><rect x="18.1691%" y="85" width="0.9808%" height="15" fill="rgb(207,160,47)"/><text x="18.4191%" y="95.50"></text></g><g><title>mir_built (58,432,814 samples, 0.86%)</title><rect x="18.2872%" y="69" width="0.8627%" height="15" fill="rgb(228,23,34)"/><text x="18.5372%" y="79.50"></text></g><g><title>mir_promoted (90,164,174 samples, 1.33%)</title><rect x="17.8977%" y="117" width="1.3312%" height="15" fill="rgb(218,30,26)"/><text x="18.1477%" y="127.50"></text></g><g><title>type_op_prove_predicate (32,657,801 samples, 0.48%)</title><rect x="19.4274%" y="117" width="0.4822%" height="15" fill="rgb(220,122,19)"/><text x="19.6774%" y="127.50"></text></g><g><title>MIR_borrow_checking (276,409,005 samples, 4.08%)</title><rect x="15.8291%" y="149" width="4.0810%" height="15" fill="rgb(250,228,42)"/><text x="16.0791%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (274,832,702 samples, 4.06%)</title><rect x="15.8524%" y="133" width="4.0577%" height="15" fill="rgb(240,193,28)"/><text x="16.1024%" y="143.50">mir_..</text></g><g><title>misc_checking_1 (9,404,645 samples, 0.14%)</title><rect x="19.9647%" y="149" width="0.1389%" height="15" fill="rgb(216,20,37)"/><text x="20.2147%" y="159.50"></text></g><g><title>misc_checking_2 (11,154,024 samples, 0.16%)</title><rect x="20.1035%" y="149" width="0.1647%" height="15" fill="rgb(206,188,39)"/><text x="20.3535%" y="159.50"></text></g><g><title>crate_lints (12,788,950 samples, 0.19%)</title><rect x="20.3604%" y="117" width="0.1888%" height="15" fill="rgb(217,207,13)"/><text x="20.6104%" y="127.50"></text></g><g><title>lint_checking (18,525,618 samples, 0.27%)</title><rect x="20.3604%" y="133" width="0.2735%" height="15" fill="rgb(231,73,38)"/><text x="20.6104%" y="143.50"></text></g><g><title>privacy_checking_modules (10,132,733 samples, 0.15%)</title><rect x="20.6906%" y="133" width="0.1496%" height="15" fill="rgb(225,20,46)"/><text x="20.9406%" y="143.50"></text></g><g><title>check_mod_privacy (10,099,983 samples, 0.15%)</title><rect x="20.6911%" y="117" width="0.1491%" height="15" fill="rgb(210,31,41)"/><text x="20.9411%" y="127.50"></text></g><g><title>misc_checking_3 (38,843,405 samples, 0.57%)</title><rect x="20.2682%" y="149" width="0.5735%" height="15" fill="rgb(221,200,47)"/><text x="20.5182%" y="159.50"></text></g><g><title>impl_trait_ref (9,086,875 samples, 0.13%)</title><rect x="21.0509%" y="85" width="0.1342%" height="15" fill="rgb(226,26,5)"/><text x="21.3009%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,961,184 samples, 0.10%)</title><rect x="21.0823%" y="69" width="0.1028%" height="15" fill="rgb(249,33,26)"/><text x="21.3323%" y="79.50"></text></g><g><title>coherent_trait (24,812,802 samples, 0.37%)</title><rect x="20.8535%" y="117" width="0.3663%" height="15" fill="rgb(235,183,28)"/><text x="21.1035%" y="127.50"></text></g><g><title>specialization_graph_of (24,152,715 samples, 0.36%)</title><rect x="20.8633%" y="101" width="0.3566%" height="15" fill="rgb(221,5,38)"/><text x="21.1133%" y="111.50"></text></g><g><title>coherence_checking (25,366,677 samples, 0.37%)</title><rect x="20.8528%" y="133" width="0.3745%" height="15" fill="rgb(247,18,42)"/><text x="21.1028%" y="143.50"></text></g><g><title>evaluate_obligation (13,598,150 samples, 0.20%)</title><rect x="23.6452%" y="85" width="0.2008%" height="15" fill="rgb(241,131,45)"/><text x="23.8952%" y="95.50"></text></g><g><title>evaluate_obligation (28,864,970 samples, 0.43%)</title><rect x="25.0864%" y="69" width="0.4262%" height="15" fill="rgb(249,31,29)"/><text x="25.3364%" y="79.50"></text></g><g><title>typeck (114,521,069 samples, 1.69%)</title><rect x="23.9521%" y="85" width="1.6908%" height="15" fill="rgb(225,111,53)"/><text x="24.2021%" y="95.50"></text></g><g><title>item_bodies_checking (299,020,805 samples, 4.41%)</title><rect x="21.2324%" y="133" width="4.4149%" height="15" fill="rgb(238,160,17)"/><text x="21.4824%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (299,016,465 samples, 4.41%)</title><rect x="21.2324%" y="117" width="4.4148%" height="15" fill="rgb(214,148,48)"/><text x="21.4824%" y="127.50">typec..</text></g><g><title>typeck (298,039,047 samples, 4.40%)</title><rect x="21.2469%" y="101" width="4.4004%" height="15" fill="rgb(232,36,49)"/><text x="21.4969%" y="111.50">typeck</text></g><g><title>type_of (11,026,253 samples, 0.16%)</title><rect x="25.8302%" y="101" width="0.1628%" height="15" fill="rgb(209,103,24)"/><text x="26.0802%" y="111.50"></text></g><g><title>mir_borrowck (10,904,231 samples, 0.16%)</title><rect x="25.8320%" y="85" width="0.1610%" height="15" fill="rgb(229,88,8)"/><text x="26.0820%" y="95.50"></text></g><g><title>item_types_checking (27,502,059 samples, 0.41%)</title><rect x="25.6472%" y="133" width="0.4061%" height="15" fill="rgb(213,181,19)"/><text x="25.8972%" y="143.50"></text></g><g><title>check_mod_item_types (27,457,769 samples, 0.41%)</title><rect x="25.6479%" y="117" width="0.4054%" height="15" fill="rgb(254,191,54)"/><text x="25.8979%" y="127.50"></text></g><g><title>type_collecting (19,124,274 samples, 0.28%)</title><rect x="26.0537%" y="133" width="0.2824%" height="15" fill="rgb(241,83,37)"/><text x="26.3037%" y="143.50"></text></g><g><title>collect_mod_item_types (19,067,351 samples, 0.28%)</title><rect x="26.0545%" y="117" width="0.2815%" height="15" fill="rgb(233,36,39)"/><text x="26.3045%" y="127.50"></text></g><g><title>check_impl_item_well_formed (31,003,960 samples, 0.46%)</title><rect x="26.3712%" y="117" width="0.4578%" height="15" fill="rgb(226,3,54)"/><text x="26.6212%" y="127.50"></text></g><g><title>check_item_well_formed (21,566,642 samples, 0.32%)</title><rect x="26.8290%" y="117" width="0.3184%" height="15" fill="rgb(245,192,40)"/><text x="27.0790%" y="127.50"></text></g><g><title>analysis (774,202,149 samples, 11.43%)</title><rect x="15.7979%" y="165" width="11.4306%" height="15" fill="rgb(238,167,29)"/><text x="16.0479%" y="175.50">analysis</text></g><g><title>type_check_crate (432,584,801 samples, 6.39%)</title><rect x="20.8417%" y="149" width="6.3869%" height="15" fill="rgb(232,182,51)"/><text x="21.0917%" y="159.50">type_che..</text></g><g><title>wf_checking (60,383,714 samples, 0.89%)</title><rect x="26.3370%" y="133" width="0.8915%" height="15" fill="rgb(231,60,39)"/><text x="26.5870%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (27,025,239 samples, 0.40%)</title><rect x="39.2464%" y="133" width="0.3990%" height="15" fill="rgb(208,69,12)"/><text x="39.4964%" y="143.50"></text></g><g><title>const_caller_location (7,742,117 samples, 0.11%)</title><rect x="39.6454%" y="133" width="0.1143%" height="15" fill="rgb(235,93,37)"/><text x="39.8954%" y="143.50"></text></g><g><title>layout_of (10,699,207 samples, 0.16%)</title><rect x="40.4193%" y="117" width="0.1580%" height="15" fill="rgb(213,116,39)"/><text x="40.6693%" y="127.50"></text></g><g><title>predicates_of (7,520,031 samples, 0.11%)</title><rect x="40.8142%" y="101" width="0.1110%" height="15" fill="rgb(222,207,29)"/><text x="41.0642%" y="111.50"></text></g><g><title>param_env (23,597,621 samples, 0.35%)</title><rect x="40.5772%" y="117" width="0.3484%" height="15" fill="rgb(206,96,30)"/><text x="40.8272%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (7,633,469 samples, 0.11%)</title><rect x="40.9256%" y="117" width="0.1127%" height="15" fill="rgb(218,138,4)"/><text x="41.1756%" y="127.50"></text></g><g><title>fn_abi_of_instance (86,517,855 samples, 1.28%)</title><rect x="39.7648%" y="133" width="1.2774%" height="15" fill="rgb(250,191,14)"/><text x="40.0148%" y="143.50"></text></g><g><title>layout_of (15,583,543 samples, 0.23%)</title><rect x="41.1195%" y="133" width="0.2301%" height="15" fill="rgb(239,60,40)"/><text x="41.3695%" y="143.50"></text></g><g><title>codegen_module (959,077,299 samples, 14.16%)</title><rect x="27.2982%" y="149" width="14.1602%" height="15" fill="rgb(206,27,48)"/><text x="27.5482%" y="159.50">codegen_module</text></g><g><title>codegen_crate (963,947,425 samples, 14.23%)</title><rect x="27.2286%" y="165" width="14.2321%" height="15" fill="rgb(225,35,8)"/><text x="27.4786%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,996,615,713 samples, 44.24%)</title><rect x="41.4656%" y="149" width="44.2432%" height="15" fill="rgb(250,213,24)"/><text x="41.7156%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,786,404,283 samples, 41.14%)</title><rect x="44.5692%" y="133" width="41.1396%" height="15" fill="rgb(247,123,22)"/><text x="44.8192%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (3,259,180,118 samples, 48.12%)</title><rect x="41.4607%" y="165" width="48.1198%" height="15" fill="rgb(231,138,38)"/><text x="41.7107%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (262,238,934 samples, 3.87%)</title><rect x="85.7088%" y="149" width="3.8718%" height="15" fill="rgb(231,145,46)"/><text x="85.9588%" y="159.50">LLVM..</text></g><g><title>metadata_register_crate (13,516,235 samples, 0.20%)</title><rect x="90.9965%" y="117" width="0.1996%" height="15" fill="rgb(251,118,11)"/><text x="91.2465%" y="127.50"></text></g><g><title>metadata_register_crate (7,815,721 samples, 0.12%)</title><rect x="91.0807%" y="101" width="0.1154%" height="15" fill="rgb(217,147,25)"/><text x="91.3307%" y="111.50"></text></g><g><title>macro_expand_crate (108,934,656 samples, 1.61%)</title><rect x="89.6095%" y="149" width="1.6084%" height="15" fill="rgb(247,81,37)"/><text x="89.8595%" y="159.50"></text></g><g><title>expand_crate (108,920,146 samples, 1.61%)</title><rect x="89.6097%" y="133" width="1.6081%" height="15" fill="rgb(209,12,38)"/><text x="89.8597%" y="143.50"></text></g><g><title>late_resolve_crate (13,161,274 samples, 0.19%)</title><rect x="91.2384%" y="133" width="0.1943%" height="15" fill="rgb(227,1,9)"/><text x="91.4884%" y="143.50"></text></g><g><title>configure_and_expand (127,033,770 samples, 1.88%)</title><rect x="89.5806%" y="165" width="1.8756%" height="15" fill="rgb(248,47,43)"/><text x="89.8306%" y="175.50">c..</text></g><g><title>resolve_crate (16,048,193 samples, 0.24%)</title><rect x="91.2192%" y="149" width="0.2369%" height="15" fill="rgb(221,10,30)"/><text x="91.4692%" y="159.50"></text></g><g><title>free_global_ctxt (36,618,292 samples, 0.54%)</title><rect x="91.5467%" y="165" width="0.5406%" height="15" fill="rgb(210,229,1)"/><text x="91.7967%" y="175.50"></text></g><g><title>codegen_fn_attrs (10,010,861 samples, 0.15%)</title><rect x="92.9672%" y="85" width="0.1478%" height="15" fill="rgb(222,148,37)"/><text x="93.2172%" y="95.50"></text></g><g><title>mir_shims (10,525,533 samples, 0.16%)</title><rect x="93.1862%" y="85" width="0.1554%" height="15" fill="rgb(234,67,33)"/><text x="93.4362%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (18,935,564 samples, 0.28%)</title><rect x="93.6535%" y="69" width="0.2796%" height="15" fill="rgb(247,98,35)"/><text x="93.9035%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (20,737,436 samples, 0.31%)</title><rect x="93.9331%" y="69" width="0.3062%" height="15" fill="rgb(247,138,52)"/><text x="94.1831%" y="79.50"></text></g><g><title>optimized_mir (63,803,304 samples, 0.94%)</title><rect x="93.3416%" y="85" width="0.9420%" height="15" fill="rgb(213,79,30)"/><text x="93.5916%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (41,013,355 samples, 0.61%)</title><rect x="94.5068%" y="69" width="0.6055%" height="15" fill="rgb(246,177,23)"/><text x="94.7568%" y="79.50"></text></g><g><title>needs_drop_raw (7,856,117 samples, 0.12%)</title><rect x="95.1641%" y="69" width="0.1160%" height="15" fill="rgb(230,62,27)"/><text x="95.4141%" y="79.50"></text></g><g><title>resolve_instance (75,974,397 samples, 1.12%)</title><rect x="94.2836%" y="85" width="1.1217%" height="15" fill="rgb(216,154,8)"/><text x="94.5336%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,717,837 samples, 0.11%)</title><rect x="95.4785%" y="85" width="0.1139%" height="15" fill="rgb(244,35,45)"/><text x="95.7285%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (229,369,648 samples, 3.39%)</title><rect x="92.3366%" y="101" width="3.3865%" height="15" fill="rgb(251,115,12)"/><text x="92.5866%" y="111.50">mon..</text></g><g><title>monomorphization_collector (230,405,889 samples, 3.40%)</title><rect x="92.3365%" y="117" width="3.4018%" height="15" fill="rgb(240,54,50)"/><text x="92.5865%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (32,001,424 samples, 0.47%)</title><rect x="95.7385%" y="101" width="0.4725%" height="15" fill="rgb(233,84,52)"/><text x="95.9885%" y="111.50"></text></g><g><title>symbol_name (27,890,028 samples, 0.41%)</title><rect x="95.7992%" y="85" width="0.4118%" height="15" fill="rgb(207,117,47)"/><text x="96.0492%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (275,935,421 samples, 4.07%)</title><rect x="92.3339%" y="133" width="4.0740%" height="15" fill="rgb(249,43,39)"/><text x="92.5839%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (45,350,130 samples, 0.67%)</title><rect x="95.7383%" y="117" width="0.6696%" height="15" fill="rgb(209,38,44)"/><text x="95.9883%" y="127.50"></text></g><g><title>cgu_partitioning (13,341,436 samples, 0.20%)</title><rect x="96.2109%" y="101" width="0.1970%" height="15" fill="rgb(236,212,23)"/><text x="96.4609%" y="111.50"></text></g><g><title>exported_symbols (280,505,097 samples, 4.14%)</title><rect x="92.3083%" y="149" width="4.1415%" height="15" fill="rgb(242,79,21)"/><text x="92.5583%" y="159.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (27,159,015 samples, 0.40%)</title><rect x="96.8407%" y="133" width="0.4010%" height="15" fill="rgb(211,96,35)"/><text x="97.0907%" y="143.50"></text></g><g><title>optimized_mir (53,232,650 samples, 0.79%)</title><rect x="96.4616%" y="149" width="0.7859%" height="15" fill="rgb(253,215,40)"/><text x="96.7116%" y="159.50"></text></g><g><title>generate_crate_metadata (350,287,396 samples, 5.17%)</title><rect x="92.0873%" y="165" width="5.1718%" height="15" fill="rgb(211,81,21)"/><text x="92.3373%" y="175.50">genera..</text></g><g><title>hir_lowering (27,804,012 samples, 0.41%)</title><rect x="97.2591%" y="165" width="0.4105%" height="15" fill="rgb(208,190,38)"/><text x="97.5091%" y="175.50"></text></g><g><title>finish_ongoing_codegen (122,744,696 samples, 1.81%)</title><rect x="97.6699%" y="149" width="1.8123%" height="15" fill="rgb(235,213,38)"/><text x="97.9199%" y="159.50">f..</text></g><g><title>link_crate (16,813,781 samples, 0.25%)</title><rect x="99.4822%" y="149" width="0.2482%" height="15" fill="rgb(237,122,38)"/><text x="99.7322%" y="159.50"></text></g><g><title>link_binary (16,475,638 samples, 0.24%)</title><rect x="99.4872%" y="133" width="0.2433%" height="15" fill="rgb(244,218,35)"/><text x="99.7372%" y="143.50"></text></g><g><title>link_rlib (14,043,503 samples, 0.21%)</title><rect x="99.5231%" y="117" width="0.2073%" height="15" fill="rgb(240,68,47)"/><text x="99.7731%" y="127.50"></text></g><g><title>link (139,595,537 samples, 2.06%)</title><rect x="97.6696%" y="165" width="2.0610%" height="15" fill="rgb(210,16,53)"/><text x="97.9196%" y="175.50">l..</text></g><g><title>self_profile_alloc_query_strings (16,021,263 samples, 0.24%)</title><rect x="99.7416%" y="165" width="0.2365%" height="15" fill="rgb(235,124,12)"/><text x="99.9916%" y="175.50"></text></g><g><title>all (6,773,049,957 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (6,773,049,957 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>