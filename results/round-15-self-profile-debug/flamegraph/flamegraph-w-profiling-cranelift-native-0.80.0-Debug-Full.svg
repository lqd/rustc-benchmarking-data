<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,169,373 samples, 13.13%)</title><rect x="0.2804%" y="229" width="13.1326%" height="15" fill="rgb(227,0,7)"/><text x="0.5304%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (363,794 samples, 0.22%)</title><rect x="14.8596%" y="117" width="0.2155%" height="15" fill="rgb(217,0,24)"/><text x="15.1096%" y="127.50"></text></g><g><title>is_copy_raw (206,262 samples, 0.12%)</title><rect x="14.9529%" y="101" width="0.1222%" height="15" fill="rgb(221,193,54)"/><text x="15.2029%" y="111.50"></text></g><g><title>evaluate_obligation (190,672 samples, 0.11%)</title><rect x="14.9621%" y="85" width="0.1129%" height="15" fill="rgb(248,212,6)"/><text x="15.2121%" y="95.50"></text></g><g><title>mir_const (1,293,762 samples, 0.77%)</title><rect x="14.4421%" y="165" width="0.7664%" height="15" fill="rgb(208,68,35)"/><text x="14.6921%" y="175.50"></text></g><g><title>unsafety_check_result (1,104,090 samples, 0.65%)</title><rect x="14.5545%" y="149" width="0.6540%" height="15" fill="rgb(232,128,0)"/><text x="14.8045%" y="159.50"></text></g><g><title>mir_built (976,200 samples, 0.58%)</title><rect x="14.6302%" y="133" width="0.5783%" height="15" fill="rgb(207,160,47)"/><text x="14.8802%" y="143.50"></text></g><g><title>mir_promoted (1,474,086 samples, 0.87%)</title><rect x="14.3565%" y="181" width="0.8732%" height="15" fill="rgb(228,23,34)"/><text x="14.6065%" y="191.50"></text></g><g><title>MIR_borrow_checking (3,242,572 samples, 1.92%)</title><rect x="13.4686%" y="213" width="1.9208%" height="15" fill="rgb(218,30,26)"/><text x="13.7186%" y="223.50">M..</text></g><g><title>mir_borrowck (3,235,442 samples, 1.92%)</title><rect x="13.4728%" y="197" width="1.9166%" height="15" fill="rgb(220,122,19)"/><text x="13.7228%" y="207.50">m..</text></g><g><title>type_op_prove_predicate (190,993 samples, 0.11%)</title><rect x="15.2763%" y="181" width="0.1131%" height="15" fill="rgb(250,228,42)"/><text x="15.5263%" y="191.50"></text></g><g><title>misc_checking_1 (335,973 samples, 0.20%)</title><rect x="15.4831%" y="213" width="0.1990%" height="15" fill="rgb(240,193,28)"/><text x="15.7331%" y="223.50"></text></g><g><title>misc_checking_2 (182,892 samples, 0.11%)</title><rect x="15.6821%" y="213" width="0.1083%" height="15" fill="rgb(216,20,37)"/><text x="15.9321%" y="223.50"></text></g><g><title>crate_lints (211,192 samples, 0.13%)</title><rect x="15.8283%" y="181" width="0.1251%" height="15" fill="rgb(206,188,39)"/><text x="16.0783%" y="191.50"></text></g><g><title>lint_checking (270,213 samples, 0.16%)</title><rect x="15.8276%" y="197" width="0.1601%" height="15" fill="rgb(217,207,13)"/><text x="16.0776%" y="207.50"></text></g><g><title>misc_checking_3 (471,395 samples, 0.28%)</title><rect x="15.7904%" y="213" width="0.2792%" height="15" fill="rgb(231,73,38)"/><text x="16.0404%" y="223.50"></text></g><g><title>impl_trait_ref (363,405 samples, 0.22%)</title><rect x="16.3377%" y="53" width="0.2153%" height="15" fill="rgb(225,20,46)"/><text x="16.5877%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (340,605 samples, 0.20%)</title><rect x="16.3512%" y="37" width="0.2018%" height="15" fill="rgb(210,31,41)"/><text x="16.6012%" y="47.50"></text></g><g><title>coherent_trait (605,847 samples, 0.36%)</title><rect x="16.2135%" y="85" width="0.3589%" height="15" fill="rgb(221,200,47)"/><text x="16.4635%" y="95.50"></text></g><g><title>specialization_graph_of (603,147 samples, 0.36%)</title><rect x="16.2151%" y="69" width="0.3573%" height="15" fill="rgb(226,26,5)"/><text x="16.4651%" y="79.50"></text></g><g><title>adt_destructor (613,367 samples, 0.36%)</title><rect x="16.2104%" y="117" width="0.3633%" height="15" fill="rgb(249,33,26)"/><text x="16.4604%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (612,237 samples, 0.36%)</title><rect x="16.2111%" y="101" width="0.3627%" height="15" fill="rgb(235,183,28)"/><text x="16.4611%" y="111.50"></text></g><g><title>adt_dtorck_constraint (279,312 samples, 0.17%)</title><rect x="16.6143%" y="101" width="0.1655%" height="15" fill="rgb(221,5,38)"/><text x="16.8643%" y="111.50"></text></g><g><title>adt_dtorck_constraint (378,844 samples, 0.22%)</title><rect x="16.5737%" y="117" width="0.2244%" height="15" fill="rgb(247,18,42)"/><text x="16.8237%" y="127.50"></text></g><g><title>dropck_outlives (1,080,941 samples, 0.64%)</title><rect x="16.1612%" y="149" width="0.6403%" height="15" fill="rgb(241,131,45)"/><text x="16.4112%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,057,191 samples, 0.63%)</title><rect x="16.1753%" y="133" width="0.6263%" height="15" fill="rgb(249,31,29)"/><text x="16.4253%" y="143.50"></text></g><g><title>evaluate_obligation (530,644 samples, 0.31%)</title><rect x="18.4160%" y="133" width="0.3143%" height="15" fill="rgb(225,111,53)"/><text x="18.6660%" y="143.50"></text></g><g><title>trait_impls_of (338,873 samples, 0.20%)</title><rect x="18.5296%" y="117" width="0.2007%" height="15" fill="rgb(238,160,17)"/><text x="18.7796%" y="127.50"></text></g><g><title>is_copy_raw (207,202 samples, 0.12%)</title><rect x="18.8469%" y="133" width="0.1227%" height="15" fill="rgb(214,148,48)"/><text x="19.0969%" y="143.50"></text></g><g><title>evaluate_obligation (201,192 samples, 0.12%)</title><rect x="18.8505%" y="117" width="0.1192%" height="15" fill="rgb(232,36,49)"/><text x="19.1005%" y="127.50"></text></g><g><title>trait_impls_of (175,052 samples, 0.10%)</title><rect x="18.8659%" y="101" width="0.1037%" height="15" fill="rgb(209,103,24)"/><text x="19.1159%" y="111.50"></text></g><g><title>predicates_of (191,162 samples, 0.11%)</title><rect x="19.0992%" y="133" width="0.1132%" height="15" fill="rgb(229,88,8)"/><text x="19.3492%" y="143.50"></text></g><g><title>typeck (4,183,702 samples, 2.48%)</title><rect x="16.8214%" y="149" width="2.4783%" height="15" fill="rgb(213,181,19)"/><text x="17.0714%" y="159.50">ty..</text></g><g><title>item_bodies_checking (5,433,735 samples, 3.22%)</title><rect x="16.0868%" y="197" width="3.2188%" height="15" fill="rgb(254,191,54)"/><text x="16.3368%" y="207.50">ite..</text></g><g><title>typeck_item_bodies (5,432,315 samples, 3.22%)</title><rect x="16.0877%" y="181" width="3.2180%" height="15" fill="rgb(241,83,37)"/><text x="16.3377%" y="191.50">typ..</text></g><g><title>typeck (5,428,955 samples, 3.22%)</title><rect x="16.0897%" y="165" width="3.2160%" height="15" fill="rgb(233,36,39)"/><text x="16.3397%" y="175.50">typ..</text></g><g><title>item_types_checking (188,142 samples, 0.11%)</title><rect x="19.3057%" y="197" width="0.1115%" height="15" fill="rgb(226,3,54)"/><text x="19.5557%" y="207.50"></text></g><g><title>check_mod_item_types (186,812 samples, 0.11%)</title><rect x="19.3064%" y="181" width="0.1107%" height="15" fill="rgb(245,192,40)"/><text x="19.5564%" y="191.50"></text></g><g><title>typeck (184,122 samples, 0.11%)</title><rect x="19.3080%" y="165" width="0.1091%" height="15" fill="rgb(238,167,29)"/><text x="19.5580%" y="175.50"></text></g><g><title>type_collecting (235,402 samples, 0.14%)</title><rect x="19.4176%" y="197" width="0.1394%" height="15" fill="rgb(232,182,51)"/><text x="19.6676%" y="207.50"></text></g><g><title>collect_mod_item_types (229,442 samples, 0.14%)</title><rect x="19.4211%" y="181" width="0.1359%" height="15" fill="rgb(231,60,39)"/><text x="19.6711%" y="191.50"></text></g><g><title>analysis (10,971,671 samples, 6.50%)</title><rect x="13.4130%" y="229" width="6.4993%" height="15" fill="rgb(208,69,12)"/><text x="13.6630%" y="239.50">analysis</text></g><g><title>type_check_crate (6,486,896 samples, 3.84%)</title><rect x="16.0697%" y="213" width="3.8427%" height="15" fill="rgb(235,93,37)"/><text x="16.3197%" y="223.50">type..</text></g><g><title>wf_checking (599,356 samples, 0.36%)</title><rect x="19.5573%" y="197" width="0.3550%" height="15" fill="rgb(213,116,39)"/><text x="19.8073%" y="207.50"></text></g><g><title>check_item_well_formed (580,436 samples, 0.34%)</title><rect x="19.5685%" y="181" width="0.3438%" height="15" fill="rgb(222,207,29)"/><text x="19.8185%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (198,351 samples, 0.12%)</title><rect x="27.9067%" y="197" width="0.1175%" height="15" fill="rgb(206,96,30)"/><text x="28.1567%" y="207.50"></text></g><g><title>const_caller_location (203,234 samples, 0.12%)</title><rect x="28.0242%" y="197" width="0.1204%" height="15" fill="rgb(218,138,4)"/><text x="28.2742%" y="207.50"></text></g><g><title>layout_of (218,821 samples, 0.13%)</title><rect x="28.7043%" y="165" width="0.1296%" height="15" fill="rgb(250,191,14)"/><text x="28.9543%" y="175.50"></text></g><g><title>layout_of (915,577 samples, 0.54%)</title><rect x="28.3972%" y="181" width="0.5424%" height="15" fill="rgb(239,60,40)"/><text x="28.6472%" y="191.50"></text></g><g><title>param_env (474,178 samples, 0.28%)</title><rect x="28.9396%" y="181" width="0.2809%" height="15" fill="rgb(206,27,48)"/><text x="29.1896%" y="191.50"></text></g><g><title>fn_abi_of_instance (1,891,269 samples, 1.12%)</title><rect x="28.1491%" y="197" width="1.1203%" height="15" fill="rgb(225,35,8)"/><text x="28.3991%" y="207.50"></text></g><g><title>layout_of (317,064 samples, 0.19%)</title><rect x="29.3042%" y="197" width="0.1878%" height="15" fill="rgb(250,213,24)"/><text x="29.5542%" y="207.50"></text></g><g><title>symbol_name (236,790 samples, 0.14%)</title><rect x="29.5030%" y="197" width="0.1403%" height="15" fill="rgb(247,123,22)"/><text x="29.7530%" y="207.50"></text></g><g><title>codegen_module (14,997,188 samples, 8.88%)</title><rect x="20.7676%" y="213" width="8.8840%" height="15" fill="rgb(231,138,38)"/><text x="21.0176%" y="223.50">codegen_module</text></g><g><title>codegen_crate (16,522,135 samples, 9.79%)</title><rect x="19.9162%" y="229" width="9.7873%" height="15" fill="rgb(231,145,46)"/><text x="20.1662%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (73,763,194 samples, 43.70%)</title><rect x="29.7665%" y="213" width="43.6955%" height="15" fill="rgb(251,118,11)"/><text x="30.0165%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (70,507,563 samples, 41.77%)</title><rect x="31.6950%" y="197" width="41.7670%" height="15" fill="rgb(217,147,25)"/><text x="31.9450%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (76,117,278 samples, 45.09%)</title><rect x="29.7035%" y="229" width="45.0900%" height="15" fill="rgb(247,81,37)"/><text x="29.9535%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,247,813 samples, 1.33%)</title><rect x="73.4620%" y="213" width="1.3315%" height="15" fill="rgb(209,12,38)"/><text x="73.7120%" y="223.50"></text></g><g><title>metadata_load_macro (199,741 samples, 0.12%)</title><rect x="78.2446%" y="181" width="0.1183%" height="15" fill="rgb(227,1,9)"/><text x="78.4946%" y="191.50"></text></g><g><title>macro_expand_crate (7,626,567 samples, 4.52%)</title><rect x="74.9297%" y="213" width="4.5178%" height="15" fill="rgb(248,47,43)"/><text x="75.1797%" y="223.50">macro..</text></g><g><title>expand_crate (7,618,537 samples, 4.51%)</title><rect x="74.9345%" y="197" width="4.5130%" height="15" fill="rgb(221,10,30)"/><text x="75.1845%" y="207.50">expan..</text></g><g><title>metadata_register_crate (1,830,988 samples, 1.08%)</title><rect x="78.3629%" y="181" width="1.0846%" height="15" fill="rgb(210,229,1)"/><text x="78.6129%" y="191.50"></text></g><g><title>metadata_register_crate (721,408 samples, 0.43%)</title><rect x="79.0202%" y="165" width="0.4273%" height="15" fill="rgb(222,148,37)"/><text x="79.2702%" y="175.50"></text></g><g><title>late_resolve_crate (384,504 samples, 0.23%)</title><rect x="79.6002%" y="197" width="0.2278%" height="15" fill="rgb(234,67,33)"/><text x="79.8502%" y="207.50"></text></g><g><title>configure_and_expand (8,517,445 samples, 5.05%)</title><rect x="74.7935%" y="229" width="5.0455%" height="15" fill="rgb(247,98,35)"/><text x="75.0435%" y="239.50">config..</text></g><g><title>resolve_crate (573,366 samples, 0.34%)</title><rect x="79.4994%" y="213" width="0.3396%" height="15" fill="rgb(247,138,52)"/><text x="79.7494%" y="223.50"></text></g><g><title>free_global_ctxt (6,119,492 samples, 3.63%)</title><rect x="79.9262%" y="229" width="3.6250%" height="15" fill="rgb(213,79,30)"/><text x="80.1762%" y="239.50">free..</text></g><g><title>is_reachable_non_generic (4,932,309 samples, 2.92%)</title><rect x="84.0261%" y="149" width="2.9218%" height="15" fill="rgb(246,177,23)"/><text x="84.2761%" y="159.50">is..</text></g><g><title>reachable_non_generics (4,922,929 samples, 2.92%)</title><rect x="84.0317%" y="133" width="2.9162%" height="15" fill="rgb(230,62,27)"/><text x="84.2817%" y="143.50">re..</text></g><g><title>metadata_decode_entry_reachable_non_generics (4,920,969 samples, 2.92%)</title><rect x="84.0328%" y="117" width="2.9151%" height="15" fill="rgb(216,154,8)"/><text x="84.2828%" y="127.50">me..</text></g><g><title>exported_symbols (4,844,758 samples, 2.87%)</title><rect x="84.0780%" y="101" width="2.8699%" height="15" fill="rgb(244,35,45)"/><text x="84.3280%" y="111.50">ex..</text></g><g><title>metadata_decode_entry_exported_symbols (4,843,298 samples, 2.87%)</title><rect x="84.0788%" y="85" width="2.8691%" height="15" fill="rgb(251,115,12)"/><text x="84.3288%" y="95.50">me..</text></g><g><title>layout_of (221,802 samples, 0.13%)</title><rect x="87.2488%" y="85" width="0.1314%" height="15" fill="rgb(240,54,50)"/><text x="87.4988%" y="95.50"></text></g><g><title>layout_of (310,592 samples, 0.18%)</title><rect x="87.2015%" y="133" width="0.1840%" height="15" fill="rgb(233,84,52)"/><text x="87.4515%" y="143.50"></text></g><g><title>layout_of (261,072 samples, 0.15%)</title><rect x="87.2308%" y="117" width="0.1547%" height="15" fill="rgb(207,117,47)"/><text x="87.4808%" y="127.50"></text></g><g><title>layout_of (250,312 samples, 0.15%)</title><rect x="87.2372%" y="101" width="0.1483%" height="15" fill="rgb(249,43,39)"/><text x="87.4872%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (203,642 samples, 0.12%)</title><rect x="87.3855%" y="133" width="0.1206%" height="15" fill="rgb(209,38,44)"/><text x="87.6355%" y="143.50"></text></g><g><title>optimized_mir (1,468,705 samples, 0.87%)</title><rect x="87.0087%" y="149" width="0.8700%" height="15" fill="rgb(236,212,23)"/><text x="87.2587%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (629,046 samples, 0.37%)</title><rect x="87.5061%" y="133" width="0.3726%" height="15" fill="rgb(242,79,21)"/><text x="87.7561%" y="143.50"></text></g><g><title>impl_parent (258,896 samples, 0.15%)</title><rect x="88.3019%" y="117" width="0.1534%" height="15" fill="rgb(211,96,35)"/><text x="88.5519%" y="127.50"></text></g><g><title>specialization_graph_of (1,342,674 samples, 0.80%)</title><rect x="88.0611%" y="133" width="0.7954%" height="15" fill="rgb(253,215,40)"/><text x="88.3111%" y="143.50"></text></g><g><title>impl_trait_ref (677,223 samples, 0.40%)</title><rect x="88.4553%" y="117" width="0.4012%" height="15" fill="rgb(211,81,21)"/><text x="88.7053%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (577,352 samples, 0.34%)</title><rect x="88.5144%" y="101" width="0.3420%" height="15" fill="rgb(208,190,38)"/><text x="88.7644%" y="111.50"></text></g><g><title>resolve_instance (1,694,568 samples, 1.00%)</title><rect x="87.8787%" y="149" width="1.0038%" height="15" fill="rgb(235,213,38)"/><text x="88.1287%" y="159.50"></text></g><g><title>eval_to_const_value_raw (189,402 samples, 0.11%)</title><rect x="88.8891%" y="133" width="0.1122%" height="15" fill="rgb(237,122,38)"/><text x="89.1391%" y="143.50"></text></g><g><title>eval_to_const_value_raw (187,352 samples, 0.11%)</title><rect x="88.8903%" y="117" width="0.1110%" height="15" fill="rgb(244,218,35)"/><text x="89.1403%" y="127.50"></text></g><g><title>eval_to_allocation_raw (182,872 samples, 0.11%)</title><rect x="88.8929%" y="101" width="0.1083%" height="15" fill="rgb(240,68,47)"/><text x="89.1429%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (204,672 samples, 0.12%)</title><rect x="88.8826%" y="149" width="0.1212%" height="15" fill="rgb(210,16,53)"/><text x="89.1326%" y="159.50"></text></g><g><title>upstream_monomorphizations_for (4,565,326 samples, 2.70%)</title><rect x="89.0051%" y="149" width="2.7044%" height="15" fill="rgb(235,124,12)"/><text x="89.2551%" y="159.50">up..</text></g><g><title>upstream_monomorphizations (4,559,536 samples, 2.70%)</title><rect x="89.0085%" y="133" width="2.7010%" height="15" fill="rgb(224,169,11)"/><text x="89.2585%" y="143.50">up..</text></g><g><title>exported_symbols (3,058,380 samples, 1.81%)</title><rect x="89.8978%" y="117" width="1.8117%" height="15" fill="rgb(250,166,2)"/><text x="90.1478%" y="127.50">e..</text></g><g><title>metadata_decode_entry_exported_symbols (3,050,860 samples, 1.81%)</title><rect x="89.9022%" y="101" width="1.8073%" height="15" fill="rgb(242,216,29)"/><text x="90.1522%" y="111.50">m..</text></g><g><title>impl_parent (829,303 samples, 0.49%)</title><rect x="92.5497%" y="101" width="0.4913%" height="15" fill="rgb(230,116,27)"/><text x="92.7997%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (546,079 samples, 0.32%)</title><rect x="92.7175%" y="85" width="0.3235%" height="15" fill="rgb(228,99,48)"/><text x="92.9675%" y="95.50"></text></g><g><title>impl_trait_ref (2,846,946 samples, 1.69%)</title><rect x="93.0410%" y="101" width="1.6865%" height="15" fill="rgb(253,11,6)"/><text x="93.2910%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,317,410 samples, 1.37%)</title><rect x="93.3546%" y="85" width="1.3728%" height="15" fill="rgb(247,143,39)"/><text x="93.6046%" y="95.50"></text></g><g><title>specialization_graph_of (4,858,130 samples, 2.88%)</title><rect x="91.8503%" y="117" width="2.8778%" height="15" fill="rgb(236,97,10)"/><text x="92.1003%" y="127.50">sp..</text></g><g><title>monomorphization_collector_graph_walk (18,533,677 samples, 10.98%)</title><rect x="83.7537%" y="165" width="10.9789%" height="15" fill="rgb(233,208,19)"/><text x="84.0037%" y="175.50">monomorphization..</text></g><g><title>vtable_entries (5,103,332 samples, 3.02%)</title><rect x="91.7095%" y="149" width="3.0231%" height="15" fill="rgb(216,164,2)"/><text x="91.9595%" y="159.50">vta..</text></g><g><title>resolve_instance (4,899,070 samples, 2.90%)</title><rect x="91.8305%" y="133" width="2.9021%" height="15" fill="rgb(220,129,5)"/><text x="92.0805%" y="143.50">re..</text></g><g><title>monomorphization_collector (18,551,327 samples, 10.99%)</title><rect x="83.7524%" y="181" width="10.9894%" height="15" fill="rgb(242,17,10)"/><text x="84.0024%" y="191.50">monomorphization..</text></g><g><title>assert_symbols_are_distinct (228,113 samples, 0.14%)</title><rect x="94.7439%" y="165" width="0.1351%" height="15" fill="rgb(242,107,0)"/><text x="94.9939%" y="175.50"></text></g><g><title>symbol_name (209,843 samples, 0.12%)</title><rect x="94.7547%" y="149" width="0.1243%" height="15" fill="rgb(251,28,31)"/><text x="95.0047%" y="159.50"></text></g><g><title>cgu_partitioning_merge_cgus (346,113 samples, 0.21%)</title><rect x="94.8971%" y="149" width="0.2050%" height="15" fill="rgb(233,223,10)"/><text x="95.1471%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (19,290,674 samples, 11.43%)</title><rect x="83.7360%" y="197" width="11.4273%" height="15" fill="rgb(215,21,27)"/><text x="83.9860%" y="207.50">collect_and_parti..</text></g><g><title>partition_and_assert_distinct_symbols (711,577 samples, 0.42%)</title><rect x="94.7418%" y="181" width="0.4215%" height="15" fill="rgb(232,23,21)"/><text x="94.9918%" y="191.50"></text></g><g><title>cgu_partitioning (479,904 samples, 0.28%)</title><rect x="94.8790%" y="165" width="0.2843%" height="15" fill="rgb(244,5,23)"/><text x="95.1290%" y="175.50"></text></g><g><title>exported_symbols (19,325,534 samples, 11.45%)</title><rect x="83.7248%" y="213" width="11.4480%" height="15" fill="rgb(226,81,46)"/><text x="83.9748%" y="223.50">exported_symbols</text></g><g><title>generate_crate_metadata (19,790,109 samples, 11.72%)</title><rect x="83.5512%" y="229" width="11.7232%" height="15" fill="rgb(247,70,30)"/><text x="83.8012%" y="239.50">generate_crate_me..</text></g><g><title>hir_lowering (415,914 samples, 0.25%)</title><rect x="95.2744%" y="229" width="0.2464%" height="15" fill="rgb(212,68,19)"/><text x="95.5244%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,393,994 samples, 2.01%)</title><rect x="95.5312%" y="213" width="2.0105%" height="15" fill="rgb(240,187,13)"/><text x="95.7812%" y="223.50">f..</text></g><g><title>join_worker_thread (245,223 samples, 0.15%)</title><rect x="97.3964%" y="197" width="0.1453%" height="15" fill="rgb(223,113,26)"/><text x="97.6464%" y="207.50"></text></g><g><title>link_binary_remove_temps (310,253 samples, 0.18%)</title><rect x="97.8059%" y="181" width="0.1838%" height="15" fill="rgb(206,192,2)"/><text x="98.0559%" y="191.50"></text></g><g><title>link_crate (1,952,819 samples, 1.16%)</title><rect x="97.5417%" y="213" width="1.1568%" height="15" fill="rgb(241,108,4)"/><text x="97.7917%" y="223.50"></text></g><g><title>link_binary (1,924,929 samples, 1.14%)</title><rect x="97.5582%" y="197" width="1.1403%" height="15" fill="rgb(247,173,49)"/><text x="97.8082%" y="207.50"></text></g><g><title>link_rlib (1,196,592 samples, 0.71%)</title><rect x="97.9897%" y="181" width="0.7088%" height="15" fill="rgb(224,114,35)"/><text x="98.2397%" y="191.50"></text></g><g><title>link (5,376,143 samples, 3.18%)</title><rect x="95.5208%" y="229" width="3.1847%" height="15" fill="rgb(245,159,27)"/><text x="95.7708%" y="239.50">link</text></g><g><title>parse_crate (702,537 samples, 0.42%)</title><rect x="98.7055%" y="229" width="0.4162%" height="15" fill="rgb(245,172,44)"/><text x="98.9555%" y="239.50"></text></g><g><title>prepare_outputs (187,012 samples, 0.11%)</title><rect x="99.1246%" y="229" width="0.1108%" height="15" fill="rgb(236,23,11)"/><text x="99.3746%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (937,519 samples, 0.56%)</title><rect x="99.2354%" y="229" width="0.5554%" height="15" fill="rgb(205,117,38)"/><text x="99.4854%" y="239.50"></text></g><g><title>all (168,811,850 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (168,811,850 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (283,643 samples, 0.17%)</title><rect x="99.8320%" y="229" width="0.1680%" height="15" fill="rgb(217,125,39)"/><text x="100.0820%" y="239.50"></text></g></svg></svg>