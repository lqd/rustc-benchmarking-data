<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,472,367 samples, 4.71%)</title><rect x="0.8675%" y="181" width="4.7132%" height="15" fill="rgb(227,0,7)"/><text x="1.1175%" y="191.50">LLVM_..</text></g><g><title>implied_outlives_bounds (175,933 samples, 0.24%)</title><rect x="10.6821%" y="133" width="0.2388%" height="15" fill="rgb(217,0,24)"/><text x="10.9321%" y="143.50"></text></g><g><title>is_sized_raw (108,821 samples, 0.15%)</title><rect x="10.9304%" y="133" width="0.1477%" height="15" fill="rgb(221,193,54)"/><text x="11.1804%" y="143.50"></text></g><g><title>param_env (108,131 samples, 0.15%)</title><rect x="11.8865%" y="101" width="0.1468%" height="15" fill="rgb(248,212,6)"/><text x="12.1365%" y="111.50"></text></g><g><title>codegen_fn_attrs (96,292 samples, 0.13%)</title><rect x="12.2798%" y="85" width="0.1307%" height="15" fill="rgb(208,68,35)"/><text x="12.5298%" y="95.50"></text></g><g><title>needs_drop_raw (626,827 samples, 0.85%)</title><rect x="13.5620%" y="69" width="0.8508%" height="15" fill="rgb(232,128,0)"/><text x="13.8120%" y="79.50"></text></g><g><title>is_copy_raw (499,966 samples, 0.68%)</title><rect x="13.7342%" y="53" width="0.6786%" height="15" fill="rgb(207,160,47)"/><text x="13.9842%" y="63.50"></text></g><g><title>evaluate_obligation (391,475 samples, 0.53%)</title><rect x="13.8814%" y="37" width="0.5314%" height="15" fill="rgb(228,23,34)"/><text x="14.1314%" y="47.50"></text></g><g><title>resolve_instance (97,232 samples, 0.13%)</title><rect x="14.4128%" y="69" width="0.1320%" height="15" fill="rgb(218,30,26)"/><text x="14.6628%" y="79.50"></text></g><g><title>thir_body (274,624 samples, 0.37%)</title><rect x="14.5652%" y="69" width="0.3728%" height="15" fill="rgb(220,122,19)"/><text x="14.8152%" y="79.50"></text></g><g><title>mir_const (2,562,389 samples, 3.48%)</title><rect x="11.4710%" y="117" width="3.4781%" height="15" fill="rgb(250,228,42)"/><text x="11.7210%" y="127.50">mir..</text></g><g><title>unsafety_check_result (2,148,114 samples, 2.92%)</title><rect x="12.0333%" y="101" width="2.9158%" height="15" fill="rgb(240,193,28)"/><text x="12.2833%" y="111.50">un..</text></g><g><title>mir_built (1,870,220 samples, 2.54%)</title><rect x="12.4105%" y="85" width="2.5386%" height="15" fill="rgb(216,20,37)"/><text x="12.6605%" y="95.50">mi..</text></g><g><title>mir_promoted (2,867,341 samples, 3.89%)</title><rect x="11.0781%" y="133" width="3.8920%" height="15" fill="rgb(206,188,39)"/><text x="11.3281%" y="143.50">mir_..</text></g><g><title>type_op_normalize_fn_sig (115,292 samples, 0.16%)</title><rect x="15.0213%" y="133" width="0.1565%" height="15" fill="rgb(217,207,13)"/><text x="15.2713%" y="143.50"></text></g><g><title>MIR_borrow_checking (8,389,501 samples, 11.39%)</title><rect x="5.8780%" y="165" width="11.3876%" height="15" fill="rgb(231,73,38)"/><text x="6.1280%" y="175.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (8,358,631 samples, 11.35%)</title><rect x="5.9199%" y="149" width="11.3457%" height="15" fill="rgb(225,20,46)"/><text x="6.1699%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,538,064 samples, 2.09%)</title><rect x="15.1778%" y="133" width="2.0877%" height="15" fill="rgb(210,31,41)"/><text x="15.4278%" y="143.50">t..</text></g><g><title>hir_module_items (159,531 samples, 0.22%)</title><rect x="17.2762%" y="165" width="0.2165%" height="15" fill="rgb(221,200,47)"/><text x="17.5262%" y="175.50"></text></g><g><title>get_lang_items (96,391 samples, 0.13%)</title><rect x="17.8252%" y="117" width="0.1308%" height="15" fill="rgb(226,26,5)"/><text x="18.0752%" y="127.50"></text></g><g><title>should_inherit_track_caller (114,821 samples, 0.16%)</title><rect x="17.9560%" y="117" width="0.1559%" height="15" fill="rgb(249,33,26)"/><text x="18.2060%" y="127.50"></text></g><g><title>codegen_fn_attrs (315,955 samples, 0.43%)</title><rect x="17.7222%" y="133" width="0.4289%" height="15" fill="rgb(235,183,28)"/><text x="17.9722%" y="143.50"></text></g><g><title>check_mod_attrs (454,645 samples, 0.62%)</title><rect x="17.5342%" y="149" width="0.6171%" height="15" fill="rgb(221,5,38)"/><text x="17.7842%" y="159.50"></text></g><g><title>lookup_deprecation_entry (115,772 samples, 0.16%)</title><rect x="18.5854%" y="133" width="0.1571%" height="15" fill="rgb(247,18,42)"/><text x="18.8354%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (417,115 samples, 0.57%)</title><rect x="18.3027%" y="149" width="0.5662%" height="15" fill="rgb(241,131,45)"/><text x="18.5527%" y="159.50"></text></g><g><title>misc_checking_1 (1,058,211 samples, 1.44%)</title><rect x="17.4932%" y="165" width="1.4364%" height="15" fill="rgb(249,31,29)"/><text x="17.7432%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (265,703 samples, 0.36%)</title><rect x="18.9331%" y="149" width="0.3607%" height="15" fill="rgb(225,111,53)"/><text x="19.1831%" y="159.50"></text></g><g><title>check_mod_liveness (215,862 samples, 0.29%)</title><rect x="19.0007%" y="133" width="0.2930%" height="15" fill="rgb(238,160,17)"/><text x="19.2507%" y="143.50"></text></g><g><title>misc_checking_2 (585,596 samples, 0.79%)</title><rect x="18.9296%" y="165" width="0.7949%" height="15" fill="rgb(214,148,48)"/><text x="19.1796%" y="175.50"></text></g><g><title>match_checking (317,353 samples, 0.43%)</title><rect x="19.2937%" y="149" width="0.4308%" height="15" fill="rgb(232,36,49)"/><text x="19.5437%" y="159.50"></text></g><g><title>check_match (300,893 samples, 0.41%)</title><rect x="19.3161%" y="133" width="0.4084%" height="15" fill="rgb(209,103,24)"/><text x="19.5661%" y="143.50"></text></g><g><title>param_env (90,761 samples, 0.12%)</title><rect x="19.6013%" y="117" width="0.1232%" height="15" fill="rgb(229,88,8)"/><text x="19.8513%" y="127.50"></text></g><g><title>death_checking (92,311 samples, 0.13%)</title><rect x="19.8210%" y="149" width="0.1253%" height="15" fill="rgb(213,181,19)"/><text x="20.0710%" y="159.50"></text></g><g><title>param_env (128,881 samples, 0.17%)</title><rect x="20.5426%" y="117" width="0.1749%" height="15" fill="rgb(254,191,54)"/><text x="20.7926%" y="127.50"></text></g><g><title>trait_impls_of (207,853 samples, 0.28%)</title><rect x="20.7176%" y="117" width="0.2821%" height="15" fill="rgb(241,83,37)"/><text x="20.9676%" y="127.50"></text></g><g><title>crate_lints (3,551,918 samples, 4.82%)</title><rect x="19.9489%" y="133" width="4.8212%" height="15" fill="rgb(233,36,39)"/><text x="20.1989%" y="143.50">crate_..</text></g><g><title>type_of (2,777,727 samples, 3.77%)</title><rect x="20.9997%" y="117" width="3.7704%" height="15" fill="rgb(226,3,54)"/><text x="21.2497%" y="127.50">type..</text></g><g><title>metadata_decode_entry_type_of (2,520,746 samples, 3.42%)</title><rect x="21.3485%" y="101" width="3.4216%" height="15" fill="rgb(245,192,40)"/><text x="21.5985%" y="111.50">met..</text></g><g><title>lint_checking (3,667,419 samples, 4.98%)</title><rect x="19.9463%" y="149" width="4.9780%" height="15" fill="rgb(238,167,29)"/><text x="20.1963%" y="159.50">lint_c..</text></g><g><title>module_lints (113,641 samples, 0.15%)</title><rect x="24.7701%" y="133" width="0.1543%" height="15" fill="rgb(232,182,51)"/><text x="25.0201%" y="143.50"></text></g><g><title>lint_mod (110,351 samples, 0.15%)</title><rect x="24.7745%" y="117" width="0.1498%" height="15" fill="rgb(231,60,39)"/><text x="25.0245%" y="127.50"></text></g><g><title>privacy_access_levels (77,831 samples, 0.11%)</title><rect x="24.9243%" y="149" width="0.1056%" height="15" fill="rgb(208,69,12)"/><text x="25.1743%" y="159.50"></text></g><g><title>privacy_checking_modules (184,362 samples, 0.25%)</title><rect x="25.0300%" y="149" width="0.2502%" height="15" fill="rgb(235,93,37)"/><text x="25.2800%" y="159.50"></text></g><g><title>check_mod_privacy (182,562 samples, 0.25%)</title><rect x="25.0324%" y="133" width="0.2478%" height="15" fill="rgb(213,116,39)"/><text x="25.2824%" y="143.50"></text></g><g><title>misc_checking_3 (4,107,784 samples, 5.58%)</title><rect x="19.7245%" y="165" width="5.5757%" height="15" fill="rgb(222,207,29)"/><text x="19.9745%" y="175.50">misc_ch..</text></g><g><title>impl_parent (137,592 samples, 0.19%)</title><rect x="25.7558%" y="101" width="0.1868%" height="15" fill="rgb(206,96,30)"/><text x="26.0058%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (92,081 samples, 0.12%)</title><rect x="25.8175%" y="85" width="0.1250%" height="15" fill="rgb(218,138,4)"/><text x="26.0675%" y="95.50"></text></g><g><title>impl_trait_ref (559,175 samples, 0.76%)</title><rect x="25.9425%" y="101" width="0.7590%" height="15" fill="rgb(250,191,14)"/><text x="26.1925%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (501,614 samples, 0.68%)</title><rect x="26.0207%" y="85" width="0.6809%" height="15" fill="rgb(239,60,40)"/><text x="26.2707%" y="95.50"></text></g><g><title>coherent_trait (1,045,371 samples, 1.42%)</title><rect x="25.3907%" y="133" width="1.4189%" height="15" fill="rgb(206,27,48)"/><text x="25.6407%" y="143.50"></text></g><g><title>specialization_graph_of (1,031,411 samples, 1.40%)</title><rect x="25.4096%" y="117" width="1.4000%" height="15" fill="rgb(225,35,8)"/><text x="25.6596%" y="127.50"></text></g><g><title>trait_impls_of (79,621 samples, 0.11%)</title><rect x="26.7015%" y="101" width="0.1081%" height="15" fill="rgb(250,213,24)"/><text x="26.9515%" y="111.50"></text></g><g><title>coherence_checking (1,107,602 samples, 1.50%)</title><rect x="25.3702%" y="149" width="1.5034%" height="15" fill="rgb(247,123,22)"/><text x="25.6202%" y="159.50"></text></g><g><title>associated_item (197,754 samples, 0.27%)</title><rect x="33.6785%" y="85" width="0.2684%" height="15" fill="rgb(231,138,38)"/><text x="33.9285%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (134,034 samples, 0.18%)</title><rect x="33.7650%" y="69" width="0.1819%" height="15" fill="rgb(231,145,46)"/><text x="34.0150%" y="79.50"></text></g><g><title>associated_items (307,874 samples, 0.42%)</title><rect x="33.5485%" y="101" width="0.4179%" height="15" fill="rgb(251,118,11)"/><text x="33.7985%" y="111.50"></text></g><g><title>dropck_outlives (155,851 samples, 0.21%)</title><rect x="34.0012%" y="101" width="0.2115%" height="15" fill="rgb(217,147,25)"/><text x="34.2512%" y="111.50"></text></g><g><title>predicates_of (81,251 samples, 0.11%)</title><rect x="35.1082%" y="85" width="0.1103%" height="15" fill="rgb(247,81,37)"/><text x="35.3582%" y="95.50"></text></g><g><title>specializes (257,763 samples, 0.35%)</title><rect x="35.2185%" y="85" width="0.3499%" height="15" fill="rgb(209,12,38)"/><text x="35.4685%" y="95.50"></text></g><g><title>param_env (224,862 samples, 0.31%)</title><rect x="35.2631%" y="69" width="0.3052%" height="15" fill="rgb(227,1,9)"/><text x="35.5131%" y="79.50"></text></g><g><title>def_span (184,201 samples, 0.25%)</title><rect x="35.3183%" y="53" width="0.2500%" height="15" fill="rgb(248,47,43)"/><text x="35.5683%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (181,401 samples, 0.25%)</title><rect x="35.3221%" y="37" width="0.2462%" height="15" fill="rgb(221,10,30)"/><text x="35.5721%" y="47.50"></text></g><g><title>evaluate_obligation (1,886,850 samples, 2.56%)</title><rect x="34.2127%" y="101" width="2.5611%" height="15" fill="rgb(210,229,1)"/><text x="34.4627%" y="111.50">ev..</text></g><g><title>trait_impls_of (875,828 samples, 1.19%)</title><rect x="35.5851%" y="85" width="1.1888%" height="15" fill="rgb(222,148,37)"/><text x="35.8351%" y="95.50"></text></g><g><title>implementations_of_trait (257,755 samples, 0.35%)</title><rect x="36.4240%" y="69" width="0.3499%" height="15" fill="rgb(234,67,33)"/><text x="36.6740%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (189,464 samples, 0.26%)</title><rect x="36.5167%" y="53" width="0.2572%" height="15" fill="rgb(247,98,35)"/><text x="36.7667%" y="63.50"></text></g><g><title>fn_sig (78,421 samples, 0.11%)</title><rect x="36.7893%" y="101" width="0.1064%" height="15" fill="rgb(247,138,52)"/><text x="37.0393%" y="111.50"></text></g><g><title>generics_of (86,740 samples, 0.12%)</title><rect x="36.8958%" y="101" width="0.1177%" height="15" fill="rgb(213,79,30)"/><text x="37.1458%" y="111.50"></text></g><g><title>item_attrs (170,442 samples, 0.23%)</title><rect x="37.1644%" y="101" width="0.2314%" height="15" fill="rgb(246,177,23)"/><text x="37.4144%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (165,682 samples, 0.22%)</title><rect x="37.1709%" y="85" width="0.2249%" height="15" fill="rgb(230,62,27)"/><text x="37.4209%" y="95.50"></text></g><g><title>method_autoderef_steps (208,171 samples, 0.28%)</title><rect x="37.4180%" y="101" width="0.2826%" height="15" fill="rgb(216,154,8)"/><text x="37.6680%" y="111.50"></text></g><g><title>evaluate_obligation (128,360 samples, 0.17%)</title><rect x="37.5263%" y="85" width="0.1742%" height="15" fill="rgb(244,35,45)"/><text x="37.7763%" y="95.50"></text></g><g><title>explicit_predicates_of (100,591 samples, 0.14%)</title><rect x="37.8634%" y="69" width="0.1365%" height="15" fill="rgb(251,115,12)"/><text x="38.1134%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (84,891 samples, 0.12%)</title><rect x="37.8848%" y="53" width="0.1152%" height="15" fill="rgb(240,54,50)"/><text x="38.1348%" y="63.50"></text></g><g><title>predicates_of (238,671 samples, 0.32%)</title><rect x="37.7212%" y="101" width="0.3240%" height="15" fill="rgb(233,84,52)"/><text x="37.9712%" y="111.50"></text></g><g><title>predicates_defined_on (176,361 samples, 0.24%)</title><rect x="37.8057%" y="85" width="0.2394%" height="15" fill="rgb(207,117,47)"/><text x="38.0557%" y="95.50"></text></g><g><title>adt_def (74,461 samples, 0.10%)</title><rect x="46.4787%" y="69" width="0.1011%" height="15" fill="rgb(249,43,39)"/><text x="46.7287%" y="79.50"></text></g><g><title>adt_sized_constraint (91,381 samples, 0.12%)</title><rect x="46.4604%" y="85" width="0.1240%" height="15" fill="rgb(209,38,44)"/><text x="46.7104%" y="95.50"></text></g><g><title>associated_items (102,471 samples, 0.14%)</title><rect x="46.5844%" y="85" width="0.1391%" height="15" fill="rgb(236,212,23)"/><text x="46.8344%" y="95.50"></text></g><g><title>adt_dtorck_constraint (74,121 samples, 0.10%)</title><rect x="47.0205%" y="53" width="0.1006%" height="15" fill="rgb(242,79,21)"/><text x="47.2705%" y="63.50"></text></g><g><title>dropck_outlives (300,785 samples, 0.41%)</title><rect x="46.7391%" y="85" width="0.4083%" height="15" fill="rgb(211,96,35)"/><text x="46.9891%" y="95.50"></text></g><g><title>adt_dtorck_constraint (133,221 samples, 0.18%)</title><rect x="46.9666%" y="69" width="0.1808%" height="15" fill="rgb(253,215,40)"/><text x="47.2166%" y="79.50"></text></g><g><title>evaluate_obligation (975,501 samples, 1.32%)</title><rect x="47.1474%" y="85" width="1.3241%" height="15" fill="rgb(211,81,21)"/><text x="47.3974%" y="95.50"></text></g><g><title>trait_impls_of (144,213 samples, 0.20%)</title><rect x="48.2758%" y="69" width="0.1957%" height="15" fill="rgb(208,190,38)"/><text x="48.5258%" y="79.50"></text></g><g><title>is_copy_raw (165,072 samples, 0.22%)</title><rect x="48.7898%" y="85" width="0.2241%" height="15" fill="rgb(235,213,38)"/><text x="49.0398%" y="95.50"></text></g><g><title>evaluate_obligation (117,802 samples, 0.16%)</title><rect x="48.8540%" y="69" width="0.1599%" height="15" fill="rgb(237,122,38)"/><text x="49.1040%" y="79.50"></text></g><g><title>item_attrs (145,413 samples, 0.20%)</title><rect x="49.0139%" y="85" width="0.1974%" height="15" fill="rgb(244,218,35)"/><text x="49.2639%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (140,613 samples, 0.19%)</title><rect x="49.0204%" y="69" width="0.1909%" height="15" fill="rgb(240,68,47)"/><text x="49.2704%" y="79.50"></text></g><g><title>method_autoderef_steps (109,170 samples, 0.15%)</title><rect x="49.2296%" y="85" width="0.1482%" height="15" fill="rgb(210,16,53)"/><text x="49.4796%" y="95.50"></text></g><g><title>evaluate_obligation (108,661 samples, 0.15%)</title><rect x="49.4922%" y="69" width="0.1475%" height="15" fill="rgb(235,124,12)"/><text x="49.7422%" y="79.50"></text></g><g><title>layout_of (81,941 samples, 0.11%)</title><rect x="49.6491%" y="69" width="0.1112%" height="15" fill="rgb(224,169,11)"/><text x="49.8991%" y="79.50"></text></g><g><title>object_safety_violations (317,093 samples, 0.43%)</title><rect x="49.3778%" y="85" width="0.4304%" height="15" fill="rgb(250,166,2)"/><text x="49.6278%" y="95.50"></text></g><g><title>explicit_predicates_of (85,301 samples, 0.12%)</title><rect x="49.9711%" y="53" width="0.1158%" height="15" fill="rgb(242,216,29)"/><text x="50.2211%" y="63.50"></text></g><g><title>predicates_of (224,493 samples, 0.30%)</title><rect x="49.8145%" y="85" width="0.3047%" height="15" fill="rgb(230,116,27)"/><text x="50.0645%" y="95.50"></text></g><g><title>predicates_defined_on (158,302 samples, 0.21%)</title><rect x="49.9044%" y="69" width="0.2149%" height="15" fill="rgb(228,99,48)"/><text x="50.1544%" y="79.50"></text></g><g><title>typeck (8,892,284 samples, 12.07%)</title><rect x="38.1712%" y="101" width="12.0700%" height="15" fill="rgb(253,11,6)"/><text x="38.4212%" y="111.50">typeck</text></g><g><title>item_bodies_checking (17,198,934 samples, 23.35%)</title><rect x="26.9073%" y="149" width="23.3451%" height="15" fill="rgb(247,143,39)"/><text x="27.1573%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,195,444 samples, 23.34%)</title><rect x="26.9121%" y="133" width="23.3404%" height="15" fill="rgb(236,97,10)"/><text x="27.1621%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (17,165,234 samples, 23.30%)</title><rect x="26.9531%" y="117" width="23.2994%" height="15" fill="rgb(233,208,19)"/><text x="27.2031%" y="127.50">typeck</text></g><g><title>item_types_checking (240,063 samples, 0.33%)</title><rect x="50.2524%" y="149" width="0.3259%" height="15" fill="rgb(216,164,2)"/><text x="50.5024%" y="159.50"></text></g><g><title>check_mod_item_types (236,163 samples, 0.32%)</title><rect x="50.2577%" y="133" width="0.3206%" height="15" fill="rgb(220,129,5)"/><text x="50.5077%" y="143.50"></text></g><g><title>fn_sig (99,323 samples, 0.13%)</title><rect x="50.8008%" y="117" width="0.1348%" height="15" fill="rgb(242,17,10)"/><text x="51.0508%" y="127.50"></text></g><g><title>is_late_bound_map (195,882 samples, 0.27%)</title><rect x="51.0736%" y="101" width="0.2659%" height="15" fill="rgb(242,107,0)"/><text x="51.3236%" y="111.50"></text></g><g><title>resolve_lifetimes (181,771 samples, 0.25%)</title><rect x="51.0928%" y="85" width="0.2467%" height="15" fill="rgb(251,28,31)"/><text x="51.3428%" y="95.50"></text></g><g><title>named_region_map (89,861 samples, 0.12%)</title><rect x="51.3395%" y="101" width="0.1220%" height="15" fill="rgb(233,223,10)"/><text x="51.5895%" y="111.50"></text></g><g><title>resolve_lifetimes (82,591 samples, 0.11%)</title><rect x="51.3494%" y="85" width="0.1121%" height="15" fill="rgb(215,21,27)"/><text x="51.5994%" y="95.50"></text></g><g><title>generics_of (405,034 samples, 0.55%)</title><rect x="50.9356%" y="117" width="0.5498%" height="15" fill="rgb(232,23,21)"/><text x="51.1856%" y="127.50"></text></g><g><title>explicit_predicates_of (361,513 samples, 0.49%)</title><rect x="51.5786%" y="85" width="0.4907%" height="15" fill="rgb(244,5,23)"/><text x="51.8286%" y="95.50"></text></g><g><title>predicates_of (705,036 samples, 0.96%)</title><rect x="51.5003%" y="117" width="0.9570%" height="15" fill="rgb(226,81,46)"/><text x="51.7503%" y="127.50"></text></g><g><title>predicates_defined_on (685,376 samples, 0.93%)</title><rect x="51.5270%" y="101" width="0.9303%" height="15" fill="rgb(247,70,30)"/><text x="51.7770%" y="111.50"></text></g><g><title>inferred_outlives_of (285,893 samples, 0.39%)</title><rect x="52.0693%" y="85" width="0.3881%" height="15" fill="rgb(212,68,19)"/><text x="52.3193%" y="95.50"></text></g><g><title>inferred_outlives_crate (274,653 samples, 0.37%)</title><rect x="52.0845%" y="69" width="0.3728%" height="15" fill="rgb(240,187,13)"/><text x="52.3345%" y="79.50"></text></g><g><title>type_of (117,921 samples, 0.16%)</title><rect x="52.2973%" y="53" width="0.1601%" height="15" fill="rgb(223,113,26)"/><text x="52.5473%" y="63.50"></text></g><g><title>type_collecting (1,483,186 samples, 2.01%)</title><rect x="50.5817%" y="149" width="2.0132%" height="15" fill="rgb(206,192,2)"/><text x="50.8317%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,469,945 samples, 2.00%)</title><rect x="50.5997%" y="133" width="1.9952%" height="15" fill="rgb(241,108,4)"/><text x="50.8497%" y="143.50">c..</text></g><g><title>type_of (101,382 samples, 0.14%)</title><rect x="52.4573%" y="117" width="0.1376%" height="15" fill="rgb(247,173,49)"/><text x="52.7073%" y="127.50"></text></g><g><title>evaluate_obligation (269,714 samples, 0.37%)</title><rect x="53.6742%" y="117" width="0.3661%" height="15" fill="rgb(224,114,35)"/><text x="53.9242%" y="127.50"></text></g><g><title>implied_outlives_bounds (163,282 samples, 0.22%)</title><rect x="54.0403%" y="117" width="0.2216%" height="15" fill="rgb(245,159,27)"/><text x="54.2903%" y="127.50"></text></g><g><title>param_env (107,080 samples, 0.15%)</title><rect x="54.2620%" y="117" width="0.1453%" height="15" fill="rgb(245,172,44)"/><text x="54.5120%" y="127.50"></text></g><g><title>region_scope_tree (75,141 samples, 0.10%)</title><rect x="54.4392%" y="117" width="0.1020%" height="15" fill="rgb(236,23,11)"/><text x="54.6892%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,382,014 samples, 1.88%)</title><rect x="52.7132%" y="133" width="1.8759%" height="15" fill="rgb(205,117,38)"/><text x="52.9632%" y="143.50">c..</text></g><g><title>adt_sized_constraint (102,841 samples, 0.14%)</title><rect x="56.2664%" y="101" width="0.1396%" height="15" fill="rgb(237,72,25)"/><text x="56.5164%" y="111.50"></text></g><g><title>evaluate_obligation (238,042 samples, 0.32%)</title><rect x="56.0855%" y="117" width="0.3231%" height="15" fill="rgb(244,70,9)"/><text x="56.3355%" y="127.50"></text></g><g><title>implied_outlives_bounds (171,663 samples, 0.23%)</title><rect x="56.4122%" y="117" width="0.2330%" height="15" fill="rgb(217,125,39)"/><text x="56.6622%" y="127.50"></text></g><g><title>param_env (265,861 samples, 0.36%)</title><rect x="56.6452%" y="117" width="0.3609%" height="15" fill="rgb(235,36,10)"/><text x="56.8952%" y="127.50"></text></g><g><title>region_scope_tree (76,572 samples, 0.10%)</title><rect x="57.0182%" y="117" width="0.1039%" height="15" fill="rgb(251,123,47)"/><text x="57.2682%" y="127.50"></text></g><g><title>analysis (38,044,619 samples, 51.64%)</title><rect x="5.5807%" y="181" width="51.6401%" height="15" fill="rgb(221,13,13)"/><text x="5.8307%" y="191.50">analysis</text></g><g><title>type_check_crate (23,516,783 samples, 31.92%)</title><rect x="25.3002%" y="165" width="31.9207%" height="15" fill="rgb(238,131,9)"/><text x="25.5502%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,405,646 samples, 4.62%)</title><rect x="52.5982%" y="149" width="4.6227%" height="15" fill="rgb(211,50,8)"/><text x="52.8482%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (1,938,931 samples, 2.63%)</title><rect x="54.5891%" y="133" width="2.6318%" height="15" fill="rgb(245,182,24)"/><text x="54.8391%" y="143.50">ch..</text></g><g><title>codegen_module (297,174 samples, 0.40%)</title><rect x="57.8376%" y="165" width="0.4034%" height="15" fill="rgb(242,14,37)"/><text x="58.0876%" y="175.50"></text></g><g><title>codegen_crate (817,409 samples, 1.11%)</title><rect x="57.2357%" y="181" width="1.1095%" height="15" fill="rgb(246,228,12)"/><text x="57.4857%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,815,620 samples, 3.82%)</title><rect x="58.3799%" y="165" width="3.8218%" height="15" fill="rgb(213,55,15)"/><text x="58.6299%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,734,190 samples, 3.71%)</title><rect x="58.4904%" y="149" width="3.7113%" height="15" fill="rgb(209,9,3)"/><text x="58.7404%" y="159.50">LLVM..</text></g><g><title>codegen_module_optimize (3,152,553 samples, 4.28%)</title><rect x="58.3452%" y="181" width="4.2791%" height="15" fill="rgb(230,59,30)"/><text x="58.5952%" y="191.50">codeg..</text></g><g><title>LLVM_module_optimize (311,383 samples, 0.42%)</title><rect x="62.2017%" y="165" width="0.4227%" height="15" fill="rgb(209,121,21)"/><text x="62.4517%" y="175.50"></text></g><g><title>AST_validation (118,831 samples, 0.16%)</title><rect x="62.9125%" y="165" width="0.1613%" height="15" fill="rgb(220,109,13)"/><text x="63.1625%" y="175.50"></text></g><g><title>crate_injection (88,741 samples, 0.12%)</title><rect x="63.1311%" y="165" width="0.1205%" height="15" fill="rgb(232,18,1)"/><text x="63.3811%" y="175.50"></text></g><g><title>metadata_load_macro (126,683 samples, 0.17%)</title><rect x="77.6287%" y="133" width="0.1720%" height="15" fill="rgb(215,41,42)"/><text x="77.8787%" y="143.50"></text></g><g><title>metadata_register_crate (2,286,214 samples, 3.10%)</title><rect x="77.8007%" y="133" width="3.1032%" height="15" fill="rgb(224,123,36)"/><text x="78.0507%" y="143.50">met..</text></g><g><title>metadata_register_crate (830,999 samples, 1.13%)</title><rect x="79.7759%" y="117" width="1.1280%" height="15" fill="rgb(240,125,3)"/><text x="80.0259%" y="127.50"></text></g><g><title>macro_expand_crate (13,135,801 samples, 17.83%)</title><rect x="63.2515%" y="165" width="17.8300%" height="15" fill="rgb(205,98,50)"/><text x="63.5015%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (13,113,751 samples, 17.80%)</title><rect x="63.2815%" y="149" width="17.8000%" height="15" fill="rgb(205,185,37)"/><text x="63.5315%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (130,871 samples, 0.18%)</title><rect x="80.9039%" y="133" width="0.1776%" height="15" fill="rgb(238,207,15)"/><text x="81.1539%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (110,901 samples, 0.15%)</title><rect x="81.0879%" y="165" width="0.1505%" height="15" fill="rgb(213,199,42)"/><text x="81.3379%" y="175.50"></text></g><g><title>late_resolve_crate (1,885,981 samples, 2.56%)</title><rect x="81.3528%" y="149" width="2.5600%" height="15" fill="rgb(235,201,11)"/><text x="81.6028%" y="159.50">la..</text></g><g><title>configure_and_expand (15,762,429 samples, 21.40%)</title><rect x="62.6244%" y="181" width="21.3953%" height="15" fill="rgb(207,46,11)"/><text x="62.8744%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,048,993 samples, 2.78%)</title><rect x="81.2384%" y="165" width="2.7812%" height="15" fill="rgb(241,35,35)"/><text x="81.4884%" y="175.50">re..</text></g><g><title>drop_ast (102,201 samples, 0.14%)</title><rect x="84.0196%" y="181" width="0.1387%" height="15" fill="rgb(243,32,47)"/><text x="84.2696%" y="191.50"></text></g><g><title>early_lint_checks (217,733 samples, 0.30%)</title><rect x="84.1793%" y="181" width="0.2955%" height="15" fill="rgb(247,202,23)"/><text x="84.4293%" y="191.50"></text></g><g><title>free_global_ctxt (2,514,807 samples, 3.41%)</title><rect x="84.4748%" y="181" width="3.4135%" height="15" fill="rgb(219,102,11)"/><text x="84.7248%" y="191.50">fre..</text></g><g><title>exported_symbols (103,631 samples, 0.14%)</title><rect x="88.7781%" y="165" width="0.1407%" height="15" fill="rgb(243,110,44)"/><text x="89.0281%" y="175.50"></text></g><g><title>layout_of (243,392 samples, 0.33%)</title><rect x="90.0488%" y="149" width="0.3304%" height="15" fill="rgb(222,74,54)"/><text x="90.2988%" y="159.50"></text></g><g><title>layout_of (93,171 samples, 0.13%)</title><rect x="90.2527%" y="133" width="0.1265%" height="15" fill="rgb(216,99,12)"/><text x="90.5027%" y="143.50"></text></g><g><title>needs_drop_raw (363,282 samples, 0.49%)</title><rect x="91.8734%" y="133" width="0.4931%" height="15" fill="rgb(226,22,26)"/><text x="92.1234%" y="143.50"></text></g><g><title>is_copy_raw (322,822 samples, 0.44%)</title><rect x="91.9283%" y="117" width="0.4382%" height="15" fill="rgb(217,163,10)"/><text x="92.1783%" y="127.50"></text></g><g><title>evaluate_obligation (247,302 samples, 0.34%)</title><rect x="92.0308%" y="101" width="0.3357%" height="15" fill="rgb(213,25,53)"/><text x="92.2808%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,482,795 samples, 2.01%)</title><rect x="90.3792%" y="149" width="2.0127%" height="15" fill="rgb(252,105,26)"/><text x="90.6292%" y="159.50">m..</text></g><g><title>eval_to_const_value_raw (136,022 samples, 0.18%)</title><rect x="92.4128%" y="133" width="0.1846%" height="15" fill="rgb(220,39,43)"/><text x="92.6628%" y="143.50"></text></g><g><title>eval_to_const_value_raw (134,222 samples, 0.18%)</title><rect x="92.4152%" y="117" width="0.1822%" height="15" fill="rgb(229,68,48)"/><text x="92.6652%" y="127.50"></text></g><g><title>eval_to_allocation_raw (132,352 samples, 0.18%)</title><rect x="92.4178%" y="101" width="0.1796%" height="15" fill="rgb(252,8,32)"/><text x="92.6678%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (82,481 samples, 0.11%)</title><rect x="92.4855%" y="85" width="0.1120%" height="15" fill="rgb(223,20,43)"/><text x="92.7355%" y="95.50"></text></g><g><title>optimized_mir (2,660,258 samples, 3.61%)</title><rect x="88.9932%" y="165" width="3.6109%" height="15" fill="rgb(229,81,49)"/><text x="89.2432%" y="175.50">opti..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (156,322 samples, 0.21%)</title><rect x="92.3919%" y="149" width="0.2122%" height="15" fill="rgb(236,28,36)"/><text x="92.6419%" y="159.50"></text></g><g><title>generate_crate_metadata (3,493,518 samples, 4.74%)</title><rect x="87.8883%" y="181" width="4.7420%" height="15" fill="rgb(249,185,26)"/><text x="88.1383%" y="191.50">genera..</text></g><g><title>hir_lowering (1,619,998 samples, 2.20%)</title><rect x="92.6303%" y="181" width="2.1989%" height="15" fill="rgb(249,174,33)"/><text x="92.8803%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (550,116 samples, 0.75%)</title><rect x="94.8475%" y="165" width="0.7467%" height="15" fill="rgb(233,201,37)"/><text x="95.0975%" y="175.50"></text></g><g><title>link_crate (645,547 samples, 0.88%)</title><rect x="95.5942%" y="165" width="0.8762%" height="15" fill="rgb(221,78,26)"/><text x="95.8442%" y="175.50"></text></g><g><title>link_binary (628,467 samples, 0.85%)</title><rect x="95.6174%" y="149" width="0.8531%" height="15" fill="rgb(250,127,30)"/><text x="95.8674%" y="159.50"></text></g><g><title>link_rlib (406,664 samples, 0.55%)</title><rect x="95.9185%" y="133" width="0.5520%" height="15" fill="rgb(230,49,44)"/><text x="96.1685%" y="143.50"></text></g><g><title>link (1,215,863 samples, 1.65%)</title><rect x="94.8292%" y="181" width="1.6504%" height="15" fill="rgb(229,67,23)"/><text x="95.0792%" y="191.50"></text></g><g><title>parse_crate (1,458,415 samples, 1.98%)</title><rect x="96.4796%" y="181" width="1.9796%" height="15" fill="rgb(249,83,47)"/><text x="96.7296%" y="191.50">p..</text></g><g><title>prepare_outputs (293,083 samples, 0.40%)</title><rect x="98.4693%" y="181" width="0.3978%" height="15" fill="rgb(215,43,3)"/><text x="98.7193%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (418,935 samples, 0.57%)</title><rect x="98.8671%" y="181" width="0.5686%" height="15" fill="rgb(238,154,13)"/><text x="99.1171%" y="191.50"></text></g><g><title>setup_global_ctxt (121,282 samples, 0.16%)</title><rect x="99.4370%" y="181" width="0.1646%" height="15" fill="rgb(219,56,2)"/><text x="99.6870%" y="191.50"></text></g><g><title>all (73,672,561 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (73,672,561 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (293,523 samples, 0.40%)</title><rect x="99.6016%" y="181" width="0.3984%" height="15" fill="rgb(250,79,13)"/><text x="99.8516%" y="191.50"></text></g></svg></svg>