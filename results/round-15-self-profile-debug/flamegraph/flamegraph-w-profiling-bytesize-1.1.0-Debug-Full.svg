<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (82,372,096 samples, 15.60%)</title><rect x="0.1073%" y="165" width="15.6047%" height="15" fill="rgb(227,0,7)"/><text x="0.3573%" y="175.50">LLVM_passes</text></g><g><title>specialization_graph_of (927,550 samples, 0.18%)</title><rect x="18.2023%" y="37" width="0.1757%" height="15" fill="rgb(217,0,24)"/><text x="18.4523%" y="47.50"></text></g><g><title>resolve_instance (1,330,522 samples, 0.25%)</title><rect x="18.1337%" y="53" width="0.2521%" height="15" fill="rgb(221,193,54)"/><text x="18.3837%" y="63.50"></text></g><g><title>thir_body (595,089 samples, 0.11%)</title><rect x="18.3894%" y="53" width="0.1127%" height="15" fill="rgb(248,212,6)"/><text x="18.6394%" y="63.50"></text></g><g><title>mir_const (5,710,310 samples, 1.08%)</title><rect x="17.4235%" y="101" width="1.0818%" height="15" fill="rgb(208,68,35)"/><text x="17.6735%" y="111.50"></text></g><g><title>unsafety_check_result (4,975,602 samples, 0.94%)</title><rect x="17.5627%" y="85" width="0.9426%" height="15" fill="rgb(232,128,0)"/><text x="17.8127%" y="95.50"></text></g><g><title>mir_built (4,433,037 samples, 0.84%)</title><rect x="17.6655%" y="69" width="0.8398%" height="15" fill="rgb(207,160,47)"/><text x="17.9155%" y="79.50"></text></g><g><title>mir_const (616,546 samples, 0.12%)</title><rect x="18.5523%" y="85" width="0.1168%" height="15" fill="rgb(228,23,34)"/><text x="18.8023%" y="95.50"></text></g><g><title>mir_promoted (7,291,871 samples, 1.38%)</title><rect x="17.2880%" y="117" width="1.3814%" height="15" fill="rgb(218,30,26)"/><text x="17.5380%" y="127.50"></text></g><g><title>mir_const_qualif (866,388 samples, 0.16%)</title><rect x="18.5053%" y="101" width="0.1641%" height="15" fill="rgb(220,122,19)"/><text x="18.7553%" y="111.50"></text></g><g><title>type_op_prove_predicate (909,878 samples, 0.17%)</title><rect x="18.8039%" y="117" width="0.1724%" height="15" fill="rgb(250,228,42)"/><text x="19.0539%" y="127.50"></text></g><g><title>MIR_borrow_checking (17,018,991 samples, 3.22%)</title><rect x="15.7530%" y="149" width="3.2241%" height="15" fill="rgb(240,193,28)"/><text x="16.0030%" y="159.50">MIR..</text></g><g><title>mir_borrowck (16,894,440 samples, 3.20%)</title><rect x="15.7766%" y="133" width="3.2005%" height="15" fill="rgb(216,20,37)"/><text x="16.0266%" y="143.50">mir..</text></g><g><title>check_mod_attrs (560,225 samples, 0.11%)</title><rect x="19.0887%" y="133" width="0.1061%" height="15" fill="rgb(206,188,39)"/><text x="19.3387%" y="143.50"></text></g><g><title>misc_checking_1 (1,124,041 samples, 0.21%)</title><rect x="19.0849%" y="149" width="0.2129%" height="15" fill="rgb(217,207,13)"/><text x="19.3349%" y="159.50"></text></g><g><title>misc_checking_2 (762,648 samples, 0.14%)</title><rect x="19.2978%" y="149" width="0.1445%" height="15" fill="rgb(231,73,38)"/><text x="19.5478%" y="159.50"></text></g><g><title>death_checking (782,198 samples, 0.15%)</title><rect x="19.4760%" y="133" width="0.1482%" height="15" fill="rgb(225,20,46)"/><text x="19.7260%" y="143.50"></text></g><g><title>crate_lints (2,032,030 samples, 0.38%)</title><rect x="19.6244%" y="117" width="0.3850%" height="15" fill="rgb(210,31,41)"/><text x="19.8744%" y="127.50"></text></g><g><title>type_of (1,051,132 samples, 0.20%)</title><rect x="19.8102%" y="101" width="0.1991%" height="15" fill="rgb(221,200,47)"/><text x="20.0602%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (815,660 samples, 0.15%)</title><rect x="19.8549%" y="85" width="0.1545%" height="15" fill="rgb(226,26,5)"/><text x="20.1049%" y="95.50"></text></g><g><title>lint_checking (2,512,615 samples, 0.48%)</title><rect x="19.6241%" y="133" width="0.4760%" height="15" fill="rgb(249,33,26)"/><text x="19.8741%" y="143.50"></text></g><g><title>misc_checking_3 (4,164,012 samples, 0.79%)</title><rect x="19.4423%" y="149" width="0.7888%" height="15" fill="rgb(235,183,28)"/><text x="19.6923%" y="159.50"></text></g><g><title>impl_parent (2,942,297 samples, 0.56%)</title><rect x="21.2993%" y="85" width="0.5574%" height="15" fill="rgb(221,5,38)"/><text x="21.5493%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,719,811 samples, 0.33%)</title><rect x="21.5309%" y="69" width="0.3258%" height="15" fill="rgb(247,18,42)"/><text x="21.7809%" y="79.50"></text></g><g><title>impl_trait_ref (6,130,980 samples, 1.16%)</title><rect x="21.8568%" y="85" width="1.1615%" height="15" fill="rgb(241,131,45)"/><text x="22.1068%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,665,673 samples, 0.88%)</title><rect x="22.1344%" y="69" width="0.8839%" height="15" fill="rgb(249,31,29)"/><text x="22.3844%" y="79.50"></text></g><g><title>coherent_trait (15,898,500 samples, 3.01%)</title><rect x="20.2466%" y="117" width="3.0118%" height="15" fill="rgb(225,111,53)"/><text x="20.4966%" y="127.50">coh..</text></g><g><title>specialization_graph_of (15,275,624 samples, 2.89%)</title><rect x="20.3646%" y="101" width="2.8938%" height="15" fill="rgb(238,160,17)"/><text x="20.6146%" y="111.50">sp..</text></g><g><title>trait_impls_of (1,199,185 samples, 0.23%)</title><rect x="23.0313%" y="85" width="0.2272%" height="15" fill="rgb(214,148,48)"/><text x="23.2813%" y="95.50"></text></g><g><title>coherence_checking (15,996,400 samples, 3.03%)</title><rect x="20.2417%" y="133" width="3.0304%" height="15" fill="rgb(232,36,49)"/><text x="20.4917%" y="143.50">coh..</text></g><g><title>evaluate_obligation (1,278,081 samples, 0.24%)</title><rect x="24.9511%" y="85" width="0.2421%" height="15" fill="rgb(209,103,24)"/><text x="25.2011%" y="95.50"></text></g><g><title>evaluate_obligation (810,227 samples, 0.15%)</title><rect x="26.0287%" y="69" width="0.1535%" height="15" fill="rgb(229,88,8)"/><text x="26.2787%" y="79.50"></text></g><g><title>typeck (5,480,435 samples, 1.04%)</title><rect x="25.2784%" y="85" width="1.0382%" height="15" fill="rgb(213,181,19)"/><text x="25.5284%" y="95.50"></text></g><g><title>item_bodies_checking (16,078,741 samples, 3.05%)</title><rect x="23.2783%" y="133" width="3.0460%" height="15" fill="rgb(254,191,54)"/><text x="23.5283%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (16,075,981 samples, 3.05%)</title><rect x="23.2788%" y="117" width="3.0455%" height="15" fill="rgb(241,83,37)"/><text x="23.5288%" y="127.50">typ..</text></g><g><title>typeck (16,007,421 samples, 3.03%)</title><rect x="23.2918%" y="101" width="3.0325%" height="15" fill="rgb(233,36,39)"/><text x="23.5418%" y="111.50">typ..</text></g><g><title>item_types_checking (1,641,216 samples, 0.31%)</title><rect x="26.3243%" y="133" width="0.3109%" height="15" fill="rgb(226,3,54)"/><text x="26.5743%" y="143.50"></text></g><g><title>check_mod_item_types (1,637,406 samples, 0.31%)</title><rect x="26.3250%" y="117" width="0.3102%" height="15" fill="rgb(245,192,40)"/><text x="26.5750%" y="127.50"></text></g><g><title>type_collecting (1,653,917 samples, 0.31%)</title><rect x="26.6354%" y="133" width="0.3133%" height="15" fill="rgb(238,167,29)"/><text x="26.8854%" y="143.50"></text></g><g><title>collect_mod_item_types (1,642,057 samples, 0.31%)</title><rect x="26.6377%" y="117" width="0.3111%" height="15" fill="rgb(232,182,51)"/><text x="26.8877%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,146,209 samples, 0.41%)</title><rect x="26.9798%" y="117" width="0.4066%" height="15" fill="rgb(231,60,39)"/><text x="27.2298%" y="127.50"></text></g><g><title>analysis (63,695,300 samples, 12.07%)</title><rect x="15.7121%" y="165" width="12.0666%" height="15" fill="rgb(208,69,12)"/><text x="15.9621%" y="175.50">analysis</text></g><g><title>type_check_crate (39,840,680 samples, 7.55%)</title><rect x="20.2311%" y="149" width="7.5475%" height="15" fill="rgb(235,93,37)"/><text x="20.4811%" y="159.50">type_check..</text></g><g><title>wf_checking (4,375,174 samples, 0.83%)</title><rect x="26.9498%" y="133" width="0.8288%" height="15" fill="rgb(213,116,39)"/><text x="27.1998%" y="143.50"></text></g><g><title>check_item_well_formed (2,070,664 samples, 0.39%)</title><rect x="27.3863%" y="117" width="0.3923%" height="15" fill="rgb(222,207,29)"/><text x="27.6363%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (867,470 samples, 0.16%)</title><rect x="38.7704%" y="133" width="0.1643%" height="15" fill="rgb(206,96,30)"/><text x="39.0204%" y="143.50"></text></g><g><title>const_caller_location (1,441,157 samples, 0.27%)</title><rect x="38.9347%" y="133" width="0.2730%" height="15" fill="rgb(218,138,4)"/><text x="39.1847%" y="143.50"></text></g><g><title>codegen_fn_attrs (588,449 samples, 0.11%)</title><rect x="39.7645%" y="117" width="0.1115%" height="15" fill="rgb(250,191,14)"/><text x="40.0145%" y="127.50"></text></g><g><title>layout_of (1,259,542 samples, 0.24%)</title><rect x="39.8957%" y="117" width="0.2386%" height="15" fill="rgb(239,60,40)"/><text x="40.1457%" y="127.50"></text></g><g><title>explicit_predicates_of (568,942 samples, 0.11%)</title><rect x="40.9648%" y="69" width="0.1078%" height="15" fill="rgb(206,27,48)"/><text x="41.2148%" y="79.50"></text></g><g><title>predicates_of (1,709,622 samples, 0.32%)</title><rect x="40.7801%" y="101" width="0.3239%" height="15" fill="rgb(225,35,8)"/><text x="41.0301%" y="111.50"></text></g><g><title>predicates_defined_on (1,062,796 samples, 0.20%)</title><rect x="40.9027%" y="85" width="0.2013%" height="15" fill="rgb(250,213,24)"/><text x="41.1527%" y="95.50"></text></g><g><title>param_env (5,144,425 samples, 0.97%)</title><rect x="40.1343%" y="117" width="0.9746%" height="15" fill="rgb(247,123,22)"/><text x="40.3843%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (996,682 samples, 0.19%)</title><rect x="41.1089%" y="117" width="0.1888%" height="15" fill="rgb(231,138,38)"/><text x="41.3589%" y="127.50"></text></g><g><title>normalize_projection_ty (744,551 samples, 0.14%)</title><rect x="41.1566%" y="101" width="0.1410%" height="15" fill="rgb(231,145,46)"/><text x="41.4066%" y="111.50"></text></g><g><title>fn_abi_of_instance (11,017,978 samples, 2.09%)</title><rect x="39.2188%" y="133" width="2.0873%" height="15" fill="rgb(251,118,11)"/><text x="39.4688%" y="143.50">f..</text></g><g><title>layout_of (1,336,460 samples, 0.25%)</title><rect x="41.4152%" y="133" width="0.2532%" height="15" fill="rgb(217,147,25)"/><text x="41.6652%" y="143.50"></text></g><g><title>symbol_name (571,134 samples, 0.11%)</title><rect x="41.6720%" y="133" width="0.1082%" height="15" fill="rgb(247,81,37)"/><text x="41.9220%" y="143.50"></text></g><g><title>codegen_module (70,960,840 samples, 13.44%)</title><rect x="28.3726%" y="149" width="13.4429%" height="15" fill="rgb(209,12,38)"/><text x="28.6226%" y="159.50">codegen_module</text></g><g><title>codegen_crate (74,162,484 samples, 14.05%)</title><rect x="27.7806%" y="165" width="14.0495%" height="15" fill="rgb(227,1,9)"/><text x="28.0306%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (221,491,849 samples, 41.96%)</title><rect x="41.8649%" y="149" width="41.9598%" height="15" fill="rgb(248,47,43)"/><text x="42.1149%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (209,920,374 samples, 39.77%)</title><rect x="44.0570%" y="133" width="39.7677%" height="15" fill="rgb(221,10,30)"/><text x="44.3070%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (233,988,155 samples, 44.33%)</title><rect x="41.8301%" y="165" width="44.3271%" height="15" fill="rgb(210,229,1)"/><text x="42.0801%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,312,692 samples, 2.33%)</title><rect x="83.8247%" y="149" width="2.3325%" height="15" fill="rgb(222,148,37)"/><text x="84.0747%" y="159.50">L..</text></g><g><title>metadata_register_crate (2,277,883 samples, 0.43%)</title><rect x="88.5480%" y="117" width="0.4315%" height="15" fill="rgb(234,67,33)"/><text x="88.7980%" y="127.50"></text></g><g><title>metadata_register_crate (841,529 samples, 0.16%)</title><rect x="88.8201%" y="101" width="0.1594%" height="15" fill="rgb(247,98,35)"/><text x="89.0701%" y="111.50"></text></g><g><title>macro_expand_crate (14,582,986 samples, 2.76%)</title><rect x="86.2353%" y="149" width="2.7626%" height="15" fill="rgb(247,138,52)"/><text x="86.4853%" y="159.50">ma..</text></g><g><title>expand_crate (14,570,786 samples, 2.76%)</title><rect x="86.2376%" y="133" width="2.7603%" height="15" fill="rgb(213,79,30)"/><text x="86.4876%" y="143.50">ex..</text></g><g><title>late_resolve_crate (1,346,424 samples, 0.26%)</title><rect x="89.0724%" y="133" width="0.2551%" height="15" fill="rgb(246,177,23)"/><text x="89.3224%" y="143.50"></text></g><g><title>configure_and_expand (16,800,569 samples, 3.18%)</title><rect x="86.1572%" y="165" width="3.1827%" height="15" fill="rgb(230,62,27)"/><text x="86.4072%" y="175.50">con..</text></g><g><title>resolve_crate (1,598,926 samples, 0.30%)</title><rect x="89.0370%" y="149" width="0.3029%" height="15" fill="rgb(216,154,8)"/><text x="89.2870%" y="159.50"></text></g><g><title>free_global_ctxt (7,266,663 samples, 1.38%)</title><rect x="89.4109%" y="165" width="1.3766%" height="15" fill="rgb(244,35,45)"/><text x="89.6609%" y="175.50"></text></g><g><title>item_attrs (1,229,687 samples, 0.23%)</title><rect x="91.6574%" y="69" width="0.2330%" height="15" fill="rgb(251,115,12)"/><text x="91.9074%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,174,015 samples, 0.22%)</title><rect x="91.6679%" y="53" width="0.2224%" height="15" fill="rgb(240,54,50)"/><text x="91.9179%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,164,462 samples, 0.41%)</title><rect x="91.5927%" y="85" width="0.4100%" height="15" fill="rgb(233,84,52)"/><text x="91.8427%" y="95.50"></text></g><g><title>should_inherit_track_caller (593,184 samples, 0.11%)</title><rect x="91.8903%" y="69" width="0.1124%" height="15" fill="rgb(207,117,47)"/><text x="92.1403%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,854,438 samples, 0.54%)</title><rect x="92.4446%" y="69" width="0.5407%" height="15" fill="rgb(249,43,39)"/><text x="92.6946%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,148,761 samples, 0.22%)</title><rect x="92.9853%" y="69" width="0.2176%" height="15" fill="rgb(209,38,44)"/><text x="93.2353%" y="79.50"></text></g><g><title>optimized_mir (6,267,473 samples, 1.19%)</title><rect x="92.1468%" y="85" width="1.1873%" height="15" fill="rgb(236,212,23)"/><text x="92.3968%" y="95.50"></text></g><g><title>evaluate_obligation (642,164 samples, 0.12%)</title><rect x="94.0110%" y="53" width="0.1217%" height="15" fill="rgb(242,79,21)"/><text x="94.2610%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (3,676,063 samples, 0.70%)</title><rect x="93.5877%" y="69" width="0.6964%" height="15" fill="rgb(211,96,35)"/><text x="93.8377%" y="79.50"></text></g><g><title>specialization_graph_of (2,979,951 samples, 0.56%)</title><rect x="94.4725%" y="69" width="0.5645%" height="15" fill="rgb(253,215,40)"/><text x="94.7225%" y="79.50"></text></g><g><title>impl_trait_ref (1,441,285 samples, 0.27%)</title><rect x="94.7640%" y="53" width="0.2730%" height="15" fill="rgb(211,81,21)"/><text x="95.0140%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,228,091 samples, 0.23%)</title><rect x="94.8044%" y="37" width="0.2327%" height="15" fill="rgb(208,190,38)"/><text x="95.0544%" y="47.50"></text></g><g><title>resolve_instance (9,429,383 samples, 1.79%)</title><rect x="93.3341%" y="85" width="1.7863%" height="15" fill="rgb(235,213,38)"/><text x="93.5841%" y="95.50">r..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (650,287 samples, 0.12%)</title><rect x="95.1204%" y="85" width="0.1232%" height="15" fill="rgb(237,122,38)"/><text x="95.3704%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,268,669 samples, 0.24%)</title><rect x="95.2859%" y="69" width="0.2403%" height="15" fill="rgb(244,218,35)"/><text x="95.5359%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,223,119 samples, 0.23%)</title><rect x="95.2946%" y="53" width="0.2317%" height="15" fill="rgb(240,68,47)"/><text x="95.5446%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,170,909 samples, 0.22%)</title><rect x="95.3045%" y="37" width="0.2218%" height="15" fill="rgb(210,16,53)"/><text x="95.5545%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,658,226 samples, 0.31%)</title><rect x="95.2436%" y="85" width="0.3141%" height="15" fill="rgb(235,124,12)"/><text x="95.4936%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (24,131,781 samples, 4.57%)</title><rect x="91.0568%" y="101" width="4.5716%" height="15" fill="rgb(224,169,11)"/><text x="91.3068%" y="111.50">monom..</text></g><g><title>monomorphization_collector (24,183,322 samples, 4.58%)</title><rect x="91.0563%" y="117" width="4.5813%" height="15" fill="rgb(250,166,2)"/><text x="91.3063%" y="127.50">monom..</text></g><g><title>assert_symbols_are_distinct (2,004,020 samples, 0.38%)</title><rect x="95.6398%" y="101" width="0.3796%" height="15" fill="rgb(242,216,29)"/><text x="95.8898%" y="111.50"></text></g><g><title>symbol_name (1,829,319 samples, 0.35%)</title><rect x="95.6729%" y="85" width="0.3465%" height="15" fill="rgb(230,116,27)"/><text x="95.9229%" y="95.50"></text></g><g><title>cgu_partitioning_place_roots (709,137 samples, 0.13%)</title><rect x="96.0987%" y="85" width="0.1343%" height="15" fill="rgb(228,99,48)"/><text x="96.3487%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (27,442,905 samples, 5.20%)</title><rect x="91.0492%" y="133" width="5.1988%" height="15" fill="rgb(253,11,6)"/><text x="91.2992%" y="143.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (3,222,392 samples, 0.61%)</title><rect x="95.6376%" y="117" width="0.6105%" height="15" fill="rgb(247,143,39)"/><text x="95.8876%" y="127.50"></text></g><g><title>cgu_partitioning (1,206,832 samples, 0.23%)</title><rect x="96.0194%" y="101" width="0.2286%" height="15" fill="rgb(236,97,10)"/><text x="96.2694%" y="111.50"></text></g><g><title>exported_symbols (27,636,277 samples, 5.24%)</title><rect x="91.0337%" y="149" width="5.2355%" height="15" fill="rgb(233,208,19)"/><text x="91.2837%" y="159.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,133,822 samples, 0.21%)</title><rect x="96.6051%" y="133" width="0.2148%" height="15" fill="rgb(216,164,2)"/><text x="96.8551%" y="143.50"></text></g><g><title>optimized_mir (2,935,549 samples, 0.56%)</title><rect x="96.2783%" y="149" width="0.5561%" height="15" fill="rgb(220,129,5)"/><text x="96.5283%" y="159.50"></text></g><g><title>generate_crate_metadata (32,010,931 samples, 6.06%)</title><rect x="90.7875%" y="165" width="6.0642%" height="15" fill="rgb(242,17,10)"/><text x="91.0375%" y="175.50">generate..</text></g><g><title>hir_lowering (1,961,990 samples, 0.37%)</title><rect x="96.8517%" y="165" width="0.3717%" height="15" fill="rgb(242,107,0)"/><text x="97.1017%" y="175.50"></text></g><g><title>finish_ongoing_codegen (6,105,201 samples, 1.16%)</title><rect x="97.2270%" y="149" width="1.1566%" height="15" fill="rgb(251,28,31)"/><text x="97.4770%" y="159.50"></text></g><g><title>link_crate (2,135,022 samples, 0.40%)</title><rect x="98.3835%" y="149" width="0.4045%" height="15" fill="rgb(233,223,10)"/><text x="98.6335%" y="159.50"></text></g><g><title>link_binary (2,102,931 samples, 0.40%)</title><rect x="98.3896%" y="133" width="0.3984%" height="15" fill="rgb(215,21,27)"/><text x="98.6396%" y="143.50"></text></g><g><title>link_rlib (1,499,115 samples, 0.28%)</title><rect x="98.5040%" y="117" width="0.2840%" height="15" fill="rgb(232,23,21)"/><text x="98.7540%" y="127.50"></text></g><g><title>link (8,269,323 samples, 1.57%)</title><rect x="97.2234%" y="165" width="1.5666%" height="15" fill="rgb(244,5,23)"/><text x="97.4734%" y="175.50"></text></g><g><title>parse_crate (3,438,715 samples, 0.65%)</title><rect x="98.7899%" y="165" width="0.6514%" height="15" fill="rgb(226,81,46)"/><text x="99.0399%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,298,953 samples, 0.44%)</title><rect x="99.4838%" y="165" width="0.4355%" height="15" fill="rgb(247,70,30)"/><text x="99.7338%" y="175.50"></text></g><g><title>all (527,866,613 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (527,866,613 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>