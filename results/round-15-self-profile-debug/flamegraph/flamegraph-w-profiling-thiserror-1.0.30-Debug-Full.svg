<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,971,459 samples, 11.09%)</title><rect x="0.5410%" y="229" width="11.0861%" height="15" fill="rgb(227,0,7)"/><text x="0.7910%" y="239.50">LLVM_passes</text></g><g><title>specialization_graph_of (286,123 samples, 0.24%)</title><rect x="14.6699%" y="101" width="0.2445%" height="15" fill="rgb(217,0,24)"/><text x="14.9199%" y="111.50"></text></g><g><title>impl_trait_ref (124,481 samples, 0.11%)</title><rect x="14.8080%" y="85" width="0.1064%" height="15" fill="rgb(221,193,54)"/><text x="15.0580%" y="95.50"></text></g><g><title>resolve_instance (351,394 samples, 0.30%)</title><rect x="14.6240%" y="117" width="0.3003%" height="15" fill="rgb(248,212,6)"/><text x="14.8740%" y="127.50"></text></g><g><title>mir_const (1,274,233 samples, 1.09%)</title><rect x="13.9123%" y="165" width="1.0890%" height="15" fill="rgb(208,68,35)"/><text x="14.1623%" y="175.50"></text></g><g><title>unsafety_check_result (975,271 samples, 0.83%)</title><rect x="14.1678%" y="149" width="0.8335%" height="15" fill="rgb(232,128,0)"/><text x="14.4178%" y="159.50"></text></g><g><title>mir_built (801,878 samples, 0.69%)</title><rect x="14.3160%" y="133" width="0.6853%" height="15" fill="rgb(207,160,47)"/><text x="14.5660%" y="143.50"></text></g><g><title>mir_promoted (1,514,927 samples, 1.29%)</title><rect x="13.7206%" y="181" width="1.2947%" height="15" fill="rgb(228,23,34)"/><text x="13.9706%" y="191.50"></text></g><g><title>MIR_borrow_checking (4,477,648 samples, 3.83%)</title><rect x="11.7627%" y="213" width="3.8268%" height="15" fill="rgb(218,30,26)"/><text x="12.0127%" y="223.50">MIR_..</text></g><g><title>mir_borrowck (4,443,198 samples, 3.80%)</title><rect x="11.7921%" y="197" width="3.7974%" height="15" fill="rgb(220,122,19)"/><text x="12.0421%" y="207.50">mir_..</text></g><g><title>type_op_prove_predicate (614,228 samples, 0.52%)</title><rect x="15.0645%" y="181" width="0.5250%" height="15" fill="rgb(250,228,42)"/><text x="15.3145%" y="191.50"></text></g><g><title>hir_module_items (139,773 samples, 0.12%)</title><rect x="15.5977%" y="213" width="0.1195%" height="15" fill="rgb(240,193,28)"/><text x="15.8477%" y="223.50"></text></g><g><title>codegen_fn_attrs (252,212 samples, 0.22%)</title><rect x="15.8349%" y="181" width="0.2156%" height="15" fill="rgb(216,20,37)"/><text x="16.0849%" y="191.50"></text></g><g><title>check_mod_attrs (353,644 samples, 0.30%)</title><rect x="15.7486%" y="197" width="0.3022%" height="15" fill="rgb(206,188,39)"/><text x="15.9986%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (253,173 samples, 0.22%)</title><rect x="16.1213%" y="197" width="0.2164%" height="15" fill="rgb(217,207,13)"/><text x="16.3713%" y="207.50"></text></g><g><title>misc_checking_1 (776,048 samples, 0.66%)</title><rect x="15.7177%" y="213" width="0.6633%" height="15" fill="rgb(231,73,38)"/><text x="15.9677%" y="223.50"></text></g><g><title>misc_checking_2 (223,912 samples, 0.19%)</title><rect x="16.3810%" y="213" width="0.1914%" height="15" fill="rgb(225,20,46)"/><text x="16.6310%" y="223.50"></text></g><g><title>match_checking (139,442 samples, 0.12%)</title><rect x="16.4532%" y="197" width="0.1192%" height="15" fill="rgb(210,31,41)"/><text x="16.7032%" y="207.50"></text></g><g><title>check_match (127,562 samples, 0.11%)</title><rect x="16.4633%" y="181" width="0.1090%" height="15" fill="rgb(221,200,47)"/><text x="16.7133%" y="191.50"></text></g><g><title>death_checking (275,633 samples, 0.24%)</title><rect x="16.6560%" y="197" width="0.2356%" height="15" fill="rgb(226,26,5)"/><text x="16.9060%" y="207.50"></text></g><g><title>crate_lints (434,935 samples, 0.37%)</title><rect x="16.8939%" y="181" width="0.3717%" height="15" fill="rgb(249,33,26)"/><text x="17.1439%" y="191.50"></text></g><g><title>param_env (238,402 samples, 0.20%)</title><rect x="17.0618%" y="165" width="0.2038%" height="15" fill="rgb(235,183,28)"/><text x="17.3118%" y="175.50"></text></g><g><title>predicates_of (118,191 samples, 0.10%)</title><rect x="17.1646%" y="149" width="0.1010%" height="15" fill="rgb(221,5,38)"/><text x="17.4146%" y="159.50"></text></g><g><title>lint_checking (512,695 samples, 0.44%)</title><rect x="16.8916%" y="197" width="0.4382%" height="15" fill="rgb(247,18,42)"/><text x="17.1416%" y="207.50"></text></g><g><title>privacy_checking_modules (334,313 samples, 0.29%)</title><rect x="17.4189%" y="197" width="0.2857%" height="15" fill="rgb(241,131,45)"/><text x="17.6689%" y="207.50"></text></g><g><title>check_mod_privacy (328,153 samples, 0.28%)</title><rect x="17.4242%" y="181" width="0.2805%" height="15" fill="rgb(249,31,29)"/><text x="17.6742%" y="191.50"></text></g><g><title>misc_checking_3 (1,341,364 samples, 1.15%)</title><rect x="16.5723%" y="213" width="1.1464%" height="15" fill="rgb(225,111,53)"/><text x="16.8223%" y="223.50"></text></g><g><title>evaluate_obligation (454,666 samples, 0.39%)</title><rect x="18.0922%" y="149" width="0.3886%" height="15" fill="rgb(238,160,17)"/><text x="18.3422%" y="159.50"></text></g><g><title>layout_of (157,391 samples, 0.13%)</title><rect x="18.5667%" y="149" width="0.1345%" height="15" fill="rgb(214,148,48)"/><text x="18.8167%" y="159.50"></text></g><g><title>param_env (145,181 samples, 0.12%)</title><rect x="18.7012%" y="149" width="0.1241%" height="15" fill="rgb(232,36,49)"/><text x="18.9512%" y="159.50"></text></g><g><title>predicates_of (117,912 samples, 0.10%)</title><rect x="18.8253%" y="149" width="0.1008%" height="15" fill="rgb(209,103,24)"/><text x="19.0753%" y="159.50"></text></g><g><title>object_safety_violations (1,325,494 samples, 1.13%)</title><rect x="17.7968%" y="165" width="1.1328%" height="15" fill="rgb(229,88,8)"/><text x="18.0468%" y="175.50"></text></g><g><title>coherent_trait (1,791,779 samples, 1.53%)</title><rect x="17.7703%" y="181" width="1.5313%" height="15" fill="rgb(213,181,19)"/><text x="18.0203%" y="191.50"></text></g><g><title>specialization_graph_of (435,244 samples, 0.37%)</title><rect x="18.9297%" y="165" width="0.3720%" height="15" fill="rgb(254,191,54)"/><text x="19.1797%" y="175.50"></text></g><g><title>coherence_checking (1,842,640 samples, 1.57%)</title><rect x="17.7548%" y="197" width="1.5748%" height="15" fill="rgb(241,83,37)"/><text x="18.0048%" y="207.50"></text></g><g><title>associated_item (119,311 samples, 0.10%)</title><rect x="21.4435%" y="133" width="0.1020%" height="15" fill="rgb(233,36,39)"/><text x="21.6935%" y="143.50"></text></g><g><title>associated_items (178,471 samples, 0.15%)</title><rect x="21.3974%" y="149" width="0.1525%" height="15" fill="rgb(226,3,54)"/><text x="21.6474%" y="159.50"></text></g><g><title>impl_parent (174,014 samples, 0.15%)</title><rect x="21.7943%" y="53" width="0.1487%" height="15" fill="rgb(245,192,40)"/><text x="22.0443%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (123,261 samples, 0.11%)</title><rect x="21.8377%" y="37" width="0.1053%" height="15" fill="rgb(238,167,29)"/><text x="22.0877%" y="47.50"></text></g><g><title>impl_trait_ref (659,916 samples, 0.56%)</title><rect x="21.9430%" y="53" width="0.5640%" height="15" fill="rgb(232,182,51)"/><text x="22.1930%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (610,675 samples, 0.52%)</title><rect x="21.9851%" y="37" width="0.5219%" height="15" fill="rgb(231,60,39)"/><text x="22.2351%" y="47.50"></text></g><g><title>adt_destructor (1,158,273 samples, 0.99%)</title><rect x="21.5852%" y="117" width="0.9899%" height="15" fill="rgb(208,69,12)"/><text x="21.8352%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,156,643 samples, 0.99%)</title><rect x="21.5866%" y="101" width="0.9885%" height="15" fill="rgb(235,93,37)"/><text x="21.8366%" y="111.50"></text></g><g><title>coherent_trait (1,150,973 samples, 0.98%)</title><rect x="21.5914%" y="85" width="0.9837%" height="15" fill="rgb(213,116,39)"/><text x="21.8414%" y="95.50"></text></g><g><title>specialization_graph_of (1,146,873 samples, 0.98%)</title><rect x="21.5949%" y="69" width="0.9802%" height="15" fill="rgb(222,207,29)"/><text x="21.8449%" y="79.50"></text></g><g><title>dropck_outlives (1,197,433 samples, 1.02%)</title><rect x="21.5536%" y="149" width="1.0234%" height="15" fill="rgb(206,96,30)"/><text x="21.8036%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,167,953 samples, 1.00%)</title><rect x="21.5788%" y="133" width="0.9982%" height="15" fill="rgb(218,138,4)"/><text x="21.8288%" y="143.50"></text></g><g><title>evaluate_obligation (146,792 samples, 0.13%)</title><rect x="22.7019%" y="133" width="0.1255%" height="15" fill="rgb(250,191,14)"/><text x="22.9519%" y="143.50"></text></g><g><title>method_autoderef_steps (239,693 samples, 0.20%)</title><rect x="22.6427%" y="149" width="0.2049%" height="15" fill="rgb(239,60,40)"/><text x="22.8927%" y="159.50"></text></g><g><title>item_bodies_checking (4,194,825 samples, 3.59%)</title><rect x="19.3575%" y="197" width="3.5851%" height="15" fill="rgb(206,27,48)"/><text x="19.6075%" y="207.50">item..</text></g><g><title>typeck_item_bodies (4,191,105 samples, 3.58%)</title><rect x="19.3607%" y="181" width="3.5819%" height="15" fill="rgb(225,35,8)"/><text x="19.6107%" y="191.50">type..</text></g><g><title>typeck (4,163,224 samples, 3.56%)</title><rect x="19.3845%" y="165" width="3.5581%" height="15" fill="rgb(250,213,24)"/><text x="19.6345%" y="175.50">type..</text></g><g><title>item_types_checking (495,196 samples, 0.42%)</title><rect x="22.9426%" y="197" width="0.4232%" height="15" fill="rgb(247,123,22)"/><text x="23.1926%" y="207.50"></text></g><g><title>check_mod_item_types (488,006 samples, 0.42%)</title><rect x="22.9487%" y="181" width="0.4171%" height="15" fill="rgb(231,138,38)"/><text x="23.1987%" y="191.50"></text></g><g><title>fn_sig (161,652 samples, 0.14%)</title><rect x="23.5239%" y="165" width="0.1382%" height="15" fill="rgb(231,145,46)"/><text x="23.7739%" y="175.50"></text></g><g><title>resolve_lifetimes (169,101 samples, 0.14%)</title><rect x="23.7708%" y="133" width="0.1445%" height="15" fill="rgb(251,118,11)"/><text x="24.0208%" y="143.50"></text></g><g><title>is_late_bound_map (231,071 samples, 0.20%)</title><rect x="23.7409%" y="149" width="0.1975%" height="15" fill="rgb(217,147,25)"/><text x="23.9909%" y="159.50"></text></g><g><title>generics_of (424,095 samples, 0.36%)</title><rect x="23.6620%" y="165" width="0.3625%" height="15" fill="rgb(247,81,37)"/><text x="23.9120%" y="175.50"></text></g><g><title>explicit_predicates_of (148,043 samples, 0.13%)</title><rect x="24.1254%" y="133" width="0.1265%" height="15" fill="rgb(209,12,38)"/><text x="24.3754%" y="143.50"></text></g><g><title>predicates_of (240,534 samples, 0.21%)</title><rect x="24.0566%" y="165" width="0.2056%" height="15" fill="rgb(227,1,9)"/><text x="24.3066%" y="175.50"></text></g><g><title>predicates_defined_on (203,024 samples, 0.17%)</title><rect x="24.0887%" y="149" width="0.1735%" height="15" fill="rgb(248,47,43)"/><text x="24.3387%" y="159.50"></text></g><g><title>type_collecting (1,596,888 samples, 1.36%)</title><rect x="23.3676%" y="197" width="1.3648%" height="15" fill="rgb(221,10,30)"/><text x="23.6176%" y="207.50"></text></g><g><title>collect_mod_item_types (1,575,177 samples, 1.35%)</title><rect x="23.3862%" y="181" width="1.3462%" height="15" fill="rgb(210,229,1)"/><text x="23.6362%" y="191.50"></text></g><g><title>type_of (488,524 samples, 0.42%)</title><rect x="24.3149%" y="165" width="0.4175%" height="15" fill="rgb(222,148,37)"/><text x="24.5649%" y="175.50"></text></g><g><title>evaluate_obligation (359,925 samples, 0.31%)</title><rect x="25.5002%" y="165" width="0.3076%" height="15" fill="rgb(234,67,33)"/><text x="25.7502%" y="175.50"></text></g><g><title>implied_outlives_bounds (157,551 samples, 0.13%)</title><rect x="25.8078%" y="165" width="0.1347%" height="15" fill="rgb(247,98,35)"/><text x="26.0578%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,478,297 samples, 1.26%)</title><rect x="24.8312%" y="181" width="1.2634%" height="15" fill="rgb(247,138,52)"/><text x="25.0812%" y="191.50"></text></g><g><title>param_env (169,371 samples, 0.14%)</title><rect x="27.2836%" y="165" width="0.1448%" height="15" fill="rgb(213,79,30)"/><text x="27.5336%" y="175.50"></text></g><g><title>check_item_well_formed (2,167,812 samples, 1.85%)</title><rect x="26.0946%" y="181" width="1.8527%" height="15" fill="rgb(246,177,23)"/><text x="26.3446%" y="191.50">c..</text></g><g><title>trait_impls_of (559,336 samples, 0.48%)</title><rect x="27.4693%" y="165" width="0.4780%" height="15" fill="rgb(230,62,27)"/><text x="27.7193%" y="175.50"></text></g><g><title>implementations_of_trait (154,351 samples, 0.13%)</title><rect x="27.8154%" y="149" width="0.1319%" height="15" fill="rgb(216,154,8)"/><text x="28.0654%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (122,041 samples, 0.10%)</title><rect x="27.8430%" y="133" width="0.1043%" height="15" fill="rgb(244,35,45)"/><text x="28.0930%" y="143.50"></text></g><g><title>evaluate_obligation (206,161 samples, 0.18%)</title><rect x="28.2391%" y="165" width="0.1762%" height="15" fill="rgb(251,115,12)"/><text x="28.4891%" y="175.50"></text></g><g><title>analysis (19,808,933 samples, 16.93%)</title><rect x="11.6271%" y="229" width="16.9298%" height="15" fill="rgb(240,54,50)"/><text x="11.8771%" y="239.50">analysis</text></g><g><title>type_check_crate (12,681,297 samples, 10.84%)</title><rect x="17.7187%" y="213" width="10.8381%" height="15" fill="rgb(233,84,52)"/><text x="17.9687%" y="223.50">type_check_crate</text></g><g><title>wf_checking (4,472,788 samples, 3.82%)</title><rect x="24.7342%" y="197" width="3.8227%" height="15" fill="rgb(207,117,47)"/><text x="24.9842%" y="207.50">wf_c..</text></g><g><title>check_trait_item_well_formed (713,198 samples, 0.61%)</title><rect x="27.9473%" y="181" width="0.6095%" height="15" fill="rgb(249,43,39)"/><text x="28.1973%" y="191.50"></text></g><g><title>item_attrs (178,061 samples, 0.15%)</title><rect x="35.1966%" y="165" width="0.1522%" height="15" fill="rgb(209,38,44)"/><text x="35.4466%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (175,571 samples, 0.15%)</title><rect x="35.1987%" y="149" width="0.1501%" height="15" fill="rgb(236,212,23)"/><text x="35.4487%" y="159.50"></text></g><g><title>codegen_fn_attrs (200,182 samples, 0.17%)</title><rect x="35.1793%" y="181" width="0.1711%" height="15" fill="rgb(242,79,21)"/><text x="35.4293%" y="191.50"></text></g><g><title>layout_of (145,401 samples, 0.12%)</title><rect x="35.5775%" y="117" width="0.1243%" height="15" fill="rgb(211,96,35)"/><text x="35.8275%" y="127.50"></text></g><g><title>layout_of (166,402 samples, 0.14%)</title><rect x="35.5694%" y="133" width="0.1422%" height="15" fill="rgb(253,215,40)"/><text x="35.8194%" y="143.50"></text></g><g><title>layout_of (211,682 samples, 0.18%)</title><rect x="35.5503%" y="149" width="0.1809%" height="15" fill="rgb(211,81,21)"/><text x="35.8003%" y="159.50"></text></g><g><title>layout_of (303,764 samples, 0.26%)</title><rect x="35.4841%" y="165" width="0.2596%" height="15" fill="rgb(208,190,38)"/><text x="35.7341%" y="175.50"></text></g><g><title>layout_of (481,966 samples, 0.41%)</title><rect x="35.3648%" y="181" width="0.4119%" height="15" fill="rgb(235,213,38)"/><text x="35.6148%" y="191.50"></text></g><g><title>predicates_of (242,370 samples, 0.21%)</title><rect x="36.0751%" y="165" width="0.2071%" height="15" fill="rgb(237,122,38)"/><text x="36.3251%" y="175.50"></text></g><g><title>predicates_defined_on (185,530 samples, 0.16%)</title><rect x="36.1237%" y="149" width="0.1586%" height="15" fill="rgb(244,218,35)"/><text x="36.3737%" y="159.50"></text></g><g><title>param_env (592,143 samples, 0.51%)</title><rect x="35.7767%" y="181" width="0.5061%" height="15" fill="rgb(240,68,47)"/><text x="36.0267%" y="191.50"></text></g><g><title>fn_abi_of_instance (1,714,807 samples, 1.47%)</title><rect x="34.8952%" y="197" width="1.4656%" height="15" fill="rgb(210,16,53)"/><text x="35.1452%" y="207.50"></text></g><g><title>codegen_module (8,185,106 samples, 7.00%)</title><rect x="29.6551%" y="213" width="6.9954%" height="15" fill="rgb(235,124,12)"/><text x="29.9051%" y="223.50">codegen_m..</text></g><g><title>layout_of (247,433 samples, 0.21%)</title><rect x="36.4391%" y="197" width="0.2115%" height="15" fill="rgb(224,169,11)"/><text x="36.6891%" y="207.50"></text></g><g><title>codegen_crate (9,529,902 samples, 8.14%)</title><rect x="28.5634%" y="229" width="8.1448%" height="15" fill="rgb(250,166,2)"/><text x="28.8134%" y="239.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (36,463,362 samples, 31.16%)</title><rect x="36.7980%" y="213" width="31.1635%" height="15" fill="rgb(242,216,29)"/><text x="37.0480%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (34,913,255 samples, 29.84%)</title><rect x="38.1228%" y="197" width="29.8387%" height="15" fill="rgb(230,116,27)"/><text x="38.3728%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (38,576,513 samples, 32.97%)</title><rect x="36.7081%" y="229" width="32.9695%" height="15" fill="rgb(228,99,48)"/><text x="36.9581%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,007,970 samples, 1.72%)</title><rect x="67.9615%" y="213" width="1.7161%" height="15" fill="rgb(253,11,6)"/><text x="68.2115%" y="223.50"></text></g><g><title>AST_validation (129,662 samples, 0.11%)</title><rect x="69.8339%" y="213" width="0.1108%" height="15" fill="rgb(247,143,39)"/><text x="70.0839%" y="223.50"></text></g><g><title>metadata_register_crate (8,517,841 samples, 7.28%)</title><rect x="79.8640%" y="181" width="7.2798%" height="15" fill="rgb(236,97,10)"/><text x="80.1140%" y="191.50">metadata_r..</text></g><g><title>metadata_register_crate (978,601 samples, 0.84%)</title><rect x="86.3074%" y="165" width="0.8364%" height="15" fill="rgb(233,208,19)"/><text x="86.5574%" y="175.50"></text></g><g><title>macro_expand_crate (20,050,685 samples, 17.14%)</title><rect x="70.0477%" y="213" width="17.1364%" height="15" fill="rgb(216,164,2)"/><text x="70.2977%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (20,026,765 samples, 17.12%)</title><rect x="70.0681%" y="197" width="17.1159%" height="15" fill="rgb(220,129,5)"/><text x="70.3181%" y="207.50">expand_crate</text></g><g><title>finalize_imports (258,843 samples, 0.22%)</title><rect x="87.2803%" y="197" width="0.2212%" height="15" fill="rgb(242,17,10)"/><text x="87.5303%" y="207.50"></text></g><g><title>late_resolve_crate (451,125 samples, 0.39%)</title><rect x="87.5122%" y="197" width="0.3856%" height="15" fill="rgb(242,107,0)"/><text x="87.7622%" y="207.50"></text></g><g><title>configure_and_expand (21,380,110 samples, 18.27%)</title><rect x="69.6776%" y="229" width="18.2726%" height="15" fill="rgb(251,28,31)"/><text x="69.9276%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (793,078 samples, 0.68%)</title><rect x="87.2724%" y="213" width="0.6778%" height="15" fill="rgb(233,223,10)"/><text x="87.5224%" y="223.50"></text></g><g><title>early_lint_checks (168,292 samples, 0.14%)</title><rect x="88.0053%" y="229" width="0.1438%" height="15" fill="rgb(215,21,27)"/><text x="88.2553%" y="239.50"></text></g><g><title>free_global_ctxt (2,263,194 samples, 1.93%)</title><rect x="88.1492%" y="229" width="1.9342%" height="15" fill="rgb(232,23,21)"/><text x="88.3992%" y="239.50">f..</text></g><g><title>item_attrs (176,053 samples, 0.15%)</title><rect x="90.9797%" y="133" width="0.1505%" height="15" fill="rgb(244,5,23)"/><text x="91.2297%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (168,413 samples, 0.14%)</title><rect x="90.9862%" y="117" width="0.1439%" height="15" fill="rgb(226,81,46)"/><text x="91.2362%" y="127.50"></text></g><g><title>codegen_fn_attrs (311,664 samples, 0.27%)</title><rect x="90.9393%" y="149" width="0.2664%" height="15" fill="rgb(247,70,30)"/><text x="91.1893%" y="159.50"></text></g><g><title>is_reachable_non_generic (254,403 samples, 0.22%)</title><rect x="91.2572%" y="149" width="0.2174%" height="15" fill="rgb(212,68,19)"/><text x="91.5072%" y="159.50"></text></g><g><title>reachable_non_generics (241,543 samples, 0.21%)</title><rect x="91.2682%" y="133" width="0.2064%" height="15" fill="rgb(240,187,13)"/><text x="91.5182%" y="143.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (238,933 samples, 0.20%)</title><rect x="91.2705%" y="117" width="0.2042%" height="15" fill="rgb(223,113,26)"/><text x="91.5205%" y="127.50"></text></g><g><title>adt_sized_constraint (122,862 samples, 0.11%)</title><rect x="91.6886%" y="69" width="0.1050%" height="15" fill="rgb(206,192,2)"/><text x="91.9386%" y="79.50"></text></g><g><title>adt_sized_constraint (137,572 samples, 0.12%)</title><rect x="91.6798%" y="85" width="0.1176%" height="15" fill="rgb(241,108,4)"/><text x="91.9298%" y="95.50"></text></g><g><title>adt_sized_constraint (170,002 samples, 0.15%)</title><rect x="91.6546%" y="101" width="0.1453%" height="15" fill="rgb(247,173,49)"/><text x="91.9046%" y="111.50"></text></g><g><title>adt_sized_constraint (208,913 samples, 0.18%)</title><rect x="91.6224%" y="117" width="0.1785%" height="15" fill="rgb(224,114,35)"/><text x="91.8724%" y="127.50"></text></g><g><title>layout_of (136,481 samples, 0.12%)</title><rect x="91.8025%" y="117" width="0.1166%" height="15" fill="rgb(245,159,27)"/><text x="92.0525%" y="127.50"></text></g><g><title>layout_of (380,784 samples, 0.33%)</title><rect x="91.6035%" y="133" width="0.3254%" height="15" fill="rgb(245,172,44)"/><text x="91.8535%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (192,422 samples, 0.16%)</title><rect x="91.9289%" y="133" width="0.1645%" height="15" fill="rgb(236,23,11)"/><text x="92.1789%" y="143.50"></text></g><g><title>optimized_mir (835,549 samples, 0.71%)</title><rect x="91.4747%" y="149" width="0.7141%" height="15" fill="rgb(205,117,38)"/><text x="91.7247%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (350,793 samples, 0.30%)</title><rect x="92.2825%" y="133" width="0.2998%" height="15" fill="rgb(237,72,25)"/><text x="92.5325%" y="143.50"></text></g><g><title>specialization_graph_of (382,215 samples, 0.33%)</title><rect x="92.6593%" y="133" width="0.3267%" height="15" fill="rgb(244,70,9)"/><text x="92.9093%" y="143.50"></text></g><g><title>impl_trait_ref (201,963 samples, 0.17%)</title><rect x="92.8133%" y="117" width="0.1726%" height="15" fill="rgb(217,125,39)"/><text x="93.0633%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (177,333 samples, 0.15%)</title><rect x="92.8344%" y="101" width="0.1516%" height="15" fill="rgb(235,36,10)"/><text x="93.0844%" y="111.50"></text></g><g><title>resolve_instance (1,000,080 samples, 0.85%)</title><rect x="92.1888%" y="149" width="0.8547%" height="15" fill="rgb(251,123,47)"/><text x="92.4388%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (2,930,451 samples, 2.50%)</title><rect x="90.7590%" y="165" width="2.5045%" height="15" fill="rgb(221,13,13)"/><text x="91.0090%" y="175.50">mo..</text></g><g><title>upstream_monomorphizations_for (257,503 samples, 0.22%)</title><rect x="93.0435%" y="149" width="0.2201%" height="15" fill="rgb(238,131,9)"/><text x="93.2935%" y="159.50"></text></g><g><title>upstream_monomorphizations (252,733 samples, 0.22%)</title><rect x="93.0476%" y="133" width="0.2160%" height="15" fill="rgb(211,50,8)"/><text x="93.2976%" y="143.50"></text></g><g><title>exported_symbols (176,252 samples, 0.15%)</title><rect x="93.1129%" y="117" width="0.1506%" height="15" fill="rgb(245,182,24)"/><text x="93.3629%" y="127.50"></text></g><g><title>metadata_decode_entry_exported_symbols (166,912 samples, 0.14%)</title><rect x="93.1209%" y="101" width="0.1427%" height="15" fill="rgb(242,14,37)"/><text x="93.3709%" y="111.50"></text></g><g><title>monomorphization_collector (2,956,151 samples, 2.53%)</title><rect x="90.7560%" y="181" width="2.5265%" height="15" fill="rgb(246,228,12)"/><text x="91.0060%" y="191.50">mo..</text></g><g><title>assert_symbols_are_distinct (187,712 samples, 0.16%)</title><rect x="93.2849%" y="165" width="0.1604%" height="15" fill="rgb(213,55,15)"/><text x="93.5349%" y="175.50"></text></g><g><title>symbol_name (174,742 samples, 0.15%)</title><rect x="93.2960%" y="149" width="0.1493%" height="15" fill="rgb(209,9,3)"/><text x="93.5460%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (3,316,606 samples, 2.83%)</title><rect x="90.7228%" y="197" width="2.8345%" height="15" fill="rgb(230,59,30)"/><text x="90.9728%" y="207.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (321,624 samples, 0.27%)</title><rect x="93.2825%" y="181" width="0.2749%" height="15" fill="rgb(209,121,21)"/><text x="93.5325%" y="191.50"></text></g><g><title>cgu_partitioning (131,072 samples, 0.11%)</title><rect x="93.4453%" y="165" width="0.1120%" height="15" fill="rgb(220,109,13)"/><text x="93.6953%" y="175.50"></text></g><g><title>exported_symbols (3,376,676 samples, 2.89%)</title><rect x="90.7026%" y="213" width="2.8859%" height="15" fill="rgb(232,18,1)"/><text x="90.9526%" y="223.50">ex..</text></g><g><title>optimized_mir (778,848 samples, 0.67%)</title><rect x="93.6588%" y="213" width="0.6656%" height="15" fill="rgb(215,41,42)"/><text x="93.9088%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (289,404 samples, 0.25%)</title><rect x="94.0771%" y="197" width="0.2473%" height="15" fill="rgb(224,123,36)"/><text x="94.3271%" y="207.50"></text></g><g><title>generate_crate_metadata (5,018,094 samples, 4.29%)</title><rect x="90.0834%" y="229" width="4.2887%" height="15" fill="rgb(240,125,3)"/><text x="90.3334%" y="239.50">gener..</text></g><g><title>hir_lowering (870,739 samples, 0.74%)</title><rect x="94.3721%" y="229" width="0.7442%" height="15" fill="rgb(205,98,50)"/><text x="94.6221%" y="239.50"></text></g><g><title>finish_ongoing_codegen (2,611,828 samples, 2.23%)</title><rect x="95.1742%" y="213" width="2.2322%" height="15" fill="rgb(205,185,37)"/><text x="95.4242%" y="223.50">f..</text></g><g><title>link_binary_remove_temps (196,902 samples, 0.17%)</title><rect x="97.6512%" y="181" width="0.1683%" height="15" fill="rgb(238,207,15)"/><text x="97.9012%" y="191.50"></text></g><g><title>link_crate (1,151,812 samples, 0.98%)</title><rect x="97.4064%" y="213" width="0.9844%" height="15" fill="rgb(213,199,42)"/><text x="97.6564%" y="223.50"></text></g><g><title>link_binary (1,138,712 samples, 0.97%)</title><rect x="97.4176%" y="197" width="0.9732%" height="15" fill="rgb(235,201,11)"/><text x="97.6676%" y="207.50"></text></g><g><title>link_rlib (668,477 samples, 0.57%)</title><rect x="97.8195%" y="181" width="0.5713%" height="15" fill="rgb(207,46,11)"/><text x="98.0695%" y="191.50"></text></g><g><title>link (3,837,181 samples, 3.28%)</title><rect x="95.1163%" y="229" width="3.2795%" height="15" fill="rgb(241,35,35)"/><text x="95.3663%" y="239.50">link</text></g><g><title>parse_crate (637,127 samples, 0.54%)</title><rect x="98.3958%" y="229" width="0.5445%" height="15" fill="rgb(243,32,47)"/><text x="98.6458%" y="239.50"></text></g><g><title>prepare_outputs (348,724 samples, 0.30%)</title><rect x="98.9476%" y="229" width="0.2980%" height="15" fill="rgb(247,202,23)"/><text x="99.1976%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (423,104 samples, 0.36%)</title><rect x="99.2457%" y="229" width="0.3616%" height="15" fill="rgb(219,102,11)"/><text x="99.4957%" y="239.50"></text></g><g><title>setup_global_ctxt (126,931 samples, 0.11%)</title><rect x="99.6118%" y="229" width="0.1085%" height="15" fill="rgb(243,110,44)"/><text x="99.8618%" y="239.50"></text></g><g><title>all (117,006,645 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (117,006,645 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (327,234 samples, 0.28%)</title><rect x="99.7203%" y="229" width="0.2797%" height="15" fill="rgb(226,22,26)"/><text x="99.9703%" y="239.50"></text></g></svg></svg>