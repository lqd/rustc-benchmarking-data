<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,021,241 samples, 8.09%)</title><rect x="1.1822%" y="181" width="8.0942%" height="15" fill="rgb(227,0,7)"/><text x="1.4322%" y="191.50">LLVM_passes</text></g><g><title>param_env (100,830 samples, 0.14%)</title><rect x="13.2532%" y="101" width="0.1355%" height="15" fill="rgb(217,0,24)"/><text x="13.5032%" y="111.50"></text></g><g><title>is_copy_raw (229,701 samples, 0.31%)</title><rect x="14.3534%" y="69" width="0.3088%" height="15" fill="rgb(221,193,54)"/><text x="14.6034%" y="79.50"></text></g><g><title>evaluate_obligation (176,251 samples, 0.24%)</title><rect x="14.4253%" y="53" width="0.2369%" height="15" fill="rgb(248,212,6)"/><text x="14.6753%" y="63.50"></text></g><g><title>thir_body (212,214 samples, 0.29%)</title><rect x="14.8395%" y="69" width="0.2853%" height="15" fill="rgb(208,68,35)"/><text x="15.0895%" y="79.50"></text></g><g><title>mir_const (1,634,575 samples, 2.20%)</title><rect x="12.9326%" y="117" width="2.1973%" height="15" fill="rgb(232,128,0)"/><text x="13.1826%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,295,244 samples, 1.74%)</title><rect x="13.3888%" y="101" width="1.7412%" height="15" fill="rgb(207,160,47)"/><text x="13.6388%" y="111.50"></text></g><g><title>mir_built (1,151,262 samples, 1.55%)</title><rect x="13.5823%" y="85" width="1.5476%" height="15" fill="rgb(228,23,34)"/><text x="13.8323%" y="95.50"></text></g><g><title>mir_promoted (2,142,053 samples, 2.88%)</title><rect x="12.6212%" y="133" width="2.8795%" height="15" fill="rgb(218,30,26)"/><text x="12.8712%" y="143.50">mi..</text></g><g><title>mir_const_qualif (275,823 samples, 0.37%)</title><rect x="15.1299%" y="117" width="0.3708%" height="15" fill="rgb(220,122,19)"/><text x="15.3799%" y="127.50"></text></g><g><title>mir_const (206,972 samples, 0.28%)</title><rect x="15.2225%" y="101" width="0.2782%" height="15" fill="rgb(250,228,42)"/><text x="15.4725%" y="111.50"></text></g><g><title>unsafety_check_result (145,092 samples, 0.20%)</title><rect x="15.3057%" y="85" width="0.1950%" height="15" fill="rgb(240,193,28)"/><text x="15.5557%" y="95.50"></text></g><g><title>mir_built (95,221 samples, 0.13%)</title><rect x="15.3727%" y="69" width="0.1280%" height="15" fill="rgb(216,20,37)"/><text x="15.6227%" y="79.50"></text></g><g><title>type_op_prove_predicate (151,202 samples, 0.20%)</title><rect x="15.5849%" y="133" width="0.2033%" height="15" fill="rgb(206,188,39)"/><text x="15.8349%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,666,377 samples, 6.27%)</title><rect x="9.5178%" y="165" width="6.2729%" height="15" fill="rgb(217,207,13)"/><text x="9.7678%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (4,634,487 samples, 6.23%)</title><rect x="9.5606%" y="149" width="6.2300%" height="15" fill="rgb(231,73,38)"/><text x="9.8106%" y="159.50">mir_borr..</text></g><g><title>MIR_effect_checking (155,321 samples, 0.21%)</title><rect x="15.7906%" y="165" width="0.2088%" height="15" fill="rgb(225,20,46)"/><text x="16.0406%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (119,431 samples, 0.16%)</title><rect x="15.8389%" y="149" width="0.1605%" height="15" fill="rgb(210,31,41)"/><text x="16.0889%" y="159.50"></text></g><g><title>hir_module_items (122,041 samples, 0.16%)</title><rect x="15.9994%" y="165" width="0.1641%" height="15" fill="rgb(221,200,47)"/><text x="16.2494%" y="175.50"></text></g><g><title>item_attrs (120,443 samples, 0.16%)</title><rect x="16.7137%" y="85" width="0.1619%" height="15" fill="rgb(226,26,5)"/><text x="16.9637%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,523 samples, 0.15%)</title><rect x="16.7284%" y="69" width="0.1472%" height="15" fill="rgb(249,33,26)"/><text x="16.9784%" y="79.50"></text></g><g><title>codegen_fn_attrs (187,183 samples, 0.25%)</title><rect x="16.6821%" y="101" width="0.2516%" height="15" fill="rgb(235,183,28)"/><text x="16.9321%" y="111.50"></text></g><g><title>should_inherit_track_caller (269,713 samples, 0.36%)</title><rect x="16.5760%" y="117" width="0.3626%" height="15" fill="rgb(221,5,38)"/><text x="16.8260%" y="127.50"></text></g><g><title>codegen_fn_attrs (440,315 samples, 0.59%)</title><rect x="16.3929%" y="133" width="0.5919%" height="15" fill="rgb(247,18,42)"/><text x="16.6429%" y="143.50"></text></g><g><title>check_mod_attrs (560,325 samples, 0.75%)</title><rect x="16.2320%" y="149" width="0.7532%" height="15" fill="rgb(241,131,45)"/><text x="16.4820%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (217,032 samples, 0.29%)</title><rect x="17.1083%" y="149" width="0.2917%" height="15" fill="rgb(249,31,29)"/><text x="17.3583%" y="159.50"></text></g><g><title>misc_checking_1 (960,779 samples, 1.29%)</title><rect x="16.1642%" y="165" width="1.2915%" height="15" fill="rgb(225,111,53)"/><text x="16.4142%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (156,102 samples, 0.21%)</title><rect x="17.4591%" y="149" width="0.2098%" height="15" fill="rgb(238,160,17)"/><text x="17.7091%" y="159.50"></text></g><g><title>check_mod_liveness (119,861 samples, 0.16%)</title><rect x="17.5078%" y="133" width="0.1611%" height="15" fill="rgb(214,148,48)"/><text x="17.7578%" y="143.50"></text></g><g><title>misc_checking_2 (357,184 samples, 0.48%)</title><rect x="17.4558%" y="165" width="0.4802%" height="15" fill="rgb(232,36,49)"/><text x="17.7058%" y="175.50"></text></g><g><title>match_checking (198,582 samples, 0.27%)</title><rect x="17.6690%" y="149" width="0.2669%" height="15" fill="rgb(209,103,24)"/><text x="17.9190%" y="159.50"></text></g><g><title>check_match (185,302 samples, 0.25%)</title><rect x="17.6868%" y="133" width="0.2491%" height="15" fill="rgb(229,88,8)"/><text x="17.9368%" y="143.50"></text></g><g><title>check_private_in_public (88,631 samples, 0.12%)</title><rect x="17.9504%" y="149" width="0.1191%" height="15" fill="rgb(213,181,19)"/><text x="18.2004%" y="159.50"></text></g><g><title>death_checking (233,033 samples, 0.31%)</title><rect x="18.0696%" y="149" width="0.3133%" height="15" fill="rgb(254,191,54)"/><text x="18.3196%" y="159.50"></text></g><g><title>item_attrs (119,231 samples, 0.16%)</title><rect x="18.2225%" y="133" width="0.1603%" height="15" fill="rgb(241,83,37)"/><text x="18.4725%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (117,541 samples, 0.16%)</title><rect x="18.2248%" y="117" width="0.1580%" height="15" fill="rgb(233,36,39)"/><text x="18.4748%" y="127.50"></text></g><g><title>eval_to_const_value_raw (160,932 samples, 0.22%)</title><rect x="18.7469%" y="117" width="0.2163%" height="15" fill="rgb(226,3,54)"/><text x="18.9969%" y="127.50"></text></g><g><title>eval_to_const_value_raw (150,242 samples, 0.20%)</title><rect x="18.7613%" y="101" width="0.2020%" height="15" fill="rgb(245,192,40)"/><text x="19.0113%" y="111.50"></text></g><g><title>eval_to_allocation_raw (143,002 samples, 0.19%)</title><rect x="18.7710%" y="85" width="0.1922%" height="15" fill="rgb(238,167,29)"/><text x="19.0210%" y="95.50"></text></g><g><title>param_env (120,961 samples, 0.16%)</title><rect x="18.9632%" y="117" width="0.1626%" height="15" fill="rgb(232,182,51)"/><text x="19.2132%" y="127.50"></text></g><g><title>crate_lints (902,059 samples, 1.21%)</title><rect x="18.3854%" y="133" width="1.2126%" height="15" fill="rgb(231,60,39)"/><text x="18.6354%" y="143.50"></text></g><g><title>type_of (351,273 samples, 0.47%)</title><rect x="19.1258%" y="117" width="0.4722%" height="15" fill="rgb(208,69,12)"/><text x="19.3758%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (253,522 samples, 0.34%)</title><rect x="19.2572%" y="101" width="0.3408%" height="15" fill="rgb(235,93,37)"/><text x="19.5072%" y="111.50"></text></g><g><title>lint_checking (962,830 samples, 1.29%)</title><rect x="18.3828%" y="149" width="1.2943%" height="15" fill="rgb(213,116,39)"/><text x="18.6328%" y="159.50"></text></g><g><title>privacy_access_levels (81,991 samples, 0.11%)</title><rect x="19.6771%" y="149" width="0.1102%" height="15" fill="rgb(222,207,29)"/><text x="19.9271%" y="159.50"></text></g><g><title>privacy_checking_modules (87,840 samples, 0.12%)</title><rect x="19.7873%" y="149" width="0.1181%" height="15" fill="rgb(206,96,30)"/><text x="20.0373%" y="159.50"></text></g><g><title>check_mod_privacy (86,560 samples, 0.12%)</title><rect x="19.7891%" y="133" width="0.1164%" height="15" fill="rgb(218,138,4)"/><text x="20.0391%" y="143.50"></text></g><g><title>misc_checking_3 (1,476,325 samples, 1.98%)</title><rect x="17.9359%" y="165" width="1.9846%" height="15" fill="rgb(250,191,14)"/><text x="18.1859%" y="175.50">m..</text></g><g><title>adt_destructor (87,210 samples, 0.12%)</title><rect x="20.0665%" y="117" width="0.1172%" height="15" fill="rgb(239,60,40)"/><text x="20.3165%" y="127.50"></text></g><g><title>coherent_trait (75,620 samples, 0.10%)</title><rect x="20.0820%" y="101" width="0.1017%" height="15" fill="rgb(206,27,48)"/><text x="20.3320%" y="111.50"></text></g><g><title>param_env (154,922 samples, 0.21%)</title><rect x="20.1837%" y="117" width="0.2083%" height="15" fill="rgb(225,35,8)"/><text x="20.4337%" y="127.50"></text></g><g><title>impl_parent (1,320,014 samples, 1.77%)</title><rect x="23.7444%" y="101" width="1.7745%" height="15" fill="rgb(250,213,24)"/><text x="23.9944%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (656,618 samples, 0.88%)</title><rect x="24.6362%" y="85" width="0.8827%" height="15" fill="rgb(247,123,22)"/><text x="24.8862%" y="95.50"></text></g><g><title>impl_trait_ref (3,397,953 samples, 4.57%)</title><rect x="25.5188%" y="101" width="4.5678%" height="15" fill="rgb(231,138,38)"/><text x="25.7688%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,730,218 samples, 3.67%)</title><rect x="26.4165%" y="85" width="3.6701%" height="15" fill="rgb(231,145,46)"/><text x="26.6665%" y="95.50">meta..</text></g><g><title>coherent_trait (7,966,431 samples, 10.71%)</title><rect x="20.0253%" y="133" width="10.7090%" height="15" fill="rgb(251,118,11)"/><text x="20.2753%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (7,693,658 samples, 10.34%)</title><rect x="20.3920%" y="117" width="10.3423%" height="15" fill="rgb(217,147,25)"/><text x="20.6420%" y="127.50">specialization_..</text></g><g><title>trait_impls_of (479,264 samples, 0.64%)</title><rect x="30.0900%" y="101" width="0.6443%" height="15" fill="rgb(247,81,37)"/><text x="30.3400%" y="111.50"></text></g><g><title>implementations_of_trait (102,700 samples, 0.14%)</title><rect x="30.5962%" y="85" width="0.1381%" height="15" fill="rgb(209,12,38)"/><text x="30.8462%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (87,830 samples, 0.12%)</title><rect x="30.6162%" y="69" width="0.1181%" height="15" fill="rgb(227,1,9)"/><text x="30.8662%" y="79.50"></text></g><g><title>coherence_checking (8,052,631 samples, 10.82%)</title><rect x="19.9942%" y="149" width="10.8249%" height="15" fill="rgb(248,47,43)"/><text x="20.2442%" y="159.50">coherence_checki..</text></g><g><title>associated_item (94,012 samples, 0.13%)</title><rect x="36.1348%" y="85" width="0.1264%" height="15" fill="rgb(221,10,30)"/><text x="36.3848%" y="95.50"></text></g><g><title>associated_items (151,752 samples, 0.20%)</title><rect x="36.0653%" y="101" width="0.2040%" height="15" fill="rgb(210,229,1)"/><text x="36.3153%" y="111.50"></text></g><g><title>adt_def (96,510 samples, 0.13%)</title><rect x="36.7849%" y="69" width="0.1297%" height="15" fill="rgb(222,148,37)"/><text x="37.0349%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (93,490 samples, 0.13%)</title><rect x="36.7890%" y="53" width="0.1257%" height="15" fill="rgb(234,67,33)"/><text x="37.0390%" y="63.50"></text></g><g><title>adt_def (117,862 samples, 0.16%)</title><rect x="36.9189%" y="53" width="0.1584%" height="15" fill="rgb(247,98,35)"/><text x="37.1689%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (117,302 samples, 0.16%)</title><rect x="36.9196%" y="37" width="0.1577%" height="15" fill="rgb(247,138,52)"/><text x="37.1696%" y="47.50"></text></g><g><title>adt_sized_constraint (122,912 samples, 0.17%)</title><rect x="36.9147%" y="69" width="0.1652%" height="15" fill="rgb(213,79,30)"/><text x="37.1647%" y="79.50"></text></g><g><title>adt_sized_constraint (236,453 samples, 0.32%)</title><rect x="36.7664%" y="85" width="0.3179%" height="15" fill="rgb(246,177,23)"/><text x="37.0164%" y="95.50"></text></g><g><title>specializes (171,222 samples, 0.23%)</title><rect x="37.3043%" y="85" width="0.2302%" height="15" fill="rgb(230,62,27)"/><text x="37.5543%" y="95.50"></text></g><g><title>param_env (148,352 samples, 0.20%)</title><rect x="37.3350%" y="69" width="0.1994%" height="15" fill="rgb(216,154,8)"/><text x="37.5850%" y="79.50"></text></g><g><title>def_span (120,351 samples, 0.16%)</title><rect x="37.3727%" y="53" width="0.1618%" height="15" fill="rgb(244,35,45)"/><text x="37.6227%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (116,561 samples, 0.16%)</title><rect x="37.3777%" y="37" width="0.1567%" height="15" fill="rgb(251,115,12)"/><text x="37.6277%" y="47.50"></text></g><g><title>trait_impls_of (155,841 samples, 0.21%)</title><rect x="37.5389%" y="85" width="0.2095%" height="15" fill="rgb(240,54,50)"/><text x="37.7889%" y="95.50"></text></g><g><title>evaluate_obligation (1,029,150 samples, 1.38%)</title><rect x="36.3761%" y="101" width="1.3835%" height="15" fill="rgb(233,84,52)"/><text x="36.6261%" y="111.50"></text></g><g><title>impl_trait_ref (88,081 samples, 0.12%)</title><rect x="37.9348%" y="101" width="0.1184%" height="15" fill="rgb(207,117,47)"/><text x="38.1848%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (80,661 samples, 0.11%)</title><rect x="37.9448%" y="85" width="0.1084%" height="15" fill="rgb(249,43,39)"/><text x="38.1948%" y="95.50"></text></g><g><title>item_attrs (115,901 samples, 0.16%)</title><rect x="38.0899%" y="101" width="0.1558%" height="15" fill="rgb(209,38,44)"/><text x="38.3399%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (110,120 samples, 0.15%)</title><rect x="38.0977%" y="85" width="0.1480%" height="15" fill="rgb(236,212,23)"/><text x="38.3477%" y="95.50"></text></g><g><title>predicates_of (196,553 samples, 0.26%)</title><rect x="38.3488%" y="101" width="0.2642%" height="15" fill="rgb(242,79,21)"/><text x="38.5988%" y="111.50"></text></g><g><title>predicates_defined_on (128,492 samples, 0.17%)</title><rect x="38.4403%" y="85" width="0.1727%" height="15" fill="rgb(211,96,35)"/><text x="38.6903%" y="95.50"></text></g><g><title>trait_impls_of (102,491 samples, 0.14%)</title><rect x="38.6165%" y="101" width="0.1378%" height="15" fill="rgb(253,215,40)"/><text x="38.8665%" y="111.50"></text></g><g><title>item_bodies_checking (5,958,151 samples, 8.01%)</title><rect x="30.8612%" y="149" width="8.0094%" height="15" fill="rgb(211,81,21)"/><text x="31.1112%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (5,954,421 samples, 8.00%)</title><rect x="30.8662%" y="133" width="8.0043%" height="15" fill="rgb(208,190,38)"/><text x="31.1162%" y="143.50">typeck_item..</text></g><g><title>typeck (5,929,261 samples, 7.97%)</title><rect x="30.9000%" y="117" width="7.9705%" height="15" fill="rgb(235,213,38)"/><text x="31.1500%" y="127.50">typeck</text></g><g><title>item_types_checking (651,116 samples, 0.88%)</title><rect x="38.8705%" y="149" width="0.8753%" height="15" fill="rgb(237,122,38)"/><text x="39.1205%" y="159.50"></text></g><g><title>check_mod_item_types (645,486 samples, 0.87%)</title><rect x="38.8781%" y="133" width="0.8677%" height="15" fill="rgb(244,218,35)"/><text x="39.1281%" y="143.50"></text></g><g><title>typeck (138,621 samples, 0.19%)</title><rect x="39.5595%" y="117" width="0.1863%" height="15" fill="rgb(240,68,47)"/><text x="39.8095%" y="127.50"></text></g><g><title>fn_sig (249,252 samples, 0.34%)</title><rect x="39.9223%" y="117" width="0.3351%" height="15" fill="rgb(210,16,53)"/><text x="40.1723%" y="127.50"></text></g><g><title>named_region_map (172,053 samples, 0.23%)</title><rect x="40.3425%" y="101" width="0.2313%" height="15" fill="rgb(235,124,12)"/><text x="40.5925%" y="111.50"></text></g><g><title>resolve_lifetimes (166,003 samples, 0.22%)</title><rect x="40.3506%" y="85" width="0.2232%" height="15" fill="rgb(224,169,11)"/><text x="40.6006%" y="95.50"></text></g><g><title>generics_of (246,553 samples, 0.33%)</title><rect x="40.2574%" y="117" width="0.3314%" height="15" fill="rgb(250,166,2)"/><text x="40.5074%" y="127.50"></text></g><g><title>explicit_predicates_of (82,500 samples, 0.11%)</title><rect x="40.7170%" y="85" width="0.1109%" height="15" fill="rgb(242,216,29)"/><text x="40.9670%" y="95.50"></text></g><g><title>predicates_of (166,182 samples, 0.22%)</title><rect x="40.6484%" y="117" width="0.2234%" height="15" fill="rgb(230,116,27)"/><text x="40.8984%" y="127.50"></text></g><g><title>predicates_defined_on (147,682 samples, 0.20%)</title><rect x="40.6732%" y="101" width="0.1985%" height="15" fill="rgb(228,99,48)"/><text x="40.9232%" y="111.50"></text></g><g><title>type_collecting (919,640 samples, 1.24%)</title><rect x="39.7489%" y="149" width="1.2362%" height="15" fill="rgb(253,11,6)"/><text x="39.9989%" y="159.50"></text></g><g><title>collect_mod_item_types (908,809 samples, 1.22%)</title><rect x="39.7634%" y="133" width="1.2217%" height="15" fill="rgb(247,143,39)"/><text x="40.0134%" y="143.50"></text></g><g><title>type_of (84,341 samples, 0.11%)</title><rect x="40.8718%" y="117" width="0.1134%" height="15" fill="rgb(236,97,10)"/><text x="41.1218%" y="127.50"></text></g><g><title>evaluate_obligation (224,732 samples, 0.30%)</title><rect x="41.7308%" y="117" width="0.3021%" height="15" fill="rgb(233,208,19)"/><text x="41.9808%" y="127.50"></text></g><g><title>implied_outlives_bounds (87,852 samples, 0.12%)</title><rect x="42.0329%" y="117" width="0.1181%" height="15" fill="rgb(216,164,2)"/><text x="42.2829%" y="127.50"></text></g><g><title>check_impl_item_well_formed (973,580 samples, 1.31%)</title><rect x="41.0908%" y="133" width="1.3088%" height="15" fill="rgb(220,129,5)"/><text x="41.3408%" y="143.50"></text></g><g><title>region_scope_tree (78,181 samples, 0.11%)</title><rect x="42.2945%" y="117" width="0.1051%" height="15" fill="rgb(242,17,10)"/><text x="42.5445%" y="127.50"></text></g><g><title>evaluate_obligation (229,982 samples, 0.31%)</title><rect x="43.1119%" y="117" width="0.3092%" height="15" fill="rgb(242,107,0)"/><text x="43.3619%" y="127.50"></text></g><g><title>param_env (97,192 samples, 0.13%)</title><rect x="43.5005%" y="117" width="0.1307%" height="15" fill="rgb(251,28,31)"/><text x="43.7505%" y="127.50"></text></g><g><title>predicates_of (84,711 samples, 0.11%)</title><rect x="43.6311%" y="117" width="0.1139%" height="15" fill="rgb(233,223,10)"/><text x="43.8811%" y="127.50"></text></g><g><title>analysis (25,721,779 samples, 34.58%)</title><rect x="9.2764%" y="181" width="34.5770%" height="15" fill="rgb(215,21,27)"/><text x="9.5264%" y="191.50">analysis</text></g><g><title>type_check_crate (17,803,630 samples, 23.93%)</title><rect x="19.9205%" y="165" width="23.9329%" height="15" fill="rgb(232,23,21)"/><text x="20.1705%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,131,212 samples, 2.86%)</title><rect x="40.9884%" y="149" width="2.8649%" height="15" fill="rgb(244,5,23)"/><text x="41.2384%" y="159.50">wf..</text></g><g><title>check_item_well_formed (1,081,451 samples, 1.45%)</title><rect x="42.3996%" y="133" width="1.4538%" height="15" fill="rgb(226,81,46)"/><text x="42.6496%" y="143.50"></text></g><g><title>layout_of (94,101 samples, 0.13%)</title><rect x="46.6579%" y="133" width="0.1265%" height="15" fill="rgb(247,70,30)"/><text x="46.9079%" y="143.50"></text></g><g><title>fn_abi_of_instance (246,353 samples, 0.33%)</title><rect x="46.5457%" y="149" width="0.3312%" height="15" fill="rgb(212,68,19)"/><text x="46.7957%" y="159.50"></text></g><g><title>codegen_module (1,579,425 samples, 2.12%)</title><rect x="44.8100%" y="165" width="2.1232%" height="15" fill="rgb(240,187,13)"/><text x="45.0600%" y="175.50">c..</text></g><g><title>codegen_crate (2,302,713 samples, 3.10%)</title><rect x="43.8682%" y="181" width="3.0955%" height="15" fill="rgb(223,113,26)"/><text x="44.1182%" y="191.50">cod..</text></g><g><title>LLVM_module_codegen (7,092,872 samples, 9.53%)</title><rect x="46.9999%" y="165" width="9.5347%" height="15" fill="rgb(206,192,2)"/><text x="47.2499%" y="175.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (6,884,400 samples, 9.25%)</title><rect x="47.2801%" y="149" width="9.2545%" height="15" fill="rgb(241,108,4)"/><text x="47.5301%" y="159.50">LLVM_module_c..</text></g><g><title>codegen_module_optimize (9,246,634 samples, 12.43%)</title><rect x="46.9637%" y="181" width="12.4300%" height="15" fill="rgb(247,173,49)"/><text x="47.2137%" y="191.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (2,126,841 samples, 2.86%)</title><rect x="56.5346%" y="165" width="2.8590%" height="15" fill="rgb(224,114,35)"/><text x="56.7846%" y="175.50">LL..</text></g><g><title>AST_validation (115,041 samples, 0.15%)</title><rect x="59.6823%" y="165" width="0.1546%" height="15" fill="rgb(245,159,27)"/><text x="59.9323%" y="175.50"></text></g><g><title>crate_injection (85,961 samples, 0.12%)</title><rect x="59.8713%" y="165" width="0.1156%" height="15" fill="rgb(245,172,44)"/><text x="60.1213%" y="175.50"></text></g><g><title>metadata_load_macro (94,710 samples, 0.13%)</title><rect x="79.8004%" y="133" width="0.1273%" height="15" fill="rgb(236,23,11)"/><text x="80.0504%" y="143.50"></text></g><g><title>macro_expand_crate (15,162,184 samples, 20.38%)</title><rect x="59.9869%" y="165" width="20.3820%" height="15" fill="rgb(205,117,38)"/><text x="60.2369%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (15,152,474 samples, 20.37%)</title><rect x="59.9999%" y="149" width="20.3690%" height="15" fill="rgb(237,72,25)"/><text x="60.2499%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (328,183 samples, 0.44%)</title><rect x="79.9277%" y="133" width="0.4412%" height="15" fill="rgb(244,70,9)"/><text x="80.1777%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (437,405 samples, 0.59%)</title><rect x="80.3756%" y="165" width="0.5880%" height="15" fill="rgb(217,125,39)"/><text x="80.6256%" y="175.50"></text></g><g><title>finalize_macro_resolutions (195,122 samples, 0.26%)</title><rect x="81.0205%" y="149" width="0.2623%" height="15" fill="rgb(235,36,10)"/><text x="81.2705%" y="159.50"></text></g><g><title>late_resolve_crate (831,089 samples, 1.12%)</title><rect x="81.2828%" y="149" width="1.1172%" height="15" fill="rgb(251,123,47)"/><text x="81.5328%" y="159.50"></text></g><g><title>configure_and_expand (17,174,204 samples, 23.09%)</title><rect x="59.3936%" y="181" width="23.0867%" height="15" fill="rgb(221,13,13)"/><text x="59.6436%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,128,332 samples, 1.52%)</title><rect x="80.9636%" y="165" width="1.5168%" height="15" fill="rgb(238,131,9)"/><text x="81.2136%" y="175.50"></text></g><g><title>drop_ast (94,921 samples, 0.13%)</title><rect x="82.4804%" y="181" width="0.1276%" height="15" fill="rgb(211,50,8)"/><text x="82.7304%" y="191.50"></text></g><g><title>early_lint_checks (179,252 samples, 0.24%)</title><rect x="82.6432%" y="181" width="0.2410%" height="15" fill="rgb(245,182,24)"/><text x="82.8932%" y="191.50"></text></g><g><title>free_global_ctxt (1,689,947 samples, 2.27%)</title><rect x="82.8841%" y="181" width="2.2717%" height="15" fill="rgb(242,14,37)"/><text x="83.1341%" y="191.50">f..</text></g><g><title>optimized_mir (242,313 samples, 0.33%)</title><rect x="85.9501%" y="101" width="0.3257%" height="15" fill="rgb(246,228,12)"/><text x="86.2001%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (82,761 samples, 0.11%)</title><rect x="86.1645%" y="85" width="0.1113%" height="15" fill="rgb(213,55,15)"/><text x="86.4145%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (421,324 samples, 0.57%)</title><rect x="85.7579%" y="117" width="0.5664%" height="15" fill="rgb(209,9,3)"/><text x="86.0079%" y="127.50"></text></g><g><title>monomorphization_collector (441,624 samples, 0.59%)</title><rect x="85.7553%" y="133" width="0.5937%" height="15" fill="rgb(230,59,30)"/><text x="86.0053%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (82,331 samples, 0.11%)</title><rect x="86.3575%" y="117" width="0.1107%" height="15" fill="rgb(209,121,21)"/><text x="86.6075%" y="127.50"></text></g><g><title>symbol_name (76,291 samples, 0.10%)</title><rect x="86.3656%" y="101" width="0.1026%" height="15" fill="rgb(220,109,13)"/><text x="86.6156%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (592,036 samples, 0.80%)</title><rect x="85.7287%" y="149" width="0.7959%" height="15" fill="rgb(232,18,1)"/><text x="85.9787%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (130,652 samples, 0.18%)</title><rect x="86.3489%" y="133" width="0.1756%" height="15" fill="rgb(215,41,42)"/><text x="86.5989%" y="143.50"></text></g><g><title>exported_symbols (641,817 samples, 0.86%)</title><rect x="85.7083%" y="165" width="0.8628%" height="15" fill="rgb(224,123,36)"/><text x="85.9583%" y="175.50"></text></g><g><title>layout_of (82,002 samples, 0.11%)</title><rect x="87.0300%" y="149" width="0.1102%" height="15" fill="rgb(240,125,3)"/><text x="87.2800%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (258,862 samples, 0.35%)</title><rect x="87.1402%" y="149" width="0.3480%" height="15" fill="rgb(205,98,50)"/><text x="87.3902%" y="159.50"></text></g><g><title>optimized_mir (707,288 samples, 0.95%)</title><rect x="86.5904%" y="165" width="0.9508%" height="15" fill="rgb(205,185,37)"/><text x="86.8404%" y="175.50"></text></g><g><title>generate_crate_metadata (1,788,328 samples, 2.40%)</title><rect x="85.1559%" y="181" width="2.4040%" height="15" fill="rgb(238,207,15)"/><text x="85.4059%" y="191.50">ge..</text></g><g><title>hir_lowering (956,790 samples, 1.29%)</title><rect x="87.5598%" y="181" width="1.2862%" height="15" fill="rgb(213,199,42)"/><text x="87.8098%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,597,637 samples, 4.84%)</title><rect x="88.9278%" y="165" width="4.8362%" height="15" fill="rgb(235,201,11)"/><text x="89.1778%" y="175.50">finish..</text></g><g><title>join_worker_thread (113,431 samples, 0.15%)</title><rect x="93.6115%" y="149" width="0.1525%" height="15" fill="rgb(207,46,11)"/><text x="93.8615%" y="159.50"></text></g><g><title>link_crate (1,107,661 samples, 1.49%)</title><rect x="93.7640%" y="165" width="1.4890%" height="15" fill="rgb(241,35,35)"/><text x="94.0140%" y="175.50"></text></g><g><title>link_binary (1,096,631 samples, 1.47%)</title><rect x="93.7788%" y="149" width="1.4742%" height="15" fill="rgb(243,32,47)"/><text x="94.0288%" y="159.50"></text></g><g><title>link_rlib (678,257 samples, 0.91%)</title><rect x="94.3412%" y="133" width="0.9118%" height="15" fill="rgb(247,202,23)"/><text x="94.5912%" y="143.50"></text></g><g><title>link (4,777,059 samples, 6.42%)</title><rect x="88.8460%" y="181" width="6.4217%" height="15" fill="rgb(219,102,11)"/><text x="89.0960%" y="191.50">link</text></g><g><title>parse_crate (2,410,314 samples, 3.24%)</title><rect x="95.2677%" y="181" width="3.2401%" height="15" fill="rgb(243,110,44)"/><text x="95.5177%" y="191.50">par..</text></g><g><title>prepare_outputs (299,793 samples, 0.40%)</title><rect x="98.5206%" y="181" width="0.4030%" height="15" fill="rgb(222,74,54)"/><text x="98.7706%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (389,634 samples, 0.52%)</title><rect x="98.9236%" y="181" width="0.5238%" height="15" fill="rgb(216,99,12)"/><text x="99.1736%" y="191.50"></text></g><g><title>setup_global_ctxt (119,781 samples, 0.16%)</title><rect x="99.4486%" y="181" width="0.1610%" height="15" fill="rgb(226,22,26)"/><text x="99.6986%" y="191.50"></text></g><g><title>all (74,389,894 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (74,389,894 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (290,433 samples, 0.39%)</title><rect x="99.6096%" y="181" width="0.3904%" height="15" fill="rgb(252,105,26)"/><text x="99.8596%" y="191.50"></text></g></svg></svg>