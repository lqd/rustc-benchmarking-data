<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,349,865 samples, 5.80%)</title><rect x="0.2884%" y="213" width="5.7984%" height="15" fill="rgb(227,0,7)"/><text x="0.5384%" y="223.50">LLVM_pa..</text></g><g><title>param_env (254,011 samples, 0.13%)</title><rect x="14.0017%" y="133" width="0.1298%" height="15" fill="rgb(217,0,24)"/><text x="14.2517%" y="143.50"></text></g><g><title>item_attrs (368,385 samples, 0.19%)</title><rect x="14.4744%" y="101" width="0.1882%" height="15" fill="rgb(221,193,54)"/><text x="14.7244%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (358,195 samples, 0.18%)</title><rect x="14.4796%" y="85" width="0.1830%" height="15" fill="rgb(248,212,6)"/><text x="14.7296%" y="95.50"></text></g><g><title>codegen_fn_attrs (498,906 samples, 0.25%)</title><rect x="14.4185%" y="117" width="0.2549%" height="15" fill="rgb(208,68,35)"/><text x="14.6685%" y="127.50"></text></g><g><title>is_copy_raw (480,615 samples, 0.25%)</title><rect x="16.5553%" y="85" width="0.2455%" height="15" fill="rgb(232,128,0)"/><text x="16.8053%" y="95.50"></text></g><g><title>evaluate_obligation (396,695 samples, 0.20%)</title><rect x="16.5982%" y="69" width="0.2027%" height="15" fill="rgb(207,160,47)"/><text x="16.8482%" y="79.50"></text></g><g><title>needs_drop_raw (656,139 samples, 0.34%)</title><rect x="16.4671%" y="101" width="0.3352%" height="15" fill="rgb(228,23,34)"/><text x="16.7171%" y="111.50"></text></g><g><title>impl_parent (201,114 samples, 0.10%)</title><rect x="17.0339%" y="69" width="0.1027%" height="15" fill="rgb(218,30,26)"/><text x="17.2839%" y="79.50"></text></g><g><title>specialization_graph_of (1,268,252 samples, 0.65%)</title><rect x="16.8848%" y="85" width="0.6479%" height="15" fill="rgb(220,122,19)"/><text x="17.1348%" y="95.50"></text></g><g><title>impl_trait_ref (775,257 samples, 0.40%)</title><rect x="17.1366%" y="69" width="0.3961%" height="15" fill="rgb(250,228,42)"/><text x="17.3866%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (709,887 samples, 0.36%)</title><rect x="17.1700%" y="53" width="0.3627%" height="15" fill="rgb(240,193,28)"/><text x="17.4200%" y="63.50"></text></g><g><title>resolve_instance (1,497,203 samples, 0.76%)</title><rect x="16.8023%" y="101" width="0.7649%" height="15" fill="rgb(216,20,37)"/><text x="17.0523%" y="111.50"></text></g><g><title>thir_body (1,447,673 samples, 0.74%)</title><rect x="17.5790%" y="101" width="0.7396%" height="15" fill="rgb(206,188,39)"/><text x="17.8290%" y="111.50"></text></g><g><title>mir_const (9,444,857 samples, 4.83%)</title><rect x="13.5024%" y="149" width="4.8252%" height="15" fill="rgb(217,207,13)"/><text x="13.7524%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (8,213,476 samples, 4.20%)</title><rect x="14.1315%" y="133" width="4.1961%" height="15" fill="rgb(231,73,38)"/><text x="14.3815%" y="143.50">unsaf..</text></g><g><title>mir_built (7,152,785 samples, 3.65%)</title><rect x="14.6734%" y="117" width="3.6542%" height="15" fill="rgb(225,20,46)"/><text x="14.9234%" y="127.50">mir_..</text></g><g><title>mir_const (201,400 samples, 0.10%)</title><rect x="18.4650%" y="133" width="0.1029%" height="15" fill="rgb(210,31,41)"/><text x="18.7150%" y="143.50"></text></g><g><title>mir_promoted (10,877,787 samples, 5.56%)</title><rect x="13.0146%" y="165" width="5.5572%" height="15" fill="rgb(221,200,47)"/><text x="13.2646%" y="175.50">mir_pro..</text></g><g><title>mir_const_qualif (478,084 samples, 0.24%)</title><rect x="18.3275%" y="149" width="0.2442%" height="15" fill="rgb(226,26,5)"/><text x="18.5775%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (400,245 samples, 0.20%)</title><rect x="18.5720%" y="165" width="0.2045%" height="15" fill="rgb(249,33,26)"/><text x="18.8220%" y="175.50"></text></g><g><title>type_op_prove_predicate (998,065 samples, 0.51%)</title><rect x="18.8622%" y="165" width="0.5099%" height="15" fill="rgb(235,183,28)"/><text x="19.1122%" y="175.50"></text></g><g><title>MIR_borrow_checking (25,701,129 samples, 13.13%)</title><rect x="6.2439%" y="197" width="13.1301%" height="15" fill="rgb(221,5,38)"/><text x="6.4939%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,576,418 samples, 13.07%)</title><rect x="6.3076%" y="181" width="13.0664%" height="15" fill="rgb(247,18,42)"/><text x="6.5576%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (317,243 samples, 0.16%)</title><rect x="19.7054%" y="165" width="0.1621%" height="15" fill="rgb(241,131,45)"/><text x="19.9554%" y="175.50"></text></g><g><title>check_mod_attrs (559,166 samples, 0.29%)</title><rect x="19.5819%" y="181" width="0.2857%" height="15" fill="rgb(249,31,29)"/><text x="19.8319%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (408,755 samples, 0.21%)</title><rect x="19.9729%" y="181" width="0.2088%" height="15" fill="rgb(225,111,53)"/><text x="20.2229%" y="191.50"></text></g><g><title>misc_checking_1 (1,240,572 samples, 0.63%)</title><rect x="19.5723%" y="197" width="0.6338%" height="15" fill="rgb(238,160,17)"/><text x="19.8223%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (804,028 samples, 0.41%)</title><rect x="20.2067%" y="181" width="0.4108%" height="15" fill="rgb(214,148,48)"/><text x="20.4567%" y="191.50"></text></g><g><title>check_mod_liveness (688,457 samples, 0.35%)</title><rect x="20.2658%" y="165" width="0.3517%" height="15" fill="rgb(232,36,49)"/><text x="20.5158%" y="175.50"></text></g><g><title>type_uninhabited_from (287,902 samples, 0.15%)</title><rect x="20.4704%" y="149" width="0.1471%" height="15" fill="rgb(209,103,24)"/><text x="20.7204%" y="159.50"></text></g><g><title>type_uninhabited_from (264,352 samples, 0.14%)</title><rect x="20.4825%" y="133" width="0.1351%" height="15" fill="rgb(229,88,8)"/><text x="20.7325%" y="143.50"></text></g><g><title>misc_checking_2 (1,307,943 samples, 0.67%)</title><rect x="20.2060%" y="197" width="0.6682%" height="15" fill="rgb(213,181,19)"/><text x="20.4560%" y="207.50"></text></g><g><title>match_checking (502,515 samples, 0.26%)</title><rect x="20.6175%" y="181" width="0.2567%" height="15" fill="rgb(254,191,54)"/><text x="20.8675%" y="191.50"></text></g><g><title>check_match (471,095 samples, 0.24%)</title><rect x="20.6336%" y="165" width="0.2407%" height="15" fill="rgb(241,83,37)"/><text x="20.8836%" y="175.50"></text></g><g><title>check_private_in_public (231,942 samples, 0.12%)</title><rect x="20.8785%" y="181" width="0.1185%" height="15" fill="rgb(233,36,39)"/><text x="21.1285%" y="191.50"></text></g><g><title>death_checking (497,625 samples, 0.25%)</title><rect x="20.9970%" y="181" width="0.2542%" height="15" fill="rgb(226,3,54)"/><text x="21.2470%" y="191.50"></text></g><g><title>param_env (250,612 samples, 0.13%)</title><rect x="21.7293%" y="149" width="0.1280%" height="15" fill="rgb(245,192,40)"/><text x="21.9793%" y="159.50"></text></g><g><title>crate_lints (2,287,483 samples, 1.17%)</title><rect x="21.2519%" y="165" width="1.1686%" height="15" fill="rgb(238,167,29)"/><text x="21.5019%" y="175.50"></text></g><g><title>type_of (1,090,570 samples, 0.56%)</title><rect x="21.8634%" y="149" width="0.5571%" height="15" fill="rgb(232,182,51)"/><text x="22.1134%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (854,766 samples, 0.44%)</title><rect x="21.9838%" y="133" width="0.4367%" height="15" fill="rgb(231,60,39)"/><text x="22.2338%" y="143.50"></text></g><g><title>lint_checking (2,878,639 samples, 1.47%)</title><rect x="21.2512%" y="181" width="1.4706%" height="15" fill="rgb(208,69,12)"/><text x="21.5012%" y="191.50"></text></g><g><title>module_lints (589,876 samples, 0.30%)</title><rect x="22.4205%" y="165" width="0.3014%" height="15" fill="rgb(235,93,37)"/><text x="22.6705%" y="175.50"></text></g><g><title>lint_mod (584,875 samples, 0.30%)</title><rect x="22.4231%" y="149" width="0.2988%" height="15" fill="rgb(213,116,39)"/><text x="22.6731%" y="159.50"></text></g><g><title>privacy_access_levels (231,022 samples, 0.12%)</title><rect x="22.7219%" y="181" width="0.1180%" height="15" fill="rgb(222,207,29)"/><text x="22.9719%" y="191.50"></text></g><g><title>privacy_checking_modules (838,869 samples, 0.43%)</title><rect x="22.8399%" y="181" width="0.4286%" height="15" fill="rgb(206,96,30)"/><text x="23.0899%" y="191.50"></text></g><g><title>check_mod_privacy (835,249 samples, 0.43%)</title><rect x="22.8418%" y="165" width="0.4267%" height="15" fill="rgb(218,138,4)"/><text x="23.0918%" y="175.50"></text></g><g><title>misc_checking_3 (4,697,667 samples, 2.40%)</title><rect x="20.8742%" y="197" width="2.3999%" height="15" fill="rgb(250,191,14)"/><text x="21.1242%" y="207.50">mi..</text></g><g><title>adt_destructor (286,962 samples, 0.15%)</title><rect x="23.3383%" y="149" width="0.1466%" height="15" fill="rgb(239,60,40)"/><text x="23.5883%" y="159.50"></text></g><g><title>coherent_trait (284,272 samples, 0.15%)</title><rect x="23.3397%" y="133" width="0.1452%" height="15" fill="rgb(206,27,48)"/><text x="23.5897%" y="143.50"></text></g><g><title>specialization_graph_of (282,722 samples, 0.14%)</title><rect x="23.3405%" y="117" width="0.1444%" height="15" fill="rgb(225,35,8)"/><text x="23.5905%" y="127.50"></text></g><g><title>impl_parent (2,316,942 samples, 1.18%)</title><rect x="25.6678%" y="133" width="1.1837%" height="15" fill="rgb(250,213,24)"/><text x="25.9178%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,342,937 samples, 0.69%)</title><rect x="26.1654%" y="117" width="0.6861%" height="15" fill="rgb(247,123,22)"/><text x="26.4154%" y="127.50"></text></g><g><title>impl_trait_ref (5,278,019 samples, 2.70%)</title><rect x="26.8515%" y="133" width="2.6964%" height="15" fill="rgb(231,138,38)"/><text x="27.1015%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,087,340 samples, 2.09%)</title><rect x="27.4598%" y="117" width="2.0881%" height="15" fill="rgb(231,145,46)"/><text x="27.7098%" y="127.50">m..</text></g><g><title>coherent_trait (13,054,220 samples, 6.67%)</title><rect x="23.3204%" y="165" width="6.6691%" height="15" fill="rgb(251,118,11)"/><text x="23.5704%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (12,554,356 samples, 6.41%)</title><rect x="23.5758%" y="149" width="6.4137%" height="15" fill="rgb(217,147,25)"/><text x="23.8258%" y="159.50">speciali..</text></g><g><title>trait_impls_of (862,170 samples, 0.44%)</title><rect x="29.5490%" y="133" width="0.4405%" height="15" fill="rgb(247,81,37)"/><text x="29.7990%" y="143.50"></text></g><g><title>implementations_of_trait (236,075 samples, 0.12%)</title><rect x="29.8689%" y="117" width="0.1206%" height="15" fill="rgb(209,12,38)"/><text x="30.1189%" y="127.50"></text></g><g><title>coherence_checking (13,123,302 samples, 6.70%)</title><rect x="23.3110%" y="181" width="6.7044%" height="15" fill="rgb(227,1,9)"/><text x="23.5610%" y="191.50">coherence..</text></g><g><title>associated_item (891,717 samples, 0.46%)</title><rect x="43.9647%" y="117" width="0.4556%" height="15" fill="rgb(248,47,43)"/><text x="44.2147%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (789,246 samples, 0.40%)</title><rect x="44.0171%" y="101" width="0.4032%" height="15" fill="rgb(221,10,30)"/><text x="44.2671%" y="111.50"></text></g><g><title>associated_items (1,104,740 samples, 0.56%)</title><rect x="43.8737%" y="133" width="0.5644%" height="15" fill="rgb(210,229,1)"/><text x="44.1237%" y="143.50"></text></g><g><title>dropck_outlives (463,386 samples, 0.24%)</title><rect x="44.4831%" y="133" width="0.2367%" height="15" fill="rgb(222,148,37)"/><text x="44.7331%" y="143.50"></text></g><g><title>adt_dtorck_constraint (293,382 samples, 0.15%)</title><rect x="44.5700%" y="117" width="0.1499%" height="15" fill="rgb(234,67,33)"/><text x="44.8200%" y="127.50"></text></g><g><title>eval_to_const_value_raw (261,303 samples, 0.13%)</title><rect x="44.7199%" y="133" width="0.1335%" height="15" fill="rgb(247,98,35)"/><text x="44.9699%" y="143.50"></text></g><g><title>eval_to_allocation_raw (256,863 samples, 0.13%)</title><rect x="44.7221%" y="117" width="0.1312%" height="15" fill="rgb(247,138,52)"/><text x="44.9721%" y="127.50"></text></g><g><title>generics_of (342,046 samples, 0.17%)</title><rect x="46.3712%" y="117" width="0.1747%" height="15" fill="rgb(213,79,30)"/><text x="46.6212%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (260,866 samples, 0.13%)</title><rect x="46.4127%" y="101" width="0.1333%" height="15" fill="rgb(246,177,23)"/><text x="46.6627%" y="111.50"></text></g><g><title>impl_trait_ref (356,073 samples, 0.18%)</title><rect x="46.5947%" y="117" width="0.1819%" height="15" fill="rgb(230,62,27)"/><text x="46.8447%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (276,192 samples, 0.14%)</title><rect x="46.6355%" y="101" width="0.1411%" height="15" fill="rgb(216,154,8)"/><text x="46.8855%" y="111.50"></text></g><g><title>predicates_of (316,522 samples, 0.16%)</title><rect x="46.7945%" y="117" width="0.1617%" height="15" fill="rgb(244,35,45)"/><text x="47.0445%" y="127.50"></text></g><g><title>specializes (730,828 samples, 0.37%)</title><rect x="46.9562%" y="117" width="0.3734%" height="15" fill="rgb(251,115,12)"/><text x="47.2062%" y="127.50"></text></g><g><title>param_env (421,476 samples, 0.22%)</title><rect x="47.1142%" y="101" width="0.2153%" height="15" fill="rgb(240,54,50)"/><text x="47.3642%" y="111.50"></text></g><g><title>trait_impls_of (600,724 samples, 0.31%)</title><rect x="47.3390%" y="117" width="0.3069%" height="15" fill="rgb(233,84,52)"/><text x="47.5890%" y="127.50"></text></g><g><title>implementations_of_trait (256,882 samples, 0.13%)</title><rect x="47.5146%" y="101" width="0.1312%" height="15" fill="rgb(207,117,47)"/><text x="47.7646%" y="111.50"></text></g><g><title>evaluate_obligation (5,482,604 samples, 2.80%)</title><rect x="44.8534%" y="133" width="2.8009%" height="15" fill="rgb(249,43,39)"/><text x="45.1034%" y="143.50">ev..</text></g><g><title>item_attrs (253,265 samples, 0.13%)</title><rect x="47.9195%" y="133" width="0.1294%" height="15" fill="rgb(209,38,44)"/><text x="48.1695%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (243,505 samples, 0.12%)</title><rect x="47.9245%" y="117" width="0.1244%" height="15" fill="rgb(236,212,23)"/><text x="48.1745%" y="127.50"></text></g><g><title>lint_levels (215,252 samples, 0.11%)</title><rect x="48.0489%" y="133" width="0.1100%" height="15" fill="rgb(242,79,21)"/><text x="48.2989%" y="143.50"></text></g><g><title>evaluate_obligation (240,912 samples, 0.12%)</title><rect x="48.3233%" y="117" width="0.1231%" height="15" fill="rgb(211,96,35)"/><text x="48.5733%" y="127.50"></text></g><g><title>method_autoderef_steps (487,714 samples, 0.25%)</title><rect x="48.2058%" y="133" width="0.2492%" height="15" fill="rgb(253,215,40)"/><text x="48.4558%" y="143.50"></text></g><g><title>predicates_of (447,457 samples, 0.23%)</title><rect x="48.5609%" y="133" width="0.2286%" height="15" fill="rgb(211,81,21)"/><text x="48.8109%" y="143.50"></text></g><g><title>predicates_defined_on (309,256 samples, 0.16%)</title><rect x="48.6315%" y="117" width="0.1580%" height="15" fill="rgb(208,190,38)"/><text x="48.8815%" y="127.50"></text></g><g><title>item_bodies_checking (36,956,652 samples, 18.88%)</title><rect x="30.0337%" y="181" width="18.8803%" height="15" fill="rgb(235,213,38)"/><text x="30.2837%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,954,180 samples, 18.88%)</title><rect x="30.0350%" y="165" width="18.8790%" height="15" fill="rgb(237,122,38)"/><text x="30.2850%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (36,862,470 samples, 18.83%)</title><rect x="30.0818%" y="149" width="18.8322%" height="15" fill="rgb(244,218,35)"/><text x="30.3318%" y="159.50">typeck</text></g><g><title>generics_of (404,147 samples, 0.21%)</title><rect x="50.7929%" y="117" width="0.2065%" height="15" fill="rgb(240,68,47)"/><text x="51.0429%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (269,896 samples, 0.14%)</title><rect x="50.8615%" y="101" width="0.1379%" height="15" fill="rgb(210,16,53)"/><text x="51.1115%" y="111.50"></text></g><g><title>impl_trait_ref (620,916 samples, 0.32%)</title><rect x="51.0538%" y="117" width="0.3172%" height="15" fill="rgb(235,124,12)"/><text x="51.3038%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (488,955 samples, 0.25%)</title><rect x="51.1212%" y="101" width="0.2498%" height="15" fill="rgb(224,169,11)"/><text x="51.3712%" y="111.50"></text></g><g><title>predicates_of (639,038 samples, 0.33%)</title><rect x="51.3865%" y="117" width="0.3265%" height="15" fill="rgb(250,166,2)"/><text x="51.6365%" y="127.50"></text></g><g><title>predicates_defined_on (363,775 samples, 0.19%)</title><rect x="51.5271%" y="101" width="0.1858%" height="15" fill="rgb(242,216,29)"/><text x="51.7771%" y="111.50"></text></g><g><title>specializes (2,065,631 samples, 1.06%)</title><rect x="51.7130%" y="117" width="1.0553%" height="15" fill="rgb(230,116,27)"/><text x="51.9630%" y="127.50"></text></g><g><title>param_env (1,305,264 samples, 0.67%)</title><rect x="52.1014%" y="101" width="0.6668%" height="15" fill="rgb(228,99,48)"/><text x="52.3514%" y="111.50"></text></g><g><title>def_span (727,087 samples, 0.37%)</title><rect x="52.3968%" y="85" width="0.3715%" height="15" fill="rgb(253,11,6)"/><text x="52.6468%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (420,764 samples, 0.21%)</title><rect x="52.5533%" y="69" width="0.2150%" height="15" fill="rgb(247,143,39)"/><text x="52.8033%" y="79.50"></text></g><g><title>evaluate_obligation (6,040,361 samples, 3.09%)</title><rect x="49.7271%" y="133" width="3.0859%" height="15" fill="rgb(236,97,10)"/><text x="49.9771%" y="143.50">eva..</text></g><g><title>item_types_checking (7,856,599 samples, 4.01%)</title><rect x="48.9140%" y="181" width="4.0138%" height="15" fill="rgb(233,208,19)"/><text x="49.1640%" y="191.50">item..</text></g><g><title>check_mod_item_types (7,851,559 samples, 4.01%)</title><rect x="48.9166%" y="165" width="4.0112%" height="15" fill="rgb(216,164,2)"/><text x="49.1666%" y="175.50">chec..</text></g><g><title>typeck (7,274,534 samples, 3.72%)</title><rect x="49.2113%" y="149" width="3.7164%" height="15" fill="rgb(220,129,5)"/><text x="49.4613%" y="159.50">type..</text></g><g><title>fn_sig (334,472 samples, 0.17%)</title><rect x="53.0693%" y="149" width="0.1709%" height="15" fill="rgb(242,17,10)"/><text x="53.3193%" y="159.50"></text></g><g><title>generics_of (203,823 samples, 0.10%)</title><rect x="53.2402%" y="149" width="0.1041%" height="15" fill="rgb(242,107,0)"/><text x="53.4902%" y="159.50"></text></g><g><title>explicit_predicates_of (221,974 samples, 0.11%)</title><rect x="53.4409%" y="117" width="0.1134%" height="15" fill="rgb(251,28,31)"/><text x="53.6909%" y="127.50"></text></g><g><title>predicates_of (628,037 samples, 0.32%)</title><rect x="53.3718%" y="149" width="0.3208%" height="15" fill="rgb(233,223,10)"/><text x="53.6218%" y="159.50"></text></g><g><title>predicates_defined_on (574,627 samples, 0.29%)</title><rect x="53.3991%" y="133" width="0.2936%" height="15" fill="rgb(215,21,27)"/><text x="53.6491%" y="143.50"></text></g><g><title>inferred_outlives_of (270,813 samples, 0.14%)</title><rect x="53.5543%" y="117" width="0.1384%" height="15" fill="rgb(232,23,21)"/><text x="53.8043%" y="127.50"></text></g><g><title>inferred_outlives_crate (247,983 samples, 0.13%)</title><rect x="53.5660%" y="101" width="0.1267%" height="15" fill="rgb(244,5,23)"/><text x="53.8160%" y="111.50"></text></g><g><title>type_collecting (1,589,176 samples, 0.81%)</title><rect x="52.9292%" y="181" width="0.8119%" height="15" fill="rgb(226,81,46)"/><text x="53.1792%" y="191.50"></text></g><g><title>collect_mod_item_types (1,581,626 samples, 0.81%)</title><rect x="52.9331%" y="165" width="0.8080%" height="15" fill="rgb(247,70,30)"/><text x="53.1831%" y="175.50"></text></g><g><title>evaluate_obligation (381,663 samples, 0.19%)</title><rect x="54.7707%" y="149" width="0.1950%" height="15" fill="rgb(212,68,19)"/><text x="55.0207%" y="159.50"></text></g><g><title>param_env (292,323 samples, 0.15%)</title><rect x="55.0460%" y="149" width="0.1493%" height="15" fill="rgb(240,187,13)"/><text x="55.2960%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,228,624 samples, 1.65%)</title><rect x="53.8488%" y="165" width="1.6494%" height="15" fill="rgb(223,113,26)"/><text x="54.0988%" y="175.50"></text></g><g><title>region_scope_tree (575,462 samples, 0.29%)</title><rect x="55.2042%" y="149" width="0.2940%" height="15" fill="rgb(206,192,2)"/><text x="55.4542%" y="159.50"></text></g><g><title>mir_borrowck (285,693 samples, 0.15%)</title><rect x="56.4014%" y="69" width="0.1460%" height="15" fill="rgb(241,108,4)"/><text x="56.6514%" y="79.50"></text></g><g><title>mir_for_ctfe (398,854 samples, 0.20%)</title><rect x="56.3443%" y="101" width="0.2038%" height="15" fill="rgb(247,173,49)"/><text x="56.5943%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (359,104 samples, 0.18%)</title><rect x="56.3646%" y="85" width="0.1835%" height="15" fill="rgb(224,114,35)"/><text x="56.6146%" y="95.50"></text></g><g><title>eval_to_const_value_raw (682,777 samples, 0.35%)</title><rect x="56.5512%" y="85" width="0.3488%" height="15" fill="rgb(245,159,27)"/><text x="56.8012%" y="95.50"></text></g><g><title>eval_to_const_value_raw (681,747 samples, 0.35%)</title><rect x="56.5517%" y="69" width="0.3483%" height="15" fill="rgb(245,172,44)"/><text x="56.8017%" y="79.50"></text></g><g><title>eval_to_allocation_raw (680,607 samples, 0.35%)</title><rect x="56.5523%" y="53" width="0.3477%" height="15" fill="rgb(236,23,11)"/><text x="56.8023%" y="63.50"></text></g><g><title>typeck (305,153 samples, 0.16%)</title><rect x="56.7441%" y="37" width="0.1559%" height="15" fill="rgb(205,117,38)"/><text x="56.9941%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (691,667 samples, 0.35%)</title><rect x="56.5482%" y="101" width="0.3534%" height="15" fill="rgb(237,72,25)"/><text x="56.7982%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,428,844 samples, 0.73%)</title><rect x="56.2158%" y="149" width="0.7300%" height="15" fill="rgb(244,70,9)"/><text x="56.4658%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,417,554 samples, 0.72%)</title><rect x="56.2215%" y="133" width="0.7242%" height="15" fill="rgb(217,125,39)"/><text x="56.4715%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,416,114 samples, 0.72%)</title><rect x="56.2223%" y="117" width="0.7235%" height="15" fill="rgb(235,36,10)"/><text x="56.4723%" y="127.50"></text></g><g><title>evaluate_obligation (213,402 samples, 0.11%)</title><rect x="56.9457%" y="149" width="0.1090%" height="15" fill="rgb(251,123,47)"/><text x="57.1957%" y="159.50"></text></g><g><title>param_env (265,770 samples, 0.14%)</title><rect x="57.1013%" y="149" width="0.1358%" height="15" fill="rgb(221,13,13)"/><text x="57.3513%" y="159.50"></text></g><g><title>analysis (100,382,428 samples, 51.28%)</title><rect x="6.0868%" y="213" width="51.2830%" height="15" fill="rgb(238,131,9)"/><text x="6.3368%" y="223.50">analysis</text></g><g><title>type_check_crate (66,739,560 samples, 34.10%)</title><rect x="23.2742%" y="197" width="34.0957%" height="15" fill="rgb(211,50,8)"/><text x="23.5242%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,096,641 samples, 3.63%)</title><rect x="53.7443%" y="181" width="3.6255%" height="15" fill="rgb(245,182,24)"/><text x="53.9943%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (3,663,545 samples, 1.87%)</title><rect x="55.4982%" y="165" width="1.8716%" height="15" fill="rgb(242,14,37)"/><text x="55.7482%" y="175.50">c..</text></g><g><title>codegen_module (2,053,271 samples, 1.05%)</title><rect x="57.7392%" y="197" width="1.0490%" height="15" fill="rgb(246,228,12)"/><text x="57.9892%" y="207.50"></text></g><g><title>codegen_crate (2,842,158 samples, 1.45%)</title><rect x="57.3751%" y="213" width="1.4520%" height="15" fill="rgb(213,55,15)"/><text x="57.6251%" y="223.50"></text></g><g><title>LLVM_module_codegen (18,449,766 samples, 9.43%)</title><rect x="58.8443%" y="197" width="9.4255%" height="15" fill="rgb(209,9,3)"/><text x="59.0943%" y="207.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (17,944,772 samples, 9.17%)</title><rect x="59.1022%" y="181" width="9.1676%" height="15" fill="rgb(230,59,30)"/><text x="59.3522%" y="191.50">LLVM_module_c..</text></g><g><title>codegen_module_optimize (19,179,154 samples, 9.80%)</title><rect x="58.8271%" y="213" width="9.7982%" height="15" fill="rgb(209,121,21)"/><text x="59.0771%" y="223.50">codegen_module..</text></g><g><title>LLVM_module_optimize (695,857 samples, 0.36%)</title><rect x="68.2698%" y="197" width="0.3555%" height="15" fill="rgb(220,109,13)"/><text x="68.5198%" y="207.50"></text></g><g><title>AST_validation (255,943 samples, 0.13%)</title><rect x="68.7262%" y="197" width="0.1308%" height="15" fill="rgb(232,18,1)"/><text x="68.9762%" y="207.50"></text></g><g><title>metadata_load_macro (323,331 samples, 0.17%)</title><rect x="79.8274%" y="165" width="0.1652%" height="15" fill="rgb(215,41,42)"/><text x="80.0774%" y="175.50"></text></g><g><title>metadata_register_crate (2,671,856 samples, 1.36%)</title><rect x="79.9926%" y="165" width="1.3650%" height="15" fill="rgb(224,123,36)"/><text x="80.2426%" y="175.50"></text></g><g><title>metadata_register_crate (977,289 samples, 0.50%)</title><rect x="80.8583%" y="149" width="0.4993%" height="15" fill="rgb(240,125,3)"/><text x="81.1083%" y="159.50"></text></g><g><title>macro_expand_crate (24,675,017 samples, 12.61%)</title><rect x="68.9513%" y="197" width="12.6059%" height="15" fill="rgb(205,98,50)"/><text x="69.2013%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (24,650,387 samples, 12.59%)</title><rect x="68.9639%" y="181" width="12.5933%" height="15" fill="rgb(205,185,37)"/><text x="69.2139%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (390,764 samples, 0.20%)</title><rect x="81.3576%" y="165" width="0.1996%" height="15" fill="rgb(238,207,15)"/><text x="81.6076%" y="175.50"></text></g><g><title>finalize_macro_resolutions (262,043 samples, 0.13%)</title><rect x="81.7342%" y="181" width="0.1339%" height="15" fill="rgb(213,199,42)"/><text x="81.9842%" y="191.50"></text></g><g><title>late_resolve_crate (3,811,889 samples, 1.95%)</title><rect x="81.8681%" y="181" width="1.9474%" height="15" fill="rgb(235,201,11)"/><text x="82.1181%" y="191.50">l..</text></g><g><title>configure_and_expand (29,956,781 samples, 15.30%)</title><rect x="68.6253%" y="213" width="15.3042%" height="15" fill="rgb(207,46,11)"/><text x="68.8753%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (4,450,095 samples, 2.27%)</title><rect x="81.6561%" y="197" width="2.2734%" height="15" fill="rgb(241,35,35)"/><text x="81.9061%" y="207.50">r..</text></g><g><title>early_lint_checks (410,294 samples, 0.21%)</title><rect x="84.0200%" y="213" width="0.2096%" height="15" fill="rgb(243,32,47)"/><text x="84.2700%" y="223.50"></text></g><g><title>free_global_ctxt (4,267,963 samples, 2.18%)</title><rect x="84.2296%" y="213" width="2.1804%" height="15" fill="rgb(247,202,23)"/><text x="84.4796%" y="223.50">f..</text></g><g><title>eval_to_const_value_raw (199,052 samples, 0.10%)</title><rect x="87.7029%" y="101" width="0.1017%" height="15" fill="rgb(219,102,11)"/><text x="87.9529%" y="111.50"></text></g><g><title>optimized_mir (689,638 samples, 0.35%)</title><rect x="87.4541%" y="133" width="0.3523%" height="15" fill="rgb(243,110,44)"/><text x="87.7041%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (222,602 samples, 0.11%)</title><rect x="87.6927%" y="117" width="0.1137%" height="15" fill="rgb(222,74,54)"/><text x="87.9427%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (857,769 samples, 0.44%)</title><rect x="87.3985%" y="149" width="0.4382%" height="15" fill="rgb(216,99,12)"/><text x="87.6485%" y="159.50"></text></g><g><title>monomorphization_collector (886,849 samples, 0.45%)</title><rect x="87.3970%" y="165" width="0.4531%" height="15" fill="rgb(226,22,26)"/><text x="87.6470%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,020,240 samples, 0.52%)</title><rect x="87.3835%" y="181" width="0.5212%" height="15" fill="rgb(217,163,10)"/><text x="87.6335%" y="191.50"></text></g><g><title>exported_symbols (1,161,652 samples, 0.59%)</title><rect x="87.3767%" y="197" width="0.5935%" height="15" fill="rgb(213,25,53)"/><text x="87.6267%" y="207.50"></text></g><g><title>layout_of (585,525 samples, 0.30%)</title><rect x="90.0170%" y="181" width="0.2991%" height="15" fill="rgb(252,105,26)"/><text x="90.2670%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,626,490 samples, 2.36%)</title><rect x="90.3162%" y="181" width="2.3636%" height="15" fill="rgb(220,39,43)"/><text x="90.5662%" y="191.50">mi..</text></g><g><title>optimized_mir (9,170,661 samples, 4.69%)</title><rect x="88.0260%" y="197" width="4.6851%" height="15" fill="rgb(229,68,48)"/><text x="88.2760%" y="207.50">optim..</text></g><g><title>generate_crate_metadata (12,444,444 samples, 6.36%)</title><rect x="86.4100%" y="213" width="6.3576%" height="15" fill="rgb(252,8,32)"/><text x="86.6600%" y="223.50">generate..</text></g><g><title>hir_lowering (3,033,640 samples, 1.55%)</title><rect x="92.7676%" y="213" width="1.5498%" height="15" fill="rgb(223,20,43)"/><text x="93.0176%" y="223.50"></text></g><g><title>finish_ongoing_codegen (5,592,937 samples, 2.86%)</title><rect x="94.3240%" y="197" width="2.8573%" height="15" fill="rgb(229,81,49)"/><text x="94.5740%" y="207.50">fi..</text></g><g><title>link_crate (990,690 samples, 0.51%)</title><rect x="97.1813%" y="197" width="0.5061%" height="15" fill="rgb(236,28,36)"/><text x="97.4313%" y="207.50"></text></g><g><title>link_binary (954,769 samples, 0.49%)</title><rect x="97.1996%" y="181" width="0.4878%" height="15" fill="rgb(249,185,26)"/><text x="97.4496%" y="191.50"></text></g><g><title>link_rlib (669,067 samples, 0.34%)</title><rect x="97.3456%" y="165" width="0.3418%" height="15" fill="rgb(249,174,33)"/><text x="97.5956%" y="175.50"></text></g><g><title>link (6,603,457 samples, 3.37%)</title><rect x="94.3174%" y="213" width="3.3735%" height="15" fill="rgb(233,201,37)"/><text x="94.5674%" y="223.50">link</text></g><g><title>parse_crate (2,858,028 samples, 1.46%)</title><rect x="97.6910%" y="213" width="1.4601%" height="15" fill="rgb(221,78,26)"/><text x="97.9410%" y="223.50"></text></g><g><title>prepare_outputs (213,772 samples, 0.11%)</title><rect x="99.1554%" y="213" width="0.1092%" height="15" fill="rgb(250,127,30)"/><text x="99.4054%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (956,790 samples, 0.49%)</title><rect x="99.2646%" y="213" width="0.4888%" height="15" fill="rgb(230,49,44)"/><text x="99.5146%" y="223.50"></text></g><g><title>all (195,742,088 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (195,742,088 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (418,405 samples, 0.21%)</title><rect x="99.7862%" y="213" width="0.2138%" height="15" fill="rgb(215,43,3)"/><text x="100.0362%" y="223.50"></text></g></svg></svg>