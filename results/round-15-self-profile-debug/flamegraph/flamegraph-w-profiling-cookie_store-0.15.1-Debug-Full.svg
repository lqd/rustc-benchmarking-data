<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (245,058,414 samples, 13.63%)</title><rect x="0.0475%" y="197" width="13.6292%" height="15" fill="rgb(227,0,7)"/><text x="0.2975%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (4,105,259 samples, 0.23%)</title><rect x="17.7188%" y="69" width="0.2283%" height="15" fill="rgb(217,0,24)"/><text x="17.9688%" y="79.50"></text></g><g><title>evaluate_obligation (3,318,154 samples, 0.18%)</title><rect x="17.7626%" y="53" width="0.1845%" height="15" fill="rgb(221,193,54)"/><text x="18.0126%" y="63.50"></text></g><g><title>needs_drop_raw (5,973,189 samples, 0.33%)</title><rect x="17.6459%" y="85" width="0.3322%" height="15" fill="rgb(248,212,6)"/><text x="17.8959%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,821,749 samples, 0.10%)</title><rect x="18.0127%" y="69" width="0.1013%" height="15" fill="rgb(208,68,35)"/><text x="18.2627%" y="79.50"></text></g><g><title>resolve_instance (3,042,300 samples, 0.17%)</title><rect x="17.9799%" y="85" width="0.1692%" height="15" fill="rgb(232,128,0)"/><text x="18.2299%" y="95.50"></text></g><g><title>thir_body (3,329,251 samples, 0.19%)</title><rect x="18.1556%" y="85" width="0.1852%" height="15" fill="rgb(207,160,47)"/><text x="18.4056%" y="95.50"></text></g><g><title>mir_const (28,130,684 samples, 1.56%)</title><rect x="16.7919%" y="133" width="1.5645%" height="15" fill="rgb(228,23,34)"/><text x="17.0419%" y="143.50"></text></g><g><title>unsafety_check_result (24,725,165 samples, 1.38%)</title><rect x="16.9813%" y="117" width="1.3751%" height="15" fill="rgb(218,30,26)"/><text x="17.2313%" y="127.50"></text></g><g><title>mir_built (22,174,224 samples, 1.23%)</title><rect x="17.1232%" y="101" width="1.2332%" height="15" fill="rgb(220,122,19)"/><text x="17.3732%" y="111.50"></text></g><g><title>mir_promoted (31,584,944 samples, 1.76%)</title><rect x="16.6440%" y="149" width="1.7566%" height="15" fill="rgb(250,228,42)"/><text x="16.8940%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (3,124,947 samples, 0.17%)</title><rect x="18.4006%" y="149" width="0.1738%" height="15" fill="rgb(240,193,28)"/><text x="18.6506%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,046,237 samples, 0.11%)</title><rect x="18.5744%" y="149" width="0.1138%" height="15" fill="rgb(216,20,37)"/><text x="18.8244%" y="159.50"></text></g><g><title>type_op_normalize_predicate (6,687,241 samples, 0.37%)</title><rect x="18.6882%" y="149" width="0.3719%" height="15" fill="rgb(206,188,39)"/><text x="18.9382%" y="159.50"></text></g><g><title>normalize_projection_ty (3,988,121 samples, 0.22%)</title><rect x="18.8383%" y="133" width="0.2218%" height="15" fill="rgb(217,207,13)"/><text x="19.0883%" y="143.50"></text></g><g><title>type_op_prove_predicate (17,632,673 samples, 0.98%)</title><rect x="19.1178%" y="149" width="0.9807%" height="15" fill="rgb(231,73,38)"/><text x="19.3678%" y="159.50"></text></g><g><title>MIR_borrow_checking (114,793,414 samples, 6.38%)</title><rect x="13.7169%" y="181" width="6.3844%" height="15" fill="rgb(225,20,46)"/><text x="13.9669%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (114,366,359 samples, 6.36%)</title><rect x="13.7406%" y="165" width="6.3606%" height="15" fill="rgb(210,31,41)"/><text x="13.9906%" y="175.50">mir_borr..</text></g><g><title>misc_checking_1 (2,950,549 samples, 0.16%)</title><rect x="20.1474%" y="181" width="0.1641%" height="15" fill="rgb(221,200,47)"/><text x="20.3974%" y="191.50"></text></g><g><title>misc_checking_2 (4,143,062 samples, 0.23%)</title><rect x="20.3115%" y="181" width="0.2304%" height="15" fill="rgb(226,26,5)"/><text x="20.5615%" y="191.50"></text></g><g><title>match_checking (2,406,855 samples, 0.13%)</title><rect x="20.4080%" y="165" width="0.1339%" height="15" fill="rgb(249,33,26)"/><text x="20.6580%" y="175.50"></text></g><g><title>check_match (2,299,635 samples, 0.13%)</title><rect x="20.4140%" y="149" width="0.1279%" height="15" fill="rgb(235,183,28)"/><text x="20.6640%" y="159.50"></text></g><g><title>crate_lints (4,714,047 samples, 0.26%)</title><rect x="20.6631%" y="149" width="0.2622%" height="15" fill="rgb(221,5,38)"/><text x="20.9131%" y="159.50"></text></g><g><title>lint_checking (6,216,542 samples, 0.35%)</title><rect x="20.6630%" y="165" width="0.3457%" height="15" fill="rgb(247,18,42)"/><text x="20.9130%" y="175.50"></text></g><g><title>privacy_checking_modules (3,220,862 samples, 0.18%)</title><rect x="21.0637%" y="165" width="0.1791%" height="15" fill="rgb(241,131,45)"/><text x="21.3137%" y="175.50"></text></g><g><title>check_mod_privacy (3,213,122 samples, 0.18%)</title><rect x="21.0642%" y="149" width="0.1787%" height="15" fill="rgb(249,31,29)"/><text x="21.3142%" y="159.50"></text></g><g><title>misc_checking_3 (12,624,996 samples, 0.70%)</title><rect x="20.5419%" y="181" width="0.7022%" height="15" fill="rgb(225,111,53)"/><text x="20.7919%" y="191.50"></text></g><g><title>impl_parent (3,464,141 samples, 0.19%)</title><rect x="21.6353%" y="117" width="0.1927%" height="15" fill="rgb(238,160,17)"/><text x="21.8853%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,048,599 samples, 0.11%)</title><rect x="21.7140%" y="101" width="0.1139%" height="15" fill="rgb(214,148,48)"/><text x="21.9640%" y="111.50"></text></g><g><title>impl_trait_ref (7,382,789 samples, 0.41%)</title><rect x="21.8280%" y="117" width="0.4106%" height="15" fill="rgb(232,36,49)"/><text x="22.0780%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,789,425 samples, 0.32%)</title><rect x="21.9166%" y="101" width="0.3220%" height="15" fill="rgb(209,103,24)"/><text x="22.1666%" y="111.50"></text></g><g><title>coherent_trait (19,225,842 samples, 1.07%)</title><rect x="21.2578%" y="149" width="1.0693%" height="15" fill="rgb(229,88,8)"/><text x="21.5078%" y="159.50"></text></g><g><title>specialization_graph_of (19,187,101 samples, 1.07%)</title><rect x="21.2600%" y="133" width="1.0671%" height="15" fill="rgb(213,181,19)"/><text x="21.5100%" y="143.50"></text></g><g><title>coherence_checking (19,375,585 samples, 1.08%)</title><rect x="21.2557%" y="165" width="1.0776%" height="15" fill="rgb(254,191,54)"/><text x="21.5057%" y="175.50"></text></g><g><title>dropck_outlives (1,979,171 samples, 0.11%)</title><rect x="24.9713%" y="117" width="0.1101%" height="15" fill="rgb(241,83,37)"/><text x="25.2213%" y="127.50"></text></g><g><title>evaluate_obligation (5,955,741 samples, 0.33%)</title><rect x="25.0813%" y="117" width="0.3312%" height="15" fill="rgb(233,36,39)"/><text x="25.3313%" y="127.50"></text></g><g><title>dropck_outlives (2,493,064 samples, 0.14%)</title><rect x="27.6602%" y="101" width="0.1387%" height="15" fill="rgb(226,3,54)"/><text x="27.9102%" y="111.50"></text></g><g><title>evaluate_obligation (6,281,997 samples, 0.35%)</title><rect x="27.7989%" y="101" width="0.3494%" height="15" fill="rgb(245,192,40)"/><text x="28.0489%" y="111.50"></text></g><g><title>typeck (49,065,082 samples, 2.73%)</title><rect x="25.6118%" y="117" width="2.7288%" height="15" fill="rgb(238,167,29)"/><text x="25.8618%" y="127.50">ty..</text></g><g><title>item_bodies_checking (108,018,055 samples, 6.01%)</title><rect x="22.3379%" y="165" width="6.0075%" height="15" fill="rgb(232,182,51)"/><text x="22.5879%" y="175.50">item_bod..</text></g><g><title>typeck_item_bodies (108,014,185 samples, 6.01%)</title><rect x="22.3382%" y="149" width="6.0073%" height="15" fill="rgb(231,60,39)"/><text x="22.5882%" y="159.50">typeck_i..</text></g><g><title>typeck (107,772,702 samples, 5.99%)</title><rect x="22.3516%" y="133" width="5.9939%" height="15" fill="rgb(208,69,12)"/><text x="22.6016%" y="143.50">typeck</text></g><g><title>mir_built (10,395,844 samples, 0.58%)</title><rect x="28.8903%" y="53" width="0.5782%" height="15" fill="rgb(235,93,37)"/><text x="29.1403%" y="63.50"></text></g><g><title>typeck (7,917,889 samples, 0.44%)</title><rect x="29.0282%" y="37" width="0.4404%" height="15" fill="rgb(213,116,39)"/><text x="29.2782%" y="47.50"></text></g><g><title>mir_const (11,022,221 samples, 0.61%)</title><rect x="28.8701%" y="85" width="0.6130%" height="15" fill="rgb(222,207,29)"/><text x="29.1201%" y="95.50"></text></g><g><title>unsafety_check_result (10,787,018 samples, 0.60%)</title><rect x="28.8832%" y="69" width="0.5999%" height="15" fill="rgb(206,96,30)"/><text x="29.1332%" y="79.50"></text></g><g><title>mir_promoted (11,077,372 samples, 0.62%)</title><rect x="28.8673%" y="101" width="0.6161%" height="15" fill="rgb(218,138,4)"/><text x="29.1173%" y="111.50"></text></g><g><title>type_of (18,082,753 samples, 1.01%)</title><rect x="28.6099%" y="133" width="1.0057%" height="15" fill="rgb(250,191,14)"/><text x="28.8599%" y="143.50"></text></g><g><title>mir_borrowck (18,005,331 samples, 1.00%)</title><rect x="28.6142%" y="117" width="1.0014%" height="15" fill="rgb(239,60,40)"/><text x="28.8642%" y="127.50"></text></g><g><title>item_types_checking (23,866,540 samples, 1.33%)</title><rect x="28.3455%" y="165" width="1.3274%" height="15" fill="rgb(206,27,48)"/><text x="28.5955%" y="175.50"></text></g><g><title>check_mod_item_types (23,853,690 samples, 1.33%)</title><rect x="28.3462%" y="149" width="1.3266%" height="15" fill="rgb(225,35,8)"/><text x="28.5962%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,857,589 samples, 0.10%)</title><rect x="29.7199%" y="133" width="0.1033%" height="15" fill="rgb(250,213,24)"/><text x="29.9699%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,844,648 samples, 0.10%)</title><rect x="29.7207%" y="117" width="0.1026%" height="15" fill="rgb(247,123,22)"/><text x="29.9707%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,837,868 samples, 0.10%)</title><rect x="29.7210%" y="101" width="0.1022%" height="15" fill="rgb(231,138,38)"/><text x="29.9710%" y="111.50"></text></g><g><title>generics_of (2,150,123 samples, 0.12%)</title><rect x="29.8930%" y="133" width="0.1196%" height="15" fill="rgb(231,145,46)"/><text x="30.1430%" y="143.50"></text></g><g><title>type_collecting (8,344,724 samples, 0.46%)</title><rect x="29.6733%" y="165" width="0.4641%" height="15" fill="rgb(251,118,11)"/><text x="29.9233%" y="175.50"></text></g><g><title>collect_mod_item_types (8,328,703 samples, 0.46%)</title><rect x="29.6742%" y="149" width="0.4632%" height="15" fill="rgb(217,147,25)"/><text x="29.9242%" y="159.50"></text></g><g><title>check_impl_item_well_formed (10,559,750 samples, 0.59%)</title><rect x="30.1687%" y="149" width="0.5873%" height="15" fill="rgb(247,81,37)"/><text x="30.4187%" y="159.50"></text></g><g><title>check_item_well_formed (5,332,362 samples, 0.30%)</title><rect x="30.7560%" y="149" width="0.2966%" height="15" fill="rgb(209,12,38)"/><text x="31.0060%" y="159.50"></text></g><g><title>analysis (312,503,149 samples, 17.38%)</title><rect x="13.6767%" y="197" width="17.3802%" height="15" fill="rgb(227,1,9)"/><text x="13.9267%" y="207.50">analysis</text></g><g><title>type_check_crate (176,438,053 samples, 9.81%)</title><rect x="21.2441%" y="181" width="9.8128%" height="15" fill="rgb(248,47,43)"/><text x="21.4941%" y="191.50">type_check_cra..</text></g><g><title>wf_checking (16,515,946 samples, 0.92%)</title><rect x="30.1383%" y="165" width="0.9186%" height="15" fill="rgb(221,10,30)"/><text x="30.3883%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (10,223,321 samples, 0.57%)</title><rect x="41.6615%" y="165" width="0.5686%" height="15" fill="rgb(210,229,1)"/><text x="41.9115%" y="175.50"></text></g><g><title>layout_of (2,829,162 samples, 0.16%)</title><rect x="42.9663%" y="149" width="0.1573%" height="15" fill="rgb(222,148,37)"/><text x="43.2163%" y="159.50"></text></g><g><title>predicates_of (3,471,036 samples, 0.19%)</title><rect x="43.5222%" y="133" width="0.1930%" height="15" fill="rgb(234,67,33)"/><text x="43.7722%" y="143.50"></text></g><g><title>predicates_defined_on (2,631,404 samples, 0.15%)</title><rect x="43.5689%" y="117" width="0.1463%" height="15" fill="rgb(247,98,35)"/><text x="43.8189%" y="127.50"></text></g><g><title>param_env (10,659,282 samples, 0.59%)</title><rect x="43.1236%" y="149" width="0.5928%" height="15" fill="rgb(247,138,52)"/><text x="43.3736%" y="159.50"></text></g><g><title>normalize_projection_ty (2,593,414 samples, 0.14%)</title><rect x="43.7903%" y="133" width="0.1442%" height="15" fill="rgb(213,79,30)"/><text x="44.0403%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,961,725 samples, 0.22%)</title><rect x="43.7165%" y="149" width="0.2203%" height="15" fill="rgb(246,177,23)"/><text x="43.9665%" y="159.50"></text></g><g><title>fn_abi_of_instance (28,960,615 samples, 1.61%)</title><rect x="42.3309%" y="165" width="1.6107%" height="15" fill="rgb(230,62,27)"/><text x="42.5809%" y="175.50"></text></g><g><title>layout_of (1,943,589 samples, 0.11%)</title><rect x="44.2045%" y="133" width="0.1081%" height="15" fill="rgb(216,154,8)"/><text x="44.4545%" y="143.50"></text></g><g><title>layout_of (2,390,853 samples, 0.13%)</title><rect x="44.1866%" y="149" width="0.1330%" height="15" fill="rgb(244,35,45)"/><text x="44.4366%" y="159.50"></text></g><g><title>layout_of (5,864,208 samples, 0.33%)</title><rect x="44.0064%" y="165" width="0.3261%" height="15" fill="rgb(251,115,12)"/><text x="44.2564%" y="175.50"></text></g><g><title>symbol_name (2,340,583 samples, 0.13%)</title><rect x="44.3351%" y="165" width="0.1302%" height="15" fill="rgb(240,54,50)"/><text x="44.5851%" y="175.50"></text></g><g><title>codegen_module (239,148,461 samples, 13.30%)</title><rect x="31.2386%" y="181" width="13.3005%" height="15" fill="rgb(233,84,52)"/><text x="31.4886%" y="191.50">codegen_module</text></g><g><title>codegen_crate (242,560,927 samples, 13.49%)</title><rect x="31.0573%" y="197" width="13.4903%" height="15" fill="rgb(207,117,47)"/><text x="31.3073%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (708,813,695 samples, 39.42%)</title><rect x="44.5602%" y="181" width="39.4214%" height="15" fill="rgb(249,43,39)"/><text x="44.8102%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (680,877,204 samples, 37.87%)</title><rect x="46.1139%" y="165" width="37.8677%" height="15" fill="rgb(209,38,44)"/><text x="46.3639%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (744,776,805 samples, 41.42%)</title><rect x="44.5476%" y="197" width="41.4216%" height="15" fill="rgb(236,212,23)"/><text x="44.7976%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (35,736,367 samples, 1.99%)</title><rect x="83.9816%" y="181" width="1.9875%" height="15" fill="rgb(242,79,21)"/><text x="84.2316%" y="191.50">L..</text></g><g><title>metadata_register_crate (11,147,383 samples, 0.62%)</title><rect x="89.1727%" y="149" width="0.6200%" height="15" fill="rgb(211,96,35)"/><text x="89.4227%" y="159.50"></text></g><g><title>metadata_register_crate (9,395,472 samples, 0.52%)</title><rect x="89.2701%" y="133" width="0.5225%" height="15" fill="rgb(253,215,40)"/><text x="89.5201%" y="143.50"></text></g><g><title>metadata_register_crate (4,971,380 samples, 0.28%)</title><rect x="89.5162%" y="117" width="0.2765%" height="15" fill="rgb(211,81,21)"/><text x="89.7662%" y="127.50"></text></g><g><title>metadata_register_crate (3,962,160 samples, 0.22%)</title><rect x="89.5723%" y="101" width="0.2204%" height="15" fill="rgb(208,190,38)"/><text x="89.8223%" y="111.50"></text></g><g><title>macro_expand_crate (68,498,308 samples, 3.81%)</title><rect x="86.0117%" y="181" width="3.8096%" height="15" fill="rgb(235,213,38)"/><text x="86.2617%" y="191.50">macr..</text></g><g><title>expand_crate (68,484,037 samples, 3.81%)</title><rect x="86.0125%" y="165" width="3.8088%" height="15" fill="rgb(237,122,38)"/><text x="86.2625%" y="175.50">expa..</text></g><g><title>late_resolve_crate (5,897,890 samples, 0.33%)</title><rect x="89.8480%" y="165" width="0.3280%" height="15" fill="rgb(244,218,35)"/><text x="90.0980%" y="175.50"></text></g><g><title>configure_and_expand (75,925,713 samples, 4.22%)</title><rect x="85.9691%" y="197" width="4.2227%" height="15" fill="rgb(240,68,47)"/><text x="86.2191%" y="207.50">confi..</text></g><g><title>resolve_crate (6,606,888 samples, 0.37%)</title><rect x="89.8244%" y="181" width="0.3674%" height="15" fill="rgb(210,16,53)"/><text x="90.0744%" y="191.50"></text></g><g><title>free_global_ctxt (10,410,895 samples, 0.58%)</title><rect x="90.2931%" y="197" width="0.5790%" height="15" fill="rgb(235,124,12)"/><text x="90.5431%" y="207.50"></text></g><g><title>item_attrs (2,128,615 samples, 0.12%)</title><rect x="91.8116%" y="101" width="0.1184%" height="15" fill="rgb(224,169,11)"/><text x="92.0616%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,022,104 samples, 0.11%)</title><rect x="91.8175%" y="85" width="0.1125%" height="15" fill="rgb(250,166,2)"/><text x="92.0675%" y="95.50"></text></g><g><title>codegen_fn_attrs (3,714,383 samples, 0.21%)</title><rect x="91.7734%" y="117" width="0.2066%" height="15" fill="rgb(242,216,29)"/><text x="92.0234%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,909,799 samples, 0.27%)</title><rect x="92.4558%" y="101" width="0.2731%" height="15" fill="rgb(230,116,27)"/><text x="92.7058%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,626,494 samples, 0.31%)</title><rect x="92.7289%" y="101" width="0.3129%" height="15" fill="rgb(228,99,48)"/><text x="92.9789%" y="111.50"></text></g><g><title>optimized_mir (17,406,395 samples, 0.97%)</title><rect x="92.1028%" y="117" width="0.9681%" height="15" fill="rgb(253,11,6)"/><text x="92.3528%" y="127.50"></text></g><g><title>evaluate_obligation (4,507,517 samples, 0.25%)</title><rect x="94.6678%" y="85" width="0.2507%" height="15" fill="rgb(247,143,39)"/><text x="94.9178%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (30,913,646 samples, 1.72%)</title><rect x="93.2774%" y="101" width="1.7193%" height="15" fill="rgb(236,97,10)"/><text x="93.5274%" y="111.50"></text></g><g><title>needs_drop_raw (1,832,909 samples, 0.10%)</title><rect x="95.0665%" y="101" width="0.1019%" height="15" fill="rgb(233,208,19)"/><text x="95.3165%" y="111.50"></text></g><g><title>specialization_graph_of (2,275,214 samples, 0.13%)</title><rect x="95.1691%" y="101" width="0.1265%" height="15" fill="rgb(216,164,2)"/><text x="95.4191%" y="111.50"></text></g><g><title>resolve_instance (41,172,212 samples, 2.29%)</title><rect x="93.0709%" y="117" width="2.2898%" height="15" fill="rgb(220,129,5)"/><text x="93.3209%" y="127.50">r..</text></g><g><title>normalize_projection_ty (4,372,777 samples, 0.24%)</title><rect x="95.4189%" y="101" width="0.2432%" height="15" fill="rgb(242,17,10)"/><text x="95.6689%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,453,153 samples, 0.30%)</title><rect x="95.3608%" y="117" width="0.3033%" height="15" fill="rgb(242,107,0)"/><text x="95.6108%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,946,186 samples, 0.11%)</title><rect x="95.7160%" y="101" width="0.1082%" height="15" fill="rgb(251,28,31)"/><text x="95.9660%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,907,136 samples, 0.11%)</title><rect x="95.7181%" y="85" width="0.1061%" height="15" fill="rgb(233,223,10)"/><text x="95.9681%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,852,946 samples, 0.10%)</title><rect x="95.7212%" y="69" width="0.1031%" height="15" fill="rgb(215,21,27)"/><text x="95.9712%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,929,490 samples, 0.16%)</title><rect x="95.6640%" y="117" width="0.1629%" height="15" fill="rgb(232,23,21)"/><text x="95.9140%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (4,347,783 samples, 0.24%)</title><rect x="95.8277%" y="117" width="0.2418%" height="15" fill="rgb(244,5,23)"/><text x="96.0777%" y="127.50"></text></g><g><title>upstream_monomorphizations (4,271,072 samples, 0.24%)</title><rect x="95.8320%" y="101" width="0.2375%" height="15" fill="rgb(226,81,46)"/><text x="96.0820%" y="111.50"></text></g><g><title>exported_symbols (3,814,978 samples, 0.21%)</title><rect x="95.8573%" y="85" width="0.2122%" height="15" fill="rgb(247,70,30)"/><text x="96.1073%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,803,758 samples, 0.21%)</title><rect x="95.8580%" y="69" width="0.2116%" height="15" fill="rgb(212,68,19)"/><text x="96.1080%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (88,342,247 samples, 4.91%)</title><rect x="91.2372%" y="133" width="4.9133%" height="15" fill="rgb(240,187,13)"/><text x="91.4872%" y="143.50">monomo..</text></g><g><title>monomorphization_collector (88,493,759 samples, 4.92%)</title><rect x="91.2369%" y="149" width="4.9217%" height="15" fill="rgb(223,113,26)"/><text x="91.4869%" y="159.50">monomo..</text></g><g><title>assert_symbols_are_distinct (6,536,366 samples, 0.36%)</title><rect x="96.1589%" y="133" width="0.3635%" height="15" fill="rgb(206,192,2)"/><text x="96.4089%" y="143.50"></text></g><g><title>symbol_name (5,878,111 samples, 0.33%)</title><rect x="96.1955%" y="117" width="0.3269%" height="15" fill="rgb(241,108,4)"/><text x="96.4455%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (97,889,204 samples, 5.44%)</title><rect x="91.2333%" y="165" width="5.4442%" height="15" fill="rgb(247,173,49)"/><text x="91.4833%" y="175.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (9,330,535 samples, 0.52%)</title><rect x="96.1586%" y="149" width="0.5189%" height="15" fill="rgb(224,114,35)"/><text x="96.4086%" y="159.50"></text></g><g><title>cgu_partitioning (2,788,979 samples, 0.16%)</title><rect x="96.5224%" y="133" width="0.1551%" height="15" fill="rgb(245,159,27)"/><text x="96.7724%" y="143.50"></text></g><g><title>exported_symbols (98,457,940 samples, 5.48%)</title><rect x="91.2179%" y="181" width="5.4758%" height="15" fill="rgb(245,172,44)"/><text x="91.4679%" y="191.50">exporte..</text></g><g><title>layout_of (2,676,765 samples, 0.15%)</title><rect x="97.0761%" y="165" width="0.1489%" height="15" fill="rgb(236,23,11)"/><text x="97.3261%" y="175.50"></text></g><g><title>is_copy_raw (2,119,894 samples, 0.12%)</title><rect x="97.7672%" y="133" width="0.1179%" height="15" fill="rgb(205,117,38)"/><text x="98.0172%" y="143.50"></text></g><g><title>needs_drop_raw (2,439,616 samples, 0.14%)</title><rect x="97.7543%" y="149" width="0.1357%" height="15" fill="rgb(237,72,25)"/><text x="98.0043%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,416,598 samples, 0.69%)</title><rect x="97.2249%" y="165" width="0.6906%" height="15" fill="rgb(244,70,9)"/><text x="97.4749%" y="175.50"></text></g><g><title>optimized_mir (21,948,659 samples, 1.22%)</title><rect x="96.7052%" y="181" width="1.2207%" height="15" fill="rgb(217,125,39)"/><text x="96.9552%" y="191.50"></text></g><g><title>generate_crate_metadata (127,250,839 samples, 7.08%)</title><rect x="90.8721%" y="197" width="7.0772%" height="15" fill="rgb(235,36,10)"/><text x="91.1221%" y="207.50">generate_..</text></g><g><title>hir_lowering (8,417,044 samples, 0.47%)</title><rect x="97.9493%" y="197" width="0.4681%" height="15" fill="rgb(251,123,47)"/><text x="98.1993%" y="207.50"></text></g><g><title>finish_ongoing_codegen (18,165,713 samples, 1.01%)</title><rect x="98.4183%" y="181" width="1.0103%" height="15" fill="rgb(221,13,13)"/><text x="98.6683%" y="191.50"></text></g><g><title>link_crate (5,414,044 samples, 0.30%)</title><rect x="99.4286%" y="181" width="0.3011%" height="15" fill="rgb(238,131,9)"/><text x="99.6786%" y="191.50"></text></g><g><title>link_binary (5,347,143 samples, 0.30%)</title><rect x="99.4323%" y="165" width="0.2974%" height="15" fill="rgb(211,50,8)"/><text x="99.6823%" y="175.50"></text></g><g><title>link_rlib (4,219,952 samples, 0.23%)</title><rect x="99.4950%" y="149" width="0.2347%" height="15" fill="rgb(245,182,24)"/><text x="99.7450%" y="159.50"></text></g><g><title>link (23,606,908 samples, 1.31%)</title><rect x="98.4175%" y="197" width="1.3129%" height="15" fill="rgb(242,14,37)"/><text x="98.6675%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (3,417,095 samples, 0.19%)</title><rect x="99.7676%" y="197" width="0.1900%" height="15" fill="rgb(246,228,12)"/><text x="100.0176%" y="207.50"></text></g><g><title>all (1,798,040,690 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,798,040,690 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>