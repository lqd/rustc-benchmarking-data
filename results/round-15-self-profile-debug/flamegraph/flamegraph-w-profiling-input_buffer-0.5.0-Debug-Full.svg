<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (33,546,659 samples, 11.35%)</title><rect x="0.2520%" y="197" width="11.3479%" height="15" fill="rgb(227,0,7)"/><text x="0.5020%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (487,396 samples, 0.16%)</title><rect x="13.7680%" y="85" width="0.1649%" height="15" fill="rgb(217,0,24)"/><text x="14.0180%" y="95.50"></text></g><g><title>is_copy_raw (312,545 samples, 0.11%)</title><rect x="13.8272%" y="69" width="0.1057%" height="15" fill="rgb(221,193,54)"/><text x="14.0772%" y="79.50"></text></g><g><title>specialization_graph_of (1,340,684 samples, 0.45%)</title><rect x="13.9923%" y="69" width="0.4535%" height="15" fill="rgb(248,212,6)"/><text x="14.2423%" y="79.50"></text></g><g><title>impl_trait_ref (535,327 samples, 0.18%)</title><rect x="14.2647%" y="53" width="0.1811%" height="15" fill="rgb(208,68,35)"/><text x="14.5147%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (482,495 samples, 0.16%)</title><rect x="14.2826%" y="37" width="0.1632%" height="15" fill="rgb(232,128,0)"/><text x="14.5326%" y="47.50"></text></g><g><title>resolve_instance (1,570,624 samples, 0.53%)</title><rect x="13.9329%" y="85" width="0.5313%" height="15" fill="rgb(207,160,47)"/><text x="14.1829%" y="95.50"></text></g><g><title>thir_body (300,392 samples, 0.10%)</title><rect x="14.4672%" y="85" width="0.1016%" height="15" fill="rgb(228,23,34)"/><text x="14.7172%" y="95.50"></text></g><g><title>mir_const (4,216,209 samples, 1.43%)</title><rect x="13.1445%" y="133" width="1.4262%" height="15" fill="rgb(218,30,26)"/><text x="13.3945%" y="143.50"></text></g><g><title>unsafety_check_result (3,749,664 samples, 1.27%)</title><rect x="13.3023%" y="117" width="1.2684%" height="15" fill="rgb(220,122,19)"/><text x="13.5523%" y="127.50"></text></g><g><title>mir_built (3,352,929 samples, 1.13%)</title><rect x="13.4365%" y="101" width="1.1342%" height="15" fill="rgb(250,228,42)"/><text x="13.6865%" y="111.50"></text></g><g><title>mir_promoted (4,694,997 samples, 1.59%)</title><rect x="13.0445%" y="149" width="1.5882%" height="15" fill="rgb(240,193,28)"/><text x="13.2945%" y="159.50"></text></g><g><title>type_op_prove_predicate (610,908 samples, 0.21%)</title><rect x="14.7468%" y="149" width="0.2067%" height="15" fill="rgb(216,20,37)"/><text x="14.9968%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,647,158 samples, 3.26%)</title><rect x="11.6922%" y="181" width="3.2634%" height="15" fill="rgb(206,188,39)"/><text x="11.9422%" y="191.50">MIR..</text></g><g><title>mir_borrowck (9,604,608 samples, 3.25%)</title><rect x="11.7066%" y="165" width="3.2490%" height="15" fill="rgb(217,207,13)"/><text x="11.9566%" y="175.50">mir..</text></g><g><title>codegen_fn_attrs (352,573 samples, 0.12%)</title><rect x="15.1973%" y="117" width="0.1193%" height="15" fill="rgb(231,73,38)"/><text x="15.4473%" y="127.50"></text></g><g><title>codegen_fn_attrs (548,315 samples, 0.19%)</title><rect x="15.1332%" y="149" width="0.1855%" height="15" fill="rgb(225,20,46)"/><text x="15.3832%" y="159.50"></text></g><g><title>should_inherit_track_caller (482,925 samples, 0.16%)</title><rect x="15.1553%" y="133" width="0.1634%" height="15" fill="rgb(210,31,41)"/><text x="15.4053%" y="143.50"></text></g><g><title>check_mod_attrs (759,098 samples, 0.26%)</title><rect x="15.0621%" y="165" width="0.2568%" height="15" fill="rgb(221,200,47)"/><text x="15.3121%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (381,994 samples, 0.13%)</title><rect x="15.3800%" y="165" width="0.1292%" height="15" fill="rgb(226,26,5)"/><text x="15.6300%" y="175.50"></text></g><g><title>misc_checking_1 (1,409,274 samples, 0.48%)</title><rect x="15.0524%" y="181" width="0.4767%" height="15" fill="rgb(249,33,26)"/><text x="15.3024%" y="191.50"></text></g><g><title>misc_checking_2 (338,253 samples, 0.11%)</title><rect x="15.5291%" y="181" width="0.1144%" height="15" fill="rgb(235,183,28)"/><text x="15.7791%" y="191.50"></text></g><g><title>crate_lints (1,643,806 samples, 0.56%)</title><rect x="15.7319%" y="149" width="0.5561%" height="15" fill="rgb(221,5,38)"/><text x="15.9819%" y="159.50"></text></g><g><title>type_of (1,006,408 samples, 0.34%)</title><rect x="15.9475%" y="133" width="0.3404%" height="15" fill="rgb(247,18,42)"/><text x="16.1975%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (771,266 samples, 0.26%)</title><rect x="16.0271%" y="117" width="0.2609%" height="15" fill="rgb(241,131,45)"/><text x="16.2771%" y="127.50"></text></g><g><title>lint_checking (1,772,548 samples, 0.60%)</title><rect x="15.7314%" y="165" width="0.5996%" height="15" fill="rgb(249,31,29)"/><text x="15.9814%" y="175.50"></text></g><g><title>misc_checking_3 (2,403,604 samples, 0.81%)</title><rect x="15.6435%" y="181" width="0.8131%" height="15" fill="rgb(225,111,53)"/><text x="15.8935%" y="191.50"></text></g><g><title>adt_destructor (314,593 samples, 0.11%)</title><rect x="16.4926%" y="133" width="0.1064%" height="15" fill="rgb(238,160,17)"/><text x="16.7426%" y="143.50"></text></g><g><title>coherent_trait (302,733 samples, 0.10%)</title><rect x="16.4966%" y="117" width="0.1024%" height="15" fill="rgb(214,148,48)"/><text x="16.7466%" y="127.50"></text></g><g><title>specialization_graph_of (301,753 samples, 0.10%)</title><rect x="16.4969%" y="101" width="0.1021%" height="15" fill="rgb(232,36,49)"/><text x="16.7469%" y="111.50"></text></g><g><title>impl_parent (1,987,877 samples, 0.67%)</title><rect x="17.7708%" y="117" width="0.6724%" height="15" fill="rgb(209,103,24)"/><text x="18.0208%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,187,747 samples, 0.40%)</title><rect x="18.0414%" y="101" width="0.4018%" height="15" fill="rgb(229,88,8)"/><text x="18.2914%" y="111.50"></text></g><g><title>impl_trait_ref (5,730,800 samples, 1.94%)</title><rect x="18.4432%" y="117" width="1.9386%" height="15" fill="rgb(213,181,19)"/><text x="18.6932%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,912,254 samples, 1.66%)</title><rect x="18.7201%" y="101" width="1.6617%" height="15" fill="rgb(254,191,54)"/><text x="18.9701%" y="111.50"></text></g><g><title>coherent_trait (12,360,325 samples, 4.18%)</title><rect x="16.4773%" y="149" width="4.1812%" height="15" fill="rgb(241,83,37)"/><text x="16.7273%" y="159.50">coher..</text></g><g><title>specialization_graph_of (11,894,870 samples, 4.02%)</title><rect x="16.6347%" y="133" width="4.0237%" height="15" fill="rgb(233,36,39)"/><text x="16.8847%" y="143.50">spec..</text></g><g><title>trait_impls_of (816,187 samples, 0.28%)</title><rect x="20.3824%" y="117" width="0.2761%" height="15" fill="rgb(226,3,54)"/><text x="20.6324%" y="127.50"></text></g><g><title>coherence_checking (12,460,755 samples, 4.22%)</title><rect x="16.4701%" y="165" width="4.2151%" height="15" fill="rgb(245,192,40)"/><text x="16.7201%" y="175.50">coher..</text></g><g><title>associated_item (447,436 samples, 0.15%)</title><rect x="23.1444%" y="101" width="0.1514%" height="15" fill="rgb(238,167,29)"/><text x="23.3944%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (350,114 samples, 0.12%)</title><rect x="23.1773%" y="85" width="0.1184%" height="15" fill="rgb(232,182,51)"/><text x="23.4273%" y="95.50"></text></g><g><title>associated_items (644,887 samples, 0.22%)</title><rect x="23.0877%" y="117" width="0.2181%" height="15" fill="rgb(231,60,39)"/><text x="23.3377%" y="127.50"></text></g><g><title>dropck_outlives (397,033 samples, 0.13%)</title><rect x="23.3248%" y="117" width="0.1343%" height="15" fill="rgb(208,69,12)"/><text x="23.5748%" y="127.50"></text></g><g><title>trait_impls_of (452,924 samples, 0.15%)</title><rect x="23.8511%" y="101" width="0.1532%" height="15" fill="rgb(235,93,37)"/><text x="24.1011%" y="111.50"></text></g><g><title>evaluate_obligation (1,617,253 samples, 0.55%)</title><rect x="23.4591%" y="117" width="0.5471%" height="15" fill="rgb(213,116,39)"/><text x="23.7091%" y="127.50"></text></g><g><title>method_autoderef_steps (321,445 samples, 0.11%)</title><rect x="24.2199%" y="117" width="0.1087%" height="15" fill="rgb(222,207,29)"/><text x="24.4699%" y="127.50"></text></g><g><title>predicates_of (336,752 samples, 0.11%)</title><rect x="24.3853%" y="117" width="0.1139%" height="15" fill="rgb(206,96,30)"/><text x="24.6353%" y="127.50"></text></g><g><title>item_bodies_checking (11,460,047 samples, 3.88%)</title><rect x="20.6973%" y="165" width="3.8766%" height="15" fill="rgb(218,138,4)"/><text x="20.9473%" y="175.50">item..</text></g><g><title>typeck_item_bodies (11,457,967 samples, 3.88%)</title><rect x="20.6980%" y="149" width="3.8759%" height="15" fill="rgb(250,191,14)"/><text x="20.9480%" y="159.50">type..</text></g><g><title>typeck (11,429,107 samples, 3.87%)</title><rect x="20.7077%" y="133" width="3.8662%" height="15" fill="rgb(239,60,40)"/><text x="20.9577%" y="143.50">type..</text></g><g><title>item_types_checking (440,624 samples, 0.15%)</title><rect x="24.5739%" y="165" width="0.1491%" height="15" fill="rgb(206,27,48)"/><text x="24.8239%" y="175.50"></text></g><g><title>check_mod_item_types (438,534 samples, 0.15%)</title><rect x="24.5746%" y="149" width="0.1483%" height="15" fill="rgb(225,35,8)"/><text x="24.8246%" y="159.50"></text></g><g><title>fn_sig (368,262 samples, 0.12%)</title><rect x="24.8116%" y="133" width="0.1246%" height="15" fill="rgb(250,213,24)"/><text x="25.0616%" y="143.50"></text></g><g><title>generics_of (556,575 samples, 0.19%)</title><rect x="24.9362%" y="133" width="0.1883%" height="15" fill="rgb(247,123,22)"/><text x="25.1862%" y="143.50"></text></g><g><title>predicates_of (548,670 samples, 0.19%)</title><rect x="25.1425%" y="133" width="0.1856%" height="15" fill="rgb(231,138,38)"/><text x="25.3925%" y="143.50"></text></g><g><title>predicates_defined_on (506,828 samples, 0.17%)</title><rect x="25.1566%" y="117" width="0.1714%" height="15" fill="rgb(231,145,46)"/><text x="25.4066%" y="127.50"></text></g><g><title>inferred_outlives_of (307,243 samples, 0.10%)</title><rect x="25.2241%" y="101" width="0.1039%" height="15" fill="rgb(251,118,11)"/><text x="25.4741%" y="111.50"></text></g><g><title>type_collecting (1,910,969 samples, 0.65%)</title><rect x="24.7233%" y="165" width="0.6464%" height="15" fill="rgb(217,147,25)"/><text x="24.9733%" y="175.50"></text></g><g><title>collect_mod_item_types (1,893,189 samples, 0.64%)</title><rect x="24.7294%" y="149" width="0.6404%" height="15" fill="rgb(247,81,37)"/><text x="24.9794%" y="159.50"></text></g><g><title>evaluate_obligation (464,345 samples, 0.16%)</title><rect x="25.6324%" y="133" width="0.1571%" height="15" fill="rgb(209,12,38)"/><text x="25.8824%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,584,535 samples, 0.54%)</title><rect x="25.3927%" y="149" width="0.5360%" height="15" fill="rgb(227,1,9)"/><text x="25.6427%" y="159.50"></text></g><g><title>analysis (43,013,615 samples, 14.55%)</title><rect x="11.5999%" y="197" width="14.5504%" height="15" fill="rgb(248,47,43)"/><text x="11.8499%" y="207.50">analysis</text></g><g><title>type_check_crate (28,656,230 samples, 9.69%)</title><rect x="16.4566%" y="181" width="9.6936%" height="15" fill="rgb(221,10,30)"/><text x="16.7066%" y="191.50">type_check_cra..</text></g><g><title>wf_checking (2,305,164 samples, 0.78%)</title><rect x="25.3705%" y="165" width="0.7798%" height="15" fill="rgb(210,229,1)"/><text x="25.6205%" y="175.50"></text></g><g><title>check_item_well_formed (654,908 samples, 0.22%)</title><rect x="25.9287%" y="149" width="0.2215%" height="15" fill="rgb(222,148,37)"/><text x="26.1787%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (315,142 samples, 0.11%)</title><rect x="33.6522%" y="165" width="0.1066%" height="15" fill="rgb(234,67,33)"/><text x="33.9022%" y="175.50"></text></g><g><title>const_caller_location (558,990 samples, 0.19%)</title><rect x="33.7588%" y="165" width="0.1891%" height="15" fill="rgb(247,98,35)"/><text x="34.0088%" y="175.50"></text></g><g><title>item_attrs (356,221 samples, 0.12%)</title><rect x="34.4290%" y="133" width="0.1205%" height="15" fill="rgb(247,138,52)"/><text x="34.6790%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (338,601 samples, 0.11%)</title><rect x="34.4350%" y="117" width="0.1145%" height="15" fill="rgb(213,79,30)"/><text x="34.6850%" y="127.50"></text></g><g><title>codegen_fn_attrs (666,674 samples, 0.23%)</title><rect x="34.3801%" y="149" width="0.2255%" height="15" fill="rgb(246,177,23)"/><text x="34.6301%" y="159.50"></text></g><g><title>layout_of (785,197 samples, 0.27%)</title><rect x="34.6284%" y="149" width="0.2656%" height="15" fill="rgb(230,62,27)"/><text x="34.8784%" y="159.50"></text></g><g><title>predicates_of (529,805 samples, 0.18%)</title><rect x="35.2914%" y="133" width="0.1792%" height="15" fill="rgb(216,154,8)"/><text x="35.5414%" y="143.50"></text></g><g><title>predicates_defined_on (377,124 samples, 0.13%)</title><rect x="35.3431%" y="117" width="0.1276%" height="15" fill="rgb(244,35,45)"/><text x="35.5931%" y="127.50"></text></g><g><title>param_env (1,718,467 samples, 0.58%)</title><rect x="34.8941%" y="149" width="0.5813%" height="15" fill="rgb(251,115,12)"/><text x="35.1441%" y="159.50"></text></g><g><title>fn_abi_of_instance (4,696,965 samples, 1.59%)</title><rect x="33.9502%" y="165" width="1.5889%" height="15" fill="rgb(240,54,50)"/><text x="34.2002%" y="175.50"></text></g><g><title>layout_of (559,812 samples, 0.19%)</title><rect x="35.5988%" y="165" width="0.1894%" height="15" fill="rgb(233,84,52)"/><text x="35.8488%" y="175.50"></text></g><g><title>symbol_name (571,415 samples, 0.19%)</title><rect x="35.7941%" y="165" width="0.1933%" height="15" fill="rgb(207,117,47)"/><text x="36.0441%" y="175.50"></text></g><g><title>codegen_module (27,353,345 samples, 9.25%)</title><rect x="26.7699%" y="181" width="9.2529%" height="15" fill="rgb(249,43,39)"/><text x="27.0199%" y="191.50">codegen_module</text></g><g><title>codegen_crate (29,245,116 samples, 9.89%)</title><rect x="26.1543%" y="197" width="9.8928%" height="15" fill="rgb(209,38,44)"/><text x="26.4043%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (133,507,451 samples, 45.16%)</title><rect x="36.1227%" y="181" width="45.1620%" height="15" fill="rgb(236,212,23)"/><text x="36.3727%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (128,243,384 samples, 43.38%)</title><rect x="37.9034%" y="165" width="43.3813%" height="15" fill="rgb(242,79,21)"/><text x="38.1534%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (141,184,280 samples, 47.76%)</title><rect x="36.0471%" y="197" width="47.7589%" height="15" fill="rgb(211,96,35)"/><text x="36.2971%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,453,447 samples, 2.52%)</title><rect x="81.2847%" y="181" width="2.5213%" height="15" fill="rgb(253,215,40)"/><text x="81.5347%" y="191.50">LL..</text></g><g><title>macro_expand_crate (14,807,930 samples, 5.01%)</title><rect x="83.9763%" y="181" width="5.0091%" height="15" fill="rgb(211,81,21)"/><text x="84.2263%" y="191.50">macro_..</text></g><g><title>expand_crate (14,792,030 samples, 5.00%)</title><rect x="83.9817%" y="165" width="5.0037%" height="15" fill="rgb(208,190,38)"/><text x="84.2317%" y="175.50">expand..</text></g><g><title>metadata_register_crate (2,716,087 samples, 0.92%)</title><rect x="88.0666%" y="149" width="0.9188%" height="15" fill="rgb(235,213,38)"/><text x="88.3166%" y="159.50"></text></g><g><title>metadata_register_crate (959,871 samples, 0.32%)</title><rect x="88.6607%" y="133" width="0.3247%" height="15" fill="rgb(237,122,38)"/><text x="88.9107%" y="143.50"></text></g><g><title>late_resolve_crate (2,019,620 samples, 0.68%)</title><rect x="89.1495%" y="165" width="0.6832%" height="15" fill="rgb(244,218,35)"/><text x="89.3995%" y="175.50"></text></g><g><title>configure_and_expand (17,899,921 samples, 6.06%)</title><rect x="83.8060%" y="197" width="6.0551%" height="15" fill="rgb(240,68,47)"/><text x="84.0560%" y="207.50">configur..</text></g><g><title>resolve_crate (2,360,303 samples, 0.80%)</title><rect x="89.0627%" y="181" width="0.7984%" height="15" fill="rgb(210,16,53)"/><text x="89.3127%" y="191.50"></text></g><g><title>free_global_ctxt (4,056,811 samples, 1.37%)</title><rect x="90.0145%" y="197" width="1.3723%" height="15" fill="rgb(235,124,12)"/><text x="90.2645%" y="207.50"></text></g><g><title>item_attrs (743,999 samples, 0.25%)</title><rect x="91.9082%" y="101" width="0.2517%" height="15" fill="rgb(224,169,11)"/><text x="92.1582%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (730,738 samples, 0.25%)</title><rect x="91.9127%" y="85" width="0.2472%" height="15" fill="rgb(250,166,2)"/><text x="92.1627%" y="95.50"></text></g><g><title>codegen_fn_attrs (952,511 samples, 0.32%)</title><rect x="91.8738%" y="117" width="0.3222%" height="15" fill="rgb(242,216,29)"/><text x="92.1238%" y="127.50"></text></g><g><title>layout_of (341,111 samples, 0.12%)</title><rect x="92.7193%" y="101" width="0.1154%" height="15" fill="rgb(230,116,27)"/><text x="92.9693%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (796,127 samples, 0.27%)</title><rect x="92.8347%" y="101" width="0.2693%" height="15" fill="rgb(228,99,48)"/><text x="93.0847%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (867,258 samples, 0.29%)</title><rect x="93.1040%" y="101" width="0.2934%" height="15" fill="rgb(253,11,6)"/><text x="93.3540%" y="111.50"></text></g><g><title>optimized_mir (2,988,399 samples, 1.01%)</title><rect x="92.4148%" y="117" width="1.0109%" height="15" fill="rgb(247,143,39)"/><text x="92.6648%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (793,019 samples, 0.27%)</title><rect x="93.5595%" y="101" width="0.2683%" height="15" fill="rgb(236,97,10)"/><text x="93.8095%" y="111.50"></text></g><g><title>impl_parent (365,753 samples, 0.12%)</title><rect x="94.1770%" y="85" width="0.1237%" height="15" fill="rgb(233,208,19)"/><text x="94.4270%" y="95.50"></text></g><g><title>specialization_graph_of (1,744,608 samples, 0.59%)</title><rect x="93.9523%" y="101" width="0.5902%" height="15" fill="rgb(216,164,2)"/><text x="94.2023%" y="111.50"></text></g><g><title>impl_trait_ref (714,578 samples, 0.24%)</title><rect x="94.3007%" y="85" width="0.2417%" height="15" fill="rgb(220,129,5)"/><text x="94.5507%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (557,306 samples, 0.19%)</title><rect x="94.3539%" y="69" width="0.1885%" height="15" fill="rgb(242,17,10)"/><text x="94.6039%" y="79.50"></text></g><g><title>resolve_instance (3,445,696 samples, 1.17%)</title><rect x="93.4257%" y="117" width="1.1656%" height="15" fill="rgb(242,107,0)"/><text x="93.6757%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (307,983 samples, 0.10%)</title><rect x="94.7115%" y="117" width="0.1042%" height="15" fill="rgb(251,28,31)"/><text x="94.9615%" y="127.50"></text></g><g><title>upstream_monomorphizations (296,873 samples, 0.10%)</title><rect x="94.7153%" y="101" width="0.1004%" height="15" fill="rgb(233,223,10)"/><text x="94.9653%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (9,772,419 samples, 3.31%)</title><rect x="91.6109%" y="133" width="3.3057%" height="15" fill="rgb(215,21,27)"/><text x="91.8609%" y="143.50">mon..</text></g><g><title>vtable_entries (298,622 samples, 0.10%)</title><rect x="94.8157%" y="117" width="0.1010%" height="15" fill="rgb(232,23,21)"/><text x="95.0657%" y="127.50"></text></g><g><title>monomorphization_collector (9,813,339 samples, 3.32%)</title><rect x="91.6101%" y="149" width="3.3196%" height="15" fill="rgb(244,5,23)"/><text x="91.8601%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (650,666 samples, 0.22%)</title><rect x="94.9310%" y="133" width="0.2201%" height="15" fill="rgb(226,81,46)"/><text x="95.1810%" y="143.50"></text></g><g><title>symbol_name (598,776 samples, 0.20%)</title><rect x="94.9486%" y="117" width="0.2025%" height="15" fill="rgb(247,70,30)"/><text x="95.1986%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (10,807,419 samples, 3.66%)</title><rect x="91.5954%" y="165" width="3.6559%" height="15" fill="rgb(212,68,19)"/><text x="91.8454%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (950,789 samples, 0.32%)</title><rect x="94.9297%" y="149" width="0.3216%" height="15" fill="rgb(240,187,13)"/><text x="95.1797%" y="159.50"></text></g><g><title>cgu_partitioning (296,093 samples, 0.10%)</title><rect x="95.1512%" y="133" width="0.1002%" height="15" fill="rgb(223,113,26)"/><text x="95.4012%" y="143.50"></text></g><g><title>exported_symbols (10,887,260 samples, 3.68%)</title><rect x="91.5819%" y="181" width="3.6829%" height="15" fill="rgb(206,192,2)"/><text x="91.8319%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (457,215 samples, 0.15%)</title><rect x="95.4667%" y="165" width="0.1547%" height="15" fill="rgb(241,108,4)"/><text x="95.7167%" y="175.50"></text></g><g><title>optimized_mir (1,033,940 samples, 0.35%)</title><rect x="95.2741%" y="181" width="0.3498%" height="15" fill="rgb(247,173,49)"/><text x="95.5241%" y="191.50"></text></g><g><title>generate_crate_metadata (12,540,796 samples, 4.24%)</title><rect x="91.3868%" y="197" width="4.2422%" height="15" fill="rgb(224,114,35)"/><text x="91.6368%" y="207.50">gener..</text></g><g><title>hir_lowering (2,010,961 samples, 0.68%)</title><rect x="95.6291%" y="197" width="0.6803%" height="15" fill="rgb(245,159,27)"/><text x="95.8791%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,727,888 samples, 1.60%)</title><rect x="96.4012%" y="181" width="1.5993%" height="15" fill="rgb(245,172,44)"/><text x="96.6512%" y="191.50"></text></g><g><title>link_crate (1,487,035 samples, 0.50%)</title><rect x="98.0005%" y="181" width="0.5030%" height="15" fill="rgb(236,23,11)"/><text x="98.2505%" y="191.50"></text></g><g><title>link_binary (1,468,805 samples, 0.50%)</title><rect x="98.0067%" y="165" width="0.4969%" height="15" fill="rgb(205,117,38)"/><text x="98.2567%" y="175.50"></text></g><g><title>link_rlib (919,089 samples, 0.31%)</title><rect x="98.1926%" y="149" width="0.3109%" height="15" fill="rgb(237,72,25)"/><text x="98.4426%" y="159.50"></text></g><g><title>link (6,495,445 samples, 2.20%)</title><rect x="96.3093%" y="197" width="2.1972%" height="15" fill="rgb(244,70,9)"/><text x="96.5593%" y="207.50">l..</text></g><g><title>parse_crate (2,559,465 samples, 0.87%)</title><rect x="98.5066%" y="197" width="0.8658%" height="15" fill="rgb(217,125,39)"/><text x="98.7566%" y="207.50"></text></g><g><title>prepare_outputs (381,594 samples, 0.13%)</title><rect x="99.3754%" y="197" width="0.1291%" height="15" fill="rgb(235,36,10)"/><text x="99.6254%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,014,090 samples, 0.34%)</title><rect x="99.5045%" y="197" width="0.3430%" height="15" fill="rgb(251,123,47)"/><text x="99.7545%" y="207.50"></text></g><g><title>all (295,618,912 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (295,618,912 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>