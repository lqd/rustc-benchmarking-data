<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (274,164,146 samples, 7.95%)</title><rect x="0.0925%" y="181" width="7.9532%" height="15" fill="rgb(227,0,7)"/><text x="0.3425%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (8,407,676 samples, 0.24%)</title><rect x="16.3365%" y="69" width="0.2439%" height="15" fill="rgb(217,0,24)"/><text x="16.5865%" y="79.50"></text></g><g><title>is_copy_raw (6,644,302 samples, 0.19%)</title><rect x="16.3876%" y="53" width="0.1927%" height="15" fill="rgb(221,193,54)"/><text x="16.6376%" y="63.50"></text></g><g><title>evaluate_obligation (4,919,575 samples, 0.14%)</title><rect x="16.4377%" y="37" width="0.1427%" height="15" fill="rgb(248,212,6)"/><text x="16.6877%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (3,495,487 samples, 0.10%)</title><rect x="16.6386%" y="53" width="0.1014%" height="15" fill="rgb(208,68,35)"/><text x="16.8886%" y="63.50"></text></g><g><title>resolve_instance (7,667,321 samples, 0.22%)</title><rect x="16.5804%" y="69" width="0.2224%" height="15" fill="rgb(232,128,0)"/><text x="16.8304%" y="79.50"></text></g><g><title>thir_body (19,752,482 samples, 0.57%)</title><rect x="16.8162%" y="69" width="0.5730%" height="15" fill="rgb(207,160,47)"/><text x="17.0662%" y="79.50"></text></g><g><title>mir_const (103,303,729 samples, 3.00%)</title><rect x="14.4048%" y="117" width="2.9967%" height="15" fill="rgb(228,23,34)"/><text x="14.6548%" y="127.50">mir..</text></g><g><title>unsafety_check_result (90,534,488 samples, 2.63%)</title><rect x="14.7752%" y="101" width="2.6263%" height="15" fill="rgb(218,30,26)"/><text x="15.0252%" y="111.50">un..</text></g><g><title>mir_built (82,146,597 samples, 2.38%)</title><rect x="15.0185%" y="85" width="2.3830%" height="15" fill="rgb(220,122,19)"/><text x="15.2685%" y="95.50">mi..</text></g><g><title>mir_promoted (117,978,780 samples, 3.42%)</title><rect x="14.0412%" y="133" width="3.4224%" height="15" fill="rgb(250,228,42)"/><text x="14.2912%" y="143.50">mir..</text></g><g><title>type_op_prove_predicate (27,747,765 samples, 0.80%)</title><rect x="17.5802%" y="133" width="0.8049%" height="15" fill="rgb(240,193,28)"/><text x="17.8302%" y="143.50"></text></g><g><title>MIR_borrow_checking (353,014,338 samples, 10.24%)</title><rect x="8.1449%" y="165" width="10.2405%" height="15" fill="rgb(216,20,37)"/><text x="8.3949%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (350,428,400 samples, 10.17%)</title><rect x="8.2199%" y="149" width="10.1655%" height="15" fill="rgb(206,188,39)"/><text x="8.4699%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (5,639,657 samples, 0.16%)</title><rect x="18.4912%" y="149" width="0.1636%" height="15" fill="rgb(217,207,13)"/><text x="18.7412%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (4,913,636 samples, 0.14%)</title><rect x="18.7396%" y="149" width="0.1425%" height="15" fill="rgb(231,73,38)"/><text x="18.9896%" y="159.50"></text></g><g><title>misc_checking_1 (13,930,342 samples, 0.40%)</title><rect x="18.4896%" y="165" width="0.4041%" height="15" fill="rgb(225,20,46)"/><text x="18.7396%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (6,679,498 samples, 0.19%)</title><rect x="18.8938%" y="149" width="0.1938%" height="15" fill="rgb(210,31,41)"/><text x="19.1438%" y="159.50"></text></g><g><title>check_mod_liveness (5,134,493 samples, 0.15%)</title><rect x="18.9386%" y="133" width="0.1489%" height="15" fill="rgb(221,200,47)"/><text x="19.1886%" y="143.50"></text></g><g><title>misc_checking_2 (18,354,416 samples, 0.53%)</title><rect x="18.8937%" y="165" width="0.5324%" height="15" fill="rgb(226,26,5)"/><text x="19.1437%" y="175.50"></text></g><g><title>match_checking (11,671,148 samples, 0.34%)</title><rect x="19.0876%" y="149" width="0.3386%" height="15" fill="rgb(249,33,26)"/><text x="19.3376%" y="159.50"></text></g><g><title>check_match (10,925,651 samples, 0.32%)</title><rect x="19.1092%" y="133" width="0.3169%" height="15" fill="rgb(235,183,28)"/><text x="19.3592%" y="143.50"></text></g><g><title>death_checking (5,016,701 samples, 0.15%)</title><rect x="19.5050%" y="149" width="0.1455%" height="15" fill="rgb(221,5,38)"/><text x="19.7550%" y="159.50"></text></g><g><title>crate_lints (9,100,252 samples, 0.26%)</title><rect x="19.6506%" y="133" width="0.2640%" height="15" fill="rgb(247,18,42)"/><text x="19.9006%" y="143.50"></text></g><g><title>lint_checking (17,430,927 samples, 0.51%)</title><rect x="19.6505%" y="149" width="0.5057%" height="15" fill="rgb(241,131,45)"/><text x="19.9005%" y="159.50"></text></g><g><title>module_lints (8,327,025 samples, 0.24%)</title><rect x="19.9146%" y="133" width="0.2416%" height="15" fill="rgb(249,31,29)"/><text x="20.1646%" y="143.50"></text></g><g><title>lint_mod (8,308,635 samples, 0.24%)</title><rect x="19.9151%" y="117" width="0.2410%" height="15" fill="rgb(225,111,53)"/><text x="20.1651%" y="127.50"></text></g><g><title>privacy_access_levels (3,922,660 samples, 0.11%)</title><rect x="20.1561%" y="149" width="0.1138%" height="15" fill="rgb(238,160,17)"/><text x="20.4061%" y="159.50"></text></g><g><title>privacy_checking_modules (13,927,681 samples, 0.40%)</title><rect x="20.2699%" y="149" width="0.4040%" height="15" fill="rgb(214,148,48)"/><text x="20.5199%" y="159.50"></text></g><g><title>check_mod_privacy (13,910,621 samples, 0.40%)</title><rect x="20.2704%" y="133" width="0.4035%" height="15" fill="rgb(232,36,49)"/><text x="20.5204%" y="143.50"></text></g><g><title>misc_checking_3 (43,134,058 samples, 1.25%)</title><rect x="19.4261%" y="165" width="1.2513%" height="15" fill="rgb(209,103,24)"/><text x="19.6761%" y="175.50"></text></g><g><title>impl_trait_ref (6,475,015 samples, 0.19%)</title><rect x="20.9922%" y="101" width="0.1878%" height="15" fill="rgb(229,88,8)"/><text x="21.2422%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,793,542 samples, 0.14%)</title><rect x="21.0410%" y="85" width="0.1391%" height="15" fill="rgb(213,181,19)"/><text x="21.2910%" y="95.50"></text></g><g><title>coherent_trait (17,200,975 samples, 0.50%)</title><rect x="20.7272%" y="133" width="0.4990%" height="15" fill="rgb(254,191,54)"/><text x="20.9772%" y="143.50"></text></g><g><title>specialization_graph_of (16,769,510 samples, 0.49%)</title><rect x="20.7397%" y="117" width="0.4865%" height="15" fill="rgb(241,83,37)"/><text x="20.9897%" y="127.50"></text></g><g><title>coherence_checking (17,688,930 samples, 0.51%)</title><rect x="20.7263%" y="149" width="0.5131%" height="15" fill="rgb(233,36,39)"/><text x="20.9763%" y="159.50"></text></g><g><title>evaluate_obligation (11,786,302 samples, 0.34%)</title><rect x="28.0789%" y="101" width="0.3419%" height="15" fill="rgb(226,3,54)"/><text x="28.3289%" y="111.50"></text></g><g><title>typeck (120,847,110 samples, 3.51%)</title><rect x="28.5292%" y="101" width="3.5056%" height="15" fill="rgb(245,192,40)"/><text x="28.7792%" y="111.50">typ..</text></g><g><title>item_bodies_checking (372,092,671 samples, 10.79%)</title><rect x="21.2535%" y="149" width="10.7940%" height="15" fill="rgb(238,167,29)"/><text x="21.5035%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (372,088,521 samples, 10.79%)</title><rect x="21.2536%" y="133" width="10.7938%" height="15" fill="rgb(232,182,51)"/><text x="21.5036%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (370,144,982 samples, 10.74%)</title><rect x="21.3100%" y="117" width="10.7375%" height="15" fill="rgb(231,60,39)"/><text x="21.5600%" y="127.50">typeck</text></g><g><title>item_types_checking (19,243,255 samples, 0.56%)</title><rect x="32.0475%" y="149" width="0.5582%" height="15" fill="rgb(208,69,12)"/><text x="32.2975%" y="159.50"></text></g><g><title>check_mod_item_types (19,224,585 samples, 0.56%)</title><rect x="32.0480%" y="133" width="0.5577%" height="15" fill="rgb(235,93,37)"/><text x="32.2980%" y="143.50"></text></g><g><title>mir_for_ctfe (4,941,702 samples, 0.14%)</title><rect x="32.8183%" y="69" width="0.1434%" height="15" fill="rgb(213,116,39)"/><text x="33.0683%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,514,039 samples, 0.13%)</title><rect x="32.8307%" y="53" width="0.1309%" height="15" fill="rgb(222,207,29)"/><text x="33.0807%" y="63.50"></text></g><g><title>eval_to_const_value_raw (10,190,576 samples, 0.30%)</title><rect x="32.7228%" y="117" width="0.2956%" height="15" fill="rgb(206,96,30)"/><text x="32.9728%" y="127.50"></text></g><g><title>eval_to_const_value_raw (10,116,816 samples, 0.29%)</title><rect x="32.7249%" y="101" width="0.2935%" height="15" fill="rgb(218,138,4)"/><text x="32.9749%" y="111.50"></text></g><g><title>eval_to_allocation_raw (9,988,666 samples, 0.29%)</title><rect x="32.7286%" y="85" width="0.2898%" height="15" fill="rgb(250,191,14)"/><text x="32.9786%" y="95.50"></text></g><g><title>named_region_map (3,682,897 samples, 0.11%)</title><rect x="33.2124%" y="101" width="0.1068%" height="15" fill="rgb(239,60,40)"/><text x="33.4624%" y="111.50"></text></g><g><title>generics_of (7,589,170 samples, 0.22%)</title><rect x="33.1042%" y="117" width="0.2202%" height="15" fill="rgb(206,27,48)"/><text x="33.3542%" y="127.50"></text></g><g><title>predicates_of (6,292,360 samples, 0.18%)</title><rect x="33.3603%" y="117" width="0.1825%" height="15" fill="rgb(225,35,8)"/><text x="33.6103%" y="127.50"></text></g><g><title>predicates_defined_on (5,244,511 samples, 0.15%)</title><rect x="33.3906%" y="101" width="0.1521%" height="15" fill="rgb(250,213,24)"/><text x="33.6406%" y="111.50"></text></g><g><title>type_collecting (33,590,601 samples, 0.97%)</title><rect x="32.6057%" y="149" width="0.9744%" height="15" fill="rgb(247,123,22)"/><text x="32.8557%" y="159.50"></text></g><g><title>collect_mod_item_types (33,562,501 samples, 0.97%)</title><rect x="32.6065%" y="133" width="0.9736%" height="15" fill="rgb(231,138,38)"/><text x="32.8565%" y="143.50"></text></g><g><title>evaluate_obligation (5,700,049 samples, 0.17%)</title><rect x="34.2971%" y="117" width="0.1654%" height="15" fill="rgb(231,145,46)"/><text x="34.5471%" y="127.50"></text></g><g><title>region_scope_tree (6,240,216 samples, 0.18%)</title><rect x="34.6098%" y="117" width="0.1810%" height="15" fill="rgb(251,118,11)"/><text x="34.8598%" y="127.50"></text></g><g><title>check_impl_item_well_formed (38,979,367 samples, 1.13%)</title><rect x="33.6614%" y="133" width="1.1307%" height="15" fill="rgb(217,147,25)"/><text x="33.9114%" y="143.50"></text></g><g><title>evaluate_obligation (5,344,385 samples, 0.16%)</title><rect x="35.2171%" y="117" width="0.1550%" height="15" fill="rgb(247,81,37)"/><text x="35.4671%" y="127.50"></text></g><g><title>param_env (3,666,682 samples, 0.11%)</title><rect x="35.3971%" y="117" width="0.1064%" height="15" fill="rgb(209,12,38)"/><text x="35.6471%" y="127.50"></text></g><g><title>analysis (948,259,556 samples, 27.51%)</title><rect x="8.0457%" y="181" width="27.5079%" height="15" fill="rgb(227,1,9)"/><text x="8.2957%" y="191.50">analysis</text></g><g><title>type_check_crate (512,816,711 samples, 14.88%)</title><rect x="20.6774%" y="165" width="14.8762%" height="15" fill="rgb(248,47,43)"/><text x="20.9274%" y="175.50">type_check_crate</text></g><g><title>wf_checking (67,810,790 samples, 1.97%)</title><rect x="33.5865%" y="149" width="1.9671%" height="15" fill="rgb(221,10,30)"/><text x="33.8365%" y="159.50">w..</text></g><g><title>check_item_well_formed (26,247,131 samples, 0.76%)</title><rect x="34.7922%" y="133" width="0.7614%" height="15" fill="rgb(210,229,1)"/><text x="35.0422%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (5,989,352 samples, 0.17%)</title><rect x="42.5699%" y="149" width="0.1737%" height="15" fill="rgb(222,148,37)"/><text x="42.8199%" y="159.50"></text></g><g><title>param_env (4,818,047 samples, 0.14%)</title><rect x="43.2413%" y="133" width="0.1398%" height="15" fill="rgb(234,67,33)"/><text x="43.4913%" y="143.50"></text></g><g><title>fn_abi_of_instance (23,360,037 samples, 0.68%)</title><rect x="42.7784%" y="149" width="0.6776%" height="15" fill="rgb(247,98,35)"/><text x="43.0284%" y="159.50"></text></g><g><title>layout_of (3,684,888 samples, 0.11%)</title><rect x="43.4869%" y="149" width="0.1069%" height="15" fill="rgb(247,138,52)"/><text x="43.7369%" y="159.50"></text></g><g><title>codegen_module (275,736,526 samples, 8.00%)</title><rect x="35.6453%" y="165" width="7.9988%" height="15" fill="rgb(213,79,30)"/><text x="35.8953%" y="175.50">codegen_mod..</text></g><g><title>codegen_crate (279,016,125 samples, 8.09%)</title><rect x="35.5539%" y="181" width="8.0939%" height="15" fill="rgb(246,177,23)"/><text x="35.8039%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (1,049,363,868 samples, 30.44%)</title><rect x="43.6557%" y="165" width="30.4408%" height="15" fill="rgb(230,62,27)"/><text x="43.9057%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,004,700,745 samples, 29.15%)</title><rect x="44.9513%" y="149" width="29.1452%" height="15" fill="rgb(216,154,8)"/><text x="45.2013%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,133,846,024 samples, 32.89%)</title><rect x="43.6478%" y="181" width="32.8915%" height="15" fill="rgb(244,35,45)"/><text x="43.8978%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (84,211,173 samples, 2.44%)</title><rect x="74.0965%" y="165" width="2.4429%" height="15" fill="rgb(251,115,12)"/><text x="74.3465%" y="175.50">LL..</text></g><g><title>macro_expand_crate (456,632,111 samples, 13.25%)</title><rect x="76.6473%" y="165" width="13.2464%" height="15" fill="rgb(240,54,50)"/><text x="76.8973%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (456,615,761 samples, 13.25%)</title><rect x="76.6478%" y="149" width="13.2459%" height="15" fill="rgb(233,84,52)"/><text x="76.8978%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (8,292,745 samples, 0.24%)</title><rect x="89.6531%" y="133" width="0.2406%" height="15" fill="rgb(207,117,47)"/><text x="89.9031%" y="143.50"></text></g><g><title>metadata_register_crate (6,202,995 samples, 0.18%)</title><rect x="89.7137%" y="117" width="0.1799%" height="15" fill="rgb(249,43,39)"/><text x="89.9637%" y="127.50"></text></g><g><title>late_resolve_crate (20,245,496 samples, 0.59%)</title><rect x="89.9374%" y="149" width="0.5873%" height="15" fill="rgb(209,38,44)"/><text x="90.1874%" y="159.50"></text></g><g><title>configure_and_expand (485,163,671 samples, 14.07%)</title><rect x="76.5394%" y="181" width="14.0740%" height="15" fill="rgb(236,212,23)"/><text x="76.7894%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (24,490,358 samples, 0.71%)</title><rect x="89.9029%" y="165" width="0.7104%" height="15" fill="rgb(242,79,21)"/><text x="90.1529%" y="175.50"></text></g><g><title>drop_ast (3,694,748 samples, 0.11%)</title><rect x="90.6134%" y="181" width="0.1072%" height="15" fill="rgb(211,96,35)"/><text x="90.8634%" y="191.50"></text></g><g><title>early_lint_checks (6,047,111 samples, 0.18%)</title><rect x="90.7214%" y="181" width="0.1754%" height="15" fill="rgb(253,215,40)"/><text x="90.9714%" y="191.50"></text></g><g><title>free_global_ctxt (17,264,515 samples, 0.50%)</title><rect x="90.8968%" y="181" width="0.5008%" height="15" fill="rgb(211,81,21)"/><text x="91.1468%" y="191.50"></text></g><g><title>mir_shims (4,257,920 samples, 0.12%)</title><rect x="92.4399%" y="101" width="0.1235%" height="15" fill="rgb(208,190,38)"/><text x="92.6899%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (19,461,019 samples, 0.56%)</title><rect x="93.2424%" y="85" width="0.5645%" height="15" fill="rgb(235,213,38)"/><text x="93.4924%" y="95.50"></text></g><g><title>optimized_mir (43,292,409 samples, 1.26%)</title><rect x="92.5634%" y="101" width="1.2559%" height="15" fill="rgb(237,122,38)"/><text x="92.8134%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (6,733,407 samples, 0.20%)</title><rect x="93.9279%" y="85" width="0.1953%" height="15" fill="rgb(244,218,35)"/><text x="94.1779%" y="95.50"></text></g><g><title>resolve_instance (13,800,986 samples, 0.40%)</title><rect x="93.8193%" y="101" width="0.4004%" height="15" fill="rgb(240,68,47)"/><text x="94.0693%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,344,932 samples, 0.13%)</title><rect x="94.3897%" y="69" width="0.1260%" height="15" fill="rgb(210,16,53)"/><text x="94.6397%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (85,675,891 samples, 2.49%)</title><rect x="92.0312%" y="117" width="2.4854%" height="15" fill="rgb(235,124,12)"/><text x="92.2812%" y="127.50">mo..</text></g><g><title>vtable_entries (6,109,899 samples, 0.18%)</title><rect x="94.3394%" y="101" width="0.1772%" height="15" fill="rgb(224,169,11)"/><text x="94.5894%" y="111.50"></text></g><g><title>resolve_instance (5,040,680 samples, 0.15%)</title><rect x="94.3704%" y="85" width="0.1462%" height="15" fill="rgb(250,166,2)"/><text x="94.6204%" y="95.50"></text></g><g><title>monomorphization_collector (86,590,771 samples, 2.51%)</title><rect x="92.0311%" y="133" width="2.5119%" height="15" fill="rgb(242,216,29)"/><text x="92.2811%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (10,856,881 samples, 0.31%)</title><rect x="94.5432%" y="117" width="0.3149%" height="15" fill="rgb(230,116,27)"/><text x="94.7932%" y="127.50"></text></g><g><title>symbol_name (9,400,943 samples, 0.27%)</title><rect x="94.5855%" y="101" width="0.2727%" height="15" fill="rgb(228,99,48)"/><text x="94.8355%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (102,005,277 samples, 2.96%)</title><rect x="92.0284%" y="149" width="2.9591%" height="15" fill="rgb(253,11,6)"/><text x="92.2784%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (15,321,206 samples, 0.44%)</title><rect x="94.5430%" y="133" width="0.4445%" height="15" fill="rgb(247,143,39)"/><text x="94.7930%" y="143.50"></text></g><g><title>cgu_partitioning (4,455,465 samples, 0.13%)</title><rect x="94.8582%" y="117" width="0.1292%" height="15" fill="rgb(236,97,10)"/><text x="95.1082%" y="127.50"></text></g><g><title>exported_symbols (104,476,742 samples, 3.03%)</title><rect x="92.0084%" y="165" width="3.0307%" height="15" fill="rgb(233,208,19)"/><text x="92.2584%" y="175.50">exp..</text></g><g><title>layout_of (4,402,900 samples, 0.13%)</title><rect x="96.0330%" y="149" width="0.1277%" height="15" fill="rgb(216,164,2)"/><text x="96.2830%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (37,304,696 samples, 1.08%)</title><rect x="96.1607%" y="149" width="1.0822%" height="15" fill="rgb(220,129,5)"/><text x="96.4107%" y="159.50"></text></g><g><title>optimized_mir (76,465,598 samples, 2.22%)</title><rect x="95.0590%" y="165" width="2.2182%" height="15" fill="rgb(242,17,10)"/><text x="95.3090%" y="175.50">o..</text></g><g><title>generate_crate_metadata (203,819,871 samples, 5.91%)</title><rect x="91.3976%" y="181" width="5.9126%" height="15" fill="rgb(242,107,0)"/><text x="91.6476%" y="191.50">generate..</text></g><g><title>hir_lowering (42,441,902 samples, 1.23%)</title><rect x="97.3102%" y="181" width="1.2312%" height="15" fill="rgb(251,28,31)"/><text x="97.5602%" y="191.50"></text></g><g><title>finish_ongoing_codegen (28,605,632 samples, 0.83%)</title><rect x="98.5419%" y="165" width="0.8298%" height="15" fill="rgb(233,223,10)"/><text x="98.7919%" y="175.50"></text></g><g><title>link_crate (8,616,507 samples, 0.25%)</title><rect x="99.3717%" y="165" width="0.2500%" height="15" fill="rgb(215,21,27)"/><text x="99.6217%" y="175.50"></text></g><g><title>link_binary (8,458,245 samples, 0.25%)</title><rect x="99.3763%" y="149" width="0.2454%" height="15" fill="rgb(232,23,21)"/><text x="99.6263%" y="159.50"></text></g><g><title>link_rlib (7,140,403 samples, 0.21%)</title><rect x="99.4145%" y="133" width="0.2071%" height="15" fill="rgb(244,5,23)"/><text x="99.6645%" y="143.50"></text></g><g><title>link (37,251,719 samples, 1.08%)</title><rect x="98.5414%" y="181" width="1.0806%" height="15" fill="rgb(226,81,46)"/><text x="98.7914%" y="191.50"></text></g><g><title>parse_crate (4,699,578 samples, 0.14%)</title><rect x="99.6220%" y="181" width="0.1363%" height="15" fill="rgb(247,70,30)"/><text x="99.8720%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (6,427,236 samples, 0.19%)</title><rect x="99.7652%" y="181" width="0.1864%" height="15" fill="rgb(212,68,19)"/><text x="100.0152%" y="191.50"></text></g><g><title>all (3,447,227,933 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (3,447,227,933 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>