<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (144,013,088 samples, 14.56%)</title><rect x="0.0763%" y="165" width="14.5565%" height="15" fill="rgb(227,0,7)"/><text x="0.3263%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,425,525 samples, 0.14%)</title><rect x="18.6095%" y="53" width="0.1441%" height="15" fill="rgb(217,0,24)"/><text x="18.8595%" y="63.50"></text></g><g><title>specialization_graph_of (1,075,530 samples, 0.11%)</title><rect x="18.8271%" y="37" width="0.1087%" height="15" fill="rgb(221,193,54)"/><text x="19.0771%" y="47.50"></text></g><g><title>resolve_instance (1,876,967 samples, 0.19%)</title><rect x="18.7536%" y="53" width="0.1897%" height="15" fill="rgb(248,212,6)"/><text x="19.0036%" y="63.50"></text></g><g><title>thir_body (2,708,837 samples, 0.27%)</title><rect x="18.9498%" y="53" width="0.2738%" height="15" fill="rgb(208,68,35)"/><text x="19.1998%" y="63.50"></text></g><g><title>mir_const (16,985,383 samples, 1.72%)</title><rect x="17.5105%" y="101" width="1.7168%" height="15" fill="rgb(232,128,0)"/><text x="17.7605%" y="111.50"></text></g><g><title>unsafety_check_result (14,776,496 samples, 1.49%)</title><rect x="17.7338%" y="85" width="1.4936%" height="15" fill="rgb(207,160,47)"/><text x="17.9838%" y="95.50"></text></g><g><title>mir_built (13,296,919 samples, 1.34%)</title><rect x="17.8833%" y="69" width="1.3440%" height="15" fill="rgb(228,23,34)"/><text x="18.1333%" y="79.50"></text></g><g><title>mir_promoted (19,058,520 samples, 1.93%)</title><rect x="17.3254%" y="117" width="1.9264%" height="15" fill="rgb(218,30,26)"/><text x="17.5754%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (2,138,622 samples, 0.22%)</title><rect x="19.3418%" y="117" width="0.2162%" height="15" fill="rgb(220,122,19)"/><text x="19.5918%" y="127.50"></text></g><g><title>MIR_borrow_checking (48,204,198 samples, 4.87%)</title><rect x="14.6865%" y="149" width="4.8724%" height="15" fill="rgb(250,228,42)"/><text x="14.9365%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (47,921,893 samples, 4.84%)</title><rect x="14.7151%" y="133" width="4.8438%" height="15" fill="rgb(240,193,28)"/><text x="14.9651%" y="143.50">mir_bo..</text></g><g><title>check_mod_attrs (1,044,372 samples, 0.11%)</title><rect x="19.6141%" y="133" width="0.1056%" height="15" fill="rgb(216,20,37)"/><text x="19.8641%" y="143.50"></text></g><g><title>misc_checking_1 (2,289,944 samples, 0.23%)</title><rect x="19.6123%" y="149" width="0.2315%" height="15" fill="rgb(206,188,39)"/><text x="19.8623%" y="159.50"></text></g><g><title>misc_checking_2 (2,157,973 samples, 0.22%)</title><rect x="19.8438%" y="149" width="0.2181%" height="15" fill="rgb(217,207,13)"/><text x="20.0938%" y="159.50"></text></g><g><title>match_checking (1,307,544 samples, 0.13%)</title><rect x="19.9298%" y="133" width="0.1322%" height="15" fill="rgb(231,73,38)"/><text x="20.1798%" y="143.50"></text></g><g><title>check_match (1,242,773 samples, 0.13%)</title><rect x="19.9363%" y="117" width="0.1256%" height="15" fill="rgb(225,20,46)"/><text x="20.1863%" y="127.50"></text></g><g><title>crate_lints (2,234,294 samples, 0.23%)</title><rect x="20.1714%" y="117" width="0.2258%" height="15" fill="rgb(210,31,41)"/><text x="20.4214%" y="127.50"></text></g><g><title>type_of (1,073,834 samples, 0.11%)</title><rect x="20.2887%" y="101" width="0.1085%" height="15" fill="rgb(221,200,47)"/><text x="20.5387%" y="111.50"></text></g><g><title>lint_checking (3,408,607 samples, 0.34%)</title><rect x="20.1713%" y="133" width="0.3445%" height="15" fill="rgb(226,26,5)"/><text x="20.4213%" y="143.50"></text></g><g><title>module_lints (1,173,003 samples, 0.12%)</title><rect x="20.3972%" y="117" width="0.1186%" height="15" fill="rgb(249,33,26)"/><text x="20.6472%" y="127.50"></text></g><g><title>lint_mod (1,170,253 samples, 0.12%)</title><rect x="20.3975%" y="101" width="0.1183%" height="15" fill="rgb(235,183,28)"/><text x="20.6475%" y="111.50"></text></g><g><title>privacy_checking_modules (1,489,616 samples, 0.15%)</title><rect x="20.5689%" y="133" width="0.1506%" height="15" fill="rgb(221,5,38)"/><text x="20.8189%" y="143.50"></text></g><g><title>check_mod_privacy (1,487,976 samples, 0.15%)</title><rect x="20.5691%" y="117" width="0.1504%" height="15" fill="rgb(247,18,42)"/><text x="20.8191%" y="127.50"></text></g><g><title>misc_checking_3 (6,521,670 samples, 0.66%)</title><rect x="20.0619%" y="149" width="0.6592%" height="15" fill="rgb(241,131,45)"/><text x="20.3119%" y="159.50"></text></g><g><title>impl_parent (2,645,908 samples, 0.27%)</title><rect x="21.1884%" y="85" width="0.2674%" height="15" fill="rgb(249,31,29)"/><text x="21.4384%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,410,333 samples, 0.14%)</title><rect x="21.3132%" y="69" width="0.1426%" height="15" fill="rgb(225,111,53)"/><text x="21.5632%" y="79.50"></text></g><g><title>impl_trait_ref (5,013,688 samples, 0.51%)</title><rect x="21.4558%" y="85" width="0.5068%" height="15" fill="rgb(238,160,17)"/><text x="21.7058%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,034,065 samples, 0.41%)</title><rect x="21.5548%" y="69" width="0.4078%" height="15" fill="rgb(214,148,48)"/><text x="21.8048%" y="79.50"></text></g><g><title>coherent_trait (12,972,269 samples, 1.31%)</title><rect x="20.7349%" y="117" width="1.3112%" height="15" fill="rgb(232,36,49)"/><text x="20.9849%" y="127.50"></text></g><g><title>specialization_graph_of (12,234,881 samples, 1.24%)</title><rect x="20.8095%" y="101" width="1.2367%" height="15" fill="rgb(209,103,24)"/><text x="21.0595%" y="111.50"></text></g><g><title>coherence_checking (13,077,460 samples, 1.32%)</title><rect x="20.7331%" y="133" width="1.3218%" height="15" fill="rgb(229,88,8)"/><text x="20.9831%" y="143.50"></text></g><g><title>evaluate_obligation (3,027,798 samples, 0.31%)</title><rect x="27.4402%" y="85" width="0.3060%" height="15" fill="rgb(213,181,19)"/><text x="27.6902%" y="95.50"></text></g><g><title>typeck (4,242,516 samples, 0.43%)</title><rect x="27.9938%" y="85" width="0.4288%" height="15" fill="rgb(254,191,54)"/><text x="28.2438%" y="95.50"></text></g><g><title>item_bodies_checking (63,054,917 samples, 6.37%)</title><rect x="22.0603%" y="133" width="6.3734%" height="15" fill="rgb(241,83,37)"/><text x="22.3103%" y="143.50">item_bod..</text></g><g><title>typeck_item_bodies (63,052,197 samples, 6.37%)</title><rect x="22.0606%" y="117" width="6.3732%" height="15" fill="rgb(233,36,39)"/><text x="22.3106%" y="127.50">typeck_i..</text></g><g><title>typeck (62,846,717 samples, 6.35%)</title><rect x="22.0814%" y="101" width="6.3524%" height="15" fill="rgb(226,3,54)"/><text x="22.3314%" y="111.50">typeck</text></g><g><title>item_types_checking (1,844,781 samples, 0.19%)</title><rect x="28.4338%" y="133" width="0.1865%" height="15" fill="rgb(245,192,40)"/><text x="28.6838%" y="143.50"></text></g><g><title>check_mod_item_types (1,842,541 samples, 0.19%)</title><rect x="28.4340%" y="117" width="0.1862%" height="15" fill="rgb(238,167,29)"/><text x="28.6840%" y="127.50"></text></g><g><title>predicates_of (1,031,104 samples, 0.10%)</title><rect x="28.7964%" y="101" width="0.1042%" height="15" fill="rgb(232,182,51)"/><text x="29.0464%" y="111.50"></text></g><g><title>type_collecting (2,999,412 samples, 0.30%)</title><rect x="28.6204%" y="133" width="0.3032%" height="15" fill="rgb(231,60,39)"/><text x="28.8704%" y="143.50"></text></g><g><title>collect_mod_item_types (2,993,762 samples, 0.30%)</title><rect x="28.6210%" y="117" width="0.3026%" height="15" fill="rgb(208,69,12)"/><text x="28.8710%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,808,733 samples, 0.69%)</title><rect x="28.9633%" y="117" width="0.6882%" height="15" fill="rgb(235,93,37)"/><text x="29.2133%" y="127.50"></text></g><g><title>region_scope_tree (1,053,676 samples, 0.11%)</title><rect x="29.5450%" y="101" width="0.1065%" height="15" fill="rgb(213,116,39)"/><text x="29.7950%" y="111.50"></text></g><g><title>check_item_well_formed (3,345,885 samples, 0.34%)</title><rect x="29.6515%" y="117" width="0.3382%" height="15" fill="rgb(222,207,29)"/><text x="29.9015%" y="127.50"></text></g><g><title>analysis (152,390,548 samples, 15.40%)</title><rect x="14.6328%" y="165" width="15.4033%" height="15" fill="rgb(206,96,30)"/><text x="14.8828%" y="175.50">analysis</text></g><g><title>type_check_crate (92,156,891 samples, 9.32%)</title><rect x="20.7211%" y="149" width="9.3150%" height="15" fill="rgb(218,138,4)"/><text x="20.9711%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (10,994,308 samples, 1.11%)</title><rect x="28.9249%" y="133" width="1.1113%" height="15" fill="rgb(250,191,14)"/><text x="29.1749%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,704,252 samples, 0.17%)</title><rect x="40.0572%" y="133" width="0.1723%" height="15" fill="rgb(239,60,40)"/><text x="40.3072%" y="143.50"></text></g><g><title>const_caller_location (1,456,798 samples, 0.15%)</title><rect x="40.2295%" y="133" width="0.1472%" height="15" fill="rgb(206,27,48)"/><text x="40.4795%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,054,731 samples, 0.11%)</title><rect x="40.9836%" y="117" width="0.1066%" height="15" fill="rgb(225,35,8)"/><text x="41.2336%" y="127.50"></text></g><g><title>layout_of (2,085,457 samples, 0.21%)</title><rect x="41.1112%" y="117" width="0.2108%" height="15" fill="rgb(250,213,24)"/><text x="41.3612%" y="127.50"></text></g><g><title>predicates_of (2,391,061 samples, 0.24%)</title><rect x="41.8137%" y="101" width="0.2417%" height="15" fill="rgb(247,123,22)"/><text x="42.0637%" y="111.50"></text></g><g><title>predicates_defined_on (1,750,804 samples, 0.18%)</title><rect x="41.8785%" y="85" width="0.1770%" height="15" fill="rgb(231,138,38)"/><text x="42.1285%" y="95.50"></text></g><g><title>param_env (7,278,403 samples, 0.74%)</title><rect x="41.3220%" y="117" width="0.7357%" height="15" fill="rgb(231,145,46)"/><text x="41.5720%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,351,456 samples, 0.14%)</title><rect x="42.0577%" y="117" width="0.1366%" height="15" fill="rgb(251,118,11)"/><text x="42.3077%" y="127.50"></text></g><g><title>normalize_projection_ty (1,025,739 samples, 0.10%)</title><rect x="42.0906%" y="101" width="0.1037%" height="15" fill="rgb(217,147,25)"/><text x="42.3406%" y="111.50"></text></g><g><title>fn_abi_of_instance (17,992,984 samples, 1.82%)</title><rect x="40.3801%" y="133" width="1.8187%" height="15" fill="rgb(247,81,37)"/><text x="40.6301%" y="143.50">f..</text></g><g><title>layout_of (2,749,225 samples, 0.28%)</title><rect x="42.2917%" y="133" width="0.2779%" height="15" fill="rgb(209,12,38)"/><text x="42.5417%" y="143.50"></text></g><g><title>codegen_module (121,995,114 samples, 12.33%)</title><rect x="30.3355%" y="149" width="12.3310%" height="15" fill="rgb(227,1,9)"/><text x="30.5855%" y="159.50">codegen_module</text></g><g><title>codegen_crate (125,022,464 samples, 12.64%)</title><rect x="30.0373%" y="165" width="12.6370%" height="15" fill="rgb(248,47,43)"/><text x="30.2873%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (408,291,779 samples, 41.27%)</title><rect x="42.7179%" y="149" width="41.2692%" height="15" fill="rgb(221,10,30)"/><text x="42.9679%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (393,423,550 samples, 39.77%)</title><rect x="44.2207%" y="133" width="39.7664%" height="15" fill="rgb(210,229,1)"/><text x="44.4707%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (429,355,234 samples, 43.40%)</title><rect x="42.6743%" y="165" width="43.3983%" height="15" fill="rgb(222,148,37)"/><text x="42.9243%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (20,632,082 samples, 2.09%)</title><rect x="83.9871%" y="149" width="2.0854%" height="15" fill="rgb(234,67,33)"/><text x="84.2371%" y="159.50">L..</text></g><g><title>macro_expand_crate (25,237,491 samples, 2.55%)</title><rect x="86.1343%" y="149" width="2.5509%" height="15" fill="rgb(247,98,35)"/><text x="86.3843%" y="159.50">ma..</text></g><g><title>expand_crate (25,221,491 samples, 2.55%)</title><rect x="86.1360%" y="133" width="2.5493%" height="15" fill="rgb(247,138,52)"/><text x="86.3860%" y="143.50">ex..</text></g><g><title>metadata_register_crate (2,717,809 samples, 0.27%)</title><rect x="88.4106%" y="117" width="0.2747%" height="15" fill="rgb(213,79,30)"/><text x="88.6606%" y="127.50"></text></g><g><title>metadata_register_crate (1,032,682 samples, 0.10%)</title><rect x="88.5809%" y="101" width="0.1044%" height="15" fill="rgb(246,177,23)"/><text x="88.8309%" y="111.50"></text></g><g><title>late_resolve_crate (3,149,144 samples, 0.32%)</title><rect x="88.7951%" y="133" width="0.3183%" height="15" fill="rgb(230,62,27)"/><text x="89.0451%" y="143.50"></text></g><g><title>configure_and_expand (30,281,946 samples, 3.06%)</title><rect x="86.0725%" y="165" width="3.0608%" height="15" fill="rgb(216,154,8)"/><text x="86.3225%" y="175.50">con..</text></g><g><title>resolve_crate (3,614,170 samples, 0.37%)</title><rect x="88.7681%" y="149" width="0.3653%" height="15" fill="rgb(244,35,45)"/><text x="89.0181%" y="159.50"></text></g><g><title>free_global_ctxt (6,940,145 samples, 0.70%)</title><rect x="89.2551%" y="165" width="0.7015%" height="15" fill="rgb(251,115,12)"/><text x="89.5051%" y="175.50"></text></g><g><title>item_attrs (1,668,428 samples, 0.17%)</title><rect x="90.6742%" y="69" width="0.1686%" height="15" fill="rgb(240,54,50)"/><text x="90.9242%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,590,598 samples, 0.16%)</title><rect x="90.6820%" y="53" width="0.1608%" height="15" fill="rgb(233,84,52)"/><text x="90.9320%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,838,780 samples, 0.29%)</title><rect x="90.6235%" y="85" width="0.2869%" height="15" fill="rgb(207,117,47)"/><text x="90.8735%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,505,012 samples, 0.35%)</title><rect x="91.4513%" y="69" width="0.3543%" height="15" fill="rgb(249,43,39)"/><text x="91.7013%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,615,331 samples, 0.37%)</title><rect x="91.8056%" y="69" width="0.3654%" height="15" fill="rgb(209,38,44)"/><text x="92.0556%" y="79.50"></text></g><g><title>optimized_mir (10,986,284 samples, 1.11%)</title><rect x="91.0827%" y="85" width="1.1105%" height="15" fill="rgb(236,212,23)"/><text x="91.3327%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,571,680 samples, 0.46%)</title><rect x="92.3690%" y="69" width="0.4621%" height="15" fill="rgb(242,79,21)"/><text x="92.6190%" y="79.50"></text></g><g><title>specialization_graph_of (3,764,237 samples, 0.38%)</title><rect x="92.9742%" y="69" width="0.3805%" height="15" fill="rgb(211,96,35)"/><text x="93.2242%" y="79.50"></text></g><g><title>impl_trait_ref (1,271,335 samples, 0.13%)</title><rect x="93.2262%" y="53" width="0.1285%" height="15" fill="rgb(253,215,40)"/><text x="93.4762%" y="63.50"></text></g><g><title>resolve_instance (12,216,464 samples, 1.23%)</title><rect x="92.1932%" y="85" width="1.2348%" height="15" fill="rgb(211,81,21)"/><text x="92.4432%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,281,455 samples, 0.13%)</title><rect x="93.4758%" y="69" width="0.1295%" height="15" fill="rgb(208,190,38)"/><text x="93.7258%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,252,365 samples, 0.13%)</title><rect x="93.4787%" y="53" width="0.1266%" height="15" fill="rgb(235,213,38)"/><text x="93.7287%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,201,035 samples, 0.12%)</title><rect x="93.4839%" y="37" width="0.1214%" height="15" fill="rgb(237,122,38)"/><text x="93.7339%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,550,058 samples, 0.16%)</title><rect x="93.4528%" y="85" width="0.1567%" height="15" fill="rgb(244,218,35)"/><text x="93.7028%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (34,040,517 samples, 3.44%)</title><rect x="90.2627%" y="101" width="3.4407%" height="15" fill="rgb(240,68,47)"/><text x="90.5127%" y="111.50">mon..</text></g><g><title>monomorphization_collector (34,137,618 samples, 3.45%)</title><rect x="90.2624%" y="117" width="3.4506%" height="15" fill="rgb(210,16,53)"/><text x="90.5124%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,127,434 samples, 0.32%)</title><rect x="93.7141%" y="101" width="0.3161%" height="15" fill="rgb(235,124,12)"/><text x="93.9641%" y="111.50"></text></g><g><title>symbol_name (2,831,759 samples, 0.29%)</title><rect x="93.7440%" y="85" width="0.2862%" height="15" fill="rgb(224,169,11)"/><text x="93.9940%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (38,820,978 samples, 3.92%)</title><rect x="90.2579%" y="133" width="3.9239%" height="15" fill="rgb(250,166,2)"/><text x="90.5079%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (4,638,650 samples, 0.47%)</title><rect x="93.7130%" y="117" width="0.4689%" height="15" fill="rgb(242,216,29)"/><text x="93.9630%" y="127.50"></text></g><g><title>cgu_partitioning (1,499,936 samples, 0.15%)</title><rect x="94.0302%" y="101" width="0.1516%" height="15" fill="rgb(230,116,27)"/><text x="94.2802%" y="111.50"></text></g><g><title>exported_symbols (39,155,801 samples, 3.96%)</title><rect x="90.2459%" y="149" width="3.9578%" height="15" fill="rgb(228,99,48)"/><text x="90.4959%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,278,429 samples, 0.53%)</title><rect x="94.7860%" y="133" width="0.5335%" height="15" fill="rgb(253,11,6)"/><text x="95.0360%" y="143.50"></text></g><g><title>optimized_mir (10,935,537 samples, 1.11%)</title><rect x="94.2210%" y="149" width="1.1053%" height="15" fill="rgb(247,143,39)"/><text x="94.4710%" y="159.50"></text></g><g><title>generate_crate_metadata (53,251,162 samples, 5.38%)</title><rect x="89.9566%" y="165" width="5.3825%" height="15" fill="rgb(236,97,10)"/><text x="90.2066%" y="175.50">generat..</text></g><g><title>hir_lowering (5,907,773 samples, 0.60%)</title><rect x="95.3391%" y="165" width="0.5971%" height="15" fill="rgb(233,208,19)"/><text x="95.5891%" y="175.50"></text></g><g><title>finish_ongoing_codegen (17,767,880 samples, 1.80%)</title><rect x="95.9378%" y="149" width="1.7959%" height="15" fill="rgb(216,164,2)"/><text x="96.1878%" y="159.50">f..</text></g><g><title>link_crate (3,006,853 samples, 0.30%)</title><rect x="97.7338%" y="149" width="0.3039%" height="15" fill="rgb(220,129,5)"/><text x="97.9838%" y="159.50"></text></g><g><title>link_binary (2,968,642 samples, 0.30%)</title><rect x="97.7376%" y="133" width="0.3001%" height="15" fill="rgb(242,17,10)"/><text x="97.9876%" y="143.50"></text></g><g><title>link_rlib (2,279,894 samples, 0.23%)</title><rect x="97.8072%" y="117" width="0.2304%" height="15" fill="rgb(242,107,0)"/><text x="98.0572%" y="127.50"></text></g><g><title>link (20,800,643 samples, 2.10%)</title><rect x="95.9362%" y="165" width="2.1025%" height="15" fill="rgb(251,28,31)"/><text x="96.1862%" y="175.50">l..</text></g><g><title>parse_crate (16,611,219 samples, 1.68%)</title><rect x="98.0387%" y="165" width="1.6790%" height="15" fill="rgb(233,223,10)"/><text x="98.2887%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,994,641 samples, 0.20%)</title><rect x="99.7431%" y="165" width="0.2016%" height="15" fill="rgb(215,21,27)"/><text x="99.9931%" y="175.50"></text></g><g><title>all (989,337,433 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (989,337,433 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>