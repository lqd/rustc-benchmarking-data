<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (81,937,887 samples, 15.04%)</title><rect x="0.1107%" y="197" width="15.0417%" height="15" fill="rgb(227,0,7)"/><text x="0.3607%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (587,725 samples, 0.11%)</title><rect x="17.3767%" y="85" width="0.1079%" height="15" fill="rgb(217,0,24)"/><text x="17.6267%" y="95.50"></text></g><g><title>impl_parent (891,969 samples, 0.16%)</title><rect x="17.7207%" y="53" width="0.1637%" height="15" fill="rgb(221,193,54)"/><text x="17.9707%" y="63.50"></text></g><g><title>specialization_graph_of (3,580,947 samples, 0.66%)</title><rect x="17.5443%" y="69" width="0.6574%" height="15" fill="rgb(248,212,6)"/><text x="17.7943%" y="79.50"></text></g><g><title>impl_trait_ref (1,728,057 samples, 0.32%)</title><rect x="17.8844%" y="53" width="0.3172%" height="15" fill="rgb(208,68,35)"/><text x="18.1344%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,463,613 samples, 0.27%)</title><rect x="17.9330%" y="37" width="0.2687%" height="15" fill="rgb(232,128,0)"/><text x="18.1830%" y="47.50"></text></g><g><title>resolve_instance (3,981,429 samples, 0.73%)</title><rect x="17.4846%" y="85" width="0.7309%" height="15" fill="rgb(207,160,47)"/><text x="17.7346%" y="95.50"></text></g><g><title>thir_body (766,165 samples, 0.14%)</title><rect x="18.2180%" y="85" width="0.1406%" height="15" fill="rgb(228,23,34)"/><text x="18.4680%" y="95.50"></text></g><g><title>mir_const (9,018,006 samples, 1.66%)</title><rect x="16.7049%" y="133" width="1.6555%" height="15" fill="rgb(218,30,26)"/><text x="16.9549%" y="143.50"></text></g><g><title>unsafety_check_result (8,091,627 samples, 1.49%)</title><rect x="16.8749%" y="117" width="1.4854%" height="15" fill="rgb(220,122,19)"/><text x="17.1249%" y="127.50"></text></g><g><title>mir_built (7,322,900 samples, 1.34%)</title><rect x="17.0160%" y="101" width="1.3443%" height="15" fill="rgb(250,228,42)"/><text x="17.2660%" y="111.50"></text></g><g><title>mir_promoted (9,924,568 samples, 1.82%)</title><rect x="16.5924%" y="149" width="1.8219%" height="15" fill="rgb(240,193,28)"/><text x="16.8424%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (758,868 samples, 0.14%)</title><rect x="18.5085%" y="149" width="0.1393%" height="15" fill="rgb(216,20,37)"/><text x="18.7585%" y="159.50"></text></g><g><title>MIR_borrow_checking (18,843,489 samples, 3.46%)</title><rect x="15.1892%" y="181" width="3.4592%" height="15" fill="rgb(206,188,39)"/><text x="15.4392%" y="191.50">MIR..</text></g><g><title>mir_borrowck (18,776,589 samples, 3.45%)</title><rect x="15.2014%" y="165" width="3.4469%" height="15" fill="rgb(217,207,13)"/><text x="15.4514%" y="175.50">mir..</text></g><g><title>misc_checking_1 (1,044,481 samples, 0.19%)</title><rect x="18.6974%" y="181" width="0.1917%" height="15" fill="rgb(231,73,38)"/><text x="18.9474%" y="191.50"></text></g><g><title>misc_checking_2 (689,496 samples, 0.13%)</title><rect x="18.8892%" y="181" width="0.1266%" height="15" fill="rgb(225,20,46)"/><text x="19.1392%" y="191.50"></text></g><g><title>crate_lints (1,915,479 samples, 0.35%)</title><rect x="19.0859%" y="149" width="0.3516%" height="15" fill="rgb(210,31,41)"/><text x="19.3359%" y="159.50"></text></g><g><title>type_of (1,065,050 samples, 0.20%)</title><rect x="19.2420%" y="133" width="0.1955%" height="15" fill="rgb(221,200,47)"/><text x="19.4920%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (830,996 samples, 0.15%)</title><rect x="19.2849%" y="117" width="0.1525%" height="15" fill="rgb(226,26,5)"/><text x="19.5349%" y="127.50"></text></g><g><title>lint_checking (2,299,283 samples, 0.42%)</title><rect x="19.0855%" y="165" width="0.4221%" height="15" fill="rgb(249,33,26)"/><text x="19.3355%" y="175.50"></text></g><g><title>misc_checking_3 (3,348,463 samples, 0.61%)</title><rect x="19.0157%" y="181" width="0.6147%" height="15" fill="rgb(235,183,28)"/><text x="19.2657%" y="191.50"></text></g><g><title>impl_parent (1,081,639 samples, 0.20%)</title><rect x="19.9163%" y="117" width="0.1986%" height="15" fill="rgb(221,5,38)"/><text x="20.1663%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (702,734 samples, 0.13%)</title><rect x="19.9859%" y="101" width="0.1290%" height="15" fill="rgb(247,18,42)"/><text x="20.2359%" y="111.50"></text></g><g><title>impl_trait_ref (3,270,904 samples, 0.60%)</title><rect x="20.1149%" y="117" width="0.6005%" height="15" fill="rgb(241,131,45)"/><text x="20.3649%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,895,481 samples, 0.53%)</title><rect x="20.1838%" y="101" width="0.5315%" height="15" fill="rgb(249,31,29)"/><text x="20.4338%" y="111.50"></text></g><g><title>coherent_trait (6,226,292 samples, 1.14%)</title><rect x="19.6429%" y="149" width="1.1430%" height="15" fill="rgb(225,111,53)"/><text x="19.8929%" y="159.50"></text></g><g><title>specialization_graph_of (6,210,792 samples, 1.14%)</title><rect x="19.6457%" y="133" width="1.1401%" height="15" fill="rgb(238,160,17)"/><text x="19.8957%" y="143.50"></text></g><g><title>coherence_checking (6,291,543 samples, 1.15%)</title><rect x="19.6398%" y="165" width="1.1550%" height="15" fill="rgb(214,148,48)"/><text x="19.8898%" y="175.50"></text></g><g><title>associated_items (646,635 samples, 0.12%)</title><rect x="23.0601%" y="117" width="0.1187%" height="15" fill="rgb(232,36,49)"/><text x="23.3101%" y="127.50"></text></g><g><title>dropck_outlives (593,636 samples, 0.11%)</title><rect x="23.1931%" y="117" width="0.1090%" height="15" fill="rgb(209,103,24)"/><text x="23.4431%" y="127.50"></text></g><g><title>evaluate_obligation (1,362,464 samples, 0.25%)</title><rect x="23.3021%" y="117" width="0.2501%" height="15" fill="rgb(229,88,8)"/><text x="23.5521%" y="127.50"></text></g><g><title>typeck (1,901,399 samples, 0.35%)</title><rect x="23.8579%" y="117" width="0.3490%" height="15" fill="rgb(213,181,19)"/><text x="24.1079%" y="127.50"></text></g><g><title>item_bodies_checking (18,624,958 samples, 3.42%)</title><rect x="20.7993%" y="165" width="3.4191%" height="15" fill="rgb(254,191,54)"/><text x="21.0493%" y="175.50">ite..</text></g><g><title>typeck_item_bodies (18,621,978 samples, 3.42%)</title><rect x="20.7999%" y="149" width="3.4185%" height="15" fill="rgb(241,83,37)"/><text x="21.0499%" y="159.50">typ..</text></g><g><title>typeck (18,577,178 samples, 3.41%)</title><rect x="20.8081%" y="133" width="3.4103%" height="15" fill="rgb(233,36,39)"/><text x="21.0581%" y="143.50">typ..</text></g><g><title>item_types_checking (742,618 samples, 0.14%)</title><rect x="24.2184%" y="165" width="0.1363%" height="15" fill="rgb(226,3,54)"/><text x="24.4684%" y="175.50"></text></g><g><title>check_mod_item_types (740,578 samples, 0.14%)</title><rect x="24.2188%" y="149" width="0.1360%" height="15" fill="rgb(245,192,40)"/><text x="24.4688%" y="159.50"></text></g><g><title>type_collecting (1,322,663 samples, 0.24%)</title><rect x="24.3552%" y="165" width="0.2428%" height="15" fill="rgb(238,167,29)"/><text x="24.6052%" y="175.50"></text></g><g><title>collect_mod_item_types (1,316,153 samples, 0.24%)</title><rect x="24.3564%" y="149" width="0.2416%" height="15" fill="rgb(232,182,51)"/><text x="24.6064%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,860,661 samples, 0.34%)</title><rect x="24.6202%" y="149" width="0.3416%" height="15" fill="rgb(231,60,39)"/><text x="24.8702%" y="159.50"></text></g><g><title>analysis (54,930,733 samples, 10.08%)</title><rect x="15.1524%" y="197" width="10.0839%" height="15" fill="rgb(208,69,12)"/><text x="15.4024%" y="207.50">analysis</text></g><g><title>type_check_crate (30,537,228 samples, 5.61%)</title><rect x="19.6304%" y="181" width="5.6059%" height="15" fill="rgb(235,93,37)"/><text x="19.8804%" y="191.50">type_ch..</text></g><g><title>wf_checking (3,473,765 samples, 0.64%)</title><rect x="24.5986%" y="165" width="0.6377%" height="15" fill="rgb(213,116,39)"/><text x="24.8486%" y="175.50"></text></g><g><title>check_item_well_formed (1,495,264 samples, 0.27%)</title><rect x="24.9618%" y="149" width="0.2745%" height="15" fill="rgb(222,207,29)"/><text x="25.2118%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,218,501 samples, 0.22%)</title><rect x="35.0219%" y="165" width="0.2237%" height="15" fill="rgb(206,96,30)"/><text x="35.2719%" y="175.50"></text></g><g><title>codegen_fn_attrs (703,535 samples, 0.13%)</title><rect x="35.7979%" y="149" width="0.1292%" height="15" fill="rgb(218,138,4)"/><text x="36.0479%" y="159.50"></text></g><g><title>layout_of (1,894,915 samples, 0.35%)</title><rect x="35.9479%" y="149" width="0.3479%" height="15" fill="rgb(250,191,14)"/><text x="36.1979%" y="159.50"></text></g><g><title>predicates_of (1,069,208 samples, 0.20%)</title><rect x="36.6529%" y="133" width="0.1963%" height="15" fill="rgb(239,60,40)"/><text x="36.9029%" y="143.50"></text></g><g><title>predicates_defined_on (763,986 samples, 0.14%)</title><rect x="36.7090%" y="117" width="0.1402%" height="15" fill="rgb(206,27,48)"/><text x="36.9590%" y="127.50"></text></g><g><title>param_env (3,024,237 samples, 0.56%)</title><rect x="36.2958%" y="149" width="0.5552%" height="15" fill="rgb(225,35,8)"/><text x="36.5458%" y="159.50"></text></g><g><title>fn_abi_of_instance (8,784,384 samples, 1.61%)</title><rect x="35.3364%" y="165" width="1.6126%" height="15" fill="rgb(250,213,24)"/><text x="35.5864%" y="175.50"></text></g><g><title>layout_of (1,574,415 samples, 0.29%)</title><rect x="37.0278%" y="165" width="0.2890%" height="15" fill="rgb(247,123,22)"/><text x="37.2778%" y="175.50"></text></g><g><title>codegen_module (63,733,392 samples, 11.70%)</title><rect x="25.6986%" y="181" width="11.6998%" height="15" fill="rgb(231,138,38)"/><text x="25.9486%" y="191.50">codegen_module</text></g><g><title>codegen_crate (66,315,728 samples, 12.17%)</title><rect x="25.2384%" y="197" width="12.1739%" height="15" fill="rgb(231,145,46)"/><text x="25.4884%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (251,446,756 samples, 46.16%)</title><rect x="37.4528%" y="181" width="46.1593%" height="15" fill="rgb(251,118,11)"/><text x="37.7028%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (241,011,010 samples, 44.24%)</title><rect x="39.3685%" y="165" width="44.2435%" height="15" fill="rgb(217,147,25)"/><text x="39.6185%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (267,192,024 samples, 49.05%)</title><rect x="37.4123%" y="197" width="49.0497%" height="15" fill="rgb(247,81,37)"/><text x="37.6623%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (15,524,866 samples, 2.85%)</title><rect x="83.6121%" y="181" width="2.8500%" height="15" fill="rgb(209,12,38)"/><text x="83.8621%" y="191.50">LL..</text></g><g><title>macro_expand_crate (15,084,462 samples, 2.77%)</title><rect x="86.5390%" y="181" width="2.7691%" height="15" fill="rgb(227,1,9)"/><text x="86.7890%" y="191.50">ma..</text></g><g><title>expand_crate (15,065,221 samples, 2.77%)</title><rect x="86.5426%" y="165" width="2.7656%" height="15" fill="rgb(248,47,43)"/><text x="86.7926%" y="175.50">ex..</text></g><g><title>metadata_register_crate (2,719,577 samples, 0.50%)</title><rect x="88.8089%" y="149" width="0.4992%" height="15" fill="rgb(221,10,30)"/><text x="89.0589%" y="159.50"></text></g><g><title>metadata_register_crate (994,879 samples, 0.18%)</title><rect x="89.1255%" y="133" width="0.1826%" height="15" fill="rgb(210,229,1)"/><text x="89.3755%" y="143.50"></text></g><g><title>late_resolve_crate (1,076,211 samples, 0.20%)</title><rect x="89.4054%" y="165" width="0.1976%" height="15" fill="rgb(222,148,37)"/><text x="89.6554%" y="175.50"></text></g><g><title>configure_and_expand (17,183,313 samples, 3.15%)</title><rect x="86.4621%" y="197" width="3.1544%" height="15" fill="rgb(234,67,33)"/><text x="86.7121%" y="207.50">con..</text></g><g><title>resolve_crate (1,328,684 samples, 0.24%)</title><rect x="89.3726%" y="181" width="0.2439%" height="15" fill="rgb(247,98,35)"/><text x="89.6226%" y="191.50"></text></g><g><title>free_global_ctxt (4,917,320 samples, 0.90%)</title><rect x="89.6885%" y="197" width="0.9027%" height="15" fill="rgb(247,138,52)"/><text x="89.9385%" y="207.50"></text></g><g><title>item_attrs (847,270 samples, 0.16%)</title><rect x="91.1403%" y="101" width="0.1555%" height="15" fill="rgb(213,79,30)"/><text x="91.3903%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (813,890 samples, 0.15%)</title><rect x="91.1464%" y="85" width="0.1494%" height="15" fill="rgb(246,177,23)"/><text x="91.3964%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,304,997 samples, 0.24%)</title><rect x="91.1009%" y="117" width="0.2396%" height="15" fill="rgb(230,62,27)"/><text x="91.3509%" y="127.50"></text></g><g><title>mir_shims (662,597 samples, 0.12%)</title><rect x="91.4089%" y="117" width="0.1216%" height="15" fill="rgb(216,154,8)"/><text x="91.6589%" y="127.50"></text></g><g><title>layout_of (564,245 samples, 0.10%)</title><rect x="91.8565%" y="101" width="0.1036%" height="15" fill="rgb(244,35,45)"/><text x="92.1065%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,550,905 samples, 0.28%)</title><rect x="91.9601%" y="101" width="0.2847%" height="15" fill="rgb(251,115,12)"/><text x="92.2101%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,361,487 samples, 0.43%)</title><rect x="92.2448%" y="101" width="0.4335%" height="15" fill="rgb(240,54,50)"/><text x="92.4948%" y="111.50"></text></g><g><title>optimized_mir (6,796,291 samples, 1.25%)</title><rect x="91.5305%" y="117" width="1.2476%" height="15" fill="rgb(233,84,52)"/><text x="91.7805%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,066,139 samples, 0.20%)</title><rect x="92.9021%" y="101" width="0.1957%" height="15" fill="rgb(207,117,47)"/><text x="93.1521%" y="111.50"></text></g><g><title>impl_parent (717,310 samples, 0.13%)</title><rect x="93.4859%" y="85" width="0.1317%" height="15" fill="rgb(249,43,39)"/><text x="93.7359%" y="95.50"></text></g><g><title>specialization_graph_of (3,529,744 samples, 0.65%)</title><rect x="93.2012%" y="101" width="0.6480%" height="15" fill="rgb(209,38,44)"/><text x="93.4512%" y="111.50"></text></g><g><title>impl_trait_ref (1,261,253 samples, 0.23%)</title><rect x="93.6176%" y="85" width="0.2315%" height="15" fill="rgb(236,212,23)"/><text x="93.8676%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (946,779 samples, 0.17%)</title><rect x="93.6753%" y="69" width="0.1738%" height="15" fill="rgb(242,79,21)"/><text x="93.9253%" y="79.50"></text></g><g><title>resolve_instance (6,124,862 samples, 1.12%)</title><rect x="92.7782%" y="117" width="1.1244%" height="15" fill="rgb(211,96,35)"/><text x="93.0282%" y="127.50"></text></g><g><title>eval_to_const_value_raw (721,138 samples, 0.13%)</title><rect x="93.9301%" y="101" width="0.1324%" height="15" fill="rgb(253,215,40)"/><text x="94.1801%" y="111.50"></text></g><g><title>eval_to_const_value_raw (688,457 samples, 0.13%)</title><rect x="93.9361%" y="85" width="0.1264%" height="15" fill="rgb(211,81,21)"/><text x="94.1861%" y="95.50"></text></g><g><title>eval_to_allocation_raw (628,167 samples, 0.12%)</title><rect x="93.9471%" y="69" width="0.1153%" height="15" fill="rgb(208,190,38)"/><text x="94.1971%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (839,048 samples, 0.15%)</title><rect x="93.9109%" y="117" width="0.1540%" height="15" fill="rgb(235,213,38)"/><text x="94.1609%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (18,323,025 samples, 3.36%)</title><rect x="90.7730%" y="133" width="3.3636%" height="15" fill="rgb(237,122,38)"/><text x="91.0230%" y="143.50">mon..</text></g><g><title>monomorphization_collector (18,364,555 samples, 3.37%)</title><rect x="90.7725%" y="149" width="3.3713%" height="15" fill="rgb(244,218,35)"/><text x="91.0225%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,483,655 samples, 0.27%)</title><rect x="94.1458%" y="133" width="0.2724%" height="15" fill="rgb(240,68,47)"/><text x="94.3958%" y="143.50"></text></g><g><title>symbol_name (1,330,754 samples, 0.24%)</title><rect x="94.1738%" y="117" width="0.2443%" height="15" fill="rgb(210,16,53)"/><text x="94.4238%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (20,641,357 samples, 3.79%)</title><rect x="90.7631%" y="165" width="3.7892%" height="15" fill="rgb(235,124,12)"/><text x="91.0131%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,225,762 samples, 0.41%)</title><rect x="94.1437%" y="149" width="0.4086%" height="15" fill="rgb(224,169,11)"/><text x="94.3937%" y="159.50"></text></g><g><title>cgu_partitioning (731,087 samples, 0.13%)</title><rect x="94.4181%" y="133" width="0.1342%" height="15" fill="rgb(250,166,2)"/><text x="94.6681%" y="143.50"></text></g><g><title>exported_symbols (20,784,899 samples, 3.82%)</title><rect x="90.7493%" y="181" width="3.8156%" height="15" fill="rgb(242,216,29)"/><text x="90.9993%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (688,729 samples, 0.13%)</title><rect x="94.7652%" y="165" width="0.1264%" height="15" fill="rgb(230,116,27)"/><text x="95.0152%" y="175.50"></text></g><g><title>optimized_mir (1,858,051 samples, 0.34%)</title><rect x="94.5767%" y="181" width="0.3411%" height="15" fill="rgb(228,99,48)"/><text x="94.8267%" y="191.50"></text></g><g><title>generate_crate_metadata (23,598,389 samples, 4.33%)</title><rect x="90.5912%" y="197" width="4.3321%" height="15" fill="rgb(253,11,6)"/><text x="90.8412%" y="207.50">gener..</text></g><g><title>hir_lowering (1,823,089 samples, 0.33%)</title><rect x="94.9233%" y="197" width="0.3347%" height="15" fill="rgb(247,143,39)"/><text x="95.1733%" y="207.50"></text></g><g><title>finish_ongoing_codegen (16,207,993 samples, 2.98%)</title><rect x="95.2762%" y="181" width="2.9754%" height="15" fill="rgb(236,97,10)"/><text x="95.5262%" y="191.50">fin..</text></g><g><title>link_crate (1,929,739 samples, 0.35%)</title><rect x="98.2516%" y="181" width="0.3543%" height="15" fill="rgb(233,208,19)"/><text x="98.5016%" y="191.50"></text></g><g><title>link_binary (1,899,719 samples, 0.35%)</title><rect x="98.2571%" y="165" width="0.3487%" height="15" fill="rgb(216,164,2)"/><text x="98.5071%" y="175.50"></text></g><g><title>link_rlib (1,388,514 samples, 0.25%)</title><rect x="98.3510%" y="149" width="0.2549%" height="15" fill="rgb(220,129,5)"/><text x="98.6010%" y="159.50"></text></g><g><title>link (18,250,273 samples, 3.35%)</title><rect x="95.2580%" y="197" width="3.3503%" height="15" fill="rgb(242,17,10)"/><text x="95.5080%" y="207.50">link</text></g><g><title>parse_crate (5,809,578 samples, 1.07%)</title><rect x="98.6083%" y="197" width="1.0665%" height="15" fill="rgb(242,107,0)"/><text x="98.8583%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,193,023 samples, 0.22%)</title><rect x="99.7095%" y="197" width="0.2190%" height="15" fill="rgb(251,28,31)"/><text x="99.9595%" y="207.50"></text></g><g><title>all (544,737,093 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (544,737,093 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>