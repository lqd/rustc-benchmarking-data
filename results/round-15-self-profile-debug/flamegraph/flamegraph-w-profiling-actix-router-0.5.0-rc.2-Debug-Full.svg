<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (252,603,446 samples, 11.79%)</title><rect x="0.0405%" y="181" width="11.7893%" height="15" fill="rgb(227,0,7)"/><text x="0.2905%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (5,061,821 samples, 0.24%)</title><rect x="16.5934%" y="53" width="0.2362%" height="15" fill="rgb(217,0,24)"/><text x="16.8434%" y="63.50"></text></g><g><title>evaluate_obligation (4,042,844 samples, 0.19%)</title><rect x="16.6409%" y="37" width="0.1887%" height="15" fill="rgb(221,193,54)"/><text x="16.8909%" y="47.50"></text></g><g><title>needs_drop_raw (6,550,251 samples, 0.31%)</title><rect x="16.5303%" y="69" width="0.3057%" height="15" fill="rgb(248,212,6)"/><text x="16.7803%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (4,042,058 samples, 0.19%)</title><rect x="16.8861%" y="53" width="0.1886%" height="15" fill="rgb(208,68,35)"/><text x="17.1361%" y="63.50"></text></g><g><title>resolve_instance (6,430,243 samples, 0.30%)</title><rect x="16.8361%" y="69" width="0.3001%" height="15" fill="rgb(232,128,0)"/><text x="17.0861%" y="79.50"></text></g><g><title>thir_body (4,957,967 samples, 0.23%)</title><rect x="17.1439%" y="69" width="0.2314%" height="15" fill="rgb(207,160,47)"/><text x="17.3939%" y="79.50"></text></g><g><title>mir_const (40,460,252 samples, 1.89%)</title><rect x="15.4949%" y="117" width="1.8883%" height="15" fill="rgb(228,23,34)"/><text x="15.7449%" y="127.50">m..</text></g><g><title>unsafety_check_result (35,793,423 samples, 1.67%)</title><rect x="15.7127%" y="101" width="1.6705%" height="15" fill="rgb(218,30,26)"/><text x="15.9627%" y="111.50"></text></g><g><title>mir_built (32,157,362 samples, 1.50%)</title><rect x="15.8824%" y="85" width="1.5008%" height="15" fill="rgb(220,122,19)"/><text x="16.1324%" y="95.50"></text></g><g><title>mir_promoted (46,269,095 samples, 2.16%)</title><rect x="15.2995%" y="133" width="2.1594%" height="15" fill="rgb(250,228,42)"/><text x="15.5495%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (3,899,582 samples, 0.18%)</title><rect x="17.5427%" y="133" width="0.1820%" height="15" fill="rgb(240,193,28)"/><text x="17.7927%" y="143.50"></text></g><g><title>normalize_projection_ty (2,295,824 samples, 0.11%)</title><rect x="17.6175%" y="117" width="0.1071%" height="15" fill="rgb(216,20,37)"/><text x="17.8675%" y="127.50"></text></g><g><title>type_op_normalize_predicate (5,289,513 samples, 0.25%)</title><rect x="17.7247%" y="133" width="0.2469%" height="15" fill="rgb(206,188,39)"/><text x="17.9747%" y="143.50"></text></g><g><title>normalize_projection_ty (2,544,612 samples, 0.12%)</title><rect x="17.8528%" y="117" width="0.1188%" height="15" fill="rgb(217,207,13)"/><text x="18.1028%" y="127.50"></text></g><g><title>type_op_prove_predicate (17,486,491 samples, 0.82%)</title><rect x="18.0095%" y="133" width="0.8161%" height="15" fill="rgb(231,73,38)"/><text x="18.2595%" y="143.50"></text></g><g><title>MIR_borrow_checking (149,028,050 samples, 6.96%)</title><rect x="11.8711%" y="165" width="6.9553%" height="15" fill="rgb(225,20,46)"/><text x="12.1211%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (148,322,842 samples, 6.92%)</title><rect x="11.9040%" y="149" width="6.9224%" height="15" fill="rgb(210,31,41)"/><text x="12.1540%" y="159.50">mir_borro..</text></g><g><title>misc_checking_1 (3,520,845 samples, 0.16%)</title><rect x="18.8957%" y="165" width="0.1643%" height="15" fill="rgb(221,200,47)"/><text x="19.1457%" y="175.50"></text></g><g><title>misc_checking_2 (4,631,406 samples, 0.22%)</title><rect x="19.0600%" y="165" width="0.2162%" height="15" fill="rgb(226,26,5)"/><text x="19.3100%" y="175.50"></text></g><g><title>match_checking (2,652,626 samples, 0.12%)</title><rect x="19.1524%" y="149" width="0.1238%" height="15" fill="rgb(249,33,26)"/><text x="19.4024%" y="159.50"></text></g><g><title>check_match (2,490,365 samples, 0.12%)</title><rect x="19.1599%" y="133" width="0.1162%" height="15" fill="rgb(235,183,28)"/><text x="19.4099%" y="143.50"></text></g><g><title>crate_lints (5,019,500 samples, 0.23%)</title><rect x="19.3715%" y="133" width="0.2343%" height="15" fill="rgb(221,5,38)"/><text x="19.6215%" y="143.50"></text></g><g><title>lint_checking (7,099,781 samples, 0.33%)</title><rect x="19.3714%" y="149" width="0.3314%" height="15" fill="rgb(247,18,42)"/><text x="19.6214%" y="159.50"></text></g><g><title>privacy_checking_modules (4,292,083 samples, 0.20%)</title><rect x="19.7600%" y="149" width="0.2003%" height="15" fill="rgb(241,131,45)"/><text x="20.0100%" y="159.50"></text></g><g><title>check_mod_privacy (4,284,443 samples, 0.20%)</title><rect x="19.7603%" y="133" width="0.2000%" height="15" fill="rgb(249,31,29)"/><text x="20.0103%" y="143.50"></text></g><g><title>misc_checking_3 (14,680,777 samples, 0.69%)</title><rect x="19.2762%" y="165" width="0.6852%" height="15" fill="rgb(225,111,53)"/><text x="19.5262%" y="175.50"></text></g><g><title>impl_parent (3,345,302 samples, 0.16%)</title><rect x="20.3102%" y="101" width="0.1561%" height="15" fill="rgb(238,160,17)"/><text x="20.5602%" y="111.50"></text></g><g><title>impl_trait_ref (7,945,006 samples, 0.37%)</title><rect x="20.4664%" y="101" width="0.3708%" height="15" fill="rgb(214,148,48)"/><text x="20.7164%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,099,010 samples, 0.28%)</title><rect x="20.5525%" y="85" width="0.2846%" height="15" fill="rgb(232,36,49)"/><text x="20.8025%" y="95.50"></text></g><g><title>coherent_trait (19,849,958 samples, 0.93%)</title><rect x="19.9739%" y="133" width="0.9264%" height="15" fill="rgb(209,103,24)"/><text x="20.2239%" y="143.50"></text></g><g><title>specialization_graph_of (19,153,821 samples, 0.89%)</title><rect x="20.0064%" y="117" width="0.8939%" height="15" fill="rgb(229,88,8)"/><text x="20.2564%" y="127.50"></text></g><g><title>coherence_checking (19,985,570 samples, 0.93%)</title><rect x="19.9728%" y="149" width="0.9327%" height="15" fill="rgb(213,181,19)"/><text x="20.2228%" y="159.50"></text></g><g><title>adt_dtorck_constraint (3,004,391 samples, 0.14%)</title><rect x="24.5415%" y="85" width="0.1402%" height="15" fill="rgb(254,191,54)"/><text x="24.7915%" y="95.50"></text></g><g><title>dropck_outlives (4,258,934 samples, 0.20%)</title><rect x="24.4906%" y="101" width="0.1988%" height="15" fill="rgb(241,83,37)"/><text x="24.7406%" y="111.50"></text></g><g><title>specializes (2,608,959 samples, 0.12%)</title><rect x="25.2718%" y="85" width="0.1218%" height="15" fill="rgb(233,36,39)"/><text x="25.5218%" y="95.50"></text></g><g><title>evaluate_obligation (15,219,905 samples, 0.71%)</title><rect x="24.7236%" y="101" width="0.7103%" height="15" fill="rgb(226,3,54)"/><text x="24.9736%" y="111.50"></text></g><g><title>evaluate_obligation (7,854,440 samples, 0.37%)</title><rect x="28.4203%" y="85" width="0.3666%" height="15" fill="rgb(245,192,40)"/><text x="28.6703%" y="95.50"></text></g><g><title>typeck (71,955,751 samples, 3.36%)</title><rect x="25.6621%" y="101" width="3.3583%" height="15" fill="rgb(238,167,29)"/><text x="25.9121%" y="111.50">typ..</text></g><g><title>item_bodies_checking (173,901,890 samples, 8.12%)</title><rect x="20.9100%" y="149" width="8.1162%" height="15" fill="rgb(232,182,51)"/><text x="21.1600%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (173,898,850 samples, 8.12%)</title><rect x="20.9102%" y="133" width="8.1161%" height="15" fill="rgb(231,60,39)"/><text x="21.1602%" y="143.50">typeck_item..</text></g><g><title>typeck (173,502,225 samples, 8.10%)</title><rect x="20.9287%" y="117" width="8.0976%" height="15" fill="rgb(208,69,12)"/><text x="21.1787%" y="127.50">typeck</text></g><g><title>item_types_checking (8,608,125 samples, 0.40%)</title><rect x="29.0262%" y="149" width="0.4018%" height="15" fill="rgb(235,93,37)"/><text x="29.2762%" y="159.50"></text></g><g><title>check_mod_item_types (8,597,815 samples, 0.40%)</title><rect x="29.0267%" y="133" width="0.4013%" height="15" fill="rgb(213,116,39)"/><text x="29.2767%" y="143.50"></text></g><g><title>predicates_of (2,685,514 samples, 0.13%)</title><rect x="29.6298%" y="117" width="0.1253%" height="15" fill="rgb(222,207,29)"/><text x="29.8798%" y="127.50"></text></g><g><title>predicates_defined_on (2,501,383 samples, 0.12%)</title><rect x="29.6384%" y="101" width="0.1167%" height="15" fill="rgb(206,96,30)"/><text x="29.8884%" y="111.50"></text></g><g><title>type_collecting (7,436,185 samples, 0.35%)</title><rect x="29.4282%" y="149" width="0.3471%" height="15" fill="rgb(218,138,4)"/><text x="29.6782%" y="159.50"></text></g><g><title>collect_mod_item_types (7,416,955 samples, 0.35%)</title><rect x="29.4291%" y="133" width="0.3462%" height="15" fill="rgb(250,191,14)"/><text x="29.6791%" y="143.50"></text></g><g><title>check_impl_item_well_formed (16,777,261 samples, 0.78%)</title><rect x="29.8121%" y="133" width="0.7830%" height="15" fill="rgb(239,60,40)"/><text x="30.0621%" y="143.50"></text></g><g><title>check_item_well_formed (6,905,317 samples, 0.32%)</title><rect x="30.5951%" y="133" width="0.3223%" height="15" fill="rgb(206,27,48)"/><text x="30.8451%" y="143.50"></text></g><g><title>analysis (409,220,692 samples, 19.10%)</title><rect x="11.8298%" y="181" width="19.0988%" height="15" fill="rgb(225,35,8)"/><text x="12.0798%" y="191.50">analysis</text></g><g><title>type_check_crate (234,990,780 samples, 10.97%)</title><rect x="19.9613%" y="165" width="10.9673%" height="15" fill="rgb(250,213,24)"/><text x="20.2113%" y="175.50">type_check_crate</text></g><g><title>wf_checking (24,682,517 samples, 1.15%)</title><rect x="29.7767%" y="149" width="1.1520%" height="15" fill="rgb(247,123,22)"/><text x="30.0267%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (6,829,564 samples, 0.32%)</title><rect x="40.4312%" y="149" width="0.3187%" height="15" fill="rgb(231,138,38)"/><text x="40.6812%" y="159.50"></text></g><g><title>item_attrs (2,344,929 samples, 0.11%)</title><rect x="41.2670%" y="117" width="0.1094%" height="15" fill="rgb(231,145,46)"/><text x="41.5170%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,300,179 samples, 0.11%)</title><rect x="41.2691%" y="101" width="0.1074%" height="15" fill="rgb(251,118,11)"/><text x="41.5191%" y="111.50"></text></g><g><title>codegen_fn_attrs (2,745,904 samples, 0.13%)</title><rect x="41.2527%" y="133" width="0.1282%" height="15" fill="rgb(217,147,25)"/><text x="41.5027%" y="143.50"></text></g><g><title>layout_of (2,522,391 samples, 0.12%)</title><rect x="41.3952%" y="133" width="0.1177%" height="15" fill="rgb(247,81,37)"/><text x="41.6452%" y="143.50"></text></g><g><title>predicates_of (2,200,184 samples, 0.10%)</title><rect x="41.7190%" y="117" width="0.1027%" height="15" fill="rgb(209,12,38)"/><text x="41.9690%" y="127.50"></text></g><g><title>param_env (6,623,613 samples, 0.31%)</title><rect x="41.5130%" y="133" width="0.3091%" height="15" fill="rgb(227,1,9)"/><text x="41.7630%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,486,717 samples, 0.12%)</title><rect x="41.8221%" y="133" width="0.1161%" height="15" fill="rgb(248,47,43)"/><text x="42.0721%" y="143.50"></text></g><g><title>fn_abi_of_instance (24,111,431 samples, 1.13%)</title><rect x="40.8183%" y="149" width="1.1253%" height="15" fill="rgb(221,10,30)"/><text x="41.0683%" y="159.50"></text></g><g><title>layout_of (4,585,276 samples, 0.21%)</title><rect x="41.9858%" y="149" width="0.2140%" height="15" fill="rgb(210,229,1)"/><text x="42.2358%" y="159.50"></text></g><g><title>symbol_name (2,324,274 samples, 0.11%)</title><rect x="42.2009%" y="149" width="0.1085%" height="15" fill="rgb(222,148,37)"/><text x="42.4509%" y="159.50"></text></g><g><title>codegen_module (242,552,875 samples, 11.32%)</title><rect x="31.0354%" y="165" width="11.3202%" height="15" fill="rgb(234,67,33)"/><text x="31.2854%" y="175.50">codegen_module</text></g><g><title>codegen_crate (244,943,689 samples, 11.43%)</title><rect x="30.9288%" y="181" width="11.4318%" height="15" fill="rgb(247,98,35)"/><text x="31.1788%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (943,744,474 samples, 44.05%)</title><rect x="42.3714%" y="165" width="44.0457%" height="15" fill="rgb(247,138,52)"/><text x="42.6214%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (891,280,623 samples, 41.60%)</title><rect x="44.8199%" y="149" width="41.5971%" height="15" fill="rgb(213,79,30)"/><text x="45.0699%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (989,349,101 samples, 46.17%)</title><rect x="42.3606%" y="181" width="46.1741%" height="15" fill="rgb(246,177,23)"/><text x="42.6106%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (45,374,512 samples, 2.12%)</title><rect x="86.4170%" y="165" width="2.1177%" height="15" fill="rgb(230,62,27)"/><text x="86.6670%" y="175.50">L..</text></g><g><title>macro_expand_crate (34,649,887 samples, 1.62%)</title><rect x="88.5699%" y="165" width="1.6172%" height="15" fill="rgb(216,154,8)"/><text x="88.8199%" y="175.50"></text></g><g><title>expand_crate (34,642,037 samples, 1.62%)</title><rect x="88.5702%" y="149" width="1.6168%" height="15" fill="rgb(244,35,45)"/><text x="88.8202%" y="159.50"></text></g><g><title>late_resolve_crate (6,506,095 samples, 0.30%)</title><rect x="90.2096%" y="149" width="0.3036%" height="15" fill="rgb(251,115,12)"/><text x="90.4596%" y="159.50"></text></g><g><title>configure_and_expand (42,773,819 samples, 2.00%)</title><rect x="88.5347%" y="181" width="1.9963%" height="15" fill="rgb(240,54,50)"/><text x="88.7847%" y="191.50">c..</text></g><g><title>resolve_crate (7,317,384 samples, 0.34%)</title><rect x="90.1895%" y="165" width="0.3415%" height="15" fill="rgb(233,84,52)"/><text x="90.4395%" y="175.50"></text></g><g><title>free_global_ctxt (15,314,213 samples, 0.71%)</title><rect x="90.6214%" y="181" width="0.7147%" height="15" fill="rgb(207,117,47)"/><text x="90.8714%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,522,858 samples, 0.12%)</title><rect x="92.2118%" y="101" width="0.1177%" height="15" fill="rgb(249,43,39)"/><text x="92.4618%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,294,356 samples, 0.25%)</title><rect x="92.7140%" y="85" width="0.2471%" height="15" fill="rgb(209,38,44)"/><text x="92.9640%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,785,016 samples, 0.27%)</title><rect x="92.9611%" y="85" width="0.2700%" height="15" fill="rgb(236,212,23)"/><text x="93.2111%" y="95.50"></text></g><g><title>optimized_mir (17,271,428 samples, 0.81%)</title><rect x="92.4505%" y="101" width="0.8061%" height="15" fill="rgb(242,79,21)"/><text x="92.7005%" y="111.50"></text></g><g><title>evaluate_obligation (3,866,307 samples, 0.18%)</title><rect x="94.7318%" y="69" width="0.1804%" height="15" fill="rgb(211,96,35)"/><text x="94.9818%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (32,800,556 samples, 1.53%)</title><rect x="93.4410%" y="85" width="1.5308%" height="15" fill="rgb(253,215,40)"/><text x="93.6910%" y="95.50"></text></g><g><title>resolve_instance (41,698,985 samples, 1.95%)</title><rect x="93.2566%" y="101" width="1.9461%" height="15" fill="rgb(211,81,21)"/><text x="93.5066%" y="111.50">r..</text></g><g><title>normalize_projection_ty (4,074,621 samples, 0.19%)</title><rect x="95.2655%" y="85" width="0.1902%" height="15" fill="rgb(208,190,38)"/><text x="95.5155%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,436,830 samples, 0.25%)</title><rect x="95.2027%" y="101" width="0.2537%" height="15" fill="rgb(235,213,38)"/><text x="95.4527%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,817,048 samples, 0.13%)</title><rect x="95.5228%" y="85" width="0.1315%" height="15" fill="rgb(237,122,38)"/><text x="95.7728%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,675,936 samples, 0.12%)</title><rect x="95.5294%" y="69" width="0.1249%" height="15" fill="rgb(244,218,35)"/><text x="95.7794%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,482,524 samples, 0.12%)</title><rect x="95.5384%" y="53" width="0.1159%" height="15" fill="rgb(240,68,47)"/><text x="95.7884%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,376,553 samples, 0.20%)</title><rect x="95.4564%" y="101" width="0.2043%" height="15" fill="rgb(210,16,53)"/><text x="95.7064%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (4,326,753 samples, 0.20%)</title><rect x="95.6623%" y="101" width="0.2019%" height="15" fill="rgb(235,124,12)"/><text x="95.9123%" y="111.50"></text></g><g><title>upstream_monomorphizations (4,265,533 samples, 0.20%)</title><rect x="95.6651%" y="85" width="0.1991%" height="15" fill="rgb(224,169,11)"/><text x="95.9151%" y="95.50"></text></g><g><title>exported_symbols (3,580,726 samples, 0.17%)</title><rect x="95.6971%" y="69" width="0.1671%" height="15" fill="rgb(250,166,2)"/><text x="95.9471%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,572,655 samples, 0.17%)</title><rect x="95.6975%" y="53" width="0.1667%" height="15" fill="rgb(242,216,29)"/><text x="95.9475%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (91,006,890 samples, 4.25%)</title><rect x="91.6667%" y="117" width="4.2474%" height="15" fill="rgb(230,116,27)"/><text x="91.9167%" y="127.50">monom..</text></g><g><title>monomorphization_collector (91,158,772 samples, 4.25%)</title><rect x="91.6666%" y="133" width="4.2545%" height="15" fill="rgb(228,99,48)"/><text x="91.9166%" y="143.50">monom..</text></g><g><title>assert_symbols_are_distinct (7,841,838 samples, 0.37%)</title><rect x="95.9212%" y="117" width="0.3660%" height="15" fill="rgb(253,11,6)"/><text x="96.1712%" y="127.50"></text></g><g><title>symbol_name (7,099,220 samples, 0.33%)</title><rect x="95.9559%" y="101" width="0.3313%" height="15" fill="rgb(247,143,39)"/><text x="96.2059%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (101,716,547 samples, 4.75%)</title><rect x="91.6643%" y="149" width="4.7472%" height="15" fill="rgb(236,97,10)"/><text x="91.9143%" y="159.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (10,509,525 samples, 0.49%)</title><rect x="95.9210%" y="133" width="0.4905%" height="15" fill="rgb(233,208,19)"/><text x="96.1710%" y="143.50"></text></g><g><title>cgu_partitioning (2,664,037 samples, 0.12%)</title><rect x="96.2872%" y="117" width="0.1243%" height="15" fill="rgb(216,164,2)"/><text x="96.5372%" y="127.50"></text></g><g><title>exported_symbols (102,498,025 samples, 4.78%)</title><rect x="91.6469%" y="165" width="4.7837%" height="15" fill="rgb(220,129,5)"/><text x="91.8969%" y="175.50">export..</text></g><g><title>layout_of (2,833,395 samples, 0.13%)</title><rect x="96.9800%" y="149" width="0.1322%" height="15" fill="rgb(242,17,10)"/><text x="97.2300%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (15,235,114 samples, 0.71%)</title><rect x="97.1123%" y="149" width="0.7110%" height="15" fill="rgb(242,107,0)"/><text x="97.3623%" y="159.50"></text></g><g><title>optimized_mir (30,322,291 samples, 1.42%)</title><rect x="96.4471%" y="165" width="1.4152%" height="15" fill="rgb(251,28,31)"/><text x="96.6971%" y="175.50"></text></g><g><title>generate_crate_metadata (140,968,249 samples, 6.58%)</title><rect x="91.3361%" y="181" width="6.5792%" height="15" fill="rgb(233,223,10)"/><text x="91.5861%" y="191.50">generate_..</text></g><g><title>hir_lowering (11,068,240 samples, 0.52%)</title><rect x="97.9153%" y="181" width="0.5166%" height="15" fill="rgb(215,21,27)"/><text x="98.1653%" y="191.50"></text></g><g><title>finish_ongoing_codegen (22,290,244 samples, 1.04%)</title><rect x="98.4327%" y="165" width="1.0403%" height="15" fill="rgb(232,23,21)"/><text x="98.6827%" y="175.50"></text></g><g><title>link_crate (6,090,761 samples, 0.28%)</title><rect x="99.4730%" y="165" width="0.2843%" height="15" fill="rgb(244,5,23)"/><text x="99.7230%" y="175.50"></text></g><g><title>link_binary (5,956,019 samples, 0.28%)</title><rect x="99.4793%" y="149" width="0.2780%" height="15" fill="rgb(226,81,46)"/><text x="99.7293%" y="159.50"></text></g><g><title>link_rlib (4,796,088 samples, 0.22%)</title><rect x="99.5334%" y="133" width="0.2238%" height="15" fill="rgb(247,70,30)"/><text x="99.7834%" y="143.50"></text></g><g><title>link (28,406,605 samples, 1.33%)</title><rect x="98.4319%" y="181" width="1.3258%" height="15" fill="rgb(212,68,19)"/><text x="98.6819%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,083,331 samples, 0.19%)</title><rect x="99.7748%" y="181" width="0.1906%" height="15" fill="rgb(240,187,13)"/><text x="100.0248%" y="191.50"></text></g><g><title>all (2,142,650,643 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,142,650,643 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>