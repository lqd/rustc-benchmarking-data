<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (101,989,737 samples, 15.59%)</title><rect x="0.0967%" y="197" width="15.5942%" height="15" fill="rgb(227,0,7)"/><text x="0.3467%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (753,825 samples, 0.12%)</title><rect x="18.0164%" y="85" width="0.1153%" height="15" fill="rgb(217,0,24)"/><text x="18.2664%" y="95.50"></text></g><g><title>thir_body (1,021,524 samples, 0.16%)</title><rect x="18.1799%" y="85" width="0.1562%" height="15" fill="rgb(221,193,54)"/><text x="18.4299%" y="95.50"></text></g><g><title>mir_const (6,509,809 samples, 1.00%)</title><rect x="17.3434%" y="133" width="0.9953%" height="15" fill="rgb(248,212,6)"/><text x="17.5934%" y="143.50"></text></g><g><title>unsafety_check_result (5,551,380 samples, 0.85%)</title><rect x="17.4900%" y="117" width="0.8488%" height="15" fill="rgb(208,68,35)"/><text x="17.7400%" y="127.50"></text></g><g><title>mir_built (4,745,161 samples, 0.73%)</title><rect x="17.6132%" y="101" width="0.7255%" height="15" fill="rgb(232,128,0)"/><text x="17.8632%" y="111.50"></text></g><g><title>mir_promoted (7,479,679 samples, 1.14%)</title><rect x="17.2308%" y="149" width="1.1436%" height="15" fill="rgb(207,160,47)"/><text x="17.4808%" y="159.50"></text></g><g><title>type_op_prove_predicate (913,051 samples, 0.14%)</title><rect x="18.4720%" y="149" width="0.1396%" height="15" fill="rgb(228,23,34)"/><text x="18.7220%" y="159.50"></text></g><g><title>MIR_borrow_checking (18,852,831 samples, 2.88%)</title><rect x="15.7298%" y="181" width="2.8826%" height="15" fill="rgb(218,30,26)"/><text x="15.9798%" y="191.50">MI..</text></g><g><title>mir_borrowck (18,766,949 samples, 2.87%)</title><rect x="15.7430%" y="165" width="2.8695%" height="15" fill="rgb(220,122,19)"/><text x="15.9930%" y="175.50">mi..</text></g><g><title>misc_checking_1 (1,048,401 samples, 0.16%)</title><rect x="18.6462%" y="181" width="0.1603%" height="15" fill="rgb(250,228,42)"/><text x="18.8962%" y="191.50"></text></g><g><title>misc_checking_2 (1,034,991 samples, 0.16%)</title><rect x="18.8065%" y="181" width="0.1582%" height="15" fill="rgb(240,193,28)"/><text x="19.0565%" y="191.50"></text></g><g><title>match_checking (688,947 samples, 0.11%)</title><rect x="18.8594%" y="165" width="0.1053%" height="15" fill="rgb(216,20,37)"/><text x="19.1094%" y="175.50"></text></g><g><title>check_match (667,266 samples, 0.10%)</title><rect x="18.8628%" y="149" width="0.1020%" height="15" fill="rgb(206,188,39)"/><text x="19.1128%" y="159.50"></text></g><g><title>crate_lints (2,163,443 samples, 0.33%)</title><rect x="19.0365%" y="149" width="0.3308%" height="15" fill="rgb(217,207,13)"/><text x="19.2865%" y="159.50"></text></g><g><title>type_of (1,311,093 samples, 0.20%)</title><rect x="19.1668%" y="133" width="0.2005%" height="15" fill="rgb(231,73,38)"/><text x="19.4168%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (842,147 samples, 0.13%)</title><rect x="19.2385%" y="117" width="0.1288%" height="15" fill="rgb(225,20,46)"/><text x="19.4885%" y="127.50"></text></g><g><title>lint_checking (2,670,669 samples, 0.41%)</title><rect x="19.0362%" y="165" width="0.4083%" height="15" fill="rgb(210,31,41)"/><text x="19.2862%" y="175.50"></text></g><g><title>misc_checking_3 (3,999,662 samples, 0.61%)</title><rect x="18.9648%" y="181" width="0.6115%" height="15" fill="rgb(221,200,47)"/><text x="19.2148%" y="191.50"></text></g><g><title>impl_parent (2,141,063 samples, 0.33%)</title><rect x="20.1181%" y="117" width="0.3274%" height="15" fill="rgb(226,26,5)"/><text x="20.3681%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,292,474 samples, 0.20%)</title><rect x="20.2478%" y="101" width="0.1976%" height="15" fill="rgb(249,33,26)"/><text x="20.4978%" y="111.50"></text></g><g><title>impl_trait_ref (4,844,350 samples, 0.74%)</title><rect x="20.4455%" y="117" width="0.7407%" height="15" fill="rgb(235,183,28)"/><text x="20.6955%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,006,180 samples, 0.61%)</title><rect x="20.5736%" y="101" width="0.6125%" height="15" fill="rgb(221,5,38)"/><text x="20.8236%" y="111.50"></text></g><g><title>coherent_trait (11,164,599 samples, 1.71%)</title><rect x="19.5872%" y="149" width="1.7071%" height="15" fill="rgb(247,18,42)"/><text x="19.8372%" y="159.50"></text></g><g><title>specialization_graph_of (11,148,829 samples, 1.70%)</title><rect x="19.5896%" y="133" width="1.7047%" height="15" fill="rgb(241,131,45)"/><text x="19.8396%" y="143.50"></text></g><g><title>trait_impls_of (705,028 samples, 0.11%)</title><rect x="21.1865%" y="117" width="0.1078%" height="15" fill="rgb(249,31,29)"/><text x="21.4365%" y="127.50"></text></g><g><title>coherence_checking (11,226,560 samples, 1.72%)</title><rect x="19.5837%" y="165" width="1.7165%" height="15" fill="rgb(225,111,53)"/><text x="19.8337%" y="175.50"></text></g><g><title>evaluate_obligation (2,501,837 samples, 0.38%)</title><rect x="24.0234%" y="117" width="0.3825%" height="15" fill="rgb(238,160,17)"/><text x="24.2734%" y="127.50"></text></g><g><title>typeck (2,558,858 samples, 0.39%)</title><rect x="24.6490%" y="117" width="0.3912%" height="15" fill="rgb(214,148,48)"/><text x="24.8990%" y="127.50"></text></g><g><title>item_bodies_checking (24,512,021 samples, 3.75%)</title><rect x="21.3028%" y="165" width="3.7479%" height="15" fill="rgb(232,36,49)"/><text x="21.5528%" y="175.50">item..</text></g><g><title>typeck_item_bodies (24,508,451 samples, 3.75%)</title><rect x="21.3033%" y="149" width="3.7473%" height="15" fill="rgb(209,103,24)"/><text x="21.5533%" y="159.50">type..</text></g><g><title>typeck (24,454,021 samples, 3.74%)</title><rect x="21.3117%" y="133" width="3.7390%" height="15" fill="rgb(229,88,8)"/><text x="21.5617%" y="143.50">type..</text></g><g><title>mir_const (3,917,222 samples, 0.60%)</title><rect x="25.3245%" y="85" width="0.5989%" height="15" fill="rgb(213,181,19)"/><text x="25.5745%" y="95.50"></text></g><g><title>unsafety_check_result (3,748,570 samples, 0.57%)</title><rect x="25.3503%" y="69" width="0.5732%" height="15" fill="rgb(254,191,54)"/><text x="25.6003%" y="79.50"></text></g><g><title>mir_built (3,623,078 samples, 0.55%)</title><rect x="25.3694%" y="53" width="0.5540%" height="15" fill="rgb(241,83,37)"/><text x="25.6194%" y="63.50"></text></g><g><title>typeck (2,741,409 samples, 0.42%)</title><rect x="25.5043%" y="37" width="0.4192%" height="15" fill="rgb(233,36,39)"/><text x="25.7543%" y="47.50"></text></g><g><title>mir_promoted (4,035,894 samples, 0.62%)</title><rect x="25.3072%" y="101" width="0.6171%" height="15" fill="rgb(226,3,54)"/><text x="25.5572%" y="111.50"></text></g><g><title>type_of (5,002,733 samples, 0.76%)</title><rect x="25.1893%" y="133" width="0.7649%" height="15" fill="rgb(245,192,40)"/><text x="25.4393%" y="143.50"></text></g><g><title>mir_borrowck (4,991,773 samples, 0.76%)</title><rect x="25.1909%" y="117" width="0.7632%" height="15" fill="rgb(238,167,29)"/><text x="25.4409%" y="127.50"></text></g><g><title>item_types_checking (5,942,793 samples, 0.91%)</title><rect x="25.0507%" y="165" width="0.9087%" height="15" fill="rgb(232,182,51)"/><text x="25.3007%" y="175.50"></text></g><g><title>check_mod_item_types (5,937,933 samples, 0.91%)</title><rect x="25.0514%" y="149" width="0.9079%" height="15" fill="rgb(231,60,39)"/><text x="25.3014%" y="159.50"></text></g><g><title>type_collecting (1,491,166 samples, 0.23%)</title><rect x="25.9595%" y="165" width="0.2280%" height="15" fill="rgb(208,69,12)"/><text x="26.2095%" y="175.50"></text></g><g><title>collect_mod_item_types (1,483,966 samples, 0.23%)</title><rect x="25.9606%" y="149" width="0.2269%" height="15" fill="rgb(235,93,37)"/><text x="26.2106%" y="159.50"></text></g><g><title>check_impl_item_well_formed (943,419 samples, 0.14%)</title><rect x="26.2041%" y="149" width="0.1442%" height="15" fill="rgb(213,116,39)"/><text x="26.4541%" y="159.50"></text></g><g><title>analysis (71,416,031 samples, 10.92%)</title><rect x="15.6909%" y="197" width="10.9195%" height="15" fill="rgb(222,207,29)"/><text x="15.9409%" y="207.50">analysis</text></g><g><title>type_check_crate (46,004,171 samples, 7.03%)</title><rect x="19.5763%" y="181" width="7.0340%" height="15" fill="rgb(206,96,30)"/><text x="19.8263%" y="191.50">type_chec..</text></g><g><title>wf_checking (2,761,479 samples, 0.42%)</title><rect x="26.1881%" y="165" width="0.4222%" height="15" fill="rgb(218,138,4)"/><text x="26.4381%" y="175.50"></text></g><g><title>check_item_well_formed (1,713,370 samples, 0.26%)</title><rect x="26.3484%" y="149" width="0.2620%" height="15" fill="rgb(250,191,14)"/><text x="26.5984%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (912,533 samples, 0.14%)</title><rect x="36.7233%" y="165" width="0.1395%" height="15" fill="rgb(239,60,40)"/><text x="36.9733%" y="175.50"></text></g><g><title>const_caller_location (1,169,761 samples, 0.18%)</title><rect x="36.8628%" y="165" width="0.1789%" height="15" fill="rgb(206,27,48)"/><text x="37.1128%" y="175.50"></text></g><g><title>layout_of (1,531,690 samples, 0.23%)</title><rect x="37.6652%" y="149" width="0.2342%" height="15" fill="rgb(225,35,8)"/><text x="37.9152%" y="159.50"></text></g><g><title>predicates_of (1,407,403 samples, 0.22%)</title><rect x="38.3465%" y="133" width="0.2152%" height="15" fill="rgb(250,213,24)"/><text x="38.5965%" y="143.50"></text></g><g><title>predicates_defined_on (1,005,071 samples, 0.15%)</title><rect x="38.4080%" y="117" width="0.1537%" height="15" fill="rgb(247,123,22)"/><text x="38.6580%" y="127.50"></text></g><g><title>param_env (4,349,335 samples, 0.67%)</title><rect x="37.8994%" y="149" width="0.6650%" height="15" fill="rgb(231,138,38)"/><text x="38.1494%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (883,169 samples, 0.14%)</title><rect x="38.5644%" y="149" width="0.1350%" height="15" fill="rgb(231,145,46)"/><text x="38.8144%" y="159.50"></text></g><g><title>normalize_projection_ty (702,168 samples, 0.11%)</title><rect x="38.5921%" y="133" width="0.1074%" height="15" fill="rgb(251,118,11)"/><text x="38.8421%" y="143.50"></text></g><g><title>fn_abi_of_instance (10,837,165 samples, 1.66%)</title><rect x="37.0455%" y="165" width="1.6570%" height="15" fill="rgb(217,147,25)"/><text x="37.2955%" y="175.50"></text></g><g><title>layout_of (1,208,611 samples, 0.18%)</title><rect x="38.8071%" y="165" width="0.1848%" height="15" fill="rgb(247,81,37)"/><text x="39.0571%" y="175.50"></text></g><g><title>codegen_module (79,144,921 samples, 12.10%)</title><rect x="26.9626%" y="181" width="12.1012%" height="15" fill="rgb(209,12,38)"/><text x="27.2126%" y="191.50">codegen_module</text></g><g><title>codegen_crate (81,517,279 samples, 12.46%)</title><rect x="26.6121%" y="197" width="12.4640%" height="15" fill="rgb(227,1,9)"/><text x="26.8621%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (289,671,608 samples, 44.29%)</title><rect x="39.1072%" y="181" width="44.2907%" height="15" fill="rgb(248,47,43)"/><text x="39.3572%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (275,660,766 samples, 42.15%)</title><rect x="41.2495%" y="165" width="42.1484%" height="15" fill="rgb(221,10,30)"/><text x="41.4995%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (308,745,621 samples, 47.21%)</title><rect x="39.0761%" y="197" width="47.2071%" height="15" fill="rgb(210,229,1)"/><text x="39.3261%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (18,870,183 samples, 2.89%)</title><rect x="83.3979%" y="181" width="2.8852%" height="15" fill="rgb(222,148,37)"/><text x="83.6479%" y="191.50">LL..</text></g><g><title>metadata_register_crate (2,639,318 samples, 0.40%)</title><rect x="89.1772%" y="149" width="0.4036%" height="15" fill="rgb(234,67,33)"/><text x="89.4272%" y="159.50"></text></g><g><title>metadata_register_crate (980,790 samples, 0.15%)</title><rect x="89.4308%" y="133" width="0.1500%" height="15" fill="rgb(247,98,35)"/><text x="89.6808%" y="143.50"></text></g><g><title>macro_expand_crate (21,122,896 samples, 3.23%)</title><rect x="86.3839%" y="181" width="3.2297%" height="15" fill="rgb(247,138,52)"/><text x="86.6339%" y="191.50">mac..</text></g><g><title>expand_crate (21,107,265 samples, 3.23%)</title><rect x="86.3863%" y="165" width="3.2273%" height="15" fill="rgb(213,79,30)"/><text x="86.6363%" y="175.50">exp..</text></g><g><title>late_resolve_crate (2,244,224 samples, 0.34%)</title><rect x="89.6848%" y="165" width="0.3431%" height="15" fill="rgb(246,177,23)"/><text x="89.9348%" y="175.50"></text></g><g><title>configure_and_expand (24,583,843 samples, 3.76%)</title><rect x="86.2831%" y="197" width="3.7589%" height="15" fill="rgb(230,62,27)"/><text x="86.5331%" y="207.50">conf..</text></g><g><title>resolve_crate (2,602,648 samples, 0.40%)</title><rect x="89.6441%" y="181" width="0.3979%" height="15" fill="rgb(216,154,8)"/><text x="89.8941%" y="191.50"></text></g><g><title>free_global_ctxt (4,842,222 samples, 0.74%)</title><rect x="90.1181%" y="197" width="0.7404%" height="15" fill="rgb(244,35,45)"/><text x="90.3681%" y="207.50"></text></g><g><title>item_attrs (1,091,356 samples, 0.17%)</title><rect x="91.4550%" y="101" width="0.1669%" height="15" fill="rgb(251,115,12)"/><text x="91.7050%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,036,146 samples, 0.16%)</title><rect x="91.4634%" y="85" width="0.1584%" height="15" fill="rgb(240,54,50)"/><text x="91.7134%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,915,326 samples, 0.29%)</title><rect x="91.4056%" y="117" width="0.2929%" height="15" fill="rgb(233,84,52)"/><text x="91.6556%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,238,148 samples, 0.50%)</title><rect x="92.1940%" y="101" width="0.4951%" height="15" fill="rgb(207,117,47)"/><text x="92.4440%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,612,904 samples, 0.40%)</title><rect x="92.6891%" y="101" width="0.3995%" height="15" fill="rgb(249,43,39)"/><text x="92.9391%" y="111.50"></text></g><g><title>optimized_mir (8,527,471 samples, 1.30%)</title><rect x="91.8428%" y="117" width="1.3038%" height="15" fill="rgb(209,38,44)"/><text x="92.0928%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,218,591 samples, 0.49%)</title><rect x="93.3042%" y="101" width="0.4921%" height="15" fill="rgb(236,212,23)"/><text x="93.5542%" y="111.50"></text></g><g><title>specialization_graph_of (2,826,649 samples, 0.43%)</title><rect x="93.9262%" y="101" width="0.4322%" height="15" fill="rgb(242,79,21)"/><text x="94.1762%" y="111.50"></text></g><g><title>impl_trait_ref (1,098,989 samples, 0.17%)</title><rect x="94.1903%" y="85" width="0.1680%" height="15" fill="rgb(211,96,35)"/><text x="94.4403%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (882,857 samples, 0.13%)</title><rect x="94.2234%" y="69" width="0.1350%" height="15" fill="rgb(253,215,40)"/><text x="94.4734%" y="79.50"></text></g><g><title>resolve_instance (8,364,632 samples, 1.28%)</title><rect x="93.1466%" y="117" width="1.2789%" height="15" fill="rgb(211,81,21)"/><text x="93.3966%" y="127.50"></text></g><g><title>eval_to_const_value_raw (682,477 samples, 0.10%)</title><rect x="94.4414%" y="101" width="0.1044%" height="15" fill="rgb(208,190,38)"/><text x="94.6914%" y="111.50"></text></g><g><title>eval_to_const_value_raw (665,497 samples, 0.10%)</title><rect x="94.4440%" y="85" width="0.1018%" height="15" fill="rgb(235,213,38)"/><text x="94.6940%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (788,959 samples, 0.12%)</title><rect x="94.4302%" y="117" width="0.1206%" height="15" fill="rgb(237,122,38)"/><text x="94.6802%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (23,057,116 samples, 3.53%)</title><rect x="91.0653%" y="133" width="3.5254%" height="15" fill="rgb(244,218,35)"/><text x="91.3153%" y="143.50">mon..</text></g><g><title>monomorphization_collector (23,103,086 samples, 3.53%)</title><rect x="91.0649%" y="149" width="3.5325%" height="15" fill="rgb(240,68,47)"/><text x="91.3149%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,976,791 samples, 0.30%)</title><rect x="94.5992%" y="133" width="0.3023%" height="15" fill="rgb(210,16,53)"/><text x="94.8492%" y="143.50"></text></g><g><title>symbol_name (1,809,119 samples, 0.28%)</title><rect x="94.6248%" y="117" width="0.2766%" height="15" fill="rgb(235,124,12)"/><text x="94.8748%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (26,127,698 samples, 3.99%)</title><rect x="91.0583%" y="165" width="3.9949%" height="15" fill="rgb(224,169,11)"/><text x="91.3083%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,982,042 samples, 0.46%)</title><rect x="94.5973%" y="149" width="0.4560%" height="15" fill="rgb(250,166,2)"/><text x="94.8473%" y="159.50"></text></g><g><title>cgu_partitioning (993,181 samples, 0.15%)</title><rect x="94.9014%" y="133" width="0.1519%" height="15" fill="rgb(242,216,29)"/><text x="95.1514%" y="143.50"></text></g><g><title>exported_symbols (26,291,730 samples, 4.02%)</title><rect x="91.0457%" y="181" width="4.0200%" height="15" fill="rgb(230,116,27)"/><text x="91.2957%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,624,138 samples, 0.25%)</title><rect x="95.3603%" y="165" width="0.2483%" height="15" fill="rgb(228,99,48)"/><text x="95.6103%" y="175.50"></text></g><g><title>optimized_mir (3,540,048 samples, 0.54%)</title><rect x="95.0729%" y="181" width="0.5413%" height="15" fill="rgb(253,11,6)"/><text x="95.3229%" y="191.50"></text></g><g><title>generate_crate_metadata (31,191,133 samples, 4.77%)</title><rect x="90.8585%" y="197" width="4.7691%" height="15" fill="rgb(247,143,39)"/><text x="91.1085%" y="207.50">genera..</text></g><g><title>hir_lowering (2,168,203 samples, 0.33%)</title><rect x="95.6276%" y="197" width="0.3315%" height="15" fill="rgb(236,97,10)"/><text x="95.8776%" y="207.50"></text></g><g><title>finish_ongoing_codegen (20,951,053 samples, 3.20%)</title><rect x="95.9616%" y="181" width="3.2034%" height="15" fill="rgb(233,208,19)"/><text x="96.2116%" y="191.50">fin..</text></g><g><title>link_crate (1,990,481 samples, 0.30%)</title><rect x="99.1650%" y="181" width="0.3043%" height="15" fill="rgb(216,164,2)"/><text x="99.4150%" y="191.50"></text></g><g><title>link_binary (1,960,171 samples, 0.30%)</title><rect x="99.1696%" y="165" width="0.2997%" height="15" fill="rgb(220,129,5)"/><text x="99.4196%" y="175.50"></text></g><g><title>link_rlib (1,373,394 samples, 0.21%)</title><rect x="99.2594%" y="149" width="0.2100%" height="15" fill="rgb(242,17,10)"/><text x="99.5094%" y="159.50"></text></g><g><title>link (22,967,564 samples, 3.51%)</title><rect x="95.9591%" y="197" width="3.5117%" height="15" fill="rgb(242,107,0)"/><text x="96.2091%" y="207.50">link</text></g><g><title>parse_crate (1,542,017 samples, 0.24%)</title><rect x="99.4708%" y="197" width="0.2358%" height="15" fill="rgb(251,28,31)"/><text x="99.7208%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,268,984 samples, 0.19%)</title><rect x="99.7392%" y="197" width="0.1940%" height="15" fill="rgb(233,223,10)"/><text x="99.9892%" y="207.50"></text></g><g><title>all (654,024,171 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (654,024,171 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>