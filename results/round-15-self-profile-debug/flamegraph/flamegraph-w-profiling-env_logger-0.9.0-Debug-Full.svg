<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (283,736,240 samples, 17.16%)</title><rect x="0.0460%" y="181" width="17.1555%" height="15" fill="rgb(227,0,7)"/><text x="0.2960%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,946,303 samples, 0.12%)</title><rect x="20.5232%" y="53" width="0.1177%" height="15" fill="rgb(217,0,24)"/><text x="20.7732%" y="63.50"></text></g><g><title>needs_drop_raw (3,423,768 samples, 0.21%)</title><rect x="20.4373%" y="69" width="0.2070%" height="15" fill="rgb(221,193,54)"/><text x="20.6873%" y="79.50"></text></g><g><title>resolve_instance (3,241,336 samples, 0.20%)</title><rect x="20.6451%" y="69" width="0.1960%" height="15" fill="rgb(248,212,6)"/><text x="20.8951%" y="79.50"></text></g><g><title>thir_body (2,716,431 samples, 0.16%)</title><rect x="20.8473%" y="69" width="0.1642%" height="15" fill="rgb(208,68,35)"/><text x="21.0973%" y="79.50"></text></g><g><title>mir_const (22,348,452 samples, 1.35%)</title><rect x="19.6645%" y="117" width="1.3512%" height="15" fill="rgb(232,128,0)"/><text x="19.9145%" y="127.50"></text></g><g><title>unsafety_check_result (19,304,293 samples, 1.17%)</title><rect x="19.8486%" y="101" width="1.1672%" height="15" fill="rgb(207,160,47)"/><text x="20.0986%" y="111.50"></text></g><g><title>mir_built (17,133,717 samples, 1.04%)</title><rect x="19.9798%" y="85" width="1.0360%" height="15" fill="rgb(228,23,34)"/><text x="20.2298%" y="95.50"></text></g><g><title>mir_promoted (25,260,478 samples, 1.53%)</title><rect x="19.5236%" y="133" width="1.5273%" height="15" fill="rgb(218,30,26)"/><text x="19.7736%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,776,998 samples, 0.47%)</title><rect x="21.2243%" y="133" width="0.4702%" height="15" fill="rgb(220,122,19)"/><text x="21.4743%" y="143.50"></text></g><g><title>MIR_borrow_checking (73,746,803 samples, 4.46%)</title><rect x="17.2368%" y="165" width="4.4589%" height="15" fill="rgb(250,228,42)"/><text x="17.4868%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (73,349,591 samples, 4.43%)</title><rect x="17.2608%" y="149" width="4.4349%" height="15" fill="rgb(240,193,28)"/><text x="17.5108%" y="159.50">mir_b..</text></g><g><title>misc_checking_1 (2,750,498 samples, 0.17%)</title><rect x="21.7444%" y="165" width="0.1663%" height="15" fill="rgb(216,20,37)"/><text x="21.9944%" y="175.50"></text></g><g><title>misc_checking_2 (2,755,457 samples, 0.17%)</title><rect x="21.9107%" y="165" width="0.1666%" height="15" fill="rgb(206,188,39)"/><text x="22.1607%" y="175.50"></text></g><g><title>crate_lints (4,342,634 samples, 0.26%)</title><rect x="22.1765%" y="133" width="0.2626%" height="15" fill="rgb(217,207,13)"/><text x="22.4265%" y="143.50"></text></g><g><title>lint_checking (5,566,966 samples, 0.34%)</title><rect x="22.1763%" y="149" width="0.3366%" height="15" fill="rgb(231,73,38)"/><text x="22.4263%" y="159.50"></text></g><g><title>privacy_checking_modules (2,203,692 samples, 0.13%)</title><rect x="22.5495%" y="149" width="0.1332%" height="15" fill="rgb(225,20,46)"/><text x="22.7995%" y="159.50"></text></g><g><title>check_mod_privacy (2,194,982 samples, 0.13%)</title><rect x="22.5500%" y="133" width="0.1327%" height="15" fill="rgb(210,31,41)"/><text x="22.8000%" y="143.50"></text></g><g><title>misc_checking_3 (10,039,202 samples, 0.61%)</title><rect x="22.0773%" y="165" width="0.6070%" height="15" fill="rgb(221,200,47)"/><text x="22.3273%" y="175.50"></text></g><g><title>impl_parent (3,405,532 samples, 0.21%)</title><rect x="23.1068%" y="101" width="0.2059%" height="15" fill="rgb(226,26,5)"/><text x="23.3568%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,960,243 samples, 0.12%)</title><rect x="23.1942%" y="85" width="0.1185%" height="15" fill="rgb(249,33,26)"/><text x="23.4442%" y="95.50"></text></g><g><title>impl_trait_ref (6,798,317 samples, 0.41%)</title><rect x="23.3129%" y="101" width="0.4110%" height="15" fill="rgb(235,183,28)"/><text x="23.5629%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,145,632 samples, 0.31%)</title><rect x="23.4128%" y="85" width="0.3111%" height="15" fill="rgb(221,5,38)"/><text x="23.6628%" y="95.50"></text></g><g><title>coherent_trait (18,424,636 samples, 1.11%)</title><rect x="22.6965%" y="133" width="1.1140%" height="15" fill="rgb(247,18,42)"/><text x="22.9465%" y="143.50"></text></g><g><title>specialization_graph_of (18,064,272 samples, 1.09%)</title><rect x="22.7183%" y="117" width="1.0922%" height="15" fill="rgb(241,131,45)"/><text x="22.9683%" y="127.50"></text></g><g><title>coherence_checking (18,560,617 samples, 1.12%)</title><rect x="22.6948%" y="149" width="1.1222%" height="15" fill="rgb(249,31,29)"/><text x="22.9448%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,770,417 samples, 0.11%)</title><rect x="26.3163%" y="85" width="0.1070%" height="15" fill="rgb(225,111,53)"/><text x="26.5663%" y="95.50"></text></g><g><title>dropck_outlives (2,778,185 samples, 0.17%)</title><rect x="26.2661%" y="101" width="0.1680%" height="15" fill="rgb(238,160,17)"/><text x="26.5161%" y="111.50"></text></g><g><title>evaluate_obligation (2,033,455 samples, 0.12%)</title><rect x="26.4341%" y="101" width="0.1229%" height="15" fill="rgb(214,148,48)"/><text x="26.6841%" y="111.50"></text></g><g><title>evaluate_obligation (2,593,639 samples, 0.16%)</title><rect x="27.9295%" y="85" width="0.1568%" height="15" fill="rgb(232,36,49)"/><text x="28.1795%" y="95.50"></text></g><g><title>typeck (24,762,982 samples, 1.50%)</title><rect x="26.7467%" y="101" width="1.4972%" height="15" fill="rgb(209,103,24)"/><text x="26.9967%" y="111.50"></text></g><g><title>item_bodies_checking (73,263,189 samples, 4.43%)</title><rect x="23.8211%" y="149" width="4.4297%" height="15" fill="rgb(229,88,8)"/><text x="24.0711%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (73,259,479 samples, 4.43%)</title><rect x="23.8213%" y="133" width="4.4295%" height="15" fill="rgb(213,181,19)"/><text x="24.0713%" y="143.50">typec..</text></g><g><title>typeck (73,003,687 samples, 4.41%)</title><rect x="23.8368%" y="117" width="4.4140%" height="15" fill="rgb(254,191,54)"/><text x="24.0868%" y="127.50">typeck</text></g><g><title>item_types_checking (2,703,987 samples, 0.16%)</title><rect x="28.2508%" y="149" width="0.1635%" height="15" fill="rgb(241,83,37)"/><text x="28.5008%" y="159.50"></text></g><g><title>check_mod_item_types (2,692,477 samples, 0.16%)</title><rect x="28.2515%" y="133" width="0.1628%" height="15" fill="rgb(233,36,39)"/><text x="28.5015%" y="143.50"></text></g><g><title>predicates_of (1,970,428 samples, 0.12%)</title><rect x="28.5673%" y="117" width="0.1191%" height="15" fill="rgb(226,3,54)"/><text x="28.8173%" y="127.50"></text></g><g><title>predicates_defined_on (1,843,748 samples, 0.11%)</title><rect x="28.5749%" y="101" width="0.1115%" height="15" fill="rgb(245,192,40)"/><text x="28.8249%" y="111.50"></text></g><g><title>type_collecting (4,746,958 samples, 0.29%)</title><rect x="28.4146%" y="149" width="0.2870%" height="15" fill="rgb(238,167,29)"/><text x="28.6646%" y="159.50"></text></g><g><title>collect_mod_item_types (4,732,108 samples, 0.29%)</title><rect x="28.4155%" y="133" width="0.2861%" height="15" fill="rgb(232,182,51)"/><text x="28.6655%" y="143.50"></text></g><g><title>check_impl_item_well_formed (9,360,476 samples, 0.57%)</title><rect x="28.7332%" y="133" width="0.5660%" height="15" fill="rgb(231,60,39)"/><text x="28.9832%" y="143.50"></text></g><g><title>evaluate_obligation (3,653,311 samples, 0.22%)</title><rect x="29.4804%" y="117" width="0.2209%" height="15" fill="rgb(208,69,12)"/><text x="29.7304%" y="127.50"></text></g><g><title>analysis (208,153,609 samples, 12.59%)</title><rect x="17.2015%" y="181" width="12.5855%" height="15" fill="rgb(235,93,37)"/><text x="17.4515%" y="191.50">analysis</text></g><g><title>type_check_crate (117,472,604 samples, 7.10%)</title><rect x="22.6843%" y="165" width="7.1027%" height="15" fill="rgb(213,116,39)"/><text x="22.9343%" y="175.50">type_check..</text></g><g><title>wf_checking (17,934,501 samples, 1.08%)</title><rect x="28.7026%" y="149" width="1.0844%" height="15" fill="rgb(222,207,29)"/><text x="28.9526%" y="159.50"></text></g><g><title>check_item_well_formed (8,068,712 samples, 0.49%)</title><rect x="29.2991%" y="133" width="0.4879%" height="15" fill="rgb(206,96,30)"/><text x="29.5491%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (5,427,749 samples, 0.33%)</title><rect x="40.9352%" y="149" width="0.3282%" height="15" fill="rgb(218,138,4)"/><text x="41.1852%" y="159.50"></text></g><g><title>const_caller_location (2,927,789 samples, 0.18%)</title><rect x="41.2633%" y="149" width="0.1770%" height="15" fill="rgb(250,191,14)"/><text x="41.5133%" y="159.50"></text></g><g><title>item_attrs (1,823,760 samples, 0.11%)</title><rect x="42.0672%" y="117" width="0.1103%" height="15" fill="rgb(239,60,40)"/><text x="42.3172%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,763,590 samples, 0.11%)</title><rect x="42.0709%" y="101" width="0.1066%" height="15" fill="rgb(206,27,48)"/><text x="42.3209%" y="111.50"></text></g><g><title>codegen_fn_attrs (2,578,929 samples, 0.16%)</title><rect x="42.0362%" y="133" width="0.1559%" height="15" fill="rgb(225,35,8)"/><text x="42.2862%" y="143.50"></text></g><g><title>layout_of (3,233,002 samples, 0.20%)</title><rect x="42.2173%" y="133" width="0.1955%" height="15" fill="rgb(250,213,24)"/><text x="42.4673%" y="143.50"></text></g><g><title>predicates_of (3,740,070 samples, 0.23%)</title><rect x="42.8337%" y="117" width="0.2261%" height="15" fill="rgb(247,123,22)"/><text x="43.0837%" y="127.50"></text></g><g><title>predicates_defined_on (2,475,199 samples, 0.15%)</title><rect x="42.9102%" y="101" width="0.1497%" height="15" fill="rgb(231,138,38)"/><text x="43.1602%" y="111.50"></text></g><g><title>param_env (10,726,540 samples, 0.65%)</title><rect x="42.4127%" y="133" width="0.6486%" height="15" fill="rgb(231,145,46)"/><text x="42.6627%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,347,814 samples, 0.14%)</title><rect x="43.0613%" y="133" width="0.1420%" height="15" fill="rgb(251,118,11)"/><text x="43.3113%" y="143.50"></text></g><g><title>normalize_projection_ty (1,870,429 samples, 0.11%)</title><rect x="43.0901%" y="117" width="0.1131%" height="15" fill="rgb(217,147,25)"/><text x="43.3401%" y="127.50"></text></g><g><title>fn_abi_of_instance (29,146,807 samples, 1.76%)</title><rect x="41.4475%" y="149" width="1.7623%" height="15" fill="rgb(247,81,37)"/><text x="41.6975%" y="159.50"></text></g><g><title>layout_of (1,753,348 samples, 0.11%)</title><rect x="43.5433%" y="53" width="0.1060%" height="15" fill="rgb(209,12,38)"/><text x="43.7933%" y="63.50"></text></g><g><title>layout_of (1,988,999 samples, 0.12%)</title><rect x="43.5351%" y="69" width="0.1203%" height="15" fill="rgb(227,1,9)"/><text x="43.7851%" y="79.50"></text></g><g><title>layout_of (2,243,913 samples, 0.14%)</title><rect x="43.5214%" y="85" width="0.1357%" height="15" fill="rgb(248,47,43)"/><text x="43.7714%" y="95.50"></text></g><g><title>layout_of (2,600,765 samples, 0.16%)</title><rect x="43.5116%" y="101" width="0.1572%" height="15" fill="rgb(221,10,30)"/><text x="43.7616%" y="111.50"></text></g><g><title>layout_of (2,845,619 samples, 0.17%)</title><rect x="43.5012%" y="117" width="0.1721%" height="15" fill="rgb(210,229,1)"/><text x="43.7512%" y="127.50"></text></g><g><title>layout_of (3,429,354 samples, 0.21%)</title><rect x="43.4777%" y="133" width="0.2073%" height="15" fill="rgb(222,148,37)"/><text x="43.7277%" y="143.50"></text></g><g><title>layout_of (6,658,711 samples, 0.40%)</title><rect x="43.2943%" y="149" width="0.4026%" height="15" fill="rgb(234,67,33)"/><text x="43.5443%" y="159.50"></text></g><g><title>symbol_name (3,057,828 samples, 0.18%)</title><rect x="43.7003%" y="149" width="0.1849%" height="15" fill="rgb(247,98,35)"/><text x="43.9503%" y="159.50"></text></g><g><title>codegen_module (230,535,587 samples, 13.94%)</title><rect x="29.9737%" y="165" width="13.9388%" height="15" fill="rgb(247,138,52)"/><text x="30.2237%" y="175.50">codegen_module</text></g><g><title>codegen_crate (233,725,086 samples, 14.13%)</title><rect x="29.7874%" y="181" width="14.1317%" height="15" fill="rgb(213,79,30)"/><text x="30.0374%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (704,579,693 samples, 42.60%)</title><rect x="43.9321%" y="165" width="42.6008%" height="15" fill="rgb(246,177,23)"/><text x="44.1821%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (673,407,703 samples, 40.72%)</title><rect x="45.8168%" y="149" width="40.7161%" height="15" fill="rgb(230,62,27)"/><text x="46.0668%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (738,583,725 samples, 44.66%)</title><rect x="43.9191%" y="181" width="44.6568%" height="15" fill="rgb(216,154,8)"/><text x="44.1691%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (33,788,879 samples, 2.04%)</title><rect x="86.5329%" y="165" width="2.0430%" height="15" fill="rgb(244,35,45)"/><text x="86.7829%" y="175.50">L..</text></g><g><title>macro_expand_crate (19,617,598 samples, 1.19%)</title><rect x="88.6100%" y="165" width="1.1861%" height="15" fill="rgb(251,115,12)"/><text x="88.8600%" y="175.50"></text></g><g><title>expand_crate (19,606,898 samples, 1.19%)</title><rect x="88.6106%" y="149" width="1.1855%" height="15" fill="rgb(240,54,50)"/><text x="88.8606%" y="159.50"></text></g><g><title>late_resolve_crate (3,780,059 samples, 0.23%)</title><rect x="89.8256%" y="149" width="0.2286%" height="15" fill="rgb(233,84,52)"/><text x="90.0756%" y="159.50"></text></g><g><title>configure_and_expand (24,691,639 samples, 1.49%)</title><rect x="88.5759%" y="181" width="1.4929%" height="15" fill="rgb(207,117,47)"/><text x="88.8259%" y="191.50"></text></g><g><title>resolve_crate (4,362,675 samples, 0.26%)</title><rect x="89.8050%" y="165" width="0.2638%" height="15" fill="rgb(249,43,39)"/><text x="90.0550%" y="175.50"></text></g><g><title>free_global_ctxt (8,263,374 samples, 0.50%)</title><rect x="90.1457%" y="181" width="0.4996%" height="15" fill="rgb(209,38,44)"/><text x="90.3957%" y="191.50"></text></g><g><title>item_attrs (2,286,919 samples, 0.14%)</title><rect x="91.3555%" y="85" width="0.1383%" height="15" fill="rgb(236,212,23)"/><text x="91.6055%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,179,168 samples, 0.13%)</title><rect x="91.3620%" y="69" width="0.1318%" height="15" fill="rgb(242,79,21)"/><text x="91.6120%" y="79.50"></text></g><g><title>codegen_fn_attrs (3,898,764 samples, 0.24%)</title><rect x="91.3126%" y="101" width="0.2357%" height="15" fill="rgb(211,96,35)"/><text x="91.5626%" y="111.50"></text></g><g><title>is_reachable_non_generic (2,249,996 samples, 0.14%)</title><rect x="91.5885%" y="101" width="0.1360%" height="15" fill="rgb(253,215,40)"/><text x="91.8385%" y="111.50"></text></g><g><title>reachable_non_generics (2,119,373 samples, 0.13%)</title><rect x="91.5964%" y="85" width="0.1281%" height="15" fill="rgb(211,81,21)"/><text x="91.8464%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (2,114,613 samples, 0.13%)</title><rect x="91.5966%" y="69" width="0.1279%" height="15" fill="rgb(208,190,38)"/><text x="91.8466%" y="79.50"></text></g><g><title>exported_symbols (1,991,271 samples, 0.12%)</title><rect x="91.6041%" y="53" width="0.1204%" height="15" fill="rgb(235,213,38)"/><text x="91.8541%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,989,821 samples, 0.12%)</title><rect x="91.6042%" y="37" width="0.1203%" height="15" fill="rgb(237,122,38)"/><text x="91.8542%" y="47.50"></text></g><g><title>mir_shims (2,369,227 samples, 0.14%)</title><rect x="91.7251%" y="101" width="0.1432%" height="15" fill="rgb(244,218,35)"/><text x="91.9751%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,445,267 samples, 0.39%)</title><rect x="92.3939%" y="85" width="0.3897%" height="15" fill="rgb(240,68,47)"/><text x="92.6439%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,170,355 samples, 0.49%)</title><rect x="92.7836%" y="85" width="0.4940%" height="15" fill="rgb(210,16,53)"/><text x="93.0336%" y="95.50"></text></g><g><title>optimized_mir (24,520,656 samples, 1.48%)</title><rect x="91.8683%" y="101" width="1.4826%" height="15" fill="rgb(235,124,12)"/><text x="92.1183%" y="111.50"></text></g><g><title>evaluate_obligation (1,878,492 samples, 0.11%)</title><rect x="93.8811%" y="69" width="0.1136%" height="15" fill="rgb(224,169,11)"/><text x="94.1311%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (8,380,367 samples, 0.51%)</title><rect x="93.5510%" y="85" width="0.5067%" height="15" fill="rgb(250,166,2)"/><text x="93.8010%" y="95.50"></text></g><g><title>specialization_graph_of (2,414,284 samples, 0.15%)</title><rect x="94.2110%" y="85" width="0.1460%" height="15" fill="rgb(242,216,29)"/><text x="94.4610%" y="95.50"></text></g><g><title>resolve_instance (17,546,821 samples, 1.06%)</title><rect x="93.3509%" y="101" width="1.0609%" height="15" fill="rgb(230,116,27)"/><text x="93.6009%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,728,855 samples, 0.10%)</title><rect x="94.4596%" y="85" width="0.1045%" height="15" fill="rgb(228,99,48)"/><text x="94.7096%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,680,315 samples, 0.10%)</title><rect x="94.4626%" y="69" width="0.1016%" height="15" fill="rgb(253,11,6)"/><text x="94.7126%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,064,612 samples, 0.12%)</title><rect x="94.4433%" y="101" width="0.1248%" height="15" fill="rgb(247,143,39)"/><text x="94.6933%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (2,505,304 samples, 0.15%)</title><rect x="94.5696%" y="101" width="0.1515%" height="15" fill="rgb(236,97,10)"/><text x="94.8196%" y="111.50"></text></g><g><title>upstream_monomorphizations (2,425,394 samples, 0.15%)</title><rect x="94.5745%" y="85" width="0.1466%" height="15" fill="rgb(233,208,19)"/><text x="94.8245%" y="95.50"></text></g><g><title>exported_symbols (1,818,129 samples, 0.11%)</title><rect x="94.6112%" y="69" width="0.1099%" height="15" fill="rgb(216,164,2)"/><text x="94.8612%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,811,208 samples, 0.11%)</title><rect x="94.6116%" y="53" width="0.1095%" height="15" fill="rgb(220,129,5)"/><text x="94.8616%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (65,785,133 samples, 3.98%)</title><rect x="90.8750%" y="117" width="3.9775%" height="15" fill="rgb(242,17,10)"/><text x="91.1250%" y="127.50">mono..</text></g><g><title>vtable_entries (2,174,683 samples, 0.13%)</title><rect x="94.7211%" y="101" width="0.1315%" height="15" fill="rgb(242,107,0)"/><text x="94.9711%" y="111.50"></text></g><g><title>monomorphization_collector (65,957,675 samples, 3.99%)</title><rect x="90.8748%" y="133" width="3.9880%" height="15" fill="rgb(251,28,31)"/><text x="91.1248%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (5,734,608 samples, 0.35%)</title><rect x="94.8636%" y="117" width="0.3467%" height="15" fill="rgb(233,223,10)"/><text x="95.1136%" y="127.50"></text></g><g><title>symbol_name (5,136,083 samples, 0.31%)</title><rect x="94.8998%" y="101" width="0.3105%" height="15" fill="rgb(215,21,27)"/><text x="95.1498%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (74,421,050 samples, 4.50%)</title><rect x="90.8709%" y="149" width="4.4997%" height="15" fill="rgb(232,23,21)"/><text x="91.1209%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (8,399,145 samples, 0.51%)</title><rect x="94.8628%" y="133" width="0.5078%" height="15" fill="rgb(244,5,23)"/><text x="95.1128%" y="143.50"></text></g><g><title>cgu_partitioning (2,650,847 samples, 0.16%)</title><rect x="95.2103%" y="117" width="0.1603%" height="15" fill="rgb(226,81,46)"/><text x="95.4603%" y="127.50"></text></g><g><title>exported_symbols (74,816,154 samples, 4.52%)</title><rect x="90.8580%" y="165" width="4.5236%" height="15" fill="rgb(247,70,30)"/><text x="91.1080%" y="175.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,823,611 samples, 0.23%)</title><rect x="95.6678%" y="149" width="0.2312%" height="15" fill="rgb(212,68,19)"/><text x="95.9178%" y="159.50"></text></g><g><title>optimized_mir (8,523,427 samples, 0.52%)</title><rect x="95.3909%" y="165" width="0.5153%" height="15" fill="rgb(240,187,13)"/><text x="95.6409%" y="175.50"></text></g><g><title>generate_crate_metadata (87,167,239 samples, 5.27%)</title><rect x="90.6453%" y="181" width="5.2704%" height="15" fill="rgb(223,113,26)"/><text x="90.8953%" y="191.50">genera..</text></g><g><title>hir_lowering (6,483,425 samples, 0.39%)</title><rect x="95.9157%" y="181" width="0.3920%" height="15" fill="rgb(206,192,2)"/><text x="96.1657%" y="191.50"></text></g><g><title>finish_ongoing_codegen (50,656,420 samples, 3.06%)</title><rect x="96.3092%" y="165" width="3.0628%" height="15" fill="rgb(241,108,4)"/><text x="96.5592%" y="175.50">fin..</text></g><g><title>link_crate (4,639,977 samples, 0.28%)</title><rect x="99.3720%" y="165" width="0.2805%" height="15" fill="rgb(247,173,49)"/><text x="99.6220%" y="175.50"></text></g><g><title>link_binary (4,542,006 samples, 0.27%)</title><rect x="99.3779%" y="149" width="0.2746%" height="15" fill="rgb(224,114,35)"/><text x="99.6279%" y="159.50"></text></g><g><title>link_rlib (3,609,527 samples, 0.22%)</title><rect x="99.4343%" y="133" width="0.2182%" height="15" fill="rgb(245,159,27)"/><text x="99.6843%" y="143.50"></text></g><g><title>link (55,329,228 samples, 3.35%)</title><rect x="96.3077%" y="181" width="3.3454%" height="15" fill="rgb(245,172,44)"/><text x="96.5577%" y="191.50">link</text></g><g><title>parse_crate (2,390,124 samples, 0.14%)</title><rect x="99.6531%" y="181" width="0.1445%" height="15" fill="rgb(236,23,11)"/><text x="99.9031%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,581,436 samples, 0.16%)</title><rect x="99.8095%" y="181" width="0.1561%" height="15" fill="rgb(205,117,38)"/><text x="100.0595%" y="191.50"></text></g><g><title>all (1,653,911,782 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,653,911,782 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>