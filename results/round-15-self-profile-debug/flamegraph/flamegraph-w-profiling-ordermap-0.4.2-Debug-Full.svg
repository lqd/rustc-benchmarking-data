<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,126,843 samples, 2.44%)</title><rect x="0.1516%" y="181" width="2.4407%" height="15" fill="rgb(227,0,7)"/><text x="0.4016%" y="191.50">LL..</text></g><g><title>param_env (703,977 samples, 0.14%)</title><rect x="13.9209%" y="101" width="0.1417%" height="15" fill="rgb(217,0,24)"/><text x="14.1709%" y="111.50"></text></g><g><title>codegen_fn_attrs (687,537 samples, 0.14%)</title><rect x="14.4286%" y="85" width="0.1384%" height="15" fill="rgb(221,193,54)"/><text x="14.6786%" y="95.50"></text></g><g><title>adt_drop_tys (518,986 samples, 0.10%)</title><rect x="16.8950%" y="53" width="0.1045%" height="15" fill="rgb(248,212,6)"/><text x="17.1450%" y="63.50"></text></g><g><title>needs_drop_raw (4,430,913 samples, 0.89%)</title><rect x="16.7767%" y="69" width="0.8918%" height="15" fill="rgb(208,68,35)"/><text x="17.0267%" y="79.50"></text></g><g><title>is_copy_raw (3,324,282 samples, 0.67%)</title><rect x="16.9995%" y="53" width="0.6691%" height="15" fill="rgb(232,128,0)"/><text x="17.2495%" y="63.50"></text></g><g><title>evaluate_obligation (2,580,213 samples, 0.52%)</title><rect x="17.1492%" y="37" width="0.5193%" height="15" fill="rgb(207,160,47)"/><text x="17.3992%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (3,069,036 samples, 0.62%)</title><rect x="17.9081%" y="53" width="0.6177%" height="15" fill="rgb(228,23,34)"/><text x="18.1581%" y="63.50"></text></g><g><title>resolve_instance (4,878,700 samples, 0.98%)</title><rect x="17.6685%" y="69" width="0.9819%" height="15" fill="rgb(218,30,26)"/><text x="17.9185%" y="79.50"></text></g><g><title>thir_body (3,674,085 samples, 0.74%)</title><rect x="18.6795%" y="69" width="0.7395%" height="15" fill="rgb(220,122,19)"/><text x="18.9295%" y="79.50"></text></g><g><title>mir_const (30,745,789 samples, 6.19%)</title><rect x="13.2581%" y="117" width="6.1881%" height="15" fill="rgb(250,228,42)"/><text x="13.5081%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (26,748,361 samples, 5.38%)</title><rect x="14.0626%" y="101" width="5.3835%" height="15" fill="rgb(240,193,28)"/><text x="14.3126%" y="111.50">unsafet..</text></g><g><title>mir_built (24,242,193 samples, 4.88%)</title><rect x="14.5670%" y="85" width="4.8791%" height="15" fill="rgb(216,20,37)"/><text x="14.8170%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (33,894,575 samples, 6.82%)</title><rect x="12.6654%" y="133" width="6.8218%" height="15" fill="rgb(206,188,39)"/><text x="12.9154%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (2,449,559 samples, 0.49%)</title><rect x="19.4871%" y="133" width="0.4930%" height="15" fill="rgb(217,207,13)"/><text x="19.7371%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,596,823 samples, 0.52%)</title><rect x="19.9802%" y="133" width="0.5226%" height="15" fill="rgb(231,73,38)"/><text x="20.2302%" y="143.50"></text></g><g><title>normalize_projection_ty (1,466,348 samples, 0.30%)</title><rect x="20.2077%" y="117" width="0.2951%" height="15" fill="rgb(225,20,46)"/><text x="20.4577%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,387,532 samples, 0.48%)</title><rect x="20.5028%" y="133" width="0.4805%" height="15" fill="rgb(210,31,41)"/><text x="20.7528%" y="143.50"></text></g><g><title>normalize_projection_ty (1,473,377 samples, 0.30%)</title><rect x="20.6868%" y="117" width="0.2965%" height="15" fill="rgb(221,200,47)"/><text x="20.9368%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,055,420 samples, 0.21%)</title><rect x="20.9833%" y="133" width="0.2124%" height="15" fill="rgb(226,26,5)"/><text x="21.2333%" y="143.50"></text></g><g><title>normalize_projection_ty (703,068 samples, 0.14%)</title><rect x="21.0543%" y="117" width="0.1415%" height="15" fill="rgb(249,33,26)"/><text x="21.3043%" y="127.50"></text></g><g><title>type_op_prove_predicate (15,761,366 samples, 3.17%)</title><rect x="21.1958%" y="133" width="3.1722%" height="15" fill="rgb(235,183,28)"/><text x="21.4458%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (107,407,481 samples, 21.62%)</title><rect x="2.7536%" y="165" width="21.6174%" height="15" fill="rgb(221,5,38)"/><text x="3.0036%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (106,838,486 samples, 21.50%)</title><rect x="2.8681%" y="149" width="21.5028%" height="15" fill="rgb(247,18,42)"/><text x="3.1181%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (577,486 samples, 0.12%)</title><rect x="24.4037%" y="165" width="0.1162%" height="15" fill="rgb(241,131,45)"/><text x="24.6537%" y="175.50"></text></g><g><title>codegen_fn_attrs (572,424 samples, 0.12%)</title><rect x="24.7561%" y="101" width="0.1152%" height="15" fill="rgb(249,31,29)"/><text x="25.0061%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,120,008 samples, 0.23%)</title><rect x="24.6514%" y="133" width="0.2254%" height="15" fill="rgb(225,111,53)"/><text x="24.9014%" y="143.50"></text></g><g><title>should_inherit_track_caller (947,256 samples, 0.19%)</title><rect x="24.6862%" y="117" width="0.1906%" height="15" fill="rgb(238,160,17)"/><text x="24.9362%" y="127.50"></text></g><g><title>check_mod_attrs (1,744,818 samples, 0.35%)</title><rect x="24.5257%" y="149" width="0.3512%" height="15" fill="rgb(214,148,48)"/><text x="24.7757%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,428,664 samples, 0.29%)</title><rect x="25.0112%" y="149" width="0.2875%" height="15" fill="rgb(232,36,49)"/><text x="25.2612%" y="159.50"></text></g><g><title>misc_checking_1 (3,971,720 samples, 0.80%)</title><rect x="24.5200%" y="165" width="0.7994%" height="15" fill="rgb(209,103,24)"/><text x="24.7700%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,755,768 samples, 0.35%)</title><rect x="25.3198%" y="149" width="0.3534%" height="15" fill="rgb(229,88,8)"/><text x="25.5698%" y="159.50"></text></g><g><title>check_mod_liveness (1,470,285 samples, 0.30%)</title><rect x="25.3772%" y="133" width="0.2959%" height="15" fill="rgb(213,181,19)"/><text x="25.6272%" y="143.50"></text></g><g><title>misc_checking_2 (3,518,315 samples, 0.71%)</title><rect x="25.3194%" y="165" width="0.7081%" height="15" fill="rgb(254,191,54)"/><text x="25.5694%" y="175.50"></text></g><g><title>match_checking (1,760,587 samples, 0.35%)</title><rect x="25.6731%" y="149" width="0.3543%" height="15" fill="rgb(241,83,37)"/><text x="25.9231%" y="159.50"></text></g><g><title>check_match (1,622,865 samples, 0.33%)</title><rect x="25.7009%" y="133" width="0.3266%" height="15" fill="rgb(233,36,39)"/><text x="25.9509%" y="143.50"></text></g><g><title>check_private_in_public (740,807 samples, 0.15%)</title><rect x="26.0298%" y="149" width="0.1491%" height="15" fill="rgb(226,3,54)"/><text x="26.2798%" y="159.50"></text></g><g><title>death_checking (1,161,852 samples, 0.23%)</title><rect x="26.1789%" y="149" width="0.2338%" height="15" fill="rgb(245,192,40)"/><text x="26.4289%" y="159.50"></text></g><g><title>crate_lints (2,926,589 samples, 0.59%)</title><rect x="26.4131%" y="133" width="0.5890%" height="15" fill="rgb(238,167,29)"/><text x="26.6631%" y="143.50"></text></g><g><title>type_of (1,160,702 samples, 0.23%)</title><rect x="26.7685%" y="117" width="0.2336%" height="15" fill="rgb(232,182,51)"/><text x="27.0185%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (928,359 samples, 0.19%)</title><rect x="26.8153%" y="101" width="0.1868%" height="15" fill="rgb(231,60,39)"/><text x="27.0653%" y="111.50"></text></g><g><title>lint_checking (4,267,273 samples, 0.86%)</title><rect x="26.4128%" y="149" width="0.8589%" height="15" fill="rgb(208,69,12)"/><text x="26.6628%" y="159.50"></text></g><g><title>module_lints (1,339,014 samples, 0.27%)</title><rect x="27.0021%" y="133" width="0.2695%" height="15" fill="rgb(235,93,37)"/><text x="27.2521%" y="143.50"></text></g><g><title>lint_mod (1,331,613 samples, 0.27%)</title><rect x="27.0036%" y="117" width="0.2680%" height="15" fill="rgb(213,116,39)"/><text x="27.2536%" y="127.50"></text></g><g><title>privacy_access_levels (1,027,171 samples, 0.21%)</title><rect x="27.2716%" y="149" width="0.2067%" height="15" fill="rgb(222,207,29)"/><text x="27.5216%" y="159.50"></text></g><g><title>privacy_checking_modules (3,335,744 samples, 0.67%)</title><rect x="27.4783%" y="149" width="0.6714%" height="15" fill="rgb(206,96,30)"/><text x="27.7283%" y="159.50"></text></g><g><title>check_mod_privacy (3,329,474 samples, 0.67%)</title><rect x="27.4796%" y="133" width="0.6701%" height="15" fill="rgb(218,138,4)"/><text x="27.7296%" y="143.50"></text></g><g><title>misc_checking_3 (10,578,408 samples, 2.13%)</title><rect x="26.0275%" y="165" width="2.1291%" height="15" fill="rgb(250,191,14)"/><text x="26.2775%" y="175.50">m..</text></g><g><title>impl_parent (2,919,577 samples, 0.59%)</title><rect x="29.7460%" y="101" width="0.5876%" height="15" fill="rgb(239,60,40)"/><text x="29.9960%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,746,744 samples, 0.35%)</title><rect x="29.9820%" y="85" width="0.3516%" height="15" fill="rgb(206,27,48)"/><text x="30.2320%" y="95.50"></text></g><g><title>impl_trait_ref (6,408,614 samples, 1.29%)</title><rect x="30.3337%" y="101" width="1.2898%" height="15" fill="rgb(225,35,8)"/><text x="30.5837%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,243,547 samples, 1.06%)</title><rect x="30.5682%" y="85" width="1.0553%" height="15" fill="rgb(250,213,24)"/><text x="30.8182%" y="95.50"></text></g><g><title>item_attrs (1,220,425 samples, 0.25%)</title><rect x="31.6236%" y="101" width="0.2456%" height="15" fill="rgb(247,123,22)"/><text x="31.8736%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (963,901 samples, 0.19%)</title><rect x="31.6752%" y="85" width="0.1940%" height="15" fill="rgb(231,138,38)"/><text x="31.9252%" y="95.50"></text></g><g><title>predicates_of (759,630 samples, 0.15%)</title><rect x="31.8692%" y="101" width="0.1529%" height="15" fill="rgb(231,145,46)"/><text x="32.1192%" y="111.50"></text></g><g><title>predicates_defined_on (520,857 samples, 0.10%)</title><rect x="31.9173%" y="85" width="0.1048%" height="15" fill="rgb(251,118,11)"/><text x="32.1673%" y="95.50"></text></g><g><title>trait_impls_of (1,019,553 samples, 0.21%)</title><rect x="32.0225%" y="101" width="0.2052%" height="15" fill="rgb(217,147,25)"/><text x="32.2725%" y="111.50"></text></g><g><title>coherent_trait (20,120,135 samples, 4.05%)</title><rect x="28.2105%" y="133" width="4.0495%" height="15" fill="rgb(247,81,37)"/><text x="28.4605%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (19,469,158 samples, 3.92%)</title><rect x="28.3415%" y="117" width="3.9185%" height="15" fill="rgb(209,12,38)"/><text x="28.5915%" y="127.50">spec..</text></g><g><title>coherence_checking (20,316,866 samples, 4.09%)</title><rect x="28.2033%" y="149" width="4.0891%" height="15" fill="rgb(227,1,9)"/><text x="28.4533%" y="159.50">cohe..</text></g><g><title>associated_item (566,357 samples, 0.11%)</title><rect x="49.1834%" y="85" width="0.1140%" height="15" fill="rgb(248,47,43)"/><text x="49.4334%" y="95.50"></text></g><g><title>associated_items (827,510 samples, 0.17%)</title><rect x="49.1400%" y="101" width="0.1665%" height="15" fill="rgb(221,10,30)"/><text x="49.3900%" y="111.50"></text></g><g><title>dropck_outlives (1,471,237 samples, 0.30%)</title><rect x="49.3396%" y="101" width="0.2961%" height="15" fill="rgb(210,229,1)"/><text x="49.5896%" y="111.50"></text></g><g><title>generics_of (1,234,851 samples, 0.25%)</title><rect x="51.5344%" y="85" width="0.2485%" height="15" fill="rgb(222,148,37)"/><text x="51.7844%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (997,089 samples, 0.20%)</title><rect x="51.5823%" y="69" width="0.2007%" height="15" fill="rgb(234,67,33)"/><text x="51.8323%" y="79.50"></text></g><g><title>predicates_of (573,387 samples, 0.12%)</title><rect x="51.9099%" y="85" width="0.1154%" height="15" fill="rgb(247,98,35)"/><text x="52.1599%" y="95.50"></text></g><g><title>specializes (790,686 samples, 0.16%)</title><rect x="52.0253%" y="85" width="0.1591%" height="15" fill="rgb(247,138,52)"/><text x="52.2753%" y="95.50"></text></g><g><title>trait_impls_of (521,985 samples, 0.11%)</title><rect x="52.1889%" y="85" width="0.1051%" height="15" fill="rgb(213,79,30)"/><text x="52.4389%" y="95.50"></text></g><g><title>evaluate_obligation (13,226,760 samples, 2.66%)</title><rect x="49.6357%" y="101" width="2.6621%" height="15" fill="rgb(246,177,23)"/><text x="49.8857%" y="111.50">ev..</text></g><g><title>impl_item_implementor_ids (498,705 samples, 0.10%)</title><rect x="52.3969%" y="101" width="0.1004%" height="15" fill="rgb(230,62,27)"/><text x="52.6469%" y="111.50"></text></g><g><title>item_attrs (613,745 samples, 0.12%)</title><rect x="52.5310%" y="101" width="0.1235%" height="15" fill="rgb(216,154,8)"/><text x="52.7810%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (603,755 samples, 0.12%)</title><rect x="52.5330%" y="85" width="0.1215%" height="15" fill="rgb(244,35,45)"/><text x="52.7830%" y="95.50"></text></g><g><title>evaluate_obligation (1,206,469 samples, 0.24%)</title><rect x="52.9307%" y="85" width="0.2428%" height="15" fill="rgb(251,115,12)"/><text x="53.1807%" y="95.50"></text></g><g><title>method_autoderef_steps (2,435,833 samples, 0.49%)</title><rect x="52.6854%" y="101" width="0.4902%" height="15" fill="rgb(240,54,50)"/><text x="52.9354%" y="111.50"></text></g><g><title>predicates_of (501,933 samples, 0.10%)</title><rect x="53.2400%" y="101" width="0.1010%" height="15" fill="rgb(233,84,52)"/><text x="53.4900%" y="111.50"></text></g><g><title>evaluate_obligation (1,725,493 samples, 0.35%)</title><rect x="56.4072%" y="85" width="0.3473%" height="15" fill="rgb(207,117,47)"/><text x="56.6572%" y="95.50"></text></g><g><title>typeck (18,141,502 samples, 3.65%)</title><rect x="53.3785%" y="101" width="3.6512%" height="15" fill="rgb(249,43,39)"/><text x="53.6285%" y="111.50">type..</text></g><g><title>item_bodies_checking (122,944,038 samples, 24.74%)</title><rect x="32.3169%" y="149" width="24.7443%" height="15" fill="rgb(209,38,44)"/><text x="32.5669%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (122,939,988 samples, 24.74%)</title><rect x="32.3178%" y="133" width="24.7435%" height="15" fill="rgb(236,212,23)"/><text x="32.5678%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (122,532,683 samples, 24.66%)</title><rect x="32.3997%" y="117" width="24.6615%" height="15" fill="rgb(242,79,21)"/><text x="32.6497%" y="127.50">typeck</text></g><g><title>item_types_checking (8,423,775 samples, 1.70%)</title><rect x="57.0613%" y="149" width="1.6954%" height="15" fill="rgb(211,96,35)"/><text x="57.3113%" y="159.50"></text></g><g><title>check_mod_item_types (8,416,725 samples, 1.69%)</title><rect x="57.0627%" y="133" width="1.6940%" height="15" fill="rgb(253,215,40)"/><text x="57.3127%" y="143.50"></text></g><g><title>fn_sig (1,126,861 samples, 0.23%)</title><rect x="58.9478%" y="117" width="0.2268%" height="15" fill="rgb(211,81,21)"/><text x="59.1978%" y="127.50"></text></g><g><title>is_late_bound_map (629,345 samples, 0.13%)</title><rect x="59.2666%" y="101" width="0.1267%" height="15" fill="rgb(208,190,38)"/><text x="59.5166%" y="111.50"></text></g><g><title>resolve_lifetimes (585,514 samples, 0.12%)</title><rect x="59.2754%" y="85" width="0.1178%" height="15" fill="rgb(235,213,38)"/><text x="59.5254%" y="95.50"></text></g><g><title>generics_of (1,502,928 samples, 0.30%)</title><rect x="59.1746%" y="117" width="0.3025%" height="15" fill="rgb(237,122,38)"/><text x="59.4246%" y="127.50"></text></g><g><title>late_bound_vars_map (609,256 samples, 0.12%)</title><rect x="59.8741%" y="69" width="0.1226%" height="15" fill="rgb(244,218,35)"/><text x="60.1241%" y="79.50"></text></g><g><title>resolve_lifetimes (569,056 samples, 0.11%)</title><rect x="59.8822%" y="53" width="0.1145%" height="15" fill="rgb(240,68,47)"/><text x="60.1322%" y="63.50"></text></g><g><title>explicit_predicates_of (1,698,008 samples, 0.34%)</title><rect x="59.6683%" y="85" width="0.3417%" height="15" fill="rgb(210,16,53)"/><text x="59.9183%" y="95.50"></text></g><g><title>predicates_of (3,244,104 samples, 0.65%)</title><rect x="59.5163%" y="117" width="0.6529%" height="15" fill="rgb(235,124,12)"/><text x="59.7663%" y="127.50"></text></g><g><title>predicates_defined_on (3,046,571 samples, 0.61%)</title><rect x="59.5561%" y="101" width="0.6132%" height="15" fill="rgb(224,169,11)"/><text x="59.8061%" y="111.50"></text></g><g><title>inferred_outlives_of (791,258 samples, 0.16%)</title><rect x="60.0100%" y="85" width="0.1593%" height="15" fill="rgb(250,166,2)"/><text x="60.2600%" y="95.50"></text></g><g><title>inferred_outlives_crate (728,828 samples, 0.15%)</title><rect x="60.0226%" y="69" width="0.1467%" height="15" fill="rgb(242,216,29)"/><text x="60.2726%" y="79.50"></text></g><g><title>type_collecting (7,470,486 samples, 1.50%)</title><rect x="58.7577%" y="149" width="1.5035%" height="15" fill="rgb(230,116,27)"/><text x="59.0077%" y="159.50"></text></g><g><title>collect_mod_item_types (7,459,556 samples, 1.50%)</title><rect x="58.7599%" y="133" width="1.5013%" height="15" fill="rgb(228,99,48)"/><text x="59.0099%" y="143.50"></text></g><g><title>evaluate_obligation (1,860,383 samples, 0.37%)</title><rect x="63.3681%" y="117" width="0.3744%" height="15" fill="rgb(253,11,6)"/><text x="63.6181%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,727,086 samples, 0.35%)</title><rect x="63.7580%" y="117" width="0.3476%" height="15" fill="rgb(247,143,39)"/><text x="64.0080%" y="127.50"></text></g><g><title>param_env (2,833,044 samples, 0.57%)</title><rect x="64.1058%" y="117" width="0.5702%" height="15" fill="rgb(236,97,10)"/><text x="64.3558%" y="127.50"></text></g><g><title>region_scope_tree (1,500,092 samples, 0.30%)</title><rect x="64.6912%" y="117" width="0.3019%" height="15" fill="rgb(233,208,19)"/><text x="64.9412%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,726,609 samples, 4.57%)</title><rect x="60.4431%" y="133" width="4.5741%" height="15" fill="rgb(216,164,2)"/><text x="60.6931%" y="143.50">check..</text></g><g><title>param_env (1,013,161 samples, 0.20%)</title><rect x="66.5592%" y="117" width="0.2039%" height="15" fill="rgb(220,129,5)"/><text x="66.8092%" y="127.50"></text></g><g><title>check_item_well_formed (9,455,789 samples, 1.90%)</title><rect x="65.0172%" y="133" width="1.9031%" height="15" fill="rgb(242,17,10)"/><text x="65.2672%" y="143.50">c..</text></g><g><title>analysis (320,298,292 samples, 64.46%)</title><rect x="2.5923%" y="181" width="64.4648%" height="15" fill="rgb(242,107,0)"/><text x="2.8423%" y="191.50">analysis</text></g><g><title>type_check_crate (193,280,373 samples, 38.90%)</title><rect x="28.1566%" y="165" width="38.9006%" height="15" fill="rgb(251,28,31)"/><text x="28.4066%" y="175.50">type_check_crate</text></g><g><title>wf_checking (33,740,803 samples, 6.79%)</title><rect x="60.2663%" y="149" width="6.7908%" height="15" fill="rgb(233,223,10)"/><text x="60.5163%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (679,797 samples, 0.14%)</title><rect x="66.9203%" y="133" width="0.1368%" height="15" fill="rgb(215,21,27)"/><text x="67.1703%" y="143.50"></text></g><g><title>fn_abi_of_instance (577,719 samples, 0.12%)</title><rect x="67.9191%" y="149" width="0.1163%" height="15" fill="rgb(232,23,21)"/><text x="68.1691%" y="159.50"></text></g><g><title>codegen_module (4,288,503 samples, 0.86%)</title><rect x="67.2391%" y="165" width="0.8631%" height="15" fill="rgb(244,5,23)"/><text x="67.4891%" y="175.50"></text></g><g><title>codegen_crate (5,252,043 samples, 1.06%)</title><rect x="67.0591%" y="181" width="1.0571%" height="15" fill="rgb(226,81,46)"/><text x="67.3091%" y="191.50"></text></g><g><title>LLVM_module_codegen (32,365,740 samples, 6.51%)</title><rect x="68.1318%" y="165" width="6.5141%" height="15" fill="rgb(247,70,30)"/><text x="68.3818%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (30,435,519 samples, 6.13%)</title><rect x="68.5203%" y="149" width="6.1256%" height="15" fill="rgb(212,68,19)"/><text x="68.7703%" y="159.50">LLVM_mod..</text></g><g><title>codegen_module_optimize (33,745,862 samples, 6.79%)</title><rect x="68.1162%" y="181" width="6.7919%" height="15" fill="rgb(240,187,13)"/><text x="68.3662%" y="191.50">codegen_m..</text></g><g><title>LLVM_module_optimize (1,302,222 samples, 0.26%)</title><rect x="74.6459%" y="165" width="0.2621%" height="15" fill="rgb(223,113,26)"/><text x="74.8959%" y="175.50"></text></g><g><title>metadata_register_crate (2,599,506 samples, 0.52%)</title><rect x="84.6684%" y="133" width="0.5232%" height="15" fill="rgb(206,192,2)"/><text x="84.9184%" y="143.50"></text></g><g><title>metadata_register_crate (960,999 samples, 0.19%)</title><rect x="84.9982%" y="117" width="0.1934%" height="15" fill="rgb(241,108,4)"/><text x="85.2482%" y="127.50"></text></g><g><title>macro_expand_crate (51,721,826 samples, 10.41%)</title><rect x="75.0851%" y="165" width="10.4098%" height="15" fill="rgb(247,173,49)"/><text x="75.3351%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (51,701,725 samples, 10.41%)</title><rect x="75.0892%" y="149" width="10.4057%" height="15" fill="rgb(224,114,35)"/><text x="75.3392%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,507,134 samples, 0.30%)</title><rect x="85.1916%" y="133" width="0.3033%" height="15" fill="rgb(245,159,27)"/><text x="85.4416%" y="143.50"></text></g><g><title>late_resolve_crate (4,444,845 samples, 0.89%)</title><rect x="85.5631%" y="149" width="0.8946%" height="15" fill="rgb(245,172,44)"/><text x="85.8131%" y="159.50"></text></g><g><title>configure_and_expand (57,711,116 samples, 11.62%)</title><rect x="74.9080%" y="181" width="11.6152%" height="15" fill="rgb(236,23,11)"/><text x="75.1580%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (4,969,210 samples, 1.00%)</title><rect x="85.5231%" y="165" width="1.0001%" height="15" fill="rgb(205,117,38)"/><text x="85.7731%" y="175.50"></text></g><g><title>drop_ast (848,139 samples, 0.17%)</title><rect x="86.5232%" y="181" width="0.1707%" height="15" fill="rgb(237,72,25)"/><text x="86.7732%" y="191.50"></text></g><g><title>early_lint_checks (1,036,360 samples, 0.21%)</title><rect x="86.6980%" y="181" width="0.2086%" height="15" fill="rgb(244,70,9)"/><text x="86.9480%" y="191.50"></text></g><g><title>free_global_ctxt (7,457,545 samples, 1.50%)</title><rect x="86.9066%" y="181" width="1.5009%" height="15" fill="rgb(217,125,39)"/><text x="87.1566%" y="191.50"></text></g><g><title>optimized_mir (842,009 samples, 0.17%)</title><rect x="89.7645%" y="101" width="0.1695%" height="15" fill="rgb(235,36,10)"/><text x="90.0145%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,648,607 samples, 0.33%)</title><rect x="89.7105%" y="117" width="0.3318%" height="15" fill="rgb(251,123,47)"/><text x="89.9605%" y="127.50"></text></g><g><title>monomorphization_collector (1,708,068 samples, 0.34%)</title><rect x="89.7096%" y="133" width="0.3438%" height="15" fill="rgb(221,13,13)"/><text x="89.9596%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,952,890 samples, 0.39%)</title><rect x="89.7008%" y="149" width="0.3930%" height="15" fill="rgb(238,131,9)"/><text x="89.9508%" y="159.50"></text></g><g><title>exported_symbols (2,485,195 samples, 0.50%)</title><rect x="89.6962%" y="165" width="0.5002%" height="15" fill="rgb(211,50,8)"/><text x="89.9462%" y="175.50"></text></g><g><title>reachable_non_generics (509,255 samples, 0.10%)</title><rect x="90.0939%" y="149" width="0.1025%" height="15" fill="rgb(245,182,24)"/><text x="90.3439%" y="159.50"></text></g><g><title>is_sized_raw (589,695 samples, 0.12%)</title><rect x="93.0739%" y="133" width="0.1187%" height="15" fill="rgb(242,14,37)"/><text x="93.3239%" y="143.50"></text></g><g><title>layout_of (649,598 samples, 0.13%)</title><rect x="93.3143%" y="117" width="0.1307%" height="15" fill="rgb(246,228,12)"/><text x="93.5643%" y="127.50"></text></g><g><title>layout_of (1,262,910 samples, 0.25%)</title><rect x="93.1926%" y="133" width="0.2542%" height="15" fill="rgb(213,55,15)"/><text x="93.4426%" y="143.50"></text></g><g><title>layout_of (3,702,211 samples, 0.75%)</title><rect x="92.7291%" y="149" width="0.7451%" height="15" fill="rgb(209,9,3)"/><text x="92.9791%" y="159.50"></text></g><g><title>is_copy_raw (1,339,924 samples, 0.27%)</title><rect x="96.1333%" y="117" width="0.2697%" height="15" fill="rgb(230,59,30)"/><text x="96.3833%" y="127.50"></text></g><g><title>evaluate_obligation (984,089 samples, 0.20%)</title><rect x="96.2049%" y="101" width="0.1981%" height="15" fill="rgb(209,121,21)"/><text x="96.4549%" y="111.50"></text></g><g><title>needs_drop_raw (1,576,724 samples, 0.32%)</title><rect x="96.0871%" y="133" width="0.3173%" height="15" fill="rgb(220,109,13)"/><text x="96.3371%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,971,961 samples, 3.01%)</title><rect x="93.4743%" y="149" width="3.0133%" height="15" fill="rgb(232,18,1)"/><text x="93.7243%" y="159.50">mir..</text></g><g><title>specialization_graph_of (580,475 samples, 0.12%)</title><rect x="96.5156%" y="133" width="0.1168%" height="15" fill="rgb(215,41,42)"/><text x="96.7656%" y="143.50"></text></g><g><title>optimized_mir (31,568,069 samples, 6.35%)</title><rect x="90.2796%" y="165" width="6.3535%" height="15" fill="rgb(224,123,36)"/><text x="90.5296%" y="175.50">optimize..</text></g><g><title>resolve_instance (688,658 samples, 0.14%)</title><rect x="96.4946%" y="149" width="0.1386%" height="15" fill="rgb(240,125,3)"/><text x="96.7446%" y="159.50"></text></g><g><title>generate_crate_metadata (41,246,159 samples, 8.30%)</title><rect x="88.4075%" y="181" width="8.3014%" height="15" fill="rgb(205,98,50)"/><text x="88.6575%" y="191.50">generate_cra..</text></g><g><title>hir_lowering (9,671,038 samples, 1.95%)</title><rect x="96.7089%" y="181" width="1.9464%" height="15" fill="rgb(205,185,37)"/><text x="96.9589%" y="191.50">h..</text></g><g><title>link_crate (1,897,580 samples, 0.38%)</title><rect x="98.6605%" y="165" width="0.3819%" height="15" fill="rgb(238,207,15)"/><text x="98.9105%" y="175.50"></text></g><g><title>link_binary (1,879,439 samples, 0.38%)</title><rect x="98.6641%" y="149" width="0.3783%" height="15" fill="rgb(213,199,42)"/><text x="98.9141%" y="159.50"></text></g><g><title>link_rlib (1,403,275 samples, 0.28%)</title><rect x="98.7600%" y="133" width="0.2824%" height="15" fill="rgb(235,201,11)"/><text x="99.0100%" y="143.50"></text></g><g><title>link (1,931,920 samples, 0.39%)</title><rect x="98.6553%" y="181" width="0.3888%" height="15" fill="rgb(207,46,11)"/><text x="98.9053%" y="191.50"></text></g><g><title>parse_crate (988,810 samples, 0.20%)</title><rect x="99.0442%" y="181" width="0.1990%" height="15" fill="rgb(241,35,35)"/><text x="99.2942%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,795,428 samples, 0.56%)</title><rect x="99.2940%" y="181" width="0.5626%" height="15" fill="rgb(243,32,47)"/><text x="99.5440%" y="191.50"></text></g><g><title>all (496,857,443 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (496,857,443 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (627,816 samples, 0.13%)</title><rect x="99.8736%" y="181" width="0.1264%" height="15" fill="rgb(243,110,44)"/><text x="100.1236%" y="191.50"></text></g></svg></svg>