<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (181,061,613 samples, 16.37%)</title><rect x="0.0666%" y="245" width="16.3688%" height="15" fill="rgb(227,0,7)"/><text x="0.3166%" y="255.50">LLVM_passes</text></g><g><title>specialization_graph_of (1,435,435 samples, 0.13%)</title><rect x="18.0724%" y="117" width="0.1298%" height="15" fill="rgb(217,0,24)"/><text x="18.3224%" y="127.50"></text></g><g><title>resolve_instance (2,077,472 samples, 0.19%)</title><rect x="18.0239%" y="133" width="0.1878%" height="15" fill="rgb(221,193,54)"/><text x="18.2739%" y="143.50"></text></g><g><title>mir_const (8,004,136 samples, 0.72%)</title><rect x="17.5680%" y="181" width="0.7236%" height="15" fill="rgb(248,212,6)"/><text x="17.8180%" y="191.50"></text></g><g><title>unsafety_check_result (7,107,151 samples, 0.64%)</title><rect x="17.6490%" y="165" width="0.6425%" height="15" fill="rgb(208,68,35)"/><text x="17.8990%" y="175.50"></text></g><g><title>mir_built (6,316,001 samples, 0.57%)</title><rect x="17.7206%" y="149" width="0.5710%" height="15" fill="rgb(232,128,0)"/><text x="17.9706%" y="159.50"></text></g><g><title>mir_promoted (9,303,557 samples, 0.84%)</title><rect x="17.5122%" y="197" width="0.8411%" height="15" fill="rgb(207,160,47)"/><text x="17.7622%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,679,355 samples, 0.24%)</title><rect x="18.4519%" y="197" width="0.2422%" height="15" fill="rgb(228,23,34)"/><text x="18.7019%" y="207.50"></text></g><g><title>MIR_borrow_checking (24,414,695 samples, 2.21%)</title><rect x="16.4874%" y="229" width="2.2072%" height="15" fill="rgb(218,30,26)"/><text x="16.7374%" y="239.50">M..</text></g><g><title>mir_borrowck (24,321,965 samples, 2.20%)</title><rect x="16.4958%" y="213" width="2.1988%" height="15" fill="rgb(220,122,19)"/><text x="16.7458%" y="223.50">m..</text></g><g><title>misc_checking_1 (2,107,221 samples, 0.19%)</title><rect x="18.7417%" y="229" width="0.1905%" height="15" fill="rgb(250,228,42)"/><text x="18.9917%" y="239.50"></text></g><g><title>misc_checking_2 (1,179,611 samples, 0.11%)</title><rect x="18.9322%" y="229" width="0.1066%" height="15" fill="rgb(240,193,28)"/><text x="19.1822%" y="239.50"></text></g><g><title>crate_lints (2,260,132 samples, 0.20%)</title><rect x="19.0869%" y="197" width="0.2043%" height="15" fill="rgb(216,20,37)"/><text x="19.3369%" y="207.50"></text></g><g><title>type_of (1,178,034 samples, 0.11%)</title><rect x="19.1847%" y="181" width="0.1065%" height="15" fill="rgb(206,188,39)"/><text x="19.4347%" y="191.50"></text></g><g><title>lint_checking (2,816,688 samples, 0.25%)</title><rect x="19.0868%" y="213" width="0.2546%" height="15" fill="rgb(217,207,13)"/><text x="19.3368%" y="223.50"></text></g><g><title>misc_checking_3 (4,745,968 samples, 0.43%)</title><rect x="19.0388%" y="229" width="0.4291%" height="15" fill="rgb(231,73,38)"/><text x="19.2888%" y="239.50"></text></g><g><title>impl_parent (1,732,695 samples, 0.16%)</title><rect x="19.7574%" y="165" width="0.1566%" height="15" fill="rgb(225,20,46)"/><text x="20.0074%" y="175.50"></text></g><g><title>impl_trait_ref (5,912,486 samples, 0.53%)</title><rect x="19.9140%" y="165" width="0.5345%" height="15" fill="rgb(210,31,41)"/><text x="20.1640%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,170,860 samples, 0.47%)</title><rect x="19.9811%" y="149" width="0.4675%" height="15" fill="rgb(221,200,47)"/><text x="20.2311%" y="159.50"></text></g><g><title>coherent_trait (11,599,236 samples, 1.05%)</title><rect x="19.4768%" y="197" width="1.0486%" height="15" fill="rgb(226,26,5)"/><text x="19.7268%" y="207.50"></text></g><g><title>specialization_graph_of (11,577,306 samples, 1.05%)</title><rect x="19.4788%" y="181" width="1.0466%" height="15" fill="rgb(249,33,26)"/><text x="19.7288%" y="191.50"></text></g><g><title>coherence_checking (11,708,098 samples, 1.06%)</title><rect x="19.4743%" y="213" width="1.0585%" height="15" fill="rgb(235,183,28)"/><text x="19.7243%" y="223.50"></text></g><g><title>evaluate_obligation (1,749,678 samples, 0.16%)</title><rect x="21.8266%" y="165" width="0.1582%" height="15" fill="rgb(221,5,38)"/><text x="22.0766%" y="175.50"></text></g><g><title>typeck (7,978,870 samples, 0.72%)</title><rect x="22.1211%" y="165" width="0.7213%" height="15" fill="rgb(247,18,42)"/><text x="22.3711%" y="175.50"></text></g><g><title>item_bodies_checking (25,529,106 samples, 2.31%)</title><rect x="20.5375%" y="213" width="2.3079%" height="15" fill="rgb(241,131,45)"/><text x="20.7875%" y="223.50">i..</text></g><g><title>typeck_item_bodies (25,525,216 samples, 2.31%)</title><rect x="20.5378%" y="197" width="2.3076%" height="15" fill="rgb(249,31,29)"/><text x="20.7878%" y="207.50">t..</text></g><g><title>typeck (25,465,815 samples, 2.30%)</title><rect x="20.5432%" y="181" width="2.3022%" height="15" fill="rgb(225,111,53)"/><text x="20.7932%" y="191.50">t..</text></g><g><title>mir_borrowck (5,540,055 samples, 0.50%)</title><rect x="23.6955%" y="133" width="0.5008%" height="15" fill="rgb(238,160,17)"/><text x="23.9455%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,151,621 samples, 0.10%)</title><rect x="24.0922%" y="117" width="0.1041%" height="15" fill="rgb(214,148,48)"/><text x="24.3422%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,394,184 samples, 0.13%)</title><rect x="24.3445%" y="133" width="0.1260%" height="15" fill="rgb(232,36,49)"/><text x="24.5945%" y="143.50"></text></g><g><title>mir_borrowck (13,625,057 samples, 1.23%)</title><rect x="23.2391%" y="149" width="1.2318%" height="15" fill="rgb(209,103,24)"/><text x="23.4891%" y="159.50"></text></g><g><title>specialization_graph_of (3,080,470 samples, 0.28%)</title><rect x="24.5785%" y="69" width="0.2785%" height="15" fill="rgb(229,88,8)"/><text x="24.8285%" y="79.50"></text></g><g><title>impl_trait_ref (1,427,443 samples, 0.13%)</title><rect x="24.7279%" y="53" width="0.1290%" height="15" fill="rgb(213,181,19)"/><text x="24.9779%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,210,193 samples, 0.11%)</title><rect x="24.7475%" y="37" width="0.1094%" height="15" fill="rgb(254,191,54)"/><text x="24.9975%" y="47.50"></text></g><g><title>resolve_instance (3,164,463 samples, 0.29%)</title><rect x="24.5717%" y="85" width="0.2861%" height="15" fill="rgb(241,83,37)"/><text x="24.8217%" y="95.50"></text></g><g><title>evaluate_obligation (3,002,806 samples, 0.27%)</title><rect x="26.3991%" y="69" width="0.2715%" height="15" fill="rgb(233,36,39)"/><text x="26.6491%" y="79.50"></text></g><g><title>mir_built (27,397,296 samples, 2.48%)</title><rect x="24.5086%" y="101" width="2.4768%" height="15" fill="rgb(226,3,54)"/><text x="24.7586%" y="111.50">mi..</text></g><g><title>typeck (23,399,165 samples, 2.12%)</title><rect x="24.8700%" y="85" width="2.1154%" height="15" fill="rgb(245,192,40)"/><text x="25.1200%" y="95.50">t..</text></g><g><title>mir_built (1,539,965 samples, 0.14%)</title><rect x="27.0066%" y="85" width="0.1392%" height="15" fill="rgb(238,167,29)"/><text x="27.2566%" y="95.50"></text></g><g><title>mir_const (30,759,070 samples, 2.78%)</title><rect x="24.4827%" y="133" width="2.7808%" height="15" fill="rgb(232,182,51)"/><text x="24.7327%" y="143.50">mi..</text></g><g><title>unsafety_check_result (30,549,347 samples, 2.76%)</title><rect x="24.5017%" y="117" width="2.7618%" height="15" fill="rgb(231,60,39)"/><text x="24.7517%" y="127.50">un..</text></g><g><title>unsafety_check_result (3,076,021 samples, 0.28%)</title><rect x="26.9854%" y="101" width="0.2781%" height="15" fill="rgb(208,69,12)"/><text x="27.2354%" y="111.50"></text></g><g><title>unsafety_check_result (1,299,274 samples, 0.12%)</title><rect x="27.1460%" y="85" width="0.1175%" height="15" fill="rgb(235,93,37)"/><text x="27.3960%" y="95.50"></text></g><g><title>mir_promoted (30,902,960 samples, 2.79%)</title><rect x="24.4709%" y="149" width="2.7938%" height="15" fill="rgb(213,116,39)"/><text x="24.7209%" y="159.50">mi..</text></g><g><title>item_types_checking (49,638,027 samples, 4.49%)</title><rect x="22.8454%" y="213" width="4.4875%" height="15" fill="rgb(222,207,29)"/><text x="23.0954%" y="223.50">item_..</text></g><g><title>check_mod_item_types (49,634,197 samples, 4.49%)</title><rect x="22.8458%" y="197" width="4.4872%" height="15" fill="rgb(206,96,30)"/><text x="23.0958%" y="207.50">check..</text></g><g><title>type_of (48,061,300 samples, 4.34%)</title><rect x="22.9879%" y="181" width="4.3450%" height="15" fill="rgb(218,138,4)"/><text x="23.2379%" y="191.50">type_..</text></g><g><title>mir_borrowck (48,024,410 samples, 4.34%)</title><rect x="22.9913%" y="165" width="4.3416%" height="15" fill="rgb(250,191,14)"/><text x="23.2413%" y="175.50">mir_b..</text></g><g><title>generics_of (1,437,094 samples, 0.13%)</title><rect x="27.4249%" y="181" width="0.1299%" height="15" fill="rgb(239,60,40)"/><text x="27.6749%" y="191.50"></text></g><g><title>predicates_of (1,364,034 samples, 0.12%)</title><rect x="27.5606%" y="181" width="0.1233%" height="15" fill="rgb(206,27,48)"/><text x="27.8106%" y="191.50"></text></g><g><title>predicates_defined_on (1,278,424 samples, 0.12%)</title><rect x="27.5684%" y="165" width="0.1156%" height="15" fill="rgb(225,35,8)"/><text x="27.8184%" y="175.50"></text></g><g><title>type_collecting (4,073,921 samples, 0.37%)</title><rect x="27.3331%" y="213" width="0.3683%" height="15" fill="rgb(250,213,24)"/><text x="27.5831%" y="223.50"></text></g><g><title>collect_mod_item_types (4,064,011 samples, 0.37%)</title><rect x="27.3340%" y="197" width="0.3674%" height="15" fill="rgb(247,123,22)"/><text x="27.5840%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,814,638 samples, 0.25%)</title><rect x="27.7161%" y="197" width="0.2545%" height="15" fill="rgb(231,138,38)"/><text x="27.9661%" y="207.50"></text></g><g><title>analysis (129,787,690 samples, 11.73%)</title><rect x="16.4354%" y="245" width="11.7334%" height="15" fill="rgb(231,145,46)"/><text x="16.6854%" y="255.50">analysis</text></g><g><title>type_check_crate (96,244,274 samples, 8.70%)</title><rect x="19.4679%" y="229" width="8.7009%" height="15" fill="rgb(251,118,11)"/><text x="19.7179%" y="239.50">type_check_c..</text></g><g><title>wf_checking (5,163,741 samples, 0.47%)</title><rect x="27.7020%" y="213" width="0.4668%" height="15" fill="rgb(217,147,25)"/><text x="27.9520%" y="223.50"></text></g><g><title>check_item_well_formed (2,193,170 samples, 0.20%)</title><rect x="27.9705%" y="197" width="0.1983%" height="15" fill="rgb(247,81,37)"/><text x="28.2205%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (4,097,119 samples, 0.37%)</title><rect x="40.6224%" y="213" width="0.3704%" height="15" fill="rgb(209,12,38)"/><text x="40.8724%" y="223.50"></text></g><g><title>const_caller_location (1,974,601 samples, 0.18%)</title><rect x="40.9928%" y="213" width="0.1785%" height="15" fill="rgb(227,1,9)"/><text x="41.2428%" y="223.50"></text></g><g><title>codegen_fn_attrs (1,588,981 samples, 0.14%)</title><rect x="41.7938%" y="197" width="0.1437%" height="15" fill="rgb(248,47,43)"/><text x="42.0438%" y="207.50"></text></g><g><title>layout_of (2,883,297 samples, 0.26%)</title><rect x="41.9574%" y="197" width="0.2607%" height="15" fill="rgb(221,10,30)"/><text x="42.2074%" y="207.50"></text></g><g><title>predicates_of (2,632,291 samples, 0.24%)</title><rect x="42.6232%" y="181" width="0.2380%" height="15" fill="rgb(210,229,1)"/><text x="42.8732%" y="191.50"></text></g><g><title>predicates_defined_on (1,961,906 samples, 0.18%)</title><rect x="42.6838%" y="165" width="0.1774%" height="15" fill="rgb(222,148,37)"/><text x="42.9338%" y="175.50"></text></g><g><title>param_env (7,132,701 samples, 0.64%)</title><rect x="42.2180%" y="197" width="0.6448%" height="15" fill="rgb(234,67,33)"/><text x="42.4680%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,149,864 samples, 0.10%)</title><rect x="42.8629%" y="197" width="0.1040%" height="15" fill="rgb(247,98,35)"/><text x="43.1129%" y="207.50"></text></g><g><title>fn_abi_of_instance (19,897,929 samples, 1.80%)</title><rect x="41.1733%" y="213" width="1.7989%" height="15" fill="rgb(247,138,52)"/><text x="41.4233%" y="223.50">f..</text></g><g><title>layout_of (3,942,146 samples, 0.36%)</title><rect x="43.0495%" y="213" width="0.3564%" height="15" fill="rgb(213,79,30)"/><text x="43.2995%" y="223.50"></text></g><g><title>symbol_name (1,591,026 samples, 0.14%)</title><rect x="43.4079%" y="213" width="0.1438%" height="15" fill="rgb(246,177,23)"/><text x="43.6579%" y="223.50"></text></g><g><title>codegen_module (166,597,530 samples, 15.06%)</title><rect x="28.5138%" y="229" width="15.0612%" height="15" fill="rgb(230,62,27)"/><text x="28.7638%" y="239.50">codegen_module</text></g><g><title>codegen_crate (170,506,827 samples, 15.41%)</title><rect x="28.1697%" y="245" width="15.4146%" height="15" fill="rgb(216,154,8)"/><text x="28.4197%" y="255.50">codegen_crate</text></g><g><title>LLVM_module_codegen (477,710,461 samples, 43.19%)</title><rect x="43.6027%" y="229" width="43.1872%" height="15" fill="rgb(244,35,45)"/><text x="43.8527%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (458,372,478 samples, 41.44%)</title><rect x="45.3510%" y="213" width="41.4390%" height="15" fill="rgb(251,115,12)"/><text x="45.6010%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (508,540,832 samples, 45.97%)</title><rect x="43.5843%" y="245" width="45.9744%" height="15" fill="rgb(240,54,50)"/><text x="43.8343%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (30,626,390 samples, 2.77%)</title><rect x="86.7899%" y="229" width="2.7688%" height="15" fill="rgb(233,84,52)"/><text x="87.0399%" y="239.50">LL..</text></g><g><title>macro_expand_crate (15,607,226 samples, 1.41%)</title><rect x="89.6124%" y="229" width="1.4110%" height="15" fill="rgb(207,117,47)"/><text x="89.8624%" y="239.50"></text></g><g><title>expand_crate (15,581,856 samples, 1.41%)</title><rect x="89.6147%" y="213" width="1.4087%" height="15" fill="rgb(249,43,39)"/><text x="89.8647%" y="223.50"></text></g><g><title>metadata_register_crate (3,300,503 samples, 0.30%)</title><rect x="90.7250%" y="197" width="0.2984%" height="15" fill="rgb(209,38,44)"/><text x="90.9750%" y="207.50"></text></g><g><title>late_resolve_crate (3,563,585 samples, 0.32%)</title><rect x="91.0665%" y="213" width="0.3222%" height="15" fill="rgb(236,212,23)"/><text x="91.3165%" y="223.50"></text></g><g><title>configure_and_expand (20,420,844 samples, 1.85%)</title><rect x="89.5587%" y="245" width="1.8461%" height="15" fill="rgb(242,79,21)"/><text x="89.8087%" y="255.50">c..</text></g><g><title>resolve_crate (3,912,039 samples, 0.35%)</title><rect x="91.0512%" y="229" width="0.3537%" height="15" fill="rgb(211,96,35)"/><text x="91.3012%" y="239.50"></text></g><g><title>free_global_ctxt (7,910,340 samples, 0.72%)</title><rect x="91.4848%" y="245" width="0.7151%" height="15" fill="rgb(253,215,40)"/><text x="91.7348%" y="255.50"></text></g><g><title>item_attrs (1,755,174 samples, 0.16%)</title><rect x="92.9001%" y="149" width="0.1587%" height="15" fill="rgb(211,81,21)"/><text x="93.1501%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,676,183 samples, 0.15%)</title><rect x="92.9072%" y="133" width="0.1515%" height="15" fill="rgb(208,190,38)"/><text x="93.1572%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,835,727 samples, 0.26%)</title><rect x="92.8546%" y="165" width="0.2564%" height="15" fill="rgb(235,213,38)"/><text x="93.1046%" y="175.50"></text></g><g><title>mir_shims (1,739,081 samples, 0.16%)</title><rect x="93.1869%" y="165" width="0.1572%" height="15" fill="rgb(237,122,38)"/><text x="93.4369%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,365,630 samples, 0.39%)</title><rect x="93.6100%" y="149" width="0.3947%" height="15" fill="rgb(244,218,35)"/><text x="93.8600%" y="159.50"></text></g><g><title>optimized_mir (9,837,807 samples, 0.89%)</title><rect x="93.3441%" y="165" width="0.8894%" height="15" fill="rgb(240,68,47)"/><text x="93.5941%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,531,413 samples, 0.23%)</title><rect x="94.0047%" y="149" width="0.2289%" height="15" fill="rgb(210,16,53)"/><text x="94.2547%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (4,205,642 samples, 0.38%)</title><rect x="94.4019%" y="149" width="0.3802%" height="15" fill="rgb(235,124,12)"/><text x="94.6519%" y="159.50"></text></g><g><title>specialization_graph_of (4,229,262 samples, 0.38%)</title><rect x="94.9152%" y="149" width="0.3823%" height="15" fill="rgb(224,169,11)"/><text x="95.1652%" y="159.50"></text></g><g><title>impl_trait_ref (2,328,142 samples, 0.21%)</title><rect x="95.0870%" y="133" width="0.2105%" height="15" fill="rgb(250,166,2)"/><text x="95.3370%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,785,547 samples, 0.16%)</title><rect x="95.1361%" y="117" width="0.1614%" height="15" fill="rgb(242,216,29)"/><text x="95.3861%" y="127.50"></text></g><g><title>resolve_instance (12,502,966 samples, 1.13%)</title><rect x="94.2335%" y="165" width="1.1303%" height="15" fill="rgb(230,116,27)"/><text x="94.4835%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,816,758 samples, 0.16%)</title><rect x="95.3990%" y="149" width="0.1642%" height="15" fill="rgb(228,99,48)"/><text x="95.6490%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,758,108 samples, 0.16%)</title><rect x="95.4043%" y="133" width="0.1589%" height="15" fill="rgb(253,11,6)"/><text x="95.6543%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,657,816 samples, 0.15%)</title><rect x="95.4133%" y="117" width="0.1499%" height="15" fill="rgb(247,143,39)"/><text x="95.6633%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,134,244 samples, 0.19%)</title><rect x="95.3790%" y="165" width="0.1929%" height="15" fill="rgb(236,97,10)"/><text x="95.6290%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (37,244,713 samples, 3.37%)</title><rect x="92.3842%" y="181" width="3.3671%" height="15" fill="rgb(233,208,19)"/><text x="92.6342%" y="191.50">mon..</text></g><g><title>vtable_entries (1,353,051 samples, 0.12%)</title><rect x="95.6290%" y="165" width="0.1223%" height="15" fill="rgb(216,164,2)"/><text x="95.8790%" y="175.50"></text></g><g><title>monomorphization_collector (37,311,353 samples, 3.37%)</title><rect x="92.3835%" y="197" width="3.3731%" height="15" fill="rgb(220,129,5)"/><text x="92.6335%" y="207.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,003,880 samples, 0.36%)</title><rect x="95.7576%" y="181" width="0.3620%" height="15" fill="rgb(242,17,10)"/><text x="96.0076%" y="191.50"></text></g><g><title>symbol_name (3,583,912 samples, 0.32%)</title><rect x="95.7956%" y="165" width="0.3240%" height="15" fill="rgb(242,107,0)"/><text x="96.0456%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (43,217,632 samples, 3.91%)</title><rect x="92.3777%" y="213" width="3.9071%" height="15" fill="rgb(251,28,31)"/><text x="92.6277%" y="223.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,842,588 samples, 0.53%)</title><rect x="95.7566%" y="197" width="0.5282%" height="15" fill="rgb(233,223,10)"/><text x="96.0066%" y="207.50"></text></g><g><title>cgu_partitioning (1,827,388 samples, 0.17%)</title><rect x="96.1196%" y="181" width="0.1652%" height="15" fill="rgb(215,21,27)"/><text x="96.3696%" y="191.50"></text></g><g><title>exported_symbols (43,519,165 samples, 3.93%)</title><rect x="92.3594%" y="229" width="3.9343%" height="15" fill="rgb(232,23,21)"/><text x="92.6094%" y="239.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,251,608 samples, 0.47%)</title><rect x="96.7493%" y="213" width="0.4748%" height="15" fill="rgb(244,5,23)"/><text x="96.9993%" y="223.50"></text></g><g><title>optimized_mir (10,222,002 samples, 0.92%)</title><rect x="96.3023%" y="229" width="0.9241%" height="15" fill="rgb(226,81,46)"/><text x="96.5523%" y="239.50"></text></g><g><title>generate_crate_metadata (55,641,887 samples, 5.03%)</title><rect x="92.1999%" y="245" width="5.0303%" height="15" fill="rgb(247,70,30)"/><text x="92.4499%" y="255.50">genera..</text></g><g><title>hir_lowering (5,191,082 samples, 0.47%)</title><rect x="97.2302%" y="245" width="0.4693%" height="15" fill="rgb(212,68,19)"/><text x="97.4802%" y="255.50"></text></g><g><title>finish_ongoing_codegen (13,984,580 samples, 1.26%)</title><rect x="97.7010%" y="229" width="1.2643%" height="15" fill="rgb(240,187,13)"/><text x="97.9510%" y="239.50"></text></g><g><title>link_crate (3,602,936 samples, 0.33%)</title><rect x="98.9653%" y="229" width="0.3257%" height="15" fill="rgb(223,113,26)"/><text x="99.2153%" y="239.50"></text></g><g><title>link_binary (3,543,266 samples, 0.32%)</title><rect x="98.9707%" y="213" width="0.3203%" height="15" fill="rgb(206,192,2)"/><text x="99.2207%" y="223.50"></text></g><g><title>link_rlib (2,690,926 samples, 0.24%)</title><rect x="99.0477%" y="197" width="0.2433%" height="15" fill="rgb(241,108,4)"/><text x="99.2977%" y="207.50"></text></g><g><title>link (17,615,996 samples, 1.59%)</title><rect x="97.6995%" y="245" width="1.5926%" height="15" fill="rgb(247,173,49)"/><text x="97.9495%" y="255.50"></text></g><g><title>parse_crate (4,921,250 samples, 0.44%)</title><rect x="99.2921%" y="245" width="0.4449%" height="15" fill="rgb(224,114,35)"/><text x="99.5421%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (2,077,090 samples, 0.19%)</title><rect x="99.7658%" y="245" width="0.1878%" height="15" fill="rgb(245,159,27)"/><text x="100.0158%" y="255.50"></text></g><g><title>all (1,106,139,166 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (1,106,139,166 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>