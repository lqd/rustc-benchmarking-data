<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (43,331,119 samples, 14.36%)</title><rect x="0.1942%" y="229" width="14.3576%" height="15" fill="rgb(227,0,7)"/><text x="0.4442%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (828,811 samples, 0.27%)</title><rect x="16.6807%" y="117" width="0.2746%" height="15" fill="rgb(217,0,24)"/><text x="16.9307%" y="127.50"></text></g><g><title>is_copy_raw (573,658 samples, 0.19%)</title><rect x="16.7652%" y="101" width="0.1901%" height="15" fill="rgb(221,193,54)"/><text x="17.0152%" y="111.50"></text></g><g><title>evaluate_obligation (506,388 samples, 0.17%)</title><rect x="16.7875%" y="85" width="0.1678%" height="15" fill="rgb(248,212,6)"/><text x="17.0375%" y="95.50"></text></g><g><title>thir_body (361,442 samples, 0.12%)</title><rect x="17.0212%" y="117" width="0.1198%" height="15" fill="rgb(208,68,35)"/><text x="17.2712%" y="127.50"></text></g><g><title>mir_const (3,355,675 samples, 1.11%)</title><rect x="16.0334%" y="165" width="1.1119%" height="15" fill="rgb(232,128,0)"/><text x="16.2834%" y="175.50"></text></g><g><title>unsafety_check_result (2,719,307 samples, 0.90%)</title><rect x="16.2443%" y="149" width="0.9010%" height="15" fill="rgb(207,160,47)"/><text x="16.4943%" y="159.50"></text></g><g><title>mir_built (2,327,722 samples, 0.77%)</title><rect x="16.3740%" y="133" width="0.7713%" height="15" fill="rgb(228,23,34)"/><text x="16.6240%" y="143.50"></text></g><g><title>mir_promoted (3,744,468 samples, 1.24%)</title><rect x="15.9109%" y="181" width="1.2407%" height="15" fill="rgb(218,30,26)"/><text x="16.1609%" y="191.50"></text></g><g><title>type_op_prove_predicate (910,581 samples, 0.30%)</title><rect x="17.2561%" y="181" width="0.3017%" height="15" fill="rgb(220,122,19)"/><text x="17.5061%" y="191.50"></text></g><g><title>evaluate_obligation (361,763 samples, 0.12%)</title><rect x="17.4380%" y="165" width="0.1199%" height="15" fill="rgb(250,228,42)"/><text x="17.6880%" y="175.50"></text></g><g><title>MIR_borrow_checking (8,927,640 samples, 2.96%)</title><rect x="14.6005%" y="213" width="2.9581%" height="15" fill="rgb(240,193,28)"/><text x="14.8505%" y="223.50">MIR..</text></g><g><title>mir_borrowck (8,883,430 samples, 2.94%)</title><rect x="14.6151%" y="197" width="2.9435%" height="15" fill="rgb(216,20,37)"/><text x="14.8651%" y="207.50">mi..</text></g><g><title>misc_checking_1 (705,127 samples, 0.23%)</title><rect x="17.5989%" y="213" width="0.2336%" height="15" fill="rgb(206,188,39)"/><text x="17.8489%" y="223.50"></text></g><g><title>misc_checking_2 (439,875 samples, 0.15%)</title><rect x="17.8326%" y="213" width="0.1458%" height="15" fill="rgb(217,207,13)"/><text x="18.0826%" y="223.50"></text></g><g><title>lint_checking (366,833 samples, 0.12%)</title><rect x="18.0301%" y="197" width="0.1215%" height="15" fill="rgb(231,73,38)"/><text x="18.2801%" y="207.50"></text></g><g><title>misc_checking_3 (821,679 samples, 0.27%)</title><rect x="17.9783%" y="213" width="0.2723%" height="15" fill="rgb(225,20,46)"/><text x="18.2283%" y="223.50"></text></g><g><title>impl_trait_ref (554,545 samples, 0.18%)</title><rect x="19.0878%" y="53" width="0.1837%" height="15" fill="rgb(210,31,41)"/><text x="19.3378%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (511,295 samples, 0.17%)</title><rect x="19.1022%" y="37" width="0.1694%" height="15" fill="rgb(221,200,47)"/><text x="19.3522%" y="47.50"></text></g><g><title>coherent_trait (947,670 samples, 0.31%)</title><rect x="18.9746%" y="85" width="0.3140%" height="15" fill="rgb(226,26,5)"/><text x="19.2246%" y="95.50"></text></g><g><title>specialization_graph_of (938,390 samples, 0.31%)</title><rect x="18.9776%" y="69" width="0.3109%" height="15" fill="rgb(249,33,26)"/><text x="19.2276%" y="79.50"></text></g><g><title>adt_destructor (983,781 samples, 0.33%)</title><rect x="18.9672%" y="117" width="0.3260%" height="15" fill="rgb(235,183,28)"/><text x="19.2172%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (974,351 samples, 0.32%)</title><rect x="18.9703%" y="101" width="0.3228%" height="15" fill="rgb(221,5,38)"/><text x="19.2203%" y="111.50"></text></g><g><title>dropck_outlives (1,493,806 samples, 0.49%)</title><rect x="18.9011%" y="149" width="0.4950%" height="15" fill="rgb(247,18,42)"/><text x="19.1511%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,419,534 samples, 0.47%)</title><rect x="18.9257%" y="133" width="0.4704%" height="15" fill="rgb(241,131,45)"/><text x="19.1757%" y="143.50"></text></g><g><title>evaluate_obligation (632,078 samples, 0.21%)</title><rect x="19.3960%" y="149" width="0.2094%" height="15" fill="rgb(249,31,29)"/><text x="19.6460%" y="159.50"></text></g><g><title>associated_item (312,932 samples, 0.10%)</title><rect x="21.4926%" y="117" width="0.1037%" height="15" fill="rgb(225,111,53)"/><text x="21.7426%" y="127.50"></text></g><g><title>associated_items (503,984 samples, 0.17%)</title><rect x="21.4350%" y="133" width="0.1670%" height="15" fill="rgb(238,160,17)"/><text x="21.6850%" y="143.50"></text></g><g><title>evaluate_obligation (1,320,576 samples, 0.44%)</title><rect x="21.6181%" y="133" width="0.4376%" height="15" fill="rgb(214,148,48)"/><text x="21.8681%" y="143.50"></text></g><g><title>is_copy_raw (462,025 samples, 0.15%)</title><rect x="22.1761%" y="133" width="0.1531%" height="15" fill="rgb(232,36,49)"/><text x="22.4261%" y="143.50"></text></g><g><title>evaluate_obligation (427,845 samples, 0.14%)</title><rect x="22.1874%" y="117" width="0.1418%" height="15" fill="rgb(209,103,24)"/><text x="22.4374%" y="127.50"></text></g><g><title>typeck (8,316,264 samples, 2.76%)</title><rect x="19.7914%" y="149" width="2.7556%" height="15" fill="rgb(229,88,8)"/><text x="20.0414%" y="159.50">ty..</text></g><g><title>item_bodies_checking (12,945,770 samples, 4.29%)</title><rect x="18.2737%" y="197" width="4.2895%" height="15" fill="rgb(213,181,19)"/><text x="18.5237%" y="207.50">item_..</text></g><g><title>typeck_item_bodies (12,942,820 samples, 4.29%)</title><rect x="18.2747%" y="181" width="4.2886%" height="15" fill="rgb(254,191,54)"/><text x="18.5247%" y="191.50">typec..</text></g><g><title>typeck (12,921,340 samples, 4.28%)</title><rect x="18.2818%" y="165" width="4.2814%" height="15" fill="rgb(241,83,37)"/><text x="18.5318%" y="175.50">typeck</text></g><g><title>type_collecting (536,805 samples, 0.18%)</title><rect x="22.5657%" y="197" width="0.1779%" height="15" fill="rgb(233,36,39)"/><text x="22.8157%" y="207.50"></text></g><g><title>collect_mod_item_types (527,655 samples, 0.17%)</title><rect x="22.5688%" y="181" width="0.1748%" height="15" fill="rgb(226,3,54)"/><text x="22.8188%" y="191.50"></text></g><g><title>adt_sized_constraint (368,994 samples, 0.12%)</title><rect x="22.9542%" y="149" width="0.1223%" height="15" fill="rgb(245,192,40)"/><text x="23.2042%" y="159.50"></text></g><g><title>evaluate_obligation (462,454 samples, 0.15%)</title><rect x="22.9237%" y="165" width="0.1532%" height="15" fill="rgb(238,167,29)"/><text x="23.1737%" y="175.50"></text></g><g><title>analysis (26,212,755 samples, 8.69%)</title><rect x="14.5518%" y="229" width="8.6855%" height="15" fill="rgb(232,182,51)"/><text x="14.8018%" y="239.50">analysis</text></g><g><title>type_check_crate (15,049,941 samples, 4.99%)</title><rect x="18.2506%" y="213" width="4.9867%" height="15" fill="rgb(231,60,39)"/><text x="18.5006%" y="223.50">type_c..</text></g><g><title>wf_checking (1,488,095 samples, 0.49%)</title><rect x="22.7443%" y="197" width="0.4931%" height="15" fill="rgb(208,69,12)"/><text x="22.9943%" y="207.50"></text></g><g><title>check_item_well_formed (1,446,362 samples, 0.48%)</title><rect x="22.7581%" y="181" width="0.4792%" height="15" fill="rgb(235,93,37)"/><text x="23.0081%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (431,043 samples, 0.14%)</title><rect x="32.4950%" y="197" width="0.1428%" height="15" fill="rgb(213,116,39)"/><text x="32.7450%" y="207.50"></text></g><g><title>layout_of (376,146 samples, 0.12%)</title><rect x="33.6332%" y="149" width="0.1246%" height="15" fill="rgb(222,207,29)"/><text x="33.8832%" y="159.50"></text></g><g><title>layout_of (778,270 samples, 0.26%)</title><rect x="33.5231%" y="165" width="0.2579%" height="15" fill="rgb(206,96,30)"/><text x="33.7731%" y="175.50"></text></g><g><title>layout_of (1,630,656 samples, 0.54%)</title><rect x="33.3014%" y="181" width="0.5403%" height="15" fill="rgb(218,138,4)"/><text x="33.5514%" y="191.50"></text></g><g><title>predicates_of (904,481 samples, 0.30%)</title><rect x="34.3014%" y="165" width="0.2997%" height="15" fill="rgb(250,191,14)"/><text x="34.5514%" y="175.50"></text></g><g><title>predicates_defined_on (681,128 samples, 0.23%)</title><rect x="34.3754%" y="149" width="0.2257%" height="15" fill="rgb(239,60,40)"/><text x="34.6254%" y="159.50"></text></g><g><title>param_env (2,292,397 samples, 0.76%)</title><rect x="33.8418%" y="181" width="0.7596%" height="15" fill="rgb(206,27,48)"/><text x="34.0918%" y="191.50"></text></g><g><title>fn_abi_of_instance (5,917,651 samples, 1.96%)</title><rect x="32.7328%" y="197" width="1.9608%" height="15" fill="rgb(225,35,8)"/><text x="32.9828%" y="207.50">f..</text></g><g><title>layout_of (338,714 samples, 0.11%)</title><rect x="35.1019%" y="133" width="0.1122%" height="15" fill="rgb(250,213,24)"/><text x="35.3519%" y="143.50"></text></g><g><title>layout_of (515,456 samples, 0.17%)</title><rect x="35.0576%" y="149" width="0.1708%" height="15" fill="rgb(247,123,22)"/><text x="35.3076%" y="159.50"></text></g><g><title>layout_of (623,986 samples, 0.21%)</title><rect x="35.0333%" y="165" width="0.2068%" height="15" fill="rgb(231,138,38)"/><text x="35.2833%" y="175.50"></text></g><g><title>layout_of (898,939 samples, 0.30%)</title><rect x="34.9579%" y="181" width="0.2979%" height="15" fill="rgb(231,145,46)"/><text x="35.2079%" y="191.50"></text></g><g><title>layout_of (1,505,724 samples, 0.50%)</title><rect x="34.7790%" y="197" width="0.4989%" height="15" fill="rgb(251,118,11)"/><text x="35.0290%" y="207.50"></text></g><g><title>codegen_module (34,840,864 samples, 11.54%)</title><rect x="23.8444%" y="213" width="11.5444%" height="15" fill="rgb(217,147,25)"/><text x="24.0944%" y="223.50">codegen_module</text></g><g><title>codegen_crate (36,743,752 samples, 12.17%)</title><rect x="23.2404%" y="229" width="12.1749%" height="15" fill="rgb(247,81,37)"/><text x="23.4904%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (141,074,026 samples, 46.74%)</title><rect x="35.4740%" y="213" width="46.7443%" height="15" fill="rgb(209,12,38)"/><text x="35.7240%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (133,332,488 samples, 44.18%)</title><rect x="38.0391%" y="197" width="44.1792%" height="15" fill="rgb(227,1,9)"/><text x="38.2891%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (148,330,211 samples, 49.15%)</title><rect x="35.4153%" y="229" width="49.1487%" height="15" fill="rgb(248,47,43)"/><text x="35.6653%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,079,165 samples, 2.35%)</title><rect x="82.2183%" y="213" width="2.3457%" height="15" fill="rgb(221,10,30)"/><text x="82.4683%" y="223.50">L..</text></g><g><title>macro_expand_crate (10,431,345 samples, 3.46%)</title><rect x="84.6902%" y="213" width="3.4564%" height="15" fill="rgb(210,229,1)"/><text x="84.9402%" y="223.50">mac..</text></g><g><title>expand_crate (10,410,445 samples, 3.45%)</title><rect x="84.6972%" y="197" width="3.4495%" height="15" fill="rgb(222,148,37)"/><text x="84.9472%" y="207.50">exp..</text></g><g><title>metadata_register_crate (2,274,114 samples, 0.75%)</title><rect x="87.3931%" y="181" width="0.7535%" height="15" fill="rgb(234,67,33)"/><text x="87.6431%" y="191.50"></text></g><g><title>metadata_register_crate (835,307 samples, 0.28%)</title><rect x="87.8698%" y="165" width="0.2768%" height="15" fill="rgb(247,98,35)"/><text x="88.1198%" y="175.50"></text></g><g><title>late_resolve_crate (1,096,271 samples, 0.36%)</title><rect x="88.2868%" y="197" width="0.3632%" height="15" fill="rgb(247,138,52)"/><text x="88.5368%" y="207.50"></text></g><g><title>configure_and_expand (12,385,295 samples, 4.10%)</title><rect x="84.5640%" y="229" width="4.1038%" height="15" fill="rgb(213,79,30)"/><text x="84.8140%" y="239.50">conf..</text></g><g><title>resolve_crate (1,438,765 samples, 0.48%)</title><rect x="88.1911%" y="213" width="0.4767%" height="15" fill="rgb(246,177,23)"/><text x="88.4411%" y="223.50"></text></g><g><title>free_global_ctxt (3,544,516 samples, 1.17%)</title><rect x="88.7363%" y="229" width="1.1745%" height="15" fill="rgb(230,62,27)"/><text x="88.9863%" y="239.50"></text></g><g><title>item_attrs (668,867 samples, 0.22%)</title><rect x="90.5151%" y="133" width="0.2216%" height="15" fill="rgb(216,154,8)"/><text x="90.7651%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (642,227 samples, 0.21%)</title><rect x="90.5239%" y="117" width="0.2128%" height="15" fill="rgb(244,35,45)"/><text x="90.7739%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,078,562 samples, 0.36%)</title><rect x="90.4593%" y="149" width="0.3574%" height="15" fill="rgb(251,115,12)"/><text x="90.7093%" y="159.50"></text></g><g><title>is_reachable_non_generic (331,803 samples, 0.11%)</title><rect x="90.8658%" y="149" width="0.1099%" height="15" fill="rgb(240,54,50)"/><text x="91.1158%" y="159.50"></text></g><g><title>reachable_non_generics (306,293 samples, 0.10%)</title><rect x="90.8743%" y="133" width="0.1015%" height="15" fill="rgb(233,84,52)"/><text x="91.1243%" y="143.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (304,023 samples, 0.10%)</title><rect x="90.8750%" y="117" width="0.1007%" height="15" fill="rgb(207,117,47)"/><text x="91.1250%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (831,028 samples, 0.28%)</title><rect x="91.2972%" y="133" width="0.2754%" height="15" fill="rgb(249,43,39)"/><text x="91.5472%" y="143.50"></text></g><g><title>optimized_mir (2,488,382 samples, 0.82%)</title><rect x="91.0631%" y="149" width="0.8245%" height="15" fill="rgb(209,38,44)"/><text x="91.3131%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (950,838 samples, 0.32%)</title><rect x="91.5725%" y="133" width="0.3151%" height="15" fill="rgb(236,212,23)"/><text x="91.8225%" y="143.50"></text></g><g><title>evaluate_obligation (381,233 samples, 0.13%)</title><rect x="92.3879%" y="117" width="0.1263%" height="15" fill="rgb(242,79,21)"/><text x="92.6379%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,813,003 samples, 0.60%)</title><rect x="92.0377%" y="133" width="0.6007%" height="15" fill="rgb(211,96,35)"/><text x="92.2877%" y="143.50"></text></g><g><title>impl_parent (342,553 samples, 0.11%)</title><rect x="92.9331%" y="117" width="0.1135%" height="15" fill="rgb(253,215,40)"/><text x="93.1831%" y="127.50"></text></g><g><title>specialization_graph_of (1,713,048 samples, 0.57%)</title><rect x="92.7670%" y="133" width="0.5676%" height="15" fill="rgb(211,81,21)"/><text x="93.0170%" y="143.50"></text></g><g><title>impl_trait_ref (869,128 samples, 0.29%)</title><rect x="93.0466%" y="117" width="0.2880%" height="15" fill="rgb(208,190,38)"/><text x="93.2966%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (750,247 samples, 0.25%)</title><rect x="93.0860%" y="101" width="0.2486%" height="15" fill="rgb(235,213,38)"/><text x="93.3360%" y="111.50"></text></g><g><title>resolve_instance (4,582,228 samples, 1.52%)</title><rect x="91.8876%" y="149" width="1.5183%" height="15" fill="rgb(237,122,38)"/><text x="92.1376%" y="159.50"></text></g><g><title>own_existential_vtable_entries (469,035 samples, 0.16%)</title><rect x="93.5837%" y="133" width="0.1554%" height="15" fill="rgb(244,218,35)"/><text x="93.8337%" y="143.50"></text></g><g><title>impl_parent (1,032,432 samples, 0.34%)</title><rect x="94.2321%" y="101" width="0.3421%" height="15" fill="rgb(240,68,47)"/><text x="94.4821%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (540,418 samples, 0.18%)</title><rect x="94.3951%" y="85" width="0.1791%" height="15" fill="rgb(210,16,53)"/><text x="94.6451%" y="95.50"></text></g><g><title>impl_trait_ref (2,371,025 samples, 0.79%)</title><rect x="94.5742%" y="101" width="0.7856%" height="15" fill="rgb(235,124,12)"/><text x="94.8242%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,095,683 samples, 0.69%)</title><rect x="94.6654%" y="85" width="0.6944%" height="15" fill="rgb(224,169,11)"/><text x="94.9154%" y="95.50"></text></g><g><title>specialization_graph_of (4,558,747 samples, 1.51%)</title><rect x="93.8497%" y="117" width="1.5105%" height="15" fill="rgb(250,166,2)"/><text x="94.0997%" y="127.50"></text></g><g><title>resolve_instance (4,900,670 samples, 1.62%)</title><rect x="93.7391%" y="133" width="1.6238%" height="15" fill="rgb(242,216,29)"/><text x="93.9891%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (15,767,419 samples, 5.22%)</title><rect x="90.1398%" y="165" width="5.2245%" height="15" fill="rgb(230,116,27)"/><text x="90.3898%" y="175.50">monomo..</text></g><g><title>vtable_entries (5,490,006 samples, 1.82%)</title><rect x="93.5452%" y="149" width="1.8191%" height="15" fill="rgb(228,99,48)"/><text x="93.7952%" y="159.50">v..</text></g><g><title>monomorphization_collector (15,800,750 samples, 5.24%)</title><rect x="90.1385%" y="181" width="5.2355%" height="15" fill="rgb(253,11,6)"/><text x="90.3885%" y="191.50">monomo..</text></g><g><title>assert_symbols_are_distinct (818,568 samples, 0.27%)</title><rect x="95.3755%" y="165" width="0.2712%" height="15" fill="rgb(247,143,39)"/><text x="95.6255%" y="175.50"></text></g><g><title>symbol_name (746,528 samples, 0.25%)</title><rect x="95.3994%" y="149" width="0.2474%" height="15" fill="rgb(236,97,10)"/><text x="95.6494%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (17,147,414 samples, 5.68%)</title><rect x="90.1233%" y="197" width="5.6817%" height="15" fill="rgb(233,208,19)"/><text x="90.3733%" y="207.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (1,300,963 samples, 0.43%)</title><rect x="95.3740%" y="181" width="0.4311%" height="15" fill="rgb(216,164,2)"/><text x="95.6240%" y="191.50"></text></g><g><title>cgu_partitioning (477,885 samples, 0.16%)</title><rect x="95.6467%" y="165" width="0.1583%" height="15" fill="rgb(220,129,5)"/><text x="95.8967%" y="175.50"></text></g><g><title>exported_symbols (17,223,194 samples, 5.71%)</title><rect x="90.1055%" y="213" width="5.7068%" height="15" fill="rgb(242,17,10)"/><text x="90.3555%" y="223.50">exporte..</text></g><g><title>layout_of (501,824 samples, 0.17%)</title><rect x="96.0084%" y="197" width="0.1663%" height="15" fill="rgb(242,107,0)"/><text x="96.2584%" y="207.50"></text></g><g><title>optimized_mir (1,526,526 samples, 0.51%)</title><rect x="95.8314%" y="213" width="0.5058%" height="15" fill="rgb(251,28,31)"/><text x="96.0814%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (490,524 samples, 0.16%)</title><rect x="96.1747%" y="197" width="0.1625%" height="15" fill="rgb(233,223,10)"/><text x="96.4247%" y="207.50"></text></g><g><title>generate_crate_metadata (19,438,136 samples, 6.44%)</title><rect x="89.9108%" y="229" width="6.4408%" height="15" fill="rgb(215,21,27)"/><text x="90.1608%" y="239.50">generate..</text></g><g><title>hir_lowering (815,388 samples, 0.27%)</title><rect x="96.3516%" y="229" width="0.2702%" height="15" fill="rgb(232,23,21)"/><text x="96.6016%" y="239.50"></text></g><g><title>finish_ongoing_codegen (5,904,770 samples, 1.96%)</title><rect x="96.6267%" y="213" width="1.9565%" height="15" fill="rgb(244,5,23)"/><text x="96.8767%" y="223.50">f..</text></g><g><title>link_crate (1,731,457 samples, 0.57%)</title><rect x="98.5832%" y="213" width="0.5737%" height="15" fill="rgb(226,81,46)"/><text x="98.8332%" y="223.50"></text></g><g><title>link_binary (1,701,377 samples, 0.56%)</title><rect x="98.5932%" y="197" width="0.5637%" height="15" fill="rgb(247,70,30)"/><text x="98.8432%" y="207.50"></text></g><g><title>link_rlib (1,132,021 samples, 0.38%)</title><rect x="98.7819%" y="181" width="0.3751%" height="15" fill="rgb(212,68,19)"/><text x="99.0319%" y="191.50"></text></g><g><title>link (7,660,037 samples, 2.54%)</title><rect x="96.6217%" y="229" width="2.5381%" height="15" fill="rgb(240,187,13)"/><text x="96.8717%" y="239.50">li..</text></g><g><title>parse_crate (1,101,651 samples, 0.37%)</title><rect x="99.1599%" y="229" width="0.3650%" height="15" fill="rgb(223,113,26)"/><text x="99.4099%" y="239.50"></text></g><g><title>prepare_outputs (316,244 samples, 0.10%)</title><rect x="99.5276%" y="229" width="0.1048%" height="15" fill="rgb(206,192,2)"/><text x="99.7776%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (716,017 samples, 0.24%)</title><rect x="99.6324%" y="229" width="0.2372%" height="15" fill="rgb(241,108,4)"/><text x="99.8824%" y="239.50"></text></g><g><title>all (301,799,144 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (301,799,144 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>