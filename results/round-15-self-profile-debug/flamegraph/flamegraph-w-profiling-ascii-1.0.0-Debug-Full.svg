<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (129,685,457 samples, 10.63%)</title><rect x="0.0929%" y="197" width="10.6303%" height="15" fill="rgb(227,0,7)"/><text x="0.3429%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (1,594,197 samples, 0.13%)</title><rect x="15.2676%" y="69" width="0.1307%" height="15" fill="rgb(217,0,24)"/><text x="15.5176%" y="79.50"></text></g><g><title>evaluate_obligation (1,273,513 samples, 0.10%)</title><rect x="15.2939%" y="53" width="0.1044%" height="15" fill="rgb(221,193,54)"/><text x="15.5439%" y="63.50"></text></g><g><title>needs_drop_raw (1,952,400 samples, 0.16%)</title><rect x="15.2386%" y="85" width="0.1600%" height="15" fill="rgb(248,212,6)"/><text x="15.4886%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,548,548 samples, 0.13%)</title><rect x="15.4792%" y="69" width="0.1269%" height="15" fill="rgb(208,68,35)"/><text x="15.7292%" y="79.50"></text></g><g><title>resolve_instance (3,342,714 samples, 0.27%)</title><rect x="15.4013%" y="85" width="0.2740%" height="15" fill="rgb(232,128,0)"/><text x="15.6513%" y="95.50"></text></g><g><title>thir_body (2,827,172 samples, 0.23%)</title><rect x="15.6848%" y="85" width="0.2317%" height="15" fill="rgb(207,160,47)"/><text x="15.9348%" y="95.50"></text></g><g><title>mir_const (22,710,940 samples, 1.86%)</title><rect x="14.0628%" y="133" width="1.8616%" height="15" fill="rgb(228,23,34)"/><text x="14.3128%" y="143.50">m..</text></g><g><title>unsafety_check_result (19,191,198 samples, 1.57%)</title><rect x="14.3513%" y="117" width="1.5731%" height="15" fill="rgb(218,30,26)"/><text x="14.6013%" y="127.50"></text></g><g><title>mir_built (16,737,572 samples, 1.37%)</title><rect x="14.5524%" y="101" width="1.3720%" height="15" fill="rgb(220,122,19)"/><text x="14.8024%" y="111.50"></text></g><g><title>mir_const_qualif (2,034,297 samples, 0.17%)</title><rect x="15.9244%" y="133" width="0.1668%" height="15" fill="rgb(250,228,42)"/><text x="16.1744%" y="143.50"></text></g><g><title>mir_const (1,458,275 samples, 0.12%)</title><rect x="15.9716%" y="117" width="0.1195%" height="15" fill="rgb(240,193,28)"/><text x="16.2216%" y="127.50"></text></g><g><title>mir_promoted (27,438,661 samples, 2.25%)</title><rect x="13.8420%" y="149" width="2.2491%" height="15" fill="rgb(216,20,37)"/><text x="14.0920%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (5,266,664 samples, 0.43%)</title><rect x="16.3261%" y="149" width="0.4317%" height="15" fill="rgb(206,188,39)"/><text x="16.5761%" y="159.50"></text></g><g><title>MIR_borrow_checking (72,930,570 samples, 5.98%)</title><rect x="10.7833%" y="181" width="5.9781%" height="15" fill="rgb(217,207,13)"/><text x="11.0333%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (72,309,795 samples, 5.93%)</title><rect x="10.8341%" y="165" width="5.9272%" height="15" fill="rgb(231,73,38)"/><text x="11.0841%" y="175.50">mir_borr..</text></g><g><title>check_mod_attrs (1,835,410 samples, 0.15%)</title><rect x="16.8995%" y="165" width="0.1504%" height="15" fill="rgb(225,20,46)"/><text x="17.1495%" y="175.50"></text></g><g><title>misc_checking_1 (3,749,578 samples, 0.31%)</title><rect x="16.8973%" y="181" width="0.3074%" height="15" fill="rgb(210,31,41)"/><text x="17.1473%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,416,355 samples, 0.12%)</title><rect x="17.2049%" y="165" width="0.1161%" height="15" fill="rgb(221,200,47)"/><text x="17.4549%" y="175.50"></text></g><g><title>module_children (4,525,394 samples, 0.37%)</title><rect x="17.6645%" y="117" width="0.3709%" height="15" fill="rgb(226,26,5)"/><text x="17.9145%" y="127.50"></text></g><g><title>metadata_decode_entry_module_children (4,452,651 samples, 0.36%)</title><rect x="17.6705%" y="101" width="0.3650%" height="15" fill="rgb(249,33,26)"/><text x="17.9205%" y="111.50"></text></g><g><title>trimmed_def_paths (5,517,186 samples, 0.45%)</title><rect x="17.5834%" y="133" width="0.4522%" height="15" fill="rgb(235,183,28)"/><text x="17.8334%" y="143.50"></text></g><g><title>misc_checking_2 (10,163,062 samples, 0.83%)</title><rect x="17.2046%" y="181" width="0.8331%" height="15" fill="rgb(221,5,38)"/><text x="17.4546%" y="191.50"></text></g><g><title>match_checking (8,743,617 samples, 0.72%)</title><rect x="17.3210%" y="165" width="0.7167%" height="15" fill="rgb(247,18,42)"/><text x="17.5710%" y="175.50"></text></g><g><title>check_match (8,481,034 samples, 0.70%)</title><rect x="17.3425%" y="149" width="0.6952%" height="15" fill="rgb(241,131,45)"/><text x="17.5925%" y="159.50"></text></g><g><title>death_checking (1,375,543 samples, 0.11%)</title><rect x="18.0970%" y="165" width="0.1128%" height="15" fill="rgb(249,31,29)"/><text x="18.3470%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,569,816 samples, 0.29%)</title><rect x="18.3216%" y="133" width="0.2926%" height="15" fill="rgb(225,111,53)"/><text x="18.5716%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,566,406 samples, 0.29%)</title><rect x="18.3219%" y="117" width="0.2923%" height="15" fill="rgb(238,160,17)"/><text x="18.5719%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,558,206 samples, 0.29%)</title><rect x="18.3226%" y="101" width="0.2917%" height="15" fill="rgb(214,148,48)"/><text x="18.5726%" y="111.50"></text></g><g><title>crate_lints (6,512,915 samples, 0.53%)</title><rect x="18.2099%" y="149" width="0.5339%" height="15" fill="rgb(232,36,49)"/><text x="18.4599%" y="159.50"></text></g><g><title>lint_checking (7,595,786 samples, 0.62%)</title><rect x="18.2098%" y="165" width="0.6226%" height="15" fill="rgb(209,103,24)"/><text x="18.4598%" y="175.50"></text></g><g><title>privacy_checking_modules (2,617,696 samples, 0.21%)</title><rect x="18.9299%" y="165" width="0.2146%" height="15" fill="rgb(229,88,8)"/><text x="19.1799%" y="175.50"></text></g><g><title>check_mod_privacy (2,613,256 samples, 0.21%)</title><rect x="18.9303%" y="149" width="0.2142%" height="15" fill="rgb(213,181,19)"/><text x="19.1803%" y="159.50"></text></g><g><title>misc_checking_3 (13,535,065 samples, 1.11%)</title><rect x="18.0377%" y="181" width="1.1095%" height="15" fill="rgb(254,191,54)"/><text x="18.2877%" y="191.50"></text></g><g><title>impl_parent (3,564,169 samples, 0.29%)</title><rect x="19.7830%" y="117" width="0.2922%" height="15" fill="rgb(241,83,37)"/><text x="20.0330%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,982,486 samples, 0.16%)</title><rect x="19.9127%" y="101" width="0.1625%" height="15" fill="rgb(233,36,39)"/><text x="20.1627%" y="111.50"></text></g><g><title>impl_trait_ref (7,223,506 samples, 0.59%)</title><rect x="20.0753%" y="117" width="0.5921%" height="15" fill="rgb(226,3,54)"/><text x="20.3253%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,830,643 samples, 0.48%)</title><rect x="20.1894%" y="101" width="0.4779%" height="15" fill="rgb(245,192,40)"/><text x="20.4394%" y="111.50"></text></g><g><title>trait_impls_of (1,415,971 samples, 0.12%)</title><rect x="20.7175%" y="117" width="0.1161%" height="15" fill="rgb(238,167,29)"/><text x="20.9675%" y="127.50"></text></g><g><title>coherent_trait (20,276,522 samples, 1.66%)</title><rect x="19.1752%" y="149" width="1.6621%" height="15" fill="rgb(232,182,51)"/><text x="19.4252%" y="159.50"></text></g><g><title>specialization_graph_of (19,794,798 samples, 1.62%)</title><rect x="19.2147%" y="133" width="1.6226%" height="15" fill="rgb(231,60,39)"/><text x="19.4647%" y="143.50"></text></g><g><title>coherence_checking (20,485,095 samples, 1.68%)</title><rect x="19.1722%" y="165" width="1.6792%" height="15" fill="rgb(208,69,12)"/><text x="19.4222%" y="175.50"></text></g><g><title>evaluate_obligation (5,162,557 samples, 0.42%)</title><rect x="24.9178%" y="117" width="0.4232%" height="15" fill="rgb(235,93,37)"/><text x="25.1678%" y="127.50"></text></g><g><title>evaluate_obligation (1,795,728 samples, 0.15%)</title><rect x="26.6333%" y="101" width="0.1472%" height="15" fill="rgb(213,116,39)"/><text x="26.8833%" y="111.50"></text></g><g><title>typeck (16,021,381 samples, 1.31%)</title><rect x="25.5797%" y="117" width="1.3133%" height="15" fill="rgb(222,207,29)"/><text x="25.8297%" y="127.50"></text></g><g><title>item_bodies_checking (73,730,069 samples, 6.04%)</title><rect x="20.8621%" y="165" width="6.0436%" height="15" fill="rgb(206,96,30)"/><text x="21.1121%" y="175.50">item_bod..</text></g><g><title>typeck_item_bodies (73,726,169 samples, 6.04%)</title><rect x="20.8625%" y="149" width="6.0433%" height="15" fill="rgb(218,138,4)"/><text x="21.1125%" y="159.50">typeck_i..</text></g><g><title>typeck (73,288,767 samples, 6.01%)</title><rect x="20.8983%" y="133" width="6.0075%" height="15" fill="rgb(250,191,14)"/><text x="21.1483%" y="143.50">typeck</text></g><g><title>type_of (1,376,793 samples, 0.11%)</title><rect x="27.4180%" y="133" width="0.1129%" height="15" fill="rgb(239,60,40)"/><text x="27.6680%" y="143.50"></text></g><g><title>mir_borrowck (1,362,433 samples, 0.11%)</title><rect x="27.4192%" y="117" width="0.1117%" height="15" fill="rgb(206,27,48)"/><text x="27.6692%" y="127.50"></text></g><g><title>item_types_checking (8,021,220 samples, 0.66%)</title><rect x="26.9058%" y="165" width="0.6575%" height="15" fill="rgb(225,35,8)"/><text x="27.1558%" y="175.50"></text></g><g><title>check_mod_item_types (8,014,300 samples, 0.66%)</title><rect x="26.9063%" y="149" width="0.6569%" height="15" fill="rgb(250,213,24)"/><text x="27.1563%" y="159.50"></text></g><g><title>mir_const_qualif (2,908,497 samples, 0.24%)</title><rect x="27.8872%" y="85" width="0.2384%" height="15" fill="rgb(247,123,22)"/><text x="28.1372%" y="95.50"></text></g><g><title>mir_const (2,432,185 samples, 0.20%)</title><rect x="27.9263%" y="69" width="0.1994%" height="15" fill="rgb(231,138,38)"/><text x="28.1763%" y="79.50"></text></g><g><title>unsafety_check_result (1,697,803 samples, 0.14%)</title><rect x="27.9865%" y="53" width="0.1392%" height="15" fill="rgb(231,145,46)"/><text x="28.2365%" y="63.50"></text></g><g><title>mir_built (1,472,012 samples, 0.12%)</title><rect x="28.0050%" y="37" width="0.1207%" height="15" fill="rgb(251,118,11)"/><text x="28.2550%" y="47.50"></text></g><g><title>mir_borrowck (5,982,751 samples, 0.49%)</title><rect x="28.3936%" y="53" width="0.4904%" height="15" fill="rgb(217,147,25)"/><text x="28.6436%" y="63.50"></text></g><g><title>mir_for_ctfe (9,295,207 samples, 0.76%)</title><rect x="28.1256%" y="85" width="0.7619%" height="15" fill="rgb(247,81,37)"/><text x="28.3756%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,501,043 samples, 0.70%)</title><rect x="28.1907%" y="69" width="0.6968%" height="15" fill="rgb(209,12,38)"/><text x="28.4407%" y="79.50"></text></g><g><title>eval_to_const_value_raw (18,158,781 samples, 1.49%)</title><rect x="27.6964%" y="133" width="1.4885%" height="15" fill="rgb(227,1,9)"/><text x="27.9464%" y="143.50"></text></g><g><title>eval_to_const_value_raw (18,019,400 samples, 1.48%)</title><rect x="27.7078%" y="117" width="1.4770%" height="15" fill="rgb(248,47,43)"/><text x="27.9578%" y="127.50"></text></g><g><title>eval_to_allocation_raw (17,788,379 samples, 1.46%)</title><rect x="27.7267%" y="101" width="1.4581%" height="15" fill="rgb(221,10,30)"/><text x="27.9767%" y="111.50"></text></g><g><title>typeck (3,598,930 samples, 0.30%)</title><rect x="28.8898%" y="85" width="0.2950%" height="15" fill="rgb(210,229,1)"/><text x="29.1398%" y="95.50"></text></g><g><title>named_region_map (1,481,804 samples, 0.12%)</title><rect x="29.3692%" y="117" width="0.1215%" height="15" fill="rgb(222,148,37)"/><text x="29.6192%" y="127.50"></text></g><g><title>resolve_lifetimes (1,389,844 samples, 0.11%)</title><rect x="29.3767%" y="101" width="0.1139%" height="15" fill="rgb(234,67,33)"/><text x="29.6267%" y="111.50"></text></g><g><title>generics_of (2,687,311 samples, 0.22%)</title><rect x="29.2753%" y="133" width="0.2203%" height="15" fill="rgb(247,98,35)"/><text x="29.5253%" y="143.50"></text></g><g><title>param_env (1,640,106 samples, 0.13%)</title><rect x="29.5240%" y="133" width="0.1344%" height="15" fill="rgb(247,138,52)"/><text x="29.7740%" y="143.50"></text></g><g><title>predicates_of (2,046,938 samples, 0.17%)</title><rect x="29.6584%" y="133" width="0.1678%" height="15" fill="rgb(213,79,30)"/><text x="29.9084%" y="143.50"></text></g><g><title>predicates_defined_on (1,758,563 samples, 0.14%)</title><rect x="29.6821%" y="117" width="0.1441%" height="15" fill="rgb(246,177,23)"/><text x="29.9321%" y="127.50"></text></g><g><title>type_collecting (28,128,901 samples, 2.31%)</title><rect x="27.5636%" y="165" width="2.3057%" height="15" fill="rgb(230,62,27)"/><text x="27.8136%" y="175.50">t..</text></g><g><title>collect_mod_item_types (28,111,961 samples, 2.30%)</title><rect x="27.5650%" y="149" width="2.3043%" height="15" fill="rgb(216,154,8)"/><text x="27.8150%" y="159.50">c..</text></g><g><title>param_env (1,432,324 samples, 0.12%)</title><rect x="30.7934%" y="133" width="0.1174%" height="15" fill="rgb(244,35,45)"/><text x="31.0434%" y="143.50"></text></g><g><title>region_scope_tree (1,226,803 samples, 0.10%)</title><rect x="30.9153%" y="133" width="0.1006%" height="15" fill="rgb(251,115,12)"/><text x="31.1653%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,164,728 samples, 1.08%)</title><rect x="29.9379%" y="149" width="1.0791%" height="15" fill="rgb(240,54,50)"/><text x="30.1879%" y="159.50"></text></g><g><title>evaluate_obligation (1,422,408 samples, 0.12%)</title><rect x="31.4750%" y="133" width="0.1166%" height="15" fill="rgb(233,84,52)"/><text x="31.7250%" y="143.50"></text></g><g><title>check_item_well_formed (8,739,883 samples, 0.72%)</title><rect x="31.0171%" y="149" width="0.7164%" height="15" fill="rgb(207,117,47)"/><text x="31.2671%" y="159.50"></text></g><g><title>analysis (257,078,184 samples, 21.07%)</title><rect x="10.7232%" y="197" width="21.0726%" height="15" fill="rgb(249,43,39)"/><text x="10.9732%" y="207.50">analysis</text></g><g><title>type_check_crate (154,308,635 samples, 12.65%)</title><rect x="19.1471%" y="181" width="12.6486%" height="15" fill="rgb(209,38,44)"/><text x="19.3971%" y="191.50">type_check_crate</text></g><g><title>wf_checking (23,468,725 samples, 1.92%)</title><rect x="29.8721%" y="165" width="1.9237%" height="15" fill="rgb(236,212,23)"/><text x="30.1221%" y="175.50">w..</text></g><g><title>compute_debuginfo_type_name (1,692,812 samples, 0.14%)</title><rect x="39.1612%" y="165" width="0.1388%" height="15" fill="rgb(242,79,21)"/><text x="39.4112%" y="175.50"></text></g><g><title>const_caller_location (1,294,114 samples, 0.11%)</title><rect x="39.3000%" y="165" width="0.1061%" height="15" fill="rgb(211,96,35)"/><text x="39.5500%" y="175.50"></text></g><g><title>layout_of (1,666,404 samples, 0.14%)</title><rect x="39.8748%" y="149" width="0.1366%" height="15" fill="rgb(253,215,40)"/><text x="40.1248%" y="159.50"></text></g><g><title>predicates_of (1,979,565 samples, 0.16%)</title><rect x="40.3599%" y="133" width="0.1623%" height="15" fill="rgb(211,81,21)"/><text x="40.6099%" y="143.50"></text></g><g><title>predicates_defined_on (1,445,408 samples, 0.12%)</title><rect x="40.4037%" y="117" width="0.1185%" height="15" fill="rgb(208,190,38)"/><text x="40.6537%" y="127.50"></text></g><g><title>param_env (6,236,019 samples, 0.51%)</title><rect x="40.0114%" y="149" width="0.5112%" height="15" fill="rgb(235,213,38)"/><text x="40.2614%" y="159.50"></text></g><g><title>fn_abi_of_instance (14,608,833 samples, 1.20%)</title><rect x="39.4097%" y="165" width="1.1975%" height="15" fill="rgb(237,122,38)"/><text x="39.6597%" y="175.50"></text></g><g><title>layout_of (1,669,068 samples, 0.14%)</title><rect x="40.6615%" y="165" width="0.1368%" height="15" fill="rgb(244,218,35)"/><text x="40.9115%" y="175.50"></text></g><g><title>codegen_module (108,335,106 samples, 8.88%)</title><rect x="32.0001%" y="181" width="8.8802%" height="15" fill="rgb(240,68,47)"/><text x="32.2501%" y="191.50">codegen_module</text></g><g><title>codegen_crate (110,894,990 samples, 9.09%)</title><rect x="31.7967%" y="197" width="9.0900%" height="15" fill="rgb(210,16,53)"/><text x="32.0467%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (529,239,465 samples, 43.38%)</title><rect x="40.9085%" y="181" width="43.3816%" height="15" fill="rgb(235,124,12)"/><text x="41.1585%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (508,171,424 samples, 41.65%)</title><rect x="42.6355%" y="165" width="41.6547%" height="15" fill="rgb(224,169,11)"/><text x="42.8855%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (560,245,253 samples, 45.92%)</title><rect x="40.8867%" y="197" width="45.9231%" height="15" fill="rgb(250,166,2)"/><text x="41.1367%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (30,739,935 samples, 2.52%)</title><rect x="84.2901%" y="181" width="2.5197%" height="15" fill="rgb(242,216,29)"/><text x="84.5401%" y="191.50">LL..</text></g><g><title>metadata_register_crate (2,795,098 samples, 0.23%)</title><rect x="90.7216%" y="149" width="0.2291%" height="15" fill="rgb(230,116,27)"/><text x="90.9716%" y="159.50"></text></g><g><title>macro_expand_crate (50,925,080 samples, 4.17%)</title><rect x="86.8753%" y="181" width="4.1743%" height="15" fill="rgb(228,99,48)"/><text x="87.1253%" y="191.50">macro..</text></g><g><title>expand_crate (50,911,120 samples, 4.17%)</title><rect x="86.8765%" y="165" width="4.1732%" height="15" fill="rgb(253,11,6)"/><text x="87.1265%" y="175.50">expan..</text></g><g><title>late_resolve_crate (4,286,643 samples, 0.35%)</title><rect x="91.0859%" y="165" width="0.3514%" height="15" fill="rgb(247,143,39)"/><text x="91.3359%" y="175.50"></text></g><g><title>configure_and_expand (56,741,428 samples, 4.65%)</title><rect x="86.8099%" y="197" width="4.6511%" height="15" fill="rgb(236,97,10)"/><text x="87.0599%" y="207.50">confi..</text></g><g><title>resolve_crate (4,934,979 samples, 0.40%)</title><rect x="91.0564%" y="181" width="0.4045%" height="15" fill="rgb(233,208,19)"/><text x="91.3064%" y="191.50"></text></g><g><title>free_global_ctxt (8,462,075 samples, 0.69%)</title><rect x="91.5981%" y="197" width="0.6936%" height="15" fill="rgb(216,164,2)"/><text x="91.8481%" y="207.50"></text></g><g><title>item_attrs (1,365,164 samples, 0.11%)</title><rect x="93.2570%" y="101" width="0.1119%" height="15" fill="rgb(220,129,5)"/><text x="93.5070%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,304,143 samples, 0.11%)</title><rect x="93.2620%" y="85" width="0.1069%" height="15" fill="rgb(242,17,10)"/><text x="93.5120%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,278,970 samples, 0.19%)</title><rect x="93.2219%" y="117" width="0.1868%" height="15" fill="rgb(242,107,0)"/><text x="93.4719%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,113,360 samples, 0.26%)</title><rect x="93.7765%" y="101" width="0.2552%" height="15" fill="rgb(251,28,31)"/><text x="94.0265%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,900,621 samples, 0.24%)</title><rect x="94.0317%" y="101" width="0.2378%" height="15" fill="rgb(233,223,10)"/><text x="94.2817%" y="111.50"></text></g><g><title>optimized_mir (9,808,872 samples, 0.80%)</title><rect x="93.5056%" y="117" width="0.8040%" height="15" fill="rgb(215,21,27)"/><text x="93.7556%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,677,830 samples, 0.30%)</title><rect x="94.4359%" y="101" width="0.3015%" height="15" fill="rgb(232,23,21)"/><text x="94.6859%" y="111.50"></text></g><g><title>resolve_instance (7,066,567 samples, 0.58%)</title><rect x="94.3097%" y="117" width="0.5792%" height="15" fill="rgb(244,5,23)"/><text x="94.5597%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,299,499 samples, 0.11%)</title><rect x="94.9609%" y="117" width="0.1065%" height="15" fill="rgb(226,81,46)"/><text x="95.2109%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (27,627,206 samples, 2.26%)</title><rect x="92.8956%" y="133" width="2.2646%" height="15" fill="rgb(247,70,30)"/><text x="93.1456%" y="143.50">m..</text></g><g><title>monomorphization_collector (27,820,828 samples, 2.28%)</title><rect x="92.8952%" y="149" width="2.2805%" height="15" fill="rgb(212,68,19)"/><text x="93.1452%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (3,200,052 samples, 0.26%)</title><rect x="95.1761%" y="133" width="0.2623%" height="15" fill="rgb(240,187,13)"/><text x="95.4261%" y="143.50"></text></g><g><title>symbol_name (2,888,351 samples, 0.24%)</title><rect x="95.2016%" y="117" width="0.2368%" height="15" fill="rgb(223,113,26)"/><text x="95.4516%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (32,616,966 samples, 2.67%)</title><rect x="92.8912%" y="165" width="2.6736%" height="15" fill="rgb(206,192,2)"/><text x="93.1412%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (4,746,797 samples, 0.39%)</title><rect x="95.1757%" y="149" width="0.3891%" height="15" fill="rgb(241,108,4)"/><text x="95.4257%" y="159.50"></text></g><g><title>cgu_partitioning (1,542,075 samples, 0.13%)</title><rect x="95.4384%" y="133" width="0.1264%" height="15" fill="rgb(247,173,49)"/><text x="95.6884%" y="143.50"></text></g><g><title>exported_symbols (33,252,613 samples, 2.73%)</title><rect x="92.8802%" y="181" width="2.7257%" height="15" fill="rgb(224,114,35)"/><text x="93.1302%" y="191.50">ex..</text></g><g><title>layout_of (1,852,634 samples, 0.15%)</title><rect x="96.3529%" y="165" width="0.1519%" height="15" fill="rgb(245,159,27)"/><text x="96.6029%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,430,328 samples, 0.69%)</title><rect x="96.5048%" y="165" width="0.6910%" height="15" fill="rgb(245,172,44)"/><text x="96.7548%" y="175.50"></text></g><g><title>optimized_mir (19,298,132 samples, 1.58%)</title><rect x="95.6275%" y="181" width="1.5819%" height="15" fill="rgb(236,23,11)"/><text x="95.8775%" y="191.50"></text></g><g><title>generate_crate_metadata (60,426,025 samples, 4.95%)</title><rect x="92.2917%" y="197" width="4.9531%" height="15" fill="rgb(205,117,38)"/><text x="92.5417%" y="207.50">genera..</text></g><g><title>hir_lowering (8,928,870 samples, 0.73%)</title><rect x="97.2448%" y="197" width="0.7319%" height="15" fill="rgb(237,72,25)"/><text x="97.4948%" y="207.50"></text></g><g><title>finish_ongoing_codegen (16,356,444 samples, 1.34%)</title><rect x="97.9780%" y="181" width="1.3407%" height="15" fill="rgb(244,70,9)"/><text x="98.2280%" y="191.50"></text></g><g><title>link_crate (3,883,189 samples, 0.32%)</title><rect x="99.3188%" y="181" width="0.3183%" height="15" fill="rgb(217,125,39)"/><text x="99.5688%" y="191.50"></text></g><g><title>link_binary (3,788,008 samples, 0.31%)</title><rect x="99.3266%" y="165" width="0.3105%" height="15" fill="rgb(235,36,10)"/><text x="99.5766%" y="175.50"></text></g><g><title>link_rlib (3,033,861 samples, 0.25%)</title><rect x="99.3884%" y="149" width="0.2487%" height="15" fill="rgb(251,123,47)"/><text x="99.6384%" y="159.50"></text></g><g><title>link (20,266,203 samples, 1.66%)</title><rect x="97.9767%" y="197" width="1.6612%" height="15" fill="rgb(221,13,13)"/><text x="98.2267%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (3,091,231 samples, 0.25%)</title><rect x="99.6912%" y="197" width="0.2534%" height="15" fill="rgb(238,131,9)"/><text x="99.9412%" y="207.50"></text></g><g><title>all (1,219,962,967 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,219,962,967 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>