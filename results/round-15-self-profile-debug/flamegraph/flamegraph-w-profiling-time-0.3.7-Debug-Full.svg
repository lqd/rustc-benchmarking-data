<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (131,053,838 samples, 10.16%)</title><rect x="0.1050%" y="165" width="10.1576%" height="15" fill="rgb(227,0,7)"/><text x="0.3550%" y="175.50">LLVM_passes</text></g><g><title>resolve_instance (3,198,063 samples, 0.25%)</title><rect x="16.4543%" y="53" width="0.2479%" height="15" fill="rgb(217,0,24)"/><text x="16.7043%" y="63.50"></text></g><g><title>thir_body (3,702,232 samples, 0.29%)</title><rect x="16.7106%" y="53" width="0.2869%" height="15" fill="rgb(221,193,54)"/><text x="16.9606%" y="63.50"></text></g><g><title>mir_const (22,511,773 samples, 1.74%)</title><rect x="15.2579%" y="101" width="1.7448%" height="15" fill="rgb(248,212,6)"/><text x="15.5079%" y="111.50"></text></g><g><title>unsafety_check_result (19,200,180 samples, 1.49%)</title><rect x="15.5146%" y="85" width="1.4882%" height="15" fill="rgb(208,68,35)"/><text x="15.7646%" y="95.50"></text></g><g><title>mir_built (17,255,384 samples, 1.34%)</title><rect x="15.6653%" y="69" width="1.3374%" height="15" fill="rgb(232,128,0)"/><text x="15.9153%" y="79.50"></text></g><g><title>thir_body (3,611,933 samples, 0.28%)</title><rect x="18.2831%" y="37" width="0.2800%" height="15" fill="rgb(207,160,47)"/><text x="18.5331%" y="47.50"></text></g><g><title>mir_const (16,966,546 samples, 1.32%)</title><rect x="17.2515%" y="85" width="1.3150%" height="15" fill="rgb(228,23,34)"/><text x="17.5015%" y="95.50"></text></g><g><title>unsafety_check_result (14,346,898 samples, 1.11%)</title><rect x="17.4545%" y="69" width="1.1120%" height="15" fill="rgb(218,30,26)"/><text x="17.7045%" y="79.50"></text></g><g><title>mir_built (12,956,565 samples, 1.00%)</title><rect x="17.5623%" y="53" width="1.0042%" height="15" fill="rgb(220,122,19)"/><text x="17.8123%" y="63.50"></text></g><g><title>mir_promoted (47,807,577 samples, 3.71%)</title><rect x="14.8790%" y="117" width="3.7054%" height="15" fill="rgb(250,228,42)"/><text x="15.1290%" y="127.50">mir_..</text></g><g><title>mir_const_qualif (20,407,075 samples, 1.58%)</title><rect x="17.0028%" y="101" width="1.5817%" height="15" fill="rgb(240,193,28)"/><text x="17.2528%" y="111.50"></text></g><g><title>type_op_prove_predicate (3,650,773 samples, 0.28%)</title><rect x="18.7736%" y="117" width="0.2830%" height="15" fill="rgb(216,20,37)"/><text x="19.0236%" y="127.50"></text></g><g><title>MIR_borrow_checking (112,104,324 samples, 8.69%)</title><rect x="10.3687%" y="149" width="8.6889%" height="15" fill="rgb(206,188,39)"/><text x="10.6187%" y="159.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (111,246,378 samples, 8.62%)</title><rect x="10.4352%" y="133" width="8.6224%" height="15" fill="rgb(217,207,13)"/><text x="10.6852%" y="143.50">mir_borrowck</text></g><g><title>MIR_effect_checking (9,537,283 samples, 0.74%)</title><rect x="19.0575%" y="149" width="0.7392%" height="15" fill="rgb(231,73,38)"/><text x="19.3075%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,060,555 samples, 0.70%)</title><rect x="19.0945%" y="133" width="0.7023%" height="15" fill="rgb(225,20,46)"/><text x="19.3445%" y="143.50"></text></g><g><title>check_mod_attrs (2,618,167 samples, 0.20%)</title><rect x="19.8870%" y="133" width="0.2029%" height="15" fill="rgb(210,31,41)"/><text x="20.1370%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,395,865 samples, 0.11%)</title><rect x="20.1726%" y="133" width="0.1082%" height="15" fill="rgb(221,200,47)"/><text x="20.4226%" y="143.50"></text></g><g><title>misc_checking_1 (5,324,947 samples, 0.41%)</title><rect x="19.8829%" y="149" width="0.4127%" height="15" fill="rgb(226,26,5)"/><text x="20.1329%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (2,206,094 samples, 0.17%)</title><rect x="20.2958%" y="133" width="0.1710%" height="15" fill="rgb(249,33,26)"/><text x="20.5458%" y="143.50"></text></g><g><title>check_mod_liveness (1,713,298 samples, 0.13%)</title><rect x="20.3340%" y="117" width="0.1328%" height="15" fill="rgb(235,183,28)"/><text x="20.5840%" y="127.50"></text></g><g><title>misc_checking_2 (5,549,840 samples, 0.43%)</title><rect x="20.2957%" y="149" width="0.4302%" height="15" fill="rgb(221,5,38)"/><text x="20.5457%" y="159.50"></text></g><g><title>match_checking (3,342,006 samples, 0.26%)</title><rect x="20.4668%" y="133" width="0.2590%" height="15" fill="rgb(247,18,42)"/><text x="20.7168%" y="143.50"></text></g><g><title>check_match (3,113,695 samples, 0.24%)</title><rect x="20.4845%" y="117" width="0.2413%" height="15" fill="rgb(241,131,45)"/><text x="20.7345%" y="127.50"></text></g><g><title>death_checking (2,232,524 samples, 0.17%)</title><rect x="20.8163%" y="133" width="0.1730%" height="15" fill="rgb(249,31,29)"/><text x="21.0663%" y="143.50"></text></g><g><title>crate_lints (5,789,272 samples, 0.45%)</title><rect x="20.9896%" y="117" width="0.4487%" height="15" fill="rgb(225,111,53)"/><text x="21.2396%" y="127.50"></text></g><g><title>lint_checking (8,181,528 samples, 0.63%)</title><rect x="20.9894%" y="133" width="0.6341%" height="15" fill="rgb(238,160,17)"/><text x="21.2394%" y="143.50"></text></g><g><title>module_lints (2,390,096 samples, 0.19%)</title><rect x="21.4383%" y="117" width="0.1852%" height="15" fill="rgb(214,148,48)"/><text x="21.6883%" y="127.50"></text></g><g><title>lint_mod (2,373,806 samples, 0.18%)</title><rect x="21.4395%" y="101" width="0.1840%" height="15" fill="rgb(232,36,49)"/><text x="21.6895%" y="111.50"></text></g><g><title>privacy_access_levels (2,365,955 samples, 0.18%)</title><rect x="21.6235%" y="133" width="0.1834%" height="15" fill="rgb(209,103,24)"/><text x="21.8735%" y="143.50"></text></g><g><title>privacy_checking_modules (3,838,081 samples, 0.30%)</title><rect x="21.8069%" y="133" width="0.2975%" height="15" fill="rgb(229,88,8)"/><text x="22.0569%" y="143.50"></text></g><g><title>check_mod_privacy (3,825,301 samples, 0.30%)</title><rect x="21.8079%" y="117" width="0.2965%" height="15" fill="rgb(213,181,19)"/><text x="22.0579%" y="127.50"></text></g><g><title>misc_checking_3 (17,835,711 samples, 1.38%)</title><rect x="20.7258%" y="149" width="1.3824%" height="15" fill="rgb(254,191,54)"/><text x="20.9758%" y="159.50"></text></g><g><title>impl_parent (3,633,914 samples, 0.28%)</title><rect x="22.7627%" y="85" width="0.2817%" height="15" fill="rgb(241,83,37)"/><text x="23.0127%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,914,626 samples, 0.15%)</title><rect x="22.8959%" y="69" width="0.1484%" height="15" fill="rgb(233,36,39)"/><text x="23.1459%" y="79.50"></text></g><g><title>impl_trait_ref (7,019,209 samples, 0.54%)</title><rect x="23.0444%" y="85" width="0.5440%" height="15" fill="rgb(226,3,54)"/><text x="23.2944%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,476,169 samples, 0.42%)</title><rect x="23.1640%" y="69" width="0.4244%" height="15" fill="rgb(245,192,40)"/><text x="23.4140%" y="79.50"></text></g><g><title>trait_impls_of (1,347,813 samples, 0.10%)</title><rect x="23.5971%" y="85" width="0.1045%" height="15" fill="rgb(238,167,29)"/><text x="23.8471%" y="95.50"></text></g><g><title>coherent_trait (19,881,082 samples, 1.54%)</title><rect x="22.1609%" y="117" width="1.5409%" height="15" fill="rgb(232,182,51)"/><text x="22.4109%" y="127.50"></text></g><g><title>specialization_graph_of (19,250,555 samples, 1.49%)</title><rect x="22.2097%" y="101" width="1.4921%" height="15" fill="rgb(231,60,39)"/><text x="22.4597%" y="111.50"></text></g><g><title>coherence_checking (20,170,596 samples, 1.56%)</title><rect x="22.1584%" y="133" width="1.5634%" height="15" fill="rgb(208,69,12)"/><text x="22.4084%" y="143.50"></text></g><g><title>specializes (1,805,985 samples, 0.14%)</title><rect x="32.1292%" y="69" width="0.1400%" height="15" fill="rgb(235,93,37)"/><text x="32.3792%" y="79.50"></text></g><g><title>evaluate_obligation (10,548,615 samples, 0.82%)</title><rect x="31.4823%" y="85" width="0.8176%" height="15" fill="rgb(213,116,39)"/><text x="31.7323%" y="95.50"></text></g><g><title>typeck (3,940,183 samples, 0.31%)</title><rect x="32.5042%" y="85" width="0.3054%" height="15" fill="rgb(222,207,29)"/><text x="32.7542%" y="95.50"></text></g><g><title>item_bodies_checking (117,224,710 samples, 9.09%)</title><rect x="23.7415%" y="133" width="9.0857%" height="15" fill="rgb(206,96,30)"/><text x="23.9915%" y="143.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (117,221,570 samples, 9.09%)</title><rect x="23.7417%" y="117" width="9.0855%" height="15" fill="rgb(218,138,4)"/><text x="23.9917%" y="127.50">typeck_item_b..</text></g><g><title>typeck (116,584,933 samples, 9.04%)</title><rect x="23.7911%" y="101" width="9.0362%" height="15" fill="rgb(250,191,14)"/><text x="24.0411%" y="111.50">typeck</text></g><g><title>item_types_checking (6,993,105 samples, 0.54%)</title><rect x="32.8273%" y="133" width="0.5420%" height="15" fill="rgb(239,60,40)"/><text x="33.0773%" y="143.50"></text></g><g><title>check_mod_item_types (6,976,015 samples, 0.54%)</title><rect x="32.8286%" y="117" width="0.5407%" height="15" fill="rgb(206,27,48)"/><text x="33.0786%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,517,528 samples, 0.20%)</title><rect x="33.5153%" y="101" width="0.1951%" height="15" fill="rgb(225,35,8)"/><text x="33.7653%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,497,358 samples, 0.19%)</title><rect x="33.5169%" y="85" width="0.1936%" height="15" fill="rgb(250,213,24)"/><text x="33.7669%" y="95.50"></text></g><g><title>eval_to_allocation_raw (2,470,678 samples, 0.19%)</title><rect x="33.5190%" y="69" width="0.1915%" height="15" fill="rgb(247,123,22)"/><text x="33.7690%" y="79.50"></text></g><g><title>fn_sig (2,408,900 samples, 0.19%)</title><rect x="33.7105%" y="101" width="0.1867%" height="15" fill="rgb(231,138,38)"/><text x="33.9605%" y="111.50"></text></g><g><title>named_region_map (2,269,031 samples, 0.18%)</title><rect x="33.9496%" y="85" width="0.1759%" height="15" fill="rgb(231,145,46)"/><text x="34.1996%" y="95.50"></text></g><g><title>resolve_lifetimes (2,180,830 samples, 0.17%)</title><rect x="33.9565%" y="69" width="0.1690%" height="15" fill="rgb(251,118,11)"/><text x="34.2065%" y="79.50"></text></g><g><title>generics_of (3,026,542 samples, 0.23%)</title><rect x="33.8972%" y="101" width="0.2346%" height="15" fill="rgb(217,147,25)"/><text x="34.1472%" y="111.50"></text></g><g><title>predicates_of (1,768,604 samples, 0.14%)</title><rect x="34.1707%" y="101" width="0.1371%" height="15" fill="rgb(247,81,37)"/><text x="34.4207%" y="111.50"></text></g><g><title>predicates_defined_on (1,417,311 samples, 0.11%)</title><rect x="34.1979%" y="85" width="0.1099%" height="15" fill="rgb(209,12,38)"/><text x="34.4479%" y="95.50"></text></g><g><title>type_collecting (12,582,736 samples, 0.98%)</title><rect x="33.3699%" y="133" width="0.9753%" height="15" fill="rgb(227,1,9)"/><text x="33.6199%" y="143.50"></text></g><g><title>collect_mod_item_types (12,562,306 samples, 0.97%)</title><rect x="33.3715%" y="117" width="0.9737%" height="15" fill="rgb(248,47,43)"/><text x="33.6215%" y="127.50"></text></g><g><title>param_env (1,769,218 samples, 0.14%)</title><rect x="35.2625%" y="101" width="0.1371%" height="15" fill="rgb(221,10,30)"/><text x="35.5125%" y="111.50"></text></g><g><title>region_scope_tree (2,610,290 samples, 0.20%)</title><rect x="35.4056%" y="101" width="0.2023%" height="15" fill="rgb(210,229,1)"/><text x="35.6556%" y="111.50"></text></g><g><title>check_impl_item_well_formed (15,238,502 samples, 1.18%)</title><rect x="34.4330%" y="117" width="1.1811%" height="15" fill="rgb(222,148,37)"/><text x="34.6830%" y="127.50"></text></g><g><title>evaluate_obligation (2,403,788 samples, 0.19%)</title><rect x="36.0008%" y="101" width="0.1863%" height="15" fill="rgb(234,67,33)"/><text x="36.2508%" y="111.50"></text></g><g><title>check_item_well_formed (9,161,788 samples, 0.71%)</title><rect x="35.6141%" y="117" width="0.7101%" height="15" fill="rgb(247,98,35)"/><text x="35.8641%" y="127.50"></text></g><g><title>analysis (336,568,256 samples, 26.09%)</title><rect x="10.2626%" y="165" width="26.0864%" height="15" fill="rgb(247,138,52)"/><text x="10.5126%" y="175.50">analysis</text></g><g><title>type_check_crate (183,736,204 samples, 14.24%)</title><rect x="22.1082%" y="149" width="14.2409%" height="15" fill="rgb(213,79,30)"/><text x="22.3582%" y="159.50">type_check_crate</text></g><g><title>wf_checking (25,810,427 samples, 2.00%)</title><rect x="34.3486%" y="133" width="2.0005%" height="15" fill="rgb(246,177,23)"/><text x="34.5986%" y="143.50">w..</text></g><g><title>const_caller_location (3,440,266 samples, 0.27%)</title><rect x="41.3102%" y="133" width="0.2666%" height="15" fill="rgb(230,62,27)"/><text x="41.5602%" y="143.50"></text></g><g><title>layout_of (2,872,970 samples, 0.22%)</title><rect x="42.0082%" y="117" width="0.2227%" height="15" fill="rgb(216,154,8)"/><text x="42.2582%" y="127.50"></text></g><g><title>param_env (2,132,307 samples, 0.17%)</title><rect x="42.2309%" y="117" width="0.1653%" height="15" fill="rgb(244,35,45)"/><text x="42.4809%" y="127.50"></text></g><g><title>fn_abi_of_instance (11,289,694 samples, 0.88%)</title><rect x="41.5819%" y="133" width="0.8750%" height="15" fill="rgb(251,115,12)"/><text x="41.8319%" y="143.50"></text></g><g><title>codegen_module (78,172,330 samples, 6.06%)</title><rect x="36.5624%" y="149" width="6.0589%" height="15" fill="rgb(240,54,50)"/><text x="36.8124%" y="159.50">codegen_..</text></g><g><title>codegen_crate (80,999,321 samples, 6.28%)</title><rect x="36.3497%" y="165" width="6.2780%" height="15" fill="rgb(233,84,52)"/><text x="36.5997%" y="175.50">codegen_..</text></g><g><title>LLVM_module_codegen (504,286,701 samples, 39.09%)</title><rect x="42.6444%" y="149" width="39.0858%" height="15" fill="rgb(207,117,47)"/><text x="42.8944%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (496,499,904 samples, 38.48%)</title><rect x="43.2479%" y="133" width="38.4823%" height="15" fill="rgb(249,43,39)"/><text x="43.4979%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (520,169,773 samples, 40.32%)</title><rect x="42.6277%" y="165" width="40.3169%" height="15" fill="rgb(209,38,44)"/><text x="42.8777%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (15,668,179 samples, 1.21%)</title><rect x="81.7302%" y="149" width="1.2144%" height="15" fill="rgb(236,212,23)"/><text x="81.9802%" y="159.50"></text></g><g><title>metadata_register_crate (2,387,065 samples, 0.19%)</title><rect x="87.7089%" y="117" width="0.1850%" height="15" fill="rgb(242,79,21)"/><text x="87.9589%" y="127.50"></text></g><g><title>macro_expand_crate (64,521,684 samples, 5.00%)</title><rect x="83.0419%" y="149" width="5.0009%" height="15" fill="rgb(211,96,35)"/><text x="83.2919%" y="159.50">macro_..</text></g><g><title>expand_crate (64,509,423 samples, 5.00%)</title><rect x="83.0428%" y="133" width="4.9999%" height="15" fill="rgb(253,215,40)"/><text x="83.2928%" y="143.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (1,919,898 samples, 0.15%)</title><rect x="87.8939%" y="117" width="0.1488%" height="15" fill="rgb(211,81,21)"/><text x="88.1439%" y="127.50"></text></g><g><title>late_resolve_crate (7,053,356 samples, 0.55%)</title><rect x="88.1234%" y="133" width="0.5467%" height="15" fill="rgb(208,190,38)"/><text x="88.3734%" y="143.50"></text></g><g><title>configure_and_expand (74,649,952 samples, 5.79%)</title><rect x="82.9446%" y="165" width="5.7859%" height="15" fill="rgb(235,213,38)"/><text x="83.1946%" y="175.50">configu..</text></g><g><title>resolve_crate (8,597,292 samples, 0.67%)</title><rect x="88.0641%" y="149" width="0.6664%" height="15" fill="rgb(237,122,38)"/><text x="88.3141%" y="159.50"></text></g><g><title>early_lint_checks (2,809,660 samples, 0.22%)</title><rect x="88.8247%" y="165" width="0.2178%" height="15" fill="rgb(244,218,35)"/><text x="89.0747%" y="175.50"></text></g><g><title>free_global_ctxt (8,624,153 samples, 0.67%)</title><rect x="89.0425%" y="165" width="0.6684%" height="15" fill="rgb(240,68,47)"/><text x="89.2925%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,244,225 samples, 0.56%)</title><rect x="92.2977%" y="69" width="0.5615%" height="15" fill="rgb(210,16,53)"/><text x="92.5477%" y="79.50"></text></g><g><title>optimized_mir (29,492,010 samples, 2.29%)</title><rect x="90.6760%" y="85" width="2.2858%" height="15" fill="rgb(235,124,12)"/><text x="90.9260%" y="95.50">o..</text></g><g><title>codegen_fulfill_obligation (1,975,040 samples, 0.15%)</title><rect x="93.0250%" y="69" width="0.1531%" height="15" fill="rgb(224,169,11)"/><text x="93.2750%" y="79.50"></text></g><g><title>resolve_instance (3,363,857 samples, 0.26%)</title><rect x="92.9618%" y="85" width="0.2607%" height="15" fill="rgb(250,166,2)"/><text x="93.2118%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (38,176,519 samples, 2.96%)</title><rect x="90.3620%" y="101" width="2.9590%" height="15" fill="rgb(242,216,29)"/><text x="90.6120%" y="111.50">mon..</text></g><g><title>monomorphization_collector (38,695,585 samples, 3.00%)</title><rect x="90.3618%" y="117" width="2.9992%" height="15" fill="rgb(230,116,27)"/><text x="90.6118%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,504,547 samples, 0.19%)</title><rect x="93.3614%" y="101" width="0.1941%" height="15" fill="rgb(228,99,48)"/><text x="93.6114%" y="111.50"></text></g><g><title>symbol_name (2,207,456 samples, 0.17%)</title><rect x="93.3844%" y="85" width="0.1711%" height="15" fill="rgb(253,11,6)"/><text x="93.6344%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (42,490,696 samples, 3.29%)</title><rect x="90.3586%" y="133" width="3.2933%" height="15" fill="rgb(247,143,39)"/><text x="90.6086%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,753,741 samples, 0.29%)</title><rect x="93.3610%" y="117" width="0.2909%" height="15" fill="rgb(236,97,10)"/><text x="93.6110%" y="127.50"></text></g><g><title>exported_symbols (43,410,595 samples, 3.36%)</title><rect x="90.3464%" y="149" width="3.3646%" height="15" fill="rgb(233,208,19)"/><text x="90.5964%" y="159.50">exp..</text></g><g><title>mir_for_ctfe (1,713,697 samples, 0.13%)</title><rect x="93.7185%" y="149" width="0.1328%" height="15" fill="rgb(216,164,2)"/><text x="93.9685%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,120,462 samples, 0.24%)</title><rect x="94.1327%" y="133" width="0.2419%" height="15" fill="rgb(220,129,5)"/><text x="94.3827%" y="143.50"></text></g><g><title>optimized_mir (6,642,974 samples, 0.51%)</title><rect x="93.8605%" y="149" width="0.5149%" height="15" fill="rgb(242,17,10)"/><text x="94.1105%" y="159.50"></text></g><g><title>generate_crate_metadata (60,450,190 samples, 4.69%)</title><rect x="89.7109%" y="165" width="4.6853%" height="15" fill="rgb(242,107,0)"/><text x="89.9609%" y="175.50">gener..</text></g><g><title>hir_lowering (17,191,084 samples, 1.33%)</title><rect x="94.3963%" y="165" width="1.3324%" height="15" fill="rgb(251,28,31)"/><text x="94.6463%" y="175.50"></text></g><g><title>finish_ongoing_codegen (45,422,208 samples, 3.52%)</title><rect x="95.7297%" y="149" width="3.5205%" height="15" fill="rgb(233,223,10)"/><text x="95.9797%" y="159.50">fin..</text></g><g><title>link_crate (3,656,770 samples, 0.28%)</title><rect x="99.2502%" y="149" width="0.2834%" height="15" fill="rgb(215,21,27)"/><text x="99.5002%" y="159.50"></text></g><g><title>link_binary (3,533,688 samples, 0.27%)</title><rect x="99.2598%" y="133" width="0.2739%" height="15" fill="rgb(232,23,21)"/><text x="99.5098%" y="143.50"></text></g><g><title>link_rlib (2,807,110 samples, 0.22%)</title><rect x="99.3161%" y="117" width="0.2176%" height="15" fill="rgb(244,5,23)"/><text x="99.5661%" y="127.50"></text></g><g><title>link (49,099,768 samples, 3.81%)</title><rect x="95.7287%" y="165" width="3.8056%" height="15" fill="rgb(226,81,46)"/><text x="95.9787%" y="175.50">link</text></g><g><title>parse_crate (1,425,685 samples, 0.11%)</title><rect x="99.5343%" y="165" width="0.1105%" height="15" fill="rgb(247,70,30)"/><text x="99.7843%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (3,399,586 samples, 0.26%)</title><rect x="99.6643%" y="165" width="0.2635%" height="15" fill="rgb(212,68,19)"/><text x="99.9143%" y="175.50"></text></g><g><title>all (1,290,204,156 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,290,204,156 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>