<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (74,183,396 samples, 12.76%)</title><rect x="0.1331%" y="197" width="12.7575%" height="15" fill="rgb(227,0,7)"/><text x="0.3831%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (909,491 samples, 0.16%)</title><rect x="15.3066%" y="85" width="0.1564%" height="15" fill="rgb(217,0,24)"/><text x="15.5566%" y="95.50"></text></g><g><title>is_copy_raw (646,638 samples, 0.11%)</title><rect x="15.3519%" y="69" width="0.1112%" height="15" fill="rgb(221,193,54)"/><text x="15.6019%" y="79.50"></text></g><g><title>specialization_graph_of (1,473,134 samples, 0.25%)</title><rect x="15.5925%" y="69" width="0.2533%" height="15" fill="rgb(248,212,6)"/><text x="15.8425%" y="79.50"></text></g><g><title>resolve_instance (2,292,194 samples, 0.39%)</title><rect x="15.4677%" y="85" width="0.3942%" height="15" fill="rgb(208,68,35)"/><text x="15.7177%" y="95.50"></text></g><g><title>thir_body (819,167 samples, 0.14%)</title><rect x="15.8655%" y="85" width="0.1409%" height="15" fill="rgb(232,128,0)"/><text x="16.1155%" y="95.50"></text></g><g><title>mir_const (7,934,845 samples, 1.36%)</title><rect x="14.6442%" y="133" width="1.3646%" height="15" fill="rgb(207,160,47)"/><text x="14.8942%" y="143.50"></text></g><g><title>unsafety_check_result (7,017,430 samples, 1.21%)</title><rect x="14.8020%" y="117" width="1.2068%" height="15" fill="rgb(228,23,34)"/><text x="15.0520%" y="127.50"></text></g><g><title>mir_built (6,353,562 samples, 1.09%)</title><rect x="14.9161%" y="101" width="1.0926%" height="15" fill="rgb(218,30,26)"/><text x="15.1661%" y="111.50"></text></g><g><title>mir_promoted (8,733,076 samples, 1.50%)</title><rect x="14.5292%" y="149" width="1.5019%" height="15" fill="rgb(220,122,19)"/><text x="14.7792%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,318,655 samples, 0.23%)</title><rect x="16.1348%" y="149" width="0.2268%" height="15" fill="rgb(250,228,42)"/><text x="16.3848%" y="159.50"></text></g><g><title>MIR_borrow_checking (19,693,858 samples, 3.39%)</title><rect x="12.9761%" y="181" width="3.3868%" height="15" fill="rgb(240,193,28)"/><text x="13.2261%" y="191.50">MIR..</text></g><g><title>mir_borrowck (19,582,228 samples, 3.37%)</title><rect x="12.9953%" y="165" width="3.3676%" height="15" fill="rgb(216,20,37)"/><text x="13.2453%" y="175.50">mir..</text></g><g><title>codegen_fn_attrs (815,768 samples, 0.14%)</title><rect x="16.5210%" y="149" width="0.1403%" height="15" fill="rgb(206,188,39)"/><text x="16.7710%" y="159.50"></text></g><g><title>should_inherit_track_caller (713,735 samples, 0.12%)</title><rect x="16.5385%" y="133" width="0.1227%" height="15" fill="rgb(217,207,13)"/><text x="16.7885%" y="143.50"></text></g><g><title>check_mod_attrs (1,241,943 samples, 0.21%)</title><rect x="16.4478%" y="165" width="0.2136%" height="15" fill="rgb(231,73,38)"/><text x="16.6978%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (704,257 samples, 0.12%)</title><rect x="16.7188%" y="165" width="0.1211%" height="15" fill="rgb(225,20,46)"/><text x="16.9688%" y="175.50"></text></g><g><title>misc_checking_1 (2,390,424 samples, 0.41%)</title><rect x="16.4430%" y="181" width="0.4111%" height="15" fill="rgb(210,31,41)"/><text x="16.6930%" y="191.50"></text></g><g><title>misc_checking_2 (688,287 samples, 0.12%)</title><rect x="16.8541%" y="181" width="0.1184%" height="15" fill="rgb(221,200,47)"/><text x="17.1041%" y="191.50"></text></g><g><title>death_checking (824,648 samples, 0.14%)</title><rect x="17.0033%" y="165" width="0.1418%" height="15" fill="rgb(226,26,5)"/><text x="17.2533%" y="175.50"></text></g><g><title>crate_lints (1,749,888 samples, 0.30%)</title><rect x="17.1453%" y="149" width="0.3009%" height="15" fill="rgb(249,33,26)"/><text x="17.3953%" y="159.50"></text></g><g><title>type_of (1,056,231 samples, 0.18%)</title><rect x="17.2646%" y="133" width="0.1816%" height="15" fill="rgb(235,183,28)"/><text x="17.5146%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (821,609 samples, 0.14%)</title><rect x="17.3050%" y="117" width="0.1413%" height="15" fill="rgb(221,5,38)"/><text x="17.5550%" y="127.50"></text></g><g><title>lint_checking (2,019,201 samples, 0.35%)</title><rect x="17.1451%" y="165" width="0.3472%" height="15" fill="rgb(247,18,42)"/><text x="17.3951%" y="175.50"></text></g><g><title>privacy_checking_modules (596,766 samples, 0.10%)</title><rect x="17.5313%" y="165" width="0.1026%" height="15" fill="rgb(241,131,45)"/><text x="17.7813%" y="175.50"></text></g><g><title>check_mod_privacy (595,386 samples, 0.10%)</title><rect x="17.5316%" y="149" width="0.1024%" height="15" fill="rgb(249,31,29)"/><text x="17.7816%" y="159.50"></text></g><g><title>misc_checking_3 (3,866,289 samples, 0.66%)</title><rect x="16.9725%" y="181" width="0.6649%" height="15" fill="rgb(225,111,53)"/><text x="17.2225%" y="191.50"></text></g><g><title>impl_parent (4,030,540 samples, 0.69%)</title><rect x="18.8226%" y="117" width="0.6931%" height="15" fill="rgb(238,160,17)"/><text x="19.0726%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,056,157 samples, 0.35%)</title><rect x="19.1621%" y="101" width="0.3536%" height="15" fill="rgb(214,148,48)"/><text x="19.4121%" y="111.50"></text></g><g><title>impl_trait_ref (8,498,549 samples, 1.46%)</title><rect x="19.5158%" y="117" width="1.4615%" height="15" fill="rgb(232,36,49)"/><text x="19.7658%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,937,965 samples, 1.19%)</title><rect x="19.7841%" y="101" width="1.1931%" height="15" fill="rgb(209,103,24)"/><text x="20.0341%" y="111.50"></text></g><g><title>trait_impls_of (1,498,367 samples, 0.26%)</title><rect x="20.9821%" y="117" width="0.2577%" height="15" fill="rgb(229,88,8)"/><text x="21.2321%" y="127.50"></text></g><g><title>coherent_trait (20,868,821 samples, 3.59%)</title><rect x="17.6510%" y="149" width="3.5889%" height="15" fill="rgb(213,181,19)"/><text x="17.9010%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (20,295,096 samples, 3.49%)</title><rect x="17.7497%" y="133" width="3.4902%" height="15" fill="rgb(254,191,54)"/><text x="17.9997%" y="143.50">spe..</text></g><g><title>coherence_checking (21,004,582 samples, 3.61%)</title><rect x="17.6462%" y="165" width="3.6122%" height="15" fill="rgb(241,83,37)"/><text x="17.8962%" y="175.50">cohe..</text></g><g><title>associated_item (663,999 samples, 0.11%)</title><rect x="23.9563%" y="101" width="0.1142%" height="15" fill="rgb(233,36,39)"/><text x="24.2063%" y="111.50"></text></g><g><title>associated_items (856,401 samples, 0.15%)</title><rect x="23.9276%" y="117" width="0.1473%" height="15" fill="rgb(226,3,54)"/><text x="24.1776%" y="127.50"></text></g><g><title>mir_for_ctfe (875,135 samples, 0.15%)</title><rect x="24.6288%" y="53" width="0.1505%" height="15" fill="rgb(245,192,40)"/><text x="24.8788%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (865,694 samples, 0.15%)</title><rect x="24.6304%" y="37" width="0.1489%" height="15" fill="rgb(238,167,29)"/><text x="24.8804%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,793,259 samples, 0.31%)</title><rect x="24.4758%" y="101" width="0.3084%" height="15" fill="rgb(232,182,51)"/><text x="24.7258%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,742,867 samples, 0.30%)</title><rect x="24.4845%" y="85" width="0.2997%" height="15" fill="rgb(231,60,39)"/><text x="24.7345%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,701,396 samples, 0.29%)</title><rect x="24.4916%" y="69" width="0.2926%" height="15" fill="rgb(208,69,12)"/><text x="24.7416%" y="79.50"></text></g><g><title>evaluate_obligation (4,717,290 samples, 0.81%)</title><rect x="24.1769%" y="117" width="0.8112%" height="15" fill="rgb(235,93,37)"/><text x="24.4269%" y="127.50"></text></g><g><title>typeck (694,887 samples, 0.12%)</title><rect x="25.3200%" y="117" width="0.1195%" height="15" fill="rgb(213,116,39)"/><text x="25.5700%" y="127.50"></text></g><g><title>item_bodies_checking (24,303,685 samples, 4.18%)</title><rect x="21.2710%" y="165" width="4.1796%" height="15" fill="rgb(222,207,29)"/><text x="21.5210%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (24,300,515 samples, 4.18%)</title><rect x="21.2716%" y="149" width="4.1790%" height="15" fill="rgb(206,96,30)"/><text x="21.5216%" y="159.50">typec..</text></g><g><title>typeck (24,224,814 samples, 4.17%)</title><rect x="21.2846%" y="133" width="4.1660%" height="15" fill="rgb(218,138,4)"/><text x="21.5346%" y="143.50">typeck</text></g><g><title>item_types_checking (1,083,381 samples, 0.19%)</title><rect x="25.4506%" y="165" width="0.1863%" height="15" fill="rgb(250,191,14)"/><text x="25.7006%" y="175.50"></text></g><g><title>check_mod_item_types (1,080,701 samples, 0.19%)</title><rect x="25.4511%" y="149" width="0.1859%" height="15" fill="rgb(239,60,40)"/><text x="25.7011%" y="159.50"></text></g><g><title>fn_sig (609,555 samples, 0.10%)</title><rect x="25.7316%" y="133" width="0.1048%" height="15" fill="rgb(206,27,48)"/><text x="25.9816%" y="143.50"></text></g><g><title>generics_of (1,216,653 samples, 0.21%)</title><rect x="25.8365%" y="133" width="0.2092%" height="15" fill="rgb(225,35,8)"/><text x="26.0865%" y="143.50"></text></g><g><title>predicates_of (923,936 samples, 0.16%)</title><rect x="26.0799%" y="133" width="0.1589%" height="15" fill="rgb(250,213,24)"/><text x="26.3299%" y="143.50"></text></g><g><title>predicates_defined_on (816,786 samples, 0.14%)</title><rect x="26.0984%" y="117" width="0.1405%" height="15" fill="rgb(247,123,22)"/><text x="26.3484%" y="127.50"></text></g><g><title>type_collecting (3,669,338 samples, 0.63%)</title><rect x="25.6371%" y="165" width="0.6310%" height="15" fill="rgb(231,138,38)"/><text x="25.8871%" y="175.50"></text></g><g><title>collect_mod_item_types (3,657,378 samples, 0.63%)</title><rect x="25.6392%" y="149" width="0.6290%" height="15" fill="rgb(231,145,46)"/><text x="25.8892%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,373,278 samples, 0.41%)</title><rect x="26.2965%" y="149" width="0.4081%" height="15" fill="rgb(251,118,11)"/><text x="26.5465%" y="159.50"></text></g><g><title>analysis (82,331,429 samples, 14.16%)</title><rect x="12.8907%" y="197" width="14.1588%" height="15" fill="rgb(217,147,25)"/><text x="13.1407%" y="207.50">analysis</text></g><g><title>type_check_crate (54,730,211 samples, 9.41%)</title><rect x="17.6373%" y="181" width="9.4121%" height="15" fill="rgb(247,81,37)"/><text x="17.8873%" y="191.50">type_check_cr..</text></g><g><title>wf_checking (4,538,685 samples, 0.78%)</title><rect x="26.2689%" y="165" width="0.7805%" height="15" fill="rgb(209,12,38)"/><text x="26.5189%" y="175.50"></text></g><g><title>check_item_well_formed (2,005,027 samples, 0.34%)</title><rect x="26.7047%" y="149" width="0.3448%" height="15" fill="rgb(227,1,9)"/><text x="26.9547%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (650,125 samples, 0.11%)</title><rect x="35.5722%" y="165" width="0.1118%" height="15" fill="rgb(248,47,43)"/><text x="35.8222%" y="175.50"></text></g><g><title>const_caller_location (986,162 samples, 0.17%)</title><rect x="35.6840%" y="165" width="0.1696%" height="15" fill="rgb(221,10,30)"/><text x="35.9340%" y="175.50"></text></g><g><title>item_attrs (758,079 samples, 0.13%)</title><rect x="36.4339%" y="133" width="0.1304%" height="15" fill="rgb(210,229,1)"/><text x="36.6839%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (730,879 samples, 0.13%)</title><rect x="36.4386%" y="117" width="0.1257%" height="15" fill="rgb(222,148,37)"/><text x="36.6886%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,061,063 samples, 0.18%)</title><rect x="36.3896%" y="149" width="0.1825%" height="15" fill="rgb(234,67,33)"/><text x="36.6396%" y="159.50"></text></g><g><title>layout_of (1,257,202 samples, 0.22%)</title><rect x="36.5969%" y="149" width="0.2162%" height="15" fill="rgb(247,98,35)"/><text x="36.8469%" y="159.50"></text></g><g><title>predicates_of (1,496,192 samples, 0.26%)</title><rect x="37.3250%" y="133" width="0.2573%" height="15" fill="rgb(247,138,52)"/><text x="37.5750%" y="143.50"></text></g><g><title>predicates_defined_on (1,102,266 samples, 0.19%)</title><rect x="37.3928%" y="117" width="0.1896%" height="15" fill="rgb(213,79,30)"/><text x="37.6428%" y="127.50"></text></g><g><title>param_env (4,476,196 samples, 0.77%)</title><rect x="36.8131%" y="149" width="0.7698%" height="15" fill="rgb(246,177,23)"/><text x="37.0631%" y="159.50"></text></g><g><title>normalize_projection_ty (597,055 samples, 0.10%)</title><rect x="37.6433%" y="133" width="0.1027%" height="15" fill="rgb(230,62,27)"/><text x="37.8933%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (954,970 samples, 0.16%)</title><rect x="37.5829%" y="149" width="0.1642%" height="15" fill="rgb(216,154,8)"/><text x="37.8329%" y="159.50"></text></g><g><title>fn_abi_of_instance (11,017,337 samples, 1.89%)</title><rect x="35.8586%" y="165" width="1.8947%" height="15" fill="rgb(244,35,45)"/><text x="36.1086%" y="175.50">f..</text></g><g><title>layout_of (1,074,323 samples, 0.18%)</title><rect x="37.8331%" y="165" width="0.1848%" height="15" fill="rgb(251,115,12)"/><text x="38.0831%" y="175.50"></text></g><g><title>symbol_name (853,984 samples, 0.15%)</title><rect x="38.0211%" y="165" width="0.1469%" height="15" fill="rgb(240,54,50)"/><text x="38.2711%" y="175.50"></text></g><g><title>codegen_module (62,684,637 samples, 10.78%)</title><rect x="27.3994%" y="181" width="10.7801%" height="15" fill="rgb(233,84,52)"/><text x="27.6494%" y="191.50">codegen_module</text></g><g><title>codegen_crate (64,795,081 samples, 11.14%)</title><rect x="27.0514%" y="197" width="11.1430%" height="15" fill="rgb(207,117,47)"/><text x="27.3014%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (269,026,448 samples, 46.27%)</title><rect x="38.2339%" y="181" width="46.2653%" height="15" fill="rgb(249,43,39)"/><text x="38.4839%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (258,273,291 samples, 44.42%)</title><rect x="40.0831%" y="165" width="44.4160%" height="15" fill="rgb(209,38,44)"/><text x="40.3331%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (283,755,017 samples, 48.80%)</title><rect x="38.1944%" y="197" width="48.7982%" height="15" fill="rgb(236,212,23)"/><text x="38.4444%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (14,499,127 samples, 2.49%)</title><rect x="84.4992%" y="181" width="2.4935%" height="15" fill="rgb(242,79,21)"/><text x="84.7492%" y="191.50">LL..</text></g><g><title>macro_expand_crate (17,572,706 samples, 3.02%)</title><rect x="87.0973%" y="181" width="3.0220%" height="15" fill="rgb(211,96,35)"/><text x="87.3473%" y="191.50">mac..</text></g><g><title>expand_crate (17,546,626 samples, 3.02%)</title><rect x="87.1017%" y="165" width="3.0175%" height="15" fill="rgb(253,215,40)"/><text x="87.3517%" y="175.50">exp..</text></g><g><title>metadata_register_crate (2,545,136 samples, 0.44%)</title><rect x="89.6816%" y="149" width="0.4377%" height="15" fill="rgb(211,81,21)"/><text x="89.9316%" y="159.50"></text></g><g><title>metadata_register_crate (932,008 samples, 0.16%)</title><rect x="89.9590%" y="133" width="0.1603%" height="15" fill="rgb(208,190,38)"/><text x="90.2090%" y="143.50"></text></g><g><title>late_resolve_crate (3,189,403 samples, 0.55%)</title><rect x="90.2456%" y="165" width="0.5485%" height="15" fill="rgb(235,213,38)"/><text x="90.4956%" y="175.50"></text></g><g><title>configure_and_expand (22,267,565 samples, 3.83%)</title><rect x="86.9926%" y="197" width="3.8294%" height="15" fill="rgb(237,122,38)"/><text x="87.2426%" y="207.50">conf..</text></g><g><title>resolve_crate (3,851,129 samples, 0.66%)</title><rect x="90.1598%" y="181" width="0.6623%" height="15" fill="rgb(244,218,35)"/><text x="90.4098%" y="191.50"></text></g><g><title>early_lint_checks (601,806 samples, 0.10%)</title><rect x="90.8699%" y="197" width="0.1035%" height="15" fill="rgb(240,68,47)"/><text x="91.1199%" y="207.50"></text></g><g><title>free_global_ctxt (5,696,168 samples, 0.98%)</title><rect x="90.9734%" y="197" width="0.9796%" height="15" fill="rgb(210,16,53)"/><text x="91.2234%" y="207.50"></text></g><g><title>item_attrs (1,097,352 samples, 0.19%)</title><rect x="92.6454%" y="101" width="0.1887%" height="15" fill="rgb(235,124,12)"/><text x="92.8954%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,052,842 samples, 0.18%)</title><rect x="92.6531%" y="85" width="0.1811%" height="15" fill="rgb(224,169,11)"/><text x="92.9031%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,758,676 samples, 0.30%)</title><rect x="92.5938%" y="117" width="0.3024%" height="15" fill="rgb(250,166,2)"/><text x="92.8438%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,150,727 samples, 0.37%)</title><rect x="93.4936%" y="101" width="0.3699%" height="15" fill="rgb(242,216,29)"/><text x="93.7436%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,664,177 samples, 0.29%)</title><rect x="93.8634%" y="101" width="0.2862%" height="15" fill="rgb(230,116,27)"/><text x="94.1134%" y="111.50"></text></g><g><title>optimized_mir (6,952,025 samples, 1.20%)</title><rect x="93.0705%" y="117" width="1.1956%" height="15" fill="rgb(228,99,48)"/><text x="93.3205%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,641,070 samples, 0.45%)</title><rect x="94.4338%" y="101" width="0.4542%" height="15" fill="rgb(253,11,6)"/><text x="94.6838%" y="111.50"></text></g><g><title>resolve_instance (5,140,270 samples, 0.88%)</title><rect x="94.2660%" y="117" width="0.8840%" height="15" fill="rgb(247,143,39)"/><text x="94.5160%" y="127.50"></text></g><g><title>eval_to_const_value_raw (838,287 samples, 0.14%)</title><rect x="95.1616%" y="101" width="0.1442%" height="15" fill="rgb(236,97,10)"/><text x="95.4116%" y="111.50"></text></g><g><title>eval_to_const_value_raw (813,746 samples, 0.14%)</title><rect x="95.1658%" y="85" width="0.1399%" height="15" fill="rgb(233,208,19)"/><text x="95.4158%" y="95.50"></text></g><g><title>eval_to_allocation_raw (782,946 samples, 0.13%)</title><rect x="95.1711%" y="69" width="0.1346%" height="15" fill="rgb(216,164,2)"/><text x="95.4211%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (945,250 samples, 0.16%)</title><rect x="95.1500%" y="117" width="0.1626%" height="15" fill="rgb(220,129,5)"/><text x="95.4000%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (19,118,552 samples, 3.29%)</title><rect x="92.1491%" y="133" width="3.2879%" height="15" fill="rgb(242,17,10)"/><text x="92.3991%" y="143.50">mon..</text></g><g><title>monomorphization_collector (19,182,893 samples, 3.30%)</title><rect x="92.1486%" y="149" width="3.2989%" height="15" fill="rgb(242,107,0)"/><text x="92.3986%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,664,637 samples, 0.29%)</title><rect x="95.4498%" y="133" width="0.2863%" height="15" fill="rgb(251,28,31)"/><text x="95.6998%" y="143.50"></text></g><g><title>symbol_name (1,512,957 samples, 0.26%)</title><rect x="95.4759%" y="117" width="0.2602%" height="15" fill="rgb(233,223,10)"/><text x="95.7259%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (21,778,709 samples, 3.75%)</title><rect x="92.1403%" y="165" width="3.7454%" height="15" fill="rgb(215,21,27)"/><text x="92.3903%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,547,246 samples, 0.44%)</title><rect x="95.4475%" y="149" width="0.4381%" height="15" fill="rgb(232,23,21)"/><text x="95.6975%" y="159.50"></text></g><g><title>cgu_partitioning (869,499 samples, 0.15%)</title><rect x="95.7361%" y="133" width="0.1495%" height="15" fill="rgb(244,5,23)"/><text x="95.9861%" y="143.50"></text></g><g><title>exported_symbols (21,929,911 samples, 3.77%)</title><rect x="92.1291%" y="181" width="3.7714%" height="15" fill="rgb(226,81,46)"/><text x="92.3791%" y="191.50">expo..</text></g><g><title>optimized_mir (1,956,798 samples, 0.34%)</title><rect x="95.9195%" y="181" width="0.3365%" height="15" fill="rgb(247,70,30)"/><text x="96.1695%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (801,197 samples, 0.14%)</title><rect x="96.1183%" y="165" width="0.1378%" height="15" fill="rgb(212,68,19)"/><text x="96.3683%" y="175.50"></text></g><g><title>generate_crate_metadata (25,055,222 samples, 4.31%)</title><rect x="91.9529%" y="197" width="4.3088%" height="15" fill="rgb(240,187,13)"/><text x="92.2029%" y="207.50">gener..</text></g><g><title>hir_lowering (4,875,789 samples, 0.84%)</title><rect x="96.2618%" y="197" width="0.8385%" height="15" fill="rgb(223,113,26)"/><text x="96.5118%" y="207.50"></text></g><g><title>finish_ongoing_codegen (8,751,358 samples, 1.50%)</title><rect x="97.1128%" y="181" width="1.5050%" height="15" fill="rgb(206,192,2)"/><text x="97.3628%" y="191.50"></text></g><g><title>link_crate (2,183,602 samples, 0.38%)</title><rect x="98.6178%" y="181" width="0.3755%" height="15" fill="rgb(241,108,4)"/><text x="98.8678%" y="191.50"></text></g><g><title>link_binary (2,158,152 samples, 0.37%)</title><rect x="98.6222%" y="165" width="0.3711%" height="15" fill="rgb(247,173,49)"/><text x="98.8722%" y="175.50"></text></g><g><title>link_rlib (1,537,676 samples, 0.26%)</title><rect x="98.7289%" y="149" width="0.2644%" height="15" fill="rgb(224,114,35)"/><text x="98.9789%" y="159.50"></text></g><g><title>link (11,018,810 samples, 1.89%)</title><rect x="97.1003%" y="197" width="1.8949%" height="15" fill="rgb(245,159,27)"/><text x="97.3503%" y="207.50">l..</text></g><g><title>parse_crate (3,488,435 samples, 0.60%)</title><rect x="98.9952%" y="197" width="0.5999%" height="15" fill="rgb(245,172,44)"/><text x="99.2452%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,528,455 samples, 0.26%)</title><rect x="99.6580%" y="197" width="0.2629%" height="15" fill="rgb(236,23,11)"/><text x="99.9080%" y="207.50"></text></g><g><title>all (581,486,523 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (581,486,523 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>