<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (123,747,480 samples, 8.96%)</title><rect x="0.0488%" y="181" width="8.9628%" height="15" fill="rgb(227,0,7)"/><text x="0.2988%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (1,721,969 samples, 0.12%)</title><rect x="15.1846%" y="85" width="0.1247%" height="15" fill="rgb(217,0,24)"/><text x="15.4346%" y="95.50"></text></g><g><title>is_copy_raw (5,222,253 samples, 0.38%)</title><rect x="16.5920%" y="53" width="0.3782%" height="15" fill="rgb(221,193,54)"/><text x="16.8420%" y="63.50"></text></g><g><title>evaluate_obligation (4,263,974 samples, 0.31%)</title><rect x="16.6614%" y="37" width="0.3088%" height="15" fill="rgb(248,212,6)"/><text x="16.9114%" y="47.50"></text></g><g><title>needs_drop_raw (6,730,034 samples, 0.49%)</title><rect x="16.4839%" y="69" width="0.4874%" height="15" fill="rgb(208,68,35)"/><text x="16.7339%" y="79.50"></text></g><g><title>resolve_instance (2,746,250 samples, 0.20%)</title><rect x="16.9734%" y="69" width="0.1989%" height="15" fill="rgb(232,128,0)"/><text x="17.2234%" y="79.50"></text></g><g><title>thir_body (6,082,107 samples, 0.44%)</title><rect x="17.1837%" y="69" width="0.4405%" height="15" fill="rgb(207,160,47)"/><text x="17.4337%" y="79.50"></text></g><g><title>mir_const (41,826,912 samples, 3.03%)</title><rect x="14.6042%" y="117" width="3.0295%" height="15" fill="rgb(228,23,34)"/><text x="14.8542%" y="127.50">mir..</text></g><g><title>unsafety_check_result (36,245,715 samples, 2.63%)</title><rect x="15.0085%" y="101" width="2.6252%" height="15" fill="rgb(218,30,26)"/><text x="15.2585%" y="111.50">un..</text></g><g><title>mir_built (32,091,570 samples, 2.32%)</title><rect x="15.3094%" y="85" width="2.3243%" height="15" fill="rgb(220,122,19)"/><text x="15.5594%" y="95.50">m..</text></g><g><title>mir_promoted (46,151,951 samples, 3.34%)</title><rect x="14.3128%" y="133" width="3.3427%" height="15" fill="rgb(250,228,42)"/><text x="14.5628%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (2,434,450 samples, 0.18%)</title><rect x="17.6555%" y="133" width="0.1763%" height="15" fill="rgb(240,193,28)"/><text x="17.9055%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,222,197 samples, 0.23%)</title><rect x="17.8318%" y="133" width="0.2334%" height="15" fill="rgb(216,20,37)"/><text x="18.0818%" y="143.50"></text></g><g><title>normalize_projection_ty (1,936,980 samples, 0.14%)</title><rect x="17.9249%" y="117" width="0.1403%" height="15" fill="rgb(206,188,39)"/><text x="18.1749%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,760,845 samples, 0.13%)</title><rect x="18.0652%" y="133" width="0.1275%" height="15" fill="rgb(217,207,13)"/><text x="18.3152%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,223,671 samples, 1.10%)</title><rect x="18.2306%" y="133" width="1.1026%" height="15" fill="rgb(231,73,38)"/><text x="18.4806%" y="143.50"></text></g><g><title>MIR_borrow_checking (141,395,809 samples, 10.24%)</title><rect x="9.0938%" y="165" width="10.2411%" height="15" fill="rgb(225,20,46)"/><text x="9.3438%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (140,819,686 samples, 10.20%)</title><rect x="9.1355%" y="149" width="10.1994%" height="15" fill="rgb(210,31,41)"/><text x="9.3855%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,997,273 samples, 0.14%)</title><rect x="19.4166%" y="149" width="0.1447%" height="15" fill="rgb(221,200,47)"/><text x="19.6666%" y="159.50"></text></g><g><title>misc_checking_1 (4,197,052 samples, 0.30%)</title><rect x="19.4129%" y="165" width="0.3040%" height="15" fill="rgb(226,26,5)"/><text x="19.6629%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,388,814 samples, 0.17%)</title><rect x="19.7171%" y="149" width="0.1730%" height="15" fill="rgb(249,33,26)"/><text x="19.9671%" y="159.50"></text></g><g><title>check_mod_liveness (1,946,590 samples, 0.14%)</title><rect x="19.7491%" y="133" width="0.1410%" height="15" fill="rgb(235,183,28)"/><text x="19.9991%" y="143.50"></text></g><g><title>misc_checking_2 (7,247,073 samples, 0.52%)</title><rect x="19.7169%" y="165" width="0.5249%" height="15" fill="rgb(221,5,38)"/><text x="19.9669%" y="175.50"></text></g><g><title>match_checking (4,855,559 samples, 0.35%)</title><rect x="19.8901%" y="149" width="0.3517%" height="15" fill="rgb(247,18,42)"/><text x="20.1401%" y="159.50"></text></g><g><title>check_match (4,706,219 samples, 0.34%)</title><rect x="19.9009%" y="133" width="0.3409%" height="15" fill="rgb(241,131,45)"/><text x="20.1509%" y="143.50"></text></g><g><title>death_checking (1,647,896 samples, 0.12%)</title><rect x="20.3079%" y="149" width="0.1194%" height="15" fill="rgb(249,31,29)"/><text x="20.5579%" y="159.50"></text></g><g><title>crate_lints (4,585,797 samples, 0.33%)</title><rect x="20.4274%" y="133" width="0.3321%" height="15" fill="rgb(225,111,53)"/><text x="20.6774%" y="143.50"></text></g><g><title>lint_checking (7,255,053 samples, 0.53%)</title><rect x="20.4272%" y="149" width="0.5255%" height="15" fill="rgb(238,160,17)"/><text x="20.6772%" y="159.50"></text></g><g><title>module_lints (2,667,136 samples, 0.19%)</title><rect x="20.7595%" y="133" width="0.1932%" height="15" fill="rgb(214,148,48)"/><text x="21.0095%" y="143.50"></text></g><g><title>lint_mod (2,648,475 samples, 0.19%)</title><rect x="20.7609%" y="117" width="0.1918%" height="15" fill="rgb(232,36,49)"/><text x="21.0109%" y="127.50"></text></g><g><title>privacy_checking_modules (4,374,324 samples, 0.32%)</title><rect x="21.0432%" y="149" width="0.3168%" height="15" fill="rgb(209,103,24)"/><text x="21.2932%" y="159.50"></text></g><g><title>check_mod_privacy (4,361,444 samples, 0.32%)</title><rect x="21.0442%" y="133" width="0.3159%" height="15" fill="rgb(229,88,8)"/><text x="21.2942%" y="143.50"></text></g><g><title>misc_checking_3 (15,477,566 samples, 1.12%)</title><rect x="20.2418%" y="165" width="1.1210%" height="15" fill="rgb(213,181,19)"/><text x="20.4918%" y="175.50"></text></g><g><title>impl_parent (3,208,078 samples, 0.23%)</title><rect x="21.8459%" y="101" width="0.2324%" height="15" fill="rgb(254,191,54)"/><text x="22.0959%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,878,968 samples, 0.14%)</title><rect x="21.9421%" y="85" width="0.1361%" height="15" fill="rgb(241,83,37)"/><text x="22.1921%" y="95.50"></text></g><g><title>impl_trait_ref (7,007,890 samples, 0.51%)</title><rect x="22.0782%" y="101" width="0.5076%" height="15" fill="rgb(233,36,39)"/><text x="22.3282%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,691,079 samples, 0.41%)</title><rect x="22.1736%" y="85" width="0.4122%" height="15" fill="rgb(226,3,54)"/><text x="22.4236%" y="95.50"></text></g><g><title>coherent_trait (17,793,858 samples, 1.29%)</title><rect x="21.3856%" y="133" width="1.2888%" height="15" fill="rgb(245,192,40)"/><text x="21.6356%" y="143.50"></text></g><g><title>specialization_graph_of (17,209,701 samples, 1.25%)</title><rect x="21.4279%" y="117" width="1.2465%" height="15" fill="rgb(238,167,29)"/><text x="21.6779%" y="127.50"></text></g><g><title>coherence_checking (17,994,721 samples, 1.30%)</title><rect x="21.3834%" y="149" width="1.3033%" height="15" fill="rgb(232,182,51)"/><text x="21.6334%" y="159.50"></text></g><g><title>associated_items (1,537,905 samples, 0.11%)</title><rect x="31.2781%" y="101" width="0.1114%" height="15" fill="rgb(231,60,39)"/><text x="31.5281%" y="111.50"></text></g><g><title>dropck_outlives (2,470,997 samples, 0.18%)</title><rect x="31.4076%" y="101" width="0.1790%" height="15" fill="rgb(208,69,12)"/><text x="31.6576%" y="111.50"></text></g><g><title>generics_of (1,423,961 samples, 0.10%)</title><rect x="32.3352%" y="85" width="0.1031%" height="15" fill="rgb(235,93,37)"/><text x="32.5852%" y="95.50"></text></g><g><title>specializes (2,115,793 samples, 0.15%)</title><rect x="32.6186%" y="85" width="0.1532%" height="15" fill="rgb(213,116,39)"/><text x="32.8686%" y="95.50"></text></g><g><title>evaluate_obligation (17,334,394 samples, 1.26%)</title><rect x="31.5866%" y="101" width="1.2555%" height="15" fill="rgb(222,207,29)"/><text x="31.8366%" y="111.50"></text></g><g><title>method_autoderef_steps (1,548,573 samples, 0.11%)</title><rect x="33.0362%" y="101" width="0.1122%" height="15" fill="rgb(206,96,30)"/><text x="33.2862%" y="111.50"></text></g><g><title>specializes (2,364,737 samples, 0.17%)</title><rect x="36.8892%" y="69" width="0.1713%" height="15" fill="rgb(218,138,4)"/><text x="37.1392%" y="79.50"></text></g><g><title>evaluate_obligation (12,433,860 samples, 0.90%)</title><rect x="36.1859%" y="85" width="0.9006%" height="15" fill="rgb(250,191,14)"/><text x="36.4359%" y="95.50"></text></g><g><title>typeck (55,576,822 samples, 4.03%)</title><rect x="33.2924%" y="101" width="4.0253%" height="15" fill="rgb(239,60,40)"/><text x="33.5424%" y="111.50">type..</text></g><g><title>item_bodies_checking (202,046,632 samples, 14.63%)</title><rect x="22.6956%" y="149" width="14.6339%" height="15" fill="rgb(206,27,48)"/><text x="22.9456%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (202,042,272 samples, 14.63%)</title><rect x="22.6959%" y="133" width="14.6336%" height="15" fill="rgb(225,35,8)"/><text x="22.9459%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (201,653,959 samples, 14.61%)</title><rect x="22.7240%" y="117" width="14.6055%" height="15" fill="rgb(250,213,24)"/><text x="22.9740%" y="127.50">typeck</text></g><g><title>item_types_checking (5,390,974 samples, 0.39%)</title><rect x="37.3295%" y="149" width="0.3905%" height="15" fill="rgb(247,123,22)"/><text x="37.5795%" y="159.50"></text></g><g><title>check_mod_item_types (5,373,462 samples, 0.39%)</title><rect x="37.3308%" y="133" width="0.3892%" height="15" fill="rgb(231,138,38)"/><text x="37.5808%" y="143.50"></text></g><g><title>typeck (1,500,245 samples, 0.11%)</title><rect x="37.6113%" y="117" width="0.1087%" height="15" fill="rgb(231,145,46)"/><text x="37.8613%" y="127.50"></text></g><g><title>generics_of (1,452,227 samples, 0.11%)</title><rect x="37.9061%" y="117" width="0.1052%" height="15" fill="rgb(251,118,11)"/><text x="38.1561%" y="127.50"></text></g><g><title>late_bound_vars_map (1,651,977 samples, 0.12%)</title><rect x="38.1091%" y="69" width="0.1197%" height="15" fill="rgb(217,147,25)"/><text x="38.3591%" y="79.50"></text></g><g><title>resolve_lifetimes (1,608,017 samples, 0.12%)</title><rect x="38.1122%" y="53" width="0.1165%" height="15" fill="rgb(247,81,37)"/><text x="38.3622%" y="63.50"></text></g><g><title>explicit_predicates_of (2,310,294 samples, 0.17%)</title><rect x="38.0652%" y="85" width="0.1673%" height="15" fill="rgb(209,12,38)"/><text x="38.3152%" y="95.50"></text></g><g><title>predicates_of (3,612,675 samples, 0.26%)</title><rect x="38.0249%" y="117" width="0.2617%" height="15" fill="rgb(227,1,9)"/><text x="38.2749%" y="127.50"></text></g><g><title>predicates_defined_on (3,404,342 samples, 0.25%)</title><rect x="38.0400%" y="101" width="0.2466%" height="15" fill="rgb(248,47,43)"/><text x="38.2900%" y="111.50"></text></g><g><title>type_collecting (8,222,163 samples, 0.60%)</title><rect x="37.7207%" y="149" width="0.5955%" height="15" fill="rgb(221,10,30)"/><text x="37.9707%" y="159.50"></text></g><g><title>collect_mod_item_types (8,196,913 samples, 0.59%)</title><rect x="37.7225%" y="133" width="0.5937%" height="15" fill="rgb(210,229,1)"/><text x="37.9725%" y="143.50"></text></g><g><title>evaluate_obligation (1,381,281 samples, 0.10%)</title><rect x="39.2246%" y="117" width="0.1000%" height="15" fill="rgb(222,148,37)"/><text x="39.4746%" y="127.50"></text></g><g><title>param_env (3,562,076 samples, 0.26%)</title><rect x="39.4310%" y="117" width="0.2580%" height="15" fill="rgb(234,67,33)"/><text x="39.6810%" y="127.50"></text></g><g><title>region_scope_tree (1,770,440 samples, 0.13%)</title><rect x="39.6930%" y="117" width="0.1282%" height="15" fill="rgb(247,98,35)"/><text x="39.9430%" y="127.50"></text></g><g><title>check_impl_item_well_formed (19,959,174 samples, 1.45%)</title><rect x="38.3811%" y="133" width="1.4456%" height="15" fill="rgb(247,138,52)"/><text x="38.6311%" y="143.50"></text></g><g><title>evaluate_obligation (2,024,601 samples, 0.15%)</title><rect x="40.3806%" y="117" width="0.1466%" height="15" fill="rgb(213,79,30)"/><text x="40.6306%" y="127.50"></text></g><g><title>param_env (1,860,199 samples, 0.13%)</title><rect x="40.5608%" y="117" width="0.1347%" height="15" fill="rgb(246,177,23)"/><text x="40.8108%" y="127.50"></text></g><g><title>check_item_well_formed (13,423,744 samples, 0.97%)</title><rect x="39.8267%" y="133" width="0.9723%" height="15" fill="rgb(230,62,27)"/><text x="40.0767%" y="143.50"></text></g><g><title>analysis (439,510,591 samples, 31.83%)</title><rect x="9.0116%" y="181" width="31.8331%" height="15" fill="rgb(216,154,8)"/><text x="9.2616%" y="191.50">analysis</text></g><g><title>type_check_crate (268,981,438 samples, 19.48%)</title><rect x="21.3628%" y="165" width="19.4819%" height="15" fill="rgb(244,35,45)"/><text x="21.6128%" y="175.50">type_check_crate</text></g><g><title>wf_checking (34,885,373 samples, 2.53%)</title><rect x="38.3180%" y="149" width="2.5267%" height="15" fill="rgb(251,115,12)"/><text x="38.5680%" y="159.50">wf..</text></g><g><title>compute_debuginfo_type_name (2,442,558 samples, 0.18%)</title><rect x="47.8787%" y="149" width="0.1769%" height="15" fill="rgb(240,54,50)"/><text x="48.1287%" y="159.50"></text></g><g><title>const_caller_location (1,451,066 samples, 0.11%)</title><rect x="48.0557%" y="149" width="0.1051%" height="15" fill="rgb(233,84,52)"/><text x="48.3057%" y="159.50"></text></g><g><title>layout_of (1,534,043 samples, 0.11%)</title><rect x="48.5871%" y="133" width="0.1111%" height="15" fill="rgb(207,117,47)"/><text x="48.8371%" y="143.50"></text></g><g><title>param_env (4,586,657 samples, 0.33%)</title><rect x="48.6982%" y="133" width="0.3322%" height="15" fill="rgb(249,43,39)"/><text x="48.9482%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,867,658 samples, 0.14%)</title><rect x="49.0304%" y="133" width="0.1353%" height="15" fill="rgb(209,38,44)"/><text x="49.2804%" y="143.50"></text></g><g><title>normalize_projection_ty (1,401,855 samples, 0.10%)</title><rect x="49.0641%" y="117" width="0.1015%" height="15" fill="rgb(236,212,23)"/><text x="49.3141%" y="127.50"></text></g><g><title>fn_abi_of_instance (13,878,663 samples, 1.01%)</title><rect x="48.1695%" y="149" width="1.0052%" height="15" fill="rgb(242,79,21)"/><text x="48.4195%" y="159.50"></text></g><g><title>layout_of (2,464,164 samples, 0.18%)</title><rect x="49.2094%" y="149" width="0.1785%" height="15" fill="rgb(211,96,35)"/><text x="49.4594%" y="159.50"></text></g><g><title>codegen_module (117,581,175 samples, 8.52%)</title><rect x="41.0160%" y="165" width="8.5162%" height="15" fill="rgb(253,215,40)"/><text x="41.2660%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (120,049,563 samples, 8.70%)</title><rect x="40.8453%" y="181" width="8.6950%" height="15" fill="rgb(211,81,21)"/><text x="41.0953%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (517,264,728 samples, 37.46%)</title><rect x="49.5582%" y="165" width="37.4647%" height="15" fill="rgb(208,190,38)"/><text x="49.8082%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (496,324,857 samples, 35.95%)</title><rect x="51.0749%" y="149" width="35.9481%" height="15" fill="rgb(235,213,38)"/><text x="51.3249%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (535,192,571 samples, 38.76%)</title><rect x="49.5403%" y="181" width="38.7632%" height="15" fill="rgb(237,122,38)"/><text x="49.7903%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (17,680,558 samples, 1.28%)</title><rect x="87.0229%" y="165" width="1.2806%" height="15" fill="rgb(244,218,35)"/><text x="87.2729%" y="175.50"></text></g><g><title>metadata_register_crate (1,570,745 samples, 0.11%)</title><rect x="90.0637%" y="133" width="0.1138%" height="15" fill="rgb(240,68,47)"/><text x="90.3137%" y="143.50"></text></g><g><title>macro_expand_crate (25,510,618 samples, 1.85%)</title><rect x="88.3654%" y="165" width="1.8477%" height="15" fill="rgb(210,16,53)"/><text x="88.6154%" y="175.50">m..</text></g><g><title>expand_crate (25,500,327 samples, 1.85%)</title><rect x="88.3662%" y="149" width="1.8470%" height="15" fill="rgb(235,124,12)"/><text x="88.6162%" y="159.50">e..</text></g><g><title>late_resolve_crate (6,938,411 samples, 0.50%)</title><rect x="90.2602%" y="149" width="0.5025%" height="15" fill="rgb(224,169,11)"/><text x="90.5102%" y="159.50"></text></g><g><title>configure_and_expand (34,504,209 samples, 2.50%)</title><rect x="88.3035%" y="181" width="2.4991%" height="15" fill="rgb(250,166,2)"/><text x="88.5535%" y="191.50">co..</text></g><g><title>resolve_crate (7,902,080 samples, 0.57%)</title><rect x="90.2303%" y="165" width="0.5723%" height="15" fill="rgb(242,216,29)"/><text x="90.4803%" y="175.50"></text></g><g><title>early_lint_checks (1,740,607 samples, 0.13%)</title><rect x="90.8804%" y="181" width="0.1261%" height="15" fill="rgb(230,116,27)"/><text x="91.1304%" y="191.50"></text></g><g><title>free_global_ctxt (9,530,276 samples, 0.69%)</title><rect x="91.0065%" y="181" width="0.6903%" height="15" fill="rgb(228,99,48)"/><text x="91.2565%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,425,882 samples, 0.10%)</title><rect x="92.5360%" y="101" width="0.1033%" height="15" fill="rgb(253,11,6)"/><text x="92.7860%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,847,121 samples, 0.21%)</title><rect x="93.0583%" y="85" width="0.2062%" height="15" fill="rgb(247,143,39)"/><text x="93.3083%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,635,607 samples, 0.34%)</title><rect x="93.2645%" y="85" width="0.3358%" height="15" fill="rgb(236,97,10)"/><text x="93.5145%" y="95.50"></text></g><g><title>optimized_mir (13,589,415 samples, 0.98%)</title><rect x="92.7052%" y="101" width="0.9843%" height="15" fill="rgb(233,208,19)"/><text x="92.9552%" y="111.50"></text></g><g><title>evaluate_obligation (1,686,288 samples, 0.12%)</title><rect x="94.1858%" y="69" width="0.1221%" height="15" fill="rgb(216,164,2)"/><text x="94.4358%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (7,340,691 samples, 0.53%)</title><rect x="93.7969%" y="85" width="0.5317%" height="15" fill="rgb(220,129,5)"/><text x="94.0469%" y="95.50"></text></g><g><title>specialization_graph_of (1,905,720 samples, 0.14%)</title><rect x="94.4143%" y="85" width="0.1380%" height="15" fill="rgb(242,17,10)"/><text x="94.6643%" y="95.50"></text></g><g><title>resolve_instance (12,230,805 samples, 0.89%)</title><rect x="93.6894%" y="101" width="0.8859%" height="15" fill="rgb(242,107,0)"/><text x="93.9394%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,521,037 samples, 0.11%)</title><rect x="94.6161%" y="101" width="0.1102%" height="15" fill="rgb(251,28,31)"/><text x="94.8661%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (2,676,718 samples, 0.19%)</title><rect x="94.7265%" y="101" width="0.1939%" height="15" fill="rgb(233,223,10)"/><text x="94.9765%" y="111.50"></text></g><g><title>upstream_monomorphizations (2,644,607 samples, 0.19%)</title><rect x="94.7288%" y="85" width="0.1915%" height="15" fill="rgb(215,21,27)"/><text x="94.9788%" y="95.50"></text></g><g><title>exported_symbols (2,405,834 samples, 0.17%)</title><rect x="94.7461%" y="69" width="0.1743%" height="15" fill="rgb(232,23,21)"/><text x="94.9961%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,397,973 samples, 0.17%)</title><rect x="94.7467%" y="53" width="0.1737%" height="15" fill="rgb(244,5,23)"/><text x="94.9967%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (37,559,339 samples, 2.72%)</title><rect x="92.2486%" y="117" width="2.7204%" height="15" fill="rgb(226,81,46)"/><text x="92.4986%" y="127.50">mo..</text></g><g><title>monomorphization_collector (37,706,121 samples, 2.73%)</title><rect x="92.2483%" y="133" width="2.7310%" height="15" fill="rgb(247,70,30)"/><text x="92.4983%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,384,334 samples, 0.17%)</title><rect x="94.9802%" y="117" width="0.1727%" height="15" fill="rgb(212,68,19)"/><text x="95.2302%" y="127.50"></text></g><g><title>symbol_name (2,183,622 samples, 0.16%)</title><rect x="94.9947%" y="101" width="0.1582%" height="15" fill="rgb(240,187,13)"/><text x="95.2447%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (41,291,657 samples, 2.99%)</title><rect x="92.2452%" y="149" width="2.9907%" height="15" fill="rgb(223,113,26)"/><text x="92.4952%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,543,106 samples, 0.26%)</title><rect x="94.9793%" y="133" width="0.2566%" height="15" fill="rgb(206,192,2)"/><text x="95.2293%" y="143.50"></text></g><g><title>exported_symbols (41,995,374 samples, 3.04%)</title><rect x="92.2363%" y="165" width="3.0417%" height="15" fill="rgb(241,108,4)"/><text x="92.4863%" y="175.50">exp..</text></g><g><title>layout_of (3,137,662 samples, 0.23%)</title><rect x="96.2446%" y="149" width="0.2273%" height="15" fill="rgb(247,173,49)"/><text x="96.4946%" y="159.50"></text></g><g><title>needs_drop_raw (1,509,143 samples, 0.11%)</title><rect x="97.6234%" y="133" width="0.1093%" height="15" fill="rgb(224,114,35)"/><text x="97.8734%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,561,516 samples, 1.27%)</title><rect x="96.4718%" y="149" width="1.2720%" height="15" fill="rgb(245,159,27)"/><text x="96.7218%" y="159.50"></text></g><g><title>optimized_mir (34,066,427 samples, 2.47%)</title><rect x="95.2999%" y="165" width="2.4674%" height="15" fill="rgb(245,172,44)"/><text x="95.5499%" y="175.50">op..</text></g><g><title>generate_crate_metadata (84,324,792 samples, 6.11%)</title><rect x="91.6967%" y="181" width="6.1075%" height="15" fill="rgb(236,23,11)"/><text x="91.9467%" y="191.50">generate..</text></g><g><title>hir_lowering (12,874,460 samples, 0.93%)</title><rect x="97.8042%" y="181" width="0.9325%" height="15" fill="rgb(205,117,38)"/><text x="98.0542%" y="191.50"></text></g><g><title>finish_ongoing_codegen (4,726,298 samples, 0.34%)</title><rect x="98.7379%" y="165" width="0.3423%" height="15" fill="rgb(237,72,25)"/><text x="98.9879%" y="175.50"></text></g><g><title>link_crate (4,350,214 samples, 0.32%)</title><rect x="99.0802%" y="165" width="0.3151%" height="15" fill="rgb(244,70,9)"/><text x="99.3302%" y="175.50"></text></g><g><title>link_binary (4,223,843 samples, 0.31%)</title><rect x="99.0894%" y="149" width="0.3059%" height="15" fill="rgb(217,125,39)"/><text x="99.3394%" y="159.50"></text></g><g><title>link_rlib (3,396,314 samples, 0.25%)</title><rect x="99.1493%" y="133" width="0.2460%" height="15" fill="rgb(235,36,10)"/><text x="99.3993%" y="143.50"></text></g><g><title>link (9,104,412 samples, 0.66%)</title><rect x="98.7367%" y="181" width="0.6594%" height="15" fill="rgb(251,123,47)"/><text x="98.9867%" y="191.50"></text></g><g><title>parse_crate (4,353,614 samples, 0.32%)</title><rect x="99.3961%" y="181" width="0.3153%" height="15" fill="rgb(221,13,13)"/><text x="99.6461%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,905,289 samples, 0.21%)</title><rect x="99.7286%" y="181" width="0.2104%" height="15" fill="rgb(238,131,9)"/><text x="99.9786%" y="191.50"></text></g><g><title>all (1,380,671,684 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,380,671,684 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>