<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (20,330,066 samples, 6.88%)</title><rect x="0.2528%" y="197" width="6.8761%" height="15" fill="rgb(227,0,7)"/><text x="0.5028%" y="207.50">LLVM_pass..</text></g><g><title>implied_outlives_bounds (645,077 samples, 0.22%)</title><rect x="14.1880%" y="149" width="0.2182%" height="15" fill="rgb(217,0,24)"/><text x="14.4380%" y="159.50"></text></g><g><title>param_env (473,304 samples, 0.16%)</title><rect x="15.2848%" y="117" width="0.1601%" height="15" fill="rgb(221,193,54)"/><text x="15.5348%" y="127.50"></text></g><g><title>item_attrs (348,282 samples, 0.12%)</title><rect x="15.7391%" y="85" width="0.1178%" height="15" fill="rgb(248,212,6)"/><text x="15.9891%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (334,722 samples, 0.11%)</title><rect x="15.7437%" y="69" width="0.1132%" height="15" fill="rgb(208,68,35)"/><text x="15.9937%" y="79.50"></text></g><g><title>codegen_fn_attrs (527,844 samples, 0.18%)</title><rect x="15.6895%" y="101" width="0.1785%" height="15" fill="rgb(232,128,0)"/><text x="15.9395%" y="111.50"></text></g><g><title>is_copy_raw (1,138,971 samples, 0.39%)</title><rect x="17.4137%" y="69" width="0.3852%" height="15" fill="rgb(207,160,47)"/><text x="17.6637%" y="79.50"></text></g><g><title>evaluate_obligation (892,480 samples, 0.30%)</title><rect x="17.4971%" y="53" width="0.3019%" height="15" fill="rgb(228,23,34)"/><text x="17.7471%" y="63.50"></text></g><g><title>needs_drop_raw (1,593,365 samples, 0.54%)</title><rect x="17.2607%" y="85" width="0.5389%" height="15" fill="rgb(218,30,26)"/><text x="17.5107%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (480,985 samples, 0.16%)</title><rect x="17.9093%" y="69" width="0.1627%" height="15" fill="rgb(220,122,19)"/><text x="18.1593%" y="79.50"></text></g><g><title>impl_parent (708,775 samples, 0.24%)</title><rect x="18.4914%" y="53" width="0.2397%" height="15" fill="rgb(250,228,42)"/><text x="18.7414%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (441,263 samples, 0.15%)</title><rect x="18.5819%" y="37" width="0.1492%" height="15" fill="rgb(240,193,28)"/><text x="18.8319%" y="47.50"></text></g><g><title>specialization_graph_of (3,610,526 samples, 1.22%)</title><rect x="18.1171%" y="69" width="1.2212%" height="15" fill="rgb(216,20,37)"/><text x="18.3671%" y="79.50"></text></g><g><title>impl_trait_ref (1,795,101 samples, 0.61%)</title><rect x="18.7311%" y="53" width="0.6071%" height="15" fill="rgb(206,188,39)"/><text x="18.9811%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,266,358 samples, 0.43%)</title><rect x="18.9100%" y="37" width="0.4283%" height="15" fill="rgb(217,207,13)"/><text x="19.1600%" y="47.50"></text></g><g><title>resolve_instance (4,734,326 samples, 1.60%)</title><rect x="17.7996%" y="85" width="1.6012%" height="15" fill="rgb(231,73,38)"/><text x="18.0496%" y="95.50"></text></g><g><title>thir_body (1,541,767 samples, 0.52%)</title><rect x="19.4149%" y="85" width="0.5215%" height="15" fill="rgb(225,20,46)"/><text x="19.6649%" y="95.50"></text></g><g><title>mir_const (15,135,437 samples, 5.12%)</title><rect x="14.8595%" y="133" width="5.1191%" height="15" fill="rgb(210,31,41)"/><text x="15.1095%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (13,404,470 samples, 4.53%)</title><rect x="15.4449%" y="117" width="4.5337%" height="15" fill="rgb(221,200,47)"/><text x="15.6949%" y="127.50">unsaf..</text></g><g><title>mir_built (12,150,338 samples, 4.11%)</title><rect x="15.8691%" y="101" width="4.1095%" height="15" fill="rgb(226,26,5)"/><text x="16.1191%" y="111.50">mir_..</text></g><g><title>mir_const_qualif (429,484 samples, 0.15%)</title><rect x="19.9786%" y="133" width="0.1453%" height="15" fill="rgb(249,33,26)"/><text x="20.2286%" y="143.50"></text></g><g><title>mir_promoted (16,784,792 samples, 5.68%)</title><rect x="14.4470%" y="149" width="5.6770%" height="15" fill="rgb(235,183,28)"/><text x="14.6970%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (649,425 samples, 0.22%)</title><rect x="20.1260%" y="149" width="0.2196%" height="15" fill="rgb(221,5,38)"/><text x="20.3760%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (582,046 samples, 0.20%)</title><rect x="20.3456%" y="149" width="0.1969%" height="15" fill="rgb(247,18,42)"/><text x="20.5956%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,717,619 samples, 1.60%)</title><rect x="20.7092%" y="149" width="1.5956%" height="15" fill="rgb(241,131,45)"/><text x="20.9592%" y="159.50"></text></g><g><title>MIR_borrow_checking (44,528,432 samples, 15.06%)</title><rect x="7.2472%" y="181" width="15.0605%" height="15" fill="rgb(249,31,29)"/><text x="7.4972%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (44,349,941 samples, 15.00%)</title><rect x="7.3076%" y="165" width="15.0001%" height="15" fill="rgb(225,111,53)"/><text x="7.5576%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (447,877 samples, 0.15%)</title><rect x="22.5333%" y="149" width="0.1515%" height="15" fill="rgb(238,160,17)"/><text x="22.7833%" y="159.50"></text></g><g><title>check_mod_attrs (721,848 samples, 0.24%)</title><rect x="22.4407%" y="165" width="0.2441%" height="15" fill="rgb(214,148,48)"/><text x="22.6907%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (649,027 samples, 0.22%)</title><rect x="22.7696%" y="165" width="0.2195%" height="15" fill="rgb(232,36,49)"/><text x="23.0196%" y="175.50"></text></g><g><title>misc_checking_1 (1,713,977 samples, 0.58%)</title><rect x="22.4321%" y="181" width="0.5797%" height="15" fill="rgb(209,103,24)"/><text x="22.6821%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (645,627 samples, 0.22%)</title><rect x="23.0124%" y="165" width="0.2184%" height="15" fill="rgb(229,88,8)"/><text x="23.2624%" y="175.50"></text></g><g><title>check_mod_liveness (528,456 samples, 0.18%)</title><rect x="23.0520%" y="149" width="0.1787%" height="15" fill="rgb(213,181,19)"/><text x="23.3020%" y="159.50"></text></g><g><title>misc_checking_2 (1,359,594 samples, 0.46%)</title><rect x="23.0119%" y="181" width="0.4598%" height="15" fill="rgb(254,191,54)"/><text x="23.2619%" y="191.50"></text></g><g><title>match_checking (712,397 samples, 0.24%)</title><rect x="23.2307%" y="165" width="0.2409%" height="15" fill="rgb(241,83,37)"/><text x="23.4807%" y="175.50"></text></g><g><title>check_match (669,626 samples, 0.23%)</title><rect x="23.2452%" y="149" width="0.2265%" height="15" fill="rgb(233,36,39)"/><text x="23.4952%" y="159.50"></text></g><g><title>death_checking (566,355 samples, 0.19%)</title><rect x="23.5751%" y="165" width="0.1916%" height="15" fill="rgb(226,3,54)"/><text x="23.8251%" y="175.50"></text></g><g><title>param_env (316,353 samples, 0.11%)</title><rect x="24.1536%" y="133" width="0.1070%" height="15" fill="rgb(245,192,40)"/><text x="24.4036%" y="143.50"></text></g><g><title>crate_lints (2,599,826 samples, 0.88%)</title><rect x="23.7671%" y="149" width="0.8793%" height="15" fill="rgb(238,167,29)"/><text x="24.0171%" y="159.50"></text></g><g><title>type_of (1,131,330 samples, 0.38%)</title><rect x="24.2638%" y="133" width="0.3826%" height="15" fill="rgb(232,182,51)"/><text x="24.5138%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (891,998 samples, 0.30%)</title><rect x="24.3447%" y="117" width="0.3017%" height="15" fill="rgb(231,60,39)"/><text x="24.5947%" y="127.50"></text></g><g><title>lint_checking (3,286,453 samples, 1.11%)</title><rect x="23.7666%" y="165" width="1.1115%" height="15" fill="rgb(208,69,12)"/><text x="24.0166%" y="175.50"></text></g><g><title>module_lints (685,207 samples, 0.23%)</title><rect x="24.6464%" y="149" width="0.2318%" height="15" fill="rgb(235,93,37)"/><text x="24.8964%" y="159.50"></text></g><g><title>lint_mod (679,557 samples, 0.23%)</title><rect x="24.6483%" y="133" width="0.2298%" height="15" fill="rgb(213,116,39)"/><text x="24.8983%" y="143.50"></text></g><g><title>privacy_access_levels (362,774 samples, 0.12%)</title><rect x="24.8782%" y="165" width="0.1227%" height="15" fill="rgb(222,207,29)"/><text x="25.1282%" y="175.50"></text></g><g><title>privacy_checking_modules (1,490,655 samples, 0.50%)</title><rect x="25.0009%" y="165" width="0.5042%" height="15" fill="rgb(206,96,30)"/><text x="25.2509%" y="175.50"></text></g><g><title>check_mod_privacy (1,486,185 samples, 0.50%)</title><rect x="25.0024%" y="149" width="0.5027%" height="15" fill="rgb(218,138,4)"/><text x="25.2524%" y="159.50"></text></g><g><title>misc_checking_3 (6,034,671 samples, 2.04%)</title><rect x="23.4717%" y="181" width="2.0411%" height="15" fill="rgb(250,191,14)"/><text x="23.7217%" y="191.50">m..</text></g><g><title>adt_destructor (404,644 samples, 0.14%)</title><rect x="25.5653%" y="133" width="0.1369%" height="15" fill="rgb(239,60,40)"/><text x="25.8153%" y="143.50"></text></g><g><title>coherent_trait (392,884 samples, 0.13%)</title><rect x="25.5692%" y="117" width="0.1329%" height="15" fill="rgb(206,27,48)"/><text x="25.8192%" y="127.50"></text></g><g><title>specialization_graph_of (391,054 samples, 0.13%)</title><rect x="25.5699%" y="101" width="0.1323%" height="15" fill="rgb(225,35,8)"/><text x="25.8199%" y="111.50"></text></g><g><title>impl_parent (1,994,433 samples, 0.67%)</title><rect x="26.8995%" y="117" width="0.6746%" height="15" fill="rgb(250,213,24)"/><text x="27.1495%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,229,735 samples, 0.42%)</title><rect x="27.1581%" y="101" width="0.4159%" height="15" fill="rgb(247,123,22)"/><text x="27.4081%" y="111.50"></text></g><g><title>impl_trait_ref (4,629,164 samples, 1.57%)</title><rect x="27.5740%" y="117" width="1.5657%" height="15" fill="rgb(231,138,38)"/><text x="27.8240%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,872,156 samples, 1.31%)</title><rect x="27.8301%" y="101" width="1.3096%" height="15" fill="rgb(231,145,46)"/><text x="28.0801%" y="111.50"></text></g><g><title>coherent_trait (11,287,755 samples, 3.82%)</title><rect x="25.5527%" y="149" width="3.8178%" height="15" fill="rgb(251,118,11)"/><text x="25.8027%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (10,744,939 samples, 3.63%)</title><rect x="25.7363%" y="133" width="3.6342%" height="15" fill="rgb(217,147,25)"/><text x="25.9863%" y="143.50">spec..</text></g><g><title>trait_impls_of (682,277 samples, 0.23%)</title><rect x="29.1397%" y="117" width="0.2308%" height="15" fill="rgb(247,81,37)"/><text x="29.3897%" y="127.50"></text></g><g><title>coherence_checking (11,368,916 samples, 3.85%)</title><rect x="25.5444%" y="165" width="3.8452%" height="15" fill="rgb(209,12,38)"/><text x="25.7944%" y="175.50">cohe..</text></g><g><title>associated_item (342,685 samples, 0.12%)</title><rect x="38.8613%" y="101" width="0.1159%" height="15" fill="rgb(227,1,9)"/><text x="39.1113%" y="111.50"></text></g><g><title>associated_items (503,687 samples, 0.17%)</title><rect x="38.8171%" y="117" width="0.1704%" height="15" fill="rgb(248,47,43)"/><text x="39.0671%" y="127.50"></text></g><g><title>adt_dtorck_constraint (537,626 samples, 0.18%)</title><rect x="39.2127%" y="101" width="0.1818%" height="15" fill="rgb(221,10,30)"/><text x="39.4627%" y="111.50"></text></g><g><title>dropck_outlives (1,149,443 samples, 0.39%)</title><rect x="39.0154%" y="117" width="0.3888%" height="15" fill="rgb(210,229,1)"/><text x="39.2654%" y="127.50"></text></g><g><title>impl_trait_ref (473,496 samples, 0.16%)</title><rect x="40.1768%" y="101" width="0.1601%" height="15" fill="rgb(222,148,37)"/><text x="40.4268%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (421,996 samples, 0.14%)</title><rect x="40.1942%" y="85" width="0.1427%" height="15" fill="rgb(234,67,33)"/><text x="40.4442%" y="95.50"></text></g><g><title>trait_impls_of (521,374 samples, 0.18%)</title><rect x="40.5317%" y="101" width="0.1763%" height="15" fill="rgb(247,98,35)"/><text x="40.7817%" y="111.50"></text></g><g><title>evaluate_obligation (3,861,209 samples, 1.31%)</title><rect x="39.4066%" y="117" width="1.3059%" height="15" fill="rgb(247,138,52)"/><text x="39.6566%" y="127.50"></text></g><g><title>evaluate_obligation (351,715 samples, 0.12%)</title><rect x="41.1253%" y="101" width="0.1190%" height="15" fill="rgb(213,79,30)"/><text x="41.3753%" y="111.50"></text></g><g><title>method_autoderef_steps (721,509 samples, 0.24%)</title><rect x="41.0028%" y="117" width="0.2440%" height="15" fill="rgb(246,177,23)"/><text x="41.2528%" y="127.50"></text></g><g><title>predicates_of (477,986 samples, 0.16%)</title><rect x="41.2766%" y="117" width="0.1617%" height="15" fill="rgb(230,62,27)"/><text x="41.5266%" y="127.50"></text></g><g><title>predicates_defined_on (315,893 samples, 0.11%)</title><rect x="41.3314%" y="101" width="0.1068%" height="15" fill="rgb(216,154,8)"/><text x="41.5814%" y="111.50"></text></g><g><title>associated_items (323,694 samples, 0.11%)</title><rect x="44.2748%" y="101" width="0.1095%" height="15" fill="rgb(244,35,45)"/><text x="44.5248%" y="111.50"></text></g><g><title>dropck_outlives (332,063 samples, 0.11%)</title><rect x="44.4008%" y="101" width="0.1123%" height="15" fill="rgb(251,115,12)"/><text x="44.6508%" y="111.50"></text></g><g><title>evaluate_obligation (1,489,586 samples, 0.50%)</title><rect x="44.5131%" y="101" width="0.5038%" height="15" fill="rgb(240,54,50)"/><text x="44.7631%" y="111.50"></text></g><g><title>trait_impls_of (301,043 samples, 0.10%)</title><rect x="44.9151%" y="85" width="0.1018%" height="15" fill="rgb(233,84,52)"/><text x="45.1651%" y="95.50"></text></g><g><title>is_copy_raw (312,893 samples, 0.11%)</title><rect x="45.1206%" y="101" width="0.1058%" height="15" fill="rgb(207,117,47)"/><text x="45.3706%" y="111.50"></text></g><g><title>method_autoderef_steps (349,862 samples, 0.12%)</title><rect x="45.2681%" y="101" width="0.1183%" height="15" fill="rgb(249,43,39)"/><text x="45.5181%" y="111.50"></text></g><g><title>predicates_of (439,593 samples, 0.15%)</title><rect x="45.3924%" y="101" width="0.1487%" height="15" fill="rgb(209,38,44)"/><text x="45.6424%" y="111.50"></text></g><g><title>typeck (12,016,354 samples, 4.06%)</title><rect x="41.5231%" y="117" width="4.0642%" height="15" fill="rgb(236,212,23)"/><text x="41.7731%" y="127.50">type..</text></g><g><title>item_bodies_checking (47,910,527 samples, 16.20%)</title><rect x="29.4034%" y="165" width="16.2044%" height="15" fill="rgb(242,79,21)"/><text x="29.6534%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,906,827 samples, 16.20%)</title><rect x="29.4046%" y="149" width="16.2031%" height="15" fill="rgb(211,96,35)"/><text x="29.6546%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (47,790,717 samples, 16.16%)</title><rect x="29.4439%" y="133" width="16.1638%" height="15" fill="rgb(253,215,40)"/><text x="29.6939%" y="143.50">typeck</text></g><g><title>item_attrs (399,374 samples, 0.14%)</title><rect x="46.0737%" y="117" width="0.1351%" height="15" fill="rgb(211,81,21)"/><text x="46.3237%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (398,864 samples, 0.13%)</title><rect x="46.0739%" y="101" width="0.1349%" height="15" fill="rgb(208,190,38)"/><text x="46.3239%" y="111.50"></text></g><g><title>item_types_checking (1,821,788 samples, 0.62%)</title><rect x="45.6077%" y="165" width="0.6162%" height="15" fill="rgb(235,213,38)"/><text x="45.8577%" y="175.50"></text></g><g><title>check_mod_item_types (1,816,448 samples, 0.61%)</title><rect x="45.6095%" y="149" width="0.6144%" height="15" fill="rgb(237,122,38)"/><text x="45.8595%" y="159.50"></text></g><g><title>typeck (690,637 samples, 0.23%)</title><rect x="45.9903%" y="133" width="0.2336%" height="15" fill="rgb(244,218,35)"/><text x="46.2403%" y="143.50"></text></g><g><title>fn_sig (432,763 samples, 0.15%)</title><rect x="46.3563%" y="133" width="0.1464%" height="15" fill="rgb(240,68,47)"/><text x="46.6063%" y="143.50"></text></g><g><title>generics_of (445,733 samples, 0.15%)</title><rect x="46.5026%" y="133" width="0.1508%" height="15" fill="rgb(210,16,53)"/><text x="46.7526%" y="143.50"></text></g><g><title>explicit_predicates_of (449,725 samples, 0.15%)</title><rect x="46.7563%" y="101" width="0.1521%" height="15" fill="rgb(235,124,12)"/><text x="47.0063%" y="111.50"></text></g><g><title>predicates_of (1,546,307 samples, 0.52%)</title><rect x="46.6840%" y="133" width="0.5230%" height="15" fill="rgb(224,169,11)"/><text x="46.9340%" y="143.50"></text></g><g><title>predicates_defined_on (1,461,055 samples, 0.49%)</title><rect x="46.7128%" y="117" width="0.4942%" height="15" fill="rgb(250,166,2)"/><text x="46.9628%" y="127.50"></text></g><g><title>inferred_outlives_of (882,830 samples, 0.30%)</title><rect x="46.9084%" y="101" width="0.2986%" height="15" fill="rgb(242,216,29)"/><text x="47.1584%" y="111.50"></text></g><g><title>inferred_outlives_crate (844,109 samples, 0.29%)</title><rect x="46.9215%" y="85" width="0.2855%" height="15" fill="rgb(230,116,27)"/><text x="47.1715%" y="95.50"></text></g><g><title>type_of (592,327 samples, 0.20%)</title><rect x="47.0066%" y="69" width="0.2003%" height="15" fill="rgb(228,99,48)"/><text x="47.2566%" y="79.50"></text></g><g><title>type_collecting (3,152,212 samples, 1.07%)</title><rect x="46.2252%" y="165" width="1.0661%" height="15" fill="rgb(253,11,6)"/><text x="46.4752%" y="175.50"></text></g><g><title>collect_mod_item_types (3,142,732 samples, 1.06%)</title><rect x="46.2284%" y="149" width="1.0629%" height="15" fill="rgb(247,143,39)"/><text x="46.4784%" y="159.50"></text></g><g><title>evaluate_obligation (483,115 samples, 0.16%)</title><rect x="48.3391%" y="133" width="0.1634%" height="15" fill="rgb(236,97,10)"/><text x="48.5891%" y="143.50"></text></g><g><title>implied_outlives_bounds (430,673 samples, 0.15%)</title><rect x="48.5025%" y="133" width="0.1457%" height="15" fill="rgb(233,208,19)"/><text x="48.7525%" y="143.50"></text></g><g><title>param_env (487,598 samples, 0.16%)</title><rect x="48.6482%" y="133" width="0.1649%" height="15" fill="rgb(216,164,2)"/><text x="48.8982%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,678,260 samples, 1.58%)</title><rect x="47.3892%" y="149" width="1.5823%" height="15" fill="rgb(220,129,5)"/><text x="47.6392%" y="159.50"></text></g><g><title>region_scope_tree (458,057 samples, 0.15%)</title><rect x="48.8166%" y="133" width="0.1549%" height="15" fill="rgb(242,17,10)"/><text x="49.0666%" y="143.50"></text></g><g><title>adt_sized_constraint (363,534 samples, 0.12%)</title><rect x="49.9489%" y="101" width="0.1230%" height="15" fill="rgb(242,107,0)"/><text x="50.1989%" y="111.50"></text></g><g><title>adt_sized_constraint (616,076 samples, 0.21%)</title><rect x="49.8682%" y="117" width="0.2084%" height="15" fill="rgb(251,28,31)"/><text x="50.1182%" y="127.50"></text></g><g><title>evaluate_obligation (1,100,592 samples, 0.37%)</title><rect x="49.7228%" y="133" width="0.3722%" height="15" fill="rgb(233,223,10)"/><text x="49.9728%" y="143.50"></text></g><g><title>object_safety_violations (634,777 samples, 0.21%)</title><rect x="50.1562%" y="133" width="0.2147%" height="15" fill="rgb(215,21,27)"/><text x="50.4062%" y="143.50"></text></g><g><title>param_env (430,923 samples, 0.15%)</title><rect x="50.3709%" y="133" width="0.1457%" height="15" fill="rgb(232,23,21)"/><text x="50.6209%" y="143.50"></text></g><g><title>check_item_well_formed (4,954,677 samples, 1.68%)</title><rect x="48.9715%" y="149" width="1.6758%" height="15" fill="rgb(244,5,23)"/><text x="49.2215%" y="159.50"></text></g><g><title>analysis (129,494,286 samples, 43.80%)</title><rect x="7.1288%" y="197" width="43.7977%" height="15" fill="rgb(226,81,46)"/><text x="7.3788%" y="207.50">analysis</text></g><g><title>type_check_crate (75,139,574 samples, 25.41%)</title><rect x="25.5128%" y="181" width="25.4138%" height="15" fill="rgb(247,70,30)"/><text x="25.7628%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,741,530 samples, 3.63%)</title><rect x="47.2935%" y="165" width="3.6330%" height="15" fill="rgb(212,68,19)"/><text x="47.5435%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (825,689 samples, 0.28%)</title><rect x="50.6473%" y="149" width="0.2793%" height="15" fill="rgb(240,187,13)"/><text x="50.8973%" y="159.50"></text></g><g><title>param_env (606,927 samples, 0.21%)</title><rect x="55.8271%" y="149" width="0.2053%" height="15" fill="rgb(223,113,26)"/><text x="56.0771%" y="159.50"></text></g><g><title>fn_abi_of_instance (1,823,828 samples, 0.62%)</title><rect x="55.4585%" y="165" width="0.6169%" height="15" fill="rgb(206,192,2)"/><text x="55.7085%" y="175.50"></text></g><g><title>codegen_module (14,122,773 samples, 4.78%)</title><rect x="51.5280%" y="181" width="4.7766%" height="15" fill="rgb(241,108,4)"/><text x="51.7780%" y="191.50">codege..</text></g><g><title>codegen_crate (15,984,713 samples, 5.41%)</title><rect x="50.9307%" y="197" width="5.4064%" height="15" fill="rgb(247,173,49)"/><text x="51.1807%" y="207.50">codegen..</text></g><g><title>LLVM_module_codegen (57,390,883 samples, 19.41%)</title><rect x="56.3766%" y="181" width="19.4108%" height="15" fill="rgb(224,114,35)"/><text x="56.6266%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (53,837,257 samples, 18.21%)</title><rect x="57.5785%" y="165" width="18.2089%" height="15" fill="rgb(245,159,27)"/><text x="57.8285%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (59,783,099 samples, 20.22%)</title><rect x="56.3371%" y="197" width="20.2199%" height="15" fill="rgb(245,172,44)"/><text x="56.5871%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,275,563 samples, 0.77%)</title><rect x="75.7874%" y="181" width="0.7696%" height="15" fill="rgb(236,23,11)"/><text x="76.0374%" y="191.50"></text></g><g><title>metadata_load_macro (491,205 samples, 0.17%)</title><rect x="84.0906%" y="149" width="0.1661%" height="15" fill="rgb(205,117,38)"/><text x="84.3406%" y="159.50"></text></g><g><title>metadata_register_crate (3,615,826 samples, 1.22%)</title><rect x="84.2568%" y="149" width="1.2229%" height="15" fill="rgb(237,72,25)"/><text x="84.5068%" y="159.50"></text></g><g><title>metadata_register_crate (1,372,294 samples, 0.46%)</title><rect x="85.0156%" y="133" width="0.4641%" height="15" fill="rgb(244,70,9)"/><text x="85.2656%" y="143.50"></text></g><g><title>macro_expand_crate (25,959,084 samples, 8.78%)</title><rect x="76.7703%" y="181" width="8.7799%" height="15" fill="rgb(217,125,39)"/><text x="77.0203%" y="191.50">macro_expand..</text></g><g><title>expand_crate (25,934,594 samples, 8.77%)</title><rect x="76.7786%" y="165" width="8.7716%" height="15" fill="rgb(235,36,10)"/><text x="77.0286%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (353,234 samples, 0.12%)</title><rect x="85.5519%" y="181" width="0.1195%" height="15" fill="rgb(251,123,47)"/><text x="85.8019%" y="191.50"></text></g><g><title>late_resolve_crate (2,006,471 samples, 0.68%)</title><rect x="85.7524%" y="165" width="0.6786%" height="15" fill="rgb(221,13,13)"/><text x="86.0024%" y="175.50"></text></g><g><title>configure_and_expand (29,336,668 samples, 9.92%)</title><rect x="76.5570%" y="197" width="9.9223%" height="15" fill="rgb(238,131,9)"/><text x="76.8070%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (2,388,794 samples, 0.81%)</title><rect x="85.6714%" y="181" width="0.8079%" height="15" fill="rgb(211,50,8)"/><text x="85.9214%" y="191.50"></text></g><g><title>early_lint_checks (435,394 samples, 0.15%)</title><rect x="86.5635%" y="197" width="0.1473%" height="15" fill="rgb(245,182,24)"/><text x="86.8135%" y="207.50"></text></g><g><title>free_global_ctxt (6,218,793 samples, 2.10%)</title><rect x="86.7107%" y="197" width="2.1033%" height="15" fill="rgb(242,14,37)"/><text x="86.9607%" y="207.50">f..</text></g><g><title>mir_drops_elaborated_and_const_checked (577,407 samples, 0.20%)</title><rect x="90.0850%" y="101" width="0.1953%" height="15" fill="rgb(246,228,12)"/><text x="90.3350%" y="111.50"></text></g><g><title>optimized_mir (1,609,376 samples, 0.54%)</title><rect x="89.7899%" y="117" width="0.5443%" height="15" fill="rgb(213,55,15)"/><text x="90.0399%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (327,213 samples, 0.11%)</title><rect x="90.3780%" y="101" width="0.1107%" height="15" fill="rgb(209,9,3)"/><text x="90.6280%" y="111.50"></text></g><g><title>impl_parent (464,824 samples, 0.16%)</title><rect x="90.6639%" y="85" width="0.1572%" height="15" fill="rgb(230,59,30)"/><text x="90.9139%" y="95.50"></text></g><g><title>specialization_graph_of (1,368,084 samples, 0.46%)</title><rect x="90.5324%" y="101" width="0.4627%" height="15" fill="rgb(209,121,21)"/><text x="90.7824%" y="111.50"></text></g><g><title>impl_trait_ref (514,276 samples, 0.17%)</title><rect x="90.8211%" y="85" width="0.1739%" height="15" fill="rgb(220,109,13)"/><text x="91.0711%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (412,646 samples, 0.14%)</title><rect x="90.8555%" y="69" width="0.1396%" height="15" fill="rgb(232,18,1)"/><text x="91.1055%" y="79.50"></text></g><g><title>resolve_instance (1,997,190 samples, 0.68%)</title><rect x="90.3342%" y="117" width="0.6755%" height="15" fill="rgb(215,41,42)"/><text x="90.5842%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (777,828 samples, 0.26%)</title><rect x="91.0307%" y="117" width="0.2631%" height="15" fill="rgb(224,123,36)"/><text x="91.2807%" y="127.50"></text></g><g><title>upstream_monomorphizations (773,998 samples, 0.26%)</title><rect x="91.0320%" y="101" width="0.2618%" height="15" fill="rgb(240,125,3)"/><text x="91.2820%" y="111.50"></text></g><g><title>exported_symbols (631,486 samples, 0.21%)</title><rect x="91.0802%" y="85" width="0.2136%" height="15" fill="rgb(205,98,50)"/><text x="91.3302%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (625,516 samples, 0.21%)</title><rect x="91.0822%" y="69" width="0.2116%" height="15" fill="rgb(205,185,37)"/><text x="91.3322%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (5,170,902 samples, 1.75%)</title><rect x="89.6162%" y="133" width="1.7489%" height="15" fill="rgb(238,207,15)"/><text x="89.8662%" y="143.50"></text></g><g><title>monomorphization_collector (5,218,313 samples, 1.76%)</title><rect x="89.6148%" y="149" width="1.7649%" height="15" fill="rgb(213,199,42)"/><text x="89.8648%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (315,423 samples, 0.11%)</title><rect x="91.3811%" y="133" width="0.1067%" height="15" fill="rgb(235,201,11)"/><text x="91.6311%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (5,735,908 samples, 1.94%)</title><rect x="89.6009%" y="165" width="1.9400%" height="15" fill="rgb(207,46,11)"/><text x="89.8509%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (476,604 samples, 0.16%)</title><rect x="91.3797%" y="149" width="0.1612%" height="15" fill="rgb(241,35,35)"/><text x="91.6297%" y="159.50"></text></g><g><title>exported_symbols (5,921,491 samples, 2.00%)</title><rect x="89.5910%" y="181" width="2.0028%" height="15" fill="rgb(243,32,47)"/><text x="89.8410%" y="191.50">e..</text></g><g><title>layout_of (406,814 samples, 0.14%)</title><rect x="93.3421%" y="133" width="0.1376%" height="15" fill="rgb(247,202,23)"/><text x="93.5921%" y="143.50"></text></g><g><title>layout_of (655,998 samples, 0.22%)</title><rect x="93.2821%" y="149" width="0.2219%" height="15" fill="rgb(219,102,11)"/><text x="93.5321%" y="159.50"></text></g><g><title>layout_of (1,696,915 samples, 0.57%)</title><rect x="93.0059%" y="165" width="0.5739%" height="15" fill="rgb(243,110,44)"/><text x="93.2559%" y="175.50"></text></g><g><title>is_copy_raw (635,356 samples, 0.21%)</title><rect x="95.3568%" y="133" width="0.2149%" height="15" fill="rgb(222,74,54)"/><text x="95.6068%" y="143.50"></text></g><g><title>evaluate_obligation (497,576 samples, 0.17%)</title><rect x="95.4034%" y="117" width="0.1683%" height="15" fill="rgb(216,99,12)"/><text x="95.6534%" y="127.50"></text></g><g><title>needs_drop_raw (721,976 samples, 0.24%)</title><rect x="95.3281%" y="149" width="0.2442%" height="15" fill="rgb(226,22,26)"/><text x="95.5781%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,975,707 samples, 2.02%)</title><rect x="93.5799%" y="165" width="2.0211%" height="15" fill="rgb(217,163,10)"/><text x="93.8299%" y="175.50">m..</text></g><g><title>optimized_mir (11,781,010 samples, 3.98%)</title><rect x="91.6237%" y="181" width="3.9846%" height="15" fill="rgb(213,25,53)"/><text x="91.8737%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (20,265,896 samples, 6.85%)</title><rect x="88.8141%" y="197" width="6.8544%" height="15" fill="rgb(252,105,26)"/><text x="89.0641%" y="207.50">generate_..</text></g><g><title>hir_lowering (3,528,486 samples, 1.19%)</title><rect x="95.6684%" y="197" width="1.1934%" height="15" fill="rgb(220,39,43)"/><text x="95.9184%" y="207.50"></text></g><g><title>link_crate (1,540,726 samples, 0.52%)</title><rect x="96.8697%" y="181" width="0.5211%" height="15" fill="rgb(229,68,48)"/><text x="97.1197%" y="191.50"></text></g><g><title>link_binary (1,491,956 samples, 0.50%)</title><rect x="96.8862%" y="165" width="0.5046%" height="15" fill="rgb(252,8,32)"/><text x="97.1362%" y="175.50"></text></g><g><title>link_rlib (1,012,090 samples, 0.34%)</title><rect x="97.0485%" y="149" width="0.3423%" height="15" fill="rgb(223,20,43)"/><text x="97.2985%" y="159.50"></text></g><g><title>link (1,572,406 samples, 0.53%)</title><rect x="96.8618%" y="197" width="0.5318%" height="15" fill="rgb(229,81,49)"/><text x="97.1118%" y="207.50"></text></g><g><title>parse_crate (5,554,676 samples, 1.88%)</title><rect x="97.3937%" y="197" width="1.8787%" height="15" fill="rgb(236,28,36)"/><text x="97.6437%" y="207.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,462,145 samples, 0.49%)</title><rect x="99.3477%" y="197" width="0.4945%" height="15" fill="rgb(249,185,26)"/><text x="99.5977%" y="207.50"></text></g><g><title>all (295,664,416 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (295,664,416 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (380,924 samples, 0.13%)</title><rect x="99.8712%" y="197" width="0.1288%" height="15" fill="rgb(221,78,26)"/><text x="100.1212%" y="207.50"></text></g></svg></svg>