<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,490,877 samples, 11.21%)</title><rect x="0.4210%" y="213" width="11.2069%" height="15" fill="rgb(227,0,7)"/><text x="0.6710%" y="223.50">LLVM_passes</text></g><g><title>needs_drop_raw (251,574 samples, 0.16%)</title><rect x="15.7487%" y="101" width="0.1612%" height="15" fill="rgb(217,0,24)"/><text x="15.9987%" y="111.50"></text></g><g><title>thir_body (328,401 samples, 0.21%)</title><rect x="15.9709%" y="101" width="0.2104%" height="15" fill="rgb(221,193,54)"/><text x="16.2209%" y="111.50"></text></g><g><title>mir_const (2,115,422 samples, 1.36%)</title><rect x="14.8317%" y="149" width="1.3554%" height="15" fill="rgb(248,212,6)"/><text x="15.0817%" y="159.50"></text></g><g><title>unsafety_check_result (1,810,230 samples, 1.16%)</title><rect x="15.0273%" y="133" width="1.1599%" height="15" fill="rgb(208,68,35)"/><text x="15.2773%" y="143.50"></text></g><g><title>mir_built (1,604,576 samples, 1.03%)</title><rect x="15.1590%" y="117" width="1.0281%" height="15" fill="rgb(232,128,0)"/><text x="15.4090%" y="127.50"></text></g><g><title>mir_promoted (2,469,676 samples, 1.58%)</title><rect x="14.6156%" y="165" width="1.5824%" height="15" fill="rgb(207,160,47)"/><text x="14.8656%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (277,325 samples, 0.18%)</title><rect x="16.1980%" y="165" width="0.1777%" height="15" fill="rgb(228,23,34)"/><text x="16.4480%" y="175.50"></text></g><g><title>type_op_prove_predicate (648,670 samples, 0.42%)</title><rect x="16.4151%" y="165" width="0.4156%" height="15" fill="rgb(218,30,26)"/><text x="16.6651%" y="175.50"></text></g><g><title>MIR_borrow_checking (7,961,395 samples, 5.10%)</title><rect x="11.7345%" y="197" width="5.1011%" height="15" fill="rgb(220,122,19)"/><text x="11.9845%" y="207.50">MIR_bo..</text></g><g><title>mir_borrowck (7,923,704 samples, 5.08%)</title><rect x="11.7587%" y="181" width="5.0769%" height="15" fill="rgb(250,228,42)"/><text x="12.0087%" y="191.50">mir_bo..</text></g><g><title>codegen_fn_attrs (171,722 samples, 0.11%)</title><rect x="17.0397%" y="133" width="0.1100%" height="15" fill="rgb(240,193,28)"/><text x="17.2897%" y="143.50"></text></g><g><title>codegen_fn_attrs (248,143 samples, 0.16%)</title><rect x="16.9926%" y="165" width="0.1590%" height="15" fill="rgb(216,20,37)"/><text x="17.2426%" y="175.50"></text></g><g><title>should_inherit_track_caller (222,373 samples, 0.14%)</title><rect x="17.0091%" y="149" width="0.1425%" height="15" fill="rgb(206,188,39)"/><text x="17.2591%" y="159.50"></text></g><g><title>check_mod_attrs (360,524 samples, 0.23%)</title><rect x="16.9207%" y="181" width="0.2310%" height="15" fill="rgb(217,207,13)"/><text x="17.1707%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (254,082 samples, 0.16%)</title><rect x="17.2058%" y="181" width="0.1628%" height="15" fill="rgb(231,73,38)"/><text x="17.4558%" y="191.50"></text></g><g><title>misc_checking_1 (767,668 samples, 0.49%)</title><rect x="16.9103%" y="197" width="0.4919%" height="15" fill="rgb(225,20,46)"/><text x="17.1603%" y="207.50"></text></g><g><title>misc_checking_2 (367,434 samples, 0.24%)</title><rect x="17.4021%" y="197" width="0.2354%" height="15" fill="rgb(210,31,41)"/><text x="17.6521%" y="207.50"></text></g><g><title>match_checking (240,643 samples, 0.15%)</title><rect x="17.4834%" y="181" width="0.1542%" height="15" fill="rgb(221,200,47)"/><text x="17.7334%" y="191.50"></text></g><g><title>check_match (230,153 samples, 0.15%)</title><rect x="17.4901%" y="165" width="0.1475%" height="15" fill="rgb(226,26,5)"/><text x="17.7401%" y="175.50"></text></g><g><title>death_checking (314,433 samples, 0.20%)</title><rect x="17.7000%" y="181" width="0.2015%" height="15" fill="rgb(249,33,26)"/><text x="17.9500%" y="191.50"></text></g><g><title>crate_lints (1,725,219 samples, 1.11%)</title><rect x="17.9027%" y="165" width="1.1054%" height="15" fill="rgb(235,183,28)"/><text x="18.1527%" y="175.50"></text></g><g><title>type_of (1,050,474 samples, 0.67%)</title><rect x="18.3350%" y="149" width="0.6731%" height="15" fill="rgb(221,5,38)"/><text x="18.5850%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (821,480 samples, 0.53%)</title><rect x="18.4817%" y="133" width="0.5263%" height="15" fill="rgb(247,18,42)"/><text x="18.7317%" y="143.50"></text></g><g><title>lint_checking (1,954,031 samples, 1.25%)</title><rect x="17.9014%" y="181" width="1.2520%" height="15" fill="rgb(241,131,45)"/><text x="18.1514%" y="191.50"></text></g><g><title>module_lints (226,892 samples, 0.15%)</title><rect x="19.0081%" y="165" width="0.1454%" height="15" fill="rgb(249,31,29)"/><text x="19.2581%" y="175.50"></text></g><g><title>lint_mod (223,662 samples, 0.14%)</title><rect x="19.0101%" y="149" width="0.1433%" height="15" fill="rgb(225,111,53)"/><text x="19.2601%" y="159.50"></text></g><g><title>privacy_checking_modules (329,594 samples, 0.21%)</title><rect x="19.2258%" y="181" width="0.2112%" height="15" fill="rgb(238,160,17)"/><text x="19.4758%" y="191.50"></text></g><g><title>check_mod_privacy (327,374 samples, 0.21%)</title><rect x="19.2273%" y="165" width="0.2098%" height="15" fill="rgb(214,148,48)"/><text x="19.4773%" y="175.50"></text></g><g><title>misc_checking_3 (2,818,590 samples, 1.81%)</title><rect x="17.6376%" y="197" width="1.8059%" height="15" fill="rgb(232,36,49)"/><text x="17.8876%" y="207.50">m..</text></g><g><title>impl_trait_ref (179,271 samples, 0.11%)</title><rect x="19.5803%" y="101" width="0.1149%" height="15" fill="rgb(209,103,24)"/><text x="19.8303%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (160,911 samples, 0.10%)</title><rect x="19.5921%" y="85" width="0.1031%" height="15" fill="rgb(229,88,8)"/><text x="19.8421%" y="95.50"></text></g><g><title>adt_destructor (328,994 samples, 0.21%)</title><rect x="19.5001%" y="149" width="0.2108%" height="15" fill="rgb(213,181,19)"/><text x="19.7501%" y="159.50"></text></g><g><title>coherent_trait (321,094 samples, 0.21%)</title><rect x="19.5052%" y="133" width="0.2057%" height="15" fill="rgb(254,191,54)"/><text x="19.7552%" y="143.50"></text></g><g><title>specialization_graph_of (320,094 samples, 0.21%)</title><rect x="19.5058%" y="117" width="0.2051%" height="15" fill="rgb(241,83,37)"/><text x="19.7558%" y="127.50"></text></g><g><title>impl_parent (2,878,239 samples, 1.84%)</title><rect x="22.4725%" y="133" width="1.8442%" height="15" fill="rgb(233,36,39)"/><text x="22.7225%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,547,045 samples, 0.99%)</title><rect x="23.3254%" y="117" width="0.9912%" height="15" fill="rgb(226,3,54)"/><text x="23.5754%" y="127.50"></text></g><g><title>impl_trait_ref (5,664,784 samples, 3.63%)</title><rect x="24.3167%" y="133" width="3.6296%" height="15" fill="rgb(245,192,40)"/><text x="24.5667%" y="143.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,388,410 samples, 2.81%)</title><rect x="25.1345%" y="117" width="2.8118%" height="15" fill="rgb(238,167,29)"/><text x="25.3845%" y="127.50">me..</text></g><g><title>trait_impls_of (962,721 samples, 0.62%)</title><rect x="27.9612%" y="133" width="0.6168%" height="15" fill="rgb(232,182,51)"/><text x="28.2112%" y="143.50"></text></g><g><title>implementations_of_trait (245,962 samples, 0.16%)</title><rect x="28.4205%" y="117" width="0.1576%" height="15" fill="rgb(231,60,39)"/><text x="28.6705%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (192,742 samples, 0.12%)</title><rect x="28.4546%" y="101" width="0.1235%" height="15" fill="rgb(208,69,12)"/><text x="28.7046%" y="111.50"></text></g><g><title>coherent_trait (14,198,342 samples, 9.10%)</title><rect x="19.4814%" y="165" width="9.0973%" height="15" fill="rgb(235,93,37)"/><text x="19.7314%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (13,796,588 samples, 8.84%)</title><rect x="19.7388%" y="149" width="8.8398%" height="15" fill="rgb(213,116,39)"/><text x="19.9888%" y="159.50">specializati..</text></g><g><title>coherence_checking (14,265,132 samples, 9.14%)</title><rect x="19.4647%" y="181" width="9.1401%" height="15" fill="rgb(222,207,29)"/><text x="19.7147%" y="191.50">coherence_che..</text></g><g><title>evaluate_obligation (250,883 samples, 0.16%)</title><rect x="33.5963%" y="133" width="0.1607%" height="15" fill="rgb(206,96,30)"/><text x="33.8463%" y="143.50"></text></g><g><title>item_bodies_checking (8,562,492 samples, 5.49%)</title><rect x="28.6174%" y="181" width="5.4862%" height="15" fill="rgb(218,138,4)"/><text x="28.8674%" y="191.50">item_bo..</text></g><g><title>typeck_item_bodies (8,560,192 samples, 5.48%)</title><rect x="28.6189%" y="165" width="5.4847%" height="15" fill="rgb(250,191,14)"/><text x="28.8689%" y="175.50">typeck_..</text></g><g><title>typeck (8,532,171 samples, 5.47%)</title><rect x="28.6368%" y="149" width="5.4668%" height="15" fill="rgb(239,60,40)"/><text x="28.8868%" y="159.50">typeck</text></g><g><title>item_types_checking (521,936 samples, 0.33%)</title><rect x="34.1036%" y="181" width="0.3344%" height="15" fill="rgb(206,27,48)"/><text x="34.3536%" y="191.50"></text></g><g><title>check_mod_item_types (519,056 samples, 0.33%)</title><rect x="34.1055%" y="165" width="0.3326%" height="15" fill="rgb(225,35,8)"/><text x="34.3555%" y="175.50"></text></g><g><title>fn_sig (277,554 samples, 0.18%)</title><rect x="34.5311%" y="149" width="0.1778%" height="15" fill="rgb(250,213,24)"/><text x="34.7811%" y="159.50"></text></g><g><title>named_region_map (233,923 samples, 0.15%)</title><rect x="34.7430%" y="133" width="0.1499%" height="15" fill="rgb(247,123,22)"/><text x="34.9930%" y="143.50"></text></g><g><title>resolve_lifetimes (217,063 samples, 0.14%)</title><rect x="34.7538%" y="117" width="0.1391%" height="15" fill="rgb(231,138,38)"/><text x="35.0038%" y="127.50"></text></g><g><title>generics_of (296,673 samples, 0.19%)</title><rect x="34.7090%" y="149" width="0.1901%" height="15" fill="rgb(231,145,46)"/><text x="34.9590%" y="159.50"></text></g><g><title>predicates_of (285,081 samples, 0.18%)</title><rect x="34.9284%" y="149" width="0.1827%" height="15" fill="rgb(251,118,11)"/><text x="35.1784%" y="159.50"></text></g><g><title>predicates_defined_on (261,451 samples, 0.17%)</title><rect x="34.9436%" y="133" width="0.1675%" height="15" fill="rgb(217,147,25)"/><text x="35.1936%" y="143.50"></text></g><g><title>type_collecting (1,102,622 samples, 0.71%)</title><rect x="34.4385%" y="181" width="0.7065%" height="15" fill="rgb(247,81,37)"/><text x="34.6885%" y="191.50"></text></g><g><title>collect_mod_item_types (1,091,282 samples, 0.70%)</title><rect x="34.4458%" y="165" width="0.6992%" height="15" fill="rgb(209,12,38)"/><text x="34.6958%" y="175.50"></text></g><g><title>evaluate_obligation (202,862 samples, 0.13%)</title><rect x="35.6490%" y="149" width="0.1300%" height="15" fill="rgb(227,1,9)"/><text x="35.8990%" y="159.50"></text></g><g><title>object_safety_violations (475,575 samples, 0.30%)</title><rect x="35.8313%" y="149" width="0.3047%" height="15" fill="rgb(248,47,43)"/><text x="36.0813%" y="159.50"></text></g><g><title>region_scope_tree (160,871 samples, 0.10%)</title><rect x="36.2003%" y="149" width="0.1031%" height="15" fill="rgb(221,10,30)"/><text x="36.4503%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,735,681 samples, 1.11%)</title><rect x="35.2008%" y="165" width="1.1121%" height="15" fill="rgb(210,229,1)"/><text x="35.4508%" y="175.50"></text></g><g><title>evaluate_obligation (293,954 samples, 0.19%)</title><rect x="36.6589%" y="149" width="0.1883%" height="15" fill="rgb(222,148,37)"/><text x="36.9089%" y="159.50"></text></g><g><title>analysis (39,629,913 samples, 25.39%)</title><rect x="11.6279%" y="213" width="25.3920%" height="15" fill="rgb(234,67,33)"/><text x="11.8779%" y="223.50">analysis</text></g><g><title>type_check_crate (27,431,853 samples, 17.58%)</title><rect x="19.4435%" y="197" width="17.5763%" height="15" fill="rgb(247,98,35)"/><text x="19.6935%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,924,561 samples, 1.87%)</title><rect x="35.1460%" y="181" width="1.8738%" height="15" fill="rgb(247,138,52)"/><text x="35.3960%" y="191.50">w..</text></g><g><title>check_item_well_formed (1,103,389 samples, 0.71%)</title><rect x="36.3129%" y="165" width="0.7070%" height="15" fill="rgb(213,79,30)"/><text x="36.5629%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (290,231 samples, 0.19%)</title><rect x="44.8458%" y="181" width="0.1860%" height="15" fill="rgb(246,177,23)"/><text x="45.0958%" y="191.50"></text></g><g><title>const_caller_location (224,073 samples, 0.14%)</title><rect x="45.0318%" y="181" width="0.1436%" height="15" fill="rgb(230,62,27)"/><text x="45.2818%" y="191.50"></text></g><g><title>item_attrs (213,631 samples, 0.14%)</title><rect x="45.5980%" y="149" width="0.1369%" height="15" fill="rgb(216,154,8)"/><text x="45.8480%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (208,811 samples, 0.13%)</title><rect x="45.6010%" y="133" width="0.1338%" height="15" fill="rgb(244,35,45)"/><text x="45.8510%" y="143.50"></text></g><g><title>codegen_fn_attrs (267,161 samples, 0.17%)</title><rect x="45.5661%" y="165" width="0.1712%" height="15" fill="rgb(251,115,12)"/><text x="45.8161%" y="175.50"></text></g><g><title>adt_sized_constraint (156,362 samples, 0.10%)</title><rect x="45.8392%" y="101" width="0.1002%" height="15" fill="rgb(240,54,50)"/><text x="46.0892%" y="111.50"></text></g><g><title>adt_sized_constraint (162,792 samples, 0.10%)</title><rect x="45.8361%" y="117" width="0.1043%" height="15" fill="rgb(233,84,52)"/><text x="46.0861%" y="127.50"></text></g><g><title>adt_sized_constraint (180,902 samples, 0.12%)</title><rect x="45.8270%" y="133" width="0.1159%" height="15" fill="rgb(207,117,47)"/><text x="46.0770%" y="143.50"></text></g><g><title>layout_of (248,683 samples, 0.16%)</title><rect x="45.9706%" y="101" width="0.1593%" height="15" fill="rgb(249,43,39)"/><text x="46.2206%" y="111.50"></text></g><g><title>layout_of (287,563 samples, 0.18%)</title><rect x="45.9605%" y="117" width="0.1842%" height="15" fill="rgb(209,38,44)"/><text x="46.2105%" y="127.50"></text></g><g><title>layout_of (528,315 samples, 0.34%)</title><rect x="45.8097%" y="149" width="0.3385%" height="15" fill="rgb(236,212,23)"/><text x="46.0597%" y="159.50"></text></g><g><title>layout_of (304,913 samples, 0.20%)</title><rect x="45.9528%" y="133" width="0.1954%" height="15" fill="rgb(242,79,21)"/><text x="46.2028%" y="143.50"></text></g><g><title>layout_of (649,187 samples, 0.42%)</title><rect x="45.7605%" y="165" width="0.4160%" height="15" fill="rgb(211,96,35)"/><text x="46.0105%" y="175.50"></text></g><g><title>param_env (383,829 samples, 0.25%)</title><rect x="46.1765%" y="165" width="0.2459%" height="15" fill="rgb(253,215,40)"/><text x="46.4265%" y="175.50"></text></g><g><title>fn_abi_of_instance (1,909,000 samples, 1.22%)</title><rect x="45.2042%" y="181" width="1.2231%" height="15" fill="rgb(211,81,21)"/><text x="45.4542%" y="191.50"></text></g><g><title>adt_def (364,044 samples, 0.23%)</title><rect x="46.7892%" y="85" width="0.2333%" height="15" fill="rgb(208,190,38)"/><text x="47.0392%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (363,034 samples, 0.23%)</title><rect x="46.7898%" y="69" width="0.2326%" height="15" fill="rgb(235,213,38)"/><text x="47.0398%" y="79.50"></text></g><g><title>item_attrs (350,284 samples, 0.22%)</title><rect x="46.7980%" y="53" width="0.2244%" height="15" fill="rgb(237,122,38)"/><text x="47.0480%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (349,334 samples, 0.22%)</title><rect x="46.7986%" y="37" width="0.2238%" height="15" fill="rgb(244,218,35)"/><text x="47.0486%" y="47.50"></text></g><g><title>adt_sized_constraint (370,724 samples, 0.24%)</title><rect x="46.7863%" y="101" width="0.2375%" height="15" fill="rgb(240,68,47)"/><text x="47.0363%" y="111.50"></text></g><g><title>layout_of (234,624 samples, 0.15%)</title><rect x="47.0372%" y="101" width="0.1503%" height="15" fill="rgb(210,16,53)"/><text x="47.2872%" y="111.50"></text></g><g><title>layout_of (675,518 samples, 0.43%)</title><rect x="46.7709%" y="117" width="0.4328%" height="15" fill="rgb(235,124,12)"/><text x="47.0209%" y="127.50"></text></g><g><title>layout_of (851,718 samples, 0.55%)</title><rect x="46.6935%" y="133" width="0.5457%" height="15" fill="rgb(224,169,11)"/><text x="46.9435%" y="143.50"></text></g><g><title>layout_of (971,831 samples, 0.62%)</title><rect x="46.6449%" y="149" width="0.6227%" height="15" fill="rgb(250,166,2)"/><text x="46.8949%" y="159.50"></text></g><g><title>layout_of (1,111,973 samples, 0.71%)</title><rect x="46.5783%" y="165" width="0.7125%" height="15" fill="rgb(242,216,29)"/><text x="46.8283%" y="175.50"></text></g><g><title>layout_of (1,360,206 samples, 0.87%)</title><rect x="46.4485%" y="181" width="0.8715%" height="15" fill="rgb(230,116,27)"/><text x="46.6985%" y="191.50"></text></g><g><title>symbol_name (193,221 samples, 0.12%)</title><rect x="47.3200%" y="181" width="0.1238%" height="15" fill="rgb(228,99,48)"/><text x="47.5700%" y="191.50"></text></g><g><title>codegen_module (15,388,315 samples, 9.86%)</title><rect x="37.6521%" y="197" width="9.8597%" height="15" fill="rgb(253,11,6)"/><text x="37.9021%" y="207.50">codegen_module</text></g><g><title>codegen_crate (16,444,076 samples, 10.54%)</title><rect x="37.0243%" y="213" width="10.5362%" height="15" fill="rgb(247,143,39)"/><text x="37.2743%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (41,844,888 samples, 26.81%)</title><rect x="47.5956%" y="197" width="26.8111%" height="15" fill="rgb(236,97,10)"/><text x="47.8456%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (40,442,626 samples, 25.91%)</title><rect x="48.4941%" y="181" width="25.9127%" height="15" fill="rgb(233,208,19)"/><text x="48.7441%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (43,389,895 samples, 27.80%)</title><rect x="47.5605%" y="213" width="27.8011%" height="15" fill="rgb(216,164,2)"/><text x="47.8105%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,490,166 samples, 0.95%)</title><rect x="74.4068%" y="197" width="0.9548%" height="15" fill="rgb(220,129,5)"/><text x="74.6568%" y="207.50"></text></g><g><title>metadata_register_crate (1,306,254 samples, 0.84%)</title><rect x="83.0764%" y="165" width="0.8370%" height="15" fill="rgb(242,17,10)"/><text x="83.3264%" y="175.50"></text></g><g><title>metadata_register_crate (455,084 samples, 0.29%)</title><rect x="83.6217%" y="149" width="0.2916%" height="15" fill="rgb(242,107,0)"/><text x="83.8717%" y="159.50"></text></g><g><title>macro_expand_crate (13,298,872 samples, 8.52%)</title><rect x="75.5774%" y="197" width="8.5209%" height="15" fill="rgb(251,28,31)"/><text x="75.8274%" y="207.50">macro_expand..</text></g><g><title>expand_crate (13,288,822 samples, 8.51%)</title><rect x="75.5838%" y="181" width="8.5145%" height="15" fill="rgb(233,223,10)"/><text x="75.8338%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (288,773 samples, 0.19%)</title><rect x="83.9133%" y="165" width="0.1850%" height="15" fill="rgb(215,21,27)"/><text x="84.1633%" y="175.50"></text></g><g><title>finalize_macro_resolutions (190,562 samples, 0.12%)</title><rect x="84.1512%" y="181" width="0.1221%" height="15" fill="rgb(232,23,21)"/><text x="84.4012%" y="191.50"></text></g><g><title>late_resolve_crate (1,156,823 samples, 0.74%)</title><rect x="84.2733%" y="181" width="0.7412%" height="15" fill="rgb(244,5,23)"/><text x="84.5233%" y="191.50"></text></g><g><title>configure_and_expand (15,123,042 samples, 9.69%)</title><rect x="75.3615%" y="213" width="9.6897%" height="15" fill="rgb(226,81,46)"/><text x="75.6115%" y="223.50">configure_and_..</text></g><g><title>resolve_crate (1,440,545 samples, 0.92%)</title><rect x="84.1283%" y="197" width="0.9230%" height="15" fill="rgb(247,70,30)"/><text x="84.3783%" y="207.50"></text></g><g><title>early_lint_checks (208,062 samples, 0.13%)</title><rect x="85.1184%" y="213" width="0.1333%" height="15" fill="rgb(212,68,19)"/><text x="85.3684%" y="223.50"></text></g><g><title>free_global_ctxt (3,651,049 samples, 2.34%)</title><rect x="85.2517%" y="213" width="2.3393%" height="15" fill="rgb(240,187,13)"/><text x="85.5017%" y="223.50">f..</text></g><g><title>layout_of (253,763 samples, 0.16%)</title><rect x="89.6819%" y="117" width="0.1626%" height="15" fill="rgb(223,113,26)"/><text x="89.9319%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (794,107 samples, 0.51%)</title><rect x="89.9426%" y="117" width="0.5088%" height="15" fill="rgb(206,192,2)"/><text x="90.1926%" y="127.50"></text></g><g><title>resolve_instance (206,103 samples, 0.13%)</title><rect x="90.4514%" y="117" width="0.1321%" height="15" fill="rgb(241,108,4)"/><text x="90.7014%" y="127.50"></text></g><g><title>eval_to_const_value_raw (352,305 samples, 0.23%)</title><rect x="90.6086%" y="101" width="0.2257%" height="15" fill="rgb(247,173,49)"/><text x="90.8586%" y="111.50"></text></g><g><title>eval_to_const_value_raw (343,125 samples, 0.22%)</title><rect x="90.6144%" y="85" width="0.2198%" height="15" fill="rgb(224,114,35)"/><text x="90.8644%" y="95.50"></text></g><g><title>eval_to_allocation_raw (322,725 samples, 0.21%)</title><rect x="90.6275%" y="69" width="0.2068%" height="15" fill="rgb(245,159,27)"/><text x="90.8775%" y="79.50"></text></g><g><title>optimized_mir (3,013,922 samples, 1.93%)</title><rect x="88.9086%" y="133" width="1.9311%" height="15" fill="rgb(245,172,44)"/><text x="89.1586%" y="143.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (400,056 samples, 0.26%)</title><rect x="90.5834%" y="117" width="0.2563%" height="15" fill="rgb(236,23,11)"/><text x="90.8334%" y="127.50"></text></g><g><title>resolve_instance (217,592 samples, 0.14%)</title><rect x="90.8397%" y="133" width="0.1394%" height="15" fill="rgb(205,117,38)"/><text x="91.0897%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (195,612 samples, 0.13%)</title><rect x="91.0157%" y="133" width="0.1253%" height="15" fill="rgb(237,72,25)"/><text x="91.2657%" y="143.50"></text></g><g><title>upstream_monomorphizations (191,782 samples, 0.12%)</title><rect x="91.0182%" y="117" width="0.1229%" height="15" fill="rgb(244,70,9)"/><text x="91.2682%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (182,113 samples, 0.12%)</title><rect x="91.3077%" y="101" width="0.1167%" height="15" fill="rgb(217,125,39)"/><text x="91.5577%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (4,494,758 samples, 2.88%)</title><rect x="88.5536%" y="149" width="2.8799%" height="15" fill="rgb(235,36,10)"/><text x="88.8036%" y="159.50">mo..</text></g><g><title>vtable_entries (456,355 samples, 0.29%)</title><rect x="91.1411%" y="133" width="0.2924%" height="15" fill="rgb(251,123,47)"/><text x="91.3911%" y="143.50"></text></g><g><title>resolve_instance (249,933 samples, 0.16%)</title><rect x="91.2733%" y="117" width="0.1601%" height="15" fill="rgb(221,13,13)"/><text x="91.5233%" y="127.50"></text></g><g><title>monomorphization_collector (4,533,889 samples, 2.90%)</title><rect x="88.5521%" y="165" width="2.9050%" height="15" fill="rgb(238,131,9)"/><text x="88.8021%" y="175.50">mo..</text></g><g><title>assert_symbols_are_distinct (320,733 samples, 0.21%)</title><rect x="91.4595%" y="149" width="0.2055%" height="15" fill="rgb(211,50,8)"/><text x="91.7095%" y="159.50"></text></g><g><title>symbol_name (289,403 samples, 0.19%)</title><rect x="91.4796%" y="133" width="0.1854%" height="15" fill="rgb(245,182,24)"/><text x="91.7296%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (5,048,684 samples, 3.23%)</title><rect x="88.5302%" y="181" width="3.2348%" height="15" fill="rgb(242,14,37)"/><text x="88.7802%" y="191.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (480,665 samples, 0.31%)</title><rect x="91.4571%" y="165" width="0.3080%" height="15" fill="rgb(246,228,12)"/><text x="91.7071%" y="175.50"></text></g><g><title>cgu_partitioning (156,101 samples, 0.10%)</title><rect x="91.6650%" y="149" width="0.1000%" height="15" fill="rgb(213,55,15)"/><text x="91.9150%" y="159.50"></text></g><g><title>exported_symbols (5,130,975 samples, 3.29%)</title><rect x="88.5043%" y="197" width="3.2876%" height="15" fill="rgb(209,9,3)"/><text x="88.7543%" y="207.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (259,643 samples, 0.17%)</title><rect x="92.0291%" y="181" width="0.1664%" height="15" fill="rgb(230,59,30)"/><text x="92.2791%" y="191.50"></text></g><g><title>optimized_mir (590,897 samples, 0.38%)</title><rect x="91.8238%" y="197" width="0.3786%" height="15" fill="rgb(209,121,21)"/><text x="92.0738%" y="207.50"></text></g><g><title>generate_crate_metadata (7,217,907 samples, 4.62%)</title><rect x="87.5910%" y="213" width="4.6247%" height="15" fill="rgb(220,109,13)"/><text x="87.8410%" y="223.50">gener..</text></g><g><title>hir_lowering (3,617,759 samples, 2.32%)</title><rect x="92.2157%" y="213" width="2.3180%" height="15" fill="rgb(232,18,1)"/><text x="92.4657%" y="223.50">h..</text></g><g><title>finish_ongoing_codegen (4,427,988 samples, 2.84%)</title><rect x="94.5471%" y="197" width="2.8371%" height="15" fill="rgb(215,41,42)"/><text x="94.7971%" y="207.50">fi..</text></g><g><title>link_binary_remove_temps (210,952 samples, 0.14%)</title><rect x="97.7159%" y="165" width="0.1352%" height="15" fill="rgb(224,123,36)"/><text x="97.9659%" y="175.50"></text></g><g><title>link_crate (2,427,896 samples, 1.56%)</title><rect x="97.3843%" y="197" width="1.5556%" height="15" fill="rgb(240,125,3)"/><text x="97.6343%" y="207.50"></text></g><g><title>link_binary (2,364,735 samples, 1.52%)</title><rect x="97.4247%" y="181" width="1.5151%" height="15" fill="rgb(205,98,50)"/><text x="97.6747%" y="191.50"></text></g><g><title>link_rlib (1,699,309 samples, 1.09%)</title><rect x="97.8511%" y="165" width="1.0888%" height="15" fill="rgb(205,185,37)"/><text x="98.1011%" y="175.50"></text></g><g><title>link (6,890,784 samples, 4.42%)</title><rect x="94.5337%" y="213" width="4.4151%" height="15" fill="rgb(238,207,15)"/><text x="94.7837%" y="223.50">link</text></g><g><title>parse_crate (188,662 samples, 0.12%)</title><rect x="98.9489%" y="213" width="0.1209%" height="15" fill="rgb(213,199,42)"/><text x="99.1989%" y="223.50"></text></g><g><title>prepare_outputs (201,102 samples, 0.13%)</title><rect x="99.0734%" y="213" width="0.1289%" height="15" fill="rgb(235,201,11)"/><text x="99.3234%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (807,549 samples, 0.52%)</title><rect x="99.2022%" y="213" width="0.5174%" height="15" fill="rgb(207,46,11)"/><text x="99.4522%" y="223.50"></text></g><g><title>all (156,072,709 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (156,072,709 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (349,834 samples, 0.22%)</title><rect x="99.7759%" y="213" width="0.2241%" height="15" fill="rgb(247,202,23)"/><text x="100.0259%" y="223.50"></text></g></svg></svg>