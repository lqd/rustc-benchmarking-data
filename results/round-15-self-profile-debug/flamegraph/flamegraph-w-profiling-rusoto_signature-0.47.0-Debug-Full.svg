<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (405,382,965 samples, 15.42%)</title><rect x="0.0447%" y="165" width="15.4218%" height="15" fill="rgb(227,0,7)"/><text x="0.2947%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (2,784,125 samples, 0.11%)</title><rect x="17.4454%" y="37" width="0.1059%" height="15" fill="rgb(217,0,24)"/><text x="17.6954%" y="47.50"></text></g><g><title>needs_drop_raw (4,581,721 samples, 0.17%)</title><rect x="17.3778%" y="53" width="0.1743%" height="15" fill="rgb(221,193,54)"/><text x="17.6278%" y="63.50"></text></g><g><title>resolve_instance (3,991,383 samples, 0.15%)</title><rect x="17.5521%" y="53" width="0.1518%" height="15" fill="rgb(248,212,6)"/><text x="17.8021%" y="63.50"></text></g><g><title>thir_body (2,864,535 samples, 0.11%)</title><rect x="17.7060%" y="53" width="0.1090%" height="15" fill="rgb(208,68,35)"/><text x="17.9560%" y="63.50"></text></g><g><title>mir_const (23,949,103 samples, 0.91%)</title><rect x="16.9070%" y="101" width="0.9111%" height="15" fill="rgb(232,128,0)"/><text x="17.1570%" y="111.50"></text></g><g><title>unsafety_check_result (21,152,262 samples, 0.80%)</title><rect x="17.0134%" y="85" width="0.8047%" height="15" fill="rgb(207,160,47)"/><text x="17.2634%" y="95.50"></text></g><g><title>mir_built (18,751,262 samples, 0.71%)</title><rect x="17.1048%" y="69" width="0.7133%" height="15" fill="rgb(228,23,34)"/><text x="17.3548%" y="79.50"></text></g><g><title>mir_promoted (26,507,923 samples, 1.01%)</title><rect x="16.8280%" y="117" width="1.0084%" height="15" fill="rgb(218,30,26)"/><text x="17.0780%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,907,247 samples, 0.22%)</title><rect x="17.9884%" y="117" width="0.2247%" height="15" fill="rgb(220,122,19)"/><text x="18.2384%" y="127.50"></text></g><g><title>MIR_borrow_checking (71,642,519 samples, 2.73%)</title><rect x="15.4885%" y="149" width="2.7255%" height="15" fill="rgb(250,228,42)"/><text x="15.7385%" y="159.50">MI..</text></g><g><title>mir_borrowck (71,431,978 samples, 2.72%)</title><rect x="15.4965%" y="133" width="2.7174%" height="15" fill="rgb(240,193,28)"/><text x="15.7465%" y="143.50">mi..</text></g><g><title>misc_checking_2 (3,563,627 samples, 0.14%)</title><rect x="18.3196%" y="149" width="0.1356%" height="15" fill="rgb(216,20,37)"/><text x="18.5696%" y="159.50"></text></g><g><title>crate_lints (5,248,794 samples, 0.20%)</title><rect x="18.5011%" y="117" width="0.1997%" height="15" fill="rgb(206,188,39)"/><text x="18.7511%" y="127.50"></text></g><g><title>lint_checking (6,627,168 samples, 0.25%)</title><rect x="18.5010%" y="133" width="0.2521%" height="15" fill="rgb(217,207,13)"/><text x="18.7510%" y="143.50"></text></g><g><title>misc_checking_3 (10,858,201 samples, 0.41%)</title><rect x="18.4552%" y="149" width="0.4131%" height="15" fill="rgb(231,73,38)"/><text x="18.7052%" y="159.50"></text></g><g><title>impl_parent (4,126,671 samples, 0.16%)</title><rect x="19.1529%" y="85" width="0.1570%" height="15" fill="rgb(225,20,46)"/><text x="19.4029%" y="95.50"></text></g><g><title>impl_trait_ref (10,177,844 samples, 0.39%)</title><rect x="19.3099%" y="85" width="0.3872%" height="15" fill="rgb(210,31,41)"/><text x="19.5599%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,756,068 samples, 0.30%)</title><rect x="19.4021%" y="69" width="0.2951%" height="15" fill="rgb(221,200,47)"/><text x="19.6521%" y="79.50"></text></g><g><title>coherent_trait (24,020,545 samples, 0.91%)</title><rect x="18.8743%" y="117" width="0.9138%" height="15" fill="rgb(226,26,5)"/><text x="19.1243%" y="127.50"></text></g><g><title>specialization_graph_of (23,982,714 samples, 0.91%)</title><rect x="18.8758%" y="101" width="0.9124%" height="15" fill="rgb(249,33,26)"/><text x="19.1258%" y="111.50"></text></g><g><title>coherence_checking (24,303,127 samples, 0.92%)</title><rect x="18.8732%" y="133" width="0.9246%" height="15" fill="rgb(235,183,28)"/><text x="19.1232%" y="143.50"></text></g><g><title>evaluate_obligation (4,916,859 samples, 0.19%)</title><rect x="21.9418%" y="85" width="0.1870%" height="15" fill="rgb(221,5,38)"/><text x="22.1918%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,772,908 samples, 0.11%)</title><rect x="22.8767%" y="53" width="0.1055%" height="15" fill="rgb(247,18,42)"/><text x="23.1267%" y="63.50"></text></g><g><title>dropck_outlives (4,133,545 samples, 0.16%)</title><rect x="22.8564%" y="69" width="0.1573%" height="15" fill="rgb(241,131,45)"/><text x="23.1064%" y="79.50"></text></g><g><title>evaluate_obligation (3,202,803 samples, 0.12%)</title><rect x="23.0136%" y="69" width="0.1218%" height="15" fill="rgb(249,31,29)"/><text x="23.2636%" y="79.50"></text></g><g><title>typeck (25,530,621 samples, 0.97%)</title><rect x="22.2797%" y="85" width="0.9712%" height="15" fill="rgb(225,111,53)"/><text x="22.5297%" y="95.50"></text></g><g><title>item_bodies_checking (90,828,275 samples, 3.46%)</title><rect x="19.7992%" y="133" width="3.4553%" height="15" fill="rgb(238,160,17)"/><text x="20.0492%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (90,824,065 samples, 3.46%)</title><rect x="19.7994%" y="117" width="3.4552%" height="15" fill="rgb(214,148,48)"/><text x="20.0494%" y="127.50">typ..</text></g><g><title>typeck (90,687,241 samples, 3.45%)</title><rect x="19.8046%" y="101" width="3.4500%" height="15" fill="rgb(232,36,49)"/><text x="20.0546%" y="111.50">typ..</text></g><g><title>item_types_checking (4,756,098 samples, 0.18%)</title><rect x="23.2545%" y="133" width="0.1809%" height="15" fill="rgb(209,103,24)"/><text x="23.5045%" y="143.50"></text></g><g><title>check_mod_item_types (4,749,428 samples, 0.18%)</title><rect x="23.2548%" y="117" width="0.1807%" height="15" fill="rgb(229,88,8)"/><text x="23.5048%" y="127.50"></text></g><g><title>type_collecting (4,085,452 samples, 0.16%)</title><rect x="23.4357%" y="133" width="0.1554%" height="15" fill="rgb(213,181,19)"/><text x="23.6857%" y="143.50"></text></g><g><title>collect_mod_item_types (4,069,781 samples, 0.15%)</title><rect x="23.4363%" y="117" width="0.1548%" height="15" fill="rgb(254,191,54)"/><text x="23.6863%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,811,600 samples, 0.22%)</title><rect x="23.6038%" y="117" width="0.2211%" height="15" fill="rgb(241,83,37)"/><text x="23.8538%" y="127.50"></text></g><g><title>analysis (224,282,372 samples, 8.53%)</title><rect x="15.4664%" y="165" width="8.5322%" height="15" fill="rgb(233,36,39)"/><text x="15.7164%" y="175.50">analysis</text></g><g><title>type_check_crate (134,861,182 samples, 5.13%)</title><rect x="18.8682%" y="149" width="5.1304%" height="15" fill="rgb(226,3,54)"/><text x="19.1182%" y="159.50">type_c..</text></g><g><title>wf_checking (10,705,119 samples, 0.41%)</title><rect x="23.5914%" y="133" width="0.4072%" height="15" fill="rgb(245,192,40)"/><text x="23.8414%" y="143.50"></text></g><g><title>check_item_well_formed (4,569,259 samples, 0.17%)</title><rect x="23.8249%" y="117" width="0.1738%" height="15" fill="rgb(238,167,29)"/><text x="24.0749%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (16,056,645 samples, 0.61%)</title><rect x="36.6535%" y="133" width="0.6108%" height="15" fill="rgb(232,182,51)"/><text x="36.9035%" y="143.50"></text></g><g><title>const_caller_location (3,624,015 samples, 0.14%)</title><rect x="37.2643%" y="133" width="0.1379%" height="15" fill="rgb(231,60,39)"/><text x="37.5143%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,734,814 samples, 0.10%)</title><rect x="37.9796%" y="117" width="0.1040%" height="15" fill="rgb(208,69,12)"/><text x="38.2296%" y="127.50"></text></g><g><title>layout_of (5,925,782 samples, 0.23%)</title><rect x="38.1150%" y="117" width="0.2254%" height="15" fill="rgb(235,93,37)"/><text x="38.3650%" y="127.50"></text></g><g><title>predicates_of (4,722,304 samples, 0.18%)</title><rect x="38.7052%" y="101" width="0.1796%" height="15" fill="rgb(213,116,39)"/><text x="38.9552%" y="111.50"></text></g><g><title>predicates_defined_on (3,415,285 samples, 0.13%)</title><rect x="38.7549%" y="85" width="0.1299%" height="15" fill="rgb(222,207,29)"/><text x="39.0049%" y="95.50"></text></g><g><title>param_env (14,360,364 samples, 0.55%)</title><rect x="38.3405%" y="117" width="0.5463%" height="15" fill="rgb(206,96,30)"/><text x="38.5905%" y="127.50"></text></g><g><title>normalize_projection_ty (6,503,126 samples, 0.25%)</title><rect x="38.9517%" y="101" width="0.2474%" height="15" fill="rgb(218,138,4)"/><text x="39.2017%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (8,239,376 samples, 0.31%)</title><rect x="38.8868%" y="117" width="0.3134%" height="15" fill="rgb(250,191,14)"/><text x="39.1368%" y="127.50"></text></g><g><title>fn_abi_of_instance (47,330,845 samples, 1.80%)</title><rect x="37.4081%" y="133" width="1.8006%" height="15" fill="rgb(239,60,40)"/><text x="37.6581%" y="143.50">f..</text></g><g><title>layout_of (3,391,104 samples, 0.13%)</title><rect x="39.6202%" y="69" width="0.1290%" height="15" fill="rgb(206,27,48)"/><text x="39.8702%" y="79.50"></text></g><g><title>layout_of (4,284,360 samples, 0.16%)</title><rect x="39.6017%" y="85" width="0.1630%" height="15" fill="rgb(225,35,8)"/><text x="39.8517%" y="95.50"></text></g><g><title>layout_of (5,670,904 samples, 0.22%)</title><rect x="39.5727%" y="101" width="0.2157%" height="15" fill="rgb(250,213,24)"/><text x="39.8227%" y="111.50"></text></g><g><title>layout_of (7,378,394 samples, 0.28%)</title><rect x="39.5351%" y="117" width="0.2807%" height="15" fill="rgb(247,123,22)"/><text x="39.7851%" y="127.50"></text></g><g><title>layout_of (14,652,175 samples, 0.56%)</title><rect x="39.2876%" y="133" width="0.5574%" height="15" fill="rgb(231,138,38)"/><text x="39.5376%" y="143.50"></text></g><g><title>symbol_name (5,244,490 samples, 0.20%)</title><rect x="39.8461%" y="133" width="0.1995%" height="15" fill="rgb(231,145,46)"/><text x="40.0961%" y="143.50"></text></g><g><title>codegen_module (418,982,403 samples, 15.94%)</title><rect x="24.1390%" y="149" width="15.9391%" height="15" fill="rgb(251,118,11)"/><text x="24.3890%" y="159.50">codegen_module</text></g><g><title>codegen_crate (422,885,442 samples, 16.09%)</title><rect x="23.9990%" y="165" width="16.0876%" height="15" fill="rgb(217,147,25)"/><text x="24.2490%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,219,901,012 samples, 46.41%)</title><rect x="40.0964%" y="149" width="46.4080%" height="15" fill="rgb(247,81,37)"/><text x="40.3464%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,145,491,852 samples, 43.58%)</title><rect x="42.9271%" y="133" width="43.5773%" height="15" fill="rgb(209,12,38)"/><text x="43.1771%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,297,248,770 samples, 49.35%)</title><rect x="40.0866%" y="165" width="49.3505%" height="15" fill="rgb(227,1,9)"/><text x="40.3366%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (77,092,085 samples, 2.93%)</title><rect x="86.5044%" y="149" width="2.9328%" height="15" fill="rgb(248,47,43)"/><text x="86.7544%" y="159.50">LL..</text></g><g><title>metadata_register_crate (18,692,311 samples, 0.71%)</title><rect x="91.4169%" y="117" width="0.7111%" height="15" fill="rgb(221,10,30)"/><text x="91.6669%" y="127.50"></text></g><g><title>metadata_register_crate (16,201,815 samples, 0.62%)</title><rect x="91.5116%" y="101" width="0.6164%" height="15" fill="rgb(210,229,1)"/><text x="91.7616%" y="111.50"></text></g><g><title>metadata_register_crate (11,224,436 samples, 0.43%)</title><rect x="91.7009%" y="85" width="0.4270%" height="15" fill="rgb(222,148,37)"/><text x="91.9509%" y="95.50"></text></g><g><title>metadata_register_crate (9,423,736 samples, 0.36%)</title><rect x="91.7695%" y="69" width="0.3585%" height="15" fill="rgb(234,67,33)"/><text x="92.0195%" y="79.50"></text></g><g><title>macro_expand_crate (70,674,889 samples, 2.69%)</title><rect x="89.4658%" y="149" width="2.6886%" height="15" fill="rgb(247,98,35)"/><text x="89.7158%" y="159.50">ma..</text></g><g><title>expand_crate (70,652,159 samples, 2.69%)</title><rect x="89.4666%" y="133" width="2.6878%" height="15" fill="rgb(247,138,52)"/><text x="89.7166%" y="143.50">ex..</text></g><g><title>late_resolve_crate (5,158,423 samples, 0.20%)</title><rect x="92.1738%" y="133" width="0.1962%" height="15" fill="rgb(213,79,30)"/><text x="92.4238%" y="143.50"></text></g><g><title>configure_and_expand (77,321,667 samples, 2.94%)</title><rect x="89.4371%" y="165" width="2.9415%" height="15" fill="rgb(246,177,23)"/><text x="89.6871%" y="175.50">co..</text></g><g><title>resolve_crate (5,813,730 samples, 0.22%)</title><rect x="92.1575%" y="149" width="0.2212%" height="15" fill="rgb(230,62,27)"/><text x="92.4075%" y="159.50"></text></g><g><title>free_global_ctxt (11,374,145 samples, 0.43%)</title><rect x="92.4364%" y="165" width="0.4327%" height="15" fill="rgb(216,154,8)"/><text x="92.6864%" y="175.50"></text></g><g><title>item_attrs (3,092,780 samples, 0.12%)</title><rect x="93.5408%" y="69" width="0.1177%" height="15" fill="rgb(244,35,45)"/><text x="93.7908%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,938,468 samples, 0.11%)</title><rect x="93.5467%" y="53" width="0.1118%" height="15" fill="rgb(251,115,12)"/><text x="93.7967%" y="63.50"></text></g><g><title>codegen_fn_attrs (5,244,655 samples, 0.20%)</title><rect x="93.5048%" y="85" width="0.1995%" height="15" fill="rgb(240,54,50)"/><text x="93.7548%" y="95.50"></text></g><g><title>layout_of (2,986,609 samples, 0.11%)</title><rect x="94.1712%" y="69" width="0.1136%" height="15" fill="rgb(233,84,52)"/><text x="94.4212%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,803,106 samples, 0.33%)</title><rect x="94.2848%" y="69" width="0.3349%" height="15" fill="rgb(207,117,47)"/><text x="94.5348%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,431,579 samples, 0.32%)</title><rect x="94.6197%" y="69" width="0.3208%" height="15" fill="rgb(249,43,39)"/><text x="94.8697%" y="79.50"></text></g><g><title>optimized_mir (29,856,971 samples, 1.14%)</title><rect x="93.9124%" y="85" width="1.1358%" height="15" fill="rgb(209,38,44)"/><text x="94.1624%" y="95.50"></text></g><g><title>evaluate_obligation (3,588,114 samples, 0.14%)</title><rect x="95.5866%" y="53" width="0.1365%" height="15" fill="rgb(236,212,23)"/><text x="95.8366%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (14,595,655 samples, 0.56%)</title><rect x="95.2326%" y="69" width="0.5553%" height="15" fill="rgb(242,79,21)"/><text x="95.4826%" y="79.50"></text></g><g><title>needs_drop_raw (3,642,848 samples, 0.14%)</title><rect x="95.8593%" y="69" width="0.1386%" height="15" fill="rgb(211,96,35)"/><text x="96.1093%" y="79.50"></text></g><g><title>specialization_graph_of (3,216,835 samples, 0.12%)</title><rect x="95.9979%" y="69" width="0.1224%" height="15" fill="rgb(253,215,40)"/><text x="96.2479%" y="79.50"></text></g><g><title>resolve_instance (29,462,663 samples, 1.12%)</title><rect x="95.0482%" y="85" width="1.1208%" height="15" fill="rgb(211,81,21)"/><text x="95.2982%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,051,044 samples, 0.12%)</title><rect x="96.1691%" y="85" width="0.1161%" height="15" fill="rgb(208,190,38)"/><text x="96.4191%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,226,069 samples, 0.12%)</title><rect x="96.2851%" y="85" width="0.1227%" height="15" fill="rgb(235,213,38)"/><text x="96.5351%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (14,312,994 samples, 0.54%)</title><rect x="96.4092%" y="85" width="0.5445%" height="15" fill="rgb(237,122,38)"/><text x="96.6592%" y="95.50"></text></g><g><title>upstream_monomorphizations (14,180,334 samples, 0.54%)</title><rect x="96.4143%" y="69" width="0.5395%" height="15" fill="rgb(244,218,35)"/><text x="96.6643%" y="79.50"></text></g><g><title>exported_symbols (12,754,981 samples, 0.49%)</title><rect x="96.4685%" y="53" width="0.4852%" height="15" fill="rgb(240,68,47)"/><text x="96.7185%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (12,733,081 samples, 0.48%)</title><rect x="96.4693%" y="37" width="0.4844%" height="15" fill="rgb(210,16,53)"/><text x="96.7193%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (105,184,410 samples, 4.00%)</title><rect x="92.9958%" y="101" width="4.0015%" height="15" fill="rgb(235,124,12)"/><text x="93.2458%" y="111.50">mono..</text></g><g><title>monomorphization_collector (105,277,501 samples, 4.01%)</title><rect x="92.9956%" y="117" width="4.0050%" height="15" fill="rgb(224,169,11)"/><text x="93.2456%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (10,863,230 samples, 0.41%)</title><rect x="97.0009%" y="101" width="0.4133%" height="15" fill="rgb(250,166,2)"/><text x="97.2509%" y="111.50"></text></g><g><title>symbol_name (9,803,466 samples, 0.37%)</title><rect x="97.0412%" y="85" width="0.3729%" height="15" fill="rgb(242,216,29)"/><text x="97.2912%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (120,235,293 samples, 4.57%)</title><rect x="92.9926%" y="133" width="4.5740%" height="15" fill="rgb(230,116,27)"/><text x="93.2426%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (14,878,011 samples, 0.57%)</title><rect x="97.0007%" y="117" width="0.5660%" height="15" fill="rgb(228,99,48)"/><text x="97.2507%" y="127.50"></text></g><g><title>cgu_partitioning (4,007,971 samples, 0.15%)</title><rect x="97.4142%" y="101" width="0.1525%" height="15" fill="rgb(253,11,6)"/><text x="97.6642%" y="111.50"></text></g><g><title>exported_symbols (120,804,879 samples, 4.60%)</title><rect x="92.9766%" y="149" width="4.5957%" height="15" fill="rgb(247,143,39)"/><text x="93.2266%" y="159.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,148,511 samples, 0.16%)</title><rect x="97.7137%" y="133" width="0.1578%" height="15" fill="rgb(236,97,10)"/><text x="97.9637%" y="143.50"></text></g><g><title>optimized_mir (7,874,130 samples, 0.30%)</title><rect x="97.5775%" y="149" width="0.2996%" height="15" fill="rgb(233,208,19)"/><text x="97.8275%" y="159.50"></text></g><g><title>generate_crate_metadata (131,734,420 samples, 5.01%)</title><rect x="92.8691%" y="165" width="5.0115%" height="15" fill="rgb(216,164,2)"/><text x="93.1191%" y="175.50">genera..</text></g><g><title>hir_lowering (5,827,929 samples, 0.22%)</title><rect x="97.8806%" y="165" width="0.2217%" height="15" fill="rgb(220,129,5)"/><text x="98.1306%" y="175.50"></text></g><g><title>finish_ongoing_codegen (38,260,830 samples, 1.46%)</title><rect x="98.1030%" y="149" width="1.4555%" height="15" fill="rgb(242,17,10)"/><text x="98.3530%" y="159.50"></text></g><g><title>link_crate (7,150,723 samples, 0.27%)</title><rect x="99.5585%" y="149" width="0.2720%" height="15" fill="rgb(242,107,0)"/><text x="99.8085%" y="159.50"></text></g><g><title>link_binary (7,048,572 samples, 0.27%)</title><rect x="99.5624%" y="133" width="0.2681%" height="15" fill="rgb(251,28,31)"/><text x="99.8124%" y="143.50"></text></g><g><title>link_rlib (5,724,298 samples, 0.22%)</title><rect x="99.6128%" y="117" width="0.2178%" height="15" fill="rgb(233,223,10)"/><text x="99.8628%" y="127.50"></text></g><g><title>link (45,440,213 samples, 1.73%)</title><rect x="98.1024%" y="165" width="1.7287%" height="15" fill="rgb(215,21,27)"/><text x="98.3524%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (3,308,123 samples, 0.13%)</title><rect x="99.8537%" y="165" width="0.1258%" height="15" fill="rgb(232,23,21)"/><text x="100.1037%" y="175.50"></text></g><g><title>all (2,628,643,036 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,628,643,036 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>