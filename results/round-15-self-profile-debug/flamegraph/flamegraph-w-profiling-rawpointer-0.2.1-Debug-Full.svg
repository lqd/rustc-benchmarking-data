<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,550,056 samples, 4.99%)</title><rect x="1.3764%" y="229" width="4.9948%" height="15" fill="rgb(227,0,7)"/><text x="1.6264%" y="239.50">LLVM_p..</text></g><g><title>param_env (223,152 samples, 0.44%)</title><rect x="14.9414%" y="149" width="0.4371%" height="15" fill="rgb(217,0,24)"/><text x="15.1914%" y="159.50"></text></g><g><title>item_attrs (360,842 samples, 0.71%)</title><rect x="16.0096%" y="117" width="0.7068%" height="15" fill="rgb(221,193,54)"/><text x="16.2596%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (352,602 samples, 0.69%)</title><rect x="16.0257%" y="101" width="0.6906%" height="15" fill="rgb(248,212,6)"/><text x="16.2757%" y="111.50"></text></g><g><title>codegen_fn_attrs (466,374 samples, 0.91%)</title><rect x="15.8159%" y="133" width="0.9135%" height="15" fill="rgb(208,68,35)"/><text x="16.0659%" y="143.50"></text></g><g><title>is_copy_raw (284,834 samples, 0.56%)</title><rect x="18.7018%" y="117" width="0.5579%" height="15" fill="rgb(232,128,0)"/><text x="18.9518%" y="127.50"></text></g><g><title>evaluate_obligation (243,553 samples, 0.48%)</title><rect x="18.7826%" y="101" width="0.4770%" height="15" fill="rgb(207,160,47)"/><text x="19.0326%" y="111.50"></text></g><g><title>needs_drop_raw (64,351 samples, 0.13%)</title><rect x="19.2783%" y="117" width="0.1260%" height="15" fill="rgb(228,23,34)"/><text x="19.5283%" y="127.50"></text></g><g><title>is_copy_raw (53,650 samples, 0.11%)</title><rect x="19.2992%" y="101" width="0.1051%" height="15" fill="rgb(218,30,26)"/><text x="19.5492%" y="111.50"></text></g><g><title>resolve_instance (174,761 samples, 0.34%)</title><rect x="19.4043%" y="117" width="0.3423%" height="15" fill="rgb(220,122,19)"/><text x="19.6543%" y="127.50"></text></g><g><title>type_of (64,300 samples, 0.13%)</title><rect x="19.6207%" y="101" width="0.1259%" height="15" fill="rgb(250,228,42)"/><text x="19.8707%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (56,370 samples, 0.11%)</title><rect x="19.6362%" y="85" width="0.1104%" height="15" fill="rgb(240,193,28)"/><text x="19.8862%" y="95.50"></text></g><g><title>thir_body (370,102 samples, 0.72%)</title><rect x="19.7747%" y="117" width="0.7249%" height="15" fill="rgb(216,20,37)"/><text x="20.0247%" y="127.50"></text></g><g><title>mir_const (3,315,982 samples, 6.50%)</title><rect x="14.0335%" y="165" width="6.4950%" height="15" fill="rgb(206,188,39)"/><text x="14.2835%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (2,629,295 samples, 5.15%)</title><rect x="15.3785%" y="149" width="5.1500%" height="15" fill="rgb(217,207,13)"/><text x="15.6285%" y="159.50">unsafe..</text></g><g><title>mir_built (1,939,617 samples, 3.80%)</title><rect x="16.7294%" y="133" width="3.7991%" height="15" fill="rgb(231,73,38)"/><text x="16.9794%" y="143.50">mir_..</text></g><g><title>mir_promoted (3,744,654 samples, 7.33%)</title><rect x="13.2547%" y="181" width="7.3347%" height="15" fill="rgb(225,20,46)"/><text x="13.5047%" y="191.50">mir_promot..</text></g><g><title>MIR_borrow_checking (7,298,614 samples, 14.30%)</title><rect x="6.7499%" y="213" width="14.2959%" height="15" fill="rgb(210,31,41)"/><text x="6.9999%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,234,302 samples, 14.17%)</title><rect x="6.8759%" y="197" width="14.1699%" height="15" fill="rgb(221,200,47)"/><text x="7.1259%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (193,062 samples, 0.38%)</title><rect x="20.6676%" y="181" width="0.3782%" height="15" fill="rgb(226,26,5)"/><text x="20.9176%" y="191.50"></text></g><g><title>MIR_effect_checking (128,642 samples, 0.25%)</title><rect x="21.0457%" y="213" width="0.2520%" height="15" fill="rgb(249,33,26)"/><text x="21.2957%" y="223.50"></text></g><g><title>lint_levels (67,070 samples, 0.13%)</title><rect x="21.1663%" y="197" width="0.1314%" height="15" fill="rgb(235,183,28)"/><text x="21.4163%" y="207.50"></text></g><g><title>hir_module_items (132,821 samples, 0.26%)</title><rect x="21.2977%" y="213" width="0.2602%" height="15" fill="rgb(221,5,38)"/><text x="21.5477%" y="223.50"></text></g><g><title>get_lang_items (66,621 samples, 0.13%)</title><rect x="22.0659%" y="165" width="0.1305%" height="15" fill="rgb(247,18,42)"/><text x="22.3159%" y="175.50"></text></g><g><title>associated_item (53,121 samples, 0.10%)</title><rect x="22.2592%" y="149" width="0.1040%" height="15" fill="rgb(241,131,45)"/><text x="22.5092%" y="159.50"></text></g><g><title>should_inherit_track_caller (90,362 samples, 0.18%)</title><rect x="22.1964%" y="165" width="0.1770%" height="15" fill="rgb(249,31,29)"/><text x="22.4464%" y="175.50"></text></g><g><title>codegen_fn_attrs (296,004 samples, 0.58%)</title><rect x="21.8636%" y="181" width="0.5798%" height="15" fill="rgb(225,111,53)"/><text x="22.1136%" y="191.50"></text></g><g><title>check_mod_attrs (423,104 samples, 0.83%)</title><rect x="21.6150%" y="197" width="0.8287%" height="15" fill="rgb(238,160,17)"/><text x="21.8650%" y="207.50"></text></g><g><title>check_mod_const_bodies (72,410 samples, 0.14%)</title><rect x="22.4437%" y="197" width="0.1418%" height="15" fill="rgb(214,148,48)"/><text x="22.6937%" y="207.50"></text></g><g><title>lookup_deprecation_entry (76,630 samples, 0.15%)</title><rect x="22.7391%" y="181" width="0.1501%" height="15" fill="rgb(232,36,49)"/><text x="22.9891%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (146,252 samples, 0.29%)</title><rect x="22.6530%" y="197" width="0.2865%" height="15" fill="rgb(209,103,24)"/><text x="22.9030%" y="207.50"></text></g><g><title>misc_checking_1 (746,887 samples, 1.46%)</title><rect x="21.5595%" y="213" width="1.4629%" height="15" fill="rgb(229,88,8)"/><text x="21.8095%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (162,961 samples, 0.32%)</title><rect x="23.0280%" y="197" width="0.3192%" height="15" fill="rgb(213,181,19)"/><text x="23.2780%" y="207.50"></text></g><g><title>check_mod_liveness (129,281 samples, 0.25%)</title><rect x="23.0939%" y="181" width="0.2532%" height="15" fill="rgb(254,191,54)"/><text x="23.3439%" y="191.50"></text></g><g><title>misc_checking_2 (380,493 samples, 0.75%)</title><rect x="23.0224%" y="213" width="0.7453%" height="15" fill="rgb(241,83,37)"/><text x="23.2724%" y="223.50"></text></g><g><title>match_checking (214,712 samples, 0.42%)</title><rect x="23.3472%" y="197" width="0.4206%" height="15" fill="rgb(233,36,39)"/><text x="23.5972%" y="207.50"></text></g><g><title>check_match (196,881 samples, 0.39%)</title><rect x="23.3821%" y="181" width="0.3856%" height="15" fill="rgb(226,3,54)"/><text x="23.6321%" y="191.50"></text></g><g><title>check_private_in_public (71,311 samples, 0.14%)</title><rect x="23.8108%" y="197" width="0.1397%" height="15" fill="rgb(245,192,40)"/><text x="24.0608%" y="207.50"></text></g><g><title>death_checking (110,951 samples, 0.22%)</title><rect x="23.9505%" y="197" width="0.2173%" height="15" fill="rgb(238,167,29)"/><text x="24.2005%" y="207.50"></text></g><g><title>crate_lints (209,252 samples, 0.41%)</title><rect x="24.1735%" y="181" width="0.4099%" height="15" fill="rgb(232,182,51)"/><text x="24.4235%" y="191.50"></text></g><g><title>param_env (72,951 samples, 0.14%)</title><rect x="24.4404%" y="165" width="0.1429%" height="15" fill="rgb(231,60,39)"/><text x="24.6904%" y="175.50"></text></g><g><title>lint_checking (322,813 samples, 0.63%)</title><rect x="24.1678%" y="197" width="0.6323%" height="15" fill="rgb(208,69,12)"/><text x="24.4178%" y="207.50"></text></g><g><title>module_lints (110,691 samples, 0.22%)</title><rect x="24.5833%" y="181" width="0.2168%" height="15" fill="rgb(235,93,37)"/><text x="24.8333%" y="191.50"></text></g><g><title>lint_mod (106,991 samples, 0.21%)</title><rect x="24.5906%" y="165" width="0.2096%" height="15" fill="rgb(213,116,39)"/><text x="24.8406%" y="175.50"></text></g><g><title>privacy_access_levels (98,021 samples, 0.19%)</title><rect x="24.8001%" y="197" width="0.1920%" height="15" fill="rgb(222,207,29)"/><text x="25.0501%" y="207.50"></text></g><g><title>privacy_checking_modules (128,872 samples, 0.25%)</title><rect x="24.9921%" y="197" width="0.2524%" height="15" fill="rgb(206,96,30)"/><text x="25.2421%" y="207.50"></text></g><g><title>check_mod_privacy (126,922 samples, 0.25%)</title><rect x="24.9959%" y="181" width="0.2486%" height="15" fill="rgb(218,138,4)"/><text x="25.2459%" y="191.50"></text></g><g><title>misc_checking_3 (772,648 samples, 1.51%)</title><rect x="23.7677%" y="213" width="1.5134%" height="15" fill="rgb(250,191,14)"/><text x="24.0177%" y="223.50"></text></g><g><title>coherent_trait (112,011 samples, 0.22%)</title><rect x="25.4182%" y="181" width="0.2194%" height="15" fill="rgb(239,60,40)"/><text x="25.6682%" y="191.50"></text></g><g><title>specialization_graph_of (103,951 samples, 0.20%)</title><rect x="25.4340%" y="165" width="0.2036%" height="15" fill="rgb(206,27,48)"/><text x="25.6840%" y="175.50"></text></g><g><title>coherence_checking (180,692 samples, 0.35%)</title><rect x="25.3858%" y="197" width="0.3539%" height="15" fill="rgb(225,35,8)"/><text x="25.6358%" y="207.50"></text></g><g><title>associated_item (776,198 samples, 1.52%)</title><rect x="36.4864%" y="133" width="1.5203%" height="15" fill="rgb(250,213,24)"/><text x="36.7364%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (623,297 samples, 1.22%)</title><rect x="36.7858%" y="117" width="1.2209%" height="15" fill="rgb(247,123,22)"/><text x="37.0358%" y="127.50"></text></g><g><title>associated_items (1,028,790 samples, 2.02%)</title><rect x="36.0427%" y="149" width="2.0151%" height="15" fill="rgb(231,138,38)"/><text x="36.2927%" y="159.50">a..</text></g><g><title>impl_trait_ref (82,722 samples, 0.16%)</title><rect x="38.3442%" y="53" width="0.1620%" height="15" fill="rgb(231,145,46)"/><text x="38.5942%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (78,462 samples, 0.15%)</title><rect x="38.3525%" y="37" width="0.1537%" height="15" fill="rgb(251,118,11)"/><text x="38.6025%" y="47.50"></text></g><g><title>adt_destructor (165,582 samples, 0.32%)</title><rect x="38.2237%" y="117" width="0.3243%" height="15" fill="rgb(217,147,25)"/><text x="38.4737%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (163,912 samples, 0.32%)</title><rect x="38.2270%" y="101" width="0.3211%" height="15" fill="rgb(247,81,37)"/><text x="38.4770%" y="111.50"></text></g><g><title>coherent_trait (158,512 samples, 0.31%)</title><rect x="38.2376%" y="85" width="0.3105%" height="15" fill="rgb(209,12,38)"/><text x="38.4876%" y="95.50"></text></g><g><title>specialization_graph_of (154,982 samples, 0.30%)</title><rect x="38.2445%" y="69" width="0.3036%" height="15" fill="rgb(227,1,9)"/><text x="38.4945%" y="79.50"></text></g><g><title>dropck_outlives (211,652 samples, 0.41%)</title><rect x="38.1375%" y="149" width="0.4146%" height="15" fill="rgb(248,47,43)"/><text x="38.3875%" y="159.50"></text></g><g><title>adt_dtorck_constraint (176,842 samples, 0.35%)</title><rect x="38.2057%" y="133" width="0.3464%" height="15" fill="rgb(221,10,30)"/><text x="38.4557%" y="143.50"></text></g><g><title>generics_of (60,920 samples, 0.12%)</title><rect x="39.6760%" y="133" width="0.1193%" height="15" fill="rgb(210,229,1)"/><text x="39.9260%" y="143.50"></text></g><g><title>impl_item_implementor_ids (68,510 samples, 0.13%)</title><rect x="39.7954%" y="133" width="0.1342%" height="15" fill="rgb(222,148,37)"/><text x="40.0454%" y="143.50"></text></g><g><title>associated_items (60,570 samples, 0.12%)</title><rect x="39.8109%" y="117" width="0.1186%" height="15" fill="rgb(234,67,33)"/><text x="40.0609%" y="127.50"></text></g><g><title>impl_trait_ref (75,562 samples, 0.15%)</title><rect x="39.9571%" y="133" width="0.1480%" height="15" fill="rgb(247,98,35)"/><text x="40.2071%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (69,391 samples, 0.14%)</title><rect x="39.9692%" y="117" width="0.1359%" height="15" fill="rgb(247,138,52)"/><text x="40.2192%" y="127.50"></text></g><g><title>predicates_of (147,531 samples, 0.29%)</title><rect x="40.1416%" y="133" width="0.2890%" height="15" fill="rgb(213,79,30)"/><text x="40.3916%" y="143.50"></text></g><g><title>predicates_defined_on (95,761 samples, 0.19%)</title><rect x="40.2430%" y="117" width="0.1876%" height="15" fill="rgb(246,177,23)"/><text x="40.4930%" y="127.50"></text></g><g><title>specializes (254,733 samples, 0.50%)</title><rect x="40.4305%" y="133" width="0.4989%" height="15" fill="rgb(230,62,27)"/><text x="40.6805%" y="143.50"></text></g><g><title>param_env (199,142 samples, 0.39%)</title><rect x="40.5394%" y="117" width="0.3901%" height="15" fill="rgb(216,154,8)"/><text x="40.7894%" y="127.50"></text></g><g><title>def_span (129,631 samples, 0.25%)</title><rect x="40.6756%" y="101" width="0.2539%" height="15" fill="rgb(244,35,45)"/><text x="40.9256%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (123,141 samples, 0.24%)</title><rect x="40.6883%" y="85" width="0.2412%" height="15" fill="rgb(251,115,12)"/><text x="40.9383%" y="95.50"></text></g><g><title>trait_impls_of (280,813 samples, 0.55%)</title><rect x="40.9462%" y="133" width="0.5500%" height="15" fill="rgb(240,54,50)"/><text x="41.1962%" y="143.50"></text></g><g><title>implementations_of_trait (77,051 samples, 0.15%)</title><rect x="41.3453%" y="117" width="0.1509%" height="15" fill="rgb(233,84,52)"/><text x="41.5953%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (68,041 samples, 0.13%)</title><rect x="41.3629%" y="101" width="0.1333%" height="15" fill="rgb(207,117,47)"/><text x="41.6129%" y="111.50"></text></g><g><title>evaluate_obligation (1,515,805 samples, 2.97%)</title><rect x="38.5521%" y="149" width="2.9690%" height="15" fill="rgb(249,43,39)"/><text x="38.8021%" y="159.50">eva..</text></g><g><title>fn_sig (93,200 samples, 0.18%)</title><rect x="41.5536%" y="149" width="0.1826%" height="15" fill="rgb(209,38,44)"/><text x="41.8036%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (79,800 samples, 0.16%)</title><rect x="41.5799%" y="133" width="0.1563%" height="15" fill="rgb(236,212,23)"/><text x="41.8299%" y="143.50"></text></g><g><title>generics_of (80,691 samples, 0.16%)</title><rect x="41.7362%" y="149" width="0.1581%" height="15" fill="rgb(242,79,21)"/><text x="41.9862%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (55,291 samples, 0.11%)</title><rect x="41.7859%" y="133" width="0.1083%" height="15" fill="rgb(211,96,35)"/><text x="42.0359%" y="143.50"></text></g><g><title>item_attrs (328,243 samples, 0.64%)</title><rect x="42.0439%" y="149" width="0.6429%" height="15" fill="rgb(253,215,40)"/><text x="42.2939%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (326,123 samples, 0.64%)</title><rect x="42.0481%" y="133" width="0.6388%" height="15" fill="rgb(211,81,21)"/><text x="42.2981%" y="143.50"></text></g><g><title>method_autoderef_steps (148,451 samples, 0.29%)</title><rect x="42.7947%" y="149" width="0.2908%" height="15" fill="rgb(208,190,38)"/><text x="43.0447%" y="159.50"></text></g><g><title>evaluate_obligation (79,260 samples, 0.16%)</title><rect x="42.9302%" y="133" width="0.1552%" height="15" fill="rgb(235,213,38)"/><text x="43.1802%" y="143.50"></text></g><g><title>explicit_predicates_of (64,261 samples, 0.13%)</title><rect x="43.4107%" y="117" width="0.1259%" height="15" fill="rgb(237,122,38)"/><text x="43.6607%" y="127.50"></text></g><g><title>predicates_of (217,713 samples, 0.43%)</title><rect x="43.1622%" y="149" width="0.4264%" height="15" fill="rgb(244,218,35)"/><text x="43.4122%" y="159.50"></text></g><g><title>predicates_defined_on (145,942 samples, 0.29%)</title><rect x="43.3028%" y="133" width="0.2859%" height="15" fill="rgb(240,68,47)"/><text x="43.5528%" y="143.50"></text></g><g><title>item_bodies_checking (9,167,993 samples, 17.96%)</title><rect x="25.7848%" y="197" width="17.9574%" height="15" fill="rgb(210,16,53)"/><text x="26.0348%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,164,043 samples, 17.95%)</title><rect x="25.7925%" y="181" width="17.9497%" height="15" fill="rgb(235,124,12)"/><text x="26.0425%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (9,116,463 samples, 17.86%)</title><rect x="25.8857%" y="165" width="17.8565%" height="15" fill="rgb(224,169,11)"/><text x="26.1357%" y="175.50">typeck</text></g><g><title>item_types_checking (215,722 samples, 0.42%)</title><rect x="43.7422%" y="197" width="0.4225%" height="15" fill="rgb(250,166,2)"/><text x="43.9922%" y="207.50"></text></g><g><title>check_mod_item_types (212,382 samples, 0.42%)</title><rect x="43.7488%" y="181" width="0.4160%" height="15" fill="rgb(242,216,29)"/><text x="43.9988%" y="191.50"></text></g><g><title>fn_sig (280,084 samples, 0.55%)</title><rect x="44.4653%" y="165" width="0.5486%" height="15" fill="rgb(230,116,27)"/><text x="44.7153%" y="175.50"></text></g><g><title>late_bound_vars_map (181,091 samples, 0.35%)</title><rect x="44.6592%" y="149" width="0.3547%" height="15" fill="rgb(228,99,48)"/><text x="44.9092%" y="159.50"></text></g><g><title>resolve_lifetimes (154,751 samples, 0.30%)</title><rect x="44.7108%" y="133" width="0.3031%" height="15" fill="rgb(253,11,6)"/><text x="44.9608%" y="143.50"></text></g><g><title>generics_of (105,090 samples, 0.21%)</title><rect x="45.0139%" y="165" width="0.2058%" height="15" fill="rgb(247,143,39)"/><text x="45.2639%" y="175.50"></text></g><g><title>explicit_predicates_of (115,350 samples, 0.23%)</title><rect x="45.3497%" y="133" width="0.2259%" height="15" fill="rgb(236,97,10)"/><text x="45.5997%" y="143.50"></text></g><g><title>predicates_of (180,281 samples, 0.35%)</title><rect x="45.2333%" y="165" width="0.3531%" height="15" fill="rgb(233,208,19)"/><text x="45.4833%" y="175.50"></text></g><g><title>predicates_defined_on (157,801 samples, 0.31%)</title><rect x="45.2773%" y="149" width="0.3091%" height="15" fill="rgb(216,164,2)"/><text x="45.5273%" y="159.50"></text></g><g><title>super_predicates_of (96,321 samples, 0.19%)</title><rect x="45.5864%" y="165" width="0.1887%" height="15" fill="rgb(220,129,5)"/><text x="45.8364%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (82,291 samples, 0.16%)</title><rect x="45.6139%" y="149" width="0.1612%" height="15" fill="rgb(242,17,10)"/><text x="45.8639%" y="159.50"></text></g><g><title>type_collecting (912,249 samples, 1.79%)</title><rect x="44.1675%" y="197" width="1.7868%" height="15" fill="rgb(242,107,0)"/><text x="44.4175%" y="207.50">t..</text></g><g><title>collect_mod_item_types (901,579 samples, 1.77%)</title><rect x="44.1884%" y="181" width="1.7659%" height="15" fill="rgb(251,28,31)"/><text x="44.4384%" y="191.50"></text></g><g><title>type_of (89,470 samples, 0.18%)</title><rect x="45.7791%" y="165" width="0.1752%" height="15" fill="rgb(233,223,10)"/><text x="46.0291%" y="175.50"></text></g><g><title>param_env (89,760 samples, 0.18%)</title><rect x="46.6760%" y="165" width="0.1758%" height="15" fill="rgb(215,21,27)"/><text x="46.9260%" y="175.50"></text></g><g><title>check_impl_item_well_formed (412,855 samples, 0.81%)</title><rect x="46.1222%" y="181" width="0.8087%" height="15" fill="rgb(232,23,21)"/><text x="46.3722%" y="191.50"></text></g><g><title>adt_def (59,831 samples, 0.12%)</title><rect x="48.3477%" y="149" width="0.1172%" height="15" fill="rgb(244,5,23)"/><text x="48.5977%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (58,021 samples, 0.11%)</title><rect x="48.3513%" y="133" width="0.1136%" height="15" fill="rgb(226,81,46)"/><text x="48.6013%" y="143.50"></text></g><g><title>adt_sized_constraint (69,171 samples, 0.14%)</title><rect x="48.3327%" y="165" width="0.1355%" height="15" fill="rgb(247,70,30)"/><text x="48.5827%" y="175.50"></text></g><g><title>implied_outlives_bounds (94,750 samples, 0.19%)</title><rect x="48.5737%" y="165" width="0.1856%" height="15" fill="rgb(212,68,19)"/><text x="48.8237%" y="175.50"></text></g><g><title>param_env (266,783 samples, 0.52%)</title><rect x="48.7622%" y="165" width="0.5225%" height="15" fill="rgb(240,187,13)"/><text x="49.0122%" y="175.50"></text></g><g><title>predicates_of (97,490 samples, 0.19%)</title><rect x="49.2848%" y="165" width="0.1910%" height="15" fill="rgb(223,113,26)"/><text x="49.5348%" y="175.50"></text></g><g><title>predicates_defined_on (63,720 samples, 0.12%)</title><rect x="49.3509%" y="149" width="0.1248%" height="15" fill="rgb(206,192,2)"/><text x="49.6009%" y="159.50"></text></g><g><title>check_item_well_formed (1,505,356 samples, 2.95%)</title><rect x="46.9309%" y="181" width="2.9486%" height="15" fill="rgb(241,108,4)"/><text x="47.1809%" y="191.50">ch..</text></g><g><title>trait_impls_of (175,172 samples, 0.34%)</title><rect x="49.5363%" y="165" width="0.3431%" height="15" fill="rgb(247,173,49)"/><text x="49.7863%" y="175.50"></text></g><g><title>evaluate_obligation (170,242 samples, 0.33%)</title><rect x="51.2995%" y="165" width="0.3335%" height="15" fill="rgb(224,114,35)"/><text x="51.5495%" y="175.50"></text></g><g><title>implied_outlives_bounds (60,561 samples, 0.12%)</title><rect x="51.6330%" y="165" width="0.1186%" height="15" fill="rgb(245,159,27)"/><text x="51.8830%" y="175.50"></text></g><g><title>param_env (168,771 samples, 0.33%)</title><rect x="51.7516%" y="165" width="0.3306%" height="15" fill="rgb(245,172,44)"/><text x="52.0016%" y="175.50"></text></g><g><title>analysis (23,414,358 samples, 45.86%)</title><rect x="6.3712%" y="229" width="45.8619%" height="15" fill="rgb(236,23,11)"/><text x="6.6212%" y="239.50">analysis</text></g><g><title>type_check_crate (13,760,070 samples, 26.95%)</title><rect x="25.2811%" y="213" width="26.9520%" height="15" fill="rgb(205,117,38)"/><text x="25.5311%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,202,483 samples, 6.27%)</title><rect x="45.9603%" y="197" width="6.2727%" height="15" fill="rgb(237,72,25)"/><text x="46.2103%" y="207.50">wf_check..</text></g><g><title>check_trait_item_well_formed (1,201,611 samples, 2.35%)</title><rect x="49.8795%" y="181" width="2.3536%" height="15" fill="rgb(244,70,9)"/><text x="50.1295%" y="191.50">c..</text></g><g><title>region_scope_tree (77,030 samples, 0.15%)</title><rect x="52.0822%" y="165" width="0.1509%" height="15" fill="rgb(217,125,39)"/><text x="52.3322%" y="175.50"></text></g><g><title>codegen_module (495,855 samples, 0.97%)</title><rect x="54.2884%" y="213" width="0.9712%" height="15" fill="rgb(235,36,10)"/><text x="54.5384%" y="223.50"></text></g><g><title>codegen_crate (1,563,126 samples, 3.06%)</title><rect x="52.2536%" y="229" width="3.0617%" height="15" fill="rgb(251,123,47)"/><text x="52.5036%" y="239.50">cod..</text></g><g><title>LLVM_module_codegen (2,011,470 samples, 3.94%)</title><rect x="55.3615%" y="213" width="3.9399%" height="15" fill="rgb(221,13,13)"/><text x="55.6115%" y="223.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (1,945,729 samples, 3.81%)</title><rect x="55.4902%" y="197" width="3.8111%" height="15" fill="rgb(238,131,9)"/><text x="55.7402%" y="207.50">LLVM..</text></g><g><title>codegen_module_optimize (2,327,594 samples, 4.56%)</title><rect x="55.3153%" y="229" width="4.5591%" height="15" fill="rgb(211,50,8)"/><text x="55.5653%" y="239.50">codeg..</text></g><g><title>LLVM_module_optimize (292,572 samples, 0.57%)</title><rect x="59.3013%" y="213" width="0.5731%" height="15" fill="rgb(245,182,24)"/><text x="59.5513%" y="223.50"></text></g><g><title>AST_validation (97,061 samples, 0.19%)</title><rect x="60.3066%" y="213" width="0.1901%" height="15" fill="rgb(242,14,37)"/><text x="60.5566%" y="223.50"></text></g><g><title>crate_injection (96,801 samples, 0.19%)</title><rect x="60.5615%" y="213" width="0.1896%" height="15" fill="rgb(246,228,12)"/><text x="60.8115%" y="223.50"></text></g><g><title>macro_expand_crate (7,097,152 samples, 13.90%)</title><rect x="60.7512%" y="213" width="13.9012%" height="15" fill="rgb(213,55,15)"/><text x="61.0012%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (7,073,242 samples, 13.85%)</title><rect x="60.7980%" y="197" width="13.8544%" height="15" fill="rgb(209,9,3)"/><text x="61.0480%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (206,663 samples, 0.40%)</title><rect x="74.2476%" y="181" width="0.4048%" height="15" fill="rgb(230,59,30)"/><text x="74.4976%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (141,462 samples, 0.28%)</title><rect x="74.6742%" y="213" width="0.2771%" height="15" fill="rgb(209,121,21)"/><text x="74.9242%" y="223.50"></text></g><g><title>finalize_macro_resolutions (267,612 samples, 0.52%)</title><rect x="75.0313%" y="197" width="0.5242%" height="15" fill="rgb(220,109,13)"/><text x="75.2813%" y="207.50"></text></g><g><title>late_resolve_crate (587,046 samples, 1.15%)</title><rect x="75.5555%" y="197" width="1.1499%" height="15" fill="rgb(232,18,1)"/><text x="75.8055%" y="207.50"></text></g><g><title>configure_and_expand (8,652,288 samples, 16.95%)</title><rect x="59.8744%" y="229" width="16.9473%" height="15" fill="rgb(215,41,42)"/><text x="60.1244%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (954,930 samples, 1.87%)</title><rect x="74.9513%" y="213" width="1.8704%" height="15" fill="rgb(224,123,36)"/><text x="75.2013%" y="223.50">r..</text></g><g><title>drop_ast (89,071 samples, 0.17%)</title><rect x="76.8217%" y="229" width="0.1745%" height="15" fill="rgb(240,125,3)"/><text x="77.0717%" y="239.50"></text></g><g><title>early_lint_checks (168,592 samples, 0.33%)</title><rect x="77.0259%" y="229" width="0.3302%" height="15" fill="rgb(205,98,50)"/><text x="77.2759%" y="239.50"></text></g><g><title>free_global_ctxt (1,461,874 samples, 2.86%)</title><rect x="77.3561%" y="229" width="2.8634%" height="15" fill="rgb(205,185,37)"/><text x="77.6061%" y="239.50">fr..</text></g><g><title>crate_hash (129,041 samples, 0.25%)</title><rect x="81.7612%" y="213" width="0.2528%" height="15" fill="rgb(238,207,15)"/><text x="82.0112%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (89,361 samples, 0.18%)</title><rect x="82.1127%" y="197" width="0.1750%" height="15" fill="rgb(213,199,42)"/><text x="82.3627%" y="207.50"></text></g><g><title>exported_symbols (177,322 samples, 0.35%)</title><rect x="82.0612%" y="213" width="0.3473%" height="15" fill="rgb(235,201,11)"/><text x="82.3112%" y="223.50"></text></g><g><title>reachable_non_generics (61,691 samples, 0.12%)</title><rect x="82.2877%" y="197" width="0.1208%" height="15" fill="rgb(207,46,11)"/><text x="82.5377%" y="207.50"></text></g><g><title>is_sized_raw (53,220 samples, 0.10%)</title><rect x="85.3244%" y="181" width="0.1042%" height="15" fill="rgb(241,35,35)"/><text x="85.5744%" y="191.50"></text></g><g><title>layout_of (168,010 samples, 0.33%)</title><rect x="85.1311%" y="197" width="0.3291%" height="15" fill="rgb(243,32,47)"/><text x="85.3811%" y="207.50"></text></g><g><title>optimized_mir (2,640,425 samples, 5.17%)</title><rect x="82.5975%" y="213" width="5.1718%" height="15" fill="rgb(247,202,23)"/><text x="82.8475%" y="223.50">optimi..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,178,863 samples, 2.31%)</title><rect x="85.4602%" y="197" width="2.3090%" height="15" fill="rgb(219,102,11)"/><text x="85.7102%" y="207.50">m..</text></g><g><title>variances_of (57,011 samples, 0.11%)</title><rect x="87.8451%" y="213" width="0.1117%" height="15" fill="rgb(243,110,44)"/><text x="88.0951%" y="223.50"></text></g><g><title>generate_crate_metadata (3,950,600 samples, 7.74%)</title><rect x="80.2195%" y="229" width="7.7381%" height="15" fill="rgb(222,74,54)"/><text x="80.4695%" y="239.50">generate_cr..</text></g><g><title>hir_lowering (997,350 samples, 1.95%)</title><rect x="87.9575%" y="229" width="1.9535%" height="15" fill="rgb(216,99,12)"/><text x="88.2075%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (817,609 samples, 1.60%)</title><rect x="89.9361%" y="213" width="1.6015%" height="15" fill="rgb(226,22,26)"/><text x="90.1861%" y="223.50"></text></g><g><title>link_crate (607,606 samples, 1.19%)</title><rect x="91.5375%" y="213" width="1.1901%" height="15" fill="rgb(217,163,10)"/><text x="91.7875%" y="223.50"></text></g><g><title>link_binary (602,976 samples, 1.18%)</title><rect x="91.5466%" y="197" width="1.1811%" height="15" fill="rgb(213,25,53)"/><text x="91.7966%" y="207.50"></text></g><g><title>link_rlib (378,374 samples, 0.74%)</title><rect x="91.9865%" y="181" width="0.7411%" height="15" fill="rgb(252,105,26)"/><text x="92.2365%" y="191.50"></text></g><g><title>link (1,445,485 samples, 2.83%)</title><rect x="89.9111%" y="229" width="2.8313%" height="15" fill="rgb(220,39,43)"/><text x="90.1611%" y="239.50">li..</text></g><g><title>parse_crate (2,056,281 samples, 4.03%)</title><rect x="92.7423%" y="229" width="4.0277%" height="15" fill="rgb(229,68,48)"/><text x="92.9923%" y="239.50">pars..</text></g><g><title>prepare_outputs (361,894 samples, 0.71%)</title><rect x="96.7887%" y="229" width="0.7088%" height="15" fill="rgb(252,8,32)"/><text x="97.0387%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (547,085 samples, 1.07%)</title><rect x="97.4975%" y="229" width="1.0716%" height="15" fill="rgb(223,20,43)"/><text x="97.7475%" y="239.50"></text></g><g><title>setup_global_ctxt (148,162 samples, 0.29%)</title><rect x="98.5713%" y="229" width="0.2902%" height="15" fill="rgb(229,81,49)"/><text x="98.8213%" y="239.50"></text></g><g><title>all (51,054,069 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (51,054,069 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (581,226 samples, 1.14%)</title><rect x="98.8615%" y="229" width="1.1385%" height="15" fill="rgb(249,174,33)"/><text x="99.1115%" y="239.50"></text></g></svg></svg>