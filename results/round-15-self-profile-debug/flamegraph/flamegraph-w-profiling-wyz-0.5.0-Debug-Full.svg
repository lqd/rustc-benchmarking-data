<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,956,275 samples, 3.01%)</title><rect x="0.2329%" y="181" width="3.0130%" height="15" fill="rgb(227,0,7)"/><text x="0.4829%" y="191.50">LLV..</text></g><g><title>implied_outlives_bounds (452,964 samples, 0.17%)</title><rect x="12.7751%" y="133" width="0.1715%" height="15" fill="rgb(217,0,24)"/><text x="13.0251%" y="143.50"></text></g><g><title>param_env (282,422 samples, 0.11%)</title><rect x="14.5049%" y="101" width="0.1070%" height="15" fill="rgb(221,193,54)"/><text x="14.7549%" y="111.50"></text></g><g><title>item_attrs (873,750 samples, 0.33%)</title><rect x="15.0714%" y="69" width="0.3309%" height="15" fill="rgb(248,212,6)"/><text x="15.3214%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (856,140 samples, 0.32%)</title><rect x="15.0781%" y="53" width="0.3242%" height="15" fill="rgb(208,68,35)"/><text x="15.3281%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,059,752 samples, 0.40%)</title><rect x="15.0080%" y="85" width="0.4013%" height="15" fill="rgb(232,128,0)"/><text x="15.2580%" y="95.50"></text></g><g><title>is_copy_raw (1,468,254 samples, 0.56%)</title><rect x="17.6769%" y="53" width="0.5560%" height="15" fill="rgb(207,160,47)"/><text x="17.9269%" y="63.50"></text></g><g><title>evaluate_obligation (1,017,681 samples, 0.39%)</title><rect x="17.8475%" y="37" width="0.3854%" height="15" fill="rgb(228,23,34)"/><text x="18.0975%" y="47.50"></text></g><g><title>needs_drop_raw (1,732,255 samples, 0.66%)</title><rect x="17.5808%" y="69" width="0.6560%" height="15" fill="rgb(218,30,26)"/><text x="17.8308%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,252,987 samples, 0.47%)</title><rect x="18.4403%" y="53" width="0.4745%" height="15" fill="rgb(220,122,19)"/><text x="18.6903%" y="63.50"></text></g><g><title>resolve_instance (2,095,243 samples, 0.79%)</title><rect x="18.2488%" y="69" width="0.7935%" height="15" fill="rgb(250,228,42)"/><text x="18.4988%" y="79.50"></text></g><g><title>thir_body (1,635,217 samples, 0.62%)</title><rect x="19.0763%" y="69" width="0.6193%" height="15" fill="rgb(240,193,28)"/><text x="19.3263%" y="79.50"></text></g><g><title>mir_const (15,876,287 samples, 6.01%)</title><rect x="13.7786%" y="117" width="6.0124%" height="15" fill="rgb(216,20,37)"/><text x="14.0286%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (13,676,027 samples, 5.18%)</title><rect x="14.6119%" y="101" width="5.1791%" height="15" fill="rgb(206,188,39)"/><text x="14.8619%" y="111.50">unsafe..</text></g><g><title>mir_built (11,570,343 samples, 4.38%)</title><rect x="15.4093%" y="85" width="4.3817%" height="15" fill="rgb(217,207,13)"/><text x="15.6593%" y="95.50">mir_b..</text></g><g><title>mir_const (318,525 samples, 0.12%)</title><rect x="19.9934%" y="101" width="0.1206%" height="15" fill="rgb(231,73,38)"/><text x="20.2434%" y="111.50"></text></g><g><title>mir_promoted (18,484,889 samples, 7.00%)</title><rect x="13.1234%" y="133" width="7.0002%" height="15" fill="rgb(225,20,46)"/><text x="13.3734%" y="143.50">mir_promo..</text></g><g><title>mir_const_qualif (878,302 samples, 0.33%)</title><rect x="19.7910%" y="117" width="0.3326%" height="15" fill="rgb(210,31,41)"/><text x="20.0410%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (534,755 samples, 0.20%)</title><rect x="20.1248%" y="133" width="0.2025%" height="15" fill="rgb(221,200,47)"/><text x="20.3748%" y="143.50"></text></g><g><title>type_op_normalize_predicate (779,063 samples, 0.30%)</title><rect x="20.4182%" y="133" width="0.2950%" height="15" fill="rgb(226,26,5)"/><text x="20.6682%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,001,254 samples, 0.38%)</title><rect x="20.7132%" y="133" width="0.3792%" height="15" fill="rgb(249,33,26)"/><text x="20.9632%" y="143.50"></text></g><g><title>normalize_projection_ty (591,838 samples, 0.22%)</title><rect x="20.8683%" y="117" width="0.2241%" height="15" fill="rgb(235,183,28)"/><text x="21.1183%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,669,972 samples, 2.53%)</title><rect x="21.0924%" y="133" width="2.5259%" height="15" fill="rgb(221,5,38)"/><text x="21.3424%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (53,252,218 samples, 20.17%)</title><rect x="3.4549%" y="165" width="20.1667%" height="15" fill="rgb(247,18,42)"/><text x="3.7049%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (52,846,061 samples, 20.01%)</title><rect x="3.6087%" y="149" width="20.0128%" height="15" fill="rgb(241,131,45)"/><text x="3.8587%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (378,384 samples, 0.14%)</title><rect x="23.6215%" y="165" width="0.1433%" height="15" fill="rgb(249,31,29)"/><text x="23.8715%" y="175.50"></text></g><g><title>hir_module_items (444,814 samples, 0.17%)</title><rect x="23.7648%" y="165" width="0.1685%" height="15" fill="rgb(225,111,53)"/><text x="24.0148%" y="175.50"></text></g><g><title>should_inherit_track_caller (566,108 samples, 0.21%)</title><rect x="24.3485%" y="117" width="0.2144%" height="15" fill="rgb(238,160,17)"/><text x="24.5985%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,141,535 samples, 0.43%)</title><rect x="24.1353%" y="133" width="0.4323%" height="15" fill="rgb(214,148,48)"/><text x="24.3853%" y="143.50"></text></g><g><title>check_mod_attrs (1,643,288 samples, 0.62%)</title><rect x="23.9454%" y="149" width="0.6223%" height="15" fill="rgb(232,36,49)"/><text x="24.1954%" y="159.50"></text></g><g><title>check_mod_const_bodies (300,803 samples, 0.11%)</title><rect x="24.5677%" y="149" width="0.1139%" height="15" fill="rgb(209,103,24)"/><text x="24.8177%" y="159.50"></text></g><g><title>lookup_deprecation_entry (369,115 samples, 0.14%)</title><rect x="24.8920%" y="133" width="0.1398%" height="15" fill="rgb(229,88,8)"/><text x="25.1420%" y="143.50"></text></g><g><title>stability_index (286,593 samples, 0.11%)</title><rect x="24.9233%" y="117" width="0.1085%" height="15" fill="rgb(213,181,19)"/><text x="25.1733%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (902,470 samples, 0.34%)</title><rect x="24.7387%" y="149" width="0.3418%" height="15" fill="rgb(254,191,54)"/><text x="24.9887%" y="159.50"></text></g><g><title>misc_checking_1 (3,141,883 samples, 1.19%)</title><rect x="23.9334%" y="165" width="1.1898%" height="15" fill="rgb(241,83,37)"/><text x="24.1834%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (830,019 samples, 0.31%)</title><rect x="25.1239%" y="149" width="0.3143%" height="15" fill="rgb(233,36,39)"/><text x="25.3739%" y="159.50"></text></g><g><title>check_mod_liveness (680,408 samples, 0.26%)</title><rect x="25.1806%" y="133" width="0.2577%" height="15" fill="rgb(226,3,54)"/><text x="25.4306%" y="143.50"></text></g><g><title>misc_checking_2 (1,815,349 samples, 0.69%)</title><rect x="25.1233%" y="165" width="0.6875%" height="15" fill="rgb(245,192,40)"/><text x="25.3733%" y="175.50"></text></g><g><title>match_checking (983,620 samples, 0.37%)</title><rect x="25.4383%" y="149" width="0.3725%" height="15" fill="rgb(238,167,29)"/><text x="25.6883%" y="159.50"></text></g><g><title>check_match (882,749 samples, 0.33%)</title><rect x="25.4765%" y="133" width="0.3343%" height="15" fill="rgb(232,182,51)"/><text x="25.7265%" y="143.50"></text></g><g><title>check_private_in_public (564,856 samples, 0.21%)</title><rect x="25.8150%" y="149" width="0.2139%" height="15" fill="rgb(231,60,39)"/><text x="26.0650%" y="159.50"></text></g><g><title>death_checking (1,089,841 samples, 0.41%)</title><rect x="26.0289%" y="149" width="0.4127%" height="15" fill="rgb(208,69,12)"/><text x="26.2789%" y="159.50"></text></g><g><title>explicit_predicates_of (281,683 samples, 0.11%)</title><rect x="26.9227%" y="69" width="0.1067%" height="15" fill="rgb(235,93,37)"/><text x="27.1727%" y="79.50"></text></g><g><title>param_env (536,164 samples, 0.20%)</title><rect x="26.8289%" y="117" width="0.2030%" height="15" fill="rgb(213,116,39)"/><text x="27.0789%" y="127.50"></text></g><g><title>predicates_of (350,823 samples, 0.13%)</title><rect x="26.8991%" y="101" width="0.1329%" height="15" fill="rgb(222,207,29)"/><text x="27.1491%" y="111.50"></text></g><g><title>predicates_defined_on (322,743 samples, 0.12%)</title><rect x="26.9097%" y="85" width="0.1222%" height="15" fill="rgb(206,96,30)"/><text x="27.1597%" y="95.50"></text></g><g><title>crate_lints (2,679,709 samples, 1.01%)</title><rect x="26.4423%" y="133" width="1.0148%" height="15" fill="rgb(218,138,4)"/><text x="26.6923%" y="143.50"></text></g><g><title>type_of (1,113,409 samples, 0.42%)</title><rect x="27.0355%" y="117" width="0.4216%" height="15" fill="rgb(250,191,14)"/><text x="27.2855%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (883,327 samples, 0.33%)</title><rect x="27.1226%" y="101" width="0.3345%" height="15" fill="rgb(239,60,40)"/><text x="27.3726%" y="111.50"></text></g><g><title>lint_checking (3,300,775 samples, 1.25%)</title><rect x="26.4416%" y="149" width="1.2500%" height="15" fill="rgb(206,27,48)"/><text x="26.6916%" y="159.50"></text></g><g><title>module_lints (619,206 samples, 0.23%)</title><rect x="27.4571%" y="133" width="0.2345%" height="15" fill="rgb(225,35,8)"/><text x="27.7071%" y="143.50"></text></g><g><title>lint_mod (612,046 samples, 0.23%)</title><rect x="27.4598%" y="117" width="0.2318%" height="15" fill="rgb(250,213,24)"/><text x="27.7098%" y="127.50"></text></g><g><title>privacy_access_levels (884,960 samples, 0.34%)</title><rect x="27.6916%" y="149" width="0.3351%" height="15" fill="rgb(247,123,22)"/><text x="27.9416%" y="159.50"></text></g><g><title>privacy_checking_modules (1,996,392 samples, 0.76%)</title><rect x="28.0268%" y="149" width="0.7560%" height="15" fill="rgb(231,138,38)"/><text x="28.2768%" y="159.50"></text></g><g><title>check_mod_privacy (1,991,692 samples, 0.75%)</title><rect x="28.0285%" y="133" width="0.7543%" height="15" fill="rgb(231,145,46)"/><text x="28.2785%" y="143.50"></text></g><g><title>misc_checking_3 (7,878,824 samples, 2.98%)</title><rect x="25.8108%" y="165" width="2.9837%" height="15" fill="rgb(251,118,11)"/><text x="26.0608%" y="175.50">mis..</text></g><g><title>adt_destructor (390,284 samples, 0.15%)</title><rect x="28.9077%" y="117" width="0.1478%" height="15" fill="rgb(217,147,25)"/><text x="29.1577%" y="127.50"></text></g><g><title>coherent_trait (385,934 samples, 0.15%)</title><rect x="28.9094%" y="101" width="0.1462%" height="15" fill="rgb(247,81,37)"/><text x="29.1594%" y="111.50"></text></g><g><title>specialization_graph_of (384,904 samples, 0.15%)</title><rect x="28.9098%" y="85" width="0.1458%" height="15" fill="rgb(209,12,38)"/><text x="29.1598%" y="95.50"></text></g><g><title>impl_parent (3,365,838 samples, 1.27%)</title><rect x="31.4775%" y="101" width="1.2746%" height="15" fill="rgb(227,1,9)"/><text x="31.7275%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,910,525 samples, 0.72%)</title><rect x="32.0287%" y="85" width="0.7235%" height="15" fill="rgb(248,47,43)"/><text x="32.2787%" y="95.50"></text></g><g><title>impl_trait_ref (6,563,196 samples, 2.49%)</title><rect x="32.7527%" y="101" width="2.4855%" height="15" fill="rgb(221,10,30)"/><text x="33.0027%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,129,283 samples, 1.94%)</title><rect x="33.2957%" y="85" width="1.9425%" height="15" fill="rgb(210,229,1)"/><text x="33.5457%" y="95.50">m..</text></g><g><title>trait_impls_of (1,573,407 samples, 0.60%)</title><rect x="35.2690%" y="101" width="0.5959%" height="15" fill="rgb(222,148,37)"/><text x="35.5190%" y="111.50"></text></g><g><title>implementations_of_trait (419,425 samples, 0.16%)</title><rect x="35.7060%" y="85" width="0.1588%" height="15" fill="rgb(234,67,33)"/><text x="35.9560%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (301,114 samples, 0.11%)</title><rect x="35.7508%" y="69" width="0.1140%" height="15" fill="rgb(247,98,35)"/><text x="36.0008%" y="79.50"></text></g><g><title>coherent_trait (18,457,647 samples, 6.99%)</title><rect x="28.8755%" y="133" width="6.9899%" height="15" fill="rgb(247,138,52)"/><text x="29.1255%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (17,831,250 samples, 6.75%)</title><rect x="29.1127%" y="117" width="6.7527%" height="15" fill="rgb(213,79,30)"/><text x="29.3627%" y="127.50">specializ..</text></g><g><title>coherence_checking (18,655,739 samples, 7.06%)</title><rect x="28.8608%" y="149" width="7.0649%" height="15" fill="rgb(246,177,23)"/><text x="29.1108%" y="159.50">coherence..</text></g><g><title>associated_item (338,585 samples, 0.13%)</title><rect x="50.4788%" y="85" width="0.1282%" height="15" fill="rgb(230,62,27)"/><text x="50.7288%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (279,215 samples, 0.11%)</title><rect x="50.5013%" y="69" width="0.1057%" height="15" fill="rgb(216,154,8)"/><text x="50.7513%" y="79.50"></text></g><g><title>associated_items (485,916 samples, 0.18%)</title><rect x="50.4309%" y="101" width="0.1840%" height="15" fill="rgb(244,35,45)"/><text x="50.6809%" y="111.50"></text></g><g><title>dropck_outlives (1,056,395 samples, 0.40%)</title><rect x="50.6733%" y="101" width="0.4001%" height="15" fill="rgb(251,115,12)"/><text x="50.9233%" y="111.50"></text></g><g><title>impl_trait_ref (295,553 samples, 0.11%)</title><rect x="52.1665%" y="85" width="0.1119%" height="15" fill="rgb(240,54,50)"/><text x="52.4165%" y="95.50"></text></g><g><title>specializes (292,184 samples, 0.11%)</title><rect x="52.3246%" y="85" width="0.1107%" height="15" fill="rgb(233,84,52)"/><text x="52.5746%" y="95.50"></text></g><g><title>evaluate_obligation (3,698,995 samples, 1.40%)</title><rect x="51.0734%" y="101" width="1.4008%" height="15" fill="rgb(207,117,47)"/><text x="51.3234%" y="111.50"></text></g><g><title>method_autoderef_steps (992,037 samples, 0.38%)</title><rect x="52.7302%" y="101" width="0.3757%" height="15" fill="rgb(249,43,39)"/><text x="52.9802%" y="111.50"></text></g><g><title>evaluate_obligation (464,313 samples, 0.18%)</title><rect x="52.9301%" y="85" width="0.1758%" height="15" fill="rgb(209,38,44)"/><text x="53.1801%" y="95.50"></text></g><g><title>explicit_predicates_of (284,844 samples, 0.11%)</title><rect x="53.2910%" y="69" width="0.1079%" height="15" fill="rgb(236,212,23)"/><text x="53.5410%" y="79.50"></text></g><g><title>predicates_of (568,534 samples, 0.22%)</title><rect x="53.2119%" y="101" width="0.2153%" height="15" fill="rgb(242,79,21)"/><text x="53.4619%" y="111.50"></text></g><g><title>predicates_defined_on (456,984 samples, 0.17%)</title><rect x="53.2541%" y="85" width="0.1731%" height="15" fill="rgb(211,96,35)"/><text x="53.5041%" y="95.50"></text></g><g><title>typeck (2,575,497 samples, 0.98%)</title><rect x="53.4824%" y="101" width="0.9753%" height="15" fill="rgb(253,215,40)"/><text x="53.7324%" y="111.50"></text></g><g><title>item_bodies_checking (48,923,022 samples, 18.53%)</title><rect x="35.9752%" y="149" width="18.5272%" height="15" fill="rgb(211,81,21)"/><text x="36.2252%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (48,918,762 samples, 18.53%)</title><rect x="35.9768%" y="133" width="18.5256%" height="15" fill="rgb(208,190,38)"/><text x="36.2268%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (48,614,137 samples, 18.41%)</title><rect x="36.0922%" y="117" width="18.4102%" height="15" fill="rgb(235,213,38)"/><text x="36.3422%" y="127.50">typeck</text></g><g><title>item_types_checking (5,666,490 samples, 2.15%)</title><rect x="54.5024%" y="149" width="2.1459%" height="15" fill="rgb(237,122,38)"/><text x="54.7524%" y="159.50">i..</text></g><g><title>check_mod_item_types (5,659,830 samples, 2.14%)</title><rect x="54.5049%" y="133" width="2.1434%" height="15" fill="rgb(244,218,35)"/><text x="54.7549%" y="143.50">c..</text></g><g><title>fn_sig (975,240 samples, 0.37%)</title><rect x="56.9691%" y="117" width="0.3693%" height="15" fill="rgb(240,68,47)"/><text x="57.2191%" y="127.50"></text></g><g><title>generics_of (681,994 samples, 0.26%)</title><rect x="57.3384%" y="117" width="0.2583%" height="15" fill="rgb(210,16,53)"/><text x="57.5884%" y="127.50"></text></g><g><title>late_bound_vars_map (1,349,641 samples, 0.51%)</title><rect x="58.2067%" y="69" width="0.5111%" height="15" fill="rgb(235,124,12)"/><text x="58.4567%" y="79.50"></text></g><g><title>resolve_lifetimes (1,266,420 samples, 0.48%)</title><rect x="58.2382%" y="53" width="0.4796%" height="15" fill="rgb(224,169,11)"/><text x="58.4882%" y="63.50"></text></g><g><title>explicit_predicates_of (2,408,322 samples, 0.91%)</title><rect x="57.8829%" y="85" width="0.9120%" height="15" fill="rgb(250,166,2)"/><text x="58.1329%" y="95.50"></text></g><g><title>predicates_of (3,181,081 samples, 1.20%)</title><rect x="57.6801%" y="117" width="1.2047%" height="15" fill="rgb(242,216,29)"/><text x="57.9301%" y="127.50"></text></g><g><title>predicates_defined_on (2,972,750 samples, 1.13%)</title><rect x="57.7590%" y="101" width="1.1258%" height="15" fill="rgb(230,116,27)"/><text x="58.0090%" y="111.50"></text></g><g><title>type_collecting (6,327,358 samples, 2.40%)</title><rect x="56.6495%" y="149" width="2.3962%" height="15" fill="rgb(228,99,48)"/><text x="56.8995%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (6,316,677 samples, 2.39%)</title><rect x="56.6536%" y="133" width="2.3921%" height="15" fill="rgb(253,11,6)"/><text x="56.9036%" y="143.50">co..</text></g><g><title>type_of (332,614 samples, 0.13%)</title><rect x="58.9197%" y="117" width="0.1260%" height="15" fill="rgb(247,143,39)"/><text x="59.1697%" y="127.50"></text></g><g><title>evaluate_obligation (2,327,368 samples, 0.88%)</title><rect x="63.1719%" y="117" width="0.8814%" height="15" fill="rgb(236,97,10)"/><text x="63.4219%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,602,418 samples, 0.61%)</title><rect x="64.0732%" y="117" width="0.6068%" height="15" fill="rgb(233,208,19)"/><text x="64.3232%" y="127.50"></text></g><g><title>param_env (1,580,226 samples, 0.60%)</title><rect x="64.6801%" y="117" width="0.5984%" height="15" fill="rgb(216,164,2)"/><text x="64.9301%" y="127.50"></text></g><g><title>region_scope_tree (917,745 samples, 0.35%)</title><rect x="65.3007%" y="117" width="0.3476%" height="15" fill="rgb(220,129,5)"/><text x="65.5507%" y="127.50"></text></g><g><title>check_impl_item_well_formed (16,470,428 samples, 6.24%)</title><rect x="59.4302%" y="133" width="6.2374%" height="15" fill="rgb(242,17,10)"/><text x="59.6802%" y="143.50">check_im..</text></g><g><title>evaluate_obligation (340,474 samples, 0.13%)</title><rect x="69.2497%" y="117" width="0.1289%" height="15" fill="rgb(242,107,0)"/><text x="69.4997%" y="127.50"></text></g><g><title>implied_outlives_bounds (509,226 samples, 0.19%)</title><rect x="69.4201%" y="117" width="0.1928%" height="15" fill="rgb(251,28,31)"/><text x="69.6701%" y="127.50"></text></g><g><title>param_env (2,016,382 samples, 0.76%)</title><rect x="69.6229%" y="117" width="0.7636%" height="15" fill="rgb(233,223,10)"/><text x="69.8729%" y="127.50"></text></g><g><title>check_item_well_formed (13,012,816 samples, 4.93%)</title><rect x="65.6675%" y="133" width="4.9280%" height="15" fill="rgb(215,21,27)"/><text x="65.9175%" y="143.50">check_..</text></g><g><title>analysis (179,321,042 samples, 67.91%)</title><rect x="3.2459%" y="181" width="67.9090%" height="15" fill="rgb(232,23,21)"/><text x="3.4959%" y="191.50">analysis</text></g><g><title>type_check_crate (111,857,393 samples, 42.36%)</title><rect x="28.7945%" y="165" width="42.3605%" height="15" fill="rgb(244,5,23)"/><text x="29.0445%" y="175.50">type_check_crate</text></g><g><title>wf_checking (31,957,701 samples, 12.10%)</title><rect x="59.0525%" y="149" width="12.1024%" height="15" fill="rgb(226,81,46)"/><text x="59.3025%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,477,285 samples, 0.56%)</title><rect x="70.5955%" y="133" width="0.5594%" height="15" fill="rgb(247,70,30)"/><text x="70.8455%" y="143.50"></text></g><g><title>codegen_module (1,183,142 samples, 0.45%)</title><rect x="71.3379%" y="165" width="0.4481%" height="15" fill="rgb(212,68,19)"/><text x="71.5879%" y="175.50"></text></g><g><title>codegen_crate (1,739,339 samples, 0.66%)</title><rect x="71.1575%" y="181" width="0.6587%" height="15" fill="rgb(240,187,13)"/><text x="71.4075%" y="191.50"></text></g><g><title>LLVM_module_codegen (7,268,608 samples, 2.75%)</title><rect x="71.8223%" y="165" width="2.7526%" height="15" fill="rgb(223,113,26)"/><text x="72.0723%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (7,063,376 samples, 2.67%)</title><rect x="71.9000%" y="149" width="2.6749%" height="15" fill="rgb(206,192,2)"/><text x="72.1500%" y="159.50">LL..</text></g><g><title>codegen_module_optimize (7,714,142 samples, 2.92%)</title><rect x="71.8162%" y="181" width="2.9214%" height="15" fill="rgb(241,108,4)"/><text x="72.0662%" y="191.50">co..</text></g><g><title>LLVM_module_optimize (429,354 samples, 0.16%)</title><rect x="74.5749%" y="165" width="0.1626%" height="15" fill="rgb(247,173,49)"/><text x="74.8249%" y="175.50"></text></g><g><title>AST_validation (521,375 samples, 0.20%)</title><rect x="74.7877%" y="165" width="0.1974%" height="15" fill="rgb(224,114,35)"/><text x="75.0377%" y="175.50"></text></g><g><title>metadata_register_crate (942,529 samples, 0.36%)</title><rect x="81.9342%" y="133" width="0.3569%" height="15" fill="rgb(245,159,27)"/><text x="82.1842%" y="143.50"></text></g><g><title>metadata_register_crate (345,153 samples, 0.13%)</title><rect x="82.1605%" y="117" width="0.1307%" height="15" fill="rgb(245,172,44)"/><text x="82.4105%" y="127.50"></text></g><g><title>macro_expand_crate (19,351,037 samples, 7.33%)</title><rect x="75.0542%" y="165" width="7.3283%" height="15" fill="rgb(236,23,11)"/><text x="75.3042%" y="175.50">macro_expa..</text></g><g><title>expand_crate (19,339,756 samples, 7.32%)</title><rect x="75.0585%" y="149" width="7.3240%" height="15" fill="rgb(205,117,38)"/><text x="75.3085%" y="159.50">expand_cra..</text></g><g><title>finalize_macro_resolutions (327,533 samples, 0.12%)</title><rect x="82.4298%" y="149" width="0.1240%" height="15" fill="rgb(237,72,25)"/><text x="82.6798%" y="159.50"></text></g><g><title>late_resolve_crate (3,528,157 samples, 1.34%)</title><rect x="82.5538%" y="149" width="1.3361%" height="15" fill="rgb(244,70,9)"/><text x="82.8038%" y="159.50"></text></g><g><title>configure_and_expand (24,382,310 samples, 9.23%)</title><rect x="74.7375%" y="181" width="9.2336%" height="15" fill="rgb(217,125,39)"/><text x="74.9875%" y="191.50">configure_and..</text></g><g><title>resolve_crate (4,143,493 samples, 1.57%)</title><rect x="82.4020%" y="165" width="1.5691%" height="15" fill="rgb(235,36,10)"/><text x="82.6520%" y="175.50"></text></g><g><title>drop_ast (597,577 samples, 0.23%)</title><rect x="83.9711%" y="181" width="0.2263%" height="15" fill="rgb(251,123,47)"/><text x="84.2211%" y="191.50"></text></g><g><title>early_lint_checks (672,527 samples, 0.25%)</title><rect x="84.2060%" y="181" width="0.2547%" height="15" fill="rgb(221,13,13)"/><text x="84.4560%" y="191.50"></text></g><g><title>free_global_ctxt (4,742,491 samples, 1.80%)</title><rect x="84.4607%" y="181" width="1.7960%" height="15" fill="rgb(238,131,9)"/><text x="84.7107%" y="191.50">f..</text></g><g><title>monomorphization_collector_graph_walk (315,873 samples, 0.12%)</title><rect x="88.0981%" y="117" width="0.1196%" height="15" fill="rgb(211,50,8)"/><text x="88.3481%" y="127.50"></text></g><g><title>monomorphization_collector (373,904 samples, 0.14%)</title><rect x="88.0966%" y="133" width="0.1416%" height="15" fill="rgb(245,182,24)"/><text x="88.3466%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (509,916 samples, 0.19%)</title><rect x="88.0905%" y="149" width="0.1931%" height="15" fill="rgb(242,14,37)"/><text x="88.3405%" y="159.50"></text></g><g><title>exported_symbols (862,669 samples, 0.33%)</title><rect x="88.0857%" y="165" width="0.3267%" height="15" fill="rgb(246,228,12)"/><text x="88.3357%" y="175.50"></text></g><g><title>reachable_non_generics (339,923 samples, 0.13%)</title><rect x="88.2836%" y="149" width="0.1287%" height="15" fill="rgb(213,55,15)"/><text x="88.5336%" y="159.50"></text></g><g><title>reachable_set (288,973 samples, 0.11%)</title><rect x="88.3029%" y="133" width="0.1094%" height="15" fill="rgb(209,9,3)"/><text x="88.5529%" y="143.50"></text></g><g><title>is_sized_raw (834,212 samples, 0.32%)</title><rect x="91.3517%" y="133" width="0.3159%" height="15" fill="rgb(230,59,30)"/><text x="91.6017%" y="143.50"></text></g><g><title>evaluate_obligation (593,366 samples, 0.22%)</title><rect x="91.4429%" y="117" width="0.2247%" height="15" fill="rgb(209,121,21)"/><text x="91.6929%" y="127.50"></text></g><g><title>layout_of (1,885,803 samples, 0.71%)</title><rect x="91.1151%" y="149" width="0.7142%" height="15" fill="rgb(220,109,13)"/><text x="91.3651%" y="159.50"></text></g><g><title>needs_drop_raw (320,314 samples, 0.12%)</title><rect x="94.0087%" y="133" width="0.1213%" height="15" fill="rgb(232,18,1)"/><text x="94.2587%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,831,499 samples, 2.59%)</title><rect x="91.8292%" y="149" width="2.5871%" height="15" fill="rgb(215,41,42)"/><text x="92.0792%" y="159.50">mi..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (576,605 samples, 0.22%)</title><rect x="94.1979%" y="133" width="0.2184%" height="15" fill="rgb(224,123,36)"/><text x="94.4479%" y="143.50"></text></g><g><title>normalize_projection_ty (536,035 samples, 0.20%)</title><rect x="94.2133%" y="117" width="0.2030%" height="15" fill="rgb(240,125,3)"/><text x="94.4633%" y="127.50"></text></g><g><title>optimized_mir (15,484,047 samples, 5.86%)</title><rect x="88.6207%" y="165" width="5.8638%" height="15" fill="rgb(205,98,50)"/><text x="88.8707%" y="175.50">optimiz..</text></g><g><title>generate_crate_metadata (21,929,614 samples, 8.30%)</title><rect x="86.2567%" y="181" width="8.3048%" height="15" fill="rgb(205,185,37)"/><text x="86.5067%" y="191.50">generate_cra..</text></g><g><title>hir_lowering (7,974,395 samples, 3.02%)</title><rect x="94.5614%" y="181" width="3.0199%" height="15" fill="rgb(238,207,15)"/><text x="94.8114%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (1,921,991 samples, 0.73%)</title><rect x="97.5900%" y="165" width="0.7279%" height="15" fill="rgb(213,199,42)"/><text x="97.8400%" y="175.50"></text></g><g><title>link_crate (1,962,511 samples, 0.74%)</title><rect x="98.3179%" y="165" width="0.7432%" height="15" fill="rgb(235,201,11)"/><text x="98.5679%" y="175.50"></text></g><g><title>link_binary (1,908,641 samples, 0.72%)</title><rect x="98.3383%" y="149" width="0.7228%" height="15" fill="rgb(207,46,11)"/><text x="98.5883%" y="159.50"></text></g><g><title>link_rlib (1,493,246 samples, 0.57%)</title><rect x="98.4956%" y="133" width="0.5655%" height="15" fill="rgb(241,35,35)"/><text x="98.7456%" y="143.50"></text></g><g><title>link (3,918,892 samples, 1.48%)</title><rect x="97.5813%" y="181" width="1.4841%" height="15" fill="rgb(243,32,47)"/><text x="97.8313%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,466,155 samples, 0.56%)</title><rect x="99.2206%" y="181" width="0.5552%" height="15" fill="rgb(247,202,23)"/><text x="99.4706%" y="191.50"></text></g><g><title>all (264,060,764 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (264,060,764 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (515,885 samples, 0.20%)</title><rect x="99.8046%" y="181" width="0.1954%" height="15" fill="rgb(222,74,54)"/><text x="100.0546%" y="191.50"></text></g></svg></svg>