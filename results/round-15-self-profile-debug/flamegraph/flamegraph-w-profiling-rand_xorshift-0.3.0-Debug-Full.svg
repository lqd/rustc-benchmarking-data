<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (40,713,983 samples, 17.84%)</title><rect x="0.2325%" y="197" width="17.8369%" height="15" fill="rgb(227,0,7)"/><text x="0.4825%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (414,094 samples, 0.18%)</title><rect x="20.0470%" y="85" width="0.1814%" height="15" fill="rgb(217,0,24)"/><text x="20.2970%" y="95.50"></text></g><g><title>impl_parent (601,739 samples, 0.26%)</title><rect x="21.1034%" y="53" width="0.2636%" height="15" fill="rgb(221,193,54)"/><text x="21.3534%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (293,176 samples, 0.13%)</title><rect x="21.2386%" y="37" width="0.1284%" height="15" fill="rgb(248,212,6)"/><text x="21.4886%" y="47.50"></text></g><g><title>specialization_graph_of (3,883,400 samples, 1.70%)</title><rect x="20.3298%" y="69" width="1.7013%" height="15" fill="rgb(208,68,35)"/><text x="20.5798%" y="79.50"></text></g><g><title>impl_trait_ref (1,515,816 samples, 0.66%)</title><rect x="21.3670%" y="53" width="0.6641%" height="15" fill="rgb(232,128,0)"/><text x="21.6170%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,209,895 samples, 0.53%)</title><rect x="21.5011%" y="37" width="0.5301%" height="15" fill="rgb(207,160,47)"/><text x="21.7511%" y="47.50"></text></g><g><title>resolve_instance (4,144,162 samples, 1.82%)</title><rect x="20.2284%" y="85" width="1.8156%" height="15" fill="rgb(228,23,34)"/><text x="20.4784%" y="95.50">r..</text></g><g><title>thir_body (249,972 samples, 0.11%)</title><rect x="22.0469%" y="85" width="0.1095%" height="15" fill="rgb(218,30,26)"/><text x="22.2969%" y="95.50"></text></g><g><title>mir_const (6,127,252 samples, 2.68%)</title><rect x="19.4744%" y="133" width="2.6844%" height="15" fill="rgb(220,122,19)"/><text x="19.7244%" y="143.50">mi..</text></g><g><title>unsafety_check_result (5,763,678 samples, 2.53%)</title><rect x="19.6337%" y="117" width="2.5251%" height="15" fill="rgb(250,228,42)"/><text x="19.8837%" y="127.50">un..</text></g><g><title>mir_built (5,525,197 samples, 2.42%)</title><rect x="19.7381%" y="101" width="2.4206%" height="15" fill="rgb(240,193,28)"/><text x="19.9881%" y="111.50">mi..</text></g><g><title>mir_promoted (6,420,695 samples, 2.81%)</title><rect x="19.3797%" y="149" width="2.8129%" height="15" fill="rgb(216,20,37)"/><text x="19.6297%" y="159.50">mi..</text></g><g><title>type_op_prove_predicate (564,717 samples, 0.25%)</title><rect x="22.3147%" y="149" width="0.2474%" height="15" fill="rgb(206,188,39)"/><text x="22.5647%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,121,112 samples, 4.43%)</title><rect x="18.1316%" y="181" width="4.4341%" height="15" fill="rgb(217,207,13)"/><text x="18.3816%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (10,092,751 samples, 4.42%)</title><rect x="18.1441%" y="165" width="4.4217%" height="15" fill="rgb(231,73,38)"/><text x="18.3941%" y="175.50">mir_b..</text></g><g><title>codegen_fn_attrs (272,443 samples, 0.12%)</title><rect x="22.7204%" y="149" width="0.1194%" height="15" fill="rgb(225,20,46)"/><text x="22.9704%" y="159.50"></text></g><g><title>should_inherit_track_caller (236,843 samples, 0.10%)</title><rect x="22.7360%" y="133" width="0.1038%" height="15" fill="rgb(210,31,41)"/><text x="22.9860%" y="143.50"></text></g><g><title>check_mod_attrs (359,663 samples, 0.16%)</title><rect x="22.6822%" y="165" width="0.1576%" height="15" fill="rgb(221,200,47)"/><text x="22.9322%" y="175.50"></text></g><g><title>misc_checking_1 (605,326 samples, 0.27%)</title><rect x="22.6745%" y="181" width="0.2652%" height="15" fill="rgb(226,26,5)"/><text x="22.9245%" y="191.50"></text></g><g><title>misc_checking_2 (310,753 samples, 0.14%)</title><rect x="22.9397%" y="181" width="0.1361%" height="15" fill="rgb(249,33,26)"/><text x="23.1897%" y="191.50"></text></g><g><title>crate_lints (616,776 samples, 0.27%)</title><rect x="23.1827%" y="149" width="0.2702%" height="15" fill="rgb(235,183,28)"/><text x="23.4327%" y="159.50"></text></g><g><title>type_of (320,114 samples, 0.14%)</title><rect x="23.3126%" y="133" width="0.1402%" height="15" fill="rgb(221,5,38)"/><text x="23.5626%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (241,334 samples, 0.11%)</title><rect x="23.3471%" y="117" width="0.1057%" height="15" fill="rgb(247,18,42)"/><text x="23.5971%" y="127.50"></text></g><g><title>lint_checking (742,828 samples, 0.33%)</title><rect x="23.1820%" y="165" width="0.3254%" height="15" fill="rgb(241,131,45)"/><text x="23.4320%" y="175.50"></text></g><g><title>misc_checking_3 (1,281,333 samples, 0.56%)</title><rect x="23.0758%" y="181" width="0.5614%" height="15" fill="rgb(249,31,29)"/><text x="23.3258%" y="191.50"></text></g><g><title>impl_parent (648,049 samples, 0.28%)</title><rect x="24.1281%" y="117" width="0.2839%" height="15" fill="rgb(225,111,53)"/><text x="24.3781%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (386,176 samples, 0.17%)</title><rect x="24.2428%" y="101" width="0.1692%" height="15" fill="rgb(238,160,17)"/><text x="24.4928%" y="111.50"></text></g><g><title>impl_trait_ref (1,353,046 samples, 0.59%)</title><rect x="24.4120%" y="117" width="0.5928%" height="15" fill="rgb(214,148,48)"/><text x="24.6620%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,085,024 samples, 0.48%)</title><rect x="24.5294%" y="101" width="0.4754%" height="15" fill="rgb(232,36,49)"/><text x="24.7794%" y="111.50"></text></g><g><title>coherent_trait (3,323,665 samples, 1.46%)</title><rect x="23.6550%" y="149" width="1.4561%" height="15" fill="rgb(209,103,24)"/><text x="23.9050%" y="159.50"></text></g><g><title>specialization_graph_of (3,310,524 samples, 1.45%)</title><rect x="23.6608%" y="133" width="1.4503%" height="15" fill="rgb(229,88,8)"/><text x="23.9108%" y="143.50"></text></g><g><title>trait_impls_of (241,021 samples, 0.11%)</title><rect x="25.0055%" y="117" width="0.1056%" height="15" fill="rgb(213,181,19)"/><text x="25.2555%" y="127.50"></text></g><g><title>coherence_checking (3,371,895 samples, 1.48%)</title><rect x="23.6488%" y="165" width="1.4772%" height="15" fill="rgb(254,191,54)"/><text x="23.8988%" y="175.50"></text></g><g><title>evaluate_obligation (769,436 samples, 0.34%)</title><rect x="26.2583%" y="117" width="0.3371%" height="15" fill="rgb(241,83,37)"/><text x="26.5083%" y="127.50"></text></g><g><title>associated_item (286,444 samples, 0.13%)</title><rect x="28.4717%" y="85" width="0.1255%" height="15" fill="rgb(233,36,39)"/><text x="28.7217%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (228,734 samples, 0.10%)</title><rect x="28.4970%" y="69" width="0.1002%" height="15" fill="rgb(226,3,54)"/><text x="28.7470%" y="79.50"></text></g><g><title>associated_items (387,945 samples, 0.17%)</title><rect x="28.4315%" y="101" width="0.1700%" height="15" fill="rgb(245,192,40)"/><text x="28.6815%" y="111.50"></text></g><g><title>evaluate_obligation (643,897 samples, 0.28%)</title><rect x="28.7344%" y="101" width="0.2821%" height="15" fill="rgb(238,167,29)"/><text x="28.9844%" y="111.50"></text></g><g><title>typeck (5,803,209 samples, 2.54%)</title><rect x="26.7462%" y="117" width="2.5424%" height="15" fill="rgb(232,182,51)"/><text x="26.9962%" y="127.50">ty..</text></g><g><title>item_bodies_checking (9,502,237 samples, 4.16%)</title><rect x="25.1325%" y="165" width="4.1629%" height="15" fill="rgb(231,60,39)"/><text x="25.3825%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (9,499,657 samples, 4.16%)</title><rect x="25.1336%" y="149" width="4.1618%" height="15" fill="rgb(208,69,12)"/><text x="25.3836%" y="159.50">typec..</text></g><g><title>typeck (9,481,067 samples, 4.15%)</title><rect x="25.1417%" y="133" width="4.1537%" height="15" fill="rgb(235,93,37)"/><text x="25.3917%" y="143.50">typeck</text></g><g><title>mir_for_ctfe (857,882 samples, 0.38%)</title><rect x="30.0062%" y="69" width="0.3758%" height="15" fill="rgb(213,116,39)"/><text x="30.2562%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (848,582 samples, 0.37%)</title><rect x="30.0102%" y="53" width="0.3718%" height="15" fill="rgb(222,207,29)"/><text x="30.2602%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,879,821 samples, 0.82%)</title><rect x="29.5712%" y="117" width="0.8236%" height="15" fill="rgb(206,96,30)"/><text x="29.8212%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,832,941 samples, 0.80%)</title><rect x="29.5918%" y="101" width="0.8030%" height="15" fill="rgb(218,138,4)"/><text x="29.8418%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,789,701 samples, 0.78%)</title><rect x="29.6107%" y="85" width="0.7841%" height="15" fill="rgb(250,191,14)"/><text x="29.8607%" y="95.50"></text></g><g><title>evaluate_obligation (2,370,654 samples, 1.04%)</title><rect x="29.4479%" y="133" width="1.0386%" height="15" fill="rgb(239,60,40)"/><text x="29.6979%" y="143.50"></text></g><g><title>item_types_checking (2,830,028 samples, 1.24%)</title><rect x="29.2954%" y="165" width="1.2398%" height="15" fill="rgb(206,27,48)"/><text x="29.5454%" y="175.50"></text></g><g><title>check_mod_item_types (2,828,078 samples, 1.24%)</title><rect x="29.2963%" y="149" width="1.2390%" height="15" fill="rgb(225,35,8)"/><text x="29.5463%" y="159.50"></text></g><g><title>type_collecting (851,749 samples, 0.37%)</title><rect x="30.5359%" y="165" width="0.3732%" height="15" fill="rgb(250,213,24)"/><text x="30.7859%" y="175.50"></text></g><g><title>collect_mod_item_types (843,749 samples, 0.37%)</title><rect x="30.5394%" y="149" width="0.3696%" height="15" fill="rgb(247,123,22)"/><text x="30.7894%" y="159.50"></text></g><g><title>check_impl_item_well_formed (882,058 samples, 0.39%)</title><rect x="30.9274%" y="149" width="0.3864%" height="15" fill="rgb(231,138,38)"/><text x="31.1774%" y="159.50"></text></g><g><title>analysis (30,920,104 samples, 13.55%)</title><rect x="18.0694%" y="197" width="13.5462%" height="15" fill="rgb(231,145,46)"/><text x="18.3194%" y="207.50">analysis</text></g><g><title>type_check_crate (18,211,226 samples, 7.98%)</title><rect x="23.6371%" y="181" width="7.9784%" height="15" fill="rgb(251,118,11)"/><text x="23.8871%" y="191.50">type_check_..</text></g><g><title>wf_checking (1,611,156 samples, 0.71%)</title><rect x="30.9097%" y="165" width="0.7059%" height="15" fill="rgb(217,147,25)"/><text x="31.1597%" y="175.50"></text></g><g><title>check_item_well_formed (688,627 samples, 0.30%)</title><rect x="31.3138%" y="149" width="0.3017%" height="15" fill="rgb(247,81,37)"/><text x="31.5638%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (349,174 samples, 0.15%)</title><rect x="44.2018%" y="165" width="0.1530%" height="15" fill="rgb(209,12,38)"/><text x="44.4518%" y="175.50"></text></g><g><title>const_caller_location (623,217 samples, 0.27%)</title><rect x="44.3548%" y="165" width="0.2730%" height="15" fill="rgb(227,1,9)"/><text x="44.6048%" y="175.50"></text></g><g><title>item_attrs (334,405 samples, 0.15%)</title><rect x="45.3818%" y="133" width="0.1465%" height="15" fill="rgb(248,47,43)"/><text x="45.6318%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (319,135 samples, 0.14%)</title><rect x="45.3885%" y="117" width="0.1398%" height="15" fill="rgb(221,10,30)"/><text x="45.6385%" y="127.50"></text></g><g><title>codegen_fn_attrs (542,316 samples, 0.24%)</title><rect x="45.3191%" y="149" width="0.2376%" height="15" fill="rgb(210,229,1)"/><text x="45.5691%" y="159.50"></text></g><g><title>layout_of (628,795 samples, 0.28%)</title><rect x="45.5815%" y="149" width="0.2755%" height="15" fill="rgb(222,148,37)"/><text x="45.8315%" y="159.50"></text></g><g><title>explicit_predicates_of (296,894 samples, 0.13%)</title><rect x="46.7631%" y="101" width="0.1301%" height="15" fill="rgb(234,67,33)"/><text x="47.0131%" y="111.50"></text></g><g><title>predicates_of (796,420 samples, 0.35%)</title><rect x="46.5841%" y="133" width="0.3489%" height="15" fill="rgb(247,98,35)"/><text x="46.8341%" y="143.50"></text></g><g><title>predicates_defined_on (588,129 samples, 0.26%)</title><rect x="46.6754%" y="117" width="0.2577%" height="15" fill="rgb(247,138,52)"/><text x="46.9254%" y="127.50"></text></g><g><title>param_env (2,466,138 samples, 1.08%)</title><rect x="45.8569%" y="149" width="1.0804%" height="15" fill="rgb(213,79,30)"/><text x="46.1069%" y="159.50"></text></g><g><title>eval_to_const_value_raw (260,522 samples, 0.11%)</title><rect x="47.0482%" y="133" width="0.1141%" height="15" fill="rgb(246,177,23)"/><text x="47.2982%" y="143.50"></text></g><g><title>eval_to_const_value_raw (252,342 samples, 0.11%)</title><rect x="47.0518%" y="117" width="0.1106%" height="15" fill="rgb(230,62,27)"/><text x="47.3018%" y="127.50"></text></g><g><title>eval_to_allocation_raw (234,951 samples, 0.10%)</title><rect x="47.0594%" y="101" width="0.1029%" height="15" fill="rgb(216,154,8)"/><text x="47.3094%" y="111.50"></text></g><g><title>normalize_projection_ty (921,412 samples, 0.40%)</title><rect x="47.1623%" y="133" width="0.4037%" height="15" fill="rgb(244,35,45)"/><text x="47.4123%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,468,659 samples, 0.64%)</title><rect x="46.9374%" y="149" width="0.6434%" height="15" fill="rgb(251,115,12)"/><text x="47.1874%" y="159.50"></text></g><g><title>fn_abi_of_instance (6,744,250 samples, 2.95%)</title><rect x="44.6286%" y="165" width="2.9547%" height="15" fill="rgb(240,54,50)"/><text x="44.8786%" y="175.50">fn_..</text></g><g><title>layout_of (260,772 samples, 0.11%)</title><rect x="47.9435%" y="149" width="0.1142%" height="15" fill="rgb(233,84,52)"/><text x="48.1935%" y="159.50"></text></g><g><title>layout_of (749,064 samples, 0.33%)</title><rect x="47.7312%" y="165" width="0.3282%" height="15" fill="rgb(207,117,47)"/><text x="47.9812%" y="175.50"></text></g><g><title>symbol_name (293,954 samples, 0.13%)</title><rect x="48.0594%" y="165" width="0.1288%" height="15" fill="rgb(249,43,39)"/><text x="48.3094%" y="175.50"></text></g><g><title>codegen_module (35,192,349 samples, 15.42%)</title><rect x="32.7999%" y="181" width="15.4178%" height="15" fill="rgb(209,38,44)"/><text x="33.0499%" y="191.50">codegen_module</text></g><g><title>codegen_crate (37,914,986 samples, 16.61%)</title><rect x="31.6198%" y="197" width="16.6106%" height="15" fill="rgb(236,212,23)"/><text x="31.8698%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (82,181,004 samples, 36.00%)</title><rect x="48.3071%" y="181" width="36.0037%" height="15" fill="rgb(242,79,21)"/><text x="48.5571%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (78,033,023 samples, 34.19%)</title><rect x="50.1243%" y="165" width="34.1864%" height="15" fill="rgb(211,96,35)"/><text x="50.3743%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (88,337,987 samples, 38.70%)</title><rect x="48.2304%" y="197" width="38.7010%" height="15" fill="rgb(253,215,40)"/><text x="48.4804%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,981,990 samples, 2.62%)</title><rect x="84.3108%" y="181" width="2.6207%" height="15" fill="rgb(211,81,21)"/><text x="84.5608%" y="191.50">LL..</text></g><g><title>macro_expand_crate (4,814,318 samples, 2.11%)</title><rect x="87.0949%" y="181" width="2.1092%" height="15" fill="rgb(208,190,38)"/><text x="87.3449%" y="191.50">m..</text></g><g><title>expand_crate (4,797,608 samples, 2.10%)</title><rect x="87.1023%" y="165" width="2.1018%" height="15" fill="rgb(235,213,38)"/><text x="87.3523%" y="175.50">e..</text></g><g><title>late_resolve_crate (621,466 samples, 0.27%)</title><rect x="89.3144%" y="165" width="0.2723%" height="15" fill="rgb(237,122,38)"/><text x="89.5644%" y="175.50"></text></g><g><title>configure_and_expand (6,099,152 samples, 2.67%)</title><rect x="86.9315%" y="197" width="2.6721%" height="15" fill="rgb(244,218,35)"/><text x="87.1815%" y="207.50">co..</text></g><g><title>resolve_crate (774,178 samples, 0.34%)</title><rect x="89.2644%" y="181" width="0.3392%" height="15" fill="rgb(240,68,47)"/><text x="89.5144%" y="191.50"></text></g><g><title>free_global_ctxt (2,628,076 samples, 1.15%)</title><rect x="89.6828%" y="197" width="1.1514%" height="15" fill="rgb(210,16,53)"/><text x="89.9328%" y="207.50"></text></g><g><title>item_attrs (796,958 samples, 0.35%)</title><rect x="91.5916%" y="101" width="0.3491%" height="15" fill="rgb(235,124,12)"/><text x="91.8416%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (774,428 samples, 0.34%)</title><rect x="91.6015%" y="85" width="0.3393%" height="15" fill="rgb(224,169,11)"/><text x="91.8515%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,146,500 samples, 0.50%)</title><rect x="91.5260%" y="117" width="0.5023%" height="15" fill="rgb(250,166,2)"/><text x="91.7760%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (912,727 samples, 0.40%)</title><rect x="92.3074%" y="101" width="0.3999%" height="15" fill="rgb(242,216,29)"/><text x="92.5574%" y="111.50"></text></g><g><title>optimized_mir (1,630,034 samples, 0.71%)</title><rect x="92.1231%" y="117" width="0.7141%" height="15" fill="rgb(230,116,27)"/><text x="92.3731%" y="127.50"></text></g><g><title>evaluate_obligation (305,035 samples, 0.13%)</title><rect x="93.3034%" y="85" width="0.1336%" height="15" fill="rgb(228,99,48)"/><text x="93.5534%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,319,982 samples, 0.58%)</title><rect x="93.0025%" y="101" width="0.5783%" height="15" fill="rgb(253,11,6)"/><text x="93.2525%" y="111.50"></text></g><g><title>impl_parent (240,691 samples, 0.11%)</title><rect x="94.0297%" y="85" width="0.1054%" height="15" fill="rgb(247,143,39)"/><text x="94.2797%" y="95.50"></text></g><g><title>specialization_graph_of (1,291,481 samples, 0.57%)</title><rect x="93.7345%" y="101" width="0.5658%" height="15" fill="rgb(236,97,10)"/><text x="93.9845%" y="111.50"></text></g><g><title>impl_trait_ref (377,013 samples, 0.17%)</title><rect x="94.1351%" y="85" width="0.1652%" height="15" fill="rgb(233,208,19)"/><text x="94.3851%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (257,321 samples, 0.11%)</title><rect x="94.1875%" y="69" width="0.1127%" height="15" fill="rgb(216,164,2)"/><text x="94.4375%" y="79.50"></text></g><g><title>resolve_instance (3,569,719 samples, 1.56%)</title><rect x="92.8372%" y="117" width="1.5639%" height="15" fill="rgb(220,129,5)"/><text x="93.0872%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (8,136,333 samples, 3.56%)</title><rect x="91.0979%" y="133" width="3.5645%" height="15" fill="rgb(242,17,10)"/><text x="91.3479%" y="143.50">mono..</text></g><g><title>vtable_entries (282,372 samples, 0.12%)</title><rect x="94.5388%" y="117" width="0.1237%" height="15" fill="rgb(242,107,0)"/><text x="94.7888%" y="127.50"></text></g><g><title>monomorphization_collector (8,163,323 samples, 3.58%)</title><rect x="91.0968%" y="149" width="3.5764%" height="15" fill="rgb(251,28,31)"/><text x="91.3468%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (762,918 samples, 0.33%)</title><rect x="94.6752%" y="133" width="0.3342%" height="15" fill="rgb(233,223,10)"/><text x="94.9252%" y="143.50"></text></g><g><title>symbol_name (706,527 samples, 0.31%)</title><rect x="94.6999%" y="117" width="0.3095%" height="15" fill="rgb(215,21,27)"/><text x="94.9499%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (9,309,744 samples, 4.08%)</title><rect x="91.0815%" y="165" width="4.0786%" height="15" fill="rgb(232,23,21)"/><text x="91.3315%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (1,111,581 samples, 0.49%)</title><rect x="94.6731%" y="149" width="0.4870%" height="15" fill="rgb(244,5,23)"/><text x="94.9231%" y="159.50"></text></g><g><title>cgu_partitioning (344,033 samples, 0.15%)</title><rect x="95.0094%" y="133" width="0.1507%" height="15" fill="rgb(226,81,46)"/><text x="95.2594%" y="143.50"></text></g><g><title>exported_symbols (9,404,456 samples, 4.12%)</title><rect x="91.0651%" y="181" width="4.1201%" height="15" fill="rgb(247,70,30)"/><text x="91.3151%" y="191.50">expo..</text></g><g><title>optimized_mir (1,419,264 samples, 0.62%)</title><rect x="95.2013%" y="181" width="0.6218%" height="15" fill="rgb(212,68,19)"/><text x="95.4513%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (613,466 samples, 0.27%)</title><rect x="95.5544%" y="165" width="0.2688%" height="15" fill="rgb(240,187,13)"/><text x="95.8044%" y="175.50"></text></g><g><title>generate_crate_metadata (11,405,456 samples, 5.00%)</title><rect x="90.8342%" y="197" width="4.9968%" height="15" fill="rgb(223,113,26)"/><text x="91.0842%" y="207.50">genera..</text></g><g><title>hir_lowering (681,317 samples, 0.30%)</title><rect x="95.8310%" y="197" width="0.2985%" height="15" fill="rgb(206,192,2)"/><text x="96.0810%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,018,681 samples, 1.76%)</title><rect x="96.1353%" y="181" width="1.7606%" height="15" fill="rgb(241,108,4)"/><text x="96.3853%" y="191.50"></text></g><g><title>link_binary_remove_temps (276,492 samples, 0.12%)</title><rect x="98.0201%" y="149" width="0.1211%" height="15" fill="rgb(247,173,49)"/><text x="98.2701%" y="159.50"></text></g><g><title>link_crate (1,547,316 samples, 0.68%)</title><rect x="97.8959%" y="181" width="0.6779%" height="15" fill="rgb(224,114,35)"/><text x="98.1459%" y="191.50"></text></g><g><title>link_binary (1,536,165 samples, 0.67%)</title><rect x="97.9007%" y="165" width="0.6730%" height="15" fill="rgb(245,159,27)"/><text x="98.1507%" y="175.50"></text></g><g><title>link_rlib (987,130 samples, 0.43%)</title><rect x="98.1413%" y="149" width="0.4325%" height="15" fill="rgb(245,172,44)"/><text x="98.3913%" y="159.50"></text></g><g><title>link (5,588,058 samples, 2.45%)</title><rect x="96.1294%" y="197" width="2.4481%" height="15" fill="rgb(236,23,11)"/><text x="96.3794%" y="207.50">li..</text></g><g><title>parse_crate (1,204,043 samples, 0.53%)</title><rect x="98.5776%" y="197" width="0.5275%" height="15" fill="rgb(205,117,38)"/><text x="98.8276%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,462,515 samples, 0.64%)</title><rect x="99.1851%" y="197" width="0.6407%" height="15" fill="rgb(237,72,25)"/><text x="99.4351%" y="207.50"></text></g><g><title>all (228,257,379 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (228,257,379 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (310,803 samples, 0.14%)</title><rect x="99.8638%" y="197" width="0.1362%" height="15" fill="rgb(235,36,10)"/><text x="100.1138%" y="207.50"></text></g></svg></svg>