<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (222,209,236 samples, 14.47%)</title><rect x="0.0413%" y="165" width="14.4653%" height="15" fill="rgb(227,0,7)"/><text x="0.2913%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (1,578,069 samples, 0.10%)</title><rect x="17.8102%" y="37" width="0.1027%" height="15" fill="rgb(217,0,24)"/><text x="18.0602%" y="47.50"></text></g><g><title>needs_drop_raw (2,971,623 samples, 0.19%)</title><rect x="17.7241%" y="53" width="0.1934%" height="15" fill="rgb(221,193,54)"/><text x="17.9741%" y="63.50"></text></g><g><title>resolve_instance (2,242,014 samples, 0.15%)</title><rect x="17.9176%" y="53" width="0.1459%" height="15" fill="rgb(248,212,6)"/><text x="18.1676%" y="63.50"></text></g><g><title>thir_body (2,654,970 samples, 0.17%)</title><rect x="18.0655%" y="53" width="0.1728%" height="15" fill="rgb(208,68,35)"/><text x="18.3155%" y="63.50"></text></g><g><title>mir_const (19,547,255 samples, 1.27%)</title><rect x="16.9676%" y="101" width="1.2725%" height="15" fill="rgb(232,128,0)"/><text x="17.2176%" y="111.50"></text></g><g><title>unsafety_check_result (17,424,698 samples, 1.13%)</title><rect x="17.1057%" y="85" width="1.1343%" height="15" fill="rgb(207,160,47)"/><text x="17.3557%" y="95.50"></text></g><g><title>mir_built (15,655,702 samples, 1.02%)</title><rect x="17.2209%" y="69" width="1.0191%" height="15" fill="rgb(228,23,34)"/><text x="17.4709%" y="79.50"></text></g><g><title>mir_promoted (21,630,394 samples, 1.41%)</title><rect x="16.8476%" y="117" width="1.4081%" height="15" fill="rgb(218,30,26)"/><text x="17.0976%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,763,012 samples, 0.31%)</title><rect x="18.4534%" y="117" width="0.3101%" height="15" fill="rgb(220,122,19)"/><text x="18.7034%" y="127.50"></text></g><g><title>MIR_borrow_checking (64,865,236 samples, 4.22%)</title><rect x="14.5430%" y="149" width="4.2226%" height="15" fill="rgb(250,228,42)"/><text x="14.7930%" y="159.50">MIR_b..</text></g><g><title>mir_borrowck (64,725,865 samples, 4.21%)</title><rect x="14.5521%" y="133" width="4.2135%" height="15" fill="rgb(240,193,28)"/><text x="14.8021%" y="143.50">mir_b..</text></g><g><title>misc_checking_1 (2,160,743 samples, 0.14%)</title><rect x="18.7937%" y="149" width="0.1407%" height="15" fill="rgb(216,20,37)"/><text x="19.0437%" y="159.50"></text></g><g><title>misc_checking_2 (2,867,471 samples, 0.19%)</title><rect x="18.9343%" y="149" width="0.1867%" height="15" fill="rgb(206,188,39)"/><text x="19.1843%" y="159.50"></text></g><g><title>match_checking (1,786,569 samples, 0.12%)</title><rect x="19.0047%" y="133" width="0.1163%" height="15" fill="rgb(217,207,13)"/><text x="19.2547%" y="143.50"></text></g><g><title>check_match (1,747,389 samples, 0.11%)</title><rect x="19.0072%" y="117" width="0.1138%" height="15" fill="rgb(231,73,38)"/><text x="19.2572%" y="127.50"></text></g><g><title>crate_lints (2,901,151 samples, 0.19%)</title><rect x="19.1851%" y="117" width="0.1889%" height="15" fill="rgb(225,20,46)"/><text x="19.4351%" y="127.50"></text></g><g><title>lint_checking (4,258,316 samples, 0.28%)</title><rect x="19.1850%" y="133" width="0.2772%" height="15" fill="rgb(210,31,41)"/><text x="19.4350%" y="143.50"></text></g><g><title>privacy_checking_modules (2,028,401 samples, 0.13%)</title><rect x="19.4860%" y="133" width="0.1320%" height="15" fill="rgb(221,200,47)"/><text x="19.7360%" y="143.50"></text></g><g><title>check_mod_privacy (2,023,241 samples, 0.13%)</title><rect x="19.4863%" y="117" width="0.1317%" height="15" fill="rgb(226,26,5)"/><text x="19.7363%" y="127.50"></text></g><g><title>misc_checking_3 (7,653,722 samples, 0.50%)</title><rect x="19.1210%" y="149" width="0.4982%" height="15" fill="rgb(249,33,26)"/><text x="19.3710%" y="159.50"></text></g><g><title>impl_parent (2,392,705 samples, 0.16%)</title><rect x="19.8869%" y="85" width="0.1558%" height="15" fill="rgb(235,183,28)"/><text x="20.1369%" y="95.50"></text></g><g><title>impl_trait_ref (5,686,239 samples, 0.37%)</title><rect x="20.0427%" y="85" width="0.3702%" height="15" fill="rgb(221,5,38)"/><text x="20.2927%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,479,504 samples, 0.29%)</title><rect x="20.1212%" y="69" width="0.2916%" height="15" fill="rgb(247,18,42)"/><text x="20.3712%" y="79.50"></text></g><g><title>coherent_trait (12,889,809 samples, 0.84%)</title><rect x="19.6260%" y="117" width="0.8391%" height="15" fill="rgb(241,131,45)"/><text x="19.8760%" y="127.50"></text></g><g><title>specialization_graph_of (12,870,349 samples, 0.84%)</title><rect x="19.6272%" y="101" width="0.8378%" height="15" fill="rgb(249,31,29)"/><text x="19.8772%" y="111.50"></text></g><g><title>coherence_checking (12,953,409 samples, 0.84%)</title><rect x="19.6247%" y="133" width="0.8432%" height="15" fill="rgb(225,111,53)"/><text x="19.8747%" y="143.50"></text></g><g><title>evaluate_obligation (5,361,906 samples, 0.35%)</title><rect x="25.2234%" y="85" width="0.3490%" height="15" fill="rgb(238,160,17)"/><text x="25.4734%" y="95.50"></text></g><g><title>typeck (4,518,449 samples, 0.29%)</title><rect x="25.8262%" y="85" width="0.2941%" height="15" fill="rgb(214,148,48)"/><text x="26.0762%" y="95.50"></text></g><g><title>item_bodies_checking (86,881,203 samples, 5.66%)</title><rect x="20.4700%" y="133" width="5.6558%" height="15" fill="rgb(232,36,49)"/><text x="20.7200%" y="143.50">item_bo..</text></g><g><title>typeck_item_bodies (86,876,923 samples, 5.66%)</title><rect x="20.4702%" y="117" width="5.6555%" height="15" fill="rgb(209,103,24)"/><text x="20.7202%" y="127.50">typeck_..</text></g><g><title>typeck (86,780,442 samples, 5.65%)</title><rect x="20.4765%" y="101" width="5.6492%" height="15" fill="rgb(229,88,8)"/><text x="20.7265%" y="111.50">typeck</text></g><g><title>type_collecting (2,640,389 samples, 0.17%)</title><rect x="26.2056%" y="133" width="0.1719%" height="15" fill="rgb(213,181,19)"/><text x="26.4556%" y="143.50"></text></g><g><title>collect_mod_item_types (2,630,108 samples, 0.17%)</title><rect x="26.2062%" y="117" width="0.1712%" height="15" fill="rgb(254,191,54)"/><text x="26.4562%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,993,529 samples, 0.26%)</title><rect x="26.3935%" y="117" width="0.2600%" height="15" fill="rgb(241,83,37)"/><text x="26.6435%" y="127.50"></text></g><g><title>analysis (189,486,704 samples, 12.34%)</title><rect x="14.5066%" y="165" width="12.3351%" height="15" fill="rgb(233,36,39)"/><text x="14.7566%" y="175.50">analysis</text></g><g><title>type_check_crate (110,948,562 samples, 7.22%)</title><rect x="19.6192%" y="149" width="7.2225%" height="15" fill="rgb(226,3,54)"/><text x="19.8692%" y="159.50">type_check..</text></g><g><title>wf_checking (7,126,377 samples, 0.46%)</title><rect x="26.3778%" y="133" width="0.4639%" height="15" fill="rgb(245,192,40)"/><text x="26.6278%" y="143.50"></text></g><g><title>check_item_well_formed (2,891,613 samples, 0.19%)</title><rect x="26.6535%" y="117" width="0.1882%" height="15" fill="rgb(238,167,29)"/><text x="26.9035%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (4,141,695 samples, 0.27%)</title><rect x="37.9600%" y="133" width="0.2696%" height="15" fill="rgb(232,182,51)"/><text x="38.2100%" y="143.50"></text></g><g><title>const_caller_location (3,666,119 samples, 0.24%)</title><rect x="38.2296%" y="133" width="0.2387%" height="15" fill="rgb(231,60,39)"/><text x="38.4796%" y="143.50"></text></g><g><title>layout_of (2,709,801 samples, 0.18%)</title><rect x="39.2822%" y="117" width="0.1764%" height="15" fill="rgb(208,69,12)"/><text x="39.5322%" y="127.50"></text></g><g><title>predicates_of (2,862,458 samples, 0.19%)</title><rect x="39.8973%" y="101" width="0.1863%" height="15" fill="rgb(235,93,37)"/><text x="40.1473%" y="111.50"></text></g><g><title>predicates_defined_on (2,124,438 samples, 0.14%)</title><rect x="39.9454%" y="85" width="0.1383%" height="15" fill="rgb(213,116,39)"/><text x="40.1954%" y="95.50"></text></g><g><title>param_env (9,631,019 samples, 0.63%)</title><rect x="39.4586%" y="117" width="0.6270%" height="15" fill="rgb(222,207,29)"/><text x="39.7086%" y="127.50"></text></g><g><title>normalize_projection_ty (2,222,852 samples, 0.14%)</title><rect x="40.1268%" y="101" width="0.1447%" height="15" fill="rgb(206,96,30)"/><text x="40.3768%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,860,766 samples, 0.19%)</title><rect x="40.0855%" y="117" width="0.1862%" height="15" fill="rgb(218,138,4)"/><text x="40.3355%" y="127.50"></text></g><g><title>fn_abi_of_instance (27,622,365 samples, 1.80%)</title><rect x="38.4790%" y="133" width="1.7981%" height="15" fill="rgb(250,191,14)"/><text x="38.7290%" y="143.50">f..</text></g><g><title>layout_of (3,915,317 samples, 0.25%)</title><rect x="40.3612%" y="133" width="0.2549%" height="15" fill="rgb(239,60,40)"/><text x="40.6112%" y="143.50"></text></g><g><title>symbol_name (2,056,273 samples, 0.13%)</title><rect x="40.6175%" y="133" width="0.1339%" height="15" fill="rgb(206,27,48)"/><text x="40.8675%" y="143.50"></text></g><g><title>codegen_module (211,193,901 samples, 13.75%)</title><rect x="27.0237%" y="149" width="13.7482%" height="15" fill="rgb(225,35,8)"/><text x="27.2737%" y="159.50">codegen_module</text></g><g><title>codegen_crate (214,075,010 samples, 13.94%)</title><rect x="26.8421%" y="165" width="13.9358%" height="15" fill="rgb(250,213,24)"/><text x="27.0921%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (723,668,921 samples, 47.11%)</title><rect x="40.7935%" y="149" width="47.1091%" height="15" fill="rgb(247,123,22)"/><text x="41.0435%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (694,333,838 samples, 45.20%)</title><rect x="42.7032%" y="133" width="45.1995%" height="15" fill="rgb(231,138,38)"/><text x="42.9532%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (770,010,371 samples, 50.13%)</title><rect x="40.7779%" y="165" width="50.1258%" height="15" fill="rgb(231,145,46)"/><text x="41.0279%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (46,101,709 samples, 3.00%)</title><rect x="87.9026%" y="149" width="3.0011%" height="15" fill="rgb(251,118,11)"/><text x="88.1526%" y="159.50">LLV..</text></g><g><title>macro_expand_crate (18,734,801 samples, 1.22%)</title><rect x="90.9356%" y="149" width="1.2196%" height="15" fill="rgb(217,147,25)"/><text x="91.1856%" y="159.50"></text></g><g><title>expand_crate (18,717,651 samples, 1.22%)</title><rect x="90.9368%" y="133" width="1.2185%" height="15" fill="rgb(247,81,37)"/><text x="91.1868%" y="143.50"></text></g><g><title>late_resolve_crate (3,361,916 samples, 0.22%)</title><rect x="92.1724%" y="133" width="0.2189%" height="15" fill="rgb(209,12,38)"/><text x="92.4224%" y="143.50"></text></g><g><title>configure_and_expand (23,061,567 samples, 1.50%)</title><rect x="90.9037%" y="165" width="1.5013%" height="15" fill="rgb(227,1,9)"/><text x="91.1537%" y="175.50"></text></g><g><title>resolve_crate (3,760,941 samples, 0.24%)</title><rect x="92.1601%" y="149" width="0.2448%" height="15" fill="rgb(248,47,43)"/><text x="92.4101%" y="159.50"></text></g><g><title>free_global_ctxt (7,978,166 samples, 0.52%)</title><rect x="92.4751%" y="165" width="0.5194%" height="15" fill="rgb(221,10,30)"/><text x="92.7251%" y="175.50"></text></g><g><title>item_attrs (2,244,682 samples, 0.15%)</title><rect x="93.6132%" y="69" width="0.1461%" height="15" fill="rgb(210,229,1)"/><text x="93.8632%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,134,712 samples, 0.14%)</title><rect x="93.6204%" y="53" width="0.1390%" height="15" fill="rgb(222,148,37)"/><text x="93.8704%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,832,767 samples, 0.25%)</title><rect x="93.5696%" y="85" width="0.2495%" height="15" fill="rgb(234,67,33)"/><text x="93.8196%" y="95.50"></text></g><g><title>layout_of (1,661,553 samples, 0.11%)</title><rect x="94.3742%" y="69" width="0.1082%" height="15" fill="rgb(247,98,35)"/><text x="94.6242%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,668,948 samples, 0.37%)</title><rect x="94.4824%" y="69" width="0.3690%" height="15" fill="rgb(247,138,52)"/><text x="94.7324%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,366,605 samples, 0.67%)</title><rect x="94.8514%" y="69" width="0.6748%" height="15" fill="rgb(213,79,30)"/><text x="95.1014%" y="79.50"></text></g><g><title>optimized_mir (25,935,743 samples, 1.69%)</title><rect x="93.9492%" y="85" width="1.6884%" height="15" fill="rgb(246,177,23)"/><text x="94.1992%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (8,541,727 samples, 0.56%)</title><rect x="95.8096%" y="69" width="0.5560%" height="15" fill="rgb(230,62,27)"/><text x="96.0596%" y="79.50"></text></g><g><title>specialization_graph_of (3,363,967 samples, 0.22%)</title><rect x="96.5244%" y="69" width="0.2190%" height="15" fill="rgb(216,154,8)"/><text x="96.7744%" y="79.50"></text></g><g><title>resolve_instance (17,926,105 samples, 1.17%)</title><rect x="95.6375%" y="85" width="1.1669%" height="15" fill="rgb(244,35,45)"/><text x="95.8875%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,563,217 samples, 0.10%)</title><rect x="96.8654%" y="69" width="0.1018%" height="15" fill="rgb(251,115,12)"/><text x="97.1154%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,848,847 samples, 0.12%)</title><rect x="96.8500%" y="85" width="0.1204%" height="15" fill="rgb(240,54,50)"/><text x="97.1000%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (60,837,954 samples, 3.96%)</title><rect x="93.1209%" y="101" width="3.9604%" height="15" fill="rgb(233,84,52)"/><text x="93.3709%" y="111.50">mono..</text></g><g><title>monomorphization_collector (60,895,884 samples, 3.96%)</title><rect x="93.1207%" y="117" width="3.9642%" height="15" fill="rgb(207,117,47)"/><text x="93.3707%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (5,478,878 samples, 0.36%)</title><rect x="97.0856%" y="101" width="0.3567%" height="15" fill="rgb(249,43,39)"/><text x="97.3356%" y="111.50"></text></g><g><title>symbol_name (4,944,518 samples, 0.32%)</title><rect x="97.1204%" y="85" width="0.3219%" height="15" fill="rgb(209,38,44)"/><text x="97.3704%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (68,818,679 samples, 4.48%)</title><rect x="93.1162%" y="133" width="4.4799%" height="15" fill="rgb(236,212,23)"/><text x="93.3662%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (7,855,124 samples, 0.51%)</title><rect x="97.0848%" y="117" width="0.5113%" height="15" fill="rgb(242,79,21)"/><text x="97.3348%" y="127.50"></text></g><g><title>cgu_partitioning (2,363,706 samples, 0.15%)</title><rect x="97.4423%" y="101" width="0.1539%" height="15" fill="rgb(211,96,35)"/><text x="97.6923%" y="111.50"></text></g><g><title>exported_symbols (69,114,803 samples, 4.50%)</title><rect x="93.1031%" y="149" width="4.4992%" height="15" fill="rgb(253,215,40)"/><text x="93.3531%" y="159.50">expor..</text></g><g><title>optimized_mir (3,272,237 samples, 0.21%)</title><rect x="97.6094%" y="149" width="0.2130%" height="15" fill="rgb(211,81,21)"/><text x="97.8594%" y="159.50"></text></g><g><title>generate_crate_metadata (74,242,837 samples, 4.83%)</title><rect x="92.9944%" y="165" width="4.8330%" height="15" fill="rgb(208,190,38)"/><text x="93.2444%" y="175.50">genera..</text></g><g><title>hir_lowering (5,367,068 samples, 0.35%)</title><rect x="97.8275%" y="165" width="0.3494%" height="15" fill="rgb(235,213,38)"/><text x="98.0775%" y="175.50"></text></g><g><title>finish_ongoing_codegen (19,885,214 samples, 1.29%)</title><rect x="98.1778%" y="149" width="1.2945%" height="15" fill="rgb(237,122,38)"/><text x="98.4278%" y="159.50"></text></g><g><title>link_crate (3,616,509 samples, 0.24%)</title><rect x="99.4723%" y="149" width="0.2354%" height="15" fill="rgb(244,218,35)"/><text x="99.7223%" y="159.50"></text></g><g><title>link_binary (3,565,109 samples, 0.23%)</title><rect x="99.4757%" y="133" width="0.2321%" height="15" fill="rgb(240,68,47)"/><text x="99.7257%" y="143.50"></text></g><g><title>link_rlib (2,756,520 samples, 0.18%)</title><rect x="99.5283%" y="117" width="0.1794%" height="15" fill="rgb(210,16,53)"/><text x="99.7783%" y="127.50"></text></g><g><title>link (23,529,813 samples, 1.53%)</title><rect x="98.1769%" y="165" width="1.5317%" height="15" fill="rgb(235,124,12)"/><text x="98.4269%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,825,210 samples, 0.18%)</title><rect x="99.7865%" y="165" width="0.1839%" height="15" fill="rgb(224,169,11)"/><text x="100.0365%" y="175.50"></text></g><g><title>all (1,536,155,470 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,536,155,470 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>