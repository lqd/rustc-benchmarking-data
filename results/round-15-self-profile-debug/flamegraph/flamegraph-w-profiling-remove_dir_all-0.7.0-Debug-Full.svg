<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,903,560 samples, 6.27%)</title><rect x="1.2232%" y="245" width="6.2652%" height="15" fill="rgb(227,0,7)"/><text x="1.4732%" y="255.50">LLVM_pas..</text></g><g><title>param_env (118,551 samples, 0.19%)</title><rect x="13.1317%" y="165" width="0.1903%" height="15" fill="rgb(217,0,24)"/><text x="13.3817%" y="175.50"></text></g><g><title>item_attrs (74,171 samples, 0.12%)</title><rect x="13.6171%" y="133" width="0.1190%" height="15" fill="rgb(221,193,54)"/><text x="13.8671%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (71,100 samples, 0.11%)</title><rect x="13.6221%" y="117" width="0.1141%" height="15" fill="rgb(248,212,6)"/><text x="13.8721%" y="127.50"></text></g><g><title>codegen_fn_attrs (132,501 samples, 0.21%)</title><rect x="13.5491%" y="149" width="0.2127%" height="15" fill="rgb(208,68,35)"/><text x="13.7991%" y="159.50"></text></g><g><title>adt_drop_tys (132,262 samples, 0.21%)</title><rect x="15.2215%" y="85" width="0.2123%" height="15" fill="rgb(232,128,0)"/><text x="15.4715%" y="95.50"></text></g><g><title>param_env (72,491 samples, 0.12%)</title><rect x="15.3175%" y="69" width="0.1163%" height="15" fill="rgb(207,160,47)"/><text x="15.5675%" y="79.50"></text></g><g><title>is_copy_raw (62,762 samples, 0.10%)</title><rect x="15.4338%" y="85" width="0.1007%" height="15" fill="rgb(228,23,34)"/><text x="15.6838%" y="95.50"></text></g><g><title>adt_drop_tys (259,834 samples, 0.42%)</title><rect x="15.1926%" y="101" width="0.4170%" height="15" fill="rgb(218,30,26)"/><text x="15.4426%" y="111.50"></text></g><g><title>is_copy_raw (126,621 samples, 0.20%)</title><rect x="15.6096%" y="101" width="0.2032%" height="15" fill="rgb(220,122,19)"/><text x="15.8596%" y="111.50"></text></g><g><title>evaluate_obligation (87,080 samples, 0.14%)</title><rect x="15.6731%" y="85" width="0.1398%" height="15" fill="rgb(250,228,42)"/><text x="15.9231%" y="95.50"></text></g><g><title>adt_drop_tys (522,836 samples, 0.84%)</title><rect x="15.1354%" y="117" width="0.8392%" height="15" fill="rgb(240,193,28)"/><text x="15.3854%" y="127.50"></text></g><g><title>param_env (100,721 samples, 0.16%)</title><rect x="15.8129%" y="101" width="0.1617%" height="15" fill="rgb(216,20,37)"/><text x="16.0629%" y="111.50"></text></g><g><title>explicit_predicates_of (73,261 samples, 0.12%)</title><rect x="16.7949%" y="53" width="0.1176%" height="15" fill="rgb(206,188,39)"/><text x="17.0449%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (70,151 samples, 0.11%)</title><rect x="16.7999%" y="37" width="0.1126%" height="15" fill="rgb(217,207,13)"/><text x="17.0499%" y="47.50"></text></g><g><title>predicates_of (100,501 samples, 0.16%)</title><rect x="16.7584%" y="85" width="0.1613%" height="15" fill="rgb(231,73,38)"/><text x="17.0084%" y="95.50"></text></g><g><title>predicates_defined_on (86,121 samples, 0.14%)</title><rect x="16.7815%" y="69" width="0.1382%" height="15" fill="rgb(225,20,46)"/><text x="17.0315%" y="79.50"></text></g><g><title>needs_drop_raw (1,487,524 samples, 2.39%)</title><rect x="15.0395%" y="133" width="2.3875%" height="15" fill="rgb(210,31,41)"/><text x="15.2895%" y="143.50">ne..</text></g><g><title>is_copy_raw (904,978 samples, 1.45%)</title><rect x="15.9745%" y="117" width="1.4525%" height="15" fill="rgb(221,200,47)"/><text x="16.2245%" y="127.50"></text></g><g><title>evaluate_obligation (841,238 samples, 1.35%)</title><rect x="16.0768%" y="101" width="1.3502%" height="15" fill="rgb(226,26,5)"/><text x="16.3268%" y="111.50"></text></g><g><title>trait_impls_of (313,143 samples, 0.50%)</title><rect x="16.9244%" y="85" width="0.5026%" height="15" fill="rgb(249,33,26)"/><text x="17.1744%" y="95.50"></text></g><g><title>implementations_of_trait (69,690 samples, 0.11%)</title><rect x="17.3152%" y="69" width="0.1119%" height="15" fill="rgb(235,183,28)"/><text x="17.5652%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (69,540 samples, 0.11%)</title><rect x="17.5159%" y="117" width="0.1116%" height="15" fill="rgb(221,5,38)"/><text x="17.7659%" y="127.50"></text></g><g><title>resolve_instance (185,263 samples, 0.30%)</title><rect x="17.4270%" y="133" width="0.2973%" height="15" fill="rgb(247,18,42)"/><text x="17.6770%" y="143.50"></text></g><g><title>thir_body (165,633 samples, 0.27%)</title><rect x="17.7319%" y="133" width="0.2658%" height="15" fill="rgb(241,131,45)"/><text x="17.9819%" y="143.50"></text></g><g><title>mir_const (3,362,055 samples, 5.40%)</title><rect x="12.6064%" y="181" width="5.3961%" height="15" fill="rgb(249,31,29)"/><text x="12.8564%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (2,916,240 samples, 4.68%)</title><rect x="13.3219%" y="165" width="4.6806%" height="15" fill="rgb(225,111,53)"/><text x="13.5719%" y="175.50">unsaf..</text></g><g><title>mir_built (2,642,188 samples, 4.24%)</title><rect x="13.7618%" y="149" width="4.2407%" height="15" fill="rgb(238,160,17)"/><text x="14.0118%" y="159.50">mir_b..</text></g><g><title>mir_promoted (3,706,158 samples, 5.95%)</title><rect x="12.0794%" y="197" width="5.9484%" height="15" fill="rgb(214,148,48)"/><text x="12.3294%" y="207.50">mir_prom..</text></g><g><title>type_op_normalize_fn_sig (190,012 samples, 0.30%)</title><rect x="18.0487%" y="197" width="0.3050%" height="15" fill="rgb(232,36,49)"/><text x="18.2987%" y="207.50"></text></g><g><title>normalize_projection_ty (129,552 samples, 0.21%)</title><rect x="18.1457%" y="181" width="0.2079%" height="15" fill="rgb(209,103,24)"/><text x="18.3957%" y="191.50"></text></g><g><title>type_op_normalize_predicate (135,183 samples, 0.22%)</title><rect x="18.3536%" y="197" width="0.2170%" height="15" fill="rgb(229,88,8)"/><text x="18.6036%" y="207.50"></text></g><g><title>normalize_projection_ty (90,923 samples, 0.15%)</title><rect x="18.4247%" y="181" width="0.1459%" height="15" fill="rgb(213,181,19)"/><text x="18.6747%" y="191.50"></text></g><g><title>MIR_borrow_checking (7,234,093 samples, 11.61%)</title><rect x="7.7270%" y="229" width="11.6108%" height="15" fill="rgb(254,191,54)"/><text x="7.9770%" y="239.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (7,217,443 samples, 11.58%)</title><rect x="7.7537%" y="213" width="11.5840%" height="15" fill="rgb(241,83,37)"/><text x="8.0037%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (477,953 samples, 0.77%)</title><rect x="18.5706%" y="197" width="0.7671%" height="15" fill="rgb(233,36,39)"/><text x="18.8206%" y="207.50"></text></g><g><title>hir_module_items (107,291 samples, 0.17%)</title><rect x="19.3476%" y="229" width="0.1722%" height="15" fill="rgb(226,3,54)"/><text x="19.5976%" y="239.50"></text></g><g><title>get_lang_items (71,961 samples, 0.12%)</title><rect x="19.7866%" y="181" width="0.1155%" height="15" fill="rgb(245,192,40)"/><text x="20.0366%" y="191.50"></text></g><g><title>codegen_fn_attrs (143,152 samples, 0.23%)</title><rect x="19.7218%" y="197" width="0.2298%" height="15" fill="rgb(238,167,29)"/><text x="19.9718%" y="207.50"></text></g><g><title>check_mod_attrs (239,344 samples, 0.38%)</title><rect x="19.5677%" y="213" width="0.3841%" height="15" fill="rgb(232,182,51)"/><text x="19.8177%" y="223.50"></text></g><g><title>lookup_deprecation_entry (78,211 samples, 0.13%)</title><rect x="20.2359%" y="197" width="0.1255%" height="15" fill="rgb(231,60,39)"/><text x="20.4859%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (262,712 samples, 0.42%)</title><rect x="20.0509%" y="213" width="0.4217%" height="15" fill="rgb(208,69,12)"/><text x="20.3009%" y="223.50"></text></g><g><title>misc_checking_1 (628,266 samples, 1.01%)</title><rect x="19.5211%" y="229" width="1.0084%" height="15" fill="rgb(235,93,37)"/><text x="19.7711%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (207,842 samples, 0.33%)</title><rect x="20.5334%" y="213" width="0.3336%" height="15" fill="rgb(213,116,39)"/><text x="20.7834%" y="223.50"></text></g><g><title>check_mod_liveness (175,782 samples, 0.28%)</title><rect x="20.5849%" y="197" width="0.2821%" height="15" fill="rgb(222,207,29)"/><text x="20.8349%" y="207.50"></text></g><g><title>type_uninhabited_from (65,071 samples, 0.10%)</title><rect x="20.7626%" y="181" width="0.1044%" height="15" fill="rgb(206,96,30)"/><text x="21.0126%" y="191.50"></text></g><g><title>misc_checking_2 (404,864 samples, 0.65%)</title><rect x="20.5295%" y="229" width="0.6498%" height="15" fill="rgb(218,138,4)"/><text x="20.7795%" y="239.50"></text></g><g><title>match_checking (194,552 samples, 0.31%)</title><rect x="20.8670%" y="213" width="0.3123%" height="15" fill="rgb(250,191,14)"/><text x="21.1170%" y="223.50"></text></g><g><title>check_match (187,472 samples, 0.30%)</title><rect x="20.8784%" y="197" width="0.3009%" height="15" fill="rgb(239,60,40)"/><text x="21.1284%" y="207.50"></text></g><g><title>death_checking (222,922 samples, 0.36%)</title><rect x="21.2716%" y="213" width="0.3578%" height="15" fill="rgb(206,27,48)"/><text x="21.5216%" y="223.50"></text></g><g><title>lint_levels (96,921 samples, 0.16%)</title><rect x="21.4738%" y="197" width="0.1556%" height="15" fill="rgb(225,35,8)"/><text x="21.7238%" y="207.50"></text></g><g><title>param_env (148,281 samples, 0.24%)</title><rect x="21.7969%" y="181" width="0.2380%" height="15" fill="rgb(250,213,24)"/><text x="22.0469%" y="191.50"></text></g><g><title>predicates_of (65,641 samples, 0.11%)</title><rect x="21.9295%" y="165" width="0.1054%" height="15" fill="rgb(247,123,22)"/><text x="22.1795%" y="175.50"></text></g><g><title>crate_lints (254,953 samples, 0.41%)</title><rect x="21.6329%" y="197" width="0.4092%" height="15" fill="rgb(231,138,38)"/><text x="21.8829%" y="207.50"></text></g><g><title>lint_checking (362,224 samples, 0.58%)</title><rect x="21.6294%" y="213" width="0.5814%" height="15" fill="rgb(231,145,46)"/><text x="21.8794%" y="223.50"></text></g><g><title>module_lints (105,101 samples, 0.17%)</title><rect x="22.0421%" y="197" width="0.1687%" height="15" fill="rgb(251,118,11)"/><text x="22.2921%" y="207.50"></text></g><g><title>lint_mod (100,561 samples, 0.16%)</title><rect x="22.0494%" y="181" width="0.1614%" height="15" fill="rgb(217,147,25)"/><text x="22.2994%" y="191.50"></text></g><g><title>privacy_access_levels (63,471 samples, 0.10%)</title><rect x="22.2108%" y="213" width="0.1019%" height="15" fill="rgb(247,81,37)"/><text x="22.4608%" y="223.50"></text></g><g><title>privacy_checking_modules (191,682 samples, 0.31%)</title><rect x="22.3126%" y="213" width="0.3077%" height="15" fill="rgb(209,12,38)"/><text x="22.5626%" y="223.50"></text></g><g><title>check_mod_privacy (188,692 samples, 0.30%)</title><rect x="22.3174%" y="197" width="0.3029%" height="15" fill="rgb(227,1,9)"/><text x="22.5674%" y="207.50"></text></g><g><title>misc_checking_3 (915,300 samples, 1.47%)</title><rect x="21.1793%" y="229" width="1.4691%" height="15" fill="rgb(248,47,43)"/><text x="21.4293%" y="239.50"></text></g><g><title>associated_items (74,241 samples, 0.12%)</title><rect x="29.5986%" y="165" width="0.1192%" height="15" fill="rgb(221,10,30)"/><text x="29.8486%" y="175.50"></text></g><g><title>adt_def (82,522 samples, 0.13%)</title><rect x="30.0765%" y="133" width="0.1324%" height="15" fill="rgb(210,229,1)"/><text x="30.3265%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (80,152 samples, 0.13%)</title><rect x="30.0803%" y="117" width="0.1286%" height="15" fill="rgb(222,148,37)"/><text x="30.3303%" y="127.50"></text></g><g><title>impl_parent (136,771 samples, 0.22%)</title><rect x="30.5437%" y="69" width="0.2195%" height="15" fill="rgb(234,67,33)"/><text x="30.7937%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (92,330 samples, 0.15%)</title><rect x="30.6150%" y="53" width="0.1482%" height="15" fill="rgb(247,98,35)"/><text x="30.8650%" y="63.50"></text></g><g><title>impl_trait_ref (509,655 samples, 0.82%)</title><rect x="30.7632%" y="69" width="0.8180%" height="15" fill="rgb(247,138,52)"/><text x="31.0132%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (465,565 samples, 0.75%)</title><rect x="30.8340%" y="53" width="0.7472%" height="15" fill="rgb(213,79,30)"/><text x="31.0840%" y="63.50"></text></g><g><title>coherent_trait (887,969 samples, 1.43%)</title><rect x="30.2395%" y="101" width="1.4252%" height="15" fill="rgb(246,177,23)"/><text x="30.4895%" y="111.50"></text></g><g><title>specialization_graph_of (882,499 samples, 1.42%)</title><rect x="30.2483%" y="85" width="1.4164%" height="15" fill="rgb(230,62,27)"/><text x="30.4983%" y="95.50"></text></g><g><title>adt_destructor (917,980 samples, 1.47%)</title><rect x="30.2089%" y="133" width="1.4734%" height="15" fill="rgb(216,154,8)"/><text x="30.4589%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (912,880 samples, 1.47%)</title><rect x="30.2171%" y="117" width="1.4652%" height="15" fill="rgb(244,35,45)"/><text x="30.4671%" y="127.50"></text></g><g><title>adt_def (133,921 samples, 0.21%)</title><rect x="31.7333%" y="117" width="0.2149%" height="15" fill="rgb(251,115,12)"/><text x="31.9833%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (133,041 samples, 0.21%)</title><rect x="31.7347%" y="101" width="0.2135%" height="15" fill="rgb(240,54,50)"/><text x="31.9847%" y="111.50"></text></g><g><title>adt_def (144,791 samples, 0.23%)</title><rect x="32.0461%" y="101" width="0.2324%" height="15" fill="rgb(233,84,52)"/><text x="32.2961%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (140,531 samples, 0.23%)</title><rect x="32.0529%" y="85" width="0.2256%" height="15" fill="rgb(207,117,47)"/><text x="32.3029%" y="95.50"></text></g><g><title>item_attrs (88,631 samples, 0.14%)</title><rect x="32.1362%" y="69" width="0.1423%" height="15" fill="rgb(249,43,39)"/><text x="32.3862%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (87,601 samples, 0.14%)</title><rect x="32.1379%" y="53" width="0.1406%" height="15" fill="rgb(209,38,44)"/><text x="32.3879%" y="63.50"></text></g><g><title>adt_def (64,690 samples, 0.10%)</title><rect x="32.3671%" y="85" width="0.1038%" height="15" fill="rgb(236,212,23)"/><text x="32.6171%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (63,470 samples, 0.10%)</title><rect x="32.3691%" y="69" width="0.1019%" height="15" fill="rgb(242,79,21)"/><text x="32.6191%" y="79.50"></text></g><g><title>adt_dtorck_constraint (119,942 samples, 0.19%)</title><rect x="32.4897%" y="85" width="0.1925%" height="15" fill="rgb(211,96,35)"/><text x="32.7397%" y="95.50"></text></g><g><title>adt_dtorck_constraint (229,642 samples, 0.37%)</title><rect x="32.3451%" y="101" width="0.3686%" height="15" fill="rgb(253,215,40)"/><text x="32.5951%" y="111.50"></text></g><g><title>adt_dtorck_constraint (516,345 samples, 0.83%)</title><rect x="31.9737%" y="117" width="0.8287%" height="15" fill="rgb(211,81,21)"/><text x="32.2237%" y="127.50"></text></g><g><title>adt_dtorck_constraint (728,196 samples, 1.17%)</title><rect x="31.6823%" y="133" width="1.1688%" height="15" fill="rgb(208,190,38)"/><text x="31.9323%" y="143.50"></text></g><g><title>dropck_outlives (1,981,592 samples, 3.18%)</title><rect x="29.7462%" y="165" width="3.1805%" height="15" fill="rgb(235,213,38)"/><text x="29.9962%" y="175.50">dro..</text></g><g><title>adt_dtorck_constraint (1,839,959 samples, 2.95%)</title><rect x="29.9735%" y="149" width="2.9531%" height="15" fill="rgb(237,122,38)"/><text x="30.2235%" y="159.50">adt..</text></g><g><title>adt_def (183,313 samples, 0.29%)</title><rect x="33.9211%" y="133" width="0.2942%" height="15" fill="rgb(244,218,35)"/><text x="34.1711%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (178,203 samples, 0.29%)</title><rect x="33.9293%" y="117" width="0.2860%" height="15" fill="rgb(240,68,47)"/><text x="34.1793%" y="127.50"></text></g><g><title>item_attrs (115,062 samples, 0.18%)</title><rect x="34.0307%" y="101" width="0.1847%" height="15" fill="rgb(210,16,53)"/><text x="34.2807%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (110,112 samples, 0.18%)</title><rect x="34.0386%" y="85" width="0.1767%" height="15" fill="rgb(235,124,12)"/><text x="34.2886%" y="95.50"></text></g><g><title>adt_def (140,441 samples, 0.23%)</title><rect x="34.3133%" y="101" width="0.2254%" height="15" fill="rgb(224,169,11)"/><text x="34.5633%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (139,071 samples, 0.22%)</title><rect x="34.3155%" y="85" width="0.2232%" height="15" fill="rgb(250,166,2)"/><text x="34.5655%" y="95.50"></text></g><g><title>item_attrs (120,061 samples, 0.19%)</title><rect x="34.3460%" y="69" width="0.1927%" height="15" fill="rgb(242,216,29)"/><text x="34.5960%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,331 samples, 0.19%)</title><rect x="34.3487%" y="53" width="0.1899%" height="15" fill="rgb(230,116,27)"/><text x="34.5987%" y="63.50"></text></g><g><title>adt_def (120,782 samples, 0.19%)</title><rect x="34.5429%" y="85" width="0.1939%" height="15" fill="rgb(228,99,48)"/><text x="34.7929%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (120,292 samples, 0.19%)</title><rect x="34.5437%" y="69" width="0.1931%" height="15" fill="rgb(253,11,6)"/><text x="34.7937%" y="79.50"></text></g><g><title>item_attrs (114,491 samples, 0.18%)</title><rect x="34.5530%" y="53" width="0.1838%" height="15" fill="rgb(247,143,39)"/><text x="34.8030%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (113,961 samples, 0.18%)</title><rect x="34.5539%" y="37" width="0.1829%" height="15" fill="rgb(236,97,10)"/><text x="34.8039%" y="47.50"></text></g><g><title>adt_sized_constraint (124,752 samples, 0.20%)</title><rect x="34.5387%" y="101" width="0.2002%" height="15" fill="rgb(233,208,19)"/><text x="34.7887%" y="111.50"></text></g><g><title>adt_sized_constraint (291,753 samples, 0.47%)</title><rect x="34.2985%" y="117" width="0.4683%" height="15" fill="rgb(216,164,2)"/><text x="34.5485%" y="127.50"></text></g><g><title>adt_sized_constraint (351,343 samples, 0.56%)</title><rect x="34.2154%" y="133" width="0.5639%" height="15" fill="rgb(220,129,5)"/><text x="34.4654%" y="143.50"></text></g><g><title>adt_sized_constraint (576,177 samples, 0.92%)</title><rect x="33.8790%" y="149" width="0.9248%" height="15" fill="rgb(242,17,10)"/><text x="34.1290%" y="159.50"></text></g><g><title>impl_trait_ref (73,490 samples, 0.12%)</title><rect x="34.8599%" y="149" width="0.1180%" height="15" fill="rgb(242,107,0)"/><text x="35.1099%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (65,070 samples, 0.10%)</title><rect x="34.8734%" y="133" width="0.1044%" height="15" fill="rgb(251,28,31)"/><text x="35.1234%" y="143.50"></text></g><g><title>explicit_predicates_of (74,272 samples, 0.12%)</title><rect x="35.0416%" y="117" width="0.1192%" height="15" fill="rgb(233,223,10)"/><text x="35.2916%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (69,982 samples, 0.11%)</title><rect x="35.0485%" y="101" width="0.1123%" height="15" fill="rgb(215,21,27)"/><text x="35.2985%" y="111.50"></text></g><g><title>predicates_of (122,752 samples, 0.20%)</title><rect x="34.9844%" y="149" width="0.1970%" height="15" fill="rgb(232,23,21)"/><text x="35.2344%" y="159.50"></text></g><g><title>predicates_defined_on (99,402 samples, 0.16%)</title><rect x="35.0219%" y="133" width="0.1595%" height="15" fill="rgb(244,5,23)"/><text x="35.2719%" y="143.50"></text></g><g><title>evaluate_obligation (1,904,482 samples, 3.06%)</title><rect x="32.9267%" y="165" width="3.0567%" height="15" fill="rgb(226,81,46)"/><text x="33.1767%" y="175.50">eva..</text></g><g><title>trait_impls_of (493,975 samples, 0.79%)</title><rect x="35.1905%" y="149" width="0.7928%" height="15" fill="rgb(247,70,30)"/><text x="35.4405%" y="159.50"></text></g><g><title>implementations_of_trait (162,633 samples, 0.26%)</title><rect x="35.7224%" y="133" width="0.2610%" height="15" fill="rgb(212,68,19)"/><text x="35.9724%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (101,372 samples, 0.16%)</title><rect x="35.8207%" y="117" width="0.1627%" height="15" fill="rgb(240,187,13)"/><text x="36.0707%" y="127.50"></text></g><g><title>fn_sig (117,640 samples, 0.19%)</title><rect x="36.0026%" y="165" width="0.1888%" height="15" fill="rgb(223,113,26)"/><text x="36.2526%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (105,440 samples, 0.17%)</title><rect x="36.0222%" y="149" width="0.1692%" height="15" fill="rgb(206,192,2)"/><text x="36.2722%" y="159.50"></text></g><g><title>generics_of (79,131 samples, 0.13%)</title><rect x="36.1914%" y="165" width="0.1270%" height="15" fill="rgb(241,108,4)"/><text x="36.4414%" y="175.50"></text></g><g><title>item_attrs (168,292 samples, 0.27%)</title><rect x="36.5258%" y="165" width="0.2701%" height="15" fill="rgb(247,173,49)"/><text x="36.7758%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (161,132 samples, 0.26%)</title><rect x="36.5373%" y="149" width="0.2586%" height="15" fill="rgb(224,114,35)"/><text x="36.7873%" y="159.50"></text></g><g><title>method_autoderef_steps (98,232 samples, 0.16%)</title><rect x="36.8289%" y="165" width="0.1577%" height="15" fill="rgb(245,159,27)"/><text x="37.0789%" y="175.50"></text></g><g><title>evaluate_obligation (78,812 samples, 0.13%)</title><rect x="36.8601%" y="149" width="0.1265%" height="15" fill="rgb(245,172,44)"/><text x="37.1101%" y="159.50"></text></g><g><title>explicit_predicates_of (85,271 samples, 0.14%)</title><rect x="37.2962%" y="133" width="0.1369%" height="15" fill="rgb(236,23,11)"/><text x="37.5462%" y="143.50"></text></g><g><title>predicates_of (298,452 samples, 0.48%)</title><rect x="37.0211%" y="165" width="0.4790%" height="15" fill="rgb(205,117,38)"/><text x="37.2711%" y="175.50"></text></g><g><title>predicates_defined_on (201,331 samples, 0.32%)</title><rect x="37.1770%" y="149" width="0.3231%" height="15" fill="rgb(237,72,25)"/><text x="37.4270%" y="159.50"></text></g><g><title>type_of (85,751 samples, 0.14%)</title><rect x="37.5659%" y="165" width="0.1376%" height="15" fill="rgb(244,70,9)"/><text x="37.8159%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (63,041 samples, 0.10%)</title><rect x="37.6024%" y="149" width="0.1012%" height="15" fill="rgb(217,125,39)"/><text x="37.8524%" y="159.50"></text></g><g><title>item_bodies_checking (9,379,985 samples, 15.05%)</title><rect x="22.7483%" y="213" width="15.0549%" height="15" fill="rgb(235,36,10)"/><text x="22.9983%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,377,005 samples, 15.05%)</title><rect x="22.7531%" y="197" width="15.0501%" height="15" fill="rgb(251,123,47)"/><text x="23.0031%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (9,364,575 samples, 15.03%)</title><rect x="22.7730%" y="181" width="15.0302%" height="15" fill="rgb(221,13,13)"/><text x="23.0230%" y="191.50">typeck</text></g><g><title>fn_sig (95,672 samples, 0.15%)</title><rect x="37.9436%" y="181" width="0.1536%" height="15" fill="rgb(238,131,9)"/><text x="38.1936%" y="191.50"></text></g><g><title>late_bound_vars_map (102,571 samples, 0.16%)</title><rect x="38.3941%" y="133" width="0.1646%" height="15" fill="rgb(211,50,8)"/><text x="38.6441%" y="143.50"></text></g><g><title>resolve_lifetimes (88,441 samples, 0.14%)</title><rect x="38.4168%" y="117" width="0.1419%" height="15" fill="rgb(245,182,24)"/><text x="38.6668%" y="127.50"></text></g><g><title>explicit_predicates_of (243,442 samples, 0.39%)</title><rect x="38.2160%" y="149" width="0.3907%" height="15" fill="rgb(242,14,37)"/><text x="38.4660%" y="159.50"></text></g><g><title>predicates_of (271,552 samples, 0.44%)</title><rect x="38.1834%" y="181" width="0.4358%" height="15" fill="rgb(246,228,12)"/><text x="38.4334%" y="191.50"></text></g><g><title>predicates_defined_on (264,602 samples, 0.42%)</title><rect x="38.1945%" y="165" width="0.4247%" height="15" fill="rgb(213,55,15)"/><text x="38.4445%" y="175.50"></text></g><g><title>type_collecting (526,916 samples, 0.85%)</title><rect x="37.8165%" y="213" width="0.8457%" height="15" fill="rgb(209,9,3)"/><text x="38.0665%" y="223.50"></text></g><g><title>collect_mod_item_types (508,116 samples, 0.82%)</title><rect x="37.8467%" y="197" width="0.8155%" height="15" fill="rgb(230,59,30)"/><text x="38.0967%" y="207.50"></text></g><g><title>adt_sized_constraint (76,391 samples, 0.12%)</title><rect x="39.6868%" y="133" width="0.1226%" height="15" fill="rgb(209,121,21)"/><text x="39.9368%" y="143.50"></text></g><g><title>adt_sized_constraint (119,321 samples, 0.19%)</title><rect x="39.6615%" y="149" width="0.1915%" height="15" fill="rgb(220,109,13)"/><text x="39.9115%" y="159.50"></text></g><g><title>evaluate_obligation (230,993 samples, 0.37%)</title><rect x="39.5027%" y="181" width="0.3707%" height="15" fill="rgb(232,18,1)"/><text x="39.7527%" y="191.50"></text></g><g><title>adt_sized_constraint (173,142 samples, 0.28%)</title><rect x="39.5956%" y="165" width="0.2779%" height="15" fill="rgb(215,41,42)"/><text x="39.8456%" y="175.50"></text></g><g><title>implied_outlives_bounds (65,931 samples, 0.11%)</title><rect x="39.8735%" y="181" width="0.1058%" height="15" fill="rgb(224,123,36)"/><text x="40.1235%" y="191.50"></text></g><g><title>param_env (247,372 samples, 0.40%)</title><rect x="39.9793%" y="181" width="0.3970%" height="15" fill="rgb(240,125,3)"/><text x="40.2293%" y="191.50"></text></g><g><title>predicates_of (73,511 samples, 0.12%)</title><rect x="40.3763%" y="181" width="0.1180%" height="15" fill="rgb(205,98,50)"/><text x="40.6263%" y="191.50"></text></g><g><title>region_scope_tree (65,570 samples, 0.11%)</title><rect x="40.4943%" y="181" width="0.1052%" height="15" fill="rgb(205,185,37)"/><text x="40.7443%" y="191.50"></text></g><g><title>analysis (20,695,511 samples, 33.22%)</title><rect x="7.4884%" y="245" width="33.2164%" height="15" fill="rgb(238,207,15)"/><text x="7.7384%" y="255.50">analysis</text></g><g><title>type_check_crate (11,250,094 samples, 18.06%)</title><rect x="22.6484%" y="229" width="18.0565%" height="15" fill="rgb(213,199,42)"/><text x="22.8984%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,271,583 samples, 2.04%)</title><rect x="38.6639%" y="213" width="2.0409%" height="15" fill="rgb(235,201,11)"/><text x="38.9139%" y="223.50">w..</text></g><g><title>check_item_well_formed (1,229,922 samples, 1.97%)</title><rect x="38.7308%" y="197" width="1.9740%" height="15" fill="rgb(207,46,11)"/><text x="38.9808%" y="207.50">c..</text></g><g><title>trait_impls_of (65,571 samples, 0.11%)</title><rect x="40.5996%" y="181" width="0.1052%" height="15" fill="rgb(241,35,35)"/><text x="40.8496%" y="191.50"></text></g><g><title>codegen_module (453,135 samples, 0.73%)</title><rect x="41.6246%" y="229" width="0.7273%" height="15" fill="rgb(243,32,47)"/><text x="41.8746%" y="239.50"></text></g><g><title>codegen_crate (1,167,912 samples, 1.87%)</title><rect x="40.7188%" y="245" width="1.8745%" height="15" fill="rgb(247,202,23)"/><text x="40.9688%" y="255.50">c..</text></g><g><title>LLVM_module_codegen (3,134,421 samples, 5.03%)</title><rect x="42.6568%" y="229" width="5.0308%" height="15" fill="rgb(219,102,11)"/><text x="42.9068%" y="239.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (3,051,511 samples, 4.90%)</title><rect x="42.7899%" y="213" width="4.8977%" height="15" fill="rgb(243,110,44)"/><text x="43.0399%" y="223.50">LLVM_m..</text></g><g><title>codegen_module_optimize (3,471,596 samples, 5.57%)</title><rect x="42.5933%" y="245" width="5.5719%" height="15" fill="rgb(222,74,54)"/><text x="42.8433%" y="255.50">codegen..</text></g><g><title>LLVM_module_optimize (297,584 samples, 0.48%)</title><rect x="47.6876%" y="229" width="0.4776%" height="15" fill="rgb(216,99,12)"/><text x="47.9376%" y="239.50"></text></g><g><title>AST_validation (102,662 samples, 0.16%)</title><rect x="48.4645%" y="229" width="0.1648%" height="15" fill="rgb(226,22,26)"/><text x="48.7145%" y="239.50"></text></g><g><title>crate_injection (68,611 samples, 0.11%)</title><rect x="48.6662%" y="229" width="0.1101%" height="15" fill="rgb(217,163,10)"/><text x="48.9162%" y="239.50"></text></g><g><title>metadata_register_crate (2,247,893 samples, 3.61%)</title><rect x="63.8822%" y="197" width="3.6079%" height="15" fill="rgb(213,25,53)"/><text x="64.1322%" y="207.50">meta..</text></g><g><title>metadata_register_crate (837,289 samples, 1.34%)</title><rect x="66.1462%" y="181" width="1.3439%" height="15" fill="rgb(252,105,26)"/><text x="66.3962%" y="191.50"></text></g><g><title>metadata_register_crate (66,941 samples, 0.11%)</title><rect x="67.3826%" y="165" width="0.1074%" height="15" fill="rgb(220,39,43)"/><text x="67.6326%" y="175.50"></text></g><g><title>macro_expand_crate (11,746,589 samples, 18.85%)</title><rect x="48.7764%" y="229" width="18.8533%" height="15" fill="rgb(229,68,48)"/><text x="49.0264%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (11,726,309 samples, 18.82%)</title><rect x="48.8089%" y="213" width="18.8208%" height="15" fill="rgb(252,8,32)"/><text x="49.0589%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (87,000 samples, 0.14%)</title><rect x="67.4901%" y="197" width="0.1396%" height="15" fill="rgb(223,20,43)"/><text x="67.7401%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (102,991 samples, 0.17%)</title><rect x="67.6361%" y="229" width="0.1653%" height="15" fill="rgb(229,81,49)"/><text x="67.8861%" y="239.50"></text></g><g><title>finalize_imports (297,503 samples, 0.48%)</title><rect x="67.8167%" y="213" width="0.4775%" height="15" fill="rgb(236,28,36)"/><text x="68.0667%" y="223.50"></text></g><g><title>late_resolve_crate (7,588,667 samples, 12.18%)</title><rect x="68.3161%" y="213" width="12.1798%" height="15" fill="rgb(249,185,26)"/><text x="68.5661%" y="223.50">late_resolve_crate</text></g><g><title>configure_and_expand (20,190,236 samples, 32.41%)</title><rect x="48.1652%" y="245" width="32.4054%" height="15" fill="rgb(249,174,33)"/><text x="48.4152%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (7,955,870 samples, 12.77%)</title><rect x="67.8014%" y="229" width="12.7692%" height="15" fill="rgb(233,201,37)"/><text x="68.0514%" y="239.50">resolve_crate</text></g><g><title>early_lint_checks (142,681 samples, 0.23%)</title><rect x="80.7022%" y="245" width="0.2290%" height="15" fill="rgb(221,78,26)"/><text x="80.9522%" y="255.50"></text></g><g><title>free_global_ctxt (2,660,307 samples, 4.27%)</title><rect x="80.9312%" y="245" width="4.2698%" height="15" fill="rgb(250,127,30)"/><text x="81.1812%" y="255.50">free_..</text></g><g><title>crate_hash (127,231 samples, 0.20%)</title><rect x="86.0941%" y="229" width="0.2042%" height="15" fill="rgb(230,49,44)"/><text x="86.3441%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (79,011 samples, 0.13%)</title><rect x="86.4110%" y="213" width="0.1268%" height="15" fill="rgb(229,67,23)"/><text x="86.6610%" y="223.50"></text></g><g><title>exported_symbols (129,701 samples, 0.21%)</title><rect x="86.3911%" y="229" width="0.2082%" height="15" fill="rgb(249,83,47)"/><text x="86.6411%" y="239.50"></text></g><g><title>layout_of (122,331 samples, 0.20%)</title><rect x="89.1065%" y="133" width="0.1963%" height="15" fill="rgb(215,43,3)"/><text x="89.3565%" y="143.50"></text></g><g><title>layout_of (497,396 samples, 0.80%)</title><rect x="88.6501%" y="197" width="0.7983%" height="15" fill="rgb(238,154,13)"/><text x="88.9001%" y="207.50"></text></g><g><title>layout_of (460,006 samples, 0.74%)</title><rect x="88.7101%" y="181" width="0.7383%" height="15" fill="rgb(219,56,2)"/><text x="88.9601%" y="191.50"></text></g><g><title>layout_of (421,774 samples, 0.68%)</title><rect x="88.7714%" y="165" width="0.6769%" height="15" fill="rgb(233,0,4)"/><text x="89.0214%" y="175.50"></text></g><g><title>layout_of (301,232 samples, 0.48%)</title><rect x="88.9649%" y="149" width="0.4835%" height="15" fill="rgb(235,30,7)"/><text x="89.2149%" y="159.50"></text></g><g><title>param_env (90,670 samples, 0.15%)</title><rect x="89.3029%" y="133" width="0.1455%" height="15" fill="rgb(250,79,13)"/><text x="89.5529%" y="143.50"></text></g><g><title>layout_of (735,018 samples, 1.18%)</title><rect x="88.2789%" y="213" width="1.1797%" height="15" fill="rgb(211,146,34)"/><text x="88.5289%" y="223.50"></text></g><g><title>needs_drop_raw (364,033 samples, 0.58%)</title><rect x="92.2953%" y="197" width="0.5843%" height="15" fill="rgb(228,22,38)"/><text x="92.5453%" y="207.50"></text></g><g><title>is_copy_raw (328,953 samples, 0.53%)</title><rect x="92.3516%" y="181" width="0.5280%" height="15" fill="rgb(235,168,5)"/><text x="92.6016%" y="191.50"></text></g><g><title>evaluate_obligation (287,933 samples, 0.46%)</title><rect x="92.4174%" y="165" width="0.4621%" height="15" fill="rgb(221,155,16)"/><text x="92.6674%" y="175.50"></text></g><g><title>optimized_mir (3,843,351 samples, 6.17%)</title><rect x="86.7154%" y="229" width="6.1686%" height="15" fill="rgb(215,215,53)"/><text x="86.9654%" y="239.50">optimize..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,134,173 samples, 3.43%)</title><rect x="89.4586%" y="213" width="3.4254%" height="15" fill="rgb(223,4,10)"/><text x="89.7086%" y="223.50">mir..</text></g><g><title>promoted_mir (108,781 samples, 0.17%)</title><rect x="92.8840%" y="229" width="0.1746%" height="15" fill="rgb(234,103,6)"/><text x="93.1340%" y="239.50"></text></g><g><title>generate_crate_metadata (4,932,100 samples, 7.92%)</title><rect x="85.2011%" y="245" width="7.9160%" height="15" fill="rgb(227,97,0)"/><text x="85.4511%" y="255.50">generate_cr..</text></g><g><title>hir_lowering (706,357 samples, 1.13%)</title><rect x="93.1171%" y="245" width="1.1337%" height="15" fill="rgb(234,150,53)"/><text x="93.3671%" y="255.50"></text></g><g><title>finish_ongoing_codegen (705,757 samples, 1.13%)</title><rect x="94.2781%" y="229" width="1.1327%" height="15" fill="rgb(228,201,54)"/><text x="94.5281%" y="239.50"></text></g><g><title>link_crate (1,026,591 samples, 1.65%)</title><rect x="95.4109%" y="229" width="1.6477%" height="15" fill="rgb(222,22,37)"/><text x="95.6609%" y="239.50"></text></g><g><title>link_binary (998,390 samples, 1.60%)</title><rect x="95.4562%" y="213" width="1.6024%" height="15" fill="rgb(237,53,32)"/><text x="95.7062%" y="223.50"></text></g><g><title>link_rlib (639,106 samples, 1.03%)</title><rect x="96.0328%" y="197" width="1.0258%" height="15" fill="rgb(233,25,53)"/><text x="96.2828%" y="207.50"></text></g><g><title>link (1,760,158 samples, 2.83%)</title><rect x="94.2508%" y="245" width="2.8251%" height="15" fill="rgb(210,40,34)"/><text x="94.5008%" y="255.50">li..</text></g><g><title>parse_crate (407,844 samples, 0.65%)</title><rect x="97.0759%" y="245" width="0.6546%" height="15" fill="rgb(241,220,44)"/><text x="97.3259%" y="255.50"></text></g><g><title>prepare_outputs (284,512 samples, 0.46%)</title><rect x="97.7410%" y="245" width="0.4566%" height="15" fill="rgb(235,28,35)"/><text x="97.9910%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (555,776 samples, 0.89%)</title><rect x="98.1977%" y="245" width="0.8920%" height="15" fill="rgb(210,56,17)"/><text x="98.4477%" y="255.50"></text></g><g><title>setup_global_ctxt (109,111 samples, 0.18%)</title><rect x="99.0915%" y="245" width="0.1751%" height="15" fill="rgb(224,130,29)"/><text x="99.3415%" y="255.50"></text></g><g><title>all (62,305,125 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,212,8)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (62,305,125 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(223,33,50)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (456,925 samples, 0.73%)</title><rect x="99.2666%" y="245" width="0.7334%" height="15" fill="rgb(219,149,13)"/><text x="99.5166%" y="255.50"></text></g></svg></svg>