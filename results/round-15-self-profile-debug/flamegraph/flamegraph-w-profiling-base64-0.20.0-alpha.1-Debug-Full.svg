<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (94,557,298 samples, 10.41%)</title><rect x="0.0970%" y="181" width="10.4062%" height="15" fill="rgb(227,0,7)"/><text x="0.3470%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,561,422 samples, 0.17%)</title><rect x="15.2401%" y="53" width="0.1718%" height="15" fill="rgb(217,0,24)"/><text x="15.4901%" y="63.50"></text></g><g><title>evaluate_obligation (1,280,958 samples, 0.14%)</title><rect x="15.2710%" y="37" width="0.1410%" height="15" fill="rgb(221,193,54)"/><text x="15.5210%" y="47.50"></text></g><g><title>needs_drop_raw (2,007,539 samples, 0.22%)</title><rect x="15.1916%" y="69" width="0.2209%" height="15" fill="rgb(248,212,6)"/><text x="15.4416%" y="79.50"></text></g><g><title>specialization_graph_of (1,024,980 samples, 0.11%)</title><rect x="15.5175%" y="53" width="0.1128%" height="15" fill="rgb(208,68,35)"/><text x="15.7675%" y="63.50"></text></g><g><title>resolve_instance (2,116,000 samples, 0.23%)</title><rect x="15.4125%" y="69" width="0.2329%" height="15" fill="rgb(232,128,0)"/><text x="15.6625%" y="79.50"></text></g><g><title>thir_body (2,936,458 samples, 0.32%)</title><rect x="15.6511%" y="69" width="0.3232%" height="15" fill="rgb(207,160,47)"/><text x="15.9011%" y="79.50"></text></g><g><title>mir_const (17,646,038 samples, 1.94%)</title><rect x="14.0396%" y="117" width="1.9420%" height="15" fill="rgb(228,23,34)"/><text x="14.2896%" y="127.50">m..</text></g><g><title>unsafety_check_result (15,615,803 samples, 1.72%)</title><rect x="14.2630%" y="101" width="1.7186%" height="15" fill="rgb(218,30,26)"/><text x="14.5130%" y="111.50"></text></g><g><title>mir_built (14,124,679 samples, 1.55%)</title><rect x="14.4271%" y="85" width="1.5545%" height="15" fill="rgb(220,122,19)"/><text x="14.6771%" y="95.50"></text></g><g><title>mir_const (1,428,844 samples, 0.16%)</title><rect x="16.0394%" y="101" width="0.1572%" height="15" fill="rgb(250,228,42)"/><text x="16.2894%" y="111.50"></text></g><g><title>unsafety_check_result (1,144,120 samples, 0.13%)</title><rect x="16.0707%" y="85" width="0.1259%" height="15" fill="rgb(240,193,28)"/><text x="16.3207%" y="95.50"></text></g><g><title>mir_built (998,289 samples, 0.11%)</title><rect x="16.0868%" y="69" width="0.1099%" height="15" fill="rgb(216,20,37)"/><text x="16.3368%" y="79.50"></text></g><g><title>mir_const_qualif (2,046,021 samples, 0.23%)</title><rect x="15.9815%" y="117" width="0.2252%" height="15" fill="rgb(206,188,39)"/><text x="16.2315%" y="127.50"></text></g><g><title>mir_promoted (21,633,032 samples, 2.38%)</title><rect x="13.8260%" y="133" width="2.3808%" height="15" fill="rgb(217,207,13)"/><text x="14.0760%" y="143.50">mi..</text></g><g><title>type_op_normalize_fn_sig (1,563,499 samples, 0.17%)</title><rect x="16.2788%" y="133" width="0.1721%" height="15" fill="rgb(231,73,38)"/><text x="16.5288%" y="143.50"></text></g><g><title>normalize_projection_ty (1,106,738 samples, 0.12%)</title><rect x="16.3291%" y="117" width="0.1218%" height="15" fill="rgb(225,20,46)"/><text x="16.5791%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,583,944 samples, 0.39%)</title><rect x="16.4955%" y="133" width="0.3944%" height="15" fill="rgb(210,31,41)"/><text x="16.7455%" y="143.50"></text></g><g><title>MIR_borrow_checking (57,430,466 samples, 6.32%)</title><rect x="10.5712%" y="165" width="6.3203%" height="15" fill="rgb(221,200,47)"/><text x="10.8212%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (56,944,282 samples, 6.27%)</title><rect x="10.6247%" y="149" width="6.2668%" height="15" fill="rgb(226,26,5)"/><text x="10.8747%" y="159.50">mir_borr..</text></g><g><title>MIR_effect_checking (920,389 samples, 0.10%)</title><rect x="16.8915%" y="165" width="0.1013%" height="15" fill="rgb(249,33,26)"/><text x="17.1415%" y="175.50"></text></g><g><title>check_mod_attrs (1,208,523 samples, 0.13%)</title><rect x="17.0373%" y="149" width="0.1330%" height="15" fill="rgb(235,183,28)"/><text x="17.2873%" y="159.50"></text></g><g><title>misc_checking_1 (2,520,926 samples, 0.28%)</title><rect x="17.0318%" y="165" width="0.2774%" height="15" fill="rgb(221,5,38)"/><text x="17.2818%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,136,481 samples, 0.13%)</title><rect x="17.3094%" y="149" width="0.1251%" height="15" fill="rgb(247,18,42)"/><text x="17.5594%" y="159.50"></text></g><g><title>misc_checking_2 (2,338,733 samples, 0.26%)</title><rect x="17.3093%" y="165" width="0.2574%" height="15" fill="rgb(241,131,45)"/><text x="17.5593%" y="175.50"></text></g><g><title>match_checking (1,200,582 samples, 0.13%)</title><rect x="17.4345%" y="149" width="0.1321%" height="15" fill="rgb(249,31,29)"/><text x="17.6845%" y="159.50"></text></g><g><title>check_match (1,136,392 samples, 0.13%)</title><rect x="17.4416%" y="133" width="0.1251%" height="15" fill="rgb(225,111,53)"/><text x="17.6916%" y="143.50"></text></g><g><title>death_checking (919,009 samples, 0.10%)</title><rect x="17.6155%" y="149" width="0.1011%" height="15" fill="rgb(238,160,17)"/><text x="17.8655%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,014,250 samples, 0.33%)</title><rect x="17.8681%" y="117" width="0.3317%" height="15" fill="rgb(214,148,48)"/><text x="18.1181%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,998,969 samples, 0.33%)</title><rect x="17.8697%" y="101" width="0.3300%" height="15" fill="rgb(232,36,49)"/><text x="18.1197%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,972,959 samples, 0.33%)</title><rect x="17.8726%" y="85" width="0.3272%" height="15" fill="rgb(209,103,24)"/><text x="18.1226%" y="95.50"></text></g><g><title>crate_lints (6,045,651 samples, 0.67%)</title><rect x="17.7168%" y="133" width="0.6653%" height="15" fill="rgb(229,88,8)"/><text x="17.9668%" y="143.50"></text></g><g><title>type_of (1,106,951 samples, 0.12%)</title><rect x="18.2604%" y="117" width="0.1218%" height="15" fill="rgb(213,181,19)"/><text x="18.5104%" y="127.50"></text></g><g><title>lint_checking (7,288,153 samples, 0.80%)</title><rect x="17.7166%" y="149" width="0.8021%" height="15" fill="rgb(254,191,54)"/><text x="17.9666%" y="159.50"></text></g><g><title>module_lints (1,240,232 samples, 0.14%)</title><rect x="18.3822%" y="133" width="0.1365%" height="15" fill="rgb(241,83,37)"/><text x="18.6322%" y="143.50"></text></g><g><title>lint_mod (1,226,781 samples, 0.14%)</title><rect x="18.3837%" y="117" width="0.1350%" height="15" fill="rgb(233,36,39)"/><text x="18.6337%" y="127.50"></text></g><g><title>privacy_checking_modules (1,761,768 samples, 0.19%)</title><rect x="18.5751%" y="149" width="0.1939%" height="15" fill="rgb(226,3,54)"/><text x="18.8251%" y="159.50"></text></g><g><title>check_mod_privacy (1,751,928 samples, 0.19%)</title><rect x="18.5762%" y="133" width="0.1928%" height="15" fill="rgb(245,192,40)"/><text x="18.8262%" y="143.50"></text></g><g><title>misc_checking_3 (10,948,210 samples, 1.20%)</title><rect x="17.5666%" y="165" width="1.2049%" height="15" fill="rgb(238,167,29)"/><text x="17.8166%" y="175.50"></text></g><g><title>impl_parent (2,444,839 samples, 0.27%)</title><rect x="19.3192%" y="101" width="0.2691%" height="15" fill="rgb(232,182,51)"/><text x="19.5692%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,438,507 samples, 0.16%)</title><rect x="19.4299%" y="85" width="0.1583%" height="15" fill="rgb(231,60,39)"/><text x="19.6799%" y="95.50"></text></g><g><title>impl_trait_ref (5,012,339 samples, 0.55%)</title><rect x="19.5884%" y="101" width="0.5516%" height="15" fill="rgb(208,69,12)"/><text x="19.8384%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,972,271 samples, 0.44%)</title><rect x="19.7029%" y="85" width="0.4372%" height="15" fill="rgb(235,93,37)"/><text x="19.9529%" y="95.50"></text></g><g><title>coherent_trait (13,235,163 samples, 1.46%)</title><rect x="18.7901%" y="133" width="1.4566%" height="15" fill="rgb(213,116,39)"/><text x="19.0401%" y="143.50"></text></g><g><title>specialization_graph_of (12,591,596 samples, 1.39%)</title><rect x="18.8609%" y="117" width="1.3857%" height="15" fill="rgb(222,207,29)"/><text x="19.1109%" y="127.50"></text></g><g><title>coherence_checking (13,337,993 samples, 1.47%)</title><rect x="18.7876%" y="149" width="1.4679%" height="15" fill="rgb(206,96,30)"/><text x="19.0376%" y="159.50"></text></g><g><title>associated_items (961,058 samples, 0.11%)</title><rect x="27.6533%" y="101" width="0.1058%" height="15" fill="rgb(218,138,4)"/><text x="27.9033%" y="111.50"></text></g><g><title>mir_for_ctfe (921,730 samples, 0.10%)</title><rect x="28.0344%" y="53" width="0.1014%" height="15" fill="rgb(250,191,14)"/><text x="28.2844%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,668,405 samples, 0.29%)</title><rect x="27.8709%" y="101" width="0.2937%" height="15" fill="rgb(239,60,40)"/><text x="28.1209%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,853,868 samples, 0.20%)</title><rect x="27.9605%" y="85" width="0.2040%" height="15" fill="rgb(206,27,48)"/><text x="28.2105%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,829,188 samples, 0.20%)</title><rect x="27.9633%" y="69" width="0.2013%" height="15" fill="rgb(225,35,8)"/><text x="28.2133%" y="79.50"></text></g><g><title>generics_of (1,732,580 samples, 0.19%)</title><rect x="29.3194%" y="85" width="0.1907%" height="15" fill="rgb(250,213,24)"/><text x="29.5694%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,138,536 samples, 0.13%)</title><rect x="29.3848%" y="69" width="0.1253%" height="15" fill="rgb(247,123,22)"/><text x="29.6348%" y="79.50"></text></g><g><title>impl_trait_ref (1,722,098 samples, 0.19%)</title><rect x="29.5408%" y="85" width="0.1895%" height="15" fill="rgb(231,138,38)"/><text x="29.7908%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,355,594 samples, 0.15%)</title><rect x="29.5811%" y="69" width="0.1492%" height="15" fill="rgb(231,145,46)"/><text x="29.8311%" y="79.50"></text></g><g><title>predicates_of (1,316,346 samples, 0.14%)</title><rect x="29.7392%" y="85" width="0.1449%" height="15" fill="rgb(251,118,11)"/><text x="29.9892%" y="95.50"></text></g><g><title>specializes (2,949,662 samples, 0.32%)</title><rect x="29.8841%" y="85" width="0.3246%" height="15" fill="rgb(217,147,25)"/><text x="30.1341%" y="95.50"></text></g><g><title>param_env (1,781,328 samples, 0.20%)</title><rect x="30.0127%" y="69" width="0.1960%" height="15" fill="rgb(247,81,37)"/><text x="30.2627%" y="79.50"></text></g><g><title>evaluate_obligation (19,427,354 samples, 2.14%)</title><rect x="28.1646%" y="101" width="2.1380%" height="15" fill="rgb(209,12,38)"/><text x="28.4146%" y="111.50">e..</text></g><g><title>generics_of (1,590,282 samples, 0.18%)</title><rect x="30.3335%" y="101" width="0.1750%" height="15" fill="rgb(227,1,9)"/><text x="30.5835%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,204,479 samples, 0.13%)</title><rect x="30.3760%" y="85" width="0.1326%" height="15" fill="rgb(248,47,43)"/><text x="30.6260%" y="95.50"></text></g><g><title>evaluate_obligation (1,565,959 samples, 0.17%)</title><rect x="32.0424%" y="85" width="0.1723%" height="15" fill="rgb(221,10,30)"/><text x="32.2924%" y="95.50"></text></g><g><title>typeck (13,147,142 samples, 1.45%)</title><rect x="30.8500%" y="101" width="1.4469%" height="15" fill="rgb(210,229,1)"/><text x="31.1000%" y="111.50"></text></g><g><title>item_bodies_checking (109,460,598 samples, 12.05%)</title><rect x="20.2611%" y="149" width="12.0464%" height="15" fill="rgb(222,148,37)"/><text x="20.5111%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (109,456,528 samples, 12.05%)</title><rect x="20.2615%" y="133" width="12.0459%" height="15" fill="rgb(234,67,33)"/><text x="20.5115%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (109,284,316 samples, 12.03%)</title><rect x="20.2805%" y="117" width="12.0270%" height="15" fill="rgb(247,98,35)"/><text x="20.5305%" y="127.50">typeck</text></g><g><title>item_types_checking (3,253,153 samples, 0.36%)</title><rect x="32.3074%" y="149" width="0.3580%" height="15" fill="rgb(247,138,52)"/><text x="32.5574%" y="159.50"></text></g><g><title>check_mod_item_types (3,240,403 samples, 0.36%)</title><rect x="32.3088%" y="133" width="0.3566%" height="15" fill="rgb(213,79,30)"/><text x="32.5588%" y="143.50"></text></g><g><title>typeck (1,773,008 samples, 0.20%)</title><rect x="32.4703%" y="117" width="0.1951%" height="15" fill="rgb(246,177,23)"/><text x="32.7203%" y="127.50"></text></g><g><title>generics_of (1,378,884 samples, 0.15%)</title><rect x="32.7906%" y="117" width="0.1517%" height="15" fill="rgb(230,62,27)"/><text x="33.0406%" y="127.50"></text></g><g><title>predicates_of (1,042,601 samples, 0.11%)</title><rect x="32.9594%" y="117" width="0.1147%" height="15" fill="rgb(216,154,8)"/><text x="33.2094%" y="127.50"></text></g><g><title>predicates_defined_on (941,178 samples, 0.10%)</title><rect x="32.9706%" y="101" width="0.1036%" height="15" fill="rgb(244,35,45)"/><text x="33.2206%" y="111.50"></text></g><g><title>type_collecting (3,929,039 samples, 0.43%)</title><rect x="32.6661%" y="149" width="0.4324%" height="15" fill="rgb(251,115,12)"/><text x="32.9161%" y="159.50"></text></g><g><title>collect_mod_item_types (3,903,828 samples, 0.43%)</title><rect x="32.6688%" y="133" width="0.4296%" height="15" fill="rgb(240,54,50)"/><text x="32.9188%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,062,848 samples, 0.56%)</title><rect x="33.1426%" y="133" width="0.5572%" height="15" fill="rgb(233,84,52)"/><text x="33.3926%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,177,752 samples, 0.24%)</title><rect x="34.0042%" y="117" width="0.2397%" height="15" fill="rgb(207,117,47)"/><text x="34.2542%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,159,362 samples, 0.24%)</title><rect x="34.0062%" y="101" width="0.2376%" height="15" fill="rgb(249,43,39)"/><text x="34.2562%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,152,642 samples, 0.24%)</title><rect x="34.0069%" y="85" width="0.2369%" height="15" fill="rgb(209,38,44)"/><text x="34.2569%" y="95.50"></text></g><g><title>evaluate_obligation (934,230 samples, 0.10%)</title><rect x="34.2438%" y="117" width="0.1028%" height="15" fill="rgb(236,212,23)"/><text x="34.4938%" y="127.50"></text></g><g><title>check_item_well_formed (7,338,944 samples, 0.81%)</title><rect x="33.6998%" y="133" width="0.8077%" height="15" fill="rgb(242,79,21)"/><text x="33.9498%" y="143.50"></text></g><g><title>analysis (218,930,395 samples, 24.09%)</title><rect x="10.5032%" y="181" width="24.0938%" height="15" fill="rgb(211,96,35)"/><text x="10.7532%" y="191.50">analysis</text></g><g><title>type_check_crate (143,799,811 samples, 15.83%)</title><rect x="18.7715%" y="165" width="15.8255%" height="15" fill="rgb(253,215,40)"/><text x="19.0215%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,601,296 samples, 1.50%)</title><rect x="33.1001%" y="149" width="1.4969%" height="15" fill="rgb(211,81,21)"/><text x="33.3501%" y="159.50"></text></g><g><title>const_caller_location (2,571,679 samples, 0.28%)</title><rect x="40.7705%" y="149" width="0.2830%" height="15" fill="rgb(208,190,38)"/><text x="41.0205%" y="159.50"></text></g><g><title>layout_of (1,761,144 samples, 0.19%)</title><rect x="41.4452%" y="133" width="0.1938%" height="15" fill="rgb(235,213,38)"/><text x="41.6952%" y="143.50"></text></g><g><title>explicit_predicates_of (913,740 samples, 0.10%)</title><rect x="41.9632%" y="85" width="0.1006%" height="15" fill="rgb(237,122,38)"/><text x="42.2132%" y="95.50"></text></g><g><title>predicates_of (1,739,260 samples, 0.19%)</title><rect x="41.8867%" y="117" width="0.1914%" height="15" fill="rgb(244,218,35)"/><text x="42.1367%" y="127.50"></text></g><g><title>predicates_defined_on (1,329,496 samples, 0.15%)</title><rect x="41.9318%" y="101" width="0.1463%" height="15" fill="rgb(240,68,47)"/><text x="42.1818%" y="111.50"></text></g><g><title>param_env (4,000,290 samples, 0.44%)</title><rect x="41.6390%" y="133" width="0.4402%" height="15" fill="rgb(210,16,53)"/><text x="41.8890%" y="143.50"></text></g><g><title>normalize_projection_ty (955,460 samples, 0.11%)</title><rect x="42.1249%" y="117" width="0.1052%" height="15" fill="rgb(235,124,12)"/><text x="42.3749%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,385,318 samples, 0.15%)</title><rect x="42.0793%" y="133" width="0.1525%" height="15" fill="rgb(224,169,11)"/><text x="42.3293%" y="143.50"></text></g><g><title>fn_abi_of_instance (10,698,802 samples, 1.18%)</title><rect x="41.0571%" y="149" width="1.1774%" height="15" fill="rgb(250,166,2)"/><text x="41.3071%" y="159.50"></text></g><g><title>layout_of (960,749 samples, 0.11%)</title><rect x="42.2801%" y="149" width="0.1057%" height="15" fill="rgb(242,216,29)"/><text x="42.5301%" y="159.50"></text></g><g><title>codegen_module (69,171,650 samples, 7.61%)</title><rect x="34.8401%" y="165" width="7.6125%" height="15" fill="rgb(230,116,27)"/><text x="35.0901%" y="175.50">codegen_mo..</text></g><g><title>codegen_crate (71,450,527 samples, 7.86%)</title><rect x="34.5980%" y="181" width="7.8633%" height="15" fill="rgb(228,99,48)"/><text x="34.8480%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (360,901,540 samples, 39.72%)</title><rect x="42.5278%" y="165" width="39.7180%" height="15" fill="rgb(253,11,6)"/><text x="42.7778%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (345,398,482 samples, 38.01%)</title><rect x="44.2339%" y="149" width="38.0119%" height="15" fill="rgb(247,143,39)"/><text x="44.4839%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (388,251,111 samples, 42.73%)</title><rect x="42.4613%" y="181" width="42.7279%" height="15" fill="rgb(236,97,10)"/><text x="42.7113%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (26,745,206 samples, 2.94%)</title><rect x="82.2458%" y="165" width="2.9434%" height="15" fill="rgb(233,208,19)"/><text x="82.4958%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,255,743 samples, 0.25%)</title><rect x="90.2058%" y="133" width="0.2482%" height="15" fill="rgb(216,164,2)"/><text x="90.4558%" y="143.50"></text></g><g><title>macro_expand_crate (48,283,004 samples, 5.31%)</title><rect x="85.2715%" y="165" width="5.3137%" height="15" fill="rgb(220,129,5)"/><text x="85.5215%" y="175.50">macro_e..</text></g><g><title>expand_crate (48,270,174 samples, 5.31%)</title><rect x="85.2729%" y="149" width="5.3122%" height="15" fill="rgb(242,17,10)"/><text x="85.5229%" y="159.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (1,190,790 samples, 0.13%)</title><rect x="90.4541%" y="133" width="0.1310%" height="15" fill="rgb(242,107,0)"/><text x="90.7041%" y="143.50"></text></g><g><title>late_resolve_crate (3,504,665 samples, 0.39%)</title><rect x="90.6282%" y="149" width="0.3857%" height="15" fill="rgb(251,28,31)"/><text x="90.8782%" y="159.50"></text></g><g><title>configure_and_expand (53,191,303 samples, 5.85%)</title><rect x="85.1891%" y="181" width="5.8538%" height="15" fill="rgb(233,223,10)"/><text x="85.4391%" y="191.50">configu..</text></g><g><title>resolve_crate (4,073,991 samples, 0.45%)</title><rect x="90.5946%" y="165" width="0.4484%" height="15" fill="rgb(215,21,27)"/><text x="90.8446%" y="175.50"></text></g><g><title>free_global_ctxt (7,686,117 samples, 0.85%)</title><rect x="91.1876%" y="181" width="0.8459%" height="15" fill="rgb(232,23,21)"/><text x="91.4376%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,466,671 samples, 0.16%)</title><rect x="92.6465%" y="101" width="0.1614%" height="15" fill="rgb(244,5,23)"/><text x="92.8965%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,774,120 samples, 0.20%)</title><rect x="93.1887%" y="85" width="0.1952%" height="15" fill="rgb(226,81,46)"/><text x="93.4387%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,075,201 samples, 0.23%)</title><rect x="93.3840%" y="85" width="0.2284%" height="15" fill="rgb(247,70,30)"/><text x="93.6340%" y="95.50"></text></g><g><title>optimized_mir (7,544,348 samples, 0.83%)</title><rect x="92.8564%" y="101" width="0.8303%" height="15" fill="rgb(212,68,19)"/><text x="93.1064%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,983,239 samples, 0.22%)</title><rect x="93.7634%" y="85" width="0.2183%" height="15" fill="rgb(240,187,13)"/><text x="94.0134%" y="95.50"></text></g><g><title>specialization_graph_of (2,089,242 samples, 0.23%)</title><rect x="94.0667%" y="85" width="0.2299%" height="15" fill="rgb(223,113,26)"/><text x="94.3167%" y="95.50"></text></g><g><title>resolve_instance (5,824,383 samples, 0.64%)</title><rect x="93.6867%" y="101" width="0.6410%" height="15" fill="rgb(206,192,2)"/><text x="93.9367%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (17,889,549 samples, 1.97%)</title><rect x="92.4536%" y="117" width="1.9688%" height="15" fill="rgb(241,108,4)"/><text x="92.7036%" y="127.50">m..</text></g><g><title>monomorphization_collector (17,995,820 samples, 1.98%)</title><rect x="92.4531%" y="133" width="1.9805%" height="15" fill="rgb(247,173,49)"/><text x="92.7031%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (1,581,256 samples, 0.17%)</title><rect x="94.4346%" y="117" width="0.1740%" height="15" fill="rgb(224,114,35)"/><text x="94.6846%" y="127.50"></text></g><g><title>symbol_name (1,452,665 samples, 0.16%)</title><rect x="94.4487%" y="101" width="0.1599%" height="15" fill="rgb(245,159,27)"/><text x="94.6987%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (20,381,304 samples, 2.24%)</title><rect x="92.4490%" y="149" width="2.2430%" height="15" fill="rgb(245,172,44)"/><text x="92.6990%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (2,348,054 samples, 0.26%)</title><rect x="94.4336%" y="133" width="0.2584%" height="15" fill="rgb(236,23,11)"/><text x="94.6836%" y="143.50"></text></g><g><title>exported_symbols (20,693,677 samples, 2.28%)</title><rect x="92.4407%" y="165" width="2.2774%" height="15" fill="rgb(205,117,38)"/><text x="92.6907%" y="175.50">e..</text></g><g><title>layout_of (1,242,469 samples, 0.14%)</title><rect x="95.3572%" y="149" width="0.1367%" height="15" fill="rgb(237,72,25)"/><text x="95.6072%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,745,826 samples, 0.74%)</title><rect x="95.4939%" y="149" width="0.7424%" height="15" fill="rgb(244,70,9)"/><text x="95.7439%" y="159.50"></text></g><g><title>optimized_mir (13,959,878 samples, 1.54%)</title><rect x="94.7403%" y="165" width="1.5363%" height="15" fill="rgb(217,125,39)"/><text x="94.9903%" y="175.50"></text></g><g><title>generate_crate_metadata (38,819,079 samples, 4.27%)</title><rect x="92.0334%" y="181" width="4.2721%" height="15" fill="rgb(235,36,10)"/><text x="92.2834%" y="191.50">gener..</text></g><g><title>hir_lowering (6,293,824 samples, 0.69%)</title><rect x="96.3055%" y="181" width="0.6926%" height="15" fill="rgb(251,123,47)"/><text x="96.5555%" y="191.50"></text></g><g><title>finish_ongoing_codegen (18,466,764 samples, 2.03%)</title><rect x="97.0171%" y="165" width="2.0323%" height="15" fill="rgb(221,13,13)"/><text x="97.2671%" y="175.50">f..</text></g><g><title>link_crate (2,844,109 samples, 0.31%)</title><rect x="99.0494%" y="165" width="0.3130%" height="15" fill="rgb(238,131,9)"/><text x="99.2994%" y="175.50"></text></g><g><title>link_binary (2,779,228 samples, 0.31%)</title><rect x="99.0565%" y="149" width="0.3059%" height="15" fill="rgb(211,50,8)"/><text x="99.3065%" y="159.50"></text></g><g><title>link_rlib (2,127,321 samples, 0.23%)</title><rect x="99.1283%" y="133" width="0.2341%" height="15" fill="rgb(245,182,24)"/><text x="99.3783%" y="143.50"></text></g><g><title>link (21,494,926 samples, 2.37%)</title><rect x="96.9982%" y="181" width="2.3656%" height="15" fill="rgb(242,14,37)"/><text x="97.2482%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (4,343,023 samples, 0.48%)</title><rect x="99.4516%" y="181" width="0.4780%" height="15" fill="rgb(246,228,12)"/><text x="99.7016%" y="191.50"></text></g><g><title>all (908,659,838 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (908,659,838 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>