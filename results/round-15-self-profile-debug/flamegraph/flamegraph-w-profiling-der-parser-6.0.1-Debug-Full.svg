<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (307,840,140 samples, 12.97%)</title><rect x="0.0266%" y="229" width="12.9679%" height="15" fill="rgb(227,0,7)"/><text x="0.2766%" y="239.50">LLVM_passes</text></g><g><title>is_copy_raw (2,675,995 samples, 0.11%)</title><rect x="17.9429%" y="101" width="0.1127%" height="15" fill="rgb(217,0,24)"/><text x="18.1929%" y="111.50"></text></g><g><title>needs_drop_raw (3,322,770 samples, 0.14%)</title><rect x="17.9163%" y="117" width="0.1400%" height="15" fill="rgb(221,193,54)"/><text x="18.1663%" y="127.50"></text></g><g><title>thir_body (6,949,666 samples, 0.29%)</title><rect x="18.1595%" y="117" width="0.2928%" height="15" fill="rgb(248,212,6)"/><text x="18.4095%" y="127.50"></text></g><g><title>mir_const (38,624,597 samples, 1.63%)</title><rect x="16.8300%" y="165" width="1.6271%" height="15" fill="rgb(208,68,35)"/><text x="17.0800%" y="175.50"></text></g><g><title>unsafety_check_result (33,638,148 samples, 1.42%)</title><rect x="17.0401%" y="149" width="1.4170%" height="15" fill="rgb(232,128,0)"/><text x="17.2901%" y="159.50"></text></g><g><title>mir_built (30,222,726 samples, 1.27%)</title><rect x="17.1840%" y="133" width="1.2731%" height="15" fill="rgb(207,160,47)"/><text x="17.4340%" y="143.50"></text></g><g><title>mir_promoted (43,894,895 samples, 1.85%)</title><rect x="16.6466%" y="181" width="1.8491%" height="15" fill="rgb(228,23,34)"/><text x="16.8966%" y="191.50">m..</text></g><g><title>type_op_normalize_fn_sig (3,117,797 samples, 0.13%)</title><rect x="18.5527%" y="181" width="0.1313%" height="15" fill="rgb(218,30,26)"/><text x="18.8027%" y="191.50"></text></g><g><title>type_op_prove_predicate (10,961,837 samples, 0.46%)</title><rect x="18.7885%" y="181" width="0.4618%" height="15" fill="rgb(220,122,19)"/><text x="19.0385%" y="191.50"></text></g><g><title>MIR_borrow_checking (147,075,711 samples, 6.20%)</title><rect x="13.0556%" y="213" width="6.1956%" height="15" fill="rgb(250,228,42)"/><text x="13.3056%" y="223.50">MIR_borr..</text></g><g><title>mir_borrowck (146,433,366 samples, 6.17%)</title><rect x="13.0827%" y="197" width="6.1686%" height="15" fill="rgb(240,193,28)"/><text x="13.3327%" y="207.50">mir_borr..</text></g><g><title>check_mod_unstable_api_usage (2,563,778 samples, 0.11%)</title><rect x="19.4550%" y="197" width="0.1080%" height="15" fill="rgb(216,20,37)"/><text x="19.7050%" y="207.50"></text></g><g><title>misc_checking_1 (6,008,301 samples, 0.25%)</title><rect x="19.3182%" y="213" width="0.2531%" height="15" fill="rgb(206,188,39)"/><text x="19.5682%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (3,088,451 samples, 0.13%)</title><rect x="19.5714%" y="197" width="0.1301%" height="15" fill="rgb(217,207,13)"/><text x="19.8214%" y="207.50"></text></g><g><title>check_mod_liveness (2,509,484 samples, 0.11%)</title><rect x="19.5958%" y="181" width="0.1057%" height="15" fill="rgb(231,73,38)"/><text x="19.8458%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,744,766 samples, 0.12%)</title><rect x="19.9360%" y="165" width="0.1156%" height="15" fill="rgb(225,20,46)"/><text x="20.1860%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,722,086 samples, 0.11%)</title><rect x="19.9369%" y="149" width="0.1147%" height="15" fill="rgb(210,31,41)"/><text x="20.1869%" y="159.50"></text></g><g><title>eval_to_allocation_raw (2,673,176 samples, 0.11%)</title><rect x="19.9390%" y="133" width="0.1126%" height="15" fill="rgb(221,200,47)"/><text x="20.1890%" y="143.50"></text></g><g><title>misc_checking_2 (12,347,534 samples, 0.52%)</title><rect x="19.5713%" y="213" width="0.5201%" height="15" fill="rgb(226,26,5)"/><text x="19.8213%" y="223.50"></text></g><g><title>match_checking (9,256,833 samples, 0.39%)</title><rect x="19.7015%" y="197" width="0.3899%" height="15" fill="rgb(249,33,26)"/><text x="19.9515%" y="207.50"></text></g><g><title>check_match (8,792,010 samples, 0.37%)</title><rect x="19.7211%" y="181" width="0.3704%" height="15" fill="rgb(235,183,28)"/><text x="19.9711%" y="191.50"></text></g><g><title>crate_lints (5,950,260 samples, 0.25%)</title><rect x="20.2129%" y="181" width="0.2507%" height="15" fill="rgb(221,5,38)"/><text x="20.4629%" y="191.50"></text></g><g><title>lint_checking (10,069,311 samples, 0.42%)</title><rect x="20.2129%" y="197" width="0.4242%" height="15" fill="rgb(247,18,42)"/><text x="20.4629%" y="207.50"></text></g><g><title>module_lints (4,117,031 samples, 0.17%)</title><rect x="20.4636%" y="181" width="0.1734%" height="15" fill="rgb(241,131,45)"/><text x="20.7136%" y="191.50"></text></g><g><title>lint_mod (4,102,861 samples, 0.17%)</title><rect x="20.4642%" y="165" width="0.1728%" height="15" fill="rgb(249,31,29)"/><text x="20.7142%" y="175.50"></text></g><g><title>privacy_access_levels (2,643,697 samples, 0.11%)</title><rect x="20.6370%" y="197" width="0.1114%" height="15" fill="rgb(225,111,53)"/><text x="20.8870%" y="207.50"></text></g><g><title>privacy_checking_modules (7,035,781 samples, 0.30%)</title><rect x="20.7484%" y="197" width="0.2964%" height="15" fill="rgb(238,160,17)"/><text x="20.9984%" y="207.50"></text></g><g><title>check_mod_privacy (7,023,261 samples, 0.30%)</title><rect x="20.7489%" y="181" width="0.2959%" height="15" fill="rgb(214,148,48)"/><text x="20.9989%" y="191.50"></text></g><g><title>misc_checking_3 (22,694,248 samples, 0.96%)</title><rect x="20.0915%" y="213" width="0.9560%" height="15" fill="rgb(232,36,49)"/><text x="20.3415%" y="223.50"></text></g><g><title>impl_parent (2,982,038 samples, 0.13%)</title><rect x="21.3034%" y="149" width="0.1256%" height="15" fill="rgb(209,103,24)"/><text x="21.5534%" y="159.50"></text></g><g><title>impl_trait_ref (6,767,270 samples, 0.29%)</title><rect x="21.4291%" y="149" width="0.2851%" height="15" fill="rgb(229,88,8)"/><text x="21.6791%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,313,537 samples, 0.22%)</title><rect x="21.4903%" y="133" width="0.2238%" height="15" fill="rgb(213,181,19)"/><text x="21.7403%" y="143.50"></text></g><g><title>coherent_trait (16,712,449 samples, 0.70%)</title><rect x="21.0622%" y="181" width="0.7040%" height="15" fill="rgb(254,191,54)"/><text x="21.3122%" y="191.50"></text></g><g><title>specialization_graph_of (16,244,145 samples, 0.68%)</title><rect x="21.0820%" y="165" width="0.6843%" height="15" fill="rgb(241,83,37)"/><text x="21.3320%" y="175.50"></text></g><g><title>coherence_checking (16,876,040 samples, 0.71%)</title><rect x="21.0611%" y="197" width="0.7109%" height="15" fill="rgb(233,36,39)"/><text x="21.3111%" y="207.50"></text></g><g><title>evaluate_obligation (9,683,564 samples, 0.41%)</title><rect x="28.2000%" y="149" width="0.4079%" height="15" fill="rgb(226,3,54)"/><text x="28.4500%" y="159.50"></text></g><g><title>evaluate_obligation (4,539,885 samples, 0.19%)</title><rect x="30.0626%" y="133" width="0.1912%" height="15" fill="rgb(245,192,40)"/><text x="30.3126%" y="143.50"></text></g><g><title>typeck (37,904,909 samples, 1.60%)</title><rect x="28.7417%" y="149" width="1.5968%" height="15" fill="rgb(238,167,29)"/><text x="28.9917%" y="159.50"></text></g><g><title>item_bodies_checking (203,380,477 samples, 8.57%)</title><rect x="21.7772%" y="197" width="8.5675%" height="15" fill="rgb(232,182,51)"/><text x="22.0272%" y="207.50">item_bodies_..</text></g><g><title>typeck_item_bodies (203,377,697 samples, 8.57%)</title><rect x="21.7774%" y="181" width="8.5674%" height="15" fill="rgb(231,60,39)"/><text x="22.0274%" y="191.50">typeck_item_..</text></g><g><title>typeck (202,898,533 samples, 8.55%)</title><rect x="21.7975%" y="165" width="8.5472%" height="15" fill="rgb(208,69,12)"/><text x="22.0475%" y="175.50">typeck</text></g><g><title>type_op_prove_predicate (2,695,384 samples, 0.11%)</title><rect x="31.8205%" y="117" width="0.1135%" height="15" fill="rgb(235,93,37)"/><text x="32.0705%" y="127.50"></text></g><g><title>mir_borrowck (17,662,567 samples, 0.74%)</title><rect x="31.1901%" y="133" width="0.7440%" height="15" fill="rgb(213,116,39)"/><text x="31.4401%" y="143.50"></text></g><g><title>specializes (2,895,771 samples, 0.12%)</title><rect x="34.4635%" y="37" width="0.1220%" height="15" fill="rgb(222,207,29)"/><text x="34.7135%" y="47.50"></text></g><g><title>evaluate_obligation (15,086,201 samples, 0.64%)</title><rect x="33.9698%" y="53" width="0.6355%" height="15" fill="rgb(206,96,30)"/><text x="34.2198%" y="63.50"></text></g><g><title>mir_built (68,332,748 samples, 2.88%)</title><rect x="31.9893%" y="85" width="2.8786%" height="15" fill="rgb(218,138,4)"/><text x="32.2393%" y="95.50">mi..</text></g><g><title>typeck (65,022,705 samples, 2.74%)</title><rect x="32.1288%" y="69" width="2.7391%" height="15" fill="rgb(250,191,14)"/><text x="32.3788%" y="79.50">ty..</text></g><g><title>mir_built (4,843,778 samples, 0.20%)</title><rect x="34.8856%" y="69" width="0.2040%" height="15" fill="rgb(239,60,40)"/><text x="35.1356%" y="79.50"></text></g><g><title>mir_const (74,653,983 samples, 3.14%)</title><rect x="31.9495%" y="117" width="3.1448%" height="15" fill="rgb(206,27,48)"/><text x="32.1995%" y="127.50">mir..</text></g><g><title>unsafety_check_result (73,983,727 samples, 3.12%)</title><rect x="31.9777%" y="101" width="3.1166%" height="15" fill="rgb(225,35,8)"/><text x="32.2277%" y="111.50">uns..</text></g><g><title>unsafety_check_result (5,374,495 samples, 0.23%)</title><rect x="34.8679%" y="85" width="0.2264%" height="15" fill="rgb(250,213,24)"/><text x="35.1179%" y="95.50"></text></g><g><title>mir_promoted (75,056,726 samples, 3.16%)</title><rect x="31.9342%" y="133" width="3.1618%" height="15" fill="rgb(247,123,22)"/><text x="32.1842%" y="143.50">mir..</text></g><g><title>type_of (114,590,677 samples, 4.83%)</title><rect x="30.5791%" y="165" width="4.8272%" height="15" fill="rgb(231,138,38)"/><text x="30.8291%" y="175.50">type_of</text></g><g><title>mir_borrowck (114,505,297 samples, 4.82%)</title><rect x="30.5827%" y="149" width="4.8236%" height="15" fill="rgb(231,145,46)"/><text x="30.8327%" y="159.50">mir_bo..</text></g><g><title>type_op_prove_predicate (5,537,072 samples, 0.23%)</title><rect x="35.1730%" y="133" width="0.2333%" height="15" fill="rgb(251,118,11)"/><text x="35.4230%" y="143.50"></text></g><g><title>item_types_checking (120,189,651 samples, 5.06%)</title><rect x="30.3448%" y="197" width="5.0631%" height="15" fill="rgb(217,147,25)"/><text x="30.5948%" y="207.50">item_t..</text></g><g><title>check_mod_item_types (120,167,740 samples, 5.06%)</title><rect x="30.3457%" y="181" width="5.0621%" height="15" fill="rgb(247,81,37)"/><text x="30.5957%" y="191.50">check_..</text></g><g><title>generics_of (3,469,043 samples, 0.15%)</title><rect x="35.5895%" y="165" width="0.1461%" height="15" fill="rgb(209,12,38)"/><text x="35.8395%" y="175.50"></text></g><g><title>type_collecting (10,567,066 samples, 0.45%)</title><rect x="35.4082%" y="197" width="0.4451%" height="15" fill="rgb(227,1,9)"/><text x="35.6582%" y="207.50"></text></g><g><title>collect_mod_item_types (10,534,016 samples, 0.44%)</title><rect x="35.4096%" y="181" width="0.4438%" height="15" fill="rgb(248,47,43)"/><text x="35.6596%" y="191.50"></text></g><g><title>check_impl_item_well_formed (7,676,093 samples, 0.32%)</title><rect x="35.8918%" y="181" width="0.3234%" height="15" fill="rgb(221,10,30)"/><text x="36.1418%" y="191.50"></text></g><g><title>analysis (565,602,195 samples, 23.83%)</title><rect x="12.9946%" y="229" width="23.8263%" height="15" fill="rgb(210,229,1)"/><text x="13.2446%" y="239.50">analysis</text></g><g><title>type_check_crate (374,437,850 samples, 15.77%)</title><rect x="21.0475%" y="213" width="15.7734%" height="15" fill="rgb(222,148,37)"/><text x="21.2975%" y="223.50">type_check_crate</text></g><g><title>wf_checking (22,933,850 samples, 0.97%)</title><rect x="35.8548%" y="197" width="0.9661%" height="15" fill="rgb(234,67,33)"/><text x="36.1048%" y="207.50"></text></g><g><title>check_item_well_formed (14,379,480 samples, 0.61%)</title><rect x="36.2151%" y="181" width="0.6057%" height="15" fill="rgb(247,98,35)"/><text x="36.4651%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (4,445,985 samples, 0.19%)</title><rect x="46.6606%" y="197" width="0.1873%" height="15" fill="rgb(247,138,52)"/><text x="46.9106%" y="207.50"></text></g><g><title>const_caller_location (4,613,775 samples, 0.19%)</title><rect x="46.8479%" y="197" width="0.1944%" height="15" fill="rgb(213,79,30)"/><text x="47.0979%" y="207.50"></text></g><g><title>predicates_of (3,109,399 samples, 0.13%)</title><rect x="47.8882%" y="165" width="0.1310%" height="15" fill="rgb(246,177,23)"/><text x="48.1382%" y="175.50"></text></g><g><title>param_env (9,222,310 samples, 0.39%)</title><rect x="47.6311%" y="181" width="0.3885%" height="15" fill="rgb(230,62,27)"/><text x="47.8811%" y="191.50"></text></g><g><title>normalize_projection_ty (2,408,095 samples, 0.10%)</title><rect x="48.0774%" y="165" width="0.1014%" height="15" fill="rgb(216,154,8)"/><text x="48.3274%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,800,739 samples, 0.16%)</title><rect x="48.0196%" y="181" width="0.1601%" height="15" fill="rgb(244,35,45)"/><text x="48.2696%" y="191.50"></text></g><g><title>fn_abi_of_instance (27,061,702 samples, 1.14%)</title><rect x="47.0475%" y="197" width="1.1400%" height="15" fill="rgb(251,115,12)"/><text x="47.2975%" y="207.50"></text></g><g><title>layout_of (3,340,462 samples, 0.14%)</title><rect x="48.2515%" y="197" width="0.1407%" height="15" fill="rgb(240,54,50)"/><text x="48.5015%" y="207.50"></text></g><g><title>codegen_module (274,553,852 samples, 11.57%)</title><rect x="36.9553%" y="213" width="11.5657%" height="15" fill="rgb(233,84,52)"/><text x="37.2053%" y="223.50">codegen_module</text></g><g><title>codegen_crate (277,828,668 samples, 11.70%)</title><rect x="36.8211%" y="229" width="11.7037%" height="15" fill="rgb(207,117,47)"/><text x="37.0711%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (908,530,560 samples, 38.27%)</title><rect x="48.5339%" y="213" width="38.2724%" height="15" fill="rgb(249,43,39)"/><text x="48.7839%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (859,589,663 samples, 36.21%)</title><rect x="50.5955%" y="197" width="36.2107%" height="15" fill="rgb(209,38,44)"/><text x="50.8455%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (950,597,892 samples, 40.04%)</title><rect x="48.5248%" y="229" width="40.0445%" height="15" fill="rgb(236,212,23)"/><text x="48.7748%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (41,850,741 samples, 1.76%)</title><rect x="86.8062%" y="213" width="1.7630%" height="15" fill="rgb(242,79,21)"/><text x="87.0562%" y="223.50"></text></g><g><title>macro_expand_crate (39,155,004 samples, 1.65%)</title><rect x="88.6121%" y="213" width="1.6494%" height="15" fill="rgb(211,96,35)"/><text x="88.8621%" y="223.50"></text></g><g><title>expand_crate (39,146,624 samples, 1.65%)</title><rect x="88.6124%" y="197" width="1.6491%" height="15" fill="rgb(253,215,40)"/><text x="88.8624%" y="207.50"></text></g><g><title>late_resolve_crate (7,595,246 samples, 0.32%)</title><rect x="90.2895%" y="197" width="0.3200%" height="15" fill="rgb(211,81,21)"/><text x="90.5395%" y="207.50"></text></g><g><title>configure_and_expand (49,126,374 samples, 2.07%)</title><rect x="88.5692%" y="229" width="2.0695%" height="15" fill="rgb(208,190,38)"/><text x="88.8192%" y="239.50">c..</text></g><g><title>resolve_crate (8,890,399 samples, 0.37%)</title><rect x="90.2642%" y="213" width="0.3745%" height="15" fill="rgb(235,213,38)"/><text x="90.5142%" y="223.50"></text></g><g><title>free_global_ctxt (31,136,523 samples, 1.31%)</title><rect x="90.7994%" y="229" width="1.3116%" height="15" fill="rgb(237,122,38)"/><text x="91.0494%" y="239.50"></text></g><g><title>codegen_fn_attrs (3,444,133 samples, 0.15%)</title><rect x="92.9943%" y="149" width="0.1451%" height="15" fill="rgb(244,218,35)"/><text x="93.2443%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,933,765 samples, 0.21%)</title><rect x="93.8581%" y="133" width="0.2078%" height="15" fill="rgb(240,68,47)"/><text x="94.1081%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (15,818,585 samples, 0.67%)</title><rect x="94.0659%" y="133" width="0.6664%" height="15" fill="rgb(210,16,53)"/><text x="94.3159%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,055,844 samples, 0.13%)</title><rect x="94.7656%" y="117" width="0.1287%" height="15" fill="rgb(235,124,12)"/><text x="95.0156%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,957,543 samples, 0.12%)</title><rect x="94.7698%" y="101" width="0.1246%" height="15" fill="rgb(224,169,11)"/><text x="95.0198%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,828,581 samples, 0.12%)</title><rect x="94.7752%" y="85" width="0.1192%" height="15" fill="rgb(250,166,2)"/><text x="95.0252%" y="95.50"></text></g><g><title>optimized_mir (39,226,085 samples, 1.65%)</title><rect x="93.2433%" y="149" width="1.6524%" height="15" fill="rgb(242,216,29)"/><text x="93.4933%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,380,596 samples, 0.14%)</title><rect x="94.7534%" y="133" width="0.1424%" height="15" fill="rgb(230,116,27)"/><text x="95.0034%" y="143.50"></text></g><g><title>evaluate_obligation (2,621,915 samples, 0.11%)</title><rect x="95.7260%" y="117" width="0.1104%" height="15" fill="rgb(228,99,48)"/><text x="95.9760%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (20,166,380 samples, 0.85%)</title><rect x="95.0430%" y="133" width="0.8495%" height="15" fill="rgb(253,11,6)"/><text x="95.2930%" y="143.50"></text></g><g><title>specialization_graph_of (3,638,038 samples, 0.15%)</title><rect x="95.9784%" y="133" width="0.1533%" height="15" fill="rgb(247,143,39)"/><text x="96.2284%" y="143.50"></text></g><g><title>resolve_instance (30,008,834 samples, 1.26%)</title><rect x="94.8958%" y="149" width="1.2641%" height="15" fill="rgb(236,97,10)"/><text x="95.1458%" y="159.50"></text></g><g><title>normalize_projection_ty (2,553,506 samples, 0.11%)</title><rect x="96.1799%" y="133" width="0.1076%" height="15" fill="rgb(233,208,19)"/><text x="96.4299%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,048,783 samples, 0.13%)</title><rect x="96.1599%" y="149" width="0.1284%" height="15" fill="rgb(216,164,2)"/><text x="96.4099%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (95,029,646 samples, 4.00%)</title><rect x="92.4520%" y="165" width="4.0032%" height="15" fill="rgb(220,129,5)"/><text x="92.7020%" y="175.50">mono..</text></g><g><title>monomorphization_collector (95,263,539 samples, 4.01%)</title><rect x="92.4518%" y="181" width="4.0130%" height="15" fill="rgb(242,17,10)"/><text x="92.7018%" y="191.50">mono..</text></g><g><title>assert_symbols_are_distinct (6,603,876 samples, 0.28%)</title><rect x="96.4650%" y="165" width="0.2782%" height="15" fill="rgb(242,107,0)"/><text x="96.7150%" y="175.50"></text></g><g><title>symbol_name (5,910,182 samples, 0.25%)</title><rect x="96.4942%" y="149" width="0.2490%" height="15" fill="rgb(251,28,31)"/><text x="96.7442%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (104,805,376 samples, 4.41%)</title><rect x="92.4494%" y="197" width="4.4150%" height="15" fill="rgb(233,223,10)"/><text x="92.6994%" y="207.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (9,484,796 samples, 0.40%)</title><rect x="96.4648%" y="181" width="0.3996%" height="15" fill="rgb(215,21,27)"/><text x="96.7148%" y="191.50"></text></g><g><title>cgu_partitioning (2,876,140 samples, 0.12%)</title><rect x="96.7432%" y="165" width="0.1212%" height="15" fill="rgb(232,23,21)"/><text x="96.9932%" y="175.50"></text></g><g><title>exported_symbols (105,592,583 samples, 4.45%)</title><rect x="92.4378%" y="213" width="4.4481%" height="15" fill="rgb(244,5,23)"/><text x="92.6878%" y="223.50">expor..</text></g><g><title>layout_of (2,424,707 samples, 0.10%)</title><rect x="97.3408%" y="197" width="0.1021%" height="15" fill="rgb(226,81,46)"/><text x="97.5908%" y="207.50"></text></g><g><title>needs_drop_raw (2,433,582 samples, 0.10%)</title><rect x="97.9345%" y="181" width="0.1025%" height="15" fill="rgb(247,70,30)"/><text x="98.1845%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,529,286 samples, 0.61%)</title><rect x="97.4429%" y="197" width="0.6121%" height="15" fill="rgb(212,68,19)"/><text x="97.6929%" y="207.50"></text></g><g><title>optimized_mir (27,678,846 samples, 1.17%)</title><rect x="96.9026%" y="213" width="1.1660%" height="15" fill="rgb(240,187,13)"/><text x="97.1526%" y="223.50"></text></g><g><title>generate_crate_metadata (141,824,658 samples, 5.97%)</title><rect x="92.1110%" y="229" width="5.9744%" height="15" fill="rgb(223,113,26)"/><text x="92.3610%" y="239.50">generate..</text></g><g><title>hir_lowering (16,722,728 samples, 0.70%)</title><rect x="98.0855%" y="229" width="0.7045%" height="15" fill="rgb(206,192,2)"/><text x="98.3355%" y="239.50"></text></g><g><title>finish_ongoing_codegen (8,149,972 samples, 0.34%)</title><rect x="98.7908%" y="213" width="0.3433%" height="15" fill="rgb(241,108,4)"/><text x="99.0408%" y="223.50"></text></g><g><title>link_crate (6,155,221 samples, 0.26%)</title><rect x="99.1341%" y="213" width="0.2593%" height="15" fill="rgb(247,173,49)"/><text x="99.3841%" y="223.50"></text></g><g><title>link_binary (5,983,240 samples, 0.25%)</title><rect x="99.1414%" y="197" width="0.2520%" height="15" fill="rgb(224,114,35)"/><text x="99.3914%" y="207.50"></text></g><g><title>link_rlib (4,909,299 samples, 0.21%)</title><rect x="99.1866%" y="181" width="0.2068%" height="15" fill="rgb(245,159,27)"/><text x="99.4366%" y="191.50"></text></g><g><title>link (14,338,094 samples, 0.60%)</title><rect x="98.7899%" y="229" width="0.6040%" height="15" fill="rgb(245,172,44)"/><text x="99.0399%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (12,863,110 samples, 0.54%)</title><rect x="99.4204%" y="229" width="0.5419%" height="15" fill="rgb(236,23,11)"/><text x="99.6704%" y="239.50"></text></g><g><title>all (2,373,855,772 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (2,373,855,772 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>