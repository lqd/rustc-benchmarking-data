<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (213,046,274 samples, 11.54%)</title><rect x="0.1027%" y="197" width="11.5368%" height="15" fill="rgb(227,0,7)"/><text x="0.3527%" y="207.50">LLVM_passes</text></g><g><title>mir_const (11,099,951 samples, 0.60%)</title><rect x="14.6217%" y="133" width="0.6011%" height="15" fill="rgb(217,0,24)"/><text x="14.8717%" y="143.50"></text></g><g><title>unsafety_check_result (9,546,998 samples, 0.52%)</title><rect x="14.7058%" y="117" width="0.5170%" height="15" fill="rgb(221,193,54)"/><text x="14.9558%" y="127.50"></text></g><g><title>mir_built (8,469,885 samples, 0.46%)</title><rect x="14.7641%" y="101" width="0.4587%" height="15" fill="rgb(248,212,6)"/><text x="15.0141%" y="111.50"></text></g><g><title>thir_body (19,678,568 samples, 1.07%)</title><rect x="16.8440%" y="69" width="1.0656%" height="15" fill="rgb(208,68,35)"/><text x="17.0940%" y="79.50"></text></g><g><title>mir_const_qualif (49,621,700 samples, 2.69%)</title><rect x="15.2228%" y="133" width="2.6871%" height="15" fill="rgb(232,128,0)"/><text x="15.4728%" y="143.50">mi..</text></g><g><title>mir_const (45,048,414 samples, 2.44%)</title><rect x="15.4704%" y="117" width="2.4394%" height="15" fill="rgb(207,160,47)"/><text x="15.7204%" y="127.50">mi..</text></g><g><title>unsafety_check_result (43,322,597 samples, 2.35%)</title><rect x="15.5639%" y="101" width="2.3460%" height="15" fill="rgb(228,23,34)"/><text x="15.8139%" y="111.50">u..</text></g><g><title>mir_built (41,680,791 samples, 2.26%)</title><rect x="15.6528%" y="85" width="2.2571%" height="15" fill="rgb(218,30,26)"/><text x="15.9028%" y="95.50">m..</text></g><g><title>mir_promoted (72,085,969 samples, 3.90%)</title><rect x="14.0063%" y="149" width="3.9036%" height="15" fill="rgb(220,122,19)"/><text x="14.2563%" y="159.50">mir_..</text></g><g><title>type_op_prove_predicate (2,324,614 samples, 0.13%)</title><rect x="17.9779%" y="149" width="0.1259%" height="15" fill="rgb(250,228,42)"/><text x="18.2279%" y="159.50"></text></g><g><title>MIR_borrow_checking (116,080,714 samples, 6.29%)</title><rect x="11.8182%" y="181" width="6.2860%" height="15" fill="rgb(240,193,28)"/><text x="12.0682%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (115,949,514 samples, 6.28%)</title><rect x="11.8253%" y="165" width="6.2789%" height="15" fill="rgb(216,20,37)"/><text x="12.0753%" y="175.50">mir_borr..</text></g><g><title>check_mod_attrs (2,700,818 samples, 0.15%)</title><rect x="18.1871%" y="165" width="0.1463%" height="15" fill="rgb(206,188,39)"/><text x="18.4371%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (2,734,257 samples, 0.15%)</title><rect x="18.3787%" y="165" width="0.1481%" height="15" fill="rgb(217,207,13)"/><text x="18.6287%" y="175.50"></text></g><g><title>misc_checking_1 (6,362,415 samples, 0.34%)</title><rect x="18.1857%" y="181" width="0.3445%" height="15" fill="rgb(231,73,38)"/><text x="18.4357%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,892,569 samples, 0.16%)</title><rect x="18.5304%" y="165" width="0.1566%" height="15" fill="rgb(225,20,46)"/><text x="18.7804%" y="175.50"></text></g><g><title>check_mod_liveness (2,168,562 samples, 0.12%)</title><rect x="18.5696%" y="149" width="0.1174%" height="15" fill="rgb(210,31,41)"/><text x="18.8196%" y="159.50"></text></g><g><title>misc_checking_2 (4,223,153 samples, 0.23%)</title><rect x="18.5302%" y="181" width="0.2287%" height="15" fill="rgb(221,200,47)"/><text x="18.7802%" y="191.50"></text></g><g><title>death_checking (2,457,865 samples, 0.13%)</title><rect x="18.7844%" y="165" width="0.1331%" height="15" fill="rgb(226,26,5)"/><text x="19.0344%" y="175.50"></text></g><g><title>eval_to_const_value_raw (65,338,631 samples, 3.54%)</title><rect x="20.0172%" y="85" width="3.5382%" height="15" fill="rgb(249,33,26)"/><text x="20.2672%" y="95.50">eva..</text></g><g><title>eval_to_const_value_raw (65,334,690 samples, 3.54%)</title><rect x="20.0174%" y="69" width="3.5380%" height="15" fill="rgb(235,183,28)"/><text x="20.2674%" y="79.50">eva..</text></g><g><title>eval_to_allocation_raw (65,322,520 samples, 3.54%)</title><rect x="20.0181%" y="53" width="3.5373%" height="15" fill="rgb(221,5,38)"/><text x="20.2681%" y="63.50">eva..</text></g><g><title>promoted_mir (15,231,514 samples, 0.82%)</title><rect x="22.7306%" y="37" width="0.8248%" height="15" fill="rgb(247,18,42)"/><text x="22.9806%" y="47.50"></text></g><g><title>eval_to_allocation_raw (81,154,572 samples, 4.39%)</title><rect x="19.1612%" y="133" width="4.3947%" height="15" fill="rgb(241,131,45)"/><text x="19.4112%" y="143.50">eval_..</text></g><g><title>eval_to_allocation_raw (81,122,131 samples, 4.39%)</title><rect x="19.1630%" y="117" width="4.3929%" height="15" fill="rgb(249,31,29)"/><text x="19.4130%" y="127.50">eval_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (65,380,481 samples, 3.54%)</title><rect x="20.0154%" y="101" width="3.5405%" height="15" fill="rgb(225,111,53)"/><text x="20.2654%" y="111.50">try_..</text></g><g><title>crate_lints (87,168,402 samples, 4.72%)</title><rect x="18.9177%" y="149" width="4.7203%" height="15" fill="rgb(238,160,17)"/><text x="19.1677%" y="159.50">crate_..</text></g><g><title>lint_checking (93,614,416 samples, 5.07%)</title><rect x="18.9175%" y="165" width="5.0694%" height="15" fill="rgb(214,148,48)"/><text x="19.1675%" y="175.50">lint_c..</text></g><g><title>module_lints (6,442,684 samples, 0.35%)</title><rect x="23.6380%" y="149" width="0.3489%" height="15" fill="rgb(232,36,49)"/><text x="23.8880%" y="159.50"></text></g><g><title>lint_mod (6,435,974 samples, 0.35%)</title><rect x="23.6384%" y="133" width="0.3485%" height="15" fill="rgb(209,103,24)"/><text x="23.8884%" y="143.50"></text></g><g><title>privacy_checking_modules (8,095,292 samples, 0.44%)</title><rect x="24.0321%" y="165" width="0.4384%" height="15" fill="rgb(229,88,8)"/><text x="24.2821%" y="175.50"></text></g><g><title>check_mod_privacy (8,090,972 samples, 0.44%)</title><rect x="24.0323%" y="149" width="0.4381%" height="15" fill="rgb(213,181,19)"/><text x="24.2823%" y="159.50"></text></g><g><title>misc_checking_3 (105,486,767 samples, 5.71%)</title><rect x="18.7589%" y="181" width="5.7123%" height="15" fill="rgb(254,191,54)"/><text x="19.0089%" y="191.50">misc_ch..</text></g><g><title>impl_parent (2,122,891 samples, 0.11%)</title><rect x="24.6827%" y="117" width="0.1150%" height="15" fill="rgb(241,83,37)"/><text x="24.9327%" y="127.50"></text></g><g><title>impl_trait_ref (5,190,681 samples, 0.28%)</title><rect x="24.7977%" y="117" width="0.2811%" height="15" fill="rgb(233,36,39)"/><text x="25.0477%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,352,430 samples, 0.24%)</title><rect x="24.8430%" y="101" width="0.2357%" height="15" fill="rgb(226,3,54)"/><text x="25.0930%" y="111.50"></text></g><g><title>coherent_trait (11,828,790 samples, 0.64%)</title><rect x="24.4761%" y="149" width="0.6405%" height="15" fill="rgb(245,192,40)"/><text x="24.7261%" y="159.50"></text></g><g><title>specialization_graph_of (11,335,604 samples, 0.61%)</title><rect x="24.5028%" y="133" width="0.6138%" height="15" fill="rgb(238,167,29)"/><text x="24.7528%" y="143.50"></text></g><g><title>coherence_checking (11,920,351 samples, 0.65%)</title><rect x="24.4750%" y="165" width="0.6455%" height="15" fill="rgb(232,182,51)"/><text x="24.7250%" y="175.50"></text></g><g><title>evaluate_obligation (3,952,060 samples, 0.21%)</title><rect x="26.0403%" y="117" width="0.2140%" height="15" fill="rgb(231,60,39)"/><text x="26.2903%" y="127.50"></text></g><g><title>evaluate_obligation (4,660,457 samples, 0.25%)</title><rect x="27.1411%" y="101" width="0.2524%" height="15" fill="rgb(208,69,12)"/><text x="27.3911%" y="111.50"></text></g><g><title>typeck (22,588,779 samples, 1.22%)</title><rect x="26.3360%" y="117" width="1.2232%" height="15" fill="rgb(235,93,37)"/><text x="26.5860%" y="127.50"></text></g><g><title>item_bodies_checking (45,045,015 samples, 2.44%)</title><rect x="25.1220%" y="165" width="2.4393%" height="15" fill="rgb(213,116,39)"/><text x="25.3720%" y="175.50">it..</text></g><g><title>typeck_item_bodies (45,040,815 samples, 2.44%)</title><rect x="25.1222%" y="149" width="2.4390%" height="15" fill="rgb(222,207,29)"/><text x="25.3722%" y="159.50">ty..</text></g><g><title>typeck (44,977,845 samples, 2.44%)</title><rect x="25.1256%" y="133" width="2.4356%" height="15" fill="rgb(206,96,30)"/><text x="25.3756%" y="143.50">ty..</text></g><g><title>specializes (1,871,662 samples, 0.10%)</title><rect x="32.8598%" y="101" width="0.1014%" height="15" fill="rgb(218,138,4)"/><text x="33.1098%" y="111.50"></text></g><g><title>evaluate_obligation (6,079,712 samples, 0.33%)</title><rect x="32.6363%" y="117" width="0.3292%" height="15" fill="rgb(250,191,14)"/><text x="32.8863%" y="127.50"></text></g><g><title>item_types_checking (100,136,823 samples, 5.42%)</title><rect x="27.5612%" y="165" width="5.4226%" height="15" fill="rgb(239,60,40)"/><text x="27.8112%" y="175.50">item_ty..</text></g><g><title>check_mod_item_types (100,130,643 samples, 5.42%)</title><rect x="27.5616%" y="149" width="5.4222%" height="15" fill="rgb(206,27,48)"/><text x="27.8116%" y="159.50">check_m..</text></g><g><title>typeck (99,227,264 samples, 5.37%)</title><rect x="27.6105%" y="133" width="5.3733%" height="15" fill="rgb(225,35,8)"/><text x="27.8605%" y="143.50">typeck</text></g><g><title>type_collecting (2,835,078 samples, 0.15%)</title><rect x="32.9839%" y="165" width="0.1535%" height="15" fill="rgb(250,213,24)"/><text x="33.2339%" y="175.50"></text></g><g><title>collect_mod_item_types (2,825,198 samples, 0.15%)</title><rect x="32.9844%" y="149" width="0.1530%" height="15" fill="rgb(247,123,22)"/><text x="33.2344%" y="159.50"></text></g><g><title>region_scope_tree (2,731,867 samples, 0.15%)</title><rect x="33.3601%" y="133" width="0.1479%" height="15" fill="rgb(231,138,38)"/><text x="33.6101%" y="143.50"></text></g><g><title>analysis (403,895,264 samples, 21.87%)</title><rect x="11.6395%" y="197" width="21.8716%" height="15" fill="rgb(231,145,46)"/><text x="11.8895%" y="207.50">analysis</text></g><g><title>type_check_crate (166,936,198 samples, 9.04%)</title><rect x="24.4712%" y="181" width="9.0399%" height="15" fill="rgb(251,118,11)"/><text x="24.7212%" y="191.50">type_check_cr..</text></g><g><title>wf_checking (6,894,260 samples, 0.37%)</title><rect x="33.1377%" y="165" width="0.3733%" height="15" fill="rgb(217,147,25)"/><text x="33.3877%" y="175.50"></text></g><g><title>check_item_well_formed (4,863,077 samples, 0.26%)</title><rect x="33.2477%" y="149" width="0.2633%" height="15" fill="rgb(247,81,37)"/><text x="33.4977%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (2,647,134 samples, 0.14%)</title><rect x="41.2239%" y="165" width="0.1433%" height="15" fill="rgb(209,12,38)"/><text x="41.4739%" y="175.50"></text></g><g><title>const_caller_location (3,256,654 samples, 0.18%)</title><rect x="41.3672%" y="165" width="0.1764%" height="15" fill="rgb(227,1,9)"/><text x="41.6172%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,903,326 samples, 0.10%)</title><rect x="41.9859%" y="149" width="0.1031%" height="15" fill="rgb(248,47,43)"/><text x="42.2359%" y="159.50"></text></g><g><title>layout_of (2,375,759 samples, 0.13%)</title><rect x="42.0996%" y="149" width="0.1287%" height="15" fill="rgb(221,10,30)"/><text x="42.3496%" y="159.50"></text></g><g><title>predicates_of (2,725,165 samples, 0.15%)</title><rect x="42.5875%" y="133" width="0.1476%" height="15" fill="rgb(210,229,1)"/><text x="42.8375%" y="143.50"></text></g><g><title>predicates_defined_on (2,096,170 samples, 0.11%)</title><rect x="42.6216%" y="117" width="0.1135%" height="15" fill="rgb(222,148,37)"/><text x="42.8716%" y="127.50"></text></g><g><title>param_env (9,364,275 samples, 0.51%)</title><rect x="42.2283%" y="149" width="0.5071%" height="15" fill="rgb(234,67,33)"/><text x="42.4783%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,712,426 samples, 0.20%)</title><rect x="42.7354%" y="149" width="0.2010%" height="15" fill="rgb(247,98,35)"/><text x="42.9854%" y="159.50"></text></g><g><title>normalize_projection_ty (2,755,177 samples, 0.15%)</title><rect x="42.7872%" y="133" width="0.1492%" height="15" fill="rgb(247,138,52)"/><text x="43.0372%" y="143.50"></text></g><g><title>fn_abi_of_instance (25,712,084 samples, 1.39%)</title><rect x="41.5473%" y="165" width="1.3924%" height="15" fill="rgb(213,79,30)"/><text x="41.7973%" y="175.50"></text></g><g><title>layout_of (3,030,391 samples, 0.16%)</title><rect x="42.9999%" y="165" width="0.1641%" height="15" fill="rgb(246,177,23)"/><text x="43.2499%" y="175.50"></text></g><g><title>codegen_module (177,537,555 samples, 9.61%)</title><rect x="33.6614%" y="181" width="9.6139%" height="15" fill="rgb(230,62,27)"/><text x="33.9114%" y="191.50">codegen_module</text></g><g><title>codegen_crate (180,404,515 samples, 9.77%)</title><rect x="33.5116%" y="197" width="9.7692%" height="15" fill="rgb(216,154,8)"/><text x="33.7616%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (726,832,823 samples, 39.36%)</title><rect x="43.2943%" y="181" width="39.3592%" height="15" fill="rgb(244,35,45)"/><text x="43.5443%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (699,061,792 samples, 37.86%)</title><rect x="44.7982%" y="165" width="37.8553%" height="15" fill="rgb(251,115,12)"/><text x="45.0482%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (784,966,568 samples, 42.51%)</title><rect x="43.2808%" y="197" width="42.5072%" height="15" fill="rgb(240,54,50)"/><text x="43.5308%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (57,884,334 samples, 3.13%)</title><rect x="82.6535%" y="181" width="3.1345%" height="15" fill="rgb(233,84,52)"/><text x="82.9035%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (2,942,090 samples, 0.16%)</title><rect x="90.6376%" y="149" width="0.1593%" height="15" fill="rgb(207,117,47)"/><text x="90.8876%" y="159.50"></text></g><g><title>macro_expand_crate (90,938,370 samples, 4.92%)</title><rect x="85.9014%" y="181" width="4.9245%" height="15" fill="rgb(249,43,39)"/><text x="86.1514%" y="191.50">macro_..</text></g><g><title>expand_crate (90,911,750 samples, 4.92%)</title><rect x="85.9028%" y="165" width="4.9230%" height="15" fill="rgb(209,38,44)"/><text x="86.1528%" y="175.50">expand..</text></g><g><title>late_resolve_crate (8,753,809 samples, 0.47%)</title><rect x="90.8417%" y="165" width="0.4740%" height="15" fill="rgb(236,212,23)"/><text x="91.0917%" y="175.50"></text></g><g><title>configure_and_expand (104,493,457 samples, 5.66%)</title><rect x="85.7881%" y="197" width="5.6585%" height="15" fill="rgb(242,79,21)"/><text x="86.0381%" y="207.50">configu..</text></g><g><title>resolve_crate (11,386,275 samples, 0.62%)</title><rect x="90.8300%" y="181" width="0.6166%" height="15" fill="rgb(211,96,35)"/><text x="91.0800%" y="191.50"></text></g><g><title>early_lint_checks (6,048,371 samples, 0.33%)</title><rect x="91.5393%" y="197" width="0.3275%" height="15" fill="rgb(253,215,40)"/><text x="91.7893%" y="207.50"></text></g><g><title>free_global_ctxt (13,103,003 samples, 0.71%)</title><rect x="91.8669%" y="197" width="0.7095%" height="15" fill="rgb(211,81,21)"/><text x="92.1169%" y="207.50"></text></g><g><title>codegen_fn_attrs (3,007,460 samples, 0.16%)</title><rect x="93.5159%" y="117" width="0.1629%" height="15" fill="rgb(208,190,38)"/><text x="93.7659%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,255,615 samples, 0.28%)</title><rect x="94.0286%" y="101" width="0.2846%" height="15" fill="rgb(235,213,38)"/><text x="94.2786%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,867,363 samples, 0.21%)</title><rect x="94.3132%" y="101" width="0.2094%" height="15" fill="rgb(237,122,38)"/><text x="94.5632%" y="111.50"></text></g><g><title>optimized_mir (13,849,473 samples, 0.75%)</title><rect x="93.7850%" y="117" width="0.7500%" height="15" fill="rgb(244,218,35)"/><text x="94.0350%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (8,553,590 samples, 0.46%)</title><rect x="94.6946%" y="101" width="0.4632%" height="15" fill="rgb(240,68,47)"/><text x="94.9446%" y="111.50"></text></g><g><title>specialization_graph_of (2,392,137 samples, 0.13%)</title><rect x="95.2678%" y="101" width="0.1295%" height="15" fill="rgb(210,16,53)"/><text x="95.5178%" y="111.50"></text></g><g><title>resolve_instance (16,682,011 samples, 0.90%)</title><rect x="94.5350%" y="117" width="0.9034%" height="15" fill="rgb(235,124,12)"/><text x="94.7850%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,122,023 samples, 0.11%)</title><rect x="95.5567%" y="101" width="0.1149%" height="15" fill="rgb(224,169,11)"/><text x="95.8067%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,074,103 samples, 0.11%)</title><rect x="95.5593%" y="85" width="0.1123%" height="15" fill="rgb(250,166,2)"/><text x="95.8093%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,992,982 samples, 0.11%)</title><rect x="95.5637%" y="69" width="0.1079%" height="15" fill="rgb(242,216,29)"/><text x="95.8137%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,750,592 samples, 0.15%)</title><rect x="95.5271%" y="117" width="0.1489%" height="15" fill="rgb(230,116,27)"/><text x="95.7771%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (48,305,308 samples, 2.62%)</title><rect x="93.1357%" y="133" width="2.6158%" height="15" fill="rgb(228,99,48)"/><text x="93.3857%" y="143.50">mo..</text></g><g><title>monomorphization_collector (48,376,489 samples, 2.62%)</title><rect x="93.1355%" y="149" width="2.6197%" height="15" fill="rgb(253,11,6)"/><text x="93.3855%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (5,843,939 samples, 0.32%)</title><rect x="95.7554%" y="133" width="0.3165%" height="15" fill="rgb(247,143,39)"/><text x="96.0054%" y="143.50"></text></g><g><title>symbol_name (5,282,943 samples, 0.29%)</title><rect x="95.7858%" y="117" width="0.2861%" height="15" fill="rgb(236,97,10)"/><text x="96.0358%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (56,528,982 samples, 3.06%)</title><rect x="93.1315%" y="165" width="3.0611%" height="15" fill="rgb(233,208,19)"/><text x="93.3815%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (8,080,211 samples, 0.44%)</title><rect x="95.7551%" y="149" width="0.4376%" height="15" fill="rgb(216,164,2)"/><text x="96.0051%" y="159.50"></text></g><g><title>cgu_partitioning (2,231,122 samples, 0.12%)</title><rect x="96.0719%" y="133" width="0.1208%" height="15" fill="rgb(220,129,5)"/><text x="96.3219%" y="143.50"></text></g><g><title>exported_symbols (56,861,095 samples, 3.08%)</title><rect x="93.1197%" y="181" width="3.0791%" height="15" fill="rgb(242,17,10)"/><text x="93.3697%" y="191.50">exp..</text></g><g><title>optimized_mir (3,686,708 samples, 0.20%)</title><rect x="96.2019%" y="181" width="0.1996%" height="15" fill="rgb(242,107,0)"/><text x="96.4519%" y="191.50"></text></g><g><title>generate_crate_metadata (70,692,476 samples, 3.83%)</title><rect x="92.5764%" y="197" width="3.8281%" height="15" fill="rgb(251,28,31)"/><text x="92.8264%" y="207.50">gene..</text></g><g><title>hir_lowering (23,518,328 samples, 1.27%)</title><rect x="96.4045%" y="197" width="1.2736%" height="15" fill="rgb(233,223,10)"/><text x="96.6545%" y="207.50"></text></g><g><title>finish_ongoing_codegen (32,147,155 samples, 1.74%)</title><rect x="97.6790%" y="181" width="1.7408%" height="15" fill="rgb(215,21,27)"/><text x="97.9290%" y="191.50"></text></g><g><title>link_crate (6,302,963 samples, 0.34%)</title><rect x="99.4198%" y="181" width="0.3413%" height="15" fill="rgb(232,23,21)"/><text x="99.6698%" y="191.50"></text></g><g><title>link_binary (6,197,892 samples, 0.34%)</title><rect x="99.4255%" y="165" width="0.3356%" height="15" fill="rgb(244,5,23)"/><text x="99.6755%" y="175.50"></text></g><g><title>link_rlib (5,200,332 samples, 0.28%)</title><rect x="99.4795%" y="149" width="0.2816%" height="15" fill="rgb(226,81,46)"/><text x="99.7295%" y="159.50"></text></g><g><title>link (38,477,259 samples, 2.08%)</title><rect x="97.6781%" y="197" width="2.0836%" height="15" fill="rgb(247,70,30)"/><text x="97.9281%" y="207.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,006,050 samples, 0.11%)</title><rect x="99.8134%" y="197" width="0.1086%" height="15" fill="rgb(212,68,19)"/><text x="100.0634%" y="207.50"></text></g><g><title>all (1,846,666,256 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,846,666,256 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>