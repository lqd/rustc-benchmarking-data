<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (355,795,629 samples, 16.50%)</title><rect x="0.0471%" y="165" width="16.5049%" height="15" fill="rgb(227,0,7)"/><text x="0.2971%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (2,427,899 samples, 0.11%)</title><rect x="20.5499%" y="37" width="0.1126%" height="15" fill="rgb(217,0,24)"/><text x="20.7999%" y="47.50"></text></g><g><title>needs_drop_raw (3,763,559 samples, 0.17%)</title><rect x="20.4897%" y="53" width="0.1746%" height="15" fill="rgb(221,193,54)"/><text x="20.7397%" y="63.50"></text></g><g><title>specialization_graph_of (2,217,003 samples, 0.10%)</title><rect x="20.7871%" y="37" width="0.1028%" height="15" fill="rgb(248,212,6)"/><text x="21.0371%" y="47.50"></text></g><g><title>resolve_instance (5,186,609 samples, 0.24%)</title><rect x="20.6643%" y="53" width="0.2406%" height="15" fill="rgb(208,68,35)"/><text x="20.9143%" y="63.50"></text></g><g><title>thir_body (5,181,507 samples, 0.24%)</title><rect x="20.9109%" y="53" width="0.2404%" height="15" fill="rgb(232,128,0)"/><text x="21.1609%" y="63.50"></text></g><g><title>mir_const (36,354,658 samples, 1.69%)</title><rect x="19.4690%" y="101" width="1.6864%" height="15" fill="rgb(207,160,47)"/><text x="19.7190%" y="111.50"></text></g><g><title>unsafety_check_result (31,530,597 samples, 1.46%)</title><rect x="19.6928%" y="85" width="1.4627%" height="15" fill="rgb(228,23,34)"/><text x="19.9428%" y="95.50"></text></g><g><title>mir_built (27,869,561 samples, 1.29%)</title><rect x="19.8626%" y="69" width="1.2928%" height="15" fill="rgb(218,30,26)"/><text x="20.1126%" y="79.50"></text></g><g><title>mir_promoted (40,851,895 samples, 1.90%)</title><rect x="19.2948%" y="117" width="1.8951%" height="15" fill="rgb(220,122,19)"/><text x="19.5448%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (8,192,966 samples, 0.38%)</title><rect x="21.3567%" y="117" width="0.3801%" height="15" fill="rgb(250,228,42)"/><text x="21.6067%" y="127.50"></text></g><g><title>MIR_borrow_checking (110,847,942 samples, 5.14%)</title><rect x="16.5954%" y="149" width="5.1421%" height="15" fill="rgb(240,193,28)"/><text x="16.8454%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (110,335,035 samples, 5.12%)</title><rect x="16.6192%" y="133" width="5.1183%" height="15" fill="rgb(216,20,37)"/><text x="16.8692%" y="143.50">mir_bo..</text></g><g><title>misc_checking_1 (3,458,566 samples, 0.16%)</title><rect x="21.7844%" y="149" width="0.1604%" height="15" fill="rgb(206,188,39)"/><text x="22.0344%" y="159.50"></text></g><g><title>misc_checking_2 (4,306,583 samples, 0.20%)</title><rect x="21.9448%" y="149" width="0.1998%" height="15" fill="rgb(217,207,13)"/><text x="22.1948%" y="159.50"></text></g><g><title>match_checking (2,527,545 samples, 0.12%)</title><rect x="22.0274%" y="133" width="0.1172%" height="15" fill="rgb(231,73,38)"/><text x="22.2774%" y="143.50"></text></g><g><title>check_match (2,411,553 samples, 0.11%)</title><rect x="22.0327%" y="117" width="0.1119%" height="15" fill="rgb(225,20,46)"/><text x="22.2827%" y="127.50"></text></g><g><title>crate_lints (4,557,596 samples, 0.21%)</title><rect x="22.2342%" y="117" width="0.2114%" height="15" fill="rgb(210,31,41)"/><text x="22.4842%" y="127.50"></text></g><g><title>lint_checking (6,760,498 samples, 0.31%)</title><rect x="22.2341%" y="133" width="0.3136%" height="15" fill="rgb(221,200,47)"/><text x="22.4841%" y="143.50"></text></g><g><title>module_lints (2,201,102 samples, 0.10%)</title><rect x="22.4456%" y="117" width="0.1021%" height="15" fill="rgb(226,26,5)"/><text x="22.6956%" y="127.50"></text></g><g><title>lint_mod (2,191,692 samples, 0.10%)</title><rect x="22.4461%" y="101" width="0.1017%" height="15" fill="rgb(249,33,26)"/><text x="22.6961%" y="111.50"></text></g><g><title>privacy_checking_modules (3,201,863 samples, 0.15%)</title><rect x="22.5963%" y="133" width="0.1485%" height="15" fill="rgb(235,183,28)"/><text x="22.8463%" y="143.50"></text></g><g><title>check_mod_privacy (3,196,433 samples, 0.15%)</title><rect x="22.5965%" y="117" width="0.1483%" height="15" fill="rgb(221,5,38)"/><text x="22.8465%" y="127.50"></text></g><g><title>misc_checking_3 (12,974,251 samples, 0.60%)</title><rect x="22.1446%" y="149" width="0.6019%" height="15" fill="rgb(247,18,42)"/><text x="22.3946%" y="159.50"></text></g><g><title>impl_parent (3,225,457 samples, 0.15%)</title><rect x="23.0605%" y="85" width="0.1496%" height="15" fill="rgb(241,131,45)"/><text x="23.3105%" y="95.50"></text></g><g><title>impl_trait_ref (7,050,074 samples, 0.33%)</title><rect x="23.2102%" y="85" width="0.3270%" height="15" fill="rgb(249,31,29)"/><text x="23.4602%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,712,551 samples, 0.26%)</title><rect x="23.2722%" y="69" width="0.2650%" height="15" fill="rgb(225,111,53)"/><text x="23.5222%" y="79.50"></text></g><g><title>coherent_trait (17,974,762 samples, 0.83%)</title><rect x="22.7574%" y="117" width="0.8338%" height="15" fill="rgb(238,160,17)"/><text x="23.0074%" y="127.50"></text></g><g><title>specialization_graph_of (17,310,106 samples, 0.80%)</title><rect x="22.7882%" y="101" width="0.8030%" height="15" fill="rgb(214,148,48)"/><text x="23.0382%" y="111.50"></text></g><g><title>coherence_checking (18,112,353 samples, 0.84%)</title><rect x="22.7561%" y="133" width="0.8402%" height="15" fill="rgb(232,36,49)"/><text x="23.0061%" y="143.50"></text></g><g><title>dropck_outlives (2,155,899 samples, 0.10%)</title><rect x="27.6312%" y="85" width="0.1000%" height="15" fill="rgb(209,103,24)"/><text x="27.8812%" y="95.50"></text></g><g><title>evaluate_obligation (10,289,082 samples, 0.48%)</title><rect x="27.7312%" y="85" width="0.4773%" height="15" fill="rgb(229,88,8)"/><text x="27.9812%" y="95.50"></text></g><g><title>evaluate_obligation (4,435,041 samples, 0.21%)</title><rect x="29.3705%" y="69" width="0.2057%" height="15" fill="rgb(213,181,19)"/><text x="29.6205%" y="79.50"></text></g><g><title>typeck (26,494,997 samples, 1.23%)</title><rect x="28.4494%" y="85" width="1.2291%" height="15" fill="rgb(254,191,54)"/><text x="28.6994%" y="95.50"></text></g><g><title>item_bodies_checking (131,187,097 samples, 6.09%)</title><rect x="23.6000%" y="133" width="6.0856%" height="15" fill="rgb(241,83,37)"/><text x="23.8500%" y="143.50">item_bod..</text></g><g><title>typeck_item_bodies (131,182,947 samples, 6.09%)</title><rect x="23.6002%" y="117" width="6.0854%" height="15" fill="rgb(233,36,39)"/><text x="23.8502%" y="127.50">typeck_i..</text></g><g><title>typeck (130,857,443 samples, 6.07%)</title><rect x="23.6153%" y="101" width="6.0703%" height="15" fill="rgb(226,3,54)"/><text x="23.8653%" y="111.50">typeck</text></g><g><title>item_types_checking (5,323,794 samples, 0.25%)</title><rect x="29.6856%" y="133" width="0.2470%" height="15" fill="rgb(245,192,40)"/><text x="29.9356%" y="143.50"></text></g><g><title>check_mod_item_types (5,315,634 samples, 0.25%)</title><rect x="29.6859%" y="117" width="0.2466%" height="15" fill="rgb(238,167,29)"/><text x="29.9359%" y="127.50"></text></g><g><title>typeck (3,037,260 samples, 0.14%)</title><rect x="29.7916%" y="101" width="0.1409%" height="15" fill="rgb(232,182,51)"/><text x="30.0416%" y="111.50"></text></g><g><title>type_collecting (5,434,935 samples, 0.25%)</title><rect x="29.9328%" y="133" width="0.2521%" height="15" fill="rgb(231,60,39)"/><text x="30.1828%" y="143.50"></text></g><g><title>collect_mod_item_types (5,415,325 samples, 0.25%)</title><rect x="29.9337%" y="117" width="0.2512%" height="15" fill="rgb(208,69,12)"/><text x="30.1837%" y="127.50"></text></g><g><title>check_impl_item_well_formed (10,192,674 samples, 0.47%)</title><rect x="30.2140%" y="117" width="0.4728%" height="15" fill="rgb(235,93,37)"/><text x="30.4640%" y="127.50"></text></g><g><title>check_item_well_formed (4,408,059 samples, 0.20%)</title><rect x="30.6868%" y="117" width="0.2045%" height="15" fill="rgb(213,116,39)"/><text x="30.9368%" y="127.50"></text></g><g><title>analysis (309,432,871 samples, 14.35%)</title><rect x="16.5520%" y="165" width="14.3542%" height="15" fill="rgb(222,207,29)"/><text x="16.8020%" y="175.50">analysis</text></g><g><title>type_check_crate (175,898,540 samples, 8.16%)</title><rect x="22.7465%" y="149" width="8.1597%" height="15" fill="rgb(206,96,30)"/><text x="22.9965%" y="159.50">type_check_..</text></g><g><title>wf_checking (15,526,077 samples, 0.72%)</title><rect x="30.1859%" y="133" width="0.7202%" height="15" fill="rgb(218,138,4)"/><text x="30.4359%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (6,651,268 samples, 0.31%)</title><rect x="41.7247%" y="133" width="0.3085%" height="15" fill="rgb(250,191,14)"/><text x="41.9747%" y="143.50"></text></g><g><title>const_caller_location (3,907,349 samples, 0.18%)</title><rect x="42.0332%" y="133" width="0.1813%" height="15" fill="rgb(239,60,40)"/><text x="42.2832%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,386,865 samples, 0.11%)</title><rect x="42.7728%" y="117" width="0.1107%" height="15" fill="rgb(206,27,48)"/><text x="43.0228%" y="127.50"></text></g><g><title>layout_of (4,024,199 samples, 0.19%)</title><rect x="42.9048%" y="117" width="0.1867%" height="15" fill="rgb(225,35,8)"/><text x="43.1548%" y="127.50"></text></g><g><title>predicates_of (3,902,883 samples, 0.18%)</title><rect x="43.4658%" y="101" width="0.1810%" height="15" fill="rgb(250,213,24)"/><text x="43.7158%" y="111.50"></text></g><g><title>predicates_defined_on (2,796,451 samples, 0.13%)</title><rect x="43.5171%" y="85" width="0.1297%" height="15" fill="rgb(247,123,22)"/><text x="43.7671%" y="95.50"></text></g><g><title>param_env (11,992,365 samples, 0.56%)</title><rect x="43.0915%" y="117" width="0.5563%" height="15" fill="rgb(231,138,38)"/><text x="43.3415%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,690,254 samples, 0.12%)</title><rect x="43.6478%" y="117" width="0.1248%" height="15" fill="rgb(231,145,46)"/><text x="43.8978%" y="127.50"></text></g><g><title>fn_abi_of_instance (33,598,276 samples, 1.56%)</title><rect x="42.2206%" y="133" width="1.5586%" height="15" fill="rgb(251,118,11)"/><text x="42.4706%" y="143.50"></text></g><g><title>layout_of (6,193,046 samples, 0.29%)</title><rect x="43.8427%" y="133" width="0.2873%" height="15" fill="rgb(217,147,25)"/><text x="44.0927%" y="143.50"></text></g><g><title>symbol_name (4,474,780 samples, 0.21%)</title><rect x="44.1325%" y="133" width="0.2076%" height="15" fill="rgb(247,81,37)"/><text x="44.3825%" y="143.50"></text></g><g><title>codegen_module (286,990,745 samples, 13.31%)</title><rect x="31.0557%" y="149" width="13.3131%" height="15" fill="rgb(209,12,38)"/><text x="31.3057%" y="159.50">codegen_module</text></g><g><title>codegen_crate (290,293,107 samples, 13.47%)</title><rect x="30.9067%" y="165" width="13.4663%" height="15" fill="rgb(227,1,9)"/><text x="31.1567%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (852,080,287 samples, 39.53%)</title><rect x="44.3847%" y="149" width="39.5268%" height="15" fill="rgb(248,47,43)"/><text x="44.6347%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (807,906,625 samples, 37.48%)</title><rect x="46.4338%" y="133" width="37.4777%" height="15" fill="rgb(221,10,30)"/><text x="46.6838%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (905,145,227 samples, 41.99%)</title><rect x="44.3730%" y="165" width="41.9884%" height="15" fill="rgb(210,229,1)"/><text x="44.6230%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (52,814,086 samples, 2.45%)</title><rect x="83.9115%" y="149" width="2.4500%" height="15" fill="rgb(222,148,37)"/><text x="84.1615%" y="159.50">LL..</text></g><g><title>metadata_register_crate (3,338,053 samples, 0.15%)</title><rect x="89.0292%" y="117" width="0.1548%" height="15" fill="rgb(234,67,33)"/><text x="89.2792%" y="127.50"></text></g><g><title>macro_expand_crate (61,340,670 samples, 2.85%)</title><rect x="86.4109%" y="149" width="2.8455%" height="15" fill="rgb(247,98,35)"/><text x="86.6609%" y="159.50">ma..</text></g><g><title>expand_crate (61,322,830 samples, 2.84%)</title><rect x="86.4118%" y="133" width="2.8447%" height="15" fill="rgb(247,138,52)"/><text x="86.6618%" y="143.50">ex..</text></g><g><title>late_resolve_crate (5,365,654 samples, 0.25%)</title><rect x="89.2890%" y="133" width="0.2489%" height="15" fill="rgb(213,79,30)"/><text x="89.5390%" y="143.50"></text></g><g><title>configure_and_expand (68,837,596 samples, 3.19%)</title><rect x="86.3615%" y="165" width="3.1933%" height="15" fill="rgb(246,177,23)"/><text x="86.6115%" y="175.50">con..</text></g><g><title>resolve_crate (6,359,404 samples, 0.30%)</title><rect x="89.2598%" y="149" width="0.2950%" height="15" fill="rgb(230,62,27)"/><text x="89.5098%" y="159.50"></text></g><g><title>free_global_ctxt (17,948,822 samples, 0.83%)</title><rect x="89.6431%" y="165" width="0.8326%" height="15" fill="rgb(216,154,8)"/><text x="89.8931%" y="175.50"></text></g><g><title>item_attrs (2,236,341 samples, 0.10%)</title><rect x="91.1933%" y="69" width="0.1037%" height="15" fill="rgb(244,35,45)"/><text x="91.4433%" y="79.50"></text></g><g><title>codegen_fn_attrs (3,924,220 samples, 0.18%)</title><rect x="91.1579%" y="85" width="0.1820%" height="15" fill="rgb(251,115,12)"/><text x="91.4079%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,171,940 samples, 0.38%)</title><rect x="92.1089%" y="69" width="0.3791%" height="15" fill="rgb(240,54,50)"/><text x="92.3589%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,695,626 samples, 0.64%)</title><rect x="92.4880%" y="69" width="0.6353%" height="15" fill="rgb(233,84,52)"/><text x="92.7380%" y="79.50"></text></g><g><title>optimized_mir (37,226,151 samples, 1.73%)</title><rect x="91.5120%" y="85" width="1.7269%" height="15" fill="rgb(207,117,47)"/><text x="91.7620%" y="95.50"></text></g><g><title>evaluate_obligation (2,174,034 samples, 0.10%)</title><rect x="93.8233%" y="53" width="0.1009%" height="15" fill="rgb(249,43,39)"/><text x="94.0733%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (12,407,818 samples, 0.58%)</title><rect x="93.4120%" y="69" width="0.5756%" height="15" fill="rgb(209,38,44)"/><text x="93.6620%" y="79.50"></text></g><g><title>specialization_graph_of (3,525,499 samples, 0.16%)</title><rect x="94.1397%" y="69" width="0.1635%" height="15" fill="rgb(236,212,23)"/><text x="94.3897%" y="79.50"></text></g><g><title>resolve_instance (24,062,381 samples, 1.12%)</title><rect x="93.2389%" y="85" width="1.1162%" height="15" fill="rgb(242,79,21)"/><text x="93.4889%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,559,503 samples, 0.12%)</title><rect x="94.4248%" y="69" width="0.1187%" height="15" fill="rgb(211,96,35)"/><text x="94.6748%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,479,633 samples, 0.12%)</title><rect x="94.4285%" y="53" width="0.1150%" height="15" fill="rgb(253,215,40)"/><text x="94.6785%" y="63.50"></text></g><g><title>eval_to_allocation_raw (2,365,111 samples, 0.11%)</title><rect x="94.4338%" y="37" width="0.1097%" height="15" fill="rgb(211,81,21)"/><text x="94.6838%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,147,097 samples, 0.15%)</title><rect x="94.4047%" y="85" width="0.1460%" height="15" fill="rgb(208,190,38)"/><text x="94.6547%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (2,460,645 samples, 0.11%)</title><rect x="94.5519%" y="85" width="0.1141%" height="15" fill="rgb(235,213,38)"/><text x="94.8019%" y="95.50"></text></g><g><title>upstream_monomorphizations (2,362,784 samples, 0.11%)</title><rect x="94.5564%" y="69" width="0.1096%" height="15" fill="rgb(237,122,38)"/><text x="94.8064%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (88,542,895 samples, 4.11%)</title><rect x="90.6842%" y="101" width="4.1074%" height="15" fill="rgb(244,218,35)"/><text x="90.9342%" y="111.50">mono..</text></g><g><title>vtable_entries (2,707,414 samples, 0.13%)</title><rect x="94.6660%" y="85" width="0.1256%" height="15" fill="rgb(240,68,47)"/><text x="94.9160%" y="95.50"></text></g><g><title>monomorphization_collector (88,748,237 samples, 4.12%)</title><rect x="90.6840%" y="117" width="4.1169%" height="15" fill="rgb(210,16,53)"/><text x="90.9340%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (7,165,793 samples, 0.33%)</title><rect x="94.8017%" y="101" width="0.3324%" height="15" fill="rgb(235,124,12)"/><text x="95.0517%" y="111.50"></text></g><g><title>symbol_name (6,422,992 samples, 0.30%)</title><rect x="94.8362%" y="85" width="0.2980%" height="15" fill="rgb(224,169,11)"/><text x="95.0862%" y="95.50"></text></g><g><title>cgu_partitioning_place_roots (2,471,876 samples, 0.11%)</title><rect x="95.1997%" y="85" width="0.1147%" height="15" fill="rgb(250,166,2)"/><text x="95.4497%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (100,172,683 samples, 4.65%)</title><rect x="90.6808%" y="133" width="4.6469%" height="15" fill="rgb(242,216,29)"/><text x="90.9308%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (11,354,576 samples, 0.53%)</title><rect x="94.8009%" y="117" width="0.5267%" height="15" fill="rgb(230,116,27)"/><text x="95.0509%" y="127.50"></text></g><g><title>cgu_partitioning (4,172,003 samples, 0.19%)</title><rect x="95.1341%" y="101" width="0.1935%" height="15" fill="rgb(228,99,48)"/><text x="95.3841%" y="111.50"></text></g><g><title>exported_symbols (100,719,979 samples, 4.67%)</title><rect x="90.6669%" y="149" width="4.6723%" height="15" fill="rgb(253,11,6)"/><text x="90.9169%" y="159.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,577,917 samples, 0.26%)</title><rect x="95.6065%" y="133" width="0.2588%" height="15" fill="rgb(247,143,39)"/><text x="95.8565%" y="143.50"></text></g><g><title>optimized_mir (11,228,885 samples, 0.52%)</title><rect x="95.3470%" y="149" width="0.5209%" height="15" fill="rgb(236,97,10)"/><text x="95.5970%" y="159.50"></text></g><g><title>generate_crate_metadata (116,415,118 samples, 5.40%)</title><rect x="90.4757%" y="165" width="5.4003%" height="15" fill="rgb(233,208,19)"/><text x="90.7257%" y="175.50">generat..</text></g><g><title>hir_lowering (9,506,937 samples, 0.44%)</title><rect x="95.8761%" y="165" width="0.4410%" height="15" fill="rgb(216,164,2)"/><text x="96.1261%" y="175.50"></text></g><g><title>finish_ongoing_codegen (68,606,284 samples, 3.18%)</title><rect x="96.3179%" y="149" width="3.1826%" height="15" fill="rgb(220,129,5)"/><text x="96.5679%" y="159.50">fin..</text></g><g><title>link_crate (5,887,060 samples, 0.27%)</title><rect x="99.5005%" y="149" width="0.2731%" height="15" fill="rgb(242,17,10)"/><text x="99.7505%" y="159.50"></text></g><g><title>link_binary (5,782,859 samples, 0.27%)</title><rect x="99.5053%" y="133" width="0.2683%" height="15" fill="rgb(242,107,0)"/><text x="99.7553%" y="143.50"></text></g><g><title>link_rlib (4,696,988 samples, 0.22%)</title><rect x="99.5557%" y="117" width="0.2179%" height="15" fill="rgb(251,28,31)"/><text x="99.8057%" y="127.50"></text></g><g><title>link (74,526,814 samples, 3.46%)</title><rect x="96.3171%" y="165" width="3.4572%" height="15" fill="rgb(233,223,10)"/><text x="96.5671%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (3,445,195 samples, 0.16%)</title><rect x="99.8132%" y="165" width="0.1598%" height="15" fill="rgb(215,21,27)"/><text x="100.0632%" y="175.50"></text></g><g><title>all (2,155,700,569 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,155,700,569 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>