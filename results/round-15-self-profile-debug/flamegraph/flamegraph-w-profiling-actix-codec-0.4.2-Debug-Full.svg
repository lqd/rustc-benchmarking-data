<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (33,694,286 samples, 9.90%)</title><rect x="0.2656%" y="197" width="9.8998%" height="15" fill="rgb(227,0,7)"/><text x="0.5156%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (376,776 samples, 0.11%)</title><rect x="15.3681%" y="101" width="0.1107%" height="15" fill="rgb(217,0,24)"/><text x="15.6181%" y="111.50"></text></g><g><title>is_copy_raw (1,184,409 samples, 0.35%)</title><rect x="16.6269%" y="69" width="0.3480%" height="15" fill="rgb(221,193,54)"/><text x="16.8769%" y="79.50"></text></g><g><title>evaluate_obligation (1,020,928 samples, 0.30%)</title><rect x="16.6749%" y="53" width="0.3000%" height="15" fill="rgb(248,212,6)"/><text x="16.9249%" y="63.50"></text></g><g><title>needs_drop_raw (1,608,303 samples, 0.47%)</title><rect x="16.5032%" y="85" width="0.4725%" height="15" fill="rgb(208,68,35)"/><text x="16.7532%" y="95.50"></text></g><g><title>resolve_instance (912,256 samples, 0.27%)</title><rect x="16.9833%" y="85" width="0.2680%" height="15" fill="rgb(232,128,0)"/><text x="17.2333%" y="95.50"></text></g><g><title>thir_body (1,147,353 samples, 0.34%)</title><rect x="17.2601%" y="85" width="0.3371%" height="15" fill="rgb(207,160,47)"/><text x="17.5101%" y="95.50"></text></g><g><title>mir_const (9,405,970 samples, 2.76%)</title><rect x="14.8450%" y="133" width="2.7636%" height="15" fill="rgb(228,23,34)"/><text x="15.0950%" y="143.50">mi..</text></g><g><title>unsafety_check_result (8,156,461 samples, 2.40%)</title><rect x="15.2121%" y="117" width="2.3965%" height="15" fill="rgb(218,30,26)"/><text x="15.4621%" y="127.50">un..</text></g><g><title>mir_built (7,248,751 samples, 2.13%)</title><rect x="15.4788%" y="101" width="2.1298%" height="15" fill="rgb(220,122,19)"/><text x="15.7288%" y="111.50">m..</text></g><g><title>mir_const (735,321 samples, 0.22%)</title><rect x="17.7038%" y="117" width="0.2160%" height="15" fill="rgb(250,228,42)"/><text x="17.9538%" y="127.50"></text></g><g><title>unsafety_check_result (595,407 samples, 0.17%)</title><rect x="17.7449%" y="101" width="0.1749%" height="15" fill="rgb(240,193,28)"/><text x="17.9949%" y="111.50"></text></g><g><title>mir_built (537,206 samples, 0.16%)</title><rect x="17.7620%" y="85" width="0.1578%" height="15" fill="rgb(216,20,37)"/><text x="18.0120%" y="95.50"></text></g><g><title>mir_const_qualif (1,082,193 samples, 0.32%)</title><rect x="17.6086%" y="133" width="0.3180%" height="15" fill="rgb(206,188,39)"/><text x="17.8586%" y="143.50"></text></g><g><title>mir_promoted (11,584,817 samples, 3.40%)</title><rect x="14.5231%" y="149" width="3.4038%" height="15" fill="rgb(217,207,13)"/><text x="14.7731%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (393,334 samples, 0.12%)</title><rect x="17.9272%" y="149" width="0.1156%" height="15" fill="rgb(231,73,38)"/><text x="18.1772%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (403,262 samples, 0.12%)</title><rect x="18.0428%" y="149" width="0.1185%" height="15" fill="rgb(225,20,46)"/><text x="18.2928%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,009,457 samples, 0.59%)</title><rect x="18.2690%" y="149" width="0.5904%" height="15" fill="rgb(210,31,41)"/><text x="18.5190%" y="159.50"></text></g><g><title>MIR_borrow_checking (29,230,383 samples, 8.59%)</title><rect x="10.2738%" y="181" width="8.5883%" height="15" fill="rgb(221,200,47)"/><text x="10.5238%" y="191.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (29,067,862 samples, 8.54%)</title><rect x="10.3215%" y="165" width="8.5405%" height="15" fill="rgb(226,26,5)"/><text x="10.5715%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (496,385 samples, 0.15%)</title><rect x="18.8620%" y="181" width="0.1458%" height="15" fill="rgb(249,33,26)"/><text x="19.1120%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (421,794 samples, 0.12%)</title><rect x="18.8840%" y="165" width="0.1239%" height="15" fill="rgb(235,183,28)"/><text x="19.1340%" y="175.50"></text></g><g><title>codegen_fn_attrs (369,696 samples, 0.11%)</title><rect x="19.2316%" y="117" width="0.1086%" height="15" fill="rgb(221,5,38)"/><text x="19.4816%" y="127.50"></text></g><g><title>codegen_fn_attrs (577,176 samples, 0.17%)</title><rect x="19.1731%" y="149" width="0.1696%" height="15" fill="rgb(247,18,42)"/><text x="19.4231%" y="159.50"></text></g><g><title>should_inherit_track_caller (513,576 samples, 0.15%)</title><rect x="19.1918%" y="133" width="0.1509%" height="15" fill="rgb(241,131,45)"/><text x="19.4418%" y="143.50"></text></g><g><title>check_mod_attrs (887,088 samples, 0.26%)</title><rect x="19.0821%" y="165" width="0.2606%" height="15" fill="rgb(249,31,29)"/><text x="19.3321%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (605,757 samples, 0.18%)</title><rect x="19.4143%" y="165" width="0.1780%" height="15" fill="rgb(225,111,53)"/><text x="19.6643%" y="175.50"></text></g><g><title>misc_checking_1 (1,819,589 samples, 0.53%)</title><rect x="19.0751%" y="181" width="0.5346%" height="15" fill="rgb(238,160,17)"/><text x="19.3251%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (561,525 samples, 0.16%)</title><rect x="19.6103%" y="165" width="0.1650%" height="15" fill="rgb(214,148,48)"/><text x="19.8603%" y="175.50"></text></g><g><title>check_mod_liveness (444,695 samples, 0.13%)</title><rect x="19.6446%" y="149" width="0.1307%" height="15" fill="rgb(232,36,49)"/><text x="19.8946%" y="159.50"></text></g><g><title>misc_checking_2 (1,229,082 samples, 0.36%)</title><rect x="19.6097%" y="181" width="0.3611%" height="15" fill="rgb(209,103,24)"/><text x="19.8597%" y="191.50"></text></g><g><title>match_checking (665,646 samples, 0.20%)</title><rect x="19.7752%" y="165" width="0.1956%" height="15" fill="rgb(229,88,8)"/><text x="20.0252%" y="175.50"></text></g><g><title>check_match (626,735 samples, 0.18%)</title><rect x="19.7867%" y="149" width="0.1841%" height="15" fill="rgb(213,181,19)"/><text x="20.0367%" y="159.50"></text></g><g><title>death_checking (921,179 samples, 0.27%)</title><rect x="20.0613%" y="165" width="0.2707%" height="15" fill="rgb(254,191,54)"/><text x="20.3113%" y="175.50"></text></g><g><title>crate_lints (2,623,586 samples, 0.77%)</title><rect x="20.3325%" y="149" width="0.7708%" height="15" fill="rgb(241,83,37)"/><text x="20.5825%" y="159.50"></text></g><g><title>type_of (1,223,632 samples, 0.36%)</title><rect x="20.7438%" y="133" width="0.3595%" height="15" fill="rgb(233,36,39)"/><text x="20.9938%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (962,729 samples, 0.28%)</title><rect x="20.8204%" y="117" width="0.2829%" height="15" fill="rgb(226,3,54)"/><text x="21.0704%" y="127.50"></text></g><g><title>lint_checking (3,117,561 samples, 0.92%)</title><rect x="20.3320%" y="165" width="0.9160%" height="15" fill="rgb(245,192,40)"/><text x="20.5820%" y="175.50"></text></g><g><title>module_lints (492,415 samples, 0.14%)</title><rect x="21.1033%" y="149" width="0.1447%" height="15" fill="rgb(238,167,29)"/><text x="21.3533%" y="159.50"></text></g><g><title>lint_mod (487,255 samples, 0.14%)</title><rect x="21.1048%" y="133" width="0.1432%" height="15" fill="rgb(232,182,51)"/><text x="21.3548%" y="143.50"></text></g><g><title>privacy_checking_modules (1,127,051 samples, 0.33%)</title><rect x="21.3377%" y="165" width="0.3311%" height="15" fill="rgb(231,60,39)"/><text x="21.5877%" y="175.50"></text></g><g><title>check_mod_privacy (1,124,161 samples, 0.33%)</title><rect x="21.3385%" y="149" width="0.3303%" height="15" fill="rgb(208,69,12)"/><text x="21.5885%" y="159.50"></text></g><g><title>misc_checking_3 (5,803,867 samples, 1.71%)</title><rect x="19.9708%" y="181" width="1.7052%" height="15" fill="rgb(235,93,37)"/><text x="20.2208%" y="191.50"></text></g><g><title>adt_destructor (397,874 samples, 0.12%)</title><rect x="21.7327%" y="133" width="0.1169%" height="15" fill="rgb(213,116,39)"/><text x="21.9827%" y="143.50"></text></g><g><title>coherent_trait (394,254 samples, 0.12%)</title><rect x="21.7337%" y="117" width="0.1158%" height="15" fill="rgb(222,207,29)"/><text x="21.9837%" y="127.50"></text></g><g><title>specialization_graph_of (393,134 samples, 0.12%)</title><rect x="21.7340%" y="101" width="0.1155%" height="15" fill="rgb(206,96,30)"/><text x="21.9840%" y="111.50"></text></g><g><title>impl_parent (3,916,090 samples, 1.15%)</title><rect x="23.7017%" y="117" width="1.1506%" height="15" fill="rgb(218,138,4)"/><text x="23.9517%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,012,627 samples, 0.59%)</title><rect x="24.2609%" y="101" width="0.5913%" height="15" fill="rgb(250,191,14)"/><text x="24.5109%" y="111.50"></text></g><g><title>impl_trait_ref (6,955,604 samples, 2.04%)</title><rect x="24.8523%" y="117" width="2.0436%" height="15" fill="rgb(239,60,40)"/><text x="25.1023%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,458,503 samples, 1.60%)</title><rect x="25.2921%" y="101" width="1.6038%" height="15" fill="rgb(206,27,48)"/><text x="25.5421%" y="111.50"></text></g><g><title>coherent_trait (19,248,002 samples, 5.66%)</title><rect x="21.7117%" y="149" width="5.6553%" height="15" fill="rgb(225,35,8)"/><text x="21.9617%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (18,621,276 samples, 5.47%)</title><rect x="21.8958%" y="133" width="5.4712%" height="15" fill="rgb(250,213,24)"/><text x="22.1458%" y="143.50">special..</text></g><g><title>trait_impls_of (1,558,305 samples, 0.46%)</title><rect x="26.9091%" y="117" width="0.4578%" height="15" fill="rgb(247,123,22)"/><text x="27.1591%" y="127.50"></text></g><g><title>implementations_of_trait (514,404 samples, 0.15%)</title><rect x="27.2158%" y="101" width="0.1511%" height="15" fill="rgb(231,138,38)"/><text x="27.4658%" y="111.50"></text></g><g><title>coherence_checking (19,662,416 samples, 5.78%)</title><rect x="21.7014%" y="165" width="5.7771%" height="15" fill="rgb(231,145,46)"/><text x="21.9514%" y="175.50">coheren..</text></g><g><title>associated_item (406,206 samples, 0.12%)</title><rect x="34.8462%" y="101" width="0.1193%" height="15" fill="rgb(251,118,11)"/><text x="35.0962%" y="111.50"></text></g><g><title>associated_items (592,517 samples, 0.17%)</title><rect x="34.7984%" y="117" width="0.1741%" height="15" fill="rgb(217,147,25)"/><text x="35.0484%" y="127.50"></text></g><g><title>adt_dtorck_constraint (394,474 samples, 0.12%)</title><rect x="35.1022%" y="101" width="0.1159%" height="15" fill="rgb(247,81,37)"/><text x="35.3522%" y="111.50"></text></g><g><title>dropck_outlives (739,439 samples, 0.22%)</title><rect x="35.0085%" y="117" width="0.2173%" height="15" fill="rgb(209,12,38)"/><text x="35.2585%" y="127.50"></text></g><g><title>evaluate_obligation (2,471,735 samples, 0.73%)</title><rect x="35.2257%" y="117" width="0.7262%" height="15" fill="rgb(227,1,9)"/><text x="35.4757%" y="127.50"></text></g><g><title>method_autoderef_steps (594,147 samples, 0.17%)</title><rect x="36.1781%" y="117" width="0.1746%" height="15" fill="rgb(248,47,43)"/><text x="36.4281%" y="127.50"></text></g><g><title>predicates_of (493,731 samples, 0.15%)</title><rect x="36.4129%" y="117" width="0.1451%" height="15" fill="rgb(221,10,30)"/><text x="36.6629%" y="127.50"></text></g><g><title>evaluate_obligation (402,653 samples, 0.12%)</title><rect x="36.7873%" y="101" width="0.1183%" height="15" fill="rgb(210,229,1)"/><text x="37.0373%" y="111.50"></text></g><g><title>typeck (1,209,742 samples, 0.36%)</title><rect x="36.5958%" y="117" width="0.3554%" height="15" fill="rgb(222,148,37)"/><text x="36.8458%" y="127.50"></text></g><g><title>item_bodies_checking (32,268,442 samples, 9.48%)</title><rect x="27.4910%" y="165" width="9.4809%" height="15" fill="rgb(234,67,33)"/><text x="27.7410%" y="175.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (32,264,322 samples, 9.48%)</title><rect x="27.4922%" y="149" width="9.4797%" height="15" fill="rgb(247,98,35)"/><text x="27.7422%" y="159.50">typeck_item_bo..</text></g><g><title>typeck (32,144,660 samples, 9.44%)</title><rect x="27.5273%" y="133" width="9.4445%" height="15" fill="rgb(247,138,52)"/><text x="27.7773%" y="143.50">typeck</text></g><g><title>evaluate_obligation (1,181,301 samples, 0.35%)</title><rect x="37.7405%" y="117" width="0.3471%" height="15" fill="rgb(213,79,30)"/><text x="37.9905%" y="127.50"></text></g><g><title>item_types_checking (3,888,479 samples, 1.14%)</title><rect x="36.9718%" y="165" width="1.1425%" height="15" fill="rgb(246,177,23)"/><text x="37.2218%" y="175.50"></text></g><g><title>check_mod_item_types (3,883,519 samples, 1.14%)</title><rect x="36.9733%" y="149" width="1.1410%" height="15" fill="rgb(230,62,27)"/><text x="37.2233%" y="159.50"></text></g><g><title>typeck (1,665,927 samples, 0.49%)</title><rect x="37.6248%" y="133" width="0.4895%" height="15" fill="rgb(216,154,8)"/><text x="37.8748%" y="143.50"></text></g><g><title>fn_sig (584,227 samples, 0.17%)</title><rect x="38.2249%" y="133" width="0.1717%" height="15" fill="rgb(244,35,45)"/><text x="38.4749%" y="143.50"></text></g><g><title>named_region_map (590,458 samples, 0.17%)</title><rect x="38.4495%" y="117" width="0.1735%" height="15" fill="rgb(251,115,12)"/><text x="38.6995%" y="127.50"></text></g><g><title>resolve_lifetimes (567,037 samples, 0.17%)</title><rect x="38.4564%" y="101" width="0.1666%" height="15" fill="rgb(240,54,50)"/><text x="38.7064%" y="111.50"></text></g><g><title>generics_of (794,968 samples, 0.23%)</title><rect x="38.3965%" y="133" width="0.2336%" height="15" fill="rgb(233,84,52)"/><text x="38.6465%" y="143.50"></text></g><g><title>explicit_predicates_of (468,782 samples, 0.14%)</title><rect x="38.7192%" y="101" width="0.1377%" height="15" fill="rgb(207,117,47)"/><text x="38.9692%" y="111.50"></text></g><g><title>predicates_of (1,062,017 samples, 0.31%)</title><rect x="38.6624%" y="133" width="0.3120%" height="15" fill="rgb(249,43,39)"/><text x="38.9124%" y="143.50"></text></g><g><title>predicates_defined_on (991,116 samples, 0.29%)</title><rect x="38.6832%" y="117" width="0.2912%" height="15" fill="rgb(209,38,44)"/><text x="38.9332%" y="127.50"></text></g><g><title>inferred_outlives_of (399,763 samples, 0.12%)</title><rect x="38.8570%" y="101" width="0.1175%" height="15" fill="rgb(236,212,23)"/><text x="39.1070%" y="111.50"></text></g><g><title>inferred_outlives_crate (370,683 samples, 0.11%)</title><rect x="38.8655%" y="85" width="0.1089%" height="15" fill="rgb(242,79,21)"/><text x="39.1155%" y="95.50"></text></g><g><title>type_collecting (3,094,971 samples, 0.91%)</title><rect x="38.1155%" y="165" width="0.9093%" height="15" fill="rgb(211,96,35)"/><text x="38.3655%" y="175.50"></text></g><g><title>collect_mod_item_types (3,079,801 samples, 0.90%)</title><rect x="38.1199%" y="149" width="0.9049%" height="15" fill="rgb(253,215,40)"/><text x="38.3699%" y="159.50"></text></g><g><title>adt_def (391,254 samples, 0.11%)</title><rect x="40.2984%" y="85" width="0.1150%" height="15" fill="rgb(211,81,21)"/><text x="40.5484%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (390,774 samples, 0.11%)</title><rect x="40.2986%" y="69" width="0.1148%" height="15" fill="rgb(208,190,38)"/><text x="40.5486%" y="79.50"></text></g><g><title>item_attrs (383,004 samples, 0.11%)</title><rect x="40.3008%" y="53" width="0.1125%" height="15" fill="rgb(235,213,38)"/><text x="40.5508%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (382,404 samples, 0.11%)</title><rect x="40.3010%" y="37" width="0.1124%" height="15" fill="rgb(237,122,38)"/><text x="40.5510%" y="47.50"></text></g><g><title>adt_sized_constraint (441,124 samples, 0.13%)</title><rect x="40.2972%" y="101" width="0.1296%" height="15" fill="rgb(244,218,35)"/><text x="40.5472%" y="111.50"></text></g><g><title>adt_sized_constraint (581,766 samples, 0.17%)</title><rect x="40.2572%" y="117" width="0.1709%" height="15" fill="rgb(240,68,47)"/><text x="40.5072%" y="127.50"></text></g><g><title>evaluate_obligation (1,265,143 samples, 0.37%)</title><rect x="40.0876%" y="133" width="0.3717%" height="15" fill="rgb(210,16,53)"/><text x="40.3376%" y="143.50"></text></g><g><title>implied_outlives_bounds (359,421 samples, 0.11%)</title><rect x="40.4715%" y="133" width="0.1056%" height="15" fill="rgb(235,124,12)"/><text x="40.7215%" y="143.50"></text></g><g><title>param_env (480,134 samples, 0.14%)</title><rect x="40.5828%" y="133" width="0.1411%" height="15" fill="rgb(224,169,11)"/><text x="40.8328%" y="143.50"></text></g><g><title>region_scope_tree (483,505 samples, 0.14%)</title><rect x="40.7604%" y="133" width="0.1421%" height="15" fill="rgb(250,166,2)"/><text x="41.0104%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,265,522 samples, 1.84%)</title><rect x="39.1061%" y="149" width="1.8409%" height="15" fill="rgb(242,216,29)"/><text x="39.3561%" y="159.50">c..</text></g><g><title>evaluate_obligation (375,604 samples, 0.11%)</title><rect x="41.4131%" y="133" width="0.1104%" height="15" fill="rgb(230,116,27)"/><text x="41.6631%" y="143.50"></text></g><g><title>check_item_well_formed (2,897,597 samples, 0.85%)</title><rect x="40.9470%" y="149" width="0.8514%" height="15" fill="rgb(228,99,48)"/><text x="41.1970%" y="159.50"></text></g><g><title>analysis (107,793,456 samples, 31.67%)</title><rect x="10.1654%" y="197" width="31.6711%" height="15" fill="rgb(253,11,6)"/><text x="10.4154%" y="207.50">analysis</text></g><g><title>type_check_crate (68,616,685 samples, 20.16%)</title><rect x="21.6761%" y="181" width="20.1605%" height="15" fill="rgb(247,143,39)"/><text x="21.9261%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,562,486 samples, 2.81%)</title><rect x="39.0269%" y="165" width="2.8096%" height="15" fill="rgb(236,97,10)"/><text x="39.2769%" y="175.50">wf..</text></g><g><title>compute_debuginfo_type_name (395,953 samples, 0.12%)</title><rect x="48.9168%" y="165" width="0.1163%" height="15" fill="rgb(233,208,19)"/><text x="49.1668%" y="175.50"></text></g><g><title>const_caller_location (418,024 samples, 0.12%)</title><rect x="49.0331%" y="165" width="0.1228%" height="15" fill="rgb(216,164,2)"/><text x="49.2831%" y="175.50"></text></g><g><title>item_attrs (629,295 samples, 0.18%)</title><rect x="49.5604%" y="133" width="0.1849%" height="15" fill="rgb(220,129,5)"/><text x="49.8104%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (611,435 samples, 0.18%)</title><rect x="49.5656%" y="117" width="0.1796%" height="15" fill="rgb(242,17,10)"/><text x="49.8156%" y="127.50"></text></g><g><title>codegen_fn_attrs (873,930 samples, 0.26%)</title><rect x="49.5121%" y="149" width="0.2568%" height="15" fill="rgb(242,107,0)"/><text x="49.7621%" y="159.50"></text></g><g><title>layout_of (445,524 samples, 0.13%)</title><rect x="49.9584%" y="133" width="0.1309%" height="15" fill="rgb(251,28,31)"/><text x="50.2084%" y="143.50"></text></g><g><title>layout_of (1,218,471 samples, 0.36%)</title><rect x="49.7882%" y="149" width="0.3580%" height="15" fill="rgb(233,223,10)"/><text x="50.0382%" y="159.50"></text></g><g><title>predicates_of (600,587 samples, 0.18%)</title><rect x="50.4585%" y="133" width="0.1765%" height="15" fill="rgb(215,21,27)"/><text x="50.7085%" y="143.50"></text></g><g><title>predicates_defined_on (379,065 samples, 0.11%)</title><rect x="50.5236%" y="117" width="0.1114%" height="15" fill="rgb(232,23,21)"/><text x="50.7736%" y="127.50"></text></g><g><title>param_env (1,665,485 samples, 0.49%)</title><rect x="50.1462%" y="149" width="0.4893%" height="15" fill="rgb(244,5,23)"/><text x="50.3962%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,258,825 samples, 1.55%)</title><rect x="49.1612%" y="165" width="1.5451%" height="15" fill="rgb(226,81,46)"/><text x="49.4112%" y="175.50"></text></g><g><title>layout_of (364,235 samples, 0.11%)</title><rect x="51.0246%" y="101" width="0.1070%" height="15" fill="rgb(247,70,30)"/><text x="51.2746%" y="111.50"></text></g><g><title>layout_of (536,787 samples, 0.16%)</title><rect x="50.9849%" y="117" width="0.1577%" height="15" fill="rgb(212,68,19)"/><text x="51.2349%" y="127.50"></text></g><g><title>layout_of (824,059 samples, 0.24%)</title><rect x="50.9183%" y="133" width="0.2421%" height="15" fill="rgb(240,187,13)"/><text x="51.1683%" y="143.50"></text></g><g><title>layout_of (1,056,191 samples, 0.31%)</title><rect x="50.8744%" y="149" width="0.3103%" height="15" fill="rgb(223,113,26)"/><text x="51.1244%" y="159.50"></text></g><g><title>layout_of (1,579,498 samples, 0.46%)</title><rect x="50.7465%" y="165" width="0.4641%" height="15" fill="rgb(206,192,2)"/><text x="50.9965%" y="175.50"></text></g><g><title>symbol_name (758,992 samples, 0.22%)</title><rect x="51.2190%" y="165" width="0.2230%" height="15" fill="rgb(241,108,4)"/><text x="51.4690%" y="175.50"></text></g><g><title>codegen_module (29,850,155 samples, 8.77%)</title><rect x="42.6950%" y="181" width="8.7704%" height="15" fill="rgb(247,173,49)"/><text x="42.9450%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (32,870,768 samples, 9.66%)</title><rect x="41.8393%" y="197" width="9.6578%" height="15" fill="rgb(224,114,35)"/><text x="42.0893%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (82,194,149 samples, 24.15%)</title><rect x="51.5422%" y="181" width="24.1497%" height="15" fill="rgb(245,159,27)"/><text x="51.7922%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (77,915,166 samples, 22.89%)</title><rect x="52.7994%" y="165" width="22.8925%" height="15" fill="rgb(245,172,44)"/><text x="53.0494%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (86,221,379 samples, 25.33%)</title><rect x="51.4971%" y="197" width="25.3329%" height="15" fill="rgb(236,23,11)"/><text x="51.7471%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,873,999 samples, 1.14%)</title><rect x="75.6918%" y="181" width="1.1382%" height="15" fill="rgb(205,117,38)"/><text x="75.9418%" y="191.50"></text></g><g><title>metadata_load_macro (2,080,443 samples, 0.61%)</title><rect x="86.7697%" y="149" width="0.6113%" height="15" fill="rgb(237,72,25)"/><text x="87.0197%" y="159.50"></text></g><g><title>metadata_register_crate (3,132,441 samples, 0.92%)</title><rect x="87.3809%" y="149" width="0.9204%" height="15" fill="rgb(244,70,9)"/><text x="87.6309%" y="159.50"></text></g><g><title>metadata_register_crate (1,081,341 samples, 0.32%)</title><rect x="87.9836%" y="133" width="0.3177%" height="15" fill="rgb(217,125,39)"/><text x="88.2336%" y="143.50"></text></g><g><title>macro_expand_crate (38,748,427 samples, 11.38%)</title><rect x="77.0029%" y="181" width="11.3848%" height="15" fill="rgb(235,36,10)"/><text x="77.2529%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (38,725,687 samples, 11.38%)</title><rect x="77.0095%" y="165" width="11.3781%" height="15" fill="rgb(251,123,47)"/><text x="77.2595%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (2,390,854 samples, 0.70%)</title><rect x="88.5265%" y="165" width="0.7025%" height="15" fill="rgb(221,13,13)"/><text x="88.7765%" y="175.50"></text></g><g><title>configure_and_expand (42,328,182 samples, 12.44%)</title><rect x="76.8301%" y="197" width="12.4366%" height="15" fill="rgb(238,131,9)"/><text x="77.0801%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,860,829 samples, 0.84%)</title><rect x="88.4261%" y="181" width="0.8405%" height="15" fill="rgb(211,50,8)"/><text x="88.6761%" y="191.50"></text></g><g><title>early_lint_checks (544,665 samples, 0.16%)</title><rect x="89.3495%" y="197" width="0.1600%" height="15" fill="rgb(245,182,24)"/><text x="89.5995%" y="207.50"></text></g><g><title>free_global_ctxt (5,126,612 samples, 1.51%)</title><rect x="89.5096%" y="197" width="1.5063%" height="15" fill="rgb(242,14,37)"/><text x="89.7596%" y="207.50"></text></g><g><title>is_reachable_non_generic (365,173 samples, 0.11%)</title><rect x="92.0046%" y="117" width="0.1073%" height="15" fill="rgb(246,228,12)"/><text x="92.2546%" y="127.50"></text></g><g><title>reachable_non_generics (345,843 samples, 0.10%)</title><rect x="92.0103%" y="101" width="0.1016%" height="15" fill="rgb(213,55,15)"/><text x="92.2603%" y="111.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (343,623 samples, 0.10%)</title><rect x="92.0109%" y="85" width="0.1010%" height="15" fill="rgb(209,9,3)"/><text x="92.2609%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (573,734 samples, 0.17%)</title><rect x="92.4479%" y="101" width="0.1686%" height="15" fill="rgb(230,59,30)"/><text x="92.6979%" y="111.50"></text></g><g><title>optimized_mir (2,856,698 samples, 0.84%)</title><rect x="92.1441%" y="117" width="0.8393%" height="15" fill="rgb(209,121,21)"/><text x="92.3941%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,249,123 samples, 0.37%)</title><rect x="92.6164%" y="101" width="0.3670%" height="15" fill="rgb(220,109,13)"/><text x="92.8664%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (688,344 samples, 0.20%)</title><rect x="93.0556%" y="101" width="0.2022%" height="15" fill="rgb(232,18,1)"/><text x="93.3056%" y="111.50"></text></g><g><title>specialization_graph_of (987,911 samples, 0.29%)</title><rect x="93.3213%" y="101" width="0.2903%" height="15" fill="rgb(215,41,42)"/><text x="93.5713%" y="111.50"></text></g><g><title>impl_trait_ref (387,055 samples, 0.11%)</title><rect x="93.4978%" y="85" width="0.1137%" height="15" fill="rgb(224,123,36)"/><text x="93.7478%" y="95.50"></text></g><g><title>resolve_instance (2,257,831 samples, 0.66%)</title><rect x="92.9834%" y="117" width="0.6634%" height="15" fill="rgb(240,125,3)"/><text x="93.2334%" y="127.50"></text></g><g><title>eval_to_const_value_raw (587,467 samples, 0.17%)</title><rect x="93.6570%" y="101" width="0.1726%" height="15" fill="rgb(205,98,50)"/><text x="93.9070%" y="111.50"></text></g><g><title>eval_to_const_value_raw (574,167 samples, 0.17%)</title><rect x="93.6609%" y="85" width="0.1687%" height="15" fill="rgb(205,185,37)"/><text x="93.9109%" y="95.50"></text></g><g><title>eval_to_allocation_raw (557,157 samples, 0.16%)</title><rect x="93.6659%" y="69" width="0.1637%" height="15" fill="rgb(238,207,15)"/><text x="93.9159%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (639,718 samples, 0.19%)</title><rect x="93.6468%" y="117" width="0.1880%" height="15" fill="rgb(213,199,42)"/><text x="93.8968%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (901,179 samples, 0.26%)</title><rect x="93.8352%" y="117" width="0.2648%" height="15" fill="rgb(235,201,11)"/><text x="94.0852%" y="127.50"></text></g><g><title>upstream_monomorphizations (893,369 samples, 0.26%)</title><rect x="93.8375%" y="101" width="0.2625%" height="15" fill="rgb(207,46,11)"/><text x="94.0875%" y="111.50"></text></g><g><title>exported_symbols (712,677 samples, 0.21%)</title><rect x="93.8906%" y="85" width="0.2094%" height="15" fill="rgb(241,35,35)"/><text x="94.1406%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (706,857 samples, 0.21%)</title><rect x="93.8923%" y="69" width="0.2077%" height="15" fill="rgb(243,32,47)"/><text x="94.1423%" y="79.50"></text></g><g><title>resolve_instance (454,734 samples, 0.13%)</title><rect x="94.2263%" y="101" width="0.1336%" height="15" fill="rgb(247,202,23)"/><text x="94.4763%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (8,992,230 samples, 2.64%)</title><rect x="91.7189%" y="133" width="2.6420%" height="15" fill="rgb(219,102,11)"/><text x="91.9689%" y="143.50">mo..</text></g><g><title>vtable_entries (888,259 samples, 0.26%)</title><rect x="94.1000%" y="117" width="0.2610%" height="15" fill="rgb(243,110,44)"/><text x="94.3500%" y="127.50"></text></g><g><title>monomorphization_collector (9,050,891 samples, 2.66%)</title><rect x="91.7178%" y="149" width="2.6593%" height="15" fill="rgb(222,74,54)"/><text x="91.9678%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (485,025 samples, 0.14%)</title><rect x="94.3784%" y="133" width="0.1425%" height="15" fill="rgb(216,99,12)"/><text x="94.6284%" y="143.50"></text></g><g><title>symbol_name (449,044 samples, 0.13%)</title><rect x="94.3890%" y="117" width="0.1319%" height="15" fill="rgb(226,22,26)"/><text x="94.6390%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (9,828,679 samples, 2.89%)</title><rect x="91.7075%" y="165" width="2.8878%" height="15" fill="rgb(217,163,10)"/><text x="91.9575%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (742,678 samples, 0.22%)</title><rect x="94.3771%" y="149" width="0.2182%" height="15" fill="rgb(213,25,53)"/><text x="94.6271%" y="159.50"></text></g><g><title>exported_symbols (10,038,601 samples, 2.95%)</title><rect x="91.6992%" y="181" width="2.9495%" height="15" fill="rgb(252,105,26)"/><text x="91.9492%" y="191.50">ex..</text></g><g><title>layout_of (417,315 samples, 0.12%)</title><rect x="95.8228%" y="149" width="0.1226%" height="15" fill="rgb(220,39,43)"/><text x="96.0728%" y="159.50"></text></g><g><title>layout_of (1,042,303 samples, 0.31%)</title><rect x="95.6547%" y="165" width="0.3062%" height="15" fill="rgb(229,68,48)"/><text x="95.9047%" y="175.50"></text></g><g><title>is_copy_raw (523,696 samples, 0.15%)</title><rect x="97.0948%" y="133" width="0.1539%" height="15" fill="rgb(252,8,32)"/><text x="97.3448%" y="143.50"></text></g><g><title>evaluate_obligation (433,106 samples, 0.13%)</title><rect x="97.1214%" y="117" width="0.1273%" height="15" fill="rgb(223,20,43)"/><text x="97.3714%" y="127.50"></text></g><g><title>needs_drop_raw (593,336 samples, 0.17%)</title><rect x="97.0753%" y="149" width="0.1743%" height="15" fill="rgb(229,81,49)"/><text x="97.3253%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,520,276 samples, 1.33%)</title><rect x="95.9610%" y="165" width="1.3281%" height="15" fill="rgb(236,28,36)"/><text x="96.2110%" y="175.50"></text></g><g><title>specialization_graph_of (432,584 samples, 0.13%)</title><rect x="97.3120%" y="149" width="0.1271%" height="15" fill="rgb(249,185,26)"/><text x="97.5620%" y="159.50"></text></g><g><title>resolve_instance (489,455 samples, 0.14%)</title><rect x="97.2963%" y="165" width="0.1438%" height="15" fill="rgb(249,174,33)"/><text x="97.5463%" y="175.50"></text></g><g><title>optimized_mir (9,516,128 samples, 2.80%)</title><rect x="94.6791%" y="181" width="2.7960%" height="15" fill="rgb(233,201,37)"/><text x="94.9291%" y="191.50">op..</text></g><g><title>generate_crate_metadata (22,258,723 samples, 6.54%)</title><rect x="91.0158%" y="197" width="6.5399%" height="15" fill="rgb(221,78,26)"/><text x="91.2658%" y="207.50">generate_..</text></g><g><title>hir_lowering (3,796,938 samples, 1.12%)</title><rect x="97.5557%" y="197" width="1.1156%" height="15" fill="rgb(250,127,30)"/><text x="97.8057%" y="207.50"></text></g><g><title>link_crate (1,808,178 samples, 0.53%)</title><rect x="98.6784%" y="181" width="0.5313%" height="15" fill="rgb(230,49,44)"/><text x="98.9284%" y="191.50"></text></g><g><title>link_binary (1,787,948 samples, 0.53%)</title><rect x="98.6843%" y="165" width="0.5253%" height="15" fill="rgb(229,67,23)"/><text x="98.9343%" y="175.50"></text></g><g><title>link_rlib (1,173,722 samples, 0.34%)</title><rect x="98.8648%" y="149" width="0.3449%" height="15" fill="rgb(249,83,47)"/><text x="99.1148%" y="159.50"></text></g><g><title>link (1,841,928 samples, 0.54%)</title><rect x="98.6713%" y="197" width="0.5412%" height="15" fill="rgb(215,43,3)"/><text x="98.9213%" y="207.50"></text></g><g><title>parse_crate (417,254 samples, 0.12%)</title><rect x="99.2125%" y="197" width="0.1226%" height="15" fill="rgb(238,154,13)"/><text x="99.4625%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,580,516 samples, 0.46%)</title><rect x="99.4000%" y="197" width="0.4644%" height="15" fill="rgb(219,56,2)"/><text x="99.6500%" y="207.50"></text></g><g><title>all (340,352,867 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (340,352,867 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (382,164 samples, 0.11%)</title><rect x="99.8877%" y="197" width="0.1123%" height="15" fill="rgb(250,79,13)"/><text x="100.1377%" y="207.50"></text></g></svg></svg>