<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (176,189,531 samples, 9.79%)</title><rect x="0.0624%" y="181" width="9.7911%" height="15" fill="rgb(227,0,7)"/><text x="0.3124%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (6,985,245 samples, 0.39%)</title><rect x="17.0622%" y="53" width="0.3882%" height="15" fill="rgb(217,0,24)"/><text x="17.3122%" y="63.50"></text></g><g><title>evaluate_obligation (5,712,316 samples, 0.32%)</title><rect x="17.1329%" y="37" width="0.3174%" height="15" fill="rgb(221,193,54)"/><text x="17.3829%" y="47.50"></text></g><g><title>needs_drop_raw (8,211,406 samples, 0.46%)</title><rect x="16.9953%" y="69" width="0.4563%" height="15" fill="rgb(248,212,6)"/><text x="17.2453%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,964,903 samples, 0.11%)</title><rect x="17.5188%" y="53" width="0.1092%" height="15" fill="rgb(208,68,35)"/><text x="17.7688%" y="63.50"></text></g><g><title>resolve_instance (4,546,990 samples, 0.25%)</title><rect x="17.4517%" y="69" width="0.2527%" height="15" fill="rgb(232,128,0)"/><text x="17.7017%" y="79.50"></text></g><g><title>thir_body (6,780,037 samples, 0.38%)</title><rect x="17.7166%" y="69" width="0.3768%" height="15" fill="rgb(207,160,47)"/><text x="17.9666%" y="79.50"></text></g><g><title>mir_const (53,085,522 samples, 2.95%)</title><rect x="15.1670%" y="117" width="2.9500%" height="15" fill="rgb(228,23,34)"/><text x="15.4170%" y="127.50">mir..</text></g><g><title>unsafety_check_result (45,961,930 samples, 2.55%)</title><rect x="15.5629%" y="101" width="2.5542%" height="15" fill="rgb(218,30,26)"/><text x="15.8129%" y="111.50">un..</text></g><g><title>mir_built (41,724,873 samples, 2.32%)</title><rect x="15.7984%" y="85" width="2.3187%" height="15" fill="rgb(220,122,19)"/><text x="16.0484%" y="95.50">m..</text></g><g><title>mir_promoted (59,131,890 samples, 3.29%)</title><rect x="14.8581%" y="133" width="3.2860%" height="15" fill="rgb(250,228,42)"/><text x="15.1081%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (3,541,994 samples, 0.20%)</title><rect x="18.1442%" y="133" width="0.1968%" height="15" fill="rgb(240,193,28)"/><text x="18.3942%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (6,482,202 samples, 0.36%)</title><rect x="18.3410%" y="133" width="0.3602%" height="15" fill="rgb(216,20,37)"/><text x="18.5910%" y="143.50"></text></g><g><title>normalize_projection_ty (3,773,135 samples, 0.21%)</title><rect x="18.4916%" y="117" width="0.2097%" height="15" fill="rgb(206,188,39)"/><text x="18.7416%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,047,971 samples, 0.11%)</title><rect x="18.7013%" y="133" width="0.1138%" height="15" fill="rgb(217,207,13)"/><text x="18.9513%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,086,468 samples, 0.84%)</title><rect x="18.8986%" y="133" width="0.8384%" height="15" fill="rgb(231,73,38)"/><text x="19.1486%" y="143.50"></text></g><g><title>MIR_borrow_checking (176,495,774 samples, 9.81%)</title><rect x="9.9304%" y="165" width="9.8081%" height="15" fill="rgb(225,20,46)"/><text x="10.1804%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (175,532,452 samples, 9.75%)</title><rect x="9.9839%" y="149" width="9.7545%" height="15" fill="rgb(210,31,41)"/><text x="10.2339%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (1,872,163 samples, 0.10%)</title><rect x="19.8974%" y="133" width="0.1040%" height="15" fill="rgb(221,200,47)"/><text x="20.1474%" y="143.50"></text></g><g><title>check_mod_attrs (3,179,443 samples, 0.18%)</title><rect x="19.8247%" y="149" width="0.1767%" height="15" fill="rgb(226,26,5)"/><text x="20.0747%" y="159.50"></text></g><g><title>misc_checking_1 (5,977,393 samples, 0.33%)</title><rect x="19.8222%" y="165" width="0.3322%" height="15" fill="rgb(249,33,26)"/><text x="20.0722%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,045,813 samples, 0.17%)</title><rect x="20.1545%" y="149" width="0.1693%" height="15" fill="rgb(235,183,28)"/><text x="20.4045%" y="159.50"></text></g><g><title>check_mod_liveness (2,566,278 samples, 0.14%)</title><rect x="20.1812%" y="133" width="0.1426%" height="15" fill="rgb(221,5,38)"/><text x="20.4312%" y="143.50"></text></g><g><title>misc_checking_2 (7,442,339 samples, 0.41%)</title><rect x="20.1544%" y="165" width="0.4136%" height="15" fill="rgb(247,18,42)"/><text x="20.4044%" y="175.50"></text></g><g><title>match_checking (4,394,706 samples, 0.24%)</title><rect x="20.3238%" y="149" width="0.2442%" height="15" fill="rgb(241,131,45)"/><text x="20.5738%" y="159.50"></text></g><g><title>check_match (4,159,214 samples, 0.23%)</title><rect x="20.3369%" y="133" width="0.2311%" height="15" fill="rgb(249,31,29)"/><text x="20.5869%" y="143.50"></text></g><g><title>crate_lints (4,807,452 samples, 0.27%)</title><rect x="20.7322%" y="133" width="0.2672%" height="15" fill="rgb(225,111,53)"/><text x="20.9822%" y="143.50"></text></g><g><title>lint_checking (7,576,151 samples, 0.42%)</title><rect x="20.7321%" y="149" width="0.4210%" height="15" fill="rgb(238,160,17)"/><text x="20.9821%" y="159.50"></text></g><g><title>module_lints (2,766,479 samples, 0.15%)</title><rect x="20.9993%" y="133" width="0.1537%" height="15" fill="rgb(214,148,48)"/><text x="21.2493%" y="143.50"></text></g><g><title>lint_mod (2,752,959 samples, 0.15%)</title><rect x="21.0001%" y="117" width="0.1530%" height="15" fill="rgb(232,36,49)"/><text x="21.2501%" y="127.50"></text></g><g><title>privacy_checking_modules (6,592,339 samples, 0.37%)</title><rect x="21.2340%" y="149" width="0.3663%" height="15" fill="rgb(209,103,24)"/><text x="21.4840%" y="159.50"></text></g><g><title>check_mod_privacy (6,583,319 samples, 0.37%)</title><rect x="21.2345%" y="133" width="0.3658%" height="15" fill="rgb(229,88,8)"/><text x="21.4845%" y="143.50"></text></g><g><title>misc_checking_3 (18,625,036 samples, 1.04%)</title><rect x="20.5680%" y="165" width="1.0350%" height="15" fill="rgb(213,181,19)"/><text x="20.8180%" y="175.50"></text></g><g><title>impl_parent (3,051,990 samples, 0.17%)</title><rect x="21.9360%" y="101" width="0.1696%" height="15" fill="rgb(254,191,54)"/><text x="22.1860%" y="111.50"></text></g><g><title>impl_trait_ref (7,193,173 samples, 0.40%)</title><rect x="22.1056%" y="101" width="0.3997%" height="15" fill="rgb(241,83,37)"/><text x="22.3556%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,703,176 samples, 0.32%)</title><rect x="22.1884%" y="85" width="0.3169%" height="15" fill="rgb(233,36,39)"/><text x="22.4384%" y="95.50"></text></g><g><title>coherent_trait (17,085,970 samples, 0.95%)</title><rect x="21.6255%" y="133" width="0.9495%" height="15" fill="rgb(226,3,54)"/><text x="21.8755%" y="143.50"></text></g><g><title>specialization_graph_of (16,724,517 samples, 0.93%)</title><rect x="21.6456%" y="117" width="0.9294%" height="15" fill="rgb(245,192,40)"/><text x="21.8956%" y="127.50"></text></g><g><title>coherence_checking (17,310,752 samples, 0.96%)</title><rect x="21.6236%" y="149" width="0.9620%" height="15" fill="rgb(238,167,29)"/><text x="21.8736%" y="159.50"></text></g><g><title>associated_items (1,806,627 samples, 0.10%)</title><rect x="30.8982%" y="101" width="0.1004%" height="15" fill="rgb(232,182,51)"/><text x="31.1482%" y="111.50"></text></g><g><title>dropck_outlives (2,825,191 samples, 0.16%)</title><rect x="31.0114%" y="101" width="0.1570%" height="15" fill="rgb(231,60,39)"/><text x="31.2614%" y="111.50"></text></g><g><title>evaluate_obligation (14,544,100 samples, 0.81%)</title><rect x="31.1684%" y="101" width="0.8082%" height="15" fill="rgb(208,69,12)"/><text x="31.4184%" y="111.50"></text></g><g><title>method_autoderef_steps (2,179,049 samples, 0.12%)</title><rect x="32.1357%" y="101" width="0.1211%" height="15" fill="rgb(235,93,37)"/><text x="32.3857%" y="111.50"></text></g><g><title>impl_trait_ref (1,827,278 samples, 0.10%)</title><rect x="34.5032%" y="69" width="0.1015%" height="15" fill="rgb(213,116,39)"/><text x="34.7532%" y="79.50"></text></g><g><title>specializes (2,365,122 samples, 0.13%)</title><rect x="34.6531%" y="69" width="0.1314%" height="15" fill="rgb(222,207,29)"/><text x="34.9031%" y="79.50"></text></g><g><title>evaluate_obligation (13,031,895 samples, 0.72%)</title><rect x="34.0682%" y="85" width="0.7242%" height="15" fill="rgb(206,96,30)"/><text x="34.3182%" y="95.50"></text></g><g><title>typeck (46,771,973 samples, 2.60%)</title><rect x="32.3518%" y="101" width="2.5992%" height="15" fill="rgb(218,138,4)"/><text x="32.6018%" y="111.50">ty..</text></g><g><title>item_bodies_checking (222,606,661 samples, 12.37%)</title><rect x="22.5948%" y="149" width="12.3705%" height="15" fill="rgb(250,191,14)"/><text x="22.8448%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (222,602,281 samples, 12.37%)</title><rect x="22.5951%" y="133" width="12.3703%" height="15" fill="rgb(239,60,40)"/><text x="22.8451%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (221,903,018 samples, 12.33%)</title><rect x="22.6339%" y="117" width="12.3314%" height="15" fill="rgb(206,27,48)"/><text x="22.8839%" y="127.50">typeck</text></g><g><title>item_types_checking (18,543,086 samples, 1.03%)</title><rect x="34.9653%" y="149" width="1.0305%" height="15" fill="rgb(225,35,8)"/><text x="35.2153%" y="159.50"></text></g><g><title>check_mod_item_types (18,529,686 samples, 1.03%)</title><rect x="34.9661%" y="133" width="1.0297%" height="15" fill="rgb(250,213,24)"/><text x="35.2161%" y="143.50"></text></g><g><title>fn_sig (2,993,684 samples, 0.17%)</title><rect x="36.0912%" y="117" width="0.1664%" height="15" fill="rgb(247,123,22)"/><text x="36.3412%" y="127.50"></text></g><g><title>is_late_bound_map (2,910,142 samples, 0.16%)</title><rect x="36.2987%" y="101" width="0.1617%" height="15" fill="rgb(231,138,38)"/><text x="36.5487%" y="111.50"></text></g><g><title>resolve_lifetimes (2,830,141 samples, 0.16%)</title><rect x="36.3032%" y="85" width="0.1573%" height="15" fill="rgb(231,145,46)"/><text x="36.5532%" y="95.50"></text></g><g><title>generics_of (4,094,451 samples, 0.23%)</title><rect x="36.2575%" y="117" width="0.2275%" height="15" fill="rgb(251,118,11)"/><text x="36.5075%" y="127.50"></text></g><g><title>predicates_of (3,177,190 samples, 0.18%)</title><rect x="36.4958%" y="117" width="0.1766%" height="15" fill="rgb(217,147,25)"/><text x="36.7458%" y="127.50"></text></g><g><title>predicates_defined_on (2,872,278 samples, 0.16%)</title><rect x="36.5128%" y="101" width="0.1596%" height="15" fill="rgb(247,81,37)"/><text x="36.7628%" y="111.50"></text></g><g><title>type_collecting (12,791,555 samples, 0.71%)</title><rect x="35.9961%" y="149" width="0.7108%" height="15" fill="rgb(209,12,38)"/><text x="36.2461%" y="159.50"></text></g><g><title>collect_mod_item_types (12,769,554 samples, 0.71%)</title><rect x="35.9974%" y="133" width="0.7096%" height="15" fill="rgb(227,1,9)"/><text x="36.2474%" y="143.50"></text></g><g><title>param_env (3,331,172 samples, 0.19%)</title><rect x="38.1662%" y="117" width="0.1851%" height="15" fill="rgb(248,47,43)"/><text x="38.4162%" y="127.50"></text></g><g><title>check_impl_item_well_formed (30,855,316 samples, 1.71%)</title><rect x="36.7829%" y="133" width="1.7147%" height="15" fill="rgb(221,10,30)"/><text x="37.0329%" y="143.50"></text></g><g><title>region_scope_tree (2,537,429 samples, 0.14%)</title><rect x="38.3565%" y="117" width="0.1410%" height="15" fill="rgb(210,229,1)"/><text x="38.6065%" y="127.50"></text></g><g><title>check_item_well_formed (8,597,408 samples, 0.48%)</title><rect x="38.4975%" y="133" width="0.4778%" height="15" fill="rgb(222,148,37)"/><text x="38.7475%" y="143.50"></text></g><g><title>analysis (524,881,124 samples, 29.17%)</title><rect x="9.8534%" y="181" width="29.1682%" height="15" fill="rgb(234,67,33)"/><text x="10.1034%" y="191.50">analysis</text></g><g><title>type_check_crate (313,447,761 samples, 17.42%)</title><rect x="21.6030%" y="165" width="17.4187%" height="15" fill="rgb(247,98,35)"/><text x="21.8530%" y="175.50">type_check_crate</text></g><g><title>wf_checking (41,605,870 samples, 2.31%)</title><rect x="36.7096%" y="149" width="2.3121%" height="15" fill="rgb(247,138,52)"/><text x="36.9596%" y="159.50">w..</text></g><g><title>compute_debuginfo_type_name (4,198,550 samples, 0.23%)</title><rect x="47.2425%" y="149" width="0.2333%" height="15" fill="rgb(213,79,30)"/><text x="47.4925%" y="159.50"></text></g><g><title>const_caller_location (2,367,957 samples, 0.13%)</title><rect x="47.4758%" y="149" width="0.1316%" height="15" fill="rgb(246,177,23)"/><text x="47.7258%" y="159.50"></text></g><g><title>layout_of (3,030,288 samples, 0.17%)</title><rect x="48.0934%" y="133" width="0.1684%" height="15" fill="rgb(230,62,27)"/><text x="48.3434%" y="143.50"></text></g><g><title>predicates_of (2,456,859 samples, 0.14%)</title><rect x="48.5361%" y="117" width="0.1365%" height="15" fill="rgb(216,154,8)"/><text x="48.7861%" y="127.50"></text></g><g><title>predicates_defined_on (1,828,510 samples, 0.10%)</title><rect x="48.5710%" y="101" width="0.1016%" height="15" fill="rgb(244,35,45)"/><text x="48.8210%" y="111.50"></text></g><g><title>param_env (7,410,613 samples, 0.41%)</title><rect x="48.2618%" y="133" width="0.4118%" height="15" fill="rgb(251,115,12)"/><text x="48.5118%" y="143.50"></text></g><g><title>fn_abi_of_instance (20,831,099 samples, 1.16%)</title><rect x="47.6100%" y="149" width="1.1576%" height="15" fill="rgb(240,54,50)"/><text x="47.8600%" y="159.50"></text></g><g><title>layout_of (4,290,617 samples, 0.24%)</title><rect x="48.8359%" y="149" width="0.2384%" height="15" fill="rgb(233,84,52)"/><text x="49.0859%" y="159.50"></text></g><g><title>codegen_module (180,454,356 samples, 10.03%)</title><rect x="39.1588%" y="165" width="10.0281%" height="15" fill="rgb(207,117,47)"/><text x="39.4088%" y="175.50">codegen_module</text></g><g><title>codegen_crate (182,994,942 samples, 10.17%)</title><rect x="39.0221%" y="181" width="10.1692%" height="15" fill="rgb(249,43,39)"/><text x="39.2721%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (629,288,766 samples, 34.97%)</title><rect x="49.2046%" y="165" width="34.9703%" height="15" fill="rgb(209,38,44)"/><text x="49.4546%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (604,681,798 samples, 33.60%)</title><rect x="50.5721%" y="149" width="33.6029%" height="15" fill="rgb(236,212,23)"/><text x="50.8221%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (666,880,361 samples, 37.06%)</title><rect x="49.1914%" y="181" width="37.0593%" height="15" fill="rgb(242,79,21)"/><text x="49.4414%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (37,352,862 samples, 2.08%)</title><rect x="84.1749%" y="165" width="2.0757%" height="15" fill="rgb(211,96,35)"/><text x="84.4249%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,691,398 samples, 0.15%)</title><rect x="89.7236%" y="133" width="0.1496%" height="15" fill="rgb(253,215,40)"/><text x="89.9736%" y="143.50"></text></g><g><title>macro_expand_crate (65,649,743 samples, 3.65%)</title><rect x="86.3201%" y="165" width="3.6482%" height="15" fill="rgb(211,81,21)"/><text x="86.5701%" y="175.50">macr..</text></g><g><title>expand_crate (65,635,353 samples, 3.65%)</title><rect x="86.3209%" y="149" width="3.6474%" height="15" fill="rgb(208,190,38)"/><text x="86.5709%" y="159.50">expa..</text></g><g><title>late_resolve_crate (8,560,661 samples, 0.48%)</title><rect x="89.9992%" y="149" width="0.4757%" height="15" fill="rgb(235,213,38)"/><text x="90.2492%" y="159.50"></text></g><g><title>configure_and_expand (76,662,970 samples, 4.26%)</title><rect x="86.2507%" y="181" width="4.2602%" height="15" fill="rgb(237,122,38)"/><text x="86.5007%" y="191.50">confi..</text></g><g><title>resolve_crate (9,694,563 samples, 0.54%)</title><rect x="89.9722%" y="165" width="0.5387%" height="15" fill="rgb(244,218,35)"/><text x="90.2222%" y="175.50"></text></g><g><title>early_lint_checks (1,991,061 samples, 0.11%)</title><rect x="90.5803%" y="181" width="0.1106%" height="15" fill="rgb(240,68,47)"/><text x="90.8303%" y="191.50"></text></g><g><title>free_global_ctxt (9,514,900 samples, 0.53%)</title><rect x="90.6910%" y="181" width="0.5288%" height="15" fill="rgb(210,16,53)"/><text x="90.9410%" y="191.50"></text></g><g><title>item_attrs (2,113,997 samples, 0.12%)</title><rect x="92.1783%" y="85" width="0.1175%" height="15" fill="rgb(235,124,12)"/><text x="92.4283%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,015,067 samples, 0.11%)</title><rect x="92.1838%" y="69" width="0.1120%" height="15" fill="rgb(224,169,11)"/><text x="92.4338%" y="79.50"></text></g><g><title>codegen_fn_attrs (3,708,184 samples, 0.21%)</title><rect x="92.1435%" y="101" width="0.2061%" height="15" fill="rgb(250,166,2)"/><text x="92.3935%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,870,132 samples, 0.27%)</title><rect x="92.7406%" y="85" width="0.2706%" height="15" fill="rgb(242,216,29)"/><text x="92.9906%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,128,802 samples, 0.29%)</title><rect x="93.0112%" y="85" width="0.2850%" height="15" fill="rgb(230,116,27)"/><text x="93.2612%" y="95.50"></text></g><g><title>optimized_mir (15,854,081 samples, 0.88%)</title><rect x="92.4424%" y="101" width="0.8810%" height="15" fill="rgb(228,99,48)"/><text x="92.6924%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (6,957,192 samples, 0.39%)</title><rect x="93.5532%" y="85" width="0.3866%" height="15" fill="rgb(253,11,6)"/><text x="93.8032%" y="95.50"></text></g><g><title>resolve_instance (15,063,701 samples, 0.84%)</title><rect x="93.3235%" y="101" width="0.8371%" height="15" fill="rgb(247,143,39)"/><text x="93.5735%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (46,732,244 samples, 2.60%)</title><rect x="91.7820%" y="117" width="2.5970%" height="15" fill="rgb(236,97,10)"/><text x="92.0320%" y="127.50">mo..</text></g><g><title>monomorphization_collector (46,938,526 samples, 2.61%)</title><rect x="91.7817%" y="133" width="2.6084%" height="15" fill="rgb(233,208,19)"/><text x="92.0317%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (6,093,464 samples, 0.34%)</title><rect x="94.3904%" y="117" width="0.3386%" height="15" fill="rgb(216,164,2)"/><text x="94.6404%" y="127.50"></text></g><g><title>symbol_name (5,487,637 samples, 0.30%)</title><rect x="94.4241%" y="101" width="0.3050%" height="15" fill="rgb(220,129,5)"/><text x="94.6741%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (55,701,168 samples, 3.10%)</title><rect x="91.7781%" y="149" width="3.0954%" height="15" fill="rgb(242,17,10)"/><text x="92.0281%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (8,698,192 samples, 0.48%)</title><rect x="94.3901%" y="133" width="0.4834%" height="15" fill="rgb(242,107,0)"/><text x="94.6401%" y="143.50"></text></g><g><title>cgu_partitioning (2,599,628 samples, 0.14%)</title><rect x="94.7291%" y="117" width="0.1445%" height="15" fill="rgb(251,28,31)"/><text x="94.9791%" y="127.50"></text></g><g><title>exported_symbols (56,830,780 samples, 3.16%)</title><rect x="91.7634%" y="165" width="3.1582%" height="15" fill="rgb(233,223,10)"/><text x="92.0134%" y="175.50">exp..</text></g><g><title>layout_of (3,121,572 samples, 0.17%)</title><rect x="95.9564%" y="149" width="0.1735%" height="15" fill="rgb(215,21,27)"/><text x="96.2064%" y="159.50"></text></g><g><title>is_copy_raw (3,193,555 samples, 0.18%)</title><rect x="97.6009%" y="117" width="0.1775%" height="15" fill="rgb(232,23,21)"/><text x="97.8509%" y="127.50"></text></g><g><title>evaluate_obligation (2,583,992 samples, 0.14%)</title><rect x="97.6348%" y="101" width="0.1436%" height="15" fill="rgb(244,5,23)"/><text x="97.8848%" y="111.50"></text></g><g><title>needs_drop_raw (3,588,787 samples, 0.20%)</title><rect x="97.5809%" y="133" width="0.1994%" height="15" fill="rgb(226,81,46)"/><text x="97.8309%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (30,415,406 samples, 1.69%)</title><rect x="96.1298%" y="149" width="1.6902%" height="15" fill="rgb(247,70,30)"/><text x="96.3798%" y="159.50"></text></g><g><title>optimized_mir (51,774,340 samples, 2.88%)</title><rect x="94.9468%" y="165" width="2.8772%" height="15" fill="rgb(212,68,19)"/><text x="95.1968%" y="175.50">op..</text></g><g><title>generate_crate_metadata (119,442,192 samples, 6.64%)</title><rect x="91.2197%" y="181" width="6.6375%" height="15" fill="rgb(240,187,13)"/><text x="91.4697%" y="191.50">generate_..</text></g><g><title>hir_lowering (17,816,798 samples, 0.99%)</title><rect x="97.8573%" y="181" width="0.9901%" height="15" fill="rgb(223,113,26)"/><text x="98.1073%" y="191.50"></text></g><g><title>finish_ongoing_codegen (9,398,889 samples, 0.52%)</title><rect x="98.8483%" y="165" width="0.5223%" height="15" fill="rgb(206,192,2)"/><text x="99.0983%" y="175.50"></text></g><g><title>link_crate (5,749,401 samples, 0.32%)</title><rect x="99.3706%" y="165" width="0.3195%" height="15" fill="rgb(241,108,4)"/><text x="99.6206%" y="175.50"></text></g><g><title>link_binary (5,627,130 samples, 0.31%)</title><rect x="99.3774%" y="149" width="0.3127%" height="15" fill="rgb(247,173,49)"/><text x="99.6274%" y="159.50"></text></g><g><title>link_rlib (4,438,247 samples, 0.25%)</title><rect x="99.4435%" y="133" width="0.2466%" height="15" fill="rgb(224,114,35)"/><text x="99.6935%" y="143.50"></text></g><g><title>link (15,179,100 samples, 0.84%)</title><rect x="98.8474%" y="181" width="0.8435%" height="15" fill="rgb(245,159,27)"/><text x="99.0974%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,658,459 samples, 0.20%)</title><rect x="99.7466%" y="181" width="0.2033%" height="15" fill="rgb(245,172,44)"/><text x="99.9966%" y="191.50"></text></g><g><title>all (1,799,494,904 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,799,494,904 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>