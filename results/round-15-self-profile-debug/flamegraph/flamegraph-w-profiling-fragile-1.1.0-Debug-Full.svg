<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (54,859,224 samples, 13.03%)</title><rect x="0.1396%" y="181" width="13.0271%" height="15" fill="rgb(227,0,7)"/><text x="0.3896%" y="191.50">LLVM_passes</text></g><g><title>item_attrs (604,524 samples, 0.14%)</title><rect x="17.1217%" y="69" width="0.1436%" height="15" fill="rgb(217,0,24)"/><text x="17.3717%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (595,604 samples, 0.14%)</title><rect x="17.1238%" y="53" width="0.1414%" height="15" fill="rgb(221,193,54)"/><text x="17.3738%" y="63.50"></text></g><g><title>codegen_fn_attrs (716,084 samples, 0.17%)</title><rect x="17.0987%" y="85" width="0.1700%" height="15" fill="rgb(248,212,6)"/><text x="17.3487%" y="95.50"></text></g><g><title>needs_drop_raw (904,693 samples, 0.21%)</title><rect x="17.8869%" y="69" width="0.2148%" height="15" fill="rgb(208,68,35)"/><text x="18.1369%" y="79.50"></text></g><g><title>is_copy_raw (620,781 samples, 0.15%)</title><rect x="17.9543%" y="53" width="0.1474%" height="15" fill="rgb(232,128,0)"/><text x="18.2043%" y="63.50"></text></g><g><title>evaluate_obligation (520,679 samples, 0.12%)</title><rect x="17.9781%" y="37" width="0.1236%" height="15" fill="rgb(207,160,47)"/><text x="18.2281%" y="47.50"></text></g><g><title>specialization_graph_of (1,076,760 samples, 0.26%)</title><rect x="18.1830%" y="53" width="0.2557%" height="15" fill="rgb(228,23,34)"/><text x="18.4330%" y="63.50"></text></g><g><title>impl_trait_ref (639,087 samples, 0.15%)</title><rect x="18.2869%" y="37" width="0.1518%" height="15" fill="rgb(218,30,26)"/><text x="18.5369%" y="47.50"></text></g><g><title>resolve_instance (1,491,215 samples, 0.35%)</title><rect x="18.1017%" y="69" width="0.3541%" height="15" fill="rgb(220,122,19)"/><text x="18.3517%" y="79.50"></text></g><g><title>thir_body (971,377 samples, 0.23%)</title><rect x="18.4656%" y="69" width="0.2307%" height="15" fill="rgb(250,228,42)"/><text x="18.7156%" y="79.50"></text></g><g><title>mir_const (8,604,196 samples, 2.04%)</title><rect x="16.6592%" y="117" width="2.0432%" height="15" fill="rgb(240,193,28)"/><text x="16.9092%" y="127.50">m..</text></g><g><title>unsafety_check_result (7,280,172 samples, 1.73%)</title><rect x="16.9736%" y="101" width="1.7288%" height="15" fill="rgb(216,20,37)"/><text x="17.2236%" y="111.50"></text></g><g><title>mir_built (6,037,240 samples, 1.43%)</title><rect x="17.2688%" y="85" width="1.4336%" height="15" fill="rgb(206,188,39)"/><text x="17.5188%" y="95.50"></text></g><g><title>mir_const_qualif (898,040 samples, 0.21%)</title><rect x="18.7024%" y="117" width="0.2133%" height="15" fill="rgb(217,207,13)"/><text x="18.9524%" y="127.50"></text></g><g><title>mir_promoted (10,462,985 samples, 2.48%)</title><rect x="16.4312%" y="133" width="2.4846%" height="15" fill="rgb(231,73,38)"/><text x="16.6812%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (493,305 samples, 0.12%)</title><rect x="18.9158%" y="133" width="0.1171%" height="15" fill="rgb(225,20,46)"/><text x="19.1658%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,524,624 samples, 0.60%)</title><rect x="19.0887%" y="133" width="0.5995%" height="15" fill="rgb(210,31,41)"/><text x="19.3387%" y="143.50"></text></g><g><title>MIR_borrow_checking (27,211,635 samples, 6.46%)</title><rect x="13.2273%" y="165" width="6.4618%" height="15" fill="rgb(221,200,47)"/><text x="13.4773%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (27,038,203 samples, 6.42%)</title><rect x="13.2685%" y="149" width="6.4206%" height="15" fill="rgb(226,26,5)"/><text x="13.5185%" y="159.50">mir_borr..</text></g><g><title>check_mod_attrs (545,206 samples, 0.13%)</title><rect x="19.8150%" y="149" width="0.1295%" height="15" fill="rgb(249,33,26)"/><text x="20.0650%" y="159.50"></text></g><g><title>misc_checking_1 (1,200,842 samples, 0.29%)</title><rect x="19.8102%" y="165" width="0.2852%" height="15" fill="rgb(235,183,28)"/><text x="20.0602%" y="175.50"></text></g><g><title>misc_checking_2 (863,048 samples, 0.20%)</title><rect x="20.0953%" y="165" width="0.2049%" height="15" fill="rgb(221,5,38)"/><text x="20.3453%" y="175.50"></text></g><g><title>match_checking (443,614 samples, 0.11%)</title><rect x="20.1949%" y="149" width="0.1053%" height="15" fill="rgb(247,18,42)"/><text x="20.4449%" y="159.50"></text></g><g><title>eval_to_allocation_raw (498,326 samples, 0.12%)</title><rect x="20.5971%" y="117" width="0.1183%" height="15" fill="rgb(241,131,45)"/><text x="20.8471%" y="127.50"></text></g><g><title>eval_to_allocation_raw (493,496 samples, 0.12%)</title><rect x="20.5983%" y="101" width="0.1172%" height="15" fill="rgb(249,31,29)"/><text x="20.8483%" y="111.50"></text></g><g><title>crate_lints (2,620,486 samples, 0.62%)</title><rect x="20.4385%" y="133" width="0.6223%" height="15" fill="rgb(225,111,53)"/><text x="20.6885%" y="143.50"></text></g><g><title>type_of (1,073,212 samples, 0.25%)</title><rect x="20.8059%" y="117" width="0.2549%" height="15" fill="rgb(238,160,17)"/><text x="21.0559%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (843,811 samples, 0.20%)</title><rect x="20.8604%" y="101" width="0.2004%" height="15" fill="rgb(214,148,48)"/><text x="21.1104%" y="111.50"></text></g><g><title>lint_checking (3,098,181 samples, 0.74%)</title><rect x="20.4382%" y="149" width="0.7357%" height="15" fill="rgb(232,36,49)"/><text x="20.6882%" y="159.50"></text></g><g><title>module_lints (476,335 samples, 0.11%)</title><rect x="21.0608%" y="133" width="0.1131%" height="15" fill="rgb(209,103,24)"/><text x="21.3108%" y="143.50"></text></g><g><title>lint_mod (471,295 samples, 0.11%)</title><rect x="21.0620%" y="117" width="0.1119%" height="15" fill="rgb(229,88,8)"/><text x="21.3120%" y="127.50"></text></g><g><title>privacy_checking_modules (890,049 samples, 0.21%)</title><rect x="21.2337%" y="149" width="0.2114%" height="15" fill="rgb(213,181,19)"/><text x="21.4837%" y="159.50"></text></g><g><title>check_mod_privacy (886,679 samples, 0.21%)</title><rect x="21.2345%" y="133" width="0.2106%" height="15" fill="rgb(254,191,54)"/><text x="21.4845%" y="143.50"></text></g><g><title>misc_checking_3 (4,836,949 samples, 1.15%)</title><rect x="20.3003%" y="165" width="1.1486%" height="15" fill="rgb(241,83,37)"/><text x="20.5503%" y="175.50"></text></g><g><title>impl_parent (2,607,065 samples, 0.62%)</title><rect x="22.4022%" y="101" width="0.6191%" height="15" fill="rgb(233,36,39)"/><text x="22.6522%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,412,876 samples, 0.34%)</title><rect x="22.6858%" y="85" width="0.3355%" height="15" fill="rgb(226,3,54)"/><text x="22.9358%" y="95.50"></text></g><g><title>impl_trait_ref (5,565,745 samples, 1.32%)</title><rect x="23.0219%" y="101" width="1.3217%" height="15" fill="rgb(245,192,40)"/><text x="23.2719%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,405,176 samples, 1.05%)</title><rect x="23.2975%" y="85" width="1.0461%" height="15" fill="rgb(238,167,29)"/><text x="23.5475%" y="95.50"></text></g><g><title>trait_impls_of (773,686 samples, 0.18%)</title><rect x="24.3537%" y="101" width="0.1837%" height="15" fill="rgb(232,182,51)"/><text x="24.6037%" y="111.50"></text></g><g><title>coherent_trait (12,921,080 samples, 3.07%)</title><rect x="21.4694%" y="133" width="3.0683%" height="15" fill="rgb(231,60,39)"/><text x="21.7194%" y="143.50">coh..</text></g><g><title>specialization_graph_of (12,897,189 samples, 3.06%)</title><rect x="21.4751%" y="117" width="3.0626%" height="15" fill="rgb(208,69,12)"/><text x="21.7251%" y="127.50">spe..</text></g><g><title>coherence_checking (12,985,791 samples, 3.08%)</title><rect x="21.4649%" y="149" width="3.0837%" height="15" fill="rgb(235,93,37)"/><text x="21.7149%" y="159.50">coh..</text></g><g><title>evaluate_obligation (699,838 samples, 0.17%)</title><rect x="28.1662%" y="101" width="0.1662%" height="15" fill="rgb(213,116,39)"/><text x="28.4162%" y="111.50"></text></g><g><title>method_autoderef_steps (474,684 samples, 0.11%)</title><rect x="28.4364%" y="101" width="0.1127%" height="15" fill="rgb(222,207,29)"/><text x="28.6864%" y="111.50"></text></g><g><title>evaluate_obligation (524,474 samples, 0.12%)</title><rect x="30.0616%" y="85" width="0.1245%" height="15" fill="rgb(206,96,30)"/><text x="30.3116%" y="95.50"></text></g><g><title>is_copy_raw (523,536 samples, 0.12%)</title><rect x="30.2284%" y="85" width="0.1243%" height="15" fill="rgb(218,138,4)"/><text x="30.4784%" y="95.50"></text></g><g><title>evaluate_obligation (452,093 samples, 0.11%)</title><rect x="30.2454%" y="69" width="0.1074%" height="15" fill="rgb(250,191,14)"/><text x="30.4954%" y="79.50"></text></g><g><title>typeck (7,653,648 samples, 1.82%)</title><rect x="28.6430%" y="101" width="1.8175%" height="15" fill="rgb(239,60,40)"/><text x="28.8930%" y="111.50">t..</text></g><g><title>item_bodies_checking (24,909,961 samples, 5.92%)</title><rect x="24.5575%" y="149" width="5.9152%" height="15" fill="rgb(206,27,48)"/><text x="24.8075%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (24,907,641 samples, 5.91%)</title><rect x="24.5580%" y="133" width="5.9147%" height="15" fill="rgb(225,35,8)"/><text x="24.8080%" y="143.50">typeck_i..</text></g><g><title>typeck (24,801,260 samples, 5.89%)</title><rect x="24.5833%" y="117" width="5.8894%" height="15" fill="rgb(250,213,24)"/><text x="24.8333%" y="127.50">typeck</text></g><g><title>item_types_checking (2,486,016 samples, 0.59%)</title><rect x="30.4727%" y="149" width="0.5903%" height="15" fill="rgb(247,123,22)"/><text x="30.7227%" y="159.50"></text></g><g><title>check_mod_item_types (2,480,806 samples, 0.59%)</title><rect x="30.4740%" y="133" width="0.5891%" height="15" fill="rgb(231,138,38)"/><text x="30.7240%" y="143.50"></text></g><g><title>typeck (1,028,601 samples, 0.24%)</title><rect x="30.8188%" y="117" width="0.2443%" height="15" fill="rgb(231,145,46)"/><text x="31.0688%" y="127.50"></text></g><g><title>predicates_of (965,050 samples, 0.23%)</title><rect x="31.3110%" y="117" width="0.2292%" height="15" fill="rgb(251,118,11)"/><text x="31.5610%" y="127.50"></text></g><g><title>predicates_defined_on (902,949 samples, 0.21%)</title><rect x="31.3257%" y="101" width="0.2144%" height="15" fill="rgb(217,147,25)"/><text x="31.5757%" y="111.50"></text></g><g><title>inferred_outlives_of (455,084 samples, 0.11%)</title><rect x="31.4321%" y="85" width="0.1081%" height="15" fill="rgb(247,81,37)"/><text x="31.6821%" y="95.50"></text></g><g><title>inferred_outlives_crate (432,064 samples, 0.10%)</title><rect x="31.4376%" y="69" width="0.1026%" height="15" fill="rgb(209,12,38)"/><text x="31.6876%" y="79.50"></text></g><g><title>type_collecting (2,129,141 samples, 0.51%)</title><rect x="31.0636%" y="149" width="0.5056%" height="15" fill="rgb(227,1,9)"/><text x="31.3136%" y="159.50"></text></g><g><title>collect_mod_item_types (2,117,411 samples, 0.50%)</title><rect x="31.0664%" y="133" width="0.5028%" height="15" fill="rgb(248,47,43)"/><text x="31.3164%" y="143.50"></text></g><g><title>evaluate_obligation (661,429 samples, 0.16%)</title><rect x="32.2084%" y="117" width="0.1571%" height="15" fill="rgb(221,10,30)"/><text x="32.4584%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,177,224 samples, 0.99%)</title><rect x="31.6241%" y="133" width="0.9919%" height="15" fill="rgb(210,229,1)"/><text x="31.8741%" y="143.50"></text></g><g><title>evaluate_obligation (568,735 samples, 0.14%)</title><rect x="33.0770%" y="117" width="0.1351%" height="15" fill="rgb(222,148,37)"/><text x="33.3270%" y="127.50"></text></g><g><title>analysis (85,582,984 samples, 20.32%)</title><rect x="13.1667%" y="181" width="20.3230%" height="15" fill="rgb(234,67,33)"/><text x="13.4167%" y="191.50">analysis</text></g><g><title>type_check_crate (50,705,672 samples, 12.04%)</title><rect x="21.4489%" y="165" width="12.0408%" height="15" fill="rgb(247,98,35)"/><text x="21.6989%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,080,911 samples, 1.92%)</title><rect x="31.5708%" y="149" width="1.9189%" height="15" fill="rgb(247,138,52)"/><text x="31.8208%" y="159.50">w..</text></g><g><title>check_item_well_formed (3,679,055 samples, 0.87%)</title><rect x="32.6161%" y="133" width="0.8736%" height="15" fill="rgb(213,79,30)"/><text x="32.8661%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,406,564 samples, 0.33%)</title><rect x="42.3529%" y="149" width="0.3340%" height="15" fill="rgb(246,177,23)"/><text x="42.6029%" y="159.50"></text></g><g><title>codegen_fn_attrs (435,563 samples, 0.10%)</title><rect x="43.1840%" y="133" width="0.1034%" height="15" fill="rgb(230,62,27)"/><text x="43.4340%" y="143.50"></text></g><g><title>layout_of (984,690 samples, 0.23%)</title><rect x="43.3009%" y="133" width="0.2338%" height="15" fill="rgb(216,154,8)"/><text x="43.5509%" y="143.50"></text></g><g><title>predicates_of (775,065 samples, 0.18%)</title><rect x="43.8872%" y="117" width="0.1841%" height="15" fill="rgb(244,35,45)"/><text x="44.1372%" y="127.50"></text></g><g><title>predicates_defined_on (554,115 samples, 0.13%)</title><rect x="43.9397%" y="101" width="0.1316%" height="15" fill="rgb(251,115,12)"/><text x="44.1897%" y="111.50"></text></g><g><title>param_env (2,264,448 samples, 0.54%)</title><rect x="43.5347%" y="133" width="0.5377%" height="15" fill="rgb(240,54,50)"/><text x="43.7847%" y="143.50"></text></g><g><title>normalize_projection_ty (482,766 samples, 0.11%)</title><rect x="44.0980%" y="117" width="0.1146%" height="15" fill="rgb(233,84,52)"/><text x="44.3480%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (593,768 samples, 0.14%)</title><rect x="44.0724%" y="133" width="0.1410%" height="15" fill="rgb(207,117,47)"/><text x="44.3224%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,017,895 samples, 1.43%)</title><rect x="42.7866%" y="149" width="1.4290%" height="15" fill="rgb(249,43,39)"/><text x="43.0366%" y="159.50"></text></g><g><title>layout_of (1,014,892 samples, 0.24%)</title><rect x="44.3054%" y="149" width="0.2410%" height="15" fill="rgb(209,38,44)"/><text x="44.5554%" y="159.50"></text></g><g><title>codegen_module (43,823,042 samples, 10.41%)</title><rect x="34.1867%" y="165" width="10.4064%" height="15" fill="rgb(236,212,23)"/><text x="34.4367%" y="175.50">codegen_module</text></g><g><title>codegen_crate (46,819,482 samples, 11.12%)</title><rect x="33.4918%" y="181" width="11.1180%" height="15" fill="rgb(242,79,21)"/><text x="33.7418%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (156,771,711 samples, 37.23%)</title><rect x="44.6493%" y="165" width="37.2278%" height="15" fill="rgb(211,96,35)"/><text x="44.8993%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (147,510,959 samples, 35.03%)</title><rect x="46.8484%" y="149" width="35.0287%" height="15" fill="rgb(253,215,40)"/><text x="47.0984%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (167,484,410 samples, 39.77%)</title><rect x="44.6098%" y="181" width="39.7717%" height="15" fill="rgb(211,81,21)"/><text x="44.8598%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,546,547 samples, 2.50%)</title><rect x="81.8771%" y="165" width="2.5044%" height="15" fill="rgb(208,190,38)"/><text x="82.1271%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,685,217 samples, 0.64%)</title><rect x="89.0651%" y="133" width="0.6376%" height="15" fill="rgb(235,213,38)"/><text x="89.3151%" y="143.50"></text></g><g><title>metadata_register_crate (972,120 samples, 0.23%)</title><rect x="89.4719%" y="117" width="0.2308%" height="15" fill="rgb(237,122,38)"/><text x="89.7219%" y="127.50"></text></g><g><title>macro_expand_crate (22,475,307 samples, 5.34%)</title><rect x="84.4872%" y="165" width="5.3371%" height="15" fill="rgb(244,218,35)"/><text x="84.7372%" y="175.50">macro_e..</text></g><g><title>expand_crate (22,458,507 samples, 5.33%)</title><rect x="84.4912%" y="149" width="5.3331%" height="15" fill="rgb(240,68,47)"/><text x="84.7412%" y="159.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (511,796 samples, 0.12%)</title><rect x="89.7028%" y="133" width="0.1215%" height="15" fill="rgb(210,16,53)"/><text x="89.9528%" y="143.50"></text></g><g><title>late_resolve_crate (1,429,794 samples, 0.34%)</title><rect x="89.8610%" y="149" width="0.3395%" height="15" fill="rgb(235,124,12)"/><text x="90.1110%" y="159.50"></text></g><g><title>configure_and_expand (24,585,618 samples, 5.84%)</title><rect x="84.3815%" y="181" width="5.8382%" height="15" fill="rgb(224,169,11)"/><text x="84.6315%" y="191.50">configu..</text></g><g><title>resolve_crate (1,614,376 samples, 0.38%)</title><rect x="89.8364%" y="165" width="0.3834%" height="15" fill="rgb(250,166,2)"/><text x="90.0864%" y="175.50"></text></g><g><title>free_global_ctxt (6,324,683 samples, 1.50%)</title><rect x="90.3412%" y="181" width="1.5019%" height="15" fill="rgb(242,216,29)"/><text x="90.5912%" y="191.50"></text></g><g><title>item_attrs (607,116 samples, 0.14%)</title><rect x="92.6424%" y="85" width="0.1442%" height="15" fill="rgb(230,116,27)"/><text x="92.8924%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (580,726 samples, 0.14%)</title><rect x="92.6486%" y="69" width="0.1379%" height="15" fill="rgb(228,99,48)"/><text x="92.8986%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,211,130 samples, 0.29%)</title><rect x="92.6030%" y="101" width="0.2876%" height="15" fill="rgb(253,11,6)"/><text x="92.8530%" y="111.50"></text></g><g><title>should_inherit_track_caller (438,244 samples, 0.10%)</title><rect x="92.7865%" y="85" width="0.1041%" height="15" fill="rgb(247,143,39)"/><text x="93.0365%" y="95.50"></text></g><g><title>mir_shims (422,382 samples, 0.10%)</title><rect x="92.9710%" y="101" width="0.1003%" height="15" fill="rgb(236,97,10)"/><text x="93.2210%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,077,207 samples, 0.26%)</title><rect x="93.2183%" y="85" width="0.2558%" height="15" fill="rgb(233,208,19)"/><text x="93.4683%" y="95.50"></text></g><g><title>optimized_mir (2,144,898 samples, 0.51%)</title><rect x="93.0714%" y="101" width="0.5093%" height="15" fill="rgb(216,164,2)"/><text x="93.3214%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,037,682 samples, 0.25%)</title><rect x="93.6965%" y="85" width="0.2464%" height="15" fill="rgb(220,129,5)"/><text x="93.9465%" y="95.50"></text></g><g><title>resolve_instance (2,257,380 samples, 0.54%)</title><rect x="93.5807%" y="101" width="0.5360%" height="15" fill="rgb(242,17,10)"/><text x="93.8307%" y="111.50"></text></g><g><title>eval_to_const_value_raw (505,914 samples, 0.12%)</title><rect x="94.1238%" y="85" width="0.1201%" height="15" fill="rgb(242,107,0)"/><text x="94.3738%" y="95.50"></text></g><g><title>eval_to_const_value_raw (493,534 samples, 0.12%)</title><rect x="94.1267%" y="69" width="0.1172%" height="15" fill="rgb(251,28,31)"/><text x="94.3767%" y="79.50"></text></g><g><title>eval_to_allocation_raw (483,844 samples, 0.11%)</title><rect x="94.1290%" y="53" width="0.1149%" height="15" fill="rgb(233,223,10)"/><text x="94.3790%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (540,866 samples, 0.13%)</title><rect x="94.1168%" y="101" width="0.1284%" height="15" fill="rgb(215,21,27)"/><text x="94.3668%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (8,426,836 samples, 2.00%)</title><rect x="92.2893%" y="117" width="2.0011%" height="15" fill="rgb(232,23,21)"/><text x="92.5393%" y="127.50">m..</text></g><g><title>monomorphization_collector (8,468,356 samples, 2.01%)</title><rect x="92.2887%" y="133" width="2.0109%" height="15" fill="rgb(244,5,23)"/><text x="92.5387%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (1,205,933 samples, 0.29%)</title><rect x="94.3020%" y="117" width="0.2864%" height="15" fill="rgb(226,81,46)"/><text x="94.5520%" y="127.50"></text></g><g><title>symbol_name (1,089,022 samples, 0.26%)</title><rect x="94.3297%" y="101" width="0.2586%" height="15" fill="rgb(247,70,30)"/><text x="94.5797%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (10,288,134 samples, 2.44%)</title><rect x="92.2805%" y="149" width="2.4431%" height="15" fill="rgb(212,68,19)"/><text x="92.5305%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,785,238 samples, 0.42%)</title><rect x="94.2997%" y="133" width="0.4239%" height="15" fill="rgb(240,187,13)"/><text x="94.5497%" y="143.50"></text></g><g><title>cgu_partitioning (569,555 samples, 0.14%)</title><rect x="94.5883%" y="117" width="0.1352%" height="15" fill="rgb(223,113,26)"/><text x="94.8383%" y="127.50"></text></g><g><title>exported_symbols (10,446,875 samples, 2.48%)</title><rect x="92.2683%" y="165" width="2.4808%" height="15" fill="rgb(206,192,2)"/><text x="92.5183%" y="175.50">ex..</text></g><g><title>layout_of (657,135 samples, 0.16%)</title><rect x="95.4852%" y="149" width="0.1560%" height="15" fill="rgb(241,108,4)"/><text x="95.7352%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,471,114 samples, 0.82%)</title><rect x="95.6413%" y="149" width="0.8243%" height="15" fill="rgb(247,173,49)"/><text x="95.8913%" y="159.50"></text></g><g><title>optimized_mir (7,156,802 samples, 1.70%)</title><rect x="94.7702%" y="165" width="1.6995%" height="15" fill="rgb(224,114,35)"/><text x="95.0202%" y="175.50"></text></g><g><title>generate_crate_metadata (19,674,829 samples, 4.67%)</title><rect x="91.8431%" y="181" width="4.6721%" height="15" fill="rgb(245,159,27)"/><text x="92.0931%" y="191.50">gener..</text></g><g><title>hir_lowering (2,327,193 samples, 0.55%)</title><rect x="96.5152%" y="181" width="0.5526%" height="15" fill="rgb(245,172,44)"/><text x="96.7652%" y="191.50"></text></g><g><title>finish_ongoing_codegen (5,169,323 samples, 1.23%)</title><rect x="97.0719%" y="165" width="1.2275%" height="15" fill="rgb(236,23,11)"/><text x="97.3219%" y="175.50"></text></g><g><title>link_binary_remove_temps (469,475 samples, 0.11%)</title><rect x="98.4162%" y="133" width="0.1115%" height="15" fill="rgb(205,117,38)"/><text x="98.6662%" y="143.50"></text></g><g><title>link_crate (3,134,752 samples, 0.74%)</title><rect x="98.2994%" y="165" width="0.7444%" height="15" fill="rgb(237,72,25)"/><text x="98.5494%" y="175.50"></text></g><g><title>link_binary (3,088,191 samples, 0.73%)</title><rect x="98.3104%" y="149" width="0.7333%" height="15" fill="rgb(244,70,9)"/><text x="98.5604%" y="159.50"></text></g><g><title>link_rlib (2,173,442 samples, 0.52%)</title><rect x="98.5277%" y="133" width="0.5161%" height="15" fill="rgb(217,125,39)"/><text x="98.7777%" y="143.50"></text></g><g><title>link (8,332,935 samples, 1.98%)</title><rect x="97.0678%" y="181" width="1.9788%" height="15" fill="rgb(235,36,10)"/><text x="97.3178%" y="191.50">l..</text></g><g><title>self_profile_alloc_query_strings (3,064,971 samples, 0.73%)</title><rect x="99.1778%" y="181" width="0.7278%" height="15" fill="rgb(251,123,47)"/><text x="99.4278%" y="191.50"></text></g><g><title>all (421,114,559 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (421,114,559 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>