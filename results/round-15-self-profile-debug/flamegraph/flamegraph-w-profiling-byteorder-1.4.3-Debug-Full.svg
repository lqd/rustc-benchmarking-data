<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (25,004,691 samples, 5.40%)</title><rect x="0.1717%" y="181" width="5.4003%" height="15" fill="rgb(227,0,7)"/><text x="0.4217%" y="191.50">LLVM_pa..</text></g><g><title>codegen_fn_attrs (520,964 samples, 0.11%)</title><rect x="14.0130%" y="85" width="0.1125%" height="15" fill="rgb(217,0,24)"/><text x="14.2630%" y="95.50"></text></g><g><title>is_copy_raw (678,545 samples, 0.15%)</title><rect x="15.8964%" y="69" width="0.1465%" height="15" fill="rgb(221,193,54)"/><text x="16.1464%" y="79.50"></text></g><g><title>evaluate_obligation (501,464 samples, 0.11%)</title><rect x="15.9347%" y="53" width="0.1083%" height="15" fill="rgb(248,212,6)"/><text x="16.1847%" y="63.50"></text></g><g><title>needs_drop_raw (1,109,371 samples, 0.24%)</title><rect x="16.0437%" y="69" width="0.2396%" height="15" fill="rgb(208,68,35)"/><text x="16.2937%" y="79.50"></text></g><g><title>is_copy_raw (787,049 samples, 0.17%)</title><rect x="16.1133%" y="53" width="0.1700%" height="15" fill="rgb(232,128,0)"/><text x="16.3633%" y="63.50"></text></g><g><title>evaluate_obligation (682,477 samples, 0.15%)</title><rect x="16.1359%" y="37" width="0.1474%" height="15" fill="rgb(207,160,47)"/><text x="16.3859%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (486,076 samples, 0.10%)</title><rect x="16.3654%" y="53" width="0.1050%" height="15" fill="rgb(228,23,34)"/><text x="16.6154%" y="63.50"></text></g><g><title>specialization_graph_of (1,004,289 samples, 0.22%)</title><rect x="16.4765%" y="53" width="0.2169%" height="15" fill="rgb(218,30,26)"/><text x="16.7265%" y="63.50"></text></g><g><title>impl_trait_ref (476,115 samples, 0.10%)</title><rect x="16.5906%" y="37" width="0.1028%" height="15" fill="rgb(220,122,19)"/><text x="16.8406%" y="47.50"></text></g><g><title>resolve_instance (1,989,750 samples, 0.43%)</title><rect x="16.2832%" y="69" width="0.4297%" height="15" fill="rgb(250,228,42)"/><text x="16.5332%" y="79.50"></text></g><g><title>thir_body (3,478,747 samples, 0.75%)</title><rect x="16.7250%" y="69" width="0.7513%" height="15" fill="rgb(240,193,28)"/><text x="16.9750%" y="79.50"></text></g><g><title>mir_const (19,938,895 samples, 4.31%)</title><rect x="13.1778%" y="117" width="4.3062%" height="15" fill="rgb(216,20,37)"/><text x="13.4278%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (17,361,882 samples, 3.75%)</title><rect x="13.7344%" y="101" width="3.7496%" height="15" fill="rgb(206,188,39)"/><text x="13.9844%" y="111.50">unsa..</text></g><g><title>mir_built (15,550,852 samples, 3.36%)</title><rect x="14.1255%" y="85" width="3.3585%" height="15" fill="rgb(217,207,13)"/><text x="14.3755%" y="95.50">mir..</text></g><g><title>mir_promoted (23,508,837 samples, 5.08%)</title><rect x="12.6879%" y="133" width="5.0772%" height="15" fill="rgb(231,73,38)"/><text x="12.9379%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (1,301,582 samples, 0.28%)</title><rect x="17.4840%" y="117" width="0.2811%" height="15" fill="rgb(225,20,46)"/><text x="17.7340%" y="127.50"></text></g><g><title>mir_const (984,129 samples, 0.21%)</title><rect x="17.5526%" y="101" width="0.2125%" height="15" fill="rgb(210,31,41)"/><text x="17.8026%" y="111.50"></text></g><g><title>unsafety_check_result (676,896 samples, 0.15%)</title><rect x="17.6189%" y="85" width="0.1462%" height="15" fill="rgb(221,200,47)"/><text x="17.8689%" y="95.50"></text></g><g><title>mir_built (555,665 samples, 0.12%)</title><rect x="17.6451%" y="69" width="0.1200%" height="15" fill="rgb(226,26,5)"/><text x="17.8951%" y="79.50"></text></g><g><title>type_op_normalize_fn_sig (1,516,098 samples, 0.33%)</title><rect x="17.7789%" y="133" width="0.3274%" height="15" fill="rgb(249,33,26)"/><text x="18.0289%" y="143.50"></text></g><g><title>normalize_projection_ty (973,952 samples, 0.21%)</title><rect x="17.8960%" y="117" width="0.2103%" height="15" fill="rgb(235,183,28)"/><text x="18.1460%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,613,550 samples, 0.78%)</title><rect x="18.1203%" y="133" width="0.7804%" height="15" fill="rgb(221,5,38)"/><text x="18.3703%" y="143.50"></text></g><g><title>MIR_borrow_checking (61,098,053 samples, 13.20%)</title><rect x="5.7058%" y="165" width="13.1953%" height="15" fill="rgb(247,18,42)"/><text x="5.9558%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (60,725,451 samples, 13.11%)</title><rect x="5.7863%" y="149" width="13.1148%" height="15" fill="rgb(241,131,45)"/><text x="6.0363%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (689,897 samples, 0.15%)</title><rect x="18.9011%" y="165" width="0.1490%" height="15" fill="rgb(249,31,29)"/><text x="19.1511%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (497,176 samples, 0.11%)</title><rect x="18.9428%" y="149" width="0.1074%" height="15" fill="rgb(225,111,53)"/><text x="19.1928%" y="159.50"></text></g><g><title>codegen_fn_attrs (651,779 samples, 0.14%)</title><rect x="19.2531%" y="133" width="0.1408%" height="15" fill="rgb(238,160,17)"/><text x="19.5031%" y="143.50"></text></g><g><title>check_mod_attrs (1,220,103 samples, 0.26%)</title><rect x="19.1304%" y="149" width="0.2635%" height="15" fill="rgb(214,148,48)"/><text x="19.3804%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (475,085 samples, 0.10%)</title><rect x="19.4775%" y="149" width="0.1026%" height="15" fill="rgb(232,36,49)"/><text x="19.7275%" y="159.50"></text></g><g><title>misc_checking_1 (2,155,262 samples, 0.47%)</title><rect x="19.1257%" y="165" width="0.4655%" height="15" fill="rgb(209,103,24)"/><text x="19.3757%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,323,433 samples, 0.29%)</title><rect x="19.5915%" y="149" width="0.2858%" height="15" fill="rgb(229,88,8)"/><text x="19.8415%" y="159.50"></text></g><g><title>check_mod_liveness (1,133,980 samples, 0.24%)</title><rect x="19.6324%" y="133" width="0.2449%" height="15" fill="rgb(213,181,19)"/><text x="19.8824%" y="143.50"></text></g><g><title>misc_checking_2 (2,579,286 samples, 0.56%)</title><rect x="19.5912%" y="165" width="0.5570%" height="15" fill="rgb(254,191,54)"/><text x="19.8412%" y="175.50"></text></g><g><title>match_checking (1,254,313 samples, 0.27%)</title><rect x="19.8773%" y="149" width="0.2709%" height="15" fill="rgb(241,83,37)"/><text x="20.1273%" y="159.50"></text></g><g><title>check_match (1,173,983 samples, 0.25%)</title><rect x="19.8947%" y="133" width="0.2535%" height="15" fill="rgb(233,36,39)"/><text x="20.1447%" y="143.50"></text></g><g><title>death_checking (704,007 samples, 0.15%)</title><rect x="20.2178%" y="149" width="0.1520%" height="15" fill="rgb(226,3,54)"/><text x="20.4678%" y="159.50"></text></g><g><title>crate_lints (2,461,185 samples, 0.53%)</title><rect x="20.3702%" y="133" width="0.5315%" height="15" fill="rgb(245,192,40)"/><text x="20.6202%" y="143.50"></text></g><g><title>type_of (1,103,854 samples, 0.24%)</title><rect x="20.6634%" y="117" width="0.2384%" height="15" fill="rgb(238,167,29)"/><text x="20.9134%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (871,984 samples, 0.19%)</title><rect x="20.7135%" y="101" width="0.1883%" height="15" fill="rgb(232,182,51)"/><text x="20.9635%" y="111.50"></text></g><g><title>lint_checking (3,452,675 samples, 0.75%)</title><rect x="20.3698%" y="149" width="0.7457%" height="15" fill="rgb(231,60,39)"/><text x="20.6198%" y="159.50"></text></g><g><title>module_lints (989,670 samples, 0.21%)</title><rect x="20.9018%" y="133" width="0.2137%" height="15" fill="rgb(208,69,12)"/><text x="21.1518%" y="143.50"></text></g><g><title>lint_mod (984,960 samples, 0.21%)</title><rect x="20.9028%" y="117" width="0.2127%" height="15" fill="rgb(235,93,37)"/><text x="21.1528%" y="127.50"></text></g><g><title>privacy_access_levels (614,386 samples, 0.13%)</title><rect x="21.1155%" y="149" width="0.1327%" height="15" fill="rgb(213,116,39)"/><text x="21.3655%" y="159.50"></text></g><g><title>privacy_checking_modules (1,530,675 samples, 0.33%)</title><rect x="21.2482%" y="149" width="0.3306%" height="15" fill="rgb(222,207,29)"/><text x="21.4982%" y="159.50"></text></g><g><title>check_mod_privacy (1,527,485 samples, 0.33%)</title><rect x="21.2489%" y="133" width="0.3299%" height="15" fill="rgb(206,96,30)"/><text x="21.4989%" y="143.50"></text></g><g><title>misc_checking_3 (6,662,616 samples, 1.44%)</title><rect x="20.1482%" y="165" width="1.4389%" height="15" fill="rgb(218,138,4)"/><text x="20.3982%" y="175.50"></text></g><g><title>impl_parent (2,568,227 samples, 0.55%)</title><rect x="22.6079%" y="101" width="0.5547%" height="15" fill="rgb(250,191,14)"/><text x="22.8579%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,489,444 samples, 0.32%)</title><rect x="22.8409%" y="85" width="0.3217%" height="15" fill="rgb(239,60,40)"/><text x="23.0909%" y="95.50"></text></g><g><title>impl_trait_ref (5,424,493 samples, 1.17%)</title><rect x="23.1625%" y="101" width="1.1715%" height="15" fill="rgb(206,27,48)"/><text x="23.4125%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,126,571 samples, 0.89%)</title><rect x="23.4429%" y="85" width="0.8912%" height="15" fill="rgb(225,35,8)"/><text x="23.6929%" y="95.50"></text></g><g><title>coherent_trait (13,407,426 samples, 2.90%)</title><rect x="21.6217%" y="133" width="2.8956%" height="15" fill="rgb(250,213,24)"/><text x="21.8717%" y="143.50">co..</text></g><g><title>specialization_graph_of (12,921,052 samples, 2.79%)</title><rect x="21.7268%" y="117" width="2.7906%" height="15" fill="rgb(247,123,22)"/><text x="21.9768%" y="127.50">sp..</text></g><g><title>trait_impls_of (846,560 samples, 0.18%)</title><rect x="24.3345%" y="101" width="0.1828%" height="15" fill="rgb(231,138,38)"/><text x="24.5845%" y="111.50"></text></g><g><title>coherence_checking (13,490,136 samples, 2.91%)</title><rect x="21.6167%" y="149" width="2.9135%" height="15" fill="rgb(231,145,46)"/><text x="21.8667%" y="159.50">co..</text></g><g><title>associated_item (866,151 samples, 0.19%)</title><rect x="39.0680%" y="85" width="0.1871%" height="15" fill="rgb(251,118,11)"/><text x="39.3180%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (674,517 samples, 0.15%)</title><rect x="39.1094%" y="69" width="0.1457%" height="15" fill="rgb(217,147,25)"/><text x="39.3594%" y="79.50"></text></g><g><title>associated_items (1,217,132 samples, 0.26%)</title><rect x="39.0022%" y="101" width="0.2629%" height="15" fill="rgb(247,81,37)"/><text x="39.2522%" y="111.50"></text></g><g><title>dropck_outlives (579,646 samples, 0.13%)</title><rect x="39.2814%" y="101" width="0.1252%" height="15" fill="rgb(209,12,38)"/><text x="39.5314%" y="111.50"></text></g><g><title>eval_to_const_value_raw (490,433 samples, 0.11%)</title><rect x="39.4066%" y="101" width="0.1059%" height="15" fill="rgb(227,1,9)"/><text x="39.6566%" y="111.50"></text></g><g><title>generics_of (1,340,228 samples, 0.29%)</title><rect x="41.0090%" y="85" width="0.2894%" height="15" fill="rgb(248,47,43)"/><text x="41.2590%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,033,415 samples, 0.22%)</title><rect x="41.0752%" y="69" width="0.2232%" height="15" fill="rgb(221,10,30)"/><text x="41.3252%" y="79.50"></text></g><g><title>impl_trait_ref (1,373,970 samples, 0.30%)</title><rect x="41.3629%" y="85" width="0.2967%" height="15" fill="rgb(210,229,1)"/><text x="41.6129%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,129,777 samples, 0.24%)</title><rect x="41.4156%" y="69" width="0.2440%" height="15" fill="rgb(222,148,37)"/><text x="41.6656%" y="79.50"></text></g><g><title>predicates_of (1,124,640 samples, 0.24%)</title><rect x="41.6743%" y="85" width="0.2429%" height="15" fill="rgb(234,67,33)"/><text x="41.9243%" y="95.50"></text></g><g><title>predicates_defined_on (626,866 samples, 0.14%)</title><rect x="41.7818%" y="69" width="0.1354%" height="15" fill="rgb(247,98,35)"/><text x="42.0318%" y="79.50"></text></g><g><title>specializes (3,277,362 samples, 0.71%)</title><rect x="41.9172%" y="85" width="0.7078%" height="15" fill="rgb(247,138,52)"/><text x="42.1672%" y="95.50"></text></g><g><title>param_env (1,769,706 samples, 0.38%)</title><rect x="42.2428%" y="69" width="0.3822%" height="15" fill="rgb(213,79,30)"/><text x="42.4928%" y="79.50"></text></g><g><title>def_span (788,388 samples, 0.17%)</title><rect x="42.4547%" y="53" width="0.1703%" height="15" fill="rgb(246,177,23)"/><text x="42.7047%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (696,968 samples, 0.15%)</title><rect x="42.4744%" y="37" width="0.1505%" height="15" fill="rgb(230,62,27)"/><text x="42.7244%" y="47.50"></text></g><g><title>trait_impls_of (581,854 samples, 0.13%)</title><rect x="42.6285%" y="85" width="0.1257%" height="15" fill="rgb(216,154,8)"/><text x="42.8785%" y="95.50"></text></g><g><title>evaluate_obligation (15,046,378 samples, 3.25%)</title><rect x="39.5125%" y="101" width="3.2496%" height="15" fill="rgb(244,35,45)"/><text x="39.7625%" y="111.50">eva..</text></g><g><title>generics_of (725,597 samples, 0.16%)</title><rect x="42.8023%" y="101" width="0.1567%" height="15" fill="rgb(251,115,12)"/><text x="43.0523%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (568,797 samples, 0.12%)</title><rect x="42.8362%" y="85" width="0.1228%" height="15" fill="rgb(240,54,50)"/><text x="43.0862%" y="95.50"></text></g><g><title>item_attrs (686,215 samples, 0.15%)</title><rect x="43.0427%" y="101" width="0.1482%" height="15" fill="rgb(233,84,52)"/><text x="43.2927%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (677,195 samples, 0.15%)</title><rect x="43.0447%" y="85" width="0.1463%" height="15" fill="rgb(207,117,47)"/><text x="43.2947%" y="95.50"></text></g><g><title>method_autoderef_steps (514,424 samples, 0.11%)</title><rect x="43.2213%" y="101" width="0.1111%" height="15" fill="rgb(249,43,39)"/><text x="43.4713%" y="111.50"></text></g><g><title>param_env (1,178,074 samples, 0.25%)</title><rect x="43.3529%" y="101" width="0.2544%" height="15" fill="rgb(209,38,44)"/><text x="43.6029%" y="111.50"></text></g><g><title>predicates_of (512,056 samples, 0.11%)</title><rect x="43.4968%" y="85" width="0.1106%" height="15" fill="rgb(236,212,23)"/><text x="43.7468%" y="95.50"></text></g><g><title>predicates_of (515,797 samples, 0.11%)</title><rect x="43.6228%" y="101" width="0.1114%" height="15" fill="rgb(242,79,21)"/><text x="43.8728%" y="111.50"></text></g><g><title>item_bodies_checking (89,522,229 samples, 19.33%)</title><rect x="24.5372%" y="149" width="19.3341%" height="15" fill="rgb(211,96,35)"/><text x="24.7872%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (89,519,069 samples, 19.33%)</title><rect x="24.5379%" y="133" width="19.3334%" height="15" fill="rgb(253,215,40)"/><text x="24.7879%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (89,229,047 samples, 19.27%)</title><rect x="24.6005%" y="117" width="19.2708%" height="15" fill="rgb(211,81,21)"/><text x="24.8505%" y="127.50">typeck</text></g><g><title>item_types_checking (964,829 samples, 0.21%)</title><rect x="43.8713%" y="149" width="0.2084%" height="15" fill="rgb(208,190,38)"/><text x="44.1213%" y="159.50"></text></g><g><title>check_mod_item_types (961,759 samples, 0.21%)</title><rect x="43.8720%" y="133" width="0.2077%" height="15" fill="rgb(235,213,38)"/><text x="44.1220%" y="143.50"></text></g><g><title>fn_sig (513,588 samples, 0.11%)</title><rect x="44.1780%" y="117" width="0.1109%" height="15" fill="rgb(237,122,38)"/><text x="44.4280%" y="127.50"></text></g><g><title>named_region_map (953,600 samples, 0.21%)</title><rect x="44.3330%" y="101" width="0.2059%" height="15" fill="rgb(244,218,35)"/><text x="44.5830%" y="111.50"></text></g><g><title>resolve_lifetimes (900,289 samples, 0.19%)</title><rect x="44.3445%" y="85" width="0.1944%" height="15" fill="rgb(240,68,47)"/><text x="44.5945%" y="95.50"></text></g><g><title>generics_of (1,187,922 samples, 0.26%)</title><rect x="44.2890%" y="117" width="0.2566%" height="15" fill="rgb(210,16,53)"/><text x="44.5390%" y="127.50"></text></g><g><title>type_collecting (2,893,439 samples, 0.62%)</title><rect x="44.0801%" y="149" width="0.6249%" height="15" fill="rgb(235,124,12)"/><text x="44.3301%" y="159.50"></text></g><g><title>collect_mod_item_types (2,883,499 samples, 0.62%)</title><rect x="44.0823%" y="133" width="0.6227%" height="15" fill="rgb(224,169,11)"/><text x="44.3323%" y="143.50"></text></g><g><title>region_scope_tree (593,755 samples, 0.13%)</title><rect x="45.1895%" y="117" width="0.1282%" height="15" fill="rgb(250,166,2)"/><text x="45.4395%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,450,115 samples, 0.53%)</title><rect x="44.7927%" y="133" width="0.5292%" height="15" fill="rgb(242,216,29)"/><text x="45.0427%" y="143.50"></text></g><g><title>check_item_well_formed (1,434,566 samples, 0.31%)</title><rect x="45.3219%" y="133" width="0.3098%" height="15" fill="rgb(230,116,27)"/><text x="45.5719%" y="143.50"></text></g><g><title>param_env (1,384,568 samples, 0.30%)</title><rect x="47.1164%" y="117" width="0.2990%" height="15" fill="rgb(228,99,48)"/><text x="47.3664%" y="127.50"></text></g><g><title>analysis (194,254,019 samples, 41.95%)</title><rect x="5.5720%" y="181" width="41.9529%" height="15" fill="rgb(253,11,6)"/><text x="5.8220%" y="191.50">analysis</text></g><g><title>type_check_crate (120,099,375 samples, 25.94%)</title><rect x="21.5871%" y="165" width="25.9378%" height="15" fill="rgb(247,143,39)"/><text x="21.8371%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,041,031 samples, 2.82%)</title><rect x="44.7085%" y="149" width="2.8165%" height="15" fill="rgb(236,97,10)"/><text x="44.9585%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (8,766,209 samples, 1.89%)</title><rect x="45.6317%" y="133" width="1.8932%" height="15" fill="rgb(233,208,19)"/><text x="45.8817%" y="143.50">c..</text></g><g><title>region_scope_tree (482,496 samples, 0.10%)</title><rect x="47.4207%" y="117" width="0.1042%" height="15" fill="rgb(216,164,2)"/><text x="47.6707%" y="127.50"></text></g><g><title>layout_of (1,154,321 samples, 0.25%)</title><rect x="51.4757%" y="133" width="0.2493%" height="15" fill="rgb(220,129,5)"/><text x="51.7257%" y="143.50"></text></g><g><title>param_env (1,276,824 samples, 0.28%)</title><rect x="51.7250%" y="133" width="0.2758%" height="15" fill="rgb(242,17,10)"/><text x="51.9750%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,544,247 samples, 0.77%)</title><rect x="51.2730%" y="149" width="0.7654%" height="15" fill="rgb(242,107,0)"/><text x="51.5230%" y="159.50"></text></g><g><title>codegen_module (19,668,408 samples, 4.25%)</title><rect x="47.9483%" y="165" width="4.2478%" height="15" fill="rgb(251,28,31)"/><text x="48.1983%" y="175.50">codeg..</text></g><g><title>codegen_crate (21,688,057 samples, 4.68%)</title><rect x="47.5278%" y="181" width="4.6840%" height="15" fill="rgb(233,223,10)"/><text x="47.7778%" y="191.50">codeg..</text></g><g><title>LLVM_module_codegen (109,524,728 samples, 23.65%)</title><rect x="52.2562%" y="165" width="23.6540%" height="15" fill="rgb(215,21,27)"/><text x="52.5062%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (102,034,285 samples, 22.04%)</title><rect x="53.8739%" y="149" width="22.0363%" height="15" fill="rgb(232,23,21)"/><text x="54.1239%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (115,946,841 samples, 25.04%)</title><rect x="52.2118%" y="181" width="25.0410%" height="15" fill="rgb(244,5,23)"/><text x="52.4618%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,216,572 samples, 1.34%)</title><rect x="75.9102%" y="165" width="1.3426%" height="15" fill="rgb(226,81,46)"/><text x="76.1602%" y="175.50"></text></g><g><title>metadata_register_crate (2,625,437 samples, 0.57%)</title><rect x="83.9260%" y="133" width="0.5670%" height="15" fill="rgb(247,70,30)"/><text x="84.1760%" y="143.50"></text></g><g><title>metadata_register_crate (971,800 samples, 0.21%)</title><rect x="84.2831%" y="117" width="0.2099%" height="15" fill="rgb(212,68,19)"/><text x="84.5331%" y="127.50"></text></g><g><title>macro_expand_crate (33,124,983 samples, 7.15%)</title><rect x="77.3947%" y="165" width="7.1540%" height="15" fill="rgb(240,187,13)"/><text x="77.6447%" y="175.50">macro_expa..</text></g><g><title>expand_crate (33,110,543 samples, 7.15%)</title><rect x="77.3978%" y="149" width="7.1509%" height="15" fill="rgb(223,113,26)"/><text x="77.6478%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (946,360 samples, 0.20%)</title><rect x="84.5495%" y="165" width="0.2044%" height="15" fill="rgb(206,192,2)"/><text x="84.7995%" y="175.50"></text></g><g><title>late_resolve_crate (3,812,558 samples, 0.82%)</title><rect x="84.8099%" y="149" width="0.8234%" height="15" fill="rgb(241,108,4)"/><text x="85.0599%" y="159.50"></text></g><g><title>configure_and_expand (39,005,912 samples, 8.42%)</title><rect x="77.2528%" y="181" width="8.4241%" height="15" fill="rgb(247,173,49)"/><text x="77.5028%" y="191.50">configure_an..</text></g><g><title>resolve_crate (4,273,863 samples, 0.92%)</title><rect x="84.7538%" y="165" width="0.9230%" height="15" fill="rgb(224,114,35)"/><text x="85.0038%" y="175.50"></text></g><g><title>drop_ast (628,496 samples, 0.14%)</title><rect x="85.6769%" y="181" width="0.1357%" height="15" fill="rgb(245,159,27)"/><text x="85.9269%" y="191.50"></text></g><g><title>early_lint_checks (852,199 samples, 0.18%)</title><rect x="85.8177%" y="181" width="0.1840%" height="15" fill="rgb(245,172,44)"/><text x="86.0677%" y="191.50"></text></g><g><title>free_global_ctxt (6,703,268 samples, 1.45%)</title><rect x="86.0017%" y="181" width="1.4477%" height="15" fill="rgb(236,23,11)"/><text x="86.2517%" y="191.50"></text></g><g><title>codegen_fn_attrs (625,165 samples, 0.14%)</title><rect x="88.4037%" y="101" width="0.1350%" height="15" fill="rgb(205,117,38)"/><text x="88.6537%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (478,046 samples, 0.10%)</title><rect x="88.6383%" y="85" width="0.1032%" height="15" fill="rgb(237,72,25)"/><text x="88.8883%" y="95.50"></text></g><g><title>optimized_mir (739,308 samples, 0.16%)</title><rect x="88.6027%" y="101" width="0.1597%" height="15" fill="rgb(244,70,9)"/><text x="88.8527%" y="111.50"></text></g><g><title>specialization_graph_of (993,739 samples, 0.21%)</title><rect x="88.9388%" y="85" width="0.2146%" height="15" fill="rgb(217,125,39)"/><text x="89.1888%" y="95.50"></text></g><g><title>resolve_instance (1,936,501 samples, 0.42%)</title><rect x="88.7624%" y="101" width="0.4182%" height="15" fill="rgb(235,36,10)"/><text x="89.0124%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (4,827,018 samples, 1.04%)</title><rect x="88.3070%" y="117" width="1.0425%" height="15" fill="rgb(251,123,47)"/><text x="88.5570%" y="127.50"></text></g><g><title>vtable_entries (544,355 samples, 0.12%)</title><rect x="89.2320%" y="101" width="0.1176%" height="15" fill="rgb(221,13,13)"/><text x="89.4820%" y="111.50"></text></g><g><title>monomorphization_collector (4,880,089 samples, 1.05%)</title><rect x="88.3061%" y="133" width="1.0540%" height="15" fill="rgb(238,131,9)"/><text x="88.5561%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (474,334 samples, 0.10%)</title><rect x="89.3622%" y="117" width="0.1024%" height="15" fill="rgb(211,50,8)"/><text x="89.6122%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (5,642,396 samples, 1.22%)</title><rect x="88.2984%" y="149" width="1.2186%" height="15" fill="rgb(245,182,24)"/><text x="88.5484%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (726,837 samples, 0.16%)</title><rect x="89.3600%" y="133" width="0.1570%" height="15" fill="rgb(242,14,37)"/><text x="89.6100%" y="143.50"></text></g><g><title>exported_symbols (5,938,800 samples, 1.28%)</title><rect x="88.2914%" y="165" width="1.2826%" height="15" fill="rgb(246,228,12)"/><text x="88.5414%" y="175.50"></text></g><g><title>layout_of (1,281,974 samples, 0.28%)</title><rect x="91.5335%" y="149" width="0.2769%" height="15" fill="rgb(213,55,15)"/><text x="91.7835%" y="159.50"></text></g><g><title>optimized_mir (19,932,872 samples, 4.30%)</title><rect x="89.6541%" y="165" width="4.3049%" height="15" fill="rgb(209,9,3)"/><text x="89.9041%" y="175.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (9,948,386 samples, 2.15%)</title><rect x="91.8104%" y="149" width="2.1485%" height="15" fill="rgb(230,59,30)"/><text x="92.0604%" y="159.50">m..</text></g><g><title>generate_crate_metadata (30,301,205 samples, 6.54%)</title><rect x="87.4494%" y="181" width="6.5441%" height="15" fill="rgb(209,121,21)"/><text x="87.6994%" y="191.50">generate_..</text></g><g><title>hir_lowering (6,622,396 samples, 1.43%)</title><rect x="93.9936%" y="181" width="1.4302%" height="15" fill="rgb(220,109,13)"/><text x="94.2436%" y="191.50"></text></g><g><title>link_crate (2,127,972 samples, 0.46%)</title><rect x="95.4288%" y="165" width="0.4596%" height="15" fill="rgb(232,18,1)"/><text x="95.6788%" y="175.50"></text></g><g><title>link_binary (2,048,131 samples, 0.44%)</title><rect x="95.4460%" y="149" width="0.4423%" height="15" fill="rgb(215,41,42)"/><text x="95.6960%" y="159.50"></text></g><g><title>link_rlib (1,466,165 samples, 0.32%)</title><rect x="95.5717%" y="133" width="0.3166%" height="15" fill="rgb(224,123,36)"/><text x="95.8217%" y="143.50"></text></g><g><title>link (2,163,332 samples, 0.47%)</title><rect x="95.4238%" y="181" width="0.4672%" height="15" fill="rgb(240,125,3)"/><text x="95.6738%" y="191.50"></text></g><g><title>parse_crate (16,345,404 samples, 3.53%)</title><rect x="95.8910%" y="181" width="3.5301%" height="15" fill="rgb(205,98,50)"/><text x="96.1410%" y="191.50">par..</text></g><g><title>self_profile_alloc_query_strings (1,863,509 samples, 0.40%)</title><rect x="99.4688%" y="181" width="0.4025%" height="15" fill="rgb(205,185,37)"/><text x="99.7188%" y="191.50"></text></g><g><title>all (463,028,304 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (463,028,304 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (499,865 samples, 0.11%)</title><rect x="99.8920%" y="181" width="0.1080%" height="15" fill="rgb(235,201,11)"/><text x="100.1420%" y="191.50"></text></g></svg></svg>