<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,609,524 samples, 9.46%)</title><rect x="0.6624%" y="213" width="9.4620%" height="15" fill="rgb(227,0,7)"/><text x="0.9124%" y="223.50">LLVM_passes</text></g><g><title>thir_body (148,034 samples, 0.12%)</title><rect x="14.0477%" y="101" width="0.1207%" height="15" fill="rgb(217,0,24)"/><text x="14.2977%" y="111.50"></text></g><g><title>mir_const (688,349 samples, 0.56%)</title><rect x="13.6091%" y="149" width="0.5610%" height="15" fill="rgb(221,193,54)"/><text x="13.8591%" y="159.50"></text></g><g><title>unsafety_check_result (562,378 samples, 0.46%)</title><rect x="13.7118%" y="133" width="0.4583%" height="15" fill="rgb(248,212,6)"/><text x="13.9618%" y="143.50"></text></g><g><title>mir_built (494,947 samples, 0.40%)</title><rect x="13.7667%" y="117" width="0.4034%" height="15" fill="rgb(208,68,35)"/><text x="14.0167%" y="127.50"></text></g><g><title>thir_body (1,990,141 samples, 1.62%)</title><rect x="15.7473%" y="85" width="1.6220%" height="15" fill="rgb(232,128,0)"/><text x="15.9973%" y="95.50"></text></g><g><title>lit_to_const (241,861 samples, 0.20%)</title><rect x="17.1722%" y="69" width="0.1971%" height="15" fill="rgb(207,160,47)"/><text x="17.4222%" y="79.50"></text></g><g><title>mir_const_qualif (3,926,503 samples, 3.20%)</title><rect x="14.1701%" y="149" width="3.2002%" height="15" fill="rgb(228,23,34)"/><text x="14.4201%" y="159.50">mir..</text></g><g><title>mir_const (3,765,210 samples, 3.07%)</title><rect x="14.3016%" y="133" width="3.0687%" height="15" fill="rgb(218,30,26)"/><text x="14.5516%" y="143.50">mir..</text></g><g><title>unsafety_check_result (3,616,460 samples, 2.95%)</title><rect x="14.4228%" y="117" width="2.9475%" height="15" fill="rgb(220,122,19)"/><text x="14.6728%" y="127.50">un..</text></g><g><title>mir_built (3,515,008 samples, 2.86%)</title><rect x="14.5055%" y="101" width="2.8648%" height="15" fill="rgb(250,228,42)"/><text x="14.7555%" y="111.50">mi..</text></g><g><title>mir_promoted (5,418,290 samples, 4.42%)</title><rect x="12.9545%" y="165" width="4.4160%" height="15" fill="rgb(240,193,28)"/><text x="13.2045%" y="175.50">mir_p..</text></g><g><title>MIR_borrow_checking (8,609,022 samples, 7.02%)</title><rect x="10.5042%" y="197" width="7.0165%" height="15" fill="rgb(216,20,37)"/><text x="10.7542%" y="207.50">MIR_borro..</text></g><g><title>mir_borrowck (8,593,482 samples, 7.00%)</title><rect x="10.5169%" y="181" width="7.0039%" height="15" fill="rgb(206,188,39)"/><text x="10.7669%" y="191.50">mir_borro..</text></g><g><title>type_op_prove_predicate (150,403 samples, 0.12%)</title><rect x="17.3982%" y="165" width="0.1226%" height="15" fill="rgb(217,207,13)"/><text x="17.6482%" y="175.50"></text></g><g><title>MIR_effect_checking (194,422 samples, 0.16%)</title><rect x="17.5207%" y="197" width="0.1585%" height="15" fill="rgb(231,73,38)"/><text x="17.7707%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (173,552 samples, 0.14%)</title><rect x="17.5377%" y="181" width="0.1414%" height="15" fill="rgb(225,20,46)"/><text x="17.7877%" y="191.50"></text></g><g><title>hir_module_items (137,272 samples, 0.11%)</title><rect x="17.6792%" y="197" width="0.1119%" height="15" fill="rgb(210,31,41)"/><text x="17.9292%" y="207.50"></text></g><g><title>codegen_fn_attrs (214,922 samples, 0.18%)</title><rect x="18.1973%" y="165" width="0.1752%" height="15" fill="rgb(221,200,47)"/><text x="18.4473%" y="175.50"></text></g><g><title>check_mod_attrs (684,428 samples, 0.56%)</title><rect x="17.8149%" y="181" width="0.5578%" height="15" fill="rgb(226,26,5)"/><text x="18.0649%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (175,211 samples, 0.14%)</title><rect x="18.4845%" y="181" width="0.1428%" height="15" fill="rgb(249,33,26)"/><text x="18.7345%" y="191.50"></text></g><g><title>misc_checking_1 (1,061,501 samples, 0.87%)</title><rect x="17.7914%" y="197" width="0.8651%" height="15" fill="rgb(235,183,28)"/><text x="18.0414%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (179,172 samples, 0.15%)</title><rect x="18.6576%" y="181" width="0.1460%" height="15" fill="rgb(221,5,38)"/><text x="18.9076%" y="191.50"></text></g><g><title>check_mod_liveness (124,791 samples, 0.10%)</title><rect x="18.7020%" y="165" width="0.1017%" height="15" fill="rgb(247,18,42)"/><text x="18.9520%" y="175.50"></text></g><g><title>misc_checking_2 (313,214 samples, 0.26%)</title><rect x="18.6566%" y="197" width="0.2553%" height="15" fill="rgb(241,131,45)"/><text x="18.9066%" y="207.50"></text></g><g><title>match_checking (132,722 samples, 0.11%)</title><rect x="18.8037%" y="181" width="0.1082%" height="15" fill="rgb(249,31,29)"/><text x="19.0537%" y="191.50"></text></g><g><title>check_match (127,042 samples, 0.10%)</title><rect x="18.8083%" y="165" width="0.1035%" height="15" fill="rgb(225,111,53)"/><text x="19.0583%" y="175.50"></text></g><g><title>eval_to_const_value_raw (4,146,874 samples, 3.38%)</title><rect x="20.2533%" y="85" width="3.3798%" height="15" fill="rgb(238,160,17)"/><text x="20.5033%" y="95.50">eva..</text></g><g><title>eval_to_const_value_raw (4,145,314 samples, 3.38%)</title><rect x="20.2545%" y="69" width="3.3785%" height="15" fill="rgb(214,148,48)"/><text x="20.5045%" y="79.50">eva..</text></g><g><title>eval_to_allocation_raw (4,141,664 samples, 3.38%)</title><rect x="20.2575%" y="53" width="3.3755%" height="15" fill="rgb(232,36,49)"/><text x="20.5075%" y="63.50">eva..</text></g><g><title>promoted_mir (904,509 samples, 0.74%)</title><rect x="22.8958%" y="37" width="0.7372%" height="15" fill="rgb(209,103,24)"/><text x="23.1458%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,274,658 samples, 4.30%)</title><rect x="19.3365%" y="149" width="4.2990%" height="15" fill="rgb(229,88,8)"/><text x="19.5865%" y="159.50">eval_..</text></g><g><title>eval_to_const_value_raw (5,271,378 samples, 4.30%)</title><rect x="19.3392%" y="133" width="4.2963%" height="15" fill="rgb(213,181,19)"/><text x="19.5892%" y="143.50">eval_..</text></g><g><title>eval_to_allocation_raw (5,263,617 samples, 4.29%)</title><rect x="19.3455%" y="117" width="4.2900%" height="15" fill="rgb(254,191,54)"/><text x="19.5955%" y="127.50">eval_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,180,464 samples, 3.41%)</title><rect x="20.2283%" y="101" width="3.4072%" height="15" fill="rgb(241,83,37)"/><text x="20.4783%" y="111.50">try..</text></g><g><title>crate_lints (5,697,590 samples, 4.64%)</title><rect x="19.0621%" y="165" width="4.6437%" height="15" fill="rgb(233,36,39)"/><text x="19.3121%" y="175.50">crate..</text></g><g><title>lint_checking (6,258,546 samples, 5.10%)</title><rect x="19.0607%" y="181" width="5.1008%" height="15" fill="rgb(226,3,54)"/><text x="19.3107%" y="191.50">lint_c..</text></g><g><title>module_lints (559,246 samples, 0.46%)</title><rect x="23.7057%" y="165" width="0.4558%" height="15" fill="rgb(245,192,40)"/><text x="23.9557%" y="175.50"></text></g><g><title>lint_mod (556,456 samples, 0.45%)</title><rect x="23.7080%" y="149" width="0.4535%" height="15" fill="rgb(238,167,29)"/><text x="23.9580%" y="159.50"></text></g><g><title>privacy_checking_modules (333,514 samples, 0.27%)</title><rect x="24.2181%" y="181" width="0.2718%" height="15" fill="rgb(232,182,51)"/><text x="24.4681%" y="191.50"></text></g><g><title>check_mod_privacy (331,554 samples, 0.27%)</title><rect x="24.2197%" y="165" width="0.2702%" height="15" fill="rgb(231,60,39)"/><text x="24.4697%" y="175.50"></text></g><g><title>misc_checking_3 (6,859,683 samples, 5.59%)</title><rect x="18.9118%" y="197" width="5.5908%" height="15" fill="rgb(208,69,12)"/><text x="19.1618%" y="207.50">misc_ch..</text></g><g><title>coherence_checking (128,891 samples, 0.11%)</title><rect x="24.5199%" y="181" width="0.1050%" height="15" fill="rgb(235,93,37)"/><text x="24.7699%" y="191.50"></text></g><g><title>associated_item (145,982 samples, 0.12%)</title><rect x="25.6656%" y="101" width="0.1190%" height="15" fill="rgb(213,116,39)"/><text x="25.9156%" y="111.50"></text></g><g><title>associated_items (200,472 samples, 0.16%)</title><rect x="25.6273%" y="117" width="0.1634%" height="15" fill="rgb(222,207,29)"/><text x="25.8773%" y="127.50"></text></g><g><title>dropck_outlives (132,282 samples, 0.11%)</title><rect x="25.7951%" y="117" width="0.1078%" height="15" fill="rgb(206,96,30)"/><text x="26.0451%" y="127.50"></text></g><g><title>evaluate_obligation (157,513 samples, 0.13%)</title><rect x="25.9029%" y="117" width="0.1284%" height="15" fill="rgb(218,138,4)"/><text x="26.1529%" y="127.50"></text></g><g><title>lint_levels (139,161 samples, 0.11%)</title><rect x="26.1575%" y="117" width="0.1134%" height="15" fill="rgb(250,191,14)"/><text x="26.4075%" y="127.50"></text></g><g><title>typeck (1,606,188 samples, 1.31%)</title><rect x="25.1394%" y="133" width="1.3091%" height="15" fill="rgb(239,60,40)"/><text x="25.3894%" y="143.50"></text></g><g><title>item_bodies_checking (2,220,084 samples, 1.81%)</title><rect x="24.6401%" y="181" width="1.8094%" height="15" fill="rgb(206,27,48)"/><text x="24.8901%" y="191.50">i..</text></g><g><title>typeck_item_bodies (2,218,314 samples, 1.81%)</title><rect x="24.6416%" y="165" width="1.8080%" height="15" fill="rgb(225,35,8)"/><text x="24.8916%" y="175.50">t..</text></g><g><title>typeck (2,212,174 samples, 1.80%)</title><rect x="24.6466%" y="149" width="1.8030%" height="15" fill="rgb(250,213,24)"/><text x="24.8966%" y="159.50">t..</text></g><g><title>item_types_checking (5,062,874 samples, 4.13%)</title><rect x="26.4495%" y="181" width="4.1263%" height="15" fill="rgb(247,123,22)"/><text x="26.6995%" y="191.50">item..</text></g><g><title>check_mod_item_types (5,059,704 samples, 4.12%)</title><rect x="26.4521%" y="165" width="4.1238%" height="15" fill="rgb(231,138,38)"/><text x="26.7021%" y="175.50">chec..</text></g><g><title>typeck (5,004,663 samples, 4.08%)</title><rect x="26.4970%" y="149" width="4.0789%" height="15" fill="rgb(231,145,46)"/><text x="26.7470%" y="159.50">type..</text></g><g><title>type_collecting (644,727 samples, 0.53%)</title><rect x="30.5771%" y="181" width="0.5255%" height="15" fill="rgb(251,118,11)"/><text x="30.8271%" y="191.50"></text></g><g><title>collect_mod_item_types (631,967 samples, 0.52%)</title><rect x="30.5875%" y="165" width="0.5151%" height="15" fill="rgb(217,147,25)"/><text x="30.8375%" y="175.50"></text></g><g><title>type_of (124,990 samples, 0.10%)</title><rect x="31.0007%" y="149" width="0.1019%" height="15" fill="rgb(247,81,37)"/><text x="31.2507%" y="159.50"></text></g><g><title>param_env (172,122 samples, 0.14%)</title><rect x="31.6828%" y="149" width="0.1403%" height="15" fill="rgb(209,12,38)"/><text x="31.9328%" y="159.50"></text></g><g><title>region_scope_tree (455,075 samples, 0.37%)</title><rect x="31.8231%" y="149" width="0.3709%" height="15" fill="rgb(227,1,9)"/><text x="32.0731%" y="159.50"></text></g><g><title>check_item_well_formed (1,250,855 samples, 1.02%)</title><rect x="31.1754%" y="165" width="1.0195%" height="15" fill="rgb(248,47,43)"/><text x="31.4254%" y="175.50"></text></g><g><title>analysis (27,136,060 samples, 22.12%)</title><rect x="10.1244%" y="213" width="22.1165%" height="15" fill="rgb(221,10,30)"/><text x="10.3744%" y="223.50">analysis</text></g><g><title>type_check_crate (9,494,541 samples, 7.74%)</title><rect x="24.5026%" y="197" width="7.7383%" height="15" fill="rgb(210,229,1)"/><text x="24.7526%" y="207.50">type_check_..</text></g><g><title>wf_checking (1,395,615 samples, 1.14%)</title><rect x="31.1034%" y="181" width="1.1375%" height="15" fill="rgb(222,148,37)"/><text x="31.3534%" y="191.50"></text></g><g><title>param_env (205,562 samples, 0.17%)</title><rect x="36.3824%" y="165" width="0.1675%" height="15" fill="rgb(234,67,33)"/><text x="36.6324%" y="175.50"></text></g><g><title>fn_abi_of_instance (476,315 samples, 0.39%)</title><rect x="36.2254%" y="181" width="0.3882%" height="15" fill="rgb(247,98,35)"/><text x="36.4754%" y="191.50"></text></g><g><title>layout_of (153,772 samples, 0.13%)</title><rect x="36.7038%" y="165" width="0.1253%" height="15" fill="rgb(247,138,52)"/><text x="36.9538%" y="175.50"></text></g><g><title>layout_of (220,304 samples, 0.18%)</title><rect x="36.6535%" y="181" width="0.1796%" height="15" fill="rgb(213,79,30)"/><text x="36.9035%" y="191.50"></text></g><g><title>codegen_module (4,687,071 samples, 3.82%)</title><rect x="33.0279%" y="197" width="3.8201%" height="15" fill="rgb(246,177,23)"/><text x="33.2779%" y="207.50">code..</text></g><g><title>codegen_crate (5,658,150 samples, 4.61%)</title><rect x="32.2499%" y="213" width="4.6115%" height="15" fill="rgb(230,62,27)"/><text x="32.4999%" y="223.50">codeg..</text></g><g><title>LLVM_module_codegen (34,296,066 samples, 27.95%)</title><rect x="36.9346%" y="197" width="27.9520%" height="15" fill="rgb(216,154,8)"/><text x="37.1846%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (32,847,252 samples, 26.77%)</title><rect x="38.1154%" y="181" width="26.7712%" height="15" fill="rgb(244,35,45)"/><text x="38.3654%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (36,051,033 samples, 29.38%)</title><rect x="36.8614%" y="213" width="29.3823%" height="15" fill="rgb(251,115,12)"/><text x="37.1114%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,665,137 samples, 1.36%)</title><rect x="64.8866%" y="197" width="1.3571%" height="15" fill="rgb(240,54,50)"/><text x="65.1366%" y="207.50"></text></g><g><title>AST_validation (184,592 samples, 0.15%)</title><rect x="66.4322%" y="197" width="0.1504%" height="15" fill="rgb(233,84,52)"/><text x="66.6822%" y="207.50"></text></g><g><title>metadata_register_crate (211,792 samples, 0.17%)</title><rect x="80.6500%" y="165" width="0.1726%" height="15" fill="rgb(207,117,47)"/><text x="80.9000%" y="175.50"></text></g><g><title>macro_expand_crate (17,820,160 samples, 14.52%)</title><rect x="66.7573%" y="197" width="14.5238%" height="15" fill="rgb(249,43,39)"/><text x="67.0073%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (17,803,420 samples, 14.51%)</title><rect x="66.7709%" y="181" width="14.5102%" height="15" fill="rgb(209,38,44)"/><text x="67.0209%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (562,466 samples, 0.46%)</title><rect x="80.8227%" y="165" width="0.4584%" height="15" fill="rgb(236,212,23)"/><text x="81.0727%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (125,701 samples, 0.10%)</title><rect x="81.2851%" y="197" width="0.1024%" height="15" fill="rgb(242,79,21)"/><text x="81.5351%" y="207.50"></text></g><g><title>finalize_imports (299,693 samples, 0.24%)</title><rect x="81.3960%" y="181" width="0.2443%" height="15" fill="rgb(211,96,35)"/><text x="81.6460%" y="191.50"></text></g><g><title>late_resolve_crate (528,285 samples, 0.43%)</title><rect x="81.6527%" y="181" width="0.4306%" height="15" fill="rgb(253,215,40)"/><text x="81.9027%" y="191.50"></text></g><g><title>configure_and_expand (19,601,109 samples, 15.98%)</title><rect x="66.2437%" y="213" width="15.9753%" height="15" fill="rgb(211,81,21)"/><text x="66.4937%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,020,151 samples, 0.83%)</title><rect x="81.3876%" y="197" width="0.8314%" height="15" fill="rgb(208,190,38)"/><text x="81.6376%" y="207.50"></text></g><g><title>drop_ast (428,425 samples, 0.35%)</title><rect x="82.2190%" y="213" width="0.3492%" height="15" fill="rgb(235,213,38)"/><text x="82.4690%" y="223.50"></text></g><g><title>early_lint_checks (1,119,642 samples, 0.91%)</title><rect x="82.5793%" y="213" width="0.9125%" height="15" fill="rgb(237,122,38)"/><text x="82.8293%" y="223.50"></text></g><g><title>free_global_ctxt (1,864,240 samples, 1.52%)</title><rect x="83.4919%" y="213" width="1.5194%" height="15" fill="rgb(244,218,35)"/><text x="83.7419%" y="223.50"></text></g><g><title>metadata_decode_entry_optimized_mir (204,343 samples, 0.17%)</title><rect x="87.6061%" y="117" width="0.1665%" height="15" fill="rgb(240,68,47)"/><text x="87.8561%" y="127.50"></text></g><g><title>optimized_mir (456,415 samples, 0.37%)</title><rect x="87.4856%" y="133" width="0.3720%" height="15" fill="rgb(210,16,53)"/><text x="87.7356%" y="143.50"></text></g><g><title>impl_parent (200,521 samples, 0.16%)</title><rect x="88.2619%" y="101" width="0.1634%" height="15" fill="rgb(235,124,12)"/><text x="88.5119%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (148,301 samples, 0.12%)</title><rect x="88.3044%" y="85" width="0.1209%" height="15" fill="rgb(224,169,11)"/><text x="88.5544%" y="95.50"></text></g><g><title>specialization_graph_of (1,097,272 samples, 0.89%)</title><rect x="88.0896%" y="117" width="0.8943%" height="15" fill="rgb(250,166,2)"/><text x="88.3396%" y="127.50"></text></g><g><title>impl_trait_ref (685,368 samples, 0.56%)</title><rect x="88.4253%" y="101" width="0.5586%" height="15" fill="rgb(242,216,29)"/><text x="88.6753%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (634,557 samples, 0.52%)</title><rect x="88.4667%" y="85" width="0.5172%" height="15" fill="rgb(230,116,27)"/><text x="88.7167%" y="95.50"></text></g><g><title>resolve_instance (1,417,326 samples, 1.16%)</title><rect x="87.8576%" y="133" width="1.1552%" height="15" fill="rgb(228,99,48)"/><text x="88.1076%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (2,267,654 samples, 1.85%)</title><rect x="87.2527%" y="149" width="1.8482%" height="15" fill="rgb(253,11,6)"/><text x="87.5027%" y="159.50">m..</text></g><g><title>monomorphization_collector (2,292,124 samples, 1.87%)</title><rect x="87.2509%" y="165" width="1.8681%" height="15" fill="rgb(247,143,39)"/><text x="87.5009%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (153,662 samples, 0.13%)</title><rect x="89.1220%" y="149" width="0.1252%" height="15" fill="rgb(236,97,10)"/><text x="89.3720%" y="159.50"></text></g><g><title>symbol_name (144,322 samples, 0.12%)</title><rect x="89.1297%" y="133" width="0.1176%" height="15" fill="rgb(233,208,19)"/><text x="89.3797%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (2,555,117 samples, 2.08%)</title><rect x="87.2294%" y="181" width="2.0825%" height="15" fill="rgb(216,164,2)"/><text x="87.4794%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (236,663 samples, 0.19%)</title><rect x="89.1190%" y="165" width="0.1929%" height="15" fill="rgb(220,129,5)"/><text x="89.3690%" y="175.50"></text></g><g><title>exported_symbols (2,597,188 samples, 2.12%)</title><rect x="87.2147%" y="197" width="2.1168%" height="15" fill="rgb(242,17,10)"/><text x="87.4647%" y="207.50">e..</text></g><g><title>optimized_mir (568,757 samples, 0.46%)</title><rect x="89.3405%" y="197" width="0.4635%" height="15" fill="rgb(242,107,0)"/><text x="89.5905%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (198,143 samples, 0.16%)</title><rect x="89.6425%" y="181" width="0.1615%" height="15" fill="rgb(251,28,31)"/><text x="89.8925%" y="191.50"></text></g><g><title>generate_crate_metadata (5,909,393 samples, 4.82%)</title><rect x="85.0113%" y="213" width="4.8163%" height="15" fill="rgb(233,223,10)"/><text x="85.2613%" y="223.50">genera..</text></g><g><title>hir_lowering (3,075,173 samples, 2.51%)</title><rect x="89.8275%" y="213" width="2.5063%" height="15" fill="rgb(215,21,27)"/><text x="90.0775%" y="223.50">hi..</text></g><g><title>finish_ongoing_codegen (6,090,635 samples, 4.96%)</title><rect x="92.3491%" y="197" width="4.9640%" height="15" fill="rgb(232,23,21)"/><text x="92.5991%" y="207.50">finish..</text></g><g><title>link_crate (1,173,442 samples, 0.96%)</title><rect x="97.3131%" y="197" width="0.9564%" height="15" fill="rgb(244,5,23)"/><text x="97.5631%" y="207.50"></text></g><g><title>link_binary (1,164,392 samples, 0.95%)</title><rect x="97.3205%" y="181" width="0.9490%" height="15" fill="rgb(226,81,46)"/><text x="97.5705%" y="191.50"></text></g><g><title>link_rlib (821,229 samples, 0.67%)</title><rect x="97.6001%" y="165" width="0.6693%" height="15" fill="rgb(247,70,30)"/><text x="97.8501%" y="175.50"></text></g><g><title>link (7,292,437 samples, 5.94%)</title><rect x="92.3339%" y="213" width="5.9435%" height="15" fill="rgb(212,68,19)"/><text x="92.5839%" y="223.50">link</text></g><g><title>parse_crate (692,948 samples, 0.56%)</title><rect x="98.2774%" y="213" width="0.5648%" height="15" fill="rgb(240,187,13)"/><text x="98.5274%" y="223.50"></text></g><g><title>prepare_outputs (320,924 samples, 0.26%)</title><rect x="98.8497%" y="213" width="0.2616%" height="15" fill="rgb(223,113,26)"/><text x="99.0997%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (581,706 samples, 0.47%)</title><rect x="99.1113%" y="213" width="0.4741%" height="15" fill="rgb(206,192,2)"/><text x="99.3613%" y="223.50"></text></g><g><title>all (122,696,229 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (122,696,229 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (393,235 samples, 0.32%)</title><rect x="99.6795%" y="213" width="0.3205%" height="15" fill="rgb(224,114,35)"/><text x="99.9295%" y="223.50"></text></g></svg></svg>