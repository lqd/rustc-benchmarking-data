<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (114,037,331 samples, 17.40%)</title><rect x="0.1083%" y="181" width="17.3970%" height="15" fill="rgb(227,0,7)"/><text x="0.3583%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (724,599 samples, 0.11%)</title><rect x="17.9069%" y="69" width="0.1105%" height="15" fill="rgb(217,0,24)"/><text x="18.1569%" y="79.50"></text></g><g><title>mir_const (1,707,405 samples, 0.26%)</title><rect x="17.7883%" y="117" width="0.2605%" height="15" fill="rgb(221,193,54)"/><text x="18.0383%" y="127.50"></text></g><g><title>unsafety_check_result (1,441,132 samples, 0.22%)</title><rect x="17.8289%" y="101" width="0.2199%" height="15" fill="rgb(248,212,6)"/><text x="18.0789%" y="111.50"></text></g><g><title>mir_built (1,258,201 samples, 0.19%)</title><rect x="17.8568%" y="85" width="0.1919%" height="15" fill="rgb(208,68,35)"/><text x="18.1068%" y="95.50"></text></g><g><title>mir_promoted (1,921,690 samples, 0.29%)</title><rect x="17.7642%" y="133" width="0.2932%" height="15" fill="rgb(232,128,0)"/><text x="18.0142%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,169,402 samples, 0.64%)</title><rect x="17.5317%" y="165" width="0.6361%" height="15" fill="rgb(207,160,47)"/><text x="17.7817%" y="175.50"></text></g><g><title>mir_borrowck (4,160,172 samples, 0.63%)</title><rect x="17.5331%" y="149" width="0.6347%" height="15" fill="rgb(228,23,34)"/><text x="17.7831%" y="159.50"></text></g><g><title>misc_checking_1 (771,478 samples, 0.12%)</title><rect x="18.2045%" y="165" width="0.1177%" height="15" fill="rgb(218,30,26)"/><text x="18.4545%" y="175.50"></text></g><g><title>crate_lints (3,431,876 samples, 0.52%)</title><rect x="18.3807%" y="133" width="0.5236%" height="15" fill="rgb(220,122,19)"/><text x="18.6307%" y="143.50"></text></g><g><title>type_of (2,747,889 samples, 0.42%)</title><rect x="18.4850%" y="117" width="0.4192%" height="15" fill="rgb(250,228,42)"/><text x="18.7350%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (2,500,065 samples, 0.38%)</title><rect x="18.5228%" y="101" width="0.3814%" height="15" fill="rgb(240,193,28)"/><text x="18.7728%" y="111.50"></text></g><g><title>lint_checking (3,508,286 samples, 0.54%)</title><rect x="18.3804%" y="149" width="0.5352%" height="15" fill="rgb(216,20,37)"/><text x="18.6304%" y="159.50"></text></g><g><title>misc_checking_3 (3,836,960 samples, 0.59%)</title><rect x="18.3550%" y="165" width="0.5853%" height="15" fill="rgb(206,188,39)"/><text x="18.6050%" y="175.50"></text></g><g><title>associated_items (863,402 samples, 0.13%)</title><rect x="19.6995%" y="101" width="0.1317%" height="15" fill="rgb(217,207,13)"/><text x="19.9495%" y="111.50"></text></g><g><title>dropck_outlives (798,718 samples, 0.12%)</title><rect x="19.8392%" y="101" width="0.1218%" height="15" fill="rgb(231,73,38)"/><text x="20.0892%" y="111.50"></text></g><g><title>evaluate_obligation (3,121,114 samples, 0.48%)</title><rect x="19.9611%" y="101" width="0.4761%" height="15" fill="rgb(225,20,46)"/><text x="20.2111%" y="111.50"></text></g><g><title>trait_impls_of (864,349 samples, 0.13%)</title><rect x="20.3054%" y="85" width="0.1319%" height="15" fill="rgb(210,31,41)"/><text x="20.5554%" y="95.50"></text></g><g><title>object_safety_violations (1,024,650 samples, 0.16%)</title><rect x="20.5669%" y="101" width="0.1563%" height="15" fill="rgb(221,200,47)"/><text x="20.8169%" y="111.50"></text></g><g><title>item_bodies_checking (12,351,926 samples, 1.88%)</title><rect x="18.9529%" y="149" width="1.8843%" height="15" fill="rgb(226,26,5)"/><text x="19.2029%" y="159.50">i..</text></g><g><title>typeck_item_bodies (12,348,926 samples, 1.88%)</title><rect x="18.9534%" y="133" width="1.8839%" height="15" fill="rgb(249,33,26)"/><text x="19.2034%" y="143.50">t..</text></g><g><title>typeck (12,337,786 samples, 1.88%)</title><rect x="18.9551%" y="117" width="1.8822%" height="15" fill="rgb(235,183,28)"/><text x="19.2051%" y="127.50">t..</text></g><g><title>adt_destructor (1,093,481 samples, 0.17%)</title><rect x="20.8450%" y="117" width="0.1668%" height="15" fill="rgb(221,5,38)"/><text x="21.0950%" y="127.50"></text></g><g><title>coherent_trait (1,078,991 samples, 0.16%)</title><rect x="20.8472%" y="101" width="0.1646%" height="15" fill="rgb(247,18,42)"/><text x="21.0972%" y="111.50"></text></g><g><title>specialization_graph_of (1,071,711 samples, 0.16%)</title><rect x="20.8484%" y="85" width="0.1635%" height="15" fill="rgb(241,131,45)"/><text x="21.0984%" y="95.50"></text></g><g><title>item_types_checking (1,478,915 samples, 0.23%)</title><rect x="20.8373%" y="149" width="0.2256%" height="15" fill="rgb(249,31,29)"/><text x="21.0873%" y="159.50"></text></g><g><title>check_mod_item_types (1,473,685 samples, 0.22%)</title><rect x="20.8381%" y="133" width="0.2248%" height="15" fill="rgb(225,111,53)"/><text x="21.0881%" y="143.50"></text></g><g><title>type_collecting (733,618 samples, 0.11%)</title><rect x="21.0631%" y="149" width="0.1119%" height="15" fill="rgb(238,160,17)"/><text x="21.3131%" y="159.50"></text></g><g><title>collect_mod_item_types (714,198 samples, 0.11%)</title><rect x="21.0661%" y="133" width="0.1090%" height="15" fill="rgb(214,148,48)"/><text x="21.3161%" y="143.50"></text></g><g><title>analysis (25,883,924 samples, 3.95%)</title><rect x="17.5052%" y="181" width="3.9487%" height="15" fill="rgb(232,36,49)"/><text x="17.7552%" y="191.50">anal..</text></g><g><title>type_check_crate (16,477,098 samples, 2.51%)</title><rect x="18.9403%" y="165" width="2.5137%" height="15" fill="rgb(209,103,24)"/><text x="19.1903%" y="175.50">ty..</text></g><g><title>wf_checking (1,827,589 samples, 0.28%)</title><rect x="21.1752%" y="149" width="0.2788%" height="15" fill="rgb(229,88,8)"/><text x="21.4252%" y="159.50"></text></g><g><title>check_item_well_formed (1,773,009 samples, 0.27%)</title><rect x="21.1835%" y="133" width="0.2705%" height="15" fill="rgb(213,181,19)"/><text x="21.4335%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,622,896 samples, 0.25%)</title><rect x="32.8159%" y="149" width="0.2476%" height="15" fill="rgb(254,191,54)"/><text x="33.0659%" y="159.50"></text></g><g><title>const_caller_location (1,368,304 samples, 0.21%)</title><rect x="33.0635%" y="149" width="0.2087%" height="15" fill="rgb(241,83,37)"/><text x="33.3135%" y="159.50"></text></g><g><title>item_attrs (840,128 samples, 0.13%)</title><rect x="33.9930%" y="117" width="0.1282%" height="15" fill="rgb(233,36,39)"/><text x="34.2430%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (804,738 samples, 0.12%)</title><rect x="33.9984%" y="101" width="0.1228%" height="15" fill="rgb(226,3,54)"/><text x="34.2484%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,261,574 samples, 0.19%)</title><rect x="33.9408%" y="133" width="0.1925%" height="15" fill="rgb(245,192,40)"/><text x="34.1908%" y="143.50"></text></g><g><title>layout_of (1,050,089 samples, 0.16%)</title><rect x="34.3927%" y="117" width="0.1602%" height="15" fill="rgb(238,167,29)"/><text x="34.6427%" y="127.50"></text></g><g><title>layout_of (2,898,320 samples, 0.44%)</title><rect x="34.1591%" y="133" width="0.4422%" height="15" fill="rgb(232,182,51)"/><text x="34.4091%" y="143.50"></text></g><g><title>explicit_predicates_of (708,773 samples, 0.11%)</title><rect x="35.3713%" y="85" width="0.1081%" height="15" fill="rgb(231,60,39)"/><text x="35.6213%" y="95.50"></text></g><g><title>predicates_of (1,969,302 samples, 0.30%)</title><rect x="35.2127%" y="117" width="0.3004%" height="15" fill="rgb(208,69,12)"/><text x="35.4627%" y="127.50"></text></g><g><title>predicates_defined_on (1,441,157 samples, 0.22%)</title><rect x="35.2933%" y="101" width="0.2199%" height="15" fill="rgb(235,93,37)"/><text x="35.5433%" y="111.50"></text></g><g><title>param_env (5,994,478 samples, 0.91%)</title><rect x="34.6013%" y="133" width="0.9145%" height="15" fill="rgb(213,116,39)"/><text x="34.8513%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (993,576 samples, 0.15%)</title><rect x="35.5157%" y="133" width="0.1516%" height="15" fill="rgb(222,207,29)"/><text x="35.7657%" y="143.50"></text></g><g><title>normalize_projection_ty (771,334 samples, 0.12%)</title><rect x="35.5497%" y="117" width="0.1177%" height="15" fill="rgb(206,96,30)"/><text x="35.7997%" y="127.50"></text></g><g><title>fn_abi_of_instance (15,713,752 samples, 2.40%)</title><rect x="33.2761%" y="149" width="2.3972%" height="15" fill="rgb(218,138,4)"/><text x="33.5261%" y="159.50">fn..</text></g><g><title>layout_of (2,228,843 samples, 0.34%)</title><rect x="35.7892%" y="149" width="0.3400%" height="15" fill="rgb(250,191,14)"/><text x="36.0392%" y="159.50"></text></g><g><title>symbol_name (1,615,564 samples, 0.25%)</title><rect x="36.1321%" y="149" width="0.2465%" height="15" fill="rgb(239,60,40)"/><text x="36.3821%" y="159.50"></text></g><g><title>codegen_module (95,256,929 samples, 14.53%)</title><rect x="21.8816%" y="165" width="14.5319%" height="15" fill="rgb(206,27,48)"/><text x="22.1316%" y="175.50">codegen_module</text></g><g><title>codegen_crate (98,132,920 samples, 14.97%)</title><rect x="21.4559%" y="181" width="14.9707%" height="15" fill="rgb(225,35,8)"/><text x="21.7059%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (316,412,780 samples, 48.27%)</title><rect x="36.4596%" y="165" width="48.2704%" height="15" fill="rgb(250,213,24)"/><text x="36.7096%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (299,455,811 samples, 45.68%)</title><rect x="39.0465%" y="149" width="45.6835%" height="15" fill="rgb(247,123,22)"/><text x="39.2965%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (335,036,871 samples, 51.11%)</title><rect x="36.4265%" y="181" width="51.1116%" height="15" fill="rgb(231,138,38)"/><text x="36.6765%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (18,407,145 samples, 2.81%)</title><rect x="84.7300%" y="165" width="2.8081%" height="15" fill="rgb(231,145,46)"/><text x="84.9800%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,706,807 samples, 0.41%)</title><rect x="89.2750%" y="133" width="0.4129%" height="15" fill="rgb(251,118,11)"/><text x="89.5250%" y="143.50"></text></g><g><title>metadata_register_crate (990,960 samples, 0.15%)</title><rect x="89.5368%" y="117" width="0.1512%" height="15" fill="rgb(217,147,25)"/><text x="89.7868%" y="127.50"></text></g><g><title>macro_expand_crate (13,625,548 samples, 2.08%)</title><rect x="87.6121%" y="165" width="2.0786%" height="15" fill="rgb(247,81,37)"/><text x="87.8621%" y="175.50">m..</text></g><g><title>expand_crate (13,600,348 samples, 2.07%)</title><rect x="87.6159%" y="149" width="2.0748%" height="15" fill="rgb(209,12,38)"/><text x="87.8659%" y="159.50">e..</text></g><g><title>late_resolve_crate (1,911,929 samples, 0.29%)</title><rect x="89.7204%" y="149" width="0.2917%" height="15" fill="rgb(227,1,9)"/><text x="89.9704%" y="159.50"></text></g><g><title>configure_and_expand (16,264,895 samples, 2.48%)</title><rect x="87.5381%" y="181" width="2.4813%" height="15" fill="rgb(248,47,43)"/><text x="87.7881%" y="191.50">co..</text></g><g><title>resolve_crate (2,059,721 samples, 0.31%)</title><rect x="89.7052%" y="165" width="0.3142%" height="15" fill="rgb(221,10,30)"/><text x="89.9552%" y="175.50"></text></g><g><title>free_global_ctxt (5,156,582 samples, 0.79%)</title><rect x="90.0513%" y="181" width="0.7867%" height="15" fill="rgb(210,229,1)"/><text x="90.3013%" y="191.50"></text></g><g><title>item_attrs (1,724,193 samples, 0.26%)</title><rect x="91.4141%" y="85" width="0.2630%" height="15" fill="rgb(222,148,37)"/><text x="91.6641%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,659,222 samples, 0.25%)</title><rect x="91.4240%" y="69" width="0.2531%" height="15" fill="rgb(234,67,33)"/><text x="91.6740%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,761,491 samples, 0.42%)</title><rect x="91.3530%" y="101" width="0.4213%" height="15" fill="rgb(247,98,35)"/><text x="91.6030%" y="111.50"></text></g><g><title>mir_shims (690,948 samples, 0.11%)</title><rect x="91.8488%" y="101" width="0.1054%" height="15" fill="rgb(247,138,52)"/><text x="92.0988%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,929,119 samples, 0.45%)</title><rect x="92.1217%" y="85" width="0.4469%" height="15" fill="rgb(213,79,30)"/><text x="92.3717%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (906,489 samples, 0.14%)</title><rect x="92.5686%" y="85" width="0.1383%" height="15" fill="rgb(246,177,23)"/><text x="92.8186%" y="95.50"></text></g><g><title>impl_trait_ref (911,679 samples, 0.14%)</title><rect x="92.9631%" y="53" width="0.1391%" height="15" fill="rgb(230,62,27)"/><text x="93.2131%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (678,075 samples, 0.10%)</title><rect x="92.9988%" y="37" width="0.1034%" height="15" fill="rgb(216,154,8)"/><text x="93.2488%" y="47.50"></text></g><g><title>specialization_graph_of (2,497,845 samples, 0.38%)</title><rect x="92.7213%" y="69" width="0.3811%" height="15" fill="rgb(244,35,45)"/><text x="92.9713%" y="79.50"></text></g><g><title>resolve_instance (2,596,217 samples, 0.40%)</title><rect x="92.7069%" y="85" width="0.3961%" height="15" fill="rgb(251,115,12)"/><text x="92.9569%" y="95.50"></text></g><g><title>optimized_mir (7,604,555 samples, 1.16%)</title><rect x="91.9542%" y="101" width="1.1601%" height="15" fill="rgb(240,54,50)"/><text x="92.2042%" y="111.50"></text></g><g><title>evaluate_obligation (840,735 samples, 0.13%)</title><rect x="93.7383%" y="69" width="0.1283%" height="15" fill="rgb(233,84,52)"/><text x="93.9883%" y="79.50"></text></g><g><title>trait_impls_of (662,935 samples, 0.10%)</title><rect x="93.9680%" y="69" width="0.1011%" height="15" fill="rgb(207,117,47)"/><text x="94.2180%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (4,853,994 samples, 0.74%)</title><rect x="93.3292%" y="85" width="0.7405%" height="15" fill="rgb(249,43,39)"/><text x="93.5792%" y="95.50"></text></g><g><title>impl_parent (923,940 samples, 0.14%)</title><rect x="94.5140%" y="69" width="0.1410%" height="15" fill="rgb(209,38,44)"/><text x="94.7640%" y="79.50"></text></g><g><title>specialization_graph_of (4,551,631 samples, 0.69%)</title><rect x="94.2678%" y="85" width="0.6944%" height="15" fill="rgb(236,212,23)"/><text x="94.5178%" y="95.50"></text></g><g><title>impl_trait_ref (2,013,785 samples, 0.31%)</title><rect x="94.6549%" y="69" width="0.3072%" height="15" fill="rgb(242,79,21)"/><text x="94.9049%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,460,539 samples, 0.22%)</title><rect x="94.7393%" y="53" width="0.2228%" height="15" fill="rgb(211,96,35)"/><text x="94.9893%" y="63.50"></text></g><g><title>resolve_instance (12,632,799 samples, 1.93%)</title><rect x="93.1143%" y="101" width="1.9272%" height="15" fill="rgb(253,215,40)"/><text x="93.3643%" y="111.50">r..</text></g><g><title>eval_to_const_value_raw (1,012,767 samples, 0.15%)</title><rect x="95.1224%" y="85" width="0.1545%" height="15" fill="rgb(211,81,21)"/><text x="95.3724%" y="95.50"></text></g><g><title>eval_to_const_value_raw (995,167 samples, 0.15%)</title><rect x="95.1251%" y="69" width="0.1518%" height="15" fill="rgb(208,190,38)"/><text x="95.3751%" y="79.50"></text></g><g><title>eval_to_allocation_raw (958,176 samples, 0.15%)</title><rect x="95.1307%" y="53" width="0.1462%" height="15" fill="rgb(235,213,38)"/><text x="95.3807%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,197,929 samples, 0.18%)</title><rect x="95.1007%" y="101" width="0.1828%" height="15" fill="rgb(237,122,38)"/><text x="95.3507%" y="111.50"></text></g><g><title>resolve_instance (896,109 samples, 0.14%)</title><rect x="95.4822%" y="85" width="0.1367%" height="15" fill="rgb(244,218,35)"/><text x="95.7322%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (30,802,164 samples, 4.70%)</title><rect x="90.9204%" y="117" width="4.6990%" height="15" fill="rgb(240,68,47)"/><text x="91.1704%" y="127.50">monom..</text></g><g><title>vtable_entries (1,745,478 samples, 0.27%)</title><rect x="95.3531%" y="101" width="0.2663%" height="15" fill="rgb(210,16,53)"/><text x="95.6031%" y="111.50"></text></g><g><title>monomorphization_collector (30,822,104 samples, 4.70%)</title><rect x="90.9200%" y="133" width="4.7021%" height="15" fill="rgb(235,124,12)"/><text x="91.1700%" y="143.50">monom..</text></g><g><title>assert_symbols_are_distinct (2,413,934 samples, 0.37%)</title><rect x="95.6228%" y="117" width="0.3683%" height="15" fill="rgb(224,169,11)"/><text x="95.8728%" y="127.50"></text></g><g><title>symbol_name (2,226,794 samples, 0.34%)</title><rect x="95.6513%" y="101" width="0.3397%" height="15" fill="rgb(250,166,2)"/><text x="95.9013%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (34,325,760 samples, 5.24%)</title><rect x="90.9117%" y="149" width="5.2366%" height="15" fill="rgb(242,216,29)"/><text x="91.1617%" y="159.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (3,449,554 samples, 0.53%)</title><rect x="95.6221%" y="133" width="0.5262%" height="15" fill="rgb(230,116,27)"/><text x="95.8721%" y="143.50"></text></g><g><title>cgu_partitioning (1,030,770 samples, 0.16%)</title><rect x="95.9911%" y="117" width="0.1572%" height="15" fill="rgb(228,99,48)"/><text x="96.2411%" y="127.50"></text></g><g><title>exported_symbols (34,425,740 samples, 5.25%)</title><rect x="90.8991%" y="165" width="5.2518%" height="15" fill="rgb(253,11,6)"/><text x="91.1491%" y="175.50">export..</text></g><g><title>generate_crate_metadata (34,882,495 samples, 5.32%)</title><rect x="90.8379%" y="181" width="5.3215%" height="15" fill="rgb(247,143,39)"/><text x="91.0879%" y="191.50">generat..</text></g><g><title>hir_lowering (892,709 samples, 0.14%)</title><rect x="96.1594%" y="181" width="0.1362%" height="15" fill="rgb(236,97,10)"/><text x="96.4094%" y="191.50"></text></g><g><title>finish_ongoing_codegen (18,877,862 samples, 2.88%)</title><rect x="96.2978%" y="165" width="2.8799%" height="15" fill="rgb(233,208,19)"/><text x="96.5478%" y="175.50">fi..</text></g><g><title>link_crate (2,208,233 samples, 0.34%)</title><rect x="99.1778%" y="165" width="0.3369%" height="15" fill="rgb(216,164,2)"/><text x="99.4278%" y="175.50"></text></g><g><title>link_binary (2,180,303 samples, 0.33%)</title><rect x="99.1820%" y="149" width="0.3326%" height="15" fill="rgb(220,129,5)"/><text x="99.4320%" y="159.50"></text></g><g><title>link_rlib (1,588,086 samples, 0.24%)</title><rect x="99.2724%" y="133" width="0.2423%" height="15" fill="rgb(242,17,10)"/><text x="99.5224%" y="143.50"></text></g><g><title>link (21,109,305 samples, 3.22%)</title><rect x="96.2956%" y="181" width="3.2203%" height="15" fill="rgb(242,107,0)"/><text x="96.5456%" y="191.50">link</text></g><g><title>parse_crate (941,440 samples, 0.14%)</title><rect x="99.5160%" y="181" width="0.1436%" height="15" fill="rgb(251,28,31)"/><text x="99.7660%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,445,005 samples, 0.22%)</title><rect x="99.7152%" y="181" width="0.2204%" height="15" fill="rgb(233,223,10)"/><text x="99.9652%" y="191.50"></text></g><g><title>all (655,501,053 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (655,501,053 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>