<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,918,012,762 samples, 20.69%)</title><rect x="0.0131%" y="197" width="20.6901%" height="15" fill="rgb(227,0,7)"/><text x="0.2631%" y="207.50">LLVM_passes</text></g><g><title>mir_const (51,813,818 samples, 0.37%)</title><rect x="21.3259%" y="133" width="0.3674%" height="15" fill="rgb(217,0,24)"/><text x="21.5759%" y="143.50"></text></g><g><title>unsafety_check_result (44,904,798 samples, 0.32%)</title><rect x="21.3749%" y="117" width="0.3184%" height="15" fill="rgb(221,193,54)"/><text x="21.6249%" y="127.50"></text></g><g><title>mir_built (39,998,874 samples, 0.28%)</title><rect x="21.4097%" y="101" width="0.2836%" height="15" fill="rgb(248,212,6)"/><text x="21.6597%" y="111.50"></text></g><g><title>mir_promoted (58,722,130 samples, 0.42%)</title><rect x="21.2871%" y="149" width="0.4164%" height="15" fill="rgb(208,68,35)"/><text x="21.5371%" y="159.50"></text></g><g><title>type_op_prove_predicate (18,372,298 samples, 0.13%)</title><rect x="21.7661%" y="149" width="0.1303%" height="15" fill="rgb(232,128,0)"/><text x="22.0161%" y="159.50"></text></g><g><title>MIR_borrow_checking (166,824,977 samples, 1.18%)</title><rect x="20.7136%" y="181" width="1.1829%" height="15" fill="rgb(207,160,47)"/><text x="20.9636%" y="191.50"></text></g><g><title>mir_borrowck (165,911,677 samples, 1.18%)</title><rect x="20.7201%" y="165" width="1.1764%" height="15" fill="rgb(228,23,34)"/><text x="20.9701%" y="175.50"></text></g><g><title>misc_checking_2 (14,808,140 samples, 0.10%)</title><rect x="21.9618%" y="181" width="0.1050%" height="15" fill="rgb(218,30,26)"/><text x="22.2118%" y="191.50"></text></g><g><title>misc_checking_3 (27,452,739 samples, 0.19%)</title><rect x="22.0668%" y="181" width="0.1947%" height="15" fill="rgb(220,122,19)"/><text x="22.3168%" y="191.50"></text></g><g><title>coherent_trait (29,459,060 samples, 0.21%)</title><rect x="22.2649%" y="149" width="0.2089%" height="15" fill="rgb(250,228,42)"/><text x="22.5149%" y="159.50"></text></g><g><title>specialization_graph_of (28,486,540 samples, 0.20%)</title><rect x="22.2718%" y="133" width="0.2020%" height="15" fill="rgb(240,193,28)"/><text x="22.5218%" y="143.50"></text></g><g><title>coherence_checking (29,952,224 samples, 0.21%)</title><rect x="22.2646%" y="165" width="0.2124%" height="15" fill="rgb(216,20,37)"/><text x="22.5146%" y="175.50"></text></g><g><title>evaluate_obligation (19,584,589 samples, 0.14%)</title><rect x="23.3000%" y="117" width="0.1389%" height="15" fill="rgb(206,188,39)"/><text x="23.5500%" y="127.50"></text></g><g><title>typeck (44,101,296 samples, 0.31%)</title><rect x="23.4972%" y="117" width="0.3127%" height="15" fill="rgb(217,207,13)"/><text x="23.7472%" y="127.50"></text></g><g><title>item_bodies_checking (188,036,412 samples, 1.33%)</title><rect x="22.4783%" y="165" width="1.3333%" height="15" fill="rgb(231,73,38)"/><text x="22.7283%" y="175.50"></text></g><g><title>typeck_item_bodies (188,032,012 samples, 1.33%)</title><rect x="22.4783%" y="149" width="1.3332%" height="15" fill="rgb(225,20,46)"/><text x="22.7283%" y="159.50"></text></g><g><title>typeck (187,424,948 samples, 1.33%)</title><rect x="22.4826%" y="133" width="1.3289%" height="15" fill="rgb(210,31,41)"/><text x="22.7326%" y="143.50"></text></g><g><title>mir_borrowck (19,230,616 samples, 0.14%)</title><rect x="23.9041%" y="101" width="0.1364%" height="15" fill="rgb(221,200,47)"/><text x="24.1541%" y="111.50"></text></g><g><title>mir_built (48,670,934 samples, 0.35%)</title><rect x="24.0442%" y="53" width="0.3451%" height="15" fill="rgb(226,26,5)"/><text x="24.2942%" y="63.50"></text></g><g><title>typeck (47,028,679 samples, 0.33%)</title><rect x="24.0559%" y="37" width="0.3335%" height="15" fill="rgb(249,33,26)"/><text x="24.3059%" y="47.50"></text></g><g><title>mir_const (54,487,225 samples, 0.39%)</title><rect x="24.0418%" y="85" width="0.3863%" height="15" fill="rgb(235,183,28)"/><text x="24.2918%" y="95.50"></text></g><g><title>unsafety_check_result (54,240,462 samples, 0.38%)</title><rect x="24.0436%" y="69" width="0.3846%" height="15" fill="rgb(221,5,38)"/><text x="24.2936%" y="79.50"></text></g><g><title>mir_promoted (54,708,288 samples, 0.39%)</title><rect x="24.0404%" y="101" width="0.3879%" height="15" fill="rgb(247,18,42)"/><text x="24.2904%" y="111.50"></text></g><g><title>type_of (77,952,122 samples, 0.55%)</title><rect x="23.8818%" y="133" width="0.5527%" height="15" fill="rgb(241,131,45)"/><text x="24.1318%" y="143.50"></text></g><g><title>mir_borrowck (77,796,182 samples, 0.55%)</title><rect x="23.8829%" y="117" width="0.5516%" height="15" fill="rgb(249,31,29)"/><text x="24.1329%" y="127.50"></text></g><g><title>item_types_checking (88,742,083 samples, 0.63%)</title><rect x="23.8116%" y="165" width="0.6292%" height="15" fill="rgb(225,111,53)"/><text x="24.0616%" y="175.50"></text></g><g><title>check_mod_item_types (88,717,383 samples, 0.63%)</title><rect x="23.8117%" y="149" width="0.6290%" height="15" fill="rgb(238,160,17)"/><text x="24.0617%" y="159.50"></text></g><g><title>check_impl_item_well_formed (24,540,544 samples, 0.17%)</title><rect x="24.5316%" y="149" width="0.1740%" height="15" fill="rgb(214,148,48)"/><text x="24.7816%" y="159.50"></text></g><g><title>check_item_well_formed (14,278,296 samples, 0.10%)</title><rect x="24.7056%" y="149" width="0.1012%" height="15" fill="rgb(232,36,49)"/><text x="24.9556%" y="159.50"></text></g><g><title>analysis (579,094,479 samples, 4.11%)</title><rect x="20.7032%" y="197" width="4.1060%" height="15" fill="rgb(209,103,24)"/><text x="20.9532%" y="207.50">anal..</text></g><g><title>type_check_crate (359,329,014 samples, 2.55%)</title><rect x="22.2614%" y="181" width="2.5478%" height="15" fill="rgb(229,88,8)"/><text x="22.5114%" y="191.50">ty..</text></g><g><title>wf_checking (40,432,871 samples, 0.29%)</title><rect x="24.5225%" y="165" width="0.2867%" height="15" fill="rgb(213,181,19)"/><text x="24.7725%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (151,420,718 samples, 1.07%)</title><rect x="39.3636%" y="165" width="1.0736%" height="15" fill="rgb(254,191,54)"/><text x="39.6136%" y="175.50"></text></g><g><title>const_caller_location (25,215,632 samples, 0.18%)</title><rect x="40.4373%" y="165" width="0.1788%" height="15" fill="rgb(241,83,37)"/><text x="40.6873%" y="175.50"></text></g><g><title>layout_of (28,292,450 samples, 0.20%)</title><rect x="41.2952%" y="149" width="0.2006%" height="15" fill="rgb(233,36,39)"/><text x="41.5452%" y="159.50"></text></g><g><title>predicates_of (17,470,032 samples, 0.12%)</title><rect x="41.7122%" y="133" width="0.1239%" height="15" fill="rgb(226,3,54)"/><text x="41.9622%" y="143.50"></text></g><g><title>param_env (48,054,079 samples, 0.34%)</title><rect x="41.4958%" y="149" width="0.3407%" height="15" fill="rgb(245,192,40)"/><text x="41.7458%" y="159.50"></text></g><g><title>normalize_projection_ty (48,810,234 samples, 0.35%)</title><rect x="41.8935%" y="133" width="0.3461%" height="15" fill="rgb(238,167,29)"/><text x="42.1435%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (56,848,660 samples, 0.40%)</title><rect x="41.8365%" y="149" width="0.4031%" height="15" fill="rgb(232,182,51)"/><text x="42.0865%" y="159.50"></text></g><g><title>fn_abi_of_instance (228,976,810 samples, 1.62%)</title><rect x="40.6211%" y="165" width="1.6236%" height="15" fill="rgb(231,60,39)"/><text x="40.8711%" y="175.50"></text></g><g><title>layout_of (38,166,676 samples, 0.27%)</title><rect x="42.2985%" y="165" width="0.2706%" height="15" fill="rgb(208,69,12)"/><text x="42.5485%" y="175.50"></text></g><g><title>symbol_name (22,460,968 samples, 0.16%)</title><rect x="42.5722%" y="165" width="0.1593%" height="15" fill="rgb(235,93,37)"/><text x="42.8222%" y="175.50"></text></g><g><title>codegen_module (2,529,427,292 samples, 17.93%)</title><rect x="24.8615%" y="181" width="17.9348%" height="15" fill="rgb(213,116,39)"/><text x="25.1115%" y="191.50">codegen_module</text></g><g><title>codegen_crate (2,537,061,629 samples, 17.99%)</title><rect x="24.8093%" y="197" width="17.9889%" height="15" fill="rgb(222,207,29)"/><text x="25.0593%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (6,061,584,760 samples, 42.98%)</title><rect x="42.8007%" y="181" width="42.9795%" height="15" fill="rgb(206,96,30)"/><text x="43.0507%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (5,549,604,662 samples, 39.35%)</title><rect x="46.4309%" y="165" width="39.3493%" height="15" fill="rgb(218,138,4)"/><text x="46.6809%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (6,590,826,924 samples, 46.73%)</title><rect x="42.7982%" y="197" width="46.7320%" height="15" fill="rgb(250,191,14)"/><text x="43.0482%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (528,895,163 samples, 3.75%)</title><rect x="85.7802%" y="181" width="3.7501%" height="15" fill="rgb(239,60,40)"/><text x="86.0302%" y="191.50">LLVM..</text></g><g><title>macro_expand_crate (96,200,009 samples, 0.68%)</title><rect x="89.5421%" y="181" width="0.6821%" height="15" fill="rgb(206,27,48)"/><text x="89.7921%" y="191.50"></text></g><g><title>expand_crate (96,184,469 samples, 0.68%)</title><rect x="89.5422%" y="165" width="0.6820%" height="15" fill="rgb(225,35,8)"/><text x="89.7922%" y="175.50"></text></g><g><title>configure_and_expand (110,003,839 samples, 0.78%)</title><rect x="89.5303%" y="197" width="0.7800%" height="15" fill="rgb(250,213,24)"/><text x="89.7803%" y="207.50"></text></g><g><title>free_global_ctxt (64,312,704 samples, 0.46%)</title><rect x="90.3428%" y="197" width="0.4560%" height="15" fill="rgb(247,123,22)"/><text x="90.5928%" y="207.50"></text></g><g><title>codegen_fn_attrs (14,467,822 samples, 0.10%)</title><rect x="91.6625%" y="117" width="0.1026%" height="15" fill="rgb(231,138,38)"/><text x="91.9125%" y="127.50"></text></g><g><title>evaluate_obligation (17,497,433 samples, 0.12%)</title><rect x="91.8325%" y="101" width="0.1241%" height="15" fill="rgb(231,145,46)"/><text x="92.0825%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (27,011,693 samples, 0.19%)</title><rect x="91.7651%" y="117" width="0.1915%" height="15" fill="rgb(251,118,11)"/><text x="92.0151%" y="127.50"></text></g><g><title>mir_shims (31,008,274 samples, 0.22%)</title><rect x="91.9961%" y="117" width="0.2199%" height="15" fill="rgb(217,147,25)"/><text x="92.2461%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (43,121,013 samples, 0.31%)</title><rect x="92.3728%" y="101" width="0.3057%" height="15" fill="rgb(247,81,37)"/><text x="92.6228%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (21,284,576 samples, 0.15%)</title><rect x="92.6786%" y="101" width="0.1509%" height="15" fill="rgb(209,12,38)"/><text x="92.9286%" y="111.50"></text></g><g><title>optimized_mir (89,736,254 samples, 0.64%)</title><rect x="92.2160%" y="117" width="0.6363%" height="15" fill="rgb(227,1,9)"/><text x="92.4660%" y="127.50"></text></g><g><title>evaluate_obligation (30,290,421 samples, 0.21%)</title><rect x="93.8444%" y="85" width="0.2148%" height="15" fill="rgb(248,47,43)"/><text x="94.0944%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (145,848,981 samples, 1.03%)</title><rect x="93.0634%" y="101" width="1.0341%" height="15" fill="rgb(221,10,30)"/><text x="93.3134%" y="111.50"></text></g><g><title>needs_drop_raw (16,873,071 samples, 0.12%)</title><rect x="94.1446%" y="101" width="0.1196%" height="15" fill="rgb(210,229,1)"/><text x="94.3946%" y="111.50"></text></g><g><title>resolve_instance (214,134,749 samples, 1.52%)</title><rect x="92.8522%" y="117" width="1.5183%" height="15" fill="rgb(222,148,37)"/><text x="93.1022%" y="127.50"></text></g><g><title>normalize_projection_ty (24,291,389 samples, 0.17%)</title><rect x="94.4240%" y="101" width="0.1722%" height="15" fill="rgb(234,67,33)"/><text x="94.6740%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (31,891,059 samples, 0.23%)</title><rect x="94.3706%" y="117" width="0.2261%" height="15" fill="rgb(247,98,35)"/><text x="94.6206%" y="127.50"></text></g><g><title>eval_to_const_value_raw (31,764,486 samples, 0.23%)</title><rect x="94.6649%" y="101" width="0.2252%" height="15" fill="rgb(247,138,52)"/><text x="94.9149%" y="111.50"></text></g><g><title>eval_to_const_value_raw (30,492,532 samples, 0.22%)</title><rect x="94.6739%" y="85" width="0.2162%" height="15" fill="rgb(213,79,30)"/><text x="94.9239%" y="95.50"></text></g><g><title>eval_to_allocation_raw (28,815,539 samples, 0.20%)</title><rect x="94.6858%" y="69" width="0.2043%" height="15" fill="rgb(246,177,23)"/><text x="94.9358%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (42,219,565 samples, 0.30%)</title><rect x="94.5967%" y="117" width="0.2994%" height="15" fill="rgb(230,62,27)"/><text x="94.8467%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (586,542,334 samples, 4.16%)</title><rect x="90.9049%" y="133" width="4.1589%" height="15" fill="rgb(216,154,8)"/><text x="91.1549%" y="143.50">monom..</text></g><g><title>monomorphization_collector (586,888,307 samples, 4.16%)</title><rect x="90.9048%" y="149" width="4.1613%" height="15" fill="rgb(244,35,45)"/><text x="91.1548%" y="159.50">monom..</text></g><g><title>assert_symbols_are_distinct (63,871,540 samples, 0.45%)</title><rect x="95.0663%" y="133" width="0.4529%" height="15" fill="rgb(251,115,12)"/><text x="95.3163%" y="143.50"></text></g><g><title>symbol_name (55,587,214 samples, 0.39%)</title><rect x="95.1251%" y="117" width="0.3941%" height="15" fill="rgb(240,54,50)"/><text x="95.3751%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (675,128,334 samples, 4.79%)</title><rect x="90.9031%" y="165" width="4.7870%" height="15" fill="rgb(233,84,52)"/><text x="91.1531%" y="175.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (87,991,755 samples, 0.62%)</title><rect x="95.0661%" y="149" width="0.6239%" height="15" fill="rgb(207,117,47)"/><text x="95.3161%" y="159.50"></text></g><g><title>cgu_partitioning (24,094,875 samples, 0.17%)</title><rect x="95.5192%" y="133" width="0.1708%" height="15" fill="rgb(249,43,39)"/><text x="95.7692%" y="143.50"></text></g><g><title>exported_symbols (679,046,974 samples, 4.81%)</title><rect x="90.8792%" y="181" width="4.8148%" height="15" fill="rgb(209,38,44)"/><text x="91.1292%" y="191.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (19,938,539 samples, 0.14%)</title><rect x="95.8346%" y="165" width="0.1414%" height="15" fill="rgb(236,212,23)"/><text x="96.0846%" y="175.50"></text></g><g><title>optimized_mir (39,744,543 samples, 0.28%)</title><rect x="95.6978%" y="181" width="0.2818%" height="15" fill="rgb(242,79,21)"/><text x="95.9478%" y="191.50"></text></g><g><title>generate_crate_metadata (731,490,778 samples, 5.19%)</title><rect x="90.7988%" y="197" width="5.1866%" height="15" fill="rgb(211,96,35)"/><text x="91.0488%" y="207.50">genera..</text></g><g><title>hir_lowering (18,369,707 samples, 0.13%)</title><rect x="95.9854%" y="197" width="0.1302%" height="15" fill="rgb(253,215,40)"/><text x="96.2354%" y="207.50"></text></g><g><title>finish_ongoing_codegen (487,034,463 samples, 3.45%)</title><rect x="96.1158%" y="181" width="3.4533%" height="15" fill="rgb(211,81,21)"/><text x="96.3658%" y="191.50">fin..</text></g><g><title>link_crate (40,462,791 samples, 0.29%)</title><rect x="99.5691%" y="181" width="0.2869%" height="15" fill="rgb(208,190,38)"/><text x="99.8191%" y="191.50"></text></g><g><title>link_binary (39,474,551 samples, 0.28%)</title><rect x="99.5761%" y="165" width="0.2799%" height="15" fill="rgb(235,213,38)"/><text x="99.8261%" y="175.50"></text></g><g><title>link_rlib (33,979,366 samples, 0.24%)</title><rect x="99.6151%" y="149" width="0.2409%" height="15" fill="rgb(237,122,38)"/><text x="99.8651%" y="159.50"></text></g><g><title>link (527,532,854 samples, 3.74%)</title><rect x="96.1157%" y="197" width="3.7405%" height="15" fill="rgb(244,218,35)"/><text x="96.3657%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (17,973,733 samples, 0.13%)</title><rect x="99.8652%" y="197" width="0.1274%" height="15" fill="rgb(240,68,47)"/><text x="100.1152%" y="207.50"></text></g><g><title>all (14,103,445,716 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (14,103,445,716 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>