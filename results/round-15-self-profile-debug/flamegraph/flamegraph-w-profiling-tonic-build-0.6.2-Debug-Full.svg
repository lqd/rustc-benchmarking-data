<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (240,126,292 samples, 11.64%)</title><rect x="0.0742%" y="165" width="11.6372%" height="15" fill="rgb(227,0,7)"/><text x="0.3242%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,911,749 samples, 0.14%)</title><rect x="17.0997%" y="53" width="0.1411%" height="15" fill="rgb(217,0,24)"/><text x="17.3497%" y="63.50"></text></g><g><title>specialization_graph_of (4,463,586 samples, 0.22%)</title><rect x="17.3227%" y="37" width="0.2163%" height="15" fill="rgb(221,193,54)"/><text x="17.5727%" y="47.50"></text></g><g><title>resolve_instance (6,327,299 samples, 0.31%)</title><rect x="17.2408%" y="53" width="0.3066%" height="15" fill="rgb(248,212,6)"/><text x="17.4908%" y="63.50"></text></g><g><title>thir_body (7,147,405 samples, 0.35%)</title><rect x="17.5498%" y="53" width="0.3464%" height="15" fill="rgb(208,68,35)"/><text x="17.7998%" y="63.50"></text></g><g><title>mir_const (40,167,272 samples, 1.95%)</title><rect x="15.9527%" y="101" width="1.9466%" height="15" fill="rgb(232,128,0)"/><text x="16.2027%" y="111.50">m..</text></g><g><title>unsafety_check_result (36,767,763 samples, 1.78%)</title><rect x="16.1174%" y="85" width="1.7819%" height="15" fill="rgb(207,160,47)"/><text x="16.3674%" y="95.50">u..</text></g><g><title>mir_built (34,142,382 samples, 1.65%)</title><rect x="16.2447%" y="69" width="1.6546%" height="15" fill="rgb(228,23,34)"/><text x="16.4947%" y="79.50"></text></g><g><title>mir_promoted (43,440,461 samples, 2.11%)</title><rect x="15.8019%" y="117" width="2.1052%" height="15" fill="rgb(218,30,26)"/><text x="16.0519%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (4,645,646 samples, 0.23%)</title><rect x="18.0380%" y="117" width="0.2251%" height="15" fill="rgb(220,122,19)"/><text x="18.2880%" y="127.50"></text></g><g><title>MIR_borrow_checking (133,697,093 samples, 6.48%)</title><rect x="11.7841%" y="149" width="6.4793%" height="15" fill="rgb(250,228,42)"/><text x="12.0341%" y="159.50">MIR_borr..</text></g><g><title>mir_borrowck (133,497,859 samples, 6.47%)</title><rect x="11.7938%" y="133" width="6.4697%" height="15" fill="rgb(240,193,28)"/><text x="12.0438%" y="143.50">mir_borr..</text></g><g><title>misc_checking_1 (2,771,489 samples, 0.13%)</title><rect x="18.2980%" y="149" width="0.1343%" height="15" fill="rgb(216,20,37)"/><text x="18.5480%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (2,483,797 samples, 0.12%)</title><rect x="18.4324%" y="133" width="0.1204%" height="15" fill="rgb(206,188,39)"/><text x="18.6824%" y="143.50"></text></g><g><title>misc_checking_2 (4,223,475 samples, 0.20%)</title><rect x="18.4323%" y="149" width="0.2047%" height="15" fill="rgb(217,207,13)"/><text x="18.6823%" y="159.50"></text></g><g><title>crate_lints (5,625,720 samples, 0.27%)</title><rect x="18.6951%" y="117" width="0.2726%" height="15" fill="rgb(231,73,38)"/><text x="18.9451%" y="127.50"></text></g><g><title>lint_checking (8,661,622 samples, 0.42%)</title><rect x="18.6950%" y="133" width="0.4198%" height="15" fill="rgb(225,20,46)"/><text x="18.9450%" y="143.50"></text></g><g><title>module_lints (3,033,522 samples, 0.15%)</title><rect x="18.9677%" y="117" width="0.1470%" height="15" fill="rgb(210,31,41)"/><text x="19.2177%" y="127.50"></text></g><g><title>lint_mod (3,026,352 samples, 0.15%)</title><rect x="18.9681%" y="101" width="0.1467%" height="15" fill="rgb(221,200,47)"/><text x="19.2181%" y="111.50"></text></g><g><title>privacy_checking_modules (4,076,474 samples, 0.20%)</title><rect x="19.1464%" y="133" width="0.1976%" height="15" fill="rgb(226,26,5)"/><text x="19.3964%" y="143.50"></text></g><g><title>check_mod_privacy (4,072,124 samples, 0.20%)</title><rect x="19.1466%" y="117" width="0.1973%" height="15" fill="rgb(249,33,26)"/><text x="19.3966%" y="127.50"></text></g><g><title>misc_checking_3 (14,604,346 samples, 0.71%)</title><rect x="18.6370%" y="149" width="0.7078%" height="15" fill="rgb(235,183,28)"/><text x="18.8870%" y="159.50"></text></g><g><title>impl_parent (2,465,869 samples, 0.12%)</title><rect x="19.5499%" y="85" width="0.1195%" height="15" fill="rgb(221,5,38)"/><text x="19.7999%" y="95.50"></text></g><g><title>impl_trait_ref (6,402,205 samples, 0.31%)</title><rect x="19.6694%" y="85" width="0.3103%" height="15" fill="rgb(247,18,42)"/><text x="19.9194%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,471,854 samples, 0.27%)</title><rect x="19.7145%" y="69" width="0.2652%" height="15" fill="rgb(241,131,45)"/><text x="19.9645%" y="79.50"></text></g><g><title>coherent_trait (13,711,826 samples, 0.66%)</title><rect x="19.3511%" y="117" width="0.6645%" height="15" fill="rgb(249,31,29)"/><text x="19.6011%" y="127.50"></text></g><g><title>specialization_graph_of (13,696,255 samples, 0.66%)</title><rect x="19.3518%" y="101" width="0.6638%" height="15" fill="rgb(225,111,53)"/><text x="19.6018%" y="111.50"></text></g><g><title>coherence_checking (13,791,248 samples, 0.67%)</title><rect x="19.3499%" y="133" width="0.6684%" height="15" fill="rgb(238,160,17)"/><text x="19.5999%" y="143.50"></text></g><g><title>evaluate_obligation (3,733,508 samples, 0.18%)</title><rect x="26.5887%" y="85" width="0.1809%" height="15" fill="rgb(214,148,48)"/><text x="26.8387%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,589,537 samples, 0.13%)</title><rect x="27.3266%" y="37" width="0.1255%" height="15" fill="rgb(232,36,49)"/><text x="27.5766%" y="47.50"></text></g><g><title>adt_dtorck_constraint (3,206,963 samples, 0.16%)</title><rect x="27.3021%" y="53" width="0.1554%" height="15" fill="rgb(209,103,24)"/><text x="27.5521%" y="63.50"></text></g><g><title>dropck_outlives (3,609,160 samples, 0.17%)</title><rect x="27.2860%" y="69" width="0.1749%" height="15" fill="rgb(229,88,8)"/><text x="27.5360%" y="79.50"></text></g><g><title>evaluate_obligation (2,869,973 samples, 0.14%)</title><rect x="27.4609%" y="69" width="0.1391%" height="15" fill="rgb(213,181,19)"/><text x="27.7109%" y="79.50"></text></g><g><title>typeck (15,445,985 samples, 0.75%)</title><rect x="26.9372%" y="85" width="0.7486%" height="15" fill="rgb(254,191,54)"/><text x="27.1872%" y="95.50"></text></g><g><title>item_bodies_checking (158,292,766 samples, 7.67%)</title><rect x="20.0195%" y="133" width="7.6713%" height="15" fill="rgb(241,83,37)"/><text x="20.2695%" y="143.50">item_bodies..</text></g><g><title>typeck_item_bodies (158,289,086 samples, 7.67%)</title><rect x="20.0197%" y="117" width="7.6711%" height="15" fill="rgb(233,36,39)"/><text x="20.2697%" y="127.50">typeck_item..</text></g><g><title>typeck (158,174,475 samples, 7.67%)</title><rect x="20.0252%" y="101" width="7.6656%" height="15" fill="rgb(226,3,54)"/><text x="20.2752%" y="111.50">typeck</text></g><g><title>type_collecting (3,238,055 samples, 0.16%)</title><rect x="27.7534%" y="133" width="0.1569%" height="15" fill="rgb(245,192,40)"/><text x="28.0034%" y="143.50"></text></g><g><title>collect_mod_item_types (3,222,255 samples, 0.16%)</title><rect x="27.7541%" y="117" width="0.1562%" height="15" fill="rgb(238,167,29)"/><text x="28.0041%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,755,028 samples, 0.13%)</title><rect x="27.9263%" y="117" width="0.1335%" height="15" fill="rgb(232,182,51)"/><text x="28.1763%" y="127.50"></text></g><g><title>check_item_well_formed (4,090,895 samples, 0.20%)</title><rect x="28.0598%" y="117" width="0.1983%" height="15" fill="rgb(231,60,39)"/><text x="28.3098%" y="127.50"></text></g><g><title>analysis (342,092,034 samples, 16.58%)</title><rect x="11.7114%" y="165" width="16.5787%" height="15" fill="rgb(208,69,12)"/><text x="11.9614%" y="175.50">analysis</text></g><g><title>type_check_crate (184,582,287 samples, 8.95%)</title><rect x="19.3448%" y="149" width="8.9454%" height="15" fill="rgb(235,93,37)"/><text x="19.5948%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (7,829,653 samples, 0.38%)</title><rect x="27.9107%" y="133" width="0.3794%" height="15" fill="rgb(213,116,39)"/><text x="28.1607%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (5,783,492 samples, 0.28%)</title><rect x="37.5164%" y="133" width="0.2803%" height="15" fill="rgb(222,207,29)"/><text x="37.7664%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,109,160 samples, 0.10%)</title><rect x="38.2338%" y="117" width="0.1022%" height="15" fill="rgb(206,96,30)"/><text x="38.4838%" y="127.50"></text></g><g><title>layout_of (3,036,172 samples, 0.15%)</title><rect x="38.3519%" y="117" width="0.1471%" height="15" fill="rgb(218,138,4)"/><text x="38.6019%" y="127.50"></text></g><g><title>predicates_of (2,654,060 samples, 0.13%)</title><rect x="38.7762%" y="101" width="0.1286%" height="15" fill="rgb(250,191,14)"/><text x="39.0262%" y="111.50"></text></g><g><title>param_env (8,398,086 samples, 0.41%)</title><rect x="38.4990%" y="117" width="0.4070%" height="15" fill="rgb(239,60,40)"/><text x="38.7490%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,493,491 samples, 0.12%)</title><rect x="38.9060%" y="117" width="0.1208%" height="15" fill="rgb(206,27,48)"/><text x="39.1560%" y="127.50"></text></g><g><title>fn_abi_of_instance (24,237,374 samples, 1.17%)</title><rect x="37.8587%" y="133" width="1.1746%" height="15" fill="rgb(225,35,8)"/><text x="38.1087%" y="143.50"></text></g><g><title>layout_of (2,115,641 samples, 0.10%)</title><rect x="39.2260%" y="101" width="0.1025%" height="15" fill="rgb(250,213,24)"/><text x="39.4760%" y="111.50"></text></g><g><title>layout_of (3,082,211 samples, 0.15%)</title><rect x="39.2023%" y="117" width="0.1494%" height="15" fill="rgb(247,123,22)"/><text x="39.4523%" y="127.50"></text></g><g><title>layout_of (5,809,524 samples, 0.28%)</title><rect x="39.0810%" y="133" width="0.2815%" height="15" fill="rgb(231,138,38)"/><text x="39.3310%" y="143.50"></text></g><g><title>symbol_name (2,958,621 samples, 0.14%)</title><rect x="39.3637%" y="133" width="0.1434%" height="15" fill="rgb(231,145,46)"/><text x="39.6137%" y="143.50"></text></g><g><title>codegen_module (228,642,400 samples, 11.08%)</title><rect x="28.4423%" y="149" width="11.0806%" height="15" fill="rgb(251,118,11)"/><text x="28.6923%" y="159.50">codegen_module</text></g><g><title>codegen_crate (231,935,425 samples, 11.24%)</title><rect x="28.2907%" y="165" width="11.2402%" height="15" fill="rgb(217,147,25)"/><text x="28.5407%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (753,494,911 samples, 36.52%)</title><rect x="39.5414%" y="149" width="36.5164%" height="15" fill="rgb(247,81,37)"/><text x="39.7914%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (729,050,012 samples, 35.33%)</title><rect x="40.7261%" y="133" width="35.3317%" height="15" fill="rgb(209,12,38)"/><text x="40.9761%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (774,128,970 samples, 37.52%)</title><rect x="39.5309%" y="165" width="37.5164%" height="15" fill="rgb(227,1,9)"/><text x="39.7809%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (20,416,296 samples, 0.99%)</title><rect x="76.0578%" y="149" width="0.9894%" height="15" fill="rgb(248,47,43)"/><text x="76.3078%" y="159.50"></text></g><g><title>metadata_register_crate (11,685,565 samples, 0.57%)</title><rect x="90.3761%" y="117" width="0.5663%" height="15" fill="rgb(221,10,30)"/><text x="90.6261%" y="127.50"></text></g><g><title>metadata_register_crate (8,931,544 samples, 0.43%)</title><rect x="90.5096%" y="101" width="0.4328%" height="15" fill="rgb(210,229,1)"/><text x="90.7596%" y="111.50"></text></g><g><title>metadata_register_crate (6,957,113 samples, 0.34%)</title><rect x="90.6053%" y="85" width="0.3372%" height="15" fill="rgb(222,148,37)"/><text x="90.8553%" y="95.50"></text></g><g><title>metadata_register_crate (5,872,172 samples, 0.28%)</title><rect x="90.6579%" y="69" width="0.2846%" height="15" fill="rgb(234,67,33)"/><text x="90.9079%" y="79.50"></text></g><g><title>macro_expand_crate (286,103,225 samples, 13.87%)</title><rect x="77.1007%" y="149" width="13.8653%" height="15" fill="rgb(247,98,35)"/><text x="77.3507%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (286,087,125 samples, 13.86%)</title><rect x="77.1015%" y="133" width="13.8646%" height="15" fill="rgb(247,138,52)"/><text x="77.3515%" y="143.50">expand_crate</text></g><g><title>finalize_macro_resolutions (3,596,608 samples, 0.17%)</title><rect x="90.9843%" y="133" width="0.1743%" height="15" fill="rgb(213,79,30)"/><text x="91.2343%" y="143.50"></text></g><g><title>late_resolve_crate (7,488,161 samples, 0.36%)</title><rect x="91.1586%" y="133" width="0.3629%" height="15" fill="rgb(246,177,23)"/><text x="91.4086%" y="143.50"></text></g><g><title>configure_and_expand (299,595,849 samples, 14.52%)</title><rect x="77.0473%" y="165" width="14.5192%" height="15" fill="rgb(230,62,27)"/><text x="77.2973%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (12,170,769 samples, 0.59%)</title><rect x="90.9767%" y="149" width="0.5898%" height="15" fill="rgb(216,154,8)"/><text x="91.2267%" y="159.50"></text></g><g><title>early_lint_checks (3,143,134 samples, 0.15%)</title><rect x="91.6165%" y="165" width="0.1523%" height="15" fill="rgb(244,35,45)"/><text x="91.8665%" y="175.50"></text></g><g><title>free_global_ctxt (10,525,263 samples, 0.51%)</title><rect x="91.7689%" y="165" width="0.5101%" height="15" fill="rgb(251,115,12)"/><text x="92.0189%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,614,336 samples, 0.13%)</title><rect x="93.0062%" y="85" width="0.1267%" height="15" fill="rgb(240,54,50)"/><text x="93.2562%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,172,575 samples, 0.15%)</title><rect x="93.4160%" y="69" width="0.1538%" height="15" fill="rgb(233,84,52)"/><text x="93.6660%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,941,091 samples, 0.14%)</title><rect x="93.5697%" y="69" width="0.1425%" height="15" fill="rgb(207,117,47)"/><text x="93.8197%" y="79.50"></text></g><g><title>optimized_mir (9,968,064 samples, 0.48%)</title><rect x="93.2453%" y="85" width="0.4831%" height="15" fill="rgb(249,43,39)"/><text x="93.4953%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (8,883,775 samples, 0.43%)</title><rect x="93.8246%" y="69" width="0.4305%" height="15" fill="rgb(209,38,44)"/><text x="94.0746%" y="79.50"></text></g><g><title>specialization_graph_of (4,275,406 samples, 0.21%)</title><rect x="94.3489%" y="69" width="0.2072%" height="15" fill="rgb(236,212,23)"/><text x="94.5989%" y="79.50"></text></g><g><title>resolve_instance (17,695,650 samples, 0.86%)</title><rect x="93.7284%" y="85" width="0.8576%" height="15" fill="rgb(242,79,21)"/><text x="93.9784%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (8,860,585 samples, 0.43%)</title><rect x="94.7272%" y="85" width="0.4294%" height="15" fill="rgb(211,96,35)"/><text x="94.9772%" y="95.50"></text></g><g><title>upstream_monomorphizations (8,798,694 samples, 0.43%)</title><rect x="94.7302%" y="69" width="0.4264%" height="15" fill="rgb(253,215,40)"/><text x="94.9802%" y="79.50"></text></g><g><title>exported_symbols (7,602,787 samples, 0.37%)</title><rect x="94.7882%" y="53" width="0.3685%" height="15" fill="rgb(211,81,21)"/><text x="95.0382%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (7,589,147 samples, 0.37%)</title><rect x="94.7889%" y="37" width="0.3678%" height="15" fill="rgb(208,190,38)"/><text x="95.0389%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (50,883,405 samples, 2.47%)</title><rect x="92.7078%" y="101" width="2.4659%" height="15" fill="rgb(235,213,38)"/><text x="92.9578%" y="111.50">mo..</text></g><g><title>monomorphization_collector (50,950,565 samples, 2.47%)</title><rect x="92.7076%" y="117" width="2.4692%" height="15" fill="rgb(237,122,38)"/><text x="92.9576%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (3,543,818 samples, 0.17%)</title><rect x="95.1774%" y="101" width="0.1717%" height="15" fill="rgb(244,218,35)"/><text x="95.4274%" y="111.50"></text></g><g><title>symbol_name (3,213,792 samples, 0.16%)</title><rect x="95.1934%" y="85" width="0.1557%" height="15" fill="rgb(240,68,47)"/><text x="95.4434%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (56,126,091 samples, 2.72%)</title><rect x="92.7055%" y="133" width="2.7200%" height="15" fill="rgb(210,16,53)"/><text x="92.9555%" y="143.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (5,132,635 samples, 0.25%)</title><rect x="95.1768%" y="117" width="0.2487%" height="15" fill="rgb(235,124,12)"/><text x="95.4268%" y="127.50"></text></g><g><title>exported_symbols (56,614,916 samples, 2.74%)</title><rect x="92.6986%" y="149" width="2.7437%" height="15" fill="rgb(224,169,11)"/><text x="92.9486%" y="159.50">ex..</text></g><g><title>layout_of (2,362,252 samples, 0.11%)</title><rect x="96.0280%" y="133" width="0.1145%" height="15" fill="rgb(250,166,2)"/><text x="96.2780%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,928,927 samples, 0.92%)</title><rect x="96.1424%" y="133" width="0.9173%" height="15" fill="rgb(242,216,29)"/><text x="96.3924%" y="143.50"></text></g><g><title>optimized_mir (34,111,034 samples, 1.65%)</title><rect x="95.4501%" y="149" width="1.6531%" height="15" fill="rgb(230,116,27)"/><text x="95.7001%" y="159.50"></text></g><g><title>generate_crate_metadata (100,034,341 samples, 4.85%)</title><rect x="92.2790%" y="165" width="4.8479%" height="15" fill="rgb(228,99,48)"/><text x="92.5290%" y="175.50">genera..</text></g><g><title>hir_lowering (14,679,517 samples, 0.71%)</title><rect x="97.1269%" y="165" width="0.7114%" height="15" fill="rgb(253,11,6)"/><text x="97.3769%" y="175.50"></text></g><g><title>finish_ongoing_codegen (29,614,567 samples, 1.44%)</title><rect x="97.8394%" y="149" width="1.4352%" height="15" fill="rgb(247,143,39)"/><text x="98.0894%" y="159.50"></text></g><g><title>link_crate (8,738,644 samples, 0.42%)</title><rect x="99.2746%" y="149" width="0.4235%" height="15" fill="rgb(236,97,10)"/><text x="99.5246%" y="159.50"></text></g><g><title>link_binary (8,601,152 samples, 0.42%)</title><rect x="99.2813%" y="133" width="0.4168%" height="15" fill="rgb(233,208,19)"/><text x="99.5313%" y="143.50"></text></g><g><title>link_rlib (7,567,721 samples, 0.37%)</title><rect x="99.3314%" y="117" width="0.3668%" height="15" fill="rgb(216,164,2)"/><text x="99.5814%" y="127.50"></text></g><g><title>link (38,386,681 samples, 1.86%)</title><rect x="97.8383%" y="165" width="1.8603%" height="15" fill="rgb(220,129,5)"/><text x="98.0883%" y="175.50">l..</text></g><g><title>parse_crate (2,545,458 samples, 0.12%)</title><rect x="99.6986%" y="165" width="0.1234%" height="15" fill="rgb(242,17,10)"/><text x="99.9486%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,181,913 samples, 0.11%)</title><rect x="99.8346%" y="165" width="0.1057%" height="15" fill="rgb(242,107,0)"/><text x="100.0846%" y="175.50"></text></g><g><title>all (2,063,441,780 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,063,441,780 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>