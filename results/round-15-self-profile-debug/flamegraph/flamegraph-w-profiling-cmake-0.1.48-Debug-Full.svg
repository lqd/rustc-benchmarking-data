<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (139,057,066 samples, 12.88%)</title><rect x="0.0563%" y="197" width="12.8778%" height="15" fill="rgb(227,0,7)"/><text x="0.3063%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,035,733 samples, 0.19%)</title><rect x="15.9653%" y="85" width="0.1885%" height="15" fill="rgb(217,0,24)"/><text x="16.2153%" y="95.50"></text></g><g><title>specialization_graph_of (3,485,525 samples, 0.32%)</title><rect x="16.2031%" y="69" width="0.3228%" height="15" fill="rgb(221,193,54)"/><text x="16.4531%" y="79.50"></text></g><g><title>impl_trait_ref (1,437,355 samples, 0.13%)</title><rect x="16.3928%" y="53" width="0.1331%" height="15" fill="rgb(248,212,6)"/><text x="16.6428%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,161,000 samples, 0.11%)</title><rect x="16.4184%" y="37" width="0.1075%" height="15" fill="rgb(208,68,35)"/><text x="16.6684%" y="47.50"></text></g><g><title>resolve_instance (4,132,410 samples, 0.38%)</title><rect x="16.1538%" y="85" width="0.3827%" height="15" fill="rgb(232,128,0)"/><text x="16.4038%" y="95.50"></text></g><g><title>thir_body (1,944,461 samples, 0.18%)</title><rect x="16.5410%" y="85" width="0.1801%" height="15" fill="rgb(207,160,47)"/><text x="16.7910%" y="95.50"></text></g><g><title>mir_const (16,115,893 samples, 1.49%)</title><rect x="15.2317%" y="133" width="1.4925%" height="15" fill="rgb(228,23,34)"/><text x="15.4817%" y="143.50"></text></g><g><title>unsafety_check_result (14,252,315 samples, 1.32%)</title><rect x="15.4043%" y="117" width="1.3199%" height="15" fill="rgb(218,30,26)"/><text x="15.6543%" y="127.50"></text></g><g><title>mir_built (12,620,309 samples, 1.17%)</title><rect x="15.5554%" y="101" width="1.1687%" height="15" fill="rgb(220,122,19)"/><text x="15.8054%" y="111.50"></text></g><g><title>mir_promoted (17,544,580 samples, 1.62%)</title><rect x="15.1033%" y="149" width="1.6248%" height="15" fill="rgb(250,228,42)"/><text x="15.3533%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,917,923 samples, 0.36%)</title><rect x="16.9112%" y="149" width="0.3628%" height="15" fill="rgb(240,193,28)"/><text x="17.1612%" y="159.50"></text></g><g><title>MIR_borrow_checking (46,549,838 samples, 4.31%)</title><rect x="12.9641%" y="181" width="4.3109%" height="15" fill="rgb(216,20,37)"/><text x="13.2141%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (46,423,656 samples, 4.30%)</title><rect x="12.9758%" y="165" width="4.2992%" height="15" fill="rgb(206,188,39)"/><text x="13.2258%" y="175.50">mir_b..</text></g><g><title>misc_checking_1 (1,113,862 samples, 0.10%)</title><rect x="17.2922%" y="181" width="0.1032%" height="15" fill="rgb(217,207,13)"/><text x="17.5422%" y="191.50"></text></g><g><title>misc_checking_2 (1,560,756 samples, 0.14%)</title><rect x="17.3953%" y="181" width="0.1445%" height="15" fill="rgb(231,73,38)"/><text x="17.6453%" y="191.50"></text></g><g><title>crate_lints (2,151,892 samples, 0.20%)</title><rect x="17.5918%" y="149" width="0.1993%" height="15" fill="rgb(225,20,46)"/><text x="17.8418%" y="159.50"></text></g><g><title>type_of (1,092,919 samples, 0.10%)</title><rect x="17.6899%" y="133" width="0.1012%" height="15" fill="rgb(210,31,41)"/><text x="17.9399%" y="143.50"></text></g><g><title>lint_checking (2,807,758 samples, 0.26%)</title><rect x="17.5917%" y="165" width="0.2600%" height="15" fill="rgb(221,200,47)"/><text x="17.8417%" y="175.50"></text></g><g><title>privacy_checking_modules (1,091,591 samples, 0.10%)</title><rect x="17.8716%" y="165" width="0.1011%" height="15" fill="rgb(226,26,5)"/><text x="18.1216%" y="175.50"></text></g><g><title>check_mod_privacy (1,089,851 samples, 0.10%)</title><rect x="17.8718%" y="149" width="0.1009%" height="15" fill="rgb(249,33,26)"/><text x="18.1218%" y="159.50"></text></g><g><title>misc_checking_3 (4,685,327 samples, 0.43%)</title><rect x="17.5399%" y="181" width="0.4339%" height="15" fill="rgb(235,183,28)"/><text x="17.7899%" y="191.50"></text></g><g><title>impl_parent (1,166,534 samples, 0.11%)</title><rect x="18.1543%" y="117" width="0.1080%" height="15" fill="rgb(221,5,38)"/><text x="18.4043%" y="127.50"></text></g><g><title>impl_trait_ref (3,249,364 samples, 0.30%)</title><rect x="18.2624%" y="117" width="0.3009%" height="15" fill="rgb(247,18,42)"/><text x="18.5124%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,806,682 samples, 0.26%)</title><rect x="18.3034%" y="101" width="0.2599%" height="15" fill="rgb(241,131,45)"/><text x="18.5534%" y="111.50"></text></g><g><title>coherent_trait (6,614,267 samples, 0.61%)</title><rect x="17.9802%" y="149" width="0.6125%" height="15" fill="rgb(249,31,29)"/><text x="18.2302%" y="159.50"></text></g><g><title>specialization_graph_of (6,606,407 samples, 0.61%)</title><rect x="17.9809%" y="133" width="0.6118%" height="15" fill="rgb(225,111,53)"/><text x="18.2309%" y="143.50"></text></g><g><title>coherence_checking (6,661,687 samples, 0.62%)</title><rect x="17.9791%" y="165" width="0.6169%" height="15" fill="rgb(238,160,17)"/><text x="18.2291%" y="175.50"></text></g><g><title>evaluate_obligation (1,290,054 samples, 0.12%)</title><rect x="19.8331%" y="117" width="0.1195%" height="15" fill="rgb(214,148,48)"/><text x="20.0831%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,219,031 samples, 0.11%)</title><rect x="22.8156%" y="85" width="0.1129%" height="15" fill="rgb(232,36,49)"/><text x="23.0656%" y="95.50"></text></g><g><title>dropck_outlives (1,477,833 samples, 0.14%)</title><rect x="22.7969%" y="101" width="0.1369%" height="15" fill="rgb(209,103,24)"/><text x="23.0469%" y="111.50"></text></g><g><title>evaluate_obligation (4,263,392 samples, 0.39%)</title><rect x="22.9337%" y="101" width="0.3948%" height="15" fill="rgb(229,88,8)"/><text x="23.1837%" y="111.50"></text></g><g><title>typeck (38,458,926 samples, 3.56%)</title><rect x="20.0600%" y="117" width="3.5616%" height="15" fill="rgb(213,181,19)"/><text x="20.3100%" y="127.50">type..</text></g><g><title>item_bodies_checking (54,304,395 samples, 5.03%)</title><rect x="18.5975%" y="165" width="5.0290%" height="15" fill="rgb(254,191,54)"/><text x="18.8475%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (54,300,885 samples, 5.03%)</title><rect x="18.5979%" y="149" width="5.0287%" height="15" fill="rgb(241,83,37)"/><text x="18.8479%" y="159.50">typeck..</text></g><g><title>typeck (54,239,574 samples, 5.02%)</title><rect x="18.6036%" y="133" width="5.0230%" height="15" fill="rgb(233,36,39)"/><text x="18.8536%" y="143.50">typeck</text></g><g><title>type_collecting (1,371,834 samples, 0.13%)</title><rect x="23.6859%" y="165" width="0.1270%" height="15" fill="rgb(226,3,54)"/><text x="23.9359%" y="175.50"></text></g><g><title>collect_mod_item_types (1,364,814 samples, 0.13%)</title><rect x="23.6865%" y="149" width="0.1264%" height="15" fill="rgb(245,192,40)"/><text x="23.9365%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,900,618 samples, 0.18%)</title><rect x="23.8247%" y="149" width="0.1760%" height="15" fill="rgb(238,167,29)"/><text x="24.0747%" y="159.50"></text></g><g><title>analysis (120,703,622 samples, 11.18%)</title><rect x="12.9341%" y="197" width="11.1781%" height="15" fill="rgb(232,182,51)"/><text x="13.1841%" y="207.50">analysis</text></g><g><title>type_check_crate (66,284,285 samples, 6.14%)</title><rect x="17.9738%" y="181" width="6.1385%" height="15" fill="rgb(231,60,39)"/><text x="18.2238%" y="191.50">type_che..</text></g><g><title>wf_checking (3,226,562 samples, 0.30%)</title><rect x="23.8134%" y="165" width="0.2988%" height="15" fill="rgb(208,69,12)"/><text x="24.0634%" y="175.50"></text></g><g><title>check_item_well_formed (1,204,572 samples, 0.11%)</title><rect x="24.0007%" y="149" width="0.1116%" height="15" fill="rgb(235,93,37)"/><text x="24.2507%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (2,432,853 samples, 0.23%)</title><rect x="33.1542%" y="165" width="0.2253%" height="15" fill="rgb(213,116,39)"/><text x="33.4042%" y="175.50"></text></g><g><title>const_caller_location (1,102,209 samples, 0.10%)</title><rect x="33.3795%" y="165" width="0.1021%" height="15" fill="rgb(222,207,29)"/><text x="33.6295%" y="175.50"></text></g><g><title>item_attrs (1,105,469 samples, 0.10%)</title><rect x="34.0567%" y="133" width="0.1024%" height="15" fill="rgb(206,96,30)"/><text x="34.3067%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,829,036 samples, 0.17%)</title><rect x="34.0191%" y="149" width="0.1694%" height="15" fill="rgb(218,138,4)"/><text x="34.2691%" y="159.50"></text></g><g><title>layout_of (1,815,506 samples, 0.17%)</title><rect x="34.2157%" y="149" width="0.1681%" height="15" fill="rgb(250,191,14)"/><text x="34.4657%" y="159.50"></text></g><g><title>predicates_of (2,332,294 samples, 0.22%)</title><rect x="34.9193%" y="133" width="0.2160%" height="15" fill="rgb(239,60,40)"/><text x="35.1693%" y="143.50"></text></g><g><title>predicates_defined_on (1,635,708 samples, 0.15%)</title><rect x="34.9838%" y="117" width="0.1515%" height="15" fill="rgb(206,27,48)"/><text x="35.2338%" y="127.50"></text></g><g><title>param_env (8,144,505 samples, 0.75%)</title><rect x="34.3839%" y="149" width="0.7542%" height="15" fill="rgb(225,35,8)"/><text x="34.6339%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,837,429 samples, 0.17%)</title><rect x="35.1381%" y="149" width="0.1702%" height="15" fill="rgb(250,213,24)"/><text x="35.3881%" y="159.50"></text></g><g><title>normalize_projection_ty (1,447,993 samples, 0.13%)</title><rect x="35.1742%" y="133" width="0.1341%" height="15" fill="rgb(247,123,22)"/><text x="35.4242%" y="143.50"></text></g><g><title>fn_abi_of_instance (19,748,841 samples, 1.83%)</title><rect x="33.4903%" y="165" width="1.8289%" height="15" fill="rgb(231,138,38)"/><text x="33.7403%" y="175.50">f..</text></g><g><title>layout_of (3,721,671 samples, 0.34%)</title><rect x="35.4044%" y="165" width="0.3447%" height="15" fill="rgb(231,145,46)"/><text x="35.6544%" y="175.50"></text></g><g><title>symbol_name (3,009,752 samples, 0.28%)</title><rect x="35.7537%" y="165" width="0.2787%" height="15" fill="rgb(251,118,11)"/><text x="36.0037%" y="175.50"></text></g><g><title>codegen_module (126,502,162 samples, 11.72%)</title><rect x="24.3511%" y="181" width="11.7151%" height="15" fill="rgb(217,147,25)"/><text x="24.6011%" y="191.50">codegen_module</text></g><g><title>codegen_crate (129,148,457 samples, 11.96%)</title><rect x="24.1131%" y="197" width="11.9602%" height="15" fill="rgb(247,81,37)"/><text x="24.3631%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (542,824,968 samples, 50.27%)</title><rect x="36.0967%" y="181" width="50.2700%" height="15" fill="rgb(209,12,38)"/><text x="36.3467%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (524,573,686 samples, 48.58%)</title><rect x="37.7869%" y="165" width="48.5798%" height="15" fill="rgb(227,1,9)"/><text x="38.0369%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (565,824,512 samples, 52.40%)</title><rect x="36.0733%" y="197" width="52.3999%" height="15" fill="rgb(248,47,43)"/><text x="36.3233%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (22,746,949 samples, 2.11%)</title><rect x="86.3667%" y="181" width="2.1066%" height="15" fill="rgb(221,10,30)"/><text x="86.6167%" y="191.50">L..</text></g><g><title>macro_expand_crate (17,353,904 samples, 1.61%)</title><rect x="88.5205%" y="181" width="1.6071%" height="15" fill="rgb(210,229,1)"/><text x="88.7705%" y="191.50"></text></g><g><title>expand_crate (17,332,674 samples, 1.61%)</title><rect x="88.5224%" y="165" width="1.6051%" height="15" fill="rgb(222,148,37)"/><text x="88.7724%" y="175.50"></text></g><g><title>metadata_register_crate (2,372,734 samples, 0.22%)</title><rect x="89.9078%" y="149" width="0.2197%" height="15" fill="rgb(234,67,33)"/><text x="90.1578%" y="159.50"></text></g><g><title>late_resolve_crate (2,597,726 samples, 0.24%)</title><rect x="90.1925%" y="165" width="0.2406%" height="15" fill="rgb(247,98,35)"/><text x="90.4425%" y="175.50"></text></g><g><title>configure_and_expand (21,271,423 samples, 1.97%)</title><rect x="88.4732%" y="197" width="1.9699%" height="15" fill="rgb(247,138,52)"/><text x="88.7232%" y="207.50">c..</text></g><g><title>resolve_crate (2,966,989 samples, 0.27%)</title><rect x="90.1684%" y="181" width="0.2748%" height="15" fill="rgb(213,79,30)"/><text x="90.4184%" y="191.50"></text></g><g><title>free_global_ctxt (6,243,673 samples, 0.58%)</title><rect x="90.5003%" y="197" width="0.5782%" height="15" fill="rgb(246,177,23)"/><text x="90.7503%" y="207.50"></text></g><g><title>item_attrs (1,455,184 samples, 0.13%)</title><rect x="91.6337%" y="101" width="0.1348%" height="15" fill="rgb(230,62,27)"/><text x="91.8837%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,384,724 samples, 0.13%)</title><rect x="91.6403%" y="85" width="0.1282%" height="15" fill="rgb(216,154,8)"/><text x="91.8903%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,539,400 samples, 0.24%)</title><rect x="91.5924%" y="117" width="0.2352%" height="15" fill="rgb(244,35,45)"/><text x="91.8424%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,712,354 samples, 0.44%)</title><rect x="92.3635%" y="101" width="0.4364%" height="15" fill="rgb(251,115,12)"/><text x="92.6135%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,070,868 samples, 0.47%)</title><rect x="92.7999%" y="101" width="0.4696%" height="15" fill="rgb(240,54,50)"/><text x="93.0499%" y="111.50"></text></g><g><title>optimized_mir (15,343,130 samples, 1.42%)</title><rect x="91.9499%" y="117" width="1.4209%" height="15" fill="rgb(233,84,52)"/><text x="92.1999%" y="127.50"></text></g><g><title>evaluate_obligation (1,452,243 samples, 0.13%)</title><rect x="93.9806%" y="85" width="0.1345%" height="15" fill="rgb(207,117,47)"/><text x="94.2306%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,935,354 samples, 0.64%)</title><rect x="93.5527%" y="101" width="0.6423%" height="15" fill="rgb(249,43,39)"/><text x="93.8027%" y="111.50"></text></g><g><title>specialization_graph_of (4,084,353 samples, 0.38%)</title><rect x="94.3781%" y="101" width="0.3782%" height="15" fill="rgb(209,38,44)"/><text x="94.6281%" y="111.50"></text></g><g><title>impl_trait_ref (1,551,061 samples, 0.14%)</title><rect x="94.6127%" y="85" width="0.1436%" height="15" fill="rgb(236,212,23)"/><text x="94.8627%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,213,135 samples, 0.11%)</title><rect x="94.6440%" y="69" width="0.1123%" height="15" fill="rgb(242,79,21)"/><text x="94.8940%" y="79.50"></text></g><g><title>resolve_instance (15,637,679 samples, 1.45%)</title><rect x="93.3708%" y="117" width="1.4482%" height="15" fill="rgb(211,96,35)"/><text x="93.6208%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,212,736 samples, 0.11%)</title><rect x="94.9312%" y="101" width="0.1123%" height="15" fill="rgb(253,215,40)"/><text x="95.1812%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,188,986 samples, 0.11%)</title><rect x="94.9334%" y="85" width="0.1101%" height="15" fill="rgb(211,81,21)"/><text x="95.1834%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,139,776 samples, 0.11%)</title><rect x="94.9380%" y="69" width="0.1056%" height="15" fill="rgb(208,190,38)"/><text x="95.1880%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,555,860 samples, 0.14%)</title><rect x="94.9048%" y="117" width="0.1441%" height="15" fill="rgb(235,213,38)"/><text x="95.1548%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,185,931 samples, 0.11%)</title><rect x="95.0497%" y="117" width="0.1098%" height="15" fill="rgb(237,122,38)"/><text x="95.2997%" y="127.50"></text></g><g><title>upstream_monomorphizations (1,136,301 samples, 0.11%)</title><rect x="95.0543%" y="101" width="0.1052%" height="15" fill="rgb(244,218,35)"/><text x="95.3043%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (43,323,524 samples, 4.01%)</title><rect x="91.2017%" y="133" width="4.0121%" height="15" fill="rgb(240,68,47)"/><text x="91.4517%" y="143.50">mono..</text></g><g><title>monomorphization_collector (43,366,715 samples, 4.02%)</title><rect x="91.2014%" y="149" width="4.0161%" height="15" fill="rgb(210,16,53)"/><text x="91.4514%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (3,064,331 samples, 0.28%)</title><rect x="95.2180%" y="133" width="0.2838%" height="15" fill="rgb(235,124,12)"/><text x="95.4680%" y="143.50"></text></g><g><title>symbol_name (2,784,440 samples, 0.26%)</title><rect x="95.2439%" y="117" width="0.2579%" height="15" fill="rgb(224,169,11)"/><text x="95.4939%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (47,939,342 samples, 4.44%)</title><rect x="91.1971%" y="165" width="4.4396%" height="15" fill="rgb(250,166,2)"/><text x="91.4471%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (4,525,225 samples, 0.42%)</title><rect x="95.2176%" y="149" width="0.4191%" height="15" fill="rgb(242,216,29)"/><text x="95.4676%" y="159.50"></text></g><g><title>cgu_partitioning (1,456,254 samples, 0.13%)</title><rect x="95.5018%" y="133" width="0.1349%" height="15" fill="rgb(230,116,27)"/><text x="95.7518%" y="143.50"></text></g><g><title>exported_symbols (48,090,393 samples, 4.45%)</title><rect x="91.1875%" y="181" width="4.4536%" height="15" fill="rgb(228,99,48)"/><text x="91.4375%" y="191.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,295,772 samples, 0.21%)</title><rect x="95.8996%" y="165" width="0.2126%" height="15" fill="rgb(253,11,6)"/><text x="96.1496%" y="175.50"></text></g><g><title>optimized_mir (5,466,505 samples, 0.51%)</title><rect x="95.6476%" y="181" width="0.5062%" height="15" fill="rgb(247,143,39)"/><text x="95.8976%" y="191.50"></text></g><g><title>generate_crate_metadata (54,995,742 samples, 5.09%)</title><rect x="91.0785%" y="197" width="5.0931%" height="15" fill="rgb(236,97,10)"/><text x="91.3285%" y="207.50">genera..</text></g><g><title>hir_lowering (2,704,827 samples, 0.25%)</title><rect x="96.1715%" y="197" width="0.2505%" height="15" fill="rgb(233,208,19)"/><text x="96.4215%" y="207.50"></text></g><g><title>finish_ongoing_codegen (25,563,156 samples, 2.37%)</title><rect x="96.4233%" y="181" width="2.3674%" height="15" fill="rgb(216,164,2)"/><text x="96.6733%" y="191.50">fi..</text></g><g><title>link_crate (2,797,798 samples, 0.26%)</title><rect x="98.7907%" y="181" width="0.2591%" height="15" fill="rgb(220,129,5)"/><text x="99.0407%" y="191.50"></text></g><g><title>link_binary (2,768,398 samples, 0.26%)</title><rect x="98.7934%" y="165" width="0.2564%" height="15" fill="rgb(242,17,10)"/><text x="99.0434%" y="175.50"></text></g><g><title>link_rlib (2,109,851 samples, 0.20%)</title><rect x="98.8544%" y="149" width="0.1954%" height="15" fill="rgb(242,107,0)"/><text x="99.1044%" y="159.50"></text></g><g><title>link (28,385,804 samples, 2.63%)</title><rect x="96.4220%" y="197" width="2.6288%" height="15" fill="rgb(251,28,31)"/><text x="96.6720%" y="207.50">li..</text></g><g><title>parse_crate (7,434,255 samples, 0.69%)</title><rect x="99.0508%" y="197" width="0.6885%" height="15" fill="rgb(233,223,10)"/><text x="99.3008%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,156,222 samples, 0.20%)</title><rect x="99.7588%" y="197" width="0.1997%" height="15" fill="rgb(215,21,27)"/><text x="100.0088%" y="207.50"></text></g><g><title>all (1,079,818,903 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,079,818,903 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>