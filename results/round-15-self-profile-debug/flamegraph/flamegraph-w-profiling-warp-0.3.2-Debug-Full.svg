<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (635,417,972 samples, 9.68%)</title><rect x="0.0373%" y="341" width="9.6770%" height="15" fill="rgb(227,0,7)"/><text x="0.2873%" y="351.50">LLVM_passes</text></g><g><title>is_copy_raw (12,274,993 samples, 0.19%)</title><rect x="13.6696%" y="213" width="0.1869%" height="15" fill="rgb(217,0,24)"/><text x="13.9196%" y="223.50"></text></g><g><title>evaluate_obligation (9,698,655 samples, 0.15%)</title><rect x="13.7089%" y="197" width="0.1477%" height="15" fill="rgb(221,193,54)"/><text x="13.9589%" y="207.50"></text></g><g><title>needs_drop_raw (16,056,856 samples, 0.24%)</title><rect x="13.6150%" y="229" width="0.2445%" height="15" fill="rgb(248,212,6)"/><text x="13.8650%" y="239.50"></text></g><g><title>resolve_instance (10,931,044 samples, 0.17%)</title><rect x="13.8595%" y="229" width="0.1665%" height="15" fill="rgb(208,68,35)"/><text x="14.1095%" y="239.50"></text></g><g><title>thir_body (14,001,185 samples, 0.21%)</title><rect x="14.0309%" y="229" width="0.2132%" height="15" fill="rgb(232,128,0)"/><text x="14.2809%" y="239.50"></text></g><g><title>mir_const (93,487,122 samples, 1.42%)</title><rect x="12.8296%" y="277" width="1.4237%" height="15" fill="rgb(207,160,47)"/><text x="13.0796%" y="287.50"></text></g><g><title>unsafety_check_result (83,797,128 samples, 1.28%)</title><rect x="12.9772%" y="261" width="1.2762%" height="15" fill="rgb(228,23,34)"/><text x="13.2272%" y="271.50"></text></g><g><title>mir_built (76,926,024 samples, 1.17%)</title><rect x="13.0819%" y="245" width="1.1715%" height="15" fill="rgb(218,30,26)"/><text x="13.3319%" y="255.50"></text></g><g><title>mir_const (8,467,870 samples, 0.13%)</title><rect x="14.3358%" y="261" width="0.1290%" height="15" fill="rgb(220,122,19)"/><text x="14.5858%" y="271.50"></text></g><g><title>unsafety_check_result (7,088,571 samples, 0.11%)</title><rect x="14.3568%" y="245" width="0.1080%" height="15" fill="rgb(250,228,42)"/><text x="14.6068%" y="255.50"></text></g><g><title>mir_promoted (118,355,116 samples, 1.80%)</title><rect x="12.6656%" y="293" width="1.8025%" height="15" fill="rgb(240,193,28)"/><text x="12.9156%" y="303.50">m..</text></g><g><title>mir_const_qualif (14,098,706 samples, 0.21%)</title><rect x="14.2534%" y="277" width="0.2147%" height="15" fill="rgb(216,20,37)"/><text x="14.5034%" y="287.50"></text></g><g><title>type_op_ascribe_user_type (7,365,325 samples, 0.11%)</title><rect x="14.4681%" y="293" width="0.1122%" height="15" fill="rgb(206,188,39)"/><text x="14.7181%" y="303.50"></text></g><g><title>type_op_normalize_ty (8,043,766 samples, 0.12%)</title><rect x="14.7505%" y="293" width="0.1225%" height="15" fill="rgb(217,207,13)"/><text x="15.0005%" y="303.50"></text></g><g><title>type_op_prove_predicate (45,792,116 samples, 0.70%)</title><rect x="14.8730%" y="293" width="0.6974%" height="15" fill="rgb(231,73,38)"/><text x="15.1230%" y="303.50"></text></g><g><title>MIR_borrow_checking (379,688,311 samples, 5.78%)</title><rect x="9.7882%" y="325" width="5.7824%" height="15" fill="rgb(225,20,46)"/><text x="10.0382%" y="335.50">MIR_bor..</text></g><g><title>mir_borrowck (377,727,019 samples, 5.75%)</title><rect x="9.8181%" y="309" width="5.7525%" height="15" fill="rgb(210,31,41)"/><text x="10.0681%" y="319.50">mir_bor..</text></g><g><title>check_mod_attrs (7,517,273 samples, 0.11%)</title><rect x="15.7119%" y="309" width="0.1145%" height="15" fill="rgb(221,200,47)"/><text x="15.9619%" y="319.50"></text></g><g><title>check_mod_unstable_api_usage (6,593,627 samples, 0.10%)</title><rect x="15.8907%" y="309" width="0.1004%" height="15" fill="rgb(226,26,5)"/><text x="16.1407%" y="319.50"></text></g><g><title>misc_checking_1 (19,606,679 samples, 0.30%)</title><rect x="15.7100%" y="325" width="0.2986%" height="15" fill="rgb(249,33,26)"/><text x="15.9600%" y="335.50"></text></g><g><title>liveness_and_intrinsic_checking (12,582,604 samples, 0.19%)</title><rect x="16.0086%" y="309" width="0.1916%" height="15" fill="rgb(235,183,28)"/><text x="16.2586%" y="319.50"></text></g><g><title>check_mod_liveness (10,740,277 samples, 0.16%)</title><rect x="16.0367%" y="293" width="0.1636%" height="15" fill="rgb(221,5,38)"/><text x="16.2867%" y="303.50"></text></g><g><title>misc_checking_2 (31,969,491 samples, 0.49%)</title><rect x="16.0086%" y="325" width="0.4869%" height="15" fill="rgb(247,18,42)"/><text x="16.2586%" y="335.50"></text></g><g><title>match_checking (19,383,257 samples, 0.30%)</title><rect x="16.2003%" y="309" width="0.2952%" height="15" fill="rgb(241,131,45)"/><text x="16.4503%" y="319.50"></text></g><g><title>check_match (18,524,279 samples, 0.28%)</title><rect x="16.2133%" y="293" width="0.2821%" height="15" fill="rgb(249,31,29)"/><text x="16.4633%" y="303.50"></text></g><g><title>check_private_in_public (6,750,253 samples, 0.10%)</title><rect x="16.4958%" y="309" width="0.1028%" height="15" fill="rgb(225,111,53)"/><text x="16.7458%" y="319.50"></text></g><g><title>death_checking (10,510,221 samples, 0.16%)</title><rect x="16.5986%" y="309" width="0.1601%" height="15" fill="rgb(238,160,17)"/><text x="16.8486%" y="319.50"></text></g><g><title>eval_to_allocation_raw (15,801,544 samples, 0.24%)</title><rect x="16.9410%" y="277" width="0.2406%" height="15" fill="rgb(214,148,48)"/><text x="17.1910%" y="287.50"></text></g><g><title>eval_to_allocation_raw (15,653,551 samples, 0.24%)</title><rect x="16.9433%" y="261" width="0.2384%" height="15" fill="rgb(232,36,49)"/><text x="17.1933%" y="271.50"></text></g><g><title>param_env (11,148,243 samples, 0.17%)</title><rect x="17.2085%" y="277" width="0.1698%" height="15" fill="rgb(209,103,24)"/><text x="17.4585%" y="287.50"></text></g><g><title>crate_lints (43,526,255 samples, 0.66%)</title><rect x="16.7587%" y="293" width="0.6629%" height="15" fill="rgb(229,88,8)"/><text x="17.0087%" y="303.50"></text></g><g><title>lint_checking (57,772,167 samples, 0.88%)</title><rect x="16.7587%" y="309" width="0.8798%" height="15" fill="rgb(213,181,19)"/><text x="17.0087%" y="319.50"></text></g><g><title>module_lints (14,242,182 samples, 0.22%)</title><rect x="17.4216%" y="293" width="0.2169%" height="15" fill="rgb(254,191,54)"/><text x="17.6716%" y="303.50"></text></g><g><title>lint_mod (14,189,542 samples, 0.22%)</title><rect x="17.4224%" y="277" width="0.2161%" height="15" fill="rgb(241,83,37)"/><text x="17.6724%" y="287.50"></text></g><g><title>privacy_access_levels (11,510,702 samples, 0.18%)</title><rect x="17.6385%" y="309" width="0.1753%" height="15" fill="rgb(233,36,39)"/><text x="17.8885%" y="319.50"></text></g><g><title>privacy_checking_modules (28,477,394 samples, 0.43%)</title><rect x="17.8138%" y="309" width="0.4337%" height="15" fill="rgb(226,3,54)"/><text x="18.0638%" y="319.50"></text></g><g><title>check_mod_privacy (28,431,544 samples, 0.43%)</title><rect x="17.8145%" y="293" width="0.4330%" height="15" fill="rgb(245,192,40)"/><text x="18.0645%" y="303.50"></text></g><g><title>misc_checking_3 (115,300,370 samples, 1.76%)</title><rect x="16.4955%" y="325" width="1.7560%" height="15" fill="rgb(238,167,29)"/><text x="16.7455%" y="335.50"></text></g><g><title>impl_trait_ref (11,655,004 samples, 0.18%)</title><rect x="18.5876%" y="261" width="0.1775%" height="15" fill="rgb(232,182,51)"/><text x="18.8376%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (9,370,364 samples, 0.14%)</title><rect x="18.6224%" y="245" width="0.1427%" height="15" fill="rgb(231,60,39)"/><text x="18.8724%" y="255.50"></text></g><g><title>coherent_trait (35,233,413 samples, 0.54%)</title><rect x="18.2763%" y="293" width="0.5366%" height="15" fill="rgb(208,69,12)"/><text x="18.5263%" y="303.50"></text></g><g><title>specialization_graph_of (33,931,628 samples, 0.52%)</title><rect x="18.2961%" y="277" width="0.5168%" height="15" fill="rgb(235,93,37)"/><text x="18.5461%" y="287.50"></text></g><g><title>coherence_checking (36,082,905 samples, 0.55%)</title><rect x="18.2753%" y="309" width="0.5495%" height="15" fill="rgb(213,116,39)"/><text x="18.5253%" y="319.50"></text></g><g><title>evaluate_obligation (27,091,925 samples, 0.41%)</title><rect x="22.7035%" y="261" width="0.4126%" height="15" fill="rgb(222,207,29)"/><text x="22.9535%" y="271.50"></text></g><g><title>method_autoderef_steps (6,942,270 samples, 0.11%)</title><rect x="23.1444%" y="261" width="0.1057%" height="15" fill="rgb(206,96,30)"/><text x="23.3944%" y="271.50"></text></g><g><title>evaluate_obligation (14,474,194 samples, 0.22%)</title><rect x="24.6328%" y="245" width="0.2204%" height="15" fill="rgb(218,138,4)"/><text x="24.8828%" y="255.50"></text></g><g><title>typeck (109,264,049 samples, 1.66%)</title><rect x="23.2737%" y="261" width="1.6640%" height="15" fill="rgb(250,191,14)"/><text x="23.5237%" y="271.50"></text></g><g><title>item_bodies_checking (400,791,987 samples, 6.10%)</title><rect x="18.8381%" y="309" width="6.1038%" height="15" fill="rgb(239,60,40)"/><text x="19.0881%" y="319.50">item_bod..</text></g><g><title>typeck_item_bodies (400,787,657 samples, 6.10%)</title><rect x="18.8381%" y="293" width="6.1037%" height="15" fill="rgb(206,27,48)"/><text x="19.0881%" y="303.50">typeck_i..</text></g><g><title>typeck (398,796,000 samples, 6.07%)</title><rect x="18.8685%" y="277" width="6.0734%" height="15" fill="rgb(225,35,8)"/><text x="19.1185%" y="287.50">typeck</text></g><g><title>evaluate_obligation (8,679,738 samples, 0.13%)</title><rect x="27.1753%" y="245" width="0.1322%" height="15" fill="rgb(250,213,24)"/><text x="27.4253%" y="255.50"></text></g><g><title>mir_borrowck (9,797,805 samples, 0.15%)</title><rect x="28.8988%" y="213" width="0.1492%" height="15" fill="rgb(247,123,22)"/><text x="29.1488%" y="223.50"></text></g><g><title>type_op_prove_predicate (10,685,432 samples, 0.16%)</title><rect x="29.2398%" y="213" width="0.1627%" height="15" fill="rgb(231,138,38)"/><text x="29.4898%" y="223.50"></text></g><g><title>mir_borrowck (59,511,159 samples, 0.91%)</title><rect x="28.4963%" y="229" width="0.9063%" height="15" fill="rgb(231,145,46)"/><text x="28.7463%" y="239.50"></text></g><g><title>mir_promoted (7,654,297 samples, 0.12%)</title><rect x="29.4026%" y="229" width="0.1166%" height="15" fill="rgb(251,118,11)"/><text x="29.6526%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (31,928,033 samples, 0.49%)</title><rect x="29.5504%" y="229" width="0.4862%" height="15" fill="rgb(217,147,25)"/><text x="29.8004%" y="239.50"></text></g><g><title>normalize_projection_ty (29,243,342 samples, 0.45%)</title><rect x="29.5913%" y="213" width="0.4454%" height="15" fill="rgb(247,81,37)"/><text x="29.8413%" y="223.50"></text></g><g><title>type_op_normalize_predicate (17,645,147 samples, 0.27%)</title><rect x="30.0366%" y="229" width="0.2687%" height="15" fill="rgb(209,12,38)"/><text x="30.2866%" y="239.50"></text></g><g><title>normalize_projection_ty (14,185,920 samples, 0.22%)</title><rect x="30.0893%" y="213" width="0.2160%" height="15" fill="rgb(227,1,9)"/><text x="30.3393%" y="223.50"></text></g><g><title>type_op_prove_predicate (71,936,622 samples, 1.10%)</title><rect x="30.3135%" y="229" width="1.0955%" height="15" fill="rgb(248,47,43)"/><text x="30.5635%" y="239.50"></text></g><g><title>mir_borrowck (268,783,825 samples, 4.09%)</title><rect x="27.3158%" y="245" width="4.0934%" height="15" fill="rgb(221,10,30)"/><text x="27.5658%" y="255.50">mir_..</text></g><g><title>codegen_fulfill_obligation (32,178,603 samples, 0.49%)</title><rect x="31.6235%" y="165" width="0.4901%" height="15" fill="rgb(210,229,1)"/><text x="31.8735%" y="175.50"></text></g><g><title>evaluate_obligation (7,350,148 samples, 0.11%)</title><rect x="32.0016%" y="149" width="0.1119%" height="15" fill="rgb(222,148,37)"/><text x="32.2516%" y="159.50"></text></g><g><title>resolve_instance (35,966,815 samples, 0.55%)</title><rect x="31.6122%" y="181" width="0.5478%" height="15" fill="rgb(234,67,33)"/><text x="31.8622%" y="191.50"></text></g><g><title>dropck_outlives (10,912,973 samples, 0.17%)</title><rect x="38.6815%" y="165" width="0.1662%" height="15" fill="rgb(247,98,35)"/><text x="38.9315%" y="175.50"></text></g><g><title>mir_borrowck (12,693,337 samples, 0.19%)</title><rect x="40.0146%" y="117" width="0.1933%" height="15" fill="rgb(247,138,52)"/><text x="40.2646%" y="127.50"></text></g><g><title>evaluate_obligation (6,963,693 samples, 0.11%)</title><rect x="40.6609%" y="37" width="0.1061%" height="15" fill="rgb(213,79,30)"/><text x="40.9109%" y="47.50"></text></g><g><title>mir_built (38,092,285 samples, 0.58%)</title><rect x="40.2128%" y="69" width="0.5801%" height="15" fill="rgb(246,177,23)"/><text x="40.4628%" y="79.50"></text></g><g><title>typeck (37,157,975 samples, 0.57%)</title><rect x="40.2271%" y="53" width="0.5659%" height="15" fill="rgb(230,62,27)"/><text x="40.4771%" y="63.50"></text></g><g><title>mir_const (42,069,190 samples, 0.64%)</title><rect x="40.2096%" y="101" width="0.6407%" height="15" fill="rgb(216,154,8)"/><text x="40.4596%" y="111.50"></text></g><g><title>unsafety_check_result (41,919,096 samples, 0.64%)</title><rect x="40.2118%" y="85" width="0.6384%" height="15" fill="rgb(244,35,45)"/><text x="40.4618%" y="95.50"></text></g><g><title>mir_promoted (42,186,750 samples, 0.64%)</title><rect x="40.2079%" y="117" width="0.6425%" height="15" fill="rgb(251,115,12)"/><text x="40.4579%" y="127.50"></text></g><g><title>evaluate_obligation (135,064,836 samples, 2.06%)</title><rect x="38.8507%" y="165" width="2.0570%" height="15" fill="rgb(240,54,50)"/><text x="39.1007%" y="175.50">e..</text></g><g><title>type_of (64,909,751 samples, 0.99%)</title><rect x="39.9191%" y="149" width="0.9885%" height="15" fill="rgb(233,84,52)"/><text x="40.1691%" y="159.50"></text></g><g><title>mir_borrowck (64,715,389 samples, 0.99%)</title><rect x="39.9221%" y="133" width="0.9856%" height="15" fill="rgb(207,117,47)"/><text x="40.1721%" y="143.50"></text></g><g><title>is_copy_raw (7,241,391 samples, 0.11%)</title><rect x="40.9811%" y="165" width="0.1103%" height="15" fill="rgb(249,43,39)"/><text x="41.2311%" y="175.50"></text></g><g><title>mir_built (645,971,003 samples, 9.84%)</title><rect x="31.4803%" y="197" width="9.8377%" height="15" fill="rgb(209,38,44)"/><text x="31.7303%" y="207.50">mir_built</text></g><g><title>typeck (599,061,555 samples, 9.12%)</title><rect x="32.1947%" y="181" width="9.1233%" height="15" fill="rgb(236,212,23)"/><text x="32.4447%" y="191.50">typeck</text></g><g><title>thir_body (10,176,576 samples, 0.15%)</title><rect x="41.6283%" y="165" width="0.1550%" height="15" fill="rgb(242,79,21)"/><text x="41.8783%" y="175.50"></text></g><g><title>mir_built (27,703,806 samples, 0.42%)</title><rect x="41.3669%" y="181" width="0.4219%" height="15" fill="rgb(211,96,35)"/><text x="41.6169%" y="191.50"></text></g><g><title>mir_built (9,384,443 samples, 0.14%)</title><rect x="41.8083%" y="165" width="0.1429%" height="15" fill="rgb(253,215,40)"/><text x="42.0583%" y="175.50"></text></g><g><title>mir_const (694,129,928 samples, 10.57%)</title><rect x="31.4276%" y="229" width="10.5712%" height="15" fill="rgb(211,81,21)"/><text x="31.6776%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (691,619,618 samples, 10.53%)</title><rect x="31.4658%" y="213" width="10.5329%" height="15" fill="rgb(208,190,38)"/><text x="31.7158%" y="223.50">unsafety_check_..</text></g><g><title>unsafety_check_result (44,698,269 samples, 0.68%)</title><rect x="41.3180%" y="197" width="0.6807%" height="15" fill="rgb(235,213,38)"/><text x="41.5680%" y="207.50"></text></g><g><title>unsafety_check_result (13,758,597 samples, 0.21%)</title><rect x="41.7892%" y="181" width="0.2095%" height="15" fill="rgb(237,122,38)"/><text x="42.0392%" y="191.50"></text></g><g><title>mir_promoted (695,502,019 samples, 10.59%)</title><rect x="31.4092%" y="245" width="10.5921%" height="15" fill="rgb(244,218,35)"/><text x="31.6592%" y="255.50">mir_promoted</text></g><g><title>type_op_normalize_predicate (34,881,907 samples, 0.53%)</title><rect x="42.0195%" y="245" width="0.5312%" height="15" fill="rgb(240,68,47)"/><text x="42.2695%" y="255.50"></text></g><g><title>normalize_projection_ty (30,943,861 samples, 0.47%)</title><rect x="42.0794%" y="229" width="0.4713%" height="15" fill="rgb(210,16,53)"/><text x="42.3294%" y="239.50"></text></g><g><title>type_of (1,132,883,891 samples, 17.25%)</title><rect x="26.1959%" y="277" width="17.2531%" height="15" fill="rgb(235,124,12)"/><text x="26.4459%" y="287.50">type_of</text></g><g><title>mir_borrowck (1,132,546,280 samples, 17.25%)</title><rect x="26.2011%" y="261" width="17.2480%" height="15" fill="rgb(224,169,11)"/><text x="26.4511%" y="271.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (58,229,226 samples, 0.89%)</title><rect x="42.5623%" y="245" width="0.8868%" height="15" fill="rgb(250,166,2)"/><text x="42.8123%" y="255.50"></text></g><g><title>item_types_checking (1,261,614,544 samples, 19.21%)</title><rect x="24.9419%" y="309" width="19.2136%" height="15" fill="rgb(242,216,29)"/><text x="25.1919%" y="319.50">item_types_checking</text></g><g><title>check_mod_item_types (1,261,505,633 samples, 19.21%)</title><rect x="24.9435%" y="293" width="19.2119%" height="15" fill="rgb(230,116,27)"/><text x="25.1935%" y="303.50">check_mod_item_types</text></g><g><title>typeck (46,384,976 samples, 0.71%)</title><rect x="43.4490%" y="277" width="0.7064%" height="15" fill="rgb(228,99,48)"/><text x="43.6990%" y="287.50"></text></g><g><title>late_bound_vars_map (9,546,449 samples, 0.15%)</title><rect x="44.5134%" y="229" width="0.1454%" height="15" fill="rgb(253,11,6)"/><text x="44.7634%" y="239.50"></text></g><g><title>resolve_lifetimes (9,323,452 samples, 0.14%)</title><rect x="44.5168%" y="213" width="0.1420%" height="15" fill="rgb(247,143,39)"/><text x="44.7668%" y="223.50"></text></g><g><title>explicit_predicates_of (16,771,164 samples, 0.26%)</title><rect x="44.4281%" y="245" width="0.2554%" height="15" fill="rgb(236,97,10)"/><text x="44.6781%" y="255.50"></text></g><g><title>predicates_of (24,267,119 samples, 0.37%)</title><rect x="44.3891%" y="277" width="0.3696%" height="15" fill="rgb(233,208,19)"/><text x="44.6391%" y="287.50"></text></g><g><title>predicates_defined_on (23,373,365 samples, 0.36%)</title><rect x="44.4027%" y="261" width="0.3560%" height="15" fill="rgb(216,164,2)"/><text x="44.6527%" y="271.50"></text></g><g><title>type_collecting (42,638,045 samples, 0.65%)</title><rect x="44.1570%" y="309" width="0.6494%" height="15" fill="rgb(220,129,5)"/><text x="44.4070%" y="319.50"></text></g><g><title>collect_mod_item_types (42,574,175 samples, 0.65%)</title><rect x="44.1579%" y="293" width="0.6484%" height="15" fill="rgb(242,17,10)"/><text x="44.4079%" y="303.50"></text></g><g><title>evaluate_obligation (7,438,788 samples, 0.11%)</title><rect x="45.5002%" y="277" width="0.1133%" height="15" fill="rgb(242,107,0)"/><text x="45.7502%" y="287.50"></text></g><g><title>param_env (7,525,952 samples, 0.11%)</title><rect x="45.6763%" y="277" width="0.1146%" height="15" fill="rgb(251,28,31)"/><text x="45.9263%" y="287.50"></text></g><g><title>check_impl_item_well_formed (65,544,398 samples, 1.00%)</title><rect x="44.8713%" y="293" width="0.9982%" height="15" fill="rgb(233,223,10)"/><text x="45.1213%" y="303.50"></text></g><g><title>evaluate_obligation (7,544,126 samples, 0.11%)</title><rect x="46.9194%" y="277" width="0.1149%" height="15" fill="rgb(215,21,27)"/><text x="47.1694%" y="287.50"></text></g><g><title>param_env (9,272,300 samples, 0.14%)</title><rect x="47.0991%" y="277" width="0.1412%" height="15" fill="rgb(232,23,21)"/><text x="47.3491%" y="287.50"></text></g><g><title>check_item_well_formed (95,182,403 samples, 1.45%)</title><rect x="45.8695%" y="293" width="1.4496%" height="15" fill="rgb(244,5,23)"/><text x="46.1195%" y="303.50"></text></g><g><title>analysis (2,472,659,080 samples, 37.66%)</title><rect x="9.7143%" y="341" width="37.6570%" height="15" fill="rgb(226,81,46)"/><text x="9.9643%" y="351.50">analysis</text></g><g><title>type_check_crate (1,912,093,677 samples, 29.12%)</title><rect x="18.2514%" y="325" width="29.1200%" height="15" fill="rgb(247,70,30)"/><text x="18.5014%" y="335.50">type_check_crate</text></g><g><title>wf_checking (168,303,067 samples, 2.56%)</title><rect x="44.8082%" y="309" width="2.5631%" height="15" fill="rgb(212,68,19)"/><text x="45.0582%" y="319.50">wf..</text></g><g><title>compute_debuginfo_type_name (19,066,903 samples, 0.29%)</title><rect x="54.8616%" y="309" width="0.2904%" height="15" fill="rgb(240,187,13)"/><text x="55.1116%" y="319.50"></text></g><g><title>layout_of (10,248,126 samples, 0.16%)</title><rect x="55.6527%" y="293" width="0.1561%" height="15" fill="rgb(223,113,26)"/><text x="55.9027%" y="303.50"></text></g><g><title>param_env (18,223,562 samples, 0.28%)</title><rect x="55.8088%" y="293" width="0.2775%" height="15" fill="rgb(206,192,2)"/><text x="56.0588%" y="303.50"></text></g><g><title>normalize_projection_ty (18,752,838 samples, 0.29%)</title><rect x="56.1250%" y="277" width="0.2856%" height="15" fill="rgb(241,108,4)"/><text x="56.3750%" y="287.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (21,309,882 samples, 0.32%)</title><rect x="56.0863%" y="293" width="0.3245%" height="15" fill="rgb(247,173,49)"/><text x="56.3363%" y="303.50"></text></g><g><title>fn_abi_of_instance (77,078,465 samples, 1.17%)</title><rect x="55.2423%" y="309" width="1.1739%" height="15" fill="rgb(224,114,35)"/><text x="55.4923%" y="319.50"></text></g><g><title>layout_of (11,927,513 samples, 0.18%)</title><rect x="56.4585%" y="309" width="0.1816%" height="15" fill="rgb(245,159,27)"/><text x="56.7085%" y="319.50"></text></g><g><title>symbol_name (7,685,484 samples, 0.12%)</title><rect x="56.6414%" y="309" width="0.1170%" height="15" fill="rgb(245,172,44)"/><text x="56.8914%" y="319.50"></text></g><g><title>codegen_module (614,547,639 samples, 9.36%)</title><rect x="47.4404%" y="325" width="9.3592%" height="15" fill="rgb(236,23,11)"/><text x="47.6904%" y="335.50">codegen_module</text></g><g><title>codegen_crate (619,392,160 samples, 9.43%)</title><rect x="47.3715%" y="341" width="9.4330%" height="15" fill="rgb(205,117,38)"/><text x="47.6215%" y="351.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,564,289,176 samples, 23.82%)</title><rect x="56.8086%" y="325" width="23.8231%" height="15" fill="rgb(237,72,25)"/><text x="57.0586%" y="335.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,482,628,034 samples, 22.58%)</title><rect x="58.0522%" y="309" width="22.5795%" height="15" fill="rgb(244,70,9)"/><text x="58.3022%" y="319.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,658,230,618 samples, 25.25%)</title><rect x="56.8045%" y="341" width="25.2538%" height="15" fill="rgb(217,125,39)"/><text x="57.0545%" y="351.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (93,670,758 samples, 1.43%)</title><rect x="80.6317%" y="325" width="1.4265%" height="15" fill="rgb(235,36,10)"/><text x="80.8817%" y="335.50"></text></g><g><title>metadata_register_crate (16,058,230 samples, 0.24%)</title><rect x="87.6340%" y="293" width="0.2446%" height="15" fill="rgb(251,123,47)"/><text x="87.8840%" y="303.50"></text></g><g><title>metadata_register_crate (13,015,644 samples, 0.20%)</title><rect x="87.6804%" y="277" width="0.1982%" height="15" fill="rgb(221,13,13)"/><text x="87.9304%" y="287.50"></text></g><g><title>metadata_register_crate (7,548,861 samples, 0.11%)</title><rect x="87.7636%" y="261" width="0.1150%" height="15" fill="rgb(238,131,9)"/><text x="88.0136%" y="271.50"></text></g><g><title>macro_expand_crate (377,300,287 samples, 5.75%)</title><rect x="82.1741%" y="325" width="5.7460%" height="15" fill="rgb(211,50,8)"/><text x="82.4241%" y="335.50">macro_e..</text></g><g><title>expand_crate (377,281,787 samples, 5.75%)</title><rect x="82.1743%" y="309" width="5.7458%" height="15" fill="rgb(245,182,24)"/><text x="82.4243%" y="319.50">expand_..</text></g><g><title>late_resolve_crate (32,403,886 samples, 0.49%)</title><rect x="88.0025%" y="309" width="0.4935%" height="15" fill="rgb(242,14,37)"/><text x="88.2525%" y="319.50"></text></g><g><title>configure_and_expand (428,425,303 samples, 6.52%)</title><rect x="82.0583%" y="341" width="6.5246%" height="15" fill="rgb(246,228,12)"/><text x="82.3083%" y="351.50">configure..</text></g><g><title>resolve_crate (43,402,553 samples, 0.66%)</title><rect x="87.9219%" y="325" width="0.6610%" height="15" fill="rgb(213,55,15)"/><text x="88.1719%" y="335.50"></text></g><g><title>drop_ast (11,164,080 samples, 0.17%)</title><rect x="88.5829%" y="341" width="0.1700%" height="15" fill="rgb(209,9,3)"/><text x="88.8329%" y="351.50"></text></g><g><title>early_lint_checks (10,247,619 samples, 0.16%)</title><rect x="88.7536%" y="341" width="0.1561%" height="15" fill="rgb(230,59,30)"/><text x="89.0036%" y="351.50"></text></g><g><title>free_global_ctxt (28,284,392 samples, 0.43%)</title><rect x="88.9097%" y="341" width="0.4308%" height="15" fill="rgb(209,121,21)"/><text x="89.1597%" y="351.50"></text></g><g><title>codegen_fn_attrs (6,821,222 samples, 0.10%)</title><rect x="90.3375%" y="261" width="0.1039%" height="15" fill="rgb(220,109,13)"/><text x="90.5875%" y="271.50"></text></g><g><title>codegen_fulfill_obligation (12,688,235 samples, 0.19%)</title><rect x="90.4414%" y="261" width="0.1932%" height="15" fill="rgb(232,18,1)"/><text x="90.6914%" y="271.50"></text></g><g><title>evaluate_obligation (7,885,804 samples, 0.12%)</title><rect x="90.5145%" y="245" width="0.1201%" height="15" fill="rgb(215,41,42)"/><text x="90.7645%" y="255.50"></text></g><g><title>metadata_decode_entry_optimized_mir (11,992,336 samples, 0.18%)</title><rect x="91.0955%" y="245" width="0.1826%" height="15" fill="rgb(224,123,36)"/><text x="91.3455%" y="255.50"></text></g><g><title>needs_drop_raw (19,353,198 samples, 0.29%)</title><rect x="91.5349%" y="229" width="0.2947%" height="15" fill="rgb(240,125,3)"/><text x="91.7849%" y="239.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (18,040,224 samples, 0.27%)</title><rect x="91.5548%" y="213" width="0.2747%" height="15" fill="rgb(205,98,50)"/><text x="91.8048%" y="223.50"></text></g><g><title>normalize_projection_ty (17,891,480 samples, 0.27%)</title><rect x="91.5571%" y="197" width="0.2725%" height="15" fill="rgb(205,185,37)"/><text x="91.8071%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (36,641,720 samples, 0.56%)</title><rect x="91.2781%" y="245" width="0.5580%" height="15" fill="rgb(238,207,15)"/><text x="91.5281%" y="255.50"></text></g><g><title>optimized_mir (74,452,758 samples, 1.13%)</title><rect x="90.7541%" y="261" width="1.1339%" height="15" fill="rgb(213,199,42)"/><text x="91.0041%" y="271.50"></text></g><g><title>evaluate_obligation (38,332,194 samples, 0.58%)</title><rect x="93.1290%" y="229" width="0.5838%" height="15" fill="rgb(235,201,11)"/><text x="93.3790%" y="239.50"></text></g><g><title>codegen_fulfill_obligation (114,445,970 samples, 1.74%)</title><rect x="92.0117%" y="245" width="1.7429%" height="15" fill="rgb(207,46,11)"/><text x="92.2617%" y="255.50"></text></g><g><title>resolve_instance (134,435,633 samples, 2.05%)</title><rect x="91.8880%" y="261" width="2.0474%" height="15" fill="rgb(241,35,35)"/><text x="92.1380%" y="271.50">r..</text></g><g><title>normalize_projection_ty (11,194,612 samples, 0.17%)</title><rect x="93.9570%" y="245" width="0.1705%" height="15" fill="rgb(243,32,47)"/><text x="94.2070%" y="255.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (12,627,817 samples, 0.19%)</title><rect x="93.9354%" y="261" width="0.1923%" height="15" fill="rgb(247,202,23)"/><text x="94.1854%" y="271.50"></text></g><g><title>eval_to_const_value_raw (7,491,207 samples, 0.11%)</title><rect x="94.1637%" y="245" width="0.1141%" height="15" fill="rgb(219,102,11)"/><text x="94.4137%" y="255.50"></text></g><g><title>eval_to_const_value_raw (7,233,585 samples, 0.11%)</title><rect x="94.1676%" y="229" width="0.1102%" height="15" fill="rgb(243,110,44)"/><text x="94.4176%" y="239.50"></text></g><g><title>eval_to_allocation_raw (6,758,961 samples, 0.10%)</title><rect x="94.1749%" y="213" width="0.1029%" height="15" fill="rgb(222,74,54)"/><text x="94.4249%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (10,121,431 samples, 0.15%)</title><rect x="94.1277%" y="261" width="0.1541%" height="15" fill="rgb(216,99,12)"/><text x="94.3777%" y="271.50"></text></g><g><title>upstream_monomorphizations_for (13,172,671 samples, 0.20%)</title><rect x="94.2829%" y="261" width="0.2006%" height="15" fill="rgb(226,22,26)"/><text x="94.5329%" y="271.50"></text></g><g><title>upstream_monomorphizations (12,992,398 samples, 0.20%)</title><rect x="94.2857%" y="245" width="0.1979%" height="15" fill="rgb(217,163,10)"/><text x="94.5357%" y="255.50"></text></g><g><title>exported_symbols (11,296,641 samples, 0.17%)</title><rect x="94.3115%" y="229" width="0.1720%" height="15" fill="rgb(213,25,53)"/><text x="94.5615%" y="239.50"></text></g><g><title>metadata_decode_entry_exported_symbols (11,267,951 samples, 0.17%)</title><rect x="94.3119%" y="213" width="0.1716%" height="15" fill="rgb(252,105,26)"/><text x="94.5619%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (301,126,135 samples, 4.59%)</title><rect x="89.9959%" y="277" width="4.5860%" height="15" fill="rgb(220,39,43)"/><text x="90.2459%" y="287.50">monom..</text></g><g><title>monomorphization_collector (301,902,683 samples, 4.60%)</title><rect x="89.9959%" y="293" width="4.5978%" height="15" fill="rgb(229,68,48)"/><text x="90.2459%" y="303.50">monom..</text></g><g><title>assert_symbols_are_distinct (16,073,722 samples, 0.24%)</title><rect x="94.5939%" y="277" width="0.2448%" height="15" fill="rgb(252,8,32)"/><text x="94.8439%" y="287.50"></text></g><g><title>symbol_name (14,312,461 samples, 0.22%)</title><rect x="94.6207%" y="261" width="0.2180%" height="15" fill="rgb(223,20,43)"/><text x="94.8707%" y="271.50"></text></g><g><title>collect_and_partition_mono_items (325,172,941 samples, 4.95%)</title><rect x="89.9941%" y="309" width="4.9522%" height="15" fill="rgb(229,81,49)"/><text x="90.2441%" y="319.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (23,154,227 samples, 0.35%)</title><rect x="94.5936%" y="293" width="0.3526%" height="15" fill="rgb(236,28,36)"/><text x="94.8436%" y="303.50"></text></g><g><title>cgu_partitioning (7,062,905 samples, 0.11%)</title><rect x="94.8387%" y="277" width="0.1076%" height="15" fill="rgb(249,185,26)"/><text x="95.0887%" y="287.50"></text></g><g><title>exported_symbols (328,957,891 samples, 5.01%)</title><rect x="89.9837%" y="325" width="5.0098%" height="15" fill="rgb(249,174,33)"/><text x="90.2337%" y="335.50">export..</text></g><g><title>layout_of (7,584,820 samples, 0.12%)</title><rect x="96.0455%" y="245" width="0.1155%" height="15" fill="rgb(233,201,37)"/><text x="96.2955%" y="255.50"></text></g><g><title>layout_of (10,523,230 samples, 0.16%)</title><rect x="96.0369%" y="261" width="0.1603%" height="15" fill="rgb(221,78,26)"/><text x="96.2869%" y="271.50"></text></g><g><title>layout_of (11,761,636 samples, 0.18%)</title><rect x="96.0225%" y="277" width="0.1791%" height="15" fill="rgb(250,127,30)"/><text x="96.2725%" y="287.50"></text></g><g><title>layout_of (15,946,773 samples, 0.24%)</title><rect x="95.9638%" y="293" width="0.2429%" height="15" fill="rgb(230,49,44)"/><text x="96.2138%" y="303.50"></text></g><g><title>layout_of (25,424,740 samples, 0.39%)</title><rect x="95.8644%" y="309" width="0.3872%" height="15" fill="rgb(229,67,23)"/><text x="96.1144%" y="319.50"></text></g><g><title>is_copy_raw (12,919,915 samples, 0.20%)</title><rect x="97.4701%" y="277" width="0.1968%" height="15" fill="rgb(249,83,47)"/><text x="97.7201%" y="287.50"></text></g><g><title>evaluate_obligation (9,718,484 samples, 0.15%)</title><rect x="97.5188%" y="261" width="0.1480%" height="15" fill="rgb(215,43,3)"/><text x="97.7688%" y="271.50"></text></g><g><title>needs_drop_raw (17,320,638 samples, 0.26%)</title><rect x="97.4320%" y="293" width="0.2638%" height="15" fill="rgb(238,154,13)"/><text x="97.6820%" y="303.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (99,799,772 samples, 1.52%)</title><rect x="96.2516%" y="309" width="1.5199%" height="15" fill="rgb(219,56,2)"/><text x="96.5016%" y="319.50"></text></g><g><title>optimized_mir (181,801,309 samples, 2.77%)</title><rect x="95.0406%" y="325" width="2.7687%" height="15" fill="rgb(233,0,4)"/><text x="95.2906%" y="335.50">op..</text></g><g><title>generate_crate_metadata (561,957,738 samples, 8.56%)</title><rect x="89.3404%" y="341" width="8.5583%" height="15" fill="rgb(235,30,7)"/><text x="89.5904%" y="351.50">generate_cra..</text></g><g><title>hir_lowering (68,497,481 samples, 1.04%)</title><rect x="97.8987%" y="341" width="1.0432%" height="15" fill="rgb(250,79,13)"/><text x="98.1487%" y="351.50"></text></g><g><title>finish_ongoing_codegen (37,606,292 samples, 0.57%)</title><rect x="98.9421%" y="325" width="0.5727%" height="15" fill="rgb(211,146,34)"/><text x="99.1921%" y="335.50"></text></g><g><title>link_crate (16,983,421 samples, 0.26%)</title><rect x="99.5148%" y="325" width="0.2586%" height="15" fill="rgb(228,22,38)"/><text x="99.7648%" y="335.50"></text></g><g><title>link_binary (16,864,900 samples, 0.26%)</title><rect x="99.5166%" y="309" width="0.2568%" height="15" fill="rgb(235,168,5)"/><text x="99.7666%" y="319.50"></text></g><g><title>link_rlib (14,551,865 samples, 0.22%)</title><rect x="99.5518%" y="293" width="0.2216%" height="15" fill="rgb(221,155,16)"/><text x="99.8018%" y="303.50"></text></g><g><title>link (54,617,763 samples, 0.83%)</title><rect x="98.9419%" y="341" width="0.8318%" height="15" fill="rgb(215,215,53)"/><text x="99.1919%" y="351.50"></text></g><g><title>self_profile_alloc_query_strings (10,715,625 samples, 0.16%)</title><rect x="99.7894%" y="341" width="0.1632%" height="15" fill="rgb(223,4,10)"/><text x="100.0394%" y="351.50"></text></g><g><title>all (6,566,261,321 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="383.50"></text></g><g><title>rustc (6,566,261,321 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="367.50">rustc</text></g></svg></svg>