<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (536,054,086 samples, 14.72%)</title><rect x="0.0390%" y="213" width="14.7248%" height="15" fill="rgb(227,0,7)"/><text x="0.2890%" y="223.50">LLVM_passes</text></g><g><title>mir_borrowck_const_arg (4,974,699 samples, 0.14%)</title><rect x="16.4143%" y="165" width="0.1366%" height="15" fill="rgb(217,0,24)"/><text x="16.6643%" y="175.50"></text></g><g><title>thir_body (6,308,210 samples, 0.17%)</title><rect x="17.3627%" y="101" width="0.1733%" height="15" fill="rgb(221,193,54)"/><text x="17.6127%" y="111.50"></text></g><g><title>mir_const (32,476,125 samples, 0.89%)</title><rect x="16.6466%" y="149" width="0.8921%" height="15" fill="rgb(248,212,6)"/><text x="16.8966%" y="159.50"></text></g><g><title>unsafety_check_result (28,707,425 samples, 0.79%)</title><rect x="16.7501%" y="133" width="0.7886%" height="15" fill="rgb(208,68,35)"/><text x="17.0001%" y="143.50"></text></g><g><title>mir_built (25,724,464 samples, 0.71%)</title><rect x="16.8320%" y="117" width="0.7066%" height="15" fill="rgb(232,128,0)"/><text x="17.0820%" y="127.50"></text></g><g><title>mir_promoted (37,502,722 samples, 1.03%)</title><rect x="16.5509%" y="165" width="1.0302%" height="15" fill="rgb(207,160,47)"/><text x="16.8009%" y="175.50"></text></g><g><title>type_op_prove_predicate (8,273,281 samples, 0.23%)</title><rect x="17.7153%" y="165" width="0.2273%" height="15" fill="rgb(228,23,34)"/><text x="17.9653%" y="175.50"></text></g><g><title>MIR_borrow_checking (114,422,307 samples, 3.14%)</title><rect x="14.7997%" y="197" width="3.1431%" height="15" fill="rgb(218,30,26)"/><text x="15.0497%" y="207.50">MIR..</text></g><g><title>mir_borrowck (113,765,400 samples, 3.13%)</title><rect x="14.8177%" y="181" width="3.1250%" height="15" fill="rgb(220,122,19)"/><text x="15.0677%" y="191.50">mir..</text></g><g><title>lint_levels (4,924,790 samples, 0.14%)</title><rect x="18.0679%" y="101" width="0.1353%" height="15" fill="rgb(250,228,42)"/><text x="18.3179%" y="111.50"></text></g><g><title>late_bound_vars_map (5,049,280 samples, 0.14%)</title><rect x="18.0645%" y="133" width="0.1387%" height="15" fill="rgb(240,193,28)"/><text x="18.3145%" y="143.50"></text></g><g><title>resolve_lifetimes (5,035,620 samples, 0.14%)</title><rect x="18.0649%" y="117" width="0.1383%" height="15" fill="rgb(216,20,37)"/><text x="18.3149%" y="127.50"></text></g><g><title>fn_sig (5,299,314 samples, 0.15%)</title><rect x="18.0597%" y="149" width="0.1456%" height="15" fill="rgb(206,188,39)"/><text x="18.3097%" y="159.50"></text></g><g><title>codegen_fn_attrs (5,969,213 samples, 0.16%)</title><rect x="18.0543%" y="165" width="0.1640%" height="15" fill="rgb(217,207,13)"/><text x="18.3043%" y="175.50"></text></g><g><title>check_mod_attrs (7,062,301 samples, 0.19%)</title><rect x="18.0242%" y="181" width="0.1940%" height="15" fill="rgb(231,73,38)"/><text x="18.2742%" y="191.50"></text></g><g><title>misc_checking_1 (9,026,221 samples, 0.25%)</title><rect x="18.0234%" y="197" width="0.2479%" height="15" fill="rgb(225,20,46)"/><text x="18.2734%" y="207.50"></text></g><g><title>misc_checking_2 (4,719,178 samples, 0.13%)</title><rect x="18.2713%" y="197" width="0.1296%" height="15" fill="rgb(210,31,41)"/><text x="18.5213%" y="207.50"></text></g><g><title>crate_lints (4,462,554 samples, 0.12%)</title><rect x="18.4568%" y="165" width="0.1226%" height="15" fill="rgb(221,200,47)"/><text x="18.7068%" y="175.50"></text></g><g><title>lint_checking (7,451,034 samples, 0.20%)</title><rect x="18.4568%" y="181" width="0.2047%" height="15" fill="rgb(226,26,5)"/><text x="18.7068%" y="191.50"></text></g><g><title>privacy_checking_modules (3,843,869 samples, 0.11%)</title><rect x="18.6845%" y="181" width="0.1056%" height="15" fill="rgb(249,33,26)"/><text x="18.9345%" y="191.50"></text></g><g><title>check_mod_privacy (3,836,649 samples, 0.11%)</title><rect x="18.6847%" y="165" width="0.1054%" height="15" fill="rgb(235,183,28)"/><text x="18.9347%" y="175.50"></text></g><g><title>misc_checking_3 (14,189,852 samples, 0.39%)</title><rect x="18.4010%" y="197" width="0.3898%" height="15" fill="rgb(221,5,38)"/><text x="18.6510%" y="207.50"></text></g><g><title>impl_trait_ref (5,640,721 samples, 0.15%)</title><rect x="19.1042%" y="133" width="0.1549%" height="15" fill="rgb(247,18,42)"/><text x="19.3542%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,342,528 samples, 0.12%)</title><rect x="19.1398%" y="117" width="0.1193%" height="15" fill="rgb(241,131,45)"/><text x="19.3898%" y="127.50"></text></g><g><title>coherent_trait (17,386,934 samples, 0.48%)</title><rect x="18.8022%" y="165" width="0.4776%" height="15" fill="rgb(249,31,29)"/><text x="19.0522%" y="175.50"></text></g><g><title>specialization_graph_of (16,688,617 samples, 0.46%)</title><rect x="18.8213%" y="149" width="0.4584%" height="15" fill="rgb(225,111,53)"/><text x="19.0713%" y="159.50"></text></g><g><title>coherence_checking (17,501,125 samples, 0.48%)</title><rect x="18.8015%" y="181" width="0.4807%" height="15" fill="rgb(238,160,17)"/><text x="19.0515%" y="191.50"></text></g><g><title>mir_borrowck (4,648,658 samples, 0.13%)</title><rect x="23.8699%" y="53" width="0.1277%" height="15" fill="rgb(214,148,48)"/><text x="24.1199%" y="63.50"></text></g><g><title>mir_for_ctfe (7,279,053 samples, 0.20%)</title><rect x="23.7985%" y="85" width="0.1999%" height="15" fill="rgb(232,36,49)"/><text x="24.0485%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,610,999 samples, 0.18%)</title><rect x="23.8169%" y="69" width="0.1816%" height="15" fill="rgb(209,103,24)"/><text x="24.0669%" y="79.50"></text></g><g><title>eval_to_const_value_raw (12,148,764 samples, 0.33%)</title><rect x="23.6653%" y="133" width="0.3337%" height="15" fill="rgb(229,88,8)"/><text x="23.9153%" y="143.50"></text></g><g><title>eval_to_const_value_raw (11,216,884 samples, 0.31%)</title><rect x="23.6909%" y="117" width="0.3081%" height="15" fill="rgb(213,181,19)"/><text x="23.9409%" y="127.50"></text></g><g><title>eval_to_allocation_raw (11,024,233 samples, 0.30%)</title><rect x="23.6962%" y="101" width="0.3028%" height="15" fill="rgb(254,191,54)"/><text x="23.9462%" y="111.50"></text></g><g><title>evaluate_obligation (9,512,217 samples, 0.26%)</title><rect x="23.9990%" y="133" width="0.2613%" height="15" fill="rgb(241,83,37)"/><text x="24.2490%" y="143.50"></text></g><g><title>evaluate_obligation (8,936,701 samples, 0.25%)</title><rect x="24.8131%" y="37" width="0.2455%" height="15" fill="rgb(233,36,39)"/><text x="25.0631%" y="47.50"></text></g><g><title>eval_to_const_value_raw (15,714,420 samples, 0.43%)</title><rect x="24.6394%" y="101" width="0.4317%" height="15" fill="rgb(226,3,54)"/><text x="24.8894%" y="111.50"></text></g><g><title>eval_to_const_value_raw (15,700,510 samples, 0.43%)</title><rect x="24.6398%" y="85" width="0.4313%" height="15" fill="rgb(245,192,40)"/><text x="24.8898%" y="95.50"></text></g><g><title>eval_to_allocation_raw (15,667,870 samples, 0.43%)</title><rect x="24.6407%" y="69" width="0.4304%" height="15" fill="rgb(238,167,29)"/><text x="24.8907%" y="79.50"></text></g><g><title>typeck_const_arg (12,716,666 samples, 0.35%)</title><rect x="24.7217%" y="53" width="0.3493%" height="15" fill="rgb(232,182,51)"/><text x="24.9717%" y="63.50"></text></g><g><title>opt_const_param_of (27,186,996 samples, 0.75%)</title><rect x="24.3343%" y="133" width="0.7468%" height="15" fill="rgb(231,60,39)"/><text x="24.5843%" y="143.50"></text></g><g><title>typeck (27,007,193 samples, 0.74%)</title><rect x="24.3392%" y="117" width="0.7419%" height="15" fill="rgb(208,69,12)"/><text x="24.5892%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,641,768 samples, 0.10%)</title><rect x="26.0472%" y="117" width="0.1000%" height="15" fill="rgb(235,93,37)"/><text x="26.2972%" y="127.50"></text></g><g><title>typeck (39,711,309 samples, 1.09%)</title><rect x="25.1619%" y="133" width="1.0908%" height="15" fill="rgb(213,116,39)"/><text x="25.4119%" y="143.50"></text></g><g><title>item_bodies_checking (255,775,155 samples, 7.03%)</title><rect x="19.2840%" y="181" width="7.0259%" height="15" fill="rgb(222,207,29)"/><text x="19.5340%" y="191.50">item_bodi..</text></g><g><title>typeck_item_bodies (255,771,115 samples, 7.03%)</title><rect x="19.2841%" y="165" width="7.0257%" height="15" fill="rgb(206,96,30)"/><text x="19.5341%" y="175.50">typeck_it..</text></g><g><title>typeck (255,264,460 samples, 7.01%)</title><rect x="19.2980%" y="149" width="7.0118%" height="15" fill="rgb(218,138,4)"/><text x="19.5480%" y="159.50">typeck</text></g><g><title>type_collecting (4,112,241 samples, 0.11%)</title><rect x="26.3393%" y="181" width="0.1130%" height="15" fill="rgb(250,191,14)"/><text x="26.5893%" y="191.50"></text></g><g><title>collect_mod_item_types (4,104,351 samples, 0.11%)</title><rect x="26.3395%" y="165" width="0.1127%" height="15" fill="rgb(239,60,40)"/><text x="26.5895%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,123,978 samples, 0.14%)</title><rect x="26.4703%" y="165" width="0.1407%" height="15" fill="rgb(206,27,48)"/><text x="26.7203%" y="175.50"></text></g><g><title>mir_borrowck (6,391,283 samples, 0.18%)</title><rect x="26.9778%" y="69" width="0.1756%" height="15" fill="rgb(225,35,8)"/><text x="27.2278%" y="79.50"></text></g><g><title>mir_for_ctfe (9,966,349 samples, 0.27%)</title><rect x="26.8808%" y="101" width="0.2738%" height="15" fill="rgb(250,213,24)"/><text x="27.1308%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,099,423 samples, 0.25%)</title><rect x="26.9046%" y="85" width="0.2500%" height="15" fill="rgb(247,123,22)"/><text x="27.1546%" y="95.50"></text></g><g><title>typeck (8,323,408 samples, 0.23%)</title><rect x="27.2089%" y="101" width="0.2286%" height="15" fill="rgb(231,138,38)"/><text x="27.4589%" y="111.50"></text></g><g><title>eval_to_const_value_raw (25,420,302 samples, 0.70%)</title><rect x="26.7403%" y="149" width="0.6983%" height="15" fill="rgb(231,145,46)"/><text x="26.9903%" y="159.50"></text></g><g><title>eval_to_const_value_raw (25,305,729 samples, 0.70%)</title><rect x="26.7434%" y="133" width="0.6951%" height="15" fill="rgb(251,118,11)"/><text x="26.9934%" y="143.50"></text></g><g><title>eval_to_allocation_raw (25,086,107 samples, 0.69%)</title><rect x="26.7495%" y="117" width="0.6891%" height="15" fill="rgb(217,147,25)"/><text x="26.9995%" y="127.50"></text></g><g><title>analysis (465,305,196 samples, 12.78%)</title><rect x="14.7638%" y="213" width="12.7814%" height="15" fill="rgb(247,81,37)"/><text x="15.0138%" y="223.50">analysis</text></g><g><title>type_check_crate (318,704,345 samples, 8.75%)</title><rect x="18.7907%" y="197" width="8.7544%" height="15" fill="rgb(209,12,38)"/><text x="19.0407%" y="207.50">type_check_c..</text></g><g><title>wf_checking (39,725,608 samples, 1.09%)</title><rect x="26.4540%" y="181" width="1.0912%" height="15" fill="rgb(227,1,9)"/><text x="26.7040%" y="191.50"></text></g><g><title>check_item_well_formed (34,006,140 samples, 0.93%)</title><rect x="26.6111%" y="165" width="0.9341%" height="15" fill="rgb(248,47,43)"/><text x="26.8611%" y="175.50"></text></g><g><title>param_env (7,042,752 samples, 0.19%)</title><rect x="31.5866%" y="165" width="0.1935%" height="15" fill="rgb(221,10,30)"/><text x="31.8366%" y="175.50"></text></g><g><title>fn_abi_of_instance (20,455,290 samples, 0.56%)</title><rect x="31.3092%" y="181" width="0.5619%" height="15" fill="rgb(210,229,1)"/><text x="31.5592%" y="191.50"></text></g><g><title>codegen_module (159,576,739 samples, 4.38%)</title><rect x="27.6171%" y="197" width="4.3834%" height="15" fill="rgb(222,148,37)"/><text x="27.8671%" y="207.50">codeg..</text></g><g><title>codegen_crate (162,269,927 samples, 4.46%)</title><rect x="27.5455%" y="213" width="4.4574%" height="15" fill="rgb(234,67,33)"/><text x="27.7955%" y="223.50">codeg..</text></g><g><title>LLVM_module_codegen (1,430,160,930 samples, 39.28%)</title><rect x="32.0112%" y="197" width="39.2849%" height="15" fill="rgb(247,98,35)"/><text x="32.2612%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,367,573,712 samples, 37.57%)</title><rect x="33.7304%" y="181" width="37.5657%" height="15" fill="rgb(247,138,52)"/><text x="33.9804%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,894,092,791 samples, 52.03%)</title><rect x="32.0029%" y="213" width="52.0286%" height="15" fill="rgb(213,79,30)"/><text x="32.2529%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (463,631,378 samples, 12.74%)</title><rect x="71.2960%" y="197" width="12.7354%" height="15" fill="rgb(246,177,23)"/><text x="71.5460%" y="207.50">LLVM_module_optimize</text></g><g><title>macro_expand_crate (55,041,682 samples, 1.51%)</title><rect x="84.0654%" y="197" width="1.5119%" height="15" fill="rgb(230,62,27)"/><text x="84.3154%" y="207.50"></text></g><g><title>expand_crate (55,027,072 samples, 1.51%)</title><rect x="84.0658%" y="181" width="1.5115%" height="15" fill="rgb(216,154,8)"/><text x="84.3158%" y="191.50"></text></g><g><title>late_resolve_crate (6,768,497 samples, 0.19%)</title><rect x="85.6092%" y="181" width="0.1859%" height="15" fill="rgb(244,35,45)"/><text x="85.8592%" y="191.50"></text></g><g><title>configure_and_expand (64,831,720 samples, 1.78%)</title><rect x="84.0315%" y="213" width="1.7809%" height="15" fill="rgb(251,115,12)"/><text x="84.2815%" y="223.50">c..</text></g><g><title>resolve_crate (8,243,432 samples, 0.23%)</title><rect x="85.5859%" y="197" width="0.2264%" height="15" fill="rgb(240,54,50)"/><text x="85.8359%" y="207.50"></text></g><g><title>early_lint_checks (10,597,946 samples, 0.29%)</title><rect x="85.8453%" y="213" width="0.2911%" height="15" fill="rgb(233,84,52)"/><text x="86.0953%" y="223.50"></text></g><g><title>free_global_ctxt (14,686,597 samples, 0.40%)</title><rect x="86.1364%" y="213" width="0.4034%" height="15" fill="rgb(207,117,47)"/><text x="86.3864%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,969,574 samples, 0.16%)</title><rect x="87.3464%" y="117" width="0.1640%" height="15" fill="rgb(249,43,39)"/><text x="87.5964%" y="127.50"></text></g><g><title>optimized_mir (17,432,570 samples, 0.48%)</title><rect x="87.0556%" y="133" width="0.4789%" height="15" fill="rgb(209,38,44)"/><text x="87.3056%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (7,822,127 samples, 0.21%)</title><rect x="87.5847%" y="117" width="0.2149%" height="15" fill="rgb(236,212,23)"/><text x="87.8347%" y="127.50"></text></g><g><title>resolve_instance (13,031,768 samples, 0.36%)</title><rect x="87.5345%" y="133" width="0.3580%" height="15" fill="rgb(242,79,21)"/><text x="87.7845%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (44,447,535 samples, 1.22%)</title><rect x="86.7892%" y="149" width="1.2209%" height="15" fill="rgb(211,96,35)"/><text x="87.0392%" y="159.50"></text></g><g><title>monomorphization_collector (44,603,047 samples, 1.23%)</title><rect x="86.7891%" y="165" width="1.2252%" height="15" fill="rgb(253,215,40)"/><text x="87.0391%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (3,684,978 samples, 0.10%)</title><rect x="88.0144%" y="149" width="0.1012%" height="15" fill="rgb(211,81,21)"/><text x="88.2644%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (50,191,433 samples, 1.38%)</title><rect x="86.7877%" y="181" width="1.3787%" height="15" fill="rgb(208,190,38)"/><text x="87.0377%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (5,538,466 samples, 0.15%)</title><rect x="88.0143%" y="165" width="0.1521%" height="15" fill="rgb(235,213,38)"/><text x="88.2643%" y="175.50"></text></g><g><title>exported_symbols (50,539,116 samples, 1.39%)</title><rect x="86.7834%" y="197" width="1.3883%" height="15" fill="rgb(237,122,38)"/><text x="87.0334%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,002,479 samples, 0.30%)</title><rect x="88.5253%" y="181" width="0.3022%" height="15" fill="rgb(244,218,35)"/><text x="88.7753%" y="191.50"></text></g><g><title>optimized_mir (24,107,131 samples, 0.66%)</title><rect x="88.1902%" y="197" width="0.6622%" height="15" fill="rgb(240,68,47)"/><text x="88.4402%" y="207.50"></text></g><g><title>generate_crate_metadata (84,528,668 samples, 2.32%)</title><rect x="86.5398%" y="213" width="2.3219%" height="15" fill="rgb(210,16,53)"/><text x="86.7898%" y="223.50">g..</text></g><g><title>hir_lowering (12,751,047 samples, 0.35%)</title><rect x="88.8617%" y="213" width="0.3503%" height="15" fill="rgb(235,124,12)"/><text x="89.1117%" y="223.50"></text></g><g><title>finish_ongoing_codegen (370,877,890 samples, 10.19%)</title><rect x="89.2127%" y="197" width="10.1876%" height="15" fill="rgb(224,169,11)"/><text x="89.4627%" y="207.50">finish_ongoing_..</text></g><g><title>link_crate (10,109,371 samples, 0.28%)</title><rect x="99.4003%" y="197" width="0.2777%" height="15" fill="rgb(250,166,2)"/><text x="99.6503%" y="207.50"></text></g><g><title>link_binary (9,971,710 samples, 0.27%)</title><rect x="99.4041%" y="181" width="0.2739%" height="15" fill="rgb(242,216,29)"/><text x="99.6541%" y="191.50"></text></g><g><title>link_rlib (8,759,318 samples, 0.24%)</title><rect x="99.4374%" y="165" width="0.2406%" height="15" fill="rgb(230,116,27)"/><text x="99.6874%" y="175.50"></text></g><g><title>link (381,034,511 samples, 10.47%)</title><rect x="89.2120%" y="213" width="10.4666%" height="15" fill="rgb(228,99,48)"/><text x="89.4620%" y="223.50">link</text></g><g><title>parse_crate (5,486,245 samples, 0.15%)</title><rect x="99.6786%" y="213" width="0.1507%" height="15" fill="rgb(253,11,6)"/><text x="99.9286%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (4,859,169 samples, 0.13%)</title><rect x="99.8357%" y="213" width="0.1335%" height="15" fill="rgb(247,143,39)"/><text x="100.0857%" y="223.50"></text></g><g><title>all (3,640,485,444 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (3,640,485,444 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>