<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (130,006,922 samples, 16.29%)</title><rect x="0.0521%" y="213" width="16.2853%" height="15" fill="rgb(227,0,7)"/><text x="0.3021%" y="223.50">LLVM_passes</text></g><g><title>mir_const (1,488,584 samples, 0.19%)</title><rect x="16.5667%" y="149" width="0.1865%" height="15" fill="rgb(217,0,24)"/><text x="16.8167%" y="159.50"></text></g><g><title>unsafety_check_result (1,340,613 samples, 0.17%)</title><rect x="16.5853%" y="133" width="0.1679%" height="15" fill="rgb(221,193,54)"/><text x="16.8353%" y="143.50"></text></g><g><title>mir_built (1,225,662 samples, 0.15%)</title><rect x="16.5997%" y="117" width="0.1535%" height="15" fill="rgb(248,212,6)"/><text x="16.8497%" y="127.50"></text></g><g><title>mir_promoted (2,131,411 samples, 0.27%)</title><rect x="16.5536%" y="165" width="0.2670%" height="15" fill="rgb(208,68,35)"/><text x="16.8036%" y="175.50"></text></g><g><title>MIR_borrow_checking (4,640,879 samples, 0.58%)</title><rect x="16.3509%" y="197" width="0.5813%" height="15" fill="rgb(232,128,0)"/><text x="16.6009%" y="207.50"></text></g><g><title>mir_borrowck (4,623,939 samples, 0.58%)</title><rect x="16.3530%" y="181" width="0.5792%" height="15" fill="rgb(207,160,47)"/><text x="16.6030%" y="191.50"></text></g><g><title>crate_lints (1,014,861 samples, 0.13%)</title><rect x="17.0685%" y="165" width="0.1271%" height="15" fill="rgb(228,23,34)"/><text x="17.3185%" y="175.50"></text></g><g><title>lint_checking (1,124,732 samples, 0.14%)</title><rect x="17.0683%" y="181" width="0.1409%" height="15" fill="rgb(218,30,26)"/><text x="17.3183%" y="191.50"></text></g><g><title>misc_checking_3 (1,629,767 samples, 0.20%)</title><rect x="17.0507%" y="197" width="0.2042%" height="15" fill="rgb(220,122,19)"/><text x="17.3007%" y="207.50"></text></g><g><title>item_bodies_checking (4,285,826 samples, 0.54%)</title><rect x="17.3165%" y="181" width="0.5369%" height="15" fill="rgb(250,228,42)"/><text x="17.5665%" y="191.50"></text></g><g><title>typeck_item_bodies (4,281,856 samples, 0.54%)</title><rect x="17.3170%" y="165" width="0.5364%" height="15" fill="rgb(240,193,28)"/><text x="17.5670%" y="175.50"></text></g><g><title>typeck (4,270,136 samples, 0.53%)</title><rect x="17.3185%" y="149" width="0.5349%" height="15" fill="rgb(216,20,37)"/><text x="17.5685%" y="159.50"></text></g><g><title>mir_borrowck (2,434,185 samples, 0.30%)</title><rect x="18.0688%" y="117" width="0.3049%" height="15" fill="rgb(206,188,39)"/><text x="18.3188%" y="127.50"></text></g><g><title>evaluate_obligation (955,891 samples, 0.12%)</title><rect x="18.8588%" y="37" width="0.1197%" height="15" fill="rgb(217,207,13)"/><text x="19.1088%" y="47.50"></text></g><g><title>mir_built (6,064,993 samples, 0.76%)</title><rect x="18.3982%" y="69" width="0.7597%" height="15" fill="rgb(231,73,38)"/><text x="18.6482%" y="79.50"></text></g><g><title>typeck (5,827,411 samples, 0.73%)</title><rect x="18.4279%" y="53" width="0.7300%" height="15" fill="rgb(225,20,46)"/><text x="18.6779%" y="63.50"></text></g><g><title>mir_const (6,762,341 samples, 0.85%)</title><rect x="18.3831%" y="101" width="0.8471%" height="15" fill="rgb(210,31,41)"/><text x="18.6331%" y="111.50"></text></g><g><title>unsafety_check_result (6,669,859 samples, 0.84%)</title><rect x="18.3947%" y="85" width="0.8355%" height="15" fill="rgb(221,200,47)"/><text x="18.6447%" y="95.50"></text></g><g><title>mir_promoted (6,860,732 samples, 0.86%)</title><rect x="18.3737%" y="117" width="0.8594%" height="15" fill="rgb(226,26,5)"/><text x="18.6237%" y="127.50"></text></g><g><title>type_of (10,278,258 samples, 1.29%)</title><rect x="17.9750%" y="149" width="1.2875%" height="15" fill="rgb(249,33,26)"/><text x="18.2250%" y="159.50"></text></g><g><title>mir_borrowck (10,268,988 samples, 1.29%)</title><rect x="17.9761%" y="133" width="1.2863%" height="15" fill="rgb(235,183,28)"/><text x="18.2261%" y="143.50"></text></g><g><title>item_types_checking (12,186,358 samples, 1.53%)</title><rect x="17.8534%" y="181" width="1.5265%" height="15" fill="rgb(221,5,38)"/><text x="18.1034%" y="191.50"></text></g><g><title>check_mod_item_types (12,183,528 samples, 1.53%)</title><rect x="17.8537%" y="165" width="1.5262%" height="15" fill="rgb(247,18,42)"/><text x="18.1037%" y="175.50"></text></g><g><title>typeck (937,431 samples, 0.12%)</title><rect x="19.2625%" y="149" width="0.1174%" height="15" fill="rgb(241,131,45)"/><text x="19.5125%" y="159.50"></text></g><g><title>evaluate_obligation (987,121 samples, 0.12%)</title><rect x="19.5916%" y="149" width="0.1237%" height="15" fill="rgb(249,31,29)"/><text x="19.8416%" y="159.50"></text></g><g><title>analysis (27,439,030 samples, 3.44%)</title><rect x="16.3374%" y="213" width="3.4371%" height="15" fill="rgb(225,111,53)"/><text x="16.5874%" y="223.50">ana..</text></g><g><title>type_check_crate (20,115,092 samples, 2.52%)</title><rect x="17.2548%" y="197" width="2.5197%" height="15" fill="rgb(238,160,17)"/><text x="17.5048%" y="207.50">ty..</text></g><g><title>wf_checking (2,471,626 samples, 0.31%)</title><rect x="19.4650%" y="181" width="0.3096%" height="15" fill="rgb(214,148,48)"/><text x="19.7150%" y="191.50"></text></g><g><title>check_item_well_formed (1,941,171 samples, 0.24%)</title><rect x="19.5314%" y="165" width="0.2432%" height="15" fill="rgb(232,36,49)"/><text x="19.7814%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (3,367,260 samples, 0.42%)</title><rect x="31.8738%" y="181" width="0.4218%" height="15" fill="rgb(209,103,24)"/><text x="32.1238%" y="191.50"></text></g><g><title>const_caller_location (1,771,778 samples, 0.22%)</title><rect x="32.2956%" y="181" width="0.2219%" height="15" fill="rgb(229,88,8)"/><text x="32.5456%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,030,132 samples, 0.13%)</title><rect x="33.1833%" y="165" width="0.1290%" height="15" fill="rgb(213,181,19)"/><text x="33.4333%" y="175.50"></text></g><g><title>layout_of (3,659,749 samples, 0.46%)</title><rect x="33.3345%" y="165" width="0.4584%" height="15" fill="rgb(254,191,54)"/><text x="33.5845%" y="175.50"></text></g><g><title>explicit_predicates_of (946,853 samples, 0.12%)</title><rect x="34.5484%" y="117" width="0.1186%" height="15" fill="rgb(241,83,37)"/><text x="34.7984%" y="127.50"></text></g><g><title>predicates_of (2,569,809 samples, 0.32%)</title><rect x="34.3819%" y="149" width="0.3219%" height="15" fill="rgb(233,36,39)"/><text x="34.6319%" y="159.50"></text></g><g><title>predicates_defined_on (1,901,041 samples, 0.24%)</title><rect x="34.4657%" y="133" width="0.2381%" height="15" fill="rgb(226,3,54)"/><text x="34.7157%" y="143.50"></text></g><g><title>param_env (7,290,461 samples, 0.91%)</title><rect x="33.7929%" y="165" width="0.9132%" height="15" fill="rgb(245,192,40)"/><text x="34.0429%" y="175.50"></text></g><g><title>normalize_projection_ty (886,238 samples, 0.11%)</title><rect x="34.7442%" y="149" width="0.1110%" height="15" fill="rgb(238,167,29)"/><text x="34.9942%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,193,622 samples, 0.15%)</title><rect x="34.7062%" y="165" width="0.1495%" height="15" fill="rgb(232,182,51)"/><text x="34.9562%" y="175.50"></text></g><g><title>fn_abi_of_instance (18,606,490 samples, 2.33%)</title><rect x="32.5294%" y="181" width="2.3307%" height="15" fill="rgb(231,60,39)"/><text x="32.7794%" y="191.50">f..</text></g><g><title>layout_of (1,134,392 samples, 0.14%)</title><rect x="35.2701%" y="165" width="0.1421%" height="15" fill="rgb(208,69,12)"/><text x="35.5201%" y="175.50"></text></g><g><title>layout_of (3,375,622 samples, 0.42%)</title><rect x="35.0084%" y="181" width="0.4228%" height="15" fill="rgb(235,93,37)"/><text x="35.2584%" y="191.50"></text></g><g><title>symbol_name (1,003,437 samples, 0.13%)</title><rect x="35.4341%" y="181" width="0.1257%" height="15" fill="rgb(213,116,39)"/><text x="35.6841%" y="191.50"></text></g><g><title>codegen_module (123,400,944 samples, 15.46%)</title><rect x="20.1145%" y="197" width="15.4578%" height="15" fill="rgb(222,207,29)"/><text x="20.3645%" y="207.50">codegen_module</text></g><g><title>codegen_crate (126,207,822 samples, 15.81%)</title><rect x="19.7753%" y="213" width="15.8094%" height="15" fill="rgb(206,96,30)"/><text x="20.0253%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (400,371,396 samples, 50.15%)</title><rect x="35.6130%" y="197" width="50.1525%" height="15" fill="rgb(218,138,4)"/><text x="35.8630%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (381,831,300 samples, 47.83%)</title><rect x="37.9354%" y="181" width="47.8301%" height="15" fill="rgb(250,191,14)"/><text x="38.1854%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (428,675,450 samples, 53.70%)</title><rect x="35.5847%" y="213" width="53.6980%" height="15" fill="rgb(239,60,40)"/><text x="35.8347%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,078,434 samples, 3.52%)</title><rect x="85.7655%" y="197" width="3.5172%" height="15" fill="rgb(206,27,48)"/><text x="86.0155%" y="207.50">LLV..</text></g><g><title>macro_expand_crate (10,417,071 samples, 1.30%)</title><rect x="89.3179%" y="197" width="1.3049%" height="15" fill="rgb(225,35,8)"/><text x="89.5679%" y="207.50"></text></g><g><title>expand_crate (10,400,611 samples, 1.30%)</title><rect x="89.3200%" y="181" width="1.3028%" height="15" fill="rgb(250,213,24)"/><text x="89.5700%" y="191.50"></text></g><g><title>metadata_register_crate (4,994,773 samples, 0.63%)</title><rect x="89.9971%" y="165" width="0.6257%" height="15" fill="rgb(247,123,22)"/><text x="90.2471%" y="175.50"></text></g><g><title>configure_and_expand (11,391,090 samples, 1.43%)</title><rect x="89.2827%" y="213" width="1.4269%" height="15" fill="rgb(231,138,38)"/><text x="89.5327%" y="223.50"></text></g><g><title>free_global_ctxt (5,856,562 samples, 0.73%)</title><rect x="90.7299%" y="213" width="0.7336%" height="15" fill="rgb(231,145,46)"/><text x="90.9799%" y="223.50"></text></g><g><title>item_attrs (2,122,656 samples, 0.27%)</title><rect x="92.1292%" y="117" width="0.2659%" height="15" fill="rgb(251,118,11)"/><text x="92.3792%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,031,686 samples, 0.25%)</title><rect x="92.1406%" y="101" width="0.2545%" height="15" fill="rgb(217,147,25)"/><text x="92.3906%" y="111.50"></text></g><g><title>codegen_fn_attrs (3,536,697 samples, 0.44%)</title><rect x="92.0526%" y="133" width="0.4430%" height="15" fill="rgb(247,81,37)"/><text x="92.3026%" y="143.50"></text></g><g><title>should_inherit_track_caller (802,613 samples, 0.10%)</title><rect x="92.3951%" y="117" width="0.1005%" height="15" fill="rgb(209,12,38)"/><text x="92.6451%" y="127.50"></text></g><g><title>mir_shims (1,023,322 samples, 0.13%)</title><rect x="92.5718%" y="133" width="0.1282%" height="15" fill="rgb(227,1,9)"/><text x="92.8218%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,272,524 samples, 0.54%)</title><rect x="92.7666%" y="117" width="0.5352%" height="15" fill="rgb(248,47,43)"/><text x="93.0166%" y="127.50"></text></g><g><title>optimized_mir (5,159,893 samples, 0.65%)</title><rect x="92.7000%" y="133" width="0.6464%" height="15" fill="rgb(221,10,30)"/><text x="92.9500%" y="143.50"></text></g><g><title>evaluate_obligation (866,591 samples, 0.11%)</title><rect x="93.8286%" y="101" width="0.1086%" height="15" fill="rgb(210,229,1)"/><text x="94.0786%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,410,108 samples, 0.55%)</title><rect x="93.5362%" y="117" width="0.5524%" height="15" fill="rgb(222,148,37)"/><text x="93.7862%" y="127.50"></text></g><g><title>impl_parent (2,224,710 samples, 0.28%)</title><rect x="94.6921%" y="101" width="0.2787%" height="15" fill="rgb(234,67,33)"/><text x="94.9421%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,246,378 samples, 0.16%)</title><rect x="94.8147%" y="85" width="0.1561%" height="15" fill="rgb(247,98,35)"/><text x="95.0647%" y="95.50"></text></g><g><title>specialization_graph_of (9,151,936 samples, 1.15%)</title><rect x="94.2902%" y="117" width="1.1464%" height="15" fill="rgb(247,138,52)"/><text x="94.5402%" y="127.50"></text></g><g><title>impl_trait_ref (3,718,325 samples, 0.47%)</title><rect x="94.9708%" y="101" width="0.4658%" height="15" fill="rgb(213,79,30)"/><text x="95.2208%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,969,451 samples, 0.37%)</title><rect x="95.0646%" y="85" width="0.3720%" height="15" fill="rgb(246,177,23)"/><text x="95.3146%" y="95.50"></text></g><g><title>resolve_instance (17,496,972 samples, 2.19%)</title><rect x="93.3463%" y="133" width="2.1918%" height="15" fill="rgb(230,62,27)"/><text x="93.5963%" y="143.50">r..</text></g><g><title>eval_to_const_value_raw (1,439,354 samples, 0.18%)</title><rect x="95.5932%" y="117" width="0.1803%" height="15" fill="rgb(216,154,8)"/><text x="95.8432%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,408,364 samples, 0.18%)</title><rect x="95.5971%" y="101" width="0.1764%" height="15" fill="rgb(244,35,45)"/><text x="95.8471%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,362,754 samples, 0.17%)</title><rect x="95.6028%" y="85" width="0.1707%" height="15" fill="rgb(251,115,12)"/><text x="95.8528%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,908,859 samples, 0.24%)</title><rect x="95.5507%" y="133" width="0.2391%" height="15" fill="rgb(240,54,50)"/><text x="95.8007%" y="143.50"></text></g><g><title>impl_trait_ref (2,360,017 samples, 0.30%)</title><rect x="96.2305%" y="85" width="0.2956%" height="15" fill="rgb(233,84,52)"/><text x="96.4805%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,113,162 samples, 0.26%)</title><rect x="96.2614%" y="69" width="0.2647%" height="15" fill="rgb(207,117,47)"/><text x="96.5114%" y="79.50"></text></g><g><title>specialization_graph_of (4,273,465 samples, 0.54%)</title><rect x="95.9910%" y="101" width="0.5353%" height="15" fill="rgb(249,43,39)"/><text x="96.2410%" y="111.50"></text></g><g><title>resolve_instance (4,577,788 samples, 0.57%)</title><rect x="95.9537%" y="117" width="0.5734%" height="15" fill="rgb(209,38,44)"/><text x="96.2037%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (39,642,979 samples, 4.97%)</title><rect x="91.5620%" y="149" width="4.9659%" height="15" fill="rgb(236,212,23)"/><text x="91.8120%" y="159.50">monomo..</text></g><g><title>vtable_entries (5,258,577 samples, 0.66%)</title><rect x="95.8691%" y="133" width="0.6587%" height="15" fill="rgb(242,79,21)"/><text x="96.1191%" y="143.50"></text></g><g><title>monomorphization_collector (39,666,819 samples, 4.97%)</title><rect x="91.5616%" y="165" width="4.9689%" height="15" fill="rgb(211,96,35)"/><text x="91.8116%" y="175.50">monomo..</text></g><g><title>assert_symbols_are_distinct (3,016,572 samples, 0.38%)</title><rect x="96.5320%" y="149" width="0.3779%" height="15" fill="rgb(253,215,40)"/><text x="96.7820%" y="159.50"></text></g><g><title>symbol_name (2,716,121 samples, 0.34%)</title><rect x="96.5696%" y="133" width="0.3402%" height="15" fill="rgb(211,81,21)"/><text x="96.8196%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (44,257,817 samples, 5.54%)</title><rect x="91.5557%" y="181" width="5.5440%" height="15" fill="rgb(208,190,38)"/><text x="91.8057%" y="191.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (4,543,988 samples, 0.57%)</title><rect x="96.5305%" y="165" width="0.5692%" height="15" fill="rgb(235,213,38)"/><text x="96.7805%" y="175.50"></text></g><g><title>cgu_partitioning (1,515,336 samples, 0.19%)</title><rect x="96.9099%" y="149" width="0.1898%" height="15" fill="rgb(237,122,38)"/><text x="97.1599%" y="159.50"></text></g><g><title>exported_symbols (44,408,449 samples, 5.56%)</title><rect x="91.5426%" y="197" width="5.5628%" height="15" fill="rgb(244,218,35)"/><text x="91.7926%" y="207.50">exporte..</text></g><g><title>mir_drops_elaborated_and_const_checked (994,230 samples, 0.12%)</title><rect x="97.2413%" y="181" width="0.1245%" height="15" fill="rgb(240,68,47)"/><text x="97.4913%" y="191.50"></text></g><g><title>optimized_mir (2,053,470 samples, 0.26%)</title><rect x="97.1088%" y="197" width="0.2572%" height="15" fill="rgb(210,16,53)"/><text x="97.3588%" y="207.50"></text></g><g><title>generate_crate_metadata (47,134,788 samples, 5.90%)</title><rect x="91.4635%" y="213" width="5.9043%" height="15" fill="rgb(235,124,12)"/><text x="91.7135%" y="223.50">generate..</text></g><g><title>finish_ongoing_codegen (15,184,751 samples, 1.90%)</title><rect x="97.4485%" y="197" width="1.9021%" height="15" fill="rgb(224,169,11)"/><text x="97.6985%" y="207.50">f..</text></g><g><title>link_crate (2,467,536 samples, 0.31%)</title><rect x="99.3506%" y="197" width="0.3091%" height="15" fill="rgb(250,166,2)"/><text x="99.6006%" y="207.50"></text></g><g><title>link_binary (2,437,726 samples, 0.31%)</title><rect x="99.3543%" y="181" width="0.3054%" height="15" fill="rgb(242,216,29)"/><text x="99.6043%" y="191.50"></text></g><g><title>link_rlib (1,765,529 samples, 0.22%)</title><rect x="99.4385%" y="165" width="0.2212%" height="15" fill="rgb(230,116,27)"/><text x="99.6885%" y="175.50"></text></g><g><title>link (17,679,757 samples, 2.21%)</title><rect x="97.4465%" y="213" width="2.2147%" height="15" fill="rgb(228,99,48)"/><text x="97.6965%" y="223.50">l..</text></g><g><title>self_profile_alloc_query_strings (1,610,097 samples, 0.20%)</title><rect x="99.7520%" y="213" width="0.2017%" height="15" fill="rgb(253,11,6)"/><text x="100.0020%" y="223.50"></text></g><g><title>all (798,307,922 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (798,307,922 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>