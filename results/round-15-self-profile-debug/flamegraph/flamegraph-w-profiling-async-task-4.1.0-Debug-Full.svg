<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (42,467,706 samples, 10.52%)</title><rect x="0.1747%" y="197" width="10.5216%" height="15" fill="rgb(227,0,7)"/><text x="0.4247%" y="207.50">LLVM_passes</text></g><g><title>param_env (431,793 samples, 0.11%)</title><rect x="14.7891%" y="117" width="0.1070%" height="15" fill="rgb(217,0,24)"/><text x="15.0391%" y="127.50"></text></g><g><title>item_attrs (444,657 samples, 0.11%)</title><rect x="15.0730%" y="85" width="0.1102%" height="15" fill="rgb(221,193,54)"/><text x="15.3230%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (430,656 samples, 0.11%)</title><rect x="15.0765%" y="69" width="0.1067%" height="15" fill="rgb(248,212,6)"/><text x="15.3265%" y="79.50"></text></g><g><title>codegen_fn_attrs (617,750 samples, 0.15%)</title><rect x="15.0356%" y="101" width="0.1531%" height="15" fill="rgb(208,68,35)"/><text x="15.2856%" y="111.50"></text></g><g><title>needs_drop_raw (1,394,302 samples, 0.35%)</title><rect x="16.1830%" y="85" width="0.3454%" height="15" fill="rgb(232,128,0)"/><text x="16.4330%" y="95.50"></text></g><g><title>is_copy_raw (1,114,988 samples, 0.28%)</title><rect x="16.2522%" y="69" width="0.2762%" height="15" fill="rgb(207,160,47)"/><text x="16.5022%" y="79.50"></text></g><g><title>evaluate_obligation (911,237 samples, 0.23%)</title><rect x="16.3027%" y="53" width="0.2258%" height="15" fill="rgb(228,23,34)"/><text x="16.5527%" y="63.50"></text></g><g><title>impl_parent (441,344 samples, 0.11%)</title><rect x="16.8125%" y="53" width="0.1093%" height="15" fill="rgb(218,30,26)"/><text x="17.0625%" y="63.50"></text></g><g><title>specialization_graph_of (1,917,319 samples, 0.48%)</title><rect x="16.6244%" y="69" width="0.4750%" height="15" fill="rgb(220,122,19)"/><text x="16.8744%" y="79.50"></text></g><g><title>impl_trait_ref (716,649 samples, 0.18%)</title><rect x="16.9219%" y="53" width="0.1776%" height="15" fill="rgb(250,228,42)"/><text x="17.1719%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (545,078 samples, 0.14%)</title><rect x="16.9644%" y="37" width="0.1350%" height="15" fill="rgb(240,193,28)"/><text x="17.2144%" y="47.50"></text></g><g><title>resolve_instance (2,409,402 samples, 0.60%)</title><rect x="16.5284%" y="85" width="0.5969%" height="15" fill="rgb(216,20,37)"/><text x="16.7784%" y="95.50"></text></g><g><title>thir_body (1,546,498 samples, 0.38%)</title><rect x="17.1371%" y="85" width="0.3832%" height="15" fill="rgb(206,188,39)"/><text x="17.3871%" y="95.50"></text></g><g><title>mir_const (12,093,274 samples, 3.00%)</title><rect x="14.5319%" y="133" width="2.9962%" height="15" fill="rgb(217,207,13)"/><text x="14.7819%" y="143.50">mir..</text></g><g><title>unsafety_check_result (10,623,600 samples, 2.63%)</title><rect x="14.8960%" y="117" width="2.6320%" height="15" fill="rgb(231,73,38)"/><text x="15.1460%" y="127.50">un..</text></g><g><title>mir_built (9,442,464 samples, 2.34%)</title><rect x="15.1887%" y="101" width="2.3394%" height="15" fill="rgb(225,20,46)"/><text x="15.4387%" y="111.50">m..</text></g><g><title>mir_const_qualif (793,399 samples, 0.20%)</title><rect x="17.5281%" y="133" width="0.1966%" height="15" fill="rgb(210,31,41)"/><text x="17.7781%" y="143.50"></text></g><g><title>mir_promoted (14,266,375 samples, 3.53%)</title><rect x="14.1906%" y="149" width="3.5346%" height="15" fill="rgb(221,200,47)"/><text x="14.4406%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (800,948 samples, 0.20%)</title><rect x="17.7252%" y="149" width="0.1984%" height="15" fill="rgb(226,26,5)"/><text x="17.9752%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,006,730 samples, 0.50%)</title><rect x="18.0085%" y="149" width="0.4972%" height="15" fill="rgb(249,33,26)"/><text x="18.2585%" y="159.50"></text></g><g><title>MIR_borrow_checking (31,188,983 samples, 7.73%)</title><rect x="10.7793%" y="181" width="7.7272%" height="15" fill="rgb(235,183,28)"/><text x="11.0293%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (31,045,563 samples, 7.69%)</title><rect x="10.8149%" y="165" width="7.6917%" height="15" fill="rgb(221,5,38)"/><text x="11.0649%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (407,204 samples, 0.10%)</title><rect x="18.5065%" y="181" width="0.1009%" height="15" fill="rgb(247,18,42)"/><text x="18.7565%" y="191.50"></text></g><g><title>check_mod_attrs (557,785 samples, 0.14%)</title><rect x="18.6602%" y="165" width="0.1382%" height="15" fill="rgb(241,131,45)"/><text x="18.9102%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (499,295 samples, 0.12%)</title><rect x="18.8561%" y="165" width="0.1237%" height="15" fill="rgb(249,31,29)"/><text x="19.1061%" y="175.50"></text></g><g><title>misc_checking_1 (1,370,773 samples, 0.34%)</title><rect x="18.6540%" y="181" width="0.3396%" height="15" fill="rgb(225,111,53)"/><text x="18.9040%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (684,957 samples, 0.17%)</title><rect x="18.9940%" y="165" width="0.1697%" height="15" fill="rgb(238,160,17)"/><text x="19.2440%" y="175.50"></text></g><g><title>check_mod_liveness (548,726 samples, 0.14%)</title><rect x="19.0277%" y="149" width="0.1359%" height="15" fill="rgb(214,148,48)"/><text x="19.2777%" y="159.50"></text></g><g><title>misc_checking_2 (1,359,424 samples, 0.34%)</title><rect x="18.9936%" y="181" width="0.3368%" height="15" fill="rgb(232,36,49)"/><text x="19.2436%" y="191.50"></text></g><g><title>match_checking (673,037 samples, 0.17%)</title><rect x="19.1637%" y="165" width="0.1667%" height="15" fill="rgb(209,103,24)"/><text x="19.4137%" y="175.50"></text></g><g><title>check_match (635,717 samples, 0.16%)</title><rect x="19.1729%" y="149" width="0.1575%" height="15" fill="rgb(229,88,8)"/><text x="19.4229%" y="159.50"></text></g><g><title>death_checking (515,955 samples, 0.13%)</title><rect x="19.4020%" y="165" width="0.1278%" height="15" fill="rgb(213,181,19)"/><text x="19.6520%" y="175.50"></text></g><g><title>param_env (426,313 samples, 0.11%)</title><rect x="19.9755%" y="133" width="0.1056%" height="15" fill="rgb(254,191,54)"/><text x="20.2255%" y="143.50"></text></g><g><title>crate_lints (3,337,643 samples, 0.83%)</title><rect x="19.5302%" y="149" width="0.8269%" height="15" fill="rgb(241,83,37)"/><text x="19.7802%" y="159.50"></text></g><g><title>type_of (1,072,350 samples, 0.27%)</title><rect x="20.0915%" y="133" width="0.2657%" height="15" fill="rgb(233,36,39)"/><text x="20.3415%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (842,915 samples, 0.21%)</title><rect x="20.1483%" y="117" width="0.2088%" height="15" fill="rgb(226,3,54)"/><text x="20.3983%" y="127.50"></text></g><g><title>lint_checking (3,909,169 samples, 0.97%)</title><rect x="19.5298%" y="165" width="0.9685%" height="15" fill="rgb(245,192,40)"/><text x="19.7798%" y="175.50"></text></g><g><title>module_lints (569,866 samples, 0.14%)</title><rect x="20.3572%" y="149" width="0.1412%" height="15" fill="rgb(238,167,29)"/><text x="20.6072%" y="159.50"></text></g><g><title>lint_mod (563,156 samples, 0.14%)</title><rect x="20.3588%" y="133" width="0.1395%" height="15" fill="rgb(232,182,51)"/><text x="20.6088%" y="143.50"></text></g><g><title>privacy_checking_modules (974,130 samples, 0.24%)</title><rect x="20.5661%" y="165" width="0.2413%" height="15" fill="rgb(231,60,39)"/><text x="20.8161%" y="175.50"></text></g><g><title>check_mod_privacy (969,530 samples, 0.24%)</title><rect x="20.5673%" y="149" width="0.2402%" height="15" fill="rgb(208,69,12)"/><text x="20.8173%" y="159.50"></text></g><g><title>misc_checking_3 (5,975,410 samples, 1.48%)</title><rect x="19.3304%" y="181" width="1.4804%" height="15" fill="rgb(235,93,37)"/><text x="19.5804%" y="191.50"></text></g><g><title>impl_parent (1,586,135 samples, 0.39%)</title><rect x="21.5618%" y="117" width="0.3930%" height="15" fill="rgb(213,116,39)"/><text x="21.8118%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (958,671 samples, 0.24%)</title><rect x="21.7172%" y="101" width="0.2375%" height="15" fill="rgb(222,207,29)"/><text x="21.9672%" y="111.50"></text></g><g><title>impl_trait_ref (4,332,989 samples, 1.07%)</title><rect x="21.9547%" y="117" width="1.0735%" height="15" fill="rgb(206,96,30)"/><text x="22.2047%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,478,181 samples, 0.86%)</title><rect x="22.1665%" y="101" width="0.8617%" height="15" fill="rgb(218,138,4)"/><text x="22.4165%" y="111.50"></text></g><g><title>coherent_trait (9,395,944 samples, 2.33%)</title><rect x="20.8367%" y="149" width="2.3279%" height="15" fill="rgb(250,191,14)"/><text x="21.0867%" y="159.50">c..</text></g><g><title>specialization_graph_of (8,834,769 samples, 2.19%)</title><rect x="20.9757%" y="133" width="2.1889%" height="15" fill="rgb(239,60,40)"/><text x="21.2257%" y="143.50">s..</text></g><g><title>trait_impls_of (548,576 samples, 0.14%)</title><rect x="23.0286%" y="117" width="0.1359%" height="15" fill="rgb(206,27,48)"/><text x="23.2786%" y="127.50"></text></g><g><title>coherence_checking (9,468,365 samples, 2.35%)</title><rect x="20.8329%" y="165" width="2.3458%" height="15" fill="rgb(225,35,8)"/><text x="21.0829%" y="175.50">c..</text></g><g><title>associated_items (522,013 samples, 0.13%)</title><rect x="27.0380%" y="117" width="0.1293%" height="15" fill="rgb(250,213,24)"/><text x="27.2880%" y="127.50"></text></g><g><title>evaluate_obligation (1,538,967 samples, 0.38%)</title><rect x="27.2409%" y="117" width="0.3813%" height="15" fill="rgb(247,123,22)"/><text x="27.4909%" y="127.50"></text></g><g><title>associated_items (648,896 samples, 0.16%)</title><rect x="30.6531%" y="101" width="0.1608%" height="15" fill="rgb(231,138,38)"/><text x="30.9031%" y="111.50"></text></g><g><title>adt_def (411,315 samples, 0.10%)</title><rect x="31.0360%" y="69" width="0.1019%" height="15" fill="rgb(231,145,46)"/><text x="31.2860%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (410,135 samples, 0.10%)</title><rect x="31.0363%" y="53" width="0.1016%" height="15" fill="rgb(251,118,11)"/><text x="31.2863%" y="63.50"></text></g><g><title>adt_sized_constraint (464,805 samples, 0.12%)</title><rect x="31.0341%" y="85" width="0.1152%" height="15" fill="rgb(217,147,25)"/><text x="31.2841%" y="95.50"></text></g><g><title>evaluate_obligation (1,482,471 samples, 0.37%)</title><rect x="30.9105%" y="101" width="0.3673%" height="15" fill="rgb(247,81,37)"/><text x="31.1605%" y="111.50"></text></g><g><title>typeck (14,842,679 samples, 3.68%)</title><rect x="27.8941%" y="117" width="3.6773%" height="15" fill="rgb(209,12,38)"/><text x="28.1441%" y="127.50">type..</text></g><g><title>item_bodies_checking (33,878,689 samples, 8.39%)</title><rect x="23.1876%" y="165" width="8.3936%" height="15" fill="rgb(227,1,9)"/><text x="23.4376%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (33,875,549 samples, 8.39%)</title><rect x="23.1884%" y="149" width="8.3928%" height="15" fill="rgb(248,47,43)"/><text x="23.4384%" y="159.50">typeck_item_..</text></g><g><title>typeck (33,794,368 samples, 8.37%)</title><rect x="23.2085%" y="133" width="8.3727%" height="15" fill="rgb(221,10,30)"/><text x="23.4585%" y="143.50">typeck</text></g><g><title>mir_borrowck (1,158,603 samples, 0.29%)</title><rect x="31.9519%" y="101" width="0.2870%" height="15" fill="rgb(210,229,1)"/><text x="32.2019%" y="111.50"></text></g><g><title>mir_built (2,814,908 samples, 0.70%)</title><rect x="32.2769%" y="53" width="0.6974%" height="15" fill="rgb(222,148,37)"/><text x="32.5269%" y="63.50"></text></g><g><title>typeck (2,651,047 samples, 0.66%)</title><rect x="32.3175%" y="37" width="0.6568%" height="15" fill="rgb(234,67,33)"/><text x="32.5675%" y="47.50"></text></g><g><title>mir_const (3,262,333 samples, 0.81%)</title><rect x="32.2519%" y="85" width="0.8083%" height="15" fill="rgb(247,98,35)"/><text x="32.5019%" y="95.50"></text></g><g><title>unsafety_check_result (3,180,902 samples, 0.79%)</title><rect x="32.2721%" y="69" width="0.7881%" height="15" fill="rgb(247,138,52)"/><text x="32.5221%" y="79.50"></text></g><g><title>mir_promoted (3,320,023 samples, 0.82%)</title><rect x="32.2389%" y="101" width="0.8226%" height="15" fill="rgb(213,79,30)"/><text x="32.4889%" y="111.50"></text></g><g><title>type_of (5,012,491 samples, 1.24%)</title><rect x="31.8425%" y="133" width="1.2419%" height="15" fill="rgb(246,177,23)"/><text x="32.0925%" y="143.50"></text></g><g><title>mir_borrowck (5,002,711 samples, 1.24%)</title><rect x="31.8449%" y="117" width="1.2394%" height="15" fill="rgb(230,62,27)"/><text x="32.0949%" y="127.50"></text></g><g><title>generics_of (414,546 samples, 0.10%)</title><rect x="33.9970%" y="101" width="0.1027%" height="15" fill="rgb(216,154,8)"/><text x="34.2470%" y="111.50"></text></g><g><title>impl_trait_ref (739,587 samples, 0.18%)</title><rect x="34.1824%" y="101" width="0.1832%" height="15" fill="rgb(244,35,45)"/><text x="34.4324%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (606,036 samples, 0.15%)</title><rect x="34.2155%" y="85" width="0.1501%" height="15" fill="rgb(251,115,12)"/><text x="34.4655%" y="95.50"></text></g><g><title>predicates_of (612,766 samples, 0.15%)</title><rect x="34.3741%" y="101" width="0.1518%" height="15" fill="rgb(240,54,50)"/><text x="34.6241%" y="111.50"></text></g><g><title>specializes (1,853,357 samples, 0.46%)</title><rect x="34.5259%" y="101" width="0.4592%" height="15" fill="rgb(233,84,52)"/><text x="34.7759%" y="111.50"></text></g><g><title>param_env (1,067,697 samples, 0.26%)</title><rect x="34.7205%" y="85" width="0.2645%" height="15" fill="rgb(207,117,47)"/><text x="34.9705%" y="95.50"></text></g><g><title>def_span (474,654 samples, 0.12%)</title><rect x="34.8675%" y="69" width="0.1176%" height="15" fill="rgb(249,43,39)"/><text x="35.1175%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (419,304 samples, 0.10%)</title><rect x="34.8812%" y="53" width="0.1039%" height="15" fill="rgb(209,38,44)"/><text x="35.1312%" y="63.50"></text></g><g><title>evaluate_obligation (6,092,951 samples, 1.51%)</title><rect x="33.4935%" y="117" width="1.5096%" height="15" fill="rgb(236,212,23)"/><text x="33.7435%" y="127.50"></text></g><g><title>item_types_checking (14,120,502 samples, 3.50%)</title><rect x="31.5812%" y="165" width="3.4984%" height="15" fill="rgb(242,79,21)"/><text x="31.8312%" y="175.50">ite..</text></g><g><title>check_mod_item_types (14,112,612 samples, 3.50%)</title><rect x="31.5832%" y="149" width="3.4965%" height="15" fill="rgb(211,96,35)"/><text x="31.8332%" y="159.50">che..</text></g><g><title>typeck (8,053,681 samples, 2.00%)</title><rect x="33.0843%" y="133" width="1.9953%" height="15" fill="rgb(253,215,40)"/><text x="33.3343%" y="143.50">t..</text></g><g><title>explicit_predicates_of (507,924 samples, 0.13%)</title><rect x="35.3235%" y="101" width="0.1258%" height="15" fill="rgb(211,81,21)"/><text x="35.5735%" y="111.50"></text></g><g><title>predicates_of (968,590 samples, 0.24%)</title><rect x="35.2911%" y="133" width="0.2400%" height="15" fill="rgb(208,190,38)"/><text x="35.5411%" y="143.50"></text></g><g><title>predicates_defined_on (918,809 samples, 0.23%)</title><rect x="35.3034%" y="117" width="0.2276%" height="15" fill="rgb(235,213,38)"/><text x="35.5534%" y="127.50"></text></g><g><title>type_collecting (1,932,809 samples, 0.48%)</title><rect x="35.0808%" y="165" width="0.4789%" height="15" fill="rgb(237,122,38)"/><text x="35.3308%" y="175.50"></text></g><g><title>collect_mod_item_types (1,920,489 samples, 0.48%)</title><rect x="35.0839%" y="149" width="0.4758%" height="15" fill="rgb(244,218,35)"/><text x="35.3339%" y="159.50"></text></g><g><title>evaluate_obligation (474,624 samples, 0.12%)</title><rect x="35.9912%" y="133" width="0.1176%" height="15" fill="rgb(240,68,47)"/><text x="36.2412%" y="143.50"></text></g><g><title>region_scope_tree (478,675 samples, 0.12%)</title><rect x="36.2394%" y="133" width="0.1186%" height="15" fill="rgb(210,16,53)"/><text x="36.4894%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,006,397 samples, 0.74%)</title><rect x="35.6138%" y="149" width="0.7448%" height="15" fill="rgb(235,124,12)"/><text x="35.8638%" y="159.50"></text></g><g><title>evaluate_obligation (452,346 samples, 0.11%)</title><rect x="36.7317%" y="133" width="0.1121%" height="15" fill="rgb(224,169,11)"/><text x="36.9817%" y="143.50"></text></g><g><title>analysis (106,284,975 samples, 26.33%)</title><rect x="10.6963%" y="197" width="26.3326%" height="15" fill="rgb(250,166,2)"/><text x="10.9463%" y="207.50">analysis</text></g><g><title>type_check_crate (65,459,996 samples, 16.22%)</title><rect x="20.8109%" y="181" width="16.2180%" height="15" fill="rgb(242,216,29)"/><text x="21.0609%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,923,039 samples, 1.47%)</title><rect x="35.5614%" y="165" width="1.4675%" height="15" fill="rgb(230,116,27)"/><text x="35.8114%" y="175.50"></text></g><g><title>check_item_well_formed (2,705,086 samples, 0.67%)</title><rect x="36.3587%" y="149" width="0.6702%" height="15" fill="rgb(228,99,48)"/><text x="36.6087%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (678,142 samples, 0.17%)</title><rect x="44.9551%" y="165" width="0.1680%" height="15" fill="rgb(253,11,6)"/><text x="45.2051%" y="175.50"></text></g><g><title>codegen_fn_attrs (548,344 samples, 0.14%)</title><rect x="45.6228%" y="149" width="0.1359%" height="15" fill="rgb(247,143,39)"/><text x="45.8728%" y="159.50"></text></g><g><title>layout_of (1,089,355 samples, 0.27%)</title><rect x="45.7718%" y="149" width="0.2699%" height="15" fill="rgb(236,97,10)"/><text x="46.0218%" y="159.50"></text></g><g><title>predicates_of (858,555 samples, 0.21%)</title><rect x="46.4428%" y="133" width="0.2127%" height="15" fill="rgb(233,208,19)"/><text x="46.6928%" y="143.50"></text></g><g><title>predicates_defined_on (593,223 samples, 0.15%)</title><rect x="46.5085%" y="117" width="0.1470%" height="15" fill="rgb(216,164,2)"/><text x="46.7585%" y="127.50"></text></g><g><title>param_env (2,482,350 samples, 0.62%)</title><rect x="46.0416%" y="149" width="0.6150%" height="15" fill="rgb(220,129,5)"/><text x="46.2916%" y="159.50"></text></g><g><title>fn_abi_of_instance (6,272,261 samples, 1.55%)</title><rect x="45.1811%" y="165" width="1.5540%" height="15" fill="rgb(242,17,10)"/><text x="45.4311%" y="175.50"></text></g><g><title>layout_of (1,011,318 samples, 0.25%)</title><rect x="46.8118%" y="165" width="0.2506%" height="15" fill="rgb(242,107,0)"/><text x="47.0618%" y="175.50"></text></g><g><title>codegen_module (38,727,596 samples, 9.59%)</title><rect x="37.5483%" y="181" width="9.5949%" height="15" fill="rgb(251,28,31)"/><text x="37.7983%" y="191.50">codegen_module</text></g><g><title>codegen_crate (40,888,360 samples, 10.13%)</title><rect x="37.0309%" y="197" width="10.1303%" height="15" fill="rgb(233,223,10)"/><text x="37.2809%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (141,292,585 samples, 35.01%)</title><rect x="47.1980%" y="181" width="35.0059%" height="15" fill="rgb(215,21,27)"/><text x="47.4480%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (133,539,299 samples, 33.08%)</title><rect x="49.1189%" y="165" width="33.0850%" height="15" fill="rgb(232,23,21)"/><text x="49.3689%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (149,031,840 samples, 36.92%)</title><rect x="47.1612%" y="197" width="36.9233%" height="15" fill="rgb(244,5,23)"/><text x="47.4112%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,590,904 samples, 1.88%)</title><rect x="82.2038%" y="181" width="1.8807%" height="15" fill="rgb(226,81,46)"/><text x="82.4538%" y="191.50">L..</text></g><g><title>metadata_register_crate (1,335,233 samples, 0.33%)</title><rect x="89.1451%" y="149" width="0.3308%" height="15" fill="rgb(247,70,30)"/><text x="89.3951%" y="159.50"></text></g><g><title>metadata_register_crate (479,375 samples, 0.12%)</title><rect x="89.3572%" y="133" width="0.1188%" height="15" fill="rgb(212,68,19)"/><text x="89.6072%" y="143.50"></text></g><g><title>macro_expand_crate (21,868,119 samples, 5.42%)</title><rect x="84.2083%" y="181" width="5.4179%" height="15" fill="rgb(240,187,13)"/><text x="84.4583%" y="191.50">macro_e..</text></g><g><title>expand_crate (21,857,059 samples, 5.42%)</title><rect x="84.2111%" y="165" width="5.4152%" height="15" fill="rgb(223,113,26)"/><text x="84.4611%" y="175.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (606,815 samples, 0.15%)</title><rect x="89.4759%" y="149" width="0.1503%" height="15" fill="rgb(206,192,2)"/><text x="89.7259%" y="159.50"></text></g><g><title>late_resolve_crate (1,794,677 samples, 0.44%)</title><rect x="89.6855%" y="165" width="0.4446%" height="15" fill="rgb(241,108,4)"/><text x="89.9355%" y="175.50"></text></g><g><title>configure_and_expand (24,543,086 samples, 6.08%)</title><rect x="84.0845%" y="197" width="6.0807%" height="15" fill="rgb(247,173,49)"/><text x="84.3345%" y="207.50">configur..</text></g><g><title>resolve_crate (2,111,391 samples, 0.52%)</title><rect x="89.6421%" y="181" width="0.5231%" height="15" fill="rgb(224,114,35)"/><text x="89.8921%" y="191.50"></text></g><g><title>early_lint_checks (464,974 samples, 0.12%)</title><rect x="90.2323%" y="197" width="0.1152%" height="15" fill="rgb(245,159,27)"/><text x="90.4823%" y="207.50"></text></g><g><title>free_global_ctxt (5,131,572 samples, 1.27%)</title><rect x="90.3475%" y="197" width="1.2714%" height="15" fill="rgb(245,172,44)"/><text x="90.5975%" y="207.50"></text></g><g><title>item_attrs (614,724 samples, 0.15%)</title><rect x="92.5871%" y="101" width="0.1523%" height="15" fill="rgb(236,23,11)"/><text x="92.8371%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (592,924 samples, 0.15%)</title><rect x="92.5925%" y="85" width="0.1469%" height="15" fill="rgb(205,117,38)"/><text x="92.8425%" y="95.50"></text></g><g><title>codegen_fn_attrs (975,989 samples, 0.24%)</title><rect x="92.5478%" y="117" width="0.2418%" height="15" fill="rgb(237,72,25)"/><text x="92.7978%" y="127.50"></text></g><g><title>mir_shims (464,516 samples, 0.12%)</title><rect x="92.8547%" y="117" width="0.1151%" height="15" fill="rgb(244,70,9)"/><text x="93.1047%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,023,596 samples, 0.25%)</title><rect x="93.1129%" y="101" width="0.2536%" height="15" fill="rgb(217,125,39)"/><text x="93.3629%" y="111.50"></text></g><g><title>optimized_mir (2,155,887 samples, 0.53%)</title><rect x="92.9698%" y="117" width="0.5341%" height="15" fill="rgb(235,36,10)"/><text x="93.2198%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (554,935 samples, 0.14%)</title><rect x="93.3665%" y="101" width="0.1375%" height="15" fill="rgb(251,123,47)"/><text x="93.6165%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (722,548 samples, 0.18%)</title><rect x="93.6282%" y="101" width="0.1790%" height="15" fill="rgb(221,13,13)"/><text x="93.8782%" y="111.50"></text></g><g><title>specialization_graph_of (1,688,868 samples, 0.42%)</title><rect x="93.9805%" y="101" width="0.4184%" height="15" fill="rgb(238,131,9)"/><text x="94.2305%" y="111.50"></text></g><g><title>impl_trait_ref (879,469 samples, 0.22%)</title><rect x="94.1811%" y="85" width="0.2179%" height="15" fill="rgb(211,50,8)"/><text x="94.4311%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (746,988 samples, 0.19%)</title><rect x="94.2139%" y="69" width="0.1851%" height="15" fill="rgb(245,182,24)"/><text x="94.4639%" y="79.50"></text></g><g><title>resolve_instance (3,828,017 samples, 0.95%)</title><rect x="93.5040%" y="117" width="0.9484%" height="15" fill="rgb(242,14,37)"/><text x="93.7540%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (432,764 samples, 0.11%)</title><rect x="94.4524%" y="117" width="0.1072%" height="15" fill="rgb(246,228,12)"/><text x="94.7024%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (10,374,904 samples, 2.57%)</title><rect x="92.1875%" y="133" width="2.5704%" height="15" fill="rgb(213,55,15)"/><text x="92.4375%" y="143.50">mo..</text></g><g><title>vtable_entries (612,245 samples, 0.15%)</title><rect x="94.6062%" y="117" width="0.1517%" height="15" fill="rgb(209,9,3)"/><text x="94.8562%" y="127.50"></text></g><g><title>monomorphization_collector (10,415,604 samples, 2.58%)</title><rect x="92.1867%" y="149" width="2.5805%" height="15" fill="rgb(230,59,30)"/><text x="92.4367%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (964,010 samples, 0.24%)</title><rect x="94.7697%" y="133" width="0.2388%" height="15" fill="rgb(209,121,21)"/><text x="95.0197%" y="143.50"></text></g><g><title>symbol_name (862,730 samples, 0.21%)</title><rect x="94.7948%" y="117" width="0.2137%" height="15" fill="rgb(220,109,13)"/><text x="95.0448%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (11,930,689 samples, 2.96%)</title><rect x="92.1802%" y="165" width="2.9559%" height="15" fill="rgb(232,18,1)"/><text x="92.4302%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,488,725 samples, 0.37%)</title><rect x="94.7672%" y="149" width="0.3688%" height="15" fill="rgb(215,41,42)"/><text x="95.0172%" y="159.50"></text></g><g><title>cgu_partitioning (514,545 samples, 0.13%)</title><rect x="95.0086%" y="133" width="0.1275%" height="15" fill="rgb(224,123,36)"/><text x="95.2586%" y="143.50"></text></g><g><title>exported_symbols (12,154,172 samples, 3.01%)</title><rect x="92.1657%" y="181" width="3.0113%" height="15" fill="rgb(240,125,3)"/><text x="92.4157%" y="191.50">exp..</text></g><g><title>layout_of (1,019,323 samples, 0.25%)</title><rect x="96.3144%" y="165" width="0.2525%" height="15" fill="rgb(205,98,50)"/><text x="96.5644%" y="175.50"></text></g><g><title>needs_drop_raw (473,325 samples, 0.12%)</title><rect x="97.8772%" y="149" width="0.1173%" height="15" fill="rgb(205,185,37)"/><text x="98.1272%" y="159.50"></text></g><g><title>is_copy_raw (406,512 samples, 0.10%)</title><rect x="97.8937%" y="133" width="0.1007%" height="15" fill="rgb(238,207,15)"/><text x="98.1437%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,806,472 samples, 1.44%)</title><rect x="96.5670%" y="165" width="1.4386%" height="15" fill="rgb(213,199,42)"/><text x="96.8170%" y="175.50"></text></g><g><title>optimized_mir (11,396,674 samples, 2.82%)</title><rect x="95.2069%" y="181" width="2.8236%" height="15" fill="rgb(235,201,11)"/><text x="95.4569%" y="191.50">op..</text></g><g><title>generate_crate_metadata (26,007,230 samples, 6.44%)</title><rect x="91.6189%" y="197" width="6.4434%" height="15" fill="rgb(207,46,11)"/><text x="91.8689%" y="207.50">generate..</text></g><g><title>hir_lowering (3,355,534 samples, 0.83%)</title><rect x="98.0623%" y="197" width="0.8313%" height="15" fill="rgb(241,35,35)"/><text x="98.3123%" y="207.50"></text></g><g><title>link_crate (1,997,070 samples, 0.49%)</title><rect x="98.8990%" y="181" width="0.4948%" height="15" fill="rgb(243,32,47)"/><text x="99.1490%" y="191.50"></text></g><g><title>link_binary (1,953,590 samples, 0.48%)</title><rect x="98.9097%" y="165" width="0.4840%" height="15" fill="rgb(247,202,23)"/><text x="99.1597%" y="175.50"></text></g><g><title>link_rlib (1,353,073 samples, 0.34%)</title><rect x="99.0585%" y="149" width="0.3352%" height="15" fill="rgb(219,102,11)"/><text x="99.3085%" y="159.50"></text></g><g><title>link (2,024,810 samples, 0.50%)</title><rect x="98.8936%" y="197" width="0.5017%" height="15" fill="rgb(243,110,44)"/><text x="99.1436%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,330,373 samples, 0.33%)</title><rect x="99.5537%" y="197" width="0.3296%" height="15" fill="rgb(222,74,54)"/><text x="99.8037%" y="207.50"></text></g><g><title>all (403,625,451 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (403,625,451 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>