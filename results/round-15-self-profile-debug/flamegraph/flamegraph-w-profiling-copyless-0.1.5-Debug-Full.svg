<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,262,252 samples, 4.75%)</title><rect x="1.0584%" y="229" width="4.7542%" height="15" fill="rgb(227,0,7)"/><text x="1.3084%" y="239.50">LLVM_p..</text></g><g><title>param_env (236,273 samples, 0.34%)</title><rect x="10.9943%" y="149" width="0.3443%" height="15" fill="rgb(217,0,24)"/><text x="11.2443%" y="159.50"></text></g><g><title>item_attrs (177,172 samples, 0.26%)</title><rect x="11.7403%" y="117" width="0.2582%" height="15" fill="rgb(221,193,54)"/><text x="11.9903%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (172,132 samples, 0.25%)</title><rect x="11.7477%" y="101" width="0.2509%" height="15" fill="rgb(248,212,6)"/><text x="11.9977%" y="111.50"></text></g><g><title>codegen_fn_attrs (265,273 samples, 0.39%)</title><rect x="11.6231%" y="133" width="0.3866%" height="15" fill="rgb(208,68,35)"/><text x="11.8731%" y="143.50"></text></g><g><title>is_copy_raw (160,072 samples, 0.23%)</title><rect x="13.0880%" y="117" width="0.2333%" height="15" fill="rgb(232,128,0)"/><text x="13.3380%" y="127.50"></text></g><g><title>evaluate_obligation (141,141 samples, 0.21%)</title><rect x="13.1156%" y="101" width="0.2057%" height="15" fill="rgb(207,160,47)"/><text x="13.3656%" y="111.50"></text></g><g><title>predicates_of (72,531 samples, 0.11%)</title><rect x="13.7924%" y="69" width="0.1057%" height="15" fill="rgb(228,23,34)"/><text x="14.0424%" y="79.50"></text></g><g><title>needs_drop_raw (400,294 samples, 0.58%)</title><rect x="13.3213%" y="117" width="0.5834%" height="15" fill="rgb(218,30,26)"/><text x="13.5713%" y="127.50"></text></g><g><title>is_copy_raw (341,603 samples, 0.50%)</title><rect x="13.4069%" y="101" width="0.4978%" height="15" fill="rgb(220,122,19)"/><text x="13.6569%" y="111.50"></text></g><g><title>evaluate_obligation (289,972 samples, 0.42%)</title><rect x="13.4821%" y="85" width="0.4226%" height="15" fill="rgb(250,228,42)"/><text x="13.7321%" y="95.50"></text></g><g><title>specialization_graph_of (80,331 samples, 0.12%)</title><rect x="14.0292%" y="101" width="0.1171%" height="15" fill="rgb(240,193,28)"/><text x="14.2792%" y="111.50"></text></g><g><title>resolve_instance (224,561 samples, 0.33%)</title><rect x="13.9047%" y="117" width="0.3273%" height="15" fill="rgb(216,20,37)"/><text x="14.1547%" y="127.50"></text></g><g><title>thir_body (273,081 samples, 0.40%)</title><rect x="14.2465%" y="117" width="0.3980%" height="15" fill="rgb(206,188,39)"/><text x="14.4965%" y="127.50"></text></g><g><title>mir_const (2,863,199 samples, 4.17%)</title><rect x="10.4796%" y="165" width="4.1726%" height="15" fill="rgb(217,207,13)"/><text x="10.7296%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (2,273,741 samples, 3.31%)</title><rect x="11.3387%" y="149" width="3.3136%" height="15" fill="rgb(231,73,38)"/><text x="11.5887%" y="159.50">uns..</text></g><g><title>mir_built (1,813,258 samples, 2.64%)</title><rect x="12.0097%" y="133" width="2.6425%" height="15" fill="rgb(225,20,46)"/><text x="12.2597%" y="143.50">mi..</text></g><g><title>mir_promoted (3,144,771 samples, 4.58%)</title><rect x="10.0928%" y="181" width="4.5830%" height="15" fill="rgb(210,31,41)"/><text x="10.3428%" y="191.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (157,840 samples, 0.23%)</title><rect x="14.6757%" y="181" width="0.2300%" height="15" fill="rgb(221,200,47)"/><text x="14.9257%" y="191.50"></text></g><g><title>MIR_borrow_checking (6,514,545 samples, 9.49%)</title><rect x="6.1310%" y="213" width="9.4938%" height="15" fill="rgb(226,26,5)"/><text x="6.3810%" y="223.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (6,489,365 samples, 9.46%)</title><rect x="6.1677%" y="197" width="9.4571%" height="15" fill="rgb(249,33,26)"/><text x="6.4177%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (431,153 samples, 0.63%)</title><rect x="14.9965%" y="181" width="0.6283%" height="15" fill="rgb(235,183,28)"/><text x="15.2465%" y="191.50"></text></g><g><title>hir_module_items (160,123 samples, 0.23%)</title><rect x="15.6337%" y="213" width="0.2334%" height="15" fill="rgb(221,5,38)"/><text x="15.8837%" y="223.50"></text></g><g><title>get_lang_items (79,080 samples, 0.12%)</title><rect x="16.2240%" y="165" width="0.1152%" height="15" fill="rgb(247,18,42)"/><text x="16.4740%" y="175.50"></text></g><g><title>should_inherit_track_caller (110,540 samples, 0.16%)</title><rect x="16.3393%" y="165" width="0.1611%" height="15" fill="rgb(241,131,45)"/><text x="16.5893%" y="175.50"></text></g><g><title>codegen_fn_attrs (292,872 samples, 0.43%)</title><rect x="16.1155%" y="181" width="0.4268%" height="15" fill="rgb(249,31,29)"/><text x="16.3655%" y="191.50"></text></g><g><title>check_mod_attrs (420,854 samples, 0.61%)</title><rect x="15.9293%" y="197" width="0.6133%" height="15" fill="rgb(225,111,53)"/><text x="16.1793%" y="207.50"></text></g><g><title>check_mod_const_bodies (72,292 samples, 0.11%)</title><rect x="16.5426%" y="197" width="0.1054%" height="15" fill="rgb(238,160,17)"/><text x="16.7926%" y="207.50"></text></g><g><title>lookup_deprecation_entry (160,502 samples, 0.23%)</title><rect x="16.9553%" y="181" width="0.2339%" height="15" fill="rgb(214,148,48)"/><text x="17.2053%" y="191.50"></text></g><g><title>stability_index (81,991 samples, 0.12%)</title><rect x="17.0697%" y="165" width="0.1195%" height="15" fill="rgb(232,36,49)"/><text x="17.3197%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (404,703 samples, 0.59%)</title><rect x="16.7275%" y="197" width="0.5898%" height="15" fill="rgb(209,103,24)"/><text x="16.9775%" y="207.50"></text></g><g><title>misc_checking_1 (1,057,981 samples, 1.54%)</title><rect x="15.8676%" y="213" width="1.5418%" height="15" fill="rgb(229,88,8)"/><text x="16.1176%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (235,682 samples, 0.34%)</title><rect x="17.4136%" y="197" width="0.3435%" height="15" fill="rgb(213,181,19)"/><text x="17.6636%" y="207.50"></text></g><g><title>check_mod_liveness (177,642 samples, 0.26%)</title><rect x="17.4982%" y="181" width="0.2589%" height="15" fill="rgb(254,191,54)"/><text x="17.7482%" y="191.50"></text></g><g><title>misc_checking_2 (502,445 samples, 0.73%)</title><rect x="17.4094%" y="213" width="0.7322%" height="15" fill="rgb(241,83,37)"/><text x="17.6594%" y="223.50"></text></g><g><title>match_checking (263,903 samples, 0.38%)</title><rect x="17.7571%" y="197" width="0.3846%" height="15" fill="rgb(233,36,39)"/><text x="18.0071%" y="207.50"></text></g><g><title>check_match (250,563 samples, 0.37%)</title><rect x="17.7765%" y="181" width="0.3652%" height="15" fill="rgb(226,3,54)"/><text x="18.0265%" y="191.50"></text></g><g><title>death_checking (109,651 samples, 0.16%)</title><rect x="18.2417%" y="197" width="0.1598%" height="15" fill="rgb(245,192,40)"/><text x="18.4917%" y="207.50"></text></g><g><title>param_env (103,521 samples, 0.15%)</title><rect x="19.0579%" y="165" width="0.1509%" height="15" fill="rgb(238,167,29)"/><text x="19.3079%" y="175.50"></text></g><g><title>crate_lints (3,340,223 samples, 4.87%)</title><rect x="18.4039%" y="181" width="4.8678%" height="15" fill="rgb(232,182,51)"/><text x="18.6539%" y="191.50">crate_..</text></g><g><title>type_of (2,785,535 samples, 4.06%)</title><rect x="19.2123%" y="165" width="4.0594%" height="15" fill="rgb(231,60,39)"/><text x="19.4623%" y="175.50">type..</text></g><g><title>metadata_decode_entry_type_of (2,540,343 samples, 3.70%)</title><rect x="19.5696%" y="149" width="3.7021%" height="15" fill="rgb(208,69,12)"/><text x="19.8196%" y="159.50">meta..</text></g><g><title>adt_sized_constraint (73,611 samples, 0.11%)</title><rect x="23.5140%" y="101" width="0.1073%" height="15" fill="rgb(235,93,37)"/><text x="23.7640%" y="111.50"></text></g><g><title>adt_def (69,821 samples, 0.10%)</title><rect x="23.5195%" y="85" width="0.1018%" height="15" fill="rgb(213,116,39)"/><text x="23.7695%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (68,791 samples, 0.10%)</title><rect x="23.5210%" y="69" width="0.1003%" height="15" fill="rgb(222,207,29)"/><text x="23.7710%" y="79.50"></text></g><g><title>layout_of (117,041 samples, 0.17%)</title><rect x="23.4509%" y="133" width="0.1706%" height="15" fill="rgb(206,96,30)"/><text x="23.7009%" y="143.50"></text></g><g><title>layout_of (79,091 samples, 0.12%)</title><rect x="23.5062%" y="117" width="0.1153%" height="15" fill="rgb(218,138,4)"/><text x="23.7562%" y="127.50"></text></g><g><title>lint_checking (3,582,786 samples, 5.22%)</title><rect x="18.4015%" y="197" width="5.2213%" height="15" fill="rgb(250,191,14)"/><text x="18.6515%" y="207.50">lint_c..</text></g><g><title>module_lints (240,923 samples, 0.35%)</title><rect x="23.2717%" y="181" width="0.3511%" height="15" fill="rgb(239,60,40)"/><text x="23.5217%" y="191.50"></text></g><g><title>lint_mod (237,513 samples, 0.35%)</title><rect x="23.2767%" y="165" width="0.3461%" height="15" fill="rgb(206,27,48)"/><text x="23.5267%" y="175.50"></text></g><g><title>layout_of (139,721 samples, 0.20%)</title><rect x="23.4192%" y="149" width="0.2036%" height="15" fill="rgb(225,35,8)"/><text x="23.6692%" y="159.50"></text></g><g><title>privacy_access_levels (70,371 samples, 0.10%)</title><rect x="23.6228%" y="197" width="0.1026%" height="15" fill="rgb(250,213,24)"/><text x="23.8728%" y="207.50"></text></g><g><title>privacy_checking_modules (133,291 samples, 0.19%)</title><rect x="23.7254%" y="197" width="0.1942%" height="15" fill="rgb(247,123,22)"/><text x="23.9754%" y="207.50"></text></g><g><title>check_mod_privacy (131,101 samples, 0.19%)</title><rect x="23.7286%" y="181" width="0.1911%" height="15" fill="rgb(231,138,38)"/><text x="23.9786%" y="191.50"></text></g><g><title>misc_checking_3 (3,972,990 samples, 5.79%)</title><rect x="18.1416%" y="213" width="5.7899%" height="15" fill="rgb(231,145,46)"/><text x="18.3916%" y="223.50">misc_ch..</text></g><g><title>impl_parent (179,244 samples, 0.26%)</title><rect x="24.5012%" y="149" width="0.2612%" height="15" fill="rgb(251,118,11)"/><text x="24.7512%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (119,592 samples, 0.17%)</title><rect x="24.5881%" y="133" width="0.1743%" height="15" fill="rgb(217,147,25)"/><text x="24.8381%" y="143.50"></text></g><g><title>impl_trait_ref (634,707 samples, 0.92%)</title><rect x="24.7624%" y="149" width="0.9250%" height="15" fill="rgb(247,81,37)"/><text x="25.0124%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (583,807 samples, 0.85%)</title><rect x="24.8366%" y="133" width="0.8508%" height="15" fill="rgb(209,12,38)"/><text x="25.0866%" y="143.50"></text></g><g><title>coherent_trait (1,219,293 samples, 1.78%)</title><rect x="24.0447%" y="181" width="1.7769%" height="15" fill="rgb(227,1,9)"/><text x="24.2947%" y="191.50">c..</text></g><g><title>specialization_graph_of (1,207,173 samples, 1.76%)</title><rect x="24.0624%" y="165" width="1.7592%" height="15" fill="rgb(248,47,43)"/><text x="24.3124%" y="175.50"></text></g><g><title>trait_impls_of (92,131 samples, 0.13%)</title><rect x="25.6874%" y="149" width="0.1343%" height="15" fill="rgb(221,10,30)"/><text x="25.9374%" y="159.50"></text></g><g><title>coherence_checking (1,304,353 samples, 1.90%)</title><rect x="24.0157%" y="197" width="1.9009%" height="15" fill="rgb(210,229,1)"/><text x="24.2657%" y="207.50">c..</text></g><g><title>adt_sized_constraint (110,102 samples, 0.16%)</title><rect x="35.7079%" y="149" width="0.1605%" height="15" fill="rgb(222,148,37)"/><text x="35.9579%" y="159.50"></text></g><g><title>associated_item (575,836 samples, 0.84%)</title><rect x="36.2345%" y="133" width="0.8392%" height="15" fill="rgb(234,67,33)"/><text x="36.4845%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (418,624 samples, 0.61%)</title><rect x="36.4636%" y="117" width="0.6101%" height="15" fill="rgb(247,98,35)"/><text x="36.7136%" y="127.50"></text></g><g><title>associated_items (867,147 samples, 1.26%)</title><rect x="35.8755%" y="149" width="1.2637%" height="15" fill="rgb(247,138,52)"/><text x="36.1255%" y="159.50"></text></g><g><title>adt_def (84,311 samples, 0.12%)</title><rect x="37.5774%" y="85" width="0.1229%" height="15" fill="rgb(213,79,30)"/><text x="37.8274%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (83,741 samples, 0.12%)</title><rect x="37.5783%" y="69" width="0.1220%" height="15" fill="rgb(246,177,23)"/><text x="37.8283%" y="79.50"></text></g><g><title>item_attrs (79,101 samples, 0.12%)</title><rect x="37.5850%" y="53" width="0.1153%" height="15" fill="rgb(230,62,27)"/><text x="37.8350%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (78,441 samples, 0.11%)</title><rect x="37.5860%" y="37" width="0.1143%" height="15" fill="rgb(216,154,8)"/><text x="37.8360%" y="47.50"></text></g><g><title>adt_dtorck_constraint (94,161 samples, 0.14%)</title><rect x="37.5701%" y="101" width="0.1372%" height="15" fill="rgb(244,35,45)"/><text x="37.8201%" y="111.50"></text></g><g><title>adt_dtorck_constraint (164,441 samples, 0.24%)</title><rect x="37.4761%" y="117" width="0.2396%" height="15" fill="rgb(251,115,12)"/><text x="37.7261%" y="127.50"></text></g><g><title>dropck_outlives (387,825 samples, 0.57%)</title><rect x="37.2250%" y="149" width="0.5652%" height="15" fill="rgb(240,54,50)"/><text x="37.4750%" y="159.50"></text></g><g><title>adt_dtorck_constraint (284,012 samples, 0.41%)</title><rect x="37.3763%" y="133" width="0.4139%" height="15" fill="rgb(233,84,52)"/><text x="37.6263%" y="143.50"></text></g><g><title>adt_def (115,612 samples, 0.17%)</title><rect x="38.7038%" y="101" width="0.1685%" height="15" fill="rgb(207,117,47)"/><text x="38.9538%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (115,012 samples, 0.17%)</title><rect x="38.7046%" y="85" width="0.1676%" height="15" fill="rgb(249,43,39)"/><text x="38.9546%" y="95.50"></text></g><g><title>adt_sized_constraint (119,792 samples, 0.17%)</title><rect x="38.7002%" y="117" width="0.1746%" height="15" fill="rgb(209,38,44)"/><text x="38.9502%" y="127.50"></text></g><g><title>adt_sized_constraint (191,852 samples, 0.28%)</title><rect x="38.6119%" y="133" width="0.2796%" height="15" fill="rgb(236,212,23)"/><text x="38.8619%" y="143.50"></text></g><g><title>predicates_of (92,051 samples, 0.13%)</title><rect x="39.0823%" y="133" width="0.1341%" height="15" fill="rgb(242,79,21)"/><text x="39.3323%" y="143.50"></text></g><g><title>specializes (240,312 samples, 0.35%)</title><rect x="39.2165%" y="133" width="0.3502%" height="15" fill="rgb(211,96,35)"/><text x="39.4665%" y="143.50"></text></g><g><title>param_env (218,862 samples, 0.32%)</title><rect x="39.2478%" y="117" width="0.3190%" height="15" fill="rgb(253,215,40)"/><text x="39.4978%" y="127.50"></text></g><g><title>def_span (192,732 samples, 0.28%)</title><rect x="39.2858%" y="101" width="0.2809%" height="15" fill="rgb(211,81,21)"/><text x="39.5358%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (191,142 samples, 0.28%)</title><rect x="39.2881%" y="85" width="0.2786%" height="15" fill="rgb(208,190,38)"/><text x="39.5381%" y="95.50"></text></g><g><title>evaluate_obligation (2,341,063 samples, 3.41%)</title><rect x="37.7902%" y="149" width="3.4117%" height="15" fill="rgb(235,213,38)"/><text x="38.0402%" y="159.50">eva..</text></g><g><title>trait_impls_of (1,113,442 samples, 1.62%)</title><rect x="39.5793%" y="133" width="1.6226%" height="15" fill="rgb(237,122,38)"/><text x="39.8293%" y="143.50"></text></g><g><title>implementations_of_trait (339,195 samples, 0.49%)</title><rect x="40.7076%" y="117" width="0.4943%" height="15" fill="rgb(244,218,35)"/><text x="40.9576%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (263,083 samples, 0.38%)</title><rect x="40.8185%" y="101" width="0.3834%" height="15" fill="rgb(240,68,47)"/><text x="41.0685%" y="111.50"></text></g><g><title>fn_sig (135,655 samples, 0.20%)</title><rect x="41.2420%" y="149" width="0.1977%" height="15" fill="rgb(210,16,53)"/><text x="41.4920%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (117,035 samples, 0.17%)</title><rect x="41.2692%" y="133" width="0.1706%" height="15" fill="rgb(235,124,12)"/><text x="41.5192%" y="143.50"></text></g><g><title>generics_of (138,091 samples, 0.20%)</title><rect x="41.4397%" y="149" width="0.2012%" height="15" fill="rgb(224,169,11)"/><text x="41.6897%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (92,061 samples, 0.13%)</title><rect x="41.5068%" y="133" width="0.1342%" height="15" fill="rgb(250,166,2)"/><text x="41.7568%" y="143.50"></text></g><g><title>impl_item_implementor_ids (87,841 samples, 0.13%)</title><rect x="41.6410%" y="149" width="0.1280%" height="15" fill="rgb(242,216,29)"/><text x="41.8910%" y="159.50"></text></g><g><title>associated_items (79,571 samples, 0.12%)</title><rect x="41.6530%" y="133" width="0.1160%" height="15" fill="rgb(230,116,27)"/><text x="41.9030%" y="143.50"></text></g><g><title>impl_trait_ref (75,790 samples, 0.11%)</title><rect x="41.7828%" y="149" width="0.1105%" height="15" fill="rgb(228,99,48)"/><text x="42.0328%" y="159.50"></text></g><g><title>item_attrs (247,722 samples, 0.36%)</title><rect x="41.9471%" y="149" width="0.3610%" height="15" fill="rgb(253,11,6)"/><text x="42.1971%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (240,692 samples, 0.35%)</title><rect x="41.9573%" y="133" width="0.3508%" height="15" fill="rgb(247,143,39)"/><text x="42.2073%" y="143.50"></text></g><g><title>evaluate_obligation (259,782 samples, 0.38%)</title><rect x="42.6999%" y="133" width="0.3786%" height="15" fill="rgb(236,97,10)"/><text x="42.9499%" y="143.50"></text></g><g><title>method_autoderef_steps (496,895 samples, 0.72%)</title><rect x="42.3909%" y="149" width="0.7241%" height="15" fill="rgb(233,208,19)"/><text x="42.6409%" y="159.50"></text></g><g><title>explicit_predicates_of (133,843 samples, 0.20%)</title><rect x="43.4949%" y="117" width="0.1951%" height="15" fill="rgb(216,164,2)"/><text x="43.7449%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (103,083 samples, 0.15%)</title><rect x="43.5397%" y="101" width="0.1502%" height="15" fill="rgb(220,129,5)"/><text x="43.7897%" y="111.50"></text></g><g><title>predicates_of (421,774 samples, 0.61%)</title><rect x="43.1649%" y="149" width="0.6147%" height="15" fill="rgb(242,17,10)"/><text x="43.4149%" y="159.50"></text></g><g><title>predicates_defined_on (284,903 samples, 0.42%)</title><rect x="43.3644%" y="133" width="0.4152%" height="15" fill="rgb(242,107,0)"/><text x="43.6144%" y="143.50"></text></g><g><title>type_of (114,080 samples, 0.17%)</title><rect x="43.8667%" y="149" width="0.1663%" height="15" fill="rgb(251,28,31)"/><text x="44.1167%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (98,400 samples, 0.14%)</title><rect x="43.8895%" y="133" width="0.1434%" height="15" fill="rgb(233,223,10)"/><text x="44.1395%" y="143.50"></text></g><g><title>associated_item (77,521 samples, 0.11%)</title><rect x="46.3169%" y="117" width="0.1130%" height="15" fill="rgb(215,21,27)"/><text x="46.5669%" y="127.50"></text></g><g><title>associated_items (134,091 samples, 0.20%)</title><rect x="46.2443%" y="133" width="0.1954%" height="15" fill="rgb(232,23,21)"/><text x="46.4943%" y="143.50"></text></g><g><title>evaluate_obligation (88,402 samples, 0.13%)</title><rect x="46.5174%" y="133" width="0.1288%" height="15" fill="rgb(244,5,23)"/><text x="46.7674%" y="143.50"></text></g><g><title>is_copy_raw (442,214 samples, 0.64%)</title><rect x="46.7389%" y="133" width="0.6445%" height="15" fill="rgb(226,81,46)"/><text x="46.9889%" y="143.50"></text></g><g><title>evaluate_obligation (426,074 samples, 0.62%)</title><rect x="46.7624%" y="117" width="0.6209%" height="15" fill="rgb(247,70,30)"/><text x="47.0124%" y="127.50"></text></g><g><title>trait_impls_of (321,363 samples, 0.47%)</title><rect x="46.9150%" y="101" width="0.4683%" height="15" fill="rgb(212,68,19)"/><text x="47.1650%" y="111.50"></text></g><g><title>implementations_of_trait (69,481 samples, 0.10%)</title><rect x="47.2821%" y="85" width="0.1013%" height="15" fill="rgb(240,187,13)"/><text x="47.5321%" y="95.50"></text></g><g><title>item_attrs (99,062 samples, 0.14%)</title><rect x="47.3833%" y="133" width="0.1444%" height="15" fill="rgb(223,113,26)"/><text x="47.6333%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,832 samples, 0.14%)</title><rect x="47.3880%" y="117" width="0.1397%" height="15" fill="rgb(206,192,2)"/><text x="47.6380%" y="127.50"></text></g><g><title>predicates_of (110,930 samples, 0.16%)</title><rect x="47.5884%" y="133" width="0.1617%" height="15" fill="rgb(241,108,4)"/><text x="47.8384%" y="143.50"></text></g><g><title>predicates_defined_on (73,610 samples, 0.11%)</title><rect x="47.6428%" y="117" width="0.1073%" height="15" fill="rgb(247,173,49)"/><text x="47.8928%" y="127.50"></text></g><g><title>typeck (2,583,806 samples, 3.77%)</title><rect x="44.0329%" y="149" width="3.7655%" height="15" fill="rgb(224,114,35)"/><text x="44.2829%" y="159.50">type..</text></g><g><title>item_bodies_checking (15,009,681 samples, 21.87%)</title><rect x="25.9663%" y="197" width="21.8740%" height="15" fill="rgb(245,159,27)"/><text x="26.2163%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,005,721 samples, 21.87%)</title><rect x="25.9721%" y="181" width="21.8682%" height="15" fill="rgb(245,172,44)"/><text x="26.2221%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (14,978,481 samples, 21.83%)</title><rect x="26.0118%" y="165" width="21.8286%" height="15" fill="rgb(236,23,11)"/><text x="26.2618%" y="175.50">typeck</text></g><g><title>item_types_checking (371,283 samples, 0.54%)</title><rect x="47.8404%" y="197" width="0.5411%" height="15" fill="rgb(205,117,38)"/><text x="48.0904%" y="207.50"></text></g><g><title>check_mod_item_types (364,233 samples, 0.53%)</title><rect x="47.8506%" y="181" width="0.5308%" height="15" fill="rgb(237,72,25)"/><text x="48.1006%" y="191.50"></text></g><g><title>fn_sig (167,031 samples, 0.24%)</title><rect x="48.6987%" y="165" width="0.2434%" height="15" fill="rgb(244,70,9)"/><text x="48.9487%" y="175.50"></text></g><g><title>late_bound_vars_map (70,850 samples, 0.10%)</title><rect x="48.8388%" y="149" width="0.1033%" height="15" fill="rgb(217,125,39)"/><text x="49.0888%" y="159.50"></text></g><g><title>is_late_bound_map (132,863 samples, 0.19%)</title><rect x="49.0821%" y="149" width="0.1936%" height="15" fill="rgb(235,36,10)"/><text x="49.3321%" y="159.50"></text></g><g><title>resolve_lifetimes (127,182 samples, 0.19%)</title><rect x="49.0904%" y="133" width="0.1853%" height="15" fill="rgb(251,123,47)"/><text x="49.3404%" y="143.50"></text></g><g><title>lint_levels (70,980 samples, 0.10%)</title><rect x="49.1723%" y="117" width="0.1034%" height="15" fill="rgb(221,13,13)"/><text x="49.4223%" y="127.50"></text></g><g><title>named_region_map (101,462 samples, 0.15%)</title><rect x="49.2758%" y="149" width="0.1479%" height="15" fill="rgb(238,131,9)"/><text x="49.5258%" y="159.50"></text></g><g><title>resolve_lifetimes (94,522 samples, 0.14%)</title><rect x="49.2859%" y="133" width="0.1377%" height="15" fill="rgb(211,50,8)"/><text x="49.5359%" y="143.50"></text></g><g><title>generics_of (353,256 samples, 0.51%)</title><rect x="48.9421%" y="165" width="0.5148%" height="15" fill="rgb(245,182,24)"/><text x="49.1921%" y="175.50"></text></g><g><title>explicit_predicates_of (145,751 samples, 0.21%)</title><rect x="49.6233%" y="133" width="0.2124%" height="15" fill="rgb(242,14,37)"/><text x="49.8733%" y="143.50"></text></g><g><title>named_region_map (72,231 samples, 0.11%)</title><rect x="50.2752%" y="85" width="0.1053%" height="15" fill="rgb(246,228,12)"/><text x="50.5252%" y="95.50"></text></g><g><title>predicates_of (655,947 samples, 0.96%)</title><rect x="49.4916%" y="165" width="0.9559%" height="15" fill="rgb(213,55,15)"/><text x="49.7416%" y="175.50"></text></g><g><title>predicates_defined_on (622,626 samples, 0.91%)</title><rect x="49.5401%" y="149" width="0.9074%" height="15" fill="rgb(209,9,3)"/><text x="49.7901%" y="159.50"></text></g><g><title>inferred_outlives_of (419,814 samples, 0.61%)</title><rect x="49.8357%" y="133" width="0.6118%" height="15" fill="rgb(230,59,30)"/><text x="50.0857%" y="143.50"></text></g><g><title>inferred_outlives_crate (398,414 samples, 0.58%)</title><rect x="49.8669%" y="117" width="0.5806%" height="15" fill="rgb(209,121,21)"/><text x="50.1169%" y="127.50"></text></g><g><title>type_of (194,002 samples, 0.28%)</title><rect x="50.1648%" y="101" width="0.2827%" height="15" fill="rgb(220,109,13)"/><text x="50.4148%" y="111.50"></text></g><g><title>type_collecting (1,571,045 samples, 2.29%)</title><rect x="48.3858%" y="197" width="2.2895%" height="15" fill="rgb(232,18,1)"/><text x="48.6358%" y="207.50">t..</text></g><g><title>collect_mod_item_types (1,544,505 samples, 2.25%)</title><rect x="48.4245%" y="181" width="2.2508%" height="15" fill="rgb(215,41,42)"/><text x="48.6745%" y="191.50">c..</text></g><g><title>type_of (116,340 samples, 0.17%)</title><rect x="50.5058%" y="165" width="0.1695%" height="15" fill="rgb(224,123,36)"/><text x="50.7558%" y="175.50"></text></g><g><title>evaluate_obligation (334,023 samples, 0.49%)</title><rect x="51.7168%" y="165" width="0.4868%" height="15" fill="rgb(240,125,3)"/><text x="51.9668%" y="175.50"></text></g><g><title>implied_outlives_bounds (138,741 samples, 0.20%)</title><rect x="52.2036%" y="165" width="0.2022%" height="15" fill="rgb(205,98,50)"/><text x="52.4536%" y="175.50"></text></g><g><title>param_env (96,231 samples, 0.14%)</title><rect x="52.4058%" y="165" width="0.1402%" height="15" fill="rgb(205,185,37)"/><text x="52.6558%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,331,644 samples, 1.94%)</title><rect x="50.8257%" y="181" width="1.9406%" height="15" fill="rgb(238,207,15)"/><text x="51.0757%" y="191.50">c..</text></g><g><title>region_scope_tree (139,353 samples, 0.20%)</title><rect x="52.5633%" y="165" width="0.2031%" height="15" fill="rgb(213,199,42)"/><text x="52.8133%" y="175.50"></text></g><g><title>implied_outlives_bounds (135,501 samples, 0.20%)</title><rect x="54.2156%" y="165" width="0.1975%" height="15" fill="rgb(235,201,11)"/><text x="54.4656%" y="175.50"></text></g><g><title>param_env (360,114 samples, 0.52%)</title><rect x="54.4131%" y="165" width="0.5248%" height="15" fill="rgb(207,46,11)"/><text x="54.6631%" y="175.50"></text></g><g><title>check_item_well_formed (1,623,616 samples, 2.37%)</title><rect x="52.7663%" y="181" width="2.3661%" height="15" fill="rgb(241,35,35)"/><text x="53.0163%" y="191.50">ch..</text></g><g><title>variances_of (96,171 samples, 0.14%)</title><rect x="54.9923%" y="165" width="0.1402%" height="15" fill="rgb(243,32,47)"/><text x="55.2423%" y="175.50"></text></g><g><title>crate_variances (89,501 samples, 0.13%)</title><rect x="55.0020%" y="149" width="0.1304%" height="15" fill="rgb(247,202,23)"/><text x="55.2520%" y="159.50"></text></g><g><title>analysis (34,237,554 samples, 49.90%)</title><rect x="5.8126%" y="229" width="49.8953%" height="15" fill="rgb(219,102,11)"/><text x="6.0626%" y="239.50">analysis</text></g><g><title>type_check_crate (21,804,499 samples, 31.78%)</title><rect x="23.9316%" y="213" width="31.7763%" height="15" fill="rgb(243,110,44)"/><text x="24.1816%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,451,105 samples, 5.03%)</title><rect x="50.6785%" y="197" width="5.0294%" height="15" fill="rgb(222,74,54)"/><text x="50.9285%" y="207.50">wf_che..</text></g><g><title>check_trait_item_well_formed (394,844 samples, 0.58%)</title><rect x="55.1325%" y="181" width="0.5754%" height="15" fill="rgb(216,99,12)"/><text x="55.3825%" y="191.50"></text></g><g><title>codegen_module (290,903 samples, 0.42%)</title><rect x="56.3699%" y="213" width="0.4239%" height="15" fill="rgb(226,22,26)"/><text x="56.6199%" y="223.50"></text></g><g><title>codegen_crate (809,958 samples, 1.18%)</title><rect x="55.7229%" y="229" width="1.1804%" height="15" fill="rgb(217,163,10)"/><text x="55.9729%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,822,719 samples, 4.11%)</title><rect x="56.9425%" y="213" width="4.1136%" height="15" fill="rgb(213,25,53)"/><text x="57.1925%" y="223.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,768,538 samples, 4.03%)</title><rect x="57.0214%" y="197" width="4.0347%" height="15" fill="rgb(252,105,26)"/><text x="57.2714%" y="207.50">LLVM..</text></g><g><title>codegen_module_optimize (3,097,661 samples, 4.51%)</title><rect x="56.9032%" y="229" width="4.5143%" height="15" fill="rgb(220,39,43)"/><text x="57.1532%" y="239.50">codeg..</text></g><g><title>LLVM_module_optimize (248,022 samples, 0.36%)</title><rect x="61.0561%" y="213" width="0.3614%" height="15" fill="rgb(229,68,48)"/><text x="61.3061%" y="223.50"></text></g><g><title>AST_validation (117,252 samples, 0.17%)</title><rect x="61.7299%" y="213" width="0.1709%" height="15" fill="rgb(252,8,32)"/><text x="61.9799%" y="223.50"></text></g><g><title>crate_injection (103,651 samples, 0.15%)</title><rect x="61.9748%" y="213" width="0.1511%" height="15" fill="rgb(223,20,43)"/><text x="62.2248%" y="223.50"></text></g><g><title>metadata_load_macro (111,732 samples, 0.16%)</title><rect x="78.5154%" y="181" width="0.1628%" height="15" fill="rgb(229,81,49)"/><text x="78.7654%" y="191.50"></text></g><g><title>metadata_register_crate (2,707,817 samples, 3.95%)</title><rect x="78.6782%" y="181" width="3.9462%" height="15" fill="rgb(236,28,36)"/><text x="78.9282%" y="191.50">meta..</text></g><g><title>metadata_register_crate (962,571 samples, 1.40%)</title><rect x="81.2216%" y="165" width="1.4028%" height="15" fill="rgb(249,185,26)"/><text x="81.4716%" y="175.50"></text></g><g><title>metadata_register_crate (76,301 samples, 0.11%)</title><rect x="82.5132%" y="149" width="0.1112%" height="15" fill="rgb(249,174,33)"/><text x="82.7632%" y="159.50"></text></g><g><title>macro_expand_crate (14,155,853 samples, 20.63%)</title><rect x="62.1258%" y="213" width="20.6297%" height="15" fill="rgb(233,201,37)"/><text x="62.3758%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (14,139,933 samples, 20.61%)</title><rect x="62.1490%" y="197" width="20.6065%" height="15" fill="rgb(221,78,26)"/><text x="62.3990%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (89,982 samples, 0.13%)</title><rect x="82.6244%" y="181" width="0.1311%" height="15" fill="rgb(250,127,30)"/><text x="82.8744%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (119,452 samples, 0.17%)</title><rect x="82.7625%" y="213" width="0.1741%" height="15" fill="rgb(230,49,44)"/><text x="83.0125%" y="223.50"></text></g><g><title>finalize_imports (372,613 samples, 0.54%)</title><rect x="82.9502%" y="197" width="0.5430%" height="15" fill="rgb(229,67,23)"/><text x="83.2002%" y="207.50"></text></g><g><title>late_resolve_crate (1,933,069 samples, 2.82%)</title><rect x="83.5133%" y="197" width="2.8171%" height="15" fill="rgb(249,83,47)"/><text x="83.7633%" y="207.50">la..</text></g><g><title>configure_and_expand (17,170,034 samples, 25.02%)</title><rect x="61.4176%" y="229" width="25.0224%" height="15" fill="rgb(215,43,3)"/><text x="61.6676%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,403,914 samples, 3.50%)</title><rect x="82.9366%" y="213" width="3.5033%" height="15" fill="rgb(238,154,13)"/><text x="83.1866%" y="223.50">res..</text></g><g><title>drop_ast (100,971 samples, 0.15%)</title><rect x="86.4399%" y="229" width="0.1471%" height="15" fill="rgb(219,56,2)"/><text x="86.6899%" y="239.50"></text></g><g><title>early_lint_checks (213,692 samples, 0.31%)</title><rect x="86.6058%" y="229" width="0.3114%" height="15" fill="rgb(233,0,4)"/><text x="86.8558%" y="239.50"></text></g><g><title>free_global_ctxt (2,510,325 samples, 3.66%)</title><rect x="86.9172%" y="229" width="3.6584%" height="15" fill="rgb(235,30,7)"/><text x="87.1672%" y="239.50">free..</text></g><g><title>crate_hash (69,681 samples, 0.10%)</title><rect x="91.2592%" y="213" width="0.1015%" height="15" fill="rgb(250,79,13)"/><text x="91.5092%" y="223.50"></text></g><g><title>exported_symbols (91,291 samples, 0.13%)</title><rect x="91.4082%" y="213" width="0.1330%" height="15" fill="rgb(211,146,34)"/><text x="91.6582%" y="223.50"></text></g><g><title>layout_of (107,162 samples, 0.16%)</title><rect x="92.7264%" y="181" width="0.1562%" height="15" fill="rgb(228,22,38)"/><text x="92.9764%" y="191.50"></text></g><g><title>layout_of (278,613 samples, 0.41%)</title><rect x="92.4998%" y="197" width="0.4060%" height="15" fill="rgb(235,168,5)"/><text x="92.7498%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (622,496 samples, 0.91%)</title><rect x="92.9058%" y="197" width="0.9072%" height="15" fill="rgb(221,155,16)"/><text x="93.1558%" y="207.50"></text></g><g><title>optimized_mir (1,522,797 samples, 2.22%)</title><rect x="91.6245%" y="213" width="2.2192%" height="15" fill="rgb(215,215,53)"/><text x="91.8745%" y="223.50">o..</text></g><g><title>generate_crate_metadata (2,266,843 samples, 3.30%)</title><rect x="90.5756%" y="229" width="3.3035%" height="15" fill="rgb(223,4,10)"/><text x="90.8256%" y="239.50">gen..</text></g><g><title>hir_lowering (1,477,514 samples, 2.15%)</title><rect x="93.8791%" y="229" width="2.1532%" height="15" fill="rgb(234,103,6)"/><text x="94.1291%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (526,585 samples, 0.77%)</title><rect x="96.0475%" y="213" width="0.7674%" height="15" fill="rgb(227,97,0)"/><text x="96.2975%" y="223.50"></text></g><g><title>link_crate (587,256 samples, 0.86%)</title><rect x="96.8149%" y="213" width="0.8558%" height="15" fill="rgb(234,150,53)"/><text x="97.0649%" y="223.50"></text></g><g><title>link_binary (579,206 samples, 0.84%)</title><rect x="96.8267%" y="197" width="0.8441%" height="15" fill="rgb(228,201,54)"/><text x="97.0767%" y="207.50"></text></g><g><title>link_rlib (377,554 samples, 0.55%)</title><rect x="97.1206%" y="181" width="0.5502%" height="15" fill="rgb(222,22,37)"/><text x="97.3706%" y="191.50"></text></g><g><title>link (1,130,951 samples, 1.65%)</title><rect x="96.0323%" y="229" width="1.6482%" height="15" fill="rgb(237,53,32)"/><text x="96.2823%" y="239.50"></text></g><g><title>parse_crate (305,013 samples, 0.44%)</title><rect x="97.6805%" y="229" width="0.4445%" height="15" fill="rgb(233,25,53)"/><text x="97.9305%" y="239.50"></text></g><g><title>prepare_outputs (381,203 samples, 0.56%)</title><rect x="98.1391%" y="229" width="0.5555%" height="15" fill="rgb(210,40,34)"/><text x="98.3891%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (419,145 samples, 0.61%)</title><rect x="98.6946%" y="229" width="0.6108%" height="15" fill="rgb(241,220,44)"/><text x="98.9446%" y="239.50"></text></g><g><title>setup_global_ctxt (156,302 samples, 0.23%)</title><rect x="99.3066%" y="229" width="0.2278%" height="15" fill="rgb(235,28,35)"/><text x="99.5566%" y="239.50"></text></g><g><title>all (68,618,759 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (68,618,759 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (319,513 samples, 0.47%)</title><rect x="99.5344%" y="229" width="0.4656%" height="15" fill="rgb(235,212,8)"/><text x="99.7844%" y="239.50"></text></g></svg></svg>