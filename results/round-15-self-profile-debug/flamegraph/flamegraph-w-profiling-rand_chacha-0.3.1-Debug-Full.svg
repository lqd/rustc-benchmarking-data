<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (566,951,063 samples, 24.18%)</title><rect x="0.0584%" y="357" width="24.1814%" height="15" fill="rgb(227,0,7)"/><text x="0.3084%" y="367.50">LLVM_passes</text></g><g><title>resolve_instance (3,029,179 samples, 0.13%)</title><rect x="25.6789%" y="245" width="0.1292%" height="15" fill="rgb(217,0,24)"/><text x="25.9289%" y="255.50"></text></g><g><title>mir_const (14,644,095 samples, 0.62%)</title><rect x="25.2780%" y="293" width="0.6246%" height="15" fill="rgb(221,193,54)"/><text x="25.5280%" y="303.50"></text></g><g><title>unsafety_check_result (12,914,895 samples, 0.55%)</title><rect x="25.3517%" y="277" width="0.5508%" height="15" fill="rgb(248,212,6)"/><text x="25.6017%" y="287.50"></text></g><g><title>mir_built (11,754,572 samples, 0.50%)</title><rect x="25.4012%" y="261" width="0.5014%" height="15" fill="rgb(208,68,35)"/><text x="25.6512%" y="271.50"></text></g><g><title>mir_promoted (17,343,207 samples, 0.74%)</title><rect x="25.2095%" y="309" width="0.7397%" height="15" fill="rgb(232,128,0)"/><text x="25.4595%" y="319.50"></text></g><g><title>type_op_prove_predicate (2,712,544 samples, 0.12%)</title><rect x="26.0212%" y="309" width="0.1157%" height="15" fill="rgb(207,160,47)"/><text x="26.2712%" y="319.50"></text></g><g><title>MIR_borrow_checking (43,981,857 samples, 1.88%)</title><rect x="24.2612%" y="341" width="1.8759%" height="15" fill="rgb(228,23,34)"/><text x="24.5112%" y="351.50">M..</text></g><g><title>mir_borrowck (43,679,104 samples, 1.86%)</title><rect x="24.2741%" y="325" width="1.8630%" height="15" fill="rgb(218,30,26)"/><text x="24.5241%" y="335.50">m..</text></g><g><title>misc_checking_1 (2,452,015 samples, 0.10%)</title><rect x="26.1773%" y="341" width="0.1046%" height="15" fill="rgb(220,122,19)"/><text x="26.4273%" y="351.50"></text></g><g><title>crate_lints (2,809,879 samples, 0.12%)</title><rect x="26.4000%" y="309" width="0.1198%" height="15" fill="rgb(250,228,42)"/><text x="26.6500%" y="319.50"></text></g><g><title>lint_checking (3,557,176 samples, 0.15%)</title><rect x="26.3999%" y="325" width="0.1517%" height="15" fill="rgb(240,193,28)"/><text x="26.6499%" y="335.50"></text></g><g><title>misc_checking_3 (6,785,369 samples, 0.29%)</title><rect x="26.3524%" y="341" width="0.2894%" height="15" fill="rgb(216,20,37)"/><text x="26.6024%" y="351.50"></text></g><g><title>impl_parent (2,683,128 samples, 0.11%)</title><rect x="26.7977%" y="277" width="0.1144%" height="15" fill="rgb(206,188,39)"/><text x="27.0477%" y="287.50"></text></g><g><title>impl_trait_ref (4,928,773 samples, 0.21%)</title><rect x="26.9121%" y="277" width="0.2102%" height="15" fill="rgb(217,207,13)"/><text x="27.1621%" y="287.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,017,805 samples, 0.17%)</title><rect x="26.9510%" y="261" width="0.1714%" height="15" fill="rgb(231,73,38)"/><text x="27.2010%" y="271.50"></text></g><g><title>coherent_trait (11,880,619 samples, 0.51%)</title><rect x="26.6485%" y="309" width="0.5067%" height="15" fill="rgb(225,20,46)"/><text x="26.8985%" y="319.50"></text></g><g><title>specialization_graph_of (11,855,128 samples, 0.51%)</title><rect x="26.6496%" y="293" width="0.5056%" height="15" fill="rgb(210,31,41)"/><text x="26.8996%" y="303.50"></text></g><g><title>coherence_checking (11,989,771 samples, 0.51%)</title><rect x="26.6476%" y="325" width="0.5114%" height="15" fill="rgb(221,200,47)"/><text x="26.8976%" y="335.50"></text></g><g><title>evaluate_obligation (6,546,629 samples, 0.28%)</title><rect x="28.8993%" y="277" width="0.2792%" height="15" fill="rgb(226,26,5)"/><text x="29.1493%" y="287.50"></text></g><g><title>item_bodies_checking (50,317,572 samples, 2.15%)</title><rect x="27.1616%" y="325" width="2.1461%" height="15" fill="rgb(249,33,26)"/><text x="27.4116%" y="335.50">i..</text></g><g><title>typeck_item_bodies (50,313,632 samples, 2.15%)</title><rect x="27.1617%" y="309" width="2.1460%" height="15" fill="rgb(235,183,28)"/><text x="27.4117%" y="319.50">t..</text></g><g><title>typeck (50,097,979 samples, 2.14%)</title><rect x="27.1709%" y="293" width="2.1368%" height="15" fill="rgb(221,5,38)"/><text x="27.4209%" y="303.50">t..</text></g><g><title>item_types_checking (4,285,073 samples, 0.18%)</title><rect x="29.3077%" y="325" width="0.1828%" height="15" fill="rgb(247,18,42)"/><text x="29.5577%" y="335.50"></text></g><g><title>check_mod_item_types (4,278,583 samples, 0.18%)</title><rect x="29.3080%" y="309" width="0.1825%" height="15" fill="rgb(241,131,45)"/><text x="29.5580%" y="319.50"></text></g><g><title>type_collecting (2,850,389 samples, 0.12%)</title><rect x="29.4906%" y="325" width="0.1216%" height="15" fill="rgb(249,31,29)"/><text x="29.7406%" y="335.50"></text></g><g><title>collect_mod_item_types (2,844,529 samples, 0.12%)</title><rect x="29.4908%" y="309" width="0.1213%" height="15" fill="rgb(225,111,53)"/><text x="29.7408%" y="319.50"></text></g><g><title>evaluate_obligation (5,996,320 samples, 0.26%)</title><rect x="29.8351%" y="37" width="0.2558%" height="15" fill="rgb(238,160,17)"/><text x="30.0851%" y="47.50"></text></g><g><title>eval_to_const_value_raw (6,996,091 samples, 0.30%)</title><rect x="29.7956%" y="101" width="0.2984%" height="15" fill="rgb(214,148,48)"/><text x="30.0456%" y="111.50"></text></g><g><title>eval_to_const_value_raw (6,993,451 samples, 0.30%)</title><rect x="29.7957%" y="85" width="0.2983%" height="15" fill="rgb(232,36,49)"/><text x="30.0457%" y="95.50"></text></g><g><title>eval_to_allocation_raw (6,991,081 samples, 0.30%)</title><rect x="29.7958%" y="69" width="0.2982%" height="15" fill="rgb(209,103,24)"/><text x="30.0458%" y="79.50"></text></g><g><title>typeck (6,324,084 samples, 0.27%)</title><rect x="29.8243%" y="53" width="0.2697%" height="15" fill="rgb(229,88,8)"/><text x="30.0743%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,010,381 samples, 0.30%)</title><rect x="29.7952%" y="117" width="0.2990%" height="15" fill="rgb(213,181,19)"/><text x="30.0452%" y="127.50"></text></g><g><title>eval_to_const_value_raw (7,511,046 samples, 0.32%)</title><rect x="29.7876%" y="165" width="0.3204%" height="15" fill="rgb(254,191,54)"/><text x="30.0376%" y="175.50"></text></g><g><title>eval_to_const_value_raw (7,510,266 samples, 0.32%)</title><rect x="29.7877%" y="149" width="0.3203%" height="15" fill="rgb(241,83,37)"/><text x="30.0377%" y="159.50"></text></g><g><title>eval_to_allocation_raw (7,509,196 samples, 0.32%)</title><rect x="29.7877%" y="133" width="0.3203%" height="15" fill="rgb(233,36,39)"/><text x="30.0377%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,517,356 samples, 0.32%)</title><rect x="29.7875%" y="181" width="0.3206%" height="15" fill="rgb(226,3,54)"/><text x="30.0375%" y="191.50"></text></g><g><title>eval_to_const_value_raw (7,704,158 samples, 0.33%)</title><rect x="29.7815%" y="229" width="0.3286%" height="15" fill="rgb(245,192,40)"/><text x="30.0315%" y="239.50"></text></g><g><title>eval_to_const_value_raw (7,703,178 samples, 0.33%)</title><rect x="29.7815%" y="213" width="0.3286%" height="15" fill="rgb(238,167,29)"/><text x="30.0315%" y="223.50"></text></g><g><title>eval_to_allocation_raw (7,702,188 samples, 0.33%)</title><rect x="29.7816%" y="197" width="0.3285%" height="15" fill="rgb(232,182,51)"/><text x="30.0316%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,713,848 samples, 0.33%)</title><rect x="29.7812%" y="245" width="0.3290%" height="15" fill="rgb(231,60,39)"/><text x="30.0312%" y="255.50"></text></g><g><title>eval_to_const_value_raw (8,650,538 samples, 0.37%)</title><rect x="29.7455%" y="293" width="0.3690%" height="15" fill="rgb(208,69,12)"/><text x="29.9955%" y="303.50"></text></g><g><title>eval_to_const_value_raw (8,635,988 samples, 0.37%)</title><rect x="29.7461%" y="277" width="0.3683%" height="15" fill="rgb(235,93,37)"/><text x="29.9961%" y="287.50"></text></g><g><title>eval_to_allocation_raw (8,634,118 samples, 0.37%)</title><rect x="29.7462%" y="261" width="0.3683%" height="15" fill="rgb(213,116,39)"/><text x="29.9962%" y="271.50"></text></g><g><title>check_impl_item_well_formed (13,051,617 samples, 0.56%)</title><rect x="29.6295%" y="309" width="0.5567%" height="15" fill="rgb(222,207,29)"/><text x="29.8795%" y="319.50"></text></g><g><title>analysis (145,797,952 samples, 6.22%)</title><rect x="24.2398%" y="357" width="6.2185%" height="15" fill="rgb(206,96,30)"/><text x="24.4898%" y="367.50">analysis</text></g><g><title>type_check_crate (89,481,319 samples, 3.82%)</title><rect x="26.6418%" y="341" width="3.8165%" height="15" fill="rgb(218,138,4)"/><text x="26.8918%" y="351.50">type..</text></g><g><title>wf_checking (19,821,932 samples, 0.85%)</title><rect x="29.6129%" y="325" width="0.8454%" height="15" fill="rgb(250,191,14)"/><text x="29.8629%" y="335.50"></text></g><g><title>check_item_well_formed (6,381,139 samples, 0.27%)</title><rect x="30.1861%" y="309" width="0.2722%" height="15" fill="rgb(239,60,40)"/><text x="30.4361%" y="319.50"></text></g><g><title>param_env (4,680,262 samples, 0.20%)</title><rect x="34.6163%" y="309" width="0.1996%" height="15" fill="rgb(206,27,48)"/><text x="34.8663%" y="319.50"></text></g><g><title>fn_abi_of_instance (12,883,326 samples, 0.55%)</title><rect x="34.3277%" y="325" width="0.5495%" height="15" fill="rgb(225,35,8)"/><text x="34.5777%" y="335.50"></text></g><g><title>codegen_module (105,295,930 samples, 4.49%)</title><rect x="30.5424%" y="341" width="4.4910%" height="15" fill="rgb(250,213,24)"/><text x="30.7924%" y="351.50">codeg..</text></g><g><title>codegen_crate (107,344,192 samples, 4.58%)</title><rect x="30.4587%" y="357" width="4.5784%" height="15" fill="rgb(247,123,22)"/><text x="30.7087%" y="367.50">codeg..</text></g><g><title>LLVM_module_codegen (631,313,087 samples, 26.93%)</title><rect x="35.0487%" y="341" width="26.9265%" height="15" fill="rgb(231,138,38)"/><text x="35.2987%" y="351.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (583,079,708 samples, 24.87%)</title><rect x="37.1060%" y="325" width="24.8693%" height="15" fill="rgb(231,145,46)"/><text x="37.3560%" y="335.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (906,329,775 samples, 38.66%)</title><rect x="35.0371%" y="357" width="38.6564%" height="15" fill="rgb(251,118,11)"/><text x="35.2871%" y="367.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (274,743,215 samples, 11.72%)</title><rect x="61.9752%" y="341" width="11.7182%" height="15" fill="rgb(217,147,25)"/><text x="62.2252%" y="351.50">LLVM_module_optim..</text></g><g><title>metadata_register_crate (2,425,534 samples, 0.10%)</title><rect x="76.0292%" y="309" width="0.1035%" height="15" fill="rgb(247,81,37)"/><text x="76.2792%" y="319.50"></text></g><g><title>macro_expand_crate (56,952,039 samples, 2.43%)</title><rect x="73.7226%" y="341" width="2.4291%" height="15" fill="rgb(209,12,38)"/><text x="73.9726%" y="351.50">ma..</text></g><g><title>expand_crate (56,936,989 samples, 2.43%)</title><rect x="73.7232%" y="325" width="2.4285%" height="15" fill="rgb(227,1,9)"/><text x="73.9732%" y="335.50">ex..</text></g><g><title>late_resolve_crate (3,120,752 samples, 0.13%)</title><rect x="76.2023%" y="325" width="0.1331%" height="15" fill="rgb(248,47,43)"/><text x="76.4523%" y="335.50"></text></g><g><title>configure_and_expand (62,268,054 samples, 2.66%)</title><rect x="73.6935%" y="357" width="2.6558%" height="15" fill="rgb(221,10,30)"/><text x="73.9435%" y="367.50">co..</text></g><g><title>resolve_crate (4,551,726 samples, 0.19%)</title><rect x="76.1552%" y="341" width="0.1941%" height="15" fill="rgb(210,229,1)"/><text x="76.4052%" y="351.50"></text></g><g><title>free_global_ctxt (8,836,880 samples, 0.38%)</title><rect x="76.3964%" y="357" width="0.3769%" height="15" fill="rgb(222,148,37)"/><text x="76.6464%" y="367.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,409,480 samples, 0.10%)</title><rect x="77.3018%" y="261" width="0.1028%" height="15" fill="rgb(234,67,33)"/><text x="77.5518%" y="271.50"></text></g><g><title>optimized_mir (6,648,981 samples, 0.28%)</title><rect x="77.2097%" y="277" width="0.2836%" height="15" fill="rgb(247,98,35)"/><text x="77.4597%" y="287.50"></text></g><g><title>codegen_fulfill_obligation (7,604,120 samples, 0.32%)</title><rect x="77.5806%" y="261" width="0.3243%" height="15" fill="rgb(247,138,52)"/><text x="77.8306%" y="271.50"></text></g><g><title>specialization_graph_of (2,933,260 samples, 0.13%)</title><rect x="77.9559%" y="261" width="0.1251%" height="15" fill="rgb(213,79,30)"/><text x="78.2059%" y="271.50"></text></g><g><title>resolve_instance (14,299,498 samples, 0.61%)</title><rect x="77.4933%" y="277" width="0.6099%" height="15" fill="rgb(246,177,23)"/><text x="77.7433%" y="287.50"></text></g><g><title>monomorphization_collector_graph_walk (32,235,868 samples, 1.37%)</title><rect x="76.9023%" y="293" width="1.3749%" height="15" fill="rgb(230,62,27)"/><text x="77.1523%" y="303.50"></text></g><g><title>monomorphization_collector (32,332,689 samples, 1.38%)</title><rect x="76.9021%" y="309" width="1.3790%" height="15" fill="rgb(216,154,8)"/><text x="77.1521%" y="319.50"></text></g><g><title>assert_symbols_are_distinct (3,848,278 samples, 0.16%)</title><rect x="78.2813%" y="293" width="0.1641%" height="15" fill="rgb(244,35,45)"/><text x="78.5313%" y="303.50"></text></g><g><title>symbol_name (3,269,593 samples, 0.14%)</title><rect x="78.3060%" y="277" width="0.1395%" height="15" fill="rgb(251,115,12)"/><text x="78.5560%" y="287.50"></text></g><g><title>collect_and_partition_mono_items (37,627,352 samples, 1.60%)</title><rect x="76.9003%" y="325" width="1.6049%" height="15" fill="rgb(240,54,50)"/><text x="77.1503%" y="335.50"></text></g><g><title>partition_and_assert_distinct_symbols (5,251,642 samples, 0.22%)</title><rect x="78.2811%" y="309" width="0.2240%" height="15" fill="rgb(233,84,52)"/><text x="78.5311%" y="319.50"></text></g><g><title>exported_symbols (37,926,555 samples, 1.62%)</title><rect x="76.8954%" y="341" width="1.6176%" height="15" fill="rgb(207,117,47)"/><text x="77.1454%" y="351.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,340,571 samples, 0.19%)</title><rect x="78.7357%" y="325" width="0.1851%" height="15" fill="rgb(249,43,39)"/><text x="78.9857%" y="335.50"></text></g><g><title>optimized_mir (9,509,534 samples, 0.41%)</title><rect x="78.5226%" y="341" width="0.4056%" height="15" fill="rgb(209,38,44)"/><text x="78.7726%" y="351.50"></text></g><g><title>generate_crate_metadata (50,649,955 samples, 2.16%)</title><rect x="76.7733%" y="357" width="2.1603%" height="15" fill="rgb(236,212,23)"/><text x="77.0233%" y="367.50">g..</text></g><g><title>hir_lowering (5,380,604 samples, 0.23%)</title><rect x="78.9336%" y="357" width="0.2295%" height="15" fill="rgb(242,79,21)"/><text x="79.1836%" y="367.50"></text></g><g><title>finish_ongoing_codegen (478,924,639 samples, 20.43%)</title><rect x="79.1641%" y="341" width="20.4269%" height="15" fill="rgb(211,96,35)"/><text x="79.4141%" y="351.50">finish_ongoing_codegen</text></g><g><title>link_crate (6,447,175 samples, 0.27%)</title><rect x="99.5910%" y="341" width="0.2750%" height="15" fill="rgb(253,215,40)"/><text x="99.8410%" y="351.50"></text></g><g><title>link_binary (6,380,675 samples, 0.27%)</title><rect x="99.5939%" y="325" width="0.2721%" height="15" fill="rgb(211,81,21)"/><text x="99.8439%" y="335.50"></text></g><g><title>link_rlib (4,968,150 samples, 0.21%)</title><rect x="99.6541%" y="309" width="0.2119%" height="15" fill="rgb(208,190,38)"/><text x="99.9041%" y="319.50"></text></g><g><title>link (485,413,044 samples, 20.70%)</title><rect x="79.1631%" y="357" width="20.7036%" height="15" fill="rgb(235,213,38)"/><text x="79.4131%" y="367.50">link</text></g><g><title>all (2,344,578,175 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="399.50"></text></g><g><title>rustc (2,344,578,175 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="383.50">rustc</text></g></svg></svg>