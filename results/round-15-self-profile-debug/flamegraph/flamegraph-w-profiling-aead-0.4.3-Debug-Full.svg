<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,721,437 samples, 6.54%)</title><rect x="0.7577%" y="245" width="6.5435%" height="15" fill="rgb(227,0,7)"/><text x="1.0077%" y="255.50">LLVM_pass..</text></g><g><title>param_env (64,952 samples, 0.11%)</title><rect x="14.4883%" y="165" width="0.1142%" height="15" fill="rgb(217,0,24)"/><text x="14.7383%" y="175.50"></text></g><g><title>codegen_fn_attrs (76,611 samples, 0.13%)</title><rect x="14.8648%" y="149" width="0.1347%" height="15" fill="rgb(221,193,54)"/><text x="15.1148%" y="159.50"></text></g><g><title>adt_drop_tys (94,692 samples, 0.17%)</title><rect x="16.4013%" y="117" width="0.1665%" height="15" fill="rgb(248,212,6)"/><text x="16.6513%" y="127.50"></text></g><g><title>explicit_predicates_of (75,510 samples, 0.13%)</title><rect x="17.1377%" y="53" width="0.1328%" height="15" fill="rgb(208,68,35)"/><text x="17.3877%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (73,650 samples, 0.13%)</title><rect x="17.1409%" y="37" width="0.1295%" height="15" fill="rgb(232,128,0)"/><text x="17.3909%" y="47.50"></text></g><g><title>is_copy_raw (402,314 samples, 0.71%)</title><rect x="16.5678%" y="117" width="0.7074%" height="15" fill="rgb(207,160,47)"/><text x="16.8178%" y="127.50"></text></g><g><title>evaluate_obligation (370,873 samples, 0.65%)</title><rect x="16.6231%" y="101" width="0.6521%" height="15" fill="rgb(228,23,34)"/><text x="16.8731%" y="111.50"></text></g><g><title>predicates_of (93,730 samples, 0.16%)</title><rect x="17.1104%" y="85" width="0.1648%" height="15" fill="rgb(218,30,26)"/><text x="17.3604%" y="95.50"></text></g><g><title>predicates_defined_on (83,840 samples, 0.15%)</title><rect x="17.1278%" y="69" width="0.1474%" height="15" fill="rgb(220,122,19)"/><text x="17.3778%" y="79.50"></text></g><g><title>needs_drop_raw (530,686 samples, 0.93%)</title><rect x="16.3476%" y="133" width="0.9331%" height="15" fill="rgb(250,228,42)"/><text x="16.5976%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (135,001 samples, 0.24%)</title><rect x="17.3870%" y="117" width="0.2374%" height="15" fill="rgb(240,193,28)"/><text x="17.6370%" y="127.50"></text></g><g><title>resolve_instance (266,403 samples, 0.47%)</title><rect x="17.2807%" y="133" width="0.4684%" height="15" fill="rgb(216,20,37)"/><text x="17.5307%" y="143.50"></text></g><g><title>thir_body (240,072 samples, 0.42%)</title><rect x="17.7627%" y="133" width="0.4221%" height="15" fill="rgb(206,188,39)"/><text x="18.0127%" y="143.50"></text></g><g><title>mir_const (2,417,192 samples, 4.25%)</title><rect x="13.9859%" y="181" width="4.2502%" height="15" fill="rgb(217,207,13)"/><text x="14.2359%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (2,066,519 samples, 3.63%)</title><rect x="14.6025%" y="165" width="3.6336%" height="15" fill="rgb(231,73,38)"/><text x="14.8525%" y="175.50">unsa..</text></g><g><title>mir_built (1,840,728 samples, 3.24%)</title><rect x="14.9995%" y="149" width="3.2366%" height="15" fill="rgb(225,20,46)"/><text x="15.2495%" y="159.50">mir..</text></g><g><title>mir_promoted (2,658,806 samples, 4.68%)</title><rect x="13.5870%" y="197" width="4.6751%" height="15" fill="rgb(210,31,41)"/><text x="13.8370%" y="207.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (202,051 samples, 0.36%)</title><rect x="18.2620%" y="197" width="0.3553%" height="15" fill="rgb(221,200,47)"/><text x="18.5120%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (180,593 samples, 0.32%)</title><rect x="18.6173%" y="197" width="0.3175%" height="15" fill="rgb(226,26,5)"/><text x="18.8673%" y="207.50"></text></g><g><title>normalize_projection_ty (77,462 samples, 0.14%)</title><rect x="18.7986%" y="181" width="0.1362%" height="15" fill="rgb(249,33,26)"/><text x="19.0486%" y="191.50"></text></g><g><title>type_op_normalize_predicate (120,391 samples, 0.21%)</title><rect x="18.9348%" y="197" width="0.2117%" height="15" fill="rgb(235,183,28)"/><text x="19.1848%" y="207.50"></text></g><g><title>normalize_projection_ty (89,811 samples, 0.16%)</title><rect x="18.9886%" y="181" width="0.1579%" height="15" fill="rgb(221,5,38)"/><text x="19.2386%" y="191.50"></text></g><g><title>type_op_normalize_ty (114,023 samples, 0.20%)</title><rect x="19.1465%" y="197" width="0.2005%" height="15" fill="rgb(247,18,42)"/><text x="19.3965%" y="207.50"></text></g><g><title>type_op_prove_predicate (767,605 samples, 1.35%)</title><rect x="19.3470%" y="197" width="1.3497%" height="15" fill="rgb(241,131,45)"/><text x="19.5970%" y="207.50"></text></g><g><title>MIR_borrow_checking (7,492,095 samples, 13.17%)</title><rect x="7.5255%" y="229" width="13.1736%" height="15" fill="rgb(249,31,29)"/><text x="7.7755%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,458,875 samples, 13.12%)</title><rect x="7.5839%" y="213" width="13.1152%" height="15" fill="rgb(225,111,53)"/><text x="7.8339%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (84,821 samples, 0.15%)</title><rect x="20.7122%" y="229" width="0.1491%" height="15" fill="rgb(238,160,17)"/><text x="20.9622%" y="239.50"></text></g><g><title>codegen_fn_attrs (74,822 samples, 0.13%)</title><rect x="21.3013%" y="165" width="0.1316%" height="15" fill="rgb(214,148,48)"/><text x="21.5513%" y="175.50"></text></g><g><title>should_inherit_track_caller (135,972 samples, 0.24%)</title><rect x="21.1998%" y="181" width="0.2391%" height="15" fill="rgb(232,36,49)"/><text x="21.4498%" y="191.50"></text></g><g><title>codegen_fn_attrs (228,023 samples, 0.40%)</title><rect x="21.0604%" y="197" width="0.4009%" height="15" fill="rgb(209,103,24)"/><text x="21.3104%" y="207.50"></text></g><g><title>check_mod_attrs (329,134 samples, 0.58%)</title><rect x="20.8831%" y="213" width="0.5787%" height="15" fill="rgb(229,88,8)"/><text x="21.1331%" y="223.50"></text></g><g><title>lookup_deprecation_entry (57,110 samples, 0.10%)</title><rect x="21.7150%" y="197" width="0.1004%" height="15" fill="rgb(213,181,19)"/><text x="21.9650%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (166,832 samples, 0.29%)</title><rect x="21.5953%" y="213" width="0.2933%" height="15" fill="rgb(254,191,54)"/><text x="21.8453%" y="223.50"></text></g><g><title>misc_checking_1 (612,126 samples, 1.08%)</title><rect x="20.8620%" y="229" width="1.0763%" height="15" fill="rgb(241,83,37)"/><text x="21.1120%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (142,581 samples, 0.25%)</title><rect x="21.9404%" y="213" width="0.2507%" height="15" fill="rgb(233,36,39)"/><text x="22.1904%" y="223.50"></text></g><g><title>check_mod_liveness (113,221 samples, 0.20%)</title><rect x="21.9920%" y="197" width="0.1991%" height="15" fill="rgb(226,3,54)"/><text x="22.2420%" y="207.50"></text></g><g><title>misc_checking_2 (325,873 samples, 0.57%)</title><rect x="21.9383%" y="229" width="0.5730%" height="15" fill="rgb(245,192,40)"/><text x="22.1883%" y="239.50"></text></g><g><title>match_checking (182,142 samples, 0.32%)</title><rect x="22.1911%" y="213" width="0.3203%" height="15" fill="rgb(238,167,29)"/><text x="22.4411%" y="223.50"></text></g><g><title>check_match (172,372 samples, 0.30%)</title><rect x="22.2082%" y="197" width="0.3031%" height="15" fill="rgb(232,182,51)"/><text x="22.4582%" y="207.50"></text></g><g><title>check_private_in_public (83,021 samples, 0.15%)</title><rect x="22.5231%" y="213" width="0.1460%" height="15" fill="rgb(231,60,39)"/><text x="22.7731%" y="223.50"></text></g><g><title>death_checking (336,973 samples, 0.59%)</title><rect x="22.6690%" y="213" width="0.5925%" height="15" fill="rgb(208,69,12)"/><text x="22.9190%" y="223.50"></text></g><g><title>item_attrs (203,232 samples, 0.36%)</title><rect x="22.9042%" y="197" width="0.3573%" height="15" fill="rgb(235,93,37)"/><text x="23.1542%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (201,372 samples, 0.35%)</title><rect x="22.9075%" y="181" width="0.3541%" height="15" fill="rgb(213,116,39)"/><text x="23.1575%" y="191.50"></text></g><g><title>param_env (81,080 samples, 0.14%)</title><rect x="23.7174%" y="181" width="0.1426%" height="15" fill="rgb(222,207,29)"/><text x="23.9674%" y="191.50"></text></g><g><title>crate_lints (618,656 samples, 1.09%)</title><rect x="23.2637%" y="197" width="1.0878%" height="15" fill="rgb(206,96,30)"/><text x="23.5137%" y="207.50"></text></g><g><title>type_of (277,313 samples, 0.49%)</title><rect x="23.8639%" y="181" width="0.4876%" height="15" fill="rgb(218,138,4)"/><text x="24.1139%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (196,723 samples, 0.35%)</title><rect x="24.0056%" y="165" width="0.3459%" height="15" fill="rgb(250,191,14)"/><text x="24.2556%" y="175.50"></text></g><g><title>lint_checking (729,227 samples, 1.28%)</title><rect x="23.2616%" y="213" width="1.2822%" height="15" fill="rgb(239,60,40)"/><text x="23.5116%" y="223.50"></text></g><g><title>module_lints (109,341 samples, 0.19%)</title><rect x="24.3515%" y="197" width="0.1923%" height="15" fill="rgb(206,27,48)"/><text x="24.6015%" y="207.50"></text></g><g><title>lint_mod (107,751 samples, 0.19%)</title><rect x="24.3543%" y="181" width="0.1895%" height="15" fill="rgb(225,35,8)"/><text x="24.6043%" y="191.50"></text></g><g><title>privacy_access_levels (102,441 samples, 0.18%)</title><rect x="24.5438%" y="213" width="0.1801%" height="15" fill="rgb(250,213,24)"/><text x="24.7938%" y="223.50"></text></g><g><title>privacy_checking_modules (338,963 samples, 0.60%)</title><rect x="24.7239%" y="213" width="0.5960%" height="15" fill="rgb(247,123,22)"/><text x="24.9739%" y="223.50"></text></g><g><title>check_mod_privacy (337,733 samples, 0.59%)</title><rect x="24.7261%" y="197" width="0.5938%" height="15" fill="rgb(231,138,38)"/><text x="24.9761%" y="207.50"></text></g><g><title>misc_checking_3 (1,604,926 samples, 2.82%)</title><rect x="22.5113%" y="229" width="2.8220%" height="15" fill="rgb(231,145,46)"/><text x="22.7613%" y="239.50">mi..</text></g><g><title>impl_parent (859,220 samples, 1.51%)</title><rect x="28.2839%" y="165" width="1.5108%" height="15" fill="rgb(251,118,11)"/><text x="28.5339%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (439,505 samples, 0.77%)</title><rect x="29.0219%" y="149" width="0.7728%" height="15" fill="rgb(217,147,25)"/><text x="29.2719%" y="159.50"></text></g><g><title>impl_trait_ref (1,596,314 samples, 2.81%)</title><rect x="29.7947%" y="165" width="2.8068%" height="15" fill="rgb(247,81,37)"/><text x="30.0447%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,175,771 samples, 2.07%)</title><rect x="30.5341%" y="149" width="2.0674%" height="15" fill="rgb(209,12,38)"/><text x="30.7841%" y="159.50">m..</text></g><g><title>coherent_trait (4,430,104 samples, 7.79%)</title><rect x="25.4050%" y="197" width="7.7896%" height="15" fill="rgb(227,1,9)"/><text x="25.6550%" y="207.50">coherent_tr..</text></g><g><title>specialization_graph_of (4,313,313 samples, 7.58%)</title><rect x="25.6103%" y="181" width="7.5842%" height="15" fill="rgb(248,47,43)"/><text x="25.8603%" y="191.50">specializa..</text></g><g><title>trait_impls_of (333,592 samples, 0.59%)</title><rect x="32.6080%" y="165" width="0.5866%" height="15" fill="rgb(221,10,30)"/><text x="32.8580%" y="175.50"></text></g><g><title>implementations_of_trait (85,370 samples, 0.15%)</title><rect x="33.0445%" y="149" width="0.1501%" height="15" fill="rgb(210,229,1)"/><text x="33.2945%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (71,990 samples, 0.13%)</title><rect x="33.0680%" y="133" width="0.1266%" height="15" fill="rgb(222,148,37)"/><text x="33.3180%" y="143.50"></text></g><g><title>coherence_checking (4,469,214 samples, 7.86%)</title><rect x="25.3796%" y="213" width="7.8584%" height="15" fill="rgb(234,67,33)"/><text x="25.6296%" y="223.50">coherence_c..</text></g><g><title>associated_item (128,332 samples, 0.23%)</title><rect x="44.7518%" y="149" width="0.2257%" height="15" fill="rgb(247,98,35)"/><text x="45.0018%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (97,132 samples, 0.17%)</title><rect x="44.8067%" y="133" width="0.1708%" height="15" fill="rgb(247,138,52)"/><text x="45.0567%" y="143.50"></text></g><g><title>associated_items (196,513 samples, 0.35%)</title><rect x="44.6486%" y="165" width="0.3455%" height="15" fill="rgb(213,79,30)"/><text x="44.8986%" y="175.50"></text></g><g><title>adt_dtorck_constraint (72,021 samples, 0.13%)</title><rect x="45.2155%" y="149" width="0.1266%" height="15" fill="rgb(246,177,23)"/><text x="45.4655%" y="159.50"></text></g><g><title>dropck_outlives (212,413 samples, 0.37%)</title><rect x="45.0339%" y="165" width="0.3735%" height="15" fill="rgb(230,62,27)"/><text x="45.2839%" y="175.50"></text></g><g><title>specializes (76,121 samples, 0.13%)</title><rect x="46.3727%" y="149" width="0.1338%" height="15" fill="rgb(216,154,8)"/><text x="46.6227%" y="159.50"></text></g><g><title>param_env (68,331 samples, 0.12%)</title><rect x="46.3864%" y="133" width="0.1201%" height="15" fill="rgb(244,35,45)"/><text x="46.6364%" y="143.50"></text></g><g><title>def_span (59,371 samples, 0.10%)</title><rect x="46.4022%" y="117" width="0.1044%" height="15" fill="rgb(251,115,12)"/><text x="46.6522%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (58,741 samples, 0.10%)</title><rect x="46.4033%" y="101" width="0.1033%" height="15" fill="rgb(240,54,50)"/><text x="46.6533%" y="111.50"></text></g><g><title>trait_impls_of (107,912 samples, 0.19%)</title><rect x="46.5137%" y="149" width="0.1897%" height="15" fill="rgb(233,84,52)"/><text x="46.7637%" y="159.50"></text></g><g><title>evaluate_obligation (735,589 samples, 1.29%)</title><rect x="45.4114%" y="165" width="1.2934%" height="15" fill="rgb(207,117,47)"/><text x="45.6614%" y="175.50"></text></g><g><title>evaluate_obligation (126,042 samples, 0.22%)</title><rect x="47.2372%" y="149" width="0.2216%" height="15" fill="rgb(249,43,39)"/><text x="47.4872%" y="159.50"></text></g><g><title>method_autoderef_steps (249,182 samples, 0.44%)</title><rect x="47.0390%" y="165" width="0.4381%" height="15" fill="rgb(209,38,44)"/><text x="47.2890%" y="175.50"></text></g><g><title>predicates_of (120,773 samples, 0.21%)</title><rect x="47.5413%" y="165" width="0.2124%" height="15" fill="rgb(236,212,23)"/><text x="47.7913%" y="175.50"></text></g><g><title>predicates_defined_on (76,202 samples, 0.13%)</title><rect x="47.6196%" y="149" width="0.1340%" height="15" fill="rgb(242,79,21)"/><text x="47.8696%" y="159.50"></text></g><g><title>item_bodies_checking (8,322,383 samples, 14.63%)</title><rect x="33.2634%" y="213" width="14.6335%" height="15" fill="rgb(211,96,35)"/><text x="33.5134%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,320,773 samples, 14.63%)</title><rect x="33.2662%" y="197" width="14.6307%" height="15" fill="rgb(253,215,40)"/><text x="33.5162%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (8,296,452 samples, 14.59%)</title><rect x="33.3090%" y="181" width="14.5879%" height="15" fill="rgb(211,81,21)"/><text x="33.5590%" y="191.50">typeck</text></g><g><title>item_types_checking (404,444 samples, 0.71%)</title><rect x="47.8969%" y="213" width="0.7111%" height="15" fill="rgb(208,190,38)"/><text x="48.1469%" y="223.50"></text></g><g><title>check_mod_item_types (402,554 samples, 0.71%)</title><rect x="47.9002%" y="197" width="0.7078%" height="15" fill="rgb(235,213,38)"/><text x="48.1502%" y="207.50"></text></g><g><title>fn_sig (211,233 samples, 0.37%)</title><rect x="48.8283%" y="181" width="0.3714%" height="15" fill="rgb(237,122,38)"/><text x="49.0783%" y="191.50"></text></g><g><title>named_region_map (203,841 samples, 0.36%)</title><rect x="49.2945%" y="165" width="0.3584%" height="15" fill="rgb(244,218,35)"/><text x="49.5445%" y="175.50"></text></g><g><title>resolve_lifetimes (190,201 samples, 0.33%)</title><rect x="49.3184%" y="149" width="0.3344%" height="15" fill="rgb(240,68,47)"/><text x="49.5684%" y="159.50"></text></g><g><title>lint_levels (74,721 samples, 0.13%)</title><rect x="49.5215%" y="133" width="0.1314%" height="15" fill="rgb(210,16,53)"/><text x="49.7715%" y="143.50"></text></g><g><title>generics_of (270,371 samples, 0.48%)</title><rect x="49.1997%" y="181" width="0.4754%" height="15" fill="rgb(235,124,12)"/><text x="49.4497%" y="191.50"></text></g><g><title>item_bounds (127,242 samples, 0.22%)</title><rect x="49.7440%" y="181" width="0.2237%" height="15" fill="rgb(224,169,11)"/><text x="49.9940%" y="191.50"></text></g><g><title>explicit_predicates_of (118,010 samples, 0.21%)</title><rect x="50.0727%" y="149" width="0.2075%" height="15" fill="rgb(250,166,2)"/><text x="50.3227%" y="159.50"></text></g><g><title>predicates_of (199,820 samples, 0.35%)</title><rect x="49.9678%" y="181" width="0.3513%" height="15" fill="rgb(242,216,29)"/><text x="50.2178%" y="191.50"></text></g><g><title>predicates_defined_on (178,630 samples, 0.31%)</title><rect x="50.0050%" y="165" width="0.3141%" height="15" fill="rgb(230,116,27)"/><text x="50.2550%" y="175.50"></text></g><g><title>super_predicates_of (69,330 samples, 0.12%)</title><rect x="50.3191%" y="181" width="0.1219%" height="15" fill="rgb(228,99,48)"/><text x="50.5691%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (61,700 samples, 0.11%)</title><rect x="50.3325%" y="165" width="0.1085%" height="15" fill="rgb(253,11,6)"/><text x="50.5825%" y="175.50"></text></g><g><title>type_collecting (1,136,981 samples, 2.00%)</title><rect x="48.6096%" y="213" width="1.9992%" height="15" fill="rgb(247,143,39)"/><text x="48.8596%" y="223.50">t..</text></g><g><title>collect_mod_item_types (1,129,481 samples, 1.99%)</title><rect x="48.6228%" y="197" width="1.9860%" height="15" fill="rgb(236,97,10)"/><text x="48.8728%" y="207.50">c..</text></g><g><title>type_of (94,281 samples, 0.17%)</title><rect x="50.4430%" y="181" width="0.1658%" height="15" fill="rgb(233,208,19)"/><text x="50.6930%" y="191.50"></text></g><g><title>evaluate_obligation (180,441 samples, 0.32%)</title><rect x="52.3453%" y="181" width="0.3173%" height="15" fill="rgb(216,164,2)"/><text x="52.5953%" y="191.50"></text></g><g><title>implied_outlives_bounds (134,071 samples, 0.24%)</title><rect x="52.6626%" y="181" width="0.2357%" height="15" fill="rgb(220,129,5)"/><text x="52.9126%" y="191.50"></text></g><g><title>param_env (70,141 samples, 0.12%)</title><rect x="52.8984%" y="181" width="0.1233%" height="15" fill="rgb(242,17,10)"/><text x="53.1484%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,380,273 samples, 2.43%)</title><rect x="50.7540%" y="197" width="2.4270%" height="15" fill="rgb(242,107,0)"/><text x="51.0040%" y="207.50">ch..</text></g><g><title>evaluate_obligation (138,024 samples, 0.24%)</title><rect x="53.8663%" y="181" width="0.2427%" height="15" fill="rgb(251,28,31)"/><text x="54.1163%" y="191.50"></text></g><g><title>param_env (89,941 samples, 0.16%)</title><rect x="54.1524%" y="181" width="0.1581%" height="15" fill="rgb(233,223,10)"/><text x="54.4024%" y="191.50"></text></g><g><title>check_item_well_formed (761,418 samples, 1.34%)</title><rect x="53.1810%" y="197" width="1.3388%" height="15" fill="rgb(215,21,27)"/><text x="53.4310%" y="207.50"></text></g><g><title>evaluate_obligation (139,080 samples, 0.24%)</title><rect x="56.4480%" y="181" width="0.2445%" height="15" fill="rgb(232,23,21)"/><text x="56.6980%" y="191.50"></text></g><g><title>implied_outlives_bounds (177,872 samples, 0.31%)</title><rect x="56.6925%" y="181" width="0.3128%" height="15" fill="rgb(244,5,23)"/><text x="56.9425%" y="191.50"></text></g><g><title>evaluate_obligation (129,742 samples, 0.23%)</title><rect x="57.2485%" y="165" width="0.2281%" height="15" fill="rgb(226,81,46)"/><text x="57.4985%" y="175.50"></text></g><g><title>layout_of (65,940 samples, 0.12%)</title><rect x="57.4954%" y="165" width="0.1159%" height="15" fill="rgb(247,70,30)"/><text x="57.7454%" y="175.50"></text></g><g><title>object_safety_violations (395,354 samples, 0.70%)</title><rect x="57.0137%" y="181" width="0.6952%" height="15" fill="rgb(212,68,19)"/><text x="57.2637%" y="191.50"></text></g><g><title>param_env (92,090 samples, 0.16%)</title><rect x="57.7127%" y="181" width="0.1619%" height="15" fill="rgb(240,187,13)"/><text x="57.9627%" y="191.50"></text></g><g><title>region_scope_tree (62,630 samples, 0.11%)</title><rect x="57.9199%" y="181" width="0.1101%" height="15" fill="rgb(223,113,26)"/><text x="58.1699%" y="191.50"></text></g><g><title>analysis (28,901,718 samples, 50.82%)</title><rect x="7.3012%" y="245" width="50.8188%" height="15" fill="rgb(206,192,2)"/><text x="7.5512%" y="255.50">analysis</text></g><g><title>type_check_crate (18,646,476 samples, 32.79%)</title><rect x="25.3333%" y="229" width="32.7867%" height="15" fill="rgb(241,108,4)"/><text x="25.5833%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,270,193 samples, 7.51%)</title><rect x="50.6116%" y="213" width="7.5084%" height="15" fill="rgb(247,173,49)"/><text x="50.8616%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,047,511 samples, 3.60%)</title><rect x="54.5198%" y="197" width="3.6002%" height="15" fill="rgb(224,114,35)"/><text x="54.7698%" y="207.50">chec..</text></g><g><title>fn_abi_of_instance (104,002 samples, 0.18%)</title><rect x="60.1999%" y="213" width="0.1829%" height="15" fill="rgb(245,159,27)"/><text x="60.4499%" y="223.50"></text></g><g><title>layout_of (57,420 samples, 0.10%)</title><rect x="60.2818%" y="197" width="0.1010%" height="15" fill="rgb(245,172,44)"/><text x="60.5318%" y="207.50"></text></g><g><title>codegen_module (919,590 samples, 1.62%)</title><rect x="58.8159%" y="229" width="1.6169%" height="15" fill="rgb(236,23,11)"/><text x="59.0659%" y="239.50"></text></g><g><title>codegen_crate (1,330,014 samples, 2.34%)</title><rect x="58.1294%" y="245" width="2.3386%" height="15" fill="rgb(205,117,38)"/><text x="58.3794%" y="255.50">c..</text></g><g><title>LLVM_module_codegen (3,387,814 samples, 5.96%)</title><rect x="60.4930%" y="229" width="5.9569%" height="15" fill="rgb(237,72,25)"/><text x="60.7430%" y="239.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (3,269,233 samples, 5.75%)</title><rect x="60.7015%" y="213" width="5.7484%" height="15" fill="rgb(244,70,9)"/><text x="60.9515%" y="223.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (3,611,206 samples, 6.35%)</title><rect x="60.4680%" y="245" width="6.3497%" height="15" fill="rgb(217,125,39)"/><text x="60.7180%" y="255.50">codegen_..</text></g><g><title>LLVM_module_optimize (209,142 samples, 0.37%)</title><rect x="66.4499%" y="229" width="0.3677%" height="15" fill="rgb(235,36,10)"/><text x="66.6999%" y="239.50"></text></g><g><title>AST_validation (64,011 samples, 0.11%)</title><rect x="66.9898%" y="229" width="0.1126%" height="15" fill="rgb(251,123,47)"/><text x="67.2398%" y="239.50"></text></g><g><title>macro_expand_crate (5,823,988 samples, 10.24%)</title><rect x="67.2206%" y="229" width="10.2405%" height="15" fill="rgb(221,13,13)"/><text x="67.4706%" y="239.50">macro_expand_cr..</text></g><g><title>expand_crate (5,816,848 samples, 10.23%)</title><rect x="67.2331%" y="213" width="10.2279%" height="15" fill="rgb(238,131,9)"/><text x="67.4831%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (160,022 samples, 0.28%)</title><rect x="77.1797%" y="197" width="0.2814%" height="15" fill="rgb(211,50,8)"/><text x="77.4297%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (121,211 samples, 0.21%)</title><rect x="77.4646%" y="229" width="0.2131%" height="15" fill="rgb(245,182,24)"/><text x="77.7146%" y="239.50"></text></g><g><title>finalize_macro_resolutions (100,121 samples, 0.18%)</title><rect x="77.7311%" y="213" width="0.1760%" height="15" fill="rgb(242,14,37)"/><text x="77.9811%" y="223.50"></text></g><g><title>late_resolve_crate (604,886 samples, 1.06%)</title><rect x="77.9072%" y="213" width="1.0636%" height="15" fill="rgb(246,228,12)"/><text x="78.1572%" y="223.50"></text></g><g><title>configure_and_expand (6,958,550 samples, 12.24%)</title><rect x="66.8177%" y="245" width="12.2354%" height="15" fill="rgb(213,55,15)"/><text x="67.0677%" y="255.50">configure_and_expa..</text></g><g><title>resolve_crate (782,188 samples, 1.38%)</title><rect x="77.6777%" y="229" width="1.3753%" height="15" fill="rgb(209,9,3)"/><text x="77.9277%" y="239.50"></text></g><g><title>drop_ast (78,031 samples, 0.14%)</title><rect x="79.0531%" y="245" width="0.1372%" height="15" fill="rgb(230,59,30)"/><text x="79.3031%" y="255.50"></text></g><g><title>early_lint_checks (147,941 samples, 0.26%)</title><rect x="79.2145%" y="245" width="0.2601%" height="15" fill="rgb(209,121,21)"/><text x="79.4645%" y="255.50"></text></g><g><title>free_global_ctxt (2,124,412 samples, 3.74%)</title><rect x="79.4746%" y="245" width="3.7354%" height="15" fill="rgb(220,109,13)"/><text x="79.7246%" y="255.50">free..</text></g><g><title>optimized_mir (169,742 samples, 0.30%)</title><rect x="84.5053%" y="165" width="0.2985%" height="15" fill="rgb(232,18,1)"/><text x="84.7553%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (58,521 samples, 0.10%)</title><rect x="84.7008%" y="149" width="0.1029%" height="15" fill="rgb(215,41,42)"/><text x="84.9508%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (246,613 samples, 0.43%)</title><rect x="84.3740%" y="181" width="0.4336%" height="15" fill="rgb(224,123,36)"/><text x="84.6240%" y="191.50"></text></g><g><title>monomorphization_collector (263,253 samples, 0.46%)</title><rect x="84.3697%" y="197" width="0.4629%" height="15" fill="rgb(240,125,3)"/><text x="84.6197%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (348,174 samples, 0.61%)</title><rect x="84.3518%" y="213" width="0.6122%" height="15" fill="rgb(205,98,50)"/><text x="84.6018%" y="223.50"></text></g><g><title>partition_and_assert_distinct_symbols (74,741 samples, 0.13%)</title><rect x="84.8325%" y="197" width="0.1314%" height="15" fill="rgb(205,185,37)"/><text x="85.0825%" y="207.50"></text></g><g><title>exported_symbols (399,224 samples, 0.70%)</title><rect x="84.3304%" y="229" width="0.7020%" height="15" fill="rgb(238,207,15)"/><text x="84.5804%" y="239.50"></text></g><g><title>eval_to_const_value_raw (73,321 samples, 0.13%)</title><rect x="86.8319%" y="197" width="0.1289%" height="15" fill="rgb(213,199,42)"/><text x="87.0819%" y="207.50"></text></g><g><title>eval_to_const_value_raw (65,801 samples, 0.12%)</title><rect x="86.8451%" y="181" width="0.1157%" height="15" fill="rgb(235,201,11)"/><text x="87.0951%" y="191.50"></text></g><g><title>eval_to_allocation_raw (60,651 samples, 0.11%)</title><rect x="86.8542%" y="165" width="0.1066%" height="15" fill="rgb(207,46,11)"/><text x="87.1042%" y="175.50"></text></g><g><title>is_sized_raw (208,353 samples, 0.37%)</title><rect x="86.9642%" y="197" width="0.3664%" height="15" fill="rgb(241,35,35)"/><text x="87.2142%" y="207.50"></text></g><g><title>evaluate_obligation (176,512 samples, 0.31%)</title><rect x="87.0202%" y="181" width="0.3104%" height="15" fill="rgb(243,32,47)"/><text x="87.2702%" y="191.50"></text></g><g><title>layout_of (551,296 samples, 0.97%)</title><rect x="86.5851%" y="213" width="0.9694%" height="15" fill="rgb(247,202,23)"/><text x="86.8351%" y="223.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (68,880 samples, 0.12%)</title><rect x="87.4334%" y="197" width="0.1211%" height="15" fill="rgb(219,102,11)"/><text x="87.6834%" y="207.50"></text></g><g><title>is_copy_raw (233,881 samples, 0.41%)</title><rect x="89.2239%" y="181" width="0.4112%" height="15" fill="rgb(243,110,44)"/><text x="89.4739%" y="191.50"></text></g><g><title>evaluate_obligation (211,581 samples, 0.37%)</title><rect x="89.2631%" y="165" width="0.3720%" height="15" fill="rgb(222,74,54)"/><text x="89.5131%" y="175.50"></text></g><g><title>needs_drop_raw (270,611 samples, 0.48%)</title><rect x="89.1882%" y="197" width="0.4758%" height="15" fill="rgb(216,99,12)"/><text x="89.4382%" y="207.50"></text></g><g><title>optimized_mir (2,640,416 samples, 4.64%)</title><rect x="85.1014%" y="229" width="4.6427%" height="15" fill="rgb(226,22,26)"/><text x="85.3514%" y="239.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,245,304 samples, 2.19%)</title><rect x="87.5545%" y="213" width="2.1897%" height="15" fill="rgb(217,163,10)"/><text x="87.8045%" y="223.50">m..</text></g><g><title>generate_crate_metadata (3,742,028 samples, 6.58%)</title><rect x="83.2100%" y="245" width="6.5797%" height="15" fill="rgb(213,25,53)"/><text x="83.4600%" y="255.50">generate_..</text></g><g><title>hir_lowering (1,054,961 samples, 1.85%)</title><rect x="89.7898%" y="245" width="1.8550%" height="15" fill="rgb(252,105,26)"/><text x="90.0398%" y="255.50">h..</text></g><g><title>finish_ongoing_codegen (933,459 samples, 1.64%)</title><rect x="91.6640%" y="229" width="1.6413%" height="15" fill="rgb(220,39,43)"/><text x="91.9140%" y="239.50"></text></g><g><title>link_crate (669,127 samples, 1.18%)</title><rect x="93.3053%" y="229" width="1.1765%" height="15" fill="rgb(229,68,48)"/><text x="93.5553%" y="239.50"></text></g><g><title>link_binary (663,947 samples, 1.17%)</title><rect x="93.3144%" y="213" width="1.1674%" height="15" fill="rgb(252,8,32)"/><text x="93.5644%" y="223.50"></text></g><g><title>link_rlib (414,624 samples, 0.73%)</title><rect x="93.7528%" y="197" width="0.7290%" height="15" fill="rgb(223,20,43)"/><text x="94.0028%" y="207.50"></text></g><g><title>link (1,619,776 samples, 2.85%)</title><rect x="91.6447%" y="245" width="2.8481%" height="15" fill="rgb(229,81,49)"/><text x="91.8947%" y="255.50">li..</text></g><g><title>parse_crate (1,696,897 samples, 2.98%)</title><rect x="94.4928%" y="245" width="2.9837%" height="15" fill="rgb(236,28,36)"/><text x="94.7428%" y="255.50">par..</text></g><g><title>prepare_outputs (193,632 samples, 0.34%)</title><rect x="97.4830%" y="245" width="0.3405%" height="15" fill="rgb(249,185,26)"/><text x="97.7330%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (819,308 samples, 1.44%)</title><rect x="97.8234%" y="245" width="1.4406%" height="15" fill="rgb(249,174,33)"/><text x="98.0734%" y="255.50"></text></g><g><title>setup_global_ctxt (71,011 samples, 0.12%)</title><rect x="99.2655%" y="245" width="0.1249%" height="15" fill="rgb(233,201,37)"/><text x="99.5155%" y="255.50"></text></g><g><title>all (56,872,118 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (56,872,118 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (346,703 samples, 0.61%)</title><rect x="99.3904%" y="245" width="0.6096%" height="15" fill="rgb(230,49,44)"/><text x="99.6404%" y="255.50"></text></g></svg></svg>