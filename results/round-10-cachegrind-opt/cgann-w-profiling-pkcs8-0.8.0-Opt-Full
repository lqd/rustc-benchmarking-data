--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name pkcs8 --edition=2021 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C metadata=7d8555c450b0f6ae -C extra-filename=-7d8555c450b0f6ae --out-dir /usr/home/liquid/tmp/.tmp2N3mbk/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmp2N3mbk/target/release/deps --extern der=/usr/home/liquid/tmp/.tmp2N3mbk/target/release/deps/libder-6c2caeb4ad248ef4.rmeta --extern spki=/usr/home/liquid/tmp/.tmp2N3mbk/target/release/deps/libspki-14b22c8d4dbba596.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-pkcs8-0.8.0-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
2,011,960,302 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
192,628,660 ( 9.57%)  ???:llvm::isNonEscapingLocalObject(llvm::Value const*, llvm::SmallDenseMap<llvm::Value const*, bool, 8u, llvm::DenseMapInfo<llvm::Value const*>, llvm::detail::DenseMapPair<llvm::Value const*, bool> >*)
 55,659,699 ( 2.77%)  ???:llvm::InstCombinerImpl::run()
 47,396,783 ( 2.36%)  ./malloc/malloc.c:_int_free
 44,898,135 ( 2.23%)  ./malloc/malloc.c:_int_malloc
 35,550,827 ( 1.77%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
 35,499,882 ( 1.76%)  ???:llvm::InstCombinerImpl::visitCallInst(llvm::CallInst&)
 31,401,833 ( 1.56%)  ???:llvm::BasicAAResult::getModRefInfo(llvm::CallBase const*, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
 30,614,897 ( 1.52%)  ???:llvm::BasicAAResult::alias(llvm::MemoryLocation const&, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
 29,980,628 ( 1.49%)  ./malloc/malloc.c:malloc
 29,405,236 ( 1.46%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 21,570,655 ( 1.07%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
 21,061,216 ( 1.05%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 19,945,022 ( 0.99%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
 15,700,425 ( 0.78%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
 15,441,503 ( 0.77%)  ./malloc/malloc.c:free
 14,715,772 ( 0.73%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
 14,650,932 ( 0.73%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 14,107,886 ( 0.70%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
 13,611,631 ( 0.68%)  ???:llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQuery const&, llvm::OptimizationRemarkEmitter*)
 13,584,926 ( 0.68%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
 12,692,034 ( 0.63%)  ???:(anonymous namespace)::eliminateDeadStores(llvm::Function&, llvm::AAResults&, llvm::MemorySSA&, llvm::DominatorTree&, llvm::PostDominatorTree&, llvm::TargetLibraryInfo const&, llvm::LoopInfo const&) [clone .llvm.5769264623867638418]
 12,484,914 ( 0.62%)  ???:llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&, llvm::LibFunc&) const
 12,369,226 ( 0.61%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 12,317,816 ( 0.61%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
 12,124,985 ( 0.60%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 11,956,638 ( 0.59%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
 11,904,629 ( 0.59%)  ???:llvm::SROA::runOnAlloca(llvm::AllocaInst&)
 11,821,105 ( 0.59%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
 11,431,782 ( 0.57%)  ???:llvm::AttributeList::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::AttributeList>)
 10,778,227 ( 0.54%)  ???:llvm::SROA::splitAlloca(llvm::AllocaInst&, llvm::sroa::AllocaSlices&)
 10,309,110 ( 0.51%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,283,344 ( 0.51%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
  9,694,564 ( 0.48%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
  8,949,057 ( 0.44%)  ???:llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef<llvm::Value*>, llvm::SimplifyQuery const&)
  8,747,238 ( 0.43%)  ???:llvm::Intrinsic::getDeclaration(llvm::Module*, unsigned int, llvm::ArrayRef<llvm::Type*>)
  8,420,352 ( 0.42%)  ???:llvm::InstCombinerImpl::visitAllocaInst(llvm::AllocaInst&)
  8,329,942 ( 0.41%)  ???:llvm::Type::isSizedDerivedType(llvm::SmallPtrSetImpl<llvm::Type*>*) const
  8,314,134 ( 0.41%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
  7,571,131 ( 0.38%)  ???:llvm::AAResults::Model<llvm::BasicAAResult>::getModRefBehavior(llvm::CallBase const*)
  7,460,126 ( 0.37%)  ???:(anonymous namespace)::EarlyCSE::run() [clone .llvm.7062997131228810369]
  7,137,696 ( 0.35%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
  7,135,360 ( 0.35%)  ???:llvm::ValueHandleBase::AddToUseList()
  7,053,952 ( 0.35%)  ???:llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm::Optional<llvm::MemoryLocation> const&, llvm::AAQueryInfo&)
  7,012,010 ( 0.35%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  6,940,908 ( 0.34%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  6,898,300 ( 0.34%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
  6,855,965 ( 0.34%)  ???:llvm::InstCombinerImpl::visitAllocSite(llvm::Instruction&)
  6,674,526 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::scan_escape
  6,671,045 ( 0.33%)  ???:llvm::GVN::processBlock(llvm::BasicBlock*)
  6,627,834 ( 0.33%)  ???:llvm::SROA::rewritePartition(llvm::AllocaInst&, llvm::sroa::AllocaSlices&, llvm::sroa::Partition&)
  6,523,824 ( 0.32%)  ???:llvm::removeUnreachableBlocks(llvm::Function&, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*)
  6,300,749 ( 0.31%)  ???:llvm::AttributeList::addParamAttribute(llvm::LLVMContext&, llvm::ArrayRef<unsigned int>, llvm::Attribute) const
  6,119,508 ( 0.30%)  ./malloc/malloc.c:malloc_consolidate
  6,105,920 ( 0.30%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
  6,079,411 ( 0.30%)  ???:llvm::MemorySSA::buildMemorySSA(llvm::BatchAAResults&)
  6,065,877 ( 0.30%)  ???:isKnownNonZero(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  5,910,562 ( 0.29%)  ???:computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
  5,798,661 ( 0.29%)  ???:(anonymous namespace)::ClobberWalker<llvm::AAResults>::findClobber(llvm::MemoryAccess*, (anonymous namespace)::UpwardsMemoryQuery&, unsigned int&)
  5,240,324 ( 0.26%)  ???:llvm::AAResults::Model<llvm::BasicAAResult>::pointsToConstantMemory(llvm::MemoryLocation const&, llvm::AAQueryInfo&, bool)
  5,210,612 ( 0.26%)  ???:llvm::LibCallSimplifier::optimizeMemCpy(llvm::CallInst*, llvm::IRBuilderBase&)
  5,073,046 ( 0.25%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
  5,058,978 ( 0.25%)  ./malloc/malloc.c:unlink_chunk.constprop.0
  5,038,999 ( 0.25%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
  4,927,187 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
  4,845,521 ( 0.24%)  ./elf/dl-lookup.c:do_lookup_x
  4,822,125 ( 0.24%)  ???:llvm::SROA::runImpl(llvm::Function&, llvm::DominatorTree&, llvm::AssumptionCache&)
  4,797,278 ( 0.24%)  ???:llvm::InstCombinerImpl::visitBitCast(llvm::BitCastInst&)
  4,619,033 ( 0.23%)  ???:llvm::Value::stripPointerCasts() const
  4,604,719 ( 0.23%)  ???:llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int)
  4,600,017 ( 0.23%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
  4,598,590 ( 0.23%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  4,535,978 ( 0.23%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
  4,428,757 ( 0.22%)  ???:llvm::Instruction::eraseFromParent()
  4,316,575 ( 0.21%)  ???:(anonymous namespace)::MachineCopyPropagation::runOnMachineFunction(llvm::MachineFunction&)
  4,244,330 ( 0.21%)  ???:llvm::PMTopLevelManager::setLastUser(llvm::ArrayRef<llvm::Pass*>, llvm::Pass*)
  4,180,100 ( 0.21%)  ???:llvm_regexec
  4,148,009 ( 0.21%)  ???:llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const
  4,141,271 ( 0.21%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  4,126,062 ( 0.21%)  ???:llvm::DemandedBits::isInstructionDead(llvm::Instruction*)
  4,074,877 ( 0.20%)  ???:updateCGAndAnalysisManagerForPass(llvm::LazyCallGraph&, llvm::LazyCallGraph::SCC&, llvm::LazyCallGraph::Node&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::CGSCCUpdateResult&, llvm::AnalysisManager<llvm::Function>&, bool) [clone .llvm.5426518467876156712]
  4,056,377 ( 0.20%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
  3,829,634 ( 0.19%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
  3,808,330 ( 0.19%)  ???:llvm::MemoryLocation::getForArgument(llvm::CallBase const*, unsigned int, llvm::TargetLibraryInfo const*)
  3,781,108 ( 0.19%)  ???:(anonymous namespace)::AggressiveDeadCodeElimination::performDeadCodeElimination()
  3,736,954 ( 0.19%)  ???:(anonymous namespace)::PruningFunctionCloner::CloneBlock(llvm::BasicBlock const*, llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void>, false, true>, std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> >&)
  3,671,358 ( 0.18%)  ???:getAdjustedPtr(llvm::IRBuilder<llvm::ConstantFolder, (anonymous namespace)::IRBuilderPrefixedInserter>&, llvm::DataLayout const&, llvm::Value*, llvm::APInt, llvm::Type*, llvm::Twine const&)
  3,670,072 ( 0.18%)  ???:llvm::ReassociatePass::BuildRankMap(llvm::Function&, llvm::ReversePostOrderTraversal<llvm::Function*, llvm::GraphTraits<llvm::Function*> >&)
  3,620,409 ( 0.18%)  ???:SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
  3,616,080 ( 0.18%)  ???:llvm::PMTopLevelManager::AUFoldingSetNode::Profile(llvm::FoldingSetNodeID&, llvm::AnalysisUsage const&)
  3,594,727 ( 0.18%)  ???:getNaturalGEPRecursively(llvm::IRBuilder<llvm::ConstantFolder, (anonymous namespace)::IRBuilderPrefixedInserter>&, llvm::DataLayout const&, llvm::Value*, llvm::Type*, llvm::APInt&, llvm::Type*, llvm::SmallVectorImpl<llvm::Value*>&, llvm::Twine const&)
  3,580,227 ( 0.18%)  ???:runImpl(llvm::Function&, llvm::LazyValueInfo*, llvm::DominatorTree*, llvm::SimplifyQuery const&) [clone .llvm.16011871802505272439]
  3,569,415 ( 0.18%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
  3,556,049 ( 0.18%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
  3,494,579 ( 0.17%)  ???:llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>)
  3,430,911 ( 0.17%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
  3,397,718 ( 0.17%)  ???:llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&)
  3,388,240 ( 0.17%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
  3,296,045 ( 0.16%)  ???:llvm::FindFunctionBackedges(llvm::Function const&, llvm::SmallVectorImpl<std::pair<llvm::BasicBlock const*, llvm::BasicBlock const*> >&)
  3,266,380 ( 0.16%)  ???:llvm::ConstantInt::get(llvm::IntegerType*, unsigned long, bool)
  3,168,551 ( 0.16%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
  3,152,691 ( 0.16%)  ???:llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout const&, llvm::APInt&, llvm::function_ref<bool (llvm::Value&, llvm::APInt&)>) const
  3,138,373 ( 0.16%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
  3,134,544 ( 0.16%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
  3,092,060 ( 0.15%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
  3,072,749 ( 0.15%)  ???:llvm::InstCombinerImpl::visitStoreInst(llvm::StoreInst&)
  3,051,578 ( 0.15%)  ???:???
  3,036,150 ( 0.15%)  ???:llvm::InstCombinerImpl::visitLoadInst(llvm::LoadInst&)
  3,001,154 ( 0.15%)  ???:(anonymous namespace)::BitcodeReader::parseFunctionBody(llvm::Function*)
  2,995,471 ( 0.15%)  ???:llvm::PointerMayBeCaptured(llvm::Value const*, llvm::CaptureTracker*, unsigned int)
  2,980,919 ( 0.15%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
  2,974,932 ( 0.15%)  ???:(anonymous namespace)::BitcodeReader::parseModule(unsigned long, bool, llvm::function_ref<llvm::Optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (llvm::StringRef)>)
  2,941,948 ( 0.15%)  ???:DecodeIITType(unsigned int&, llvm::ArrayRef<unsigned char>, IIT_Info, llvm::SmallVectorImpl<llvm::Intrinsic::IITDescriptor>&) [clone .llvm.4021314427178024980]
  2,921,500 ( 0.15%)  ???:llvm::Twine::printOneChild(llvm::raw_ostream&, llvm::Twine::Child, llvm::Twine::NodeKind) const
  2,920,749 ( 0.15%)  ???:(anonymous namespace)::AllocaDerivedValueTracker::walk(llvm::Value*)
  2,918,833 ( 0.15%)  ???:llvm::MD5::final(llvm::MD5::MD5Result&)
  2,914,533 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
  2,893,811 ( 0.14%)  ???:llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
  2,884,084 ( 0.14%)  ???:llvm::SHA1::hashBlock()
  2,861,378 ( 0.14%)  ???:(anonymous namespace)::CVPLatticeFunc::ComputeInstructionState(llvm::Instruction&, llvm::DenseMap<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::DenseMapInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > >, llvm::detail::DenseMapPair<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal> >&, llvm::SparseSolver<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::LatticeKeyInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > > >&)
  2,855,073 ( 0.14%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
  2,816,969 ( 0.14%)  ???:llvm::SCCPInstVisitor::solve()
  2,814,798 ( 0.14%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
  2,724,423 ( 0.14%)  ???:getMangledTypeStr[abi:cxx11](llvm::Type*, bool&) [clone .llvm.4021314427178024980]
  2,715,267 ( 0.13%)  ???:llvm::LivePhysRegs::stepBackward(llvm::MachineInstr const&)
  2,655,323 ( 0.13%)  ???:(anonymous namespace)::DeadMachineInstructionElim::eliminateDeadMI(llvm::MachineFunction&)
  2,607,048 ( 0.13%)  ???:(anonymous namespace)::DAGCombiner::visitSTORE(llvm::SDNode*)
  2,488,684 ( 0.12%)  ???:llvm::Instruction::getAAMetadata(llvm::AAMDNodes&, bool) const
  2,469,896 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs:alloc::string::String::push
  2,418,911 ( 0.12%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
  2,416,822 ( 0.12%)  ???:llvm::IDFCalculatorBase<llvm::BasicBlock, false>::calculate(llvm::SmallVectorImpl<llvm::BasicBlock*>&)
  2,382,256 ( 0.12%)  ./stdlib/msort.c:msort_with_tmp.part.0
  2,380,098 ( 0.12%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
  2,339,669 ( 0.12%)  ???:llvm::FoldingSet<llvm::SDNode>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
  2,331,648 ( 0.12%)  ???:llvm::RegisterClassInfo::computePSetLimit(unsigned int) const
  2,312,802 ( 0.11%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
  2,299,968 ( 0.11%)  ???:llvm::getObjectSize(llvm::Value const*, unsigned long&, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::ObjectSizeOpts)
  2,287,372 ( 0.11%)  ???:llvm::Type::getPrimitiveSizeInBits() const
  2,283,708 ( 0.11%)  ???:llvm::LiveVariables::HandleRegMask(llvm::MachineOperand const&)
  2,272,610 ( 0.11%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
  2,228,868 ( 0.11%)  ???:llvm::MemoryLocation::getForDest(llvm::AnyMemIntrinsic const*)
  2,227,523 ( 0.11%)  ???:llvm::AAResults::Model<llvm::GlobalsAAResult>::getModRefBehavior(llvm::CallBase const*)
  2,182,478 ( 0.11%)  ???:DecodeFixedType(llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>&, llvm::ArrayRef<llvm::Type*>, llvm::LLVMContext&) [clone .llvm.4021314427178024980]
  2,159,906 ( 0.11%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
  2,139,033 ( 0.11%)  ./elf/do-rel.h:_dl_relocate_object
  2,094,692 ( 0.10%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
  2,088,634 ( 0.10%)  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S:__memchr_avx2
  2,081,569 ( 0.10%)  ???:llvm::BaseIndexOffset::computeAliasing(llvm::SDNode const*, llvm::Optional<long>, llvm::SDNode const*, llvm::Optional<long>, llvm::SelectionDAG const&, bool&)
  2,077,368 ( 0.10%)  ???:llvm::Instruction::~Instruction()
  2,060,077 ( 0.10%)  ???:llvm::GVN::ValueTable::createExpr(llvm::Instruction*)
  2,047,643 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
  2,035,653 ( 0.10%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::FindRoots(llvm::DominatorTreeBase<llvm::BasicBlock, true> const&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
  2,021,523 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:alloc::string::String::push
  2,019,654 ( 0.10%)  ???:llvm::X86_MC::initLLVMToSEHAndCVRegMapping(llvm::MCRegisterInfo*)
  2,015,430 ( 0.10%)  ???:(anonymous namespace)::SimplifyCFGOpt::simplifyCondBranch(llvm::BranchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&)
  2,014,091 ( 0.10%)  ???:(anonymous namespace)::TailRecursionEliminator::eliminate(llvm::Function&, llvm::TargetTransformInfo const*, llvm::AAResults*, llvm::OptimizationRemarkEmitter*, llvm::DomTreeUpdater&)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs
--------------------------------------------------------------------------------
Ir                 

-- line 73 ----------------------------------------
        .                       EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning
        .                   )
        .               }
        .           }
        .           
        .           /// Takes a contents of a literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           /// Values are returned through invoking of the provided callback.
    2,736 ( 0.00%)  pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
        .               match mode {
        .                   Mode::Char | Mode::Byte => {
        .                       let mut chars = literal_text.chars();
        .                       let result = unescape_char_or_byte(&mut chars, mode);
        .                       // The Chars iterator moved forward.
-- line 89 ----------------------------------------
-- line 91 ----------------------------------------
        .                   }
        .                   Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),
        .                   // NOTE: Raw strings do not perform any explicit character escaping, here we
        .                   // only translate CRLF to LF and produce errors on bare CR.
        .                   Mode::RawStr | Mode::RawByteStr => {
        .                       unescape_raw_str_or_byte_str(literal_text, mode, callback)
        .                   }
        .               }
    1,216 ( 0.00%)  }
        .           
        .           /// Takes a contents of a byte, byte string or raw byte string (without quotes)
        .           /// and produces a sequence of bytes or errors.
        .           /// Values are returned through invoking of the provided callback.
        .           pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<u8, EscapeError>),
        .           {
-- line 107 ----------------------------------------
-- line 136 ----------------------------------------
        .               Byte,
        .               ByteStr,
        .               RawStr,
        .               RawByteStr,
        .           }
        .           
        .           impl Mode {
        .               pub fn in_single_quotes(self) -> bool {
      304 ( 0.00%)          match self {
        .                       Mode::Char | Mode::Byte => true,
        .                       Mode::Str | Mode::ByteStr | Mode::RawStr | Mode::RawByteStr => false,
        .                   }
        .               }
        .           
      304 ( 0.00%)      pub fn in_double_quotes(self) -> bool {
        .                   !self.in_single_quotes()
      152 ( 0.00%)      }
        .           
        .               pub fn is_bytes(self) -> bool {
        .                   match self {
        .                       Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,
        .                       Mode::Char | Mode::Str | Mode::RawStr => false,
        .                   }
        .               }
        .           }
        .           
2,181,170 ( 0.11%)  fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
1,048,361 ( 0.05%)      if first_char != '\\' {
        .                   // Previous character was not a slash, and we don't expect it to be
        .                   // an escape-only character.
        .                   return match first_char {
        .                       '\t' | '\n' => Err(EscapeError::EscapeOnlyChar),
        .                       '\r' => Err(EscapeError::BareCarriageReturn),
        .                       '\'' if mode.in_single_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       '"' if mode.in_double_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       _ => {
  211,349 ( 0.01%)                  if mode.is_bytes() && !first_char.is_ascii() {
        .                               // Byte literal can't be a non-ascii character.
        .                               return Err(EscapeError::NonAsciiCharInByte);
        .                           }
        .                           Ok(first_char)
        .                       }
        .                   };
        .               }
        .           
        .               // Previous character is '\\', try to unescape it.
        .           
   20,304 ( 0.00%)      let second_char = chars.next().ok_or(EscapeError::LoneSlash)?;
        .           
        .               let res = match second_char {
        .                   '"' => '"',
        .                   'n' => '\n',
        .                   'r' => '\r',
        .                   't' => '\t',
        .                   '\\' => '\\',
        .                   '\'' => '\'',
-- line 191 ----------------------------------------
-- line 263 ----------------------------------------
        .                                   value = value * 16 + digit;
        .                               }
        .                           };
        .                       }
        .                   }
        .                   _ => return Err(EscapeError::InvalidEscape),
        .               };
        .               Ok(res)
2,617,404 ( 0.13%)  }
        .           
        .           fn unescape_char_or_byte(chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
        .               let first_char = chars.next().ok_or(EscapeError::ZeroChars)?;
        .               let res = scan_escape(first_char, chars, mode)?;
        .               if chars.next().is_some() {
        .                   return Err(EscapeError::MoreThanOneChar);
        .               }
        .               Ok(res)
-- line 279 ----------------------------------------
-- line 280 ----------------------------------------
        .           }
        .           
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           fn unescape_str_or_byte_str<F>(src: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
      527 ( 0.00%)      assert!(mode.in_double_quotes());
        .               let initial_len = src.len();
      152 ( 0.00%)      let mut chars = src.chars();
        .               while let Some(first_char) = chars.next() {
1,090,585 ( 0.05%)          let start = initial_len - chars.as_str().len() - first_char.len_utf8();
        .           
1,281,630 ( 0.06%)          let unescaped_char = match first_char {
        .                       '\\' => {
        .                           let second_char = chars.clone().next();
   13,536 ( 0.00%)                  match second_char {
        .                               Some('\n') => {
        .                                   // Rust language specification requires us to skip whitespaces
        .                                   // if unescaped '\' character is followed by '\n'.
        .                                   // For details see [Rust language reference]
        .                                   // (https://doc.rust-lang.org/reference/tokens.html#string-literals).
        .                                   skip_ascii_whitespace(&mut chars, start, callback);
        .                                   continue;
        .                               }
    6,768 ( 0.00%)                      _ => scan_escape(first_char, &mut chars, mode),
        .                           }
        .                       }
        .                       '\n' => Ok('\n'),
        .                       '\t' => Ok('\t'),
        .                       _ => scan_escape(first_char, &mut chars, mode),
        .                   };
  439,931 ( 0.02%)          let end = initial_len - chars.as_str().len();
  691,321 ( 0.03%)          callback(start..end, unescaped_char);
        .               }
        .           
        .               fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)
        .               where
        .                   F: FnMut(Range<usize>, Result<char, EscapeError>),
        .               {
        .                   let tail = chars.as_str();
        .                   let first_non_space = tail
-- line 322 ----------------------------------------
-- line 344 ----------------------------------------
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of characters or errors.
        .           /// NOTE: Raw strings do not perform any explicit character escaping, here we
        .           /// only translate CRLF to LF and produce errors on bare CR.
        .           fn unescape_raw_str_or_byte_str<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
      162 ( 0.00%)      assert!(mode.in_double_quotes());
        .               let initial_len = literal_text.len();
        .           
        .               let mut chars = literal_text.chars();
        .               while let Some(curr) = chars.next() {
        .                   let start = initial_len - chars.as_str().len() - curr.len_utf8();
        .           
        .                   let result = match curr {
        .                       '\r' => Err(EscapeError::BareCarriageReturnInRawString),
-- line 360 ----------------------------------------

2,122,757 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs
--------------------------------------------------------------------------------
Ir                 

-- line 375 ----------------------------------------
        .               /// ```
        .               /// let s = String::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> String {
    1,215 ( 0.00%)          String { vec: Vec::new() }
        .               }
        .           
        .               /// Creates a new empty `String` with a particular capacity.
        .               ///
        .               /// `String`s have an internal buffer to hold their data. The capacity is
        .               /// the length of that buffer, and can be queried with the [`capacity`]
        .               /// method. This method creates an empty `String`, but one with an initial
        .               /// buffer that can hold `capacity` bytes. This is useful when you may be
-- line 391 ----------------------------------------
-- line 420 ----------------------------------------
        .               /// // ...but this may make the string reallocate
        .               /// s.push('a');
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub fn with_capacity(capacity: usize) -> String {
    6,988 ( 0.00%)          String { vec: Vec::with_capacity(capacity) }
        .               }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Since we don't
        .               // require this method for testing purposes, I'll just stub it
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[inline]
        .               #[cfg(test)]
-- line 436 ----------------------------------------
-- line 492 ----------------------------------------
        .               ///
        .               /// [`from_utf8_unchecked`]: String::from_utf8_unchecked
        .               /// [`Vec<u8>`]: crate::vec::Vec "Vec"
        .               /// [`&str`]: prim@str "&str"
        .               /// [`into_bytes`]: String::into_bytes
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {
      905 ( 0.00%)          match str::from_utf8(&vec) {
        .                       Ok(..) => Ok(String { vec }),
      150 ( 0.00%)              Err(e) => Err(FromUtf8Error { bytes: vec, error: e }),
        .                   }
        .               }
        .           
        .               /// Converts a slice of bytes to a string, including invalid characters.
        .               ///
        .               /// Strings are made of bytes ([`u8`]), and a slice of bytes
        .               /// ([`&[u8]`][byteslice]) is made of bytes, so this function converts
        .               /// between the two. Not all byte slices are valid strings, however: strings
-- line 510 ----------------------------------------
-- line 550 ----------------------------------------
        .               /// let input = b"Hello \xF0\x90\x80World";
        .               /// let output = String::from_utf8_lossy(input);
        .               ///
        .               /// assert_eq!("Hello �World", output);
        .               /// ```
        .               #[must_use]
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      603 ( 0.00%)      pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {
      670 ( 0.00%)          let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();
        .           
      335 ( 0.00%)          let first_valid = if let Some(chunk) = iter.next() {
        .                       let lossy::Utf8LossyChunk { valid, broken } = chunk;
       67 ( 0.00%)              if broken.is_empty() {
        .                           debug_assert_eq!(valid.len(), v.len());
       67 ( 0.00%)                  return Cow::Borrowed(valid);
        .                       }
        .                       valid
        .                   } else {
        .                       return Cow::Borrowed("");
        .                   };
        .           
        .                   const REPLACEMENT: &str = "\u{FFFD}";
        .           
-- line 573 ----------------------------------------
-- line 578 ----------------------------------------
        .                   for lossy::Utf8LossyChunk { valid, broken } in iter {
        .                       res.push_str(valid);
        .                       if !broken.is_empty() {
        .                           res.push_str(REPLACEMENT);
        .                       }
        .                   }
        .           
        .                   Cow::Owned(res)
      536 ( 0.00%)      }
        .           
        .               /// Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]
        .               /// if `v` contains any invalid data.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 594 ----------------------------------------
-- line 762 ----------------------------------------
        .               /// };
        .               ///
        .               /// assert_eq!("💖", sparkle_heart);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {
    1,055 ( 0.00%)          String { vec: bytes }
        .               }
        .           
        .               /// Converts a `String` into a byte vector.
        .               ///
        .               /// This consumes the `String`, so we do not need to copy its contents.
        .               ///
        .               /// # Examples
        .               ///
-- line 778 ----------------------------------------
-- line 1138 ----------------------------------------
        .               /// s.push('2');
        .               /// s.push('3');
        .               ///
        .               /// assert_eq!("abc123", s);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
1,347,228 ( 0.07%)      pub fn push(&mut self, ch: char) {
        .                   match ch.len_utf8() {
        .                       1 => self.vec.push(ch as u8),
        .                       _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
        .                   }
1,122,690 ( 0.06%)      }
        .           
        .               /// Returns a byte slice of this `String`'s contents.
        .               ///
        .               /// The inverse of this method is [`from_utf8`].
        .               ///
        .               /// [`from_utf8`]: String::from_utf8
        .               ///
        .               /// # Examples
-- line 1159 ----------------------------------------
-- line 1543 ----------------------------------------
        .               /// let fancy_f = String::from("ƒoo");
        .               /// assert_eq!(fancy_f.len(), 4);
        .               /// assert_eq!(fancy_f.chars().count(), 3);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn len(&self) -> usize {
       19 ( 0.00%)          self.vec.len()
        .               }
        .           
        .               /// Returns `true` if this `String` has a length of zero, and `false` otherwise.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 1559 ----------------------------------------
-- line 1563 ----------------------------------------
        .               ///
        .               /// v.push('a');
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   12,459 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the string into two at the given byte index.
        .               ///
        .               /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and
        .               /// the returned `String` contains bytes `[at, len)`. `at` must be on the
        .               /// boundary of a UTF-8 code point.
        .               ///
-- line 1579 ----------------------------------------
-- line 1845 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt("invalid utf-16: lone surrogate found", f)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Clone for String {
    2,400 ( 0.00%)      fn clone(&self) -> Self {
    1,200 ( 0.00%)          String { vec: self.vec.clone() }
    2,800 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.vec.clone_from(&source.vec);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl FromIterator<char> for String {
       10 ( 0.00%)      fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String {
        .                   let mut buf = String::new();
        .                   buf.extend(iter);
        .                   buf
       12 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "string_from_iter_by_ref", since = "1.17.0")]
        .           impl<'a> FromIterator<&'a char> for String {
        .               fn from_iter<I: IntoIterator<Item = &'a char>>(iter: I) -> String {
        .                   let mut buf = String::new();
        .                   buf.extend(iter);
-- line 1877 ----------------------------------------
-- line 1937 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Extend<char> for String {
        .               fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {
       10 ( 0.00%)          let iterator = iter.into_iter();
        .                   let (lower_bound, _) = iterator.size_hint();
        .                   self.reserve(lower_bound);
        6 ( 0.00%)          iterator.for_each(move |c| self.push(c));
        .               }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, c: char) {
        .                   self.push(c);
        .               }
        .           
        .               #[inline]
-- line 1956 ----------------------------------------
-- line 2128 ----------------------------------------
        .               fn default() -> String {
        .                   String::new()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Display for String {
        .               #[inline]
      915 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    1,873 ( 0.00%)          fmt::Display::fmt(&**self, f)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Debug for String {
        .               #[inline]
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Debug::fmt(&**self, f)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl hash::Hash for String {
        .               #[inline]
        .               fn hash<H: hash::Hasher>(&self, hasher: &mut H) {
    1,111 ( 0.00%)          (**self).hash(hasher)
        .               }
        .           }
        .           
        .           /// Implements the `+` operator for concatenating two strings.
        .           ///
        .           /// This consumes the `String` on the left-hand side and re-uses its buffer (growing it if
        .           /// necessary). This is done to avoid allocating a new `String` and copying the entire contents on
        .           /// every operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by
-- line 2161 ----------------------------------------
-- line 2194 ----------------------------------------
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Add<&str> for String {
        .               type Output = String;
        .           
        .               #[inline]
        .               fn add(mut self, other: &str) -> String {
        .                   self.push_str(other);
        2 ( 0.00%)          self
        .               }
        .           }
        .           
        .           /// Implements the `+=` operator for appending to a `String`.
        .           ///
        .           /// This has the same behavior as the [`push_str`][String::push_str] method.
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "stringaddassign", since = "1.12.0")]
-- line 2210 ----------------------------------------
-- line 2388 ----------------------------------------
        .           impl<T: fmt::Display + ?Sized> ToString for T {
        .               // A common guideline is to not inline generic functions. However,
        .               // removing `#[inline]` from this method causes non-negligible regressions.
        .               // See <https://github.com/rust-lang/rust/pull/74852>, the last attempt
        .               // to try to remove it.
        .               #[inline]
        .               default fn to_string(&self) -> String {
        .                   let mut buf = String::new();
    2,799 ( 0.00%)          let mut formatter = core::fmt::Formatter::new(&mut buf);
        .                   // Bypass format_args!() to avoid write_str with zero-length strs
    1,142 ( 0.00%)          fmt::Display::fmt(self, &mut formatter)
        .                       .expect("a Display implementation returned an error unexpectedly");
        .                   buf
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "char_to_string_specialization", since = "1.46.0")]
        .           impl ToString for char {
-- line 2406 ----------------------------------------
-- line 2620 ----------------------------------------
        .               /// ```
        .               /// # use std::borrow::Cow;
        .               /// assert_eq!(Cow::from("eggplant"), Cow::Borrowed("eggplant"));
        .               /// ```
        .               ///
        .               /// [`Borrowed`]: crate::borrow::Cow::Borrowed "borrow::Cow::Borrowed"
        .               #[inline]
        .               fn from(s: &'a str) -> Cow<'a, str> {
    1,872 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a> From<String> for Cow<'a, str> {
        .               /// Converts a [`String`] into an [`Owned`] variant.
        .               /// No heap allocation is performed, and the string
-- line 2636 ----------------------------------------
-- line 2643 ----------------------------------------
        .               /// let s = "eggplant".to_string();
        .               /// let s2 = "eggplant".to_string();
        .               /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));
        .               /// ```
        .               ///
        .               /// [`Owned`]: crate::borrow::Cow::Owned "borrow::Cow::Owned"
        .               #[inline]
        .               fn from(s: String) -> Cow<'a, str> {
      365 ( 0.00%)          Cow::Owned(s)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "cow_from_string_ref", since = "1.28.0")]
        .           impl<'a> From<&'a String> for Cow<'a, str> {
        .               /// Converts a [`String`] reference into a [`Borrowed`] variant.
        .               /// No heap allocation is performed, and the string
-- line 2659 ----------------------------------------
-- line 2709 ----------------------------------------
        .               /// ```
        .               /// let s1 = String::from("hello world");
        .               /// let v1 = Vec::from(s1);
        .               ///
        .               /// for b in v1 {
        .               ///     println!("{}", b);
        .               /// }
        .               /// ```
      100 ( 0.00%)      fn from(string: String) -> Vec<u8> {
      400 ( 0.00%)          string.into_bytes()
      100 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Write for String {
        .               #[inline]
   61,488 ( 0.00%)      fn write_str(&mut self, s: &str) -> fmt::Result {
        .                   self.push_str(s);
        .                   Ok(())
   53,802 ( 0.00%)      }
        .           
        .               #[inline]
   19,200 ( 0.00%)      fn write_char(&mut self, c: char) -> fmt::Result {
        8 ( 0.00%)          self.push(c);
        .                   Ok(())
   19,200 ( 0.00%)      }
        .           }
        .           
        .           /// A draining iterator for `String`.
        .           ///
        .           /// This struct is created by the [`drain`] method on [`String`]. See its
        .           /// documentation for more.
        .           ///
        .           /// [`drain`]: String::drain
-- line 2743 ----------------------------------------

    1,338 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  334,869 ( 0.02%)          Vec { buf: RawVec::NEW, len: 0 }
       56 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  139,178 ( 0.01%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    7,199 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   31,738 ( 0.00%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   41,293 ( 0.00%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,721 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    2,607 ( 0.00%)          if self.capacity() > self.len {
    1,359 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      509 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   20,117 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   17,266 ( 0.00%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   19,042 ( 0.00%)              self.len = len;
      627 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   24,108 ( 0.00%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  433,932 ( 0.02%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  775,218 ( 0.04%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   69,136 ( 0.00%)          self.len = new_len;
    1,118 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      840 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      137 ( 0.00%)          let len = self.len();
      346 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      558 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      786 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      558 ( 0.00%)              self.set_len(len + 1);
        .                   }
      720 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       98 ( 0.00%)          let len = self.len();
      355 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      592 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      244 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      101 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   26,949 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    1,040 ( 0.00%)          self.retain_mut(|elem| f(elem));
   26,320 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    3,472 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    2,426 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,628 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   44,585 ( 0.00%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   10,781 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      282 ( 0.00%)                      g.processed_len += 1;
       46 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        8 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      846 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      703 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    1,533 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      312 ( 0.00%)          let len = self.len();
      862 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      762 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       74 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      422 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    1,752 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       75 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,810,450 ( 0.09%)          if self.len == self.buf.capacity() {
   57,241 ( 0.00%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   24,321 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
2,421,593 ( 0.12%)              self.len += 1;
        .                   }
       60 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  113,288 ( 0.01%)          if self.len == 0 {
       24 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   84,001 ( 0.00%)                  self.len -= 1;
   17,282 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      140 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      120 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    8,758 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   71,687 ( 0.00%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    2,306 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
      192 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      447 ( 0.00%)              Drain {
        .                           tail_start: end,
      174 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   34,661 ( 0.00%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   39,660 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      190 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      134 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    2,870 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      382 ( 0.00%)          let len = self.len();
      764 ( 0.00%)          if new_len > len {
    3,059 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    2,488 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       39 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    2,330 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      233 ( 0.00%)          let len = self.len();
        .           
      699 ( 0.00%)          if new_len > len {
      765 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      361 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
       53 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   19,064 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      678 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   29,018 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   15,153 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
      220 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    5,686 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   31,164 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    6,694 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  618,318 ( 0.03%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  156,750 ( 0.01%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   21,313 ( 0.00%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   26,352 ( 0.00%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   12,150 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       32 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  182,415 ( 0.01%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   64,311 ( 0.00%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   27,802 ( 0.00%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
        .               fn into_iter(self) -> slice::Iter<'a, T> {
       10 ( 0.00%)          self.iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
      728 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
      472 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   65,394 ( 0.00%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
      472 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
       28 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   24,891 ( 0.00%)          while let Some(element) = iterator.next() {
    2,418 ( 0.00%)              let len = self.len();
   38,801 ( 0.00%)              if len == self.capacity() {
      481 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   31,308 ( 0.00%)                  self.set_len(len + 1);
        .                       }
        .                   }
      307 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      203 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      445 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      720 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   82,909 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   39,099 ( 0.00%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   97,268 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  186,498 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    2,666 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   78,452 ( 0.00%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      749 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      567 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   83,513 ( 0.00%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      926 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
        6 ( 0.00%)          self.position += bytes;
        6 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      798 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    1,414 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   25,830 ( 0.00%)      fn read_u32(&mut self) -> u32 {
  112,285 ( 0.01%)          read_leb128!(self, read_u32_leb128)
   51,660 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.03%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.00%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,177,034 ( 0.06%)          let value = self.data[self.position];
  237,400 ( 0.01%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  155,429 ( 0.01%)      fn read_usize(&mut self) -> usize {
  155,441 ( 0.01%)          read_leb128!(self, read_usize_leb128)
  310,858 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   11,932 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   18,843 ( 0.00%)          let len = self.read_usize();
  111,436 ( 0.01%)          let sentinel = self.data[self.position + len];
   27,868 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   69,670 ( 0.00%)          self.position += len + 1;
   14,091 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      469 ( 0.00%)          let start = self.position;
    2,272 ( 0.00%)          self.position += s.len();
      469 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  401,210 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
24,082,953 ( 1.20%)  events annotated

