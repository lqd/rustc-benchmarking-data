--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name deunicode --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C metadata=78f2116661b6ec54 -C extra-filename=-78f2116661b6ec54 --out-dir /usr/home/liquid/tmp/.tmpUWuGNM/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmpUWuGNM/target/release/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-deunicode-1.3.1-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,450,856,901 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
103,713,256 ( 7.15%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
 67,876,145 ( 4.68%)  ???:(anonymous namespace)::ModuleBitcodeWriter::writeConstants(unsigned int, unsigned int, bool)
 43,697,684 ( 3.01%)  ???:void llvm::BitstreamWriter::EmitRecordWithAbbrevImpl<unsigned long>(unsigned int, llvm::ArrayRef<unsigned long>, llvm::StringRef, llvm::Optional<unsigned int>)
 37,725,665 ( 2.60%)  ./malloc/malloc.c:_int_free
 36,728,491 ( 2.53%)  ./malloc/malloc.c:_int_malloc
 25,035,434 ( 1.73%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ascii.rs:core::ascii::escape_default
 24,015,177 ( 1.66%)  ./malloc/malloc.c:malloc
 22,304,510 ( 1.54%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ascii.rs:<core::ascii::EscapeDefault as core::iter::traits::iterator::Iterator>::next
 20,800,962 ( 1.43%)  ???:llvm::SHA1::hashBlock()
 19,190,638 ( 1.32%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>, <u8 as core::clone::Clone>::clone> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::adapters::map::map_fold<u8, core::ascii::EscapeDefault, (), core::ascii::escape_default, <core::iter::adapters::flatten::FlattenCompat<_, _> as core::iter::traits::iterator::Iterator>::fold::flatten<core::ascii::EscapeDefault, (), core::iter::adapters::map::map_fold<u8, char, (), <u8 as core::convert::Into<char>>::into, core::iter::traits::iterator::Iterator::for_each::call<char, <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend<core::iter::adapters::map::Map<core::iter::adapters::flatten::FlatMap<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8>>, core::ascii::EscapeDefault, core::ascii::escape_default>, <u8 as core::convert::Into<char>>::into>>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>
 18,378,526 ( 1.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>, <u8 as core::clone::Clone>::clone> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::adapters::map::map_fold<u8, core::ascii::EscapeDefault, (), core::ascii::escape_default, <core::iter::adapters::flatten::FlattenCompat<_, _> as core::iter::traits::iterator::Iterator>::fold::flatten<core::ascii::EscapeDefault, (), core::iter::adapters::map::map_fold<u8, char, (), <u8 as core::convert::Into<char>>::into, core::iter::traits::iterator::Iterator::for_each::call<char, <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend<core::iter::adapters::map::Map<core::iter::adapters::flatten::FlatMap<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8>>, core::ascii::EscapeDefault, core::ascii::escape_default>, <u8 as core::convert::Into<char>>::into>>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>
 15,926,841 ( 1.10%)  ???:llvm::InstCombinerImpl::run()
 15,913,858 ( 1.10%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
 15,378,331 ( 1.06%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
 13,191,332 ( 0.91%)  ???:llvm::Type::getPrimitiveSizeInBits() const
 12,227,842 ( 0.84%)  ./malloc/malloc.c:free
 12,016,941 ( 0.83%)  ???:llvm::ConstantDataSequential::getImpl(llvm::StringRef, llvm::Type*)
 11,213,645 ( 0.77%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
 11,085,023 ( 0.76%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 10,560,012 ( 0.73%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<core::ascii::EscapeDefault as core::iter::traits::iterator::Iterator>::next
 10,560,012 ( 0.73%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<core::ascii::EscapeDefault as core::iter::traits::iterator::Iterator>::next
 10,450,514 ( 0.72%)  ???:(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Value*, llvm::BasicBlock*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
 10,309,636 ( 0.71%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
  9,666,060 ( 0.67%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  8,997,830 ( 0.62%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
  8,458,146 ( 0.58%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
  8,236,120 ( 0.57%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  8,215,442 ( 0.57%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
  7,871,111 ( 0.54%)  ???:llvm::ValueHandleBase::AddToUseList()
  7,601,439 ( 0.52%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
  7,145,722 ( 0.49%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  7,113,719 ( 0.49%)  ???:SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
  6,921,874 ( 0.48%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
  6,626,907 ( 0.46%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
  6,533,419 ( 0.45%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
  6,245,484 ( 0.43%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
  5,705,755 ( 0.39%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
  5,560,367 ( 0.38%)  ./malloc/malloc.c:malloc_consolidate
  5,486,498 ( 0.38%)  ???:computeKnownBits(llvm::Value const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
  5,482,996 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/methods.rs:<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>, <u8 as core::clone::Clone>::clone> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::adapters::map::map_fold<u8, core::ascii::EscapeDefault, (), core::ascii::escape_default, <core::iter::adapters::flatten::FlattenCompat<_, _> as core::iter::traits::iterator::Iterator>::fold::flatten<core::ascii::EscapeDefault, (), core::iter::adapters::map::map_fold<u8, char, (), <u8 as core::convert::Into<char>>::into, core::iter::traits::iterator::Iterator::for_each::call<char, <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend<core::iter::adapters::map::Map<core::iter::adapters::flatten::FlatMap<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8>>, core::ascii::EscapeDefault, core::ascii::escape_default>, <u8 as core::convert::Into<char>>::into>>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>
  5,413,959 ( 0.37%)  ???:llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&)
  5,342,680 ( 0.37%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
  4,854,446 ( 0.33%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
  4,846,800 ( 0.33%)  ./elf/dl-lookup.c:do_lookup_x
  4,809,543 ( 0.33%)  ???:llvm::removeUnreachableBlocks(llvm::Function&, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*)
  4,583,670 ( 0.32%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
  4,475,590 ( 0.31%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
  4,435,071 ( 0.31%)  ???:isKnownNonZero(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  4,396,816 ( 0.30%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
  4,384,372 ( 0.30%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
  4,258,767 ( 0.29%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
  4,250,714 ( 0.29%)  ???:llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&, llvm::LibFunc&) const
  4,141,271 ( 0.29%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  4,140,675 ( 0.29%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
  4,090,037 ( 0.28%)  ./malloc/malloc.c:unlink_chunk.constprop.0
  3,938,294 ( 0.27%)  ???:llvm::InstCombinerImpl::SimplifyDemandedUseBits(llvm::Value*, llvm::APInt, llvm::KnownBits&, unsigned int, llvm::Instruction*)
  3,906,943 ( 0.27%)  ???:computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
  3,898,781 ( 0.27%)  ???:llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQuery const&, llvm::OptimizationRemarkEmitter*)
  3,892,530 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs:<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>, <u8 as core::clone::Clone>::clone> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::adapters::map::map_fold<u8, core::ascii::EscapeDefault, (), core::ascii::escape_default, <core::iter::adapters::flatten::FlattenCompat<_, _> as core::iter::traits::iterator::Iterator>::fold::flatten<core::ascii::EscapeDefault, (), core::iter::adapters::map::map_fold<u8, char, (), <u8 as core::convert::Into<char>>::into, core::iter::traits::iterator::Iterator::for_each::call<char, <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend<core::iter::adapters::map::Map<core::iter::adapters::flatten::FlatMap<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8>>, core::ascii::EscapeDefault, core::ascii::escape_default>, <u8 as core::convert::Into<char>>::into>>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>
  3,838,915 ( 0.26%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
  3,719,607 ( 0.26%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
  3,716,610 ( 0.26%)  ???:llvm::PMTopLevelManager::setLastUser(llvm::ArrayRef<llvm::Pass*>, llvm::Pass*)
  3,665,379 ( 0.25%)  ???:llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const
  3,602,313 ( 0.25%)  ???:llvm::ConstantRange::makeExactICmpRegion(llvm::CmpInst::Predicate, llvm::APInt const&)
  3,584,954 ( 0.25%)  ???:(anonymous namespace)::SimplifyCFGOpt::simplifyCondBranch(llvm::BranchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&)
  3,576,904 ( 0.25%)  ???:llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>)
  3,555,791 ( 0.25%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
  3,452,966 ( 0.24%)  ???:(anonymous namespace)::BitcodeReader::parseConstants()
  3,295,492 ( 0.23%)  ???:llvm::FindFunctionBackedges(llvm::Function const&, llvm::SmallVectorImpl<std::pair<llvm::BasicBlock const*, llvm::BasicBlock const*> >&)
  3,206,494 ( 0.22%)  ???:llvm::BasicAAResult::alias(llvm::MemoryLocation const&, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
  3,164,070 ( 0.22%)  ???:llvm::PMTopLevelManager::AUFoldingSetNode::Profile(llvm::FoldingSetNodeID&, llvm::AnalysisUsage const&)
  3,125,041 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_metadata::rmeta::encoder::EncodeContext as rustc_serialize::serialize::Encoder>::emit_seq::<<[u8] as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode::{closure#0}>
  3,057,714 ( 0.21%)  ???:(anonymous namespace)::EarlyCSE::run() [clone .llvm.7062997131228810369]
  2,964,656 ( 0.20%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
  2,798,896 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
  2,741,498 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>, <u8 as core::clone::Clone>::clone> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::adapters::map::map_fold<u8, core::ascii::EscapeDefault, (), core::ascii::escape_default, <core::iter::adapters::flatten::FlattenCompat<_, _> as core::iter::traits::iterator::Iterator>::fold::flatten<core::ascii::EscapeDefault, (), core::iter::adapters::map::map_fold<u8, char, (), <u8 as core::convert::Into<char>>::into, core::iter::traits::iterator::Iterator::for_each::call<char, <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend<core::iter::adapters::map::Map<core::iter::adapters::flatten::FlatMap<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8>>, core::ascii::EscapeDefault, core::ascii::escape_default>, <u8 as core::convert::Into<char>>::into>>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>
  2,741,498 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<core::ascii::EscapeDefault as core::iter::traits::iterator::Iterator>::next
  2,741,498 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<core::ascii::EscapeDefault as core::iter::traits::iterator::Iterator>::next
  2,741,498 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs:<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>, <u8 as core::clone::Clone>::clone> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::adapters::map::map_fold<u8, core::ascii::EscapeDefault, (), core::ascii::escape_default, <core::iter::adapters::flatten::FlattenCompat<_, _> as core::iter::traits::iterator::Iterator>::fold::flatten<core::ascii::EscapeDefault, (), core::iter::adapters::map::map_fold<u8, char, (), <u8 as core::convert::Into<char>>::into, core::iter::traits::iterator::Iterator::for_each::call<char, <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend<core::iter::adapters::map::Map<core::iter::adapters::flatten::FlatMap<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8>>, core::ascii::EscapeDefault, core::ascii::escape_default>, <u8 as core::convert::Into<char>>::into>>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>
  2,711,758 ( 0.19%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
  2,643,958 ( 0.18%)  ???:(anonymous namespace)::CVPLatticeFunc::ComputeInstructionState(llvm::Instruction&, llvm::DenseMap<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::DenseMapInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > >, llvm::detail::DenseMapPair<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal> >&, llvm::SparseSolver<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::LatticeKeyInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > > >&)
  2,547,410 ( 0.18%)  ???:(anonymous namespace)::PruningFunctionCloner::CloneBlock(llvm::BasicBlock const*, llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void>, false, true>, std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> >&)
  2,509,116 ( 0.17%)  ./stdlib/msort.c:msort_with_tmp.part.0
  2,508,249 ( 0.17%)  ???:llvm::InstCombinerImpl::visitCallInst(llvm::CallInst&)
  2,480,759 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
  2,396,469 ( 0.17%)  ???:llvm::AttributeList::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::AttributeList>)
  2,368,997 ( 0.16%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::FindRoots(llvm::DominatorTreeBase<llvm::BasicBlock, true> const&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
  2,350,588 ( 0.16%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
  2,335,532 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>, <u8 as core::clone::Clone>::clone> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::adapters::map::map_fold<u8, core::ascii::EscapeDefault, (), core::ascii::escape_default, <core::iter::adapters::flatten::FlattenCompat<_, _> as core::iter::traits::iterator::Iterator>::fold::flatten<core::ascii::EscapeDefault, (), core::iter::adapters::map::map_fold<u8, char, (), <u8 as core::convert::Into<char>>::into, core::iter::traits::iterator::Iterator::for_each::call<char, <alloc::string::String as core::iter::traits::collect::Extend<char>>::extend<core::iter::adapters::map::Map<core::iter::adapters::flatten::FlatMap<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8>>, core::ascii::EscapeDefault, core::ascii::escape_default>, <u8 as core::convert::Into<char>>::into>>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>::{closure#0}>
  2,332,819 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
  2,317,750 ( 0.16%)  ???:llvm::FoldBranchToCommonDest(llvm::BranchInst*, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*, llvm::TargetTransformInfo const*, unsigned int)
  2,302,344 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
  2,299,911 ( 0.16%)  ???:llvm::GVN::processBlock(llvm::BasicBlock*)
  2,280,543 ( 0.16%)  ???:(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm::Value*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
  2,270,613 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
  2,232,794 ( 0.15%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
  2,216,428 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  2,184,768 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
  2,180,825 ( 0.15%)  ???:llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef<llvm::Value*>, llvm::SimplifyQuery const&)
  2,139,033 ( 0.15%)  ./elf/do-rel.h:_dl_relocate_object
  2,101,992 ( 0.14%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
  2,093,743 ( 0.14%)  ???:llvm::MemorySSA::buildMemorySSA(llvm::BatchAAResults&)
  2,089,650 ( 0.14%)  ???:llvm::DenseMapBase<llvm::DenseMap<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> >, llvm::DenseMapInfo<llvm::PoisoningVH<llvm::BasicBlock> >, llvm::detail::DenseMapPair<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> > > >, llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> >, llvm::DenseMapInfo<llvm::PoisoningVH<llvm::BasicBlock> >, llvm::detail::DenseMapPair<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> > > >::destroyAll() [clone .llvm.4316243980339171764]
  2,062,946 ( 0.14%)  ???:(anonymous namespace)::AggressiveDeadCodeElimination::performDeadCodeElimination()
  2,041,893 ( 0.14%)  ???:???
  1,977,439 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs:core::slice::memchr::memchr_general_case
  1,955,440 ( 0.13%)  ???:llvm_regexec
  1,931,626 ( 0.13%)  ???:llvm::DemandedBits::isInstructionDead(llvm::Instruction*)
  1,887,056 ( 0.13%)  ???:llvm::JumpThreadingPass::processBlock(llvm::BasicBlock*)
  1,882,054 ( 0.13%)  ???:llvm::SCCPInstVisitor::solve()
  1,867,301 ( 0.13%)  ???:llvm::InstCombinerImpl::visitLoadInst(llvm::LoadInst&)
  1,859,417 ( 0.13%)  ???:llvm::isNonEscapingLocalObject(llvm::Value const*, llvm::SmallDenseMap<llvm::Value const*, bool, 8u, llvm::DenseMapInfo<llvm::Value const*>, llvm::detail::DenseMapPair<llvm::Value const*, bool> >*)
  1,823,519 ( 0.13%)  ???:llvm::SROA::runOnAlloca(llvm::AllocaInst&)
  1,814,930 ( 0.13%)  ???:llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int)
  1,773,428 ( 0.12%)  ???:updateCGAndAnalysisManagerForPass(llvm::LazyCallGraph&, llvm::LazyCallGraph::SCC&, llvm::LazyCallGraph::Node&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::CGSCCUpdateResult&, llvm::AnalysisManager<llvm::Function>&, bool) [clone .llvm.5426518467876156712]
  1,770,314 ( 0.12%)  ???:llvm::X86_MC::initLLVMToSEHAndCVRegMapping(llvm::MCRegisterInfo*)
  1,768,759 ( 0.12%)  ???:int llvm::array_pod_sort_comparator<llvm::Attribute>(void const*, void const*)
  1,757,315 ( 0.12%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  1,703,207 ( 0.12%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::initializeRPOT()
  1,645,266 ( 0.11%)  ???:llvm::AnalysisUsage::pushUnique(llvm::SmallVectorImpl<void const*>&, void const*)
  1,623,317 ( 0.11%)  ???:llvm::LoopInfoBase<llvm::BasicBlock, llvm::Loop>::analyze(llvm::DominatorTreeBase<llvm::BasicBlock, false> const&)
  1,613,834 ( 0.11%)  ???:llvm::Value::stripAndAccumulateConstantOffsets(llvm::DataLayout const&, llvm::APInt&, bool, llvm::function_ref<bool (llvm::Value&, llvm::APInt&)>) const
  1,611,300 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/methods.rs:<core::iter::adapters::map::Map<I,F> as core::iter::traits::iterator::Iterator>::try_fold
  1,610,755 ( 0.11%)  ???:llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm::Instruction*, llvm::PHITransAddr const&, llvm::MemoryLocation const&, bool, llvm::BasicBlock*, llvm::SmallVectorImpl<llvm::NonLocalDepResult>&, llvm::DenseMap<llvm::BasicBlock*, llvm::Value*, llvm::DenseMapInfo<llvm::BasicBlock*>, llvm::detail::DenseMapPair<llvm::BasicBlock*, llvm::Value*> >&, bool, bool)
  1,559,240 ( 0.11%)  ???:llvm::PopulateLoopsDFS<llvm::BasicBlock, llvm::Loop>::traverse(llvm::BasicBlock*)
  1,530,432 ( 0.11%)  ???:runImpl(llvm::Function&, llvm::LazyValueInfo*, llvm::DominatorTree*, llvm::SimplifyQuery const&) [clone .llvm.16011871802505272439]
  1,511,786 ( 0.10%)  ???:collectBitParts(llvm::Value*, bool, bool, std::map<llvm::Value*, llvm::Optional<(anonymous namespace)::BitPart>, std::less<llvm::Value*>, std::allocator<std::pair<llvm::Value* const, llvm::Optional<(anonymous namespace)::BitPart> > > >&, int, bool&)
  1,510,063 ( 0.10%)  ???:getValueFromCondition(llvm::Value*, llvm::Value*, bool)
  1,509,035 ( 0.10%)  ???:llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::TargetLibraryInfo const*, llvm::DomTreeUpdater*)
  1,481,957 ( 0.10%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  1,473,886 ( 0.10%)  ???:(anonymous namespace)::eliminateDeadStores(llvm::Function&, llvm::AAResults&, llvm::MemorySSA&, llvm::DominatorTree&, llvm::PostDominatorTree&, llvm::TargetLibraryInfo const&, llvm::LoopInfo const&) [clone .llvm.5769264623867638418]
  1,466,484 ( 0.10%)  ???:llvm::PassManager<llvm::LazyCallGraph::SCC, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&)
  1,460,371 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 71 ----------------------------------------
        .               fn default() -> FxHasher {
        .                   FxHasher { hash: 0 }
        .               }
        .           }
        .           
        .           impl FxHasher {
        .               #[inline]
        .               fn add_to_hash(&mut self, i: usize) {
  222,004 ( 0.02%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
        .               }
        .           }
        .           
        .           impl Hasher for FxHasher {
        .               #[inline]
    2,512 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
        .                   #[cfg(target_pointer_width = "32")]
        .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
        .                   #[cfg(target_pointer_width = "64")]
        .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
        .           
   52,154 ( 0.00%)          let mut hash = FxHasher { hash: self.hash };
        .                   assert!(size_of::<usize>() <= 8);
1,665,225 ( 0.11%)          while bytes.len() >= size_of::<usize>() {
        .                       hash.add_to_hash(read_usize(bytes) as usize);
        .                       bytes = &bytes[size_of::<usize>()..];
        .                   }
  105,830 ( 0.01%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
        .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
        .                       bytes = &bytes[4..];
        .                   }
  105,830 ( 0.01%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
        .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
        .                       bytes = &bytes[2..];
        .                   }
  117,910 ( 0.01%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
   25,447 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
        .                   }
    3,322 ( 0.00%)          self.hash = hash.hash;
    2,512 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
      336 ( 0.00%)          self.add_to_hash(i as usize);
        .               }
        .           
        .               #[inline]
        .               fn write_u16(&mut self, i: u16) {
        9 ( 0.00%)          self.add_to_hash(i as usize);
        .               }
        .           
        .               #[inline]
        .               fn write_u32(&mut self, i: u32) {
  104,848 ( 0.01%)          self.add_to_hash(i as usize);
        .               }
        .           
        .               #[cfg(target_pointer_width = "32")]
        .               #[inline]
        .               fn write_u64(&mut self, i: u64) {
        .                   self.add_to_hash(i as usize);
        .                   self.add_to_hash((i >> 32) as usize);
        .               }
-- line 131 ----------------------------------------

    2,793 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
1,599,570 ( 0.11%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
      150 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   43,462 ( 0.00%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  279,353 ( 0.02%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
9,254,095 ( 0.64%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
      674 ( 0.00%)          return wrapping_sub(
    1,746 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   99,670 ( 0.01%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  251,676 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir                  

-- line 198 ----------------------------------------
         .                   }
         .           
         .                   #[inline]
         .                   #[allow(arithmetic_overflow)]
         .                   #[rustc_inherit_overflow_checks]
         .                   fn forward(start: Self, n: usize) -> Self {
         .                       // In debug builds, trigger a panic on overflow.
         .                       // This should optimize completely out in release builds.
     3,701 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
         .                           let _ = Self::MAX + 1;
         .                       }
         .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
         .                       start.wrapping_add(n as Self)
         .                   }
         .           
         .                   #[inline]
         .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
         .           
         .                   if taken < n { Err(taken) } else { Ok(()) }
         .               }
         .           }
         .           
         .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
         .               #[inline]
         .               fn spec_next(&mut self) -> Option<T> {
11,492,872 ( 0.79%)          if self.start < self.end {
         .                       // SAFETY: just checked precondition
         .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
         .                       Some(mem::replace(&mut self.start, n))
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
         .                   // Otherwise 0 is returned which always safe to use.
         .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
         .           
         .                   if taken < n { Err(taken) } else { Ok(()) }
         .               }
         .           
         .               #[inline]
         .               fn spec_next_back(&mut self) -> Option<T> {
    25,333 ( 0.00%)          if self.start < self.end {
         .                       // SAFETY: just checked precondition
         .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
         .                       Some(self.end.clone())
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.spec_next()
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    62,736 ( 0.00%)          if self.start < self.end {
         .                       let hint = Step::steps_between(&self.start, &self.end);
         .                       (hint.unwrap_or(usize::MAX), hint)
         .                   } else {
         .                       (0, Some(0))
         .                   }
         .               }
         .           
         .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
         .           impl<A: Step> FusedIterator for ops::Range<A> {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A: Step> Iterator for ops::RangeFrom<A> {
         .               type Item = A;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
       789 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
         .                   Some(mem::replace(&mut self.start, n))
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (usize::MAX, None)
         .               }
         .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
         .           
         .                   try { accum }
         .               }
         .           }
         .           
         .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
         .               #[inline]
         .               fn spec_next(&mut self) -> Option<T> {
       200 ( 0.00%)          if self.is_empty() {
         .                       return None;
         .                   }
         .                   let is_iterating = self.start < self.end;
       128 ( 0.00%)          Some(if is_iterating {
         .                       // SAFETY: just checked precondition
         .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
         .                       mem::replace(&mut self.start, n)
         .                   } else {
         .                       self.exhausted = true;
         .                       self.start.clone()
         .                   })
         .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
         .                   R: Try<Output = B>,
         .               {
         .                   if self.is_empty() {
         .                       return try { init };
         .                   }
         .           
         .                   let mut accum = init;
         .           
       824 ( 0.00%)          while self.start < self.end {
         .                       // SAFETY: just checked precondition
         .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
         .                       let n = mem::replace(&mut self.start, n);
         .                       accum = f(accum, n)?;
         .                   }
         .           
         .                   self.exhausted = true;
         .           
        22 ( 0.00%)          if self.start == self.end {
         .                       accum = f(accum, self.start.clone())?;
         .                   }
         .           
         .                   try { accum }
         .               }
         .           
         .               #[inline]
         .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.spec_next()
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
       584 ( 0.00%)          if self.is_empty() {
         .                       return (0, Some(0));
         .                   }
         .           
         .                   match Step::steps_between(&self.start, &self.end) {
         .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
         .                       None => (usize::MAX, None),
         .                   }
         .               }
-- line 1114 ----------------------------------------

   159,521 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
       36 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       18 ( 0.00%)              from_str_radix(src, radix)
       54 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   23,010 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  108,783 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
   92,069 ( 0.01%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
3,717,691 ( 0.26%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
        2 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
2,940,522 ( 0.20%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    1,809 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
      264 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   17,502 ( 0.00%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    1,247 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
1,042,193 ( 0.07%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  493,746 ( 0.03%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
2,969,141 ( 0.20%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1491 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        1 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  113,460 ( 0.01%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        2 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   39,714 ( 0.00%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  168,457 ( 0.01%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      138 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      702 ( 0.00%)              if self <= 1 { return 0; }
        .           
    2,198 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
    6,499 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    2,197 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    3,646 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

    9,430 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    1,350 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   42,732 ( 0.00%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      518 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
   49,196 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   42,289 ( 0.00%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      610 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       19 ( 0.00%)          self.position += bytes;
       19 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    1,210 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    3,123 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   41,061 ( 0.00%)      fn read_u32(&mut self) -> u32 {
  188,799 ( 0.01%)          read_leb128!(self, read_u32_leb128)
   82,122 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.04%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.01%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,908,436 ( 0.13%)          let value = self.data[self.position];
  378,812 ( 0.03%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  253,485 ( 0.02%)      fn read_usize(&mut self) -> usize {
  253,543 ( 0.02%)          read_leb128!(self, read_usize_leb128)
  506,970 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   16,992 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   38,154 ( 0.00%)          let len = self.read_usize();
  202,418 ( 0.01%)          let sentinel = self.data[self.position + len];
   50,648 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  126,620 ( 0.01%)          self.position += len + 1;
   37,371 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      393 ( 0.00%)          let start = self.position;
    2,076 ( 0.00%)          self.position += s.len();
      393 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  581,709 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                  

-- line 223 ----------------------------------------
         .               fn eq(&self, other: &Rhs) -> bool;
         .           
         .               /// This method tests for `!=`.
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn ne(&self, other: &Rhs) -> bool {
     1,300 ( 0.00%)          !self.eq(other)
         .               }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialEq`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics, structural_match)]
         .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
         .           /// assert_eq!(Ordering::Less, result);
         .           ///
         .           /// let result = 1.cmp(&1);
         .           /// assert_eq!(Ordering::Equal, result);
         .           ///
         .           /// let result = 2.cmp(&1);
         .           /// assert_eq!(Ordering::Greater, result);
         .           /// ```
       516 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[repr(i8)]
         .           pub enum Ordering {
         .               /// An ordering where a compared value is less than another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Less = -1,
         .               /// An ordering where a compared value is equal to another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
         .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
         .               ///
         .               /// assert_eq!(result, Ordering::Less);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
         .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
     1,190 ( 0.00%)          match self {
         .                       Equal => f(),
         .                       _ => self,
         .                   }
         .               }
         .           }
         .           
         .           /// A helper struct for reverse ordering.
         .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn max(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
     2,908 ( 0.00%)          max_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Compares and returns the minimum of two values.
         .               ///
         .               /// Returns the first argument if the comparison determines them to be equal.
         .               ///
         .               /// # Examples
         .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn min(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
        40 ( 0.00%)          min_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Restrict a value to a certain interval.
         .               ///
         .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
         .               /// less than `min`. Otherwise this returns `self`.
         .               ///
         .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
         .               /// let result = 2.0 < 1.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn lt(&self, other: &Rhs) -> bool {
    11,271 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
         .               }
         .           
         .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn le(&self, other: &Rhs) -> bool {
         .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
         .                   // FIXME: The root cause was fixed upstream in LLVM with:
         .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
         .                   // Revert this workaround once support for LLVM 12 gets dropped.
    41,212 ( 0.00%)          !matches!(self.partial_cmp(other), None | Some(Greater))
         .               }
         .           
         .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
         .               /// let result = 2.0 > 2.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn gt(&self, other: &Rhs) -> bool {
    66,795 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater))
         .               }
         .           
         .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
         .               /// let result = 2.0 >= 2.0;
         .               /// assert_eq!(result, true);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn ge(&self, other: &Rhs) -> bool {
       284 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
         .               }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialOrd`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics)]
         .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
         .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
    18,755 ( 0.00%)      match compare(&v1, &v2) {
         .                   Ordering::Less | Ordering::Equal => v1,
         .                   Ordering::Greater => v2,
         .               }
        30 ( 0.00%)  }
         .           
         .           /// Returns the element that gives the minimum value from the specified function.
         .           ///
         .           /// Returns the first argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
         .           /// use std::cmp;
         .           ///
         .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
         .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
       180 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
       120 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
       120 ( 0.00%)  }
         .           
         .           /// Compares and returns the maximum of two values.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// Internally uses an alias to [`Ord::max`].
         .           ///
         .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1273 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
    51,966 ( 0.00%)      match compare(&v1, &v2) {
       105 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
         .                   Ordering::Greater => v1,
         .               }
         .           }
         .           
         .           /// Returns the element that gives the maximum value from the specified function.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
-- line 1290 ----------------------------------------
-- line 1308 ----------------------------------------
         .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
         .               use crate::hint::unreachable_unchecked;
         .           
         .               macro_rules! partial_eq_impl {
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialEq for $t {
         .                           #[inline]
    11,433 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
         .                           #[inline]
    51,893 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl PartialEq for () {
         .                   #[inline]
         .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialOrd for $t {
         .                           #[inline]
         .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
         .                               Some(self.cmp(other))
         .                           }
         .                           #[inline]
11,684,753 ( 0.81%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
         .                           #[inline]
     1,418 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
         .                           #[inline]
         .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
         .                           #[inline]
         .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl Ord for $t {
         .                           #[inline]
         .                           fn cmp(&self, other: &$t) -> Ordering {
         .                               // The order here is important to generate more optimal assembly.
         .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
   121,115 ( 0.01%)                      if *self < *other { Less }
         .                               else if *self == *other { Equal }
         .                               else { Greater }
         .                           }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl Ord for bool {
         .                   #[inline]
         .                   fn cmp(&self, other: &bool) -> Ordering {
         .                       // Casting to i8's and converting the difference to an Ordering generates
         .                       // more optimal assembly.
         .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
       620 ( 0.00%)              match (*self as i8) - (*other as i8) {
         .                           -1 => Less,
         .                           0 => Equal,
         .                           1 => Greater,
         .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
         .                           _ => unsafe { unreachable_unchecked() },
         .                       }
         .                   }
         .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
         .               // & pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
         .               where
         .                   A: PartialEq<B>,
         .               {
         .                   #[inline]
       477 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
    66,010 ( 0.00%)              PartialEq::eq(*self, *other)
     6,874 ( 0.00%)          }
         .                   #[inline]
        35 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
        57 ( 0.00%)              PartialEq::ne(*self, *other)
     1,293 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
         .               where
         .                   A: PartialOrd<B>,
         .               {
         .                   #[inline]
         .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Ord for &A
         .               where
         .                   A: Ord,
         .               {
         .                   #[inline]
         .                   fn cmp(&self, other: &Self) -> Ordering {
         .                       Ord::cmp(*self, *other)
       542 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Eq for &A where A: Eq {}
         .           
         .               // &mut pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

   204,461 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/methods.rs
--------------------------------------------------------------------------------
Ir                 

-- line 337 ----------------------------------------
        .               #[rustc_const_unstable(feature = "const_char_convert", issue = "89259")]
        .               #[must_use = "this returns the result of the operation, \
        .                             without modifying the original"]
        .               #[inline]
        .               pub const fn to_digit(self, radix: u32) -> Option<u32> {
        .                   assert!(radix <= 36, "to_digit: radix is too high (maximum 36)");
        .                   // If not a digit, a number greater than radix will be created.
        .                   let mut digit = (self as u32).wrapping_sub('0' as u32);
       18 ( 0.00%)          if radix > 10 {
        4 ( 0.00%)              if digit < 10 {
        .                           return Some(digit);
        .                       }
        .                       // Force the 6th bit to be set to ensure ascii is lower case.
        1 ( 0.00%)              digit = (self as u32 | 0b10_0000).wrapping_sub('a' as u32).saturating_add(10);
        .                   }
        .                   // FIXME: once then_some is const fn, use it here
      406 ( 0.00%)          if digit < radix { Some(digit) } else { None }
        .               }
        .           
        .               /// Returns an iterator that yields the hexadecimal Unicode escape of a
        .               /// character as `char`s.
        .               ///
        .               /// This will escape characters with the Rust syntax of the form
        .               /// `\u{NNNNNN}` where `NNNNNN` is a hexadecimal representation.
        .               ///
-- line 361 ----------------------------------------
-- line 392 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn escape_unicode(self) -> EscapeUnicode {
        .                   let c = self as u32;
        .           
        .                   // or-ing 1 ensures that for c==0 the code computes that one
        .                   // digit should be printed and (which is the same) avoids the
        .                   // (31 - 32) underflow
      380 ( 0.00%)          let msb = 31 - (c | 1).leading_zeros();
        .           
        .                   // the index of the most significant hex digit
      760 ( 0.00%)          let ms_hex_digit = msb / 4;
        .                   EscapeUnicode {
        .                       c: self,
        .                       state: EscapeUnicodeState::Backslash,
        .                       hex_digit_idx: ms_hex_digit as usize,
        .                   }
    1,140 ( 0.00%)      }
        .           
        .               /// An extended version of `escape_debug` that optionally permits escaping
        .               /// Extended Grapheme codepoints, single quotes, and double quotes. This
        .               /// allows us to format characters like nonspacing marks better when they're
        .               /// at the start of a string, and allows escaping single quotes in
        .               /// characters, and double quotes in strings.
        .               #[inline]
        .               pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {
      390 ( 0.00%)          let init_state = match self {
        .                       '\t' => EscapeDefaultState::Backslash('t'),
        .                       '\r' => EscapeDefaultState::Backslash('r'),
        .                       '\n' => EscapeDefaultState::Backslash('n'),
        .                       '\\' => EscapeDefaultState::Backslash(self),
        .                       '"' if args.escape_double_quote => EscapeDefaultState::Backslash(self),
        .                       '\'' if args.escape_single_quote => EscapeDefaultState::Backslash(self),
        4 ( 0.00%)              _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {
        .                           EscapeDefaultState::Unicode(self.escape_unicode())
        .                       }
      134 ( 0.00%)              _ if is_printable(self) => EscapeDefaultState::Char(self),
        .                       _ => EscapeDefaultState::Unicode(self.escape_unicode()),
        .                   };
        .                   EscapeDebug(EscapeDefault { state: init_state })
        .               }
        .           
        .               /// Returns an iterator that yields the literal escape code of a character
        .               /// as `char`s.
        .               ///
-- line 436 ----------------------------------------
-- line 521 ----------------------------------------
        .               /// ```
        .               /// assert_eq!('"'.escape_default().to_string(), "\\\"");
        .               /// ```
        .               #[must_use = "this returns the escaped char as an iterator, \
        .                             without modifying the original"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn escape_default(self) -> EscapeDefault {
  676,070 ( 0.05%)          let init_state = match self {
        .                       '\t' => EscapeDefaultState::Backslash('t'),
        .                       '\r' => EscapeDefaultState::Backslash('r'),
        .                       '\n' => EscapeDefaultState::Backslash('n'),
        .                       '\\' | '\'' | '"' => EscapeDefaultState::Backslash(self),
  571,535 ( 0.04%)              '\x20'..='\x7e' => EscapeDefaultState::Char(self),
        .                       _ => EscapeDefaultState::Unicode(self.escape_unicode()),
        .                   };
        .                   EscapeDefault { state: init_state }
        .               }
        .           
        .               /// Returns the number of bytes this `char` would need if encoded in UTF-8.
        .               ///
        .               /// That number of bytes is always between 1 and 4, inclusive.
-- line 542 ----------------------------------------
-- line 708 ----------------------------------------
        .               /// // love is many things, but it is not alphabetic
        .               /// assert!(!c.is_alphabetic());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn is_alphabetic(self) -> bool {
        .                   match self {
       45 ( 0.00%)              'a'..='z' | 'A'..='Z' => true,
        .                       c => c > '\x7f' && unicode::Alphabetic(c),
        .                   }
        .               }
        .           
        .               /// Returns `true` if this `char` has the `Lowercase` property.
        .               ///
        .               /// `Lowercase` is described in Chapter 4 (Character Properties) of the [Unicode Standard] and
        .               /// specified in the [Unicode Character Database][ucd] [`DerivedCoreProperties.txt`].
-- line 724 ----------------------------------------
-- line 741 ----------------------------------------
        .               /// assert!(!'中'.is_lowercase());
        .               /// assert!(!' '.is_lowercase());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn is_lowercase(self) -> bool {
        .                   match self {
       51 ( 0.00%)              'a'..='z' => true,
       34 ( 0.00%)              c => c > '\x7f' && unicode::Lowercase(c),
        .                   }
        .               }
        .           
        .               /// Returns `true` if this `char` has the `Uppercase` property.
        .               ///
        .               /// `Uppercase` is described in Chapter 4 (Character Properties) of the [Unicode Standard] and
        .               /// specified in the [Unicode Character Database][ucd] [`DerivedCoreProperties.txt`].
        .               ///
-- line 758 ----------------------------------------
-- line 774 ----------------------------------------
        .               /// assert!(!'中'.is_uppercase());
        .               /// assert!(!' '.is_uppercase());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn is_uppercase(self) -> bool {
        .                   match self {
      912 ( 0.00%)              'A'..='Z' => true,
      608 ( 0.00%)              c => c > '\x7f' && unicode::Uppercase(c),
        .                   }
        .               }
        .           
        .               /// Returns `true` if this `char` has the `White_Space` property.
        .               ///
        .               /// `White_Space` is specified in the [Unicode Character Database][ucd] [`PropList.txt`].
        .               ///
        .               /// [ucd]: https://www.unicode.org/reports/tr44/
-- line 791 ----------------------------------------
-- line 802 ----------------------------------------
        .               /// assert!('\u{A0}'.is_whitespace());
        .               ///
        .               /// assert!(!'越'.is_whitespace());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn is_whitespace(self) -> bool {
      225 ( 0.00%)          match self {
        .                       ' ' | '\x09'..='\x0d' => true,
      388 ( 0.00%)              c => c > '\x7f' && unicode::White_Space(c),
        .                   }
        .               }
        .           
        .               /// Returns `true` if this `char` satisfies either [`is_alphabetic()`] or [`is_numeric()`].
        .               ///
        .               /// [`is_alphabetic()`]: #method.is_alphabetic
        .               /// [`is_numeric()`]: #method.is_numeric
        .               ///
-- line 820 ----------------------------------------
-- line 872 ----------------------------------------
        .               /// [`DerivedCoreProperties.txt`].
        .               ///
        .               /// [uax29]: https://www.unicode.org/reports/tr29/
        .               /// [ucd]: https://www.unicode.org/reports/tr44/
        .               /// [`DerivedCoreProperties.txt`]: https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt
        .               #[must_use]
        .               #[inline]
        .               pub(crate) fn is_grapheme_extended(self) -> bool {
        4 ( 0.00%)          unicode::Grapheme_Extend(self)
        .               }
        .           
        .               /// Returns `true` if this `char` has one of the general categories for numbers.
        .               ///
        .               /// The general categories for numbers (`Nd` for decimal digits, `Nl` for letter-like numeric
        .               /// characters, and `No` for other numeric characters) are specified in the [Unicode Character
        .               /// Database][ucd] [`UnicodeData.txt`].
        .               ///
-- line 888 ----------------------------------------
-- line 973 ----------------------------------------
        .               /// // convert into themselves.
        .               /// assert_eq!('山'.to_lowercase().to_string(), "山");
        .               /// ```
        .               #[must_use = "this returns the lowercase character as a new iterator, \
        .                             without modifying the original"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn to_lowercase(self) -> ToLowercase {
      198 ( 0.00%)          ToLowercase(CaseMappingIter::new(conversions::to_lower(self)))
        .               }
        .           
        .               /// Returns an iterator that yields the uppercase mapping of this `char` as one or more
        .               /// `char`s.
        .               ///
        .               /// If this `char` does not have an uppercase mapping, the iterator yields the same `char`.
        .               ///
        .               /// If this `char` has a one-to-one uppercase mapping given by the [Unicode Character
-- line 989 ----------------------------------------
-- line 1065 ----------------------------------------
        .               /// ```
        .               ///
        .               /// holds across languages.
        .               #[must_use = "this returns the uppercase character as a new iterator, \
        .                             without modifying the original"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn to_uppercase(self) -> ToUppercase {
      198 ( 0.00%)          ToUppercase(CaseMappingIter::new(conversions::to_upper(self)))
        .               }
        .           
        .               /// Checks if the value is within the ASCII range.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let ascii = 'a';
-- line 1081 ----------------------------------------
-- line 1084 ----------------------------------------
        .               /// assert!(ascii.is_ascii());
        .               /// assert!(!non_ascii.is_ascii());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
        .               #[rustc_const_stable(feature = "const_ascii_methods_on_intrinsics", since = "1.32.0")]
        .               #[inline]
        .               pub const fn is_ascii(&self) -> bool {
      583 ( 0.00%)          *self as u32 <= 0x7F
        .               }
        .           
        .               /// Makes a copy of the value in its ASCII upper case equivalent.
        .               ///
        .               /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',
        .               /// but non-ASCII letters are unchanged.
        .               ///
        .               /// To uppercase the value in-place, use [`make_ascii_uppercase()`].
-- line 1100 ----------------------------------------
-- line 1622 ----------------------------------------
        .                   escape_grapheme_extended: true,
        .                   escape_single_quote: true,
        .                   escape_double_quote: true,
        .               };
        .           }
        .           
        .           #[inline]
        .           const fn len_utf8(code: u32) -> usize {
5,733,694 ( 0.40%)      if code < MAX_ONE_B {
        .                   1
      192 ( 0.00%)      } else if code < MAX_TWO_B {
        .                   2
       81 ( 0.00%)      } else if code < MAX_THREE_B {
        .                   3
        .               } else {
        .                   4
        .               }
        .           }
        .           
        .           /// Encodes a raw u32 value as UTF-8 into the provided byte buffer,
        .           /// and then returns the subslice of the buffer that contains the encoded character.
-- line 1642 ----------------------------------------

  364,098 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/methods.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs
--------------------------------------------------------------------------------
Ir               

-- line 16 ----------------------------------------
      .           ///
      .           /// From *Matters Computational*, J. Arndt:
      .           ///
      .           /// "The idea is to subtract one from each of the bytes and then look for
      .           /// bytes where the borrow propagated all the way to the most significant
      .           /// bit."
      .           #[inline]
      .           fn contains_zero_byte(x: usize) -> bool {
473,665 ( 0.03%)      x.wrapping_sub(LO_USIZE) & !x & HI_USIZE != 0
      .           }
      .           
      .           #[cfg(target_pointer_width = "16")]
      .           #[inline]
      .           fn repeat_byte(b: u8) -> usize {
      .               (b as usize) << 8 | b as usize
      .           }
      .           
-- line 32 ----------------------------------------
-- line 36 ----------------------------------------
      .               (b as usize) * (usize::MAX / 255)
      .           }
      .           
      .           /// Returns the first index matching the byte `x` in `text`.
      .           #[must_use]
      .           #[inline]
      .           pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {
      .               // Fast path for small slices
    946 ( 0.00%)      if text.len() < 2 * USIZE_BYTES {
    592 ( 0.00%)          return text.iter().position(|elt| *elt == x);
      .               }
      .           
    771 ( 0.00%)      memchr_general_case(x, text)
      .           }
      .           
    796 ( 0.00%)  fn memchr_general_case(x: u8, text: &[u8]) -> Option<usize> {
      .               // Scan for a single byte value by reading two `usize` words at a time.
      .               //
      .               // Split `text` in three parts
      .               // - unaligned initial part, before the first word aligned address in text
      .               // - body, scan by 2 words at a time
      .               // - the last remaining part, < 2 word size
      .           
      .               // search up to an aligned boundary
      .               let len = text.len();
      .               let ptr = text.as_ptr();
      .               let mut offset = ptr.align_offset(USIZE_BYTES);
      .           
    398 ( 0.00%)      if offset > 0 {
      .                   offset = cmp::min(offset, len);
    561 ( 0.00%)          if let Some(index) = text[..offset].iter().position(|elt| *elt == x) {
      .                       return Some(index);
      .                   }
      .               }
      .           
      .               // search the body of the text
      .               let repeated_x = repeat_byte(x);
188,246 ( 0.01%)      while offset <= len - 2 * USIZE_BYTES {
      .                   // SAFETY: the while's predicate guarantees a distance of at least 2 * usize_bytes
      .                   // between the offset and the end of the slice.
      .                   unsafe {
      .                       let u = *(ptr.add(offset) as *const usize);
281,613 ( 0.02%)              let v = *(ptr.add(offset + USIZE_BYTES) as *const usize);
      .           
      .                       // break if there is a matching byte
281,613 ( 0.02%)              let zu = contains_zero_byte(u ^ repeated_x);
281,613 ( 0.02%)              let zv = contains_zero_byte(v ^ repeated_x);
187,742 ( 0.01%)              if zu || zv {
      .                           break;
      .                       }
      .                   }
187,664 ( 0.01%)          offset += USIZE_BYTES * 2;
      .               }
      .           
      .               // Find the byte after the point the body loop stopped.
  1,719 ( 0.00%)      text[offset..].iter().position(|elt| *elt == x).map(|i| offset + i)
    995 ( 0.00%)  }
      .           
      .           /// Returns the last index matching the byte `x` in `text`.
      .           #[must_use]
  2,022 ( 0.00%)  pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {
      .               // Scan for a single byte value by reading two `usize` words at a time.
      .               //
      .               // Split `text` in three parts:
      .               // - unaligned tail, after the last word aligned address in text,
      .               // - body, scanned by 2 words at a time,
      .               // - the first remaining bytes, < 2 word size.
      .               let len = text.len();
      .               let ptr = text.as_ptr();
-- line 104 ----------------------------------------
-- line 105 ----------------------------------------
      .               type Chunk = usize;
      .           
      .               let (min_aligned_offset, max_aligned_offset) = {
      .                   // We call this just to obtain the length of the prefix and suffix.
      .                   // In the middle we always process two chunks at once.
      .                   // SAFETY: transmuting `[u8]` to `[usize]` is safe except for size differences
      .                   // which are handled by `align_to`.
      .                   let (prefix, _, suffix) = unsafe { text.align_to::<(Chunk, Chunk)>() };
  2,022 ( 0.00%)          (prefix.len(), len - suffix.len())
      .               };
      .           
      .               let mut offset = max_aligned_offset;
  8,416 ( 0.00%)      if let Some(index) = text[offset..].iter().rposition(|elt| *elt == x) {
     46 ( 0.00%)          return Some(offset + index);
      .               }
      .           
      .               // Search the body of the text, make sure we don't cross min_aligned_offset.
      .               // offset is always aligned, so just testing `>` is sufficient and avoids possible
      .               // overflow.
      .               let repeated_x = repeat_byte(x);
      .               let chunk_bytes = mem::size_of::<Chunk>();
      .           
  1,724 ( 0.00%)      while offset > min_aligned_offset {
      .                   // SAFETY: offset starts at len - suffix.len(), as long as it is greater than
      .                   // min_aligned_offset (prefix.len()) the remaining distance is at least 2 * chunk_bytes.
      .                   unsafe {
  3,026 ( 0.00%)              let u = *(ptr.offset(offset as isize - 2 * chunk_bytes as isize) as *const Chunk);
      .                       let v = *(ptr.offset(offset as isize - chunk_bytes as isize) as *const Chunk);
      .           
      .                       // Break if there is a matching byte.
  2,586 ( 0.00%)              let zu = contains_zero_byte(u ^ repeated_x);
  2,586 ( 0.00%)              let zv = contains_zero_byte(v ^ repeated_x);
  1,724 ( 0.00%)              if zu || zv {
      .                           break;
      .                       }
      .                   }
    633 ( 0.00%)          offset -= 2 * chunk_bytes;
      .               }
      .           
      .               // Find the byte before the point the body loop stopped.
  9,288 ( 0.00%)      text[..offset].iter().rposition(|elt| *elt == x)
  2,696 ( 0.00%)  }

 99,621 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   27,580 ( 0.00%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       17 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,048 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,665 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        2 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
        8 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        6 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        6 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        9 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,198 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        3 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       38 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    5,511 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,336 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       21 ( 0.00%)      fn from(p: PathBuf) -> Self {
        6 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       18 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       21 ( 0.00%)      }
        .           }
        .           
       30 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       64 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       96 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       96 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       80 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
       88 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
       66 ( 0.00%)          match self.inner {
       22 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
       88 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,058 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
       22 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
       44 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        3 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        6 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        3 ( 0.00%)      pub lo: BytePos,
        3 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        6 ( 0.00%)      pub ctxt: SyntaxContext,
        2 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   14,638 ( 0.00%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       12 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    6,272 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    4,704 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    6,272 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    2,178 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    1,452 ( 0.00%)      }
        .               #[inline]
      300 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      300 ( 0.00%)      }
        .               #[inline]
      828 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      552 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      175 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      105 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       18 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       12 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
       36 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
       24 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 650 ----------------------------------------
        .               pub fn trim_start(self, other: Span) -> Option<Span> {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   if span.hi > other.hi { Some(span.with_lo(cmp::max(span.lo, other.hi))) } else { None }
        .               }
        .           
        .               /// Returns the source span -- this is either the supplied span, or the span for
        .               /// the macro callsite that expanded to it.
       20 ( 0.00%)      pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
        8 ( 0.00%)          if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
       16 ( 0.00%)      }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
       20 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
       10 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
       22 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
      735 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      490 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      116 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      150 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      138 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       25 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        5 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       20 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      294 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      252 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      210 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       25 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       30 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       16 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        4 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       16 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   13,816 ( 0.00%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    2,503 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        9 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        7 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    8,729 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   11,304 ( 0.00%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
       55 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
       35 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
       40 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
       77 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       14 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
       49 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
       63 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
       30 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        6 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      216 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      126 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
      306 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    1,494 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      996 ( 0.00%)          let mut span = self.data();
      812 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    1,494 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    1,642 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    1,664 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    1,456 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
       90 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       10 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
       90 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
       90 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
      275 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      484 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
        .           
        .           impl NonNarrowChar {
        .               fn new(pos: BytePos, width: usize) -> Self {
       64 ( 0.00%)          match width {
        .                       0 => NonNarrowChar::ZeroWidth(pos),
        .                       2 => NonNarrowChar::Wide(pos),
        .                       4 => NonNarrowChar::Tab(pos),
        .                       _ => panic!("width {} given for non-narrow character", width),
        .                   }
        .               }
        .           
        .               /// Returns the absolute offset of the character in the `SourceMap`.
-- line 1188 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        3 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       14 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,062 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
        6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,124 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        9 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
        9 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
       58 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        1 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        1 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        1 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        4 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        2 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        2 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        3 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       11 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,779 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      531 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  867,212 ( 0.06%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,062 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,841 ( 0.00%)              SourceFile {
    4,248 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,124 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,124 ( 0.00%)                  lines,
    2,124 ( 0.00%)                  multibyte_chars,
    2,124 ( 0.00%)                  non_narrow_chars,
    2,124 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,779 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       33 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        9 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        6 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        6 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        9 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       36 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        6 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       51 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       33 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       12 ( 0.00%)              lines,
       12 ( 0.00%)              multibyte_chars,
       12 ( 0.00%)              non_narrow_chars,
       12 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       27 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      105 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       15 ( 0.00%)          if matches!(
       30 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       15 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      135 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      529 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    1,735 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
      572 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
      801 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
      564 ( 0.00%)          assert!(line_index < self.lines.len());
      771 ( 0.00%)          if line_index == (self.lines.len() - 1) {
        3 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
      512 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      102 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
      306 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
    2,576 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
    7,308 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
    6,090 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      612 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      510 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      204 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
      357 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      102 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
       50 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       51 ( 0.00%)                  let linebpos = self.lines[a];
      102 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       51 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
      408 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
      408 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      153 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      102 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       51 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
      105 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
      255 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
      357 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       30 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       27 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        3 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    2,198 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      190 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    4,051 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,560,667 ( 0.11%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  831,272 ( 0.06%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1939 ----------------------------------------
        .               /// Because of multibyte UTF-8 characters, a byte offset
        .               /// is not equivalent to a character offset. The [`SourceMap`] will convert [`BytePos`]
        .               /// values to `CharPos` values as necessary.
        .               #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]
        .               pub struct CharPos(pub usize);
        .           }
        .           
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
       80 ( 0.00%)      fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
       96 ( 0.00%)      }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  141,694 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   13,370 ( 0.00%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    2,414 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   10,956 ( 0.00%)          let span = self.data_untracked();
    4,218 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
    5,730 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
        .           
    3,874 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    3,712 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
    7,424 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    3,712 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    1,856 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    1,856 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   15,280 ( 0.00%)      }
        .           }

1,192,977 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs
--------------------------------------------------------------------------------
Ir                 

-- line 62 ----------------------------------------
        .               message = "expected a `{Fn}<{Args}>` closure, found `{Self}`",
        .               label = "expected an `Fn<{Args}>` closure, found `{Self}`"
        .           )]
        .           #[fundamental] // so that regex can rely that `&str: !FnMut`
        .           #[must_use = "closures are lazy and do nothing unless called"]
        .           pub trait Fn<Args>: FnMut<Args> {
        .               /// Performs the call operation.
        .               #[unstable(feature = "fn_traits", issue = "29625")]
       30 ( 0.00%)      extern "rust-call" fn call(&self, args: Args) -> Self::Output;
        .           }
        .           
        .           /// The version of the call operator that takes a mutable receiver.
        .           ///
        .           /// Instances of `FnMut` can be called repeatedly and may mutate state.
        .           ///
        .           /// `FnMut` is implemented automatically by closures which take mutable
        .           /// references to captured variables, as well as all types that implement
-- line 78 ----------------------------------------
-- line 142 ----------------------------------------
        .               message = "expected a `{FnMut}<{Args}>` closure, found `{Self}`",
        .               label = "expected an `FnMut<{Args}>` closure, found `{Self}`"
        .           )]
        .           #[fundamental] // so that regex can rely that `&str: !FnMut`
        .           #[must_use = "closures are lazy and do nothing unless called"]
        .           pub trait FnMut<Args>: FnOnce<Args> {
        .               /// Performs the call operation.
        .               #[unstable(feature = "fn_traits", issue = "29625")]
3,895,446 ( 0.27%)      extern "rust-call" fn call_mut(&mut self, args: Args) -> Self::Output;
        .           }
        .           
        .           /// The version of the call operator that takes a by-value receiver.
        .           ///
        .           /// Instances of `FnOnce` can be called, but might not be callable multiple
        .           /// times. Because of this, if the only thing known about a type is that it
        .           /// implements `FnOnce`, it can only be called once.
        .           ///
-- line 158 ----------------------------------------
-- line 219 ----------------------------------------
        .           pub trait FnOnce<Args> {
        .               /// The returned type after the call operator is used.
        .               #[lang = "fn_once_output"]
        .               #[stable(feature = "fn_once_output", since = "1.12.0")]
        .               type Output;
        .           
        .               /// Performs the call operation.
        .               #[unstable(feature = "fn_traits", issue = "29625")]
  306,627 ( 0.02%)      extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
        .           }
        .           
        .           mod impls {
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A, F: ?Sized> Fn<A> for &F
        .               where
        .                   F: Fn<A>,
        .               {
        .                   extern "rust-call" fn call(&self, args: A) -> F::Output {
        4 ( 0.00%)              (**self).call(args)
        .                   }
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A, F: ?Sized> FnMut<A> for &F
        .               where
        .                   F: Fn<A>,
        .               {
-- line 245 ----------------------------------------
-- line 251 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A, F: ?Sized> FnOnce<A> for &F
        .               where
        .                   F: Fn<A>,
        .               {
        .                   type Output = F::Output;
        .           
        .                   extern "rust-call" fn call_once(self, args: A) -> F::Output {
        2 ( 0.00%)              (*self).call(args)
        .                   }
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A, F: ?Sized> FnMut<A> for &mut F
        .               where
        .                   F: FnMut<A>,
        .               {
    5,645 ( 0.00%)          extern "rust-call" fn call_mut(&mut self, args: A) -> F::Output {
   23,539 ( 0.00%)              (*self).call_mut(args)
    6,993 ( 0.00%)          }
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A, F: ?Sized> FnOnce<A> for &mut F
        .               where
        .                   F: FnMut<A>,
        .               {
        .                   type Output = F::Output;
   43,083 ( 0.00%)          extern "rust-call" fn call_once(self, args: A) -> F::Output {
    6,394 ( 0.00%)              (*self).call_mut(args)
   40,325 ( 0.00%)          }
        .               }
        .           }

    1,446 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ascii.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           /// let mut escaped = ascii::escape_default(b'\x9d');
        .           ///
        .           /// assert_eq!(b'\\', escaped.next().unwrap());
        .           /// assert_eq!(b'x', escaped.next().unwrap());
        .           /// assert_eq!(b'9', escaped.next().unwrap());
        .           /// assert_eq!(b'd', escaped.next().unwrap());
        .           /// ```
        .           #[stable(feature = "rust1", since = "1.0.0")]
  778,506 ( 0.05%)  pub fn escape_default(c: u8) -> EscapeDefault {
3,829,754 ( 0.26%)      let (data, len) = match c {
        .                   b'\t' => ([b'\\', b't', 0, 0], 2),
        .                   b'\r' => ([b'\\', b'r', 0, 0], 2),
        .                   b'\n' => ([b'\\', b'n', 0, 0], 2),
        .                   b'\\' => ([b'\\', b'\\', 0, 0], 2),
        .                   b'\'' => ([b'\\', b'\'', 0, 0], 2),
        .                   b'"' => ([b'\\', b'"', 0, 0], 2),
2,659,644 ( 0.18%)          b'\x20'..=b'\x7e' => ([c, 0, 0, 0], 1),
5,859,936 ( 0.40%)          _ => ([b'\\', b'x', hexify(c >> 4), hexify(c & 0xf)], 4),
        .               };
        .           
        .               return EscapeDefault { range: 0..len, data };
        .           
        .               fn hexify(b: u8) -> u8 {
        .                   match b {
7,813,248 ( 0.54%)              0..=9 => b'0' + b,
        .                       _ => b'a' + b - 10,
        .                   }
        .               }
3,892,530 ( 0.27%)  }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Iterator for EscapeDefault {
        .               type Item = u8;
7,040,008 ( 0.49%)      fn next(&mut self) -> Option<u8> {
8,224,494 ( 0.57%)          self.range.next().map(|i| self.data[i as usize])
7,040,008 ( 0.49%)      }
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.range.size_hint()
        .               }
        .               fn last(mut self) -> Option<u8> {
        .                   self.next_back()
        .               }
        .           }
        .           #[stable(feature = "rust1", since = "1.0.0")]
-- line 127 ----------------------------------------

  201,816 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ascii.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs
--------------------------------------------------------------------------------
Ir                 

-- line 375 ----------------------------------------
        .               /// ```
        .               /// let s = String::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> String {
      694 ( 0.00%)          String { vec: Vec::new() }
        .               }
        .           
        .               /// Creates a new empty `String` with a particular capacity.
        .               ///
        .               /// `String`s have an internal buffer to hold their data. The capacity is
        .               /// the length of that buffer, and can be queried with the [`capacity`]
        .               /// method. This method creates an empty `String`, but one with an initial
        .               /// buffer that can hold `capacity` bytes. This is useful when you may be
-- line 391 ----------------------------------------
-- line 420 ----------------------------------------
        .               /// // ...but this may make the string reallocate
        .               /// s.push('a');
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub fn with_capacity(capacity: usize) -> String {
    6,052 ( 0.00%)          String { vec: Vec::with_capacity(capacity) }
        .               }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Since we don't
        .               // require this method for testing purposes, I'll just stub it
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[inline]
        .               #[cfg(test)]
-- line 436 ----------------------------------------
-- line 492 ----------------------------------------
        .               ///
        .               /// [`from_utf8_unchecked`]: String::from_utf8_unchecked
        .               /// [`Vec<u8>`]: crate::vec::Vec "Vec"
        .               /// [`&str`]: prim@str "&str"
        .               /// [`into_bytes`]: String::into_bytes
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {
      420 ( 0.00%)          match str::from_utf8(&vec) {
        .                       Ok(..) => Ok(String { vec }),
       57 ( 0.00%)              Err(e) => Err(FromUtf8Error { bytes: vec, error: e }),
        .                   }
        .               }
        .           
        .               /// Converts a slice of bytes to a string, including invalid characters.
        .               ///
        .               /// Strings are made of bytes ([`u8`]), and a slice of bytes
        .               /// ([`&[u8]`][byteslice]) is made of bytes, so this function converts
        .               /// between the two. Not all byte slices are valid strings, however: strings
-- line 510 ----------------------------------------
-- line 550 ----------------------------------------
        .               /// let input = b"Hello \xF0\x90\x80World";
        .               /// let output = String::from_utf8_lossy(input);
        .               ///
        .               /// assert_eq!("Hello �World", output);
        .               /// ```
        .               #[must_use]
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      378 ( 0.00%)      pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {
      420 ( 0.00%)          let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();
        .           
      210 ( 0.00%)          let first_valid = if let Some(chunk) = iter.next() {
        .                       let lossy::Utf8LossyChunk { valid, broken } = chunk;
       42 ( 0.00%)              if broken.is_empty() {
        .                           debug_assert_eq!(valid.len(), v.len());
       42 ( 0.00%)                  return Cow::Borrowed(valid);
        .                       }
        .                       valid
        .                   } else {
        .                       return Cow::Borrowed("");
        .                   };
        .           
        .                   const REPLACEMENT: &str = "\u{FFFD}";
        .           
-- line 573 ----------------------------------------
-- line 578 ----------------------------------------
        .                   for lossy::Utf8LossyChunk { valid, broken } in iter {
        .                       res.push_str(valid);
        .                       if !broken.is_empty() {
        .                           res.push_str(REPLACEMENT);
        .                       }
        .                   }
        .           
        .                   Cow::Owned(res)
      336 ( 0.00%)      }
        .           
        .               /// Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]
        .               /// if `v` contains any invalid data.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 594 ----------------------------------------
-- line 762 ----------------------------------------
        .               /// };
        .               ///
        .               /// assert_eq!("💖", sparkle_heart);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {
      699 ( 0.00%)          String { vec: bytes }
        .               }
        .           
        .               /// Converts a `String` into a byte vector.
        .               ///
        .               /// This consumes the `String`, so we do not need to copy its contents.
        .               ///
        .               /// # Examples
        .               ///
-- line 778 ----------------------------------------
-- line 1138 ----------------------------------------
        .               /// s.push('2');
        .               /// s.push('3');
        .               ///
        .               /// assert_eq!("abc123", s);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   64,488 ( 0.00%)      pub fn push(&mut self, ch: char) {
        .                   match ch.len_utf8() {
        .                       1 => self.vec.push(ch as u8),
        .                       _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
        .                   }
   53,740 ( 0.00%)      }
        .           
        .               /// Returns a byte slice of this `String`'s contents.
        .               ///
        .               /// The inverse of this method is [`from_utf8`].
        .               ///
        .               /// [`from_utf8`]: String::from_utf8
        .               ///
        .               /// # Examples
-- line 1159 ----------------------------------------
-- line 1543 ----------------------------------------
        .               /// let fancy_f = String::from("ƒoo");
        .               /// assert_eq!(fancy_f.len(), 4);
        .               /// assert_eq!(fancy_f.chars().count(), 3);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn len(&self) -> usize {
       10 ( 0.00%)          self.vec.len()
        .               }
        .           
        .               /// Returns `true` if this `String` has a length of zero, and `false` otherwise.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 1559 ----------------------------------------
-- line 1563 ----------------------------------------
        .               ///
        .               /// v.push('a');
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   12,981 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the string into two at the given byte index.
        .               ///
        .               /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and
        .               /// the returned `String` contains bytes `[at, len)`. `at` must be on the
        .               /// boundary of a UTF-8 code point.
        .               ///
-- line 1579 ----------------------------------------
-- line 1845 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt("invalid utf-16: lone surrogate found", f)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Clone for String {
    2,412 ( 0.00%)      fn clone(&self) -> Self {
    1,206 ( 0.00%)          String { vec: self.vec.clone() }
    2,814 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.vec.clone_from(&source.vec);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl FromIterator<char> for String {
       12 ( 0.00%)      fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String {
        .                   let mut buf = String::new();
        .                   buf.extend(iter);
        .                   buf
       14 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "string_from_iter_by_ref", since = "1.17.0")]
        .           impl<'a> FromIterator<&'a char> for String {
        .               fn from_iter<I: IntoIterator<Item = &'a char>>(iter: I) -> String {
        .                   let mut buf = String::new();
        .                   buf.extend(iter);
-- line 1877 ----------------------------------------
-- line 1937 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Extend<char> for String {
        .               fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {
        8 ( 0.00%)          let iterator = iter.into_iter();
        .                   let (lower_bound, _) = iterator.size_hint();
        .                   self.reserve(lower_bound);
        .                   iterator.for_each(move |c| self.push(c));
        .               }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, c: char) {
        .                   self.push(c);
-- line 1953 ----------------------------------------
-- line 2128 ----------------------------------------
        .               fn default() -> String {
        .                   String::new()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Display for String {
        .               #[inline]
    1,044 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    2,116 ( 0.00%)          fmt::Display::fmt(&**self, f)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Debug for String {
        .               #[inline]
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Debug::fmt(&**self, f)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl hash::Hash for String {
        .               #[inline]
        .               fn hash<H: hash::Hasher>(&self, hasher: &mut H) {
    1,069 ( 0.00%)          (**self).hash(hasher)
        .               }
        .           }
        .           
        .           /// Implements the `+` operator for concatenating two strings.
        .           ///
        .           /// This consumes the `String` on the left-hand side and re-uses its buffer (growing it if
        .           /// necessary). This is done to avoid allocating a new `String` and copying the entire contents on
        .           /// every operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by
-- line 2161 ----------------------------------------
-- line 2194 ----------------------------------------
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Add<&str> for String {
        .               type Output = String;
        .           
        .               #[inline]
        .               fn add(mut self, other: &str) -> String {
        .                   self.push_str(other);
        2 ( 0.00%)          self
        .               }
        .           }
        .           
        .           /// Implements the `+=` operator for appending to a `String`.
        .           ///
        .           /// This has the same behavior as the [`push_str`][String::push_str] method.
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "stringaddassign", since = "1.12.0")]
-- line 2210 ----------------------------------------
-- line 2388 ----------------------------------------
        .           impl<T: fmt::Display + ?Sized> ToString for T {
        .               // A common guideline is to not inline generic functions. However,
        .               // removing `#[inline]` from this method causes non-negligible regressions.
        .               // See <https://github.com/rust-lang/rust/pull/74852>, the last attempt
        .               // to try to remove it.
        .               #[inline]
        .               default fn to_string(&self) -> String {
        .                   let mut buf = String::new();
      976 ( 0.00%)          let mut formatter = core::fmt::Formatter::new(&mut buf);
        .                   // Bypass format_args!() to avoid write_str with zero-length strs
      420 ( 0.00%)          fmt::Display::fmt(self, &mut formatter)
        .                       .expect("a Display implementation returned an error unexpectedly");
        .                   buf
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "char_to_string_specialization", since = "1.46.0")]
        .           impl ToString for char {
-- line 2406 ----------------------------------------
-- line 2620 ----------------------------------------
        .               /// ```
        .               /// # use std::borrow::Cow;
        .               /// assert_eq!(Cow::from("eggplant"), Cow::Borrowed("eggplant"));
        .               /// ```
        .               ///
        .               /// [`Borrowed`]: crate::borrow::Cow::Borrowed "borrow::Cow::Borrowed"
        .               #[inline]
        .               fn from(s: &'a str) -> Cow<'a, str> {
    1,218 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a> From<String> for Cow<'a, str> {
        .               /// Converts a [`String`] into an [`Owned`] variant.
        .               /// No heap allocation is performed, and the string
-- line 2636 ----------------------------------------
-- line 2643 ----------------------------------------
        .               /// let s = "eggplant".to_string();
        .               /// let s2 = "eggplant".to_string();
        .               /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));
        .               /// ```
        .               ///
        .               /// [`Owned`]: crate::borrow::Cow::Owned "borrow::Cow::Owned"
        .               #[inline]
        .               fn from(s: String) -> Cow<'a, str> {
      265 ( 0.00%)          Cow::Owned(s)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "cow_from_string_ref", since = "1.28.0")]
        .           impl<'a> From<&'a String> for Cow<'a, str> {
        .               /// Converts a [`String`] reference into a [`Borrowed`] variant.
        .               /// No heap allocation is performed, and the string
-- line 2659 ----------------------------------------
-- line 2709 ----------------------------------------
        .               /// ```
        .               /// let s1 = String::from("hello world");
        .               /// let v1 = Vec::from(s1);
        .               ///
        .               /// for b in v1 {
        .               ///     println!("{}", b);
        .               /// }
        .               /// ```
       88 ( 0.00%)      fn from(string: String) -> Vec<u8> {
      352 ( 0.00%)          string.into_bytes()
       88 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Write for String {
        .               #[inline]
   17,712 ( 0.00%)      fn write_str(&mut self, s: &str) -> fmt::Result {
        .                   self.push_str(s);
        .                   Ok(())
   15,498 ( 0.00%)      }
        .           
        .               #[inline]
  686,826 ( 0.05%)      fn write_char(&mut self, c: char) -> fmt::Result {
       67 ( 0.00%)          self.push(c);
        .                   Ok(())
  686,826 ( 0.05%)      }
        .           }
        .           
        .           /// A draining iterator for `String`.
        .           ///
        .           /// This struct is created by the [`drain`] method on [`String`]. See its
        .           /// documentation for more.
        .           ///
        .           /// [`drain`]: String::drain
-- line 2743 ----------------------------------------

2,742,057 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 417 ----------------------------------------
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
         .               pub const fn new() -> Self {
   222,484 ( 0.02%)          Vec { buf: RawVec::NEW, len: 0 }
        54 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   127,385 ( 0.01%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
         .               }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
     5,663 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
         .               }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn capacity(&self) -> usize {
    30,726 ( 0.00%)          self.buf.capacity()
         .               }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve(&mut self, additional: usize) {
    24,174 ( 0.00%)          self.buf.reserve(self.len, additional);
         .               }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
     1,183 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
     1,917 ( 0.00%)          if self.capacity() > self.len {
       950 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
         .               }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
         .                       self.shrink_to_fit();
       371 ( 0.00%)              let me = ManuallyDrop::new(self);
         .                       let buf = ptr::read(&me.buf);
         .                       let len = me.len();
         .                       buf.into_box(len).assume_init()
         .                   }
         .               }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
     8,467 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
     7,974 ( 0.00%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
    10,856 ( 0.00%)              self.len = len;
       362 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
    10,132 ( 0.00%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
   273,314 ( 0.02%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 3,862,784 ( 0.27%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
    57,879 ( 0.00%)          self.len = new_len;
       960 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // We replace self[index] with the last element. Note that if the
         .                       // bounds check above succeeds there must be a last element (which
         .                       // can be self[index] itself).
         .                       let value = ptr::read(self.as_ptr().add(index));
         .                       let base_ptr = self.as_mut_ptr();
         1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
         .                       self.set_len(len - 1);
         .                       value
         .                   }
         .               }
         .           
         .               /// Inserts an element at position `index` within the vector, shifting all
         .               /// elements after it to the right.
         .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       574 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
        84 ( 0.00%)          let len = self.len();
       172 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
       268 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
       396 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
       268 ( 0.00%)              self.set_len(len + 1);
         .                   }
       492 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
         .               pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
        75 ( 0.00%)          let len = self.len();
       298 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         .                           let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
        32 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
       226 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
        75 ( 0.00%)              self.set_len(len - 1);
         .                       ret
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    15,289 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
       822 ( 0.00%)          self.retain_mut(|elem| f(elem));
    14,880 ( 0.00%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
     1,925 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
     1,206 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
       685 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
    25,087 ( 0.00%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
     6,214 ( 0.00%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       255 ( 0.00%)                      g.processed_len += 1;
        98 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
         8 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
       636 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
       519 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
        35 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
        61 ( 0.00%)          let len = self.len();
       190 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
       424 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
        42 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
       240 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
        40 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        15 ( 0.00%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
10,849,381 ( 0.75%)          if self.len == self.buf.capacity() {
    50,943 ( 0.00%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
    21,681 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
         .                       ptr::write(end, value);
12,077,554 ( 0.83%)              self.len += 1;
         .                   }
        12 ( 0.00%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
    73,036 ( 0.01%)          if self.len == 0 {
        20 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
    49,178 ( 0.00%)                  self.len -= 1;
    10,069 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
        35 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
        30 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               unsafe fn append_elements(&mut self, other: *const [T]) {
         .                   let count = unsafe { (*other).len() };
         .                   self.reserve(count);
     5,527 ( 0.00%)          let len = self.len();
         .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
    40,773 ( 0.00%)          self.len += count;
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
     1,013 ( 0.00%)          let len = self.len();
         .                   let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
         .                       self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
       146 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
       395 ( 0.00%)              Drain {
         .                           tail_start: end,
       138 ( 0.00%)                  tail_len: len - end,
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
    14,105 ( 0.00%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn is_empty(&self) -> bool {
    21,134 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
        73 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
        59 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
     1,497 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
       203 ( 0.00%)          let len = self.len();
       406 ( 0.00%)          if new_len > len {
       910 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
     1,294 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
         .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
         .                       slice::from_raw_parts_mut(
         2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        26 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
         .               }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
     1,270 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
       127 ( 0.00%)          let len = self.len();
         .           
       381 ( 0.00%)          if new_len > len {
       261 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
       191 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
    12,606 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
       385 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
    18,591 ( 0.00%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
    10,005 ( 0.00%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
         6 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
     4,988 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
    24,964 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
     5,497 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
         .               fn deref(&self) -> &[T] {
   390,225 ( 0.03%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        25 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
         .               fn deref_mut(&mut self) -> &mut [T] {
    85,562 ( 0.01%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
    10,962 ( 0.00%)      fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
         2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
    13,788 ( 0.00%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
         .               fn index(&self, index: I) -> &Self::Output {
     6,246 ( 0.00%)          Index::index(&**self, index)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
   122,819 ( 0.01%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
         .               fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
    38,742 ( 0.00%)              let mut me = ManuallyDrop::new(self);
         .                       let alloc = ptr::read(me.allocator());
         .                       let begin = me.as_mut_ptr();
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
         .                           begin.add(me.len()) as *const T
         .                       };
         .                       let cap = me.buf.capacity();
    17,956 ( 0.00%)              IntoIter {
         .                           buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
         .                           end,
         .                       }
         .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
     1,062 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
       808 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
    36,948 ( 0.00%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       808 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
         .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
    18,861 ( 0.00%)          while let Some(element) = iterator.next() {
     1,022 ( 0.00%)              let len = self.len();
    31,468 ( 0.00%)              if len == self.capacity() {
       375 ( 0.00%)                  let (lower, _) = iterator.size_hint();
         .                           self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
         .                           ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
    25,773 ( 0.00%)                  self.set_len(len + 1);
         .                       }
         .                   }
       148 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
        88 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
       496 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
     1,176 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
    59,990 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
    29,326 ( 0.00%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
    70,230 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

   124,430 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    2,104 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  143,149 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
      438 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
    3,080 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   12,133 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    2,654 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
7,687,959 ( 0.53%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   57,357 ( 0.00%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    1,643 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      155 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      136 ( 0.00%)                  while let Some(x) = self.next() {
    3,062 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   16,844 ( 0.00%)                  while let Some(x) = self.next() {
   22,372 ( 0.00%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
      514 ( 0.00%)                  while let Some(x) = self.next() {
    5,348 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
      304 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    3,756 ( 0.00%)                  while let Some(x) = self.next() {
    5,569 ( 0.00%)                      if let Some(y) = f(x) {
      726 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      180 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
    6,473 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    2,917 ( 0.00%)                  while let Some(x) = self.next_back() {
   51,186 ( 0.00%)                      i -= 1;
   43,367 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    5,472 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
        .                       fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
      712 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
      732 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   60,427 ( 0.00%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

1,800,913 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs
--------------------------------------------------------------------------------
Ir                  

-- line 193 ----------------------------------------
         .               /// assert_eq!(a.iter().count(), 5);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn count(self) -> usize
         .               where
         .                   Self: Sized,
         .               {
     4,097 ( 0.00%)          self.fold(
         .                       0,
         .                       #[rustc_inherit_overflow_checks]
       444 ( 0.00%)              |count, _| count + 1,
         .                   )
         .               }
         .           
         .               /// Consumes the iterator, returning the last element.
         .               ///
         .               /// This method will evaluate the iterator until it returns [`None`]. While
         .               /// doing so, it keeps track of the current element. After [`None`] is
         .               /// returned, `last()` will then return the last element it saw.
-- line 212 ----------------------------------------
-- line 267 ----------------------------------------
         .               /// assert_eq!(iter.next(), Some(&3));
         .               /// assert_eq!(iter.advance_by(0), Ok(()));
         .               /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   for i in 0..n {
        55 ( 0.00%)              self.next().ok_or(i)?;
         .                   }
         .                   Ok(())
         .               }
         .           
         .               /// Returns the `n`th element of the iterator.
         .               ///
         .               /// Like most indexing operations, the count starts from zero, so `nth(0)`
         .               /// returns the first value, `nth(1)` the second, and so on.
-- line 283 ----------------------------------------
-- line 313 ----------------------------------------
         .               /// Returning `None` if there are less than `n + 1` elements:
         .               ///
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert_eq!(a.iter().nth(10), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        24 ( 0.00%)      fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   self.advance_by(n).ok()?;
       839 ( 0.00%)          self.next()
         .               }
         .           
         .               /// Creates an iterator starting at the same point, but stepping by
         .               /// the given amount at each iteration.
         .               ///
         .               /// Note 1: The first element of the iterator will always be returned,
         .               /// regardless of the step given.
         .               ///
-- line 331 ----------------------------------------
-- line 441 ----------------------------------------
         .               /// [`OsStr`]: ../../std/ffi/struct.OsStr.html
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>
         .               where
         .                   Self: Sized,
         .                   U: IntoIterator<Item = Self::Item>,
         .               {
     6,030 ( 0.00%)          Chain::new(self, other.into_iter())
         .               }
         .           
         .               /// 'Zips up' two iterators into a single iterator of pairs.
         .               ///
         .               /// `zip()` returns a new iterator that will iterate over two other
         .               /// iterators, returning a tuple where the first element comes from the
         .               /// first iterator, and the second element comes from the second iterator.
         .               ///
-- line 457 ----------------------------------------
-- line 555 ----------------------------------------
         .               /// [`zip`]: crate::iter::zip
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>
         .               where
         .                   Self: Sized,
         .                   U: IntoIterator,
         .               {
        30 ( 0.00%)          Zip::new(self, other.into_iter())
         .               }
         .           
         .               /// Creates a new iterator which places a copy of `separator` between adjacent
         .               /// items of the original iterator.
         .               ///
         .               /// In case `separator` does not implement [`Clone`] or needs to be
         .               /// computed every time, use [`intersperse_with`].
         .               ///
-- line 571 ----------------------------------------
-- line 714 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn map<B, F>(self, f: F) -> Map<Self, F>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> B,
         .               {
     8,950 ( 0.00%)          Map::new(self, f)
         .               }
         .           
         .               /// Calls a closure on each element of an iterator.
         .               ///
         .               /// This is equivalent to using a [`for`] loop on the iterator, although
         .               /// `break` and `continue` are not possible from a closure. It's generally
         .               /// more idiomatic to use a `for` loop, but `for_each` may be more legible
         .               /// when processing items at the end of longer iterator chains. In some
-- line 730 ----------------------------------------
-- line 761 ----------------------------------------
         .               #[stable(feature = "iterator_for_each", since = "1.21.0")]
         .               fn for_each<F>(self, f: F)
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item),
         .               {
         .                   #[inline]
         .                   fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
        60 ( 0.00%)              move |(), item| f(item)
         .                   }
         .           
    99,089 ( 0.01%)          self.fold((), call(f));
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element
         .               /// should be yielded.
         .               ///
         .               /// Given an element the closure must return `true` or `false`. The returned
         .               /// iterator will yield only the elements for which the closure returns
         .               /// true.
-- line 780 ----------------------------------------
-- line 834 ----------------------------------------
         .               /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn filter<P>(self, predicate: P) -> Filter<Self, P>
         .               where
         .                   Self: Sized,
         .                   P: FnMut(&Self::Item) -> bool,
         .               {
     1,052 ( 0.00%)          Filter::new(self, predicate)
         .               }
         .           
         .               /// Creates an iterator that both filters and maps.
         .               ///
         .               /// The returned iterator yields only the `value`s for which the supplied
         .               /// closure returns `Some(value)`.
         .               ///
         .               /// `filter_map` can be used to make chains of [`filter`] and [`map`] more
-- line 850 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> Option<B>,
         .               {
       478 ( 0.00%)          FilterMap::new(self, f)
         .               }
         .           
         .               /// Creates an iterator which gives the current iteration count as well as
         .               /// the next value.
         .               ///
         .               /// The iterator returned yields pairs `(i, val)`, where `i` is the
         .               /// current index of iteration and `val` is the value returned by the
         .               /// iterator.
-- line 895 ----------------------------------------
-- line 924 ----------------------------------------
         .               /// assert_eq!(iter.next(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn enumerate(self) -> Enumerate<Self>
         .               where
         .                   Self: Sized,
         .               {
         8 ( 0.00%)          Enumerate::new(self)
         .               }
         .           
         .               /// Creates an iterator which can use the [`peek`] and [`peek_mut`] methods
         .               /// to look at the next element of the iterator without consuming it. See
         .               /// their documentation for more information.
         .               ///
         .               /// Note that the underlying iterator is still advanced when [`peek`] or
         .               /// [`peek_mut`] are called for the first time: In order to retrieve the
-- line 940 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// [`peek_mut`]: Peekable::peek_mut
         .               /// [`next`]: Iterator::next
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn peekable(self) -> Peekable<Self>
         .               where
         .                   Self: Sized,
         .               {
        13 ( 0.00%)          Peekable::new(self)
         .               }
         .           
         .               /// Creates an iterator that [`skip`]s elements based on a predicate.
         .               ///
         .               /// [`skip`]: Iterator::skip
         .               ///
         .               /// `skip_while()` takes a closure as an argument. It will call this
         .               /// closure on each element of the iterator, and ignore elements
-- line 1011 ----------------------------------------
-- line 1537 ----------------------------------------
         .               /// assert_eq!(iter.next(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn fuse(self) -> Fuse<Self>
         .               where
         .                   Self: Sized,
         .               {
       282 ( 0.00%)          Fuse::new(self)
         .               }
         .           
         .               /// Does something with each element of an iterator, passing the value on.
         .               ///
         .               /// When using iterators, you'll often chain several of them together.
         .               /// While working on such code, you might want to check out what's
         .               /// happening at various parts in the pipeline. To do that, insert
         .               /// a call to `inspect()`.
-- line 1553 ----------------------------------------
-- line 1769 ----------------------------------------
         .               /// [`char`]: type@char
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use = "if you really need to exhaust the iterator, consider `.for_each(drop)` instead"]
         .               fn collect<B: FromIterator<Self::Item>>(self) -> B
         .               where
         .                   Self: Sized,
         .               {
       825 ( 0.00%)          FromIterator::from_iter(self)
         .               }
         .           
         .               /// Consumes an iterator, creating two collections from it.
         .               ///
         .               /// The predicate passed to `partition()` can return `true`, or `false`.
         .               /// `partition()` returns a pair, all of the elements for which it returned
         .               /// `true`, and all of the elements for which it returned `false`.
         .               ///
-- line 1785 ----------------------------------------
-- line 1798 ----------------------------------------
         .               /// let (even, odd): (Vec<i32>, Vec<i32>) = a
         .               ///     .iter()
         .               ///     .partition(|&n| n % 2 == 0);
         .               ///
         .               /// assert_eq!(even, vec![2]);
         .               /// assert_eq!(odd, vec![1, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         8 ( 0.00%)      fn partition<B, F>(self, f: F) -> (B, B)
         .               where
         .                   Self: Sized,
         .                   B: Default + Extend<Self::Item>,
         .                   F: FnMut(&Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn extend<'a, T, B: Extend<T>>(
         .                       mut f: impl FnMut(&T) -> bool + 'a,
-- line 1814 ----------------------------------------
-- line 1822 ----------------------------------------
         .                               right.extend_one(x);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut left: B = Default::default();
         .                   let mut right: B = Default::default();
         .           
         4 ( 0.00%)          self.fold((), extend(f, &mut left, &mut right));
         .           
         8 ( 0.00%)          (left, right)
         9 ( 0.00%)      }
         .           
         .               /// Reorders the elements of this iterator *in-place* according to the given predicate,
         .               /// such that all those that return `true` precede all those that return `false`.
         .               /// Returns the number of `true` elements found.
         .               ///
         .               /// The relative order of partitioned items is not maintained.
         .               ///
         .               /// # Current implementation
-- line 1841 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///     } else {
         .               ///         ControlFlow::Break(prev)
         .               ///     }
         .               /// });
         .               /// assert_eq!(triangular, ControlFlow::Continue(435));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "iterator_try_fold", since = "1.27.0")]
       272 ( 0.00%)      fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
         .               where
         .                   Self: Sized,
         .                   F: FnMut(B, Self::Item) -> R,
         .                   R: Try<Output = B>,
         .               {
       447 ( 0.00%)          let mut accum = init;
   151,865 ( 0.01%)          while let Some(x) = self.next() {
   433,532 ( 0.03%)              accum = f(accum, x)?;
         .                   }
       752 ( 0.00%)          try { accum }
       264 ( 0.00%)      }
         .           
         .               /// An iterator method that applies a fallible function to each item in the
         .               /// iterator, stopping at the first error and returning that error.
         .               ///
         .               /// This can also be thought of as the fallible form of [`for_each()`]
         .               /// or as the stateless version of [`try_fold()`].
         .               ///
         .               /// [`for_each()`]: Iterator::for_each
-- line 2038 ----------------------------------------
-- line 2080 ----------------------------------------
         .                   F: FnMut(Self::Item) -> R,
         .                   R: Try<Output = ()>,
         .               {
         .                   #[inline]
         .                   fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {
         .                       move |(), x| f(x)
         .                   }
         .           
         6 ( 0.00%)          self.try_fold((), call(f))
         .               }
         .           
         .               /// Folds every element into an accumulator by applying an operation,
         .               /// returning the final result.
         .               ///
         .               /// `fold()` takes two arguments: an initial value, and a closure with two
         .               /// arguments: an 'accumulator', and an element. The closure returns the value that
         .               /// the accumulator should have for the next iteration.
-- line 2096 ----------------------------------------
-- line 2188 ----------------------------------------
         .               /// // they're the same
         .               /// assert_eq!(result, result2);
         .               /// ```
         .               ///
         .               /// [`reduce()`]: Iterator::reduce
         .               #[doc(alias = "inject", alias = "foldl")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       133 ( 0.00%)      fn fold<B, F>(mut self, init: B, mut f: F) -> B
         .               where
         .                   Self: Sized,
         .                   F: FnMut(B, Self::Item) -> B,
         .               {
       513 ( 0.00%)          let mut accum = init;
16,852,107 ( 1.16%)          while let Some(x) = self.next() {
    17,272 ( 0.00%)              accum = f(accum, x);
         .                   }
         .                   accum
       152 ( 0.00%)      }
         .           
         .               /// Reduces the elements to a single one, by repeatedly applying a reducing
         .               /// operation.
         .               ///
         .               /// If the iterator is empty, returns [`None`]; otherwise, returns the
         .               /// result of the reduction.
         .               ///
         .               /// The reducing function is a closure with two arguments: an 'accumulator', and an element.
-- line 2214 ----------------------------------------
-- line 2240 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "iterator_fold_self", since = "1.51.0")]
         .               fn reduce<F>(mut self, f: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item, Self::Item) -> Self::Item,
         .               {
         .                   let first = self.next()?;
     1,314 ( 0.00%)          Some(self.fold(first, f))
         .               }
         .           
         .               /// Reduces the elements to a single one by repeatedly applying a reducing operation. If the
         .               /// closure returns a failure, the failure is propagated back to the caller immediately.
         .               ///
         .               /// The return type of this method depends on the return type of the closure. If the closure
         .               /// returns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,
         .               /// E>`. If the closure returns `Option<Self::Item>`, then this function will return
-- line 2256 ----------------------------------------
-- line 2370 ----------------------------------------
         .               fn all<F>(&mut self, f: F) -> bool
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
         .                       move |(), x| {
        32 ( 0.00%)                  if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }
         .                       }
         .                   }
       437 ( 0.00%)          self.try_fold((), check(f)) == ControlFlow::CONTINUE
         .               }
         .           
         .               /// Tests if any element of the iterator matches a predicate.
         .               ///
         .               /// `any()` takes a closure that returns `true` or `false`. It applies
         .               /// this closure to each element of the iterator, and if any of them return
         .               /// `true`, then so does `any()`. If they all return `false`, it
         .               /// returns `false`.
-- line 2389 ----------------------------------------
-- line 2423 ----------------------------------------
         .               fn any<F>(&mut self, f: F) -> bool
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
         .                       move |(), x| {
         6 ( 0.00%)                  if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }
         .                       }
         .                   }
         .           
         .                   self.try_fold((), check(f)) == ControlFlow::BREAK
         .               }
         .           
         .               /// Searches for an element of an iterator that satisfies a predicate.
         .               ///
-- line 2439 ----------------------------------------
-- line 2483 ----------------------------------------
         .               fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   P: FnMut(&Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {
         .                       move |(), x| {
     1,469 ( 0.00%)                  if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }
         .                       }
         .                   }
         .           
     2,019 ( 0.00%)          self.try_fold((), check(predicate)).break_value()
         .               }
         .           
         .               /// Applies function to the elements of iterator and returns
         .               /// the first non-none result.
         .               ///
         .               /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.
         .               ///
         .               /// # Examples
-- line 2503 ----------------------------------------
-- line 2513 ----------------------------------------
         .               #[stable(feature = "iterator_find_map", since = "1.30.0")]
         .               fn find_map<B, F>(&mut self, f: F) -> Option<B>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> Option<B>,
         .               {
         .                   #[inline]
         .                   fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {
     3,235 ( 0.00%)              move |(), x| match f(x) {
     2,402 ( 0.00%)                  Some(x) => ControlFlow::Break(x),
         .                           None => ControlFlow::CONTINUE,
         .                       }
         .                   }
         .           
       491 ( 0.00%)          self.try_fold((), check(f)).break_value()
         .               }
         .           
         .               /// Applies function to the elements of iterator and returns
         .               /// the first true result or the first error.
         .               ///
         .               /// The return type of this method depends on the return type of the closure.
         .               /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.
         .               /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.
-- line 2535 ----------------------------------------
-- line 2812 ----------------------------------------
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = [-3_i32, 0, 1, 5, -10];
         .               /// assert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "iter_cmp_by_key", since = "1.6.0")]
       189 ( 0.00%)      fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(&Self::Item) -> B,
         .               {
         .                   #[inline]
         .                   fn key<T, B>(mut f: impl FnMut(&T) -> B) -> impl FnMut(T) -> (B, T) {
       152 ( 0.00%)              move |x| (f(&x), x)
         .                   }
         .           
         .                   #[inline]
         .                   fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {
         .                       x_p.cmp(y_p)
         .                   }
         .           
       325 ( 0.00%)          let (_, x) = self.map(key(f)).max_by(compare)?;
         .                   Some(x)
       216 ( 0.00%)      }
         .           
         .               /// Returns the element that gives the maximum value with respect to the
         .               /// specified comparison function.
         .               ///
         .               /// If several elements are equally maximum, the last element is
         .               /// returned. If the iterator is empty, [`None`] is returned.
         .               ///
         .               /// # Examples
-- line 2845 ----------------------------------------
-- line 2852 ----------------------------------------
         .               #[stable(feature = "iter_max_by", since = "1.15.0")]
         .               fn max_by<F>(self, compare: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(&Self::Item, &Self::Item) -> Ordering,
         .               {
         .                   #[inline]
         .                   fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {
       126 ( 0.00%)              move |x, y| cmp::max_by(x, y, &mut compare)
         .                   }
         .           
       822 ( 0.00%)          self.reduce(fold(compare))
         .               }
         .           
         .               /// Returns the element that gives the minimum value from the
         .               /// specified function.
         .               ///
         .               /// If several elements are equally minimum, the first element is
         .               /// returned. If the iterator is empty, [`None`] is returned.
         .               ///
-- line 2871 ----------------------------------------
-- line 2946 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[doc(alias = "reverse")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn rev(self) -> Rev<Self>
         .               where
         .                   Self: Sized + DoubleEndedIterator,
         .               {
        13 ( 0.00%)          Rev::new(self)
         .               }
         .           
         .               /// Converts an iterator of pairs into a pair of containers.
         .               ///
         .               /// `unzip()` consumes an entire iterator of pairs, producing two
         .               /// collections: one from the left elements of the pairs, and one
         .               /// from the right elements.
         .               ///
-- line 2962 ----------------------------------------
-- line 2987 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)
         .               where
         .                   FromA: Default + Extend<A>,
         .                   FromB: Default + Extend<B>,
         .                   Self: Sized + Iterator<Item = (A, B)>,
         .               {
         .                   let mut unzipped: (FromA, FromB) = Default::default();
        12 ( 0.00%)          unzipped.extend(self);
         .                   unzipped
         .               }
         .           
         .               /// Creates an iterator which copies all of its elements.
         .               ///
         .               /// This is useful when you have an iterator over `&T`, but you need an
         .               /// iterator over `T`.
         .               ///
-- line 3003 ----------------------------------------
-- line 3017 ----------------------------------------
         .               /// assert_eq!(v_map, vec![1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "iter_copied", since = "1.36.0")]
         .               fn copied<'a, T: 'a>(self) -> Copied<Self>
         .               where
         .                   Self: Sized + Iterator<Item = &'a T>,
         .                   T: Copy,
         .               {
       814 ( 0.00%)          Copied::new(self)
         .               }
         .           
         .               /// Creates an iterator which [`clone`]s all of its elements.
         .               ///
         .               /// This is useful when you have an iterator over `&T`, but you need an
         .               /// iterator over `T`.
         .               ///
         .               /// [`clone`]: Clone::clone
-- line 3033 ----------------------------------------
-- line 3048 ----------------------------------------
         .               /// assert_eq!(v_map, vec![1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn cloned<'a, T: 'a>(self) -> Cloned<Self>
         .               where
         .                   Self: Sized + Iterator<Item = &'a T>,
         .                   T: Clone,
         .               {
     8,052 ( 0.00%)          Cloned::new(self)
         .               }
         .           
         .               /// Repeats an iterator endlessly.
         .               ///
         .               /// Instead of stopping at [`None`], the iterator will instead start again,
         .               /// from the beginning. After iterating again, it will start at the
         .               /// beginning again. And again. And again. Forever. Note that in case the
         .               /// original iterator is empty, the resulting iterator will also be empty.
-- line 3064 ----------------------------------------
-- line 3313 ----------------------------------------
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!([1].iter().eq([1].iter()), true);
         .               /// assert_eq!([1].iter().eq([1, 2].iter()), false);
         .               /// ```
         .               #[stable(feature = "iter_order", since = "1.5.0")]
         7 ( 0.00%)      fn eq<I>(self, other: I) -> bool
         .               where
         .                   I: IntoIterator,
         .                   Self::Item: PartialEq<I::Item>,
         .                   Self: Sized,
         .               {
         8 ( 0.00%)          self.eq_by(other, |x, y| x == y)
         8 ( 0.00%)      }
         .           
         .               /// Determines if the elements of this [`Iterator`] are equal to those of
         .               /// another with respect to the specified equality function.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 3336 ----------------------------------------
-- line 3344 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "iter_order_by", issue = "64295")]
         .               fn eq_by<I, F>(mut self, other: I, mut eq: F) -> bool
         .               where
         .                   Self: Sized,
         .                   I: IntoIterator,
         .                   F: FnMut(Self::Item, I::Item) -> bool,
         .               {
        10 ( 0.00%)          let mut other = other.into_iter();
         .           
         .                   loop {
         3 ( 0.00%)              let x = match self.next() {
         .                           None => return other.next().is_none(),
        11 ( 0.00%)                  Some(val) => val,
         .                       };
         .           
         3 ( 0.00%)              let y = match other.next() {
         .                           None => return false,
         .                           Some(val) => val,
         .                       };
         .           
         .                       if !eq(x, y) {
         .                           return false;
         .                       }
         .                   }
-- line 3368 ----------------------------------------
-- line 3589 ----------------------------------------
         .                   unreachable!("Always specialized");
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<I: Iterator + ?Sized> Iterator for &mut I {
         .               type Item = I::Item;
         .               #[inline]
        14 ( 0.00%)      fn next(&mut self) -> Option<I::Item> {
     4,379 ( 0.00%)          (**self).next()
        21 ( 0.00%)      }
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (**self).size_hint()
         .               }
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   (**self).advance_by(n)
         .               }
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   (**self).nth(n)
-- line 3607 ----------------------------------------

 1,954,121 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
174,546,319 (12.03%)  events annotated

