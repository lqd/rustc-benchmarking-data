--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name rustc_rayon --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C metadata=e5c2fbecfc1e9f73 -C extra-filename=-e5c2fbecfc1e9f73 --out-dir /usr/home/liquid/tmp/.tmpIq7ZHg/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmpIq7ZHg/target/release/deps --extern crossbeam_deque=/usr/home/liquid/tmp/.tmpIq7ZHg/target/release/deps/libcrossbeam_deque-7ca9a6c6b328927d.rmeta --extern either=/usr/home/liquid/tmp/.tmpIq7ZHg/target/release/deps/libeither-f72f3f7140fed96e.rmeta --extern rayon_core=/usr/home/liquid/tmp/.tmpIq7ZHg/target/release/deps/librustc_rayon_core-1c7346af1f6b15c3.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-rustc-rayon-0.3.2-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
9,888,376,862 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
329,633,503 ( 3.33%)  ./malloc/malloc.c:_int_free
232,184,925 ( 2.35%)  ./malloc/malloc.c:_int_malloc
190,409,219 ( 1.93%)  ./malloc/malloc.c:malloc
103,056,240 ( 1.04%)  ./malloc/malloc.c:free
102,494,464 ( 1.04%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 77,476,147 ( 0.78%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 74,300,537 ( 0.75%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 49,675,887 ( 0.50%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
 47,793,910 ( 0.48%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
 46,590,686 ( 0.47%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 44,177,586 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
 41,264,820 ( 0.42%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 37,530,624 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 37,262,584 ( 0.38%)  ???:llvm::InstCombinerImpl::run()
 35,846,434 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 35,235,710 ( 0.36%)  ./malloc/malloc.c:malloc_consolidate
 34,672,921 ( 0.35%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 33,849,218 ( 0.34%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 33,032,612 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 31,527,031 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 31,172,480 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 30,503,986 ( 0.31%)  ./malloc/malloc.c:realloc
 30,100,296 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:<rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates
 29,673,588 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 28,428,585 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 26,515,458 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
 24,430,231 ( 0.25%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
 24,181,533 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 24,085,378 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 23,869,109 ( 0.24%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 22,854,305 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 22,139,558 ( 0.22%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
 21,549,438 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 21,339,978 ( 0.22%)  ./malloc/malloc.c:_int_realloc
 21,073,259 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
 20,895,647 ( 0.21%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 20,682,602 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
 20,244,154 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 20,156,445 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 19,905,264 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 19,400,796 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::Predicate>::to_opt_poly_trait_pred
 19,195,305 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 19,106,140 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::equate::Equate>
 19,085,598 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 18,502,257 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 18,286,380 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 18,123,422 ( 0.18%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
 17,962,443 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 17,762,345 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 17,749,619 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::commit_if_ok::<rustc_middle::ty::sty::Binder<rustc_middle::ty::sty::TraitRef>, rustc_middle::ty::error::TypeError, <rustc_infer::infer::combine::CombineFields>::higher_ranked_sub<rustc_middle::ty::sty::TraitRef>::{closure#0}>
 17,394,336 ( 0.18%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 16,943,031 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 16,320,690 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 16,162,305 ( 0.16%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
 15,882,699 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
 15,613,523 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 15,566,734 ( 0.16%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 15,528,142 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 15,425,043 ( 0.16%)  ./malloc/malloc.c:calloc
 15,193,476 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::rollback_to
 15,110,418 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 15,077,579 ( 0.15%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 14,462,094 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 14,396,490 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs:<rustc_infer::infer::canonical::canonicalizer::Canonicalizer as rustc_middle::ty::fold::TypeFolder>::fold_ty
 14,309,581 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<rustc_infer::infer::region_constraints::RegionConstraintCollector>::make_subregion
 14,302,466 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 14,260,807 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs:<rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates
 14,245,276 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 14,177,546 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs:<alloc::collections::btree::map::BTreeMap<rustc_middle::ty::sty::BoundRegion, &rustc_middle::ty::sty::RegionKind> as core::ops::drop::Drop>::drop
 14,075,133 ( 0.14%)  ???:llvm::ValueHandleBase::AddToUseList()
 13,593,306 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 13,586,220 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::new_var
 13,572,059 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
 13,421,535 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 13,342,591 ( 0.13%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
 13,333,948 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 13,163,564 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 13,100,152 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
 13,001,651 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 12,949,843 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 12,804,457 ( 0.13%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
 12,764,910 ( 0.13%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
 12,572,134 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::commit_if_ok::<rustc_infer::infer::InferOk<()>, rustc_middle::ty::error::TypeError, <rustc_infer::infer::at::Trace>::sub<rustc_middle::ty::sty::Binder<rustc_middle::ty::sty::TraitRef>>::{closure#0}>
 12,563,936 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 12,504,072 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/higher_ranked/mod.rs:<rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders::<rustc_middle::ty::sty::TraitRef>
 12,207,516 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::context::TyCtxt>::replace_bound_vars::<rustc_middle::ty::sty::TraitRef, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::sty::TraitRef>::{closure#0}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::sty::TraitRef>::{closure#1}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::sty::TraitRef>::{closure#2}>
 12,087,433 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::InferCtxt>::super_combine_tys::<rustc_infer::infer::equate::Equate>
 12,056,991 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 12,022,109 ( 0.12%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
 11,892,503 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 11,841,483 ( 0.12%)  ???:computeKnownBits(llvm::Value const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 11,769,790 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 11,757,594 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 11,607,633 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 11,598,675 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::register_obligation_at
 11,373,803 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<rustc_middle::ty::sty::TraitRef as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::sub::Sub>
 11,330,541 ( 0.11%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 11,001,628 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::TraitPredicate>::remap_constness
 10,976,561 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 10,901,658 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::context::TyCtxt>::replace_bound_vars::<rustc_middle::ty::sty::TraitRef, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_fresh_vars<rustc_middle::ty::sty::TraitRef>::{closure#0}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_fresh_vars<rustc_middle::ty::sty::TraitRef>::{closure#1}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_fresh_vars<rustc_middle::ty::sty::TraitRef>::{closure#2}>
 10,770,490 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 10,731,836 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 10,527,229 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 10,509,719 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 10,325,898 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
 10,309,498 ( 0.10%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,292,724 ( 0.10%)  ???:llvm::removeUnreachableBlocks(llvm::Function&, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*)
 10,283,344 ( 0.10%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 10,268,145 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 10,247,103 ( 0.10%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 10,236,627 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 10,218,457 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
 10,194,454 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::mk_region
 10,186,632 ( 0.10%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
 10,140,704 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty
 10,120,845 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 10,022,904 ( 0.10%)  ???:llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&, llvm::LibFunc&) const
 10,008,241 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
  9,929,600 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_where_clause_trait_ref

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
   166,155 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   175,994 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   382,432 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    28,870 ( 0.00%)          i += 2
         .               }
         .           
   175,994 ( 0.00%)      if i < count {
   131,714 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 2,171,070 ( 0.02%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
14,407,555 ( 0.15%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
 4,408,360 ( 0.04%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
   715,552 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   217,502 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   217,502 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 2,175,020 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 1,740,016 ( 0.02%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 1,957,518 ( 0.02%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
 1,018,250 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
   870,008 ( 0.01%)          self.processed += BUFFER_SIZE;
   435,004 ( 0.00%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    23,389 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
   500,856 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   184,646 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
    92,944 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
    52,290 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    31,645 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
     6,329 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    18,987 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
     6,329 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    12,658 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
    48,896 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    55,225 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    97,792 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    12,658 ( 0.00%)          let input_left = length - processed;
     6,912 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
     3,444 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
     3,444 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
     3,444 ( 0.00%)              self.state.v0 ^= elem;
     6,888 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
     6,329 ( 0.00%)          self.nbuf = extra_bytes_left;
    31,645 ( 0.00%)          self.processed += nbuf + processed;
    37,974 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
    91,005 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
   121,340 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
    83,065 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    83,065 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
    83,065 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
    60,670 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    26,113 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
    86,025 ( 0.00%)          let length = self.processed + self.nbuf;
    59,152 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    29,576 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    29,576 ( 0.00%)          state.v0 ^= b;
         .           
    29,576 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
    98,646 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    39,492 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    39,492 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
 7,856,477 ( 0.08%)          compress!(state);
 8,419,182 ( 0.09%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   197,288 ( 0.00%)          compress!(state);
   197,288 ( 0.00%)          compress!(state);
   197,288 ( 0.00%)          compress!(state);
   167,713 ( 0.00%)          compress!(state);
         .               }
         .           }

 1,805,838 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                  

-- line 46 ----------------------------------------
         .           ///
         .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
         .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
         .               /// provided default definition delegates.  Implementors **should not** override
         .               /// this provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_super_fold_with` instead).
19,376,566 ( 0.20%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
 1,255,810 ( 0.01%)          self.try_super_fold_with(folder).into_ok()
20,597,689 ( 0.21%)      }
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
         .               /// default definition delegates.  Implementors **should not** override this
         .               /// provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_fold_with` instead).
   835,217 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   561,450 ( 0.01%)          self.try_fold_with(folder).into_ok()
   778,106 ( 0.01%)      }
         .           
         .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error>;
         .           
39,271,709 ( 0.40%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
13,520,034 ( 0.14%)          self.try_super_fold_with(folder)
41,120,643 ( 0.42%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
 2,083,949 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 1,881,845 ( 0.02%)          self.super_visit_with(visitor)
 1,339,494 ( 0.01%)      }
         .           
         .               /// Returns `true` if `self` has any late-bound regions that are either
         .               /// bound by `binder` or bound by some binder outside of `binder`.
         .               /// If `binder` is `ty::INNERMOST`, this indicates whether
         .               /// there are any late-bound regions that appear free.
         .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
 1,961,507 ( 0.02%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
         .               }
         .           
         .               /// Returns `true` if this `self` has any regions that escape `binder` (and
         .               /// hence are not bound by it).
         .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
       123 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
         .               }
         .           
 3,972,202 ( 0.04%)      fn has_escaping_bound_vars(&self) -> bool {
   583,447 ( 0.01%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
 3,981,833 ( 0.04%)      }
         .           
   482,489 ( 0.00%)      #[instrument(level = "trace")]
         .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   507,225 ( 0.01%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
         .               }
         .               fn has_projections(&self) -> bool {
    21,760 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
         .               }
         .               fn has_opaque_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
         .               }
   130,360 ( 0.00%)      fn references_error(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_ERROR)
   130,360 ( 0.00%)      }
         .               fn has_param_types_or_consts(&self) -> bool {
    18,510 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
         .               }
         .               fn has_infer_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
         .               }
         .               fn has_infer_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
         .               }
         .               fn has_infer_types_or_consts(&self) -> bool {
   655,574 ( 0.01%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
         .               }
   372,704 ( 0.00%)      fn needs_infer(&self) -> bool {
   459,447 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
   374,608 ( 0.00%)      }
         .               fn has_placeholders(&self) -> bool {
         .                   self.has_type_flags(
         .                       TypeFlags::HAS_RE_PLACEHOLDER
         .                           | TypeFlags::HAS_TY_PLACEHOLDER
         .                           | TypeFlags::HAS_CT_PLACEHOLDER,
         .                   )
         .               }
         .               fn needs_subst(&self) -> bool {
        96 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_SUBST)
         .               }
         .               /// "Free" regions in this context means that it has any region
         .               /// that is not (a) erased or (b) late-bound.
         .               fn has_free_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
         .               }
         .           
         .               fn has_erased_regions(&self) -> bool {
-- line 142 ----------------------------------------
-- line 146 ----------------------------------------
         .               /// True if there are any un-erased free regions.
         .               fn has_erasable_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
         .               }
         .           
         .               /// Indicates whether this value references only 'global'
         .               /// generic parameters that are the same regardless of what fn we are
         .               /// in. This is used for caching.
     2,430 ( 0.00%)      fn is_global(&self) -> bool {
   262,994 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
     2,916 ( 0.00%)      }
         .           
         .               /// True if there are any late-bound regions
         .               fn has_late_bound_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
         .               }
         .           
         .               /// Indicates whether this value still has parameters/placeholders/inference variables
         .               /// which could be replaced later, in a way that would change the results of `impl`
-- line 164 ----------------------------------------
-- line 194 ----------------------------------------
         .           
         .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
         .           
         .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
 7,611,522 ( 0.08%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
   266,567 ( 0.00%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   r.super_fold_with(self)
         .               }
         .           
         .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
     9,613 ( 0.00%)          c.super_fold_with(self)
         .               }
         .           
         .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
    83,838 ( 0.00%)          p.super_fold_with(self)
         .               }
         .           
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
         .           /// A blanket implementation of this trait (that defers to the relevant
         .           /// method of [`TypeFolder`]) is provided for all infallible folders in
         .           /// order to ensure the two APIs are coherent.
         .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
         .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   354,588 ( 0.00%)          t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
         .                   t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
         .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
         .                   c.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    95,197 ( 0.00%)          p.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_mir_const(
         .                   &mut self,
         .                   c: mir::ConstantKind<'tcx>,
         .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
         .           }
         .           
         .           // Blanket implementation of fallible trait for infallible folders
         .           // delegates to infallible methods to prevent incoherence
         .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
         .           where
         .               F: TypeFolder<'tcx, Error = !>,
         .           {
 1,264,866 ( 0.01%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 2,114,291 ( 0.02%)          Ok(self.fold_binder(t))
 1,690,124 ( 0.02%)      }
         .           
   926,374 ( 0.01%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
10,241,574 ( 0.10%)          Ok(self.fold_ty(t))
   745,438 ( 0.01%)      }
         .           
   402,212 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
 1,234,455 ( 0.01%)          Ok(self.fold_region(r))
   402,212 ( 0.00%)      }
         .           
       777 ( 0.00%)      fn try_fold_const(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
    89,594 ( 0.00%)          Ok(self.fold_const(c))
       262 ( 0.00%)      }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
         .                   Ok(self.fold_predicate(p))
         .               }
         .           
     1,256 ( 0.00%)      fn try_fold_mir_const(
         .                   &mut self,
         .                   c: mir::ConstantKind<'tcx>,
         .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
     2,038 ( 0.00%)          Ok(self.fold_mir_const(c))
     1,256 ( 0.00%)      }
         .           }
         .           
         .           pub trait TypeVisitor<'tcx>: Sized {
         .               type BreakTy = !;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
       612 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
       339 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   r.super_visit_with(self)
         .               }
         .           
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   c.super_visit_with(self)
-- line 350 ----------------------------------------
-- line 376 ----------------------------------------
         .           
         .           impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>
         .           where
         .               F: FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
         .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
         .           {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
       555 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    18,894 ( 0.00%)          let t = ty.super_fold_with(self);
         .                   (self.ty_op)(t)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   let r = r.super_fold_with(self);
         .                   (self.lt_op)(r)
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       290 ( 0.00%)          let ct = ct.super_fold_with(self);
         .                   (self.ct_op)(ct)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Region folder
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
         .               }
         .           
         .               /// Invoke `callback` on every region appearing free in `value`.
     7,302 ( 0.00%)      pub fn for_each_free_region(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>),
         .               ) {
         .                   self.any_free_region_meets(value, |r| {
    30,149 ( 0.00%)              callback(r);
         .                       false
         .                   });
     6,388 ( 0.00%)      }
         .           
         .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
         .               pub fn all_free_regions_meet(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
     7,464 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
         .               }
         .           
         .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
         .               pub fn any_free_region_meets(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
         .                       F: FnMut(ty::Region<'tcx>) -> bool,
         .                   {
         .                       type BreakTy = ();
         .           
         .                       fn visit_binder<T: TypeFoldable<'tcx>>(
         .                           &mut self,
         .                           t: &Binder<'tcx, T>,
         .                       ) -> ControlFlow<Self::BreakTy> {
       692 ( 0.00%)                  self.outer_index.shift_in(1);
       816 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
       612 ( 0.00%)                  self.outer_index.shift_out(1);
         .                           result
         .                       }
         .           
    26,055 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    52,147 ( 0.00%)                  match *r {
         8 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
         .                                   ControlFlow::CONTINUE
         .                               }
         .                               _ => {
         .                                   if (self.callback)(r) {
         .                                       ControlFlow::BREAK
         .                                   } else {
         .                                       ControlFlow::CONTINUE
         .                                   }
         .                               }
         .                           }
    36,477 ( 0.00%)              }
         .           
         .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                           // We're only interested in types involving regions
    44,206 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
    42,320 ( 0.00%)                      ty.super_visit_with(self)
         .                           } else {
         .                               ControlFlow::CONTINUE
         .                           }
         .                       }
         .                   }
         .           
    96,633 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
         .               }
         .           }
         .           
         .           /// Folds over the substructure of a type, visiting its component
         .           /// types and all regions that occur *free* within it.
         .           ///
         .           /// That is, `Ty` can contain function or method types that bind
         .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
         .           
         .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
         .               #[inline]
         .               pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   skipped_regions: &'a mut bool,
         .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
         .               ) -> RegionFolder<'a, 'tcx> {
   466,209 ( 0.00%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   360,890 ( 0.00%)          self.tcx
   360,890 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
     6,460 ( 0.00%)          self.current_index.shift_in(1);
     2,652 ( 0.00%)          let t = t.super_fold_with(self);
     6,123 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
     2,278 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    68,444 ( 0.00%)          match *r {
     2,278 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
         .                           debug!(?self.current_index, "skipped bound region");
     2,278 ( 0.00%)                  *self.skipped_regions = true;
         .                           r
         .                       }
         .                       _ => {
         .                           debug!(?self.current_index, "folding free region");
   198,498 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Bound vars replacer
         .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
         .               current_index: ty::DebruijnIndex,
         .           
         .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .           }
         .           
         .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
   195,498 ( 0.00%)      fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .               ) -> Self {
   703,542 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
    97,749 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   614,218 ( 0.01%)          self.tcx
   357,151 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
   721,802 ( 0.01%)          self.current_index.shift_in(1);
 1,981,920 ( 0.02%)          let t = t.super_fold_with(self);
   697,775 ( 0.01%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
 1,546,730 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   964,762 ( 0.01%)          match *t.kind() {
    14,290 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
     2,866 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
         .                               let ty = fld_t(bound_ty);
     2,866 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
         .                           }
         .                       }
   959,030 ( 0.01%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
 1,082,319 ( 0.01%)                  return t.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   t
 1,087,002 ( 0.01%)      }
         .           
   425,400 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   492,498 ( 0.00%)          match *r {
   491,758 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
   245,787 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
         .                               let region = fld_r(br);
   503,862 ( 0.01%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
         .                                   // If the callback returns a late-bound region,
         .                                   // that region should always use the INNERMOST
         .                                   // debruijn index. Then we adjust it to the
         .                                   // correct depth.
     6,144 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    61,409 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
         .                               } else {
         .                                   region
         .                               };
         .                           }
         .                       }
         .                       _ => {}
         .                   }
         .                   r
   425,400 ( 0.00%)      }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        18 ( 0.00%)          match *ct {
         .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
         .                           if debruijn == self.current_index =>
         .                       {
         .                           if let Some(fld_c) = self.fld_c.as_mut() {
         .                               let ct = fld_c(bound_const, ty);
         .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
         .                           }
         .                       }
         6 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
         .                           return ct.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   ct
         .               }
         .           }
         .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
         .                   mut fld_r: F,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
         .                   let mut real_fld_r =
   639,604 ( 0.01%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    30,038 ( 0.00%)          let value = value.skip_binder();
   297,355 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
   500,124 ( 0.01%)              value
         .                   } else {
    56,688 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
    49,632 ( 0.00%)              value.fold_with(&mut replacer)
         .                   };
 1,004,020 ( 0.01%)          (value, region_map)
         .               }
         .           
         .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
         .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
         .               /// closure replaces escaping bound consts.
   594,100 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: T,
         .                   mut fld_r: F,
         .                   mut fld_t: G,
         .                   mut fld_c: H,
         .               ) -> T
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
   199,083 ( 0.00%)          if !value.has_escaping_bound_vars() {
   623,867 ( 0.01%)              value
         .                   } else {
         .                       let mut replacer =
 1,092,869 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
   118,001 ( 0.00%)              value.fold_with(&mut replacer)
         .                   }
   407,918 ( 0.00%)      }
         .           
         .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
         .               /// closure replaces bound regions while the `fld_t` closure replaces bound
         .               /// types.
 8,690,507 ( 0.09%)      pub fn replace_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: Binder<'tcx, T>,
         .                   mut fld_r: F,
         .                   fld_t: G,
         .                   fld_c: H,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
   295,403 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
 7,515,534 ( 0.08%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
 6,007,979 ( 0.06%)          (value, region_map)
 6,595,286 ( 0.07%)      }
         .           
         .               /// Replaces any late-bound regions bound in `value` with
         .               /// free variants attached to `all_outlive_scope`.
    61,710 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
         .                   self,
         .                   all_outlive_scope: DefId,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_late_bound_regions(value, |br| {
    43,641 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
     6,714 ( 0.00%)                  scope: all_outlive_scope,
         .                           bound_region: br.kind,
         .                       }))
         .                   })
         .                   .0
    33,660 ( 0.00%)      }
         .           
         .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_escaping_bound_vars(
   451,455 ( 0.00%)              value,
         .                       |r| {
         .                           self.mk_region(ty::ReLateBound(
         .                               ty::INNERMOST,
         .                               ty::BoundRegion {
         .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
         .                                   kind: r.kind,
         .                               },
         .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
         .               fn collect_late_bound_regions<T>(
         .                   self,
         .                   value: &Binder<'tcx, T>,
         .                   just_constraint: bool,
         .               ) -> FxHashSet<ty::BoundRegionKind>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
     8,632 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
         .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
         .                   assert!(result.is_continue()); // should never have stopped early
    15,632 ( 0.00%)          collector.regions
         .               }
         .           
         .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
         .               /// method lookup and a few other places where precise region relationships are not required.
        49 ( 0.00%)      pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
     9,104 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
        42 ( 0.00%)      }
         .           
         .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
         .               /// assigned starting at 0 and increasing monotonically in the order traversed
         .               /// by the fold operation.
         .               ///
         .               /// The chief purpose of this function is to canonicalize regions so that two
         .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
         .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
         .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
   657,371 ( 0.01%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   468,140 ( 0.00%)          let mut counter = 0;
    40,773 ( 0.00%)          let inner = self
         .                       .replace_late_bound_regions(sig, |_| {
         .                           let br = ty::BoundRegion {
    12,222 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
         .                               kind: ty::BrAnon(counter),
         .                           };
    48,888 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
    30,555 ( 0.00%)                  counter += 1;
         .                           r
         .                       })
         .                       .0;
    93,628 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
   280,884 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
         .                   );
   527,244 ( 0.01%)          Binder::bind_with_vars(inner, bound_vars)
   564,169 ( 0.01%)      }
         .           }
         .           
         .           pub struct ValidateBoundVars<'tcx> {
         .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
         .               binder_index: ty::DebruijnIndex,
         .               // We may encounter the same variable at different levels of binding, so
         .               // this can't just be `Ty`
         .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               current_index: ty::DebruijnIndex,
         .               amount: u32,
         .           }
         .           
         .           impl<'tcx> Shifter<'tcx> {
         .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
         .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
     7,990 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     3,511 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
         .                   self.current_index.shift_in(1);
         .                   let t = t.super_fold_with(self);
         .                   self.current_index.shift_out(1);
         .                   t
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
     2,506 ( 0.00%)          match *r {
         .                       ty::ReLateBound(debruijn, br) => {
     5,012 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
         .                               r
         .                           } else {
     1,253 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
         .                               let shifted = ty::ReLateBound(debruijn, br);
    12,530 ( 0.00%)                      self.tcx.mk_region(shifted)
         .                           }
         .                       }
         .                       _ => r,
         .                   }
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    14,574 ( 0.00%)          match *ty.kind() {
         .                       ty::Bound(debruijn, bound_ty) => {
         .                           if self.amount == 0 || debruijn < self.current_index {
         .                               ty
         .                           } else {
         .                               let debruijn = debruijn.shifted_in(self.amount);
         .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
         .                           }
         .                       }
         .           
    21,981 ( 0.00%)              _ => ty.super_fold_with(self),
         .                   }
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
         .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
         .                       if self.amount == 0 || debruijn < self.current_index {
         .                           ct
         .                       } else {
-- line 1064 ----------------------------------------
-- line 1073 ----------------------------------------
         .           
         .           pub fn shift_region<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               region: ty::Region<'tcx>,
         .               amount: u32,
         .           ) -> ty::Region<'tcx> {
         .               match region {
         .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
       130 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
         .                   }
         .                   _ => region,
         .               }
         .           }
         .           
         .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               debug!("shift_vars(value={:?}, amount={})", value, amount);
         .           
     8,150 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
         .           }
         .           
         .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
         .           struct FoundEscapingVars;
         .           
         .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
         .           /// bound region or a bound type.
         .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
         .               type BreakTy = FoundEscapingVars;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
    60,341 ( 0.00%)          self.outer_index.shift_in(1);
         .                   let result = t.super_visit_with(self);
    85,861 ( 0.00%)          self.outer_index.shift_out(1);
         .                   result
         .               }
         .           
         .               #[inline]
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // If the outer-exclusive-binder is *strictly greater* than
         .                   // `outer_index`, that means that `t` contains some content
         .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
         .                   // visited.
         .                   if r.bound_at_or_above_binder(self.outer_index) {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
       114 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // we don't have a `visit_infer_const` callback, so we have to
         .                   // hook in here to catch this case (annoying...), but
         .                   // otherwise we do want to remember to visit the rest of the
         .                   // const, as it has types/regions embedded in a lot of other
         .                   // places.
       180 ( 0.00%)          match ct.val {
         .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
         .                           ControlFlow::Break(FoundEscapingVars)
         .                       }
         .                       _ => ct.super_visit_with(self),
         .                   }
       114 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
         .               #[instrument(level = "trace")]
         .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
         .                   debug!(
         .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
         .                       t,
         .                       t.flags(),
         .                       self.flags
         .                   );
 1,824,689 ( 0.02%)          if t.flags().intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(skip(self), level = "trace")]
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   118,891 ( 0.00%)          let flags = r.type_flags();
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
    35,019 ( 0.00%)          let flags = FlagComputation::for_const(c);
         .                   trace!(r.flags=?flags);
     3,486 ( 0.00%)          if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
     1,657 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
         .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
         .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
         .               /// types may mean that `'a` and `'b` don't appear in the results,
         .               /// so they are not considered *constrained*.
         .               just_constrained: bool,
         .           }
         .           
         .           impl LateBoundRegionsCollector {
     3,908 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    27,356 ( 0.00%)          LateBoundRegionsCollector {
         .                       current_index: ty::INNERMOST,
         .                       regions: Default::default(),
         .                       just_constrained,
         .                   }
     3,908 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
         .                   self.current_index.shift_in(1);
         .                   let result = t.super_visit_with(self);
         .                   self.current_index.shift_out(1);
         .                   result
         .               }
         .           
    15,057 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs to a projection, as they may not appear
         .                   // in the normalized form
    23,280 ( 0.00%)          if self.just_constrained {
    23,649 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
    29,566 ( 0.00%)          t.super_visit_with(self)
    10,038 ( 0.00%)      }
         .           
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs of an unevaluated const, as they may not appear
         .                   // in the normalized form
         .                   if self.just_constrained {
         .                       if let ty::ConstKind::Unevaluated(..) = c.val {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
         .                   c.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     7,187 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
     1,061 ( 0.00%)              if debruijn == self.current_index {
         .                           self.regions.insert(br.kind);
         .                       }
         .                   }
         .                   ControlFlow::CONTINUE
         .               }
         .           }

 1,240,175 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs
--------------------------------------------------------------------------------
Ir                  

-- line 193 ----------------------------------------
         .               /// assert_eq!(a.iter().count(), 5);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn count(self) -> usize
         .               where
         .                   Self: Sized,
         .               {
    24,269 ( 0.00%)          self.fold(
         .                       0,
         .                       #[rustc_inherit_overflow_checks]
    51,769 ( 0.00%)              |count, _| count + 1,
         .                   )
         .               }
         .           
         .               /// Consumes the iterator, returning the last element.
         .               ///
         .               /// This method will evaluate the iterator until it returns [`None`]. While
         .               /// doing so, it keeps track of the current element. After [`None`] is
         .               /// returned, `last()` will then return the last element it saw.
-- line 212 ----------------------------------------
-- line 267 ----------------------------------------
         .               /// assert_eq!(iter.next(), Some(&3));
         .               /// assert_eq!(iter.advance_by(0), Ok(()));
         .               /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   for i in 0..n {
     2,796 ( 0.00%)              self.next().ok_or(i)?;
         .                   }
         .                   Ok(())
         .               }
         .           
         .               /// Returns the `n`th element of the iterator.
         .               ///
         .               /// Like most indexing operations, the count starts from zero, so `nth(0)`
         .               /// returns the first value, `nth(1)` the second, and so on.
-- line 283 ----------------------------------------
-- line 313 ----------------------------------------
         .               /// Returning `None` if there are less than `n + 1` elements:
         .               ///
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert_eq!(a.iter().nth(10), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       712 ( 0.00%)      fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   self.advance_by(n).ok()?;
     9,632 ( 0.00%)          self.next()
         .               }
         .           
         .               /// Creates an iterator starting at the same point, but stepping by
         .               /// the given amount at each iteration.
         .               ///
         .               /// Note 1: The first element of the iterator will always be returned,
         .               /// regardless of the step given.
         .               ///
-- line 331 ----------------------------------------
-- line 441 ----------------------------------------
         .               /// [`OsStr`]: ../../std/ffi/struct.OsStr.html
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>
         .               where
         .                   Self: Sized,
         .                   U: IntoIterator<Item = Self::Item>,
         .               {
    52,382 ( 0.00%)          Chain::new(self, other.into_iter())
         .               }
         .           
         .               /// 'Zips up' two iterators into a single iterator of pairs.
         .               ///
         .               /// `zip()` returns a new iterator that will iterate over two other
         .               /// iterators, returning a tuple where the first element comes from the
         .               /// first iterator, and the second element comes from the second iterator.
         .               ///
-- line 457 ----------------------------------------
-- line 555 ----------------------------------------
         .               /// [`zip`]: crate::iter::zip
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>
         .               where
         .                   Self: Sized,
         .                   U: IntoIterator,
         .               {
       329 ( 0.00%)          Zip::new(self, other.into_iter())
         .               }
         .           
         .               /// Creates a new iterator which places a copy of `separator` between adjacent
         .               /// items of the original iterator.
         .               ///
         .               /// In case `separator` does not implement [`Clone`] or needs to be
         .               /// computed every time, use [`intersperse_with`].
         .               ///
-- line 571 ----------------------------------------
-- line 714 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn map<B, F>(self, f: F) -> Map<Self, F>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> B,
         .               {
   353,318 ( 0.00%)          Map::new(self, f)
         .               }
         .           
         .               /// Calls a closure on each element of an iterator.
         .               ///
         .               /// This is equivalent to using a [`for`] loop on the iterator, although
         .               /// `break` and `continue` are not possible from a closure. It's generally
         .               /// more idiomatic to use a `for` loop, but `for_each` may be more legible
         .               /// when processing items at the end of longer iterator chains. In some
-- line 730 ----------------------------------------
-- line 761 ----------------------------------------
         .               #[stable(feature = "iterator_for_each", since = "1.21.0")]
         .               fn for_each<F>(self, f: F)
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item),
         .               {
         .                   #[inline]
         .                   fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
     6,155 ( 0.00%)              move |(), item| f(item)
         .                   }
         .           
 4,785,960 ( 0.05%)          self.fold((), call(f));
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element
         .               /// should be yielded.
         .               ///
         .               /// Given an element the closure must return `true` or `false`. The returned
         .               /// iterator will yield only the elements for which the closure returns
         .               /// true.
-- line 780 ----------------------------------------
-- line 834 ----------------------------------------
         .               /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn filter<P>(self, predicate: P) -> Filter<Self, P>
         .               where
         .                   Self: Sized,
         .                   P: FnMut(&Self::Item) -> bool,
         .               {
   189,248 ( 0.00%)          Filter::new(self, predicate)
         .               }
         .           
         .               /// Creates an iterator that both filters and maps.
         .               ///
         .               /// The returned iterator yields only the `value`s for which the supplied
         .               /// closure returns `Some(value)`.
         .               ///
         .               /// `filter_map` can be used to make chains of [`filter`] and [`map`] more
-- line 850 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> Option<B>,
         .               {
    23,307 ( 0.00%)          FilterMap::new(self, f)
         .               }
         .           
         .               /// Creates an iterator which gives the current iteration count as well as
         .               /// the next value.
         .               ///
         .               /// The iterator returned yields pairs `(i, val)`, where `i` is the
         .               /// current index of iteration and `val` is the value returned by the
         .               /// iterator.
-- line 895 ----------------------------------------
-- line 924 ----------------------------------------
         .               /// assert_eq!(iter.next(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn enumerate(self) -> Enumerate<Self>
         .               where
         .                   Self: Sized,
         .               {
         8 ( 0.00%)          Enumerate::new(self)
         .               }
         .           
         .               /// Creates an iterator which can use the [`peek`] and [`peek_mut`] methods
         .               /// to look at the next element of the iterator without consuming it. See
         .               /// their documentation for more information.
         .               ///
         .               /// Note that the underlying iterator is still advanced when [`peek`] or
         .               /// [`peek_mut`] are called for the first time: In order to retrieve the
-- line 940 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// [`peek_mut`]: Peekable::peek_mut
         .               /// [`next`]: Iterator::next
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn peekable(self) -> Peekable<Self>
         .               where
         .                   Self: Sized,
         .               {
        13 ( 0.00%)          Peekable::new(self)
         .               }
         .           
         .               /// Creates an iterator that [`skip`]s elements based on a predicate.
         .               ///
         .               /// [`skip`]: Iterator::skip
         .               ///
         .               /// `skip_while()` takes a closure as an argument. It will call this
         .               /// closure on each element of the iterator, and ignore elements
-- line 1011 ----------------------------------------
-- line 1399 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>
         .               where
         .                   Self: Sized,
         .                   U: IntoIterator,
         .                   F: FnMut(Self::Item) -> U,
         .               {
        64 ( 0.00%)          FlatMap::new(self, f)
         .               }
         .           
         .               /// Creates an iterator that flattens nested structure.
         .               ///
         .               /// This is useful when you have an iterator of iterators or an iterator of
         .               /// things that can be turned into iterators and you want to remove one
         .               /// level of indirection.
         .               ///
-- line 1415 ----------------------------------------
-- line 1537 ----------------------------------------
         .               /// assert_eq!(iter.next(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn fuse(self) -> Fuse<Self>
         .               where
         .                   Self: Sized,
         .               {
    28,801 ( 0.00%)          Fuse::new(self)
         .               }
         .           
         .               /// Does something with each element of an iterator, passing the value on.
         .               ///
         .               /// When using iterators, you'll often chain several of them together.
         .               /// While working on such code, you might want to check out what's
         .               /// happening at various parts in the pipeline. To do that, insert
         .               /// a call to `inspect()`.
-- line 1553 ----------------------------------------
-- line 1769 ----------------------------------------
         .               /// [`char`]: type@char
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use = "if you really need to exhaust the iterator, consider `.for_each(drop)` instead"]
         .               fn collect<B: FromIterator<Self::Item>>(self) -> B
         .               where
         .                   Self: Sized,
         .               {
    67,753 ( 0.00%)          FromIterator::from_iter(self)
         .               }
         .           
         .               /// Consumes an iterator, creating two collections from it.
         .               ///
         .               /// The predicate passed to `partition()` can return `true`, or `false`.
         .               /// `partition()` returns a pair, all of the elements for which it returned
         .               /// `true`, and all of the elements for which it returned `false`.
         .               ///
-- line 1785 ----------------------------------------
-- line 1798 ----------------------------------------
         .               /// let (even, odd): (Vec<i32>, Vec<i32>) = a
         .               ///     .iter()
         .               ///     .partition(|&n| n % 2 == 0);
         .               ///
         .               /// assert_eq!(even, vec![2]);
         .               /// assert_eq!(odd, vec![1, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
       656 ( 0.00%)      fn partition<B, F>(self, f: F) -> (B, B)
         .               where
         .                   Self: Sized,
         .                   B: Default + Extend<Self::Item>,
         .                   F: FnMut(&Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn extend<'a, T, B: Extend<T>>(
         .                       mut f: impl FnMut(&T) -> bool + 'a,
         .                       left: &'a mut B,
         .                       right: &'a mut B,
         .                   ) -> impl FnMut((), T) + 'a {
         .                       move |(), x| {
        73 ( 0.00%)                  if f(&x) {
         .                               left.extend_one(x);
         .                           } else {
         .                               right.extend_one(x);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut left: B = Default::default();
         .                   let mut right: B = Default::default();
         .           
         4 ( 0.00%)          self.fold((), extend(f, &mut left, &mut right));
         .           
       980 ( 0.00%)          (left, right)
       738 ( 0.00%)      }
         .           
         .               /// Reorders the elements of this iterator *in-place* according to the given predicate,
         .               /// such that all those that return `true` precede all those that return `false`.
         .               /// Returns the number of `true` elements found.
         .               ///
         .               /// The relative order of partitioned items is not maintained.
         .               ///
         .               /// # Current implementation
-- line 1841 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///     } else {
         .               ///         ControlFlow::Break(prev)
         .               ///     }
         .               /// });
         .               /// assert_eq!(triangular, ControlFlow::Continue(435));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "iterator_try_fold", since = "1.27.0")]
    27,628 ( 0.00%)      fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
         .               where
         .                   Self: Sized,
         .                   F: FnMut(B, Self::Item) -> R,
         .                   R: Try<Output = B>,
         .               {
    93,273 ( 0.00%)          let mut accum = init;
 8,937,444 ( 0.09%)          while let Some(x) = self.next() {
56,620,601 ( 0.57%)              accum = f(accum, x)?;
         .                   }
   145,726 ( 0.00%)          try { accum }
    27,360 ( 0.00%)      }
         .           
         .               /// An iterator method that applies a fallible function to each item in the
         .               /// iterator, stopping at the first error and returning that error.
         .               ///
         .               /// This can also be thought of as the fallible form of [`for_each()`]
         .               /// or as the stateless version of [`try_fold()`].
         .               ///
         .               /// [`for_each()`]: Iterator::for_each
-- line 2038 ----------------------------------------
-- line 2077 ----------------------------------------
         .               fn try_for_each<F, R>(&mut self, f: F) -> R
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> R,
         .                   R: Try<Output = ()>,
         .               {
         .                   #[inline]
         .                   fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {
     3,384 ( 0.00%)              move |(), x| f(x)
         .                   }
         .           
     1,366 ( 0.00%)          self.try_fold((), call(f))
         .               }
         .           
         .               /// Folds every element into an accumulator by applying an operation,
         .               /// returning the final result.
         .               ///
         .               /// `fold()` takes two arguments: an initial value, and a closure with two
         .               /// arguments: an 'accumulator', and an element. The closure returns the value that
         .               /// the accumulator should have for the next iteration.
-- line 2096 ----------------------------------------
-- line 2188 ----------------------------------------
         .               /// // they're the same
         .               /// assert_eq!(result, result2);
         .               /// ```
         .               ///
         .               /// [`reduce()`]: Iterator::reduce
         .               #[doc(alias = "inject", alias = "foldl")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     4,627 ( 0.00%)      fn fold<B, F>(mut self, init: B, mut f: F) -> B
         .               where
         .                   Self: Sized,
         .                   F: FnMut(B, Self::Item) -> B,
         .               {
     7,637 ( 0.00%)          let mut accum = init;
 1,594,890 ( 0.02%)          while let Some(x) = self.next() {
   840,928 ( 0.01%)              accum = f(accum, x);
         .                   }
         .                   accum
     5,410 ( 0.00%)      }
         .           
         .               /// Reduces the elements to a single one, by repeatedly applying a reducing
         .               /// operation.
         .               ///
         .               /// If the iterator is empty, returns [`None`]; otherwise, returns the
         .               /// result of the reduction.
         .               ///
         .               /// The reducing function is a closure with two arguments: an 'accumulator', and an element.
-- line 2214 ----------------------------------------
-- line 2240 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "iterator_fold_self", since = "1.51.0")]
         .               fn reduce<F>(mut self, f: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item, Self::Item) -> Self::Item,
         .               {
         .                   let first = self.next()?;
    38,511 ( 0.00%)          Some(self.fold(first, f))
         .               }
         .           
         .               /// Reduces the elements to a single one by repeatedly applying a reducing operation. If the
         .               /// closure returns a failure, the failure is propagated back to the caller immediately.
         .               ///
         .               /// The return type of this method depends on the return type of the closure. If the closure
         .               /// returns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,
         .               /// E>`. If the closure returns `Option<Self::Item>`, then this function will return
-- line 2256 ----------------------------------------
-- line 2370 ----------------------------------------
         .               fn all<F>(&mut self, f: F) -> bool
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
         .                       move |(), x| {
    10,376 ( 0.00%)                  if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }
         .                       }
         .                   }
    24,082 ( 0.00%)          self.try_fold((), check(f)) == ControlFlow::CONTINUE
         .               }
         .           
         .               /// Tests if any element of the iterator matches a predicate.
         .               ///
         .               /// `any()` takes a closure that returns `true` or `false`. It applies
         .               /// this closure to each element of the iterator, and if any of them return
         .               /// `true`, then so does `any()`. If they all return `false`, it
         .               /// returns `false`.
-- line 2389 ----------------------------------------
-- line 2423 ----------------------------------------
         .               fn any<F>(&mut self, f: F) -> bool
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
         .                       move |(), x| {
        52 ( 0.00%)                  if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }
         .                       }
         .                   }
         .           
       117 ( 0.00%)          self.try_fold((), check(f)) == ControlFlow::BREAK
         .               }
         .           
         .               /// Searches for an element of an iterator that satisfies a predicate.
         .               ///
         .               /// `find()` takes a closure that returns `true` or `false`. It applies
         .               /// this closure to each element of the iterator, and if any of them return
         .               /// `true`, then `find()` returns [`Some(element)`]. If they all return
         .               /// `false`, it returns [`None`].
-- line 2443 ----------------------------------------
-- line 2483 ----------------------------------------
         .               fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   P: FnMut(&Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {
         .                       move |(), x| {
   382,105 ( 0.00%)                  if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }
         .                       }
         .                   }
         .           
   510,232 ( 0.01%)          self.try_fold((), check(predicate)).break_value()
         .               }
         .           
         .               /// Applies function to the elements of iterator and returns
         .               /// the first non-none result.
         .               ///
         .               /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.
         .               ///
         .               /// # Examples
-- line 2503 ----------------------------------------
-- line 2513 ----------------------------------------
         .               #[stable(feature = "iterator_find_map", since = "1.30.0")]
         .               fn find_map<B, F>(&mut self, f: F) -> Option<B>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> Option<B>,
         .               {
         .                   #[inline]
         .                   fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {
   453,112 ( 0.00%)              move |(), x| match f(x) {
   180,719 ( 0.00%)                  Some(x) => ControlFlow::Break(x),
         .                           None => ControlFlow::CONTINUE,
         .                       }
         .                   }
         .           
    19,897 ( 0.00%)          self.try_fold((), check(f)).break_value()
         .               }
         .           
         .               /// Applies function to the elements of iterator and returns
         .               /// the first true result or the first error.
         .               ///
         .               /// The return type of this method depends on the return type of the closure.
         .               /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.
         .               /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.
-- line 2535 ----------------------------------------
-- line 2713 ----------------------------------------
         .               {
         .                   // No need for an overflow check here, because `ExactSizeIterator`
         .                   // implies that the number of elements fits into a `usize`.
         .                   #[inline]
         .                   fn check<T>(
         .                       mut predicate: impl FnMut(T) -> bool,
         .                   ) -> impl FnMut(usize, T) -> ControlFlow<usize, usize> {
         .                       move |i, x| {
         6 ( 0.00%)                  let i = i - 1;
         .                           if predicate(x) { ControlFlow::Break(i) } else { ControlFlow::Continue(i) }
         .                       }
         .                   }
         .           
         .                   let n = self.len();
         .                   self.try_rfold(n, check(predicate)).break_value()
         .               }
         .           
-- line 2729 ----------------------------------------
-- line 2812 ----------------------------------------
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = [-3_i32, 0, 1, 5, -10];
         .               /// assert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "iter_cmp_by_key", since = "1.6.0")]
     1,631 ( 0.00%)      fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(&Self::Item) -> B,
         .               {
         .                   #[inline]
         .                   fn key<T, B>(mut f: impl FnMut(&T) -> B) -> impl FnMut(T) -> (B, T) {
     1,388 ( 0.00%)              move |x| (f(&x), x)
         .                   }
         .           
         .                   #[inline]
         .                   fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {
         .                       x_p.cmp(y_p)
         .                   }
         .           
     2,626 ( 0.00%)          let (_, x) = self.map(key(f)).max_by(compare)?;
         .                   Some(x)
     1,864 ( 0.00%)      }
         .           
         .               /// Returns the element that gives the maximum value with respect to the
         .               /// specified comparison function.
         .               ///
         .               /// If several elements are equally maximum, the last element is
         .               /// returned. If the iterator is empty, [`None`] is returned.
         .               ///
         .               /// # Examples
-- line 2845 ----------------------------------------
-- line 2852 ----------------------------------------
         .               #[stable(feature = "iter_max_by", since = "1.15.0")]
         .               fn max_by<F>(self, compare: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(&Self::Item, &Self::Item) -> Ordering,
         .               {
         .                   #[inline]
         .                   fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {
       987 ( 0.00%)              move |x, y| cmp::max_by(x, y, &mut compare)
         .                   }
         .           
    33,396 ( 0.00%)          self.reduce(fold(compare))
         .               }
         .           
         .               /// Returns the element that gives the minimum value from the
         .               /// specified function.
         .               ///
         .               /// If several elements are equally minimum, the first element is
         .               /// returned. If the iterator is empty, [`None`] is returned.
         .               ///
-- line 2871 ----------------------------------------
-- line 2946 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[doc(alias = "reverse")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn rev(self) -> Rev<Self>
         .               where
         .                   Self: Sized + DoubleEndedIterator,
         .               {
        13 ( 0.00%)          Rev::new(self)
         .               }
         .           
         .               /// Converts an iterator of pairs into a pair of containers.
         .               ///
         .               /// `unzip()` consumes an entire iterator of pairs, producing two
         .               /// collections: one from the left elements of the pairs, and one
         .               /// from the right elements.
         .               ///
-- line 2962 ----------------------------------------
-- line 2987 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)
         .               where
         .                   FromA: Default + Extend<A>,
         .                   FromB: Default + Extend<B>,
         .                   Self: Sized + Iterator<Item = (A, B)>,
         .               {
         .                   let mut unzipped: (FromA, FromB) = Default::default();
     3,823 ( 0.00%)          unzipped.extend(self);
         .                   unzipped
         .               }
         .           
         .               /// Creates an iterator which copies all of its elements.
         .               ///
         .               /// This is useful when you have an iterator over `&T`, but you need an
         .               /// iterator over `T`.
         .               ///
-- line 3003 ----------------------------------------
-- line 3017 ----------------------------------------
         .               /// assert_eq!(v_map, vec![1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "iter_copied", since = "1.36.0")]
         .               fn copied<'a, T: 'a>(self) -> Copied<Self>
         .               where
         .                   Self: Sized + Iterator<Item = &'a T>,
         .                   T: Copy,
         .               {
    88,928 ( 0.00%)          Copied::new(self)
         .               }
         .           
         .               /// Creates an iterator which [`clone`]s all of its elements.
         .               ///
         .               /// This is useful when you have an iterator over `&T`, but you need an
         .               /// iterator over `T`.
         .               ///
         .               /// [`clone`]: Clone::clone
-- line 3033 ----------------------------------------
-- line 3048 ----------------------------------------
         .               /// assert_eq!(v_map, vec![1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn cloned<'a, T: 'a>(self) -> Cloned<Self>
         .               where
         .                   Self: Sized + Iterator<Item = &'a T>,
         .                   T: Clone,
         .               {
   256,422 ( 0.00%)          Cloned::new(self)
         .               }
         .           
         .               /// Repeats an iterator endlessly.
         .               ///
         .               /// Instead of stopping at [`None`], the iterator will instead start again,
         .               /// from the beginning. After iterating again, it will start at the
         .               /// beginning again. And again. And again. Forever. Note that in case the
         .               /// original iterator is empty, the resulting iterator will also be empty.
-- line 3064 ----------------------------------------
-- line 3313 ----------------------------------------
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!([1].iter().eq([1].iter()), true);
         .               /// assert_eq!([1].iter().eq([1, 2].iter()), false);
         .               /// ```
         .               #[stable(feature = "iter_order", since = "1.5.0")]
       623 ( 0.00%)      fn eq<I>(self, other: I) -> bool
         .               where
         .                   I: IntoIterator,
         .                   Self::Item: PartialEq<I::Item>,
         .                   Self: Sized,
         .               {
       712 ( 0.00%)          self.eq_by(other, |x, y| x == y)
       712 ( 0.00%)      }
         .           
         .               /// Determines if the elements of this [`Iterator`] are equal to those of
         .               /// another with respect to the specified equality function.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 3336 ----------------------------------------
-- line 3344 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "iter_order_by", issue = "64295")]
         .               fn eq_by<I, F>(mut self, other: I, mut eq: F) -> bool
         .               where
         .                   Self: Sized,
         .                   I: IntoIterator,
         .                   F: FnMut(Self::Item, I::Item) -> bool,
         .               {
       890 ( 0.00%)          let mut other = other.into_iter();
         .           
         .                   loop {
       267 ( 0.00%)              let x = match self.next() {
         .                           None => return other.next().is_none(),
       979 ( 0.00%)                  Some(val) => val,
         .                       };
         .           
       267 ( 0.00%)              let y = match other.next() {
         .                           None => return false,
         .                           Some(val) => val,
         .                       };
         .           
        28 ( 0.00%)              if !eq(x, y) {
         .                           return false;
         .                       }
         .                   }
         .               }
         .           
         .               /// Determines if the elements of this [`Iterator`] are unequal to those of
         .               /// another.
         .               ///
-- line 3373 ----------------------------------------
-- line 3589 ----------------------------------------
         .                   unreachable!("Always specialized");
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<I: Iterator + ?Sized> Iterator for &mut I {
         .               type Item = I::Item;
         .               #[inline]
       232 ( 0.00%)      fn next(&mut self) -> Option<I::Item> {
   278,567 ( 0.00%)          (**self).next()
       348 ( 0.00%)      }
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (**self).size_hint()
         .               }
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   (**self).advance_by(n)
         .               }
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   (**self).nth(n)
-- line 3607 ----------------------------------------

 2,544,954 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir                  

-- line 267 ----------------------------------------
         .           macro_rules! bitor_impl {
         .               ($($t:ty)*) => ($(
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const BitOr for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
     4,480 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
         .                   }
         .           
         .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
         .               )*)
         .           }
         .           
         .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
         .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
         .           macro_rules! bitxor_impl {
         .               ($($t:ty)*) => ($(
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const BitXor for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
19,340,418 ( 0.20%)              fn bitxor(self, other: $t) -> $t { self ^ other }
         .                   }
         .           
         .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
         .               )*)
         .           }
         .           
         .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
         .           
-- line 384 ----------------------------------------
-- line 468 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const Shl<$f> for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn shl(self, other: $f) -> $t {
       108 ( 0.00%)                  self << other
         .                       }
         .                   }
         .           
         .                   forward_ref_binop! { impl const Shl, shl for $t, $f }
         .               };
         .           }
         .           
         .           macro_rules! shl_impl_all {
-- line 484 ----------------------------------------

 7,060,509 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
  6,420,082 ( 0.06%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    512,931 ( 0.01%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
173,003,909 ( 1.75%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
    736,340 ( 0.01%)          self.stride += Group::WIDTH;
    736,340 ( 0.01%)          self.pos += self.stride;
    598,071 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    700,164 ( 0.01%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  1,497,205 ( 0.02%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    303,846 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  1,903,088 ( 0.02%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    280,648 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  1,285,351 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  1,831,262 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
      6,776 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
      7,017 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        345 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     24,795 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    141,674 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    141,674 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    283,348 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
     40,820 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    242,528 ( 0.00%)          self.erase_no_drop(&item);
        466 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,034,727 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     11,204 ( 0.00%)          match self.find(hash, eq) {
     22,888 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    478,192 ( 0.00%)              None => None,
          .                   }
  3,834,473 ( 0.04%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     91,828 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  1,537,887 ( 0.02%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,180,055 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  2,818,863 ( 0.03%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  1,932,192 ( 0.02%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
 10,313,186 ( 0.10%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     32,723 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  6,252,872 ( 0.06%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          4 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
  7,635,381 ( 0.08%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,593,464 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        803 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  1,195,098 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      9,979 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  1,397,955 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     36,183 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  3,044,385 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  2,340,726 ( 0.02%)          self.table.items += 1;
          .                   bucket
     19,953 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
     38,026 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     16,447 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
     67,888 ( 0.00%)              eq(self.bucket(index).as_ref())
      2,861 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
        883 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
     42,184 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     82,797 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
      1,869 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     28,435 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
      2,136 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  2,919,196 ( 0.03%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          4 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    439,196 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     26,972 ( 0.00%)          let allocation = self.into_allocation();
     20,229 ( 0.00%)          RawIntoIter {
     33,715 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     14,551 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      2,095 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  3,650,362 ( 0.04%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,257,508 ( 0.02%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    487,032 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  1,237,866 ( 0.01%)          Ok(Self {
          .                       ctrl,
    556,462 ( 0.01%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  1,642,546 ( 0.02%)      }
          .           
          .               #[inline]
     70,565 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     18,776 ( 0.00%)          if capacity == 0 {
     11,984 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  1,024,578 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     40,139 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     70,565 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    502,957 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    502,957 ( 0.01%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,005,914 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  4,192,332 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 12,327,145 ( 0.12%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  5,670,254 ( 0.06%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    393,720 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 15,689,178 ( 0.16%)              for bit in group.match_byte(h2_hash) {
 33,443,882 ( 0.34%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 20,441,026 ( 0.21%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  3,761,006 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
          3 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
          3 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 14,256,920 ( 0.14%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
 85,391,915 ( 0.86%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  7,812,530 ( 0.08%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
  6,249,988 ( 0.06%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         33 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 11,574,163 ( 0.12%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  3,857,543 ( 0.04%)          *self.ctrl(index) = ctrl;
  3,863,952 ( 0.04%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  1,447,124 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  1,149,255 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  6,805,338 ( 0.07%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
      8,433 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    746,459 ( 0.01%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    346,197 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    692,396 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    692,396 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  1,469,062 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          2 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    346,197 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     20,926 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  2,312,325 ( 0.02%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    346,197 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
         64 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         11 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
          3 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    227,519 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     27,458 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     37,568 ( 0.00%)          self.items = 0;
     27,463 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    458,664 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  1,834,656 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  2,260,465 ( 0.02%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  1,834,656 ( 0.02%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     18,728 ( 0.00%)      fn clone(&self) -> Self {
      2,444 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
     21,069 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        138 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,323,529 ( 0.03%)      fn drop(&mut self) {
  2,907,621 ( 0.03%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  3,468,062 ( 0.04%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     26,972 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     33,715 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  1,089,831 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    135,767 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    194,709 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
    835,813 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     38,108 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     14,967 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     95,419 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
      6,144 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    138,065 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    327,526 ( 0.00%)          if let Some(b) = self.iter.next() {
  1,265,483 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    276,130 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     10,448 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
     69,188 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
        878 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      3,931 ( 0.00%)      fn next(&mut self) -> Option<T> {
      2,622 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      8,699 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          6 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      5,576 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
        697 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
      5,576 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 48,949,654 ( 0.50%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
       824 ( 0.00%)      fn clone(&self) -> Self {
    11,312 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
     2,340 ( 0.00%)              table: self.table.clone(),
         .                   }
       927 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   308,976 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
   867,845 ( 0.01%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 1,998,655 ( 0.02%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
         .               hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
   829,736 ( 0.01%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       121 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    50,546 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   221,851 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,852 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
        60 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     2,255 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
     2,315 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 2,058,035 ( 0.02%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 2,819,939 ( 0.03%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,899,267 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
 2,357,376 ( 0.02%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       840 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     3,321 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     1,680 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     1,107 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
       534 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
11,650,916 ( 0.12%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     3,844 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        46 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 4,919,237 ( 0.05%)              self.table
 6,203,348 ( 0.06%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   608,487 ( 0.01%)              None
         .                   }
10,681,074 ( 0.11%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   177,455 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 2,200,021 ( 0.02%)          match self.remove_entry(k) {
    85,555 ( 0.00%)              Some((_, v)) => Some(v),
   147,614 ( 0.00%)              None => None,
         .                   }
   365,699 ( 0.00%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   895,765 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
14,218,926 ( 0.14%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
34,352,324 ( 0.35%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
37,883,101 ( 0.38%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 4,539,886 ( 0.05%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
24,658,804 ( 0.25%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
   666,556 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 4,254,869 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 5,287,735 ( 0.05%)          self.from_hash(hash, equivalent(k))
 7,746,786 ( 0.08%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
 7,254,257 ( 0.07%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 1,115,123 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     7,808 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   130,405 ( 0.00%)          IntoIter {
    60,690 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    23,424 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   416,723 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     4,049 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
        31 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
     8,693 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       150 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
       300 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       104 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
   151,525 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
   119,810 ( 0.00%)          let iter = iter.into_iter();
    59,153 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
     7,158 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   446,161 ( 0.00%)              self.insert(k, v);
         .                   });
    98,067 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

11,911,192 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 157 ----------------------------------------
         .               pub fn opt_fn_def_id(self) -> Option<DefId> {
         .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
         .               }
         .           }
         .           
         .           /// The "header" of an impl is everything outside the body: a Self type, a trait
         .           /// ref (in the case of a trait impl), and a set of predicates (from the
         .           /// bounds / where-clauses).
    29,551 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct ImplHeader<'tcx> {
         .               pub impl_def_id: DefId,
         .               pub self_ty: Ty<'tcx>,
         .               pub trait_ref: Option<TraitRef<'tcx>>,
         .               pub predicates: Vec<Predicate<'tcx>>,
         .           }
         .           
         .           #[derive(
         .               Copy,
         .               Clone,
   953,393 ( 0.01%)      PartialEq,
         .               Eq,
         .               Hash,
         .               TyEncodable,
    18,368 ( 0.00%)      TyDecodable,
         .               HashStable,
         .               Debug,
         .               TypeFoldable
         .           )]
         .           pub enum ImplPolarity {
         .               /// `impl Trait for Type`
         .               Positive,
         .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
         .                   match self {
         .                       Self::Positive => f.write_str("positive"),
         .                       Self::Negative => f.write_str("negative"),
         .                       Self::Reservation => f.write_str("reservation"),
         .                   }
         .               }
         .           }
         .           
   419,046 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
         .           pub enum Visibility {
         .               /// Visible everywhere (including in other crates).
         .               Public,
         .               /// Visible only in the given crate-local module.
         .               Restricted(DefId),
         .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
         .               Invisible,
         .           }
         .           
 1,807,549 ( 0.02%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
         .           pub enum BoundConstness {
         .               /// `T: Trait`
         .               NotConst,
         .               /// `T: ~const Trait`
         .               ///
         .               /// Requires resolving to const only when we are in a const context.
         .               ConstIfConst,
         .           }
         .           
         .           impl BoundConstness {
         .               /// Reduce `self` and `constness` to two possible combined states instead of four.
    80,480 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   120,720 ( 0.00%)          match (constness, self) {
         .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
         .                       (_, this) => {
   302,123 ( 0.00%)                  *this = BoundConstness::NotConst;
         .                           hir::Constness::NotConst
         .                       }
         .                   }
    40,240 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Display for BoundConstness {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
         .                       Self::NotConst => f.write_str("normal"),
         .                       Self::ConstIfConst => f.write_str("`~const`"),
         .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
         .               pub before_feature_tys: Ty<'tcx>,
         .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
         .               pub after_feature_tys: Ty<'tcx>,
         .           }
         .           
         .           pub trait DefIdTree: Copy {
         .               fn parent(self, id: DefId) -> Option<DefId>;
         .           
       784 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
       159 ( 0.00%)          if descendant.krate != ancestor.krate {
         .                       return false;
         .                   }
         .           
    54,168 ( 0.00%)          while descendant != ancestor {
    60,973 ( 0.00%)              match self.parent(descendant) {
         .                           Some(parent) => descendant = parent,
         .                           None => return false,
         .                       }
         .                   }
         .                   true
       896 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    28,006 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
         .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    42,009 ( 0.00%)      }
         .           }
         .           
         .           impl Visibility {
       340 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
     1,020 ( 0.00%)          match visibility.node {
         .                       hir::VisibilityKind::Public => Visibility::Public,
         .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
         .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
         .                           // If there is no resolution, `resolve` will have already reported an error, so
         .                           // assume that the visibility is public to avoid reporting more privacy errors.
         .                           Res::Err => Visibility::Public,
         .                           def => Visibility::Restricted(def.def_id()),
         .                       },
         .                       hir::VisibilityKind::Inherited => {
       560 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
         .                       }
         .                   }
       340 ( 0.00%)      }
         .           
         .               /// Returns `true` if an item with this visibility is accessible from the given block.
   114,390 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
   606,561 ( 0.01%)          let restriction = match self {
         .                       // Public items are visible everywhere.
         .                       Visibility::Public => return true,
         .                       // Private items from other crates are visible nowhere.
         .                       Visibility::Invisible => return false,
         .                       // Restricted items are visible in an arbitrary local module.
    24,314 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
       224 ( 0.00%)          tree.is_descendant_of(module, restriction)
   114,390 ( 0.00%)      }
         .           
         .               /// Returns `true` if this visibility is at least as accessible as the given visibility
    56,682 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
   120,012 ( 0.00%)          let vis_restriction = match vis {
         .                       Visibility::Public => return self == Visibility::Public,
         .                       Visibility::Invisible => return true,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         .                   self.is_accessible_from(vis_restriction, tree)
    56,682 ( 0.00%)      }
         .           
         .               // Returns `true` if this item is visible anywhere in the local crate.
         .               pub fn is_visible_locally(self) -> bool {
         .                   match self {
         .                       Visibility::Public => true,
         .                       Visibility::Restricted(def_id) => def_id.is_local(),
         .                       Visibility::Invisible => false,
         .                   }
         .               }
         .           
         .               pub fn is_public(self) -> bool {
    21,664 ( 0.00%)          matches!(self, Visibility::Public)
    10,832 ( 0.00%)      }
         .           }
         .           
         .           /// The crate variances map is computed during typeck and contains the
         .           /// variance of every item in the local crate. You should not use it
         .           /// directly, because to do so will make your pass dependent on the
         .           /// HIR of every item in the local crate. Instead, use
         .           /// `tcx.variances_of()` to get the variance for a *particular*
         .           /// item.
-- line 365 ----------------------------------------
-- line 434 ----------------------------------------
         .           }
         .           
         .           // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(TyS<'_>, 40);
         .           
         .           impl<'tcx> Ord for TyS<'tcx> {
         .               fn cmp(&self, other: &TyS<'tcx>) -> Ordering {
        68 ( 0.00%)          self.kind().cmp(other.kind())
         .               }
         .           }
         .           
         .           impl<'tcx> PartialOrd for TyS<'tcx> {
         .               fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {
         .                   Some(self.kind().cmp(other.kind()))
         .               }
         .           }
-- line 450 ----------------------------------------
-- line 474 ----------------------------------------
         .           
         .                       // The other fields just provide fast access to information that is
         .                       // also contained in `kind`, so no need to hash them.
         .                       flags: _,
         .           
         .                       outer_exclusive_binder: _,
         .                   } = *self;
         .           
     7,328 ( 0.00%)          kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
         .           #[rustc_diagnostic_item = "Ty"]
         .           #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
         .           pub type Ty<'tcx> = &'tcx TyS<'tcx>;
         .           
         .           impl ty::EarlyBoundRegion {
-- line 490 ----------------------------------------
-- line 509 ----------------------------------------
         .           #[derive(Clone, Copy, Lift)]
         .           pub struct Predicate<'tcx> {
         .               inner: &'tcx PredicateInner<'tcx>,
         .           }
         .           
         .           impl<'tcx> PartialEq for Predicate<'tcx> {
         .               fn eq(&self, other: &Self) -> bool {
         .                   // `self.kind` is always interned.
 1,766,482 ( 0.02%)          ptr::eq(self.inner, other.inner)
 1,163,994 ( 0.01%)      }
         .           }
         .           
         .           impl Hash for Predicate<'_> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   (self.inner as *const PredicateInner<'_>).hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Predicate<'tcx> {}
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
         .               #[inline]
         .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
12,892,085 ( 0.13%)          self.inner.kind
         .               }
         .           
         .               /// Flips the polarity of a Predicate.
         .               ///
         .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
         .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
         .                   let kind = self
         .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
         .                       flags: _,
         .                       outer_exclusive_binder: _,
         .                   } = self.inner;
         .           
         .                   kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
30,468,776 ( 0.31%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
33,387,182 ( 0.34%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum PredicateKind<'tcx> {
         .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
         .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
         .               /// would be the type parameters.
         .               Trait(TraitPredicate<'tcx>),
         .           
         .               /// `where 'a: 'b`
         .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
         .               WellFormed(GenericArg<'tcx>),
         .           
         .               /// Trait must be object-safe.
         .               ObjectSafe(DefId),
         .           
         .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
         .               /// for some substitutions `...` and `T` being a closure type.
         .               /// Satisfied (or refuted) once we know the closure's kind.
       976 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
         .           
         .               /// `T1 <: T2`
         .               ///
         .               /// This obligation is created most often when we have two
         .               /// unresolved type variables and hence don't have enough
         .               /// information to process the subtyping obligation yet.
     1,685 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
         .           
         .               /// `T1` coerced to `T2`
         .               ///
         .               /// Like a subtyping obligation, this is created most often
         .               /// when we have two unresolved type variables and hence
         .               /// don't have enough information to process the coercion
         .               /// obligation yet. At the moment, we actually process coercions
         .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Performs a substitution suitable for going from a
         .               /// poly-trait-ref to supertraits that must hold if that
         .               /// poly-trait-ref holds. This is slightly different from a normal
         .               /// substitution in terms of what happens with bound regions. See
         .               /// lengthy comment below for details.
   270,873 ( 0.00%)      pub fn subst_supertrait(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: &ty::PolyTraitRef<'tcx>,
         .               ) -> Predicate<'tcx> {
         .                   // The interaction between HRTB and supertraits is not entirely
         .                   // obvious. Let me walk you (and myself) through an example.
         .                   //
         .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
         .                   //    ['x, 'b]
         .                   let bound_pred = self.kind();
         .                   let pred_bound_vars = bound_pred.bound_vars();
         .                   let trait_bound_vars = trait_ref.bound_vars();
         .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
         .                   let shifted_pred =
         .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
         .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
    30,097 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
         .                   // 3) ['x] + ['b] -> ['x, 'b]
         .                   let bound_vars =
         .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
   270,873 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
   210,679 ( 0.00%)      }
         .           }
         .           
   415,853 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 3,397,404 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitPredicate<'tcx> {
         .               pub trait_ref: TraitRef<'tcx>,
         .           
 3,929,408 ( 0.04%)      pub constness: BoundConstness,
         .           
 4,915,297 ( 0.05%)      pub polarity: ImplPolarity,
         .           }
         .           
         .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
         .           
         .           impl<'tcx> TraitPredicate<'tcx> {
 2,095,560 ( 0.02%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 1,833,739 ( 0.02%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
         .                       // remap without changing constness of this predicate.
         .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
       124 ( 0.00%)              param_env.remap_constness_with(self.constness)
         .                   } else {
   261,883 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
         .                   }
 1,571,670 ( 0.02%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   // this is different to `remap_constness` that callees want to print this predicate
         .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
         .                   // param_env is not const because we it is always satisfied in non-const contexts.
         .                   if let hir::Constness::NotConst = param_env.constness() {
         .                       self.constness = ty::BoundConstness::NotConst;
         .                   }
         .               }
         .           
         .               pub fn def_id(self) -> DefId {
   274,920 ( 0.00%)          self.trait_ref.def_id
   137,460 ( 0.00%)      }
         .           
   302,112 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
   906,336 ( 0.01%)          self.trait_ref.self_ty()
   604,224 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> PolyTraitPredicate<'tcx> {
         .               pub fn def_id(self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
         .                   self.skip_binder().def_id()
 2,601,083 ( 0.03%)      }
         .           
     4,055 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
    16,220 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
     8,110 ( 0.00%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   *self = self.map_bound(|mut p| {
         .                       p.remap_constness_diag(param_env);
         .                       p
         .                   });
         .               }
         .           }
         .           
     1,809 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    86,793 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
   154,505 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
         .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
         .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
         .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
         .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
         .           
         .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
         .           /// whether the `a` type is the type that we should label as "expected" when
         .           /// presenting user diagnostics.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
     6,636 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct SubtypePredicate<'tcx> {
    12,941 ( 0.00%)      pub a_is_expected: bool,
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
         .           
         .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
        75 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct CoercePredicate<'tcx> {
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
         .           
   319,769 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
   230,934 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum Term<'tcx> {
       178 ( 0.00%)      Ty(Ty<'tcx>),
         .               Const(&'tcx Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
         .               fn from(ty: Ty<'tcx>) -> Self {
         .                   Term::Ty(ty)
    20,649 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
         .               fn from(c: &'tcx Const<'tcx>) -> Self {
         .                   Term::Const(c)
         .               }
         .           }
         .           
         .           impl<'tcx> Term<'tcx> {
         .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    25,776 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    12,888 ( 0.00%)      }
         .           }
         .           
         .           /// This kind of predicate has no *direct* correspondent in the
         .           /// syntax, but it roughly corresponds to the syntactic forms:
         .           ///
         .           /// 1. `T: TraitRef<..., Item = Type>`
         .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
         .           ///
         .           /// In particular, form #1 is "desugared" to the combination of a
         .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
         .           /// predicates. Form #2 is a broader form in that it also permits
         .           /// equality between arbitrary types. Processing an instance of
         .           /// Form #2 eventually yields one of these `ProjectionPredicate`
         .           /// instances to normalize the LHS.
     1,519 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    38,686 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionPredicate<'tcx> {
         .               pub projection_ty: ProjectionTy<'tcx>,
   210,879 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
         .           
         .           impl<'tcx> PolyProjectionPredicate<'tcx> {
         .               /// Returns the `DefId` of the trait of the associated item being projected.
         .               #[inline]
         .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
       164 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
         .               }
         .           
         .               /// Get the [PolyTraitRef] required for this projection to be well formed.
         .               /// Note that for generic associated types the predicates of the associated
         .               /// type also need to be checked.
         .               #[inline]
         .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
         .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
         .                   // `self.0.trait_ref` is permitted to have escaping regions.
         .                   // This is because here `self` has a `Binder` and so does our
         .                   // return value, so we are preserving the number of binding
         .                   // levels.
       113 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
         .               }
         .           
         .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
         .                   self.map_bound(|predicate| predicate.term)
         .               }
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
         .               pub fn projection_def_id(&self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
    29,198 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
    14,599 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPolyTraitRef<'tcx> {
         .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
   293,537 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
   293,537 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
   293,537 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
         .               #[inline(always)]
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   tcx.mk_predicate(self)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
    59,130 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   295,650 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
   118,260 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
       278 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       556 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
       556 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
     5,943 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    29,715 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
    11,886 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
 2,440,884 ( 0.02%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
         .                   let predicate = self.kind();
 7,322,652 ( 0.07%)          match predicate.skip_binder() {
 5,944,365 ( 0.06%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
         .                       PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::TypeOutlives(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
    31,569 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
 2,440,884 ( 0.02%)      }
         .           
   133,702 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
         .                   let predicate = self.kind();
   267,404 ( 0.00%)          match predicate.skip_binder() {
     8,112 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
         .                       PredicateKind::Trait(..)
         .                       | PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
   130,998 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
   133,702 ( 0.00%)      }
         .           }
         .           
         .           /// Represents the bounds declared on a particular set of type
         .           /// parameters. Should eventually be generalized into a flag list of
         .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
         .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
         .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
         .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
         .           /// Example:
         .           ///
         .           ///     struct Foo<T, U: Bar<T>> { ... }
         .           ///
         .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
         .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
         .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
         .           /// [usize:Bar<isize>]]`.
   181,677 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct InstantiatedPredicates<'tcx> {
         .               pub predicates: Vec<Predicate<'tcx>>,
         .               pub spans: Vec<Span>,
         .           }
         .           
         .           impl<'tcx> InstantiatedPredicates<'tcx> {
       302 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
   111,632 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
       302 ( 0.00%)      }
         .           
         .               pub fn is_empty(&self) -> bool {
         .                   self.predicates.is_empty()
       495 ( 0.00%)      }
         .           }
         .           
       133 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
         .           pub struct OpaqueTypeKey<'tcx> {
         .               pub def_id: DefId,
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// "Universes" are used during type- and trait-checking in the
         .               /// presence of `for<..>` binders to control what sets of names are
-- line 1043 ----------------------------------------
-- line 1091 ----------------------------------------
         .               /// ```
         .               /// for<'a> fn(&'a u32)
         .               /// ```
         .               ///
         .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
         .               /// new universe that extends `U` -- in this new universe, we can
         .               /// name the region `'a`, but that region was not nameable from
         .               /// `U` because it was not in scope there.
   433,903 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
         .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
 1,301,709 ( 0.01%)      }
         .           
         .               /// Returns `true` if `self` can name a name from `other` -- in other words,
         .               /// if the set of names in `self` is a superset of those in
         .               /// `other` (`self >= other`).
         .               pub fn can_name(self, other: UniverseIndex) -> bool {
    85,784 ( 0.00%)          self.private >= other.private
    42,892 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` cannot name some names from `other` -- in other
         .               /// words, if the set of names in `self` is a strict subset of
         .               /// those in `other` (`self < other`).
         .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
     2,912 ( 0.00%)          self.private < other.private
     1,456 ( 0.00%)      }
         .           }
         .           
         .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
         .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
         .           /// regions/types/consts within the same universe simply have an unknown relationship to one
         .           /// another.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
         .           pub struct Placeholder<T> {
    42,095 ( 0.00%)      pub universe: UniverseIndex,
    13,558 ( 0.00%)      pub name: T,
         .           }
         .           
         .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
         .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
         .           /// trivial to compute.
         .           ///
         .           /// If we now want to use that constant in a place which potentionally needs its type
         .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
         .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
         .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
         .           /// to get the type of `did`.
    20,907 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
         .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
         .           #[derive(Hash, HashStable)]
         .           pub struct WithOptConstParam<T> {
    16,236 ( 0.00%)      pub did: T,
         .               /// The `DefId` of the corresponding generic parameter in case `did` is
         .               /// a const argument.
         .               ///
         .               /// Note that even if `did` is a const argument, this may still be `None`.
         .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
         .               /// to potentially update `param_did` in the case it is `None`.
    82,599 ( 0.00%)      pub const_param_did: Option<DefId>,
         .           }
         .           
         .           impl<T> WithOptConstParam<T> {
         .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
         .               #[inline(always)]
         .               pub fn unknown(did: T) -> WithOptConstParam<T> {
         .                   WithOptConstParam { did, const_param_did: None }
    54,876 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<LocalDefId> {
         .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
         .               /// `None` otherwise.
         .               #[inline(always)]
         .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
         .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
         .               }
         .           
         .               /// In case `self` is unknown but `self.did` is a const argument, this returns
         .               /// a `WithOptConstParam` with the correct `const_param_did`.
         .               #[inline(always)]
         .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
     6,240 ( 0.00%)          if self.const_param_did.is_none() {
     9,360 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
         .                           return Some(WithOptConstParam { did: self.did, const_param_did });
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               pub fn to_global(self) -> WithOptConstParam<DefId> {
         .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
         4 ( 0.00%)      }
         .           
        52 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
        45 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
        13 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<DefId> {
     3,223 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
         .                   self.did
         .                       .as_local()
         .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
     3,223 ( 0.00%)      }
         .           
         .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    11,776 ( 0.00%)          if let Some(param_did) = self.const_param_did {
     5,782 ( 0.00%)              if let Some(did) = self.did.as_local() {
         .                           return Some((did, param_did));
         .                       }
         .                   }
         .           
         .                   None
       348 ( 0.00%)      }
         .           
         .               pub fn is_local(self) -> bool {
         .                   self.did.is_local()
         .               }
         .           
     1,220 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
         .                   self.const_param_did.unwrap_or(self.did)
     1,220 ( 0.00%)      }
         .           }
         .           
         .           /// When type checking, we use the `ParamEnv` to track
         .           /// details about the set of where-clauses that are in scope at this
         .           /// particular point.
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
         .           pub struct ParamEnv<'tcx> {
         .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
         .               reveal: traits::Reveal,
         .               constness: hir::Constness,
         .           }
         .           
         .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
         .               const BITS: usize = 2;
         .               #[inline]
         .               fn into_usize(self) -> usize {
   176,848 ( 0.00%)          match self {
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn from_usize(ptr: usize) -> Self {
 4,031,180 ( 0.04%)          match ptr {
         .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
         .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
         .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
         .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
         .                       _ => std::hint::unreachable_unchecked(),
         .                   }
         .               }
         .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
         .               pub fn new(
         .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
         .                   reveal: Reveal,
         .                   constness: hir::Constness,
         .               ) -> Self {
         .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
         .               }
         .           
        63 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
         .                   self
        63 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
         .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
         .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    51,054 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
         .               }
         .           
         .               /// Returns a new parameter environment with the same clauses, but
         .               /// which "reveals" the true results of projections in all cases
         .               /// (even for associated types that are specializable). This is
         .               /// the desired behavior during codegen and certain other special
         .               /// contexts; normally though we want to use `Reveal::UserFacing`,
         .               /// which is the default.
         .               /// All opaque types in the caller_bounds of the `ParamEnv`
         .               /// will be normalized to their underlying types.
         .               /// See PR #65989 and issue #65918 for more details
    84,584 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
         .                   if self.packed.tag().reveal == traits::Reveal::All {
         .                       return self;
         .                   }
         .           
         .                   ParamEnv::new(
         .                       tcx.normalize_opaque_types(self.caller_bounds()),
         .                       Reveal::All,
         .                       self.constness(),
         .                   )
    95,157 ( 0.00%)      }
         .           
         .               /// Returns this same environment but with no caller bounds.
         .               #[inline]
         .               pub fn without_caller_bounds(self) -> Self {
         .                   Self::new(List::empty(), self.reveal(), self.constness())
         .               }
         .           
         .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
         .               /// pair it with the empty environment. This improves caching and is generally
         .               /// invisible.
         .               ///
         .               /// N.B., we preserve the environment when type-checking because it
         .               /// is possible for the user to have wacky where-clauses like
         .               /// `where Box<u32>: Copy`, which are clearly never
         .               /// satisfiable. We generally want to behave as if they were true,
         .               /// although the surrounding function is never reachable.
   614,922 ( 0.01%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
         .                   match self.reveal() {
         .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
         .           
         .                       Reveal::All => {
   103,769 ( 0.00%)                  if value.is_global() {
     1,584 ( 0.00%)                      ParamEnvAnd { param_env: self.without_caller_bounds(), value }
         .                           } else {
         .                               ParamEnvAnd { param_env: self, value }
         .                           }
         .                       }
         .                   }
   588,807 ( 0.01%)      }
         .           }
         .           
         .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
         .           // the constness of trait bounds is being propagated correctly.
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               #[inline]
         .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
    24,046 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
         .               }
         .               #[inline]
         .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
         .                   self.with_constness(BoundConstness::NotConst)
         .               }
         .           }
         .           
     9,761 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
         .           pub struct ParamEnvAnd<'tcx, T> {
   127,402 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 1,674,846 ( 0.02%)      pub value: T,
         .           }
         .           
         .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
         .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
         .                   (self.param_env, self.value)
         .               }
         .           
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.param_env = self.param_env.without_const();
    35,337 ( 0.00%)          self
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
         .           #[derive(Copy, Clone, Debug, HashStable)]
         .           pub struct Destructor {
         .               /// The `DefId` of the destructor method
         .               pub did: DefId,
         .               /// The constness of the destructor method
         .               pub constness: hir::Constness,
         .           }
         .           
     2,735 ( 0.00%)  bitflags! {
    13,707 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
         .               pub struct VariantFlags: u32 {
         .                   const NO_VARIANT_FLAGS        = 0;
         .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
         .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
         .                   /// Indicates whether this variant was obtained as part of recovering from
         .                   /// a syntactic error. May be incomplete or bogus.
         .                   const IS_RECOVERED = 1 << 1;
         .               }
         .           }
         .           
         .           /// Definition of a variant -- a struct's fields or an enum variant.
   178,903 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct VariantDef {
         .               /// `DefId` that identifies the variant itself.
         .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
         .               pub def_id: DefId,
         .               /// `DefId` that identifies the variant's constructor.
         .               /// If this variant is a struct variant, then this is `None`.
         .               pub ctor_def_id: Option<DefId>,
         .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
         .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
         .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
         .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
         .               /// built-in trait), and we do not want to load attributes twice.
         .               ///
         .               /// If someone speeds up attribute loading to not be a performance concern, they can
         .               /// remove this hack and use the constructor `DefId` everywhere.
     2,992 ( 0.00%)      pub fn new(
         .                   name: Symbol,
         .                   variant_did: Option<DefId>,
         .                   ctor_def_id: Option<DefId>,
         .                   discr: VariantDiscr,
         .                   fields: Vec<FieldDef>,
         .                   ctor_kind: CtorKind,
         .                   adt_kind: AdtKind,
         .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
         .               ) -> Self {
         .                   debug!(
         .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
         .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
         .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
         .                   );
         .           
         .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
       374 ( 0.00%)          if is_field_list_non_exhaustive {
         .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
         .                   }
         .           
     1,122 ( 0.00%)          if recovered {
         .                       flags |= VariantFlags::IS_RECOVERED;
         .                   }
         .           
     3,366 ( 0.00%)          VariantDef {
         .                       def_id: variant_did.unwrap_or(parent_did),
         .                       ctor_def_id,
         .                       name,
         .                       discr,
     1,496 ( 0.00%)              fields,
         .                       ctor_kind,
         .                       flags,
         .                   }
     1,496 ( 0.00%)      }
         .           
         .               /// Is this field list non-exhaustive?
         .               #[inline]
         .               pub fn is_field_list_non_exhaustive(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
         .               }
         .           
         .               /// Was this variant obtained as part of recovering from a syntactic error?
         .               #[inline]
         .               pub fn is_recovered(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
         .               }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
     1,547 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
       884 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
     1,989 ( 0.00%)      }
         .           }
         .           
   105,836 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
         .           pub enum VariantDiscr {
         .               /// Explicit value for this variant, i.e., `X = 123`.
         .               /// The `DefId` corresponds to the embedded constant.
         .               Explicit(DefId),
         .           
         .               /// The previous variant's discriminant plus one.
         .               /// For efficiency reasons, the distance from the
         .               /// last `Explicit` discriminant is being stored,
         .               /// or `0` for the first variant, if it has none.
         .               Relative(u32),
         .           }
         .           
   255,940 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct FieldDef {
         .               pub did: DefId,
         .               pub name: Symbol,
         .               pub vis: Visibility,
         .           }
         .           
    12,921 ( 0.00%)  bitflags! {
         .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
         .               pub struct ReprFlags: u8 {
         .                   const IS_C               = 1 << 0;
         .                   const IS_SIMD            = 1 << 1;
         .                   const IS_TRANSPARENT     = 1 << 2;
         .                   // Internal only for now. If true, don't reorder fields.
         .                   const IS_LINEAR          = 1 << 3;
         .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
         .                   // Any of these flags being set prevent field reordering optimisation.
         .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
         .                                            | ReprFlags::IS_SIMD.bits
         .                                            | ReprFlags::IS_LINEAR.bits;
         .               }
         .           }
         .           
         .           /// Represents the repr options provided by the user,
   158,302 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
         .           pub struct ReprOptions {
         .               pub int: Option<attr::IntType>,
         .               pub align: Option<Align>,
         .               pub pack: Option<Align>,
         .               pub flags: ReprFlags,
         .               /// The seed to be used for randomizing a type's layout
         .               ///
         .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
         .               /// be the "most accurate" hash as it'd encompass the item and crate
         .               /// hash without loss, but it does pay the price of being larger.
         .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
         .               /// purposes (primarily `-Z randomize-layout`)
         .               pub field_shuffle_seed: u64,
         .           }
         .           
         .           impl ReprOptions {
     2,977 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
         .                   let mut flags = ReprFlags::empty();
         .                   let mut size = None;
         .                   let mut max_align: Option<Align> = None;
         .                   let mut min_pack: Option<Align> = None;
         .           
         .                   // Generate a deterministically-derived seed from the item's path hash
         .                   // to allow for cross-crate compilation to actually work
         .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
         .           
         .                   // If the user defined a custom seed for layout randomization, xor the item's
         .                   // path hash with the user defined seed, this will allowing determinism while
         .                   // still allowing users to further randomize layout generation for e.g. fuzzing
       687 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
         .                       field_shuffle_seed ^= user_seed;
         .                   }
         .           
       916 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
     2,465 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
         .                           flags.insert(match r {
         .                               attr::ReprC => ReprFlags::IS_C,
         .                               attr::ReprPacked(pack) => {
         .                                   let pack = Align::from_bytes(pack as u64).unwrap();
         .                                   min_pack = Some(if let Some(min_pack) = min_pack {
         .                                       min_pack.min(pack)
         .                                   } else {
         .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
         .                                   ReprFlags::empty()
         .                               }
         .                           });
         .                       }
         .                   }
         .           
         .                   // If `-Z randomize-layout` was enabled for the type definition then we can
         .                   // consider performing layout randomization
     1,832 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
         .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
         .                   }
         .           
         .                   // This is here instead of layout because the choice must make it into metadata.
     1,374 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
         .                       flags.insert(ReprFlags::IS_LINEAR);
         .                   }
         .           
       458 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
     6,412 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn simd(&self) -> bool {
         .                   self.flags.contains(ReprFlags::IS_SIMD)
         .               }
         .           
         .               #[inline]
         .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
         .               #[inline]
         .               pub fn hide_niche(&self) -> bool {
         .                   self.flags.contains(ReprFlags::HIDE_NICHE)
         .               }
         .           
         .               /// Returns the discriminant type, given these `repr` options.
         .               /// This must only be called on enums!
         .               pub fn discr_type(&self) -> attr::IntType {
     5,325 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     2,241 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
         .               /// layout" optimizations, such as representing `Foo<&T>` as a
         .               /// single pointer.
         .               pub fn inhibit_enum_layout_opt(&self) -> bool {
     1,395 ( 0.00%)          self.c() || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
         .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
         .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
     6,072 ( 0.00%)          if let Some(pack) = self.pack {
         .                       if pack.bytes() == 1 {
         .                           return true;
         .                       }
         .                   }
         .           
    12,220 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
         .               /// was enabled for its declaration crate
         .               pub fn can_randomize_type_layout(&self) -> bool {
     3,017 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
         .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
         .               pub fn inhibit_union_abi_opt(&self) -> bool {
        13 ( 0.00%)          self.c()
         .               }
         .           }
         .           
         .           impl<'tcx> FieldDef {
         .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
         .               /// typically obtained via the second field of [`TyKind::Adt`].
   142,058 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
    40,588 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
   162,352 ( 0.00%)      }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
    31,080 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    17,760 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    39,960 ( 0.00%)      }
         .           }
         .           
         .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub enum ImplOverlapKind {
         .               /// These impls are always allowed to overlap.
         .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
         .               /// marker traits.
         .               /// 4. Neither of the impls can have any where-clauses.
         .               ///
         .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
         .               Issue33140,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    83,544 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    20,886 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
    83,544 ( 0.00%)      }
         .           
     1,232 ( 0.00%)      pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
         .                   self.associated_items(id)
         .                       .in_definition_order()
     2,794 ( 0.00%)              .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
     1,408 ( 0.00%)      }
         .           
         .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
         .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
         .               }
         .           
     3,330 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
       370 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
         .                       Some(self.crate_name(def_id.krate))
         .                   } else {
     1,110 ( 0.00%)              let def_key = self.def_key(def_id);
     1,789 ( 0.00%)              match def_key.disambiguated_data.data {
         .                           // The name of a constructor is that of its parent.
       305 ( 0.00%)                  rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
         .                               krate: def_id.krate,
         .                               index: def_key.parent.unwrap(),
         .                           }),
       618 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
         .                       }
         .                   }
     2,960 ( 0.00%)      }
         .           
         .               /// Look up the name of an item across crates. This does not look at HIR.
         .               ///
         .               /// When possible, this function should be used for cross-crate lookups over
         .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
         .               /// need to handle items without a name, or HIR items that will not be
         .               /// serialized cross-crate, or if you need the span of the item, use
         .               /// [`opt_item_name`] instead.
         .               ///
         .               /// [`opt_item_name`]: Self::opt_item_name
     2,163 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
         .                   // Look at cross-crate items first to avoid invalidating the incremental cache
         .                   // unless we have to.
       309 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
         .                       bug!("item_name: no name for {:?}", self.def_path(id));
         .                   })
     1,545 ( 0.00%)      }
         .           
         .               /// Look up the name and span of an item or [`Node`].
         .               ///
         .               /// See [`item_name`][Self::item_name] for more information.
         .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
         .                   // Look at the HIR first so the span will be correct if this is a local item.
         .                   self.item_name_from_hir(def_id)
         .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
         .               }
         .           
   571,680 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
   228,672 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
         .                       Some(self.associated_item(def_id))
         .                   } else {
         .                       None
         .                   }
   514,512 ( 0.01%)      }
         .           
     6,654 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
         .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    13,308 ( 0.00%)      }
         .           
         .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
         .                   variant
         .                       .fields
         .                       .iter()
         .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
         .               }
         .           
         .               /// Returns `true` if the impls are the same polarity and the trait either
         .               /// has no items or is annotated `#[marker]` and prevents item overrides.
     7,790 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
         .                   self,
         .                   def_id1: DefId,
         .                   def_id2: DefId,
         .               ) -> Option<ImplOverlapKind> {
         .                   // If either trait impl references an error, they're allowed to overlap,
         .                   // as one of them essentially doesn't exist.
         .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
     1,558 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
         .                   {
         .                       return Some(ImplOverlapKind::Permitted { marker: false });
         .                   }
         .           
     7,790 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
         .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
         .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
         .                           debug!(
         .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
         .                               def_id1, def_id2
         .                           );
         .                           return Some(ImplOverlapKind::Permitted { marker: false });
         .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
         .                           );
         .                           return None;
         .                       }
         .                       (ImplPolarity::Positive, ImplPolarity::Positive)
         .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
         .                   };
         .           
         .                   let is_marker_overlap = {
     7,790 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
     2,337 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
     2,337 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
     6,232 ( 0.00%)              };
     3,116 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
         .                   };
         .           
         .                   if is_marker_overlap {
         .                       debug!(
         .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
         .                           def_id1, def_id2
         .                       );
         .                       Some(ImplOverlapKind::Permitted { marker: true })
         .                   } else {
     3,116 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
         .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
         .                               if self_ty1 == self_ty2 {
         .                                   debug!(
         .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
         .                                       def_id1, def_id2
         .                                   );
         .                                   return Some(ImplOverlapKind::Issue33140);
         .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
         .                                   );
         .                               }
         .                           }
         .                       }
         .           
         .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
         .                       None
         .                   }
     6,232 ( 0.00%)      }
         .           
         .               /// Returns `ty::VariantDef` if `res` refers to a struct,
         .               /// or variant or their constructors, panics otherwise.
     1,099 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
     1,884 ( 0.00%)          match res {
         .                       Res::Def(DefKind::Variant, did) => {
         .                           let enum_did = self.parent(did).unwrap();
         .                           self.adt_def(enum_did).variant_with_id(did)
         .                       }
         .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
         .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
         .                           let variant_did = self.parent(variant_ctor_did).unwrap();
         .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
         .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
         .                       }
         .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
         .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
         .                           self.adt_def(struct_did).non_enum_variant()
         .                       }
         .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
         .                   }
     1,256 ( 0.00%)      }
         .           
         .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
    15,704 ( 0.00%)      pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
     3,926 ( 0.00%)          match instance {
    19,410 ( 0.00%)              ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
         .                           DefKind::Const
         .                           | DefKind::Static
         .                           | DefKind::AssocConst
         .                           | DefKind::Ctor(..)
         .                           | DefKind::AnonConst
         .                           | DefKind::InlineConst => self.mir_for_ctfe_opt_const_arg(def),
         .                           // If the caller wants `mir_for_ctfe` of a function they should not be using
         .                           // `instance_mir`, so we'll assume const fn also wants the optimized version.
         .                           _ => {
     1,941 ( 0.00%)                      assert_eq!(def.const_param_did, None);
         .                               self.optimized_mir(def.did)
         .                           }
         .                       },
         .                       ty::InstanceDef::VtableShim(..)
         .                       | ty::InstanceDef::ReifyShim(..)
         .                       | ty::InstanceDef::Intrinsic(..)
         .                       | ty::InstanceDef::FnPtrShim(..)
         .                       | ty::InstanceDef::Virtual(..)
         .                       | ty::InstanceDef::ClosureOnceShim { .. }
         .                       | ty::InstanceDef::DropGlue(..)
         .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
         .                   }
    17,667 ( 0.00%)      }
         .           
         .               /// Gets the attributes of a definition.
   604,210 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
   181,263 ( 0.00%)          if let Some(did) = did.as_local() {
   173,070 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
         .                   } else {
         .                       self.item_attrs(did)
         .                   }
   483,368 ( 0.00%)      }
         .           
         .               /// Determines whether an item is annotated with an attribute.
    54,920 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   204,741 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
         .               }
         .           
         .               /// Determines whether an item is annotated with `doc(hidden)`.
     1,050 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
       150 ( 0.00%)          self.get_attrs(did)
         .                       .iter()
       196 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
         .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
     1,200 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is an `auto trait`.
   146,685 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    20,955 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
   167,640 ( 0.00%)      }
         .           
         .               /// Returns layout of a generator. Layout might be unavailable if the
         .               /// generator is tainted by errors.
         .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
         .                   self.optimized_mir(def_id).generator_layout()
         .               }
         .           
         .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
         .               /// If it implements no trait, returns `None`.
    53,039 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
         .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    68,193 ( 0.00%)      }
         .           
         .               /// If the given defid describes a method belonging to an impl, returns the
         .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
     1,998 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
     7,899 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
         .                       TraitContainer(_) => None,
         .                       ImplContainer(def_id) => Some(def_id),
         .                   })
     3,996 ( 0.00%)      }
         .           
         .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
         .               /// with the name of the crate containing the impl.
         .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
         .                   if let Some(impl_did) = impl_did.as_local() {
         .                       Ok(self.def_span(impl_did))
         .                   } else {
         .                       Err(self.crate_name(impl_did.krate))
         .                   }
         .               }
         .           
         .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
         .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
         .               /// definition's parent/scope to perform comparison.
   153,960 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
         .                   // We could use `Ident::eq` here, but we deliberately don't. The name
         .                   // comparison fails frequently, and we want to avoid the expensive
         .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    19,245 ( 0.00%)          use_name.name == def_name.name
    57,633 ( 0.00%)              && use_name
         .                           .span
         .                           .ctxt()
         .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
   153,960 ( 0.00%)      }
         .           
    11,934 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
     2,652 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
     2,652 ( 0.00%)          ident
    10,608 ( 0.00%)      }
         .           
   126,558 ( 0.00%)      pub fn adjust_ident_and_get_scope(
         .                   self,
         .                   mut ident: Ident,
         .                   scope: DefId,
         .                   block: hir::HirId,
         .               ) -> (Ident, DefId) {
    14,062 ( 0.00%)          let scope = ident
         .                       .span
         .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
         .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    56,248 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    84,372 ( 0.00%)          (ident, scope)
   126,558 ( 0.00%)      }
         .           
     1,988 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
         .                   self.object_safety_violations(key).is_empty()
     2,272 ( 0.00%)      }
         .           }
         .           
         .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    14,343 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    14,343 ( 0.00%)      let def_id = def_id.as_local()?;
    15,756 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
     3,928 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
       382 ( 0.00%)              return match opaque_ty.origin {
         .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
         .                               Some(parent)
         .                           }
         .                           hir::OpaqueTyOrigin::TyAlias => None,
         .                       };
         .                   }
         .               }
         .               None
    19,124 ( 0.00%)  }
         .           
         .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
         .               match ity {
         .                   ast::IntTy::Isize => IntTy::Isize,
         .                   ast::IntTy::I8 => IntTy::I8,
         .                   ast::IntTy::I16 => IntTy::I16,
         .                   ast::IntTy::I32 => IntTy::I32,
         .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
         .           
         .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
         .               match fty {
         .                   ast::FloatTy::F32 => FloatTy::F32,
         .                   ast::FloatTy::F64 => FloatTy::F64,
         .               }
         .           }
         .           
     1,532 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
         .               match ity {
         .                   IntTy::Isize => ast::IntTy::Isize,
         .                   IntTy::I8 => ast::IntTy::I8,
         .                   IntTy::I16 => ast::IntTy::I16,
         .                   IntTy::I32 => ast::IntTy::I32,
         .                   IntTy::I64 => ast::IntTy::I64,
         .                   IntTy::I128 => ast::IntTy::I128,
         .               }
     1,532 ( 0.00%)  }
         .           
         .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
         .               match uty {
         .                   UintTy::Usize => ast::UintTy::Usize,
         .                   UintTy::U8 => ast::UintTy::U8,
         .                   UintTy::U16 => ast::UintTy::U16,
         .                   UintTy::U32 => ast::UintTy::U32,
         .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
         .               closure::provide(providers);
         .               context::provide(providers);
         .               erase_regions::provide(providers);
         .               layout::provide(providers);
         .               util::provide(providers);
         .               print::provide(providers);
         .               super::util::bug::provide(providers);
         .               super::middle::provide(providers);
         8 ( 0.00%)      *providers = ty::query::Providers {
         .                   trait_impls_of: trait_def::trait_impls_of_provider,
         .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
         .                   const_param_default: consts::const_param_default,
         .                   vtable_allocation: vtable::vtable_allocation_provider,
         .                   ..*providers
         .               };
         1 ( 0.00%)  }
         .           
         .           /// A map for the local crate mapping each type to a vector of its
         .           /// inherent impls. This is not meant to be used outside of coherence;
         .           /// rather, you should request the vector for a specific type via
         .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
         .           /// (constructing this map requires touching the entire crate).
         .           #[derive(Clone, Debug, Default, HashStable)]
         .           pub struct CrateInherentImpls {
         .               pub inherent_impls: LocalDefIdMap<Vec<DefId>>,
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
         .           pub struct SymbolName<'tcx> {
         .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
     7,250 ( 0.00%)      pub name: &'tcx str,
         .           }
         .           
         .           impl<'tcx> SymbolName<'tcx> {
     4,584 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
         .                   SymbolName {
         .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
         .                   }
     6,112 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
       146 ( 0.00%)      fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for SymbolName<'tcx> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
-- line 2312 ----------------------------------------

27,104,008 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::collections::BTreeMap;
        .           use std::ops::Range;
        .           use std::{cmp, fmt, mem};
        .           
        .           mod leak_check;
        .           
        .           pub use rustc_middle::infer::MemberConstraint;
        .           
  881,353 ( 0.01%)  #[derive(Default)]
        .           pub struct RegionConstraintStorage<'tcx> {
        .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
        .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
        .           
        .               data: RegionConstraintData<'tcx>,
        .           
        .               /// For a given pair of regions (R1, R2), maps to a region R3 that
        .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
        .               storage: &'a mut RegionConstraintStorage<'tcx>,
        .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .           }
        .           
        .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
        .               type Target = RegionConstraintStorage<'tcx>;
        .               #[inline]
        .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
   36,672 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
  127,948 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
        .           
        .           /// The full set of region constraints gathered up by the collector.
        .           /// Describes constraints between the region variables and other
        .           /// regions, as well as other conditions that must be verified, or
        .           /// assumptions that can be made.
  398,280 ( 0.00%)  #[derive(Debug, Default, Clone)]
        .           pub struct RegionConstraintData<'tcx> {
        .               /// Constraints of the form `A <= B`, where either `A` or `B` can
        .               /// be a region variable (or neither, as it happens).
        .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
        .           
        .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
        .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
        .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
        .               /// This hashmap is used to avoid that naive scenario. Basically
        .               /// we record the fact that `'a <= 'b` is implied by the fn
        .               /// signature, and then ignore the constraint when solving
        .               /// equations. This is a bit of a hack but seems to work.
        .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
        .           }
        .           
        .           /// Represents a constraint that influences the inference process.
5,511,844 ( 0.06%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
        .           pub enum Constraint<'tcx> {
        .               /// A region variable is a subregion of another.
1,364,180 ( 0.01%)      VarSubVar(RegionVid, RegionVid),
        .           
        .               /// A concrete region is a subregion of region variable.
  163,185 ( 0.00%)      RegSubVar(Region<'tcx>, RegionVid),
        .           
        .               /// A region variable is a subregion of a concrete region. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
  119,699 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
        .           
        .               /// A constraint where neither side is a variable. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
    9,155 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
        .           }
        .           
        .           impl Constraint<'_> {
        .               pub fn involves_placeholders(&self) -> bool {
   91,876 ( 0.00%)          match self {
        .                       Constraint::VarSubVar(_, _) => false,
        .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
        .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 304 ----------------------------------------
        .               pub universe: ty::UniverseIndex,
        .           }
        .           
        .           pub struct RegionSnapshot {
        .               any_unifications: bool,
        .           }
        .           
        .           impl<'tcx> RegionConstraintStorage<'tcx> {
  160,246 ( 0.00%)      pub fn new() -> Self {
        .                   Self::default()
  160,246 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
        .                   &'a mut self,
        .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .               ) -> RegionConstraintCollector<'a, 'tcx> {
        .                   RegionConstraintCollector { storage: self, undo_log }
        .               }
        .           
        .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
1,038,135 ( 0.01%)          match undo_entry {
        .                       AddVar(vid) => {
        .                           self.var_infos.pop().unwrap();
  271,204 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
        .                       }
  139,826 ( 0.00%)              AddConstraint(ref constraint) => {
  559,304 ( 0.01%)                  self.data.constraints.remove(constraint);
        .                       }
        .                       AddVerify(index) => {
        .                           self.data.verifys.pop();
        .                           assert_eq!(self.data.verifys.len(), index);
        .                       }
        .                       AddGiven(sub, sup) => {
        .                           self.data.givens.remove(&(sub, sup));
        .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
        .               pub fn num_region_vars(&self) -> usize {
        .                   self.var_infos.len()
        .               }
        .           
        .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
   25,183 ( 0.00%)          &self.data
   25,183 ( 0.00%)      }
        .           
        .               /// Once all the constraints have been gathered, extract out the final data.
        .               ///
        .               /// Not legal during a snapshot.
        .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
   19,409 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
        .               }
        .           
        .               /// Takes (and clears) the current set of constraints. Note that
        .               /// the set of variables remains intact, but all relationships
        .               /// between them are reset. This is used during NLL checking to
        .               /// grab the set of constraints that arose from a particular
        .               /// operation.
        .               ///
        .               /// We don't want to leak relationships between variables between
        .               /// points because just because (say) `r1 == r2` was true at some
        .               /// point P in the graph doesn't imply that it will be true at
        .               /// some other point Q, in NLL.
        .               ///
        .               /// Not legal during a snapshot.
      228 ( 0.00%)      pub fn take_and_reset_data(&mut self) -> RegionConstraintData<'tcx> {
       38 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .           
        .                   // If you add a new field to `RegionConstraintCollector`, you
        .                   // should think carefully about whether it needs to be cleared
        .                   // or updated in some way.
        .                   let RegionConstraintStorage {
        .                       var_infos: _,
       38 ( 0.00%)              data,
        .                       lubs,
        .                       glbs,
        .                       unification_table: _,
        .                       any_unifications,
        .                   } = self.storage;
        .           
        .                   // Clear the tables of (lubs, glbs), so that we will create
        .                   // fresh regions if we do a LUB operation. As it happens,
-- line 395 ----------------------------------------
-- line 399 ----------------------------------------
        .                   glbs.clear();
        .           
        .                   let data = mem::take(data);
        .           
        .                   // Clear all unifications and recreate the variables a "now
        .                   // un-unified" state. Note that when we unify `a` and `b`, we
        .                   // also insert `a <= b` and a `b <= a` edges, so the
        .                   // `RegionConstraintData` contains the relationship here.
       76 ( 0.00%)          if *any_unifications {
        5 ( 0.00%)              *any_unifications = false;
       15 ( 0.00%)              self.unification_table().reset_unifications(|_| UnifiedRegion(None));
        .                   }
        .           
        .                   data
      304 ( 0.00%)      }
        .           
        .               pub fn data(&self) -> &RegionConstraintData<'tcx> {
        .                   &self.data
        .               }
        .           
        .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
        .                   debug!("RegionConstraintCollector: start_snapshot");
        .                   RegionSnapshot { any_unifications: self.any_unifications }
        .               }
        .           
        .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
        .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
  844,082 ( 0.01%)          self.any_unifications = snapshot.any_unifications;
        .               }
        .           
  767,688 ( 0.01%)      pub fn new_region_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: RegionVariableOrigin,
        .               ) -> RegionVid {
  127,948 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
        .           
  383,844 ( 0.00%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
  127,948 ( 0.00%)          assert_eq!(vid, u_vid.vid);
        .                   self.undo_log.push(AddVar(vid));
        .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
        .                   vid
1,023,584 ( 0.01%)      }
        .           
        .               /// Returns the universe for the given variable.
        .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
  113,818 ( 0.00%)          self.var_infos[vid].universe
        .               }
        .           
        .               /// Returns the origin for the given variable.
        .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
        .                   self.var_infos[vid].origin
        .               }
        .           
        .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
        .           
        .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
        .                   // present in the map yet. This prevents origins from outside the snapshot being
        .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
        .                   let undo_log = &mut self.undo_log;
1,909,764 ( 0.02%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
1,008,018 ( 0.01%)              undo_log.push(AddConstraint(constraint));
  672,012 ( 0.01%)              origin
        .                   });
        .               }
        .           
        .               fn add_verify(&mut self, verify: Verify<'tcx>) {
        .                   // cannot add verifys once regions are resolved
        .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
        .           
        .                   // skip no-op cases known to be satisfied
   15,302 ( 0.00%)          if let VerifyBound::AllBounds(ref bs) = verify.bound {
        7 ( 0.00%)              if bs.is_empty() {
        .                           return;
        .                       }
        .                   }
        .           
    7,651 ( 0.00%)          let index = self.data.verifys.len();
  114,765 ( 0.00%)          self.data.verifys.push(verify);
    7,651 ( 0.00%)          self.undo_log.push(AddVerify(index));
        .               }
        .           
        .               pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {
        .                   // cannot add givens once regions are resolved
        .                   if self.data.givens.insert((sub, sup)) {
        .                       debug!("add_given({:?} <= {:?})", sub, sup);
        .           
        .                       self.undo_log.push(AddGiven(sub, sup));
        .                   }
        .               }
        .           
1,055,900 ( 0.01%)      pub fn make_eqregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
  527,950 ( 0.01%)          if sub != sup {
        .                       // Eventually, it would be nice to add direct support for
        .                       // equating regions.
  668,968 ( 0.01%)              self.make_subregion(origin.clone(), sub, sup);
  752,589 ( 0.01%)              self.make_subregion(origin, sup, sub);
        .           
  418,133 ( 0.00%)              match (sub, sup) {
  187,995 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
  313,325 ( 0.00%)                      self.unification_table().union(sub, sup);
        .                               self.any_unifications = true;
        .                           }
        .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
   83,712 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
        .                               self.any_unifications = true;
        .                           }
        .                           (_, _) => {}
        .                       }
        .                   }
  585,347 ( 0.01%)      }
        .           
      112 ( 0.00%)      pub fn member_constraint(
        .                   &mut self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   member_region: ty::Region<'tcx>,
        .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
        .                   debug!("member_constraint({:?} in {:#?})", member_region, choice_regions);
        .           
        8 ( 0.00%)          if choice_regions.iter().any(|&r| r == member_region) {
        .                       return;
        .                   }
        .           
       72 ( 0.00%)          self.data.member_constraints.push(MemberConstraint {
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       member_region,
        .                       choice_regions: choice_regions.clone(),
        .                   });
       64 ( 0.00%)      }
        .           
2,559,060 ( 0.03%)      #[instrument(skip(self, origin), level = "debug")]
        .               pub fn make_subregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("origin = {:#?}", origin);
        .           
1,878,744 ( 0.02%)          match (sub, sup) {
        .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
        .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
        .                       }
        .                       (_, &ReStatic) => {
        .                           // all regions are subregions of static, so we can ignore this
        .                       }
  134,204 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
  939,428 ( 0.01%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
        .                       }
        .                       (_, &ReVar(sup_id)) => {
  158,032 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
        .                       }
   23,848 ( 0.00%)              (&ReVar(sub_id), _) => {
  166,936 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
        .                       }
        .                       _ => {
   13,741 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
        .                       }
        .                   }
        .               }
        .           
   38,255 ( 0.00%)      pub fn verify_generic_bound(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   sub: Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
   99,463 ( 0.00%)          self.add_verify(Verify { kind, origin, region: sub, bound });
   38,255 ( 0.00%)      }
        .           
        .               pub fn lub_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
-- line 591 ----------------------------------------
-- line 599 ----------------------------------------
        .                       _ if a == b => {
        .                           a // LUB(a,a) = a
        .                       }
        .           
        .                       _ => self.combine_vars(tcx, Lub, a, b, origin),
        .                   }
        .               }
        .           
        8 ( 0.00%)      pub fn glb_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: glb_regions({:?}, {:?})", a, b);
        4 ( 0.00%)          match (a, b) {
        .                       (&ReStatic, r) | (r, &ReStatic) => {
        .                           r // static lives longer than everything else
        .                       }
        .           
        2 ( 0.00%)              _ if a == b => {
        .                           a // GLB(a,a) = a
        .                       }
        .           
       12 ( 0.00%)              _ => self.combine_vars(tcx, Glb, a, b, origin),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
        .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
  262,008 ( 0.00%)          self.unification_table().find(rid).vid
        .               }
        .           
        .               /// If the Region is a `ReVar`, then resolves it either to the root value in
        .               /// the unification table, if it exists, or to the root `ReVar` in the table.
        .               /// If the Region is not a `ReVar`, just returns the Region itself.
        .               pub fn opportunistic_resolve_region(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 647 ----------------------------------------
        .                               tcx.reuse_or_mk_region(region, ty::ReVar(root))
        .                           })
        .                       }
        .                       _ => region,
        .                   }
        .               }
        .           
        .               fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {
        8 ( 0.00%)          match t {
        .                       Glb => &mut self.glbs,
        .                       Lub => &mut self.lubs,
        .                   }
        .               }
        .           
       12 ( 0.00%)      fn combine_vars(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   t: CombineMapType,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .               ) -> Region<'tcx> {
        .                   let vars = TwoRegions { a, b };
        .                   if let Some(&c) = self.combine_map(t).get(&vars) {
        .                       return tcx.mk_region(ReVar(c));
        .                   }
        .                   let a_universe = self.universe(a);
        .                   let b_universe = self.universe(b);
        .                   let c_universe = cmp::max(a_universe, b_universe);
        5 ( 0.00%)          let c = self.new_region_var(c_universe, MiscVariable(origin.span()));
        .                   self.combine_map(t).insert(vars, c);
        1 ( 0.00%)          self.undo_log.push(AddCombination(t, vars));
        5 ( 0.00%)          let new_r = tcx.mk_region(ReVar(c));
        8 ( 0.00%)          for old_r in [a, b] {
        2 ( 0.00%)              match t {
       17 ( 0.00%)                  Glb => self.make_subregion(origin.clone(), new_r, old_r),
        .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
        .                       }
        .                   }
        .                   debug!("combine_vars() c={:?}", c);
        .                   new_r
        9 ( 0.00%)      }
        .           
        .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
   86,828 ( 0.00%)          match *region {
        .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
        .                           ty::UniverseIndex::ROOT
        .                       }
        .                       ty::ReEmpty(ui) => ui,
        .                       ty::RePlaceholder(placeholder) => placeholder.universe,
   11,889 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
        .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
        .                   }
        .               }
        .           
   16,630 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &self,
        .                   value_count: usize,
        .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
        .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
   19,956 ( 0.00%)          (
        .                       range.clone(),
        .                       (range.start.index()..range.end.index())
        .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
        .                           .collect(),
        .                   )
   19,956 ( 0.00%)      }
        .           
        .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
  725,751 ( 0.01%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
  241,917 ( 0.00%)          self.undo_log
        .                       .region_constraints_in_snapshot(mark)
  108,627 ( 0.00%)              .map(|&elt| match elt {
   36,048 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
        .                           _ => None,
        .                       })
        .                       .max()
        .                       .unwrap_or(None)
  967,668 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
  554,091 ( 0.01%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
        .               }
        .           }
        .           
        .           impl fmt::Debug for RegionSnapshot {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "RegionSnapshot")
        .               }
        .           }
-- line 737 ----------------------------------------
-- line 750 ----------------------------------------
        .                   match *self {
        .                       GenericKind::Param(ref p) => write!(f, "{}", p),
        .                       GenericKind::Projection(ref p) => write!(f, "{}", p),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> GenericKind<'tcx> {
    5,878 ( 0.00%)      pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  180,766 ( 0.00%)          match *self {
   10,421 ( 0.00%)              GenericKind::Param(ref p) => p.to_ty(tcx),
      169 ( 0.00%)              GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),
        .                   }
    5,878 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> VerifyBound<'tcx> {
    7,200 ( 0.00%)      pub fn must_hold(&self) -> bool {
   10,060 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(..) => false,
        .                       VerifyBound::OutlivedBy(ty::ReStatic) => true,
        .                       VerifyBound::OutlivedBy(_) => false,
        .                       VerifyBound::IsEmpty => false,
    1,888 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),
       23 ( 0.00%)              VerifyBound::AllBounds(bs) => bs.iter().all(|b| b.must_hold()),
        .                   }
    8,400 ( 0.00%)      }
        .           
    3,720 ( 0.00%)      pub fn cannot_hold(&self) -> bool {
    5,392 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(_, b) => b.cannot_hold(),
        .                       VerifyBound::IsEmpty => false,
        .                       VerifyBound::OutlivedBy(_) => false,
      556 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),
      273 ( 0.00%)              VerifyBound::AllBounds(bs) => bs.iter().any(|b| b.cannot_hold()),
        .                   }
    5,208 ( 0.00%)      }
        .           
    1,164 ( 0.00%)      pub fn or(self, vb: VerifyBound<'tcx>) -> VerifyBound<'tcx> {
    1,552 ( 0.00%)          if self.must_hold() || vb.cannot_hold() {
        .                       self
      964 ( 0.00%)          } else if self.cannot_hold() || vb.must_hold() {
      588 ( 0.00%)              vb
        .                   } else {
      611 ( 0.00%)              VerifyBound::AnyBound(vec![self, vb])
        .                   }
    1,411 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> RegionConstraintData<'tcx> {
        .               /// Returns `true` if this region constraint data contains no constraints, and `false`
        .               /// otherwise.
        .               pub fn is_empty(&self) -> bool {
        .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
    4,680 ( 0.00%)          constraints.is_empty()
        .                       && member_constraints.is_empty()
        .                       && verifys.is_empty()
        .                       && givens.is_empty()
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
1,038,135 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  830,508 ( 0.01%)          self.rollback_undo_entry(undo)
1,038,135 ( 0.01%)      }
        .           }

7,990,423 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/higher_ranked/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .                   // Rather than checking the subtype relationship between `a` and `b`
        .                   // as-is, we need to do some extra work here in order to make sure
        .                   // that function subtyping works correctly with respect to regions
        .                   //
        .                   // Note: this is a subtle algorithm.  For a full explanation, please see
        .                   // the rustc dev guide:
        .                   // <https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/placeholders_and_universes.html>
        .           
  603,074 ( 0.01%)          let span = self.trace.cause.span;
        .           
3,919,981 ( 0.04%)          self.infcx.commit_if_ok(|_| {
        .                       // First, we instantiate each bound region in the supertype with a
        .                       // fresh placeholder region.
2,710,455 ( 0.03%)              let b_prime = self.infcx.replace_bound_vars_with_placeholders(b);
        .           
        .                       // Next, we instantiate each bound region in the subtype
        .                       // with a fresh region variable. These region variables --
        .                       // but no other pre-existing region variables -- can name
        .                       // the placeholders.
  601,682 ( 0.01%)              let (a_prime, _) =
1,206,250 ( 0.01%)                  self.infcx.replace_bound_vars_with_fresh_vars(span, HigherRankedType, a);
        .           
        .                       debug!("a_prime={:?}", a_prime);
        .                       debug!("b_prime={:?}", b_prime);
        .           
        .                       // Compare types now that bound regions have been replaced.
2,109,961 ( 0.02%)              let result = self.sub(a_is_expected).relate(a_prime, b_prime)?;
        .           
        .                       debug!("higher_ranked_sub: OK result={:?}", result);
        .           
        .                       // We related `a_prime` and `b_prime`, which just had any bound vars
        .                       // replaced with placeholders or infer vars, respectively. Relating
        .                       // them should not introduce new bound vars.
        .                       Ok(ty::Binder::dummy(result))
        .                   })
-- line 56 ----------------------------------------
-- line 63 ----------------------------------------
        .               /// placeholder region. This is the first step of checking subtyping
        .               /// when higher-ranked things are involved.
        .               ///
        .               /// **Important:** You have to be careful to not leak these placeholders,
        .               /// for more information about how placeholders and HRTBs work, see
        .               /// the [rustc dev guide].
        .               ///
        .               /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
2,518,533 ( 0.03%)      pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   // Figure out what the next universe will be, but don't actually create
        .                   // it until after we've done the substitution (in particular there may
        .                   // be no bound variables). This is a performance optimization, since the
        .                   // leak check for example can be skipped if no new universes are created
        .                   // (i.e., if there are no placeholders).
1,842,523 ( 0.02%)          let next_universe = self.universe().next_universe();
        .           
        .                   let fld_r = |br: ty::BoundRegion| {
   27,625 ( 0.00%)              self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {
    4,250 ( 0.00%)                  universe: next_universe,
        .                           name: br.kind,
        .                       }))
        .                   };
        .           
        .                   let fld_t = |bound_ty: ty::BoundTy| {
        .                       self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {
        .                           universe: next_universe,
        .                           name: bound_ty.var,
-- line 92 ----------------------------------------
-- line 98 ----------------------------------------
        .                           val: ty::ConstKind::Placeholder(ty::PlaceholderConst {
        .                               universe: next_universe,
        .                               name: ty::BoundConst { var: bound_var, ty },
        .                           }),
        .                           ty,
        .                       })
        .                   };
        .           
9,560,382 ( 0.10%)          let (result, map) = self.tcx.replace_bound_vars(binder, fld_r, fld_t, fld_c);
        .           
        .                   // If there were higher-ranked regions to replace, then actually create
        .                   // the next universe (this avoids needlessly creating universes).
  431,372 ( 0.00%)          if !map.is_empty() {
    5,449 ( 0.00%)              let n_u = self.create_next_universe();
    1,821 ( 0.00%)              assert_eq!(n_u, next_universe);
        .                   }
        .           
        .                   debug!(
        .                       "replace_bound_vars_with_placeholders(\
        .                        next_universe={:?}, \
        .                        result={:?}, \
        .                        map={:?})",
        .                       next_universe, result, map,
        .                   );
        .           
        .                   result
2,724,978 ( 0.03%)      }
        .           
        .               /// See `infer::region_constraints::RegionConstraintCollector::leak_check`.
1,451,502 ( 0.01%)      pub fn leak_check(
        .                   &self,
        .                   overly_polymorphic: bool,
        .                   snapshot: &CombinedSnapshot<'_, 'tcx>,
        .               ) -> RelateResult<'tcx, ()> {
        .                   // If the user gave `-Zno-leak-check`, or we have been
        .                   // configured to skip the leak check, then skip the leak check
        .                   // completely. The leak check is deprecated. Any legitimate
        .                   // subtyping errors that it would have caught will now be
        .                   // caught later on, during region checking. However, we
        .                   // continue to use it for a transition period.
1,209,585 ( 0.01%)          if self.tcx.sess.opts.debugging_opts.no_leak_check || self.skip_leak_check.get() {
      212 ( 0.00%)              return Ok(());
        .                   }
        .           
1,450,230 ( 0.01%)          self.inner.borrow_mut().unwrap_region_constraints().leak_check(
        .                       self.tcx,
        .                       overly_polymorphic,
        .                       self.universe(),
        .                       snapshot,
        .                   )
1,209,585 ( 0.01%)      }
        .           }

  670,142 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/higher_ranked/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
2,132,707 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
      169 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,226 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    4,592 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
      158 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
      632 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    3,512 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       81 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
      127 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    9,737 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    8,433 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
      567 ( 0.00%)      fn from(p: PathBuf) -> Self {
      162 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
      486 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
      567 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
      324 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
      486 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
      486 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
      405 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
      184 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
      138 ( 0.00%)          match self.inner {
       46 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
      184 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,376 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
       46 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
       92 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       81 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
      162 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       49 ( 0.00%)      pub lo: BytePos,
       49 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
      105 ( 0.00%)      pub ctxt: SyntaxContext,
       34 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  858,274 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
    2,709 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   86,312 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   64,734 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   86,312 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  163,233 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  108,822 ( 0.00%)      }
        .               #[inline]
    4,036 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    4,036 ( 0.00%)      }
        .               #[inline]
   22,842 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   15,228 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
   15,555 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    9,333 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
       63 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       42 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
        6 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
        4 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      309 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      206 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    8,127 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    5,418 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 657 ----------------------------------------
        .               /// the macro callsite that expanded to it.
        .               pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
        .               }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
       45 ( 0.00%)      pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
       18 ( 0.00%)          if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
      108 ( 0.00%)      }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    5,930 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    2,965 ( 0.00%)          while !outer.contains(self) {
       45 ( 0.00%)              self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    6,523 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   54,732 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   36,488 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
   10,728 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    8,106 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    7,390 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      335 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       67 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      268 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   20,461 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
   17,538 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
   14,615 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      865 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
    1,038 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      692 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
      164 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       41 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
      164 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
1,294,810 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  231,564 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    3,856 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
    3,639 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  797,321 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
1,059,390 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    6,765 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    4,305 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    4,920 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
   11,330 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    2,060 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    7,210 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    9,270 ( 0.00%)      }
        .           
       22 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
       14 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    1,646 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       60 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   10,236 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    5,971 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
  310,581 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
       32 ( 0.00%)          let mut span = self.data();
       32 ( 0.00%)          let mark = span.ctxt.remove_mark();
      128 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  201,906 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  134,604 ( 0.00%)          let mut span = self.data();
  108,796 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  201,906 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  220,966 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
      468 ( 0.00%)          let mut span = self.data();
      702 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
    1,872 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   21,591 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
   23,040 ( 0.00%)          let mut span = self.data();
   29,287 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
   56,175 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   23,990 ( 0.00%)      }
        .           
        .               #[inline]
  234,584 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  205,261 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    3,285 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
      330 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      309 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    3,285 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    3,285 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
      330 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
      264 ( 0.00%)          MultiSpan::from_spans(spans)
      330 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       99 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      312 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      540 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      156 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      540 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      468 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
      237 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      161 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,246 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
      474 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,492 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
      246 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
      245 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
    4,582 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       79 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       79 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       79 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
      316 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
      158 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
      158 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
      237 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      869 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,607 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      623 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  936,194 ( 0.01%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,246 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,853 ( 0.00%)              SourceFile {
    4,984 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,492 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,492 ( 0.00%)                  lines,
    2,492 ( 0.00%)                  multibyte_chars,
    2,492 ( 0.00%)                  non_narrow_chars,
    2,492 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,607 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      891 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
      243 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
      162 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
      162 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
      243 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      972 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
      162 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
    1,377 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      891 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
      324 ( 0.00%)              lines,
      324 ( 0.00%)              multibyte_chars,
      324 ( 0.00%)              non_narrow_chars,
      324 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      729 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
   13,202 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
    1,888 ( 0.00%)          if matches!(
    3,772 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
    1,885 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
   16,974 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      688 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
  121,265 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   45,827 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
  121,693 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   85,134 ( 0.00%)          assert!(line_index < self.lines.len());
  118,326 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      534 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   78,450 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
       94 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
      282 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
    1,164 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
    3,312 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
    2,760 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      564 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      470 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      188 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
      329 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
       94 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
       38 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       47 ( 0.00%)                  let linebpos = self.lines[a];
       94 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       47 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
      376 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
      376 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      141 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
       94 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       47 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
       12 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
      235 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
      329 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      820 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      738 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       82 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       82 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  191,556 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
   13,475 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  275,835 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
2,310,861 ( 0.02%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
3,810,327 ( 0.04%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  404,658 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
       12 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
        6 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
1,789,522 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  359,034 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
1,430,488 ( 0.01%)          let span = self.data_untracked();
  456,782 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
  766,938 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  515,953 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  501,970 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
1,003,940 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  501,970 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  250,985 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  250,985 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
2,045,168 ( 0.02%)      }
        .           }

5,106,277 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 346 ----------------------------------------
         .               ///
         .               /// let c = Cell::new(5);
         .               ///
         .               /// c.set(10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn set(&self, val: T) {
     1,596 ( 0.00%)          let old = self.replace(val);
     6,248 ( 0.00%)          drop(old);
         .               }
         .           
         .               /// Swaps the values of two `Cell`s.
         .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
         .               ///
         .               /// let five = c.get();
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get(&self) -> T {
         .                   // SAFETY: This can cause data races if called from a separate thread,
         .                   // but `Cell` is `!Sync` so this won't happen.
   964,803 ( 0.01%)          unsafe { *self.value.get() }
         .               }
         .           
         .               /// Updates the contained value using a function and returns the new value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
         .           
         .           #[inline(always)]
         .           fn is_writing(x: BorrowFlag) -> bool {
         .               x < UNUSED
         .           }
         .           
         .           #[inline(always)]
         .           fn is_reading(x: BorrowFlag) -> bool {
 1,397,065 ( 0.01%)      x > UNUSED
         .           }
         .           
         .           impl<T> RefCell<T> {
         .               /// Creates a new `RefCell` containing `value`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
         .               /// use std::cell::RefCell;
         .               ///
         .               /// let c = RefCell::new(5);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
         .               #[inline]
         .               pub const fn new(value: T) -> RefCell<T> {
   336,630 ( 0.00%)          RefCell {
   247,355 ( 0.00%)              value: UnsafeCell::new(value),
         .                       borrow: Cell::new(UNUSED),
         .                       #[cfg(feature = "debug_refcell")]
         .                       borrowed_at: Cell::new(None),
         .                   }
         .               }
         .           
         .               /// Consumes the `RefCell`, returning the wrapped value.
         .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
         .               /// let five = c.into_inner();
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
         .               #[inline]
         .               pub const fn into_inner(self) -> T {
         .                   // Since this function takes `self` (the `RefCell`) by value, the
         .                   // compiler statically verifies that it is not currently borrowed.
    12,380 ( 0.00%)          self.value.into_inner()
         .               }
         .           
         .               /// Replaces the wrapped value with a new one, returning the old value,
         .               /// without deinitializing either one.
         .               ///
         .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
         .               ///
         .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               ///
         .               /// let m = c.borrow_mut();
         .               /// let b = c.borrow(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    14,013 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
         .                   self.try_borrow().expect("already mutably borrowed")
    42,039 ( 0.00%)      }
         .           
         .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
         .               /// borrowed.
         .               ///
         .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
         .               /// taken out at the same time.
         .               ///
         .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               /// let m = c.borrow();
         .               ///
         .               /// let b = c.borrow_mut(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    55,780 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
         .                   self.try_borrow_mut().expect("already borrowed")
   167,340 ( 0.00%)      }
         .           
         .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
         .               ///
         .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
         .               /// from it exit scope. The value cannot be borrowed while this borrow is
         .               /// active.
         .               ///
         .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
         .                   match BorrowRefMut::new(&self.borrow) {
         .                       Some(b) => {
         .                           #[cfg(feature = "debug_refcell")]
         .                           {
         .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
         .                           }
         .           
         .                           // SAFETY: `BorrowRef` guarantees unique access.
       797 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
         .                       }
         .                       None => Err(BorrowMutError {
         .                           // If a borrow occurred, then we must already have an outstanding borrow,
         .                           // so `borrowed_at` will be `Some`
         .                           #[cfg(feature = "debug_refcell")]
         .                           location: self.borrowed_at.get().unwrap(),
         .                       }),
         .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
         .           
         .           struct BorrowRef<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl<'b> BorrowRef<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
 1,867,144 ( 0.02%)          let b = borrow.get().wrapping_add(1);
 1,135,022 ( 0.01%)          if !is_reading(b) {
         .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
         .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
         .                       //    due to Rust's reference aliasing rules
         .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
         .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
         .                       //    an additional read borrow because isize can't represent so many read borrows
         .                       //    (this can only happen if you mem::forget more than a small constant amount of
         .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
         .                       Some(BorrowRef { borrow })
         .                   }
         .               }
         .           }
         .           
         .           impl Drop for BorrowRef<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
   754,179 ( 0.01%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_reading(borrow));
 1,509,345 ( 0.02%)          self.borrow.set(borrow - 1);
         .               }
         .           }
         .           
         .           impl Clone for BorrowRef<'_> {
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   // Since this Ref exists, we know the borrow flag
         .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
         .           
         .           struct BorrowRefMut<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl Drop for BorrowRefMut<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
17,615,731 ( 0.18%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_writing(borrow));
36,068,612 ( 0.36%)          self.borrow.set(borrow + 1);
         .               }
         .           }
         .           
         .           impl<'b> BorrowRefMut<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
         .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
         .                   // mutable reference, and so there must currently be no existing
         .                   // references. Thus, while clone increments the mutable refcount, here
         .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
37,572,362 ( 0.38%)          match borrow.get() {
         .                       UNUSED => {
         .                           borrow.set(UNUSED - 1);
         .                           Some(BorrowRefMut { borrow })
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
         .                   self.value
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut T {
     1,925 ( 0.00%)          self.value
         .               }
         .           }
         .           
         .           #[unstable(feature = "coerce_unsized", issue = "27732")]
         .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
         .           
         .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
         .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
         .               /// ```
         .               #[inline(always)]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
         .               pub const fn get(&self) -> *mut T {
         .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
         .                   // #[repr(transparent)]. This exploits libstd's special status, there is
         .                   // no guarantee for user code that this will work in future versions of the compiler!
 8,540,527 ( 0.09%)          self as *const UnsafeCell<T> as *const T as *mut T
         .               }
         .           
         .               /// Returns a mutable reference to the underlying data.
         .               ///
         .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
         .               /// guarantees that we possess the only reference.
         .               ///
         .               /// # Examples
-- line 1925 ----------------------------------------

26,058,784 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           
         .           use super::BuiltinImplConditions;
         .           use super::IntercrateAmbiguityCause;
         .           use super::OverflowError;
         .           use super::SelectionCandidate::{self, *};
         .           use super::{EvaluatedCandidate, SelectionCandidateSet, SelectionContext, TraitObligationStack};
         .           
         .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
 1,345,136 ( 0.01%)      #[instrument(level = "debug", skip(self))]
 1,681,420 ( 0.02%)      pub(super) fn candidate_from_obligation<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
         .                   // Watch out for overflow. This intentionally bypasses (and does
         .                   // not update) the cache.
   336,284 ( 0.00%)          self.check_recursion_limit(&stack.obligation, &stack.obligation)?;
         .           
         .                   // Check the cache. Note that we freshen the trait-ref
         .                   // separately rather than using `stack.fresh_trait_ref` --
         .                   // this is because we want the unbound variables to be
         .                   // replaced with fresh types starting from index 0.
 1,513,278 ( 0.02%)          let cache_fresh_trait_pred = self.infcx.freshen(stack.obligation.predicate);
         .                   debug!(?cache_fresh_trait_pred);
         .                   debug_assert!(!stack.obligation.predicate.has_escaping_bound_vars());
         .           
 1,820,566 ( 0.02%)          if let Some(c) =
   504,426 ( 0.01%)              self.check_candidate_cache(stack.obligation.param_env, cache_fresh_trait_pred)
         .                   {
         .                       debug!(candidate = ?c, "CACHE HIT");
         .                       return c;
         .                   }
         .           
         .                   // If no match, compute result and insert into cache.
         .                   //
         .                   // FIXME(nikomatsakis) -- this cache is not taking into
         .                   // account cycles that may have occurred in forming the
         .                   // candidate. I don't know of any specific problems that
         .                   // result but it seems awfully suspicious.
   372,444 ( 0.00%)          let (candidate, dep_node) =
   186,222 ( 0.00%)              self.in_task(|this| this.candidate_from_obligation_no_cache(stack));
         .           
         .                   debug!(?candidate, "CACHE MISS");
         .                   self.insert_candidate_cache(
   124,148 ( 0.00%)              stack.obligation.param_env,
   248,296 ( 0.00%)              cache_fresh_trait_pred,
         .                       dep_node,
         .                       candidate.clone(),
         .                   );
   744,888 ( 0.01%)          candidate
         .               }
         .           
   620,740 ( 0.01%)      fn candidate_from_obligation_no_cache<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
    17,850 ( 0.00%)          if let Some(conflict) = self.is_knowable(stack) {
         .                       debug!("coherence stage: not knowable");
     3,432 ( 0.00%)              if self.intercrate_ambiguity_causes.is_some() {
         .                           debug!("evaluate_stack: intercrate_ambiguity_causes is some");
         .                           // Heuristics: show the diagnostics when there are no candidates in crate.
         .                           if let Ok(candidate_set) = self.assemble_candidates(stack) {
         .                               let mut no_candidates_apply = true;
         .           
         .                               for c in candidate_set.vec.iter() {
         .                                   if self.evaluate_candidate(stack, &c)?.may_apply() {
         .                                       no_candidates_apply = false;
-- line 87 ----------------------------------------
-- line 106 ----------------------------------------
         .                                   } else {
         .                                       IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }
         .                                   };
         .                                   debug!(?cause, "evaluate_stack: pushing cause");
         .                                   self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
         .                               }
         .                           }
         .                       }
     6,864 ( 0.00%)              return Ok(None);
         .                   }
         .           
   175,926 ( 0.00%)          let candidate_set = self.assemble_candidates(stack)?;
         .           
   117,284 ( 0.00%)          if candidate_set.ambiguous {
         .                       debug!("candidate set contains ambig");
     5,352 ( 0.00%)              return Ok(None);
         .                   }
         .           
         .                   let candidates = candidate_set.vec;
         .           
         .                   debug!(?stack, ?candidates, "assembled {} candidates", candidates.len());
         .           
         .                   // At this point, we know that each of the entries in the
         .                   // candidate set is *individually* applicable. Now we have to
         .                   // figure out if they contain mutual incompatibilities. This
         .                   // frequently arises if we have an unconstrained input type --
         .                   // for example, we are looking for `$0: Eq` where `$0` is some
         .                   // unconstrained type variable. In that case, we'll get a
         .                   // candidate which assumes $0 == int, one that assumes `$0 ==
         .                   // usize`, etc. This spells an ambiguity.
         .           
   223,864 ( 0.00%)          let mut candidates = self.filter_impls(candidates, stack.obligation);
         .           
         .                   // If there is more than one candidate, first winnow them down
         .                   // by considering extra conditions (nested obligations and so
         .                   // forth). We don't winnow if there is exactly one
         .                   // candidate. This is a relatively minor distinction but it
         .                   // can lead to better inference and error-reporting. An
         .                   // example would be if there was an impl:
         .                   //
         .                   //     impl<T:Clone> Vec<T> { fn push_clone(...) { ... } }
         .                   //
         .                   // and we were to see some code `foo.push_clone()` where `boo`
         .                   // is a `Vec<Bar>` and `Bar` does not implement `Clone`.  If
         .                   // we were to winnow, we'd wind up with zero candidates.
         .                   // Instead, we select the right impl now but report "`Bar` does
         .                   // not implement `Clone`".
   111,932 ( 0.00%)          if candidates.len() == 1 {
   112,527 ( 0.00%)              return self.filter_reservation_impls(candidates.pop().unwrap(), stack.obligation);
         .                   }
         .           
         .                   // Winnow, but record the exact outcome of evaluation, which
         .                   // is needed for specialization. Propagate overflow if it occurs.
   110,742 ( 0.00%)          let mut candidates = candidates
         .                       .into_iter()
         .                       .map(|c| match self.evaluate_candidate(stack, &c) {
    59,712 ( 0.00%)                  Ok(eval) if eval.may_apply() => {
    49,720 ( 0.00%)                      Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))
         .                           }
         .                           Ok(_) => Ok(None),
         .                           Err(OverflowError::Canonical) => Err(Overflow),
         .                           Err(OverflowError::ErrorReporting) => Err(ErrorReporting),
         .                       })
         .                       .flat_map(Result::transpose)
         .                       .collect::<Result<Vec<_>, _>>()?;
         .           
         .                   debug!(?stack, ?candidates, "winnowed to {} candidates", candidates.len());
         .           
    18,457 ( 0.00%)          let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();
         .           
    55,371 ( 0.00%)          let sized_predicate = self.tcx().lang_items().sized_trait()
    36,914 ( 0.00%)              == Some(stack.obligation.predicate.skip_binder().def_id());
         .           
         .                   // If there are STILL multiple candidates, we can further
         .                   // reduce the list by dropping duplicates -- including
         .                   // resolving specializations.
    55,371 ( 0.00%)          if candidates.len() > 1 {
         .                       let mut i = 0;
     4,134 ( 0.00%)              while i < candidates.len() {
     3,977 ( 0.00%)                  let is_dup = (0..candidates.len()).filter(|&j| i != j).any(|j| {
         .                               self.candidate_should_be_dropped_in_favor_of(
         .                                   sized_predicate,
         .                                   &candidates[i],
         .                                   &candidates[j],
         .                                   needs_infer,
         .                               )
         .                           });
         .                           if is_dup {
         .                               debug!(candidate = ?candidates[i], "Dropping candidate #{}/{}", i, candidates.len());
         .                               candidates.swap_remove(i);
         .                           } else {
         .                               debug!(candidate = ?candidates[i], "Retaining candidate #{}/{}", i, candidates.len());
     2,394 ( 0.00%)                      i += 1;
         .           
         .                               // If there are *STILL* multiple candidates, give up
         .                               // and report ambiguity.
     3,591 ( 0.00%)                      if i > 1 {
         .                                   debug!("multiple matches, ambig");
     1,308 ( 0.00%)                          return Err(Ambiguous(
         .                                       candidates
         .                                           .into_iter()
       520 ( 0.00%)                                  .filter_map(|c| match c.candidate {
         .                                               SelectionCandidate::ImplCandidate(def_id) => Some(def_id),
         .                                               _ => None,
         .                                           })
         .                                           .collect(),
         .                                   ));
         .                               }
         .                           }
         .                       }
-- line 215 ----------------------------------------
-- line 219 ----------------------------------------
         .                   // that we know of, anyway. Note that in the case where there
         .                   // are unbound type variables within the obligation, it might
         .                   // be the case that you could still satisfy the obligation
         .                   // from another crate by instantiating the type variables with
         .                   // a type from another crate that does have an impl. This case
         .                   // is checked for in `evaluate_stack` (and hence users
         .                   // who might care about this case, like coherence, should use
         .                   // that function).
    18,348 ( 0.00%)          if candidates.is_empty() {
         .                       // If there's an error type, 'downgrade' our result from
         .                       // `Err(Unimplemented)` to `Ok(None)`. This helps us avoid
         .                       // emitting additional spurious errors, since we're guaranteed
         .                       // to have emitted at least one.
    27,264 ( 0.00%)              if stack.obligation.references_error() {
         .                           debug!("no results for error type, treating as ambiguous");
    13,632 ( 0.00%)                  return Ok(None);
         .                       }
         .                       return Err(Unimplemented);
         .                   }
         .           
         .                   // Just one candidate left.
    14,148 ( 0.00%)          self.filter_reservation_impls(candidates.pop().unwrap().candidate, stack.obligation)
   595,362 ( 0.01%)      }
         .           
   469,136 ( 0.00%)      #[instrument(skip(self, stack), level = "debug")]
   586,420 ( 0.01%)      pub(super) fn assemble_candidates<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>> {
    58,642 ( 0.00%)          let TraitObligationStack { obligation, .. } = *stack;
 1,114,198 ( 0.01%)          let obligation = &Obligation {
    58,642 ( 0.00%)              param_env: obligation.param_env,
         .                       cause: obligation.cause.clone(),
   175,926 ( 0.00%)              recursion_depth: obligation.recursion_depth,
   703,704 ( 0.01%)              predicate: self.infcx().resolve_vars_if_possible(obligation.predicate),
         .                   };
         .           
   122,492 ( 0.00%)          if obligation.predicate.skip_binder().self_ty().is_ty_var() {
         .                       // Self is a type variable (e.g., `_: AsRef<str>`).
         .                       //
         .                       // This is somewhat problematic, as the current scheme can't really
         .                       // handle it turning to be a projection. This does end up as truly
         .                       // ambiguous in most cases anyway.
         .                       //
         .                       // Take the fast path out - this also improves
         .                       // performance by preventing assemble_candidates_from_impls from
         .                       // matching every impl for this trait.
     7,722 ( 0.00%)              return Ok(SelectionCandidateSet { vec: vec![], ambiguous: true });
         .                   }
         .           
   168,204 ( 0.00%)          let mut candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };
         .           
         .                   // The only way to prove a NotImplemented(T: Foo) predicate is via a negative impl.
         .                   // There are no compiler built-in rules for this.
   112,136 ( 0.00%)          if obligation.polarity() == ty::ImplPolarity::Negative {
         .                       self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
         .                       self.assemble_candidates_from_impls(obligation, &mut candidates);
         .                   } else {
    56,068 ( 0.00%)              self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
         .           
         .                       // Other bounds. Consider both in-scope bounds from fn decl
         .                       // and applicable impls. There is a certain set of precedence rules here.
   336,408 ( 0.00%)              let def_id = obligation.predicate.def_id();
    56,068 ( 0.00%)              let lang_items = self.tcx().lang_items();
         .           
   180,828 ( 0.00%)              if lang_items.copy_trait() == Some(def_id) {
         .                           debug!(obligation_self_ty = ?obligation.predicate.skip_binder().self_ty());
         .           
         .                           // User-defined copy impls are permitted, but only for
         .                           // structs and enums.
     6,312 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
         .           
         .                           // For other types, we'll use the builtin rules.
    25,248 ( 0.00%)                  let copy_conditions = self.copy_clone_conditions(obligation);
    63,120 ( 0.00%)                  self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);
   149,270 ( 0.00%)              } else if lang_items.discriminant_kind_trait() == Some(def_id) {
         .                           // `DiscriminantKind` is automatically implemented for every type.
         .                           candidates.vec.push(DiscriminantKindCandidate);
   149,269 ( 0.00%)              } else if lang_items.pointee_trait() == Some(def_id) {
         .                           // `Pointee` is automatically implemented for every type.
         .                           candidates.vec.push(PointeeCandidate);
   180,199 ( 0.00%)              } else if lang_items.sized_trait() == Some(def_id) {
         .                           // Sized is never implementable by end-users, it is
         .                           // always automatically computed.
    15,470 ( 0.00%)                  let sized_conditions = self.sized_conditions(obligation);
   154,700 ( 0.00%)                  self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);
   103,945 ( 0.00%)              } else if lang_items.unsize_trait() == Some(def_id) {
     1,096 ( 0.00%)                  self.assemble_candidates_for_unsizing(obligation, &mut candidates);
   101,277 ( 0.00%)              } else if lang_items.drop_trait() == Some(def_id)
         .                           && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst
         .                       {
        55 ( 0.00%)                  self.assemble_const_drop_candidates(obligation, &mut candidates);
         .                       } else {
   102,144 ( 0.00%)                  if lang_items.clone_trait() == Some(def_id) {
         .                               // Same builtin conditions as `Copy`, i.e., every type which has builtin support
         .                               // for `Copy` also has builtin support for `Clone`, and tuples/arrays of `Clone`
         .                               // types have builtin support for `Clone`.
     1,944 ( 0.00%)                      let clone_conditions = self.copy_clone_conditions(obligation);
     4,374 ( 0.00%)                      self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates);
         .                           }
         .           
    33,724 ( 0.00%)                  self.assemble_generator_candidates(obligation, &mut candidates);
    33,724 ( 0.00%)                  self.assemble_closure_candidates(obligation, &mut candidates);
    33,724 ( 0.00%)                  self.assemble_fn_pointer_candidates(obligation, &mut candidates);
   101,172 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
         .                           self.assemble_candidates_from_object_ty(obligation, &mut candidates);
         .                       }
         .           
         .                       self.assemble_candidates_from_projected_tys(obligation, &mut candidates);
         .                       self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;
         .                       // Auto implementations have lower priority, so we only
         .                       // consider triggering a default if there is no other impl that can apply.
    56,068 ( 0.00%)              if candidates.vec.is_empty() {
         .                           self.assemble_candidates_from_auto_impls(obligation, &mut candidates);
         .                       }
         .                   }
         .                   debug!("candidate list size: {}", candidates.vec.len());
   728,884 ( 0.01%)          Ok(candidates)
         .               }
         .           
         .               #[tracing::instrument(level = "debug", skip(self, candidates))]
         .               fn assemble_candidates_from_projected_tys(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Before we go into the whole placeholder thing, just
         .                   // quickly check if the self-type is a projection at all.
   493,288 ( 0.00%)          match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {
         .                       ty::Projection(_) | ty::Opaque(..) => {}
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           span_bug!(
         .                               obligation.cause.span,
         .                               "Self=_ should have been handled by assemble_candidates"
         .                           );
         .                       }
         .                       _ => return,
         .                   }
         .           
    11,384 ( 0.00%)          let result = self
         .                       .infcx
     5,692 ( 0.00%)              .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));
         .           
    11,384 ( 0.00%)          candidates.vec.extend(result.into_iter().map(ProjectionCandidate));
         .               }
         .           
         .               /// Given an obligation like `<SomeTrait for T>`, searches the obligations that the caller
         .               /// supplied to find out whether it is listed among them.
         .               ///
         .               /// Never affects the inference environment.
         .               #[tracing::instrument(level = "debug", skip(self, stack, candidates))]
         .               fn assemble_candidates_from_caller_bounds<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) -> Result<(), SelectionError<'tcx>> {
         .                   debug!(?stack.obligation);
         .           
   224,272 ( 0.00%)          let all_bounds = stack
         .                       .obligation
         .                       .param_env
         .                       .caller_bounds()
         .                       .iter()
 2,391,056 ( 0.02%)              .filter_map(|o| o.to_opt_poly_trait_pred());
         .           
         .                   // Micro-optimization: filter out predicates relating to different traits.
         .                   let matching_bounds =
13,967,508 ( 0.14%)              all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());
         .           
         .                   // Keep only those bounds which may apply, and propagate overflow if it occurs.
         .                   for bound in matching_bounds {
         .                       // FIXME(oli-obk): it is suspicious that we are dropping the constness and
         .                       // polarity here.
   397,184 ( 0.00%)              let wc = self.evaluate_where_clause(stack, bound.map_bound(|t| t.trait_ref))?;
   794,368 ( 0.01%)              if wc.may_apply() {
         .                           candidates.vec.push(ParamCandidate(bound));
         .                       }
         .                   }
         .           
         .                   Ok(())
         .               }
         .           
   269,792 ( 0.00%)      fn assemble_generator_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
   404,688 ( 0.00%)          if self.tcx().lang_items().gen_trait() != Some(obligation.predicate.def_id()) {
         .                       return;
         .                   }
         .           
         .                   // Okay to skip binder because the substs on generator types never
         .                   // touch bound regions, they just capture the in-scope
         .                   // type/region parameters.
         .                   let self_ty = obligation.self_ty().skip_binder();
         .                   match self_ty.kind() {
-- line 414 ----------------------------------------
-- line 418 ----------------------------------------
         .                           candidates.vec.push(GeneratorCandidate);
         .                       }
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_generator_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true;
         .                       }
         .                       _ => {}
         .                   }
   236,068 ( 0.00%)      }
         .           
         .               /// Checks for the artificial impl that the compiler will create for an obligation like `X :
         .               /// FnMut<..>` where `X` is a closure type.
         .               ///
         .               /// Note: the type parameters on a closure candidate are modeled as *output* type
         .               /// parameters and hence do not affect whether this trait is a match or not. They will be
         .               /// unified during the confirmation step.
   236,068 ( 0.00%)      fn assemble_closure_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
   370,964 ( 0.00%)          let kind = match self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()) {
         .                       Some(k) => k,
         .                       None => {
         .                           return;
         .                       }
         .                   };
         .           
         .                   // Okay to skip binder because the substs on closure types never
         .                   // touch bound regions, they just capture the in-scope
         .                   // type/region parameters
    14,178 ( 0.00%)          match *obligation.self_ty().skip_binder().kind() {
       170 ( 0.00%)              ty::Closure(_, closure_substs) => {
         .                           debug!(?kind, ?obligation, "assemble_unboxed_candidates");
       680 ( 0.00%)                  match self.infcx.closure_kind(closure_substs) {
         .                               Some(closure_kind) => {
         .                                   debug!(?closure_kind, "assemble_unboxed_candidates");
       850 ( 0.00%)                          if closure_kind.extends(kind) {
         .                                       candidates.vec.push(ClosureCandidate);
         .                                   }
         .                               }
         .                               None => {
         .                                   debug!("assemble_unboxed_candidates: closure_kind not yet known");
         .                                   candidates.vec.push(ClosureCandidate);
         .                               }
         .                           }
         .                       }
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_unboxed_closure_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true;
         .                       }
         .                       _ => {}
         .                   }
   202,344 ( 0.00%)      }
         .           
         .               /// Implements one of the `Fn()` family for a fn pointer.
   303,516 ( 0.00%)      fn assemble_fn_pointer_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // We provide impl of all fn traits for fn pointers.
   337,240 ( 0.00%)          if self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()).is_none() {
         .                       return;
         .                   }
         .           
         .                   // Okay to skip binder because what we are inspecting doesn't involve bound regions.
     4,148 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
    13,326 ( 0.00%)          match *self_ty.kind() {
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_fn_pointer_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true; // Could wind up being a fn() type.
         .                       }
         .                       // Provide an impl, but only for suitable `fn` pointers.
         .                       ty::FnPtr(_) => {
         .                           if let ty::FnSig {
         .                               unsafety: hir::Unsafety::Normal,
-- line 494 ----------------------------------------
-- line 496 ----------------------------------------
         .                               c_variadic: false,
         .                               ..
         .                           } = self_ty.fn_sig(self.tcx()).skip_binder()
         .                           {
         .                               candidates.vec.push(FnPointerCandidate { is_const: false });
         .                           }
         .                       }
         .                       // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).
       596 ( 0.00%)              ty::FnDef(def_id, _) => {
       894 ( 0.00%)                  if let ty::FnSig {
         .                               unsafety: hir::Unsafety::Normal,
         .                               abi: Abi::Rust,
         .                               c_variadic: false,
         .                               ..
       596 ( 0.00%)                  } = self_ty.fn_sig(self.tcx()).skip_binder()
         .                           {
       582 ( 0.00%)                      if self.tcx().codegen_fn_attrs(def_id).target_features.is_empty() {
         .                                   candidates
         .                                       .vec
     1,192 ( 0.00%)                              .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });
         .                               }
         .                           }
         .                       }
         .                       _ => {}
         .                   }
   269,792 ( 0.00%)      }
         .           
         .               /// Searches for impls that might apply to `obligation`.
   400,360 ( 0.00%)      fn assemble_candidates_from_impls(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   debug!(?obligation, "assemble_candidates_from_impls");
         .           
         .                   // Essentially any user-written impl will match with an error type,
         .                   // so creating `ImplCandidates` isn't useful. However, we might
         .                   // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized)
         .                   // This helps us avoid overflow: see issue #72839
         .                   // Since compilation is already guaranteed to fail, this is just
         .                   // to try to show the 'nicest' possible errors to the user.
         .                   // We don't check for errors in the `ParamEnv` - in practice,
         .                   // it seems to cause us to be overly aggressive in deciding
         .                   // to give up searching for candidates, leading to spurious errors.
    80,072 ( 0.00%)          if obligation.predicate.references_error() {
         .                       return;
         .                   }
         .           
   120,108 ( 0.00%)          self.tcx().for_each_relevant_impl(
   320,288 ( 0.00%)              obligation.predicate.def_id(),
         .                       obligation.predicate.skip_binder().trait_ref.self_ty(),
   200,180 ( 0.00%)              |impl_def_id| {
   543,448 ( 0.01%)                  self.infcx.probe(|_| {
   465,302 ( 0.00%)                      if let Ok(_substs) = self.match_impl(impl_def_id, obligation) {
    28,858 ( 0.00%)                          candidates.vec.push(ImplCandidate(impl_def_id));
         .                               }
         .                           });
         .                       },
         .                   );
   320,288 ( 0.00%)      }
         .           
         .               fn assemble_candidates_from_auto_impls(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
    15,902 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
         .                   debug!(?self_ty, "assemble_candidates_from_auto_impls");
         .           
    95,412 ( 0.00%)          let def_id = obligation.predicate.def_id();
         .           
    63,608 ( 0.00%)          if self.tcx().trait_is_auto(def_id) {
     6,516 ( 0.00%)              match self_ty.kind() {
         .                           ty::Dynamic(..) => {
         .                               // For object types, we don't know what the closed
         .                               // over types are. This means we conservatively
         .                               // say nothing; a candidate may be added by
         .                               // `assemble_candidates_from_object_ty`.
         .                           }
         .                           ty::Foreign(..) => {
         .                               // Since the contents of foreign types is unknown,
-- line 577 ----------------------------------------
-- line 625 ----------------------------------------
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   debug!(
         .                       self_ty = ?obligation.self_ty().skip_binder(),
         .                       "assemble_candidates_from_object_ty",
         .                   );
         .           
   269,792 ( 0.00%)          self.infcx.probe(|_snapshot| {
         .                       // The code below doesn't care about regions, and the
         .                       // self-ty here doesn't escape this probe, so just erase
         .                       // any LBR.
    33,724 ( 0.00%)              let self_ty = self.tcx().erase_late_bound_regions(obligation.self_ty());
   168,650 ( 0.00%)              let poly_trait_ref = match self_ty.kind() {
         .                           ty::Dynamic(ref data, ..) => {
         1 ( 0.00%)                      if data.auto_traits().any(|did| did == obligation.predicate.def_id()) {
         .                                   debug!(
         .                                       "assemble_candidates_from_object_ty: matched builtin bound, \
         .                                        pushing candidate"
         .                                   );
         .                                   candidates.vec.push(BuiltinObjectCandidate);
         .                                   return;
         .                               }
         .           
        12 ( 0.00%)                      if let Some(principal) = data.principal() {
         5 ( 0.00%)                          if !self.infcx.tcx.features().object_safe_for_dispatch {
         .                                       principal.with_self_ty(self.tcx(), self_ty)
         .                                   } else if self.tcx().is_object_safe(principal.def_id()) {
         .                                       principal.with_self_ty(self.tcx(), self_ty)
         .                                   } else {
         .                                       return;
         .                                   }
         .                               } else {
         .                                   // Only auto trait bounds exist.
-- line 658 ----------------------------------------
-- line 664 ----------------------------------------
         .                               candidates.ambiguous = true; // could wind up being an object type
         .                               return;
         .                           }
         .                           _ => return,
         .                       };
         .           
         .                       debug!(?poly_trait_ref, "assemble_candidates_from_object_ty");
         .           
        13 ( 0.00%)              let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
         .                       let placeholder_trait_predicate =
        16 ( 0.00%)                  self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
         .           
         .                       // Count only those upcast versions that match the trait-ref
         .                       // we are looking for. Specifically, do not only check for the
         .                       // correct trait, but also the correct type parameters.
         .                       // For example, we may be trying to upcast `Foo` to `Bar<i32>`,
         .                       // but `Foo` is declared as `trait Foo: Bar<u32>`.
         7 ( 0.00%)              let candidate_supertraits = util::supertraits(self.tcx(), poly_trait_ref)
         .                           .enumerate()
         .                           .filter(|&(_, upcast_trait_ref)| {
         5 ( 0.00%)                      self.infcx.probe(|_| {
         3 ( 0.00%)                          self.match_normalize_trait_ref(
         .                                       obligation,
         4 ( 0.00%)                              upcast_trait_ref,
         4 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
         .                                   )
         .                                   .is_ok()
         .                               })
         .                           })
         .                           .map(|(idx, _)| ObjectCandidate(idx));
         .           
         .                       candidates.vec.extend(candidate_supertraits);
         .                   })
-- line 696 ----------------------------------------
-- line 739 ----------------------------------------
         .                   };
         .           
         .                   let def_id = data.principal_def_id()?;
         .           
         .                   return Some((normalized_ty, def_id));
         .               }
         .           
         .               /// Searches for unsizing that might apply to `obligation`.
     5,480 ( 0.00%)      fn assemble_candidates_for_unsizing(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // We currently never consider higher-ranked obligations e.g.
         .                   // `for<'a> &'a T: Unsize<Trait+'a>` to be implemented. This is not
         .                   // because they are a priori invalid, and we could potentially add support
         .                   // for them later, it's just that there isn't really a strong need for it.
-- line 755 ----------------------------------------
-- line 758 ----------------------------------------
         .                   //
         .                   // That said, one might try to write a fn with a where clause like
         .                   //     for<'a> Foo<'a, T>: Unsize<Foo<'a, Trait>>
         .                   // where the `'a` is kind of orthogonal to the relevant part of the `Unsize`.
         .                   // Still, you'd be more likely to write that where clause as
         .                   //     T: Trait
         .                   // so it seems ok if we (conservatively) fail to accept that `Unsize`
         .                   // obligation above. Should be possible to extend this in the future.
     2,740 ( 0.00%)          let source = match obligation.self_ty().no_bound_vars() {
       548 ( 0.00%)              Some(t) => t,
         .                       None => {
         .                           // Don't add any candidates if there are bound regions.
         .                           return;
         .                       }
         .                   };
     1,644 ( 0.00%)          let target = obligation.predicate.skip_binder().trait_ref.substs.type_at(1);
         .           
         .                   debug!(?source, ?target, "assemble_candidates_for_unsizing");
         .           
     7,343 ( 0.00%)          match (source.kind(), target.kind()) {
         .                       // Trait+Kx+'a -> Trait+Ky+'b (upcasts).
         .                       (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {
         .                           // Upcast coercions permit several things:
         .                           //
         .                           // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`
         .                           // 2. Tightening the region bound, e.g., `Foo + 'a` to `Foo + 'b` if `'a: 'b`
         .                           // 3. Tightening trait to its super traits, eg. `Foo` to `Bar` if `Foo: Bar`
         .                           //
-- line 785 ----------------------------------------
-- line 843 ----------------------------------------
         .                           candidates.vec.push(BuiltinUnsizeCandidate);
         .                       }
         .           
         .                       // Ambiguous handling is below `T` -> `Trait`, because inference
         .                       // variables can still implement `Unsize<Trait>` and nested
         .                       // obligations will have the final say (likely deferred).
         .                       (&ty::Infer(ty::TyVar(_)), _) | (_, &ty::Infer(ty::TyVar(_))) => {
         .                           debug!("assemble_candidates_for_unsizing: ambiguous");
       204 ( 0.00%)                  candidates.ambiguous = true;
         .                       }
         .           
         .                       // `[T; n]` -> `[T]`
         .                       (&ty::Array(..), &ty::Slice(_)) => {
         .                           candidates.vec.push(BuiltinUnsizeCandidate);
         .                       }
         .           
         .                       // `Struct<T>` -> `Struct<U>`
       354 ( 0.00%)              (&ty::Adt(def_id_a, _), &ty::Adt(def_id_b, _)) if def_id_a.is_struct() => {
       580 ( 0.00%)                  if def_id_a == def_id_b {
         .                               candidates.vec.push(BuiltinUnsizeCandidate);
         .                           }
         .                       }
         .           
         .                       // `(.., T)` -> `(.., U)`
         4 ( 0.00%)              (&ty::Tuple(tys_a), &ty::Tuple(tys_b)) => {
         6 ( 0.00%)                  if tys_a.len() == tys_b.len() {
         .                               candidates.vec.push(BuiltinUnsizeCandidate);
         .                           }
         .                       }
         .           
         .                       _ => {}
         .                   };
     4,384 ( 0.00%)      }
         .           
   784,952 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self, obligation, candidates))]
         .               fn assemble_candidates_for_trait_alias(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
   112,136 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
         .                   debug!(?self_ty);
         .           
   448,544 ( 0.00%)          let def_id = obligation.predicate.def_id();
         .           
   224,272 ( 0.00%)          if self.tcx().is_trait_alias(def_id) {
         .                       candidates.vec.push(TraitAliasCandidate(def_id));
         .                   }
         .               }
         .           
         .               /// Assembles the trait which are built-in to the language itself:
         .               /// `Copy`, `Clone` and `Sized`.
   178,144 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, candidates))]
         .               fn assemble_builtin_bound_candidates(
         .                   &mut self,
         .                   conditions: BuiltinImplConditions<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
    95,384 ( 0.00%)          match conditions {
         .                       BuiltinImplConditions::Where(nested) => {
         .                           candidates
         .                               .vec
         .                               .push(BuiltinCandidate { has_nested: !nested.skip_binder().is_empty() });
         .                       }
         .                       BuiltinImplConditions::None => {}
         .                       BuiltinImplConditions::Ambiguous => {
         .                           candidates.ambiguous = true;
         .                       }
         .                   }
         .               }
         .           
        88 ( 0.00%)      fn assemble_const_drop_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // If the predicate is `~const Drop` in a non-const environment, we don't actually need
         .                   // to check anything. We'll short-circuit checking any obligations in confirmation, too.
         .                   if obligation.param_env.constness() == hir::Constness::NotConst {
         .                       candidates.vec.push(ConstDropCandidate(None));
-- line 923 ----------------------------------------
-- line 979 ----------------------------------------
         .                               candidates.vec.push(ConstDropCandidate(None));
         .                           }
         .                       }
         .           
         .                       ty::Infer(_) => {
         .                           candidates.ambiguous = true;
         .                       }
         .                   }
        88 ( 0.00%)      }
         .           }

 5,662,772 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  878,145 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
3,775,963 ( 0.04%)          match undo {
  614,762 ( 0.01%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  529,046 ( 0.01%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
  612,482 ( 0.01%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
1,756,290 ( 0.02%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
1,983,216 ( 0.02%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
1,393,526 ( 0.01%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
  240,369 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    1,107 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    8,120 ( 0.00%)          self.eq_relations().union(a, b);
    6,960 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    7,360 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  416,285 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
  582,799 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  416,285 ( 0.00%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
1,811,496 ( 0.02%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
2,717,244 ( 0.03%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
1,509,580 ( 0.02%)          let sub_key = self.sub_relations().new_key(());
  301,916 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
2,717,244 ( 0.03%)          let index = self.values().push(TypeVariableData { origin });
1,207,664 ( 0.01%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
2,113,412 ( 0.02%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
    3,326 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  296,145 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      642 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  255,897 ( 0.00%)          self.sub_relations().find(vid)
    1,284 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
4,533,525 ( 0.05%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
4,533,525 ( 0.05%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
2,068,086 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
1,961,992 ( 0.02%)          match *t.kind() {
  564,714 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
4,019,590 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
  393,011 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
   16,630 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   19,956 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
   19,956 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
   94,720 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
1,523,641 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  338,748 ( 0.00%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
    1,144 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    1,144 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
    4,576 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

  169,263 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs
--------------------------------------------------------------------------------
Ir                 

-- line 24 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {
        .               fn tag(&self) -> &'static str {
        .                   "Equate"
        .               }
        .           
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  138,338 ( 0.00%)          self.fields.tcx()
   96,907 ( 0.00%)      }
        .           
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
       52 ( 0.00%)          self.fields.param_env
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
  577,383 ( 0.01%)          self.a_is_expected
        .               }
        .           
  117,175 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   _item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
        .                   // N.B., once we are equating types, we don't care about
        .                   // variance, so don't try to lookup the variance here. This
        .                   // also avoids some cycles (e.g., #41849) since looking up
        .                   // variance requires computing types which can require
        .                   // performing trait matching (which then performs equality
        .                   // unification).
        .           
   23,435 ( 0.00%)          relate::relate_substs(self, None, a_subst, b_subst)
  140,610 ( 0.00%)      }
        .           
        .               fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   _: ty::Variance,
        .                   _info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
        .               ) -> RelateResult<'tcx, T> {
        .                   self.relate(a, b)
        .               }
        .           
5,755,392 ( 0.06%)      fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
        .                   debug!("{}.tys({:?}, {:?})", self.tag(), a, b);
  639,488 ( 0.01%)          if a == b {
        .                       return Ok(a);
        .                   }
        .           
  824,720 ( 0.01%)          let infcx = self.fields.infcx;
  824,720 ( 0.01%)          let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);
  824,720 ( 0.01%)          let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);
        .           
        .                   debug!("{}.tys: replacements ({:?}, {:?})", self.tag(), a, b);
        .           
2,214,621 ( 0.02%)          match (a.kind(), b.kind()) {
        .                       (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {
        .                           infcx.inner.borrow_mut().type_variables().equate(a_id, b_id);
        .                       }
        .           
    2,140 ( 0.00%)              (&ty::Infer(TyVar(a_id)), _) => {
    8,560 ( 0.00%)                  self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;
        .                       }
        .           
   64,224 ( 0.00%)              (_, &ty::Infer(TyVar(b_id))) => {
  321,120 ( 0.00%)                  self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;
        .                       }
        .           
        .                       _ => {
2,413,852 ( 0.02%)                  self.fields.infcx.super_combine_tys(self, a, b)?;
        .                       }
        .                   }
        .           
        .                   Ok(a)
5,755,392 ( 0.06%)      }
        .           
  950,310 ( 0.01%)      fn regions(
        .                   &mut self,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
        .                   debug!("{}.regions({:?}, {:?})", self.tag(), a, b);
  316,770 ( 0.00%)          let origin = Subtype(Box::new(self.fields.trace.clone()));
  633,540 ( 0.01%)          self.fields
        .                       .infcx
        .                       .inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
  633,540 ( 0.01%)              .make_eqregion(origin, a, b);
  211,180 ( 0.00%)          Ok(a)
  950,310 ( 0.01%)      }
        .           
        .               fn consts(
        .                   &mut self,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      130 ( 0.00%)          self.fields.infcx.super_combine_consts(self, a, b)
        .               }
        .           
        .               fn binders<T>(
        .                   &mut self,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
        .               where
-- line 131 ----------------------------------------

1,424,310 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir                 

-- line 47 ----------------------------------------
        .               const_freshen_count: u32,
        .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
        .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
        .               keep_static: bool,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
        .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
2,471,750 ( 0.02%)          TypeFreshener {
        .                       infcx,
        .                       ty_freshen_count: 0,
        .                       const_freshen_count: 0,
        .                       ty_freshen_map: Default::default(),
        .                       const_freshen_map: Default::default(),
        .                       keep_static,
        .                   }
        .               }
        .           
  425,472 ( 0.00%)      fn freshen_ty<F>(
        .                   &mut self,
        .                   opt_ty: Option<Ty<'tcx>>,
        .                   key: ty::InferTy,
        .                   freshener: F,
        .               ) -> Ty<'tcx>
        .               where
        .                   F: FnOnce(u32) -> ty::InferTy,
        .               {
  106,368 ( 0.00%)          if let Some(ty) = opt_ty {
        .                       return ty.fold_with(self);
        .                   }
        .           
   73,532 ( 0.00%)          match self.ty_freshen_map.entry(key) {
    5,512 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
        .                       Entry::Vacant(entry) => {
   31,254 ( 0.00%)                  let index = self.ty_freshen_count;
  125,016 ( 0.00%)                  self.ty_freshen_count += 1;
   62,508 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
        .                           entry.insert(t);
        .                           t
        .                       }
        .                   }
  330,894 ( 0.00%)      }
        .           
        .               fn freshen_const<F>(
        .                   &mut self,
        .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
        .                   key: ty::InferConst<'tcx>,
        .                   freshener: F,
        .                   ty: Ty<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx>
        .               where
        .                   F: FnOnce(u32) -> ty::InferConst<'tcx>,
        .               {
        4 ( 0.00%)          if let Some(ct) = opt_ct {
        .                       return ct.fold_with(self);
        .                   }
        .           
        4 ( 0.00%)          match self.const_freshen_map.entry(key) {
        .                       Entry::Occupied(entry) => *entry.get(),
        .                       Entry::Vacant(entry) => {
        2 ( 0.00%)                  let index = self.const_freshen_count;
        8 ( 0.00%)                  self.const_freshen_count += 1;
        4 ( 0.00%)                  let ct = self.infcx.tcx.mk_const_infer(freshener(index), ty);
        .                           entry.insert(ct);
        .                           ct
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  502,356 ( 0.01%)          self.infcx.tcx
  114,164 ( 0.00%)      }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  404,956 ( 0.00%)          match *r {
        .                       ty::ReLateBound(..) => {
        .                           // leave bound regions alone
        .                           r
        .                       }
        .           
        .                       ty::ReEarlyBound(..)
        .                       | ty::ReFree(_)
        .                       | ty::ReVar(_)
        .                       | ty::RePlaceholder(..)
        .                       | ty::ReEmpty(_)
        .                       | ty::ReErased => {
        .                           // replace all free regions with 'erased
        .                           self.tcx().lifetimes.re_erased
        .                       }
        .                       ty::ReStatic => {
      135 ( 0.00%)                  if self.keep_static {
        .                               r
        .                           } else {
        .                               self.tcx().lifetimes.re_erased
        .                           }
        .                       }
        .                   }
   23,176 ( 0.00%)      }
        .           
3,150,606 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
1,575,303 ( 0.02%)          if !t.needs_infer() && !t.has_erasable_regions() {
        .                       return t;
        .                   }
        .           
        .                   let tcx = self.infcx.tcx;
        .           
  807,348 ( 0.01%)          match *t.kind() {
   52,602 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
  420,816 ( 0.00%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
  473,418 ( 0.00%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
        .                       }
        .           
    2,328 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self.freshen_ty(
    4,656 ( 0.00%)                  self.infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .probe_value(v)
        .                               .map(|v| v.to_type(tcx)),
        .                           ty::IntVar(v),
        .                           ty::FreshIntTy,
        .                       ),
-- line 170 ----------------------------------------
-- line 210 ----------------------------------------
        .                       | ty::Dynamic(..)
        .                       | ty::Never
        .                       | ty::Tuple(..)
        .                       | ty::Projection(..)
        .                       | ty::Foreign(..)
        .                       | ty::Param(..)
        .                       | ty::Closure(..)
        .                       | ty::GeneratorWitness(..)
  734,688 ( 0.01%)              | ty::Opaque(..) => t.super_fold_with(self),
        .           
        .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
        .                   }
2,664,641 ( 0.03%)      }
        .           
      252 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      256 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
       16 ( 0.00%)                  let opt_ct = self
        .                               .infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .probe_value(v)
        .                               .val
        .                               .known();
        .                           return self.freshen_const(
-- line 235 ----------------------------------------
-- line 256 ----------------------------------------
        .                       }
        .           
        .                       ty::ConstKind::Param(_)
        .                       | ty::ConstKind::Value(_)
        .                       | ty::ConstKind::Unevaluated(..)
        .                       | ty::ConstKind::Error(_) => {}
        .                   }
        .           
      320 ( 0.00%)          ct.super_fold_with(self)
       14 ( 0.00%)      }
        .           }

  650,344 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
12,313,962 ( 0.12%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 9,235,470 ( 0.09%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
   551,540 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   827,310 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 3,216,365 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 1,273,212 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 2,546,424 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
         .               } else if #[cfg(target_os = "wasi")] {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
         .                   }
         .               } else {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         1 ( 0.00%)              let mut out = ptr::null_mut();
         .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
         .                       // Since these are all powers of 2, we can just use max.
         .                       let align = layout.align().max(crate::mem::size_of::<usize>());
         2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
         2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
         .                   }
         .               }
         .           }

         1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 42 ----------------------------------------
        .           /// `stack_size` bytes.
        .           ///
        .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
        .           /// run on the current stack if there's space available.
        .           #[inline(always)]
        .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
        .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
        .               // the stack and then cache the new stack size (which we do know now because we allocated it.
2,011,001 ( 0.02%)      let enough_space = match remaining_stack() {
        .                   Some(remaining) => remaining >= red_zone,
        .                   None => false,
        .               };
2,816,154 ( 0.03%)      if enough_space {
  198,131 ( 0.00%)          callback()
        .               } else {
        .                   grow(stack_size, callback)
        .               }
        .           }
        .           
        .           /// Always creates a new stack for the passed closure to run on.
        .           /// The closure will still be on the same thread as the caller of `grow`.
        .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
        .               _grow(stack_size, dyn_callback);
        .               ret.unwrap()
        .           }
        .           
        .           /// Queries the amount of remaining stack as interpreted by this library.
        .           ///
        .           /// This function will return the amount of stack space left which will be used
        .           /// to determine whether a stack switch should be made or not.
1,877,436 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
        .               let current_ptr = current_stack_ptr();
1,877,436 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
3,754,872 ( 0.04%)  }
        .           
        .           psm_stack_information! (
        .               yes {
        .                   fn current_stack_ptr() -> usize {
1,877,436 ( 0.02%)              psm::stack_pointer() as usize
        .                   }
        .               }
        .               no {
        .                   #[inline(always)]
        .                   fn current_stack_ptr() -> usize {
        .                       unsafe {
        .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
        .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
        .                           x.as_ptr() as usize
        .                       }
        .                   }
        .               }
        .           );
        .           
        .           thread_local! {
        .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
        1 ( 0.00%)          guess_os_stack_limit()
        .               })
        .           }
        .           
        .           #[inline(always)]
        .           fn get_stack_limit() -> Option<usize> {
        .               STACK_LIMIT.with(|s| s.get())
        .           }
        .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
        .                       VirtualQuery(
        .                           psm::stack_pointer() as *const _,
        .                           mi.as_mut_ptr(),
        .                           std::mem::size_of::<QueryT>() as SIZE_T,
        .                       );
        .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
        .                   }
        .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
        2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
        .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
        4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
        7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
        .                                                           attr.as_mut_ptr()), 0);
        1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
        4 ( 0.00%)              let mut stacksize = 0;
        4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
        .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
        .                       ), 0);
        4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
        1 ( 0.00%)              Some(stackaddr as usize)
        3 ( 0.00%)          }
        .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
        .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
        .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
        .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
        .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
        .                       let mut stackaddr = std::ptr::null_mut();
        .                       let mut stacksize = 0;
        .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

1,302,855 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
11,859,656 ( 0.12%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
 7,412,285 ( 0.07%)              .intern(kind, |kind| {
   119,588 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
   239,176 ( 0.00%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
13,342,113 ( 0.13%)      }
         .           
         .               #[inline(never)]
 6,766,320 ( 0.07%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 5,920,530 ( 0.06%)              .intern(kind, |kind| {
   328,836 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
 7,612,110 ( 0.08%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
   540,961 ( 0.01%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
   389,705 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
    78,968 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
    78,968 ( 0.00%)          self.data.get(&id.local_id)
   312,284 ( 0.00%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
     9,282 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        28 ( 0.00%)          self.get(key).expect("LocalTableInContext: key not found")
     6,188 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    36,600 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   433,100 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    36,600 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   105,786 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
    70,524 ( 0.00%)          match *qpath {
   194,682 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
    16,890 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   176,310 ( 0.00%)      }
         .           
       429 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
     3,775 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
       429 ( 0.00%)      }
         .           
     9,213 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    18,641 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    18,426 ( 0.00%)      }
         .           
    26,452 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    26,452 ( 0.00%)      }
         .           
    35,423 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    35,423 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    35,423 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    12,048 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     2,697 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    20,328 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    10,164 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    13,790 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
     6,895 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     1,560 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
       780 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
    72,624 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    36,312 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   130,678 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
    65,339 ( 0.00%)      }
         .           
   533,826 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
    88,971 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
   444,855 ( 0.00%)      }
         .           
   115,614 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   115,614 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
   231,228 ( 0.00%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    16,858 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
     8,429 ( 0.00%)      }
         .           
    41,890 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    41,890 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
    83,780 ( 0.00%)      }
         .           
    28,420 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    28,420 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
    56,840 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    14,884 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   111,794 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   100,280 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    49,878 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    24,939 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    75,974 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    37,987 ( 0.00%)      }
         .           
    46,859 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
    93,718 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
    93,718 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
    12,230 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     2,446 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     3,184 ( 0.00%)      }
         .           
     1,390 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       278 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
       840 ( 0.00%)      }
         .           
     3,346 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
     6,692 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
     7,904 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
     6,692 ( 0.00%)      }
         .           
    32,643 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
    43,524 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    27,207 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
     8,163 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    14,584 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
     7,292 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    28,632 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    14,316 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
     8,990 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     4,495 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
     7,368 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
     9,210 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     3,026 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     1,513 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        20 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        10 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
     9,214 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     4,607 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     6,188 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     3,094 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     3,082 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     1,541 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
       112 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        56 ( 0.00%)      }
         .           
       216 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
        72 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
       144 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     1,513 ( 0.00%)          &self.coercion_casts
     1,513 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
        56 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
       396 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
     2,854 ( 0.00%)      pub fn is_identity(&self) -> bool {
     5,708 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
     2,854 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
     8,214 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     4,079 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
       612 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
     5,708 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
     2,376 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    29,636 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    62,700 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    25,080 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
    50,160 ( 0.00%)      }
         .           
     4,680 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     1,560 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     6,240 ( 0.00%)      }
         .           
    31,200 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     6,240 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    43,680 ( 0.00%)      }
         .           
     6,240 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     1,560 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     7,800 ( 0.00%)      }
         .           
     3,195 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
     5,680 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     1,420 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
         .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
         .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
         .                   let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
         .               }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    21,440 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    10,720 ( 0.00%)          let attrs = self.get_attrs(def_id);
    45,560 ( 0.00%)          let get = |name| {
    10,720 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       624 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
       312 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
       156 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
    53,600 ( 0.00%)          };
    16,080 ( 0.00%)          (
    16,080 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
     8,040 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    21,440 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
    35,147 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     5,021 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    37,035 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    40,168 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 4,167,856 ( 0.04%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 5,358,672 ( 0.05%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       791 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       904 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
    39,970 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    45,680 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    87,493 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
    99,992 ( 0.00%)      }
         .           
    44,079 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    56,673 ( 0.00%)      }
         .           
   781,389 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
   893,016 ( 0.01%)      }
         .           
     7,271 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    98,265 ( 0.00%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
    65,347 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
     3,866 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
        42 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
        63 ( 0.00%)          if let Some(id) = id.as_local() {
        24 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
         .                   } else {
        65 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
         .                   }
        63 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    16,901 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
     2,404 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
    74,136 ( 0.00%)          &*self.untracked_resolutions.cstore
    37,068 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
       785 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     3,150 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     3,026 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     4,539 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
     1,513 ( 0.00%)          self.sess.opts.borrowck_mode
     6,052 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
        14 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
        10 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
         .                   self.sess.crate_types().iter().any(|crate_type| {
         .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1540 ----------------------------------------
         .                       // FIXME(#42706) -- in some cases, we could do better here.
         .                       return true;
         .                   }
         .                   false
         .               }
         .           
         .               /// Determines whether identifiers in the assembly have strict naming rules.
         .               /// Currently, only NVPTX* targets need it.
     3,302 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
     3,302 ( 0.00%)          self.sess.target.arch.contains("nvptx")
     6,604 ( 0.00%)      }
         .           
         .               /// Returns `&'static core::panic::Location<'static>`.
       462 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
         .                   self.mk_imm_ref(
        77 ( 0.00%)              self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
       154 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
       462 ( 0.00%)      }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
     8,349 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     6,072 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    13,662 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
     6,831 ( 0.00%)      }
         .           
    11,151 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
    12,744 ( 0.00%)      }
         .           
 1,897,924 ( 0.02%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 2,169,056 ( 0.02%)      }
         .           
    47,502 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
    54,288 ( 0.00%)      }
         .           
       882 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
     1,008 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
         .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
         .           }
         .           
         .           macro_rules! nop_lift {
         .               ($set:ident; $ty:ty => $lifted:ty) => {
         .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
         .                       type Lifted = $lifted;
         .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
     1,144 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
         .                               Some(unsafe { mem::transmute(self) })
         .                           } else {
         .                               None
         .                           }
         .                       }
         .                   }
         .               };
         .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   309,054 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
 1,205,319 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
         .           
         .               /// Allows access to the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with_context<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
       718 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
         .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
         .               /// as the `TyCtxt` passed in.
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   584,345 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   576,502 ( 0.01%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 1,441,029 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   345,196 ( 0.00%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   802,550 ( 0.01%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
    57,340 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
 2,090,449 ( 0.02%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
    96,873 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   496,865 ( 0.01%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
    35,174 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 4,026,329 ( 0.04%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 2,029,192 ( 0.02%)                  self.interners.$name.intern(v, |v| {
     7,900 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 4,522,896 ( 0.05%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
21,451,205 ( 0.22%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
19,254,006 ( 0.19%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
   122,796 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
    92,097 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
    20,466 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
    92,097 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
    39,344 ( 0.00%)              let trait_did = stack.pop()?;
    19,672 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
    47,034 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
    31,356 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
         .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
         .               }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   598,664 ( 0.01%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
10,589,735 ( 0.11%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 9,189,059 ( 0.09%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
14,262,480 ( 0.14%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
 1,084,356 ( 0.01%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
14,262,480 ( 0.14%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
       392 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
       392 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     1,789 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
     1,789 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
         .                   match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
       426 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
       404 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
       416 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
       344 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     4,328 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    99,362 ( 0.00%)          iter.intern_with(|ts| {
    42,290 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    74,406 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    88,956 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
       927 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
         .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     1,758 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
       948 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2432 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {
         .                   self.mk_ty(Infer(it))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {
        14 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(ic), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
   196,336 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   131,858 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
    25,146 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
    47,714 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
   196,336 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
     5,036 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     5,036 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    10,072 ( 0.00%)      }
         .           
        44 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
       132 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
        88 ( 0.00%)      }
         .           
       237 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
       237 ( 0.00%)          self.mk_place_elem(
         .                       place,
       474 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
       474 ( 0.00%)      }
         .           
         .               pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
         .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
         .           
         .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Index(index))
         .               }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
    49,428 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    54,920 ( 0.00%)      }
         .           
     4,655 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
       665 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
        70 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
     2,660 ( 0.00%)          self._intern_poly_existential_predicates(eps)
     5,320 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
    53,068 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
    47,395 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    12,264 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   104,773 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     3,294 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 3,727,997 ( 0.04%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
    32,482 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    39,147 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    19,710 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
    85,986 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     1,756 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
   114,615 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   161,178 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    10,703 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     2,388 ( 0.00%)              c_variadic,
     3,192 ( 0.00%)              unsafety,
     3,168 ( 0.00%)              abi,
       410 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
     2,637 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        86 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    24,164 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
        72 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 1,259,510 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
        96 ( 0.00%)      }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
    92,876 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
    64,658 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   129,316 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   504,581 ( 0.01%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
   315,868 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   315,868 ( 0.00%)          let hir = self.hir();
         .                   loop {
   550,848 ( 0.01%)              if id == bound {
         .                           return bound;
         .                       }
         .           
   693,676 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
   415,476 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
   451,240 ( 0.00%)      }
         .           
    19,432 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
   101,362 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
     7,484 ( 0.00%)              let next = self.hir().get_parent_node(id);
    22,452 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    19,432 ( 0.00%)      }
         .           
       924 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
     3,446 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     1,047 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       528 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    18,123 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     5,178 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
     5,178 ( 0.00%)          Some(&*candidates)
    20,712 ( 0.00%)      }
         .           
    42,182 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    54,234 ( 0.00%)      }
         .           
     7,911 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
       433 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     7,032 ( 0.00%)      }
         .           
    62,216 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
    79,992 ( 0.00%)      }
         .           
   188,397 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
   188,397 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
     3,230 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       323 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        54 ( 0.00%)              match self.lookup_const_stability(def_id) {
       108 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
        10 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
     2,907 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
   155,816 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
11,759,515 ( 0.12%)          E::intern_with(self, f)
   117,585 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
 1,208,973 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 1,000,744 ( 0.01%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
         6 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
        18 ( 0.00%)                  assert!(iter.next().is_none());
   113,275 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
       865 ( 0.00%)                  assert!(iter.next().is_none());
   105,426 ( 0.00%)                  f(&[t0, t1])
         .                       }
     6,172 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
   913,772 ( 0.01%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
   105,659 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
       164 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    84,678 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
 4,018,794 ( 0.04%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
 2,756,806 ( 0.03%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
     1,932 ( 0.00%)                  let t0 = iter.next().unwrap()?;
         .                           assert!(iter.next().is_none());
   167,806 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
     1,194 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     1,194 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     1,791 ( 0.00%)                  assert!(iter.next().is_none());
   172,440 ( 0.00%)                  f(&[t0, t1])
         .                       }
    43,032 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
 4,531,493 ( 0.05%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   584,345 ( 0.01%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
         .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    50,360 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

 5,689,601 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           
        .           impl<'a, 'tcx> InferCtxt<'a, 'tcx> {
        .               #[inline]
        .               pub fn at(
        .                   &'a self,
        .                   cause: &'a ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> At<'a, 'tcx> {
  154,893 ( 0.00%)          At { infcx: self, cause, param_env }
        .               }
        .           }
        .           
        .           pub trait ToTrace<'tcx>: Relate<'tcx> + Copy {
        .               fn to_trace(
        .                   tcx: TyCtxt<'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Self,
        .                   b: Self,
        .               ) -> TypeTrace<'tcx>;
        .           }
        .           
        .           impl<'a, 'tcx> At<'a, 'tcx> {
        .               /// Hacky routine for equating two impl headers in coherence.
    6,856 ( 0.00%)      pub fn eq_impl_headers(
        .                   self,
        .                   expected: &ty::ImplHeader<'tcx>,
        .                   actual: &ty::ImplHeader<'tcx>,
        .               ) -> InferResult<'tcx, ()> {
        .                   debug!("eq_impl_header({:?} = {:?})", expected, actual);
    8,570 ( 0.00%)          match (expected.trait_ref, actual.trait_ref) {
        .                       (Some(a_ref), Some(b_ref)) => self.eq(a_ref, b_ref),
        .                       (None, None) => self.eq(expected.self_ty, actual.self_ty),
        .                       _ => bug!("mk_eq_impl_headers given mismatched impl kinds"),
        .                   }
    7,713 ( 0.00%)      }
        .           
        .               /// Makes `a <: b`, where `a` may or may not be expected.
        .               pub fn sub_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>
        .               where
        .                   T: ToTrace<'tcx>,
        .               {
2,411,835 ( 0.02%)          self.trace_exp(a_is_expected, a, b).sub(a, b)
        .               }
        .           
        .               /// Makes `actual <: expected`. For example, if type-checking a
        .               /// call like `foo(x)`, where `foo: fn(i32)`, you might have
        .               /// `sup(i32, x)`, since the "expected" type is the type that
        .               /// appears in the signature.
        .               pub fn sup<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>
        .               where
-- line 94 ----------------------------------------
-- line 109 ----------------------------------------
        .               pub fn eq_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>
        .               where
        .                   T: ToTrace<'tcx>,
        .               {
        .                   self.trace_exp(a_is_expected, a, b).eq(a, b)
        .               }
        .           
        .               /// Makes `expected <: actual`.
      260 ( 0.00%)      pub fn eq<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>
        .               where
        .                   T: ToTrace<'tcx>,
        .               {
       78 ( 0.00%)          self.trace(expected, actual).eq(expected, actual)
      234 ( 0.00%)      }
        .           
    4,230 ( 0.00%)      pub fn relate<T>(self, expected: T, variance: ty::Variance, actual: T) -> InferResult<'tcx, ()>
        .               where
        .                   T: ToTrace<'tcx>,
        .               {
    2,115 ( 0.00%)          match variance {
        .                       ty::Variance::Covariant => self.sub(expected, actual),
    1,269 ( 0.00%)              ty::Variance::Invariant => self.eq(expected, actual),
        .                       ty::Variance::Contravariant => self.sup(expected, actual),
        .           
        .                       // We could make this make sense but it's not readily
        .                       // exposed and I don't feel like dealing with it. Note
        .                       // that bivariance in general does a bit more than just
        .                       // *nothing*, it checks that the types are the same
        .                       // "modulo variance" basically.
        .                       ty::Variance::Bivariant => panic!("Bivariant given to `relate()`"),
        .                   }
    3,807 ( 0.00%)      }
        .           
        .               /// Computes the least-upper-bound, or mutual supertype, of two
        .               /// values. The order of the arguments doesn't matter, but since
        .               /// this can result in an error (e.g., if asked to compute LUB of
        .               /// u32 and i32), it is meaningful to call one of them the
        .               /// "expected type".
        .               pub fn lub<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>
        .               where
-- line 148 ----------------------------------------
-- line 174 ----------------------------------------
        .           
        .               /// Like `trace`, but the expected value is determined by the
        .               /// boolean argument (if true, then the first argument `a` is the
        .               /// "expected" value).
        .               pub fn trace_exp<T>(self, a_is_expected: bool, a: T, b: T) -> Trace<'a, 'tcx>
        .               where
        .                   T: ToTrace<'tcx>,
        .               {
6,346,292 ( 0.06%)          let trace = ToTrace::to_trace(self.infcx.tcx, self.cause, a_is_expected, a, b);
        .                   Trace { at: self, trace, a_is_expected }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Trace<'a, 'tcx> {
        .               /// Makes `a <: b` where `a` may or may not be expected (if
        .               /// `a_is_expected` is true, then `a` is expected).
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn sub<T>(self, a: T, b: T) -> InferResult<'tcx, ()>
        .               where
        .                   T: Relate<'tcx>,
        .               {
1,814,374 ( 0.02%)          let Trace { at, trace, a_is_expected } = self;
7,555,718 ( 0.08%)          at.infcx.commit_if_ok(|_| {
4,800,883 ( 0.05%)              let mut fields = at.infcx.combine_fields(trace, at.param_env);
  427,259 ( 0.00%)              fields
1,028,941 ( 0.01%)                  .sub(a_is_expected)
2,586,853 ( 0.03%)                  .relate(a, b)
1,372,056 ( 0.01%)                  .map(move |_| InferOk { value: (), obligations: fields.obligations })
        .                   })
        .               }
        .           
        .               /// Makes `a == b`; the expectation is set by the call to
        .               /// `trace()`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn eq<T>(self, a: T, b: T) -> InferResult<'tcx, ()>
        .               where
        .                   T: Relate<'tcx>,
        .               {
  765,602 ( 0.01%)          let Trace { at, trace, a_is_expected } = self;
2,882,361 ( 0.03%)          at.infcx.commit_if_ok(|_| {
1,810,077 ( 0.02%)              let mut fields = at.infcx.combine_fields(trace, at.param_env);
  389,404 ( 0.00%)              fields
  389,404 ( 0.00%)                  .equate(a_is_expected)
  716,733 ( 0.01%)                  .relate(a, b)
  520,348 ( 0.01%)                  .map(move |_| InferOk { value: (), obligations: fields.obligations })
        .                   })
        .               }
        .           
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn lub<T>(self, a: T, b: T) -> InferResult<'tcx, T>
        .               where
        .                   T: Relate<'tcx>,
        .               {
      270 ( 0.00%)          let Trace { at, trace, a_is_expected } = self;
    1,188 ( 0.00%)          at.infcx.commit_if_ok(|_| {
      756 ( 0.00%)              let mut fields = at.infcx.combine_fields(trace, at.param_env);
      162 ( 0.00%)              fields
      162 ( 0.00%)                  .lub(a_is_expected)
      216 ( 0.00%)                  .relate(a, b)
      216 ( 0.00%)                  .map(move |t| InferOk { value: t, obligations: fields.obligations })
        .                   })
        .               }
        .           
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn glb<T>(self, a: T, b: T) -> InferResult<'tcx, T>
        .               where
        .                   T: Relate<'tcx>,
        .               {
-- line 241 ----------------------------------------
-- line 253 ----------------------------------------
        .           impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {
        .               fn to_trace(
        .                   _: TyCtxt<'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Self,
        .                   b: Self,
        .               ) -> TypeTrace<'tcx> {
  357,448 ( 0.00%)          TypeTrace { cause: cause.clone(), values: Types(ExpectedFound::new(a_is_expected, a, b)) }
  102,128 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {
        .               fn to_trace(
        .                   _: TyCtxt<'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Self,
        .                   b: Self,
        .               ) -> TypeTrace<'tcx> {
  124,033 ( 0.00%)          TypeTrace { cause: cause.clone(), values: Regions(ExpectedFound::new(a_is_expected, a, b)) }
   35,438 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {
        .               fn to_trace(
        .                   _: TyCtxt<'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Self,
        .                   b: Self,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {
  186,504 ( 0.00%)      fn to_trace(
        .                   _: TyCtxt<'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Self,
        .                   b: Self,
        .               ) -> TypeTrace<'tcx> {
  466,260 ( 0.00%)          TypeTrace {
        .                       cause: cause.clone(),
  373,008 ( 0.00%)              values: TraitRefs(ExpectedFound::new(a_is_expected, a, b)),
        .                   }
  373,008 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {
  601,682 ( 0.01%)      fn to_trace(
        .                   _: TyCtxt<'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Self,
        .                   b: Self,
        .               ) -> TypeTrace<'tcx> {
1,504,205 ( 0.02%)          TypeTrace {
        .                       cause: cause.clone(),
5,415,138 ( 0.05%)              values: PolyTraitRefs(ExpectedFound::new(a_is_expected, a, b)),
        .                   }
1,203,364 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> ToTrace<'tcx> for ty::ProjectionTy<'tcx> {
  111,852 ( 0.00%)      fn to_trace(
        .                   tcx: TyCtxt<'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Self,
        .                   b: Self,
        .               ) -> TypeTrace<'tcx> {
        .                   let a_ty = tcx.mk_projection(a.item_def_id, a.substs);
        .                   let b_ty = tcx.mk_projection(b.item_def_id, b.substs);
   65,247 ( 0.00%)          TypeTrace {
        .                       cause: cause.clone(),
        .                       values: Types(ExpectedFound::new(a_is_expected, a_ty, b_ty)),
        .                   }
   83,889 ( 0.00%)      }
        .           }

  819,838 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir                 

-- line 56 ----------------------------------------
        .           #[derive(Copy, Clone, Debug)]
        .           pub enum RelationDir {
        .               SubtypeOf,
        .               SupertypeOf,
        .               EqTo,
        .           }
        .           
        .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
3,228,813 ( 0.03%)      pub fn super_combine_tys<R>(
        .                   &self,
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>>
        .               where
        .                   R: TypeRelation<'tcx>,
        .               {
        .                   let a_is_expected = relation.a_is_expected();
        .           
2,582,771 ( 0.03%)          match (a.kind(), b.kind()) {
        .                       // Relate integral variables to other types
        8 ( 0.00%)              (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
       44 ( 0.00%)                  self.inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .unify_var_var(a_id, b_id)
        .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
        .                           Ok(a)
        .                       }
      227 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
      454 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
        .                       }
        .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
        .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
        .                       }
      396 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
      792 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
        .                       }
       26 ( 0.00%)              (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
       52 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
        .                       }
        .           
        .                       // Relate floating-point variables to other types
        .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
        .                           self.inner
        .                               .borrow_mut()
        .                               .float_unification_table()
        .                               .unify_var_var(a_id, b_id)
-- line 103 ----------------------------------------
-- line 108 ----------------------------------------
        .                           self.unify_float_variable(a_is_expected, v_id, v)
        .                       }
        .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
        .                           self.unify_float_variable(!a_is_expected, v_id, v)
        .                       }
        .           
        .                       // All other cases of inference are errors
        .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
    9,040 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
        .                       }
        .           
2,228,814 ( 0.02%)              _ => ty::relate::super_relate_tys(relation, a, b),
        .                   }
3,228,813 ( 0.03%)      }
        .           
      336 ( 0.00%)      pub fn super_combine_consts<R>(
        .                   &self,
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
        .               where
        .                   R: ConstEquateRelation<'tcx>,
        .               {
        .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
      230 ( 0.00%)          if a == b {
        .                       return Ok(a);
        .                   }
        .           
       84 ( 0.00%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
       84 ( 0.00%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
        .           
        .                   let a_is_expected = relation.a_is_expected();
        .           
      350 ( 0.00%)          match (a.val, b.val) {
        .                       (
        .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
        .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
        .                       ) => {
        .                           self.inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .unify_var_var(a_vid, b_vid)
-- line 150 ----------------------------------------
-- line 154 ----------------------------------------
        .           
        .                       // All other cases of inference with other variables are errors.
        .                       (ty::ConstKind::Infer(InferConst::Var(_)), ty::ConstKind::Infer(_))
        .                       | (ty::ConstKind::Infer(_), ty::ConstKind::Infer(InferConst::Var(_))) => {
        .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
        .                       }
        .           
        .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
       98 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
        .                       }
        .           
        .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
        .                           return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
        .                       }
        4 ( 0.00%)              (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
        .                           // FIXME(#59490): Need to remove the leak check to accommodate
        .                           // escaping bound variables here.
        .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
        .                               relation.const_equate_obligation(a, b);
        .                           }
        .                           return Ok(b);
        .                       }
        .                       (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {
-- line 176 ----------------------------------------
-- line 179 ----------------------------------------
        .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
        .                               relation.const_equate_obligation(a, b);
        .                           }
        .                           return Ok(a);
        .                       }
        .                       _ => {}
        .                   }
        .           
       70 ( 0.00%)          ty::relate::super_relate_consts(relation, a, b)
      252 ( 0.00%)      }
        .           
        .               /// Unifies the const variable `target_vid` with the given constant.
        .               ///
        .               /// This also tests if the given const `ct` contains an inference variable which was previously
        .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
        .               /// would result in an infinite type as we continuously replace an inference variable
        .               /// in `ct` with `ct` itself.
        .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// of `fn bind` (meaning that its substs contain `N`).
        .               ///
        .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
        .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
        .               ///
        .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
        .               ///
        .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
      266 ( 0.00%)      #[instrument(level = "debug", skip(self))]
        .               fn unify_const_variable(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   target_vid: ty::ConstVid<'tcx>,
        .                   ct: &'tcx ty::Const<'tcx>,
        .                   vid_is_expected: bool,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .                   let (for_universe, span) = {
        .                       let mut inner = self.inner.borrow_mut();
       56 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
       28 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
       28 ( 0.00%)              match var_value.val {
        .                           ConstVariableValue::Known { value } => {
        .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
        .                           }
        .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
        .                       }
        .                   };
      112 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
        .                       .relate(ct, ct)?;
        .           
       56 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .const_unification_table()
        .                       .unify_var_value(
        .                           target_vid,
       84 ( 0.00%)                  ConstVarValue {
        .                               origin: ConstVariableOrigin {
        .                                   kind: ConstVariableOriginKind::ConstInference,
        .                                   span: DUMMY_SP,
        .                               },
        .                               val: ConstVariableValue::Known { value },
        .                           },
        .                       )
        .                       .map(|()| value)
        .                       .map_err(|e| const_unification_error(vid_is_expected, e))
        .               }
        .           
    3,894 ( 0.00%)      fn unify_integral_variable(
        .                   &self,
        .                   vid_is_expected: bool,
        .                   vid: ty::IntVid,
        .                   val: ty::IntVarValue,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
    5,192 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .int_unification_table()
        .                       .unify_var_value(vid, Some(val))
        .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
    1,298 ( 0.00%)          match val {
      227 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
    1,493 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
        .                   }
    5,192 ( 0.00%)      }
        .           
        .               fn unify_float_variable(
        .                   &self,
        .                   vid_is_expected: bool,
        .                   vid: ty::FloatVid,
        .                   val: ty::FloatTy,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
        .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
        .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
        .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
        .                   Ok(self.tcx.mk_mach_float(val))
        .               }
        .           }
        .           
        .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
        .               pub fn tcx(&self) -> TyCtxt<'tcx> {
  276,746 ( 0.00%)          self.infcx.tcx
        .               }
        .           
        .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
        .                   Equate::new(self, a_is_expected)
        .               }
        .           
1,287,508 ( 0.01%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
        .                   Sub::new(self, a_is_expected)
  643,754 ( 0.01%)      }
        .           
        .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
        .                   Lub::new(self, a_is_expected)
        .               }
        .           
  929,962 ( 0.01%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
        .                   Glb::new(self, a_is_expected)
  464,981 ( 0.00%)      }
        .           
        .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
        .               /// The idea is that we should ensure that the type `a_ty` is equal
        .               /// to, a subtype of, or a supertype of (respectively) the type
        .               /// to which `b_vid` is bound.
        .               ///
        .               /// Since `b_vid` has not yet been instantiated with a type, we
        .               /// will first instantiate `b_vid` with a *generalized* version
        .               /// of `a_ty`. Generalization introduces other inference
        .               /// variables wherever subtyping could occur.
  908,853 ( 0.01%)      pub fn instantiate(
        .                   &mut self,
        .                   a_ty: Ty<'tcx>,
        .                   dir: RelationDir,
        .                   b_vid: ty::TyVid,
        .                   a_is_expected: bool,
        .               ) -> RelateResult<'tcx, ()> {
        .                   use self::RelationDir::*;
        .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
        .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
        .                   //   inference variable,
        .                   // - and `dir` == `SubtypeOf`.
        .                   //
        .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
        .                   // `'?2` and `?3` are fresh region/type inference
        .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
        .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
   82,615 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
        .                   debug!(
        .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
        .                       a_ty, dir, b_vid, b_ty
        .                   );
  578,305 ( 0.01%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
        .           
   82,615 ( 0.00%)          if needs_wf {
        .                       self.obligations.push(Obligation::new(
        .                           self.trace.cause.clone(),
        .                           self.param_env,
        .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
        .                               .to_predicate(self.infcx.tcx),
        .                       ));
        .                   }
        .           
        .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
        .                   //
        .                   // FIXME(#16847): This code is non-ideal because all these subtype
        .                   // relations wind up attributed to the same spans. We need
        .                   // to associate causes/spans with each of the relations in
        .                   // the stack to get this right.
  316,784 ( 0.00%)          match dir {
  331,780 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
   34,190 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
   18,842 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_ty,
        .                           b_ty,
        .                       ),
        .                   }?;
        .           
   82,615 ( 0.00%)          Ok(())
  660,984 ( 0.01%)      }
        .           
        .               /// Attempts to generalize `ty` for the type variable `for_vid`.
        .               /// This checks for cycle -- that is, whether the type `ty`
        .               /// references `for_vid`. The `dir` is the "direction" for which we
        .               /// a performing the generalization (i.e., are we producing a type
        .               /// that can be used as a supertype etc).
        .               ///
        .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
        .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
        .                   // Determine the ambient variance within which `ty` appears.
        .                   // The surrounding equation is:
        .                   //
        .                   //     ty [op] ty2
        .                   //
        .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
        .                   // naturally.
  330,492 ( 0.00%)          let ambient_variance = match dir {
        .                       RelationDir::EqTo => ty::Invariant,
        .                       RelationDir::SubtypeOf => ty::Covariant,
        .                       RelationDir::SupertypeOf => ty::Contravariant,
        .                   };
        .           
        .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
        .           
  826,230 ( 0.01%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
        .                       v @ TypeVariableValue::Known { .. } => {
        .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
        .                       }
        .                       TypeVariableValue::Unknown { universe } => universe,
        .                   };
        .           
        .                   debug!("generalize: for_universe = {:?}", for_universe);
        .                   debug!("generalize: trace = {:?}", self.trace);
        .           
  826,230 ( 0.01%)          let mut generalize = Generalizer {
        .                       infcx: self.infcx,
        .                       cause: &self.trace.cause,
        .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
        .                       for_universe,
        .                       ambient_variance,
        .                       needs_wf: false,
        .                       root_ty: ty,
   82,623 ( 0.00%)              param_env: self.param_env,
        .                       cache: SsoHashMap::new(),
        .                   };
        .           
  165,246 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
   82,615 ( 0.00%)              Ok(ty) => ty,
        .                       Err(e) => {
        .                           debug!("generalize: failure {:?}", e);
       48 ( 0.00%)                  return Err(e);
        .                       }
        .                   };
   82,615 ( 0.00%)          let needs_wf = generalize.needs_wf;
        .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
        .                   Ok(Generalization { ty, needs_wf })
        .               }
        .           
        .               pub fn add_const_equate_obligation(
        .                   &mut self,
        .                   a_is_expected: bool,
        .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
        .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
        .               /// holds, which in turn implies that `?C::Item == ?D`. So once
        .               /// `?C` is constrained, that should suffice to restrict `?D`.
        .               needs_wf: bool,
        .           }
        .           
        .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
   89,660 ( 0.00%)          self.infcx.tcx
        .               }
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
       27 ( 0.00%)          self.param_env
        .               }
        .           
        .               fn tag(&self) -> &'static str {
        .                   "Generalizer"
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
        .                   true
        .               }
        .           
    3,414 ( 0.00%)      fn binders<T>(
        .                   &mut self,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
        .               where
        .                   T: Relate<'tcx>,
        .               {
    4,996 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
    3,414 ( 0.00%)      }
        .           
  257,840 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
   23,440 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
        .                       // Avoid fetching the variance if we are in an invariant
        .                       // context; no need, and it can induce dependency cycles
        .                       // (e.g., #41849).
   16,076 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
        .                   } else {
        .                       let tcx = self.tcx();
        .                       let opt_variances = tcx.variances_of(item_def_id);
   36,820 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
        .                   }
  210,960 ( 0.00%)      }
        .           
  101,151 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   _info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
        .               ) -> RelateResult<'tcx, T> {
        .                   let old_ambient_variance = self.ambient_variance;
  403,625 ( 0.00%)          self.ambient_variance = self.ambient_variance.xform(variance);
        .           
        .                   let result = self.relate(a, b);
   77,037 ( 0.00%)          self.ambient_variance = old_ambient_variance;
        .                   result
   78,673 ( 0.00%)      }
        .           
1,394,559 ( 0.01%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
  154,951 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
  929,706 ( 0.01%)          if let Some(result) = self.cache.get(&t) {
    7,804 ( 0.00%)              return result.clone();
        .                   }
        .                   debug!("generalize: t={:?}", t);
        .           
        .                   // Check to see whether the type we are generalizing references
        .                   // any other type variable related to `vid` via
        .                   // subtyping. This is basically our "occurs check", preventing
        .                   // us from creating infinitely sized types.
  472,156 ( 0.00%)          let result = match *t.kind() {
    2,034 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    2,034 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
    2,034 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
    2,034 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
        .                               // If sub-roots are equal, then `for_vid` and
        .                               // `vid` are related via subtyping.
       40 ( 0.00%)                      Err(TypeError::CyclicTy(self.root_ty))
        .                           } else {
   12,156 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
    4,052 ( 0.00%)                      match probe {
        .                                   TypeVariableValue::Known { value: u } => {
        .                                       debug!("generalize: known value {:?}", u);
        .                                       self.relate(u, u)
        .                                   }
        .                                   TypeVariableValue::Unknown { universe } => {
    8,955 ( 0.00%)                              match self.ambient_variance {
        .                                           // Invariant: no need to make a fresh type variable.
        .                                           ty::Invariant => {
    4,910 ( 0.00%)                                      if self.for_universe.can_name(universe) {
    3,708 ( 0.00%)                                          return Ok(t);
        .                                               }
        .                                           }
        .           
        .                                           // Bivariant: make a fresh var, but we
        .                                           // may need a WF predicate. See
        .                                           // comment on `needs_wf` field for
        .                                           // more info.
        .                                           ty::Bivariant => self.needs_wf = true,
        .           
        .                                           // Co/contravariant: this will be
        .                                           // sufficiently constrained later on.
        .                                           ty::Covariant | ty::Contravariant => (),
        .                                       }
        .           
        .                                       let origin =
    7,776 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
    6,048 ( 0.00%)                              let new_var_id = self
        .                                           .infcx
        .                                           .inner
        .                                           .borrow_mut()
        .                                           .type_variables()
    6,048 ( 0.00%)                                  .new_var(self.for_universe, origin);
        .                                       let u = self.tcx().mk_ty_var(new_var_id);
        .           
        .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
        .                                       // operation. This is needed to detect cyclic types. To see why, see the
        .                                       // docs in the `type_variables` module.
    4,320 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
        .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
    1,728 ( 0.00%)                              Ok(u)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
        .                           // No matter what mode we are in,
        .                           // integer/floating-point types must be equal to be
        .                           // relatable.
      238 ( 0.00%)                  Ok(t)
        .                       }
  452,184 ( 0.00%)              _ => relate::super_relate_tys(self, t, t),
        .                   };
        .           
1,520,730 ( 0.02%)          self.cache.insert(t, result.clone());
  912,438 ( 0.01%)          return result;
1,394,559 ( 0.01%)      }
        .           
  141,504 ( 0.00%)      fn regions(
        .                   &mut self,
        .                   r: ty::Region<'tcx>,
        .                   r2: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   17,194 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
        .                   debug!("generalize: regions r={:?}", r);
        .           
   34,388 ( 0.00%)          match *r {
        .                       // Never make variables for regions bound within the type itself,
        .                       // nor for erased regions.
        .                       ty::ReLateBound(..) | ty::ReErased => {
        .                           return Ok(r);
        .                       }
        .           
        .                       ty::RePlaceholder(..)
        .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   // If we are in an invariant context, we can re-use the region
        .                   // as is, unless it happens to be in some universe that we
        .                   // can't name. (In the case of a region *variable*, we could
        .                   // use it if we promoted it into our universe, but we don't
        .                   // bother.)
   34,364 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
   41,949 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
   97,813 ( 0.00%)              if self.for_universe.can_name(r_universe) {
        .                           return Ok(r);
        .                       }
        .                   }
        .           
        .                   // FIXME: This is non-ideal because we don't give a
        .                   // very descriptive origin for this region variable.
   32,602 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
  141,504 ( 0.00%)      }
        .           
      279 ( 0.00%)      fn consts(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .                   c2: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
       79 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
        .                   match c.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
        4 ( 0.00%)                  let mut inner = self.infcx.inner.borrow_mut();
       16 ( 0.00%)                  let variable_table = &mut inner.const_unification_table();
        4 ( 0.00%)                  let var_value = variable_table.probe_value(vid);
        8 ( 0.00%)                  match var_value.val {
        .                               ConstVariableValue::Known { value: u } => {
        .                                   drop(inner);
        .                                   self.relate(u, u)
        .                               }
        4 ( 0.00%)                      ConstVariableValue::Unknown { universe } => {
       20 ( 0.00%)                          if self.for_universe.can_name(universe) {
        .                                       Ok(c)
        .                                   } else {
        .                                       let new_var_id = variable_table.new_key(ConstVarValue {
        .                                           origin: var_value.origin,
        .                                           val: ConstVariableValue::Unknown { universe: self.for_universe },
        .                                       });
        .                                       Ok(self.tcx().mk_const_var(new_var_id, c.ty))
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })
        2 ( 0.00%)                  if self.tcx().lazy_normalization() =>
        .                       {
        .                           assert_eq!(promoted, None);
        .                           let substs = self.relate_with_variance(
        .                               ty::Variance::Invariant,
        .                               ty::VarianceDiagInfo::default(),
        .                               substs,
        .                               substs,
        .                           )?;
        .                           Ok(self.tcx().mk_const(ty::Const {
        .                               ty: c.ty,
        .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
        .                           }))
        .                       }
      135 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
        .                   }
      279 ( 0.00%)      }
        .           }
        .           
        .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
        .               /// Register an obligation that both constants must be equal to each other.
        .               ///
        .               /// If they aren't equal then the relation doesn't hold.
        .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
        .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
        .               target_vid: ty::ConstVid<'tcx>,
        .           }
        .           
        .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
        .           //
        .           // Both inputs are expected to be the same.
        .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
       56 ( 0.00%)          self.infcx.tcx
        .               }
        .           
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
       14 ( 0.00%)          self.param_env
        .               }
        .           
        .               fn tag(&self) -> &'static str {
        .                   "ConstInferUnifier"
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
        .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
        .                       return Ok(r);
        .                   } else {
        .                       // FIXME: This is non-ideal because we don't give a
        .                       // very descriptive origin for this region variable.
        .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
        .                   }
        .               }
        .           
      266 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
        .               fn consts(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .                   _c: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .                   debug_assert_eq!(c, _c);
        .                   debug!("ConstInferUnifier: c={:?}", c);
        .           
       70 ( 0.00%)          match c.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
        .                           // Check if the current unification would end up
        .                           // unifying `target_vid` with a const which contains
        .                           // an inference variable which is unioned with `target_vid`.
        .                           //
        .                           // Not doing so can easily result in stack overflows.
        .                           if self
        .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
        .                               substs,
        .                               substs,
        .                           )?;
        .                           Ok(self.tcx().mk_const(ty::Const {
        .                               ty: c.ty,
        .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
        .                           }))
        .                       }
       70 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
        .                   }
        .               }
        .           }

2,115,084 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           pub struct BitMask(pub BitMaskWord);
         .           
         .           #[allow(clippy::use_self)]
         .           impl BitMask {
         .               /// Returns a new `BitMask` with all bits inverted.
         .               #[inline]
         .               #[must_use]
         .               pub fn invert(self) -> Self {
   321,945 ( 0.00%)          BitMask(self.0 ^ BITMASK_MASK)
         .               }
         .           
         .               /// Flip the bit in the mask for the entry at the given index.
         .               ///
         .               /// Returns the bit's previous state.
         .               #[inline]
         .               #[allow(clippy::cast_ptr_alignment)]
         .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
         .                   // The bit was set if the bit is now 0.
         .                   self.0 & mask == 0
         .               }
         .           
         .               /// Returns a new `BitMask` with the lowest bit removed.
         .               #[inline]
         .               #[must_use]
         .               pub fn remove_lowest_bit(self) -> Self {
   302,141 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
         .               }
         .               /// Returns whether the `BitMask` has at least one set bit.
         .               #[inline]
         .               pub fn any_bit_set(self) -> bool {
 4,019,768 ( 0.04%)          self.0 != 0
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one.
         .               #[inline]
         .               pub fn lowest_set_bit(self) -> Option<usize> {
60,759,868 ( 0.61%)          if self.0 == 0 {
         .                       None
         .                   } else {
         .                       Some(unsafe { self.lowest_set_bit_nonzero() })
         .                   }
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one. The
         .               /// bitmask must not be empty.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
   109,601 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
         .               }
         .               #[inline]
         .               #[cfg(not(feature = "nightly"))]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
         .                   self.trailing_zeros()
         .               }
         .           
         .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
         .           /// bits.
         .           pub struct BitMaskIter(BitMask);
         .           
         .           impl Iterator for BitMaskIter {
         .               type Item = usize;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<usize> {
18,884,993 ( 0.19%)          let bit = self.0.lowest_set_bit()?;
         .                   self.0 = self.0.remove_lowest_bit();
         .                   Some(bit)
         .               }
         .           }

   792,990 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        24 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
     8,042 ( 0.00%)      pub ty: Ty<'tcx>,
    40,210 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    45,847 ( 0.00%)      pub scope: DefId,
    91,355 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
 1,548,131 ( 0.02%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        60 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
   102,038 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       416 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     2,740 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   387,629 ( 0.00%)      pub var: BoundVar,
   372,837 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
42,693,101 ( 0.43%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
    48,008 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 2,709,829 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
     3,213 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 3,005,014 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    26,077 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     8,292 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        47 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
        94 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       188 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
        94 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     1,861 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    10,132 ( 0.00%)              [
     3,087 ( 0.00%)                  ref parent_substs @ ..,
     3,247 ( 0.00%)                  closure_kind_ty,
     1,132 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     2,565 ( 0.00%)                  tupled_upvars_ty,
     7,444 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     5,583 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
        17 ( 0.00%)      pub fn is_valid(self) -> bool {
        34 ( 0.00%)          self.substs.len() >= 3
        34 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        34 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       630 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     1,044 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       521 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       420 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     8,301 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
       616 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     1,232 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         7 ( 0.00%)      pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        14 ( 0.00%)      }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        47 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        56 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        94 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
       512 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     1,024 ( 0.00%)          match ty.kind() {
     2,048 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     1,536 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       188 ( 0.00%)          let tupled_tys = match self {
       235 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       376 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       329 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       282 ( 0.00%)          match self {
       388 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    18,929 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    21,134 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
        18 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
        70 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
        80 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
        84 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     2,907 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     1,615 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     2,584 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
        19 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     1,053 ( 0.00%)          self[0]
       996 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
        76 ( 0.00%)              })
         .                       .transpose()
        57 ( 0.00%)      }
         .           
       323 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       646 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
         .                       predicate
         .                           .map_bound(|pred| match pred {
-- line 866 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    32,259 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
13,690,028 ( 0.14%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
    29,232 ( 0.00%)      pub def_id: DefId,
 8,129,795 ( 0.08%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
    12,001 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    48,004 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     1,134 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       504 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       756 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     1,008 ( 0.00%)      }
         .           
         .               #[inline]
         3 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         2 ( 0.00%)      }
         .           
    14,944 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
     1,868 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    20,548 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
   128,007 ( 0.00%)          self.skip_binder().def_id
    42,669 ( 0.00%)      }
         .           
    36,555 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    73,110 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
    36,555 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        80 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    10,523 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     1,324 ( 0.00%)      pub def_id: DefId,
    11,752 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
        20 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
        20 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
         .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 994 ----------------------------------------
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        30 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        42 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        40 ( 0.00%)      }
         .           }
         .           
   165,310 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       140 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    30,978 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 2,278,680 ( 0.02%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    49,910 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   281,410 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   859,230 ( 0.01%)          Binder(value, ty::List::empty())
    49,743 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
   185,024 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
10,575,710 ( 0.11%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    30,112 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
   295,084 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
       376 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
   251,742 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
 2,796,889 ( 0.03%)          Binder(value, self.1)
       376 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   109,608 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
   179,263 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,145,756 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
        80 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
    19,962 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
 1,163,787 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
   821,476 ( 0.01%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
 1,087,103 ( 0.01%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
   246,183 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    70,338 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   281,352 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
   143,948 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    61,692 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
   102,820 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
   185,076 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
   316,152 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    35,128 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    35,128 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   386,408 ( 0.00%)      }
         .           
    69,648 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
   208,944 ( 0.00%)          self.substs.type_at(0)
   139,296 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   120,946 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    75,689 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     4,406 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    61,645 ( 0.00%)      pub c_variadic: bool,
    11,131 ( 0.00%)      pub unsafety: hir::Unsafety,
    70,523 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    54,506 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   234,392 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   109,012 ( 0.00%)      }
         .           
    35,361 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   264,296 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    70,722 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    10,489 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    15,663 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     1,547 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    10,501 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     3,082 ( 0.00%)          self.skip_binder().c_variadic
     1,541 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     7,022 ( 0.00%)          self.skip_binder().unsafety
     3,511 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
    58,548 ( 0.00%)          self.skip_binder().abi
    14,637 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
       636 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
       440 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
    23,948 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
     5,240 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
     2,620 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
     2,860 ( 0.00%)          ParamTy::new(def.index, def.name)
     1,430 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       126 ( 0.00%)      pub index: u32,
       126 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
12,628,274 ( 0.13%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       658 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   748,138 ( 0.01%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    31,354 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
   167,907 ( 0.00%)      pub def_id: DefId,
   148,646 ( 0.00%)      pub index: u32,
   278,310 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     3,058 ( 0.00%)      pub index: u32,
       267 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     8,292 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
   141,129 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     4,663 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   379,909 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   361,760 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    68,650 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     5,630 ( 0.00%)          match self.kind() {
     1,076 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    67,637 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   141,880 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   208,694 ( 0.00%)          match self.kind() {
    17,349 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       141 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
        18 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
         6 ( 0.00%)          *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
     5,673 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
     1,098 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
        12 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        24 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
        12 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
        67 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
        39 ( 0.00%)          matches!(
        26 ( 0.00%)              self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
         .                   )
         .               }
         .           
         .               /// Get the mutability of the reference or `None` when not a reference
         .               #[inline]
         .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
     9,244 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
         8 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   104,098 ( 0.00%)          match self.kind() {
     9,056 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
         .               pub fn boxed_ty(&self) -> Ty<'tcx> {
         .                   match self.kind() {
         .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     1,258 ( 0.00%)          matches!(
     2,807 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
     1,070 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
        37 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
     1,250 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    16,064 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     5,728 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
    11,377 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
     6,931 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
    29,838 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
       346 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     2,307 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    13,408 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    87,034 ( 0.00%)          match self.kind() {
     1,248 ( 0.00%)              Adt(def, _) if def.is_box() => {
         .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
    50,476 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
       562 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    26,816 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       888 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
       108 ( 0.00%)      }
         .           
   175,856 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    87,928 ( 0.00%)          match self.kind() {
    65,946 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
         .                       FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   197,838 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
     2,838 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     4,960 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       984 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    33,518 ( 0.00%)          match self.kind() {
    19,807 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     1,968 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       305 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       610 ( 0.00%)          match self.kind() {
       610 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       610 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
     5,890 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
     4,265 ( 0.00%)          match self.kind() {
     1,324 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
       662 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
     4,712 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
     7,200 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     3,600 ( 0.00%)          match self.kind() {
     5,760 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
     5,760 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        18 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
        18 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
        10 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
         4 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
        16 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     1,534 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     3,068 ( 0.00%)          match self.kind() {
     2,988 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     1,534 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   302,454 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   201,636 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     3,979 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    18,573 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   302,454 ( 0.00%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
        51 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    58,638 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    87,957 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    29,319 ( 0.00%)      }
         .           }

55,481,998 ( 0.56%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 121 ----------------------------------------
        .           #[derive(Debug)]
        .           pub enum ProcessResult<O, E> {
        .               Unchanged,
        .               Changed(Vec<O>),
        .               Error(E),
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  188,506 ( 0.00%)  struct ObligationTreeId(usize);
        .           
        .           type ObligationTreeIdGenerator =
        .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
        .           
        .           pub struct ObligationForest<O: ForestObligation> {
        .               /// The list of obligations. In between calls to `process_obligations`,
        .               /// this list only contains nodes in the `Pending` or `Waiting` state.
        .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
        .               has_parent: bool,
        .           
        .               /// Identifier of the obligation tree to which this node belongs.
        .               obligation_tree_id: ObligationTreeId,
        .           }
        .           
        .           impl<O> Node<O> {
        .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
2,276,752 ( 0.02%)          Node {
        .                       obligation,
        .                       state: Cell::new(NodeState::Pending),
  286,429 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
        .                       has_parent: parent.is_some(),
        .                       obligation_tree_id,
        .                   }
        .               }
        .           }
        .           
        .           /// The state of one node in some tree within the forest. This represents the
        .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
        .           ///  |     compress()
        .           ///  v
        .           /// (Removed)
        .           /// ```
        .           /// The `Error` state can be introduced in several places, via `error_at()`.
        .           ///
        .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
        .           /// `Waiting`.
1,042,800 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        .           enum NodeState {
        .               /// This obligation has not yet been selected successfully. Cannot have
        .               /// subobligations.
        .               Pending,
        .           
        .               /// This obligation was selected successfully, but may or may not have
        .               /// subobligations.
        .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
        .               pub stalled: bool,
        .           }
        .           
        .           impl<O, E> OutcomeTrait for Outcome<O, E> {
        .               type Error = Error<O, E>;
        .               type Obligation = O;
        .           
        .               fn new() -> Self {
  297,290 ( 0.00%)          Self { stalled: true, errors: vec![] }
        .               }
        .           
        .               fn mark_not_stalled(&mut self) {
  141,674 ( 0.00%)          self.stalled = false;
        .               }
        .           
        .               fn is_stalled(&self) -> bool {
   38,014 ( 0.00%)          self.stalled
        .               }
        .           
        .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
        .                   // do nothing
        .               }
        .           
        .               fn record_error(&mut self, error: Self::Error) {
        .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub struct Error<O, E> {
        .               pub error: E,
        .               pub backtrace: Vec<O>,
        .           }
        .           
        .           impl<O: ForestObligation> ObligationForest<O> {
   50,200 ( 0.00%)      pub fn new() -> ObligationForest<O> {
  602,400 ( 0.01%)          ObligationForest {
        .                       nodes: vec![],
        .                       done_cache: Default::default(),
        .                       active_cache: Default::default(),
        .                       reused_node_vec: vec![],
        .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
        .                       error_cache: Default::default(),
        .                   }
   50,200 ( 0.00%)      }
        .           
        .               /// Returns the total number of nodes in the forest that have not
        .               /// yet been fully resolved.
        .               pub fn len(&self) -> usize {
        .                   self.nodes.len()
        .               }
        .           
        .               /// Registers an obligation.
        .               pub fn register_obligation(&mut self, obligation: O) {
        .                   // Ignore errors here - there is no guarantee of success.
1,703,442 ( 0.02%)          let _ = self.register_obligation_at(obligation, None);
        .               }
        .           
        .               // Returns Err(()) if we already know this obligation failed.
2,557,929 ( 0.03%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
  465,078 ( 0.00%)          let cache_key = obligation.as_cache_key();
  465,078 ( 0.00%)          if self.done_cache.contains(&cache_key) {
        .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
        .                       return Ok(());
        .                   }
        .           
1,213,236 ( 0.01%)          match self.active_cache.entry(cache_key) {
        .                       Entry::Occupied(o) => {
  119,818 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
  119,818 ( 0.00%)                  if let Some(parent_index) = parent {
        .                               // If the node is already in `active_cache`, it has already
        .                               // had its chance to be marked with a parent. So if it's
        .                               // not already present, just dump `parent` into the
        .                               // dependents as a non-parent.
  100,695 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
        .                                   node.dependents.push(parent_index);
        .                               }
        .                           }
  179,727 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
        .                       }
  426,891 ( 0.00%)              Entry::Vacant(v) => {
  853,782 ( 0.01%)                  let obligation_tree_id = match parent {
   96,088 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
        .                               None => self.obligation_tree_id_generator.next().unwrap(),
        .                           };
        .           
        .                           let already_failed = parent.is_some()
        .                               && self
        .                                   .error_cache
        .                                   .get(&obligation_tree_id)
        .                                   .map_or(false, |errors| errors.contains(v.key()));
        .           
        .                           if already_failed {
        .                               Err(())
        .                           } else {
  142,297 ( 0.00%)                      let new_index = self.nodes.len();
        .                               v.insert(new_index);
        .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
        .                               Ok(())
        .                           }
        .                       }
        .                   }
2,092,851 ( 0.02%)      }
        .           
        .               /// Converts all remaining obligations to the given error.
  537,145 ( 0.01%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
        .                   let errors = self
        .                       .nodes
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
        .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
        .                       .collect();
        .           
  153,470 ( 0.00%)          self.compress(|_| assert!(false));
        .                   errors
  460,410 ( 0.00%)      }
        .           
        .               /// Returns the set of obligations that are in a pending state.
        .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
        .               where
        .                   F: Fn(&O) -> P,
        .               {
       37 ( 0.00%)          self.nodes
        .                       .iter()
        .                       .filter(|node| node.state.get() == NodeState::Pending)
        .                       .map(|node| f(&node.obligation))
        .                       .collect()
        .               }
        .           
        .               fn insert_into_error_cache(&mut self, index: usize) {
        .                   let node = &self.nodes[index];
-- line 410 ----------------------------------------
-- line 414 ----------------------------------------
        .                       .insert(node.obligation.as_cache_key());
        .               }
        .           
        .               /// Performs a pass through the obligation list. This must
        .               /// be called in a loop until `outcome.stalled` is false.
        .               ///
        .               /// This _cannot_ be unrolled (presently, at least).
        .               #[inline(never)]
1,337,805 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
        .               {
        .                   let mut outcome = OUT::new();
        .           
        .                   // Note that the loop body can append new nodes, and those new nodes
        .                   // will then be processed by subsequent iterations of the loop.
        .                   //
        .                   // We can't use an iterator for the loop because `self.nodes` is
        .                   // appended to and the borrow checker would complain. We also can't use
        .                   // `for index in 0..self.nodes.len() { ... }` because the range would
        .                   // be computed with the initial length, and we would miss the appended
        .                   // nodes. Therefore we use a `while` loop.
        .                   let mut index = 0;
  426,723 ( 0.00%)          while let Some(node) = self.nodes.get_mut(index) {
        .                       // `processor.process_obligation` can modify the predicate within
        .                       // `node.obligation`, and that predicate is the key used for
        .                       // `self.active_cache`. This means that `self.active_cache` can get
        .                       // out of sync with `nodes`. It's not very common, but it does
        .                       // happen, and code in `compress` has to allow for it.
  556,156 ( 0.01%)              if node.state.get() != NodeState::Pending {
   11,781 ( 0.00%)                  index += 1;
        .                           continue;
        .                       }
        .           
  752,065 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
        .                           ProcessResult::Unchanged => {
        .                               // No change in state.
        .                           }
  566,696 ( 0.01%)                  ProcessResult::Changed(children) => {
        .                               // We are not (yet) stalled.
        .                               outcome.mark_not_stalled();
        .                               node.state.set(NodeState::Success);
        .           
  769,706 ( 0.01%)                      for child in children {
1,725,585 ( 0.02%)                          let st = self.register_obligation_at(child, Some(index));
  203,010 ( 0.00%)                          if let Err(()) = st {
        .                                       // Error already reported - propagate it
        .                                       // to our node.
        .                                       self.error_at(index);
        .                                   }
        .                               }
        .                           }
        .                           ProcessResult::Error(err) => {
        .                               outcome.mark_not_stalled();
        .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
        .                           }
        .                       }
  532,594 ( 0.01%)              index += 1;
        .                   }
        .           
        .                   // There's no need to perform marking, cycle processing and compression when nothing
        .                   // changed.
   38,014 ( 0.00%)          if !outcome.is_stalled() {
        .                       self.mark_successes();
        .                       self.process_cycles(processor);
   53,310 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
        .                   }
        .           
        .                   outcome
1,337,805 ( 0.01%)      }
        .           
        .               /// Returns a vector of obligations for `p` and all of its
        .               /// ancestors, putting them into the error state in the process.
        .               fn error_at(&self, mut index: usize) -> Vec<O> {
        .                   let mut error_stack: Vec<usize> = vec![];
        .                   let mut trace = vec![];
        .           
        .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
        .                   trace
        .               }
        .           
        .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
        .               /// pending node.
        .               fn mark_successes(&self) {
        .                   // Convert all `Waiting` nodes to `Success`.
        .                   for node in &self.nodes {
  514,777 ( 0.01%)              if node.state.get() == NodeState::Waiting {
        .                           node.state.set(NodeState::Success);
        .                       }
        .                   }
        .           
        .                   // Convert `Success` nodes that depend on a pending node back to
        .                   // `Waiting`.
        .                   for node in &self.nodes {
  180,256 ( 0.00%)              if node.state.get() == NodeState::Pending {
        .                           // This call site is hot.
        .                           self.inlined_mark_dependents_as_waiting(node);
        .                       }
        .                   }
        .               }
        .           
        .               // This always-inlined function is for the hot call site.
        .               #[inline(always)]
        .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
    6,780 ( 0.00%)          for &index in node.dependents.iter() {
        .                       let node = &self.nodes[index];
    6,780 ( 0.00%)              let state = node.state.get();
    6,780 ( 0.00%)              if state == NodeState::Success {
        .                           // This call site is cold.
   10,839 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
        .                       } else {
        .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
        .                       }
        .                   }
        .               }
        .           
        .               // This never-inlined function is for the cold call site.
        .               #[inline(never)]
   25,291 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
        .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
        .                   node.state.set(NodeState::Waiting);
        .                   self.inlined_mark_dependents_as_waiting(node)
   28,904 ( 0.00%)      }
        .           
        .               /// Report cycles between all `Success` nodes, and convert all `Success`
        .               /// nodes to `Done`. This must be called after `mark_successes`.
        .               fn process_cycles<P>(&mut self, processor: &mut P)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
   26,655 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
        .                   for (index, node) in self.nodes.iter().enumerate() {
        .                       // For some benchmarks this state test is extremely hot. It's a win
        .                       // to handle the no-op cases immediately to avoid the cost of the
        .                       // function call.
  180,256 ( 0.00%)              if node.state.get() == NodeState::Success {
  679,820 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
        .                       }
        .                   }
        .           
        .                   debug_assert!(stack.is_empty());
  213,240 ( 0.00%)          self.reused_node_vec = stack;
        .               }
        .           
1,945,521 ( 0.02%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
        .                   let node = &self.nodes[index];
  432,338 ( 0.00%)          if node.state.get() == NodeState::Success {
   18,388 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
        .                           None => {
        .                               stack.push(index);
   80,205 ( 0.00%)                      for &dep_index in node.dependents.iter() {
  320,820 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
        .                               }
        .                               stack.pop();
        .                               node.state.set(NodeState::Done);
        .                           }
        .                           Some(rpos) => {
        .                               // Cycle detected.
    7,479 ( 0.00%)                      processor.process_backedge(
        .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
        .                                   PhantomData,
        .                               );
        .                           }
        .                       }
        .                   }
1,729,352 ( 0.02%)      }
        .           
        .               /// Compresses the vector, removing all popped nodes. This adjusts the
        .               /// indices and hence invalidates any outstanding indices. `process_cycles`
        .               /// must be run beforehand to remove any cycles on `Success` nodes.
        .               #[inline(never)]
  750,385 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
  103,390 ( 0.00%)          let orig_nodes_len = self.nodes.len();
        .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
        .                   debug_assert!(node_rewrites.is_empty());
        .                   node_rewrites.extend(0..orig_nodes_len);
        .                   let mut dead_nodes = 0;
        .           
        .                   // Move removable nodes to the end, preserving the order of the
        .                   // remaining nodes.
        .                   //
        .                   // LOOP INVARIANT:
        .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
        .                   //     self.nodes[index - dead_nodes..index] are all dead
        .                   //     self.nodes[index..] are unchanged
        .                   for index in 0..orig_nodes_len {
        .                       let node = &self.nodes[index];
1,007,900 ( 0.01%)              match node.state.get() {
        .                           NodeState::Pending | NodeState::Waiting => {
   77,164 ( 0.00%)                      if dead_nodes > 0 {
   46,938 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
   78,230 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
        .                               }
        .                           }
        .                           NodeState::Done => {
        .                               // This lookup can fail because the contents of
        .                               // `self.active_cache` are not guaranteed to match those of
        .                               // `self.nodes`. See the comment in `process_obligation`
        .                               // for more details.
  546,286 ( 0.01%)                      if let Some((predicate, _)) =
  425,022 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
        .                               {
        .                                   self.done_cache.insert(predicate);
        .                               } else {
        .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
        .                               }
        .                               // Extract the success stories.
        .                               outcome_cb(&node.obligation);
  283,348 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
  283,348 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Error => {
        .                               // We *intentionally* remove the node from the cache at this point. Otherwise
        .                               // tests must come up with a different type on every type error they
        .                               // check against.
        .                               self.active_cache.remove(&node.obligation.as_cache_key());
        .                               self.insert_into_error_cache(index);
        .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
        .                               dead_nodes += 1;
        .                           }
        .                           NodeState::Success => unreachable!(),
        .                       }
        .                   }
        .           
        .                   if dead_nodes > 0 {
        .                       // Remove the dead nodes and rewrite indices.
   52,688 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   26,344 ( 0.00%)              self.apply_rewrites(&node_rewrites);
        .                   }
        .           
        .                   node_rewrites.truncate(0);
  413,560 ( 0.00%)          self.reused_node_vec = node_rewrites;
  827,120 ( 0.01%)      }
        .           
        .               #[inline(never)]
  237,096 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
        .                   let orig_nodes_len = node_rewrites.len();
        .           
        .                   for node in &mut self.nodes {
        .                       let mut i = 0;
   40,543 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
   22,652 ( 0.00%)                  let new_index = node_rewrites[*dependent];
   11,326 ( 0.00%)                  if new_index >= orig_nodes_len {
        .                               node.dependents.swap_remove(i);
        .                               if i == 0 && node.has_parent {
        .                                   // We just removed the parent.
        .                                   node.has_parent = false;
        .                               }
        .                           } else {
    5,663 ( 0.00%)                      *dependent = new_index;
   11,326 ( 0.00%)                      i += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   // This updating of `self.active_cache` is necessary because the
        .                   // removal of nodes within `compress` can fail. See above.
        .                   self.active_cache.retain(|_predicate, index| {
  221,160 ( 0.00%)              let new_index = node_rewrites[*index];
  110,580 ( 0.00%)              if new_index >= orig_nodes_len {
        .                           false
        .                       } else {
   34,880 ( 0.00%)                  *index = new_index;
        .                           true
        .                       }
        .                   });
  210,752 ( 0.00%)      }
        .           }

2,856,787 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
    1,513 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
    1,513 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
    3,026 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  400,615 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
2,724,182 ( 0.03%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
  240,369 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
  480,738 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
  141,971 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
2,163,646 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   11,216 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    4,164 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  768,915 ( 0.01%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  896,593 ( 0.01%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  910,848 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
1,341,449 ( 0.01%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   83,623 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    6,164 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    3,297 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    4,526 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   80,123 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  240,369 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   80,123 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
   41,283 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   50,457 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   22,935 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   32,109 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
    3,158 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    1,579 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
   12,332 ( 0.00%)          self
    4,737 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
  180,934 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
  279,328 ( 0.00%)              let (value, subst) =
   17,121 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
  421,944 ( 0.00%)              f(infcx, value, subst)
        .                   })
  195,406 ( 0.00%)      }
        .           
  303,960 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  232,695 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
3,268,521 ( 0.03%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   80,123 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   80,123 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
  333,886 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
    1,650 ( 0.00%)          let InferOk { value, obligations } = self;
    6,410 ( 0.00%)          for obligation in obligations {
      221 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   57,441 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  229,764 ( 0.00%)          self.obligations
   57,441 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
  131,034 ( 0.00%)      }
        .           
1,345,136 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
1,513,278 ( 0.02%)          t.fold_with(&mut self.freshener())
1,513,278 ( 0.02%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      496 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      992 ( 0.00%)          match *ty.kind() {
      243 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      972 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        5 ( 0.00%)              _ => None,
        .                   }
      992 ( 0.00%)      }
        .           
  168,142 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
  168,142 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  326,208 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  326,208 ( 0.00%)      }
        .           
    6,464 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    3,232 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    3,232 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      486 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      618 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        5 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
   11,312 ( 0.00%)      }
        .           
  472,197 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
1,892,620 ( 0.02%)          CombineFields {
        .                       infcx: self,
4,731,550 ( 0.05%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
  472,197 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
       16 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   19,962 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
       18 ( 0.00%)      }
        .           
2,687,526 ( 0.03%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
8,062,578 ( 0.08%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
1,343,763 ( 0.01%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
5,375,052 ( 0.05%)      }
        .           
9,284,902 ( 0.09%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  844,082 ( 0.01%)              undo_snapshot,
  844,082 ( 0.01%)              region_constraints_snapshot,
  844,082 ( 0.01%)              universe,
  844,082 ( 0.01%)              was_in_snapshot,
1,688,164 ( 0.02%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
  844,082 ( 0.01%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
7,495,215 ( 0.08%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  499,681 ( 0.01%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  499,681 ( 0.01%)              was_in_snapshot,
  999,362 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
  417,426 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  532,169 ( 0.01%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   48,379 ( 0.00%)          let snapshot = self.start_snapshot();
  216,865 ( 0.00%)          let r = f(&snapshot);
  338,653 ( 0.00%)          self.commit_from(snapshot);
  334,331 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
7,374,427 ( 0.07%)      #[instrument(skip(self, f), level = "debug")]
9,029,403 ( 0.09%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  969,787 ( 0.01%)          let snapshot = self.start_snapshot();
4,147,585 ( 0.04%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  568,520 ( 0.01%)          match r {
        .                       Ok(_) => {
3,541,337 ( 0.04%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
4,733,704 ( 0.05%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
4,883,583 ( 0.05%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
2,641,272 ( 0.03%)      #[instrument(skip(self, f), level = "debug")]
2,891,171 ( 0.03%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
  781,012 ( 0.01%)          let snapshot = self.start_snapshot();
1,209,113 ( 0.01%)          let r = f(&snapshot);
3,494,371 ( 0.04%)          self.rollback_to("probe", snapshot);
   94,112 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
    7,713 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   10,284 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    1,714 ( 0.00%)          let snapshot = self.start_snapshot();
      857 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
    1,714 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
    3,428 ( 0.00%)          let r = f(&snapshot);
    7,713 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
   10,284 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  483,834 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
  967,668 ( 0.01%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  725,751 ( 0.01%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      624 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      468 ( 0.00%)      }
        .           
   23,460 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
   17,595 ( 0.00%)      }
        .           
   72,840 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
   65,556 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
       40 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
       40 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       region,
        .                       in_regions,
        .                   );
        .               }
        .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
      225 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
      150 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
      375 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
      300 ( 0.00%)      }
        .           
   10,332 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      861 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      861 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    6,394 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    1,520 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    1,520 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
      101 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      202 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    7,749 ( 0.00%)      }
        .           
   28,200 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   23,500 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
   18,800 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
      103 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      206 ( 0.00%)      }
        .           
   46,278 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  231,390 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   69,417 ( 0.00%)      }
        .           
   35,980 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  156,824 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   53,970 ( 0.00%)      }
        .           
    4,622 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
   25,421 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    2,311 ( 0.00%)          self.tcx.mk_ty_var(vid)
    6,933 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      870 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      522 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      696 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   15,245 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  570,507 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   30,490 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  255,894 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
1,663,311 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  639,735 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
  383,841 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
   27,966 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   41,949 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
   12,574 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   18,861 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   22,346 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   44,692 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      703 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    5,113 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    1,406 ( 0.00%)      }
        .           
2,732,824 ( 0.03%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
1,576,329 ( 0.02%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
   65,843 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
1,102,408 ( 0.01%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
1,378,010 ( 0.01%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  275,602 ( 0.00%)                              param.name,
  275,602 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
  275,602 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    1,738 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      158 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    1,264 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
  289,350 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
2,258,230 ( 0.02%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
  192,900 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    3,598 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
  119,687 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    5,397 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  124,943 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
  339,131 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
   17,849 ( 0.00%)              assert!(
   53,547 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
   17,849 ( 0.00%)          };
        .           
        .                   let region_rels =
   17,849 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
  160,641 ( 0.00%)          let (lexical_region_resolutions, errors) =
  428,376 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   71,396 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   17,849 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
  160,641 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  178,490 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
   35,698 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   53,547 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
   35,698 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   89,245 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
        .               /// region constraints as normal, but then we take them and
        .               /// translate them into the form that the NLL solver
        .               /// understands. See the NLL module for mode details.
      114 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
       38 ( 0.00%)          assert!(
        .                       self.inner.borrow().region_obligations.is_empty(),
        .                       "region_obligations not empty: {:#?}",
        .                       self.inner.borrow().region_obligations
        .                   );
        .           
      152 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
      190 ( 0.00%)      }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
  100,732 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    7,800 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
   29,640 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
    1,560 ( 0.00%)              .into_infos_and_data();
    1,560 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
   12,480 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
   21,242 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   63,726 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   74,347 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  599,620 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   26,848 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   40,272 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
   19,116 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  648,975 ( 0.01%)          if !value.needs_infer() {
1,142,574 ( 0.01%)              return value; // Avoid duplicated subst-folding.
        .                   }
  605,505 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  630,067 ( 0.01%)          value.fold_with(&mut r)
   17,896 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   17,973 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  186,561 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
5,438,291 ( 0.05%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   11,982 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   61,208 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
   22,953 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
  130,067 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
   53,557 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    1,220 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    2,440 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    1,830 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
2,702,345 ( 0.03%)          self.universe.get()
  607,861 ( 0.01%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
    5,048 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    5,062 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
    5,048 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
        .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
        .               /// returned.
        .               ///
        .               /// This handles inferences variables within both `param_env` and `substs` by
        .               /// performing the operation on their respective canonical forms.
       26 ( 0.00%)      pub fn const_eval_resolve(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   unevaluated: ty::Unevaluated<'tcx>,
        .                   span: Option<Span>,
        .               ) -> EvalToConstValueResult<'tcx> {
        2 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
        .           
        .                   // Postpone the evaluation of constants whose substs depend on inference
        .                   // variables
        .                   if substs.has_infer_types_or_consts() {
        .                       return Err(ErrorHandled::TooGeneric);
        .                   }
        .           
        2 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
        6 ( 0.00%)          let substs_erased = self.tcx.erase_regions(substs);
        .           
        .                   let unevaluated = ty::Unevaluated {
        .                       def: unevaluated.def,
        .                       substs: substs_erased,
        4 ( 0.00%)              promoted: unevaluated.promoted,
        .                   };
        .           
        .                   // The return value is the evaluated value which doesn't contain any reference to inference
        .                   // variables, thus we don't need to substitute back the original values.
       24 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
       18 ( 0.00%)      }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
8,666,704 ( 0.09%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
4,629,715 ( 0.05%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
2,576,644 ( 0.03%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
   12,000 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    3,843 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
9,750,042 ( 0.10%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  650,602 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
    4,194 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   15,138 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
   15,138 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    1,330 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  143,991 ( 0.00%)          match *ty.kind() {
   31,670 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       84 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
    1,330 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1751 ----------------------------------------
        .           }
        .           
        .           struct ShallowResolver<'a, 'tcx> {
        .               infcx: &'a InferCtxt<'a, 'tcx>,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        4 ( 0.00%)          self.infcx.tcx
        2 ( 0.00%)      }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
1,548,692 ( 0.02%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
      932 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      896 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    1,075 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
      645 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    1,165 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
        2 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
        5 ( 0.00%)          match *self {
        1 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   54,798 ( 0.00%)          match *cause.code() {
    5,890 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   29,450 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

7,798,437 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
    3,086 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
   13,366 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
   12,332 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
   20,892 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
2,235,992 ( 0.02%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
  664,290 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   72,330 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
3,217,048 ( 0.03%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  804,262 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
3,217,048 ( 0.03%)      }
        .           
3,733,567 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
   81,653 ( 0.00%)          each_child(move_path_index);
        .           
2,824,535 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  310,029 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  733,990 ( 0.01%)          while let Some(child_index) = next_child_index {
  190,938 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
   31,823 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
3,135,404 ( 0.03%)      }
2,165,606 ( 0.02%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  175,826 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
  107,340 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
   26,835 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
   21,384 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
  163,341 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
   26,787 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
  105,465 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
    9,444 ( 0.00%)      for arg in body.args_iter() {
   29,196 ( 0.00%)          let place = mir::Place::from(arg);
   43,794 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
   20,532 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   75,552 ( 0.00%)  }
        .           
3,738,627 ( 0.04%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  149,628 ( 0.00%)      for mi in &move_data.loc_map[loc] {
  905,207 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  249,062 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
   81,503 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
2,924,216 ( 0.03%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  149,628 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  421,112 ( 0.00%)          let init = move_data.inits[*ii];
  259,274 ( 0.00%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
   14,424 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
    6,010 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
    5,224 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
      590 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    2,360 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
    1,770 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
      590 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
      586 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
    9,616 ( 0.00%)  }

2,624,324 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .           
         .               /// Returns a static string we can use for printouts.
         .               fn tag(&self) -> &'static str;
         .           
         .               /// Returns `true` if the value `a` is the "expected" type in the
         .               /// relation. Just affects error messages.
         .               fn a_is_expected(&self) -> bool;
         .           
     4,540 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
         .               where
         .                   F: FnOnce(&mut Self) -> R,
         .               {
         .                   f(self)
     3,998 ( 0.00%)      }
         .           
         .               /// Generic relation routine suitable for most anything.
   521,370 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
 4,096,869 ( 0.04%)          Relate::relate(self, a, b)
   428,090 ( 0.00%)      }
         .           
         .               /// Relate the two substitutions for the given item. The default
         .               /// is to look up the variance for the item and proceed
         .               /// accordingly.
    72,110 ( 0.00%)      fn relate_item_substs(
         .                   &mut self,
         .                   item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
         .                   debug!(
         .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
         .                       item_def_id, a_subst, b_subst
         .                   );
         .           
         .                   let tcx = self.tcx();
         .                   let opt_variances = tcx.variances_of(item_def_id);
    28,844 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
    64,899 ( 0.00%)      }
         .           
         .               /// Switch variance for the purpose of relating `a` and `b`.
         .               fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   variance: ty::Variance,
         .                   info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self>;
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Relate impls
         .           
   196,704 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: ty::TypeAndMut<'tcx>,
         .               b: ty::TypeAndMut<'tcx>,
         .               base_ty: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
         .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
    88,282 ( 0.00%)      if a.mutbl != b.mutbl {
     1,002 ( 0.00%)          Err(TypeError::Mutability)
         .               } else {
         .                   let mutbl = a.mutbl;
         .                   let (variance, info) = match mutbl {
         .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
         .                       ast::Mutability::Mut => {
         .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
         .                       }
         .                   };
     9,689 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
    87,550 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
         .               }
   243,002 ( 0.00%)  }
         .           
     1,915 ( 0.00%)  pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               variances: Option<(DefId, &[ty::Variance])>,
         .               a_subst: SubstsRef<'tcx>,
         .               b_subst: SubstsRef<'tcx>,
         .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 2,103,937 ( 0.02%)      let tcx = relation.tcx();
   490,273 ( 0.00%)      let mut cached_ty = None;
         .           
         .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
 2,981,623 ( 0.03%)          let (variance, variance_info) = match variances {
    49,634 ( 0.00%)              Some((ty_def_id, variances)) => {
    74,451 ( 0.00%)                  let variance = variances[i];
    24,817 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
         .                               let ty =
     9,099 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
         .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
         .                           } else {
         .                               ty::VarianceDiagInfo::default()
         .                           };
         .                           (variance, variance_info)
         .                       }
         .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
         .                   };
   612,609 ( 0.01%)          relation.relate_with_variance(variance, variance_info, a, b)
         .               });
         .           
         .               tcx.mk_substs(params)
     2,298 ( 0.00%)  }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
     9,802 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::FnSig<'tcx>,
         .                   b: ty::FnSig<'tcx>,
         .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
         .                   let tcx = relation.tcx();
         .           
     4,524 ( 0.00%)          if a.c_variadic != b.c_variadic {
         .                       return Err(TypeError::VariadicMismatch(expected_found(
         .                           relation,
         .                           a.c_variadic,
         .                           b.c_variadic,
         .                       )));
         .                   }
     4,204 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
         .                   let abi = relation.relate(a.abi, b.abi)?;
         .           
     6,192 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
         .                       return Err(TypeError::ArgCount);
         .                   }
         .           
     6,786 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
     3,081 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
     6,032 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
     1,351 ( 0.00%)              .map(|((a, b), is_output)| {
     1,351 ( 0.00%)                  if is_output {
        68 ( 0.00%)                      relation.relate(a, b)
         .                           } else {
         .                               relation.relate_with_variance(
         .                                   ty::Contravariant,
         .                                   ty::VarianceDiagInfo::default(),
         .                                   a,
         .                                   b,
         .                               )
         .                           }
         .                       })
         .                       .enumerate()
     3,727 ( 0.00%)              .map(|(i, r)| match r {
         .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
         .                               Err(TypeError::ArgumentSorts(exp_found, i))
         .                           }
         .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
         .                               Err(TypeError::ArgumentMutability(i))
         .                           }
     7,462 ( 0.00%)                  r => r,
         .                       });
     5,872 ( 0.00%)          Ok(ty::FnSig {
         .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
       754 ( 0.00%)              c_variadic: a.c_variadic,
         .                       unsafety,
         .                       abi,
         .                   })
     6,786 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::BoundConstness,
         .                   b: ty::BoundConstness,
         .               ) -> RelateResult<'tcx, ty::BoundConstness> {
        11 ( 0.00%)          if a != b {
         .                       Err(TypeError::ConstnessMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ast::Unsafety,
         .                   b: ast::Unsafety,
         .               ) -> RelateResult<'tcx, ast::Unsafety> {
       754 ( 0.00%)          if a != b {
         .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
         .                   a: abi::Abi,
         .                   b: abi::Abi,
         .               ) -> RelateResult<'tcx, abi::Abi> {
         .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
   483,949 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ProjectionTy<'tcx>,
         .                   b: ty::ProjectionTy<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
   123,562 ( 0.00%)          if a.item_def_id != b.item_def_id {
    11,757 ( 0.00%)              Err(TypeError::ProjectionMismatched(expected_found(
         .                           relation,
         .                           a.item_def_id,
         .                           b.item_def_id,
         .                       )))
         .                   } else {
         .                       let substs = relation.relate(a.substs, b.substs)?;
    94,748 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
         .                   }
   325,242 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialProjection<'tcx>,
         .                   b: ty::ExistentialProjection<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
-- line 286 ----------------------------------------
-- line 304 ----------------------------------------
         .                           b.substs,
         .                       )?;
         .                       Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
 5,527,677 ( 0.06%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitRef<'tcx>,
         .                   b: ty::TraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
         .                   // Different traits cannot be related.
 1,184,948 ( 0.01%)          if a.def_id != b.def_id {
       177 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
   394,963 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   648,780 ( 0.01%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
         .                   }
 3,553,460 ( 0.04%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
     1,122 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialTraitRef<'tcx>,
         .                   b: ty::ExistentialTraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
         .                   // Different traits cannot be related.
     1,932 ( 0.00%)          if a.def_id != b.def_id {
         .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
       848 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
     1,084 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
         .                   }
       714 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Debug, Clone, TypeFoldable)]
         .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
         .           
         .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
-- line 348 ----------------------------------------
-- line 358 ----------------------------------------
         .           
         .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
         .               #[inline]
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
 1,677,218 ( 0.02%)          relation.tys(a, b)
         .               }
         .           }
         .           
         .           /// The main "type relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
 4,184,816 ( 0.04%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: Ty<'tcx>,
         .               b: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, Ty<'tcx>> {
         .               let tcx = relation.tcx();
         .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
 9,383,464 ( 0.09%)      match (a.kind(), b.kind()) {
         .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_tys")
         .                   }
         .           
         .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
         .                       bug!("bound types encountered in super_relate_tys")
         .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
         .           
         .                   (&ty::Never, _)
         .                   | (&ty::Char, _)
         .                   | (&ty::Bool, _)
         .                   | (&ty::Int(_), _)
         .                   | (&ty::Uint(_), _)
         .                   | (&ty::Float(_), _)
         .                   | (&ty::Str, _)
    16,303 ( 0.00%)              if a == b =>
         .                   {
         .                       Ok(a)
         .                   }
         .           
   561,695 ( 0.01%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
         .           
         .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
         .           
   531,096 ( 0.01%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
   181,461 ( 0.00%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
         .                       Ok(tcx.mk_adt(a_def, substs))
         .                   }
         .           
        10 ( 0.00%)          (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
         .           
     4,508 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
     1,288 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
         .                           relation.relate_with_variance(
         .                               ty::Contravariant,
         .                               ty::VarianceDiagInfo::default(),
       644 ( 0.00%)                      a_region,
         .                               b_region,
         .                           )
         .                       })?;
         .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
         .                   }
         .           
         .                   (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
         .                       if a_id == b_id =>
-- line 428 ----------------------------------------
-- line 439 ----------------------------------------
         .                       // inside the binder so we can related them
         .                       let a_types = a_types.map_bound(GeneratorWitness);
         .                       let b_types = b_types.map_bound(GeneratorWitness);
         .                       // Then remove the GeneratorWitness for the result
         .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
         .                       Ok(tcx.mk_generator_witness(types))
         .                   }
         .           
     2,528 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
         .                       // All Closure types with the same id represent
         .                       // the (anonymous) type of the same closure expression. So
         .                       // all of their regions should be equated.
       632 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
         .                       Ok(tcx.mk_closure(a_id, &substs))
         .                   }
         .           
     4,998 ( 0.00%)          (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
     3,185 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ptr(mt))
         .                   }
         .           
 1,018,040 ( 0.01%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
   146,930 ( 0.00%)              let r = relation.relate_with_variance(
         .                           ty::Contravariant,
         .                           ty::VarianceDiagInfo::default(),
         .                           a_r,
         .                           b_r,
         .                       )?;
         .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
         .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
   217,544 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ref(r, mt))
         .                   }
         .           
       245 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
        54 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
        98 ( 0.00%)              match relation.relate(sz_a, sz_b) {
       147 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
         .                           Err(err) => {
         .                               // Check whether the lengths are both concrete/known values,
         .                               // but are unequal, for better diagnostics.
         .                               //
         .                               // It might seem dubious to eagerly evaluate these constants here,
         .                               // we however cannot end up with errors in `Relate` during both
         .                               // `type_of` and `predicates_of`. This means that evaluating the
         .                               // constants should not cause cycle errors here.
-- line 484 ----------------------------------------
-- line 489 ----------------------------------------
         .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
         .                                   ),
         .                                   _ => Err(err),
         .                               }
         .                           }
         .                       }
         .                   }
         .           
     6,201 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
        16 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
         .                       Ok(tcx.mk_slice(t))
         .                   }
         .           
    29,996 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
    29,996 ( 0.00%)              if as_.len() == bs.len() {
         .                           Ok(tcx.mk_tup(
   157,194 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
         .                           )?)
     9,258 ( 0.00%)              } else if !(as_.is_empty() || bs.is_empty()) {
    12,208 ( 0.00%)                  Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
         .                       } else {
         .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
         .                       }
         .                   }
         .           
     4,014 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
     6,690 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
     5,352 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
         .                       Ok(tcx.mk_fn_def(a_def_id, substs))
         .                   }
         .           
         .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
     9,822 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
         .                       Ok(tcx.mk_fn_ptr(fty))
         .                   }
         .           
         .                   // these two are already handled downstream in case of lazy normalization
   172,395 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
         .                       let projection_ty = relation.relate(a_data, b_data)?;
         .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
         .                   }
         .           
       766 ( 0.00%)          (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
     1,915 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
     2,298 ( 0.00%)              let substs = relate_substs(relation, None, a_substs, b_substs)?;
         .                       Ok(tcx.mk_opaque(a_def_id, substs))
         .                   }
         .           
         .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
         .               }
 4,707,918 ( 0.05%)  }
         .           
         .           /// The main "const relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
       550 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
         .               let tcx = relation.tcx();
         .           
         .               // FIXME(oli-obk): once const generics can have generic types, this assertion
         .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
       110 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
       110 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
        55 ( 0.00%)      if a_ty != b_ty {
         .                   relation.tcx().sess.delay_span_bug(
         .                       DUMMY_SP,
         .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
         .                   );
         .               }
         .           
         .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
        55 ( 0.00%)      let a = eagerly_eval(a);
       110 ( 0.00%)      let b = eagerly_eval(b);
         .           
         .               // Currently, the values that can be unified are primitive types,
         .               // and those that derive both `PartialEq` and `Eq`, corresponding
         .               // to structural-match types.
       605 ( 0.00%)      let is_match = match (a.val, b.val) {
         .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
         .                   }
         .           
         .                   (ty::ConstKind::Error(_), _) => return Ok(a),
         .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
         .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
         .                               substs,
         .                               promoted: au.promoted,
         .                           }),
         .                           ty: a.ty,
         .                       }));
         .                   }
         .                   _ => false,
         .               };
       318 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
       495 ( 0.00%)  }
         .           
         .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a_val: ConstValue<'tcx>,
         .               b_val: ConstValue<'tcx>,
         .               // FIXME(oli-obk): these arguments should go away with valtrees
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .               // FIXME(oli-obk): this should just be `bool` with valtrees
         .           ) -> RelateResult<'tcx, bool> {
        55 ( 0.00%)      let tcx = relation.tcx();
       605 ( 0.00%)      Ok(match (a_val, b_val) {
     1,210 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
        55 ( 0.00%)              a_val == b_val
         .                   }
         .                   (
         .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
         .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
         .                   ) => {
         .                       a_val == b_val
         .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
         .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   _ => false,
         .               })
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
     6,440 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
       644 ( 0.00%)          let tcx = relation.tcx();
         .           
         .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
         .                   // We need to perform this deduplication as we sometimes generate duplicate projections
         .                   // in `a`.
         .                   let mut a_v: Vec<_> = a.into_iter().collect();
         .                   let mut b_v: Vec<_> = b.into_iter().collect();
         .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
         .                   a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   a_v.dedup();
         .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   b_v.dedup();
     1,932 ( 0.00%)          if a_v.len() != b_v.len() {
         .                       return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
         .                   }
         .           
     2,576 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
         .                       use crate::ty::ExistentialPredicate::*;
     2,576 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
     2,576 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
         .                               .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
         .                           (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
         .                               relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
         .                           ))),
         .                           (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
         .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
         .                       }
         .                   });
     1,288 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
     5,152 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ClosureSubsts<'tcx>,
         .                   b: ty::ClosureSubsts<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: SubstsRef<'tcx>,
         .                   b: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
    40,197 ( 0.00%)          relate_substs(relation, None, a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   446,099 ( 0.00%)          relation.regions(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
       232 ( 0.00%)          relation.consts(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
     8,662 ( 0.00%)          relation.binders(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
 2,442,387 ( 0.02%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: GenericArg<'tcx>,
         .                   b: GenericArg<'tcx>,
         .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
 3,385,038 ( 0.03%)          match (a.unpack(), b.unpack()) {
         .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
         .                           Ok(relation.relate(a_lt, b_lt)?.into())
         .                       }
         .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
     5,196 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
         .                       }
         .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
         .                           Ok(relation.relate(a_ct, b_ct)?.into())
         .                       }
         .                       (GenericArgKind::Lifetime(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Type(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Const(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                   }
 2,822,453 ( 0.03%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ImplPolarity,
         .                   b: ty::ImplPolarity,
         .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
        11 ( 0.00%)          if a != b {
         .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
       756 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitPredicate<'tcx>,
         .                   b: ty::TraitPredicate<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
        66 ( 0.00%)          Ok(ty::TraitPredicate {
       360 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
        66 ( 0.00%)              constness: relation.relate(a.constness, b.constness)?,
        22 ( 0.00%)              polarity: relation.relate(a.polarity, b.polarity)?,
         .                   })
       624 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
-- line 841 ----------------------------------------
-- line 862 ----------------------------------------
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Error handling
         .           
         .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
         .           where
         .               R: TypeRelation<'tcx>,
         .           {
       116 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
         .           }

12,442,903 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 165 ----------------------------------------
        .           #[rustc_insignificant_dtor]
        .           pub struct BTreeMap<K, V> {
        .               root: Option<Root<K, V>>,
        .               length: usize,
        .           }
        .           
        .           #[stable(feature = "btree_drop", since = "1.7.0")]
        .           unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {
5,416,202 ( 0.05%)      fn drop(&mut self) {
        .                   drop(unsafe { ptr::read(self) }.into_iter())
5,455,021 ( 0.06%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {
        .               fn clone(&self) -> BTreeMap<K, V> {
       60 ( 0.00%)          fn clone_subtree<'a, K: Clone, V: Clone>(
        .                       node: NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>,
        .                   ) -> BTreeMap<K, V>
        .                   where
        .                       K: 'a,
        .                       V: 'a,
        .                   {
        7 ( 0.00%)              match node.force() {
        .                           Leaf(leaf) => {
       19 ( 0.00%)                      let mut out_tree = BTreeMap { root: Some(Root::new()), length: 0 };
        .           
        .                               {
        .                                   let root = out_tree.root.as_mut().unwrap(); // unwrap succeeds because we just wrapped
        .                                   let mut out_node = match root.borrow_mut().force() {
        .                                       Leaf(leaf) => leaf,
        .                                       Internal(_) => unreachable!(),
        .                                   };
        .           
        .                                   let mut in_edge = leaf.first_edge();
        .                                   while let Ok(kv) = in_edge.right_kv() {
        .                                       let (k, v) = kv.into_kv();
        .                                       in_edge = kv.right_edge();
        .           
       22 ( 0.00%)                              out_node.push(k.clone(), v.clone());
       58 ( 0.00%)                              out_tree.length += 1;
        .                                   }
        .                               }
        .           
       29 ( 0.00%)                      out_tree
        .                           }
        .                           Internal(internal) => {
        .                               let mut out_tree = clone_subtree(internal.first_edge().descend());
        .           
        .                               {
        .                                   let out_root = BTreeMap::ensure_is_owned(&mut out_tree.root);
        .                                   let mut out_node = out_root.push_internal_level();
        .                                   let mut in_edge = internal.first_edge();
-- line 217 ----------------------------------------
-- line 235 ----------------------------------------
        .                                       out_node.push(k, v, subroot.unwrap_or_else(Root::new));
        .                                       out_tree.length += 1 + sublength;
        .                                   }
        .                               }
        .           
        .                               out_tree
        .                           }
        .                       }
       56 ( 0.00%)          }
        .           
        8 ( 0.00%)          if self.is_empty() {
        .                       BTreeMap::new()
        .                   } else {
       20 ( 0.00%)              clone_subtree(self.root.as_ref().unwrap().reborrow()) // unwrap succeeds because not empty
        .                   }
        .               }
        .           }
        .           
        .           impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>
        .           where
        .               K: Borrow<Q> + Ord,
        .               Q: Ord,
-- line 256 ----------------------------------------
-- line 515 ----------------------------------------
        .               ///
        .               /// // entries can now be inserted into the empty map
        .               /// map.insert(1, "a");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               #[must_use]
        .               pub const fn new() -> BTreeMap<K, V> {
2,222,094 ( 0.02%)          BTreeMap { root: None, length: 0 }
        .               }
        .           
        .               /// Clears the map, removing all elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 531 ----------------------------------------
-- line 560 ----------------------------------------
        .               /// assert_eq!(map.get(&2), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get<Q: ?Sized>(&self, key: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
    4,355 ( 0.00%)          let root_node = self.root.as_ref()?.reborrow();
   14,758 ( 0.00%)          match root_node.search_tree(key) {
      144 ( 0.00%)              Found(handle) => Some(handle.into_kv().1),
        .                       GoDown(_) => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but the ordering
        .               /// on the borrowed form *must* match the ordering on the key type.
-- line 578 ----------------------------------------
-- line 848 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,602 ( 0.00%)      pub fn insert(&mut self, key: K, value: V) -> Option<V>
        .               where
        .                   K: Ord,
        .               {
        .                   match self.entry(key) {
        .                       Occupied(mut entry) => Some(entry.insert(value)),
        .                       Vacant(entry) => {
    1,614 ( 0.00%)                  entry.insert(value);
        3 ( 0.00%)                  None
        .                       }
        .                   }
    1,072 ( 0.00%)      }
        .           
        .               /// Tries to insert a key-value pair into the map, and returns
        .               /// a mutable reference to the value in the entry.
        .               ///
        .               /// If the map already had this key present, nothing is updated, and
        .               /// an error containing the occupied entry and the value is returned.
        .               ///
        .               /// # Examples
-- line 875 ----------------------------------------
-- line 914 ----------------------------------------
        .               /// use std::collections::BTreeMap;
        .               ///
        .               /// let mut map = BTreeMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
1,118,608 ( 0.01%)      pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
  699,130 ( 0.01%)          self.remove_entry(key).map(|(_, v)| v)
1,258,434 ( 0.01%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the key
        .               /// was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but the ordering
        .               /// on the borrowed form *must* match the ordering on the key type.
        .               ///
        .               /// # Examples
-- line 936 ----------------------------------------
-- line 947 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "btreemap_remove_entry", since = "1.45.0")]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, key: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
        .                   let (map, dormant_map) = DormantMutRef::new(self);
  139,826 ( 0.00%)          let root_node = map.root.as_mut()?.borrow_mut();
  699,130 ( 0.01%)          match root_node.search_tree(key) {
        .                       Found(handle) => {
  279,652 ( 0.00%)                  Some(OccupiedEntry { handle, dormant_map, _marker: PhantomData }.remove_entry())
  139,826 ( 0.00%)              }
        .                       GoDown(_) => None,
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.
        .               /// The elements are visited in ascending key order.
-- line 967 ----------------------------------------
-- line 1135 ----------------------------------------
        .               /// // count the number of occurrences of letters in the vec
        .               /// for x in ["a", "b", "a", "c", "a", "b"] {
        .               ///     *count.entry(x).or_insert(0) += 1;
        .               /// }
        .               ///
        .               /// assert_eq!(count["a"], 3);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
       30 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V>
        .               where
        .                   K: Ord,
        .               {
        .                   // FIXME(@porglezomp) Avoid allocating if we don't insert
        .                   let (map, dormant_map) = DormantMutRef::new(self);
        .                   let root_node = Self::ensure_is_owned(&mut map.root).borrow_mut();
  502,877 ( 0.01%)          match root_node.search_tree(&key) {
    3,938 ( 0.00%)              Found(handle) => Occupied(OccupiedEntry { handle, dormant_map, _marker: PhantomData }),
        .                       GoDown(handle) => {
  109,728 ( 0.00%)                  Vacant(VacantEntry { key, handle, dormant_map, _marker: PhantomData })
        .                       }
        .                   }
       27 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given key. Returns everything after the given key,
        .               /// including the key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 1164 ----------------------------------------
-- line 1307 ----------------------------------------
        .               }
        .           
        .               /// Makes a `BTreeMap` from a sorted iterator.
        .               pub(crate) fn bulk_build_from_sorted_iter<I>(iter: I) -> Self
        .               where
        .                   K: Ord,
        .                   I: IntoIterator<Item = (K, V)>,
        .               {
        6 ( 0.00%)          let mut root = Root::new();
        3 ( 0.00%)          let mut length = 0;
       15 ( 0.00%)          root.bulk_push(DedupSortedIter::new(iter.into_iter()), &mut length);
        6 ( 0.00%)          BTreeMap { root: Some(root), length }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {
        .               type Item = (&'a K, &'a V);
        .               type IntoIter = Iter<'a, K, V>;
        .           
-- line 1326 ----------------------------------------
-- line 1328 ----------------------------------------
        .                   self.iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
       14 ( 0.00%)      fn next(&mut self) -> Option<(&'a K, &'a V)> {
  444,114 ( 0.00%)          if self.length == 0 {
        .                       None
        .                   } else {
  144,753 ( 0.00%)              self.length -= 1;
        .                       Some(unsafe { self.range.next_unchecked() })
        .                   }
       23 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.length, Some(self.length))
        .               }
        .           
        .               fn last(mut self) -> Option<(&'a K, &'a V)> {
        .                   self.next_back()
        .               }
-- line 1351 ----------------------------------------
-- line 1460 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> IntoIterator for BTreeMap<K, V> {
        .               type Item = (K, V);
        .               type IntoIter = IntoIter<K, V>;
        .           
        .               fn into_iter(self) -> IntoIter<K, V> {
        .                   let mut me = ManuallyDrop::new(self);
2,029,792 ( 0.02%)          if let Some(root) = me.root.take() {
        .                       let full_range = root.into_dying().full_range();
        .           
       18 ( 0.00%)              IntoIter { range: full_range, length: me.length }
        .                   } else {
1,470,657 ( 0.01%)              IntoIter { range: LazyLeafRange::none(), length: 0 }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "btree_drop", since = "1.7.0")]
        .           impl<K, V> Drop for IntoIter<K, V> {
   23,706 ( 0.00%)      fn drop(&mut self) {
        .                   struct DropGuard<'a, K, V>(&'a mut IntoIter<K, V>);
        .           
        .                   impl<'a, K, V> Drop for DropGuard<'a, K, V> {
        .                       fn drop(&mut self) {
        .                           // Continue the same loop we perform below. This only runs when unwinding, so we
        .                           // don't have to care about panics this time (they'll abort).
        .                           while let Some(kv) = self.0.dying_next() {
        .                               // SAFETY: we consume the dying handle immediately.
        .                               unsafe { kv.drop_key_val() };
        .                           }
        .                       }
        .                   }
        .           
  588,235 ( 0.01%)          while let Some(kv) = self.dying_next() {
        .                       let guard = DropGuard(self);
        .                       // SAFETY: we don't touch the tree before consuming the dying handle.
   19,779 ( 0.00%)              unsafe { kv.drop_key_val() };
        .                       mem::forget(guard);
        .                   }
   23,706 ( 0.00%)      }
        .           }
        .           
        .           impl<K, V> IntoIter<K, V> {
        .               /// Core of a `next` method returning a dying KV handle,
        .               /// invalidated by further calls to this function and some others.
  981,114 ( 0.01%)      fn dying_next(
        .                   &mut self,
        .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {
2,306,295 ( 0.02%)          if self.length == 0 {
        .                       self.range.deallocating_end();
  233,958 ( 0.00%)              None
        .                   } else {
  108,840 ( 0.00%)              self.length -= 1;
  101,316 ( 0.00%)              Some(unsafe { self.range.deallocating_next_unchecked() })
        .                   }
  981,110 ( 0.01%)      }
        .           
        .               /// Core of a `next_back` method returning a dying KV handle,
        .               /// invalidated by further calls to this function and some others.
        .               fn dying_next_back(
        .                   &mut self,
        .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {
        .                   if self.length == 0 {
        .                       self.range.deallocating_end();
-- line 1524 ----------------------------------------
-- line 1529 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> Iterator for IntoIter<K, V> {
        .               type Item = (K, V);
        .           
   14,014 ( 0.00%)      fn next(&mut self) -> Option<(K, V)> {
        .                   // SAFETY: we consume the dying handle immediately.
        .                   self.dying_next().map(unsafe { |kv| kv.into_key_val() })
   16,016 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    1,868 ( 0.00%)          (self.length, Some(self.length))
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> DoubleEndedIterator for IntoIter<K, V> {
        .               fn next_back(&mut self) -> Option<(K, V)> {
        .                   // SAFETY: we consume the dying handle immediately.
        .                   self.dying_next_back().map(unsafe { |kv| kv.into_key_val() })
-- line 1551 ----------------------------------------
-- line 1562 ----------------------------------------
        .           #[stable(feature = "fused", since = "1.26.0")]
        .           impl<K, V> FusedIterator for IntoIter<K, V> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               fn next(&mut self) -> Option<&'a K> {
       10 ( 0.00%)          self.inner.next().map(|(k, _)| k)
        .               }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           
        .               fn last(mut self) -> Option<&'a K> {
        .                   self.next_back()
-- line 1578 ----------------------------------------
-- line 2089 ----------------------------------------
        .               ///     println!("{}: {}", key, value);
        .               /// }
        .               ///
        .               /// let (first_key, first_value) = map.iter().next().unwrap();
        .               /// assert_eq!((*first_key, *first_value), (1, "a"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn iter(&self) -> Iter<'_, K, V> {
  692,855 ( 0.01%)          if let Some(root) = &self.root {
        .                       let full_range = root.reborrow().full_range();
        .           
      234 ( 0.00%)              Iter { range: full_range, length: self.length }
        .                   } else {
        6 ( 0.00%)              Iter { range: LazyLeafRange::none(), length: 0 }
        .                   }
        .               }
        .           
        .               /// Gets a mutable iterator over the entries of the map, sorted by key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
-- line 2110 ----------------------------------------
-- line 2149 ----------------------------------------
        .               /// a.insert(2, "b");
        .               /// a.insert(1, "a");
        .               ///
        .               /// let keys: Vec<_> = a.keys().cloned().collect();
        .               /// assert_eq!(keys, [1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
    9,459 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// Gets an iterator over the values of the map, in order by key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 2165 ----------------------------------------
-- line 2217 ----------------------------------------
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               pub const fn len(&self) -> usize {
      161 ( 0.00%)          self.length
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 2233 ----------------------------------------
-- line 2238 ----------------------------------------
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               pub const fn is_empty(&self) -> bool {
  432,941 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// If the root node is the empty (non-allocated) root node, allocate our
        .               /// own node. Is an associated function to avoid borrowing the entire BTreeMap.
        .               fn ensure_is_owned(root: &mut Option<Root<K, V>>) -> &mut Root<K, V> {
        .                   root.get_or_insert_with(Root::new)
        .               }
        .           }
-- line 2254 ----------------------------------------

  553,726 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .               PushRegionObligation,
         .           }
         .           
         .           macro_rules! impl_from {
         .               ($($ctor: ident ($ty: ty),)*) => {
         .                   $(
         .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
         .                       fn from(x: $ty) -> Self {
    26,865 ( 0.00%)                  UndoLog::$ctor(x.into())
         .                       }
         .                   }
         .                   )*
         .               }
         .           }
         .           
         .           // Upcast from a single kind of "undoable action" to the general enum
         .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
         .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
         .           
         .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
         .               ProjectionCache(traits::UndoLog<'tcx>),
         .           }
         .           
         .           /// The Rollback trait defines how to rollback a particular action.
         .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
 3,872,484 ( 0.04%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 6,454,140 ( 0.07%)          match undo {
 8,781,450 ( 0.09%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
       340 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
       970 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
         .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
         .                       UndoLog::RegionConstraintCollector(undo) => {
 1,453,389 ( 0.01%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
         .                       }
         .                       UndoLog::RegionUnificationTable(undo) => {
   393,304 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
         .                       }
         .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
         .                       UndoLog::PushRegionObligation => {
         .                           self.region_obligations.pop();
         .                       }
         .                   }
 5,163,312 ( 0.05%)      }
         .           }
         .           
         .           /// The combined undo log for all the various unification tables. For each change to the storage
         .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
         .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
         .               logs: Vec<UndoLog<'tcx>>,
         .               num_open_snapshots: usize,
         .           }
         .           
         .           impl Default for InferCtxtUndoLogs<'_> {
         .               fn default() -> Self {
   160,246 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
         .               }
         .           }
         .           
         .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
         .           /// action that is convertable into an UndoLog (per the From impls above).
         .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
         .           where
         .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
         .           {
         .               #[inline]
         .               fn num_open_snapshots(&self) -> usize {
         .                   self.num_open_snapshots
         .               }
         .           
         .               #[inline]
         .               fn push(&mut self, undo: T) {
   461,840 ( 0.00%)          if self.in_snapshot() {
   214,920 ( 0.00%)              self.logs.push(undo.into())
         .                   }
         .               }
         .           
         .               fn clear(&mut self) {
         .                   self.logs.clear();
         .                   self.num_open_snapshots = 0;
         .               }
         .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
         .               {
         .                   if self.in_snapshot() {
         .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
 5,064,492 ( 0.05%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
         .                   debug!("rollback_to({})", snapshot.undo_len);
         .                   self.undo_log.assert_open_snapshot(&snapshot);
         .           
 5,560,648 ( 0.06%)          while self.undo_log.logs.len() > snapshot.undo_len {
         .                       let undo = self.undo_log.logs.pop().unwrap();
15,489,936 ( 0.16%)              self.reverse(undo);
         .                   }
         .           
 1,836,939 ( 0.02%)          if self.undo_log.num_open_snapshots == 1 {
         .                       // The root snapshot. It's safe to clear the undo log because
         .                       // there's no snapshot further out that we might need to roll back
         .                       // to.
   291,330 ( 0.00%)              assert!(snapshot.undo_len == 0);
         .                       self.undo_log.logs.clear();
         .                   }
         .           
 2,677,911 ( 0.03%)          self.undo_log.num_open_snapshots -= 1;
 5,908,574 ( 0.06%)      }
         .           
         .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
         .                   debug!("commit({})", snapshot.undo_len);
         .           
 1,499,043 ( 0.02%)          if self.undo_log.num_open_snapshots == 1 {
         .                       // The root snapshot. It's safe to clear the undo log because
         .                       // there's no snapshot further out that we might need to roll back
         .                       // to.
   325,358 ( 0.00%)              assert!(snapshot.undo_len == 0);
         .                       self.undo_log.logs.clear();
         .                   }
         .           
 1,661,722 ( 0.02%)          self.undo_log.num_open_snapshots -= 1;
         .               }
         .           }
         .           
         .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
         .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
 5,375,052 ( 0.05%)          self.num_open_snapshots += 1;
         .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
         .               }
         .           
         .               pub(crate) fn region_constraints_in_snapshot(
         .                   &self,
         .                   s: &Snapshot<'tcx>,
         .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
   397,770 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
         .                       UndoLog::RegionConstraintCollector(log) => Some(log),
         .                       _ => None,
         .                   })
         .               }
         .           
         .               pub(crate) fn region_constraints(
         .                   &self,
         .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
     1,939 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
         .                       UndoLog::RegionConstraintCollector(log) => Some(log),
         .                       _ => None,
         .                   })
         .               }
         .           
         .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
         .                   // Failures here may indicate a failure to follow a stack discipline.
 2,532,246 ( 0.03%)          assert!(self.logs.len() >= snapshot.undo_len);
 2,532,246 ( 0.03%)          assert!(self.num_open_snapshots > 0);
         .               }
         .           }
         .           
         .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
         .               type Output = UndoLog<'tcx>;
         .           
         .               fn index(&self, key: usize) -> &Self::Output {
         .                   &self.logs[key]
-- line 204 ----------------------------------------

 2,679,333 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 39 ----------------------------------------
        .               pub fn canonicalize_query<V>(
        .                   &self,
        .                   value: V,
        .                   query_state: &mut OriginalQueryValues<'tcx>,
        .               ) -> Canonicalized<'tcx, V>
        .               where
        .                   V: TypeFoldable<'tcx>,
        .               {
   50,706 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
        .           
  250,941 ( 0.00%)          Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)
        .               }
        .           
        .               /// Canonicalizes a query *response* `V`. When we canonicalize a
        .               /// query response, we only canonicalize unbound inference
        .               /// variables, and we leave other free regions alone. So,
        .               /// continuing with the example from `canonicalize_query`, if
        .               /// there was an input query `T: Trait<'static>`, it would have
        .               /// been canonicalized to
-- line 57 ----------------------------------------
-- line 69 ----------------------------------------
        .               /// things) includes a mapping to `'?0 := 'static`. When
        .               /// canonicalizing this query result R, we would leave this
        .               /// reference to `'static` alone.
        .               ///
        .               /// To get a good understanding of what is happening here, check
        .               /// out the [chapter in the rustc dev guide][c].
        .               ///
        .               /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html#canonicalizing-the-query-result
      423 ( 0.00%)      pub fn canonicalize_response<V>(&self, value: V) -> Canonicalized<'tcx, V>
        .               where
        .                   V: TypeFoldable<'tcx>,
        .               {
   54,612 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
  191,142 ( 0.00%)          Canonicalizer::canonicalize(
  321,930 ( 0.00%)              value,
        .                       self,
   27,306 ( 0.00%)              self.tcx,
        .                       &CanonicalizeQueryResponse,
        .                       &mut query_state,
        .                   )
      329 ( 0.00%)      }
        .           
   20,493 ( 0.00%)      pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonicalized<'tcx, V>
        .               where
        .                   V: TypeFoldable<'tcx>,
        .               {
    5,720 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
   20,020 ( 0.00%)          Canonicalizer::canonicalize(
   16,577 ( 0.00%)              value,
        .                       self,
    2,860 ( 0.00%)              self.tcx,
        .                       &CanonicalizeUserTypeAnnotation,
        .                       &mut query_state,
        .                   )
   15,939 ( 0.00%)      }
        .           
        .               /// A variant of `canonicalize_query` that does not
        .               /// canonicalize `'static`. This is useful when
        .               /// the query implementation can perform more efficient
        .               /// handling of `'static` regions (e.g. trait evaluation).
   70,140 ( 0.00%)      pub fn canonicalize_query_keep_static<V>(
        .                   &self,
        .                   value: V,
        .                   query_state: &mut OriginalQueryValues<'tcx>,
        .               ) -> Canonicalized<'tcx, V>
        .               where
        .                   V: TypeFoldable<'tcx>,
        .               {
  152,596 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
        .           
  672,066 ( 0.01%)          Canonicalizer::canonicalize(
   64,724 ( 0.00%)              value,
        .                       self,
   76,298 ( 0.00%)              self.tcx,
        .                       &CanonicalizeFreeRegionsOtherThanStatic,
        .                       query_state,
        .                   )
   70,140 ( 0.00%)      }
        .           }
        .           
        .           /// Controls how we canonicalize "free regions" that are not inference
        .           /// variables. This depends on what we are canonicalizing *for* --
        .           /// e.g., if we are canonicalizing to create a query, we want to
        .           /// replace those with inference variables, since we want to make a
        .           /// maximally general query. But if we are canonicalizing a *query
        .           /// response*, then we don't typically replace free regions, as they
-- line 134 ----------------------------------------
-- line 141 ----------------------------------------
        .               ) -> ty::Region<'tcx>;
        .           
        .               fn any(&self) -> bool;
        .           }
        .           
        .           struct CanonicalizeQueryResponse;
        .           
        .           impl CanonicalizeRegionMode for CanonicalizeQueryResponse {
  204,755 ( 0.00%)      fn canonicalize_free_region<'tcx>(
        .                   &self,
        .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
        .                   r: ty::Region<'tcx>,
        .               ) -> ty::Region<'tcx> {
  122,853 ( 0.00%)          match r {
        .                       ty::ReFree(_)
        .                       | ty::ReErased
        .                       | ty::ReStatic
        .                       | ty::ReEmpty(ty::UniverseIndex::ROOT)
        .                       | ty::ReEarlyBound(..) => r,
        .           
        .                       ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(
        .                           CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(*placeholder) },
        .                           r,
        .                       ),
        .           
        .                       ty::ReVar(vid) => {
   39,476 ( 0.00%)                  let universe = canonicalizer.region_var_universe(*vid);
        .                           canonicalizer.canonical_var_for_region(
        .                               CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },
        .                               r,
        .                           )
        .                       }
        .           
        .                       ty::ReEmpty(ui) => {
        .                           bug!("canonicalizing 'empty in universe {:?}", ui) // FIXME
-- line 175 ----------------------------------------
-- line 188 ----------------------------------------
        .                               tcx.sess.delay_span_bug(
        .                                   rustc_span::DUMMY_SP,
        .                                   &format!("unexpected region in query response: `{:?}`", r),
        .                               );
        .                           });
        .                           r
        .                       }
        .                   }
  204,755 ( 0.00%)      }
        .           
        .               fn any(&self) -> bool {
        .                   false
        .               }
        .           }
        .           
        .           struct CanonicalizeUserTypeAnnotation;
        .           
        .           impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {
    3,474 ( 0.00%)      fn canonicalize_free_region<'tcx>(
        .                   &self,
        .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
        .                   r: ty::Region<'tcx>,
        .               ) -> ty::Region<'tcx> {
    3,474 ( 0.00%)          match r {
        .                       ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReErased | ty::ReStatic => r,
        .                       ty::ReVar(_) => canonicalizer.canonical_var_for_region_in_root_universe(r),
        .                       _ => {
        .                           // We only expect region names that the user can type.
        .                           bug!("unexpected region in query response: `{:?}`", r)
        .                       }
        .                   }
    3,474 ( 0.00%)      }
        .           
        .               fn any(&self) -> bool {
        .                   false
   60,332 ( 0.00%)      }
        .           }
        .           
        .           struct CanonicalizeAllFreeRegions;
        .           
        .           impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {
  169,508 ( 0.00%)      fn canonicalize_free_region<'tcx>(
        .                   &self,
        .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
        .                   r: ty::Region<'tcx>,
        .               ) -> ty::Region<'tcx> {
        .                   canonicalizer.canonical_var_for_region_in_root_universe(r)
  127,131 ( 0.00%)      }
        .           
        .               fn any(&self) -> bool {
        .                   true
  203,302 ( 0.00%)      }
        .           }
        .           
        .           struct CanonicalizeFreeRegionsOtherThanStatic;
        .           
        .           impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {
  596,058 ( 0.01%)      fn canonicalize_free_region<'tcx>(
        .                   &self,
        .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
        .                   r: ty::Region<'tcx>,
        .               ) -> ty::Region<'tcx> {
  397,372 ( 0.00%)          if let ty::ReStatic = r {
        .                       r
        .                   } else {
        .                       canonicalizer.canonical_var_for_region_in_root_universe(r)
        .                   }
  596,058 ( 0.01%)      }
        .           
        .               fn any(&self) -> bool {
        .                   true
        .               }
        .           }
        .           
        .           struct Canonicalizer<'cx, 'tcx> {
        .               infcx: &'cx InferCtxt<'cx, 'tcx>,
-- line 263 ----------------------------------------
-- line 270 ----------------------------------------
        .               canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,
        .               needs_canonical_flags: TypeFlags,
        .           
        .               binder_index: ty::DebruijnIndex,
        .           }
        .           
        .           impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
1,289,241 ( 0.01%)          self.tcx
  658,034 ( 0.01%)      }
        .           
        .               fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
1,270,090 ( 0.01%)          self.binder_index.shift_in(1);
3,009,510 ( 0.03%)          let t = t.super_fold_with(self);
1,256,168 ( 0.01%)          self.binder_index.shift_out(1);
        .                   t
        .               }
        .           
1,133,324 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
1,699,986 ( 0.02%)          match *r {
      159 ( 0.00%)              ty::ReLateBound(index, ..) => {
      159 ( 0.00%)                  if index >= self.binder_index {
        .                               bug!("escaping late-bound region during canonicalization");
        .                           } else {
        .                               r
        .                           }
        .                       }
        .           
        .                       ty::ReVar(vid) => {
  129,091 ( 0.00%)                  let resolved_vid = self
        .                               .infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .unwrap_region_constraints()
        .                               .opportunistic_resolve_var(vid);
        .                           debug!(
        .                               "canonical: region var found with vid {:?}, \
        .                                opportunistically resolved to {:?}",
        .                               vid, r
        .                           );
  516,364 ( 0.01%)                  let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));
  774,546 ( 0.01%)                  self.canonicalize_region_mode.canonicalize_free_region(self, r)
        .                       }
        .           
        .                       ty::ReStatic
        .                       | ty::ReEarlyBound(..)
        .                       | ty::ReFree(_)
        .                       | ty::ReEmpty(_)
        .                       | ty::RePlaceholder(..)
1,540,810 ( 0.02%)              | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),
        .                   }
  775,500 ( 0.01%)      }
        .           
4,444,002 ( 0.04%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
3,741,782 ( 0.04%)          match *t.kind() {
    9,979 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
        .                           debug!("canonical: type var found with vid {:?}", vid);
   39,916 ( 0.00%)                  match self.infcx.probe_ty_var(vid) {
        .                               // `t` could be a float / int variable; canonicalize that instead.
        .                               Ok(t) => {
        .                                   debug!("(resolved to {:?})", t);
        .                                   self.fold_ty(t)
        .                               }
        .           
        .                               // `TyVar(vid)` is unresolved, track its universe index in the canonicalized
        .                               // result.
        .                               Err(mut ui) => {
        .                                   // FIXME: perf problem described in #55921.
        .                                   ui = ty::UniverseIndex::ROOT;
        .                                   self.canonicalize_ty_var(
    8,294 ( 0.00%)                              CanonicalVarInfo {
        .                                           kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),
        .                                       },
        .                                       t,
        .                                   )
        .                               }
        .                           }
        .                       }
        .           
-- line 351 ----------------------------------------
-- line 395 ----------------------------------------
        .                       | ty::FnPtr(_)
        .                       | ty::Dynamic(..)
        .                       | ty::Never
        .                       | ty::Tuple(..)
        .                       | ty::Projection(..)
        .                       | ty::Foreign(..)
        .                       | ty::Param(..)
        .                       | ty::Opaque(..) => {
1,464,712 ( 0.01%)                  if t.flags().intersects(self.needs_canonical_flags) {
1,415,379 ( 0.01%)                      t.super_fold_with(self)
        .                           } else {
        .                               t
        .                           }
        .                       }
        .                   }
3,230,820 ( 0.03%)      }
        .           
       42 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       42 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
        .                           debug!("canonical: const var found with vid {:?}", vid);
        .                           match self.infcx.probe_const_var(vid) {
        .                               Ok(c) => {
        .                                   debug!("(resolved to {:?})", c);
        .                                   return self.fold_const(c);
        .                               }
        .           
-- line 421 ----------------------------------------
-- line 445 ----------------------------------------
        .                           return self.canonicalize_const_var(
        .                               CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderConst(placeholder) },
        .                               ct,
        .                           );
        .                       }
        .                       _ => {}
        .                   }
        .           
       12 ( 0.00%)          let flags = FlagComputation::for_const(ct);
        6 ( 0.00%)          if flags.intersects(self.needs_canonical_flags) { ct.super_fold_with(self) } else { ct }
       36 ( 0.00%)      }
        .           }
        .           
        .           impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {
        .               /// The main `canonicalize` method, shared impl of
        .               /// `canonicalize_query` and `canonicalize_response`.
1,783,204 ( 0.02%)      fn canonicalize<V>(
        .                   value: V,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   tcx: TyCtxt<'tcx>,
        .                   canonicalize_region_mode: &dyn CanonicalizeRegionMode,
        .                   query_state: &mut OriginalQueryValues<'tcx>,
        .               ) -> Canonicalized<'tcx, V>
        .               where
        .                   V: TypeFoldable<'tcx>,
        .               {
  807,006 ( 0.01%)          let needs_canonical_flags = if canonicalize_region_mode.any() {
        .                       TypeFlags::NEEDS_INFER |
        .                       TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`
        .                       TypeFlags::HAS_TY_PLACEHOLDER |
        .                       TypeFlags::HAS_CT_PLACEHOLDER
        .                   } else {
        .                       TypeFlags::NEEDS_INFER
        .                           | TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER
        .                   };
        .           
        .                   // Fast path: nothing that needs to be canonicalized.
  200,586 ( 0.00%)          if !value.has_type_flags(needs_canonical_flags) {
        .                       let canon_value = Canonical {
        .                           max_universe: ty::UniverseIndex::ROOT,
        .                           variables: List::empty(),
  263,639 ( 0.00%)                  value,
        .                       };
  401,187 ( 0.00%)              return canon_value;
        .                   }
        .           
  458,066 ( 0.00%)          let mut canonicalizer = Canonicalizer {
        .                       infcx,
        .                       tcx,
        .                       canonicalize_region_mode,
        .                       needs_canonical_flags,
        .                       variables: SmallVec::new(),
        .                       query_state,
        .                       indices: FxHashMap::default(),
        .                       binder_index: ty::INNERMOST,
        .                   };
  201,396 ( 0.00%)          let out_value = value.fold_with(&mut canonicalizer);
        .           
        .                   // Once we have canonicalized `out_value`, it should not
        .                   // contain anything that ties it to this inference context
        .                   // anymore, so it should live in the global arena.
        .                   debug_assert!(!out_value.needs_infer());
        .           
   82,993 ( 0.00%)          let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);
        .           
        .                   let max_universe = canonical_variables
        .                       .iter()
  216,289 ( 0.00%)              .map(|cvar| cvar.universe())
        .                       .max()
        .                       .unwrap_or(ty::UniverseIndex::ROOT);
        .           
  307,128 ( 0.00%)          Canonical { max_universe, variables: canonical_variables, value: out_value }
1,195,016 ( 0.01%)      }
        .           
        .               /// Creates a canonical variable replacing `kind` from the input,
        .               /// or returns an existing variable if `kind` has already been
        .               /// seen. `kind` is expected to be an unbound variable (or
        .               /// potentially a free region).
2,913,820 ( 0.03%)      fn canonical_var(&mut self, info: CanonicalVarInfo<'tcx>, kind: GenericArg<'tcx>) -> BoundVar {
  582,764 ( 0.01%)          let Canonicalizer { variables, query_state, indices, .. } = self;
        .           
  582,764 ( 0.01%)          let var_values = &mut query_state.var_values;
        .           
        .                   // This code is hot. `variables` and `var_values` are usually small
        .                   // (fewer than 8 elements ~95% of the time). They are SmallVec's to
        .                   // avoid allocations in those cases. We also don't use `indices` to
        .                   // determine if a kind has been seen before until the limit of 8 has
        .                   // been exceeded, to also avoid allocations for `indices`.
  582,764 ( 0.01%)          if !var_values.spilled() {
        .                       // `var_values` is stack-allocated. `indices` isn't used yet. Do a
        .                       // direct linear search of `var_values`.
        .                       if let Some(idx) = var_values.iter().position(|&k| k == kind) {
        .                           // `kind` is already present in `var_values`.
        .                           BoundVar::new(idx)
        .                       } else {
        .                           // `kind` isn't present in `var_values`. Append it. Likewise
        .                           // for `info` and `variables`.
        .                           variables.push(info);
        .                           var_values.push(kind);
  331,565 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
        .           
        .                           // If `var_values` has become big enough to be heap-allocated,
        .                           // fill up `indices` to facilitate subsequent lookups.
   66,313 ( 0.00%)                  if var_values.spilled() {
      186 ( 0.00%)                      assert!(indices.is_empty());
      744 ( 0.00%)                      *indices = var_values
        .                                   .iter()
        .                                   .enumerate()
        .                                   .map(|(i, &kind)| (kind, BoundVar::new(i)))
        .                                   .collect();
        .                           }
        .                           // The cv is the index of the appended element.
  132,626 ( 0.00%)                  BoundVar::new(var_values.len() - 1)
        .                       }
        .                   } else {
        .                       // `var_values` is large. Do a hashmap search via `indices`.
    1,293 ( 0.00%)              *indices.entry(kind).or_insert_with(|| {
        .                           variables.push(info);
        .                           var_values.push(kind);
    1,164 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
      582 ( 0.00%)                  BoundVar::new(variables.len() - 1)
        .                       })
        .                   }
2,622,438 ( 0.03%)      }
        .           
        .               /// Shorthand helper that creates a canonical region variable for
        .               /// `r` (always in the root universe). The reason that we always
        .               /// put these variables into the root universe is because this
        .               /// method is used during **query construction:** in that case, we
        .               /// are taking all the regions and just putting them into the most
        .               /// generic context we can. This may generate solutions that don't
        .               /// fit (e.g., that equate some region variable with a placeholder
-- line 578 ----------------------------------------
-- line 599 ----------------------------------------
        .           
        .               /// Creates a canonical variable (with the given `info`)
        .               /// representing the region `r`; return a region referencing it.
        .               fn canonical_var_for_region(
        .                   &mut self,
        .                   info: CanonicalVarInfo<'tcx>,
        .                   r: ty::Region<'tcx>,
        .               ) -> ty::Region<'tcx> {
1,094,224 ( 0.01%)          let var = self.canonical_var(info, r.into());
        .                   let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32()) };
  242,179 ( 0.00%)          let region = ty::ReLateBound(self.binder_index, br);
1,695,253 ( 0.02%)          self.tcx().mk_region(region)
        .               }
        .           
        .               /// Given a type variable `ty_var` of the given kind, first check
        .               /// if `ty_var` is bound to anything; if so, canonicalize
        .               /// *that*. Otherwise, create a new canonical variable for
        .               /// `ty_var`.
   66,488 ( 0.00%)      fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {
    8,311 ( 0.00%)          let infcx = self.infcx;
        .                   let bound_to = infcx.shallow_resolve(ty_var);
    8,311 ( 0.00%)          if bound_to != ty_var {
        .                       self.fold_ty(bound_to)
        .                   } else {
   58,177 ( 0.00%)              let var = self.canonical_var(info, ty_var.into());
    8,311 ( 0.00%)              self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))
        .                   }
   49,866 ( 0.00%)      }
        .           
        .               /// Given a type variable `const_var` of the given kind, first check
        .               /// if `const_var` is bound to anything; if so, canonicalize
        .               /// *that*. Otherwise, create a new canonical variable for
        .               /// `const_var`.
        .               fn canonicalize_const_var(
        .                   &mut self,
        .                   info: CanonicalVarInfo<'tcx>,
-- line 634 ----------------------------------------

2,108,636 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           
        .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
5,459,637 ( 0.06%)      pub fn search_tree<Q: ?Sized>(
        .                   mut self,
        .                   key: &Q,
        .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   loop {
        .                       self = match self.search_node(key) {
        .                           Found(handle) => return Found(handle),
   97,959 ( 0.00%)                  GoDown(handle) => match handle.force() {
        .                               Leaf(leaf) => return GoDown(leaf),
        .                               Internal(internal) => internal.descend(),
        .                           },
        .                       }
        .                   }
2,783,606 ( 0.03%)      }
        .           
        .               /// Descends to the nearest node where the edge matching the lower bound
        .               /// of the range is different from the edge matching the upper bound, i.e.,
        .               /// the nearest node that has at least one key contained in the range.
        .               ///
        .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
        .               /// edge indices in the node delimiting the range, and the corresponding
        .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
        .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   let node = self.reborrow();
        .                   let keys = node.keys();
        .                   debug_assert!(start_index <= keys.len());
2,412,126 ( 0.02%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
5,405,688 ( 0.05%)              match key.cmp(k.borrow()) {
        .                           Ordering::Greater => {}
        .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
        .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
        .                       }
        .                   }
        .                   IndexResult::Edge(keys.len())
        .               }
        .           
-- line 219 ----------------------------------------

3,096,968 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   48,575 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   18,618 ( 0.00%)              self.file = file;
   27,135 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   24,191 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   78,884 ( 0.00%)          self.line_number = line_index + 1;
  115,443 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  465,895 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
   10,672 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    5,336 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   26,680 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   37,352 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   21,344 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
1,756,895 ( 0.02%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
1,003,940 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  250,985 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  250,985 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  434,222 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  429,820 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
1,289,460 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  429,820 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  214,910 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  214,910 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  214,910 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  859,640 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   67,748 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  287,656 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   59,420 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   71,304 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   47,536 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   72,573 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   72,573 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  180,375 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   82,872 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    4,402 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    6,603 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    6,250 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
   12,500 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   25,000 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   72,150 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   36,075 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   72,150 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   36,075 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  180,375 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  108,225 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  108,225 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
  108,225 ( 0.00%)          Some((
   36,075 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   36,075 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
2,258,865 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
2,555,561 ( 0.03%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  165,744 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   70,405 ( 0.00%)              if idx != avoid_idx
   31,903 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   59,420 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   11,884 ( 0.00%)          if !self.source_map.files().is_empty() {
   23,768 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
   95,072 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   59,420 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

3,307,970 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[derive(Clone)]
        .           pub struct FilterMap<I, F> {
        .               iter: I,
        .               f: F,
        .           }
        .           impl<I, F> FilterMap<I, F> {
        .               pub(in crate::iter) fn new(iter: I, f: F) -> FilterMap<I, F> {
   99,079 ( 0.00%)          FilterMap { iter, f }
        .               }
        .           }
        .           
        .           #[stable(feature = "core_impl_debug", since = "1.9.0")]
        .           impl<I: fmt::Debug, F> fmt::Debug for FilterMap<I, F> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_struct("FilterMap").field("iter", &self.iter).finish()
        .               }
        .           }
        .           
        .           fn filter_map_fold<T, B, Acc>(
        .               mut f: impl FnMut(T) -> Option<B>,
        .               mut fold: impl FnMut(Acc, B) -> Acc,
        .           ) -> impl FnMut(Acc, T) -> Acc {
   77,802 ( 0.00%)      move |acc, item| match f(item) {
    4,732 ( 0.00%)          Some(x) => fold(acc, x),
       11 ( 0.00%)          None => acc,
        .               }
        .           }
        .           
        .           fn filter_map_try_fold<'a, T, B, Acc, R: Try<Output = Acc>>(
        .               f: &'a mut impl FnMut(T) -> Option<B>,
        .               mut fold: impl FnMut(Acc, B) -> R + 'a,
        .           ) -> impl FnMut(Acc, T) -> R + 'a {
4,313,588 ( 0.04%)      move |acc, item| match f(item) {
6,990,722 ( 0.07%)          Some(x) => fold(acc, x),
        .                   None => try { acc },
    6,768 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<B, I: Iterator, F> Iterator for FilterMap<I, F>
        .           where
        .               F: FnMut(I::Item) -> Option<B>,
        .           {
        .               type Item = B;
        .           
        .               #[inline]
    2,197 ( 0.00%)      fn next(&mut self) -> Option<B> {
   12,106 ( 0.00%)          self.iter.find_map(&mut self.f)
    2,179 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    1,512 ( 0.00%)          let (_, upper) = self.iter.size_hint();
        .                   (0, upper) // can't know a lower bound, due to the predicate
        .               }
        .           
        .               #[inline]
        .               fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R
        .               where
        .                   Self: Sized,
        .                   Fold: FnMut(Acc, Self::Item) -> R,
        .                   R: Try<Output = Acc>,
        .               {
    2,631 ( 0.00%)          self.iter.try_fold(init, filter_map_try_fold(&mut self.f, fold))
        .               }
        .           
        .               #[inline]
        .               fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
        .               where
        .                   Fold: FnMut(Acc, Self::Item) -> Acc,
        .               {
    3,363 ( 0.00%)          self.iter.fold(init, filter_map_fold(self.f, fold))
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>
        .           where
        .               F: FnMut(I::Item) -> Option<B>,
        .           {
-- line 93 ----------------------------------------

3,710,326 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    141,149 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  1,297,526 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
      3,503 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
    233,524 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  1,104,024 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
    161,031 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
164,750,349 ( 1.67%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
  4,963,806 ( 0.05%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
     98,245 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
      9,380 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
      4,899 ( 0.00%)                  while let Some(x) = self.next() {
     26,714 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
    972,160 ( 0.01%)                  while let Some(x) = self.next() {
  1,055,990 ( 0.01%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
          8 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
     39,768 ( 0.00%)                  while let Some(x) = self.next() {
    130,749 ( 0.00%)                      if predicate(&x) {
          .                                   return Some(x);
          .                               }
          .                           }
          .                           None
      2,935 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
  1,248,537 ( 0.01%)                  while let Some(x) = self.next() {
    657,966 ( 0.01%)                      if let Some(y) = f(x) {
     80,939 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     20,107 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
    531,871 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
    144,587 ( 0.00%)                  while let Some(x) = self.next_back() {
  1,967,495 ( 0.02%)                      i -= 1;
  1,642,662 ( 0.02%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
  1,077,231 ( 0.01%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
          .                       fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
      2,306 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
      2,337 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  3,040,621 ( 0.03%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

 26,949,003 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           
         .           /// An entity in the Rust type system, which can be one of
         .           /// several kinds (types, lifetimes, and consts).
         .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
         .           /// with the lowest 2 bits being reserved for a tag to
         .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
         .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
         .           pub struct GenericArg<'tcx> {
 3,558,083 ( 0.04%)      ptr: NonZeroUsize,
 8,080,258 ( 0.08%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
         .           }
         .           
         .           const TAG_MASK: usize = 0b11;
         .           const TYPE_TAG: usize = 0b00;
         .           const REGION_TAG: usize = 0b01;
         .           const CONST_TAG: usize = 0b10;
         .           
    74,976 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
         .           pub enum GenericArgKind<'tcx> {
         .               Lifetime(ty::Region<'tcx>),
         .               Type(Ty<'tcx>),
         .               Const(&'tcx ty::Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> GenericArgKind<'tcx> {
    17,336 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
    17,336 ( 0.00%)          let (tag, ptr) = match self {
         .                       GenericArgKind::Lifetime(lt) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
         .                           (REGION_TAG, lt as *const _ as usize)
         .                       }
         .                       GenericArgKind::Type(ty) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
         .                       }
         .                       GenericArgKind::Const(ct) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
         .                           (CONST_TAG, ct as *const _ as usize)
         .                       }
         .                   };
         .           
 1,265,826 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
    17,336 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
         .                       GenericArgKind::Type(ty) => ty.fmt(f),
         .                       GenericArgKind::Const(ct) => ct.fmt(f),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Ord for GenericArg<'tcx> {
       102 ( 0.00%)      fn cmp(&self, other: &GenericArg<'_>) -> Ordering {
        68 ( 0.00%)          self.unpack().cmp(&other.unpack())
         .               }
         .           }
         .           
         .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
         .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
         .                   Some(self.cmp(&other))
         .               }
         .           }
         .           
         .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   923,921 ( 0.01%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Lifetime(r).pack()
   923,921 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 4,172,000 ( 0.04%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Type(ty).pack()
 4,172,000 ( 0.04%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
       292 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Const(c).pack()
       292 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> GenericArg<'tcx> {
         .               #[inline]
         .               pub fn unpack(self) -> GenericArgKind<'tcx> {
         .                   let ptr = self.ptr.get();
         .                   unsafe {
49,640,787 ( 0.50%)              match ptr & TAG_MASK {
   441,674 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
11,780,071 ( 0.12%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
       353 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
         .                           _ => intrinsics::unreachable(),
         .                       }
         .                   }
         .               }
         .           
         .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
         .               /// This is true in cases where `Substs` is used in places where the kinds are known
         .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
         .               pub fn expect_ty(self) -> Ty<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Type(ty) => ty,
         .                       _ => bug!("expected a type, but found another kind"),
         .                   }
   172,074 ( 0.00%)      }
         .           
         .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
         .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Const(c) => c,
         .                       _ => bug!("expected a const, but found another kind"),
         .                   }
         .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
         .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
         .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
         .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    50,433 ( 0.00%)          self.unpack().encode(e)
         .               }
         .           }
         .           
         .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
    86,680 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
    86,680 ( 0.00%)          GenericArgKind::decode(d).pack()
         .               }
         .           }
         .           
         .           /// A substitution mapping generic parameters to new values.
         .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
         .           
         .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
         .           
         .           impl<'a, 'tcx> InternalSubsts<'tcx> {
         .               /// Interpret these substitutions as the substitutions of a closure type.
         .               /// Closure substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and closure kind;
         .               /// see `ty::ClosureSubsts` struct for more comments.
     2,801 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
         .                   ClosureSubsts { substs: self }
     2,801 ( 0.00%)      }
         .           
         .               /// Interpret these substitutions as the substitutions of a generator type.
         .               /// Generator substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and generator kind;
         .               /// see `ty::GeneratorSubsts` struct for more comments.
         .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
         .                   GeneratorSubsts { substs: self }
         .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
         .               /// Inline const substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the inferred type;
         .               /// see `ty::InlineConstSubsts` struct for more comments.
         .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
         .                   InlineConstSubsts { substs: self }
         .               }
         .           
         .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    76,380 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    80,392 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    68,742 ( 0.00%)      }
         .           
         .               /// Creates an `InternalSubsts` for generic parameter definitions,
         .               /// by calling closures to obtain each kind.
         .               /// The closures get to observe the `InternalSubsts` as they're
         .               /// being built, which can be used to correctly
         .               /// substitute defaults of generic parameters.
   944,346 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   let defs = tcx.generics_of(def_id);
         .                   let count = defs.count();
         .                   let mut substs = SmallVec::with_capacity(count);
   339,933 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   209,590 ( 0.00%)          tcx.intern_substs(&substs)
   947,043 ( 0.01%)      }
         .           
         .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   Self::for_item(tcx, def_id, |param, substs| {
         .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
         .                   })
         .               }
         .           
 1,241,899 ( 0.01%)      pub fn fill_item<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   tcx: TyCtxt<'tcx>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
   506,251 ( 0.01%)          if let Some(def_id) = defs.parent {
         .                       let parent_defs = tcx.generics_of(def_id);
    51,769 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
         .                   }
         .                   Self::fill_single(substs, defs, mk_kind)
   989,696 ( 0.01%)      }
         .           
     3,960 ( 0.00%)      pub fn fill_single<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   substs.reserve(defs.params.len());
         .                   for param in &defs.params {
        59 ( 0.00%)              let kind = mk_kind(param, substs);
 1,873,121 ( 0.02%)              assert_eq!(param.index as usize, substs.len());
         .                       substs.push(kind);
         .                   }
     3,960 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
         .                   self.iter()
         .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
         .               }
         .           
         .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
         .                   self.iter().filter_map(|k| match k.unpack() {
         .                       GenericArgKind::Lifetime(_) => None,
         .                       generic => Some(generic),
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
 1,568,193 ( 0.02%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
         .                       ty
         .                   } else {
         .                       bug!("expected type for param #{} in {:?}", i, self);
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
         .               /// impl<U> X<U> for U { fn f<V>() {} }
         .               /// ```
         .               ///
         .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
         .               /// * If `source_ancestor` is the def_id of the trait.
         .               /// * If `target_substs` is `[U]`, the substs for the impl.
         .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
         .               ///   are needed for it to match the trait.
    72,086 ( 0.00%)      pub fn rebase_onto(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   source_ancestor: DefId,
         .                   target_substs: SubstsRef<'tcx>,
         .               ) -> SubstsRef<'tcx> {
         .                   let defs = tcx.generics_of(source_ancestor);
    20,596 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    82,384 ( 0.00%)      }
         .           
         .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
         .                   tcx.mk_substs(self.iter().take(generics.count()))
         .               }
         .           }
         .           
         .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
 1,441,062 ( 0.01%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error> {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
         .                   // typically hit in 90--99.99% of cases. When folding doesn't change
         .                   // the substs, it's faster to reuse the existing substs rather than
         .                   // calling `intern_substs`.
15,135,552 ( 0.15%)          match self.len() {
         .                       1 => {
 2,408,425 ( 0.02%)                  let param0 = self[0].try_fold_with(folder)?;
 8,275,760 ( 0.08%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
         .                       }
         .                       2 => {
 1,234,683 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 3,212,611 ( 0.03%)                  let param1 = self[1].try_fold_with(folder)?;
 4,080,115 ( 0.04%)                  if param0 == self[0] && param1 == self[1] {
         .                               Ok(self)
         .                           } else {
 2,622,445 ( 0.03%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
         .                           }
         .                       }
         .                       0 => Ok(self),
         .                       _ => {
         .                           let params: SmallVec<[_; 8]> =
   206,903 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    16,039 ( 0.00%)                  if params[..] == self[..] {
         .                               Ok(self)
         .                           } else {
    38,112 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
         .                           }
         .                       }
         .                   }
 1,791,831 ( 0.02%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 1,644,549 ( 0.02%)          self.iter().try_for_each(|t| t.visit_with(visitor))
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Public trait `Subst`
         .           //
         .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
         .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
         .           
         .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
         .               fn subst_spanned(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   substs: &[GenericArg<'tcx>],
         .                   span: Option<Span>,
         .               ) -> T {
 3,020,611 ( 0.03%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
         .                   self.fold_with(&mut folder)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // The actual substitution engine itself is a type folder.
         .           
         .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
         .               span: Option<Span>,
         .           
         .               /// Number of region binders we have passed through while doing the substitution
         .               binders_passed: u32,
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   699,433 ( 0.01%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
   968,920 ( 0.01%)          self.binders_passed += 1;
   229,409 ( 0.00%)          let t = t.super_fold_with(self);
   968,920 ( 0.01%)          self.binders_passed -= 1;
         .                   t
         .               }
         .           
   970,590 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   // Note: This routine only handles regions that are bound on
         .                   // type declarations and other outer declarations, not those
         .                   // bound in *fn types*. Region substitution of the bound
         .                   // regions that appear in a function signature is done using
         .                   // the specialized routine `ty::replace_late_regions()`.
   323,530 ( 0.00%)          match *r {
   272,300 ( 0.00%)              ty::ReEarlyBound(data) => {
   272,300 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
         .                           match rk {
   136,150 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
         .                               _ => {
         .                                   let span = self.span.unwrap_or(DUMMY_SP);
         .                                   let msg = format!(
         .                                       "Region parameter out of range \
         .                                        when substituting in region {} (index={})",
         .                                       data.name, data.index
         .                                   );
         .                                   span_bug!(span, "{}", msg);
         .                               }
         .                           }
         .                       }
         .                       _ => r,
         .                   }
 1,132,355 ( 0.01%)      }
         .           
 3,373,875 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 1,124,625 ( 0.01%)          if !t.needs_subst() {
         .                       return t;
         .                   }
         .           
 2,086,006 ( 0.02%)          match *t.kind() {
 3,679,045 ( 0.04%)              ty::Param(p) => self.ty_for_param(p, t),
 1,843,164 ( 0.02%)              _ => t.super_fold_with(self),
         .                   }
 4,087,155 ( 0.04%)      }
         .           
    48,671 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    14,976 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
         .                       self.const_for_param(p, c)
         .                   } else {
    60,651 ( 0.00%)              c.super_fold_with(self)
         .                   }
     1,712 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
         .                   c.super_fold_with(self)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
         .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   // Look up the type in the substitutions. It really should be in there.
 1,471,618 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ty = match opt_ty {
         .                       Some(GenericArgKind::Type(ty)) => ty,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
         .               }
         .           
         .               fn const_for_param(
         .                   &self,
         .                   p: ParamConst,
         .                   source_ct: &'tcx ty::Const<'tcx>,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   // Look up the const in the substitutions. It really should be in there.
       428 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ct = match opt_ct {
         .                       Some(GenericArgKind::Const(ct)) => ct,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
         .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
         .                   debug!(
         .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
         .                       val,
         .                       self.binders_passed,
         .                       val.has_escaping_bound_vars()
         .                   );
         .           
 2,528,190 ( 0.03%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
         .                       return val;
         .                   }
         .           
         .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
         .                   debug!("shift_vars: shifted result = {:?}", result);
         .           
         .                   result
         .               }
         .           
         .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   324,879 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
         .                       return region;
         .                   }
         .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
         .               }
         .           }
         .           
         .           /// Stores the user-given substs to reach some fully qualified path
         .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    11,354 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSubsts<'tcx> {
         .               /// The substitutions for the item as given by the user.
         .               pub substs: SubstsRef<'tcx>,
         .           
         .               /// The self type, in the case of a `<T>::Item` path (when applied
         .               /// to an inherent impl). See `UserSelfTy` below.
     3,365 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
         .           }
         .           
         .           /// Specifies the user-given self type. In the case of a path that
         .           /// refers to a member in an inherent impl, this self type is
         .           /// sometimes needed to constrain the type parameters on the impl. For
         .           /// example, in this code:
         .           ///
         .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
         .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
         .           /// the impl (with the substs from `UserSubsts`) and apply those to
         .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
         .           /// the self type here, which contains `?A` to be `&'static u32`
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSelfTy<'tcx> {
         .               pub impl_def_id: DefId,
     1,068 ( 0.00%)      pub self_ty: Ty<'tcx>,
         .           }

21,378,473 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 208 ----------------------------------------
        .               /// There is no built-in impl. There may be some other
        .               /// candidate (a where-clause or user-defined impl).
        .               None,
        .               /// It is unknown whether there is an impl.
        .               Ambiguous,
        .           }
        .           
        .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
  403,356 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
3,824,738 ( 0.04%)          SelectionContext {
        .                       infcx,
  643,987 ( 0.01%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
  336,130 ( 0.00%)      }
        .           
        .               pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
   13,712 ( 0.00%)          SelectionContext {
        .                       infcx,
    1,714 ( 0.00%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: true,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
        .               }
        .           
        .               pub fn with_negative(
-- line 238 ----------------------------------------
-- line 245 ----------------------------------------
        .                       freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
        .               }
        .           
  127,136 ( 0.00%)      pub fn with_query_mode(
        .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
        .                   query_mode: TraitQueryMode,
        .               ) -> SelectionContext<'cx, 'tcx> {
        .                   debug!(?query_mode, "with_query_mode");
  254,272 ( 0.00%)          SelectionContext {
        .                       infcx,
   15,892 ( 0.00%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode,
        .                   }
   95,352 ( 0.00%)      }
        .           
        .               /// Enables tracking of intercrate ambiguity causes. These are
        .               /// used in coherence to give improved diagnostics. We don't do
        .               /// this until we detect a coherence error because it can lead to
        .               /// false overflow results (#47139) and because it costs
        .               /// computation time.
        .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
        .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
        .               /// was enabled and disables tracking at the same time. If
        .               /// tracking is not enabled, just returns an empty vector.
        .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
        .                   assert!(self.intercrate);
        .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
        .               }
        .           
        .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
2,406,223 ( 0.02%)          self.infcx
   55,012 ( 0.00%)      }
        .           
        .               pub fn tcx(&self) -> TyCtxt<'tcx> {
3,527,345 ( 0.04%)          self.infcx.tcx
        .               }
        .           
        .               pub fn is_intercrate(&self) -> bool {
  599,628 ( 0.01%)          self.intercrate
        .               }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Selection
        .               //
        .               // The selection phase tries to identify *how* an obligation will
        .               // be resolved. For example, it will identify which impl or
        .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
        .               // 1. If no applicable impl or parameter bound can be found.
        .               // 2. If the output type parameters in the obligation do not match
        .               //    those specified by the impl/bound. For example, if the obligation
        .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
        .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
        .           
        .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
        .               /// type environment by performing unification.
  976,941 ( 0.01%)      #[instrument(level = "debug", skip(self))]
1,256,067 ( 0.01%)      pub fn select(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
  993,005 ( 0.01%)          let candidate = match self.select_from_obligation(obligation) {
        .                       Err(SelectionError::Overflow) => {
        .                           // In standard mode, overflow must have been caught and reported
        .                           // earlier.
        .                           assert!(self.query_mode == TraitQueryMode::Canonical);
        .                           return Err(SelectionError::Overflow);
        .                       }
        .                       Err(SelectionError::Ambiguous(_)) => {
        .                           return Ok(None);
        .                       }
        .                       Err(e) => {
  106,386 ( 0.00%)                  return Err(e);
        .                       }
        .                       Ok(None) => {
   40,221 ( 0.00%)                  return Ok(None);
        .                       }
  708,744 ( 0.01%)              Ok(Some(candidate)) => candidate,
        .                   };
        .           
1,181,790 ( 0.01%)          match self.confirm_candidate(obligation, candidate) {
        .                       Err(SelectionError::Overflow) => {
        .                           assert!(self.query_mode == TraitQueryMode::Canonical);
        .                           Err(SelectionError::Overflow)
        .                       }
    3,575 ( 0.00%)              Err(e) => Err(e),
        .                       Ok(candidate) => {
        .                           debug!(?candidate, "confirmed");
1,414,188 ( 0.01%)                  Ok(Some(candidate))
        .                       }
        .                   }
        .               }
        .           
1,395,630 ( 0.01%)      crate fn select_from_obligation(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
        .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
        .           
        .                   let pec = &ProvisionalEvaluationCache::default();
        .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
        .           
  279,126 ( 0.00%)          self.candidate_from_obligation(&stack)
1,256,067 ( 0.01%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // EVALUATION
        .               //
        .               // Tests whether an obligation can be selected or whether an impl
        .               // can be applied to particular types. It skips the "confirmation"
        .               // step and hence completely ignores output type parameters.
        .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
        .               // we can be sure it does not.
        .           
        .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
        .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
        .                   debug!(?obligation, "predicate_may_hold_fatal");
        .           
        .                   // This fatal query is a stopgap that should only be used in standard mode,
        .                   // where we do not expect overflow to be propagated.
      144 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
        .           
      720 ( 0.00%)          self.evaluate_root_obligation(obligation)
        .                       .expect("Overflow should be caught earlier in standard query mode")
        .                       .may_apply()
        .               }
        .           
        .               /// Evaluates whether the obligation `obligation` can be satisfied
        .               /// and returns an `EvaluationResult`. This is meant for the
        .               /// *initial* call.
   31,784 ( 0.00%)      pub fn evaluate_root_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   self.evaluation_probe(|this| {
   48,108 ( 0.00%)              this.evaluate_predicate_recursively(
        .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
        .                           obligation.clone(),
        .                       )
        .                   })
   31,784 ( 0.00%)      }
        .           
        .               fn evaluation_probe(
        .                   &mut self,
        .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
        .               ) -> Result<EvaluationResult, OverflowError> {
1,917,119 ( 0.02%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
   32,072 ( 0.00%)              let result = op(self)?;
        .           
1,693,419 ( 0.02%)              match self.infcx.leak_check(true, snapshot) {
        .                           Ok(()) => {}
        .                           Err(_) => return Ok(EvaluatedToErr),
        .                       }
        .           
1,209,585 ( 0.01%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
        .                           None => Ok(result),
        .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
        .                       }
        .                   })
        .               }
        .           
        .               /// Evaluates the predicates in `predicates` recursively. Note that
        .               /// this applies projections in the predicates, and therefore
        .               /// is run within an inference probe.
  938,180 ( 0.01%)      #[instrument(skip(self, stack), level = "debug")]
        .               fn evaluate_predicates_recursively<'o, I>(
        .                   &mut self,
        .                   stack: TraitObligationStackList<'o, 'tcx>,
        .                   predicates: I,
        .               ) -> Result<EvaluationResult, OverflowError>
        .               where
        .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
        .               {
        .                   let mut result = EvaluatedToOk;
  455,250 ( 0.00%)          for obligation in predicates {
   91,068 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
   45,534 ( 0.00%)              if let EvaluatedToErr = eval {
        .                           // fast-path - EvaluatedToErr is the top of the lattice,
        .                           // so we don't need to look on the other predicates.
        .                           return Ok(EvaluatedToErr);
        .                       } else {
        .                           result = cmp::max(result, eval);
        .                       }
        .                   }
        .                   Ok(result)
        .               }
        .           
  388,030 ( 0.00%)      #[instrument(
        .                   level = "debug",
        .                   skip(self, previous_stack),
        .                   fields(previous_stack = ?previous_stack.head())
  349,227 ( 0.00%)      )]
        .               fn evaluate_predicate_recursively<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   obligation: PredicateObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
        .                   // a `PredicateObligation`. These are distinct types, so we can't
        .                   // use any `Option` combinator method that would force them to be
        .                   // the same.
   77,606 ( 0.00%)          match previous_stack.head() {
   44,866 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
   16,370 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
        .                   }
        .           
  232,818 ( 0.00%)          let result = ensure_sufficient_stack(|| {
   38,803 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
  388,030 ( 0.00%)              match bound_predicate.skip_binder() {
        .                           ty::PredicateKind::Trait(t) => {
        .                               let t = bound_predicate.rebind(t);
        .                               debug_assert!(!t.has_escaping_bound_vars());
        .                               let obligation = obligation.with(t);
  529,485 ( 0.01%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
        .                           }
        .           
        .                           ty::PredicateKind::Subtype(p) => {
        .                               let p = bound_predicate.rebind(p);
        .                               // Does this code ever run?
    1,425 ( 0.00%)                      match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
        .                                   Some(Ok(InferOk { mut obligations, .. })) => {
        .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
        .                                       self.evaluate_predicates_recursively(
        .                                           previous_stack,
        .                                           obligations.into_iter(),
        .                                       )
        .                                   }
        .                                   Some(Err(_)) => Ok(EvaluatedToErr),
-- line 489 ----------------------------------------
-- line 522 ----------------------------------------
        .                               None => Ok(EvaluatedToAmbig),
        .                           },
        .           
        .                           ty::PredicateKind::TypeOutlives(pred) => {
        .                               // A global type with no late-bound regions can only
        .                               // contain the "'static" lifetime (any other lifetime
        .                               // would either be late-bound or local), so it is guaranteed
        .                               // to outlive any other lifetime
    2,825 ( 0.00%)                      if pred.0.is_global() && !pred.0.has_late_bound_regions() {
        .                                   Ok(EvaluatedToOk)
        .                               } else {
        .                                   Ok(EvaluatedToOkModuloRegions)
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::RegionOutlives(..) => {
        .                               // We do not consider region relationships when evaluating trait matches.
-- line 538 ----------------------------------------
-- line 545 ----------------------------------------
        .                               } else {
        .                                   Ok(EvaluatedToErr)
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::Projection(data) => {
        .                               let data = bound_predicate.rebind(data);
        .                               let project_obligation = obligation.with(data);
    3,316 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
    2,650 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
        .                                       'compute_res: {
        .                                           // If we've previously marked this projection as 'complete', thne
        .                                           // use the final cached result (either `EvaluatedToOk` or
        .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
        .                                           // sub-obligations.
    2,120 ( 0.00%)                                  if let Some(key) =
    4,770 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
        .                                           {
    4,064 ( 0.00%)                                      if let Some(cached_res) = self
        .                                                   .infcx
        .                                                   .inner
        .                                                   .borrow_mut()
        .                                                   .projection_cache()
        .                                                   .is_complete(key)
        .                                               {
        .                                                   break 'compute_res Ok(cached_res);
        .                                               }
        .                                           }
        .           
    1,050 ( 0.00%)                                  self.add_depth(
        .                                               subobligations.iter_mut(),
    1,050 ( 0.00%)                                      obligation.recursion_depth,
        .                                           );
    1,050 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
    1,575 ( 0.00%)                                      previous_stack,
    2,625 ( 0.00%)                                      subobligations,
        .                                           );
    2,100 ( 0.00%)                                  if let Ok(res) = res {
    1,050 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
    1,528 ( 0.00%)                                          if let Some(key) =
      382 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
    2,674 ( 0.00%)                                                  self, data,
        .                                                       )
        .                                                   {
        .                                                       // If the result is something that we can cache, then mark this
        .                                                       // entry as 'complete'. This will allow us to skip evaluating the
        .                                                       // suboligations at all the next time we evaluate the projection
        .                                                       // predicate.
    2,520 ( 0.00%)                                              self.infcx
        .                                                           .inner
        .                                                           .borrow_mut()
        .                                                           .projection_cache()
        .                                                           .complete(key, res);
        .                                                   }
        .                                               }
        .                                           }
        .                                           res
-- line 601 ----------------------------------------
-- line 603 ----------------------------------------
        .                                   }
        .                                   Ok(Ok(None)) => Ok(EvaluatedToAmbig),
        .                                   Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),
        .                                   Err(_) => Ok(EvaluatedToErr),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
       80 ( 0.00%)                      match self.infcx.closure_kind(closure_substs) {
        .                                   Some(closure_kind) => {
       48 ( 0.00%)                              if closure_kind.extends(kind) {
        .                                           Ok(EvaluatedToOk)
        .                                       } else {
        .                                           Ok(EvaluatedToErr)
        .                                       }
        .                                   }
        .                                   None => Ok(EvaluatedToAmbig),
        .                               }
        .                           }
-- line 621 ----------------------------------------
-- line 693 ----------------------------------------
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for chalk")
        .                           }
        .                       }
   38,803 ( 0.00%)          });
        .           
        .                   debug!("finished: {:?} from {:?}", result, obligation);
        .           
        .                   result
        .               }
        .           
  741,279 ( 0.01%)      #[instrument(skip(self, previous_stack), level = "debug")]
        .               fn evaluate_trait_predicate_recursively<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   mut obligation: TraitObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
   70,598 ( 0.00%)          if !self.intercrate
        .                       && obligation.is_global()
        .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
        .                   {
        .                       // If a param env has no global bounds, global obligations do not
        .                       // depend on its particular value in order to work, so we can clear
        .                       // out the param env and get better caching.
        .                       debug!("in global");
    5,380 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
        .                   }
        .           
        .                   let stack = self.push_stack(previous_stack, &obligation);
        .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
   70,598 ( 0.00%)          let mut param_env = obligation.param_env;
        .           
        .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
   35,299 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
  423,588 ( 0.00%)              pred
        .                   });
        .           
        .                   debug!(?fresh_trait_pred);
        .           
   60,998 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
        .                       debug!(?result, "CACHE HIT");
        .                       return Ok(result);
        .                   }
        .           
        .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
        .                       debug!(?result, "PROVISIONAL CACHE HIT");
        .                       stack.update_reached_depth(result.reached_depth);
        .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
        .                   // stack. If so, we don't want to insert the result into the
        .                   // main cache (it is cycle dependent) nor the provisional
        .                   // cache (which is meant for things that have completed but
        .                   // for a "backedge" -- this result *is* the backedge).
        .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
        .                       return Ok(cycle_result);
        .                   }
        .           
  257,382 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
   28,598 ( 0.00%)          let result = result?;
        .           
  142,990 ( 0.00%)          if !result.must_apply_modulo_regions() {
        .                       stack.cache().on_failure(stack.dfn);
        .                   }
        .           
   28,598 ( 0.00%)          let reached_depth = stack.reached_depth.get();
   57,196 ( 0.00%)          if reached_depth >= stack.depth {
        .                       debug!(?result, "CACHE MISS");
  543,362 ( 0.01%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
        .           
        .                       stack.cache().on_completion(
   57,196 ( 0.00%)                  stack.dfn,
        .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
        .                               // Create a new `DepNode` that has dependencies on:
        .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
        .                               // entry being crated
        .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
        .                               // provisional caches entries and inserting them into the evaluation cache
        .                               //
        .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 835 ----------------------------------------
        .               /// `self.freshener`, we can be sure that (a) this will not
        .               /// affect the inferencer state and (b) that if we see two
        .               /// fresh regions with the same index, they refer to the same
        .               /// unbound type variable.
        .               fn check_evaluation_cycle(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'_, 'tcx>,
        .               ) -> Option<EvaluationResult> {
    2,302 ( 0.00%)          if let Some(cycle_depth) = stack
        .                       .iter()
        .                       .skip(1) // Skip top-most frame.
        .                       .find(|prev| {
   40,396 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
        .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
        .                       })
        .                       .map(|stack| stack.depth)
        .                   {
        .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
        .           
        .                       // If we have a stack like `A B C D E A`, where the top of
        .                       // the stack is the final `A`, then this will iterate over
        .                       // `A, E, D, C, B` -- i.e., all the participants apart
        .                       // from the cycle head. We mark them as participating in a
        .                       // cycle. This suppresses caching for those nodes. See
        .                       // `in_cycle` field for more details.
    2,302 ( 0.00%)              stack.update_reached_depth(cycle_depth);
        .           
        .                       // Subtle: when checking for a coinductive cycle, we do
        .                       // not compare using the "freshened trait refs" (which
        .                       // have erased regions) but rather the fully explicit
        .                       // trait refs. This is important because it's only a cycle
        .                       // if the regions match exactly.
    1,592 ( 0.00%)              let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);
    1,151 ( 0.00%)              let tcx = self.tcx();
    8,057 ( 0.00%)              let cycle = cycle.map(|stack| stack.obligation.predicate.to_predicate(tcx));
   12,661 ( 0.00%)              if self.coinductive_match(cycle) {
        .                           debug!("evaluate_stack --> recursive, coinductive");
        .                           Some(EvaluatedToOk)
        .                       } else {
        .                           debug!("evaluate_stack --> recursive, inductive");
        .                           Some(EvaluatedToRecur)
        .                       }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
  257,382 ( 0.00%)      fn evaluate_stack<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   // In intercrate mode, whenever any of the generics are unbound,
        .                   // there can always be an impl. Even if there are no impls in
        .                   // this crate, perhaps the type would be unified with
        .                   // something from another crate that does provide an impl.
        .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
        .                   // imagine, this is just where we started. To avoid that, we
        .                   // check for unbound variables and return an ambiguous (hence possible)
        .                   // match if we've seen this trait before.
        .                   //
        .                   // This suffices to allow chains like `FnMut` implemented in
        .                   // terms of `Fn` etc, but we could probably make this more
        .                   // precise still.
        .                   let unbound_input_types =
   28,598 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
        .           
   85,794 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
        .                       // This check was an imperfect workaround for a bug in the old
        .                       // intercrate mode; it should be removed when that goes away.
  142,990 ( 0.00%)              if unbound_input_types && self.intercrate {
        .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
        .                           // Heuristics: show the diagnostics when there are no candidates in crate.
       19 ( 0.00%)                  if self.intercrate_ambiguity_causes.is_some() {
        .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
        .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
        .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
        .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
        .                                       let self_ty = trait_ref.self_ty();
        .                                       let cause = with_no_trimmed_paths(|| {
        .                                           IntercrateAmbiguityCause::DownstreamCrate {
        .                                               trait_desc: trait_ref.print_only_trait_path().to_string(),
-- line 927 ----------------------------------------
-- line 937 ----------------------------------------
        .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
        .                                   }
        .                               }
        .                           }
        .                           return Ok(EvaluatedToAmbig);
        .                       }
        .                   }
        .           
   57,158 ( 0.00%)          if unbound_input_types
        .                       && stack.iter().skip(1).any(|prev| {
      180 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
        .                               && self.match_fresh_trait_refs(
      240 ( 0.00%)                          stack.fresh_trait_pred,
      240 ( 0.00%)                          prev.fresh_trait_pred,
        .                                   prev.obligation.param_env,
        .                               )
        .                       })
        .                   {
        .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
        .                       return Ok(EvaluatedToUnknown);
        .                   }
        .           
  316,848 ( 0.00%)          match self.candidate_from_obligation(stack) {
  104,022 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
        .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
        .                       Ok(None) => Ok(EvaluatedToAmbig),
        .                       Err(Overflow) => Err(OverflowError::Canonical),
        .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
        .                       Err(..) => Ok(EvaluatedToErr),
        .                   }
  285,980 ( 0.00%)      }
        .           
        .               /// For defaulted traits, we use a co-inductive strategy to solve, so
        .               /// that recursion is ok. This routine returns `true` if the top of the
        .               /// stack (`cycle[0]`):
        .               ///
        .               /// - is a defaulted trait,
        .               /// - it also appears in the backtrace at some position `X`,
        .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 977 ----------------------------------------
        .               pub fn coinductive_match<I>(&mut self, mut cycle: I) -> bool
        .               where
        .                   I: Iterator<Item = ty::Predicate<'tcx>>,
        .               {
        .                   cycle.all(|predicate| self.coinductive_predicate(predicate))
        .               }
        .           
        .               fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {
    7,288 ( 0.00%)          let result = match predicate.kind().skip_binder() {
   32,796 ( 0.00%)              ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),
        .                       _ => false,
        .                   };
        .                   debug!(?predicate, ?result, "coinductive_predicate");
        .                   result
        .               }
        .           
        .               /// Further evaluates `candidate` to decide whether all type parameters match and whether nested
        .               /// obligations are met. Returns whether `candidate` remains viable after this further
-- line 994 ----------------------------------------
-- line 998 ----------------------------------------
        .                   skip(self, stack),
        .                   fields(depth = stack.obligation.recursion_depth)
        .               )]
        .               fn evaluate_candidate<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .                   candidate: &SelectionCandidate<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
   54,578 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
        .                       let candidate = (*candidate).clone();
  451,743 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
        .                           Ok(selection) => {
        .                               debug!(?selection);
  109,156 ( 0.00%)                      this.evaluate_predicates_recursively(
        .                                   stack.list(),
  354,757 ( 0.00%)                          selection.nested_obligations().into_iter(),
        .                               )
        .                           }
        .                           Err(..) => Ok(EvaluatedToErr),
        .                       }
        .                   })?;
        .           
        .                   // If we erased any lifetimes, then we want to use
        .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
        .               ) -> Option<EvaluationResult> {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
   70,598 ( 0.00%)          if self.intercrate {
        .                       return None;
        .                   }
        .           
        .                   let tcx = self.tcx();
        .                   if self.can_use_global_caches(param_env) {
  184,660 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
        .                           return Some(res);
        .                       }
        .                   }
  121,996 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
        .               }
        .           
  343,176 ( 0.00%)      fn insert_evaluation_cache(
        .                   &mut self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
        .                   dep_node: DepNodeIndex,
        .                   result: EvaluationResult,
        .               ) {
        .                   // Avoid caching results that depend on more than just the trait-ref
        .                   // - the stack can create recursion.
  114,392 ( 0.00%)          if result.is_stack_dependent() {
        .                       return;
        .                   }
        .           
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
   57,196 ( 0.00%)          if self.intercrate {
        .                       return;
        .                   }
        .           
        .                   if self.can_use_global_caches(param_env) {
        .                       if !trait_pred.needs_infer() {
        .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
        .                           // This may overwrite the cache with the same value
        .                           // FIXME: Due to #50507 this overwrites the different values
        .                           // This should be changed to use HashMapExt::insert_same
        .                           // when that is fixed
   20,705 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
        .                           return;
        .                       }
        .                   }
        .           
        .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
   30,948 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
  228,784 ( 0.00%)      }
        .           
        .               /// For various reasons, it's possible for a subobligation
        .               /// to have a *lower* recursion_depth than the obligation used to create it.
        .               /// Projection sub-obligations may be returned from the projection cache,
        .               /// which results in obligations with an 'old' `recursion_depth`.
        .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
        .               /// subobligations without taking in a 'parent' depth, causing the
        .               /// generated subobligations to have a `recursion_depth` of `0`.
        .               ///
        .               /// To ensure that obligation_depth never decreases, we force all subobligations
        .               /// to have at least the depth of the original obligation.
      525 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
        .                   &self,
        .                   it: I,
        .                   min_depth: usize,
        .               ) {
    2,724 ( 0.00%)          it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
    1,050 ( 0.00%)      }
        .           
        .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
        .                   &self,
        .                   depth: usize,
        .                   error_obligation: &Obligation<'tcx, T>,
        .               ) -> Result<(), OverflowError> {
  827,780 ( 0.01%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
        .                       match self.query_mode {
        .                           TraitQueryMode::Standard => {
        .                               if self.infcx.is_tainted_by_errors() {
        .                                   return Err(OverflowError::ErrorReporting);
        .                               }
        .                               self.infcx.report_overflow_error(error_obligation, true);
        .                           }
        .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
        .               ) -> Result<(), OverflowError> {
        .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
        .               }
        .           
        .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
        .               where
        .                   OP: FnOnce(&mut Self) -> R,
        .               {
  806,962 ( 0.01%)          let (result, dep_node) =
  601,228 ( 0.01%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
        .                   self.tcx().dep_graph.read_index(dep_node);
  744,888 ( 0.01%)          (result, dep_node)
        .               }
        .           
        .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
        .               /// for a negative goal and a negative impl for a positive goal
        .               #[instrument(level = "debug", skip(self))]
        .               fn filter_impls(
        .                   &mut self,
        .                   candidates: Vec<SelectionCandidate<'tcx>>,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Vec<SelectionCandidate<'tcx>> {
        .                   let tcx = self.tcx();
        .                   let mut result = Vec::with_capacity(candidates.len());
        .           
  801,901 ( 0.01%)          for candidate in candidates {
        .                       // Respect const trait obligations
  142,383 ( 0.00%)              if obligation.is_const() {
        .                           match candidate {
        .                               // const impl
        .                               ImplCandidate(def_id)
        .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
        .                               // const param
        .                               ParamCandidate(trait_pred)
        .                                   if trait_pred.skip_binder().constness
        .                                       == ty::BoundConstness::ConstIfConst => {}
-- line 1178 ----------------------------------------
-- line 1186 ----------------------------------------
        .                               ConstDropCandidate(_) => {}
        .                               _ => {
        .                                   // reject all other types of candidates
        .                                   continue;
        .                               }
        .                           }
        .                       }
        .           
   94,922 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
   28,858 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
   14,429 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
        .                               || self.allow_negative_impls
        .                           {
        .                               result.push(candidate);
        .                           }
        .                       } else {
        .                           result.push(candidate);
        .                       }
        .                   }
        .           
  223,864 ( 0.00%)          result
        .               }
        .           
        .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
  717,825 ( 0.01%)      #[instrument(level = "debug", skip(self))]
        .               fn filter_reservation_impls(
        .                   &mut self,
        .                   candidate: SelectionCandidate<'tcx>,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
        .                   let tcx = self.tcx();
        .                   // Treat reservation impls as ambiguity.
  104,768 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
   20,318 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
        .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
        .                               let attrs = tcx.get_attrs(def_id);
        .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
        .                               let value = attr.and_then(|a| a.value_str());
        .                               if let Some(value) = value {
        .                                   debug!(
        .                                       "filter_reservation_impls: \
        .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
        .                                           message: value.to_string(),
        .                                       },
        .                                   );
        .                               }
        .                           }
        .                           return Ok(None);
        .                       }
        .                   }
  253,350 ( 0.00%)          Ok(Some(candidate))
        .               }
        .           
        .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
        .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
        .           
  196,932 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
        .                       return None;
        .                   }
        .           
        .                   let obligation = &stack.obligation;
   10,710 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
        .           
        .                   // Okay to skip binder because of the nature of the
        .                   // trait-ref-is-knowable check, which does not care about
        .                   // bound regions.
        .                   let trait_ref = predicate.skip_binder().trait_ref;
        .           
   10,710 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
        .               }
        .           
        .               /// Returns `true` if the global caches can be used.
        .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
        .                   // If there are any inference variables in the `ParamEnv`, then we
        .                   // always use a cache local to this particular scope. Otherwise, we
        .                   // switch to a global cache.
        .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
        .                   &mut self,
        .                   mut param_env: ty::ParamEnv<'tcx>,
        .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
        .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
  336,284 ( 0.00%)          if self.intercrate {
    3,570 ( 0.00%)              return None;
        .                   }
        .                   let tcx = self.tcx();
        .                   let mut pred = cache_fresh_trait_pred.skip_binder();
  329,144 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
        .           
  164,572 ( 0.00%)          if self.can_use_global_caches(param_env) {
1,507,960 ( 0.02%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
1,370,174 ( 0.01%)                  return Some(res);
        .                       }
        .                   }
  637,138 ( 0.01%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
        .               }
        .           
        .               /// Determines whether can we safely cache the result
        .               /// of selecting an obligation. This is almost always `true`,
        .               /// except when dealing with certain `ParamCandidate`s.
        .               ///
        .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
        .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
        .               fn can_cache_candidate(
        .                   &self,
        .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
        .               ) -> bool {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
  124,148 ( 0.00%)          if self.intercrate {
        .                       return false;
        .                   }
  175,512 ( 0.00%)          match result {
        .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
        .                       _ => true,
        .                   }
        .               }
        .           
        .               fn insert_candidate_cache(
        .                   &mut self,
        .                   mut param_env: ty::ParamEnv<'tcx>,
        .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
        .                   dep_node: DepNodeIndex,
        .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
        .               ) {
        .                   let tcx = self.tcx();
        .                   let mut pred = cache_fresh_trait_pred.skip_binder();
        .           
  124,148 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
        .           
        .                   if !self.can_cache_candidate(&candidate) {
        .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
        .                       return;
        .                   }
        .           
   55,977 ( 0.00%)          if self.can_use_global_caches(param_env) {
  112,458 ( 0.00%)              if let Err(Overflow) = candidate {
        .                           // Don't cache overflow globally; we only produce this in certain modes.
        .                       } else if !pred.needs_infer() {
  181,592 ( 0.00%)                  if !candidate.needs_infer() {
        .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
        .                               // This may overwrite the cache with the same value.
1,225,746 ( 0.01%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
  243,317 ( 0.00%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
        .               }
        .           
        .               /// Matches a predicate against the bounds of its self type.
        .               ///
        .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
        .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
        .               /// `Baz` bound. We return indexes into the list returned by
        .               /// `tcx.item_bounds` for any applicable bounds.
   51,228 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> smallvec::SmallVec<[usize; 2]> {
   73,996 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
        .                   let placeholder_trait_predicate =
   96,764 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
        .                   debug!(
        .                       ?placeholder_trait_predicate,
        .                       "match_projection_obligation_against_definition_bounds"
        .                   );
        .           
    5,692 ( 0.00%)          let tcx = self.infcx.tcx;
   34,540 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
   16,494 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
      970 ( 0.00%)              ty::Opaque(def_id, substs) => (def_id, substs),
        .                       _ => {
        .                           span_bug!(
        .                               obligation.cause.span,
        .                               "match_projection_obligation_against_definition_bounds() called \
        .                                but self-ty is not a projection: {:?}",
        .                               placeholder_trait_predicate.trait_ref.self_ty()
        .                           );
        .                       }
-- line 1405 ----------------------------------------
-- line 1411 ----------------------------------------
        .                   // unnecessary ambiguity.
        .                   let mut distinct_normalized_bounds = FxHashSet::default();
        .           
        .                   let matching_bounds = bounds
        .                       .iter()
        .                       .enumerate()
        .                       .filter_map(|(idx, bound)| {
        .                           let bound_predicate = bound.kind();
   51,244 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
        .                               let bound = bound_predicate.rebind(pred.trait_ref);
  216,480 ( 0.00%)                      if self.infcx.probe(|_| {
   86,256 ( 0.00%)                          match self.match_normalize_trait_ref(
        .                                       obligation,
   57,728 ( 0.00%)                              bound,
   57,728 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
        .                                   ) {
        .                                       Ok(None) => true,
        .                                       Ok(Some(normalized_trait))
        .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
        .                                       {
        .                                           true
        .                                       }
        .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
        .                               }
        .                           }
        .                           None
        .                       })
        .                       .collect();
        .           
        .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
        .                   matching_bounds
   51,228 ( 0.00%)      }
        .           
        .               /// Equates the trait in `obligation` with trait bound. If the two traits
        .               /// can be equated and the normalized trait bound doesn't contain inference
        .               /// variables or placeholders, the normalized bound is returned.
  187,629 ( 0.00%)      fn match_normalize_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   trait_bound: ty::PolyTraitRef<'tcx>,
        .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
        .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
        .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
   49,541 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
        .                       // Avoid unnecessary normalization
   22,624 ( 0.00%)              return Err(());
        .                   }
        .           
   37,452 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
        .                       project::normalize_with_depth(
        .                           self,
    3,121 ( 0.00%)                  obligation.param_env,
        .                           obligation.cause.clone(),
    9,363 ( 0.00%)                  obligation.recursion_depth + 1,
   12,484 ( 0.00%)                  trait_bound,
        .                       )
        .                   });
    9,363 ( 0.00%)          self.infcx
    6,242 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
        .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
        .                       .map(|InferOk { obligations: _, value: () }| {
        .                           // This method is called within a probe, so we can't have
        .                           // inference variables and placeholders escape.
        .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
   14,760 ( 0.00%)                      Some(trait_bound)
        .                           } else {
        .                               None
        .                           }
        .                       })
        .                       .map_err(|_| ())
  129,897 ( 0.00%)      }
        .           
        .               fn evaluate_where_clause<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   self.evaluation_probe(|this| {
2,184,512 ( 0.02%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
  152,760 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
        .                           Err(()) => Ok(EvaluatedToErr),
        .                       }
        .                   })
        .               }
        .           
   50,994 ( 0.00%)      pub(super) fn match_projection_projections(
        .                   &mut self,
        .                   obligation: &ProjectionTyObligation<'tcx>,
        .                   env_predicate: PolyProjectionPredicate<'tcx>,
        .                   potentially_unnormalized_candidates: bool,
        .               ) -> bool {
        .                   let mut nested_obligations = Vec::new();
   28,330 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
   16,998 ( 0.00%)              obligation.cause.span,
        .                       LateBoundRegionConversionTime::HigherRankedType,
        .                       env_predicate,
        .                   );
   11,332 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
    4,704 ( 0.00%)              ensure_sufficient_stack(|| {
    2,352 ( 0.00%)                  project::normalize_with_depth_to(
        .                               self,
      588 ( 0.00%)                      obligation.param_env,
        .                               obligation.cause.clone(),
    1,764 ( 0.00%)                      obligation.recursion_depth + 1,
    1,176 ( 0.00%)                      infer_predicate.projection_ty,
        .                               &mut nested_obligations,
        .                           )
        .                       })
        .                   } else {
   10,156 ( 0.00%)              infer_predicate.projection_ty
        .                   };
        .           
    5,666 ( 0.00%)          self.infcx
   11,332 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
   11,332 ( 0.00%)              .sup(obligation.predicate, infer_projection)
   38,722 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
        .                           self.evaluate_predicates_recursively(
        .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
        .                               nested_obligations.into_iter().chain(obligations),
        .                           )
    6,928 ( 0.00%)                  .map_or(false, |res| res.may_apply())
        .                       })
   50,994 ( 0.00%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // WINNOW
        .               //
        .               // Winnowing is the process of attempting to resolve ambiguity by
        .               // probing further. During the winnowing process, we unify all
        .               // type variables and then we also attempt to evaluate recursive
        .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
        .               /// See the comment for "SelectionCandidate" for more details.
        .               fn candidate_should_be_dropped_in_favor_of(
        .                   &mut self,
        .                   sized_predicate: bool,
        .                   victim: &EvaluatedCandidate<'tcx>,
        .                   other: &EvaluatedCandidate<'tcx>,
        .                   needs_infer: bool,
        .               ) -> bool {
      835 ( 0.00%)          if victim.candidate == other.candidate {
        .                       return true;
        .                   }
        .           
        .                   // Check if a bound would previously have been removed when normalizing
        .                   // the param_env so that it can be given the lowest priority. See
        .                   // #50825 for the motivation for this.
        .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
    2,430 ( 0.00%)              cand.is_global() && !cand.has_late_bound_regions()
        .                   };
        .           
        .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
        .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
        .                   //
        .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
        .                   // lifetime of a variable.
   30,429 ( 0.00%)          match (&other.candidate, &victim.candidate) {
        .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
        .                           bug!(
        .                               "default implementations shouldn't be recorded \
        .                               when there are other valid candidates"
        .                           );
        .                       }
        .           
        .                       // (*)
-- line 1582 ----------------------------------------
-- line 1621 ----------------------------------------
        .           
        .                       // Drop otherwise equivalent non-const fn pointer candidates
        .                       (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,
        .           
        .                       // If obligation is a sized predicate or the where-clause bound is
        .                       // global, prefer the projection or object candidate. See issue
        .                       // #50825 and #89352.
        .                       (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {
      954 ( 0.00%)                  sized_predicate || is_global(cand)
        .                       }
      972 ( 0.00%)              (ParamCandidate(ref cand), ObjectCandidate(_) | ProjectionCandidate(_)) => {
    1,926 ( 0.00%)                  !(sized_predicate || is_global(cand))
        .                       }
        .           
        .                       // Global bounds from the where clause should be ignored
        .                       // here (see issue #50825). Otherwise, we have a where
        .                       // clause so don't go around looking for impls.
        .                       // Arbitrarily give param candidates priority
        .                       // over projection and object candidates.
        .                       (
-- line 1640 ----------------------------------------
-- line 1674 ----------------------------------------
        .                       }
        .                       (ObjectCandidate(_), ProjectionCandidate(_))
        .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
        .                           bug!("Have both object and projection candidate")
        .                       }
        .           
        .                       // Arbitrarily give projection and object candidates priority.
        .                       (
    1,670 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
        .                           ImplCandidate(..)
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { .. }
        .                           | TraitAliasCandidate(..),
    3,340 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
        .                       ) => false,
        .           
    8,350 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
        .                           // See if we can toss out `victim` based on specialization.
        .                           // This requires us to know *for sure* that the `other` impl applies
        .                           // i.e., `EvaluatedToOk`.
        .                           //
        .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
        .                           // to me but is required for `std` to compile, so I didn't change it
        .                           // for now.
        .                           let tcx = self.tcx();
    3,340 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
    6,560 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
        .                                   return true;
        .                               }
        .                           }
        .           
    4,110 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
    3,116 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
        .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
        .                                       // Subtle: If the predicate we are evaluating has inference
        .                                       // variables, do *not* allow discarding candidates due to
        .                                       // marker trait impls.
        .                                       //
        .                                       // Without this restriction, we could end up accidentally
        .                                       // constrainting inference variables based on an arbitrarily
        .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { has_nested: true }
        .                           | TraitAliasCandidate(..),
        .                       ) => false,
        .                   }
        .               }
        .           
  176,450 ( 0.00%)      fn sized_conditions(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> BuiltinImplConditions<'tcx> {
        .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
        .           
        .                   // NOTE: binder moved to (*)
   52,935 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
        .           
   88,281 ( 0.00%)          match self_ty.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
        .                       | ty::Ref(..)
        .                       | ty::Generator(..)
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => {
        .                           // safe for everything
    4,331 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
        .                       }
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
        .           
        .                       ty::Tuple(tys) => Where(
        .                           obligation
        .                               .predicate
    6,294 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
        .                       ),
        .           
        .                       ty::Adt(def, substs) => {
    4,720 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
        .                           // (*) binder moved here
   11,800 ( 0.00%)                  Where(
        .                               obligation.predicate.rebind({
    2,360 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
        .                               }),
        .                           )
        .                       }
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
        .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
        .           
        .                       ty::Placeholder(..)
        .                       | ty::Bound(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
        .                       }
        .                   }
  141,160 ( 0.00%)      }
        .           
   55,296 ( 0.00%)      fn copy_clone_conditions(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> BuiltinImplConditions<'tcx> {
        .                   // NOTE: binder moved to (*)
   13,824 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
        .           
        .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
        .           
   34,942 ( 0.00%)          match *self_ty.kind() {
        .                       ty::Infer(ty::IntVar(_))
        .                       | ty::Infer(ty::FloatVar(_))
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
       32 ( 0.00%)              | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
        .           
        .                       ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::Char
        .                       | ty::RawPtr(..)
        .                       | ty::Never
-- line 1879 ----------------------------------------
-- line 1886 ----------------------------------------
        .                       ty::Dynamic(..)
        .                       | ty::Str
        .                       | ty::Slice(..)
        .                       | ty::Generator(..)
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Foreign(..)
        .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
        .           
      166 ( 0.00%)              ty::Tuple(tys) => {
        .                           // (*) binder moved here
    4,588 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
        .                       }
        .           
      130 ( 0.00%)              ty::Closure(_, substs) => {
        .                           // (*) binder moved here
      390 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
      260 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
        .                               // Not yet resolved.
        .                               Ambiguous
        .                           } else {
      910 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
        .                           }
        .                       }
        .           
        .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
        .                           // Fallback to whatever user-defined impls exist in this case.
        .                           None
        .                       }
        .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
        .                       }
        .           
        .                       ty::Placeholder(..)
        .                       | ty::Bound(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
        .                       }
        .                   }
   41,472 ( 0.00%)      }
        .           
        .               /// For default impls, we need to break apart a type into its
        .               /// "constituent types" -- meaning, the types that it contains.
        .               ///
        .               /// Here are some (simple) examples:
        .               ///
        .               /// ```
        .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 1937 ----------------------------------------
        .               /// Foo where struct Foo { x: i32, y: u32 } -> [i32, u32]
        .               /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]
        .               /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]
        .               /// ```
        .               fn constituent_types_for_ty(
        .                   &self,
        .                   t: ty::Binder<'tcx, Ty<'tcx>>,
        .               ) -> ty::Binder<'tcx, Vec<Ty<'tcx>>> {
   20,275 ( 0.00%)          match *t.skip_binder().kind() {
        .                       ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::Str
        .                       | ty::Error(_)
-- line 1953 ----------------------------------------
-- line 1960 ----------------------------------------
        .                       | ty::Param(..)
        .                       | ty::Foreign(..)
        .                       | ty::Projection(..)
        .                       | ty::Bound(..)
        .                       | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("asked to assemble constituent types of unexpected type: {:?}", t);
        .                       }
        .           
      116 ( 0.00%)              ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {
        .                           t.rebind(vec![element_ty])
        .                       }
        .           
        .                       ty::Array(element_ty, _) | ty::Slice(element_ty) => t.rebind(vec![element_ty]),
        .           
        .                       ty::Tuple(ref tys) => {
        .                           // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet
    1,159 ( 0.00%)                  t.rebind(tys.iter().map(|k| k.expect_ty()).collect())
        .                       }
        .           
        .                       ty::Closure(_, ref substs) => {
      342 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
        .                           t.rebind(vec![ty])
        .                       }
        .           
        .                       ty::Generator(_, ref substs, _) => {
        .                           let ty = self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());
        .                           let witness = substs.as_generator().witness();
        .                           t.rebind([ty].into_iter().chain(iter::once(witness)).collect())
        .                       }
        .           
        .                       ty::GeneratorWitness(types) => {
        .                           debug_assert!(!types.has_escaping_bound_vars());
        .                           types.map_bound(|types| types.to_vec())
        .                       }
        .           
        .                       // For `PhantomData<T>`, we pass `T`.
    3,218 ( 0.00%)              ty::Adt(def, substs) if def.is_phantom_data() => t.rebind(substs.types().collect()),
        .           
    1,561 ( 0.00%)              ty::Adt(def, substs) => {
    5,647 ( 0.00%)                  t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())
        .                       }
        .           
      357 ( 0.00%)              ty::Opaque(def_id, substs) => {
        .                           // We can resolve the `impl Trait` to its concrete type,
        .                           // which enforces a DAG between the functions requiring
        .                           // the auto trait bounds in question.
      119 ( 0.00%)                  t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
        .                       }
        .                   }
        .               }
        .           
   76,128 ( 0.00%)      fn collect_predicates_for_types(
        .                   &mut self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   cause: ObligationCause<'tcx>,
        .                   recursion_depth: usize,
        .                   trait_def_id: DefId,
        .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
        .               ) -> Vec<PredicateObligation<'tcx>> {
        .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
        .                   // 2. Produce something like `&'0 i32 : Copy`
        .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
        .           
        .                   types
        .                       .as_ref()
        .                       .skip_binder() // binder moved -\
        .                       .iter()
        .                       .flat_map(|ty| {
   27,648 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
        .           
  110,592 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
   27,648 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
   46,080 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
   92,160 ( 0.00%)                          ensure_sufficient_stack(|| {
        .                                       project::normalize_with_depth(
        .                                           self,
    9,216 ( 0.00%)                                  param_env,
        .                                           cause.clone(),
    9,216 ( 0.00%)                                  recursion_depth,
    9,216 ( 0.00%)                                  placeholder_ty,
        .                                       )
        .                                   });
  101,376 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
        .                                   self.tcx(),
    9,216 ( 0.00%)                          param_env,
        .                                   cause.clone(),
   18,432 ( 0.00%)                          trait_def_id,
        .                                   recursion_depth,
        .                                   normalized_ty,
        .                                   &[],
        .                               );
   55,296 ( 0.00%)                      obligations.push(placeholder_obligation);
        .                               obligations
        .                           })
        .                       })
        .                       .collect()
   38,064 ( 0.00%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Matching
        .               //
        .               // Matching is a common path used for both evaluation and
        .               // confirmation.  It basically unifies types that appear in impls
        .               // and traits. This does affect the surrounding environment;
        .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
        .               // run inside of a `probe()` so that their side-effects are
        .               // contained.
        .           
        .               fn rematch_impl(
        .                   &mut self,
        .                   impl_def_id: DefId,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
  131,695 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
  105,356 ( 0.00%)              Ok(substs) => substs,
        .                       Err(()) => {
        .                           bug!(
        .                               "Impl {:?} was matchable against {:?} but now is not",
        .                               impl_def_id,
        .                               obligation
        .                           );
        .                       }
        .                   }
        .               }
        .           
1,791,130 ( 0.02%)      #[tracing::instrument(level = "debug", skip(self))]
        .               fn match_impl(
        .                   &mut self,
        .                   impl_def_id: DefId,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
        .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
        .           
        .                   // Before we create the substitutions and everything, first
        .                   // consider a "quick reject". This avoids creating more types
        .                   // and so forth that we need to.
        .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
    3,024 ( 0.00%)              return Err(());
        .                   }
        .           
        .                   let placeholder_obligation =
  649,306 ( 0.01%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
  278,274 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
        .           
  463,790 ( 0.00%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
        .           
  185,516 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
        .           
        .                   debug!(?impl_trait_ref);
        .           
  556,548 ( 0.01%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
  649,306 ( 0.01%)              ensure_sufficient_stack(|| {
        .                           project::normalize_with_depth(
        .                               self,
   92,758 ( 0.00%)                      obligation.param_env,
        .                               obligation.cause.clone(),
  278,274 ( 0.00%)                      obligation.recursion_depth + 1,
  185,516 ( 0.00%)                      impl_trait_ref,
        .                           )
        .                       });
        .           
        .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
        .           
        .                   let cause = ObligationCause::new(
   92,758 ( 0.00%)              obligation.cause.span,
  185,516 ( 0.00%)              obligation.cause.body_id,
  834,822 ( 0.01%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
        .                   );
        .           
  185,516 ( 0.00%)          let InferOk { obligations, .. } = self
        .                       .infcx
   92,758 ( 0.00%)              .at(&cause, obligation.param_env)
        .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
        .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
        .                   nested_obligations.extend(obligations);
        .           
  122,310 ( 0.00%)          if !self.intercrate
        .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
        .                   {
        .                       debug!("match_impl: reservation impls only apply in intercrate mode");
        .                       return Err(());
        .                   }
        .           
        .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
  244,608 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
        .               }
        .           
        .               fn fast_reject_trait_refs(
        .                   &mut self,
        .                   obligation: &TraitObligation<'_>,
        .                   impl_trait_ref: &ty::TraitRef<'_>,
        .               ) -> bool {
        .                   // We can avoid creating type variables and doing the full
        .                   // substitution if we find that any of the input types, when
        .                   // simplified, do not match.
        .           
  282,810 ( 0.00%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
        .                       |(obligation_arg, impl_arg)| {
  653,144 ( 0.01%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
        .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
        .                                   // Note, we simplify parameters for the obligation but not the
        .                                   // impl so that we do not reject a blanket impl but do reject
        .                                   // more concrete impls if we're searching for `T: Trait`.
  838,624 ( 0.01%)                          let simplified_obligation_ty = fast_reject::simplify_type(
        .                                       self.tcx(),
        .                                       obligation_ty,
        .                                       SimplifyParams::Yes,
        .                                       StripReferences::No,
        .                                   );
  628,968 ( 0.01%)                          let simplified_impl_ty = fast_reject::simplify_type(
        .                                       self.tcx(),
        .                                       impl_ty,
        .                                       SimplifyParams::No,
        .                                       StripReferences::No,
        .                                   );
        .           
  314,484 ( 0.00%)                          simplified_obligation_ty.is_some()
        .                                       && simplified_impl_ty.is_some()
        .                                       && simplified_obligation_ty != simplified_impl_ty
        .                               }
        .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
        .                                   // Lifetimes can never cause a rejection.
        .                                   false
        .                               }
        .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
        .                           }
        .                       },
        .                   )
        .               }
        .           
        .               /// Normalize `where_clause_trait_ref` and try to match it against
        .               /// `obligation`. If successful, return any predicates that
        .               /// result from the normalization.
1,787,328 ( 0.02%)      fn match_where_clause_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
        .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
1,588,736 ( 0.02%)      }
        .           
        .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
        .               /// obligation is satisfied.
        .               #[instrument(skip(self), level = "debug")]
        .               fn match_poly_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
  287,816 ( 0.00%)          self.infcx
  198,592 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
  863,448 ( 0.01%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
        .                       .map(|InferOk { obligations, .. }| obligations)
        .                       .map_err(|_| ())
        .               }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Miscellany
        .           
        .               fn match_fresh_trait_refs(
        .                   &self,
        .                   previous: ty::PolyTraitPredicate<'tcx>,
        .                   current: ty::PolyTraitPredicate<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> bool {
      180 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
        .                   matcher.relate(previous, current).is_ok()
        .               }
        .           
        .               fn push_stack<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   obligation: &'o TraitObligation<'tcx>,
        .               ) -> TraitObligationStack<'o, 'tcx> {
1,119,770 ( 0.01%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
        .           
        .                   let dfn = previous_stack.cache.next_dfn();
   70,598 ( 0.00%)          let depth = previous_stack.depth() + 1;
1,467,861 ( 0.01%)          TraitObligationStack {
        .                       obligation,
  909,609 ( 0.01%)              fresh_trait_pred,
        .                       reached_depth: Cell::new(depth),
        .                       previous: previous_stack,
        .                       dfn,
        .                       depth,
        .                   }
        .               }
        .           
        .               #[instrument(skip(self), level = "debug")]
        .               fn closure_trait_ref_unnormalized(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::PolyTraitRef<'tcx> {
      825 ( 0.00%)          let closure_sig = substs.as_closure().sig();
        .           
        .                   debug!(?closure_sig);
        .           
        .                   // (1) Feels icky to skip the binder here, but OTOH we know
        .                   // that the self-type is an unboxed closure type and hence is
        .                   // in fact unparameterized (or at least does not reference any
        .                   // regions bound in the obligation). Still probably some
        .                   // refactoring could make this nicer.
    2,750 ( 0.00%)          closure_trait_ref_and_return_type(
        .                       self.tcx(),
    1,650 ( 0.00%)              obligation.predicate.def_id(),
      275 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
    1,100 ( 0.00%)              closure_sig,
        .                       util::TupleArgumentsFlag::No,
        .                   )
        .                   .map_bound(|(trait_ref, _)| trait_ref)
        .               }
        .           
        .               fn generator_trait_ref_unnormalized(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
-- line 2291 ----------------------------------------
-- line 2307 ----------------------------------------
        .                   )
        .                   .map_bound(|(trait_ref, ..)| trait_ref)
        .               }
        .           
        .               /// Returns the obligations that are implied by instantiating an
        .               /// impl or trait. The obligations are substituted and fully
        .               /// normalized. This is used when confirming an impl or default
        .               /// impl.
  699,062 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
        .               fn impl_or_trait_obligations(
        .                   &mut self,
        .                   cause: ObligationCause<'tcx>,
        .                   recursion_depth: usize,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   def_id: DefId,           // of impl or trait
        .                   substs: SubstsRef<'tcx>, // for impl or trait
        .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
        .                   //    V: Iterator, V: Sized,
        .                   //    <U as Iterator>::Item: Copy
        .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
        .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
        .                   // `$1: Copy`, so we must ensure the obligations are emitted in
        .                   // that order.
        .                   let predicates = tcx.predicates_of(def_id);
        .                   debug!(?predicates);
   30,394 ( 0.00%)          assert_eq!(predicates.parent, None);
   91,182 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
        .                   for (predicate, _) in predicates.predicates {
        .                       debug!(?predicate);
  413,680 ( 0.00%)              let predicate = normalize_with_depth_to(
        .                           self,
        .                           param_env,
        .                           cause.clone(),
        .                           recursion_depth,
   82,736 ( 0.00%)                  predicate.subst(tcx, substs),
        .                           &mut obligations,
        .                       );
  827,360 ( 0.01%)              obligations.push(Obligation {
        .                           cause: cause.clone(),
        .                           recursion_depth,
        .                           param_env,
        .                           predicate,
        .                       });
        .                   }
        .           
        .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
        .                   // (#38528) from happening, but the real cause of the duplication is
        .                   // unknown. What we know is that the deduplication avoids exponential
        .                   // amount of predicates being propagated when processing deeply nested
        .                   // types.
        .                   //
        .                   // This code is hot enough that it's worth avoiding the allocation
        .                   // required for the FxHashSet when possible. Special-casing lengths 0,
        .                   // 1 and 2 covers roughly 75-80% of the cases.
   79,929 ( 0.00%)          if obligations.len() <= 1 {
        .                       // No possibility of duplicates.
   19,685 ( 0.00%)          } else if obligations.len() == 2 {
        .                       // Only two elements. Drop the second if they are equal.
        3 ( 0.00%)              if obligations[0] == obligations[1] {
        9 ( 0.00%)                  obligations.truncate(1);
        .                       }
        .                   } else {
        .                       // Three or more elements. Use a general deduplication process.
        .                       let mut seen = FxHashSet::default();
    9,039 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
        .                   }
        .           
  121,576 ( 0.00%)          obligations
        .               }
        .           }
        .           
        .           trait TraitObligationExt<'tcx> {
        .               fn derived_cause(
        .                   &self,
        .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
        .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
        .                    */
        .           
        .                   let obligation = self;
        .           
        .                   // NOTE(flaper87): As of now, it keeps track of the whole error
        .                   // chain. Ideally, we should have a way to configure this either
        .                   // by using -Z verbose or just a CLI argument.
        .                   let derived_cause = DerivedObligationCause {
  146,952 ( 0.00%)              parent_trait_pred: obligation.predicate,
   71,187 ( 0.00%)              parent_code: obligation.cause.clone_code(),
        .                   };
        .                   let derived_code = variant(derived_cause);
  430,457 ( 0.00%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
        .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
        .                   TraitObligationStackList::with(self)
        .               }
        .           
        .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
  120,637 ( 0.00%)          self.previous.cache
        .               }
        .           
        .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
        .                   self.list()
        .               }
        .           
        .               /// Indicates that attempting to evaluate this stack entry
        .               /// required accessing something from the stack at depth `reached_depth`.
    2,302 ( 0.00%)      fn update_reached_depth(&self, reached_depth: usize) {
    1,151 ( 0.00%)          assert!(
    1,151 ( 0.00%)              self.depth >= reached_depth,
        .                       "invoked `update_reached_depth` with something under this stack: \
        .                        self.depth={} reached_depth={}",
        .                       self.depth,
        .                       reached_depth,
        .                   );
        .                   debug!(reached_depth, "update_reached_depth");
        .                   let mut p = self;
    3,453 ( 0.00%)          while reached_depth < p.depth {
        .                       debug!(?p.fresh_trait_pred, "update_reached_depth: marking as cycle participant");
    1,151 ( 0.00%)              p.reached_depth.set(p.reached_depth.get().min(reached_depth));
    1,151 ( 0.00%)              p = p.previous.head.unwrap();
        .                   }
    2,302 ( 0.00%)      }
        .           }
        .           
        .           /// The "provisional evaluation cache" is used to store intermediate cache results
        .           /// when solving auto traits. Auto traits are unusual in that they can support
        .           /// cycles. So, for example, a "proof tree" like this would be ok:
        .           ///
        .           /// - `Foo<T>: Send` :-
        .           ///   - `Bar<T>: Send` :-
-- line 2462 ----------------------------------------
-- line 2540 ----------------------------------------
        .               /// evaluation. When we create an entry in the evaluation cache using this provisional
        .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
        .               /// the cache will have all of the necessary incr comp dependencies tracked.
        .               dep_node: DepNodeIndex,
        .           }
        .           
        .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
        .               fn default() -> Self {
  217,563 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
        .               }
        .           }
        .           
        .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
        .               /// Get the next DFN in sequence (basically a counter).
        .               fn next_dfn(&self) -> usize {
   35,299 ( 0.00%)          let result = self.dfn.get();
  141,196 ( 0.00%)          self.dfn.set(result + 1);
        .                   result
        .               }
        .           
        .               /// Check the provisional cache for any result for
        .               /// `fresh_trait_ref`. If there is a hit, then you must consider
        .               /// it an access to the stack slots at depth
        .               /// `reached_depth` (from the returned value).
        .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
        .               fn on_completion(
        .                   &self,
        .                   dfn: usize,
        .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
        .               ) {
        .                   debug!(?dfn, "on_completion");
        .           
        .                   for (fresh_trait_pred, eval) in
  200,186 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
        .                   {
        .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
        .           
        .                       op(fresh_trait_pred, eval.result, eval.dep_node);
        .                   }
        .               }
        .           }
        .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
        .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
        .               }
        .           
        .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
        .                   self.head
        .               }
        .           
        .               fn depth(&self) -> usize {
   89,897 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
        .               type Item = &'o TraitObligationStack<'o, 'tcx>;
        .           
        .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
  140,697 ( 0.00%)          let o = self.head?;
   32,975 ( 0.00%)          *self = o.previous;
        .                   Some(o)
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "TraitObligationStack({:?})", self.obligation)
        .               }
-- line 2717 ----------------------------------------

2,893,779 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     1,090 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       545 ( 0.00%)              from_str_radix(src, radix)
     1,635 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   734,625 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 1,862,686 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 1,569,941 ( 0.02%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
46,126,556 ( 0.47%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
     4,700 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 2,987,803 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   231,130 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
       360 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   861,074 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    32,235 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
18,817,595 ( 0.19%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 6,471,271 ( 0.07%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
33,175,383 ( 0.34%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
        13 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 3,742,109 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
        26 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   557,024 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1673 ----------------------------------------
         .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         6 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 7,197,954 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         3 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       246 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    93,772 ( 0.00%)              if self <= 1 { return 0; }
         .           
   112,110 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   310,900 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   137,372 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
   130,284 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   497,328 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir                  

-- line 15 ----------------------------------------
         .               b: B,
         .               // index, len and a_len are only used by the specialized version of zip
         .               index: usize,
         .               len: usize,
         .               a_len: usize,
         .           }
         .           impl<A: Iterator, B: Iterator> Zip<A, B> {
         .               pub(in crate::iter) fn new(a: A, b: B) -> Zip<A, B> {
         4 ( 0.00%)          ZipImpl::new(a, b)
         .               }
         .               fn super_nth(&mut self, mut n: usize) -> Option<(A::Item, B::Item)> {
         .                   while let Some(x) = Iterator::next(self) {
         .                       if n == 0 {
         .                           return Some(x);
         .                       }
         .                       n -= 1;
         .                   }
-- line 31 ----------------------------------------
-- line 63 ----------------------------------------
         .           /// assert!(iter.next().is_none());
         .           /// ```
         .           #[stable(feature = "iter_zip", since = "1.59.0")]
         .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
         .           where
         .               A: IntoIterator,
         .               B: IntoIterator,
         .           {
    90,346 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A, B> Iterator for Zip<A, B>
         .           where
         .               A: Iterator,
         .               B: Iterator,
         .           {
-- line 79 ----------------------------------------
-- line 136 ----------------------------------------
         .                   Self: Iterator + TrustedRandomAccessNoCoerce;
         .           }
         .           
         .           // Work around limitations of specialization, requiring `default` impls to be repeated
         .           // in intermediary impls.
         .           macro_rules! zip_impl_general_defaults {
         .               () => {
         .                   default fn new(a: A, b: B) -> Self {
         8 ( 0.00%)              Zip {
         .                           a,
         .                           b,
         .                           index: 0, // unused
         .                           len: 0,   // unused
         .                           a_len: 0, // unused
         .                       }
         .                   }
         .           
         .                   #[inline]
         .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
   189,104 ( 0.00%)              let x = self.a.next()?;
   140,594 ( 0.00%)              let y = self.b.next()?;
    13,284 ( 0.00%)              Some((x, y))
    12,987 ( 0.00%)          }
         .           
         .                   #[inline]
         .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                       self.super_nth(n)
         .                   }
         .           
         .                   #[inline]
         .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 203 ----------------------------------------
         .               B: Iterator,
         .           {
         .               type Item = (A::Item, B::Item);
         .           
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
       234 ( 0.00%)          let (a_lower, a_upper) = self.a.size_hint();
        47 ( 0.00%)          let (b_lower, b_upper) = self.b.size_hint();
         .           
         .                   let lower = cmp::min(a_lower, b_lower);
         .           
         .                   let upper = match (a_upper, b_upper) {
         .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
         .                       (Some(x), None) => Some(x),
         .                       (None, Some(y)) => Some(y),
         .                       (None, None) => None,
-- line 220 ----------------------------------------
-- line 236 ----------------------------------------
         .           where
         .               A: TrustedRandomAccessNoCoerce + Iterator,
         .               B: TrustedRandomAccessNoCoerce + Iterator,
         .           {
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
     1,288 ( 0.00%)          let size = cmp::min(self.a.size(), self.b.size());
         .                   (size, Some(size))
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {
       124 ( 0.00%)          let idx = self.index + idx;
         .                   // SAFETY: the caller must uphold the contract for
         .                   // `Iterator::__iterator_get_unchecked`.
         .                   unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }
         .               }
         .           }
         .           
         .           #[doc(hidden)]
         .           impl<A, B> ZipImpl<A, B> for Zip<A, B>
         .           where
         .               A: TrustedRandomAccess + Iterator,
         .               B: TrustedRandomAccess + Iterator,
         .           {
         .               fn new(a: A, b: B) -> Self {
         .                   let a_len = a.size();
         .                   let len = cmp::min(a_len, b.size());
     1,393 ( 0.00%)          Zip { a, b, index: 0, len, a_len }
         .               }
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
18,838,778 ( 0.19%)          if self.index < self.len {
         .                       let i = self.index;
         .                       // since get_unchecked executes code which can panic we increment the counters beforehand
         .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
 4,569,418 ( 0.05%)              self.index += 1;
         .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
         .                       unsafe {
       287 ( 0.00%)                  Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
         .                       }
         8 ( 0.00%)          } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
         .                       let i = self.index;
         .                       // as above, increment before executing code that may panic
         .                       self.index += 1;
         .                       self.len += 1;
         .                       // match the base implementation's potential side effects
         .                       // SAFETY: we just checked that `i` < `self.a.len()`
         .                       unsafe {
         .                           self.a.__iterator_get_unchecked(i);
-- line 288 ----------------------------------------
-- line 290 ----------------------------------------
         .                       None
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
 1,524,829 ( 0.02%)          let len = self.len - self.index;
     1,794 ( 0.00%)          (len, Some(len))
         .               }
         .           
         .               #[inline]
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   let delta = cmp::min(n, self.len - self.index);
         .                   let end = self.index + delta;
         .                   while self.index < end {
         .                       let i = self.index;
-- line 307 ----------------------------------------
-- line 535 ----------------------------------------
         .           #[unstable(feature = "trusted_random_access", issue = "none")]
         .           #[rustc_specialization_trait]
         .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
         .               // Convenience method.
         .               fn size(&self) -> usize
         .               where
         .                   Self: Iterator,
         .               {
     3,898 ( 0.00%)          self.size_hint().0
         .               }
         .               /// `true` if getting an iterator element may have side effects.
         .               /// Remember to take inner iterators into account.
         .               const MAY_HAVE_SIDE_EFFECT: bool;
         .           }
         .           
         .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
         .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
         .           /// Same requirements calling `get_unchecked` directly.
         .           #[doc(hidden)]
         .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
         .           where
         .               I: Iterator,
         .           {
         .               // SAFETY: the caller must uphold the contract for
         .               // `Iterator::__iterator_get_unchecked`.
    14,730 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
         .           }
         .           
         .           unsafe trait SpecTrustedRandomAccess: Iterator {
         .               /// If `Self: TrustedRandomAccess`, it must be safe to call
         .               /// `Iterator::__iterator_get_unchecked(self, index)`.
         .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
         .           }
         .           
-- line 571 ----------------------------------------

 2,619,762 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
3,217,328,272 (32.54%)  events annotated

