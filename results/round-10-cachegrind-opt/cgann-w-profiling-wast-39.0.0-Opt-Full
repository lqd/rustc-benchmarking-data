--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name wast --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --cfg feature="default" --cfg feature="wasm-module" -C metadata=a6a0d7ba89ecc7ac -C extra-filename=-a6a0d7ba89ecc7ac --out-dir /usr/home/liquid/tmp/.tmplkhOCx/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmplkhOCx/target/release/deps --extern leb128=/usr/home/liquid/tmp/.tmplkhOCx/target/release/deps/libleb128-8c9f5c742d72f5ff.rmeta --extern memchr=/usr/home/liquid/tmp/.tmplkhOCx/target/release/deps/libmemchr-78dd7cee6ef231a7.rmeta --extern unicode_width=/usr/home/liquid/tmp/.tmplkhOCx/target/release/deps/libunicode_width-97cdf32549ef51b1.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-wast-39.0.0-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                       
--------------------------------------------------------------------------------
128,167,950,747 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
3,410,149,141 ( 2.66%)  ./malloc/malloc.c:_int_free
3,019,515,742 ( 2.36%)  ./malloc/malloc.c:_int_malloc
2,758,979,269 ( 2.15%)  ???:llvm::InstCombinerImpl::run()
2,131,445,156 ( 1.66%)  ./malloc/malloc.c:malloc
1,973,082,552 ( 1.54%)  ???:llvm::MachineInstr::isIdenticalTo(llvm::MachineInstr const&, llvm::MachineInstr::MICheckType) const
1,957,693,883 ( 1.53%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
1,884,819,884 ( 1.47%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
1,727,919,824 ( 1.35%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
1,680,268,045 ( 1.31%)  ???:llvm::ValueHandleBase::AddToUseList()
1,644,653,927 ( 1.28%)  ???:llvm::isNonEscapingLocalObject(llvm::Value const*, llvm::SmallDenseMap<llvm::Value const*, bool, 8u, llvm::DenseMapInfo<llvm::Value const*>, llvm::detail::DenseMapPair<llvm::Value const*, bool> >*)
1,436,107,719 ( 1.12%)  ???:llvm::BranchFolder::TryTailMergeBlocks(llvm::MachineBasicBlock*, llvm::MachineBasicBlock*, unsigned int)
1,135,884,645 ( 0.89%)  ???:llvm::BasicAAResult::alias(llvm::MemoryLocation const&, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
1,101,186,691 ( 0.86%)  ./malloc/malloc.c:free
1,098,251,846 ( 0.86%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
1,055,403,686 ( 0.82%)  ???:llvm::SSAUpdater::GetValueAtEndOfBlockInternal(llvm::BasicBlock*)
1,010,443,752 ( 0.79%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
  991,464,421 ( 0.77%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
  957,521,571 ( 0.75%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
  955,549,289 ( 0.75%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
  905,944,932 ( 0.71%)  ???:computeKnownBits(llvm::Value const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
  903,281,988 ( 0.70%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
  860,932,380 ( 0.67%)  ???:llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&, llvm::LibFunc&) const
  827,779,659 ( 0.65%)  ???:(anonymous namespace)::LVIValueHandle::deleted()
  822,894,088 ( 0.64%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
  809,687,852 ( 0.63%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
  796,889,506 ( 0.62%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
  786,488,829 ( 0.61%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
  770,778,242 ( 0.60%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
  737,266,296 ( 0.58%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
  719,008,769 ( 0.56%)  ???:llvm::InstCombinerImpl::visitCallInst(llvm::CallInst&)
  693,130,592 ( 0.54%)  ???:llvm::GVN::processBlock(llvm::BasicBlock*)
  683,910,530 ( 0.53%)  ???:llvm::removeUnreachableBlocks(llvm::Function&, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*)
  664,587,226 ( 0.52%)  ???:(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Value*, llvm::BasicBlock*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
  660,703,157 ( 0.52%)  ???:llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQuery const&, llvm::OptimizationRemarkEmitter*)
  597,651,713 ( 0.47%)  ???:SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
  573,318,225 ( 0.45%)  ???:llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int)
  564,618,754 ( 0.44%)  ???:computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
  535,612,388 ( 0.42%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
  518,538,689 ( 0.40%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  515,736,978 ( 0.40%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
  494,035,826 ( 0.39%)  ???:llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&)
  483,164,174 ( 0.38%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  458,879,499 ( 0.36%)  ???:isKnownNonZero(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  441,781,048 ( 0.34%)  ./malloc/malloc.c:malloc_consolidate
  441,225,458 ( 0.34%)  ???:llvm::FindFunctionBackedges(llvm::Function const&, llvm::SmallVectorImpl<std::pair<llvm::BasicBlock const*, llvm::BasicBlock const*> >&)
  436,977,283 ( 0.34%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  423,069,173 ( 0.33%)  ???:(anonymous namespace)::MachineCopyPropagation::runOnMachineFunction(llvm::MachineFunction&)
  420,509,118 ( 0.33%)  ???:llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>)
  410,324,803 ( 0.32%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
  396,636,779 ( 0.31%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
  393,476,674 ( 0.31%)  ???:llvm::MemorySSA::buildMemorySSA(llvm::BatchAAResults&)
  391,929,490 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  391,781,769 ( 0.31%)  ???:llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef<llvm::Value*>, llvm::SimplifyQuery const&)
  387,722,538 ( 0.30%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
  384,139,900 ( 0.30%)  ???:(anonymous namespace)::EarlyCSE::run() [clone .llvm.7062997131228810369]
  382,975,531 ( 0.30%)  ???:llvm::BasicAAResult::getModRefInfo(llvm::CallBase const*, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
  366,185,818 ( 0.29%)  ???:llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm::Instruction*, llvm::PHITransAddr const&, llvm::MemoryLocation const&, bool, llvm::BasicBlock*, llvm::SmallVectorImpl<llvm::NonLocalDepResult>&, llvm::DenseMap<llvm::BasicBlock*, llvm::Value*, llvm::DenseMapInfo<llvm::BasicBlock*>, llvm::detail::DenseMapPair<llvm::BasicBlock*, llvm::Value*> >&, bool, bool)
  355,660,353 ( 0.28%)  ???:(anonymous namespace)::eliminateDeadStores(llvm::Function&, llvm::AAResults&, llvm::MemorySSA&, llvm::DominatorTree&, llvm::PostDominatorTree&, llvm::TargetLibraryInfo const&, llvm::LoopInfo const&) [clone .llvm.5769264623867638418]
  345,613,627 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  343,424,102 ( 0.27%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  338,949,315 ( 0.26%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
  324,549,197 ( 0.25%)  ???:llvm::SROA::runOnAlloca(llvm::AllocaInst&)
  323,789,968 ( 0.25%)  ???:llvm::AttributeList::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::AttributeList>)
  320,537,606 ( 0.25%)  ???:llvm::InstCombinerImpl::SimplifyDemandedUseBits(llvm::Value*, llvm::APInt, llvm::KnownBits&, unsigned int, llvm::Instruction*)
  318,746,315 ( 0.25%)  ???:llvm::InstCombinerImpl::visitLoadInst(llvm::LoadInst&)
  317,960,313 ( 0.25%)  ???:llvm::Type::isSizedDerivedType(llvm::SmallPtrSetImpl<llvm::Type*>*) const
  316,026,786 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  302,126,503 ( 0.24%)  ???:(anonymous namespace)::PruningFunctionCloner::CloneBlock(llvm::BasicBlock const*, llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void>, false, true>, std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> >&)
  302,065,145 ( 0.24%)  ./malloc/malloc.c:unlink_chunk.constprop.0
  294,191,017 ( 0.23%)  ???:(anonymous namespace)::SimplifyCFGOpt::simplifyCondBranch(llvm::BranchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&)
  291,986,060 ( 0.23%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
  288,812,527 ( 0.23%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
  286,371,539 ( 0.22%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::FindRoots(llvm::DominatorTreeBase<llvm::BasicBlock, true> const&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
  285,449,054 ( 0.22%)  ???:(anonymous namespace)::CallAnalyzer::analyze()
  284,167,601 ( 0.22%)  ???:(anonymous namespace)::DeadMachineInstructionElim::eliminateDeadMI(llvm::MachineFunction&)
  283,368,551 ( 0.22%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
  278,793,055 ( 0.22%)  ???:llvm::LazyCallGraph::removeDeadFunction(llvm::Function&)
  277,236,215 ( 0.22%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
  275,998,362 ( 0.22%)  ???:llvm::LivePhysRegs::stepBackward(llvm::MachineInstr const&)
  275,170,065 ( 0.21%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
  271,578,774 ( 0.21%)  ???:llvm::InstCombinerImpl::visitBitCast(llvm::BitCastInst&)
  265,949,031 ( 0.21%)  ???:llvm::DemandedBits::isInstructionDead(llvm::Instruction*)
  264,991,470 ( 0.21%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
  261,770,235 ( 0.20%)  ???:(anonymous namespace)::AggressiveDeadCodeElimination::performDeadCodeElimination()
  261,070,161 ( 0.20%)  ???:llvm::LiveVariables::HandleRegMask(llvm::MachineOperand const&)
  259,332,213 ( 0.20%)  ???:(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm::Value*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
  256,602,004 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
  253,744,865 ( 0.20%)  ???:llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm::Optional<llvm::MemoryLocation> const&, llvm::AAQueryInfo&)
  250,267,835 ( 0.20%)  ???:llvm::InstCombinerImpl::visitStoreInst(llvm::StoreInst&)
  244,922,273 ( 0.19%)  ???:llvm::PointerMayBeCaptured(llvm::Value const*, llvm::CaptureTracker*, unsigned int)
  244,189,236 ( 0.19%)  ???:llvm::MD5::final(llvm::MD5::MD5Result&)
  242,381,507 ( 0.19%)  ???:llvm::PopulateLoopsDFS<llvm::BasicBlock, llvm::Loop>::traverse(llvm::BasicBlock*)
  240,799,690 ( 0.19%)  ???:llvm::LoopInfoBase<llvm::BasicBlock, llvm::Loop>::analyze(llvm::DominatorTreeBase<llvm::BasicBlock, false> const&)
  239,883,709 ( 0.19%)  ???:llvm::AAResults::Model<llvm::BasicAAResult>::getModRefBehavior(llvm::CallBase const*)
  239,878,320 ( 0.19%)  ???:llvm::IDFCalculatorBase<llvm::BasicBlock, false>::calculate(llvm::SmallVectorImpl<llvm::BasicBlock*>&)
  235,524,377 ( 0.18%)  ???:llvm::JumpThreadingPass::processBlock(llvm::BasicBlock*)
  234,461,926 ( 0.18%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
  230,961,146 ( 0.18%)  ???:llvm::Intrinsic::getDeclaration(llvm::Module*, unsigned int, llvm::ArrayRef<llvm::Type*>)
  230,247,781 ( 0.18%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
  228,812,659 ( 0.18%)  ???:llvm::SROA::splitAlloca(llvm::AllocaInst&, llvm::sroa::AllocaSlices&)
  227,993,241 ( 0.18%)  ???:updateCGAndAnalysisManagerForPass(llvm::LazyCallGraph&, llvm::LazyCallGraph::SCC&, llvm::LazyCallGraph::Node&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::CGSCCUpdateResult&, llvm::AnalysisManager<llvm::Function>&, bool) [clone .llvm.5426518467876156712]
  227,595,252 ( 0.18%)  ???:llvm::AAResults::Model<llvm::BasicAAResult>::pointsToConstantMemory(llvm::MemoryLocation const&, llvm::AAQueryInfo&, bool)
  227,557,788 ( 0.18%)  ???:llvm::isPotentiallyReachable(llvm::BasicBlock const*, llvm::BasicBlock const*, llvm::SmallPtrSetImpl<llvm::BasicBlock*> const*, llvm::DominatorTree const*, llvm::LoopInfo const*)
  222,934,402 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  221,918,028 ( 0.17%)  ???:llvm::MemorySSA::OptimizeUses::optimizeUses()
  221,703,267 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  218,244,497 ( 0.17%)  ???:llvm::Value::stripAndAccumulateConstantOffsets(llvm::DataLayout const&, llvm::APInt&, bool, llvm::function_ref<bool (llvm::Value&, llvm::APInt&)>) const
  216,869,230 ( 0.17%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::initializeRPOT()
  214,073,540 ( 0.17%)  ???:runImpl(llvm::Function&, llvm::LazyValueInfo*, llvm::DominatorTree*, llvm::SimplifyQuery const&) [clone .llvm.16011871802505272439]
  211,750,471 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs:<ena::unify::UnificationTable<ena::unify::backing_vec::InPlace<rustc_infer::infer::type_variable::TyVidEqKey, &mut alloc::vec::Vec<ena::unify::VarValue<rustc_infer::infer::type_variable::TyVidEqKey>>, &mut rustc_infer::infer::undo_log::InferCtxtUndoLogs>>>::uninlined_get_root_key
  211,136,355 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
  210,594,648 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  208,624,764 ( 0.16%)  ???:llvm::LoopBase<llvm::BasicBlock, llvm::Loop>::verifyLoop() const
  204,221,332 ( 0.16%)  ???:llvm::ConstantRange::makeExactICmpRegion(llvm::CmpInst::Predicate, llvm::APInt const&)
  202,559,157 ( 0.16%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::tryToComputeMassInFunction()
  198,889,878 ( 0.16%)  ???:llvm::ReassociatePass::BuildRankMap(llvm::Function&, llvm::ReversePostOrderTraversal<llvm::Function*, llvm::GraphTraits<llvm::Function*> >&)
  197,315,979 ( 0.15%)  ???:(anonymous namespace)::CVPLatticeFunc::ComputeInstructionState(llvm::Instruction&, llvm::DenseMap<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::DenseMapInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > >, llvm::detail::DenseMapPair<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal> >&, llvm::SparseSolver<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::LatticeKeyInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > > >&)
  193,851,785 ( 0.15%)  ???:llvm::DAGTypeLegalizer::run()
  190,260,697 ( 0.15%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, unsigned int)
  188,805,105 ( 0.15%)  ???:llvm::ReassociatePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
  188,647,947 ( 0.15%)  ???:llvm::X86InstrInfo::analyzeBranch(llvm::MachineBasicBlock&, llvm::MachineBasicBlock*&, llvm::MachineBasicBlock*&, llvm::SmallVectorImpl<llvm::MachineOperand>&, bool) const
  185,919,785 ( 0.15%)  ???:llvm::Type::getPrimitiveSizeInBits() const
  184,533,652 ( 0.14%)  ???:llvm::BlockFrequencyInfoImplBase::finalizeMetrics()
  183,109,602 ( 0.14%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
  183,094,686 ( 0.14%)  ???:llvm::DominatorTreeBase<llvm::BasicBlock, false>::dominates(llvm::BasicBlock const*, llvm::BasicBlock const*) const
  182,699,594 ( 0.14%)  ???:llvm::SelectionDAG::Legalize()
  181,930,145 ( 0.14%)  ???:llvm::LiveIntervals::HMEditor::updateAllRanges(llvm::MachineInstr*)
  181,570,335 ( 0.14%)  ???:llvm::SROA::runImpl(llvm::Function&, llvm::DominatorTree&, llvm::AssumptionCache&)
  180,787,679 ( 0.14%)  ???:llvm::SelectionDAG::computeKnownBits(llvm::SDValue, llvm::APInt const&, unsigned int) const
  179,906,535 ( 0.14%)  ???:???
  178,132,467 ( 0.14%)  ???:llvm::SROA::rewritePartition(llvm::AllocaInst&, llvm::sroa::AllocaSlices&, llvm::sroa::Partition&)
  177,470,689 ( 0.14%)  ???:llvm::SCCPInstVisitor::solve()
  176,536,659 ( 0.14%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
  175,790,702 ( 0.14%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
  175,495,540 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  174,567,498 ( 0.14%)  ???:llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::TargetLibraryInfo const*, llvm::DomTreeUpdater*)
  174,477,602 ( 0.14%)  ???:std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > > std::__copy_move_a2<false, llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > > >(llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > >)
  174,435,670 ( 0.14%)  ???:llvm::GVN::performPRE(llvm::Function&)
  170,995,625 ( 0.13%)  ???:llvm::FoldBranchToCommonDest(llvm::BranchInst*, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*, llvm::TargetTransformInfo const*, unsigned int)
  170,816,859 ( 0.13%)  ???:llvm::DenseMapBase<llvm::DenseMap<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> >, llvm::DenseMapInfo<llvm::PoisoningVH<llvm::BasicBlock> >, llvm::detail::DenseMapPair<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> > > >, llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> >, llvm::DenseMapInfo<llvm::PoisoningVH<llvm::BasicBlock> >, llvm::detail::DenseMapPair<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> > > >::destroyAll() [clone .llvm.4316243980339171764]
  170,097,388 ( 0.13%)  ???:(anonymous namespace)::BitcodeReader::parseModule(unsigned long, bool, llvm::function_ref<llvm::Optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (llvm::StringRef)>)
  168,534,427 ( 0.13%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
  166,002,675 ( 0.13%)  ???:llvm::LiveRange::find(llvm::SlotIndex)
  165,336,329 ( 0.13%)  ???:llvm::getObjectSize(llvm::Value const*, unsigned long&, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::ObjectSizeOpts)
  165,207,385 ( 0.13%)  ???:llvm::LiveRangeUpdater::flush()
  162,111,254 ( 0.13%)  ???:llvm::Instruction::eraseFromParent()
  161,156,208 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  160,931,848 ( 0.13%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
  159,189,422 ( 0.12%)  ???:llvm::GlobalsAAResult::DeletionCallbackHandle::deleted()
  156,940,189 ( 0.12%)  ???:llvm::ScalarEvolution::getAddExpr(llvm::SmallVectorImpl<llvm::SCEV const*>&, llvm::SCEV::NoWrapFlags, unsigned int)
  156,289,950 ( 0.12%)  ???:llvm::KnownBits::computeForAddSub(bool, bool, llvm::KnownBits const&, llvm::KnownBits)
  154,493,372 ( 0.12%)  ???:llvm::LivePhysRegs::addPristines(llvm::MachineFunction const&)
  152,973,188 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  152,097,047 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
  150,472,733 ( 0.12%)  ???:std::back_insert_iterator<std::vector<llvm::BasicBlock*, std::allocator<llvm::BasicBlock*> > > std::__copy_move_a<false, llvm::po_iterator<llvm::Function*, llvm::SmallPtrSet<llvm::BasicBlock*, 8u>, false, llvm::GraphTraits<llvm::Function*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock*, std::allocator<llvm::BasicBlock*> > > >(llvm::po_iterator<llvm::Function*, llvm::SmallPtrSet<llvm::BasicBlock*, 8u>, false, llvm::GraphTraits<llvm::Function*> >, llvm::po_iterator<llvm::Function*, llvm::SmallPtrSet<llvm::BasicBlock*, 8u>, false, llvm::GraphTraits<llvm::Function*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock*, std::allocator<llvm::BasicBlock*> > >)
  149,523,534 ( 0.12%)  ???:llvm::TargetLowering::SimplifyDemandedBits(llvm::SDValue, llvm::APInt const&, llvm::APInt const&, llvm::KnownBits&, llvm::TargetLowering::TargetLoweringOpt&, unsigned int, bool) const
  148,987,369 ( 0.12%)  ???:(anonymous namespace)::BitcodeReader::parseFunctionBody(llvm::Function*)
  148,700,276 ( 0.12%)  ???:llvm::MemoryLocation::getOrNone(llvm::Instruction const*)
  148,573,860 ( 0.12%)  ???:llvm::MD5::update(llvm::StringRef)
  145,274,042 ( 0.11%)  ???:llvm::InstCombinerImpl::visitAllocSite(llvm::Instruction&)
  142,944,807 ( 0.11%)  ???:llvm::Instruction::~Instruction()
  142,468,127 ( 0.11%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::MachineBasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::MachineBasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::MachineBasicBlock, false> >::BatchUpdateInfo*)
  141,335,544 ( 0.11%)  ???:llvm::InterferenceCache::Entry::update(unsigned int)
  139,768,530 ( 0.11%)  ???:llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout const&, llvm::APInt&, llvm::function_ref<bool (llvm::Value&, llvm::APInt&)>) const
  138,815,280 ( 0.11%)  ???:llvm::LoopBase<llvm::BasicBlock, llvm::Loop>::getExitBlocks(llvm::SmallVectorImpl<llvm::BasicBlock*>&) const
  138,255,619 ( 0.11%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::MachineBasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::MachineBasicBlock, false>&, unsigned int)
  137,634,239 ( 0.11%)  ???:llvm::Value::~Value()
  137,055,372 ( 0.11%)  ???:llvm::MemoryLocation::get(llvm::LoadInst const*)
  136,838,497 ( 0.11%)  ???:llvm::BranchProbabilityInfo::SccInfo::SccInfo(llvm::Function const&)
  136,135,727 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  135,755,649 ( 0.11%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
  134,948,888 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S:__memchr_avx2
  132,591,359 ( 0.10%)  ???:llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const
  131,460,142 ( 0.10%)  ???:llvm::BranchProbabilityInfo::calculate(llvm::Function const&, llvm::LoopInfo const&, llvm::TargetLibraryInfo const*, llvm::DominatorTree*, llvm::PostDominatorTree*)
  130,795,650 ( 0.10%)  ???:(anonymous namespace)::JoinVals::computeAssignment(unsigned int, (anonymous namespace)::JoinVals&)
  129,782,429 ( 0.10%)  ???:llvm::TargetTransformInfo::Model<llvm::X86TTIImpl>::getUserCost(llvm::User const*, llvm::ArrayRef<llvm::Value const*>, llvm::TargetTransformInfo::TargetCostKind)
  129,492,609 ( 0.10%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 417 ----------------------------------------
          .               /// # #![allow(unused_mut)]
          .               /// let mut vec: Vec<i32> = Vec::new();
          .               /// ```
          .               #[inline]
          .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[must_use]
          .               pub const fn new() -> Self {
 23,759,850 ( 0.02%)          Vec { buf: RawVec::NEW, len: 0 }
      1,240 ( 0.00%)      }
          .           
          .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
          .               ///
          .               /// The vector will be able to hold exactly `capacity` elements without
          .               /// reallocating. If `capacity` is 0, the vector will not allocate.
          .               ///
          .               /// It is important to note that although the returned vector has the
          .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
          .               /// vec.push(11);
          .               /// assert_eq!(vec.len(), 11);
          .               /// assert!(vec.capacity() >= 11);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               #[unstable(feature = "allocator_api", issue = "32838")]
          .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  7,859,129 ( 0.01%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
          .               }
          .           
          .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
          .               ///
          .               /// # Safety
          .               ///
          .               /// This is highly unsafe, due to the number of invariants that aren't
          .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
          .               ///     // Put everything back together into a Vec
          .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
          .               ///     assert_eq!(rebuilt, [4, 5, 6]);
          .               /// }
          .               /// ```
          .               #[inline]
          .               #[unstable(feature = "allocator_api", issue = "32838")]
          .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    571,423 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
          .               }
          .           
          .               /// Decomposes a `Vec<T>` into its raw components.
          .               ///
          .               /// Returns the raw pointer to the underlying data, the length of
          .               /// the vector (in elements), and the allocated capacity of the
          .               /// data (in elements). These are the same arguments in the same
          .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
          .               ///
          .               /// ```
          .               /// let vec: Vec<i32> = Vec::with_capacity(10);
          .               /// assert_eq!(vec.capacity(), 10);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn capacity(&self) -> usize {
  5,414,197 ( 0.00%)          self.buf.capacity()
          .               }
          .           
          .               /// Reserves capacity for at least `additional` more elements to be inserted
          .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
          .               /// frequent reallocations. After calling `reserve`, capacity will be
          .               /// greater than or equal to `self.len() + additional`. Does nothing if
          .               /// capacity is already sufficient.
          .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1];
          .               /// vec.reserve(10);
          .               /// assert!(vec.capacity() >= 11);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn reserve(&mut self, additional: usize) {
  3,181,260 ( 0.00%)          self.buf.reserve(self.len, additional);
          .               }
          .           
          .               /// Reserves the minimum capacity for exactly `additional` more elements to
          .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
          .               /// capacity will be greater than or equal to `self.len() + additional`.
          .               /// Does nothing if the capacity is already sufficient.
          .               ///
          .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1];
          .               /// vec.reserve_exact(10);
          .               /// assert!(vec.capacity() >= 11);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn reserve_exact(&mut self, additional: usize) {
     63,074 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
          .               }
          .           
          .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
          .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
          .               /// frequent reallocations. After calling `try_reserve`, capacity will be
          .               /// greater than or equal to `self.len() + additional`. Does nothing if
          .               /// capacity is already sufficient.
          .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
          .               /// assert!(vec.capacity() >= 3);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn shrink_to_fit(&mut self) {
          .                   // The capacity is never less than the length, and there's nothing to do when
          .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
          .                   // by only calling it with a greater capacity.
    268,146 ( 0.00%)          if self.capacity() > self.len {
    114,152 ( 0.00%)              self.buf.shrink_to_fit(self.len);
          .                   }
          .               }
          .           
          .               /// Shrinks the capacity of the vector with a lower bound.
          .               ///
          .               /// The capacity will remain at least as large as both the length
          .               /// and the supplied value.
          .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
          .               /// let slice = vec.into_boxed_slice();
          .               /// assert_eq!(slice.into_vec().capacity(), 3);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
          .                   unsafe {
          .                       self.shrink_to_fit();
     87,442 ( 0.00%)              let me = ManuallyDrop::new(self);
          .                       let buf = ptr::read(&me.buf);
          .                       let len = me.len();
          .                       buf.into_box(len).assume_init()
          .                   }
          .               }
          .           
          .               /// Shortens the vector, keeping the first `len` elements and dropping
          .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
          .               /// let mut vec = vec![1, 2, 3];
          .               /// vec.truncate(0);
          .               /// assert_eq!(vec, []);
          .               /// ```
          .               ///
          .               /// [`clear`]: Vec::clear
          .               /// [`drain`]: Vec::drain
          .               #[stable(feature = "rust1", since = "1.0.0")]
  1,305,892 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
          .                   // This is safe because:
          .                   //
          .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
          .                   //   case avoids creating an invalid slice, and
          .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
          .                   //   such that no value will be dropped twice in case `drop_in_place`
          .                   //   were to panic once (if it panics twice, the program aborts).
          .                   unsafe {
          .                       // Note: It's intentional that this is `>` and not `>=`.
          .                       //       Changing it to `>=` has negative performance
          .                       //       implications in some cases. See #78884 for more.
  1,167,115 ( 0.00%)              if len > self.len {
          .                           return;
          .                       }
          .                       let remaining_len = self.len - len;
          .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  1,791,012 ( 0.00%)              self.len = len;
     37,492 ( 0.00%)              ptr::drop_in_place(s);
          .                   }
  1,567,038 ( 0.00%)      }
          .           
          .               /// Extracts a slice containing the entire vector.
          .               ///
          .               /// Equivalent to `&s[..]`.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
          .               /// ```
          .               ///
          .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
          .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
          .               #[inline]
          .               pub fn as_ptr(&self) -> *const T {
          .                   // We shadow the slice method of the same name to avoid going through
          .                   // `deref`, which creates an intermediate reference.
114,952,449 ( 0.09%)          let ptr = self.buf.ptr();
          .                   unsafe {
          .                       assume(!ptr.is_null());
          .                   }
          .                   ptr
          .               }
          .           
          .               /// Returns an unsafe mutable pointer to the vector's buffer.
          .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
          .               /// }
          .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
          .               /// ```
          .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
          .               #[inline]
          .               pub fn as_mut_ptr(&mut self) -> *mut T {
          .                   // We shadow the slice method of the same name to avoid going through
          .                   // `deref_mut`, which creates an intermediate reference.
 64,625,782 ( 0.05%)          let ptr = self.buf.ptr();
          .                   unsafe {
          .                       assume(!ptr.is_null());
          .                   }
          .                   ptr
          .               }
          .           
          .               /// Returns a reference to the underlying allocator.
          .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
          .               ///
          .               /// Normally, here, one would use [`clear`] instead to correctly drop
          .               /// the contents and thus not leak memory.
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub unsafe fn set_len(&mut self, new_len: usize) {
          .                   debug_assert!(new_len <= self.capacity());
          .           
  8,484,554 ( 0.01%)          self.len = new_len;
    132,656 ( 0.00%)      }
          .           
          .               /// Removes an element from the vector and returns it.
          .               ///
          .               /// The removed element is replaced by the last element of the vector.
          .               ///
          .               /// This does not preserve ordering, but is *O*(1).
          .               /// If you need to preserve the element order, use [`remove`] instead.
          .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
          .                       assert_failed(index, len);
          .                   }
          .                   unsafe {
          .                       // We replace self[index] with the last element. Note that if the
          .                       // bounds check above succeeds there must be a last element (which
          .                       // can be self[index] itself).
          .                       let value = ptr::read(self.as_ptr().add(index));
          .                       let base_ptr = self.as_mut_ptr();
         50 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
          .                       self.set_len(len - 1);
          .                       value
          .                   }
          .               }
          .           
          .               /// Inserts an element at position `index` within the vector, shifting all
          .               /// elements after it to the right.
          .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
          .               /// let mut vec = vec![1, 2, 3];
          .               /// vec.insert(1, 4);
          .               /// assert_eq!(vec, [1, 4, 2, 3]);
          .               /// vec.insert(4, 5);
          .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
     42,980 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
          .                   #[cold]
          .                   #[inline(never)]
          .                   fn assert_failed(index: usize, len: usize) -> ! {
          .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
          .                   }
          .           
      7,154 ( 0.00%)          let len = self.len();
     19,170 ( 0.00%)          if index > len {
          .                       assert_failed(index, len);
          .                   }
          .           
          .                   // space for the new element
     29,658 ( 0.00%)          if len == self.buf.capacity() {
          .                       self.reserve(1);
          .                   }
          .           
          .                   unsafe {
          .                       // infallible
          .                       // The spot to put the new value
          .                       {
          .                           let p = self.as_mut_ptr().add(index);
          .                           // Shift everything over to make space. (Duplicating the
          .                           // `index`th element into two consecutive places.)
     41,445 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
          .                           // Write it in, overwriting the first copy of the `index`th
          .                           // element.
          .                           ptr::write(p, element);
          .                       }
     29,658 ( 0.00%)              self.set_len(len + 1);
          .                   }
     36,840 ( 0.00%)      }
          .           
          .               /// Removes and returns the element at position `index` within the vector,
          .               /// shifting all elements after it to the left.
          .               ///
          .               /// Note: Because this shifts over the remaining elements, it has a
          .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
          .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
          .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
          .               pub fn remove(&mut self, index: usize) -> T {
          .                   #[cold]
          .                   #[inline(never)]
          .                   #[track_caller]
          .                   fn assert_failed(index: usize, len: usize) -> ! {
          .                       panic!("removal index (is {}) should be < len (is {})", index, len);
          .                   }
          .           
      2,203 ( 0.00%)          let len = self.len();
      8,559 ( 0.00%)          if index >= len {
          .                       assert_failed(index, len);
          .                   }
          .                   unsafe {
          .                       // infallible
          .                       let ret;
          .                       {
          .                           // the place we are taking from.
          .                           let ptr = self.as_mut_ptr().add(index);
          .                           // copy it out, unsafely having a copy of the value on
          .                           // the stack and in the vector at the same time.
      4,048 ( 0.00%)                  ret = ptr::read(ptr);
          .           
          .                           // Shift everything down to fill in that spot.
      4,691 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
          .                       }
      4,726 ( 0.00%)              self.set_len(len - 1);
          .                       ret
          .                   }
          .               }
          .           
          .               /// Retains only the elements specified by the predicate.
          .               ///
          .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
          .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1, 2, 3, 4, 5];
          .               /// let keep = [false, true, true, false, true];
          .               /// let mut iter = keep.iter();
          .               /// vec.retain(|_| *iter.next().unwrap());
          .               /// assert_eq!(vec, [2, 3, 5]);
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
  3,005,790 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
          .               where
          .                   F: FnMut(&T) -> bool,
          .               {
     98,037 ( 0.00%)          self.retain_mut(|elem| f(elem));
  2,935,592 ( 0.00%)      }
          .           
          .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
          .               ///
          .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
          .               /// This method operates in place, visiting each element exactly once in the
          .               /// original order, and preserves the order of the retained elements.
          .               ///
          .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
          .               /// });
          .               /// assert_eq!(vec, [2, 3, 4]);
          .               /// ```
          .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
          .               pub fn retain_mut<F>(&mut self, mut f: F)
          .               where
          .                   F: FnMut(&mut T) -> bool,
          .               {
    386,829 ( 0.00%)          let original_len = self.len();
          .                   // Avoid double drop if the drop guard is not executed,
          .                   // since we may make some holes during the process.
          .                   unsafe { self.set_len(0) };
          .           
          .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
          .                   //      |<-              processed len   ->| ^- next to check
          .                   //                  |<-  deleted cnt     ->|
          .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
          .                       v: &'a mut Vec<T, A>,
          .                       processed_len: usize,
          .                       deleted_cnt: usize,
          .                       original_len: usize,
          .                   }
          .           
          .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
          .                       fn drop(&mut self) {
    285,456 ( 0.00%)                  if self.deleted_cnt > 0 {
          .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
          .                               unsafe {
          .                                   ptr::copy(
          .                                       self.v.as_ptr().add(self.processed_len),
    252,206 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
          .                                       self.original_len - self.processed_len,
          .                                   );
          .                               }
          .                           }
          .                           // SAFETY: After filling holes, all items are in contiguous memory.
          .                           unsafe {
          2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
          .                           }
          .                       }
          .                   }
          .           
          .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
          .           
          .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
          .                       original_len: usize,
          .                       f: &mut F,
          .                       g: &mut BackshiftOnDrop<'_, T, A>,
          .                   ) where
          .                       F: FnMut(&mut T) -> bool,
          .                   {
  4,774,630 ( 0.00%)              while g.processed_len != original_len {
          .                           // SAFETY: Unchecked element must be valid.
          .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
  1,091,389 ( 0.00%)                  if !f(cur) {
          .                               // Advance early to avoid double drop if `drop_in_place` panicked.
     39,600 ( 0.00%)                      g.processed_len += 1;
     10,396 ( 0.00%)                      g.deleted_cnt += 1;
          .                               // SAFETY: We never touch this element again after dropped.
      3,504 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
          .                               // We already advanced the counter.
          .                               if DELETED {
          .                                   continue;
          .                               } else {
          .                                   break;
          .                               }
          .                           }
          .                           if DELETED {
          .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
          .                               // We use copy for move, and never touch this element again.
          .                               unsafe {
    135,705 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
          .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
          .                               }
          .                           }
    113,394 ( 0.00%)                  g.processed_len += 1;
          .                       }
          .                   }
          .           
          .                   // Stage 1: Nothing was deleted.
          .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
          .           
          .                   // Stage 2: Some elements were deleted.
          .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
          .               ///
          .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
          .               ///
          .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
          .               /// ```
          .               #[stable(feature = "dedup_by", since = "1.16.0")]
     51,870 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
          .               where
          .                   F: FnMut(&mut T, &mut T) -> bool,
          .               {
     17,875 ( 0.00%)          let len = self.len();
     44,132 ( 0.00%)          if len <= 1 {
          .                       return;
          .                   }
          .           
          .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
          .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
          .                       /* Offset of the element we want to check if it is duplicate */
          .                       read: usize,
          .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
          .                   let ptr = gap.vec.as_mut_ptr();
          .           
          .                   /* Drop items while going through Vec, it should be more efficient than
          .                    * doing slice partition_dedup + truncate */
          .           
          .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
          .                    * are always in-bounds and read_ptr never aliases prev_ptr */
          .                   unsafe {
     84,798 ( 0.00%)              while gap.read < len {
          .                           let read_ptr = ptr.add(gap.read);
          .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
          .           
      6,585 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
          .                               // Increase `gap.read` now since the drop may panic.
          .                               gap.read += 1;
          .                               /* We have found duplicate, drop it in-place */
          .                               ptr::drop_in_place(read_ptr);
          .                           } else {
          .                               let write_ptr = ptr.add(gap.write);
          .           
          .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
          .                                * have to use `copy` or conditional `copy_nonoverlapping`.
          .                                * Looks like the first option is faster. */
          .                               ptr::copy(read_ptr, write_ptr, 1);
          .           
          .                               /* We have filled that place, so go further */
     47,068 ( 0.00%)                      gap.write += 1;
          .                               gap.read += 1;
          .                           }
          .                       }
          .           
          .                       /* Technically we could let `gap` clean up with its Drop, but
          .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
          .                        * the codegen, so we just do it manually */
          .                       gap.vec.set_len(gap.write);
          .                       mem::forget(gap);
          .                   }
     59,280 ( 0.00%)      }
          .           
          .               /// Appends an element to the back of a collection.
          .               ///
          .               /// # Panics
          .               ///
          .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
          .               ///
          .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1, 2];
          .               /// vec.push(3);
          .               /// assert_eq!(vec, [1, 2, 3]);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
      4,915 ( 0.00%)      pub fn push(&mut self, value: T) {
          .                   // This will panic or abort if we would allocate > isize::MAX bytes
          .                   // or if the length increment would overflow for zero-sized types.
 31,181,402 ( 0.02%)          if self.len == self.buf.capacity() {
  2,801,367 ( 0.00%)              self.buf.reserve_for_push(self.len);
          .                   }
          .                   unsafe {
  1,305,051 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
          .                       ptr::write(end, value);
 46,689,328 ( 0.04%)              self.len += 1;
          .                   }
      3,932 ( 0.00%)      }
          .           
          .               /// Removes the last element from a vector and returns it, or [`None`] if it
          .               /// is empty.
          .               ///
          .               /// If you'd like to pop the first element, consider using
          .               /// [`VecDeque::pop_front`] instead.
          .               ///
          .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1, 2, 3];
          .               /// assert_eq!(vec.pop(), Some(3));
          .               /// assert_eq!(vec, [1, 2]);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn pop(&mut self) -> Option<T> {
 11,396,139 ( 0.01%)          if self.len == 0 {
      1,351 ( 0.00%)              None
          .                   } else {
          .                       unsafe {
  7,732,133 ( 0.01%)                  self.len -= 1;
  2,154,245 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
          .                       }
          .                   }
          .               }
          .           
          .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
          .               ///
          .               /// # Panics
          .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
          .               /// let mut vec2 = vec![4, 5, 6];
          .               /// vec.append(&mut vec2);
          .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
          .               /// assert_eq!(vec2, []);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               #[stable(feature = "append", since = "1.4.0")]
      3,416 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
          .                   unsafe {
          .                       self.append_elements(other.as_slice() as _);
          .                       other.set_len(0);
          .                   }
      2,928 ( 0.00%)      }
          .           
          .               /// Appends elements to `Self` from other buffer.
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               unsafe fn append_elements(&mut self, other: *const [T]) {
          .                   let count = unsafe { (*other).len() };
          .                   self.reserve(count);
    340,496 ( 0.00%)          let len = self.len();
          .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  4,252,145 ( 0.00%)          self.len += count;
          .               }
          .           
          .               /// Creates a draining iterator that removes the specified range in the vector
          .               /// and yields the removed items.
          .               ///
          .               /// When the iterator **is** dropped, all elements in the range are removed
          .               /// from the vector, even if the iterator was not fully consumed. If the
          .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
          .                   // When the Drain is first created, it shortens the length of
          .                   // the source vector to make sure no uninitialized or moved-from elements
          .                   // are accessible at all if the Drain's destructor never gets to run.
          .                   //
          .                   // Drain will ptr::read out the values to remove.
          .                   // When finished, remaining tail of the vec is copied back to cover
          .                   // the hole, and the vector length is restored to the new length.
          .                   //
    209,570 ( 0.00%)          let len = self.len();
          .                   let Range { start, end } = slice::range(range, ..len);
          .           
          .                   unsafe {
          .                       // set self.vec length's to start, to be safe in case Drain is leaked
          .                       self.set_len(start);
          .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
          .                       // whole Drain iterator (like &mut T).
     10,505 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    191,105 ( 0.00%)              Drain {
          .                           tail_start: end,
      7,052 ( 0.00%)                  tail_len: len - end,
          .                           iter: range_slice.iter(),
          .                           vec: NonNull::from(self),
          .                       }
          .                   }
          .               }
          .           
          .               /// Clears the vector, removing all values.
          .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
          .               ///
          .               /// v.clear();
          .               ///
          .               /// assert!(v.is_empty());
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn clear(&mut self) {
  2,337,335 ( 0.00%)          self.truncate(0)
          .               }
          .           
          .               /// Returns the number of elements in the vector, also referred to
          .               /// as its 'length'.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
          .               /// let mut v = Vec::new();
          .               /// assert!(v.is_empty());
          .               ///
          .               /// v.push(1);
          .               /// assert!(!v.is_empty());
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn is_empty(&self) -> bool {
  3,064,475 ( 0.00%)          self.len() == 0
          .               }
          .           
          .               /// Splits the collection into two at the given index.
          .               ///
          .               /// Returns a newly allocated vector containing the elements in the range
          .               /// `[at, len)`. After the call, the original vector will be left containing
          .               /// the elements `[0, at)` with its previous capacity unchanged.
          .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
          .                   A: Clone,
          .               {
          .                   #[cold]
          .                   #[inline(never)]
          .                   fn assert_failed(at: usize, len: usize) -> ! {
          .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
          .                   }
          .           
     11,295 ( 0.00%)          if at > self.len() {
          .                       assert_failed(at, self.len());
          .                   }
          .           
      9,177 ( 0.00%)          if at == 0 {
          .                       // the new vector can take over the original buffer and avoid the copy
          .                       return mem::replace(
          .                           self,
          .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
          .                       );
          .                   }
          .           
          .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
          .               ///
          .               /// let mut vec = vec![];
          .               /// let mut p = 1;
          .               /// vec.resize_with(4, || { p *= 2; p });
          .               /// assert_eq!(vec, [2, 4, 8, 16]);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    269,250 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
          .               where
          .                   F: FnMut() -> T,
          .               {
     36,936 ( 0.00%)          let len = self.len();
     73,872 ( 0.00%)          if new_len > len {
    212,217 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
          .                   } else {
          .                       self.truncate(new_len);
          .                   }
    232,314 ( 0.00%)      }
          .           
          .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
          .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
          .               /// `'a`. If the type has only static references, or none at all, then this
          .               /// may be chosen to be `'static`.
          .               ///
          .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
          .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
          .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
          .               #[inline]
          .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
          .                   // Note:
          .                   // This method is not implemented in terms of `split_at_spare_mut`,
          .                   // to prevent invalidation of pointers to the buffer.
          .                   unsafe {
          .                       slice::from_raw_parts_mut(
          2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        178 ( 0.00%)                  self.buf.capacity() - self.len,
          .                       )
          .                   }
          .               }
          .           
          .               /// Returns vector content as a slice of `T`, along with the remaining spare
          .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
          .               ///
          .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
          .               /// assert_eq!(vec, ["hello", "world", "world"]);
          .               ///
          .               /// let mut vec = vec![1, 2, 3, 4];
          .               /// vec.resize(2, 0);
          .               /// assert_eq!(vec, [1, 2]);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "vec_resize", since = "1.5.0")]
    272,610 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
     27,261 ( 0.00%)          let len = self.len();
          .           
     81,783 ( 0.00%)          if new_len > len {
     38,412 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
          .                   } else {
          .                       self.truncate(new_len);
          .                   }
     45,645 ( 0.00%)      }
          .           
          .               /// Clones and appends all elements in a slice to the `Vec`.
          .               ///
          .               /// Iterates over the slice `other`, clones each element, and then appends
          .               /// it to this `Vec`. The `other` slice is traversed in-order.
          .               ///
          .               /// Note that this function is same as [`extend`] except that it is
          .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
          .           trait ExtendWith<T> {
          .               fn next(&mut self) -> T;
          .               fn last(self) -> T;
          .           }
          .           
          .           struct ExtendElement<T>(T);
          .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
          .               fn next(&mut self) -> T {
     12,821 ( 0.00%)          self.0.clone()
          .               }
          .               fn last(self) -> T {
          .                   self.0
          .               }
          .           }
          .           
          .           struct ExtendFunc<F>(F);
          .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
          .               fn last(mut self) -> T {
          .                   (self.0)()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator> Vec<T, A> {
          .               #[cfg(not(no_global_oom_handling))]
          .               /// Extend the vector by `n` values, using the given generator.
  2,417,762 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
          .                   self.reserve(n);
          .           
          .                   unsafe {
     42,237 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
          .                       // Use SetLenOnDrop to work around bug where compiler
          .                       // might not realize the store through `ptr` through self.set_len()
          .                       // don't alias.
          .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
          .           
          .                       // Write all elements except the last one
          .                       for _ in 1..n {
          .                           ptr::write(ptr, value.next());
          .                           ptr = ptr.offset(1);
          .                           // Increment the length in every step in case next() panics
          .                           local_len.increment_len(1);
          .                       }
          .           
  1,944,103 ( 0.00%)              if n > 0 {
          .                           // We can write the last element directly without cloning needlessly
          .                           ptr::write(ptr, value.last());
          .                           local_len.increment_len(1);
          .                       }
          .           
          .                       // len set by scope guard
          .                   }
  1,897,109 ( 0.00%)      }
          .           }
          .           
          .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
          .               /// Removes consecutive repeated elements in the vector according to the
          .               /// [`PartialEq`] trait implementation.
          .               ///
          .               /// If the vector is sorted, this removes all duplicates.
          .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
          .               ///
          .               /// vec.dedup();
          .               ///
          .               /// assert_eq!(vec, [1, 2, 3, 2]);
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[inline]
          .               pub fn dedup(&mut self) {
      7,414 ( 0.00%)          self.dedup_by(|a, b| a == b)
          .               }
          .           }
          .           
          .           ////////////////////////////////////////////////////////////////////////////////
          .           // Internal methods and functions
          .           ////////////////////////////////////////////////////////////////////////////////
          .           
          .           #[doc(hidden)]
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
    451,899 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  2,720,728 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    531,381 ( 0.00%)  }
          .           
          .           #[doc(hidden)]
          .           #[cfg(not(no_global_oom_handling))]
          .           #[unstable(feature = "allocator_api", issue = "32838")]
          .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
          .               <T as SpecFromElem>::from_elem(elem, n, alloc)
          .           }
          .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
          .           // Common trait implementations for Vec
          .           ////////////////////////////////////////////////////////////////////////////////
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
          .               type Target = [T];
          .           
          .               fn deref(&self) -> &[T] {
150,472,206 ( 0.12%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        420 ( 0.00%)      }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
          .               fn deref_mut(&mut self) -> &mut [T] {
 73,685,457 ( 0.06%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           trait SpecCloneFrom {
          .               fn clone_from(this: &mut Self, other: &Self);
          .           }
          .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
          .                   this.extend_from_slice(other);
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
          .               #[cfg(not(test))]
  2,035,192 ( 0.00%)      fn clone(&self) -> Self {
          .                   let alloc = self.allocator().clone();
          2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  2,462,984 ( 0.00%)      }
          .           
          .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
          .               // required for this method definition, is not available. Instead use the
          .               // `slice::to_vec`  function which is only available with cfg(test)
          .               // NB see the slice::hack module in slice.rs for more information
          .               #[cfg(test)]
          .               fn clone(&self) -> Self {
          .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
          .               message = "vector indices are of type `usize` or ranges of `usize`",
          .               label = "vector indices are of type `usize` or ranges of `usize`"
          .           )]
          .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
          .               type Output = I::Output;
          .           
          .               #[inline]
          .               fn index(&self, index: I) -> &Self::Output {
  1,605,756 ( 0.00%)          Index::index(&**self, index)
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_on_unimplemented(
          .               message = "vector indices are of type `usize` or ranges of `usize`",
          .               label = "vector indices are of type `usize` or ranges of `usize`"
          .           )]
          .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
          .               #[inline]
          .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      4,268 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T> FromIterator<T> for Vec<T> {
          .               #[inline]
          .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 10,879,618 ( 0.01%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
          .               type Item = T;
          .               type IntoIter = IntoIter<T, A>;
          .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
          .               /// for s in v.into_iter() {
          .               ///     // s has type String, not &String
          .               ///     println!("{}", s);
          .               /// }
          .               /// ```
          .               #[inline]
          .               fn into_iter(self) -> IntoIter<T, A> {
          .                   unsafe {
  4,322,202 ( 0.00%)              let mut me = ManuallyDrop::new(self);
          .                       let alloc = ptr::read(me.allocator());
          .                       let begin = me.as_mut_ptr();
          .                       let end = if mem::size_of::<T>() == 0 {
          .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
          .                       } else {
          .                           begin.add(me.len()) as *const T
          .                       };
          .                       let cap = me.buf.capacity();
  1,525,745 ( 0.00%)              IntoIter {
          .                           buf: NonNull::new_unchecked(begin),
          .                           phantom: PhantomData,
          .                           cap,
          .                           alloc,
          .                           ptr: begin,
          .                           end,
          .                       }
          .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
          .               type Item = &'a T;
          .               type IntoIter = slice::Iter<'a, T>;
          .           
          .               fn into_iter(self) -> slice::Iter<'a, T> {
        145 ( 0.00%)          self.iter()
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
          .               type Item = &'a mut T;
          .               type IntoIter = slice::IterMut<'a, T>;
          .           
          .               fn into_iter(self) -> slice::IterMut<'a, T> {
      1,206 ( 0.00%)          self.iter_mut()
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
          .               #[inline]
     17,288 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  4,929,644 ( 0.00%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     17,288 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn extend_one(&mut self, item: T) {
         32 ( 0.00%)          self.push(item);
          .               }
          .           
          .               #[inline]
          .               fn extend_reserve(&mut self, additional: usize) {
          .                   self.reserve(additional);
          .               }
          .           }
          .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
          .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
          .                   // This is the case for a general iterator.
          .                   //
          .                   // This function should be the moral equivalent of:
          .                   //
          .                   //      for item in iterator {
          .                   //          self.push(item);
          .                   //      }
    775,105 ( 0.00%)          while let Some(element) = iterator.next() {
    254,336 ( 0.00%)              let len = self.len();
  3,160,261 ( 0.00%)              if len == self.capacity() {
      4,652 ( 0.00%)                  let (lower, _) = iterator.size_hint();
          .                           self.reserve(lower.saturating_add(1));
          .                       }
          .                       unsafe {
          .                           ptr::write(self.as_mut_ptr().add(len), element);
          .                           // Since next() executes user code which can panic we have to bump the length
          .                           // after each step.
          .                           // NB can't overflow since we would have had to alloc the address space
  2,236,556 ( 0.00%)                  self.set_len(len + 1);
          .                       }
          .                   }
     24,979 ( 0.00%)      }
          .           
          .               /// Creates a splicing iterator that replaces the specified range in the vector
          .               /// with the given `replace_with` iterator and yields the removed items.
          .               /// `replace_with` does not need to be the same length as `range`.
          .               ///
          .               /// `range` is removed even if the iterator is not consumed until the end.
          .               ///
          .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               #[stable(feature = "vec_splice", since = "1.21.0")]
          .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
          .               where
          .                   R: RangeBounds<usize>,
          .                   I: IntoIterator<Item = T>,
          .               {
     38,015 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
          .               }
          .           
          .               /// Creates an iterator which uses a closure to determine if an element should be removed.
          .               ///
          .               /// If the closure returns true, then the element is removed and yielded.
          .               /// If the closure returns false, the element will remain in the vector and will not be yielded
          .               /// by the iterator.
          .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
          .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
          .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
          .               /// ```
          .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
          .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
          .               where
          .                   F: FnMut(&mut T) -> bool,
          .               {
     13,127 ( 0.00%)          let old_len = self.len();
          .           
          .                   // Guard against us getting leaked (leak amplification)
          .                   unsafe {
          .                       self.set_len(0);
          .                   }
          .           
     43,728 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
          .               }
          .           }
          .           
          .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
          .           ///
          .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
          .           /// append the entire slice at once.
          .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
          .               #[inline]
          .               fn cmp(&self, other: &Self) -> Ordering {
          .                   Ord::cmp(&**self, &**other)
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  5,463,923 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // use drop for [T]
          .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
          .                       // could avoid questions of validity in certain cases
  2,461,295 ( 0.00%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
          .                   }
          .                   // RawVec handles deallocation
  6,441,772 ( 0.01%)      }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
          .           impl<T> const Default for Vec<T> {
          .               /// Creates an empty `Vec<T>`.
          .               fn default() -> Vec<T> {
          .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
          .               /// newly-allocated buffer with exactly the right capacity.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
          .               /// ```
          .               fn from(v: Vec<T, A>) -> Self {
          4 ( 0.00%)          v.into_boxed_slice()
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl From<&str> for Vec<u8> {
          .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
          .               ///
-- line 2992 ----------------------------------------

 38,637,309 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                   

-- line 346 ----------------------------------------
          .               ///
          .               /// let c = Cell::new(5);
          .               ///
          .               /// c.set(10);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn set(&self, val: T) {
      4,595 ( 0.00%)          let old = self.replace(val);
     10,440 ( 0.00%)          drop(old);
          .               }
          .           
          .               /// Swaps the values of two `Cell`s.
          .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
          .               ///
          .               /// let five = c.get();
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn get(&self) -> T {
          .                   // SAFETY: This can cause data races if called from a separate thread,
          .                   // but `Cell` is `!Sync` so this won't happen.
  1,274,251 ( 0.00%)          unsafe { *self.value.get() }
          .               }
          .           
          .               /// Updates the contained value using a function and returns the new value.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
          .           
          .           #[inline(always)]
          .           fn is_writing(x: BorrowFlag) -> bool {
          .               x < UNUSED
          .           }
          .           
          .           #[inline(always)]
          .           fn is_reading(x: BorrowFlag) -> bool {
  2,540,820 ( 0.00%)      x > UNUSED
          .           }
          .           
          .           impl<T> RefCell<T> {
          .               /// Creates a new `RefCell` containing `value`.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
          .               /// use std::cell::RefCell;
          .               ///
          .               /// let c = RefCell::new(5);
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
          .               #[inline]
          .               pub const fn new(value: T) -> RefCell<T> {
    361,577 ( 0.00%)          RefCell {
    276,662 ( 0.00%)              value: UnsafeCell::new(value),
          .                       borrow: Cell::new(UNUSED),
          .                       #[cfg(feature = "debug_refcell")]
          .                       borrowed_at: Cell::new(None),
          .                   }
          .               }
          .           
          .               /// Consumes the `RefCell`, returning the wrapped value.
          .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
          .               /// let five = c.into_inner();
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
          .               #[inline]
          .               pub const fn into_inner(self) -> T {
          .                   // Since this function takes `self` (the `RefCell`) by value, the
          .                   // compiler statically verifies that it is not currently borrowed.
     20,708 ( 0.00%)          self.value.into_inner()
          .               }
          .           
          .               /// Replaces the wrapped value with a new one, returning the old value,
          .               /// without deinitializing either one.
          .               ///
          .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
          .               ///
          .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
          .               /// let c = RefCell::new(5);
          .               ///
          .               /// let m = c.borrow_mut();
          .               /// let b = c.borrow(); // this causes a panic
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[inline]
          .               #[track_caller]
     34,840 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
          .                   self.try_borrow().expect("already mutably borrowed")
    104,520 ( 0.00%)      }
          .           
          .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
          .               /// borrowed.
          .               ///
          .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
          .               /// taken out at the same time.
          .               ///
          .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
          .               /// let c = RefCell::new(5);
          .               /// let m = c.borrow();
          .               ///
          .               /// let b = c.borrow_mut(); // this causes a panic
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[inline]
          .               #[track_caller]
    168,775 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
          .                   self.try_borrow_mut().expect("already borrowed")
    506,325 ( 0.00%)      }
          .           
          .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
          .               ///
          .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
          .               /// from it exit scope. The value cannot be borrowed while this borrow is
          .               /// active.
          .               ///
          .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 967 ----------------------------------------
          .               /// }
          .               ///
          .               /// assert!(c.try_borrow_mut().is_ok());
          .               /// ```
          .               #[stable(feature = "try_borrow", since = "1.13.0")]
          .               #[inline]
          .               #[cfg_attr(feature = "debug_refcell", track_caller)]
          .               pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {
          6 ( 0.00%)          match BorrowRefMut::new(&self.borrow) {
          .                       Some(b) => {
          .                           #[cfg(feature = "debug_refcell")]
          .                           {
          .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
          .                           }
          .           
          .                           // SAFETY: `BorrowRef` guarantees unique access.
     10,334 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
          .                       }
          .                       None => Err(BorrowMutError {
          .                           // If a borrow occurred, then we must already have an outstanding borrow,
          .                           // so `borrowed_at` will be `Some`
          .                           #[cfg(feature = "debug_refcell")]
          .                           location: self.borrowed_at.get().unwrap(),
          .                       }),
          .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
          .           
          .           struct BorrowRef<'b> {
          .               borrow: &'b Cell<BorrowFlag>,
          .           }
          .           
          .           impl<'b> BorrowRef<'b> {
          .               #[inline]
          .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
  3,468,309 ( 0.00%)          let b = borrow.get().wrapping_add(1);
  2,204,839 ( 0.00%)          if !is_reading(b) {
          .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
          .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
          .                       //    due to Rust's reference aliasing rules
          .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
          .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
          .                       //    an additional read borrow because isize can't represent so many read borrows
          .                       //    (this can only happen if you mem::forget more than a small constant amount of
          .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
          .                       Some(BorrowRef { borrow })
          .                   }
          .               }
          .           }
          .           
          .           impl Drop for BorrowRef<'_> {
          .               #[inline]
          .               fn drop(&mut self) {
  1,349,289 ( 0.00%)          let borrow = self.borrow.get();
          .                   debug_assert!(is_reading(borrow));
  2,809,501 ( 0.00%)          self.borrow.set(borrow - 1);
          .               }
          .           }
          .           
          .           impl Clone for BorrowRef<'_> {
          .               #[inline]
          .               fn clone(&self) -> Self {
          .                   // Since this Ref exists, we know the borrow flag
          .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
          .           
          .           struct BorrowRefMut<'b> {
          .               borrow: &'b Cell<BorrowFlag>,
          .           }
          .           
          .           impl Drop for BorrowRefMut<'_> {
          .               #[inline]
          .               fn drop(&mut self) {
 59,871,514 ( 0.05%)          let borrow = self.borrow.get();
          .                   debug_assert!(is_writing(borrow));
119,222,697 ( 0.09%)          self.borrow.set(borrow + 1);
          .               }
          .           }
          .           
          .           impl<'b> BorrowRefMut<'b> {
          .               #[inline]
          .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
          .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
          .                   // mutable reference, and so there must currently be no existing
          .                   // references. Thus, while clone increments the mutable refcount, here
          .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
122,849,058 ( 0.10%)          match borrow.get() {
          .                       UNUSED => {
          .                           borrow.set(UNUSED - 1);
          .                           Some(BorrowRefMut { borrow })
          .                       }
          .                       _ => None,
          .                   }
          .               }
          .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
          .                   self.value
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
          .               #[inline]
          .               fn deref_mut(&mut self) -> &mut T {
      3,196 ( 0.00%)          self.value
          .               }
          .           }
          .           
          .           #[unstable(feature = "coerce_unsized", issue = "27732")]
          .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
          .           
          .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
          .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
          .               /// ```
          .               #[inline(always)]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
          .               pub const fn get(&self) -> *mut T {
          .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
          .                   // #[repr(transparent)]. This exploits libstd's special status, there is
          .                   // no guarantee for user code that this will work in future versions of the compiler!
 17,701,877 ( 0.01%)          self as *const UnsafeCell<T> as *const T as *mut T
          .               }
          .           
          .               /// Returns a mutable reference to the underlying data.
          .               ///
          .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
          .               /// guarantees that we possess the only reference.
          .               ///
          .               /// # Examples
-- line 1925 ----------------------------------------

 70,450,645 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 121 ----------------------------------------
         .           #[derive(Debug)]
         .           pub enum ProcessResult<O, E> {
         .               Unchanged,
         .               Changed(Vec<O>),
         .               Error(E),
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
   234,064 ( 0.00%)  struct ObligationTreeId(usize);
         .           
         .           type ObligationTreeIdGenerator =
         .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
         .           
         .           pub struct ObligationForest<O: ForestObligation> {
         .               /// The list of obligations. In between calls to `process_obligations`,
         .               /// this list only contains nodes in the `Pending` or `Waiting` state.
         .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
         .               has_parent: bool,
         .           
         .               /// Identifier of the obligation tree to which this node belongs.
         .               obligation_tree_id: ObligationTreeId,
         .           }
         .           
         .           impl<O> Node<O> {
         .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
 2,838,960 ( 0.00%)          Node {
         .                       obligation,
         .                       state: Cell::new(NodeState::Pending),
   358,644 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
         .                       has_parent: parent.is_some(),
         .                       obligation_tree_id,
         .                   }
         .               }
         .           }
         .           
         .           /// The state of one node in some tree within the forest. This represents the
         .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
         .           ///  |     compress()
         .           ///  v
         .           /// (Removed)
         .           /// ```
         .           /// The `Error` state can be introduced in several places, via `error_at()`.
         .           ///
         .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
         .           /// `Waiting`.
67,442,098 ( 0.05%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
         .           enum NodeState {
         .               /// This obligation has not yet been selected successfully. Cannot have
         .               /// subobligations.
         .               Pending,
         .           
         .               /// This obligation was selected successfully, but may or may not have
         .               /// subobligations.
         .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
         .               pub stalled: bool,
         .           }
         .           
         .           impl<O, E> OutcomeTrait for Outcome<O, E> {
         .               type Error = Error<O, E>;
         .               type Obligation = O;
         .           
         .               fn new() -> Self {
   372,850 ( 0.00%)          Self { stalled: true, errors: vec![] }
         .               }
         .           
         .               fn mark_not_stalled(&mut self) {
   173,535 ( 0.00%)          self.stalled = false;
         .               }
         .           
         .               fn is_stalled(&self) -> bool {
    86,922 ( 0.00%)          self.stalled
         .               }
         .           
         .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
         .                   // do nothing
         .               }
         .           
         .               fn record_error(&mut self, error: Self::Error) {
       128 ( 0.00%)          self.errors.push(error)
         .               }
         .           }
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub struct Error<O, E> {
         .               pub error: E,
         .               pub backtrace: Vec<O>,
         .           }
         .           
         .           impl<O: ForestObligation> ObligationForest<O> {
    51,192 ( 0.00%)      pub fn new() -> ObligationForest<O> {
   614,304 ( 0.00%)          ObligationForest {
         .                       nodes: vec![],
         .                       done_cache: Default::default(),
         .                       active_cache: Default::default(),
         .                       reused_node_vec: vec![],
         .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
         .                       error_cache: Default::default(),
         .                   }
    51,192 ( 0.00%)      }
         .           
         .               /// Returns the total number of nodes in the forest that have not
         .               /// yet been fully resolved.
         .               pub fn len(&self) -> usize {
         .                   self.nodes.len()
         .               }
         .           
         .               /// Registers an obligation.
         .               pub fn register_obligation(&mut self, obligation: O) {
         .                   // Ignore errors here - there is no guarantee of success.
 1,767,766 ( 0.00%)          let _ = self.register_obligation_at(obligation, None);
         .               }
         .           
         .               // Returns Err(()) if we already know this obligation failed.
 2,740,540 ( 0.00%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
   498,280 ( 0.00%)          let cache_key = obligation.as_cache_key();
   498,280 ( 0.00%)          if self.done_cache.contains(&cache_key) {
         .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
         .                       return Ok(());
         .                   }
         .           
 1,263,870 ( 0.00%)          match self.active_cache.entry(cache_key) {
         .                       Entry::Occupied(o) => {
    66,420 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
    66,420 ( 0.00%)                  if let Some(parent_index) = parent {
         .                               // If the node is already in `active_cache`, it has already
         .                               // had its chance to be marked with a parent. So if it's
         .                               // not already present, just dump `parent` into the
         .                               // dependents as a non-parent.
    71,991 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
         .                                   node.dependents.push(parent_index);
         .                               }
         .                           }
    99,630 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
         .                       }
   532,305 ( 0.00%)              Entry::Vacant(v) => {
 1,064,610 ( 0.00%)                  let obligation_tree_id = match parent {
   120,806 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
         .                               None => self.obligation_tree_id_generator.next().unwrap(),
         .                           };
         .           
         .                           let already_failed = parent.is_some()
         .                               && self
         .                                   .error_cache
         .                                   .get(&obligation_tree_id)
         .                                   .map_or(false, |errors| errors.contains(v.key()));
         .           
         .                           if already_failed {
         .                               Err(())
         .                           } else {
   177,435 ( 0.00%)                      let new_index = self.nodes.len();
         .                               v.insert(new_index);
         .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
         .                               Ok(())
         .                           }
         .                       }
         .                   }
 2,242,260 ( 0.00%)      }
         .           
         .               /// Converts all remaining obligations to the given error.
   518,602 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
         .                   let errors = self
         .                       .nodes
         .                       .iter()
         .                       .enumerate()
         .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
         .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
         .                       .collect();
         .           
   148,172 ( 0.00%)          self.compress(|_| assert!(false));
         .                   errors
   444,516 ( 0.00%)      }
         .           
         .               /// Returns the set of obligations that are in a pending state.
         .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
         .               where
         .                   F: Fn(&O) -> P,
         .               {
       154 ( 0.00%)          self.nodes
         .                       .iter()
         .                       .filter(|node| node.state.get() == NodeState::Pending)
         .                       .map(|node| f(&node.obligation))
         .                       .collect()
         .               }
         .           
        56 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
         .                   let node = &self.nodes[index];
         8 ( 0.00%)          self.error_cache
        24 ( 0.00%)              .entry(node.obligation_tree_id)
         .                       .or_default()
         .                       .insert(node.obligation.as_cache_key());
        64 ( 0.00%)      }
         .           
         .               /// Performs a pass through the obligation list. This must
         .               /// be called in a loop until `outcome.stalled` is false.
         .               ///
         .               /// This _cannot_ be unrolled (presently, at least).
         .               #[inline(never)]
 1,677,825 ( 0.00%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
         .               {
         .                   let mut outcome = OUT::new();
         .           
         .                   // Note that the loop body can append new nodes, and those new nodes
         .                   // will then be processed by subsequent iterations of the loop.
         .                   //
         .                   // We can't use an iterator for the loop because `self.nodes` is
         .                   // appended to and the borrow checker would complain. We also can't use
         .                   // `for index in 0..self.nodes.len() { ... }` because the range would
         .                   // be computed with the initial length, and we would miss the appended
         .                   // nodes. Therefore we use a `while` loop.
         .                   let mut index = 0;
32,825,873 ( 0.03%)          while let Some(node) = self.nodes.get_mut(index) {
         .                       // `processor.process_obligation` can modify the predicate within
         .                       // `node.obligation`, and that predicate is the key used for
         .                       // `self.active_cache`. This means that `self.active_cache` can get
         .                       // out of sync with `nodes`. It's not very common, but it does
         .                       // happen, and code in `compress` has to allow for it.
65,278,896 ( 0.05%)              if node.state.get() != NodeState::Pending {
 8,622,987 ( 0.01%)                  index += 1;
         .                           continue;
         .                       }
         .           
 1,004,511 ( 0.00%)              match processor.process_obligation(&mut node.obligation) {
         .                           ProcessResult::Unchanged => {
         .                               // No change in state.
         .                           }
   694,108 ( 0.00%)                  ProcessResult::Changed(children) => {
         .                               // We are not (yet) stalled.
         .                               outcome.mark_not_stalled();
         .                               node.state.set(NodeState::Success);
         .           
   920,424 ( 0.00%)                      for child in children {
 1,923,686 ( 0.00%)                          let st = self.register_obligation_at(child, Some(index));
   226,316 ( 0.00%)                          if let Err(()) = st {
         .                                       // Error already reported - propagate it
         .                                       // to our node.
         .                                       self.error_at(index);
         .                                   }
         .                               }
         .                           }
         .                           ProcessResult::Error(err) => {
         .                               outcome.mark_not_stalled();
       264 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
         .                           }
         .                       }
48,032,922 ( 0.04%)              index += 1;
         .                   }
         .           
         .                   // There's no need to perform marking, cycle processing and compression when nothing
         .                   // changed.
    86,922 ( 0.00%)          if !outcome.is_stalled() {
         .                       self.mark_successes();
         .                       self.process_cycles(processor);
    81,518 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
         .                   }
         .           
         .                   outcome
 1,677,825 ( 0.00%)      }
         .           
         .               /// Returns a vector of obligations for `p` and all of its
         .               /// ancestors, putting them into the error state in the process.
        56 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
         .                   let mut error_stack: Vec<usize> = vec![];
         .                   let mut trace = vec![];
         .           
         .                   loop {
         .                       let node = &self.nodes[index];
         8 ( 0.00%)              node.state.set(NodeState::Error);
         .                       trace.push(node.obligation.clone());
        16 ( 0.00%)              if node.has_parent {
         .                           // The first dependent is the parent, which is treated
         .                           // specially.
         .                           error_stack.extend(node.dependents.iter().skip(1));
         .                           index = node.dependents[0];
         .                       } else {
         .                           // No parent; treat all dependents non-specially.
         .                           error_stack.extend(node.dependents.iter());
         .                           break;
-- line 504 ----------------------------------------
-- line 509 ----------------------------------------
         .                       let node = &self.nodes[index];
         .                       if node.state.get() != NodeState::Error {
         .                           node.state.set(NodeState::Error);
         .                           error_stack.extend(node.dependents.iter());
         .                       }
         .                   }
         .           
         .                   trace
        64 ( 0.00%)      }
         .           
         .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
         .               /// pending node.
         .               fn mark_successes(&self) {
         .                   // Convert all `Waiting` nodes to `Success`.
         .                   for node in &self.nodes {
10,757,992 ( 0.01%)              if node.state.get() == NodeState::Waiting {
         .                           node.state.set(NodeState::Success);
         .                       }
         .                   }
         .           
         .                   // Convert `Success` nodes that depend on a pending node back to
         .                   // `Waiting`.
         .                   for node in &self.nodes {
 9,828,785 ( 0.01%)              if node.state.get() == NodeState::Pending {
         .                           // This call site is hot.
         .                           self.inlined_mark_dependents_as_waiting(node);
         .                       }
         .                   }
         .               }
         .           
         .               // This always-inlined function is for the hot call site.
         .               #[inline(always)]
         .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
 5,057,615 ( 0.00%)          for &index in node.dependents.iter() {
         .                       let node = &self.nodes[index];
 5,057,615 ( 0.00%)              let state = node.state.get();
 5,057,615 ( 0.00%)              if state == NodeState::Success {
         .                           // This call site is cold.
 7,679,817 ( 0.01%)                  self.uninlined_mark_dependents_as_waiting(node);
         .                       } else {
         .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
         .                       }
         .                   }
         .               }
         .           
         .               // This never-inlined function is for the cold call site.
         .               #[inline(never)]
17,919,573 ( 0.01%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
         .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
         .                   node.state.set(NodeState::Waiting);
         .                   self.inlined_mark_dependents_as_waiting(node)
20,479,512 ( 0.02%)      }
         .           
         .               /// Report cycles between all `Success` nodes, and convert all `Success`
         .               /// nodes to `Done`. This must be called after `mark_successes`.
         .               fn process_cycles<P>(&mut self, processor: &mut P)
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .               {
    40,759 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
         .                   for (index, node) in self.nodes.iter().enumerate() {
         .                       // For some benchmarks this state test is extremely hot. It's a win
         .                       // to handle the no-op cases immediately to avoid the cost of the
         .                       // function call.
 9,828,785 ( 0.01%)              if node.state.get() == NodeState::Success {
   833,875 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
         .                       }
         .                   }
         .           
         .                   debug_assert!(stack.is_empty());
   326,072 ( 0.00%)          self.reused_node_vec = stack;
         .               }
         .           
 2,224,395 ( 0.00%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .               {
         .                   let node = &self.nodes[index];
   494,310 ( 0.00%)          if node.state.get() == NodeState::Success {
    13,622 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
         .                           None => {
         .                               stack.push(index);
    80,380 ( 0.00%)                      for &dep_index in node.dependents.iter() {
   321,520 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
         .                               }
         .                               stack.pop();
         .                               node.state.set(NodeState::Done);
         .                           }
         .                           Some(rpos) => {
         .                               // Cycle detected.
         .                               processor.process_backedge(
         .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
         .                                   PhantomData,
         .                               );
         .                           }
         .                       }
         .                   }
 1,977,240 ( 0.00%)      }
         .           
         .               /// Compresses the vector, removing all popped nodes. This adjusts the
         .               /// indices and hence invalidates any outstanding indices. `process_cycles`
         .               /// must be run beforehand to remove any cycles on `Success` nodes.
         .               #[inline(never)]
   844,674 ( 0.00%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
   114,845 ( 0.00%)          let orig_nodes_len = self.nodes.len();
         .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
         .                   debug_assert!(node_rewrites.is_empty());
         .                   node_rewrites.extend(0..orig_nodes_len);
         .                   let mut dead_nodes = 0;
         .           
         .                   // Move removable nodes to the end, preserving the order of the
         .                   // remaining nodes.
         .                   //
         .                   // LOOP INVARIANT:
         .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
         .                   //     self.nodes[index - dead_nodes..index] are all dead
         .                   //     self.nodes[index..] are unchanged
         .                   for index in 0..orig_nodes_len {
         .                       let node = &self.nodes[index];
49,306,961 ( 0.04%)              match node.state.get() {
         .                           NodeState::Pending | NodeState::Waiting => {
19,310,500 ( 0.02%)                      if dead_nodes > 0 {
   616,812 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 1,028,020 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
         .                               }
         .                           }
         .                           NodeState::Done => {
         .                               // This lookup can fail because the contents of
         .                               // `self.active_cache` are not guaranteed to match those of
         .                               // `self.nodes`. See the comment in `process_obligation`
         .                               // for more details.
   644,252 ( 0.00%)                      if let Some((predicate, _)) =
   520,581 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
         .                               {
         .                                   self.done_cache.insert(predicate);
         .                               } else {
         .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
         .                               }
         .                               // Extract the success stories.
         .                               outcome_cb(&node.obligation);
   347,054 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
   347,054 ( 0.00%)                      dead_nodes += 1;
         .                           }
         .                           NodeState::Error => {
         .                               // We *intentionally* remove the node from the cache at this point. Otherwise
         .                               // tests must come up with a different type on every type error they
         .                               // check against.
        24 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
        16 ( 0.00%)                      self.insert_into_error_cache(index);
        16 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
        16 ( 0.00%)                      dead_nodes += 1;
         .                           }
         .                           NodeState::Success => unreachable!(),
         .                       }
         .                   }
         .           
         .                   if dead_nodes > 0 {
         .                       // Remove the dead nodes and rewrite indices.
    74,984 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
    37,492 ( 0.00%)              self.apply_rewrites(&node_rewrites);
         .                   }
         .           
         .                   node_rewrites.truncate(0);
   459,380 ( 0.00%)          self.reused_node_vec = node_rewrites;
   918,760 ( 0.00%)      }
         .           
         .               #[inline(never)]
   337,428 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
         .                   let orig_nodes_len = node_rewrites.len();
         .           
         .                   for node in &mut self.nodes {
         .                       let mut i = 0;
 9,080,352 ( 0.01%)              while let Some(dependent) = node.dependents.get_mut(i) {
12,333,752 ( 0.01%)                  let new_index = node_rewrites[*dependent];
 6,166,876 ( 0.00%)                  if new_index >= orig_nodes_len {
         .                               node.dependents.swap_remove(i);
         .                               if i == 0 && node.has_parent {
         .                                   // We just removed the parent.
         .                                   node.has_parent = false;
         .                               }
         .                           } else {
 3,083,438 ( 0.00%)                      *dependent = new_index;
 6,166,876 ( 0.00%)                      i += 1;
         .                           }
         .                       }
         .                   }
         .           
         .                   // This updating of `self.active_cache` is necessary because the
         .                   // removal of nodes within `compress` can fail. See above.
         .                   self.active_cache.retain(|_predicate, index| {
24,187,080 ( 0.02%)              let new_index = node_rewrites[*index];
12,093,540 ( 0.01%)              if new_index >= orig_nodes_len {
         .                           false
         .                       } else {
 5,996,914 ( 0.00%)                  *index = new_index;
         .                           true
         .                       }
         .                   });
   299,936 ( 0.00%)      }
         .           }

70,386,274 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 208 ----------------------------------------
          .               /// There is no built-in impl. There may be some other
          .               /// candidate (a where-clause or user-defined impl).
          .               None,
          .               /// It is unknown whether there is an impl.
          .               Ambiguous,
          .           }
          .           
          .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
    935,946 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
  5,310,408 ( 0.00%)          SelectionContext {
          .                       infcx,
    757,210 ( 0.00%)              freshener: infcx.freshener_keep_static(),
          .                       intercrate: false,
          .                       intercrate_ambiguity_causes: None,
          .                       allow_negative_impls: false,
          .                       query_mode: TraitQueryMode::Standard,
          .                   }
    779,955 ( 0.00%)      }
          .           
          .               pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
        704 ( 0.00%)          SelectionContext {
          .                       infcx,
         88 ( 0.00%)              freshener: infcx.freshener_keep_static(),
          .                       intercrate: true,
          .                       intercrate_ambiguity_causes: None,
          .                       allow_negative_impls: false,
          .                       query_mode: TraitQueryMode::Standard,
          .                   }
          .               }
          .           
          .               pub fn with_negative(
-- line 238 ----------------------------------------
-- line 245 ----------------------------------------
          .                       freshener: infcx.freshener_keep_static(),
          .                       intercrate: false,
          .                       intercrate_ambiguity_causes: None,
          .                       allow_negative_impls,
          .                       query_mode: TraitQueryMode::Standard,
          .                   }
          .               }
          .           
     91,008 ( 0.00%)      pub fn with_query_mode(
          .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
          .                   query_mode: TraitQueryMode,
          .               ) -> SelectionContext<'cx, 'tcx> {
          .                   debug!(?query_mode, "with_query_mode");
    182,016 ( 0.00%)          SelectionContext {
          .                       infcx,
     11,376 ( 0.00%)              freshener: infcx.freshener_keep_static(),
          .                       intercrate: false,
          .                       intercrate_ambiguity_causes: None,
          .                       allow_negative_impls: false,
          .                       query_mode,
          .                   }
     68,256 ( 0.00%)      }
          .           
          .               /// Enables tracking of intercrate ambiguity causes. These are
          .               /// used in coherence to give improved diagnostics. We don't do
          .               /// this until we detect a coherence error because it can lead to
          .               /// false overflow results (#47139) and because it costs
          .               /// computation time.
          .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
          .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
          .               /// was enabled and disables tracking at the same time. If
          .               /// tracking is not enabled, just returns an empty vector.
          .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
          .                   assert!(self.intercrate);
          .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
          .               }
          .           
          .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
176,902,025 ( 0.14%)          self.infcx
    136,150 ( 0.00%)      }
          .           
          .               pub fn tcx(&self) -> TyCtxt<'tcx> {
  1,896,908 ( 0.00%)          self.infcx.tcx
          .               }
          .           
          .               pub fn is_intercrate(&self) -> bool {
     84,248 ( 0.00%)          self.intercrate
          .               }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // Selection
          .               //
          .               // The selection phase tries to identify *how* an obligation will
          .               // be resolved. For example, it will identify which impl or
          .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
          .               // 1. If no applicable impl or parameter bound can be found.
          .               // 2. If the output type parameters in the obligation do not match
          .               //    those specified by the impl/bound. For example, if the obligation
          .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
          .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
          .           
          .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
          .               /// type environment by performing unification.
    818,874 ( 0.00%)      #[instrument(level = "debug", skip(self))]
  1,052,838 ( 0.00%)      pub fn select(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
    856,268 ( 0.00%)          let candidate = match self.select_from_obligation(obligation) {
          .                       Err(SelectionError::Overflow) => {
          .                           // In standard mode, overflow must have been caught and reported
          .                           // earlier.
          .                           assert!(self.query_mode == TraitQueryMode::Canonical);
          .                           return Err(SelectionError::Overflow);
          .                       }
          .                       Err(SelectionError::Ambiguous(_)) => {
          .                           return Ok(None);
          .                       }
          .                       Err(e) => {
    250,236 ( 0.00%)                  return Err(e);
          .                       }
          .                       Ok(None) => {
     69,648 ( 0.00%)                  return Ok(None);
          .                       }
    450,414 ( 0.00%)              Ok(Some(candidate)) => candidate,
          .                   };
          .           
    758,294 ( 0.00%)          match self.confirm_candidate(obligation, candidate) {
          .                       Err(SelectionError::Overflow) => {
          .                           assert!(self.query_mode == TraitQueryMode::Canonical);
          .                           Err(SelectionError::Overflow)
          .                       }
     49,426 ( 0.00%)              Err(e) => Err(e),
          .                       Ok(candidate) => {
          .                           debug!(?candidate, "confirmed");
    855,204 ( 0.00%)                  Ok(Some(candidate))
          .                       }
          .                   }
          .               }
          .           
  1,169,820 ( 0.00%)      crate fn select_from_obligation(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
          .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
          .           
          .                   let pec = &ProvisionalEvaluationCache::default();
          .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
          .           
    233,964 ( 0.00%)          self.candidate_from_obligation(&stack)
  1,052,838 ( 0.00%)      }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // EVALUATION
          .               //
          .               // Tests whether an obligation can be selected or whether an impl
          .               // can be applied to particular types. It skips the "confirmation"
          .               // step and hence completely ignores output type parameters.
          .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
          .               // we can be sure it does not.
          .           
          .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
          .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
          .                   debug!(?obligation, "predicate_may_hold_fatal");
          .           
          .                   // This fatal query is a stopgap that should only be used in standard mode,
          .                   // where we do not expect overflow to be propagated.
          4 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
          .           
         20 ( 0.00%)          self.evaluate_root_obligation(obligation)
          .                       .expect("Overflow should be caught earlier in standard query mode")
          .                       .may_apply()
          .               }
          .           
          .               /// Evaluates whether the obligation `obligation` can be satisfied
          .               /// and returns an `EvaluationResult`. This is meant for the
          .               /// *initial* call.
     22,752 ( 0.00%)      pub fn evaluate_root_obligation(
          .                   &mut self,
          .                   obligation: &PredicateObligation<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
          .                   self.evaluation_probe(|this| {
     34,140 ( 0.00%)              this.evaluate_predicate_recursively(
          .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
          .                           obligation.clone(),
          .                       )
          .                   })
     22,752 ( 0.00%)      }
          .           
          .               fn evaluation_probe(
          .                   &mut self,
          .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
          .               ) -> Result<EvaluationResult, OverflowError> {
    190,220 ( 0.00%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
     22,760 ( 0.00%)              let result = op(self)?;
          .           
    184,548 ( 0.00%)              match self.infcx.leak_check(true, snapshot) {
          .                           Ok(()) => {}
          .                           Err(_) => return Ok(EvaluatedToErr),
          .                       }
          .           
    131,820 ( 0.00%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
          .                           None => Ok(result),
          .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
          .                       }
          .                   })
          .               }
          .           
          .               /// Evaluates the predicates in `predicates` recursively. Note that
          .               /// this applies projections in the predicates, and therefore
          .               /// is run within an inference probe.
    278,000 ( 0.00%)      #[instrument(skip(self, stack), level = "debug")]
          .               fn evaluate_predicates_recursively<'o, I>(
          .                   &mut self,
          .                   stack: TraitObligationStackList<'o, 'tcx>,
          .                   predicates: I,
          .               ) -> Result<EvaluationResult, OverflowError>
          .               where
          .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
          .               {
          .                   let mut result = EvaluatedToOk;
    210,418 ( 0.00%)          for obligation in predicates {
     61,256 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
     30,628 ( 0.00%)              if let EvaluatedToErr = eval {
          .                           // fast-path - EvaluatedToErr is the top of the lattice,
          .                           // so we don't need to look on the other predicates.
          .                           return Ok(EvaluatedToErr);
          .                       } else {
          .                           result = cmp::max(result, eval);
          .                       }
          .                   }
          .                   Ok(result)
          .               }
          .           
    266,940 ( 0.00%)      #[instrument(
          .                   level = "debug",
          .                   skip(self, previous_stack),
          .                   fields(previous_stack = ?previous_stack.head())
    240,246 ( 0.00%)      )]
          .               fn evaluate_predicate_recursively<'o>(
          .                   &mut self,
          .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
          .                   obligation: PredicateObligation<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
          .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
          .                   // a `PredicateObligation`. These are distinct types, so we can't
          .                   // use any `Option` combinator method that would force them to be
          .                   // the same.
     53,388 ( 0.00%)          match previous_stack.head() {
     30,336 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
     11,526 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
          .                   }
          .           
    160,164 ( 0.00%)          let result = ensure_sufficient_stack(|| {
     26,694 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
    266,940 ( 0.00%)              match bound_predicate.skip_binder() {
          .                           ty::PredicateKind::Trait(t) => {
          .                               let t = bound_predicate.rebind(t);
          .                               debug_assert!(!t.has_escaping_bound_vars());
          .                               let obligation = obligation.with(t);
    389,925 ( 0.00%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
          .                           }
          .           
          .                           ty::PredicateKind::Subtype(p) => {
          .                               let p = bound_predicate.rebind(p);
          .                               // Does this code ever run?
        120 ( 0.00%)                      match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
          .                                   Some(Ok(InferOk { mut obligations, .. })) => {
          .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
          .                                       self.evaluate_predicates_recursively(
          .                                           previous_stack,
          .                                           obligations.into_iter(),
          .                                       )
          .                                   }
          .                                   Some(Err(_)) => Ok(EvaluatedToErr),
-- line 489 ----------------------------------------
-- line 522 ----------------------------------------
          .                               None => Ok(EvaluatedToAmbig),
          .                           },
          .           
          .                           ty::PredicateKind::TypeOutlives(pred) => {
          .                               // A global type with no late-bound regions can only
          .                               // contain the "'static" lifetime (any other lifetime
          .                               // would either be late-bound or local), so it is guaranteed
          .                               // to outlive any other lifetime
        474 ( 0.00%)                      if pred.0.is_global() && !pred.0.has_late_bound_regions() {
          .                                   Ok(EvaluatedToOk)
          .                               } else {
          .                                   Ok(EvaluatedToOkModuloRegions)
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::RegionOutlives(..) => {
          .                               // We do not consider region relationships when evaluating trait matches.
-- line 538 ----------------------------------------
-- line 545 ----------------------------------------
          .                               } else {
          .                                   Ok(EvaluatedToErr)
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::Projection(data) => {
          .                               let data = bound_predicate.rebind(data);
          .                               let project_obligation = obligation.with(data);
      1,890 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
      1,540 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
          .                                       'compute_res: {
          .                                           // If we've previously marked this projection as 'complete', thne
          .                                           // use the final cached result (either `EvaluatedToOk` or
          .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
          .                                           // sub-obligations.
      1,232 ( 0.00%)                                  if let Some(key) =
      2,772 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
          .                                           {
      2,392 ( 0.00%)                                      if let Some(cached_res) = self
          .                                                   .infcx
          .                                                   .inner
          .                                                   .borrow_mut()
          .                                                   .projection_cache()
          .                                                   .is_complete(key)
          .                                               {
          .                                                   break 'compute_res Ok(cached_res);
          .                                               }
          .                                           }
          .           
        590 ( 0.00%)                                  self.add_depth(
          .                                               subobligations.iter_mut(),
        590 ( 0.00%)                                      obligation.recursion_depth,
          .                                           );
        590 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
        885 ( 0.00%)                                      previous_stack,
      1,475 ( 0.00%)                                      subobligations,
          .                                           );
      1,180 ( 0.00%)                                  if let Ok(res) = res {
        590 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
      1,144 ( 0.00%)                                          if let Some(key) =
        286 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
      2,002 ( 0.00%)                                                  self, data,
          .                                                       )
          .                                                   {
          .                                                       // If the result is something that we can cache, then mark this
          .                                                       // entry as 'complete'. This will allow us to skip evaluating the
          .                                                       // suboligations at all the next time we evaluate the projection
          .                                                       // predicate.
      1,939 ( 0.00%)                                              self.infcx
          .                                                           .inner
          .                                                           .borrow_mut()
          .                                                           .projection_cache()
          .                                                           .complete(key, res);
          .                                                   }
          .                                               }
          .                                           }
          .                                           res
-- line 601 ----------------------------------------
-- line 603 ----------------------------------------
          .                                   }
          .                                   Ok(Ok(None)) => Ok(EvaluatedToAmbig),
          .                                   Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),
          .                                   Err(_) => Ok(EvaluatedToErr),
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
      1,020 ( 0.00%)                      match self.infcx.closure_kind(closure_substs) {
          .                                   Some(closure_kind) => {
        612 ( 0.00%)                              if closure_kind.extends(kind) {
          .                                           Ok(EvaluatedToOk)
          .                                       } else {
          .                                           Ok(EvaluatedToErr)
          .                                       }
          .                                   }
          .                                   None => Ok(EvaluatedToAmbig),
          .                               }
          .                           }
-- line 621 ----------------------------------------
-- line 693 ----------------------------------------
          .                                       }
          .                                   }
          .                               }
          .                           }
          .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
          .                               bug!("TypeWellFormedFromEnv is only used for chalk")
          .                           }
          .                       }
     26,694 ( 0.00%)          });
          .           
          .                   debug!("finished: {:?} from {:?}", result, obligation);
          .           
          .                   result
          .               }
          .           
    545,895 ( 0.00%)      #[instrument(skip(self, previous_stack), level = "debug")]
          .               fn evaluate_trait_predicate_recursively<'o>(
          .                   &mut self,
          .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
          .                   mut obligation: TraitObligation<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
     51,990 ( 0.00%)          if !self.intercrate
          .                       && obligation.is_global()
          .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
          .                   {
          .                       // If a param env has no global bounds, global obligations do not
          .                       // depend on its particular value in order to work, so we can clear
          .                       // out the param env and get better caching.
          .                       debug!("in global");
     42,222 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
          .                   }
          .           
          .                   let stack = self.push_stack(previous_stack, &obligation);
          .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
     51,990 ( 0.00%)          let mut param_env = obligation.param_env;
          .           
          .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
     25,995 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
    311,940 ( 0.00%)              pred
          .                   });
          .           
          .                   debug!(?fresh_trait_pred);
          .           
     30,592 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
          .                       debug!(?result, "CACHE HIT");
          .                       return Ok(result);
          .                   }
          .           
          .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
          .                       debug!(?result, "PROVISIONAL CACHE HIT");
          .                       stack.update_reached_depth(result.reached_depth);
          .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
          .                   // stack. If so, we don't want to insert the result into the
          .                   // main cache (it is cycle dependent) nor the provisional
          .                   // cache (which is meant for things that have completed but
          .                   // for a "backedge" -- this result *is* the backedge).
          .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
          .                       return Ok(cycle_result);
          .                   }
          .           
    120,402 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
     13,378 ( 0.00%)          let result = result?;
          .           
     66,890 ( 0.00%)          if !result.must_apply_modulo_regions() {
          .                       stack.cache().on_failure(stack.dfn);
          .                   }
          .           
     13,378 ( 0.00%)          let reached_depth = stack.reached_depth.get();
     26,756 ( 0.00%)          if reached_depth >= stack.depth {
          .                       debug!(?result, "CACHE MISS");
    253,745 ( 0.00%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
          .           
          .                       stack.cache().on_completion(
     26,710 ( 0.00%)                  stack.dfn,
          .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
          .                               // Create a new `DepNode` that has dependencies on:
          .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
          .                               // entry being crated
          .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
          .                               // provisional caches entries and inserting them into the evaluation cache
          .                               //
          .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 782 ----------------------------------------
          .                               // cache entry to end up with a transitive `type_of(field_def_id`)` dependency.
          .                               //
          .                               // By using `in_task`, we're also creating an edge from the *current* query
          .                               // to the newly-created `combined_dep_node`. This is probably redundant,
          .                               // but it's better to add too many dep graph edges than to add too few
          .                               // dep graph edges.
          .                               let ((), combined_dep_node) = self.in_task(|this| {
          .                                   this.tcx().dep_graph.read_index(provisional_dep_node);
         46 ( 0.00%)                          this.tcx().dep_graph.read_index(dep_node);
          .                               });
         69 ( 0.00%)                      self.insert_evaluation_cache(
         23 ( 0.00%)                          param_env,
        184 ( 0.00%)                          fresh_trait_pred,
          .                                   combined_dep_node,
          .                                   provisional_result.max(result),
          .                               );
          .                           },
          .                       );
          .                   } else {
          .                       debug!(?result, "PROVISIONAL");
          .                       debug!(
-- line 802 ----------------------------------------
-- line 835 ----------------------------------------
          .               /// `self.freshener`, we can be sure that (a) this will not
          .               /// affect the inferencer state and (b) that if we see two
          .               /// fresh regions with the same index, they refer to the same
          .               /// unbound type variable.
          .               fn check_evaluation_cycle(
          .                   &mut self,
          .                   stack: &TraitObligationStack<'_, 'tcx>,
          .               ) -> Option<EvaluationResult> {
      3,834 ( 0.00%)          if let Some(cycle_depth) = stack
          .                       .iter()
          .                       .skip(1) // Skip top-most frame.
          .                       .find(|prev| {
     17,660 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
          .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
          .                       })
          .                       .map(|stack| stack.depth)
          .                   {
          .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
          .           
          .                       // If we have a stack like `A B C D E A`, where the top of
          .                       // the stack is the final `A`, then this will iterate over
          .                       // `A, E, D, C, B` -- i.e., all the participants apart
          .                       // from the cycle head. We mark them as participating in a
          .                       // cycle. This suppresses caching for those nodes. See
          .                       // `in_cycle` field for more details.
      3,834 ( 0.00%)              stack.update_reached_depth(cycle_depth);
          .           
          .                       // Subtle: when checking for a coinductive cycle, we do
          .                       // not compare using the "freshened trait refs" (which
          .                       // have erased regions) but rather the fully explicit
          .                       // trait refs. This is important because it's only a cycle
          .                       // if the regions match exactly.
      3,076 ( 0.00%)              let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);
      1,917 ( 0.00%)              let tcx = self.tcx();
     13,650 ( 0.00%)              let cycle = cycle.map(|stack| stack.obligation.predicate.to_predicate(tcx));
     21,087 ( 0.00%)              if self.coinductive_match(cycle) {
          .                           debug!("evaluate_stack --> recursive, coinductive");
          .                           Some(EvaluatedToOk)
          .                       } else {
          .                           debug!("evaluate_stack --> recursive, inductive");
          .                           Some(EvaluatedToRecur)
          .                       }
          .                   } else {
          .                       None
          .                   }
          .               }
          .           
    120,402 ( 0.00%)      fn evaluate_stack<'o>(
          .                   &mut self,
          .                   stack: &TraitObligationStack<'o, 'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
          .                   // In intercrate mode, whenever any of the generics are unbound,
          .                   // there can always be an impl. Even if there are no impls in
          .                   // this crate, perhaps the type would be unified with
          .                   // something from another crate that does provide an impl.
          .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
          .                   // imagine, this is just where we started. To avoid that, we
          .                   // check for unbound variables and return an ambiguous (hence possible)
          .                   // match if we've seen this trait before.
          .                   //
          .                   // This suffices to allow chains like `FnMut` implemented in
          .                   // terms of `Fn` etc, but we could probably make this more
          .                   // precise still.
          .                   let unbound_input_types =
     13,378 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
          .           
     40,134 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
          .                       // This check was an imperfect workaround for a bug in the old
          .                       // intercrate mode; it should be removed when that goes away.
     66,890 ( 0.00%)              if unbound_input_types && self.intercrate {
          .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
          .                           // Heuristics: show the diagnostics when there are no candidates in crate.
          .                           if self.intercrate_ambiguity_causes.is_some() {
          .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
          .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
          .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
          .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
          .                                       let self_ty = trait_ref.self_ty();
-- line 924 ----------------------------------------
-- line 937 ----------------------------------------
          .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
          .                                   }
          .                               }
          .                           }
          .                           return Ok(EvaluatedToAmbig);
          .                       }
          .                   }
          .           
     26,756 ( 0.00%)          if unbound_input_types
          .                       && stack.iter().skip(1).any(|prev| {
        213 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
          .                               && self.match_fresh_trait_refs(
        284 ( 0.00%)                          stack.fresh_trait_pred,
        284 ( 0.00%)                          prev.fresh_trait_pred,
          .                                   prev.obligation.param_env,
          .                               )
          .                       })
          .                   {
          .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
          .                       return Ok(EvaluatedToUnknown);
          .                   }
          .           
    121,320 ( 0.00%)          match self.candidate_from_obligation(stack) {
     69,222 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
          .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
          .                       Ok(None) => Ok(EvaluatedToAmbig),
          .                       Err(Overflow) => Err(OverflowError::Canonical),
          .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
          .                       Err(..) => Ok(EvaluatedToErr),
          .                   }
    133,780 ( 0.00%)      }
          .           
          .               /// For defaulted traits, we use a co-inductive strategy to solve, so
          .               /// that recursion is ok. This routine returns `true` if the top of the
          .               /// stack (`cycle[0]`):
          .               ///
          .               /// - is a defaulted trait,
          .               /// - it also appears in the backtrace at some position `X`,
          .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 977 ----------------------------------------
          .               pub fn coinductive_match<I>(&mut self, mut cycle: I) -> bool
          .               where
          .                   I: Iterator<Item = ty::Predicate<'tcx>>,
          .               {
          .                   cycle.all(|predicate| self.coinductive_predicate(predicate))
          .               }
          .           
          .               fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {
      3,900 ( 0.00%)          let result = match predicate.kind().skip_binder() {
     17,550 ( 0.00%)              ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),
          .                       _ => false,
          .                   };
          .                   debug!(?predicate, ?result, "coinductive_predicate");
          .                   result
          .               }
          .           
          .               /// Further evaluates `candidate` to decide whether all type parameters match and whether nested
          .               /// obligations are met. Returns whether `candidate` remains viable after this further
-- line 994 ----------------------------------------
-- line 998 ----------------------------------------
          .                   skip(self, stack),
          .                   fields(depth = stack.obligation.recursion_depth)
          .               )]
          .               fn evaluate_candidate<'o>(
          .                   &mut self,
          .                   stack: &TraitObligationStack<'o, 'tcx>,
          .                   candidate: &SelectionCandidate<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
     26,268 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
          .                       let candidate = (*candidate).clone();
    210,298 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
          .                           Ok(selection) => {
          .                               debug!(?selection);
     52,536 ( 0.00%)                      this.evaluate_predicates_recursively(
          .                                   stack.list(),
    170,742 ( 0.00%)                          selection.nested_obligations().into_iter(),
          .                               )
          .                           }
          .                           Err(..) => Ok(EvaluatedToErr),
          .                       }
          .                   })?;
          .           
          .                   // If we erased any lifetimes, then we want to use
          .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
          .                   &self,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
          .               ) -> Option<EvaluationResult> {
          .                   // Neither the global nor local cache is aware of intercrate
          .                   // mode, so don't do any caching. In particular, we might
          .                   // re-use the same `InferCtxt` with both an intercrate
          .                   // and non-intercrate `SelectionContext`
     51,990 ( 0.00%)          if self.intercrate {
          .                       return None;
          .                   }
          .           
          .                   let tcx = self.tcx();
          .                   if self.can_use_global_caches(param_env) {
    175,784 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
          .                           return Some(res);
          .                       }
          .                   }
     61,184 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
          .               }
          .           
    160,536 ( 0.00%)      fn insert_evaluation_cache(
          .                   &mut self,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
          .                   dep_node: DepNodeIndex,
          .                   result: EvaluationResult,
          .               ) {
          .                   // Avoid caching results that depend on more than just the trait-ref
          .                   // - the stack can create recursion.
     53,512 ( 0.00%)          if result.is_stack_dependent() {
          .                       return;
          .                   }
          .           
          .                   // Neither the global nor local cache is aware of intercrate
          .                   // mode, so don't do any caching. In particular, we might
          .                   // re-use the same `InferCtxt` with both an intercrate
          .                   // and non-intercrate `SelectionContext`
     26,756 ( 0.00%)          if self.intercrate {
          .                       return;
          .                   }
          .           
          .                   if self.can_use_global_caches(param_env) {
          .                       if !trait_pred.needs_infer() {
          .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
          .                           // This may overwrite the cache with the same value
          .                           // FIXME: Due to #50507 this overwrites the different values
          .                           // This should be changed to use HashMapExt::insert_same
          .                           // when that is fixed
     12,500 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
          .                           return;
          .                       }
          .                   }
          .           
          .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
      3,496 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
    107,024 ( 0.00%)      }
          .           
          .               /// For various reasons, it's possible for a subobligation
          .               /// to have a *lower* recursion_depth than the obligation used to create it.
          .               /// Projection sub-obligations may be returned from the projection cache,
          .               /// which results in obligations with an 'old' `recursion_depth`.
          .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
          .               /// subobligations without taking in a 'parent' depth, causing the
          .               /// generated subobligations to have a `recursion_depth` of `0`.
          .               ///
          .               /// To ensure that obligation_depth never decreases, we force all subobligations
          .               /// to have at least the depth of the original obligation.
        295 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
          .                   &self,
          .                   it: I,
          .                   min_depth: usize,
          .               ) {
      3,444 ( 0.00%)          it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
        590 ( 0.00%)      }
          .           
          .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
          .                   &self,
          .                   depth: usize,
          .                   error_obligation: &Obligation<'tcx, T>,
          .               ) -> Result<(), OverflowError> {
    628,216 ( 0.00%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
          .                       match self.query_mode {
          .                           TraitQueryMode::Standard => {
          .                               if self.infcx.is_tainted_by_errors() {
          .                                   return Err(OverflowError::ErrorReporting);
          .                               }
          .                               self.infcx.report_overflow_error(error_obligation, true);
          .                           }
          .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
          .               ) -> Result<(), OverflowError> {
          .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
          .               }
          .           
          .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
          .               where
          .                   OP: FnOnce(&mut Self) -> R,
          .               {
    299,650 ( 0.00%)          let (result, dep_node) =
    245,531 ( 0.00%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
          .                   self.tcx().dep_graph.read_index(dep_node);
    276,600 ( 0.00%)          (result, dep_node)
          .               }
          .           
          .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
          .               /// for a negative goal and a negative impl for a positive goal
          .               #[instrument(level = "debug", skip(self))]
          .               fn filter_impls(
          .                   &mut self,
          .                   candidates: Vec<SelectionCandidate<'tcx>>,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> Vec<SelectionCandidate<'tcx>> {
          .                   let tcx = self.tcx();
          .                   let mut result = Vec::with_capacity(candidates.len());
          .           
    336,544 ( 0.00%)          for candidate in candidates {
          .                       // Respect const trait obligations
     60,852 ( 0.00%)              if obligation.is_const() {
         30 ( 0.00%)                  match candidate {
          .                               // const impl
          .                               ImplCandidate(def_id)
          .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
          .                               // const param
          .                               ParamCandidate(trait_pred)
          .                                   if trait_pred.skip_binder().constness
          .                                       == ty::BoundConstness::ConstIfConst => {}
          .                               // auto trait impl
-- line 1179 ----------------------------------------
-- line 1186 ----------------------------------------
          .                               ConstDropCandidate(_) => {}
          .                               _ => {
          .                                   // reject all other types of candidates
          .                                   continue;
          .                               }
          .                           }
          .                       }
          .           
     40,548 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
     20,572 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
     10,274 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
          .                               || self.allow_negative_impls
          .                           {
          .                               result.push(candidate);
          .                           }
          .                       } else {
          .                           result.push(candidate);
          .                       }
          .                   }
          .           
     90,736 ( 0.00%)          result
          .               }
          .           
          .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
    320,297 ( 0.00%)      #[instrument(level = "debug", skip(self))]
          .               fn filter_reservation_impls(
          .                   &mut self,
          .                   candidate: SelectionCandidate<'tcx>,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
          .                   let tcx = self.tcx();
          .                   // Treat reservation impls as ambiguity.
     55,344 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
     17,662 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
          .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
          .                               let attrs = tcx.get_attrs(def_id);
          .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
          .                               let value = attr.and_then(|a| a.value_str());
          .                               if let Some(value) = value {
          .                                   debug!(
          .                                       "filter_reservation_impls: \
          .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
          .                                           message: value.to_string(),
          .                                       },
          .                                   );
          .                               }
          .                           }
          .                           return Ok(None);
          .                       }
          .                   }
    113,046 ( 0.00%)          Ok(Some(candidate))
          .               }
          .           
          .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
          .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
          .           
     69,162 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
          .                       return None;
          .                   }
          .           
          .                   let obligation = &stack.obligation;
         12 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
          .           
          .                   // Okay to skip binder because of the nature of the
          .                   // trait-ref-is-knowable check, which does not care about
          .                   // bound regions.
          .                   let trait_ref = predicate.skip_binder().trait_ref;
          .           
         12 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
          .               }
          .           
          .               /// Returns `true` if the global caches can be used.
          .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
          .                   // If there are any inference variables in the `ParamEnv`, then we
          .                   // always use a cache local to this particular scope. Otherwise, we
          .                   // switch to a global cache.
          .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
          .                   &mut self,
          .                   mut param_env: ty::ParamEnv<'tcx>,
          .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
          .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
          .                   // Neither the global nor local cache is aware of intercrate
          .                   // mode, so don't do any caching. In particular, we might
          .                   // re-use the same `InferCtxt` with both an intercrate
          .                   // and non-intercrate `SelectionContext`
    260,720 ( 0.00%)          if self.intercrate {
          4 ( 0.00%)              return None;
          .                   }
          .                   let tcx = self.tcx();
          .                   let mut pred = cache_fresh_trait_pred.skip_binder();
    260,712 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
          .           
    130,356 ( 0.00%)          if self.can_use_global_caches(param_env) {
  1,291,380 ( 0.00%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
  1,395,017 ( 0.00%)                  return Some(res);
          .                       }
          .                   }
    252,299 ( 0.00%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
          .               }
          .           
          .               /// Determines whether can we safely cache the result
          .               /// of selecting an obligation. This is almost always `true`,
          .               /// except when dealing with certain `ParamCandidate`s.
          .               ///
          .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
          .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
          .               fn can_cache_candidate(
          .                   &self,
          .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
          .               ) -> bool {
          .                   // Neither the global nor local cache is aware of intercrate
          .                   // mode, so don't do any caching. In particular, we might
          .                   // re-use the same `InferCtxt` with both an intercrate
          .                   // and non-intercrate `SelectionContext`
     46,100 ( 0.00%)          if self.intercrate {
          .                       return false;
          .                   }
     69,138 ( 0.00%)          match result {
          .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
          .                       _ => true,
          .                   }
          .               }
          .           
          .               fn insert_candidate_cache(
          .                   &mut self,
          .                   mut param_env: ty::ParamEnv<'tcx>,
          .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
          .                   dep_node: DepNodeIndex,
          .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
          .               ) {
          .                   let tcx = self.tcx();
          .                   let mut pred = cache_fresh_trait_pred.skip_binder();
          .           
     46,100 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
          .           
          .                   if !self.can_cache_candidate(&candidate) {
          .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
          .                       return;
          .                   }
          .           
     23,014 ( 0.00%)          if self.can_use_global_caches(param_env) {
     50,854 ( 0.00%)              if let Err(Overflow) = candidate {
          .                           // Don't cache overflow globally; we only produce this in certain modes.
          .                       } else if !pred.needs_infer() {
     87,316 ( 0.00%)                  if !candidate.needs_infer() {
          .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
          .                               // This may overwrite the cache with the same value.
    589,383 ( 0.00%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
          .                               return;
          .                           }
          .                       }
          .                   }
          .           
          .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
     27,255 ( 0.00%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
          .               }
          .           
          .               /// Matches a predicate against the bounds of its self type.
          .               ///
          .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
          .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
          .               /// `Baz` bound. We return indexes into the list returned by
          .               /// `tcx.item_bounds` for any applicable bounds.
        162 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> smallvec::SmallVec<[usize; 2]> {
        234 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
          .                   let placeholder_trait_predicate =
        306 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
          .                   debug!(
          .                       ?placeholder_trait_predicate,
          .                       "match_projection_obligation_against_definition_bounds"
          .                   );
          .           
         18 ( 0.00%)          let tcx = self.infcx.tcx;
        114 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
         45 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
         15 ( 0.00%)              ty::Opaque(def_id, substs) => (def_id, substs),
          .                       _ => {
          .                           span_bug!(
          .                               obligation.cause.span,
          .                               "match_projection_obligation_against_definition_bounds() called \
          .                                but self-ty is not a projection: {:?}",
          .                               placeholder_trait_predicate.trait_ref.self_ty()
          .                           );
          .                       }
-- line 1405 ----------------------------------------
-- line 1411 ----------------------------------------
          .                   // unnecessary ambiguity.
          .                   let mut distinct_normalized_bounds = FxHashSet::default();
          .           
          .                   let matching_bounds = bounds
          .                       .iter()
          .                       .enumerate()
          .                       .filter_map(|(idx, bound)| {
          .                           let bound_predicate = bound.kind();
        150 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
          .                               let bound = bound_predicate.rebind(pred.trait_ref);
        630 ( 0.00%)                      if self.infcx.probe(|_| {
        246 ( 0.00%)                          match self.match_normalize_trait_ref(
          .                                       obligation,
        168 ( 0.00%)                              bound,
        168 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
          .                                   ) {
          .                                       Ok(None) => true,
          .                                       Ok(Some(normalized_trait))
          .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
          .                                       {
          .                                           true
          .                                       }
          .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
          .                               }
          .                           }
          .                           None
          .                       })
          .                       .collect();
          .           
          .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
          .                   matching_bounds
        162 ( 0.00%)      }
          .           
          .               /// Equates the trait in `obligation` with trait bound. If the two traits
          .               /// can be equated and the normalized trait bound doesn't contain inference
          .               /// variables or placeholders, the normalized bound is returned.
      1,014 ( 0.00%)      fn match_normalize_trait_ref(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .                   trait_bound: ty::PolyTraitRef<'tcx>,
          .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
          .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
          .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
        274 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
          .                       // Avoid unnecessary normalization
        116 ( 0.00%)              return Err(());
          .                   }
          .           
        240 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
          .                       project::normalize_with_depth(
          .                           self,
         20 ( 0.00%)                  obligation.param_env,
          .                           obligation.cause.clone(),
         60 ( 0.00%)                  obligation.recursion_depth + 1,
         80 ( 0.00%)                  trait_bound,
          .                       )
          .                   });
         60 ( 0.00%)          self.infcx
         40 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
          .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
          .                       .map(|InferOk { obligations: _, value: () }| {
          .                           // This method is called within a probe, so we can't have
          .                           // inference variables and placeholders escape.
          .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
         80 ( 0.00%)                      Some(trait_bound)
          .                           } else {
          .                               None
          .                           }
          .                       })
          .                       .map_err(|_| ())
        702 ( 0.00%)      }
          .           
          .               fn evaluate_where_clause<'o>(
          .                   &mut self,
          .                   stack: &TraitObligationStack<'o, 'tcx>,
          .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
          .                   self.evaluation_probe(|this| {
     20,350 ( 0.00%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
      3,768 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
          .                           Err(()) => Ok(EvaluatedToErr),
          .                       }
          .                   })
          .               }
          .           
        459 ( 0.00%)      pub(super) fn match_projection_projections(
          .                   &mut self,
          .                   obligation: &ProjectionTyObligation<'tcx>,
          .                   env_predicate: PolyProjectionPredicate<'tcx>,
          .                   potentially_unnormalized_candidates: bool,
          .               ) -> bool {
          .                   let mut nested_obligations = Vec::new();
        255 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
        153 ( 0.00%)              obligation.cause.span,
          .                       LateBoundRegionConversionTime::HigherRankedType,
          .                       env_predicate,
          .                   );
        102 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
          .                       ensure_sufficient_stack(|| {
          .                           project::normalize_with_depth_to(
          .                               self,
          .                               obligation.param_env,
          .                               obligation.cause.clone(),
          .                               obligation.recursion_depth + 1,
          .                               infer_predicate.projection_ty,
          .                               &mut nested_obligations,
          .                           )
          .                       })
          .                   } else {
        102 ( 0.00%)              infer_predicate.projection_ty
          .                   };
          .           
         51 ( 0.00%)          self.infcx
        102 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
        102 ( 0.00%)              .sup(obligation.predicate, infer_projection)
        354 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
          .                           self.evaluate_predicates_recursively(
          .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
          .                               nested_obligations.into_iter().chain(obligations),
          .                           )
         66 ( 0.00%)                  .map_or(false, |res| res.may_apply())
          .                       })
        459 ( 0.00%)      }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // WINNOW
          .               //
          .               // Winnowing is the process of attempting to resolve ambiguity by
          .               // probing further. During the winnowing process, we unify all
          .               // type variables and then we also attempt to evaluate recursive
          .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
          .               /// See the comment for "SelectionCandidate" for more details.
          .               fn candidate_should_be_dropped_in_favor_of(
          .                   &mut self,
          .                   sized_predicate: bool,
          .                   victim: &EvaluatedCandidate<'tcx>,
          .                   other: &EvaluatedCandidate<'tcx>,
          .                   needs_infer: bool,
          .               ) -> bool {
      2,432 ( 0.00%)          if victim.candidate == other.candidate {
          .                       return true;
          .                   }
          .           
          .                   // Check if a bound would previously have been removed when normalizing
          .                   // the param_env so that it can be given the lowest priority. See
          .                   // #50825 for the motivation for this.
          .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
          .                       cand.is_global() && !cand.has_late_bound_regions()
          .                   };
          .           
          .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
          .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
          .                   //
          .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
          .                   // lifetime of a variable.
     43,776 ( 0.00%)          match (&other.candidate, &victim.candidate) {
          .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
          .                           bug!(
          .                               "default implementations shouldn't be recorded \
          .                               when there are other valid candidates"
          .                           );
          .                       }
          .           
          .                       // (*)
-- line 1582 ----------------------------------------
-- line 1674 ----------------------------------------
          .                       }
          .                       (ObjectCandidate(_), ProjectionCandidate(_))
          .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
          .                           bug!("Have both object and projection candidate")
          .                       }
          .           
          .                       // Arbitrarily give projection and object candidates priority.
          .                       (
      4,864 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
          .                           ImplCandidate(..)
          .                           | ClosureCandidate
          .                           | GeneratorCandidate
          .                           | FnPointerCandidate { .. }
          .                           | BuiltinObjectCandidate
          .                           | BuiltinUnsizeCandidate
          .                           | TraitUpcastingUnsizeCandidate(_)
          .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
          .                           | ClosureCandidate
          .                           | GeneratorCandidate
          .                           | FnPointerCandidate { .. }
          .                           | BuiltinObjectCandidate
          .                           | BuiltinUnsizeCandidate
          .                           | TraitUpcastingUnsizeCandidate(_)
          .                           | BuiltinCandidate { .. }
          .                           | TraitAliasCandidate(..),
      9,728 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
          .                       ) => false,
          .           
     24,320 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
          .                           // See if we can toss out `victim` based on specialization.
          .                           // This requires us to know *for sure* that the `other` impl applies
          .                           // i.e., `EvaluatedToOk`.
          .                           //
          .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
          .                           // to me but is required for `std` to compile, so I didn't change it
          .                           // for now.
          .                           let tcx = self.tcx();
      9,728 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
     19,224 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
          .                                   return true;
          .                               }
          .                           }
          .           
     11,910 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
      9,212 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
          .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
          .                                       // Subtle: If the predicate we are evaluating has inference
          .                                       // variables, do *not* allow discarding candidates due to
          .                                       // marker trait impls.
          .                                       //
          .                                       // Without this restriction, we could end up accidentally
          .                                       // constrainting inference variables based on an arbitrarily
          .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
          .                           | BuiltinUnsizeCandidate
          .                           | TraitUpcastingUnsizeCandidate(_)
          .                           | BuiltinCandidate { has_nested: true }
          .                           | TraitAliasCandidate(..),
          .                       ) => false,
          .                   }
          .               }
          .           
     84,490 ( 0.00%)      fn sized_conditions(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> BuiltinImplConditions<'tcx> {
          .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
          .           
          .                   // NOTE: binder moved to (*)
     25,347 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
          .           
     42,257 ( 0.00%)          match self_ty.kind() {
          .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
          .                       | ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
          .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
          .                       | ty::Ref(..)
          .                       | ty::Generator(..)
          .                       | ty::GeneratorWitness(..)
          .                       | ty::Array(..)
          .                       | ty::Closure(..)
          .                       | ty::Never
          .                       | ty::Error(_) => {
          .                           // safe for everything
      1,140 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
          .                       }
          .           
          .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
          .           
          .                       ty::Tuple(tys) => Where(
          .                           obligation
          .                               .predicate
      9,640 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
          .                       ),
          .           
          .                       ty::Adt(def, substs) => {
      4,262 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
          .                           // (*) binder moved here
     10,655 ( 0.00%)                  Where(
          .                               obligation.predicate.rebind({
      2,131 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
          .                               }),
          .                           )
          .                       }
          .           
          .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
          .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
          .           
          .                       ty::Placeholder(..)
          .                       | ty::Bound(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
          .                       }
          .                   }
     67,592 ( 0.00%)      }
          .           
     50,672 ( 0.00%)      fn copy_clone_conditions(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> BuiltinImplConditions<'tcx> {
          .                   // NOTE: binder moved to (*)
     12,668 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
          .           
          .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
          .           
     32,154 ( 0.00%)          match *self_ty.kind() {
          .                       ty::Infer(ty::IntVar(_))
          .                       | ty::Infer(ty::FloatVar(_))
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
      3,216 ( 0.00%)              | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
          .           
          .                       ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::Char
          .                       | ty::RawPtr(..)
          .                       | ty::Never
-- line 1879 ----------------------------------------
-- line 1886 ----------------------------------------
          .                       ty::Dynamic(..)
          .                       | ty::Str
          .                       | ty::Slice(..)
          .                       | ty::Generator(..)
          .                       | ty::GeneratorWitness(..)
          .                       | ty::Foreign(..)
          .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
          .           
        452 ( 0.00%)              ty::Tuple(tys) => {
          .                           // (*) binder moved here
      2,993 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
          .                       }
          .           
        928 ( 0.00%)              ty::Closure(_, substs) => {
          .                           // (*) binder moved here
      2,784 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
      1,856 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
          .                               // Not yet resolved.
          .                               Ambiguous
          .                           } else {
      6,496 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
          .                           }
          .                       }
          .           
          .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
          .                           // Fallback to whatever user-defined impls exist in this case.
          .                           None
          .                       }
          .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
          .                       }
          .           
          .                       ty::Placeholder(..)
          .                       | ty::Bound(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
          .                       }
          .                   }
     38,004 ( 0.00%)      }
          .           
          .               /// For default impls, we need to break apart a type into its
          .               /// "constituent types" -- meaning, the types that it contains.
          .               ///
          .               /// Here are some (simple) examples:
          .               ///
          .               /// ```
          .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 1937 ----------------------------------------
          .               /// Foo where struct Foo { x: i32, y: u32 } -> [i32, u32]
          .               /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]
          .               /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]
          .               /// ```
          .               fn constituent_types_for_ty(
          .                   &self,
          .                   t: ty::Binder<'tcx, Ty<'tcx>>,
          .               ) -> ty::Binder<'tcx, Vec<Ty<'tcx>>> {
      9,675 ( 0.00%)          match *t.skip_binder().kind() {
          .                       ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
          .                       | ty::Str
          .                       | ty::Error(_)
-- line 1953 ----------------------------------------
-- line 1968 ----------------------------------------
          .                       ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {
          .                           t.rebind(vec![element_ty])
          .                       }
          .           
          .                       ty::Array(element_ty, _) | ty::Slice(element_ty) => t.rebind(vec![element_ty]),
          .           
          .                       ty::Tuple(ref tys) => {
          .                           // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet
        154 ( 0.00%)                  t.rebind(tys.iter().map(|k| k.expect_ty()).collect())
          .                       }
          .           
          .                       ty::Closure(_, ref substs) => {
        358 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
          .                           t.rebind(vec![ty])
          .                       }
          .           
          .                       ty::Generator(_, ref substs, _) => {
          .                           let ty = self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());
          .                           let witness = substs.as_generator().witness();
          .                           t.rebind([ty].into_iter().chain(iter::once(witness)).collect())
          .                       }
          .           
          .                       ty::GeneratorWitness(types) => {
          .                           debug_assert!(!types.has_escaping_bound_vars());
          .                           types.map_bound(|types| types.to_vec())
          .                       }
          .           
          .                       // For `PhantomData<T>`, we pass `T`.
      3,082 ( 0.00%)              ty::Adt(def, substs) if def.is_phantom_data() => t.rebind(substs.types().collect()),
          .           
      1,370 ( 0.00%)              ty::Adt(def, substs) => {
      5,980 ( 0.00%)                  t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())
          .                       }
          .           
          .                       ty::Opaque(def_id, substs) => {
          .                           // We can resolve the `impl Trait` to its concrete type,
          .                           // which enforces a DAG between the functions requiring
          .                           // the auto trait bounds in question.
          .                           t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
          .                       }
          .                   }
          .               }
          .           
     83,640 ( 0.00%)      fn collect_predicates_for_types(
          .                   &mut self,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   cause: ObligationCause<'tcx>,
          .                   recursion_depth: usize,
          .                   trait_def_id: DefId,
          .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
          .               ) -> Vec<PredicateObligation<'tcx>> {
          .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
          .                   // 2. Produce something like `&'0 i32 : Copy`
          .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
          .           
          .                   types
          .                       .as_ref()
          .                       .skip_binder() // binder moved -\
          .                       .iter()
          .                       .flat_map(|ty| {
     27,903 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
          .           
    111,612 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
     27,903 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
     46,505 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
     93,010 ( 0.00%)                          ensure_sufficient_stack(|| {
          .                                       project::normalize_with_depth(
          .                                           self,
      9,301 ( 0.00%)                                  param_env,
          .                                           cause.clone(),
      9,301 ( 0.00%)                                  recursion_depth,
      9,301 ( 0.00%)                                  placeholder_ty,
          .                                       )
          .                                   });
    102,311 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
          .                                   self.tcx(),
      9,301 ( 0.00%)                          param_env,
          .                                   cause.clone(),
     18,602 ( 0.00%)                          trait_def_id,
          .                                   recursion_depth,
          .                                   normalized_ty,
          .                                   &[],
          .                               );
     55,806 ( 0.00%)                      obligations.push(placeholder_obligation);
          .                               obligations
          .                           })
          .                       })
          .                       .collect()
     41,820 ( 0.00%)      }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // Matching
          .               //
          .               // Matching is a common path used for both evaluation and
          .               // confirmation.  It basically unifies types that appear in impls
          .               // and traits. This does affect the surrounding environment;
          .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
          .               // run inside of a `probe()` so that their side-effects are
          .               // contained.
          .           
          .               fn rematch_impl(
          .                   &mut self,
          .                   impl_def_id: DefId,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
    155,645 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
    124,516 ( 0.00%)              Ok(substs) => substs,
          .                       Err(()) => {
          .                           bug!(
          .                               "Impl {:?} was matchable against {:?} but now is not",
          .                               impl_def_id,
          .                               obligation
          .                           );
          .                       }
          .                   }
          .               }
          .           
    963,091 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
          .               fn match_impl(
          .                   &mut self,
          .                   impl_def_id: DefId,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
          .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
          .           
          .                   // Before we create the substitutions and everything, first
          .                   // consider a "quick reject". This avoids creating more types
          .                   // and so forth that we need to.
          .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
      7,022 ( 0.00%)              return Err(());
          .                   }
          .           
          .                   let placeholder_obligation =
    330,246 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
    141,534 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
          .           
    235,890 ( 0.00%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
          .           
     94,356 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
          .           
          .                   debug!(?impl_trait_ref);
          .           
    283,068 ( 0.00%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
    330,246 ( 0.00%)              ensure_sufficient_stack(|| {
          .                           project::normalize_with_depth(
          .                               self,
     47,178 ( 0.00%)                      obligation.param_env,
          .                               obligation.cause.clone(),
    141,534 ( 0.00%)                      obligation.recursion_depth + 1,
     94,356 ( 0.00%)                      impl_trait_ref,
          .                           )
          .                       });
          .           
          .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
          .           
          .                   let cause = ObligationCause::new(
     47,178 ( 0.00%)              obligation.cause.span,
     94,356 ( 0.00%)              obligation.cause.body_id,
    424,602 ( 0.00%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
          .                   );
          .           
     94,356 ( 0.00%)          let InferOk { obligations, .. } = self
          .                       .infcx
     47,178 ( 0.00%)              .at(&cause, obligation.param_env)
          .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
          .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
          .                   nested_obligations.extend(obligations);
          .           
    124,221 ( 0.00%)          if !self.intercrate
          .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
          .                   {
          .                       debug!("match_impl: reservation impls only apply in intercrate mode");
          .                       return Err(());
          .                   }
          .           
          .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
    248,418 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
          .               }
          .           
          .               fn fast_reject_trait_refs(
          .                   &mut self,
          .                   obligation: &TraitObligation<'_>,
          .                   impl_trait_ref: &ty::TraitRef<'_>,
          .               ) -> bool {
          .                   // We can avoid creating type variables and doing the full
          .                   // substitution if we find that any of the input types, when
          .                   // simplified, do not match.
          .           
    152,067 ( 0.00%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
          .                       |(obligation_arg, impl_arg)| {
    462,116 ( 0.00%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
          .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
          .                                   // Note, we simplify parameters for the obligation but not the
          .                                   // impl so that we do not reject a blanket impl but do reject
          .                                   // more concrete impls if we're searching for `T: Trait`.
    603,424 ( 0.00%)                          let simplified_obligation_ty = fast_reject::simplify_type(
          .                                       self.tcx(),
          .                                       obligation_ty,
          .                                       SimplifyParams::Yes,
          .                                       StripReferences::No,
          .                                   );
    452,568 ( 0.00%)                          let simplified_impl_ty = fast_reject::simplify_type(
          .                                       self.tcx(),
          .                                       impl_ty,
          .                                       SimplifyParams::No,
          .                                       StripReferences::No,
          .                                   );
          .           
    226,284 ( 0.00%)                          simplified_obligation_ty.is_some()
          .                                       && simplified_impl_ty.is_some()
          .                                       && simplified_obligation_ty != simplified_impl_ty
          .                               }
          .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
          .                                   // Lifetimes can never cause a rejection.
          .                                   false
          .                               }
          .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
          .                           }
          .                       },
          .                   )
          .               }
          .           
          .               /// Normalize `where_clause_trait_ref` and try to match it against
          .               /// `obligation`. If successful, return any predicates that
          .               /// result from the normalization.
     16,650 ( 0.00%)      fn match_where_clause_trait_ref(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
          .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
          .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
     14,800 ( 0.00%)      }
          .           
          .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
          .               /// obligation is satisfied.
          .               #[instrument(skip(self), level = "debug")]
          .               fn match_poly_trait_ref(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
          .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
      2,975 ( 0.00%)          self.infcx
      1,850 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
      8,925 ( 0.00%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
          .                       .map(|InferOk { obligations, .. }| obligations)
          .                       .map_err(|_| ())
          .               }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // Miscellany
          .           
          .               fn match_fresh_trait_refs(
          .                   &self,
          .                   previous: ty::PolyTraitPredicate<'tcx>,
          .                   current: ty::PolyTraitPredicate<'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .               ) -> bool {
        213 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
          .                   matcher.relate(previous, current).is_ok()
          .               }
          .           
          .               fn push_stack<'o>(
          .                   &mut self,
          .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
          .                   obligation: &'o TraitObligation<'tcx>,
          .               ) -> TraitObligationStack<'o, 'tcx> {
    909,852 ( 0.00%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
          .           
          .                   let dfn = previous_stack.cache.next_dfn();
     51,990 ( 0.00%)          let depth = previous_stack.depth() + 1;
  1,208,808 ( 0.00%)          TraitObligationStack {
          .                       obligation,
    740,880 ( 0.00%)              fresh_trait_pred,
          .                       reached_depth: Cell::new(depth),
          .                       previous: previous_stack,
          .                       dfn,
          .                       depth,
          .                   }
          .               }
          .           
          .               #[instrument(skip(self), level = "debug")]
          .               fn closure_trait_ref_unnormalized(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .                   substs: SubstsRef<'tcx>,
          .               ) -> ty::PolyTraitRef<'tcx> {
      6,441 ( 0.00%)          let closure_sig = substs.as_closure().sig();
          .           
          .                   debug!(?closure_sig);
          .           
          .                   // (1) Feels icky to skip the binder here, but OTOH we know
          .                   // that the self-type is an unboxed closure type and hence is
          .                   // in fact unparameterized (or at least does not reference any
          .                   // regions bound in the obligation). Still probably some
          .                   // refactoring could make this nicer.
     21,470 ( 0.00%)          closure_trait_ref_and_return_type(
          .                       self.tcx(),
     12,882 ( 0.00%)              obligation.predicate.def_id(),
      2,147 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
      8,588 ( 0.00%)              closure_sig,
          .                       util::TupleArgumentsFlag::No,
          .                   )
          .                   .map_bound(|(trait_ref, _)| trait_ref)
          .               }
          .           
          .               fn generator_trait_ref_unnormalized(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
-- line 2291 ----------------------------------------
-- line 2307 ----------------------------------------
          .                   )
          .                   .map_bound(|(trait_ref, ..)| trait_ref)
          .               }
          .           
          .               /// Returns the obligations that are implied by instantiating an
          .               /// impl or trait. The obligations are substituted and fully
          .               /// normalized. This is used when confirming an impl or default
          .               /// impl.
    760,472 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
          .               fn impl_or_trait_obligations(
          .                   &mut self,
          .                   cause: ObligationCause<'tcx>,
          .                   recursion_depth: usize,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   def_id: DefId,           // of impl or trait
          .                   substs: SubstsRef<'tcx>, // for impl or trait
          .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
          .                   //    V: Iterator, V: Sized,
          .                   //    <U as Iterator>::Item: Copy
          .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
          .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
          .                   // `$1: Copy`, so we must ensure the obligations are emitted in
          .                   // that order.
          .                   let predicates = tcx.predicates_of(def_id);
          .                   debug!(?predicates);
     33,064 ( 0.00%)          assert_eq!(predicates.parent, None);
     99,192 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
          .                   for (predicate, _) in predicates.predicates {
          .                       debug!(?predicate);
    257,025 ( 0.00%)              let predicate = normalize_with_depth_to(
          .                           self,
          .                           param_env,
          .                           cause.clone(),
          .                           recursion_depth,
     51,405 ( 0.00%)                  predicate.subst(tcx, substs),
          .                           &mut obligations,
          .                       );
    514,050 ( 0.00%)              obligations.push(Obligation {
          .                           cause: cause.clone(),
          .                           recursion_depth,
          .                           param_env,
          .                           predicate,
          .                       });
          .                   }
          .           
          .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
          .                   // (#38528) from happening, but the real cause of the duplication is
          .                   // unknown. What we know is that the deduplication avoids exponential
          .                   // amount of predicates being propagated when processing deeply nested
          .                   // types.
          .                   //
          .                   // This code is hot enough that it's worth avoiding the allocation
          .                   // required for the FxHashSet when possible. Special-casing lengths 0,
          .                   // 1 and 2 covers roughly 75-80% of the cases.
     74,499 ( 0.00%)          if obligations.len() <= 1 {
          .                       // No possibility of duplicates.
     15,019 ( 0.00%)          } else if obligations.len() == 2 {
          .                       // Only two elements. Drop the second if they are equal.
          3 ( 0.00%)              if obligations[0] == obligations[1] {
          9 ( 0.00%)                  obligations.truncate(1);
          .                       }
          .                   } else {
          .                       // Three or more elements. Use a general deduplication process.
          .                       let mut seen = FxHashSet::default();
      6,022 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
          .                   }
          .           
    132,256 ( 0.00%)          obligations
          .               }
          .           }
          .           
          .           trait TraitObligationExt<'tcx> {
          .               fn derived_cause(
          .                   &self,
          .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
          .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
          .                    */
          .           
          .                   let obligation = self;
          .           
          .                   // NOTE(flaper87): As of now, it keeps track of the whole error
          .                   // chain. Ideally, we should have a way to configure this either
          .                   // by using -Z verbose or just a CLI argument.
          .                   let derived_cause = DerivedObligationCause {
    160,176 ( 0.00%)              parent_trait_pred: obligation.predicate,
     75,043 ( 0.00%)              parent_code: obligation.cause.clone_code(),
          .                   };
          .                   let derived_code = variant(derived_cause);
    471,613 ( 0.00%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
          .               }
          .           }
          .           
          .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
          .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
          .                   TraitObligationStackList::with(self)
          .               }
          .           
          .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
     49,424 ( 0.00%)          self.previous.cache
          .               }
          .           
          .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
          .                   self.list()
          .               }
          .           
          .               /// Indicates that attempting to evaluate this stack entry
          .               /// required accessing something from the stack at depth `reached_depth`.
      3,834 ( 0.00%)      fn update_reached_depth(&self, reached_depth: usize) {
      1,917 ( 0.00%)          assert!(
      1,917 ( 0.00%)              self.depth >= reached_depth,
          .                       "invoked `update_reached_depth` with something under this stack: \
          .                        self.depth={} reached_depth={}",
          .                       self.depth,
          .                       reached_depth,
          .                   );
          .                   debug!(reached_depth, "update_reached_depth");
          .                   let mut p = self;
      5,817 ( 0.00%)          while reached_depth < p.depth {
          .                       debug!(?p.fresh_trait_pred, "update_reached_depth: marking as cycle participant");
      1,950 ( 0.00%)              p.reached_depth.set(p.reached_depth.get().min(reached_depth));
      1,950 ( 0.00%)              p = p.previous.head.unwrap();
          .                   }
      3,834 ( 0.00%)      }
          .           }
          .           
          .           /// The "provisional evaluation cache" is used to store intermediate cache results
          .           /// when solving auto traits. Auto traits are unusual in that they can support
          .           /// cycles. So, for example, a "proof tree" like this would be ok:
          .           ///
          .           /// - `Foo<T>: Send` :-
          .           ///   - `Bar<T>: Send` :-
-- line 2462 ----------------------------------------
-- line 2540 ----------------------------------------
          .               /// evaluation. When we create an entry in the evaluation cache using this provisional
          .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
          .               /// the cache will have all of the necessary incr comp dependencies tracked.
          .               dep_node: DepNodeIndex,
          .           }
          .           
          .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
          .               fn default() -> Self {
    162,634 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
          .               }
          .           }
          .           
          .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
          .               /// Get the next DFN in sequence (basically a counter).
          .               fn next_dfn(&self) -> usize {
     25,995 ( 0.00%)          let result = self.dfn.get();
    103,980 ( 0.00%)          self.dfn.set(result + 1);
          .                   result
          .               }
          .           
          .               /// Check the provisional cache for any result for
          .               /// `fresh_trait_ref`. If there is a hit, then you must consider
          .               /// it an access to the stack slots at depth
          .               /// `reached_depth` (from the returned value).
          .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2599 ----------------------------------------
          .                   //   ...
          .                   //      B // depth 1 -- reached depth = 0
          .                   //          C // depth 2 -- reached depth = 1 (should be 0)
          .                   //              B
          .                   //          A // depth 0
          .                   //   D (reached depth 1)
          .                   //      C (cache -- reached depth = 2)
          .                   for (_k, v) in &mut *map {
        302 ( 0.00%)              if v.from_dfn >= from_dfn {
        381 ( 0.00%)                  v.reached_depth = reached_depth.min(v.reached_depth);
          .                       }
          .                   }
          .           
          .                   map.insert(
          .                       fresh_trait_pred,
          .                       ProvisionalEvaluation { from_dfn, reached_depth, result, dep_node },
          .                   );
          .               }
-- line 2616 ----------------------------------------
-- line 2663 ----------------------------------------
          .               fn on_completion(
          .                   &self,
          .                   dfn: usize,
          .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
          .               ) {
          .                   debug!(?dfn, "on_completion");
          .           
          .                   for (fresh_trait_pred, eval) in
     93,562 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
          .                   {
          .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
          .           
          .                       op(fresh_trait_pred, eval.result, eval.dep_node);
          .                   }
          .               }
          .           }
          .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
          .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
          .               }
          .           
          .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
          .                   self.head
          .               }
          .           
          .               fn depth(&self) -> usize {
     66,591 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
          .               }
          .           }
          .           
          .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
          .               type Item = &'o TraitObligationStack<'o, 'tcx>;
          .           
          .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
     78,914 ( 0.00%)          let o = self.head?;
     31,021 ( 0.00%)          *self = o.previous;
          .                   Some(o)
          .               }
          .           }
          .           
          .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
          .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
          .                   write!(f, "TraitObligationStack({:?})", self.obligation)
          .               }
-- line 2717 ----------------------------------------

  1,727,736 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
 12,679,090 ( 0.01%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    786,017 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
282,779,886 ( 0.22%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  2,274,754 ( 0.00%)          self.stride += Group::WIDTH;
  2,274,754 ( 0.00%)          self.pos += self.stride;
  1,954,452 ( 0.00%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    845,400 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  1,808,805 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    365,634 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  2,340,497 ( 0.00%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    534,233 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  1,702,474 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  2,289,879 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
      8,526 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
     77,268 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        545 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     42,095 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    173,558 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    173,558 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    347,116 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
     99,712 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    247,404 ( 0.00%)          self.erase_no_drop(&item);
      1,583 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,313,394 ( 0.00%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     11,850 ( 0.00%)          match self.find(hash, eq) {
     69,106 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    908,435 ( 0.00%)              None => None,
          .                   }
  5,721,807 ( 0.00%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     97,910 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  2,267,205 ( 0.00%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,493,629 ( 0.00%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  3,386,521 ( 0.00%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  2,458,328 ( 0.00%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
 15,704,556 ( 0.01%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     42,675 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 12,347,601 ( 0.01%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          4 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
 11,596,235 ( 0.01%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  6,310,056 ( 0.00%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      1,196 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  4,732,542 ( 0.00%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     26,963 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  2,127,253 ( 0.00%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    101,977 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  4,501,707 ( 0.00%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  3,577,931 ( 0.00%)          self.table.items += 1;
          .                   bucket
     53,917 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
    644,244 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     72,204 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    145,315 ( 0.00%)              eq(self.bucket(index).as_ref())
     25,360 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
      7,611 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
    730,184 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    274,401 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
     64,260 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    303,332 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
     73,440 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  6,281,934 ( 0.00%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
        100 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    714,905 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     51,500 ( 0.00%)          let allocation = self.into_allocation();
     38,625 ( 0.00%)          RawIntoIter {
     64,375 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     22,493 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      5,909 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  4,701,592 ( 0.00%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,038,036 ( 0.00%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    715,674 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  1,669,992 ( 0.00%)          Ok(Self {
          .                       ctrl,
    701,141 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  2,210,912 ( 0.00%)      }
          .           
          .               #[inline]
    159,373 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     41,614 ( 0.00%)          if capacity == 0 {
     18,488 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  1,377,133 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     99,830 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
    159,373 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    759,062 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    759,062 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,518,124 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  8,228,303 ( 0.01%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 23,899,855 ( 0.02%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
 11,049,094 ( 0.01%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    932,616 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 28,700,403 ( 0.02%)              for bit in group.match_byte(h2_hash) {
 58,021,202 ( 0.05%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 37,573,033 ( 0.03%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  7,987,692 ( 0.01%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
          6 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
          6 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 30,639,232 ( 0.02%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
153,855,217 ( 0.12%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 15,428,644 ( 0.01%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
 12,342,840 ( 0.01%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         66 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 23,125,515 ( 0.02%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  7,701,631 ( 0.01%)          *self.ctrl(index) = ctrl;
  7,702,703 ( 0.01%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  2,121,778 ( 0.00%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  2,000,262 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  8,712,209 ( 0.01%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
     29,079 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    931,021 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    415,749 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    831,503 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    831,502 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  1,767,817 ( 0.00%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          4 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    415,749 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     72,709 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  4,715,706 ( 0.00%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    415,749 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
        128 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         22 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
          6 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    288,460 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
    119,556 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
    141,521 ( 0.00%)          self.items = 0;
    119,638 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    642,274 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  2,569,096 ( 0.00%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  3,054,910 ( 0.00%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  2,569,096 ( 0.00%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    206,064 ( 0.00%)      fn clone(&self) -> Self {
     25,979 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
    231,822 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        218 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,223,318 ( 0.00%)      fn drop(&mut self) {
  3,702,321 ( 0.00%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  4,493,998 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     51,500 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     64,375 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  2,384,419 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    306,686 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    508,349 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  2,715,822 ( 0.00%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     43,856 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     50,588 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     70,706 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
     15,764 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    323,970 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    775,106 ( 0.00%)          if let Some(b) = self.iter.next() {
 14,183,676 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    647,940 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     19,560 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
    106,924 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
        374 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     21,702 ( 0.00%)      fn next(&mut self) -> Option<T> {
      4,104 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     57,879 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          4 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     22,288 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
      2,786 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
     22,288 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

122,085,912 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                   

-- line 44 ----------------------------------------
          .           /// Convert from a specific kind of undo to the more general UndoLog
          .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
          .               fn from(l: Instantiate) -> Self {
          .                   UndoLog::Values(sv::UndoLog::Other(l))
          .               }
          .           }
          .           
          .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
    371,190 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  1,575,434 ( 0.00%)          match undo {
    280,516 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
    183,784 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
    278,080 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
          .                   }
    742,380 ( 0.00%)      }
          .           }
          .           
          .           pub struct TypeVariableStorage<'tcx> {
          .               values: sv::SnapshotVecStorage<Delegate>,
          .           
          .               /// Two variables are unified in `eq_relations` when we have a
          .               /// constraint `?X == ?Y`. This table also stores, for each key,
          .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
          .               DynReturnFn,
          .               LatticeVariable,
          .           }
          .           
          .           pub(crate) struct TypeVariableData {
          .               origin: TypeVariableOrigin,
          .           }
          .           
  3,162,936 ( 0.00%)  #[derive(Copy, Clone, Debug)]
          .           pub enum TypeVariableValue<'tcx> {
          .               Known { value: Ty<'tcx> },
          .               Unknown { universe: ty::UniverseIndex },
          .           }
          .           
          .           impl<'tcx> TypeVariableValue<'tcx> {
          .               /// If this value is known, returns the type it is known to be.
          .               /// Otherwise, `None`.
          .               pub fn known(&self) -> Option<Ty<'tcx>> {
  2,011,022 ( 0.00%)          match *self {
          .                       TypeVariableValue::Unknown { .. } => None,
          .                       TypeVariableValue::Known { value } => Some(value),
          .                   }
          .               }
          .           
          .               pub fn is_unknown(&self) -> bool {
          .                   match *self {
          .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
          .           }
          .           
          .           pub(crate) struct Instantiate;
          .           
          .           pub(crate) struct Delegate;
          .           
          .           impl<'tcx> TypeVariableStorage<'tcx> {
          .               pub fn new() -> TypeVariableStorage<'tcx> {
    220,272 ( 0.00%)          TypeVariableStorage {
          .                       values: sv::SnapshotVecStorage::new(),
          .                       eq_relations: ut::UnificationTableStorage::new(),
          .                       sub_relations: ut::UnificationTableStorage::new(),
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
          .           }
          .           
          .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
          .               /// Returns the origin that was given when `vid` was created.
          .               ///
          .               /// Note that this function does not return care whether
          .               /// `vid` has been unified with something else or not.
          .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
     11,324 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
          .               }
          .           
          .               /// Records that `a == b`, depending on `dir`.
          .               ///
          .               /// Precondition: neither `a` nor `b` are known.
          .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
          .                   debug_assert!(self.probe(a).is_unknown());
          .                   debug_assert!(self.probe(b).is_unknown());
     37,492 ( 0.00%)          self.eq_relations().union(a, b);
     32,136 ( 0.00%)          self.sub_relations().union(a, b);
          .               }
          .           
          .               /// Records that `a <: b`, depending on `dir`.
          .               ///
          .               /// Precondition: neither `a` nor `b` are known.
          .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
          .                   debug_assert!(self.probe(a).is_unknown());
          .                   debug_assert!(self.probe(b).is_unknown());
     85,083 ( 0.00%)          self.sub_relations().union(a, b);
          .               }
          .           
          .               /// Instantiates `vid` with the type `ty`.
          .               ///
          .               /// Precondition: `vid` must not have been previously instantiated.
    661,250 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
          .                   let vid = self.root_var(vid);
          .                   debug_assert!(self.probe(vid).is_unknown());
          .                   debug_assert!(
          .                       self.eq_relations().probe_value(vid).is_unknown(),
          .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
          .                       vid,
          .                       ty,
          .                       self.eq_relations().probe_value(vid)
          .                   );
    925,750 ( 0.00%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
          .           
          .                   // Hack: we only need this so that `types_escaping_snapshot`
          .                   // can see what has been unified; see the Delegate impl for
          .                   // more details.
          .                   self.undo_log.push(Instantiate);
    661,250 ( 0.00%)      }
          .           
          .               /// Creates a new type variable.
          .               ///
          .               /// - `diverging`: indicates if this is a "diverging" type
          .               ///   variable, e.g.,  one created as the type of a `return`
          .               ///   expression. The code in this module doesn't care if a
          .               ///   variable is diverging, but the main Rust type-checker will
          .               ///   sometimes "unify" such variables with the `!` or `()` types.
          .               /// - `origin`: indicates *why* the type variable was created.
          .               ///   The code in this module doesn't care, but it can be useful
          .               ///   for improving error messages.
    865,308 ( 0.00%)      pub fn new_var(
          .                   &mut self,
          .                   universe: ty::UniverseIndex,
          .                   origin: TypeVariableOrigin,
          .               ) -> ty::TyVid {
  1,297,962 ( 0.00%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
          .           
    721,090 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
    144,218 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
          .           
  1,297,962 ( 0.00%)          let index = self.values().push(TypeVariableData { origin });
    576,872 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
          .           
          .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
          .           
          .                   eq_key.vid
  1,009,526 ( 0.00%)      }
          .           
          .               /// Returns the number of type variables created thus far.
          .               pub fn num_vars(&self) -> usize {
      9,859 ( 0.00%)          self.storage.values.len()
          .               }
          .           
          .               /// Returns the "root" variable of `vid` in the `eq_relations`
          .               /// equivalence table. All type variables that have been equated
          .               /// will yield the same root variable (per the union-find
          .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
          .               /// b` (transitively).
          .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
    549,195 ( 0.00%)          self.eq_relations().find(vid).vid
          .               }
          .           
          .               /// Returns the "root" variable of `vid` in the `sub_relations`
          .               /// equivalence table. All type variables that have been are
          .               /// related via equality or subtyping will yield the same root
          .               /// variable (per the union-find algorithm), so `sub_root_var(a)
          .               /// == sub_root_var(b)` implies that:
          .               ///
          .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      2,006 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
    439,869 ( 0.00%)          self.sub_relations().find(vid)
      4,012 ( 0.00%)      }
          .           
          .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
          .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
          .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
          .                   self.sub_root_var(a) == self.sub_root_var(b)
          .               }
          .           
          .               /// Retrieves the type to which `vid` has been instantiated, if
          .               /// any.
  7,202,570 ( 0.01%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
          .                   self.inlined_probe(vid)
  7,202,570 ( 0.01%)      }
          .           
          .               /// An always-inlined variant of `probe`, for very hot call sites.
          .               #[inline(always)]
          .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
 73,017,078 ( 0.06%)          self.eq_relations().inlined_probe_value(vid)
          .               }
          .           
          .               /// If `t` is a type-inference variable, and it has been
          .               /// instantiated, then return the with which it was
          .               /// instantiated. Otherwise, returns `t`.
          .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  1,682,624 ( 0.00%)          match *t.kind() {
  1,196,005 ( 0.00%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
          .                           TypeVariableValue::Unknown { .. } => t,
          .                           TypeVariableValue::Known { value } => value,
          .                       },
          .                       _ => t,
          .                   }
          .               }
          .           
          .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
          .               fn values(
          .                   &mut self,
          .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
          .                   self.storage.values.with_log(self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
 40,275,142 ( 0.03%)          self.storage.eq_relations.with_log(self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
    340,567 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
          .               }
          .           
          .               /// Returns a range of the type variables created during the snapshot.
     49,295 ( 0.00%)      pub fn vars_since_snapshot(
          .                   &mut self,
          .                   value_count: usize,
          .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
          .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
     59,154 ( 0.00%)          (
          .                       range.start..range.end,
          .                       (range.start.as_usize()..range.end.as_usize())
          .                           .map(|index| self.storage.values.get(index).origin)
          .                           .collect(),
          .                   )
     59,154 ( 0.00%)      }
          .           
          .               /// Returns indices of all variables that are not yet
          .               /// instantiated.
          .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
          .                   (0..self.storage.values.len())
          .                       .filter_map(|i| {
          .                           let vid = ty::TyVid::from_usize(i);
    340,652 ( 0.00%)                  match self.probe(vid) {
          .                               TypeVariableValue::Unknown { .. } => Some(vid),
          .                               TypeVariableValue::Known { .. } => None,
          .                           }
          .                       })
          .                       .collect()
          .               }
          .           }
          .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
          .           /// These structs (a newtyped TyVid) are used as the unification key
          .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
          .           /// with them.
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
          .           pub(crate) struct TyVidEqKey<'tcx> {
          .               vid: ty::TyVid,
          .           
          .               // in the table, we map each ty-vid to one of these:
152,258,401 ( 0.12%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
          .           }
          .           
          .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
          .               #[inline] // make this function eligible for inlining - it is quite hot.
          .               fn from(vid: ty::TyVid) -> Self {
          .                   TyVidEqKey { vid, phantom: PhantomData }
          .               }
          .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
          .                   "TyVidEqKey"
          .               }
          .           }
          .           
          .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
          .               type Error = ut::NoError;
          .           
          .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
    555,775 ( 0.00%)          match (value1, value2) {
          .                       // We never equate two type variables, both of which
          .                       // have known types.  Instead, we recursively equate
          .                       // those types.
          .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
          .                           bug!("equating two type variables, both of which have known types")
          .                       }
          .           
          .                       // If one side is known, prefer that one.
          .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
          .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
          .           
          .                       // If both sides are *unknown*, it hardly matters, does it?
          .                       (
      5,355 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
      5,355 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
          .                       ) => {
          .                           // If we unify two unbound variables, ?T and ?U, then whatever
          .                           // value they wind up taking (which must be the same value) must
          .                           // be nameable by both universes. Therefore, the resulting
          .                           // universe is the minimum of the two universes, because that is
          .                           // the one which contains the fewest names in scope.
          .                           let universe = cmp::min(universe1, universe2);
     21,420 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
          .                       }
          .                   }
          .               }
          .           }

    417,116 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs
--------------------------------------------------------------------------------
Ir                   

-- line 42 ----------------------------------------
          .           
          .           impl<D: SnapshotVecDelegate> Rollback<UndoLog<D>> for SnapshotVecStorage<D> {
          .               fn reverse(&mut self, undo: UndoLog<D>) {
          .                   self.values.reverse(undo)
          .               }
          .           }
          .           impl<D: SnapshotVecDelegate> Rollback<UndoLog<D>> for Vec<D::Value> {
          .               fn reverse(&mut self, undo: UndoLog<D>) {
  1,311,304 ( 0.00%)          match undo {
          .                       NewElem(i) => {
          .                           self.pop();
    510,041 ( 0.00%)                  assert!(Vec::len(self) == i);
          .                       }
          .           
          .                       SetElem(i, v) => {
    413,131 ( 0.00%)                  self[i] = v;
          .                       }
          .           
          .                       Other(u) => {
          .                           D::reverse(self, u);
          .                       }
          .                   }
          .               }
          .           }
-- line 65 ----------------------------------------
-- line 76 ----------------------------------------
          .           impl<D> VecLike<D> for Vec<D::Value>
          .           where
          .               D: SnapshotVecDelegate,
          .           {
          .               fn push(&mut self, item: D::Value) {
          .                   Vec::push(self, item)
          .               }
          .               fn len(&self) -> usize {
    569,726 ( 0.00%)          Vec::len(self)
          .               }
          .               fn reserve(&mut self, size: usize) {
          .                   Vec::reserve(self, size)
          .               }
          .           }
          .           
          .           impl<D> VecLike<D> for &'_ mut Vec<D::Value>
          .           where
          .               D: SnapshotVecDelegate,
          .           {
          .               fn push(&mut self, item: D::Value) {
          .                   Vec::push(self, item)
          .               }
          .               fn len(&self) -> usize {
  3,079,820 ( 0.00%)          Vec::len(self)
          .               }
          .               fn reserve(&mut self, size: usize) {
          .                   Vec::reserve(self, size)
          .               }
          .           }
          .           
          .           #[allow(type_alias_bounds)]
          .           pub type SnapshotVecStorage<D: SnapshotVecDelegate> =
-- line 107 ----------------------------------------
-- line 191 ----------------------------------------
          .           }
          .           
          .           impl<V: VecLike<D>, D: SnapshotVecDelegate, U> SnapshotVec<D, V, U> {
          .               pub fn len(&self) -> usize {
          .                   self.values.len()
          .               }
          .           
          .               pub fn get(&self, index: usize) -> &D::Value {
186,285,173 ( 0.15%)          &self.values.as_ref()[index]
          .               }
          .           
          .               /// Returns a mutable pointer into the vec; whatever changes you make here cannot be undone
          .               /// automatically, so you should be sure call `record()` with some sort of suitable undo
          .               /// action.
          .               pub fn get_mut(&mut self, index: usize) -> &mut D::Value {
    411,956 ( 0.00%)          &mut self.values.as_mut()[index]
          .               }
          .           
          .               /// Reserve space for new values, just like an ordinary vec.
          .               pub fn reserve(&mut self, additional: usize) {
          .                   // This is not affected by snapshots or anything.
          .                   self.values.reserve(additional);
          .               }
          .           }
-- line 214 ----------------------------------------
-- line 219 ----------------------------------------
          .               }
          .           
          .               pub fn record(&mut self, action: D::Undo) {
          .                   if self.in_snapshot() {
          .                       self.undo_log.push(Other(action));
          .                   }
          .               }
          .           
  6,824,673 ( 0.01%)      pub fn push(&mut self, elem: D::Value) -> usize {
          .                   let len = self.values.len();
          .                   self.values.push(elem);
          .           
    927,835 ( 0.00%)          if self.in_snapshot() {
          .                       self.undo_log.push(NewElem(len));
          .                   }
          .           
          .                   len
  6,288,867 ( 0.00%)      }
          .           
          .               /// Updates the element at the given index. The old value will saved (and perhaps restored) if
          .               /// a snapshot is active.
          .               pub fn set(&mut self, index: usize, new_elem: D::Value) {
          .                   let old_elem = mem::replace(&mut self.values.as_mut()[index], new_elem);
          .                   if self.undo_log.in_snapshot() {
          .                       self.undo_log.push(SetElem(index, old_elem));
          .                   }
          .               }
          .           
          .               /// Updates all elements. Potentially more efficient -- but
          .               /// otherwise equivalent to -- invoking `set` for each element.
          7 ( 0.00%)      pub fn set_all(&mut self, mut new_elems: impl FnMut(usize) -> D::Value) {
          1 ( 0.00%)          if !self.undo_log.in_snapshot() {
          .                       for (index, slot) in self.values.as_mut().iter_mut().enumerate() {
        236 ( 0.00%)                  *slot = new_elems(index);
          .                       }
          .                   } else {
          .                       for i in 0..self.values.len() {
          .                           self.set(i, new_elems(i));
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
  2,174,970 ( 0.00%)      pub fn update<OP>(&mut self, index: usize, op: OP)
          .               where
          .                   OP: FnOnce(&mut D::Value),
          .                   D::Value: Clone,
          .               {
    260,801 ( 0.00%)          if self.undo_log.in_snapshot() {
    950,559 ( 0.00%)              let old_elem = self.values.as_mut()[index].clone();
      2,388 ( 0.00%)              self.undo_log.push(SetElem(index, old_elem));
          .                   }
    767,540 ( 0.00%)          op(&mut self.values.as_mut()[index]);
  2,086,408 ( 0.00%)      }
          .           }
          .           
          .           impl<D, V, L> SnapshotVec<D, V, L>
          .           where
          .               D: SnapshotVecDelegate,
          .               V: VecLike<D> + Rollback<UndoLog<D>>,
          .               L: Snapshots<UndoLog<D>>,
          .           {
-- line 279 ----------------------------------------

    789,178 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    166,642 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  1,996,821 ( 0.00%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     38,512 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
    628,087 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  1,477,974 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
    204,443 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
441,386,993 ( 0.34%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          2 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
 14,099,842 ( 0.01%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    128,009 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
     35,814 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
     27,520 ( 0.00%)                  while let Some(x) = self.next() {
    110,098 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
         24 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  2,715,308 ( 0.00%)                  while let Some(x) = self.next() {
  3,661,659 ( 0.00%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
         24 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
    172,867 ( 0.00%)                  while let Some(x) = self.next() {
    765,888 ( 0.00%)                      if predicate(&x) {
      1,998 ( 0.00%)                          return Some(x);
          .                               }
          .                           }
          .                           None
        874 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
    144,519 ( 0.00%)                  while let Some(x) = self.next() {
    929,100 ( 0.00%)                      if let Some(y) = f(x) {
    156,523 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     26,423 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
  1,819,648 ( 0.00%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
    260,544 ( 0.00%)                  while let Some(x) = self.next_back() {
  3,546,982 ( 0.00%)                      i -= 1;
  2,877,708 ( 0.00%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
    626,700 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
          .                       fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
     59,125 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
     59,148 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  7,816,551 ( 0.01%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

 55,522,412 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 108 ----------------------------------------
          .                   suppress_errors: bool,
          .               },
          .           }
          .           
          .           impl RegionckMode {
          .               /// Indicates that the MIR borrowck will repeat these region
          .               /// checks, so we should ignore errors if NLL is (unconditionally)
          .               /// enabled.
      2,361 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
          .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
          .                   // this always `true` and then proceed to eliminate the dead code.
      2,361 ( 0.00%)          match tcx.borrowck_mode() {
          .                       // If we're on Migrate mode, report AST region errors
          .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
          .           
          .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
          .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
          .                   }
      4,722 ( 0.00%)      }
          .           }
          .           
          .           /// This type contains all the things within `InferCtxt` that sit within a
          .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
          .           /// operations are hot enough that we want only one call to `borrow_mut` per
          .           /// call to `start_snapshot` and `rollback_to`.
          .           pub struct InferCtxtInner<'tcx> {
          .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
          .               /// type instantiations (`ty::Infer`) to the actual opaque
          .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
          .               /// opaque type inference variables to their corresponding
          .               /// opaque type.
          .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
          .           }
          .           
          .           impl<'tcx> InferCtxtInner<'tcx> {
    367,120 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  2,496,416 ( 0.00%)          InferCtxtInner {
          .                       projection_cache: Default::default(),
          .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
          .                       undo_log: InferCtxtUndoLogs::default(),
          .                       const_unification_storage: ut::UnificationTableStorage::new(),
          .                       int_unification_storage: ut::UnificationTableStorage::new(),
          .                       float_unification_storage: ut::UnificationTableStorage::new(),
    220,272 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
          .                       region_obligations: vec![],
          .                       opaque_types: Default::default(),
          .                       opaque_types_vars: Default::default(),
          .                   }
    440,544 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
          .                   &self.region_obligations
          .               }
          .           
          .               #[inline]
          .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
     24,243 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 37,112,203 ( 0.03%)          self.type_variable_storage.with_log(&mut self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn int_unification_table(
          .                   &mut self,
          .               ) -> ut::UnificationTable<
          .                   ut::InPlace<
          .                       ty::IntVid,
          .                       &mut ut::UnificationStorage<ty::IntVid>,
          .                       &mut InferCtxtUndoLogs<'tcx>,
          .                   >,
          .               > {
     83,238 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn float_unification_table(
          .                   &mut self,
          .               ) -> ut::UnificationTable<
          .                   ut::InPlace<
          .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
          .                   &mut self,
          .               ) -> ut::UnificationTable<
          .                   ut::InPlace<
          .                       ty::ConstVid<'tcx>,
          .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
          .                       &mut InferCtxtUndoLogs<'tcx>,
          .                   >,
          .               > {
     14,119 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
          .               }
          .           
          .               #[inline]
          .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
    544,527 ( 0.00%)          self.region_constraint_storage
          .                       .as_mut()
          .                       .expect("region constraints already solved")
    695,993 ( 0.00%)              .with_log(&mut self.undo_log)
          .               }
          .           }
          .           
          .           pub struct InferCtxt<'a, 'tcx> {
          .               pub tcx: TyCtxt<'tcx>,
          .           
          .               /// The `DefId` of the item in whose context we are performing inference or typeck.
          .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
          .               /// item we are type-checking, and just consider those names as
          .               /// part of the root universe. So this would only get incremented
          .               /// when we enter into a higher-ranked (`for<..>`) type or trait
          .               /// bound.
          .               universe: Cell<ty::UniverseIndex>,
          .           }
          .           
          .           /// See the `error_reporting` module for more details.
  1,156,880 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
          .           pub enum ValuePairs<'tcx> {
          .               Types(ExpectedFound<Ty<'tcx>>),
          .               Regions(ExpectedFound<ty::Region<'tcx>>),
          .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
          .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
          .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
          .           }
          .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
          .           pub struct TypeTrace<'tcx> {
          .               cause: ObligationCause<'tcx>,
          .               values: ValuePairs<'tcx>,
          .           }
          .           
          .           /// The origin of a `r1 <= r2` constraint.
          .           ///
          .           /// See `error_reporting` module for more details
    905,183 ( 0.00%)  #[derive(Clone, Debug)]
          .           pub enum SubregionOrigin<'tcx> {
          .               /// Arose from a subtyping relation
     46,868 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
          .           
          .               /// When casting `&'a T` to an `&'b Trait` object,
          .               /// relating `'a` to `'b`
          .               RelateObjectBound(Span),
          .           
          .               /// Some type parameter was instantiated with the given type,
          .               /// and that type must outlive some region.
     11,995 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
          .           
          .               /// The given region parameter was instantiated with a region
          .               /// that must outlive some other region.
          .               RelateRegionParamBound(Span),
          .           
          .               /// Creating a pointer `b` to contents of another reference
          .               Reborrow(Span),
          .           
          .               /// Creating a pointer `b` to contents of an upvar
          .               ReborrowUpvar(Span, ty::UpvarId),
          .           
          .               /// Data with type `Ty<'tcx>` was borrowed
     11,866 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
          .           
          .               /// (&'a &'b T) where a >= b
      9,086 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
          .           
          .               /// Comparing the signature and requirements of an impl method against
          .               /// the containing trait.
          .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
          .           
          .               /// Comparing the signature and requirements of an impl associated type
          .               /// against the containing trait
          .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
          .               defining_use_anchor: Option<LocalDefId>,
          .           }
          .           
          .           pub trait TyCtxtInferExt<'tcx> {
          .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
          .           }
          .           
          .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
     73,424 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
    220,272 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
     73,424 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> InferCtxtBuilder<'tcx> {
          .               /// Used only by `rustc_typeck` during body type-checking/inference,
          .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
          .               /// Will also change the scope for opaque type defining use checks to the given owner.
     54,270 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
     66,330 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
     30,150 ( 0.00%)          self.with_opaque_type_inference(table_owner)
     42,210 ( 0.00%)      }
          .           
          .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
          .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
          .               ///
          .               /// It is only meant to be called in two places, for typeck
          .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
          .               /// in mir borrowck.
      5,218 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      2,609 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
     17,278 ( 0.00%)          self
      7,827 ( 0.00%)      }
          .           
          .               /// Given a canonical value `C` as a starting point, create an
          .               /// inference context that contains each of the bound values
          .               /// within instantiated as a fresh variable. The `f` closure is
          .               /// invoked with the new infcx, along with the instantiated value
          .               /// `V` and a substitution `S`. This substitution `S` maps from
          .               /// the bound values in `C` to their instantiated values in `V`
          .               /// (in other words, `S(C) = V`).
    120,523 ( 0.00%)      pub fn enter_with_canonical<T, R>(
          .                   &mut self,
          .                   span: Span,
          .                   canonical: &Canonical<'tcx, T>,
          .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
          .               ) -> R
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   self.enter(|infcx| {
    140,492 ( 0.00%)              let (value, subst) =
      7,078 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
    212,578 ( 0.00%)              f(infcx, value, subst)
          .                   })
    131,490 ( 0.00%)      }
          .           
    430,512 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
    207,329 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
          .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  3,140,100 ( 0.00%)          f(InferCtxt {
          .                       tcx,
          .                       defining_use_anchor,
          .                       in_progress_typeck_results,
     73,424 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
          .                       lexical_region_resolutions: RefCell::new(None),
          .                       selection_cache: Default::default(),
          .                       evaluation_cache: Default::default(),
          .                       reported_trait_errors: Default::default(),
          .                       reported_closure_mismatch: Default::default(),
          .                       tainted_by_errors_flag: Cell::new(false),
     73,424 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
          .                       in_snapshot: Cell::new(false),
          .                       skip_leak_check: Cell::new(false),
          .                       universe: Cell::new(ty::UniverseIndex::ROOT),
          .                   })
    465,755 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx, T> InferOk<'tcx, T> {
          .               pub fn unit(self) -> InferOk<'tcx, ()> {
          .                   InferOk { value: (), obligations: self.obligations }
          .               }
          .           
          .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
          .               pub fn into_value_registering_obligations(
          .                   self,
          .                   infcx: &InferCtxt<'_, 'tcx>,
          .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
          .               ) -> T {
      2,572 ( 0.00%)          let InferOk { value, obligations } = self;
      9,264 ( 0.00%)          for obligation in obligations {
        273 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
          .                   }
          .                   value
          .               }
          .           }
          .           
          .           impl<'tcx> InferOk<'tcx, ()> {
     88,810 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
    355,240 ( 0.00%)          self.obligations
     88,810 ( 0.00%)      }
          .           }
          .           
          .           #[must_use = "once you start a snapshot, you should always consume it"]
          .           pub struct CombinedSnapshot<'a, 'tcx> {
          .               undo_snapshot: Snapshot<'tcx>,
          .               region_constraints_snapshot: RegionSnapshot,
          .               universe: ty::UniverseIndex,
          .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
          .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
          .                   debug!("canonical consts: {:?}", &canonical.value);
          .           
          .                   self.tcx.try_unify_abstract_consts(canonical.value)
          .               }
          .           
          .               pub fn is_in_snapshot(&self) -> bool {
          .                   self.in_snapshot.get()
    135,982 ( 0.00%)      }
          .           
  1,042,880 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  1,173,240 ( 0.00%)          t.fold_with(&mut self.freshener())
  1,173,240 ( 0.00%)      }
          .           
          .               /// Returns the origin of the type variable identified by `vid`, or `None`
          .               /// if this is not a type variable.
          .               ///
          .               /// No attempt is made to resolve `ty`.
        884 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      1,768 ( 0.00%)          match *ty.kind() {
        417 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      1,668 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
          .                       }
         25 ( 0.00%)              _ => None,
          .                   }
      1,768 ( 0.00%)      }
          .           
    130,360 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
          .                   freshen::TypeFreshener::new(self, false)
    130,360 ( 0.00%)      }
          .           
          .               /// Like `freshener`, but does not replace `'static` regions.
    431,147 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
          .                   freshen::TypeFreshener::new(self, true)
    431,147 ( 0.00%)      }
          .           
     10,328 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      5,164 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      5,164 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
          .                       .type_variables()
          .                       .unsolved_variables()
          .                       .into_iter()
        833 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
          .                       .collect();
          .                   vars.extend(
          .                       (0..inner.int_unification_table().len())
          .                           .map(|i| ty::IntVid { index: i as u32 })
      1,228 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
         25 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
          .                   );
          .                   vars.extend(
          .                       (0..inner.float_unification_table().len())
          .                           .map(|i| ty::FloatVid { index: i as u32 })
          .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
          .                           .map(|v| self.tcx.mk_float_var(v)),
          .                   );
          .                   vars
     18,074 ( 0.00%)      }
          .           
    222,233 ( 0.00%)      fn combine_fields(
          .                   &'a self,
          .                   trace: TypeTrace<'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .               ) -> CombineFields<'a, 'tcx> {
    904,132 ( 0.00%)          CombineFields {
          .                       infcx: self,
  2,260,330 ( 0.00%)              trace,
          .                       cause: None,
          .                       param_env,
          .                       obligations: PredicateObligations::new(),
          .                   }
    222,233 ( 0.00%)      }
          .           
          .               /// Clear the "currently in a snapshot" flag, invoke the closure,
          .               /// then restore the flag to its original value. This flag is a
          .               /// debugging measure designed to detect cases where we start a
          .               /// snapshot, create type variables, and register obligations
          .               /// which may involve those type variables in the fulfillment cx,
          .               /// potentially leaving "dangling type variables" behind.
          .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
          .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
          .               ///
          .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
          .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
          .               /// obligations. As long as this fulfillment cx is fully drained
          .               /// before we return, this is not a problem, as there won't be any
          .               /// escaping obligations in the main cx. In those cases, you can
          .               /// use this function.
        128 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
          .               where
          .                   F: FnOnce(&Self) -> R,
          .               {
          .                   let flag = self.in_snapshot.replace(false);
     59,202 ( 0.00%)          let result = func(self);
          .                   self.in_snapshot.set(flag);
          .                   result
        144 ( 0.00%)      }
          .           
  1,139,290 ( 0.00%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
          .                   debug!("start_snapshot()");
          .           
          .                   let in_snapshot = self.in_snapshot.replace(true);
          .           
          .                   let mut inner = self.inner.borrow_mut();
          .           
  3,417,870 ( 0.00%)          CombinedSnapshot {
          .                       undo_snapshot: inner.undo_log.start_snapshot(),
          .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
          .                       universe: self.universe(),
          .                       was_in_snapshot: in_snapshot,
          .                       // Borrow typeck results "in progress" (i.e., during typeck)
          .                       // to ban writes from within a snapshot to them.
    569,645 ( 0.00%)              _in_progress_typeck_results: self
          .                           .in_progress_typeck_results
          .                           .map(|typeck_results| typeck_results.borrow()),
          .                   }
  2,278,580 ( 0.00%)      }
          .           
  1,530,012 ( 0.00%)      #[instrument(skip(self, snapshot), level = "debug")]
          .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
          .                   let CombinedSnapshot {
    139,092 ( 0.00%)              undo_snapshot,
    139,092 ( 0.00%)              region_constraints_snapshot,
    139,092 ( 0.00%)              universe,
    139,092 ( 0.00%)              was_in_snapshot,
    278,184 ( 0.00%)              _in_progress_typeck_results,
          .                   } = snapshot;
          .           
          .                   self.in_snapshot.set(was_in_snapshot);
          .                   self.universe.set(universe);
          .           
          .                   let mut inner = self.inner.borrow_mut();
    139,092 ( 0.00%)          inner.rollback_to(undo_snapshot);
          .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
          .               }
          .           
  6,458,295 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
          .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
          .                   let CombinedSnapshot {
    430,553 ( 0.00%)              undo_snapshot,
          .                       region_constraints_snapshot: _,
          .                       universe: _,
    430,553 ( 0.00%)              was_in_snapshot,
    861,106 ( 0.00%)              _in_progress_typeck_results,
          .                   } = snapshot;
          .           
          .                   self.in_snapshot.set(was_in_snapshot);
          .           
          .                   self.inner.borrow_mut().commit(undo_snapshot);
          .               }
          .           
          .               /// Executes `f` and commit the bindings.
    372,104 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    466,180 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
          .               where
          .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
          .               {
     42,380 ( 0.00%)          let snapshot = self.start_snapshot();
    177,545 ( 0.00%)          let r = f(&snapshot);
    296,660 ( 0.00%)          self.commit_from(snapshot);
    241,214 ( 0.00%)          r
          .               }
          .           
          .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  2,465,249 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  3,045,956 ( 0.00%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
          .               where
          .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
          .               {
    475,720 ( 0.00%)          let snapshot = self.start_snapshot();
  1,414,714 ( 0.00%)          let r = f(&snapshot);
          .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
    475,105 ( 0.00%)          match r {
          .                       Ok(_) => {
  2,770,182 ( 0.00%)                  self.commit_from(snapshot);
          .                       }
          .                       Err(_) => {
    457,209 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
          .                       }
          .                   }
  2,639,056 ( 0.00%)          r
          .               }
          .           
          .               /// Execute `f` then unroll any bindings it creates.
    647,250 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    755,611 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
          .               where
          .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
          .               {
    175,440 ( 0.00%)          let snapshot = self.start_snapshot();
    283,197 ( 0.00%)          let r = f(&snapshot);
    840,888 ( 0.00%)          self.rollback_to("probe", snapshot);
    201,186 ( 0.00%)          r
          .               }
          .           
          .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
        396 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
        528 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
          .               where
          .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
          .               {
         88 ( 0.00%)          let snapshot = self.start_snapshot();
         44 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
         88 ( 0.00%)          if should_skip {
          .                       self.skip_leak_check.set(true);
          .                   }
        176 ( 0.00%)          let r = f(&snapshot);
        396 ( 0.00%)          self.rollback_to("probe", snapshot);
          .                   self.skip_leak_check.set(was_skip_leak_check);
        528 ( 0.00%)          r
          .               }
          .           
          .               /// Scan the constraints produced since `snapshot` began and returns:
          .               ///
          .               /// - `None` -- if none of them involve "region outlives" constraints
          .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
          .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
     52,728 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
          .                   &self,
          .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
          .               ) -> Option<bool> {
    105,456 ( 0.00%)          self.inner
          .                       .borrow_mut()
          .                       .unwrap_region_constraints()
          .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
     79,092 ( 0.00%)      }
          .           
          6 ( 0.00%)      pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
         12 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
          9 ( 0.00%)      }
          .           
      3,336 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
          .               where
          .                   T: at::ToTrace<'tcx>,
          .               {
          .                   let origin = &ObligationCause::dummy();
          .                   self.probe(|_| {
          .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
          .                           // Ignore obligations, since we are unrolling
          .                           // everything anyway.
          .                       })
          .                   })
      2,502 ( 0.00%)      }
          .           
     15,792 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
          .               where
          .                   T: at::ToTrace<'tcx>,
          .               {
          .                   let origin = &ObligationCause::dummy();
          .                   self.probe(|_| {
          .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
          .                           // Ignore obligations, since we are unrolling
          .                           // everything anyway.
          .                       })
          .                   })
     11,844 ( 0.00%)      }
          .           
    470,840 ( 0.00%)      #[instrument(skip(self), level = "debug")]
          .               pub fn sub_regions(
          .                   &self,
          .                   origin: SubregionOrigin<'tcx>,
          .                   a: ty::Region<'tcx>,
          .                   b: ty::Region<'tcx>,
          .               ) {
    423,756 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
          .               }
          .           
          .               /// Require that the region `r` be equal to one of the regions in
          .               /// the set `regions`.
          5 ( 0.00%)      #[instrument(skip(self), level = "debug")]
          .               pub fn member_constraint(
          .                   &self,
          .                   opaque_type_def_id: DefId,
          .                   definition_span: Span,
          .                   hidden_ty: Ty<'tcx>,
          .                   region: ty::Region<'tcx>,
          .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
          .               ) {
          5 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
          .                       opaque_type_def_id,
          .                       definition_span,
          .                       hidden_ty,
          .                       region,
          .                       in_regions,
          .                   );
          .               }
          .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
          .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
          .               /// actually requiring `a <: b`. This is of course a valid coercion,
          .               /// but it's not as flexible as `FnCtxt::coerce` would be.
          .               ///
          .               /// (We may refactor this in the future, but there are a number of
          .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
          .               /// records adjustments that are required on the HIR in order to perform
          .               /// the coercion, and we don't currently have a way to manage that.)
      1,950 ( 0.00%)      pub fn coerce_predicate(
          .                   &self,
          .                   cause: &ObligationCause<'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   predicate: ty::PolyCoercePredicate<'tcx>,
          .               ) -> Option<InferResult<'tcx, ()>> {
      1,300 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
          .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
          .                       a: p.a,
          .                       b: p.b,
          .                   });
      3,250 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
      2,600 ( 0.00%)      }
          .           
    136,716 ( 0.00%)      pub fn subtype_predicate(
          .                   &self,
          .                   cause: &ObligationCause<'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   predicate: ty::PolySubtypePredicate<'tcx>,
          .               ) -> Option<InferResult<'tcx, ()>> {
          .                   // Check for two unresolved inference variables, in which case we can
          .                   // make no progress. This is partly a micro-optimization, but it's
          .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
          .                   // earlier that they are sub-unified).
          .                   //
          .                   // Note that we can just skip the binders here because
          .                   // type variables can't (at present, at
          .                   // least) capture any of the things bound by this binder.
          .                   //
          .                   // Note that this sub here is not just for diagnostics - it has semantic
          .                   // effects as well.
     11,393 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     11,393 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
     73,684 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     15,274 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
          .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     15,274 ( 0.00%)                  return None;
          .                       }
          .                       _ => {}
          .                   }
          .           
          .                   Some(self.commit_if_ok(|_snapshot| {
      3,756 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
          .                           self.replace_bound_vars_with_placeholders(predicate);
          .           
      7,512 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
          .           
          .                       Ok(ok.unit())
          .                   }))
    102,537 ( 0.00%)      }
          .           
    157,272 ( 0.00%)      pub fn region_outlives_predicate(
          .                   &self,
          .                   cause: &traits::ObligationCause<'tcx>,
          .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
          .               ) -> UnitResult<'tcx> {
          .                   self.commit_if_ok(|_snapshot| {
          .                       let ty::OutlivesPredicate(r_a, r_b) =
          .                           self.replace_bound_vars_with_placeholders(predicate);
          .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
          .                           RelateRegionParamBound(cause.span)
          .                       });
    131,060 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
          .                       Ok(())
          .                   })
    104,848 ( 0.00%)      }
          .           
          .               /// Number of type variables created so far.
        221 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
          .                   self.inner.borrow_mut().type_variables().num_vars()
        442 ( 0.00%)      }
          .           
    106,518 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
    532,590 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
    159,777 ( 0.00%)      }
          .           
     90,976 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
    367,554 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
    136,464 ( 0.00%)      }
          .           
      5,486 ( 0.00%)      pub fn next_ty_var_in_universe(
          .                   &self,
          .                   origin: TypeVariableOrigin,
          .                   universe: ty::UniverseIndex,
          .               ) -> Ty<'tcx> {
     30,173 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      2,743 ( 0.00%)          self.tcx.mk_ty_var(vid)
      8,229 ( 0.00%)      }
          .           
          .               pub fn next_const_var(
          .                   &self,
          .                   ty: Ty<'tcx>,
          .                   origin: ConstVariableOrigin,
          .               ) -> &'tcx ty::Const<'tcx> {
          .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
          .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
          .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
          .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
          .                       origin,
          .                       val: ConstVariableValue::Unknown { universe: self.universe() },
          .                   })
          .               }
          .           
          .               fn next_int_var_id(&self) -> IntVid {
      1,660 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
          .               }
          .           
        996 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
          .                   self.tcx.mk_int_var(self.next_int_var_id())
      1,328 ( 0.00%)      }
          .           
          .               fn next_float_var_id(&self) -> FloatVid {
          .                   self.inner.borrow_mut().float_unification_table().new_key(None)
          .               }
          .           
          .               pub fn next_float_var(&self) -> Ty<'tcx> {
          .                   self.tcx.mk_float_var(self.next_float_var_id())
          .               }
          .           
          .               /// Creates a fresh region variable with the next available index.
          .               /// The variable will be created in the maximum universe created
          .               /// thus far, allowing it to name any region created thus far.
     57,072 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  1,313,980 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    114,144 ( 0.00%)      }
          .           
          .               /// Creates a fresh region variable with the next available index
          .               /// in the given universe; typically, you can use
          .               /// `next_region_var` and just use the maximal universe.
    560,988 ( 0.00%)      pub fn next_region_var_in_universe(
          .                   &self,
          .                   origin: RegionVariableOrigin,
          .                   universe: ty::UniverseIndex,
          .               ) -> ty::Region<'tcx> {
          .                   let region_var =
  3,646,422 ( 0.00%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  1,402,470 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
    841,482 ( 0.00%)      }
          .           
          .               /// Return the universe that the region `r` was created in.  For
          .               /// most regions (e.g., `'static`, named regions from the user,
          .               /// etc) this is the root universe U0. For inference variables or
          .               /// placeholders, however, it will return the universe which which
          .               /// they are associated.
     93,760 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
          .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    140,640 ( 0.00%)      }
          .           
          .               /// Number of region variables created so far.
     21,358 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
          .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
     32,037 ( 0.00%)      }
          .           
          .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    120,753 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
          .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    241,506 ( 0.00%)      }
          .           
          .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      1,973 ( 0.00%)      pub fn next_nll_region_var_in_universe(
          .                   &self,
          .                   origin: NllRegionVariableOrigin,
          .                   universe: ty::UniverseIndex,
          .               ) -> ty::Region<'tcx> {
     14,951 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      3,946 ( 0.00%)      }
          .           
    889,288 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    489,309 ( 0.00%)          match param.kind {
          .                       GenericParamDefKind::Lifetime => {
          .                           // Create a region inference variable for the given
          .                           // region parameter definition.
     33,248 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
          .                       }
          .                       GenericParamDefKind::Type { .. } => {
          .                           // Create a type inference variable for the given
          .                           // type parameter definition. The substitutions are
          .                           // for actual parameters that may be referred to by
          .                           // the default of this type parameter, if it exists.
          .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
          .                           // used in a path such as `Foo::<T, U>::new()` will
          .                           // use an inference variable for `C` with `[T, U]`
          .                           // as the substitutions for the default, `(T, U)`.
    309,236 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
          .                               self.universe(),
    386,545 ( 0.00%)                      TypeVariableOrigin {
          .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
     77,309 ( 0.00%)                              param.name,
     77,309 ( 0.00%)                              Some(param.def_id),
          .                                   ),
          .                                   span,
          .                               },
          .                           );
          .           
     77,309 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
          .                       }
          .                       GenericParamDefKind::Const { .. } => {
          .                           let origin = ConstVariableOrigin {
          .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
          .                                   param.name,
          .                                   param.def_id,
          .                               ),
          .                               span,
          .                           };
          .                           let const_var_id =
      6,644 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
          .                                   origin,
          .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
          .                               });
        604 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
          .                       }
          .                   }
      4,832 ( 0.00%)      }
          .           
          .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
          .               /// type/region parameter to a fresh inference variable.
    170,346 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
    848,217 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
    113,564 ( 0.00%)      }
          .           
          .               /// Returns `true` if errors have been reported since this infcx was
          .               /// created. This is sometimes used as a heuristic to skip
          .               /// reporting errors that often occur as a result of earlier
          .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
          .               /// inference variables, regionck errors).
      5,610 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
          .                   debug!(
          .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
          .                        tainted_by_errors_flag={})",
          .                       self.tcx.sess.err_count(),
          .                       self.err_count_on_creation,
          .                       self.tainted_by_errors_flag.get()
          .                   );
          .           
    153,879 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
          .                       return true; // errors reported since this infcx was made
          .                   }
          .                   self.tainted_by_errors_flag.get()
      8,415 ( 0.00%)      }
          .           
          .               /// Set the "tainted by errors" flag to true. We call this when we
          .               /// observe an error from a prior pass.
          .               pub fn set_tainted_by_errors(&self) {
          .                   debug!("set_tainted_by_errors()");
          .                   self.tainted_by_errors_flag.set(true)
          .               }
          .           
          .               /// Process the region constraints and return any any errors that
          .               /// result. After this, no more unification operations should be
          .               /// done -- or the compiler will panic -- but it is legal to use
          .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
    156,618 ( 0.00%)      pub fn resolve_regions(
          .                   &self,
          .                   region_context: DefId,
          .                   outlives_env: &OutlivesEnvironment<'tcx>,
          .                   mode: RegionckMode,
          .               ) -> Vec<RegionResolutionError<'tcx>> {
    425,106 ( 0.00%)          let (var_infos, data) = {
          .                       let mut inner = self.inner.borrow_mut();
          .                       let inner = &mut *inner;
     22,374 ( 0.00%)              assert!(
     67,122 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
          .                           "region_obligations not empty: {:#?}",
          .                           inner.region_obligations
          .                       );
          .                       inner
          .                           .region_constraint_storage
          .                           .take()
          .                           .expect("regions already resolved")
          .                           .with_log(&mut inner.undo_log)
          .                           .into_infos_and_data()
     22,374 ( 0.00%)          };
          .           
          .                   let region_rels =
     22,374 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
          .           
    201,366 ( 0.00%)          let (lexical_region_resolutions, errors) =
    536,976 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
          .           
     89,496 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
     22,374 ( 0.00%)          assert!(old_value.is_none());
          .           
          .                   errors
    201,366 ( 0.00%)      }
          .           
          .               /// Process the region constraints and report any errors that
          .               /// result. After this, no more unification operations should be
          .               /// done -- or the compiler will panic -- but it is legal to use
          .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
    223,740 ( 0.00%)      pub fn resolve_regions_and_report_errors(
          .                   &self,
          .                   region_context: DefId,
          .                   outlives_env: &OutlivesEnvironment<'tcx>,
          .                   mode: RegionckMode,
          .               ) {
     44,748 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
          .           
     67,122 ( 0.00%)          if !self.is_tainted_by_errors() {
          .                       // As a heuristic, just skip reporting region errors
          .                       // altogether if other errors have been reported while
          .                       // this infcx was in use.  This is totally hokey but
          .                       // otherwise we have a hard time separating legit region
          .                       // errors from silly ones.
     44,748 ( 0.00%)              self.report_region_errors(&errors);
          .                   }
    111,870 ( 0.00%)      }
          .           
          .               /// Obtains (and clears) the current set of region
          .               /// constraints. The inference context is still usable: further
          .               /// unifications will simply add new constraints.
          .               ///
          .               /// This method is not meant to be used with normal lexical region
          .               /// resolution. Rather, it is used in the NLL mode as a kind of
          .               /// interim hack: basically we run normal type-check and generate
          .               /// region constraints as normal, but then we take them and
          .               /// translate them into the form that the NLL solver
          .               /// understands. See the NLL module for mode details.
          6 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
          2 ( 0.00%)          assert!(
          .                       self.inner.borrow().region_obligations.is_empty(),
          .                       "region_obligations not empty: {:#?}",
          .                       self.inner.borrow().region_obligations
          .                   );
          .           
          8 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
         10 ( 0.00%)      }
          .           
          .               /// Gives temporary access to the region constraint data.
          .               pub fn with_region_constraints<R>(
          .                   &self,
          .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
          .               ) -> R {
          .                   let mut inner = self.inner.borrow_mut();
     37,824 ( 0.00%)          op(inner.unwrap_region_constraints().data())
          .               }
          .           
          .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
          .                   let mut inner = self.inner.borrow_mut();
          .                   let inner = &mut *inner;
          .                   inner
          .                       .region_constraint_storage
          .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
          .                       .var_origin(vid)
          .               }
          .           
          .               /// Takes ownership of the list of variable regions. This implies
          .               /// that all the region constraints have already been taken, and
          .               /// hence that `resolve_regions_and_report_errors` can never be
          .               /// called. This is used only during NLL processing to "hand off" ownership
          .               /// of the set of region variables into the NLL region context.
     13,040 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
          .                   let mut inner = self.inner.borrow_mut();
     49,552 ( 0.00%)          let (var_infos, data) = inner
          .                       .region_constraint_storage
          .                       .take()
          .                       .expect("regions already resolved")
          .                       .with_log(&mut inner.undo_log)
      2,608 ( 0.00%)              .into_infos_and_data();
      2,608 ( 0.00%)          assert!(data.is_empty());
          .                   var_infos
     20,864 ( 0.00%)      }
          .           
          .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
          .                   self.resolve_vars_if_possible(t).to_string()
          .               }
          .           
          .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
          .               /// universe index of `TyVar(vid)`.
     39,186 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
          .                   use self::type_variable::TypeVariableValue;
          .           
    117,558 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
          .                       TypeVariableValue::Known { value } => Ok(value),
          .                       TypeVariableValue::Unknown { universe } => Err(universe),
          .                   }
    137,151 ( 0.00%)      }
          .           
          .               /// Resolve any type variables found in `value` -- but only one
          .               /// level.  So, if the variable `?X` is bound to some type
          .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
          .               /// itself be bound to a type).
          .               ///
          .               /// Useful when you only need to inspect the outermost level of
          .               /// the type and don't care about nested types (or perhaps you
          .               /// will be resolving them as well, e.g. in a loop).
          .               pub fn shallow_resolve<T>(&self, value: T) -> T
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  1,023,559 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
          .               }
          .           
     72,884 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
          .                   self.inner.borrow_mut().type_variables().root_var(var)
    109,326 ( 0.00%)      }
          .           
          .               /// Where possible, replaces type/const variables in
          .               /// `value` with their final value. Note that region variables
          .               /// are unaffected. If a type/const variable has not been unified, it
          .               /// is left as is. This is an idempotent operation that does
          .               /// not affect inference state in any way and so you can do it
          .               /// at will.
      8,644 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  1,028,218 ( 0.00%)          if !value.needs_infer() {
    629,435 ( 0.00%)              return value; // Avoid duplicated subst-folding.
          .                   }
  1,142,716 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  1,410,938 ( 0.00%)          value.fold_with(&mut r)
     10,497 ( 0.00%)      }
          .           
          .               /// Returns the first unresolved variable contained in `T`. In the
          .               /// process of visiting `T`, this will resolve (where possible)
          .               /// type variables in `T`, but it never constructs the final,
          .               /// resolved type, so it's more efficient than
          .               /// `resolve_vars_if_possible()`.
          .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
          .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
          .                   expected: &'tcx ty::Const<'tcx>,
          .                   actual: &'tcx ty::Const<'tcx>,
          .                   err: TypeError<'tcx>,
          .               ) -> DiagnosticBuilder<'tcx> {
          .                   let trace = TypeTrace::consts(cause, true, expected, actual);
          .                   self.report_and_explain_type_error(trace, &err)
          .               }
          .           
     85,212 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
          .                   &self,
          .                   span: Span,
          .                   lbrct: LateBoundRegionConversionTime,
          .                   value: ty::Binder<'tcx, T>,
          .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   let fld_r =
    547,418 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
          .                   let fld_t = |_| {
          .                       self.next_ty_var(TypeVariableOrigin {
          .                           kind: TypeVariableOriginKind::MiscVariable,
          .                           span,
          .                       })
          .                   };
          .                   let fld_c = |_, ty| {
          .                       self.next_const_var(
          .                           ty,
          .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
          .                       )
          .                   };
    552,804 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
     56,808 ( 0.00%)      }
          .           
          .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      2,368 ( 0.00%)      pub fn verify_generic_bound(
          .                   &self,
          .                   origin: SubregionOrigin<'tcx>,
          .                   kind: GenericKind<'tcx>,
          .                   a: ty::Region<'tcx>,
          .                   bound: VerifyBound<'tcx>,
          .               ) {
          .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
          .           
        888 ( 0.00%)          self.inner
          .                       .borrow_mut()
          .                       .unwrap_region_constraints()
      5,032 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
      2,072 ( 0.00%)      }
          .           
          .               /// Obtains the latest type of the given closure; this may be a
          .               /// closure in the current function, in which case its
          .               /// `ClosureKind` may not yet be known.
      6,716 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
     13,432 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
          .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
     10,074 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
          .               }
          .           
          .               /// Clears the selection, evaluation, and projection caches. This is useful when
          .               /// repeatedly attempting to select an `Obligation` while changing only
          .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
          .               pub fn clear_caches(&self) {
          .                   self.selection_cache.clear();
          .                   self.evaluation_cache.clear();
          .                   self.inner.borrow_mut().projection_cache().clear();
          .               }
          .           
          .               pub fn universe(&self) -> ty::UniverseIndex {
  1,772,152 ( 0.00%)          self.universe.get()
    594,494 ( 0.00%)      }
          .           
          .               /// Creates and return a fresh universe that extends all previous
          .               /// universes. Updates `self.universe` to that new universe.
        780 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
        938 ( 0.00%)          let u = self.universe.get().next_universe();
          .                   self.universe.set(u);
          .                   u
        780 ( 0.00%)      }
          .           
          .               /// Resolves and evaluates a constant.
          .               ///
          .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
          .               /// substitutions and environment are used to resolve the constant. Alternatively if the
          .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
          .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
          .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
          .                   // variables, thus we don't need to substitute back the original values.
          .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
          .               }
          .           
          .               /// If `typ` is a type variable of some kind, resolve it one level
          .               /// (but do not resolve types found in the result). If `typ` is
          .               /// not a type variable, just return it unmodified.
          .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
 12,523,672 ( 0.01%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  6,665,200 ( 0.01%)          match *typ.kind() {
          .                       ty::Infer(ty::TyVar(v)) => {
          .                           // Not entirely obvious: if `typ` is a type variable,
          .                           // it can be resolved to an int/float variable, which
          .                           // can then be recursively resolved, hence the
          .                           // recursion. Note though that we prevent type
          .                           // variables from unifying to other type variables
          .                           // directly (though they may be embedded
          .                           // structurally), and we prevent cycles in any case,
          .                           // so this recursion should always be of very limited
          .                           // depth.
          .                           //
          .                           // Note: if these two lines are combined into one we get
          .                           // dynamic borrow errors on `self.inner`.
  3,485,628 ( 0.00%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
          .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
          .                       }
          .           
     30,048 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
          .                           .inner
          .                           .borrow_mut()
          .                           .int_unification_table()
          .                           .probe_value(v)
      8,994 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
          .                           .unwrap_or(typ),
          .           
          .                       ty::Infer(ty::FloatVar(v)) => self
          .                           .inner
          .                           .borrow_mut()
          .                           .float_unification_table()
          .                           .probe_value(v)
          .                           .map(|v| v.to_type(self.tcx))
          .                           .unwrap_or(typ),
          .           
          .                       _ => typ,
          .                   }
 14,089,131 ( 0.01%)      }
          .           
          .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
          .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
          .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
          .               ///
          .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
          .               /// inlined, despite being large, because it has only two call sites that
          .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
          .               #[inline(always)]
          .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
          .                   match infer_var {
          .                       TyOrConstInferVar::Ty(v) => {
          .                           use self::type_variable::TypeVariableValue;
          .           
          .                           // If `inlined_probe` returns a `Known` value, it never equals
          .                           // `ty::Infer(ty::TyVar(v))`.
175,381,690 ( 0.14%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
          .                               TypeVariableValue::Unknown { .. } => false,
          .                               TypeVariableValue::Known { .. } => true,
          .                           }
          .                       }
          .           
          .                       TyOrConstInferVar::TyInt(v) => {
          .                           // If `inlined_probe_value` returns a value it's always a
          .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
          .                           // `ty::Infer(_)`.
     62,166 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
          .                       }
          .           
          .                       TyOrConstInferVar::TyFloat(v) => {
          .                           // If `probe_value` returns a value it's always a
          .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
          .                           //
          .                           // Not `inlined_probe_value(v)` because this call site is colder.
          .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
          .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
          .               Const(ConstVid<'tcx>),
          .           }
          .           
          .           impl<'tcx> TyOrConstInferVar<'tcx> {
          .               /// Tries to extract an inference variable from a type or a constant, returns `None`
          .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
          .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
     40,050 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
          .                   match arg.unpack() {
          .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
          .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
          .                       GenericArgKind::Lifetime(_) => None,
          .                   }
     40,050 ( 0.00%)      }
          .           
          .               /// Tries to extract an inference variable from a type, returns `None`
          .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     15,258 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
    497,003 ( 0.00%)          match *ty.kind() {
    109,972 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        594 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
          .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
          .                       _ => None,
          .                   }
     15,258 ( 0.00%)      }
          .           
          .               /// Tries to extract an inference variable from a constant, returns `None`
          .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
          .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
          .                   match ct.val {
          .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
          .                       _ => None,
          .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
          .           }
          .           
          .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
          .                   self.infcx.tcx
          .               }
          .           
          .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  2,395,473 ( 0.00%)          self.infcx.shallow_resolve_ty(ty)
          .               }
          .           
      4,200 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      3,556 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      3,640 ( 0.00%)              self.infcx
          .                           .inner
          .                           .borrow_mut()
          .                           .const_unification_table()
      2,184 ( 0.00%)                  .probe_value(*vid)
          .                           .val
          .                           .known()
          .                           .unwrap_or(ct)
          .                   } else {
          .                       ct
          .                   }
      5,250 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TypeTrace<'tcx> {
          .               pub fn span(&self) -> Span {
      2,048 ( 0.00%)          self.cause.span
          .               }
          .           
          .               pub fn types(
          .                   cause: &ObligationCause<'tcx>,
          .                   a_is_expected: bool,
          .                   a: Ty<'tcx>,
          .                   b: Ty<'tcx>,
          .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
          .                   b: &'tcx ty::Const<'tcx>,
          .               ) -> TypeTrace<'tcx> {
          .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
          .               }
          .           }
          .           
          .           impl<'tcx> SubregionOrigin<'tcx> {
          .               pub fn span(&self) -> Span {
      5,120 ( 0.00%)          match *self {
      1,024 ( 0.00%)              Subtype(ref a) => a.span(),
          .                       RelateObjectBound(a) => a,
          .                       RelateParamBound(a, ..) => a,
          .                       RelateRegionParamBound(a) => a,
          .                       Reborrow(a) => a,
          .                       ReborrowUpvar(a, _) => a,
          .                       DataBorrowed(_, a) => a,
          .                       ReferenceOutlivesReferent(_, a) => a,
          .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
          .                       CompareImplTypeObligation { span, .. } => span,
          .                   }
          .               }
          .           
          .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
          .               where
          .                   F: FnOnce() -> Self,
          .               {
    149,772 ( 0.00%)          match *cause.code() {
     15,890 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
     79,450 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
          .                       }
          .           
          .                       traits::ObligationCauseCode::CompareImplMethodObligation {
          .                           impl_item_def_id,
          .                           trait_item_def_id,
          .                       } => SubregionOrigin::CompareImplMethodObligation {
          .                           span: cause.span,
          .                           impl_item_def_id,
-- line 1836 ----------------------------------------

114,374,177 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 154 ----------------------------------------
         .           /// Value of a unification key. We implement Tarjan's union-find
         .           /// algorithm: when two keys are unified, one of them is converted
         .           /// into a "redirect" pointing at the other. These redirects form a
         .           /// DAG: the roots of the DAG (nodes that are not redirected) are each
         .           /// associated with a value of type `V` and a rank. The rank is used
         .           /// to keep the DAG relatively balanced, which helps keep the running
         .           /// time of the algorithm under control. For more information, see
         .           /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.
    88,255 ( 0.00%)  #[derive(PartialEq, Clone, Debug)]
         .           pub struct VarValue<K: UnifyKey> {
   147,224 ( 0.00%)      parent: K,       // if equal to self, this is a root
    11,852 ( 0.00%)      value: K::Value, // value assigned (only relevant to root)
   141,352 ( 0.00%)      rank: u32,       // max depth (only relevant to root)
         .           }
         .           
         .           /// Table of unification keys and their values. You must define a key type K
         .           /// that implements the `UnifyKey` trait. Unification tables can be used in two-modes:
         .           ///
         .           /// - in-place (`UnificationTable<InPlace<K>>` or `InPlaceUnificationTable<K>`):
         .           ///   - This is the standard mutable mode, where the array is modified
         .           ///     in place.
         .           ///   - To do backtracking, you can employ the `snapshot` and `rollback_to`
         .           ///     methods.
         .           /// - persistent (`UnificationTable<Persistent<K>>` or `PersistentUnificationTable<K>`):
         .           ///   - In this mode, we use a persistent vector to store the data, so that
         .           ///     cloning the table is an O(1) operation.
         .           ///   - This implies that ordinary operations are quite a bit slower though.
         .           ///   - Requires the `persistent` feature be selected in your Cargo.toml file.
   367,120 ( 0.00%)  #[derive(Clone, Debug, Default)]
         .           pub struct UnificationTable<S: UnificationStoreBase> {
         .               /// Indicates the current value of each key.
         .               values: S,
         .           }
         .           
         .           pub type UnificationStorage<K> = Vec<VarValue<K>>;
         .           pub type UnificationTableStorage<K> = UnificationTable<InPlace<K, UnificationStorage<K>, ()>>;
         .           
-- line 190 ----------------------------------------
-- line 215 ----------------------------------------
         .               }
         .           
         .               fn new(parent: K, value: K::Value, rank: u32) -> VarValue<K> {
         .                   VarValue {
         .                       parent: parent, // this is a root
         .                       value: value,
         .                       rank: rank,
         .                   }
   564,755 ( 0.00%)      }
         .           
         .               fn redirect(&mut self, to: K) {
    96,009 ( 0.00%)          self.parent = to;
         .               }
         .           
         .               fn root(&mut self, rank: u32, value: K::Value) {
    86,920 ( 0.00%)          self.rank = rank;
    42,516 ( 0.00%)          self.value = value;
         .               }
         .           
         .               fn parent(&self, self_key: K) -> Option<K> {
 5,161,332 ( 0.00%)          self.if_not_self(self.parent, self_key)
         .               }
         .           
         .               fn if_not_self(&self, key: K, self_key: K) -> Option<K> {
         .                   if key == self_key {
         .                       None
         .                   } else {
         .                       Some(key)
         .                   }
-- line 243 ----------------------------------------
-- line 253 ----------------------------------------
         .                   &'a mut self,
         .                   undo_log: L,
         .               ) -> UnificationTable<InPlace<K, &'a mut UnificationStorage<K>, L>>
         .               where
         .                   L: UndoLogs<sv::UndoLog<Delegate<K>>>,
         .               {
         .                   UnificationTable {
         .                       values: InPlace {
         4 ( 0.00%)                  values: self.values.values.with_log(undo_log),
         .                       },
         .                   }
         .               }
         .           }
         .           
         .           // We can't use V:LatticeValue, much as I would like to,
         .           // because frequently the pattern is that V=Option<U> for some
         .           // other type parameter U, and we have no way to say
-- line 269 ----------------------------------------
-- line 311 ----------------------------------------
         .               pub fn len(&self) -> usize {
         .                   self.values.len()
         .               }
         .           }
         .           
         .           impl<S: UnificationStoreMut> UnificationTable<S> {
         .               /// Starts a new snapshot. Each snapshot must be either
         .               /// Creates a fresh key with the given value.
   871,588 ( 0.00%)      pub fn new_key(&mut self, value: S::Value) -> S::Key {
         .                   let len = self.values.len();
 1,424,234 ( 0.00%)          let key: S::Key = UnifyKey::from_index(len as u32);
         .                   self.values.push(VarValue::new_var(key, value));
   570,890 ( 0.00%)          debug!("{}: created new key: {:?}", S::tag(), key);
         .                   key
 1,303,910 ( 0.00%)      }
         .           
         .               /// Reserve memory for `num_new_keys` to be created. Does not
         .               /// actually create the new keys; you must then invoke `new_key`.
         .               pub fn reserve(&mut self, num_new_keys: usize) {
         .                   self.values.reserve(num_new_keys);
         .               }
         .           
         .               /// Clears all unifications that have been performed, resetting to
         .               /// the initial state. The values of each variable are given by
         .               /// the closure.
         .               pub fn reset_unifications(&mut self, mut value: impl FnMut(S::Key) -> S::Value) {
         .                   self.values.reset_unifications(|i| {
        59 ( 0.00%)              let key = UnifyKey::from_index(i as u32);
         .                       let value = value(key);
         .                       VarValue::new_var(key, value)
         .                   });
         .               }
         .           
         .               /// Obtains the current value for a particular key.
         .               /// Not for end-users; they can use `probe_value`.
         .               fn value(&self, key: S::Key) -> &VarValue<S::Key> {
26,333,280 ( 0.02%)          &self.values[key.index() as usize]
         .               }
         .           
         .               /// Find the root node for `vid`. This uses the standard
         .               /// union-find algorithm with path compression:
         .               /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.
         .               ///
         .               /// NB. This is a building-block operation and you would probably
         .               /// prefer to call `probe` below.
         .               ///
         .               /// This is an always-inlined version of this function for the hot
         .               /// callsites. `uninlined_get_root_key` is the never-inlined version.
         .               #[inline(always)]
         .               fn inlined_get_root_key(&mut self, vid: S::Key) -> S::Key {
         .                   let redirect = {
95,747,618 ( 0.07%)              match self.value(vid).parent(vid) {
         .                           None => return vid,
         .                           Some(redirect) => redirect,
         .                       }
         .                   };
         .           
34,428,112 ( 0.03%)          let root_key: S::Key = self.uninlined_get_root_key(redirect);
   124,208 ( 0.00%)          if root_key != redirect {
         .                       // Path compression
     3,210 ( 0.00%)              self.update_value(vid, |value| value.parent = root_key);
         .                   }
         .           
         .                   root_key
         .               }
         .           
         .               // This is a never-inlined version of this function for cold callsites.
         .               // 'inlined_get_root_key` is the always-inlined version.
         .               #[inline(never)]
86,870,360 ( 0.07%)      fn uninlined_get_root_key(&mut self, vid: S::Key) -> S::Key {
         .                   self.inlined_get_root_key(vid)
86,324,084 ( 0.07%)      }
         .           
     8,560 ( 0.00%)      fn update_value<OP>(&mut self, key: S::Key, op: OP)
         .               where
         .                   OP: FnOnce(&mut VarValue<S::Key>),
         .               {
   467,247 ( 0.00%)          self.values.update(key.index() as usize, op);
   260,801 ( 0.00%)          debug!("Updated variable {:?} to {:?}", key, self.value(key));
     5,350 ( 0.00%)      }
         .           
         .               /// Either redirects `node_a` to `node_b` or vice versa, depending
         .               /// on the relative rank. The value associated with the new root
         .               /// will be `new_value`.
         .               ///
         .               /// NB: This is the "union" operation of "union-find". It is
         .               /// really more of a building block. If the values associated with
         .               /// your key are non-trivial, you would probably prefer to call
         .               /// `unify_var_var` below.
         .               fn unify_roots(&mut self, key_a: S::Key, key_b: S::Key, new_value: S::Value) {
    55,114 ( 0.00%)          debug!("unify(key_a={:?}, key_b={:?})", key_a, key_b);
         .           
    81,484 ( 0.00%)          let rank_a = self.value(key_a).rank;
   246,772 ( 0.00%)          let rank_b = self.value(key_b).rank;
         .                   if let Some((new_root, redirected)) = S::Key::order_roots(
   149,196 ( 0.00%)              key_a,
         .                       &self.value(key_a).value,
   149,196 ( 0.00%)              key_b,
         .                       &self.value(key_b).value,
         .                   ) {
         .                       // compute the new rank for the new root that they chose;
         .                       // this may not be the optimal choice.
         .                       let new_rank = if new_root == key_a {
         .                           debug_assert!(redirected == key_b);
         .                           if rank_a > rank_b {
         .                               rank_a
-- line 416 ----------------------------------------
-- line 422 ----------------------------------------
         .                           debug_assert!(redirected == key_a);
         .                           if rank_b > rank_a {
         .                               rank_b
         .                           } else {
         .                               rank_a + 1
         .                           }
         .                       };
         .                       self.redirect_root(new_rank, redirected, new_root, new_value);
   110,228 ( 0.00%)          } else if rank_a > rank_b {
         .                       // a has greater rank, so a should become b's parent,
         .                       // i.e., b should redirect to a.
    55,244 ( 0.00%)              self.redirect_root(rank_a, key_b, key_a, new_value);
    37,882 ( 0.00%)          } else if rank_a < rank_b {
         .                       // b has greater rank, so a should redirect to b.
    25,801 ( 0.00%)              self.redirect_root(rank_b, key_a, key_b, new_value);
         .                   } else {
         .                       // If equal, redirect one to the other and increment the
         .                       // other's rank.
   129,098 ( 0.00%)              self.redirect_root(rank_a + 1, key_a, key_b, new_value);
         .                   }
         .               }
         .           
         .               /// Internal method to redirect `old_root_key` (which is currently
         .               /// a root) to a child of `new_root_key` (which will remain a
         .               /// root). The rank and value of `new_root_key` will be updated to
         .               /// `new_rank` and `new_value` respectively.
   685,904 ( 0.00%)      fn redirect_root(
         .                   &mut self,
         .                   new_rank: u32,
         .                   old_root_key: S::Key,
         .                   new_root_key: S::Key,
         .                   new_value: S::Value,
         .               ) {
         .                   self.update_value(old_root_key, |old_root_value| {
         .                       old_root_value.redirect(new_root_key);
         .                   });
       135 ( 0.00%)          self.update_value(new_root_key, |new_root_value| {
     5,382 ( 0.00%)              new_root_value.root(new_rank, new_value);
         .                   });
   373,200 ( 0.00%)      }
         .           }
         .           
         .           /// ////////////////////////////////////////////////////////////////////////
         .           /// Public API
         .           
         .           impl<S, K, V> UnificationTable<S>
         .           where
         .               S: UnificationStoreMut<Key = K, Value = V>,
         .               K: UnifyKey<Value = V>,
         .               V: UnifyValue,
         .           {
         .               /// Unions two keys without the possibility of failure; only
         .               /// applicable when unify values use `NoError` as their error
         .               /// type.
   530,545 ( 0.00%)      pub fn union<K1, K2>(&mut self, a_id: K1, b_id: K2)
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .                   V: UnifyValue<Error = NoError>,
         .               {
         .                   self.unify_var_var(a_id, b_id).unwrap();
   468,940 ( 0.00%)      }
         .           
         .               /// Unions a key and a value without the possibility of failure;
         .               /// only applicable when unify values use `NoError` as their error
         .               /// type.
 1,276,525 ( 0.00%)      pub fn union_value<K1>(&mut self, id: K1, value: V)
         .               where
         .                   K1: Into<K>,
         .                   V: UnifyValue<Error = NoError>,
         .               {
         .                   self.unify_var_value(id, value).unwrap();
   999,700 ( 0.00%)      }
         .           
         .               /// Given two keys, indicates whether they have been unioned together.
         .               pub fn unioned<K1, K2>(&mut self, a_id: K1, b_id: K2) -> bool
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .               {
         .                   self.find(a_id) == self.find(b_id)
-- line 502 ----------------------------------------
-- line 503 ----------------------------------------
         .               }
         .           
         .               /// Given a key, returns the (current) root key.
         .               pub fn find<K1>(&mut self, id: K1) -> K
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let id = id.into();
   796,955 ( 0.00%)          self.uninlined_get_root_key(id)
         .               }
         .           
         .               /// Unions together two variables, merging their values. If
         .               /// merging the values fails, the error is propagated and this
         .               /// method has no effect.
       243 ( 0.00%)      pub fn unify_var_var<K1, K2>(&mut self, a_id: K1, b_id: K2) -> Result<(), V::Error>
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .               {
         .                   let a_id = a_id.into();
         .                   let b_id = b_id.into();
         .           
   187,962 ( 0.00%)          let root_a = self.uninlined_get_root_key(a_id);
   184,950 ( 0.00%)          let root_b = self.uninlined_get_root_key(b_id);
         .           
    23,927 ( 0.00%)          if root_a == root_b {
         .                       return Ok(());
         .                   }
         .           
   297,624 ( 0.00%)          let combined = V::unify_values(&self.value(root_a).value, &self.value(root_b).value)?;
         .           
         .                   Ok(self.unify_roots(root_a, root_b, combined))
       270 ( 0.00%)      }
         .           
         .               /// Sets the value of the key `a_id` to `b`, attempting to merge
         .               /// with the previous value.
    32,672 ( 0.00%)      pub fn unify_var_value<K1>(&mut self, a_id: K1, b: V) -> Result<(), V::Error>
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let a_id = a_id.into();
   210,701 ( 0.00%)          let root_a = self.uninlined_get_root_key(a_id);
   460,793 ( 0.00%)          let value = V::unify_values(&self.value(root_a).value, &b)?;
   303,174 ( 0.00%)          self.update_value(root_a, |node| node.value = value);
         .                   Ok(())
    30,161 ( 0.00%)      }
         .           
         .               /// Returns the current value for the given key. If the key has
         .               /// been union'd, this will give the value from the current root.
    92,288 ( 0.00%)      pub fn probe_value<K1>(&mut self, id: K1) -> V
         .               where
         .                   K1: Into<K>,
         .               {
         .                   self.inlined_probe_value(id)
    87,704 ( 0.00%)      }
         .           
         .               // An always-inlined version of `probe_value`, for hot callsites.
         .               #[inline(always)]
         .               pub fn inlined_probe_value<K1>(&mut self, id: K1) -> V
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let id = id.into();
         .                   let id = self.inlined_get_root_key(id);
    47,789 ( 0.00%)          self.value(id).value.clone()
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           
         .           impl UnifyValue for () {
         .               type Error = NoError;
         .           
         .               fn unify_values(_: &(), _: &()) -> Result<(), NoError> {
         .                   Ok(())
    35,960 ( 0.00%)      }
         .           }
         .           
         .           impl<V: UnifyValue> UnifyValue for Option<V> {
         .               type Error = V::Error;
         .           
         .               fn unify_values(a: &Option<V>, b: &Option<V>) -> Result<Self, V::Error> {
    17,670 ( 0.00%)          match (a, b) {
         .                       (&None, &None) => Ok(None),
         .                       (&Some(ref v), &None) | (&None, &Some(ref v)) => Ok(Some(v.clone())),
         .                       (&Some(ref a), &Some(ref b)) => match V::unify_values(a, b) {
         .                           Ok(v) => Ok(Some(v)),
         .                           Err(err) => Err(err),
         .                       },
         .                   }
         .               }
-- line 593 ----------------------------------------

23,610,344 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir                   

-- line 33 ----------------------------------------
          .           
          .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
          .               /// Note that we include both the `ParamEnv` and the `Predicate`,
          .               /// as the `ParamEnv` can influence whether fulfillment succeeds
          .               /// or fails.
          .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
          .           
          .               fn as_cache_key(&self) -> Self::CacheKey {
  1,417,617 ( 0.00%)          self.obligation.param_env.and(self.obligation.predicate)
          .               }
          .           }
          .           
          .           /// The fulfillment context is used to drive trait resolution. It
          .           /// consists of a list of obligations that must be (eventually)
          .           /// satisfied. The job is to track which are satisfied, which yielded
          .           /// errors, and which are still pending. At any point, users can call
          .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 79 ----------------------------------------
          .               // outside of any snapshot, so any use of it inside a snapshot
          .               // will lead to trouble and therefore is checked against, but
          .               // other fulfillment contexts sometimes do live inside of
          .               // a snapshot (they don't *straddle* a snapshot, so there
          .               // is no trouble there).
          .               usable_in_snapshot: bool,
          .           }
          .           
         80 ( 0.00%)  #[derive(Clone, Debug)]
          .           pub struct PendingPredicateObligation<'tcx> {
          .               pub obligation: PredicateObligation<'tcx>,
          .               // This is far more often read than modified, meaning that we
          .               // should mostly optimize for reading speed, while modifying is not as relevant.
          .               //
          .               // For whatever reason using a boxed slice is slower than using a `Vec` here.
          .               pub stalled_on: Vec<TyOrConstInferVar<'tcx>>,
          .           }
          .           
          .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
          .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
          .           static_assert_size!(PendingPredicateObligation<'_>, 72);
          .           
          .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
          .               /// Creates a new fulfillment context.
     21,946 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
    297,296 ( 0.00%)          FulfillmentContext {
     35,862 ( 0.00%)              predicates: ObligationForest::new(),
          .                       relationships: FxHashMap::default(),
          .                       register_region_obligations: true,
          .                       usable_in_snapshot: false,
          .                   }
     21,946 ( 0.00%)      }
          .           
          .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
        462 ( 0.00%)          FulfillmentContext {
        154 ( 0.00%)              predicates: ObligationForest::new(),
          .                       relationships: FxHashMap::default(),
          .                       register_region_obligations: true,
          .                       usable_in_snapshot: true,
          .                   }
          .               }
          .           
          .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
     61,352 ( 0.00%)          FulfillmentContext {
     15,338 ( 0.00%)              predicates: ObligationForest::new(),
          .                       relationships: FxHashMap::default(),
          .                       register_region_obligations: false,
          .                       usable_in_snapshot: false,
          .                   }
          .               }
          .           
          .               /// Attempts to select obligations using `selcx`.
          .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
    291,332 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
          .                   let _enter = span.enter();
          .           
          .                   let mut errors = Vec::new();
          .           
          .                   loop {
          .                       debug!("select: starting another iteration");
          .           
          .                       // Process pending obligations.
          .                       let outcome: Outcome<_, _> =
  1,304,975 ( 0.00%)                  self.predicates.process_obligations(&mut FulfillProcessor {
          .                               selcx,
    186,425 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
          .                           });
          .                       debug!("select: outcome={:#?}", outcome);
          .           
          .                       // FIXME: if we kept the original cache key, we could mark projection
          .                       // obligations as complete for the projection cache here.
          .           
          .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
          .           
          .                       // If nothing new was added, no need to keep looping.
    372,850 ( 0.00%)              if outcome.stalled {
          .                           break;
          .                       }
          .                   }
          .           
          .                   debug!(
          .                       "select({} predicates remaining, {} errors) done",
          .                       self.predicates.len(),
          .                       errors.len()
-- line 162 ----------------------------------------
-- line 169 ----------------------------------------
          .           impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {
          .               /// "Normalize" a projection type `<SomeType as SomeTrait>::X` by
          .               /// creating a fresh type variable `$0` as well as a projection
          .               /// predicate `<SomeType as SomeTrait>::X == $0`. When the
          .               /// inference engine runs, it will attempt to find an impl of
          .               /// `SomeTrait` or a where-clause that lets us unify `$0` with
          .               /// something concrete. If this fails, we'll unify `$0` with
          .               /// `projection_ty` again.
      3,388 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, infcx, param_env, cause))]
          .               fn normalize_projection_type(
          .                   &mut self,
          .                   infcx: &InferCtxt<'_, 'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   projection_ty: ty::ProjectionTy<'tcx>,
          .                   cause: ObligationCause<'tcx>,
          .               ) -> Ty<'tcx> {
          .                   debug_assert!(!projection_ty.has_escaping_bound_vars());
          .           
          .                   // FIXME(#20304) -- cache
          .           
          .                   let mut selcx = SelectionContext::new(infcx);
          .                   let mut obligations = vec![];
      1,386 ( 0.00%)          let normalized_ty = project::normalize_projection_type(
          .                       &mut selcx,
          .                       param_env,
          .                       projection_ty,
        770 ( 0.00%)              cause,
          .                       0,
          .                       &mut obligations,
          .                   );
          .                   self.register_predicate_obligations(infcx, obligations);
          .           
          .                   debug!(?normalized_ty);
          .           
          .                   normalized_ty
          .               }
          .           
    815,892 ( 0.00%)      fn register_predicate_obligation(
          .                   &mut self,
          .                   infcx: &InferCtxt<'_, 'tcx>,
          .                   obligation: PredicateObligation<'tcx>,
          .               ) {
          .                   // this helps to reduce duplicate errors, as well as making
          .                   // debug output much nicer to read and so on.
    407,946 ( 0.00%)          let obligation = infcx.resolve_vars_if_possible(obligation);
          .           
          .                   debug!(?obligation, "register_predicate_obligation");
          .           
    815,892 ( 0.00%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
          .           
    407,946 ( 0.00%)          super::relationships::update(self, infcx, &obligation);
          .           
          .                   self.predicates
          .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
    679,910 ( 0.00%)      }
          .           
    592,728 ( 0.00%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
          .                   {
     74,091 ( 0.00%)              let errors = self.select_where_possible(infcx);
     74,091 ( 0.00%)              if !errors.is_empty() {
         25 ( 0.00%)                  return errors;
          .                       }
          .                   }
          .           
    370,430 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
    518,637 ( 0.00%)      }
          .           
  1,456,660 ( 0.00%)      fn select_where_possible(
          .                   &mut self,
          .                   infcx: &InferCtxt<'_, 'tcx>,
          .               ) -> Vec<FulfillmentError<'tcx>> {
          .                   let mut selcx = SelectionContext::new(infcx);
          .                   self.select(&mut selcx)
  1,310,994 ( 0.00%)      }
          .           
      2,145 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
          .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
      2,860 ( 0.00%)      }
          .           
          .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
        221 ( 0.00%)          &mut self.relationships
        221 ( 0.00%)      }
          .           }
          .           
          .           struct FulfillProcessor<'a, 'b, 'tcx> {
          .               selcx: &'a mut SelectionContext<'b, 'tcx>,
          .               register_region_obligations: bool,
          .           }
          .           
          .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
          .               #[inline(always)]
          .               fn process_obligation(
          .                   &mut self,
          .                   pending_obligation: &mut Self::Obligation,
          .               ) -> ProcessResult<Self::Obligation, Self::Error> {
          .                   // If we were stalled on some unresolved variables, first check whether
          .                   // any of them have been resolved; if not, don't bother doing more work
          .                   // yet.
143,566,461 ( 0.11%)          let change = match pending_obligation.stalled_on.len() {
          .                       // Match arms are in order of frequency, which matters because this
          .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
          .                       1 => {
 37,730,268 ( 0.03%)                  let infer_var = pending_obligation.stalled_on[0];
 12,576,756 ( 0.01%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
          .                       }
          .                       0 => {
          .                           // In this case we haven't changed, but wish to make a change.
          .                           true
          .                       }
          .                       _ => {
          .                           // This `for` loop was once a call to `all()`, but this lower-level
          .                           // form was a perf win. See #64545 for details.
 33,786,810 ( 0.03%)                  (|| {
 67,567,056 ( 0.05%)                      for &infer_var in &pending_obligation.stalled_on {
     23,005 ( 0.00%)                          if self.selcx.infcx().ty_or_const_infer_var_changed(infer_var) {
          .                                       return true;
          .                                   }
          .                               }
          .                               false
          .                           })()
          .                       }
          .                   };
          .           
      8,148 ( 0.00%)          if !change {
          .                       debug!(
          .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
          .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
          .                           pending_obligation.stalled_on
          .                       );
          .                       return ProcessResult::Unchanged;
          .                   }
          .           
    657,441 ( 0.00%)          self.progress_changed_obligations(pending_obligation)
          .               }
          .           
          .               fn process_backedge<'c, I>(
          .                   &mut self,
          .                   cycle: I,
          .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
          .               ) where
          .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
-- line 325 ----------------------------------------
-- line 333 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
          .               // The code calling this method is extremely hot and only rarely
          .               // actually uses this, so move this part of the code
          .               // out of that loop.
          .               #[inline(never)]
  2,191,470 ( 0.00%)      fn progress_changed_obligations(
          .                   &mut self,
          .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
          .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
          .                   pending_obligation.stalled_on.truncate(0);
          .           
          .                   let obligation = &mut pending_obligation.obligation;
          .           
    657,441 ( 0.00%)          if obligation.predicate.has_infer_types_or_consts() {
    104,024 ( 0.00%)              obligation.predicate =
    312,072 ( 0.00%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
          .                   }
          .           
          .                   debug!(?obligation, ?obligation.cause, "process_obligation");
          .           
          .                   let infcx = self.selcx.infcx();
          .           
    230,246 ( 0.00%)          let binder = obligation.predicate.kind();
  1,534,029 ( 0.00%)          match binder.no_bound_vars() {
      1,298 ( 0.00%)              None => match binder.skip_binder() {
          .                           // Evaluation will discard candidates using the leak check.
          .                           // This means we need to pass it the bound version of our
          .                           // predicate.
          .                           ty::PredicateKind::Trait(trait_ref) => {
          .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
          .           
        236 ( 0.00%)                      self.process_trait_obligation(
          .                                   obligation,
        708 ( 0.00%)                          trait_obligation,
          .                                   &mut pending_obligation.stalled_on,
          .                               )
          .                           }
          .                           ty::PredicateKind::Projection(data) => {
          .                               let project_obligation = obligation.with(binder.rebind(data));
          .           
        236 ( 0.00%)                      self.process_projection_obligation(
          .                                   obligation,
        708 ( 0.00%)                          project_obligation,
          .                                   &mut pending_obligation.stalled_on,
          .                               )
          .                           }
          .                           ty::PredicateKind::RegionOutlives(_)
          .                           | ty::PredicateKind::TypeOutlives(_)
          .                           | ty::PredicateKind::WellFormed(_)
          .                           | ty::PredicateKind::ObjectSafe(_)
          .                           | ty::PredicateKind::ClosureKind(..)
-- line 386 ----------------------------------------
-- line 397 ----------------------------------------
          .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
          .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
          .                           }
          .                       },
          .                       Some(pred) => match pred {
          .                           ty::PredicateKind::Trait(data) => {
          .                               let trait_obligation = obligation.with(Binder::dummy(data));
          .           
    539,670 ( 0.00%)                      self.process_trait_obligation(
          .                                   obligation,
  2,374,548 ( 0.00%)                          trait_obligation,
          .                                   &mut pending_obligation.stalled_on,
          .                               )
          .                           }
          .           
          .                           ty::PredicateKind::RegionOutlives(data) => {
     78,636 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
     52,424 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
          .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
     34,744 ( 0.00%)                      if self.register_region_obligations {
     86,850 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
          .                                       t_a,
          .                                       r_b,
          .                                       &obligation.cause,
          .                                   );
          .                               }
          .                               ProcessResult::Changed(vec![])
          .                           }
          .           
          .                           ty::PredicateKind::Projection(ref data) => {
          .                               let project_obligation = obligation.with(Binder::dummy(*data));
          .           
     39,560 ( 0.00%)                      self.process_projection_obligation(
          .                                   obligation,
    118,680 ( 0.00%)                          project_obligation,
          .                                   &mut pending_obligation.stalled_on,
          .                               )
          .                           }
          .           
          .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
        920 ( 0.00%)                      if !self.selcx.tcx().is_object_safe(trait_def_id) {
          .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
          .                               } else {
          .                                   ProcessResult::Changed(vec![])
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
      5,112 ( 0.00%)                      match self.selcx.infcx().closure_kind(closure_substs) {
          .                                   Some(closure_kind) => {
     10,224 ( 0.00%)                              if closure_kind.extends(kind) {
          .                                           ProcessResult::Changed(vec![])
          .                                       } else {
          .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
          .                                       }
          .                                   }
          .                                   None => ProcessResult::Unchanged,
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::WellFormed(arg) => {
    415,702 ( 0.00%)                      match wf::obligations(
          .                                   self.selcx.infcx(),
    118,772 ( 0.00%)                          obligation.param_env,
    118,772 ( 0.00%)                          obligation.cause.body_id,
    178,158 ( 0.00%)                          obligation.recursion_depth + 1,
          .                                   arg,
          .                                   obligation.cause.span,
          .                               ) {
          .                                   None => {
     53,284 ( 0.00%)                              pending_obligation.stalled_on =
     93,247 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
     26,642 ( 0.00%)                              ProcessResult::Unchanged
          .                                   }
    138,195 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::Subtype(subtype) => {
     85,880 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
          .                                   &obligation.cause,
          .                                   obligation.param_env,
          .                                   Binder::dummy(subtype),
          .                               ) {
          .                                   None => {
          .                                       // None means that both are unresolved.
     36,570 ( 0.00%)                              pending_obligation.stalled_on = vec![
      7,314 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
     14,628 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
          .                                       ];
          .                                       ProcessResult::Unchanged
          .                                   }
          .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
          .                                   Some(Err(err)) => {
          .                                       let expected_found =
          .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
          .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 498 ----------------------------------------
          .                                           expected_found,
          .                                           err,
          .                                       ))
          .                                   }
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::Coerce(coerce) => {
      5,200 ( 0.00%)                      match self.selcx.infcx().coerce_predicate(
          .                                   &obligation.cause,
          .                                   obligation.param_env,
          .                                   Binder::dummy(coerce),
          .                               ) {
          .                                   None => {
          .                                       // None means that both are unresolved.
      1,575 ( 0.00%)                              pending_obligation.stalled_on = vec![
        315 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.a).unwrap(),
        630 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.b).unwrap(),
          .                                       ];
          .                                       ProcessResult::Unchanged
          .                                   }
          .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
          .                                   Some(Err(err)) => {
          .                                       let expected_found = ExpectedFound::new(false, coerce.a, coerce.b);
          .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
          .                                           expected_found,
-- line 523 ----------------------------------------
-- line 639 ----------------------------------------
          .                                   }
          .                               }
          .                           }
          .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
          .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
          .                           }
          .                       },
          .                   }
  1,972,323 ( 0.00%)      }
          .           
  2,051,867 ( 0.00%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
          .               fn process_trait_obligation(
          .                   &mut self,
          .                   obligation: &PredicateObligation<'tcx>,
          .                   trait_obligation: TraitObligation<'tcx>,
          .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
          .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
    107,993 ( 0.00%)          let infcx = self.selcx.infcx();
    323,979 ( 0.00%)          if obligation.predicate.is_global() {
          .                       // no type variables present, can use evaluation for better caching.
          .                       // FIXME: consider caching errors too.
     74,258 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
          .                           debug!(
          .                               "selecting trait at depth {} evaluated to holds",
          .                               obligation.recursion_depth
          .                           );
     66,712 ( 0.00%)                  return ProcessResult::Changed(vec![]);
          .                       }
          .                   }
          .           
    522,443 ( 0.00%)          match self.selcx.select(&trait_obligation) {
          .                       Ok(Some(impl_source)) => {
          .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
    965,268 ( 0.00%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
          .                       }
          .                       Ok(None) => {
          .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
          .           
          .                           // This is a bit subtle: for the most part, the
          .                           // only reason we can fail to make progress on
          .                           // trait selection is because we don't have enough
          .                           // information about the types in the trait.
          .                           stalled_on.clear();
          .                           stalled_on.extend(substs_infer_vars(
          .                               self.selcx,
     21,003 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
          .                           ));
          .           
          .                           debug!(
          .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
          .                               infcx.resolve_vars_if_possible(obligation.clone()),
          .                               stalled_on
          .                           );
          .           
     21,003 ( 0.00%)                  ProcessResult::Unchanged
          .                       }
          .                       Err(selection_err) => {
          .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
          .           
        112 ( 0.00%)                  ProcessResult::Error(CodeSelectionError(selection_err))
          .                       }
          .                   }
          .               }
          .           
     87,681 ( 0.00%)      fn process_projection_obligation(
          .                   &mut self,
          .                   obligation: &PredicateObligation<'tcx>,
          .                   project_obligation: PolyProjectionObligation<'tcx>,
          .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
          .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
      7,971 ( 0.00%)          let tcx = self.selcx.tcx();
          .           
     23,913 ( 0.00%)          if obligation.predicate.is_global() {
          .                       // no type variables present, can use evaluation for better caching.
          .                       // FIXME: consider caching errors too.
        384 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
        834 ( 0.00%)                  if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
          .                               &mut self.selcx,
        973 ( 0.00%)                      project_obligation.predicate,
          .                           ) {
          .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
          .                               // evaluated all sub-obligations. We can therefore mark the 'root'
          .                               // obligation as complete, and skip evaluating sub-obligations.
        834 ( 0.00%)                      self.selcx
          .                                   .infcx()
          .                                   .inner
          .                                   .borrow_mut()
          .                                   .projection_cache()
          .                                   .complete(key, EvaluationResult::EvaluatedToOk);
          .                           }
        278 ( 0.00%)                  return ProcessResult::Changed(vec![]);
          .                       } else {
          .                           tracing::debug!("Does NOT hold: {:?}", obligation);
          .                       }
          .                   }
          .           
     54,824 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
          .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
          .                       Ok(Ok(None)) => {
          .                           stalled_on.clear();
          .                           stalled_on.extend(substs_infer_vars(
          .                               self.selcx,
      3,659 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
          .                           ));
      3,659 ( 0.00%)                  ProcessResult::Unchanged
          .                       }
          .                       // Let the caller handle the recursion
          .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
          .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
          .                       ])),
          .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
          .                   }
     63,768 ( 0.00%)      }
          .           }
          .           
          .           /// Returns the set of inference variables contained in `substs`.
          .           fn substs_infer_vars<'a, 'tcx>(
          .               selcx: &mut SelectionContext<'a, 'tcx>,
          .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
          .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
          .               selcx
          .                   .infcx()
          .                   .resolve_vars_if_possible(substs)
          .                   .skip_binder() // ok because this check doesn't care about regions
          .                   .iter()
          .                   .filter(|arg| arg.has_infer_types_or_consts())
          .                   .flat_map(|arg| {
    133,495 ( 0.00%)              let mut walker = arg.walk();
    240,466 ( 0.00%)              while let Some(c) = walker.next() {
     26,738 ( 0.00%)                  if !c.has_infer_types_or_consts() {
          .                               walker.visited.remove(&c);
         10 ( 0.00%)                      walker.skip_current_subtree();
          .                           }
          .                       }
          .                       walker.visited.into_iter()
          .                   })
          .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
          .           }
          .           
          .           fn to_fulfillment_error<'tcx>(
          .               error: Error<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>>,
          .           ) -> FulfillmentError<'tcx> {
          .               let mut iter = error.backtrace.into_iter();
          8 ( 0.00%)      let obligation = iter.next().unwrap().obligation;
          .               // The root obligation is the last item in the backtrace - if there's only
          .               // one item, then it's the same as the main obligation
          .               let root_obligation = iter.next_back().map_or_else(|| obligation.clone(), |e| e.obligation);
        240 ( 0.00%)      FulfillmentError::new(obligation, error.error, root_obligation)
          .           }

 97,770,171 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
4,634,248,304 ( 3.62%)  events annotated

